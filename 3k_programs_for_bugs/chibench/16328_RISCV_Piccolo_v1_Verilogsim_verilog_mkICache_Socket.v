// This program was cloned from: https://github.com/rsnikhil/RISCV_Piccolo_v1
// License: MIT License

//
// Generated by Bluespec Compiler, version 2016.03.beta1 (build 34761, 2016-03-16)
//
// On Sat Jul  9 18:53:27 EDT 2016
//
//
// Ports:
// Name                         I/O  size props
// valid                          O     1
// pc                             O    32
// instr                          O    32
// exc                            O     1
// exc_code                       O     4
// cable_ifc_req_enabled          O     1
// cable_ifc_req_arg_addr         O    32
// CLK                            I     1 unused
// RST_N                          I     1 unused
// req_addr                       I    32
// cable_ifc_valid_result_valid   I     1
// cable_ifc_pc_result_pc         I    32
// cable_ifc_instr_result_instr   I    32
// cable_ifc_exc_result_exc       I     1
// cable_ifc_exc_code_result_exc_code  I     4
// EN_req                         I     1
//
// Combinational paths from inputs to outputs:
//   (req_addr, EN_req) -> cable_ifc_req_arg_addr
//   cable_ifc_valid_result_valid -> valid
//   cable_ifc_pc_result_pc -> pc
//   cable_ifc_instr_result_instr -> instr
//   cable_ifc_exc_result_exc -> exc
//   cable_ifc_exc_code_result_exc_code -> exc_code
//   EN_req -> cable_ifc_req_enabled
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkICache_Socket(CLK,
		       RST_N,

		       req_addr,
		       EN_req,

		       valid,

		       pc,

		       instr,

		       exc,

		       exc_code,

		       cable_ifc_req_enabled,

		       cable_ifc_req_arg_addr,

		       cable_ifc_valid_result_valid,

		       cable_ifc_pc_result_pc,

		       cable_ifc_instr_result_instr,

		       cable_ifc_exc_result_exc,

		       cable_ifc_exc_code_result_exc_code);
  input  CLK;
  input  RST_N;

  // action method req
  input  [31 : 0] req_addr;
  input  EN_req;

  // value method valid
  output valid;

  // value method pc
  output [31 : 0] pc;

  // value method instr
  output [31 : 0] instr;

  // value method exc
  output exc;

  // value method exc_code
  output [3 : 0] exc_code;

  // value method cable_ifc_req_enabled
  output cable_ifc_req_enabled;

  // value method cable_ifc_req_arg_addr
  output [31 : 0] cable_ifc_req_arg_addr;

  // action method cable_ifc_valid_result
  input  cable_ifc_valid_result_valid;

  // action method cable_ifc_pc_result
  input  [31 : 0] cable_ifc_pc_result_pc;

  // action method cable_ifc_instr_result
  input  [31 : 0] cable_ifc_instr_result_instr;

  // action method cable_ifc_exc_result
  input  cable_ifc_exc_result_exc;

  // action method cable_ifc_exc_code_result
  input  [3 : 0] cable_ifc_exc_code_result_exc_code;

  // signals for module outputs
  wire [31 : 0] cable_ifc_req_arg_addr, instr, pc;
  wire [3 : 0] exc_code;
  wire cable_ifc_req_enabled, exc, valid;

  // rule scheduling signals
  wire CAN_FIRE_cable_ifc_exc_code_result,
       CAN_FIRE_cable_ifc_exc_result,
       CAN_FIRE_cable_ifc_instr_result,
       CAN_FIRE_cable_ifc_pc_result,
       CAN_FIRE_cable_ifc_valid_result,
       CAN_FIRE_req,
       WILL_FIRE_cable_ifc_exc_code_result,
       WILL_FIRE_cable_ifc_exc_result,
       WILL_FIRE_cable_ifc_instr_result,
       WILL_FIRE_cable_ifc_pc_result,
       WILL_FIRE_cable_ifc_valid_result,
       WILL_FIRE_req;

  // action method req
  assign CAN_FIRE_req = 1'd1 ;
  assign WILL_FIRE_req = EN_req ;

  // value method valid
  assign valid = cable_ifc_valid_result_valid ;

  // value method pc
  assign pc = cable_ifc_pc_result_pc ;

  // value method instr
  assign instr = cable_ifc_instr_result_instr ;

  // value method exc
  assign exc = cable_ifc_exc_result_exc ;

  // value method exc_code
  assign exc_code = cable_ifc_exc_code_result_exc_code ;

  // value method cable_ifc_req_enabled
  assign cable_ifc_req_enabled = EN_req ;

  // value method cable_ifc_req_arg_addr
  assign cable_ifc_req_arg_addr = req_addr ;

  // action method cable_ifc_valid_result
  assign CAN_FIRE_cable_ifc_valid_result = 1'd1 ;
  assign WILL_FIRE_cable_ifc_valid_result = 1'd1 ;

  // action method cable_ifc_pc_result
  assign CAN_FIRE_cable_ifc_pc_result = 1'd1 ;
  assign WILL_FIRE_cable_ifc_pc_result = 1'd1 ;

  // action method cable_ifc_instr_result
  assign CAN_FIRE_cable_ifc_instr_result = 1'd1 ;
  assign WILL_FIRE_cable_ifc_instr_result = 1'd1 ;

  // action method cable_ifc_exc_result
  assign CAN_FIRE_cable_ifc_exc_result = 1'd1 ;
  assign WILL_FIRE_cable_ifc_exc_result = 1'd1 ;

  // action method cable_ifc_exc_code_result
  assign CAN_FIRE_cable_ifc_exc_code_result = 1'd1 ;
  assign WILL_FIRE_cable_ifc_exc_code_result = 1'd1 ;
endmodule  // mkICache_Socket

