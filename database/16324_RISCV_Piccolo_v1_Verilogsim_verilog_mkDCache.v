// This program was cloned from: https://github.com/rsnikhil/RISCV_Piccolo_v1
// License: MIT License

//
// Generated by Bluespec Compiler, version 2016.03.beta1 (build 34761, 2016-03-16)
//
// On Sat Jul  9 18:53:28 EDT 2016
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_verbosity              O     1 const
// RDY_req_reset                  O     1 const
// RDY_rsp_reset                  O     1 reg
// valid                          O     1
// word                           O    32
// exc                            O     1
// exc_code                       O     4 reg
// txe_req_dmem_fabric_enq_ena    O     1
// txe_req_dmem_fabric_enq_data   O    70
// rxe_rsp_fabric_dmem_deq_ena    O     1
// RDY_dump_stats                 O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_verbosity_verbosity        I    32 reg
// req_op                         I     1 reg
// req_f3                         I     3
// req_addr                       I    32
// req_st_value                   I    32 reg
// txe_req_dmem_fabric_notFull_b  I     1 unused
// txe_req_dmem_fabric_enq_rdy_b  I     1
// rxe_rsp_fabric_dmem_notEmpty_b  I     1 unused
// rxe_rsp_fabric_dmem_first_deq_rdy_b  I     1
// rxe_rsp_fabric_dmem_first_x    I    39
// EN_set_verbosity               I     1
// EN_req_reset                   I     1
// EN_rsp_reset                   I     1
// EN_req                         I     1
// EN_dump_stats                  I     1 unused
//
// Combinational paths from inputs to outputs:
//   (txe_req_dmem_fabric_enq_rdy_b,
//    rxe_rsp_fabric_dmem_first_deq_rdy_b,
//    rxe_rsp_fabric_dmem_first_x) -> valid
//   (txe_req_dmem_fabric_enq_rdy_b,
//    rxe_rsp_fabric_dmem_first_deq_rdy_b,
//    rxe_rsp_fabric_dmem_first_x) -> word
//   txe_req_dmem_fabric_enq_rdy_b -> txe_req_dmem_fabric_enq_ena
//   txe_req_dmem_fabric_enq_rdy_b -> txe_req_dmem_fabric_enq_data
//   (txe_req_dmem_fabric_enq_rdy_b,
//    rxe_rsp_fabric_dmem_first_deq_rdy_b,
//    rxe_rsp_fabric_dmem_first_x,
//    EN_req) -> rxe_rsp_fabric_dmem_deq_ena
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkDCache(CLK,
		RST_N,

		set_verbosity_verbosity,
		EN_set_verbosity,
		RDY_set_verbosity,

		EN_req_reset,
		RDY_req_reset,

		EN_rsp_reset,
		RDY_rsp_reset,

		req_op,
		req_f3,
		req_addr,
		req_st_value,
		EN_req,

		valid,

		word,

		exc,

		exc_code,

		txe_req_dmem_fabric_notFull_b,

		txe_req_dmem_fabric_enq_rdy_b,

		txe_req_dmem_fabric_enq_ena,

		txe_req_dmem_fabric_enq_data,

		rxe_rsp_fabric_dmem_notEmpty_b,

		rxe_rsp_fabric_dmem_first_deq_rdy_b,

		rxe_rsp_fabric_dmem_first_x,

		rxe_rsp_fabric_dmem_deq_ena,

		EN_dump_stats,
		RDY_dump_stats);
  input  CLK;
  input  RST_N;

  // action method set_verbosity
  input  [31 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method req_reset
  input  EN_req_reset;
  output RDY_req_reset;

  // action method rsp_reset
  input  EN_rsp_reset;
  output RDY_rsp_reset;

  // action method req
  input  req_op;
  input  [2 : 0] req_f3;
  input  [31 : 0] req_addr;
  input  [31 : 0] req_st_value;
  input  EN_req;

  // value method valid
  output valid;

  // value method word
  output [31 : 0] word;

  // value method exc
  output exc;

  // value method exc_code
  output [3 : 0] exc_code;

  // action method txe_req_dmem_fabric_notFull
  input  txe_req_dmem_fabric_notFull_b;

  // action method txe_req_dmem_fabric_enq_rdy
  input  txe_req_dmem_fabric_enq_rdy_b;

  // value method txe_req_dmem_fabric_enq_ena
  output txe_req_dmem_fabric_enq_ena;

  // value method txe_req_dmem_fabric_enq_data
  output [69 : 0] txe_req_dmem_fabric_enq_data;

  // action method rxe_rsp_fabric_dmem_notEmpty
  input  rxe_rsp_fabric_dmem_notEmpty_b;

  // action method rxe_rsp_fabric_dmem_first_deq_rdy
  input  rxe_rsp_fabric_dmem_first_deq_rdy_b;

  // action method rxe_rsp_fabric_dmem_first
  input  [38 : 0] rxe_rsp_fabric_dmem_first_x;

  // value method rxe_rsp_fabric_dmem_deq_ena
  output rxe_rsp_fabric_dmem_deq_ena;

  // action method dump_stats
  input  EN_dump_stats;
  output RDY_dump_stats;

  // signals for module outputs
  reg [31 : 0] word;
  wire [69 : 0] txe_req_dmem_fabric_enq_data;
  wire [3 : 0] exc_code;
  wire RDY_dump_stats,
       RDY_req_reset,
       RDY_rsp_reset,
       RDY_set_verbosity,
       exc,
       rxe_rsp_fabric_dmem_deq_ena,
       txe_req_dmem_fabric_enq_ena,
       valid;

  // inlined wires
  wire [3 : 0] ctr_wr_rsps_pending_crg$port0__write_1,
	       ctr_wr_rsps_pending_crg$port1__write_1,
	       ctr_wr_rsps_pending_crg$port2__read;
  wire ctr_wr_rsps_pending_crg$EN_port0__write,
       dw_valid$whas,
       rx_rsp_fabric_dmem_w_ena$whas,
       tx_req_dmem_fabric_w_ena$whas;

  // register cfg_verbosity
  reg [31 : 0] cfg_verbosity;
  wire [31 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register ctr_wr_rsps_pending_crg
  reg [3 : 0] ctr_wr_rsps_pending_crg;
  wire [3 : 0] ctr_wr_rsps_pending_crg$D_IN;
  wire ctr_wr_rsps_pending_crg$EN;

  // register rg_addr
  reg [31 : 0] rg_addr;
  wire [31 : 0] rg_addr$D_IN;
  wire rg_addr$EN;

  // register rg_cset_addr
  reg [7 : 0] rg_cset_addr;
  wire [7 : 0] rg_cset_addr$D_IN;
  wire rg_cset_addr$EN;

  // register rg_exc_code
  reg [3 : 0] rg_exc_code;
  wire [3 : 0] rg_exc_code$D_IN;
  wire rg_exc_code$EN;

  // register rg_f3
  reg [2 : 0] rg_f3;
  wire [2 : 0] rg_f3$D_IN;
  wire rg_f3$EN;

  // register rg_op
  reg rg_op;
  wire rg_op$D_IN, rg_op$EN;

  // register rg_reset_requested
  reg rg_reset_requested;
  wire rg_reset_requested$D_IN, rg_reset_requested$EN;

  // register rg_state
  reg [3 : 0] rg_state;
  reg [3 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // register rg_word
  reg [31 : 0] rg_word;
  wire [31 : 0] rg_word$D_IN;
  wire rg_word$EN;

  // register rg_wordset_in_cache
  reg [10 : 0] rg_wordset_in_cache;
  wire [10 : 0] rg_wordset_in_cache$D_IN;
  wire rg_wordset_in_cache$EN;

  // ports of submodule f_rsp_reset
  wire f_rsp_reset$CLR,
       f_rsp_reset$DEQ,
       f_rsp_reset$EMPTY_N,
       f_rsp_reset$ENQ,
       f_rsp_reset$FULL_N;

  // ports of submodule ram_state_and_ctag_cset
  wire [19 : 0] ram_state_and_ctag_cset$DIA,
		ram_state_and_ctag_cset$DIB,
		ram_state_and_ctag_cset$DOB;
  wire [7 : 0] ram_state_and_ctag_cset$ADDRA, ram_state_and_ctag_cset$ADDRB;
  wire ram_state_and_ctag_cset$ENA,
       ram_state_and_ctag_cset$ENB,
       ram_state_and_ctag_cset$WEA,
       ram_state_and_ctag_cset$WEB;

  // ports of submodule ram_wordset
  reg [31 : 0] ram_wordset$DIB;
  reg [10 : 0] ram_wordset$ADDRB;
  wire [31 : 0] ram_wordset$DIA, ram_wordset$DOB;
  wire [10 : 0] ram_wordset$ADDRA;
  wire ram_wordset$ENA, ram_wordset$ENB, ram_wordset$WEA, ram_wordset$WEB;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_discard_write_rsp,
       CAN_FIRE_RL_rl_exception,
       CAN_FIRE_RL_rl_io_read_rsp,
       CAN_FIRE_RL_rl_io_req,
       CAN_FIRE_RL_rl_process_RAM_outs,
       CAN_FIRE_RL_rl_refill_loop,
       CAN_FIRE_RL_rl_rereq,
       CAN_FIRE_RL_rl_reset,
       CAN_FIRE_RL_rl_start_refill,
       CAN_FIRE_RL_rl_start_reset,
       CAN_FIRE_RL_rl_write_response,
       CAN_FIRE_dump_stats,
       CAN_FIRE_req,
       CAN_FIRE_req_reset,
       CAN_FIRE_rsp_reset,
       CAN_FIRE_rxe_rsp_fabric_dmem_first,
       CAN_FIRE_rxe_rsp_fabric_dmem_first_deq_rdy,
       CAN_FIRE_rxe_rsp_fabric_dmem_notEmpty,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_txe_req_dmem_fabric_enq_rdy,
       CAN_FIRE_txe_req_dmem_fabric_notFull,
       WILL_FIRE_RL_rl_discard_write_rsp,
       WILL_FIRE_RL_rl_exception,
       WILL_FIRE_RL_rl_io_read_rsp,
       WILL_FIRE_RL_rl_io_req,
       WILL_FIRE_RL_rl_process_RAM_outs,
       WILL_FIRE_RL_rl_refill_loop,
       WILL_FIRE_RL_rl_rereq,
       WILL_FIRE_RL_rl_reset,
       WILL_FIRE_RL_rl_start_refill,
       WILL_FIRE_RL_rl_start_reset,
       WILL_FIRE_RL_rl_write_response,
       WILL_FIRE_dump_stats,
       WILL_FIRE_req,
       WILL_FIRE_req_reset,
       WILL_FIRE_rsp_reset,
       WILL_FIRE_rxe_rsp_fabric_dmem_first,
       WILL_FIRE_rxe_rsp_fabric_dmem_first_deq_rdy,
       WILL_FIRE_rxe_rsp_fabric_dmem_notEmpty,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_txe_req_dmem_fabric_enq_rdy,
       WILL_FIRE_txe_req_dmem_fabric_notFull;

  // inputs to muxes for submodule ports
  reg [31 : 0] MUX_dw_output_word$wset_1__VAL_1,
	       MUX_dw_output_word$wset_1__VAL_3,
	       MUX_ram_wordset$a_put_3__VAL_1;
  wire [69 : 0] MUX_tx_req_dmem_fabric_w_data$wset_1__VAL_1,
		MUX_tx_req_dmem_fabric_w_data$wset_1__VAL_2;
  wire [19 : 0] MUX_ram_state_and_ctag_cset$a_put_3__VAL_1;
  wire [10 : 0] MUX_ram_wordset$b_put_2__VAL_1,
		MUX_ram_wordset$b_put_2__VAL_4;
  wire [7 : 0] MUX_rg_cset_addr$write_1__VAL_2;
  wire [3 : 0] MUX_rg_exc_code$write_1__VAL_1,
	       MUX_rg_state$write_1__VAL_2,
	       MUX_rg_state$write_1__VAL_4,
	       MUX_rg_state$write_1__VAL_6,
	       MUX_rg_state$write_1__VAL_8;
  wire MUX_dw_valid$wset_1__SEL_1,
       MUX_ram_state_and_ctag_cset$b_put_1__SEL_1,
       MUX_ram_wordset$a_put_1__SEL_1,
       MUX_ram_wordset$b_put_1__SEL_1,
       MUX_rg_exc_code$write_1__SEL_1,
       MUX_rg_state$write_1__PSEL_3,
       MUX_rg_state$write_1__SEL_3,
       MUX_rg_state$write_1__SEL_4,
       MUX_rg_state$write_1__SEL_5,
       MUX_rg_state$write_1__SEL_6,
       MUX_rg_state$write_1__SEL_7,
       MUX_rg_state$write_1__SEL_8,
       MUX_rg_state$write_1__SEL_9,
       MUX_tx_req_dmem_fabric_w_data$wset_1__SEL_1;

  // remaining internal signals
  reg [31 : 0] CASE_rg_addr_BITS_1_TO_0_0b0_new_word2605_0b10_ETC__q16,
	       CASE_rg_addr_BITS_1_TO_0_0b0_new_word2672_0b10_ETC__q17,
	       CASE_rg_addr_BITS_1_TO_0_0b0_new_word719_0b10__ETC__q14,
	       CASE_rg_addr_BITS_1_TO_0_0b0_new_word786_0b10__ETC__q15,
	       IF_rg_addr_4_BITS_1_TO_0_3_EQ_0b0_1_THEN_0_CON_ETC___d292,
	       IF_rg_addr_4_BITS_1_TO_0_3_EQ_0b0_1_THEN_0_CON_ETC___d92,
	       IF_rg_addr_4_BITS_1_TO_0_3_EQ_0b0_1_THEN_SEXT__ETC___d284,
	       IF_rg_addr_4_BITS_1_TO_0_3_EQ_0b0_1_THEN_SEXT__ETC___d83,
	       IF_rg_addr_4_BITS_1_TO_0_3_EQ_0b0_1_THEN_ram_w_ETC___d134,
	       IF_rg_addr_4_BITS_1_TO_0_3_EQ_0b0_1_THEN_ram_w_ETC___d139,
	       v__h10953,
	       v__h10959,
	       v__h11060,
	       v__h11066,
	       v__h11144,
	       v__h11150,
	       v__h11368,
	       v__h11374,
	       v__h11567,
	       v__h11573,
	       v__h11826,
	       v__h11832,
	       v__h12086,
	       v__h12092,
	       v__h13120,
	       v__h13126,
	       v__h13159,
	       v__h13165,
	       v__h14154,
	       v__h14160,
	       v__h1981,
	       v__h1987,
	       v__h2202,
	       v__h2208,
	       v__h8486,
	       v__h8492,
	       v__h8714,
	       v__h8720,
	       v__h9354,
	       v__h9360,
	       v__h9565,
	       v__h9571,
	       v__h9919,
	       v__h9925;
  reg [2 : 0] IF_rg_f3_9_BITS_1_TO_0_45_EQ_0b0_50_THEN_0_ELS_ETC___d155;
  wire [31 : 0] new_word__h12275,
		new_word__h12324,
		new_word__h12373,
		new_word__h12422,
		new_word__h12480,
		new_word__h12509,
		new_word__h12538,
		new_word__h12567,
		new_word__h12605,
		new_word__h12635,
		new_word__h12672,
		new_word__h12702,
		new_word__h3197,
		new_word__h6438,
		new_word__h6487,
		new_word__h6536,
		new_word__h6594,
		new_word__h6623,
		new_word__h6652,
		new_word__h6681,
		new_word__h6719,
		new_word__h6749,
		new_word__h6786,
		new_word__h6816,
		new_word__h7366,
		new_word__h7493,
		new_word__h7563,
		new_word__h7613,
		new_word__h7672,
		new_word__h7721,
		rxe_rsp_fabric_dmem_first_x_BITS_31_TO_0__q1,
		word__h3004,
		x__h7086,
		y__h3232;
  wire [15 : 0] rxe_rsp_fabric_dmem_first_x_BITS_31_TO_0_BITS__ETC__q6,
		rxe_rsp_fabric_dmem_first_x_BITS_31_TO_0_BITS__ETC__q7,
		word004_BITS_15_TO_0__q11,
		word004_BITS_31_TO_16__q13;
  wire [7 : 0] rxe_rsp_fabric_dmem_first_x_BITS_31_TO_0_BITS__ETC__q2,
	       rxe_rsp_fabric_dmem_first_x_BITS_31_TO_0_BITS__ETC__q3,
	       rxe_rsp_fabric_dmem_first_x_BITS_31_TO_0_BITS__ETC__q4,
	       rxe_rsp_fabric_dmem_first_x_BITS_31_TO_0_BITS__ETC__q5,
	       word004_BITS_15_TO_8__q8,
	       word004_BITS_23_TO_16__q12,
	       word004_BITS_31_TO_24__q9,
	       word004_BITS_7_TO_0__q10;
  wire [3 : 0] b__h12826;
  wire NOT_cfg_verbosity_read__1_SLE_1_7___d38,
       NOT_ram_state_and_ctag_cset_b_read__1_BIT_19_2_ETC___d116,
       _dfoo1,
       _dor1ctr_wr_rsps_pending_crg$EN_port0__write,
       ram_state_and_ctag_cset_b_read__1_BITS_18_TO_0_ETC___d26,
       ram_state_and_ctag_cset_b_read__1_BIT_19_2_AND_ETC___d142,
       req_f3_BITS_1_TO_0_33_EQ_0b0_34_OR_req_f3_BITS_ETC___d358,
       req_f3_BITS_1_TO_0_33_EQ_0b0_34_OR_req_f3_BITS_ETC___d362;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method req_reset
  assign RDY_req_reset = 1'd1 ;
  assign CAN_FIRE_req_reset = 1'd1 ;
  assign WILL_FIRE_req_reset = EN_req_reset ;

  // action method rsp_reset
  assign RDY_rsp_reset = f_rsp_reset$EMPTY_N ;
  assign CAN_FIRE_rsp_reset = f_rsp_reset$EMPTY_N ;
  assign WILL_FIRE_rsp_reset = EN_rsp_reset ;

  // action method req
  assign CAN_FIRE_req = 1'd1 ;
  assign WILL_FIRE_req = EN_req ;

  // value method valid
  assign valid = dw_valid$whas ;

  // value method word
  always@(MUX_dw_valid$wset_1__SEL_1 or
	  MUX_dw_output_word$wset_1__VAL_1 or
	  WILL_FIRE_RL_rl_write_response or
	  rg_addr or
	  WILL_FIRE_RL_rl_io_read_rsp or MUX_dw_output_word$wset_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dw_valid$wset_1__SEL_1: word = MUX_dw_output_word$wset_1__VAL_1;
      WILL_FIRE_RL_rl_write_response: word = rg_addr;
      WILL_FIRE_RL_rl_io_read_rsp: word = MUX_dw_output_word$wset_1__VAL_3;
      default: word = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end

  // value method exc
  assign exc = rg_state == 4'd3 ;

  // value method exc_code
  assign exc_code = rg_exc_code ;

  // action method txe_req_dmem_fabric_notFull
  assign CAN_FIRE_txe_req_dmem_fabric_notFull = 1'd1 ;
  assign WILL_FIRE_txe_req_dmem_fabric_notFull = 1'd1 ;

  // action method txe_req_dmem_fabric_enq_rdy
  assign CAN_FIRE_txe_req_dmem_fabric_enq_rdy = 1'd1 ;
  assign WILL_FIRE_txe_req_dmem_fabric_enq_rdy = 1'd1 ;

  // value method txe_req_dmem_fabric_enq_ena
  assign txe_req_dmem_fabric_enq_ena = tx_req_dmem_fabric_w_ena$whas ;

  // value method txe_req_dmem_fabric_enq_data
  assign txe_req_dmem_fabric_enq_data =
	     MUX_tx_req_dmem_fabric_w_data$wset_1__SEL_1 ?
	       MUX_tx_req_dmem_fabric_w_data$wset_1__VAL_1 :
	       MUX_tx_req_dmem_fabric_w_data$wset_1__VAL_2 ;

  // action method rxe_rsp_fabric_dmem_notEmpty
  assign CAN_FIRE_rxe_rsp_fabric_dmem_notEmpty = 1'd1 ;
  assign WILL_FIRE_rxe_rsp_fabric_dmem_notEmpty = 1'd1 ;

  // action method rxe_rsp_fabric_dmem_first_deq_rdy
  assign CAN_FIRE_rxe_rsp_fabric_dmem_first_deq_rdy = 1'd1 ;
  assign WILL_FIRE_rxe_rsp_fabric_dmem_first_deq_rdy = 1'd1 ;

  // action method rxe_rsp_fabric_dmem_first
  assign CAN_FIRE_rxe_rsp_fabric_dmem_first = 1'd1 ;
  assign WILL_FIRE_rxe_rsp_fabric_dmem_first = 1'd1 ;

  // value method rxe_rsp_fabric_dmem_deq_ena
  assign rxe_rsp_fabric_dmem_deq_ena = rx_rsp_fabric_dmem_w_ena$whas ;

  // action method dump_stats
  assign RDY_dump_stats = 1'd1 ;
  assign CAN_FIRE_dump_stats = 1'd1 ;
  assign WILL_FIRE_dump_stats = EN_dump_stats ;

  // submodule f_rsp_reset
  FIFO20 #(.guarded(32'd1)) f_rsp_reset(.RST(RST_N),
					.CLK(CLK),
					.ENQ(f_rsp_reset$ENQ),
					.DEQ(f_rsp_reset$DEQ),
					.CLR(f_rsp_reset$CLR),
					.FULL_N(f_rsp_reset$FULL_N),
					.EMPTY_N(f_rsp_reset$EMPTY_N));

  // submodule ram_state_and_ctag_cset
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd8),
	  .DATA_WIDTH(32'd20),
	  .MEMSIZE(9'd256)) ram_state_and_ctag_cset(.CLKA(CLK),
						    .CLKB(CLK),
						    .ADDRA(ram_state_and_ctag_cset$ADDRA),
						    .ADDRB(ram_state_and_ctag_cset$ADDRB),
						    .DIA(ram_state_and_ctag_cset$DIA),
						    .DIB(ram_state_and_ctag_cset$DIB),
						    .WEA(ram_state_and_ctag_cset$WEA),
						    .WEB(ram_state_and_ctag_cset$WEB),
						    .ENA(ram_state_and_ctag_cset$ENA),
						    .ENB(ram_state_and_ctag_cset$ENB),
						    .DOA(),
						    .DOB(ram_state_and_ctag_cset$DOB));

  // submodule ram_wordset
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) ram_wordset(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(ram_wordset$ADDRA),
					  .ADDRB(ram_wordset$ADDRB),
					  .DIA(ram_wordset$DIA),
					  .DIB(ram_wordset$DIB),
					  .WEA(ram_wordset$WEA),
					  .WEB(ram_wordset$WEB),
					  .ENA(ram_wordset$ENA),
					  .ENB(ram_wordset$ENB),
					  .DOA(),
					  .DOB(ram_wordset$DOB));

  // rule RL_rl_reset
  assign CAN_FIRE_RL_rl_reset =
	     (rg_cset_addr != 8'd255 || f_rsp_reset$FULL_N) &&
	     rg_state == 4'd1 ;
  assign WILL_FIRE_RL_rl_reset = CAN_FIRE_RL_rl_reset ;

  // rule RL_rl_exception
  assign CAN_FIRE_RL_rl_exception = rg_state == 4'd3 ;
  assign WILL_FIRE_RL_rl_exception = rg_state == 4'd3 ;

  // rule RL_rl_process_RAM_outs
  assign CAN_FIRE_RL_rl_process_RAM_outs =
	     (ram_state_and_ctag_cset$DOB[19] &&
	      ram_state_and_ctag_cset_b_read__1_BITS_18_TO_0_ETC___d26 ||
	      rg_op ||
	      txe_req_dmem_fabric_enq_rdy_b) &&
	     (!rg_op || txe_req_dmem_fabric_enq_rdy_b) &&
	     rg_state == 4'd4 ;
  assign WILL_FIRE_RL_rl_process_RAM_outs = CAN_FIRE_RL_rl_process_RAM_outs ;

  // rule RL_rl_start_refill
  assign CAN_FIRE_RL_rl_start_refill = rg_state == 4'd5 ;
  assign WILL_FIRE_RL_rl_start_refill = MUX_rg_state$write_1__SEL_7 ;

  // rule RL_rl_refill_loop
  assign CAN_FIRE_RL_rl_refill_loop =
	     rxe_rsp_fabric_dmem_first_deq_rdy_b && rg_state == 4'd6 &&
	     !rxe_rsp_fabric_dmem_first_x[36] &&
	     rxe_rsp_fabric_dmem_first_x[35:33] == 3'd4 ;
  assign WILL_FIRE_RL_rl_refill_loop = CAN_FIRE_RL_rl_refill_loop && !EN_req ;

  // rule RL_rl_rereq
  assign CAN_FIRE_RL_rl_rereq = rg_state == 4'd7 ;
  assign WILL_FIRE_RL_rl_rereq = MUX_rg_state$write_1__SEL_5 ;

  // rule RL_rl_write_response
  assign CAN_FIRE_RL_rl_write_response = rg_state == 4'd8 ;
  assign WILL_FIRE_RL_rl_write_response = CAN_FIRE_RL_rl_write_response ;

  // rule RL_rl_io_req
  assign CAN_FIRE_RL_rl_io_req = MUX_rg_state$write_1__SEL_4 ;
  assign WILL_FIRE_RL_rl_io_req = MUX_rg_state$write_1__SEL_4 ;

  // rule RL_rl_io_read_rsp
  assign CAN_FIRE_RL_rl_io_read_rsp = MUX_rg_state$write_1__PSEL_3 ;
  assign WILL_FIRE_RL_rl_io_read_rsp = MUX_rg_state$write_1__PSEL_3 ;

  // rule RL_rl_start_reset
  assign CAN_FIRE_RL_rl_start_reset = rg_reset_requested ;
  assign WILL_FIRE_RL_rl_start_reset = rg_reset_requested ;

  // rule RL_rl_discard_write_rsp
  assign CAN_FIRE_RL_rl_discard_write_rsp =
	     b__h12826 != 4'd0 && rxe_rsp_fabric_dmem_first_deq_rdy_b &&
	     rxe_rsp_fabric_dmem_first_x[36] ;
  assign WILL_FIRE_RL_rl_discard_write_rsp =
	     CAN_FIRE_RL_rl_discard_write_rsp &&
	     !WILL_FIRE_RL_rl_io_read_rsp &&
	     !WILL_FIRE_RL_rl_refill_loop ;

  // inputs to muxes for submodule ports
  assign MUX_dw_valid$wset_1__SEL_1 =
	     WILL_FIRE_RL_rl_process_RAM_outs &&
	     ram_state_and_ctag_cset$DOB[19] &&
	     ram_state_and_ctag_cset_b_read__1_BITS_18_TO_0_ETC___d26 &&
	     !rg_op ;
  assign MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 =
	     EN_req &&
	     req_f3_BITS_1_TO_0_33_EQ_0b0_34_OR_req_f3_BITS_ETC___d358 ;
  assign MUX_ram_wordset$a_put_1__SEL_1 =
	     WILL_FIRE_RL_rl_process_RAM_outs &&
	     ram_state_and_ctag_cset$DOB[19] &&
	     ram_state_and_ctag_cset_b_read__1_BITS_18_TO_0_ETC___d26 &&
	     rg_op ;
  assign MUX_ram_wordset$b_put_1__SEL_1 =
	     WILL_FIRE_RL_rl_refill_loop &&
	     !rxe_rsp_fabric_dmem_first_x[32] &&
	     rg_wordset_in_cache[2:0] != 3'd7 ;
  assign MUX_rg_exc_code$write_1__SEL_1 =
	     EN_req && req_f3[1:0] != 2'b0 &&
	     (req_f3[1:0] != 2'b01 || req_addr[0]) &&
	     (req_f3[1:0] != 2'b10 || req_addr[1:0] != 2'b0) ;
  assign MUX_rg_state$write_1__PSEL_3 =
	     rxe_rsp_fabric_dmem_first_deq_rdy_b && rg_state == 4'd10 &&
	     !rxe_rsp_fabric_dmem_first_x[36] ;
  assign MUX_rg_state$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_io_read_rsp && rxe_rsp_fabric_dmem_first_x[32] ;
  assign MUX_rg_state$write_1__SEL_4 =
	     txe_req_dmem_fabric_enq_rdy_b && rg_state == 4'd9 ;
  assign MUX_rg_state$write_1__SEL_5 = CAN_FIRE_RL_rl_rereq && !EN_req ;
  assign MUX_rg_state$write_1__SEL_6 =
	     WILL_FIRE_RL_rl_refill_loop &&
	     (rxe_rsp_fabric_dmem_first_x[32] ||
	      rg_wordset_in_cache[2:0] == 3'd7) ;
  assign MUX_rg_state$write_1__SEL_7 =
	     CAN_FIRE_RL_rl_start_refill && !EN_req ;
  assign MUX_rg_state$write_1__SEL_8 =
	     WILL_FIRE_RL_rl_process_RAM_outs && _dfoo1 ;
  assign MUX_rg_state$write_1__SEL_9 =
	     WILL_FIRE_RL_rl_reset && rg_cset_addr == 8'd255 ;
  assign MUX_tx_req_dmem_fabric_w_data$wset_1__SEL_1 =
	     WILL_FIRE_RL_rl_process_RAM_outs && _dfoo1 ;
  always@(rg_f3 or
	  word__h3004 or
	  IF_rg_addr_4_BITS_1_TO_0_3_EQ_0b0_1_THEN_SEXT__ETC___d83 or
	  CASE_rg_addr_BITS_1_TO_0_0b0_new_word719_0b10__ETC__q14 or
	  IF_rg_addr_4_BITS_1_TO_0_3_EQ_0b0_1_THEN_0_CON_ETC___d92 or
	  CASE_rg_addr_BITS_1_TO_0_0b0_new_word786_0b10__ETC__q15)
  begin
    case (rg_f3)
      3'b0:
	  MUX_dw_output_word$wset_1__VAL_1 =
	      IF_rg_addr_4_BITS_1_TO_0_3_EQ_0b0_1_THEN_SEXT__ETC___d83;
      3'b001:
	  MUX_dw_output_word$wset_1__VAL_1 =
	      CASE_rg_addr_BITS_1_TO_0_0b0_new_word719_0b10__ETC__q14;
      3'b100:
	  MUX_dw_output_word$wset_1__VAL_1 =
	      IF_rg_addr_4_BITS_1_TO_0_3_EQ_0b0_1_THEN_0_CON_ETC___d92;
      3'b101:
	  MUX_dw_output_word$wset_1__VAL_1 =
	      CASE_rg_addr_BITS_1_TO_0_0b0_new_word786_0b10__ETC__q15;
      default: MUX_dw_output_word$wset_1__VAL_1 = word__h3004;
    endcase
  end
  always@(rg_f3 or
	  rxe_rsp_fabric_dmem_first_x or
	  IF_rg_addr_4_BITS_1_TO_0_3_EQ_0b0_1_THEN_SEXT__ETC___d284 or
	  CASE_rg_addr_BITS_1_TO_0_0b0_new_word2605_0b10_ETC__q16 or
	  IF_rg_addr_4_BITS_1_TO_0_3_EQ_0b0_1_THEN_0_CON_ETC___d292 or
	  CASE_rg_addr_BITS_1_TO_0_0b0_new_word2672_0b10_ETC__q17)
  begin
    case (rg_f3)
      3'b0:
	  MUX_dw_output_word$wset_1__VAL_3 =
	      IF_rg_addr_4_BITS_1_TO_0_3_EQ_0b0_1_THEN_SEXT__ETC___d284;
      3'b001:
	  MUX_dw_output_word$wset_1__VAL_3 =
	      CASE_rg_addr_BITS_1_TO_0_0b0_new_word2605_0b10_ETC__q16;
      3'b100:
	  MUX_dw_output_word$wset_1__VAL_3 =
	      IF_rg_addr_4_BITS_1_TO_0_3_EQ_0b0_1_THEN_0_CON_ETC___d292;
      3'b101:
	  MUX_dw_output_word$wset_1__VAL_3 =
	      CASE_rg_addr_BITS_1_TO_0_0b0_new_word2672_0b10_ETC__q17;
      default: MUX_dw_output_word$wset_1__VAL_3 =
		   rxe_rsp_fabric_dmem_first_x[31:0];
    endcase
  end
  assign MUX_ram_state_and_ctag_cset$a_put_3__VAL_1 =
	     { 1'd1, rg_addr[31:13] } ;
  always@(rg_f3 or
	  rg_word or
	  IF_rg_addr_4_BITS_1_TO_0_3_EQ_0b0_1_THEN_ram_w_ETC___d134 or
	  IF_rg_addr_4_BITS_1_TO_0_3_EQ_0b0_1_THEN_ram_w_ETC___d139)
  begin
    case (rg_f3)
      3'b0:
	  MUX_ram_wordset$a_put_3__VAL_1 =
	      IF_rg_addr_4_BITS_1_TO_0_3_EQ_0b0_1_THEN_ram_w_ETC___d134;
      3'b001:
	  MUX_ram_wordset$a_put_3__VAL_1 =
	      IF_rg_addr_4_BITS_1_TO_0_3_EQ_0b0_1_THEN_ram_w_ETC___d139;
      default: MUX_ram_wordset$a_put_3__VAL_1 = rg_word;
    endcase
  end
  assign MUX_ram_wordset$b_put_2__VAL_1 = rg_wordset_in_cache + 11'd1 ;
  assign MUX_ram_wordset$b_put_2__VAL_4 = { rg_addr[12:5], 3'd0 } ;
  assign MUX_rg_cset_addr$write_1__VAL_2 = rg_cset_addr + 8'd1 ;
  assign MUX_rg_exc_code$write_1__VAL_1 = rg_op ? 4'h6 : 4'h4 ;
  assign MUX_rg_state$write_1__VAL_2 =
	     (req_f3[1:0] != 2'b0 && (req_f3[1:0] != 2'b01 || req_addr[0]) &&
	      (req_f3[1:0] != 2'b10 || req_addr[1:0] != 2'b0)) ?
	       4'd3 :
	       ((req_addr[31:30] == 2'd0) ? 4'd4 : 4'd9) ;
  assign MUX_rg_state$write_1__VAL_4 = rg_op ? 4'd8 : 4'd10 ;
  assign MUX_rg_state$write_1__VAL_6 =
	     rxe_rsp_fabric_dmem_first_x[32] ? 4'd3 : 4'd7 ;
  assign MUX_rg_state$write_1__VAL_8 =
	     ((!ram_state_and_ctag_cset$DOB[19] ||
	       !ram_state_and_ctag_cset_b_read__1_BITS_18_TO_0_ETC___d26) &&
	      !rg_op) ?
	       4'd5 :
	       4'd8 ;
  assign MUX_tx_req_dmem_fabric_w_data$wset_1__VAL_1 =
	     ((!ram_state_and_ctag_cset$DOB[19] ||
	       !ram_state_and_ctag_cset_b_read__1_BITS_18_TO_0_ETC___d26) &&
	      !rg_op) ?
	       { 6'd36, x__h7086, 32'hAAAAAAAA } :
	       { 3'd5,
		 IF_rg_f3_9_BITS_1_TO_0_45_EQ_0b0_50_THEN_0_ELS_ETC___d155,
		 rg_addr,
		 rg_word } ;
  assign MUX_tx_req_dmem_fabric_w_data$wset_1__VAL_2 =
	     { 2'd2,
	       rg_op,
	       IF_rg_f3_9_BITS_1_TO_0_45_EQ_0b0_50_THEN_0_ELS_ETC___d155,
	       rg_addr,
	       rg_word } ;

  // inlined wires
  assign tx_req_dmem_fabric_w_ena$whas =
	     WILL_FIRE_RL_rl_process_RAM_outs && _dfoo1 ||
	     WILL_FIRE_RL_rl_io_req ;
  assign rx_rsp_fabric_dmem_w_ena$whas =
	     WILL_FIRE_RL_rl_discard_write_rsp ||
	     WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_refill_loop ;
  assign dw_valid$whas =
	     WILL_FIRE_RL_rl_process_RAM_outs &&
	     ram_state_and_ctag_cset$DOB[19] &&
	     ram_state_and_ctag_cset_b_read__1_BITS_18_TO_0_ETC___d26 &&
	     !rg_op ||
	     WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_write_response ||
	     WILL_FIRE_RL_rl_exception ;
  assign ctr_wr_rsps_pending_crg$EN_port0__write =
	     _dor1ctr_wr_rsps_pending_crg$EN_port0__write && rg_op ;
  assign ctr_wr_rsps_pending_crg$port0__write_1 =
	     ctr_wr_rsps_pending_crg + 4'd1 ;
  assign ctr_wr_rsps_pending_crg$port1__write_1 = b__h12826 - 4'd1 ;
  assign ctr_wr_rsps_pending_crg$port2__read =
	     WILL_FIRE_RL_rl_discard_write_rsp ?
	       ctr_wr_rsps_pending_crg$port1__write_1 :
	       b__h12826 ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cfg_verbosity$EN = EN_set_verbosity ;

  // register ctr_wr_rsps_pending_crg
  assign ctr_wr_rsps_pending_crg$D_IN = ctr_wr_rsps_pending_crg$port2__read ;
  assign ctr_wr_rsps_pending_crg$EN = 1'b1 ;

  // register rg_addr
  assign rg_addr$D_IN = req_addr ;
  assign rg_addr$EN = EN_req ;

  // register rg_cset_addr
  assign rg_cset_addr$D_IN =
	     rg_reset_requested ? 8'd0 : MUX_rg_cset_addr$write_1__VAL_2 ;
  assign rg_cset_addr$EN = WILL_FIRE_RL_rl_reset || rg_reset_requested ;

  // register rg_exc_code
  assign rg_exc_code$D_IN =
	     MUX_rg_exc_code$write_1__SEL_1 ?
	       MUX_rg_exc_code$write_1__VAL_1 :
	       4'h5 ;
  assign rg_exc_code$EN =
	     (WILL_FIRE_RL_rl_io_read_rsp || WILL_FIRE_RL_rl_refill_loop) &&
	     rxe_rsp_fabric_dmem_first_x[32] ||
	     EN_req && req_f3[1:0] != 2'b0 &&
	     (req_f3[1:0] != 2'b01 || req_addr[0]) &&
	     (req_f3[1:0] != 2'b10 || req_addr[1:0] != 2'b0) ;

  // register rg_f3
  assign rg_f3$D_IN = req_f3 ;
  assign rg_f3$EN = EN_req ;

  // register rg_op
  assign rg_op$D_IN = req_op ;
  assign rg_op$EN = EN_req ;

  // register rg_reset_requested
  assign rg_reset_requested$D_IN = EN_req_reset ;
  assign rg_reset_requested$EN = rg_reset_requested || EN_req_reset ;

  // register rg_state
  always@(rg_reset_requested or
	  EN_req or
	  MUX_rg_state$write_1__VAL_2 or
	  MUX_rg_state$write_1__SEL_3 or
	  WILL_FIRE_RL_rl_io_req or
	  MUX_rg_state$write_1__VAL_4 or
	  WILL_FIRE_RL_rl_rereq or
	  MUX_rg_state$write_1__SEL_6 or
	  MUX_rg_state$write_1__VAL_6 or
	  WILL_FIRE_RL_rl_start_refill or
	  MUX_rg_state$write_1__SEL_8 or
	  MUX_rg_state$write_1__VAL_8 or MUX_rg_state$write_1__SEL_9)
  case (1'b1)
    rg_reset_requested: rg_state$D_IN = 4'd1;
    EN_req: rg_state$D_IN = MUX_rg_state$write_1__VAL_2;
    MUX_rg_state$write_1__SEL_3: rg_state$D_IN = 4'd3;
    WILL_FIRE_RL_rl_io_req: rg_state$D_IN = MUX_rg_state$write_1__VAL_4;
    WILL_FIRE_RL_rl_rereq: rg_state$D_IN = 4'd4;
    MUX_rg_state$write_1__SEL_6: rg_state$D_IN = MUX_rg_state$write_1__VAL_6;
    WILL_FIRE_RL_rl_start_refill: rg_state$D_IN = 4'd6;
    MUX_rg_state$write_1__SEL_8: rg_state$D_IN = MUX_rg_state$write_1__VAL_8;
    MUX_rg_state$write_1__SEL_9: rg_state$D_IN = 4'd2;
    default: rg_state$D_IN = 4'b1010 /* unspecified value */ ;
  endcase
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_reset && rg_cset_addr == 8'd255 ||
	     WILL_FIRE_RL_rl_io_read_rsp && rxe_rsp_fabric_dmem_first_x[32] ||
	     WILL_FIRE_RL_rl_refill_loop &&
	     (rxe_rsp_fabric_dmem_first_x[32] ||
	      rg_wordset_in_cache[2:0] == 3'd7) ||
	     WILL_FIRE_RL_rl_process_RAM_outs && _dfoo1 ||
	     WILL_FIRE_RL_rl_io_req ||
	     EN_req ||
	     rg_reset_requested ||
	     WILL_FIRE_RL_rl_rereq ||
	     WILL_FIRE_RL_rl_start_refill ;

  // register rg_word
  assign rg_word$D_IN = req_st_value ;
  assign rg_word$EN = EN_req ;

  // register rg_wordset_in_cache
  assign rg_wordset_in_cache$D_IN =
	     MUX_ram_wordset$b_put_1__SEL_1 ?
	       MUX_ram_wordset$b_put_2__VAL_1 :
	       MUX_ram_wordset$b_put_2__VAL_4 ;
  assign rg_wordset_in_cache$EN =
	     WILL_FIRE_RL_rl_refill_loop &&
	     !rxe_rsp_fabric_dmem_first_x[32] &&
	     rg_wordset_in_cache[2:0] != 3'd7 ||
	     WILL_FIRE_RL_rl_start_refill ;

  // submodule f_rsp_reset
  assign f_rsp_reset$ENQ = WILL_FIRE_RL_rl_reset && rg_cset_addr == 8'd255 ;
  assign f_rsp_reset$DEQ = EN_rsp_reset ;
  assign f_rsp_reset$CLR = 1'b0 ;

  // submodule ram_state_and_ctag_cset
  assign ram_state_and_ctag_cset$ADDRA =
	     WILL_FIRE_RL_rl_start_refill ? rg_addr[12:5] : rg_cset_addr ;
  assign ram_state_and_ctag_cset$ADDRB =
	     MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       req_addr[12:5] :
	       rg_addr[12:5] ;
  assign ram_state_and_ctag_cset$DIA =
	     WILL_FIRE_RL_rl_start_refill ?
	       MUX_ram_state_and_ctag_cset$a_put_3__VAL_1 :
	       20'd174762 ;
  assign ram_state_and_ctag_cset$DIB =
	     MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       20'b10101010101010101010 /* unspecified value */  :
	       20'b10101010101010101010 /* unspecified value */  ;
  assign ram_state_and_ctag_cset$WEA = 1'd1 ;
  assign ram_state_and_ctag_cset$WEB = 1'd0 ;
  assign ram_state_and_ctag_cset$ENA =
	     WILL_FIRE_RL_rl_start_refill || WILL_FIRE_RL_rl_reset ;
  assign ram_state_and_ctag_cset$ENB =
	     EN_req &&
	     req_f3_BITS_1_TO_0_33_EQ_0b0_34_OR_req_f3_BITS_ETC___d358 ||
	     WILL_FIRE_RL_rl_rereq ;

  // submodule ram_wordset
  assign ram_wordset$ADDRA =
	     MUX_ram_wordset$a_put_1__SEL_1 ?
	       rg_addr[12:2] :
	       rg_wordset_in_cache ;
  always@(MUX_ram_wordset$b_put_1__SEL_1 or
	  MUX_ram_wordset$b_put_2__VAL_1 or
	  MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  req_addr or
	  WILL_FIRE_RL_rl_rereq or
	  rg_addr or
	  WILL_FIRE_RL_rl_start_refill or MUX_ram_wordset$b_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ram_wordset$b_put_1__SEL_1:
	  ram_wordset$ADDRB = MUX_ram_wordset$b_put_2__VAL_1;
      MUX_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  ram_wordset$ADDRB = req_addr[12:2];
      WILL_FIRE_RL_rl_rereq: ram_wordset$ADDRB = rg_addr[12:2];
      WILL_FIRE_RL_rl_start_refill:
	  ram_wordset$ADDRB = MUX_ram_wordset$b_put_2__VAL_4;
      default: ram_wordset$ADDRB = 11'b01010101010 /* unspecified value */ ;
    endcase
  end
  assign ram_wordset$DIA =
	     MUX_ram_wordset$a_put_1__SEL_1 ?
	       MUX_ram_wordset$a_put_3__VAL_1 :
	       rxe_rsp_fabric_dmem_first_x[31:0] ;
  always@(MUX_ram_wordset$b_put_1__SEL_1 or
	  MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  WILL_FIRE_RL_rl_rereq or WILL_FIRE_RL_rl_start_refill)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ram_wordset$b_put_1__SEL_1:
	  ram_wordset$DIB = 32'hAAAAAAAA /* unspecified value */ ;
      MUX_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  ram_wordset$DIB = 32'hAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_rl_rereq:
	  ram_wordset$DIB = 32'hAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_rl_start_refill:
	  ram_wordset$DIB = 32'hAAAAAAAA /* unspecified value */ ;
      default: ram_wordset$DIB = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ram_wordset$WEA = 1'd1 ;
  assign ram_wordset$WEB = 1'd0 ;
  assign ram_wordset$ENA =
	     WILL_FIRE_RL_rl_process_RAM_outs &&
	     ram_state_and_ctag_cset$DOB[19] &&
	     ram_state_and_ctag_cset_b_read__1_BITS_18_TO_0_ETC___d26 &&
	     rg_op ||
	     WILL_FIRE_RL_rl_refill_loop && !rxe_rsp_fabric_dmem_first_x[32] ;
  assign ram_wordset$ENB =
	     WILL_FIRE_RL_rl_refill_loop &&
	     !rxe_rsp_fabric_dmem_first_x[32] &&
	     rg_wordset_in_cache[2:0] != 3'd7 ||
	     EN_req &&
	     req_f3_BITS_1_TO_0_33_EQ_0b0_34_OR_req_f3_BITS_ETC___d358 ||
	     WILL_FIRE_RL_rl_rereq ||
	     WILL_FIRE_RL_rl_start_refill ;

  // remaining internal signals
  assign NOT_cfg_verbosity_read__1_SLE_1_7___d38 =
	     (cfg_verbosity ^ 32'h80000000) > 32'h80000001 ;
  assign NOT_ram_state_and_ctag_cset_b_read__1_BIT_19_2_ETC___d116 =
	     (!ram_state_and_ctag_cset$DOB[19] ||
	      !ram_state_and_ctag_cset_b_read__1_BITS_18_TO_0_ETC___d26) &&
	     !rg_op &&
	     NOT_cfg_verbosity_read__1_SLE_1_7___d38 ;
  assign _dfoo1 =
	     !ram_state_and_ctag_cset$DOB[19] ||
	     !ram_state_and_ctag_cset_b_read__1_BITS_18_TO_0_ETC___d26 ||
	     rg_op ;
  assign _dor1ctr_wr_rsps_pending_crg$EN_port0__write =
	     WILL_FIRE_RL_rl_io_req || WILL_FIRE_RL_rl_process_RAM_outs ;
  assign b__h12826 =
	     ctr_wr_rsps_pending_crg$EN_port0__write ?
	       ctr_wr_rsps_pending_crg$port0__write_1 :
	       ctr_wr_rsps_pending_crg ;
  assign new_word__h12275 =
	     { {24{rxe_rsp_fabric_dmem_first_x_BITS_31_TO_0_BITS__ETC__q4[7]}},
	       rxe_rsp_fabric_dmem_first_x_BITS_31_TO_0_BITS__ETC__q4 } ;
  assign new_word__h12324 =
	     { {24{rxe_rsp_fabric_dmem_first_x_BITS_31_TO_0_BITS__ETC__q2[7]}},
	       rxe_rsp_fabric_dmem_first_x_BITS_31_TO_0_BITS__ETC__q2 } ;
  assign new_word__h12373 =
	     { {24{rxe_rsp_fabric_dmem_first_x_BITS_31_TO_0_BITS__ETC__q5[7]}},
	       rxe_rsp_fabric_dmem_first_x_BITS_31_TO_0_BITS__ETC__q5 } ;
  assign new_word__h12422 =
	     { {24{rxe_rsp_fabric_dmem_first_x_BITS_31_TO_0_BITS__ETC__q3[7]}},
	       rxe_rsp_fabric_dmem_first_x_BITS_31_TO_0_BITS__ETC__q3 } ;
  assign new_word__h12480 =
	     { 24'd0, rxe_rsp_fabric_dmem_first_x_BITS_31_TO_0__q1[7:0] } ;
  assign new_word__h12509 =
	     { 24'd0, rxe_rsp_fabric_dmem_first_x_BITS_31_TO_0__q1[15:8] } ;
  assign new_word__h12538 =
	     { 24'd0, rxe_rsp_fabric_dmem_first_x_BITS_31_TO_0__q1[23:16] } ;
  assign new_word__h12567 =
	     { 24'd0, rxe_rsp_fabric_dmem_first_x_BITS_31_TO_0__q1[31:24] } ;
  assign new_word__h12605 =
	     { {16{rxe_rsp_fabric_dmem_first_x_BITS_31_TO_0_BITS__ETC__q6[15]}},
	       rxe_rsp_fabric_dmem_first_x_BITS_31_TO_0_BITS__ETC__q6 } ;
  assign new_word__h12635 =
	     { {16{rxe_rsp_fabric_dmem_first_x_BITS_31_TO_0_BITS__ETC__q7[15]}},
	       rxe_rsp_fabric_dmem_first_x_BITS_31_TO_0_BITS__ETC__q7 } ;
  assign new_word__h12672 =
	     { 16'd0, rxe_rsp_fabric_dmem_first_x_BITS_31_TO_0__q1[15:0] } ;
  assign new_word__h12702 =
	     { 16'd0, rxe_rsp_fabric_dmem_first_x_BITS_31_TO_0__q1[31:16] } ;
  assign new_word__h3197 =
	     { {24{word004_BITS_7_TO_0__q10[7]}}, word004_BITS_7_TO_0__q10 } ;
  assign new_word__h6438 =
	     { {24{word004_BITS_15_TO_8__q8[7]}}, word004_BITS_15_TO_8__q8 } ;
  assign new_word__h6487 =
	     { {24{word004_BITS_23_TO_16__q12[7]}},
	       word004_BITS_23_TO_16__q12 } ;
  assign new_word__h6536 =
	     { {24{word004_BITS_31_TO_24__q9[7]}},
	       word004_BITS_31_TO_24__q9 } ;
  assign new_word__h6594 = { 24'd0, word__h3004[7:0] } ;
  assign new_word__h6623 = { 24'd0, word__h3004[15:8] } ;
  assign new_word__h6652 = { 24'd0, word__h3004[23:16] } ;
  assign new_word__h6681 = { 24'd0, word__h3004[31:24] } ;
  assign new_word__h6719 =
	     { {16{word004_BITS_15_TO_0__q11[15]}},
	       word004_BITS_15_TO_0__q11 } ;
  assign new_word__h6749 =
	     { {16{word004_BITS_31_TO_16__q13[15]}},
	       word004_BITS_31_TO_16__q13 } ;
  assign new_word__h6786 = { 16'd0, word__h3004[15:0] } ;
  assign new_word__h6816 = { 16'd0, word__h3004[31:16] } ;
  assign new_word__h7366 = { ram_wordset$DOB[31:8], rg_word[7:0] } ;
  assign new_word__h7493 =
	     { ram_wordset$DOB[31:16], rg_word[7:0], ram_wordset$DOB[7:0] } ;
  assign new_word__h7563 =
	     { ram_wordset$DOB[31:24], rg_word[7:0], ram_wordset$DOB[15:0] } ;
  assign new_word__h7613 = { rg_word[7:0], ram_wordset$DOB[23:0] } ;
  assign new_word__h7672 = { ram_wordset$DOB[31:16], rg_word[15:0] } ;
  assign new_word__h7721 = { rg_word[15:0], ram_wordset$DOB[15:0] } ;
  assign ram_state_and_ctag_cset_b_read__1_BITS_18_TO_0_ETC___d26 =
	     ram_state_and_ctag_cset$DOB[18:0] == rg_addr[31:13] ;
  assign ram_state_and_ctag_cset_b_read__1_BIT_19_2_AND_ETC___d142 =
	     ram_state_and_ctag_cset$DOB[19] &&
	     ram_state_and_ctag_cset_b_read__1_BITS_18_TO_0_ETC___d26 &&
	     rg_op &&
	     NOT_cfg_verbosity_read__1_SLE_1_7___d38 ;
  assign req_f3_BITS_1_TO_0_33_EQ_0b0_34_OR_req_f3_BITS_ETC___d358 =
	     (req_f3[1:0] == 2'b0 || req_f3[1:0] == 2'b01 && !req_addr[0] ||
	      req_f3[1:0] == 2'b10 && req_addr[1:0] == 2'b0) &&
	     req_addr[31:30] == 2'd0 ;
  assign req_f3_BITS_1_TO_0_33_EQ_0b0_34_OR_req_f3_BITS_ETC___d362 =
	     (req_f3[1:0] == 2'b0 || req_f3[1:0] == 2'b01 && !req_addr[0] ||
	      req_f3[1:0] == 2'b10 && req_addr[1:0] == 2'b0) &&
	     req_addr[31:30] == 2'd0 &&
	     NOT_cfg_verbosity_read__1_SLE_1_7___d38 ;
  assign rxe_rsp_fabric_dmem_first_x_BITS_31_TO_0_BITS__ETC__q2 =
	     rxe_rsp_fabric_dmem_first_x_BITS_31_TO_0__q1[15:8] ;
  assign rxe_rsp_fabric_dmem_first_x_BITS_31_TO_0_BITS__ETC__q3 =
	     rxe_rsp_fabric_dmem_first_x_BITS_31_TO_0__q1[31:24] ;
  assign rxe_rsp_fabric_dmem_first_x_BITS_31_TO_0_BITS__ETC__q4 =
	     rxe_rsp_fabric_dmem_first_x_BITS_31_TO_0__q1[7:0] ;
  assign rxe_rsp_fabric_dmem_first_x_BITS_31_TO_0_BITS__ETC__q5 =
	     rxe_rsp_fabric_dmem_first_x_BITS_31_TO_0__q1[23:16] ;
  assign rxe_rsp_fabric_dmem_first_x_BITS_31_TO_0_BITS__ETC__q6 =
	     rxe_rsp_fabric_dmem_first_x_BITS_31_TO_0__q1[15:0] ;
  assign rxe_rsp_fabric_dmem_first_x_BITS_31_TO_0_BITS__ETC__q7 =
	     rxe_rsp_fabric_dmem_first_x_BITS_31_TO_0__q1[31:16] ;
  assign rxe_rsp_fabric_dmem_first_x_BITS_31_TO_0__q1 =
	     rxe_rsp_fabric_dmem_first_x[31:0] ;
  assign word004_BITS_15_TO_0__q11 = word__h3004[15:0] ;
  assign word004_BITS_15_TO_8__q8 = word__h3004[15:8] ;
  assign word004_BITS_23_TO_16__q12 = word__h3004[23:16] ;
  assign word004_BITS_31_TO_16__q13 = word__h3004[31:16] ;
  assign word004_BITS_31_TO_24__q9 = word__h3004[31:24] ;
  assign word004_BITS_7_TO_0__q10 = word__h3004[7:0] ;
  assign word__h3004 = ram_wordset$DOB & y__h3232 ;
  assign x__h7086 = { rg_addr[31:5], 5'd0 } ;
  assign y__h3232 =
	     {32{ram_state_and_ctag_cset$DOB[19] &&
		 ram_state_and_ctag_cset_b_read__1_BITS_18_TO_0_ETC___d26}} ;
  always@(rg_addr or rg_word or new_word__h7672 or new_word__h7721)
  begin
    case (rg_addr[1:0])
      2'b0:
	  IF_rg_addr_4_BITS_1_TO_0_3_EQ_0b0_1_THEN_ram_w_ETC___d139 =
	      new_word__h7672;
      2'b10:
	  IF_rg_addr_4_BITS_1_TO_0_3_EQ_0b0_1_THEN_ram_w_ETC___d139 =
	      new_word__h7721;
      default: IF_rg_addr_4_BITS_1_TO_0_3_EQ_0b0_1_THEN_ram_w_ETC___d139 =
		   rg_word;
    endcase
  end
  always@(rg_addr or
	  rg_word or
	  new_word__h7366 or
	  new_word__h7493 or new_word__h7563 or new_word__h7613)
  begin
    case (rg_addr[1:0])
      2'b0:
	  IF_rg_addr_4_BITS_1_TO_0_3_EQ_0b0_1_THEN_ram_w_ETC___d134 =
	      new_word__h7366;
      2'b01:
	  IF_rg_addr_4_BITS_1_TO_0_3_EQ_0b0_1_THEN_ram_w_ETC___d134 =
	      new_word__h7493;
      2'b10:
	  IF_rg_addr_4_BITS_1_TO_0_3_EQ_0b0_1_THEN_ram_w_ETC___d134 =
	      new_word__h7563;
      2'b11:
	  IF_rg_addr_4_BITS_1_TO_0_3_EQ_0b0_1_THEN_ram_w_ETC___d134 =
	      new_word__h7613;
    endcase
  end
  always@(rg_addr or
	  word__h3004 or
	  new_word__h3197 or
	  new_word__h6438 or new_word__h6487 or new_word__h6536)
  begin
    case (rg_addr[1:0])
      2'b0:
	  IF_rg_addr_4_BITS_1_TO_0_3_EQ_0b0_1_THEN_SEXT__ETC___d83 =
	      new_word__h3197;
      2'b01:
	  IF_rg_addr_4_BITS_1_TO_0_3_EQ_0b0_1_THEN_SEXT__ETC___d83 =
	      new_word__h6438;
      2'b10:
	  IF_rg_addr_4_BITS_1_TO_0_3_EQ_0b0_1_THEN_SEXT__ETC___d83 =
	      new_word__h6487;
      2'b11:
	  IF_rg_addr_4_BITS_1_TO_0_3_EQ_0b0_1_THEN_SEXT__ETC___d83 =
	      new_word__h6536;
    endcase
  end
  always@(rg_addr or
	  rxe_rsp_fabric_dmem_first_x or
	  new_word__h12480 or
	  new_word__h12509 or new_word__h12538 or new_word__h12567)
  begin
    case (rg_addr[1:0])
      2'b0:
	  IF_rg_addr_4_BITS_1_TO_0_3_EQ_0b0_1_THEN_0_CON_ETC___d292 =
	      new_word__h12480;
      2'b01:
	  IF_rg_addr_4_BITS_1_TO_0_3_EQ_0b0_1_THEN_0_CON_ETC___d292 =
	      new_word__h12509;
      2'b10:
	  IF_rg_addr_4_BITS_1_TO_0_3_EQ_0b0_1_THEN_0_CON_ETC___d292 =
	      new_word__h12538;
      2'b11:
	  IF_rg_addr_4_BITS_1_TO_0_3_EQ_0b0_1_THEN_0_CON_ETC___d292 =
	      new_word__h12567;
    endcase
  end
  always@(rg_f3)
  begin
    case (rg_f3[1:0])
      2'b0: IF_rg_f3_9_BITS_1_TO_0_45_EQ_0b0_50_THEN_0_ELS_ETC___d155 = 3'd0;
      2'b01: IF_rg_f3_9_BITS_1_TO_0_45_EQ_0b0_50_THEN_0_ELS_ETC___d155 = 3'd1;
      default: IF_rg_f3_9_BITS_1_TO_0_45_EQ_0b0_50_THEN_0_ELS_ETC___d155 =
		   3'd2;
    endcase
  end
  always@(rg_addr or
	  word__h3004 or
	  new_word__h6594 or
	  new_word__h6623 or new_word__h6652 or new_word__h6681)
  begin
    case (rg_addr[1:0])
      2'b0:
	  IF_rg_addr_4_BITS_1_TO_0_3_EQ_0b0_1_THEN_0_CON_ETC___d92 =
	      new_word__h6594;
      2'b01:
	  IF_rg_addr_4_BITS_1_TO_0_3_EQ_0b0_1_THEN_0_CON_ETC___d92 =
	      new_word__h6623;
      2'b10:
	  IF_rg_addr_4_BITS_1_TO_0_3_EQ_0b0_1_THEN_0_CON_ETC___d92 =
	      new_word__h6652;
      2'b11:
	  IF_rg_addr_4_BITS_1_TO_0_3_EQ_0b0_1_THEN_0_CON_ETC___d92 =
	      new_word__h6681;
    endcase
  end
  always@(rg_addr or
	  rxe_rsp_fabric_dmem_first_x or
	  new_word__h12275 or
	  new_word__h12324 or new_word__h12373 or new_word__h12422)
  begin
    case (rg_addr[1:0])
      2'b0:
	  IF_rg_addr_4_BITS_1_TO_0_3_EQ_0b0_1_THEN_SEXT__ETC___d284 =
	      new_word__h12275;
      2'b01:
	  IF_rg_addr_4_BITS_1_TO_0_3_EQ_0b0_1_THEN_SEXT__ETC___d284 =
	      new_word__h12324;
      2'b10:
	  IF_rg_addr_4_BITS_1_TO_0_3_EQ_0b0_1_THEN_SEXT__ETC___d284 =
	      new_word__h12373;
      2'b11:
	  IF_rg_addr_4_BITS_1_TO_0_3_EQ_0b0_1_THEN_SEXT__ETC___d284 =
	      new_word__h12422;
    endcase
  end
  always@(rg_addr or word__h3004 or new_word__h6719 or new_word__h6749)
  begin
    case (rg_addr[1:0])
      2'b0:
	  CASE_rg_addr_BITS_1_TO_0_0b0_new_word719_0b10__ETC__q14 =
	      new_word__h6719;
      2'b10:
	  CASE_rg_addr_BITS_1_TO_0_0b0_new_word719_0b10__ETC__q14 =
	      new_word__h6749;
      default: CASE_rg_addr_BITS_1_TO_0_0b0_new_word719_0b10__ETC__q14 =
		   word__h3004;
    endcase
  end
  always@(rg_addr or word__h3004 or new_word__h6786 or new_word__h6816)
  begin
    case (rg_addr[1:0])
      2'b0:
	  CASE_rg_addr_BITS_1_TO_0_0b0_new_word786_0b10__ETC__q15 =
	      new_word__h6786;
      2'b10:
	  CASE_rg_addr_BITS_1_TO_0_0b0_new_word786_0b10__ETC__q15 =
	      new_word__h6816;
      default: CASE_rg_addr_BITS_1_TO_0_0b0_new_word786_0b10__ETC__q15 =
		   word__h3004;
    endcase
  end
  always@(rg_addr or
	  rxe_rsp_fabric_dmem_first_x or new_word__h12605 or new_word__h12635)
  begin
    case (rg_addr[1:0])
      2'b0:
	  CASE_rg_addr_BITS_1_TO_0_0b0_new_word2605_0b10_ETC__q16 =
	      new_word__h12605;
      2'b10:
	  CASE_rg_addr_BITS_1_TO_0_0b0_new_word2605_0b10_ETC__q16 =
	      new_word__h12635;
      default: CASE_rg_addr_BITS_1_TO_0_0b0_new_word2605_0b10_ETC__q16 =
		   rxe_rsp_fabric_dmem_first_x[31:0];
    endcase
  end
  always@(rg_addr or
	  rxe_rsp_fabric_dmem_first_x or new_word__h12672 or new_word__h12702)
  begin
    case (rg_addr[1:0])
      2'b0:
	  CASE_rg_addr_BITS_1_TO_0_0b0_new_word2672_0b10_ETC__q17 =
	      new_word__h12672;
      2'b10:
	  CASE_rg_addr_BITS_1_TO_0_0b0_new_word2672_0b10_ETC__q17 =
	      new_word__h12702;
      default: CASE_rg_addr_BITS_1_TO_0_0b0_new_word2672_0b10_ETC__q17 =
		   rxe_rsp_fabric_dmem_first_x[31:0];
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rg_cset_addr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_exc_code <= `BSV_ASSIGNMENT_DELAY 4'hA;
	rg_reset_requested <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (ctr_wr_rsps_pending_crg$EN)
	  ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY
	      ctr_wr_rsps_pending_crg$D_IN;
	if (rg_cset_addr$EN)
	  rg_cset_addr <= `BSV_ASSIGNMENT_DELAY rg_cset_addr$D_IN;
	if (rg_exc_code$EN)
	  rg_exc_code <= `BSV_ASSIGNMENT_DELAY rg_exc_code$D_IN;
	if (rg_reset_requested$EN)
	  rg_reset_requested <= `BSV_ASSIGNMENT_DELAY rg_reset_requested$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
      end
    if (rg_addr$EN) rg_addr <= `BSV_ASSIGNMENT_DELAY rg_addr$D_IN;
    if (rg_f3$EN) rg_f3 <= `BSV_ASSIGNMENT_DELAY rg_f3$D_IN;
    if (rg_op$EN) rg_op <= `BSV_ASSIGNMENT_DELAY rg_op$D_IN;
    if (rg_word$EN) rg_word <= `BSV_ASSIGNMENT_DELAY rg_word$D_IN;
    if (rg_wordset_in_cache$EN)
      rg_wordset_in_cache <= `BSV_ASSIGNMENT_DELAY rg_wordset_in_cache$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_verbosity = 32'hAAAAAAAA;
    ctr_wr_rsps_pending_crg = 4'hA;
    rg_addr = 32'hAAAAAAAA;
    rg_cset_addr = 8'hAA;
    rg_exc_code = 4'hA;
    rg_f3 = 3'h2;
    rg_op = 1'h0;
    rg_reset_requested = 1'h0;
    rg_state = 4'hA;
    rg_word = 32'hAAAAAAAA;
    rg_wordset_in_cache = 11'h2AA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_addr == 8'd255 &&
	  cfg_verbosity != 32'd0)
	begin
	  v__h1987 = $stime;
	  #0;
	end
    v__h1981 = v__h1987 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_addr == 8'd255 &&
	  cfg_verbosity != 32'd0)
	$display("%0d: DCache.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		 v__h1981,
		 $signed(32'd256),
		 $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	begin
	  v__h2208 = $stime;
	  #0;
	end
    v__h2202 = v__h2208 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$display("%0d: DCache: rl_process_RAM_outs; addr %0h",
		 v__h2202,
		 rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$display("        addr = (CTag 0x%0x CSet 0x%0x Word 0x%0x Byte 0x%0x)",
		 rg_addr[31:13],
		 rg_addr[12:5],
		 rg_addr[4:2],
		 rg_addr[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write("        CSet 0x%0x: (state, tag):", rg_addr[12:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write(" (");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38 &&
	  ram_state_and_ctag_cset$DOB[19])
	$write("CTAG_CLEAN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38 &&
	  !ram_state_and_ctag_cset$DOB[19])
	$write("CTAG_EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38 &&
	  ram_state_and_ctag_cset$DOB[19])
	$write(", 0x%0x", ram_state_and_ctag_cset$DOB[18:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38 &&
	  !ram_state_and_ctag_cset$DOB[19])
	$write(", --");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write(")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write("        CSet 0x%0x, Word 0x%0x: ",
	       rg_addr[12:5],
	       rg_addr[4:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write(" 0x%0x", ram_wordset$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs &&
	  ram_state_and_ctag_cset$DOB[19] &&
	  ram_state_and_ctag_cset_b_read__1_BITS_18_TO_0_ETC___d26 &&
	  !rg_op &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$display("        Read-hit: addr 0x%0h word 0x%0h",
		 rg_addr,
		 word__h3004);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs &&
	  NOT_ram_state_and_ctag_cset_b_read__1_BIT_19_2_ETC___d116)
	$write("        Read Miss: -> CACHE_START_REFILL. Mem req: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs &&
	  NOT_ram_state_and_ctag_cset_b_read__1_BIT_19_2_ETC___d116)
	$write("Fabric_Req { ", "initiator_id: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs &&
	  NOT_ram_state_and_ctag_cset_b_read__1_BIT_19_2_ETC___d116)
	$write("'h%h", 2'd2);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs &&
	  NOT_ram_state_and_ctag_cset_b_read__1_BIT_19_2_ETC___d116)
	$write(", ", "op: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs &&
	  NOT_ram_state_and_ctag_cset_b_read__1_BIT_19_2_ETC___d116)
	$write("FABRIC_REQ_RD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs &&
	  NOT_ram_state_and_ctag_cset_b_read__1_BIT_19_2_ETC___d116)
	$write(", ", "size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs &&
	  NOT_ram_state_and_ctag_cset_b_read__1_BIT_19_2_ETC___d116)
	$write("FABRIC_REQ_BURST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs &&
	  NOT_ram_state_and_ctag_cset_b_read__1_BIT_19_2_ETC___d116)
	$write(", ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs &&
	  NOT_ram_state_and_ctag_cset_b_read__1_BIT_19_2_ETC___d116)
	$write("'h%h", x__h7086);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs &&
	  NOT_ram_state_and_ctag_cset_b_read__1_BIT_19_2_ETC___d116)
	$write(", ", "word: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs &&
	  NOT_ram_state_and_ctag_cset_b_read__1_BIT_19_2_ETC___d116)
	$write("'h%h", 32'hAAAAAAAA, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs &&
	  NOT_ram_state_and_ctag_cset_b_read__1_BIT_19_2_ETC___d116)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs &&
	  ram_state_and_ctag_cset_b_read__1_BIT_19_2_AND_ETC___d142)
	$display("        Write-Hit: addr 0x%0h word 0x%0h",
		 rg_addr,
		 rg_word);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs &&
	  ram_state_and_ctag_cset_b_read__1_BIT_19_2_AND_ETC___d142)
	$write("        New WordSet:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs &&
	  ram_state_and_ctag_cset_b_read__1_BIT_19_2_AND_ETC___d142)
	$write("        CSet 0x%0x, Word 0x%0x: ",
	       rg_addr[12:5],
	       rg_addr[4:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs &&
	  ram_state_and_ctag_cset_b_read__1_BIT_19_2_AND_ETC___d142)
	$write(" 0x%0x", MUX_ram_wordset$a_put_3__VAL_1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs &&
	  ram_state_and_ctag_cset_b_read__1_BIT_19_2_AND_ETC___d142)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs &&
	  (!ram_state_and_ctag_cset$DOB[19] ||
	   !ram_state_and_ctag_cset_b_read__1_BITS_18_TO_0_ETC___d26) &&
	  rg_op &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$display("        Write-Miss: addr 0x%0h word 0x%0h",
		 rg_addr,
		 rg_word);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs && rg_op && rg_f3[1:0] == 2'b11)
	begin
	  v__h8492 = $stime;
	  #0;
	end
    v__h8486 = v__h8492 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs && rg_op && rg_f3[1:0] == 2'b11)
	$display("%0d: ERROR: DCache.rl_process_RAM_outs: f3 for 64b in RV32",
		 v__h8486);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs && rg_op && rg_f3[1:0] == 2'b11)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs && rg_op &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	begin
	  v__h8720 = $stime;
	  #0;
	end
    v__h8714 = v__h8720 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs && rg_op &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	$display("%0d: ERROR: CreditCounter: wraparound", v__h8714);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs && rg_op &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs && rg_op &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$display("        Write-Hit/Miss: addr 0x%0h word 0x%0h",
		 rg_addr,
		 rg_word);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs && rg_op &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs && rg_op &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write("Fabric_Req { ", "initiator_id: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs && rg_op &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write("'h%h", 2'd2);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs && rg_op &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write(", ", "op: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs && rg_op &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write("FABRIC_REQ_WR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs && rg_op &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write(", ", "size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs && rg_op &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38 &&
	  IF_rg_f3_9_BITS_1_TO_0_45_EQ_0b0_50_THEN_0_ELS_ETC___d155 == 3'd0)
	$write("FABRIC_REQ_8b");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs && rg_op &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38 &&
	  IF_rg_f3_9_BITS_1_TO_0_45_EQ_0b0_50_THEN_0_ELS_ETC___d155 == 3'd1)
	$write("FABRIC_REQ_16b");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs && rg_op &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38 &&
	  IF_rg_f3_9_BITS_1_TO_0_45_EQ_0b0_50_THEN_0_ELS_ETC___d155 == 3'd2)
	$write("FABRIC_REQ_32b");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs && rg_op &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38 &&
	  IF_rg_f3_9_BITS_1_TO_0_45_EQ_0b0_50_THEN_0_ELS_ETC___d155 == 3'd3)
	$write("FABRIC_REQ_64b");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs && rg_op &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38 &&
	  IF_rg_f3_9_BITS_1_TO_0_45_EQ_0b0_50_THEN_0_ELS_ETC___d155 != 3'd0 &&
	  IF_rg_f3_9_BITS_1_TO_0_45_EQ_0b0_50_THEN_0_ELS_ETC___d155 != 3'd1 &&
	  IF_rg_f3_9_BITS_1_TO_0_45_EQ_0b0_50_THEN_0_ELS_ETC___d155 != 3'd2 &&
	  IF_rg_f3_9_BITS_1_TO_0_45_EQ_0b0_50_THEN_0_ELS_ETC___d155 != 3'd3)
	$write("FABRIC_REQ_BURST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs && rg_op &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write(", ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs && rg_op &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write("'h%h", rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs && rg_op &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write(", ", "word: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs && rg_op &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write("'h%h", rg_word, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_RAM_outs && rg_op &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_refill &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	begin
	  v__h9360 = $stime;
	  #0;
	end
    v__h9354 = v__h9360 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_refill &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$display("%0d: DCache.rl_start_refill. Victim way is %0d",
		 v__h9354,
		 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_refill_loop &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	begin
	  v__h9571 = $stime;
	  #0;
	end
    v__h9565 = v__h9571 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_refill_loop &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write("%0d: DCache.rl_refill_loop: ", v__h9565);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_refill_loop &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write("Fabric_Rsp { ", "initiator_id: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_refill_loop &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write("'h%h", rxe_rsp_fabric_dmem_first_x[38:37]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_refill_loop &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write(", ", "op: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_refill_loop &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write("FABRIC_REQ_RD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_refill_loop &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write(", ", "size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_refill_loop &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write("FABRIC_REQ_BURST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_refill_loop &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write(", ", "status: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_refill_loop &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38 &&
	  !rxe_rsp_fabric_dmem_first_x[32])
	$write("FABRIC_RSP_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_refill_loop &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38 &&
	  rxe_rsp_fabric_dmem_first_x[32])
	$write("FABRIC_RSP_ERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_refill_loop &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write(", ", "word: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_refill_loop &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write("'h%h", rxe_rsp_fabric_dmem_first_x[31:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_refill_loop &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_refill_loop && rxe_rsp_fabric_dmem_first_x[32] &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	begin
	  v__h9925 = $stime;
	  #0;
	end
    v__h9919 = v__h9925 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_refill_loop && rxe_rsp_fabric_dmem_first_x[32] &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$display("%0d: DCache.rl_refill_loop: FABRIC_RSP_ERR: raising trap FAULT_LOAD",
		 v__h9919);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_refill_loop && !rxe_rsp_fabric_dmem_first_x[32] &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$display("        Updating Cache [0x%0x] (WordSet %0d) old => new",
		 rg_wordset_in_cache,
		 rg_wordset_in_cache[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_refill_loop && !rxe_rsp_fabric_dmem_first_x[32] &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write("        CSet 0x%0x, Word 0x%0x: ",
	       rg_addr[12:5],
	       rg_addr[4:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_refill_loop && !rxe_rsp_fabric_dmem_first_x[32] &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write(" 0x%0x", ram_wordset$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_refill_loop && !rxe_rsp_fabric_dmem_first_x[32] &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_refill_loop && !rxe_rsp_fabric_dmem_first_x[32] &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write("        CSet 0x%0x, Word 0x%0x: ",
	       rg_addr[12:5],
	       rg_addr[4:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_refill_loop && !rxe_rsp_fabric_dmem_first_x[32] &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write(" 0x%0x", rxe_rsp_fabric_dmem_first_x[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_refill_loop && !rxe_rsp_fabric_dmem_first_x[32] &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_rereq && NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	begin
	  v__h10959 = $stime;
	  #0;
	end
    v__h10953 = v__h10959 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_rereq && NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$display("%0d: DCache: fa_probe_RAMS tagCSet [0x%0x] wordSet [0x%0d]",
		 v__h10953,
		 rg_addr[12:5],
		 rg_addr[12:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	begin
	  v__h11066 = $stime;
	  #0;
	end
    v__h11060 = v__h11066 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$display("%0d: DCache.rl_write_response", v__h11060);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_req && NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	begin
	  v__h11150 = $stime;
	  #0;
	end
    v__h11144 = v__h11150 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_req && NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write("%0d: DCache: rl_io_req; op ", v__h11144);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_req && NOT_cfg_verbosity_read__1_SLE_1_7___d38 &&
	  rg_op)
	$write("DCACHE_W");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_req && NOT_cfg_verbosity_read__1_SLE_1_7___d38 &&
	  !rg_op)
	$write("DCACHE_R");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_req && NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write(" addr %0h f3 0x%0h word 0x%0h",
	       rg_addr,
	       rg_f3,
	       rg_word,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_req && rg_f3[1:0] == 2'b11)
	begin
	  v__h11374 = $stime;
	  #0;
	end
    v__h11368 = v__h11374 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_req && rg_f3[1:0] == 2'b11)
	$display("%0d: ERROR: DCache.rl_io_req: f3 for 64b in RV32",
		 v__h11368);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_req && rg_f3[1:0] == 2'b11) $finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_req && rg_op && ctr_wr_rsps_pending_crg == 4'd15)
	begin
	  v__h11573 = $stime;
	  #0;
	end
    v__h11567 = v__h11573 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_req && rg_op && ctr_wr_rsps_pending_crg == 4'd15)
	$display("%0d: ERROR: CreditCounter: wraparound", v__h11567);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_req && rg_op && ctr_wr_rsps_pending_crg == 4'd15)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	begin
	  v__h11832 = $stime;
	  #0;
	end
    v__h11826 = v__h11832 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write("%0d: DCache.rl_io_read_rsp: ", v__h11826);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write("Fabric_Rsp { ", "initiator_id: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write("'h%h", rxe_rsp_fabric_dmem_first_x[38:37]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write(", ", "op: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write("FABRIC_REQ_RD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write(", ", "size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38 &&
	  rxe_rsp_fabric_dmem_first_x[35:33] == 3'd0)
	$write("FABRIC_REQ_8b");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38 &&
	  rxe_rsp_fabric_dmem_first_x[35:33] == 3'd1)
	$write("FABRIC_REQ_16b");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38 &&
	  rxe_rsp_fabric_dmem_first_x[35:33] == 3'd2)
	$write("FABRIC_REQ_32b");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38 &&
	  rxe_rsp_fabric_dmem_first_x[35:33] == 3'd3)
	$write("FABRIC_REQ_64b");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38 &&
	  rxe_rsp_fabric_dmem_first_x[35:33] != 3'd0 &&
	  rxe_rsp_fabric_dmem_first_x[35:33] != 3'd1 &&
	  rxe_rsp_fabric_dmem_first_x[35:33] != 3'd2 &&
	  rxe_rsp_fabric_dmem_first_x[35:33] != 3'd3)
	$write("FABRIC_REQ_BURST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write(", ", "status: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38 &&
	  !rxe_rsp_fabric_dmem_first_x[32])
	$write("FABRIC_RSP_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38 &&
	  rxe_rsp_fabric_dmem_first_x[32])
	$write("FABRIC_RSP_ERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write(", ", "word: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write("'h%h", rxe_rsp_fabric_dmem_first_x[31:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$display("        addr 0x%0h word 0x%0h",
		 rg_addr,
		 rxe_rsp_fabric_dmem_first_x[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && rxe_rsp_fabric_dmem_first_x[32] &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	begin
	  v__h12092 = $stime;
	  #0;
	end
    v__h12086 = v__h12092 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && rxe_rsp_fabric_dmem_first_x[32] &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$display("%0d: DCache.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap FAULT_LOAD",
		 v__h12086);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && req_f3_BITS_1_TO_0_33_EQ_0b0_34_OR_req_f3_BITS_ETC___d362)
	begin
	  v__h14160 = $stime;
	  #0;
	end
    v__h14154 = v__h14160 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && req_f3_BITS_1_TO_0_33_EQ_0b0_34_OR_req_f3_BITS_ETC___d362)
	$display("%0d: DCache: fa_probe_RAMS tagCSet [0x%0x] wordSet [0x%0d]",
		 v__h14154,
		 req_addr[12:5],
		 req_addr[12:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  rxe_rsp_fabric_dmem_first_x[32])
	begin
	  v__h13126 = $stime;
	  #0;
	end
    v__h13120 = v__h13126 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  rxe_rsp_fabric_dmem_first_x[32])
	$display("%0d: DCache.rl_discard_write_rsp: FABRIC_RSP_ERR: exit",
		 v__h13120);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  rxe_rsp_fabric_dmem_first_x[32])
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  rxe_rsp_fabric_dmem_first_x[32])
	$write("Fabric_Rsp { ", "initiator_id: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  rxe_rsp_fabric_dmem_first_x[32])
	$write("'h%h", rxe_rsp_fabric_dmem_first_x[38:37]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  rxe_rsp_fabric_dmem_first_x[32])
	$write(", ", "op: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  rxe_rsp_fabric_dmem_first_x[32] &&
	  !rxe_rsp_fabric_dmem_first_x[36])
	$write("FABRIC_REQ_RD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  rxe_rsp_fabric_dmem_first_x[32])
	$write("FABRIC_REQ_WR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  rxe_rsp_fabric_dmem_first_x[32])
	$write(", ", "size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  rxe_rsp_fabric_dmem_first_x[32] &&
	  rxe_rsp_fabric_dmem_first_x[35:33] == 3'd0)
	$write("FABRIC_REQ_8b");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  rxe_rsp_fabric_dmem_first_x[32] &&
	  rxe_rsp_fabric_dmem_first_x[35:33] == 3'd1)
	$write("FABRIC_REQ_16b");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  rxe_rsp_fabric_dmem_first_x[32] &&
	  rxe_rsp_fabric_dmem_first_x[35:33] == 3'd2)
	$write("FABRIC_REQ_32b");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  rxe_rsp_fabric_dmem_first_x[32] &&
	  rxe_rsp_fabric_dmem_first_x[35:33] == 3'd3)
	$write("FABRIC_REQ_64b");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  rxe_rsp_fabric_dmem_first_x[32] &&
	  rxe_rsp_fabric_dmem_first_x[35:33] != 3'd0 &&
	  rxe_rsp_fabric_dmem_first_x[35:33] != 3'd1 &&
	  rxe_rsp_fabric_dmem_first_x[35:33] != 3'd2 &&
	  rxe_rsp_fabric_dmem_first_x[35:33] != 3'd3)
	$write("FABRIC_REQ_BURST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  rxe_rsp_fabric_dmem_first_x[32])
	$write(", ", "status: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  rxe_rsp_fabric_dmem_first_x[32])
	$write("FABRIC_RSP_ERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  rxe_rsp_fabric_dmem_first_x[32])
	$write(", ", "word: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  rxe_rsp_fabric_dmem_first_x[32])
	$write("'h%h", rxe_rsp_fabric_dmem_first_x[31:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  rxe_rsp_fabric_dmem_first_x[32])
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  rxe_rsp_fabric_dmem_first_x[32])
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  !rxe_rsp_fabric_dmem_first_x[32] &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	begin
	  v__h13165 = $stime;
	  #0;
	end
    v__h13159 = v__h13165 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  !rxe_rsp_fabric_dmem_first_x[32] &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write("%0d: DCache.rl_discard_write_rsp: pending %0d ",
	       v__h13159,
	       $unsigned(b__h12826));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  !rxe_rsp_fabric_dmem_first_x[32] &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write("Fabric_Rsp { ", "initiator_id: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  !rxe_rsp_fabric_dmem_first_x[32] &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write("'h%h", rxe_rsp_fabric_dmem_first_x[38:37]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  !rxe_rsp_fabric_dmem_first_x[32] &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write(", ", "op: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  !rxe_rsp_fabric_dmem_first_x[32] &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38 &&
	  !rxe_rsp_fabric_dmem_first_x[36])
	$write("FABRIC_REQ_RD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  !rxe_rsp_fabric_dmem_first_x[32] &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write("FABRIC_REQ_WR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  !rxe_rsp_fabric_dmem_first_x[32] &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write(", ", "size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  !rxe_rsp_fabric_dmem_first_x[32] &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38 &&
	  rxe_rsp_fabric_dmem_first_x[35:33] == 3'd0)
	$write("FABRIC_REQ_8b");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  !rxe_rsp_fabric_dmem_first_x[32] &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38 &&
	  rxe_rsp_fabric_dmem_first_x[35:33] == 3'd1)
	$write("FABRIC_REQ_16b");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  !rxe_rsp_fabric_dmem_first_x[32] &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38 &&
	  rxe_rsp_fabric_dmem_first_x[35:33] == 3'd2)
	$write("FABRIC_REQ_32b");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  !rxe_rsp_fabric_dmem_first_x[32] &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38 &&
	  rxe_rsp_fabric_dmem_first_x[35:33] == 3'd3)
	$write("FABRIC_REQ_64b");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  !rxe_rsp_fabric_dmem_first_x[32] &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38 &&
	  rxe_rsp_fabric_dmem_first_x[35:33] != 3'd0 &&
	  rxe_rsp_fabric_dmem_first_x[35:33] != 3'd1 &&
	  rxe_rsp_fabric_dmem_first_x[35:33] != 3'd2 &&
	  rxe_rsp_fabric_dmem_first_x[35:33] != 3'd3)
	$write("FABRIC_REQ_BURST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  !rxe_rsp_fabric_dmem_first_x[32] &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write(", ", "status: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  !rxe_rsp_fabric_dmem_first_x[32] &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write("FABRIC_RSP_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  !rxe_rsp_fabric_dmem_first_x[32] &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write(", ", "word: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  !rxe_rsp_fabric_dmem_first_x[32] &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write("'h%h", rxe_rsp_fabric_dmem_first_x[31:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  !rxe_rsp_fabric_dmem_first_x[32] &&
	  NOT_cfg_verbosity_read__1_SLE_1_7___d38)
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkDCache

