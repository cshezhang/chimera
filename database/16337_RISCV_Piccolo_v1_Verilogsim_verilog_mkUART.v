// This program was cloned from: https://github.com/rsnikhil/RISCV_Piccolo_v1
// License: MIT License

//
// Generated by Bluespec Compiler, version 2016.03.beta1 (build 34761, 2016-03-16)
//
// On Sat Jul  9 18:53:13 EDT 2016
//
//
// Ports:
// Name                         I/O  size props
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1 reg
// RDY_from_fabric_request_put    O     1 reg
// from_fabric_response_get       O    39 reg
// RDY_from_fabric_response_get   O     1 reg
// to_console_get                 O     8 reg
// RDY_to_console_get             O     1 reg
// RDY_from_console_put           O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// from_fabric_request_put        I    70 reg
// from_console_put               I     8 reg
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_from_fabric_request_put     I     1
// EN_from_console_put            I     1
// EN_from_fabric_response_get    I     1
// EN_to_console_get              I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkUART(CLK,
	      RST_N,

	      EN_server_reset_request_put,
	      RDY_server_reset_request_put,

	      EN_server_reset_response_get,
	      RDY_server_reset_response_get,

	      from_fabric_request_put,
	      EN_from_fabric_request_put,
	      RDY_from_fabric_request_put,

	      EN_from_fabric_response_get,
	      from_fabric_response_get,
	      RDY_from_fabric_response_get,

	      EN_to_console_get,
	      to_console_get,
	      RDY_to_console_get,

	      from_console_put,
	      EN_from_console_put,
	      RDY_from_console_put);
  input  CLK;
  input  RST_N;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method from_fabric_request_put
  input  [69 : 0] from_fabric_request_put;
  input  EN_from_fabric_request_put;
  output RDY_from_fabric_request_put;

  // actionvalue method from_fabric_response_get
  input  EN_from_fabric_response_get;
  output [38 : 0] from_fabric_response_get;
  output RDY_from_fabric_response_get;

  // actionvalue method to_console_get
  input  EN_to_console_get;
  output [7 : 0] to_console_get;
  output RDY_to_console_get;

  // action method from_console_put
  input  [7 : 0] from_console_put;
  input  EN_from_console_put;
  output RDY_from_console_put;

  // signals for module outputs
  wire [38 : 0] from_fabric_response_get;
  wire [7 : 0] to_console_get;
  wire RDY_from_console_put,
       RDY_from_fabric_request_put,
       RDY_from_fabric_response_get,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_to_console_get;

  // register cfg_verbosity
  reg [7 : 0] cfg_verbosity;
  wire [7 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register rg_dlh
  reg [7 : 0] rg_dlh;
  wire [7 : 0] rg_dlh$D_IN;
  wire rg_dlh$EN;

  // register rg_dll
  reg [7 : 0] rg_dll;
  wire [7 : 0] rg_dll$D_IN;
  wire rg_dll$EN;

  // register rg_fcr
  reg [7 : 0] rg_fcr;
  wire [7 : 0] rg_fcr$D_IN;
  wire rg_fcr$EN;

  // register rg_ier
  reg [7 : 0] rg_ier;
  wire [7 : 0] rg_ier$D_IN;
  wire rg_ier$EN;

  // register rg_iir
  reg [7 : 0] rg_iir;
  wire [7 : 0] rg_iir$D_IN;
  wire rg_iir$EN;

  // register rg_lcr
  reg [7 : 0] rg_lcr;
  wire [7 : 0] rg_lcr$D_IN;
  wire rg_lcr$EN;

  // register rg_lsr
  reg [7 : 0] rg_lsr;
  wire [7 : 0] rg_lsr$D_IN;
  wire rg_lsr$EN;

  // register rg_mcr
  reg [7 : 0] rg_mcr;
  wire [7 : 0] rg_mcr$D_IN;
  wire rg_mcr$EN;

  // register rg_msr
  reg [7 : 0] rg_msr;
  wire [7 : 0] rg_msr$D_IN;
  wire rg_msr$EN;

  // register rg_rbr
  reg [7 : 0] rg_rbr;
  wire [7 : 0] rg_rbr$D_IN;
  wire rg_rbr$EN;

  // register rg_scr
  reg [7 : 0] rg_scr;
  wire [7 : 0] rg_scr$D_IN;
  wire rg_scr$EN;

  // register rg_state
  reg rg_state;
  wire rg_state$D_IN, rg_state$EN;

  // register rg_thr
  reg [7 : 0] rg_thr;
  wire [7 : 0] rg_thr$D_IN;
  wire rg_thr$EN;

  // ports of submodule f_fabric_reqs
  wire [69 : 0] f_fabric_reqs$D_IN, f_fabric_reqs$D_OUT;
  wire f_fabric_reqs$CLR,
       f_fabric_reqs$DEQ,
       f_fabric_reqs$EMPTY_N,
       f_fabric_reqs$ENQ,
       f_fabric_reqs$FULL_N;

  // ports of submodule f_fabric_rsps
  wire [38 : 0] f_fabric_rsps$D_IN, f_fabric_rsps$D_OUT;
  wire f_fabric_rsps$CLR,
       f_fabric_rsps$DEQ,
       f_fabric_rsps$EMPTY_N,
       f_fabric_rsps$ENQ,
       f_fabric_rsps$FULL_N;

  // ports of submodule f_from_console
  wire [7 : 0] f_from_console$D_IN;
  wire f_from_console$CLR,
       f_from_console$DEQ,
       f_from_console$ENQ,
       f_from_console$FULL_N;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule f_to_console
  wire [7 : 0] f_to_console$D_IN, f_to_console$D_OUT;
  wire f_to_console$CLR,
       f_to_console$DEQ,
       f_to_console$EMPTY_N,
       f_to_console$ENQ,
       f_to_console$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_process_req,
       CAN_FIRE_RL_rl_reset,
       CAN_FIRE_from_console_put,
       CAN_FIRE_from_fabric_request_put,
       CAN_FIRE_from_fabric_response_get,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_to_console_get,
       WILL_FIRE_RL_rl_process_req,
       WILL_FIRE_RL_rl_reset,
       WILL_FIRE_from_console_put,
       WILL_FIRE_from_fabric_request_put,
       WILL_FIRE_from_fabric_response_get,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_to_console_get;

  // remaining internal signals
  reg [31 : 0] v__h1177,
	       v__h1183,
	       v__h1315,
	       v__h1321,
	       v__h1813,
	       v__h1819,
	       v__h2527,
	       v__h2533,
	       v__h2670,
	       v__h2676,
	       v__h2921,
	       v__h2927,
	       y_avValue_snd__h2792;
  wire [31 : 0] f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1,
		fabric_rsp_word__h2831,
		rsp_val___1__h1560,
		rsp_val___1__h1587,
		rsp_val___1__h1614,
		rsp_val___1__h1641,
		rsp_val___1__h1668,
		rsp_val___1__h1721,
		rsp_val___1__h1748,
		rsp_val___1__h1775,
		rsp_val___1__h2863;
  wire [7 : 0] x__h2866;
  wire NOT_cfg_verbosity_read_ULE_1_2___d33;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method from_fabric_request_put
  assign RDY_from_fabric_request_put = f_fabric_reqs$FULL_N ;
  assign CAN_FIRE_from_fabric_request_put = f_fabric_reqs$FULL_N ;
  assign WILL_FIRE_from_fabric_request_put = EN_from_fabric_request_put ;

  // actionvalue method from_fabric_response_get
  assign from_fabric_response_get = f_fabric_rsps$D_OUT ;
  assign RDY_from_fabric_response_get = f_fabric_rsps$EMPTY_N ;
  assign CAN_FIRE_from_fabric_response_get = f_fabric_rsps$EMPTY_N ;
  assign WILL_FIRE_from_fabric_response_get = EN_from_fabric_response_get ;

  // actionvalue method to_console_get
  assign to_console_get = f_to_console$D_OUT ;
  assign RDY_to_console_get = f_to_console$EMPTY_N ;
  assign CAN_FIRE_to_console_get = f_to_console$EMPTY_N ;
  assign WILL_FIRE_to_console_get = EN_to_console_get ;

  // action method from_console_put
  assign RDY_from_console_put = f_from_console$FULL_N ;
  assign CAN_FIRE_from_console_put = f_from_console$FULL_N ;
  assign WILL_FIRE_from_console_put = EN_from_console_put ;

  // submodule f_fabric_reqs
  FIFO2 #(.width(32'd70), .guarded(32'd1)) f_fabric_reqs(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(f_fabric_reqs$D_IN),
							 .ENQ(f_fabric_reqs$ENQ),
							 .DEQ(f_fabric_reqs$DEQ),
							 .CLR(f_fabric_reqs$CLR),
							 .D_OUT(f_fabric_reqs$D_OUT),
							 .FULL_N(f_fabric_reqs$FULL_N),
							 .EMPTY_N(f_fabric_reqs$EMPTY_N));

  // submodule f_fabric_rsps
  FIFO2 #(.width(32'd39), .guarded(32'd1)) f_fabric_rsps(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(f_fabric_rsps$D_IN),
							 .ENQ(f_fabric_rsps$ENQ),
							 .DEQ(f_fabric_rsps$DEQ),
							 .CLR(f_fabric_rsps$CLR),
							 .D_OUT(f_fabric_rsps$D_OUT),
							 .FULL_N(f_fabric_rsps$FULL_N),
							 .EMPTY_N(f_fabric_rsps$EMPTY_N));

  // submodule f_from_console
  FIFO2 #(.width(32'd8), .guarded(32'd1)) f_from_console(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(f_from_console$D_IN),
							 .ENQ(f_from_console$ENQ),
							 .DEQ(f_from_console$DEQ),
							 .CLR(f_from_console$CLR),
							 .D_OUT(),
							 .FULL_N(f_from_console$FULL_N),
							 .EMPTY_N());

  // submodule f_reset_reqs
  FIFO20 #(.guarded(32'd1)) f_reset_reqs(.RST(RST_N),
					 .CLK(CLK),
					 .ENQ(f_reset_reqs$ENQ),
					 .DEQ(f_reset_reqs$DEQ),
					 .CLR(f_reset_reqs$CLR),
					 .FULL_N(f_reset_reqs$FULL_N),
					 .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO20 #(.guarded(32'd1)) f_reset_rsps(.RST(RST_N),
					 .CLK(CLK),
					 .ENQ(f_reset_rsps$ENQ),
					 .DEQ(f_reset_rsps$DEQ),
					 .CLR(f_reset_rsps$CLR),
					 .FULL_N(f_reset_rsps$FULL_N),
					 .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule f_to_console
  FIFO2 #(.width(32'd8), .guarded(32'd1)) f_to_console(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_to_console$D_IN),
						       .ENQ(f_to_console$ENQ),
						       .DEQ(f_to_console$DEQ),
						       .CLR(f_to_console$CLR),
						       .D_OUT(f_to_console$D_OUT),
						       .FULL_N(f_to_console$FULL_N),
						       .EMPTY_N(f_to_console$EMPTY_N));

  // rule RL_rl_process_req
  assign CAN_FIRE_RL_rl_process_req =
	     f_fabric_reqs$EMPTY_N && f_fabric_rsps$FULL_N &&
	     (!f_fabric_reqs$D_OUT[67] ||
	      f_fabric_reqs$D_OUT[66:64] == 3'd4 ||
	      f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	      8'h0 ||
	      rg_lcr[7] ||
	      f_to_console$FULL_N) &&
	     rg_state ;
  assign WILL_FIRE_RL_rl_process_req = CAN_FIRE_RL_rl_process_req ;

  // rule RL_rl_reset
  assign CAN_FIRE_RL_rl_reset = f_reset_reqs$EMPTY_N && f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_rl_reset = CAN_FIRE_RL_rl_reset ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = f_fabric_reqs$D_OUT[7:0] ;
  assign cfg_verbosity$EN =
	     WILL_FIRE_RL_rl_process_req && f_fabric_reqs$D_OUT[67] &&
	     f_fabric_reqs$D_OUT[66:64] != 3'd4 &&
	     f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] ==
	     8'h7F ;

  // register rg_dlh
  assign rg_dlh$D_IN = 8'h0 ;
  assign rg_dlh$EN = 1'b0 ;

  // register rg_dll
  assign rg_dll$D_IN = 8'h0 ;
  assign rg_dll$EN = 1'b0 ;

  // register rg_fcr
  assign rg_fcr$D_IN = 8'h0 ;
  assign rg_fcr$EN = 1'b0 ;

  // register rg_ier
  assign rg_ier$D_IN = f_fabric_reqs$D_OUT[7:0] ;
  assign rg_ier$EN =
	     WILL_FIRE_RL_rl_process_req && f_fabric_reqs$D_OUT[67] &&
	     f_fabric_reqs$D_OUT[66:64] != 3'd4 &&
	     f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] ==
	     8'h04 ;

  // register rg_iir
  assign rg_iir$D_IN = f_fabric_reqs$D_OUT[7:0] ;
  assign rg_iir$EN =
	     WILL_FIRE_RL_rl_process_req && f_fabric_reqs$D_OUT[67] &&
	     f_fabric_reqs$D_OUT[66:64] != 3'd4 &&
	     f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] ==
	     8'h08 ;

  // register rg_lcr
  assign rg_lcr$D_IN = f_fabric_reqs$D_OUT[7:0] ;
  assign rg_lcr$EN =
	     WILL_FIRE_RL_rl_process_req && f_fabric_reqs$D_OUT[67] &&
	     f_fabric_reqs$D_OUT[66:64] != 3'd4 &&
	     f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] ==
	     8'h0C ;

  // register rg_lsr
  assign rg_lsr$D_IN = f_fabric_reqs$D_OUT[7:0] ;
  assign rg_lsr$EN =
	     WILL_FIRE_RL_rl_process_req && f_fabric_reqs$D_OUT[67] &&
	     f_fabric_reqs$D_OUT[66:64] != 3'd4 &&
	     f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] ==
	     8'h14 ;

  // register rg_mcr
  assign rg_mcr$D_IN = f_fabric_reqs$D_OUT[7:0] ;
  assign rg_mcr$EN =
	     WILL_FIRE_RL_rl_process_req && f_fabric_reqs$D_OUT[67] &&
	     f_fabric_reqs$D_OUT[66:64] != 3'd4 &&
	     f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] ==
	     8'h10 ;

  // register rg_msr
  assign rg_msr$D_IN = f_fabric_reqs$D_OUT[7:0] ;
  assign rg_msr$EN =
	     WILL_FIRE_RL_rl_process_req && f_fabric_reqs$D_OUT[67] &&
	     f_fabric_reqs$D_OUT[66:64] != 3'd4 &&
	     f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] ==
	     8'h18 ;

  // register rg_rbr
  assign rg_rbr$D_IN = 8'h0 ;
  assign rg_rbr$EN = 1'b0 ;

  // register rg_scr
  assign rg_scr$D_IN = f_fabric_reqs$D_OUT[7:0] ;
  assign rg_scr$EN =
	     WILL_FIRE_RL_rl_process_req && f_fabric_reqs$D_OUT[67] &&
	     f_fabric_reqs$D_OUT[66:64] != 3'd4 &&
	     f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] ==
	     8'h1C ;

  // register rg_state
  assign rg_state$D_IN = 1'd1 ;
  assign rg_state$EN = CAN_FIRE_RL_rl_reset ;

  // register rg_thr
  assign rg_thr$D_IN = f_fabric_reqs$D_OUT[7:0] ;
  assign rg_thr$EN =
	     WILL_FIRE_RL_rl_process_req && f_fabric_reqs$D_OUT[67] &&
	     f_fabric_reqs$D_OUT[66:64] != 3'd4 &&
	     f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] ==
	     8'h0 &&
	     !rg_lcr[7] ;

  // submodule f_fabric_reqs
  assign f_fabric_reqs$D_IN = from_fabric_request_put ;
  assign f_fabric_reqs$ENQ = EN_from_fabric_request_put ;
  assign f_fabric_reqs$DEQ = CAN_FIRE_RL_rl_process_req ;
  assign f_fabric_reqs$CLR = CAN_FIRE_RL_rl_reset ;

  // submodule f_fabric_rsps
  assign f_fabric_rsps$D_IN =
	     { f_fabric_reqs$D_OUT[69:64],
	       (!f_fabric_reqs$D_OUT[67] &&
		f_fabric_reqs$D_OUT[66:64] != 3'd4) ?
		 { f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
		   8'h0 &&
		   f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
		   8'h04 &&
		   f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
		   8'h08 &&
		   f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
		   8'h0C &&
		   f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
		   8'h10 &&
		   f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
		   8'h14 &&
		   f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
		   8'h18 &&
		   f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
		   8'h1C &&
		   f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
		   8'h7F,
		   y_avValue_snd__h2792 } :
		 { !f_fabric_reqs$D_OUT[67] ||
		   f_fabric_reqs$D_OUT[66:64] == 3'd4 ||
		   f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
		   8'h0 &&
		   f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
		   8'h04 &&
		   f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
		   8'h08 &&
		   f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
		   8'h0C &&
		   f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
		   8'h10 &&
		   f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
		   8'h14 &&
		   f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
		   8'h18 &&
		   f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
		   8'h1C &&
		   f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
		   8'h7F,
		   f_fabric_reqs$D_OUT[63:32] } } ;
  assign f_fabric_rsps$ENQ = CAN_FIRE_RL_rl_process_req ;
  assign f_fabric_rsps$DEQ = EN_from_fabric_response_get ;
  assign f_fabric_rsps$CLR = CAN_FIRE_RL_rl_reset ;

  // submodule f_from_console
  assign f_from_console$D_IN = from_console_put ;
  assign f_from_console$ENQ = EN_from_console_put ;
  assign f_from_console$DEQ = 1'b0 ;
  assign f_from_console$CLR = 1'b0 ;

  // submodule f_reset_reqs
  assign f_reset_reqs$ENQ = EN_server_reset_request_put ;
  assign f_reset_reqs$DEQ = CAN_FIRE_RL_rl_reset ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$ENQ = CAN_FIRE_RL_rl_reset ;
  assign f_reset_rsps$DEQ = EN_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule f_to_console
  assign f_to_console$D_IN = f_fabric_reqs$D_OUT[7:0] ;
  assign f_to_console$ENQ =
	     WILL_FIRE_RL_rl_process_req && f_fabric_reqs$D_OUT[67] &&
	     f_fabric_reqs$D_OUT[66:64] != 3'd4 &&
	     f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] ==
	     8'h0 &&
	     !rg_lcr[7] ;
  assign f_to_console$DEQ = EN_to_console_get ;
  assign f_to_console$CLR = 1'b0 ;

  // remaining internal signals
  assign NOT_cfg_verbosity_read_ULE_1_2___d33 = cfg_verbosity > 8'd1 ;
  assign f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1 =
	     f_fabric_reqs$D_OUT[63:32] - 32'hC0000000 ;
  assign fabric_rsp_word__h2831 =
	     (!f_fabric_reqs$D_OUT[67] &&
	      f_fabric_reqs$D_OUT[66:64] != 3'd4) ?
	       y_avValue_snd__h2792 :
	       f_fabric_reqs$D_OUT[63:32] ;
  assign rsp_val___1__h1560 = { 24'd0, rg_rbr } ;
  assign rsp_val___1__h1587 = { 24'd0, rg_ier } ;
  assign rsp_val___1__h1614 = { 24'd0, rg_iir } ;
  assign rsp_val___1__h1641 = { 24'd0, rg_lcr } ;
  assign rsp_val___1__h1668 = { 24'd0, rg_mcr } ;
  assign rsp_val___1__h1721 = { 24'd0, rg_msr } ;
  assign rsp_val___1__h1748 = { 24'd0, rg_scr } ;
  assign rsp_val___1__h1775 = { 24'd0, cfg_verbosity } ;
  assign rsp_val___1__h2863 = { 24'd0, x__h2866 } ;
  assign x__h2866 = { rg_lsr[7:6], 1'd1, rg_lsr[4:0] } ;
  always@(f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1 or
	  f_fabric_reqs$D_OUT or
	  rsp_val___1__h1560 or
	  rsp_val___1__h1587 or
	  rsp_val___1__h1614 or
	  rsp_val___1__h1641 or
	  rsp_val___1__h1668 or
	  rsp_val___1__h2863 or
	  rsp_val___1__h1721 or rsp_val___1__h1748 or rsp_val___1__h1775)
  begin
    case (f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0])
      8'h0: y_avValue_snd__h2792 = rsp_val___1__h1560;
      8'h04: y_avValue_snd__h2792 = rsp_val___1__h1587;
      8'h08: y_avValue_snd__h2792 = rsp_val___1__h1614;
      8'h0C: y_avValue_snd__h2792 = rsp_val___1__h1641;
      8'h10: y_avValue_snd__h2792 = rsp_val___1__h1668;
      8'h14: y_avValue_snd__h2792 = rsp_val___1__h2863;
      8'h18: y_avValue_snd__h2792 = rsp_val___1__h1721;
      8'h1C: y_avValue_snd__h2792 = rsp_val___1__h1748;
      8'h7F: y_avValue_snd__h2792 = rsp_val___1__h1775;
      default: y_avValue_snd__h2792 = f_fabric_reqs$D_OUT[63:32];
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
      end
    if (rg_dlh$EN) rg_dlh <= `BSV_ASSIGNMENT_DELAY rg_dlh$D_IN;
    if (rg_dll$EN) rg_dll <= `BSV_ASSIGNMENT_DELAY rg_dll$D_IN;
    if (rg_fcr$EN) rg_fcr <= `BSV_ASSIGNMENT_DELAY rg_fcr$D_IN;
    if (rg_ier$EN) rg_ier <= `BSV_ASSIGNMENT_DELAY rg_ier$D_IN;
    if (rg_iir$EN) rg_iir <= `BSV_ASSIGNMENT_DELAY rg_iir$D_IN;
    if (rg_lcr$EN) rg_lcr <= `BSV_ASSIGNMENT_DELAY rg_lcr$D_IN;
    if (rg_lsr$EN) rg_lsr <= `BSV_ASSIGNMENT_DELAY rg_lsr$D_IN;
    if (rg_mcr$EN) rg_mcr <= `BSV_ASSIGNMENT_DELAY rg_mcr$D_IN;
    if (rg_msr$EN) rg_msr <= `BSV_ASSIGNMENT_DELAY rg_msr$D_IN;
    if (rg_rbr$EN) rg_rbr <= `BSV_ASSIGNMENT_DELAY rg_rbr$D_IN;
    if (rg_scr$EN) rg_scr <= `BSV_ASSIGNMENT_DELAY rg_scr$D_IN;
    if (rg_thr$EN) rg_thr <= `BSV_ASSIGNMENT_DELAY rg_thr$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_verbosity = 8'hAA;
    rg_dlh = 8'hAA;
    rg_dll = 8'hAA;
    rg_fcr = 8'hAA;
    rg_ier = 8'hAA;
    rg_iir = 8'hAA;
    rg_lcr = 8'hAA;
    rg_lsr = 8'hAA;
    rg_mcr = 8'hAA;
    rg_msr = 8'hAA;
    rg_rbr = 8'hAA;
    rg_scr = 8'hAA;
    rg_state = 1'h0;
    rg_thr = 8'hAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && NOT_cfg_verbosity_read_ULE_1_2___d33)
	begin
	  v__h1321 = $stime;
	  #0;
	end
    v__h1315 = v__h1321 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && NOT_cfg_verbosity_read_ULE_1_2___d33)
	$display("%0d: UART.rl_process_req: ", v__h1315);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && NOT_cfg_verbosity_read_ULE_1_2___d33)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && NOT_cfg_verbosity_read_ULE_1_2___d33)
	$write("Fabric_Req { ", "initiator_id: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && NOT_cfg_verbosity_read_ULE_1_2___d33)
	$write("'h%h", f_fabric_reqs$D_OUT[69:68]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && NOT_cfg_verbosity_read_ULE_1_2___d33)
	$write(", ", "op: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  NOT_cfg_verbosity_read_ULE_1_2___d33 &&
	  f_fabric_reqs$D_OUT[67])
	$write("FABRIC_REQ_WR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  NOT_cfg_verbosity_read_ULE_1_2___d33 &&
	  !f_fabric_reqs$D_OUT[67])
	$write("FABRIC_REQ_RD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && NOT_cfg_verbosity_read_ULE_1_2___d33)
	$write(", ", "size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  NOT_cfg_verbosity_read_ULE_1_2___d33 &&
	  f_fabric_reqs$D_OUT[66:64] == 3'd0)
	$write("FABRIC_REQ_8b");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  NOT_cfg_verbosity_read_ULE_1_2___d33 &&
	  f_fabric_reqs$D_OUT[66:64] == 3'd1)
	$write("FABRIC_REQ_16b");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  NOT_cfg_verbosity_read_ULE_1_2___d33 &&
	  f_fabric_reqs$D_OUT[66:64] == 3'd2)
	$write("FABRIC_REQ_32b");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  NOT_cfg_verbosity_read_ULE_1_2___d33 &&
	  f_fabric_reqs$D_OUT[66:64] == 3'd3)
	$write("FABRIC_REQ_64b");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  NOT_cfg_verbosity_read_ULE_1_2___d33 &&
	  f_fabric_reqs$D_OUT[66:64] != 3'd0 &&
	  f_fabric_reqs$D_OUT[66:64] != 3'd1 &&
	  f_fabric_reqs$D_OUT[66:64] != 3'd2 &&
	  f_fabric_reqs$D_OUT[66:64] != 3'd3)
	$write("FABRIC_REQ_BURST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && NOT_cfg_verbosity_read_ULE_1_2___d33)
	$write(", ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && NOT_cfg_verbosity_read_ULE_1_2___d33)
	$write("'h%h", f_fabric_reqs$D_OUT[63:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && NOT_cfg_verbosity_read_ULE_1_2___d33)
	$write(", ", "word: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && NOT_cfg_verbosity_read_ULE_1_2___d33)
	$write("'h%h", f_fabric_reqs$D_OUT[31:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && NOT_cfg_verbosity_read_ULE_1_2___d33)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && !f_fabric_reqs$D_OUT[67] &&
	  f_fabric_reqs$D_OUT[66:64] != 3'd4 &&
	  f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	  8'h0 &&
	  f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	  8'h04 &&
	  f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	  8'h08 &&
	  f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	  8'h0C &&
	  f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	  8'h10 &&
	  f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	  8'h14 &&
	  f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	  8'h18 &&
	  f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	  8'h1C &&
	  f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] != 8'h7F)
	begin
	  v__h1819 = $stime;
	  #0;
	end
    v__h1813 = v__h1819 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && !f_fabric_reqs$D_OUT[67] &&
	  f_fabric_reqs$D_OUT[66:64] != 3'd4 &&
	  f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	  8'h0 &&
	  f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	  8'h04 &&
	  f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	  8'h08 &&
	  f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	  8'h0C &&
	  f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	  8'h10 &&
	  f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	  8'h14 &&
	  f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	  8'h18 &&
	  f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	  8'h1C &&
	  f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] != 8'h7F)
	$display("%0d: ERROR: UART read: unrecognized register addr 0x%0h",
		 v__h1813,
		 f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && f_fabric_reqs$D_OUT[67] &&
	  f_fabric_reqs$D_OUT[66:64] != 3'd4 &&
	  f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	  8'h0 &&
	  f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	  8'h04 &&
	  f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	  8'h08 &&
	  f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	  8'h0C &&
	  f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	  8'h10 &&
	  f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	  8'h14 &&
	  f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	  8'h18 &&
	  f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	  8'h1C &&
	  f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] != 8'h7F)
	begin
	  v__h2533 = $stime;
	  #0;
	end
    v__h2527 = v__h2533 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && f_fabric_reqs$D_OUT[67] &&
	  f_fabric_reqs$D_OUT[66:64] != 3'd4 &&
	  f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	  8'h0 &&
	  f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	  8'h04 &&
	  f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	  8'h08 &&
	  f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	  8'h0C &&
	  f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	  8'h10 &&
	  f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	  8'h14 &&
	  f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	  8'h18 &&
	  f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	  8'h1C &&
	  f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] != 8'h7F)
	$display("%0d: ERROR: UART write: unrecognized register addr 0x%0h",
		 v__h2527,
		 f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  (f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] == 3'd4) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] == 3'd4))
	begin
	  v__h2676 = $stime;
	  #0;
	end
    v__h2670 = v__h2676 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  (f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] == 3'd4) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] == 3'd4))
	$display("%0d: ERROR: UART: request op not implemented", v__h2670);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  (f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] == 3'd4) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] == 3'd4))
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  (f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] == 3'd4) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] == 3'd4))
	$write("Fabric_Req { ", "initiator_id: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  (f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] == 3'd4) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] == 3'd4))
	$write("'h%h", f_fabric_reqs$D_OUT[69:68]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  (f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] == 3'd4) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] == 3'd4))
	$write(", ", "op: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && f_fabric_reqs$D_OUT[66:64] == 3'd4 &&
	  f_fabric_reqs$D_OUT[67])
	$write("FABRIC_REQ_WR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && f_fabric_reqs$D_OUT[66:64] == 3'd4 &&
	  !f_fabric_reqs$D_OUT[67])
	$write("FABRIC_REQ_RD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  (f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] == 3'd4) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] == 3'd4))
	$write(", ", "size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  (f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] == 3'd4) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] == 3'd4) &&
	  f_fabric_reqs$D_OUT[66:64] != 3'd0 &&
	  f_fabric_reqs$D_OUT[66:64] != 3'd1 &&
	  f_fabric_reqs$D_OUT[66:64] != 3'd2 &&
	  f_fabric_reqs$D_OUT[66:64] != 3'd3)
	$write("FABRIC_REQ_BURST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  (f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] == 3'd4) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] == 3'd4))
	$write(", ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  (f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] == 3'd4) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] == 3'd4))
	$write("'h%h", f_fabric_reqs$D_OUT[63:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  (f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] == 3'd4) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] == 3'd4))
	$write(", ", "word: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  (f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] == 3'd4) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] == 3'd4))
	$write("'h%h", f_fabric_reqs$D_OUT[31:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  (f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] == 3'd4) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] == 3'd4))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && NOT_cfg_verbosity_read_ULE_1_2___d33)
	begin
	  v__h2927 = $stime;
	  #0;
	end
    v__h2921 = v__h2927 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && NOT_cfg_verbosity_read_ULE_1_2___d33)
	$display("%0d: UART.rl_send_rsp: ", v__h2921);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && NOT_cfg_verbosity_read_ULE_1_2___d33)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && NOT_cfg_verbosity_read_ULE_1_2___d33)
	$write("Fabric_Rsp { ", "initiator_id: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && NOT_cfg_verbosity_read_ULE_1_2___d33)
	$write("'h%h", f_fabric_reqs$D_OUT[69:68]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && NOT_cfg_verbosity_read_ULE_1_2___d33)
	$write(", ", "op: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  NOT_cfg_verbosity_read_ULE_1_2___d33 &&
	  f_fabric_reqs$D_OUT[67])
	$write("FABRIC_REQ_WR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  NOT_cfg_verbosity_read_ULE_1_2___d33 &&
	  !f_fabric_reqs$D_OUT[67])
	$write("FABRIC_REQ_RD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && NOT_cfg_verbosity_read_ULE_1_2___d33)
	$write(", ", "size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  NOT_cfg_verbosity_read_ULE_1_2___d33 &&
	  f_fabric_reqs$D_OUT[66:64] == 3'd0)
	$write("FABRIC_REQ_8b");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  NOT_cfg_verbosity_read_ULE_1_2___d33 &&
	  f_fabric_reqs$D_OUT[66:64] == 3'd1)
	$write("FABRIC_REQ_16b");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  NOT_cfg_verbosity_read_ULE_1_2___d33 &&
	  f_fabric_reqs$D_OUT[66:64] == 3'd2)
	$write("FABRIC_REQ_32b");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  NOT_cfg_verbosity_read_ULE_1_2___d33 &&
	  f_fabric_reqs$D_OUT[66:64] == 3'd3)
	$write("FABRIC_REQ_64b");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  NOT_cfg_verbosity_read_ULE_1_2___d33 &&
	  f_fabric_reqs$D_OUT[66:64] != 3'd0 &&
	  f_fabric_reqs$D_OUT[66:64] != 3'd1 &&
	  f_fabric_reqs$D_OUT[66:64] != 3'd2 &&
	  f_fabric_reqs$D_OUT[66:64] != 3'd3)
	$write("FABRIC_REQ_BURST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && NOT_cfg_verbosity_read_ULE_1_2___d33)
	$write(", ", "status: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  NOT_cfg_verbosity_read_ULE_1_2___d33 &&
	  ((!f_fabric_reqs$D_OUT[67] && f_fabric_reqs$D_OUT[66:64] != 3'd4) ?
	     f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] ==
	     8'h0 ||
	     f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] ==
	     8'h04 ||
	     f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] ==
	     8'h08 ||
	     f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] ==
	     8'h0C ||
	     f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] ==
	     8'h10 ||
	     f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] ==
	     8'h14 ||
	     f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] ==
	     8'h18 ||
	     f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] ==
	     8'h1C ||
	     f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] ==
	     8'h7F :
	     f_fabric_reqs$D_OUT[67] && f_fabric_reqs$D_OUT[66:64] != 3'd4 &&
	     (f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] ==
	      8'h0 ||
	      f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] ==
	      8'h04 ||
	      f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] ==
	      8'h08 ||
	      f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] ==
	      8'h0C ||
	      f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] ==
	      8'h10 ||
	      f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] ==
	      8'h14 ||
	      f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] ==
	      8'h18 ||
	      f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] ==
	      8'h1C ||
	      f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] ==
	      8'h7F)))
	$write("FABRIC_RSP_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  NOT_cfg_verbosity_read_ULE_1_2___d33 &&
	  ((!f_fabric_reqs$D_OUT[67] && f_fabric_reqs$D_OUT[66:64] != 3'd4) ?
	     f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	     8'h0 &&
	     f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	     8'h04 &&
	     f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	     8'h08 &&
	     f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	     8'h0C &&
	     f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	     8'h10 &&
	     f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	     8'h14 &&
	     f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	     8'h18 &&
	     f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	     8'h1C &&
	     f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	     8'h7F :
	     !f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] == 3'd4 ||
	     f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	     8'h0 &&
	     f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	     8'h04 &&
	     f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	     8'h08 &&
	     f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	     8'h0C &&
	     f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	     8'h10 &&
	     f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	     8'h14 &&
	     f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	     8'h18 &&
	     f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	     8'h1C &&
	     f_fabric_reqsD_OUT_BITS_63_TO_32_MINUS_0xC000_ETC__q1[7:0] !=
	     8'h7F))
	$write("FABRIC_RSP_ERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && NOT_cfg_verbosity_read_ULE_1_2___d33)
	$write(", ", "word: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && NOT_cfg_verbosity_read_ULE_1_2___d33)
	$write("'h%h", fabric_rsp_word__h2831, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && NOT_cfg_verbosity_read_ULE_1_2___d33)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && cfg_verbosity != 8'd0)
	begin
	  v__h1183 = $stime;
	  #0;
	end
    v__h1177 = v__h1183 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && cfg_verbosity != 8'd0)
	$display("%0d: UART.rl_reset", v__h1177);
  end
  // synopsys translate_on
endmodule  // mkUART

