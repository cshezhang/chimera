// This program was cloned from: https://github.com/jiegec/fpu-wrappers
// License: MIT License

/* Generated by Yosys 0.23 (git sha1 7ce5011c24b) */

module \$paramod$02f84567614b4a0fd323fc4ecb8cda5faadbf32c\fpnew_opgroup_block_A94B6_B7406 (clk_i, rst_ni, operands_i, is_boxed_i, rnd_mode_i, op_i, op_mod_i, src_fmt_i, dst_fmt_i, int_fmt_i, vectorial_op_i, tag_i, simd_mask_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, extension_bit_o, tag_o, out_valid_o
, out_ready_i, busy_o);
  wire _0_;
  wire _1_;
  wire [39:0] arbiter_output;
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  input [2:0] dst_fmt_i;
  wire [2:0] dst_fmt_i;
  output extension_bit_o;
  wire extension_bit_o;
  input flush_i;
  wire flush_i;
  wire [4:0] fmt_busy;
  wire [4:0] fmt_in_ready;
  wire [4:0] fmt_out_ready;
  wire [4:0] fmt_out_valid;
  wire [199:0] fmt_outputs;
  wire \gen_parallel_slices[0].active_format.in_valid ;
  wire \gen_parallel_slices[0].active_format.mask_slice ;
  wire [31:0] \gen_parallel_slices[0].active_format.sv2v_autoblock_9.b ;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  input [1:0] int_fmt_i;
  wire [1:0] int_fmt_i;
  input [14:0] is_boxed_i;
  wire [14:0] is_boxed_i;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  input [95:0] operands_i;
  wire [95:0] operands_i;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  output [31:0] result_o;
  wire [31:0] result_o;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input rst_ni;
  wire rst_ni;
  input simd_mask_i;
  wire simd_mask_i;
  input [2:0] src_fmt_i;
  wire [2:0] src_fmt_i;
  output [4:0] status_o;
  wire [4:0] status_o;
  input [1:0] tag_i;
  wire [1:0] tag_i;
  output [1:0] tag_o;
  wire [1:0] tag_o;
  input vectorial_op_i;
  wire vectorial_op_i;
  assign in_ready_o = in_valid_i & _1_;
  assign \gen_parallel_slices[0].active_format.in_valid  = in_valid_i & _0_;
  assign _0_ = ! dst_fmt_i;
  wire [4:0] _6_ = { 4'h0, fmt_in_ready[0] };
  assign _1_ = _6_[dst_fmt_i +: 1];
  \$paramod$d900b4e0e9e2add9a5590ba2d73deecd4f47db92\fpnew_opgroup_fmt_slice_E368D_75924  \gen_parallel_slices[0].active_format.i_fmt_slice  (
    .busy_o(busy_o),
    .clk_i(clk_i),
    .extension_bit_o(fmt_outputs[2]),
    .flush_i(flush_i),
    .in_ready_o(fmt_in_ready[0]),
    .in_valid_i(\gen_parallel_slices[0].active_format.in_valid ),
    .is_boxed_i(is_boxed_i[2:0]),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i(operands_i),
    .out_ready_i(fmt_out_ready[0]),
    .out_valid_o(fmt_out_valid[0]),
    .reg_ena_i(3'h0),
    .result_o(fmt_outputs[39:8]),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .simd_mask_i(simd_mask_i),
    .status_o(fmt_outputs[7:3]),
    .tag_i(tag_i),
    .tag_o(fmt_outputs[1:0]),
    .vectorial_op_i(vectorial_op_i)
  );
  \$paramod$1ec311d8bbb78d5b213c030ce705238a3ade6dbb\rr_arb_tree_52163_F264E  i_arbiter (
    .clk_i(clk_i),
    .data_i({ 160'hfffffffffdfffffffffdfffffffffdfffffffffd, fmt_outputs[39:0] }),
    .data_o(arbiter_output),
    .flush_i(flush_i),
    .gnt_i(out_ready_i),
    .gnt_o(fmt_out_ready),
    .req_i({ 4'h0, fmt_out_valid[0] }),
    .req_o(out_valid_o),
    .rr_i(3'h0),
    .rst_ni(rst_ni)
  );
  assign extension_bit_o = arbiter_output[2];
  assign fmt_busy = { 4'h0, busy_o };
  assign fmt_in_ready[4:1] = 4'h0;
  assign fmt_out_valid[4:1] = 4'h0;
  assign fmt_outputs[199:40] = 160'hfffffffffdfffffffffdfffffffffdfffffffffd;
  assign \gen_parallel_slices[0].active_format.mask_slice  = simd_mask_i;
  assign \gen_parallel_slices[0].active_format.sv2v_autoblock_9.b  = 32'd1;
  assign result_o = arbiter_output[39:8];
  assign status_o = arbiter_output[7:3];
  assign tag_o = arbiter_output[1:0];
endmodule

module \$paramod$1ec311d8bbb78d5b213c030ce705238a3ade6dbb\rr_arb_tree_52163_F264E (clk_i, rst_ni, flush_i, rr_i, req_i, gnt_o, data_i, req_o, gnt_i, data_o, idx_o);
  wire [2:0] _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  input clk_i;
  wire clk_i;
  input [199:0] data_i;
  wire [199:0] data_i;
  output [39:0] data_o;
  wire [39:0] data_o;
  input flush_i;
  wire flush_i;
  wire [279:0] \gen_arbiter.data_nodes ;
  wire [2:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  wire [4:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  wire [2:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  wire [2:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  wire [4:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  wire [2:0] \gen_arbiter.gen_int_rr.rr_d ;
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  wire \gen_arbiter.gen_levels[2].gen_level[0].sel ;
  wire \gen_arbiter.gen_levels[2].gen_level[1].sel ;
  wire [6:0] \gen_arbiter.gnt_nodes ;
  wire [20:0] \gen_arbiter.index_nodes ;
  wire [4:0] \gen_arbiter.req_d ;
  wire [6:0] \gen_arbiter.req_nodes ;
  reg [2:0] \gen_arbiter.rr_q ;
  input gnt_i;
  wire gnt_i;
  output [4:0] gnt_o;
  wire [4:0] gnt_o;
  output [2:0] idx_o;
  wire [2:0] idx_o;
  input [4:0] req_i;
  wire [4:0] req_i;
  output req_o;
  wire req_o;
  input [2:0] rr_i;
  wire [2:0] rr_i;
  input rst_ni;
  wire rst_ni;
  wire [2:0] \sv2v_cast_29535$func$FPNewBlackbox_S1l3s.preprocessed.v:153$603.inp ;
  wire [2:0] \sv2v_cast_29535$func$FPNewBlackbox_S1l3s.preprocessed.v:153$604.inp ;
  wire [2:0] \sv2v_cast_29535$func$FPNewBlackbox_S1l3s.preprocessed.v:173$587.$result ;
  wire [2:0] \sv2v_cast_29535$func$FPNewBlackbox_S1l3s.preprocessed.v:173$588.$result ;
  wire [2:0] \sv2v_cast_29535$func$FPNewBlackbox_S1l3s.preprocessed.v:173$597.inp ;
  wire [2:0] \sv2v_cast_29535$func$FPNewBlackbox_S1l3s.preprocessed.v:173$598.inp ;
  wire [2:0] \sv2v_cast_29535$func$FPNewBlackbox_S1l3s.preprocessed.v:173$599.inp ;
  wire [2:0] \sv2v_cast_29535$func$FPNewBlackbox_S1l3s.preprocessed.v:173$600.inp ;
  wire [2:0] \sv2v_cast_29535$func$FPNewBlackbox_S1l3s.preprocessed.v:173$601.inp ;
  wire [2:0] \sv2v_cast_29535$func$FPNewBlackbox_S1l3s.preprocessed.v:173$602.inp ;
  assign _01_ = req_i[1] & \gen_arbiter.rr_q [0];
  assign _02_ = req_i[3] & \gen_arbiter.rr_q [0];
  assign gnt_o[0] = \gen_arbiter.gnt_nodes [3] & _19_;
  assign gnt_o[2] = \gen_arbiter.gnt_nodes [4] & _20_;
  assign gnt_o[1] = \gen_arbiter.gnt_nodes [3] & \gen_arbiter.gen_levels[2].gen_level[0].sel ;
  assign gnt_o[3] = \gen_arbiter.gnt_nodes [4] & \gen_arbiter.gen_levels[2].gen_level[1].sel ;
  assign _03_ = req_i[4] & \gen_arbiter.rr_q [2];
  assign _04_ = \gen_arbiter.req_nodes [4] & \gen_arbiter.rr_q [1];
  assign \gen_arbiter.gnt_nodes [1] = gnt_i & _23_;
  assign \gen_arbiter.gnt_nodes [3] = \gen_arbiter.gnt_nodes [1] & _24_;
  assign gnt_o[4] = \gen_arbiter.gnt_nodes [2] & req_i[4];
  assign \gen_arbiter.gnt_nodes [2] = gnt_i & \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign \gen_arbiter.gnt_nodes [4] = \gen_arbiter.gnt_nodes [1] & \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.rr_q  <= 3'h0;
    else if (_05_) \gen_arbiter.rr_q  <= _00_;
  assign _05_ = | { _16_, flush_i };
  assign _06_ = 32'd0 > \gen_arbiter.rr_q ;
  assign _07_ = 32'd1 > \gen_arbiter.rr_q ;
  assign _08_ = 32'd2 > \gen_arbiter.rr_q ;
  assign _09_ = 32'd3 > \gen_arbiter.rr_q ;
  assign _10_ = 32'd4 > \gen_arbiter.rr_q ;
  assign _11_ = 32'd0 <= \gen_arbiter.rr_q ;
  assign _12_ = 32'd1 <= \gen_arbiter.rr_q ;
  assign _13_ = 32'd2 <= \gen_arbiter.rr_q ;
  assign _14_ = 32'd3 <= \gen_arbiter.rr_q ;
  assign _15_ = 32'd4 <= \gen_arbiter.rr_q ;
  assign _16_ = gnt_i && req_o;
  assign _17_ = ~ req_i[0];
  assign _18_ = ~ req_i[2];
  assign _19_ = ~ \gen_arbiter.gen_levels[2].gen_level[0].sel ;
  assign _20_ = ~ \gen_arbiter.gen_levels[2].gen_level[1].sel ;
  assign _21_ = ~ \gen_arbiter.req_nodes [1];
  assign _22_ = ~ \gen_arbiter.req_nodes [3];
  assign _23_ = ~ \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign _24_ = ~ \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign \gen_arbiter.req_nodes [3] = req_i[0] | req_i[1];
  assign \gen_arbiter.req_nodes [4] = req_i[2] | req_i[3];
  assign \gen_arbiter.gen_levels[2].gen_level[0].sel  = _17_ | _01_;
  assign \gen_arbiter.gen_levels[2].gen_level[1].sel  = _18_ | _02_;
  assign req_o = \gen_arbiter.req_nodes [1] | req_i[4];
  assign \gen_arbiter.req_nodes [1] = \gen_arbiter.req_nodes [3] | \gen_arbiter.req_nodes [4];
  assign \gen_arbiter.gen_levels[0].gen_level[0].sel  = _21_ | _03_;
  assign \gen_arbiter.gen_levels[1].gen_level[0].sel  = _22_ | _04_;
  assign _00_ = flush_i ? 3'h0 : \gen_arbiter.gen_int_rr.rr_d ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = _06_ ? req_i[0] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1] = _07_ ? req_i[1] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2] = _08_ ? req_i[2] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3] = _09_ ? req_i[3] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [4] = _10_ ? req_i[4] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = _11_ ? req_i[0] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1] = _12_ ? req_i[1] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2] = _13_ ? req_i[2] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3] = _14_ ? req_i[3] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [4] = _15_ ? req_i[4] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx  = \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty  ? \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx  : \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  assign \gen_arbiter.gen_int_rr.rr_d  = _16_ ? \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx  : 3'hx;
  assign \gen_arbiter.data_nodes [159:120] = \gen_arbiter.gen_levels[2].gen_level[0].sel  ? data_i[79:40] : data_i[39:0];
  assign \gen_arbiter.data_nodes [199:160] = \gen_arbiter.gen_levels[2].gen_level[1].sel  ? data_i[159:120] : data_i[119:80];
  assign idx_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? { 1'h1, \sv2v_cast_29535$func$FPNewBlackbox_S1l3s.preprocessed.v:173$587.$result [1:0] } : { 1'h0, \sv2v_cast_29535$func$FPNewBlackbox_S1l3s.preprocessed.v:173$588.$result [1:0] };
  assign { \gen_arbiter.index_nodes [5], \sv2v_cast_29535$func$FPNewBlackbox_S1l3s.preprocessed.v:173$588.$result [1:0] } = \gen_arbiter.gen_levels[1].gen_level[0].sel  ? { 2'h1, \gen_arbiter.gen_levels[2].gen_level[1].sel  } : { 2'h0, \gen_arbiter.gen_levels[2].gen_level[0].sel  };
  assign { \gen_arbiter.index_nodes [8], \sv2v_cast_29535$func$FPNewBlackbox_S1l3s.preprocessed.v:173$587.$result [1:0] } = req_i[4] ? 3'h0 : 3'h2;
  assign data_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? \gen_arbiter.data_nodes [119:80] : \gen_arbiter.data_nodes [79:40];
  assign \gen_arbiter.data_nodes [79:40] = \gen_arbiter.gen_levels[1].gen_level[0].sel  ? \gen_arbiter.data_nodes [199:160] : \gen_arbiter.data_nodes [159:120];
  assign \gen_arbiter.data_nodes [119:80] = req_i[4] ? data_i[199:160] : 40'h0000000000;
  \$paramod\lzc\WIDTH=32'00000000000000000000000000000101\MODE=1'0  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask )
  );
  \$paramod\lzc\WIDTH=32'00000000000000000000000000000101\MODE=1'0  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask )
  );
  assign { \gen_arbiter.data_nodes [279:200], \gen_arbiter.data_nodes [39:0] } = { 40'h0000000000, data_i[199:160], data_o };
  assign { \gen_arbiter.gnt_nodes [5], \gen_arbiter.gnt_nodes [0] } = { gnt_o[4], gnt_i };
  assign { \gen_arbiter.index_nodes [20:9], \gen_arbiter.index_nodes [7:6], \gen_arbiter.index_nodes [4:0] } = { 8'h00, \gen_arbiter.gen_levels[2].gen_level[1].sel , 2'h0, \gen_arbiter.gen_levels[2].gen_level[0].sel , \sv2v_cast_29535$func$FPNewBlackbox_S1l3s.preprocessed.v:173$587.$result [1:0], \sv2v_cast_29535$func$FPNewBlackbox_S1l3s.preprocessed.v:173$588.$result [1:0], idx_o };
  assign \gen_arbiter.req_d  = req_i;
  assign { \gen_arbiter.req_nodes [6:5], \gen_arbiter.req_nodes [2], \gen_arbiter.req_nodes [0] } = { 1'h0, req_i[4], req_i[4], req_o };
  assign \sv2v_cast_29535$func$FPNewBlackbox_S1l3s.preprocessed.v:153$603.inp  = 3'hx;
  assign \sv2v_cast_29535$func$FPNewBlackbox_S1l3s.preprocessed.v:153$604.inp  = 3'hx;
  assign \sv2v_cast_29535$func$FPNewBlackbox_S1l3s.preprocessed.v:173$587.$result [2] = 1'h1;
  assign \sv2v_cast_29535$func$FPNewBlackbox_S1l3s.preprocessed.v:173$588.$result [2] = 1'h0;
  assign \sv2v_cast_29535$func$FPNewBlackbox_S1l3s.preprocessed.v:173$597.inp  = 3'hx;
  assign \sv2v_cast_29535$func$FPNewBlackbox_S1l3s.preprocessed.v:173$598.inp  = 3'hx;
  assign \sv2v_cast_29535$func$FPNewBlackbox_S1l3s.preprocessed.v:173$599.inp  = 3'hx;
  assign \sv2v_cast_29535$func$FPNewBlackbox_S1l3s.preprocessed.v:173$600.inp  = 3'hx;
  assign \sv2v_cast_29535$func$FPNewBlackbox_S1l3s.preprocessed.v:173$601.inp  = 3'hx;
  assign \sv2v_cast_29535$func$FPNewBlackbox_S1l3s.preprocessed.v:173$602.inp  = 3'hx;
endmodule

module \$paramod$3dc9b54c1a715af223bba72fd88f9cd46ba20ed0\lzc (in_i, cnt_o, empty_o);
  output [5:0] cnt_o;
  wire [5:0] cnt_o;
  output empty_o;
  wire empty_o;
  wire [31:0] \gen_lzc.flip_vector.sv2v_autoblock_1.i ;
  wire [50:0] \gen_lzc.in_tmp ;
  wire [305:0] \gen_lzc.index_lut ;
  wire [383:0] \gen_lzc.index_nodes ;
  wire [63:0] \gen_lzc.sel_nodes ;
  input [50:0] in_i;
  wire [50:0] in_i;
  assign empty_o = ~ \gen_lzc.sel_nodes [0];
  assign \gen_lzc.sel_nodes [31] = in_i[50] | in_i[49];
  assign \gen_lzc.sel_nodes [32] = in_i[48] | in_i[47];
  assign \gen_lzc.sel_nodes [33] = in_i[46] | in_i[45];
  assign \gen_lzc.sel_nodes [34] = in_i[44] | in_i[43];
  assign \gen_lzc.sel_nodes [35] = in_i[42] | in_i[41];
  assign \gen_lzc.sel_nodes [36] = in_i[40] | in_i[39];
  assign \gen_lzc.sel_nodes [37] = in_i[38] | in_i[37];
  assign \gen_lzc.sel_nodes [38] = in_i[36] | in_i[35];
  assign \gen_lzc.sel_nodes [39] = in_i[34] | in_i[33];
  assign \gen_lzc.sel_nodes [40] = in_i[32] | in_i[31];
  assign \gen_lzc.sel_nodes [41] = in_i[30] | in_i[29];
  assign \gen_lzc.sel_nodes [42] = in_i[28] | in_i[27];
  assign \gen_lzc.sel_nodes [43] = in_i[26] | in_i[25];
  assign \gen_lzc.sel_nodes [44] = in_i[24] | in_i[23];
  assign \gen_lzc.sel_nodes [45] = in_i[22] | in_i[21];
  assign \gen_lzc.sel_nodes [46] = in_i[20] | in_i[19];
  assign \gen_lzc.sel_nodes [47] = in_i[18] | in_i[17];
  assign \gen_lzc.sel_nodes [48] = in_i[16] | in_i[15];
  assign \gen_lzc.sel_nodes [49] = in_i[14] | in_i[13];
  assign \gen_lzc.sel_nodes [50] = in_i[12] | in_i[11];
  assign \gen_lzc.sel_nodes [51] = in_i[10] | in_i[9];
  assign \gen_lzc.sel_nodes [52] = in_i[8] | in_i[7];
  assign \gen_lzc.sel_nodes [53] = in_i[6] | in_i[5];
  assign \gen_lzc.sel_nodes [54] = in_i[4] | in_i[3];
  assign \gen_lzc.sel_nodes [55] = in_i[2] | in_i[1];
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | \gen_lzc.sel_nodes [2];
  assign \gen_lzc.sel_nodes [1] = \gen_lzc.sel_nodes [3] | \gen_lzc.sel_nodes [4];
  assign \gen_lzc.sel_nodes [2] = \gen_lzc.sel_nodes [5] | \gen_lzc.sel_nodes [6];
  assign \gen_lzc.sel_nodes [3] = \gen_lzc.sel_nodes [7] | \gen_lzc.sel_nodes [8];
  assign \gen_lzc.sel_nodes [4] = \gen_lzc.sel_nodes [9] | \gen_lzc.sel_nodes [10];
  assign \gen_lzc.sel_nodes [5] = \gen_lzc.sel_nodes [11] | \gen_lzc.sel_nodes [12];
  assign \gen_lzc.sel_nodes [7] = \gen_lzc.sel_nodes [15] | \gen_lzc.sel_nodes [16];
  assign \gen_lzc.sel_nodes [8] = \gen_lzc.sel_nodes [17] | \gen_lzc.sel_nodes [18];
  assign \gen_lzc.sel_nodes [9] = \gen_lzc.sel_nodes [19] | \gen_lzc.sel_nodes [20];
  assign \gen_lzc.sel_nodes [10] = \gen_lzc.sel_nodes [21] | \gen_lzc.sel_nodes [22];
  assign \gen_lzc.sel_nodes [11] = \gen_lzc.sel_nodes [23] | \gen_lzc.sel_nodes [24];
  assign \gen_lzc.sel_nodes [12] = \gen_lzc.sel_nodes [25] | \gen_lzc.sel_nodes [26];
  assign \gen_lzc.sel_nodes [15] = \gen_lzc.sel_nodes [31] | \gen_lzc.sel_nodes [32];
  assign \gen_lzc.sel_nodes [16] = \gen_lzc.sel_nodes [33] | \gen_lzc.sel_nodes [34];
  assign \gen_lzc.sel_nodes [17] = \gen_lzc.sel_nodes [35] | \gen_lzc.sel_nodes [36];
  assign \gen_lzc.sel_nodes [18] = \gen_lzc.sel_nodes [37] | \gen_lzc.sel_nodes [38];
  assign \gen_lzc.sel_nodes [19] = \gen_lzc.sel_nodes [39] | \gen_lzc.sel_nodes [40];
  assign \gen_lzc.sel_nodes [20] = \gen_lzc.sel_nodes [41] | \gen_lzc.sel_nodes [42];
  assign \gen_lzc.sel_nodes [21] = \gen_lzc.sel_nodes [43] | \gen_lzc.sel_nodes [44];
  assign \gen_lzc.sel_nodes [22] = \gen_lzc.sel_nodes [45] | \gen_lzc.sel_nodes [46];
  assign \gen_lzc.sel_nodes [23] = \gen_lzc.sel_nodes [47] | \gen_lzc.sel_nodes [48];
  assign \gen_lzc.sel_nodes [24] = \gen_lzc.sel_nodes [49] | \gen_lzc.sel_nodes [50];
  assign \gen_lzc.sel_nodes [25] = \gen_lzc.sel_nodes [51] | \gen_lzc.sel_nodes [52];
  assign \gen_lzc.sel_nodes [26] = \gen_lzc.sel_nodes [53] | \gen_lzc.sel_nodes [54];
  assign \gen_lzc.sel_nodes [6] = \gen_lzc.sel_nodes [55] | in_i[0];
  assign \gen_lzc.index_nodes [191:186] = in_i[50] ? 6'h00 : 6'h01;
  assign \gen_lzc.index_nodes [197:192] = in_i[48] ? 6'h02 : 6'h03;
  assign \gen_lzc.index_nodes [203:198] = in_i[46] ? 6'h04 : 6'h05;
  assign \gen_lzc.index_nodes [209:204] = in_i[44] ? 6'h06 : 6'h07;
  assign \gen_lzc.index_nodes [215:210] = in_i[42] ? 6'h08 : 6'h09;
  assign \gen_lzc.index_nodes [221:216] = in_i[40] ? 6'h0a : 6'h0b;
  assign \gen_lzc.index_nodes [227:222] = in_i[38] ? 6'h0c : 6'h0d;
  assign \gen_lzc.index_nodes [233:228] = in_i[36] ? 6'h0e : 6'h0f;
  assign \gen_lzc.index_nodes [239:234] = in_i[34] ? 6'h10 : 6'h11;
  assign \gen_lzc.index_nodes [245:240] = in_i[32] ? 6'h12 : 6'h13;
  assign \gen_lzc.index_nodes [251:246] = in_i[30] ? 6'h14 : 6'h15;
  assign \gen_lzc.index_nodes [257:252] = in_i[28] ? 6'h16 : 6'h17;
  assign \gen_lzc.index_nodes [263:258] = in_i[26] ? 6'h18 : 6'h19;
  assign \gen_lzc.index_nodes [269:264] = in_i[24] ? 6'h1a : 6'h1b;
  assign \gen_lzc.index_nodes [275:270] = in_i[22] ? 6'h1c : 6'h1d;
  assign \gen_lzc.index_nodes [281:276] = in_i[20] ? 6'h1e : 6'h1f;
  assign \gen_lzc.index_nodes [287:282] = in_i[18] ? 6'h20 : 6'h21;
  assign \gen_lzc.index_nodes [293:288] = in_i[16] ? 6'h22 : 6'h23;
  assign \gen_lzc.index_nodes [299:294] = in_i[14] ? 6'h24 : 6'h25;
  assign \gen_lzc.index_nodes [305:300] = in_i[12] ? 6'h26 : 6'h27;
  assign \gen_lzc.index_nodes [311:306] = in_i[10] ? 6'h28 : 6'h29;
  assign \gen_lzc.index_nodes [317:312] = in_i[8] ? 6'h2a : 6'h2b;
  assign \gen_lzc.index_nodes [323:318] = in_i[6] ? 6'h2c : 6'h2d;
  assign \gen_lzc.index_nodes [329:324] = in_i[4] ? 6'h2e : 6'h2f;
  assign \gen_lzc.index_nodes [335:330] = in_i[2] ? 6'h30 : 6'h31;
  assign cnt_o = \gen_lzc.sel_nodes [1] ? \gen_lzc.index_nodes [11:6] : \gen_lzc.index_nodes [17:12];
  assign \gen_lzc.index_nodes [11:6] = \gen_lzc.sel_nodes [3] ? \gen_lzc.index_nodes [23:18] : \gen_lzc.index_nodes [29:24];
  assign \gen_lzc.index_nodes [17:12] = \gen_lzc.sel_nodes [5] ? \gen_lzc.index_nodes [35:30] : \gen_lzc.index_nodes [41:36];
  assign \gen_lzc.index_nodes [23:18] = \gen_lzc.sel_nodes [7] ? \gen_lzc.index_nodes [47:42] : \gen_lzc.index_nodes [53:48];
  assign \gen_lzc.index_nodes [29:24] = \gen_lzc.sel_nodes [9] ? \gen_lzc.index_nodes [59:54] : \gen_lzc.index_nodes [65:60];
  assign \gen_lzc.index_nodes [35:30] = \gen_lzc.sel_nodes [11] ? \gen_lzc.index_nodes [71:66] : \gen_lzc.index_nodes [77:72];
  assign \gen_lzc.index_nodes [41:36] = \gen_lzc.sel_nodes [6] ? \gen_lzc.index_nodes [83:78] : 6'h00;
  assign \gen_lzc.index_nodes [47:42] = \gen_lzc.sel_nodes [15] ? \gen_lzc.index_nodes [95:90] : \gen_lzc.index_nodes [101:96];
  assign \gen_lzc.index_nodes [53:48] = \gen_lzc.sel_nodes [17] ? \gen_lzc.index_nodes [107:102] : \gen_lzc.index_nodes [113:108];
  assign \gen_lzc.index_nodes [59:54] = \gen_lzc.sel_nodes [19] ? \gen_lzc.index_nodes [119:114] : \gen_lzc.index_nodes [125:120];
  assign \gen_lzc.index_nodes [65:60] = \gen_lzc.sel_nodes [21] ? \gen_lzc.index_nodes [131:126] : \gen_lzc.index_nodes [137:132];
  assign \gen_lzc.index_nodes [71:66] = \gen_lzc.sel_nodes [23] ? \gen_lzc.index_nodes [143:138] : \gen_lzc.index_nodes [149:144];
  assign \gen_lzc.index_nodes [77:72] = \gen_lzc.sel_nodes [25] ? \gen_lzc.index_nodes [155:150] : \gen_lzc.index_nodes [161:156];
  assign \gen_lzc.index_nodes [95:90] = \gen_lzc.sel_nodes [31] ? \gen_lzc.index_nodes [191:186] : \gen_lzc.index_nodes [197:192];
  assign \gen_lzc.index_nodes [101:96] = \gen_lzc.sel_nodes [33] ? \gen_lzc.index_nodes [203:198] : \gen_lzc.index_nodes [209:204];
  assign \gen_lzc.index_nodes [107:102] = \gen_lzc.sel_nodes [35] ? \gen_lzc.index_nodes [215:210] : \gen_lzc.index_nodes [221:216];
  assign \gen_lzc.index_nodes [113:108] = \gen_lzc.sel_nodes [37] ? \gen_lzc.index_nodes [227:222] : \gen_lzc.index_nodes [233:228];
  assign \gen_lzc.index_nodes [119:114] = \gen_lzc.sel_nodes [39] ? \gen_lzc.index_nodes [239:234] : \gen_lzc.index_nodes [245:240];
  assign \gen_lzc.index_nodes [125:120] = \gen_lzc.sel_nodes [41] ? \gen_lzc.index_nodes [251:246] : \gen_lzc.index_nodes [257:252];
  assign \gen_lzc.index_nodes [131:126] = \gen_lzc.sel_nodes [43] ? \gen_lzc.index_nodes [263:258] : \gen_lzc.index_nodes [269:264];
  assign \gen_lzc.index_nodes [137:132] = \gen_lzc.sel_nodes [45] ? \gen_lzc.index_nodes [275:270] : \gen_lzc.index_nodes [281:276];
  assign \gen_lzc.index_nodes [143:138] = \gen_lzc.sel_nodes [47] ? \gen_lzc.index_nodes [287:282] : \gen_lzc.index_nodes [293:288];
  assign \gen_lzc.index_nodes [149:144] = \gen_lzc.sel_nodes [49] ? \gen_lzc.index_nodes [299:294] : \gen_lzc.index_nodes [305:300];
  assign \gen_lzc.index_nodes [155:150] = \gen_lzc.sel_nodes [51] ? \gen_lzc.index_nodes [311:306] : \gen_lzc.index_nodes [317:312];
  assign \gen_lzc.index_nodes [161:156] = \gen_lzc.sel_nodes [53] ? \gen_lzc.index_nodes [323:318] : \gen_lzc.index_nodes [329:324];
  assign \gen_lzc.index_nodes [83:78] = \gen_lzc.sel_nodes [55] ? \gen_lzc.index_nodes [335:330] : 6'h32;
  assign \gen_lzc.flip_vector.sv2v_autoblock_1.i  = 32'd51;
  assign \gen_lzc.in_tmp  = { in_i[0], in_i[1], in_i[2], in_i[3], in_i[4], in_i[5], in_i[6], in_i[7], in_i[8], in_i[9], in_i[10], in_i[11], in_i[12], in_i[13], in_i[14], in_i[15], in_i[16], in_i[17], in_i[18], in_i[19], in_i[20], in_i[21], in_i[22], in_i[23], in_i[24], in_i[25], in_i[26], in_i[27], in_i[28], in_i[29], in_i[30], in_i[31], in_i[32], in_i[33], in_i[34], in_i[35], in_i[36], in_i[37], in_i[38], in_i[39], in_i[40], in_i[41], in_i[42], in_i[43], in_i[44], in_i[45], in_i[46], in_i[47], in_i[48], in_i[49], in_i[50] };
  assign \gen_lzc.index_lut  = 306'h32c70beeb6caeaa689e69648e28607de75c6da6585d65544d24503ce34c2ca2481c61440c2040;
  assign { \gen_lzc.index_nodes [377:336], \gen_lzc.index_nodes [185:162], \gen_lzc.index_nodes [89:84], \gen_lzc.index_nodes [5:0] } = { 60'h000000000c80000, \gen_lzc.index_nodes [83:78], 6'h00, cnt_o };
  assign { \gen_lzc.sel_nodes [62:56], \gen_lzc.sel_nodes [30:27], \gen_lzc.sel_nodes [14:13] } = { 6'h00, in_i[0], 3'h0, \gen_lzc.sel_nodes [6], 1'h0, \gen_lzc.sel_nodes [6] };
endmodule

module \$paramod$4b918de69dcd218cd5910703264e623352cb07ac\rr_arb_tree_DE4E6_76EE6 (clk_i, rst_ni, flush_i, rr_i, req_i, gnt_o, data_i, req_o, gnt_i, data_o, idx_o);
  wire [1:0] _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  input clk_i;
  wire clk_i;
  input [155:0] data_i;
  wire [155:0] data_i;
  output [38:0] data_o;
  wire [38:0] data_o;
  input flush_i;
  wire flush_i;
  wire [116:0] \gen_arbiter.data_nodes ;
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  wire [1:0] \gen_arbiter.gen_int_rr.rr_d ;
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  wire \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  wire [2:0] \gen_arbiter.gnt_nodes ;
  wire [5:0] \gen_arbiter.index_nodes ;
  wire [3:0] \gen_arbiter.req_d ;
  wire [2:0] \gen_arbiter.req_nodes ;
  reg [1:0] \gen_arbiter.rr_q ;
  input gnt_i;
  wire gnt_i;
  output [3:0] gnt_o;
  wire [3:0] gnt_o;
  output [1:0] idx_o;
  wire [1:0] idx_o;
  input [3:0] req_i;
  wire [3:0] req_i;
  output req_o;
  wire req_o;
  input [1:0] rr_i;
  wire [1:0] rr_i;
  input rst_ni;
  wire rst_ni;
  wire [1:0] \sv2v_cast_29535$func$FPNewBlackbox_S1l3s.preprocessed.v:335$515.inp ;
  wire [1:0] \sv2v_cast_29535$func$FPNewBlackbox_S1l3s.preprocessed.v:335$516.inp ;
  wire [1:0] \sv2v_cast_29535$func$FPNewBlackbox_S1l3s.preprocessed.v:355$513.inp ;
  wire [1:0] \sv2v_cast_29535$func$FPNewBlackbox_S1l3s.preprocessed.v:355$514.inp ;
  assign _01_ = req_i[1] & \gen_arbiter.rr_q [0];
  assign _02_ = req_i[3] & \gen_arbiter.rr_q [0];
  assign gnt_o[0] = \gen_arbiter.gnt_nodes [1] & _16_;
  assign gnt_o[2] = \gen_arbiter.gnt_nodes [2] & _17_;
  assign gnt_o[1] = \gen_arbiter.gnt_nodes [1] & \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign gnt_o[3] = \gen_arbiter.gnt_nodes [2] & \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  assign _03_ = \gen_arbiter.req_nodes [2] & \gen_arbiter.rr_q [1];
  assign \gen_arbiter.gnt_nodes [1] = gnt_i & _19_;
  assign \gen_arbiter.gnt_nodes [2] = gnt_i & \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.rr_q  <= 2'h0;
    else if (_04_) \gen_arbiter.rr_q  <= _00_;
  assign _04_ = | { _13_, flush_i };
  assign _05_ = 32'd0 > \gen_arbiter.rr_q ;
  assign _06_ = 32'd1 > \gen_arbiter.rr_q ;
  assign _07_ = 32'd2 > \gen_arbiter.rr_q ;
  assign _08_ = 32'd3 > \gen_arbiter.rr_q ;
  assign _09_ = 32'd0 <= \gen_arbiter.rr_q ;
  assign _10_ = 32'd1 <= \gen_arbiter.rr_q ;
  assign _11_ = 32'd2 <= \gen_arbiter.rr_q ;
  assign _12_ = 32'd3 <= \gen_arbiter.rr_q ;
  assign _13_ = gnt_i && req_o;
  assign _14_ = ~ req_i[0];
  assign _15_ = ~ req_i[2];
  assign _16_ = ~ \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign _17_ = ~ \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  assign _18_ = ~ \gen_arbiter.req_nodes [1];
  assign _19_ = ~ \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign \gen_arbiter.req_nodes [1] = req_i[0] | req_i[1];
  assign \gen_arbiter.req_nodes [2] = req_i[2] | req_i[3];
  assign \gen_arbiter.gen_levels[1].gen_level[0].sel  = _14_ | _01_;
  assign \gen_arbiter.gen_levels[1].gen_level[1].sel  = _15_ | _02_;
  assign req_o = \gen_arbiter.req_nodes [1] | \gen_arbiter.req_nodes [2];
  assign \gen_arbiter.gen_levels[0].gen_level[0].sel  = _18_ | _03_;
  assign _00_ = flush_i ? 2'h0 : \gen_arbiter.gen_int_rr.rr_d ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = _05_ ? req_i[0] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1] = _06_ ? req_i[1] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2] = _07_ ? req_i[2] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3] = _08_ ? req_i[3] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = _09_ ? req_i[0] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1] = _10_ ? req_i[1] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2] = _11_ ? req_i[2] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3] = _12_ ? req_i[3] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx  = \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty  ? \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx  : \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  assign \gen_arbiter.gen_int_rr.rr_d  = _13_ ? \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx  : 2'hx;
  assign \gen_arbiter.data_nodes [77:39] = \gen_arbiter.gen_levels[1].gen_level[0].sel  ? data_i[77:39] : data_i[38:0];
  assign \gen_arbiter.data_nodes [116:78] = \gen_arbiter.gen_levels[1].gen_level[1].sel  ? data_i[155:117] : data_i[116:78];
  assign idx_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? { 1'h1, \gen_arbiter.gen_levels[1].gen_level[1].sel  } : { 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel  };
  assign data_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? \gen_arbiter.data_nodes [116:78] : \gen_arbiter.data_nodes [77:39];
  \$paramod\lzc\WIDTH=32'00000000000000000000000000000100\MODE=1'0  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask )
  );
  \$paramod\lzc\WIDTH=32'00000000000000000000000000000100\MODE=1'0  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask )
  );
  assign \gen_arbiter.data_nodes [38:0] = data_o;
  assign \gen_arbiter.gnt_nodes [0] = gnt_i;
  assign \gen_arbiter.index_nodes  = { 1'h0, \gen_arbiter.gen_levels[1].gen_level[1].sel , 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel , idx_o };
  assign \gen_arbiter.req_d  = req_i;
  assign \gen_arbiter.req_nodes [0] = req_o;
  assign \sv2v_cast_29535$func$FPNewBlackbox_S1l3s.preprocessed.v:335$515.inp  = 2'hx;
  assign \sv2v_cast_29535$func$FPNewBlackbox_S1l3s.preprocessed.v:335$516.inp  = 2'hx;
  assign \sv2v_cast_29535$func$FPNewBlackbox_S1l3s.preprocessed.v:355$513.inp  = 2'hx;
  assign \sv2v_cast_29535$func$FPNewBlackbox_S1l3s.preprocessed.v:355$514.inp  = 2'hx;
endmodule

module \$paramod$6a56daa284ee7ecf4b17ad071518a3d0a64707d6\fpnew_top_21317_11D0A (clk_i, rst_ni, operands_i, rnd_mode_i, op_i, op_mod_i, src_fmt_i, dst_fmt_i, int_fmt_i, vectorial_op_i, tag_i, simd_mask_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, tag_o, out_valid_o, out_ready_i, busy_o
);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire [38:0] arbiter_output;
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  input [2:0] dst_fmt_i;
  wire [2:0] dst_fmt_i;
  input flush_i;
  wire flush_i;
  wire [3:0] \fpnew_pkg_get_opgroup$func$FPNewBlackbox_S1l3s.preprocessed.v:8198$212.op ;
  wire [1:0] \fpnew_pkg_get_opgroup$func$FPNewBlackbox_S1l3s.preprocessed.v:8198$55.$result ;
  wire [1:0] \fpnew_pkg_get_opgroup$func$FPNewBlackbox_S1l3s.preprocessed.v:8247$109.$result ;
  wire [1:0] \fpnew_pkg_get_opgroup$func$FPNewBlackbox_S1l3s.preprocessed.v:8247$144.$result ;
  wire [1:0] \fpnew_pkg_get_opgroup$func$FPNewBlackbox_S1l3s.preprocessed.v:8247$179.$result ;
  wire [3:0] \fpnew_pkg_get_opgroup$func$FPNewBlackbox_S1l3s.preprocessed.v:8247$228.op ;
  wire [3:0] \fpnew_pkg_get_opgroup$func$FPNewBlackbox_S1l3s.preprocessed.v:8247$244.op ;
  wire [3:0] \fpnew_pkg_get_opgroup$func$FPNewBlackbox_S1l3s.preprocessed.v:8247$260.op ;
  wire [3:0] \fpnew_pkg_get_opgroup$func$FPNewBlackbox_S1l3s.preprocessed.v:8247$276.op ;
  wire [1:0] \fpnew_pkg_get_opgroup$func$FPNewBlackbox_S1l3s.preprocessed.v:8247$74.$result ;
  wire \gen_operation_groups[0].in_valid ;
  wire [14:0] \gen_operation_groups[0].input_boxed ;
  wire [31:0] \gen_operation_groups[0].slice_inputs.sv2v_autoblock_3.fmt ;
  wire \gen_operation_groups[1].in_valid ;
  wire [9:0] \gen_operation_groups[1].input_boxed ;
  wire [31:0] \gen_operation_groups[1].slice_inputs.sv2v_autoblock_3.fmt ;
  wire \gen_operation_groups[2].in_valid ;
  wire [9:0] \gen_operation_groups[2].input_boxed ;
  wire [31:0] \gen_operation_groups[2].slice_inputs.sv2v_autoblock_3.fmt ;
  wire \gen_operation_groups[3].in_valid ;
  wire [14:0] \gen_operation_groups[3].input_boxed ;
  wire [31:0] \gen_operation_groups[3].slice_inputs.sv2v_autoblock_3.fmt ;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  input [1:0] int_fmt_i;
  wire [1:0] int_fmt_i;
  wire [14:0] is_boxed;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  input [95:0] operands_i;
  wire [95:0] operands_i;
  wire [3:0] opgrp_busy;
  wire [3:0] opgrp_ext;
  wire [3:0] opgrp_in_ready;
  wire [3:0] opgrp_out_ready;
  wire [3:0] opgrp_out_valid;
  wire [155:0] opgrp_outputs;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  output [31:0] result_o;
  wire [31:0] result_o;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input rst_ni;
  wire rst_ni;
  wire simd_mask;
  input simd_mask_i;
  wire simd_mask_i;
  input [2:0] src_fmt_i;
  wire [2:0] src_fmt_i;
  output [4:0] status_o;
  wire [4:0] status_o;
  input [1:0] tag_i;
  wire [1:0] tag_i;
  output [1:0] tag_o;
  wire [1:0] tag_o;
  input vectorial_op_i;
  wire vectorial_op_i;
  reg [1:0] \$auto$proc_rom.cc:150:do_switch$1399  [15:0];
  initial begin
    \$auto$proc_rom.cc:150:do_switch$1399 [0] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1399 [1] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1399 [2] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1399 [3] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1399 [4] = 2'h1;
    \$auto$proc_rom.cc:150:do_switch$1399 [5] = 2'h1;
    \$auto$proc_rom.cc:150:do_switch$1399 [6] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1399 [7] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1399 [8] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1399 [9] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1399 [10] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1399 [11] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1399 [12] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1399 [13] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1399 [14] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1399 [15] = 2'h2;
  end
  assign \fpnew_pkg_get_opgroup$func$FPNewBlackbox_S1l3s.preprocessed.v:8247$179.$result  = \$auto$proc_rom.cc:150:do_switch$1399 [op_i];
  reg [1:0] \$auto$proc_rom.cc:150:do_switch$1403  [15:0];
  initial begin
    \$auto$proc_rom.cc:150:do_switch$1403 [0] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1403 [1] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1403 [2] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1403 [3] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1403 [4] = 2'h1;
    \$auto$proc_rom.cc:150:do_switch$1403 [5] = 2'h1;
    \$auto$proc_rom.cc:150:do_switch$1403 [6] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1403 [7] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1403 [8] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1403 [9] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1403 [10] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1403 [11] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1403 [12] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1403 [13] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1403 [14] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1403 [15] = 2'h2;
  end
  assign \fpnew_pkg_get_opgroup$func$FPNewBlackbox_S1l3s.preprocessed.v:8247$144.$result  = \$auto$proc_rom.cc:150:do_switch$1403 [op_i];
  reg [1:0] \$auto$proc_rom.cc:150:do_switch$1407  [15:0];
  initial begin
    \$auto$proc_rom.cc:150:do_switch$1407 [0] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1407 [1] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1407 [2] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1407 [3] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1407 [4] = 2'h1;
    \$auto$proc_rom.cc:150:do_switch$1407 [5] = 2'h1;
    \$auto$proc_rom.cc:150:do_switch$1407 [6] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1407 [7] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1407 [8] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1407 [9] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1407 [10] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1407 [11] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1407 [12] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1407 [13] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1407 [14] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1407 [15] = 2'h2;
  end
  assign \fpnew_pkg_get_opgroup$func$FPNewBlackbox_S1l3s.preprocessed.v:8247$109.$result  = \$auto$proc_rom.cc:150:do_switch$1407 [op_i];
  reg [1:0] \$auto$proc_rom.cc:150:do_switch$1411  [15:0];
  initial begin
    \$auto$proc_rom.cc:150:do_switch$1411 [0] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1411 [1] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1411 [2] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1411 [3] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1411 [4] = 2'h1;
    \$auto$proc_rom.cc:150:do_switch$1411 [5] = 2'h1;
    \$auto$proc_rom.cc:150:do_switch$1411 [6] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1411 [7] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1411 [8] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1411 [9] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1411 [10] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1411 [11] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1411 [12] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1411 [13] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1411 [14] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1411 [15] = 2'h2;
  end
  assign \fpnew_pkg_get_opgroup$func$FPNewBlackbox_S1l3s.preprocessed.v:8247$74.$result  = \$auto$proc_rom.cc:150:do_switch$1411 [op_i];
  reg [1:0] \$auto$proc_rom.cc:150:do_switch$1415  [15:0];
  initial begin
    \$auto$proc_rom.cc:150:do_switch$1415 [0] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1415 [1] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1415 [2] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1415 [3] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1415 [4] = 2'h1;
    \$auto$proc_rom.cc:150:do_switch$1415 [5] = 2'h1;
    \$auto$proc_rom.cc:150:do_switch$1415 [6] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1415 [7] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1415 [8] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1415 [9] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1415 [10] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1415 [11] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1415 [12] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1415 [13] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1415 [14] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1415 [15] = 2'h2;
  end
  assign \fpnew_pkg_get_opgroup$func$FPNewBlackbox_S1l3s.preprocessed.v:8198$55.$result  = \$auto$proc_rom.cc:150:do_switch$1415 [op_i];
  assign in_ready_o = in_valid_i & _10_;
  assign \gen_operation_groups[0].in_valid  = in_valid_i & _06_;
  assign \gen_operation_groups[1].in_valid  = in_valid_i & _07_;
  assign \gen_operation_groups[2].in_valid  = in_valid_i & _08_;
  assign \gen_operation_groups[3].in_valid  = in_valid_i & _09_;
  assign _03_ = operands_i[31:8] == 24'hffffff;
  assign _04_ = operands_i[63:40] == 24'hffffff;
  assign _05_ = operands_i[95:72] == 24'hffffff;
  assign _00_ = operands_i[31:16] == 16'hffff;
  assign _01_ = operands_i[63:48] == 16'hffff;
  assign _02_ = operands_i[95:80] == 16'hffff;
  assign _06_ = ! \fpnew_pkg_get_opgroup$func$FPNewBlackbox_S1l3s.preprocessed.v:8247$74.$result ;
  assign _07_ = \fpnew_pkg_get_opgroup$func$FPNewBlackbox_S1l3s.preprocessed.v:8247$109.$result  == 2'h1;
  assign _08_ = \fpnew_pkg_get_opgroup$func$FPNewBlackbox_S1l3s.preprocessed.v:8247$144.$result  == 2'h2;
  assign _09_ = \fpnew_pkg_get_opgroup$func$FPNewBlackbox_S1l3s.preprocessed.v:8247$179.$result  == 2'h3;
  assign busy_o = | opgrp_busy;
  wire [3:0] _44_ = opgrp_in_ready;
  assign _10_ = _44_[\fpnew_pkg_get_opgroup$func$FPNewBlackbox_S1l3s.preprocessed.v:8198$55.$result  +: 1];
  assign \gen_operation_groups[0].input_boxed [9] = vectorial_op_i ? 1'h1 : _03_;
  assign \gen_operation_groups[0].input_boxed [10] = vectorial_op_i ? 1'h1 : _04_;
  assign \gen_operation_groups[0].input_boxed [11] = vectorial_op_i ? 1'h1 : _05_;
  assign \gen_operation_groups[0].input_boxed [12] = vectorial_op_i ? 1'h1 : _00_;
  assign \gen_operation_groups[0].input_boxed [13] = vectorial_op_i ? 1'h1 : _01_;
  assign \gen_operation_groups[0].input_boxed [14] = vectorial_op_i ? 1'h1 : _02_;
  \$paramod$02f84567614b4a0fd323fc4ecb8cda5faadbf32c\fpnew_opgroup_block_A94B6_B7406  \gen_operation_groups[0].i_opgroup_block  (
    .busy_o(opgrp_busy[0]),
    .clk_i(clk_i),
    .dst_fmt_i(dst_fmt_i),
    .extension_bit_o(opgrp_ext[0]),
    .flush_i(flush_i),
    .in_ready_o(opgrp_in_ready[0]),
    .in_valid_i(\gen_operation_groups[0].in_valid ),
    .int_fmt_i(int_fmt_i),
    .is_boxed_i({ \gen_operation_groups[0].input_boxed [14:9], \gen_operation_groups[0].input_boxed [14:12], 6'h3f }),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i(operands_i),
    .out_ready_i(opgrp_out_ready[0]),
    .out_valid_o(opgrp_out_valid[0]),
    .result_o(opgrp_outputs[38:7]),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .simd_mask_i(1'h1),
    .src_fmt_i(src_fmt_i),
    .status_o(opgrp_outputs[6:2]),
    .tag_i(tag_i),
    .tag_o(opgrp_outputs[1:0]),
    .vectorial_op_i(vectorial_op_i)
  );
  \$paramod$f637a6ae809e8c6b10b7a391a377fed1aeca29f3\fpnew_opgroup_block_A94B6_B7406  \gen_operation_groups[1].i_opgroup_block  (
    .busy_o(opgrp_busy[1]),
    .clk_i(clk_i),
    .dst_fmt_i(dst_fmt_i),
    .extension_bit_o(opgrp_ext[1]),
    .flush_i(flush_i),
    .in_ready_o(opgrp_in_ready[1]),
    .in_valid_i(\gen_operation_groups[1].in_valid ),
    .int_fmt_i(int_fmt_i),
    .is_boxed_i({ \gen_operation_groups[0].input_boxed [13:12], \gen_operation_groups[0].input_boxed [10:9], \gen_operation_groups[0].input_boxed [13:12], 4'hf }),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i(operands_i[63:0]),
    .out_ready_i(opgrp_out_ready[1]),
    .out_valid_o(opgrp_out_valid[1]),
    .result_o(opgrp_outputs[77:46]),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .simd_mask_i(1'h1),
    .src_fmt_i(src_fmt_i),
    .status_o(opgrp_outputs[45:41]),
    .tag_i(tag_i),
    .tag_o(opgrp_outputs[40:39]),
    .vectorial_op_i(vectorial_op_i)
  );
  \$paramod$d5b90fe66138c08936b0a7e1923bfbabdfdb9d7d\fpnew_opgroup_block_A94B6_B7406  \gen_operation_groups[2].i_opgroup_block  (
    .busy_o(opgrp_busy[2]),
    .clk_i(clk_i),
    .dst_fmt_i(dst_fmt_i),
    .extension_bit_o(opgrp_ext[2]),
    .flush_i(flush_i),
    .in_ready_o(opgrp_in_ready[2]),
    .in_valid_i(\gen_operation_groups[2].in_valid ),
    .int_fmt_i(int_fmt_i),
    .is_boxed_i({ \gen_operation_groups[0].input_boxed [13:12], \gen_operation_groups[0].input_boxed [10:9], \gen_operation_groups[0].input_boxed [13:12], 4'hf }),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i(operands_i[63:0]),
    .out_ready_i(opgrp_out_ready[2]),
    .out_valid_o(opgrp_out_valid[2]),
    .result_o(opgrp_outputs[116:85]),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .simd_mask_i(1'h1),
    .src_fmt_i(src_fmt_i),
    .status_o(opgrp_outputs[84:80]),
    .tag_i(tag_i),
    .tag_o(opgrp_outputs[79:78]),
    .vectorial_op_i(vectorial_op_i)
  );
  \$paramod$f61d992db5aa3ae46b9b60ce3145ed1289f77ea5\fpnew_opgroup_block_A94B6_B7406  \gen_operation_groups[3].i_opgroup_block  (
    .busy_o(opgrp_busy[3]),
    .clk_i(clk_i),
    .dst_fmt_i(dst_fmt_i),
    .extension_bit_o(opgrp_ext[3]),
    .flush_i(flush_i),
    .in_ready_o(opgrp_in_ready[3]),
    .in_valid_i(\gen_operation_groups[3].in_valid ),
    .int_fmt_i(int_fmt_i),
    .is_boxed_i({ \gen_operation_groups[0].input_boxed [14:9], \gen_operation_groups[0].input_boxed [14:12], 6'h3f }),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i(operands_i),
    .out_ready_i(opgrp_out_ready[3]),
    .out_valid_o(opgrp_out_valid[3]),
    .result_o(opgrp_outputs[155:124]),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .simd_mask_i(1'h1),
    .src_fmt_i(src_fmt_i),
    .status_o(opgrp_outputs[123:119]),
    .tag_i(tag_i),
    .tag_o(opgrp_outputs[118:117]),
    .vectorial_op_i(vectorial_op_i)
  );
  \$paramod$4b918de69dcd218cd5910703264e623352cb07ac\rr_arb_tree_DE4E6_76EE6  i_arbiter (
    .clk_i(clk_i),
    .data_i(opgrp_outputs),
    .data_o(arbiter_output),
    .flush_i(flush_i),
    .gnt_i(out_ready_i),
    .gnt_o(opgrp_out_ready),
    .req_i(opgrp_out_valid),
    .req_o(out_valid_o),
    .rr_i(2'h0),
    .rst_ni(rst_ni)
  );
  assign \fpnew_pkg_get_opgroup$func$FPNewBlackbox_S1l3s.preprocessed.v:8198$212.op  = 4'hx;
  assign \fpnew_pkg_get_opgroup$func$FPNewBlackbox_S1l3s.preprocessed.v:8247$228.op  = 4'hx;
  assign \fpnew_pkg_get_opgroup$func$FPNewBlackbox_S1l3s.preprocessed.v:8247$244.op  = 4'hx;
  assign \fpnew_pkg_get_opgroup$func$FPNewBlackbox_S1l3s.preprocessed.v:8247$260.op  = 4'hx;
  assign \fpnew_pkg_get_opgroup$func$FPNewBlackbox_S1l3s.preprocessed.v:8247$276.op  = 4'hx;
  assign \gen_operation_groups[0].input_boxed [8:0] = { \gen_operation_groups[0].input_boxed [14:12], 6'h3f };
  assign \gen_operation_groups[0].slice_inputs.sv2v_autoblock_3.fmt  = 32'd5;
  assign \gen_operation_groups[1].input_boxed  = { \gen_operation_groups[0].input_boxed [13:12], \gen_operation_groups[0].input_boxed [10:9], \gen_operation_groups[0].input_boxed [13:12], 4'hf };
  assign \gen_operation_groups[1].slice_inputs.sv2v_autoblock_3.fmt  = 32'd5;
  assign \gen_operation_groups[2].input_boxed  = { \gen_operation_groups[0].input_boxed [13:12], \gen_operation_groups[0].input_boxed [10:9], \gen_operation_groups[0].input_boxed [13:12], 4'hf };
  assign \gen_operation_groups[2].slice_inputs.sv2v_autoblock_3.fmt  = 32'd5;
  assign \gen_operation_groups[3].input_boxed  = { \gen_operation_groups[0].input_boxed [14:9], \gen_operation_groups[0].input_boxed [14:12], 6'h3f };
  assign \gen_operation_groups[3].slice_inputs.sv2v_autoblock_3.fmt  = 32'd5;
  assign is_boxed = { \gen_operation_groups[0].input_boxed [14:9], \gen_operation_groups[0].input_boxed [14:12], 6'h3f };
  assign result_o = arbiter_output[38:7];
  assign simd_mask = 1'h1;
  assign status_o = arbiter_output[6:2];
  assign tag_o = arbiter_output[1:0];
endmodule

module \$paramod$801e9fb1703a709ea20c8c1c48b091cb830061d3\fpnew_fma_FC83A_5615B (clk_i, rst_ni, operands_i, is_boxed_i, rnd_mode_i, op_i, op_mod_i, tag_i, mask_i, aux_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, extension_bit_o, tag_o, mask_o, aux_o, out_valid_o, out_ready_i
, busy_o, reg_ena_i);
  wire _000_;
  wire _001_;
  wire _002_;
  wire [6:0] _003_;
  wire [9:0] _004_;
  wire [24:0] _005_;
  wire [6:0] _006_;
  wire [9:0] _007_;
  wire [31:0] _008_;
  wire _009_;
  wire [31:0] _010_;
  wire _011_;
  wire [50:0] _012_;
  wire [9:0] _013_;
  wire [24:0] _014_;
  wire _015_;
  wire [31:0] _016_;
  wire _017_;
  wire [50:0] _018_;
  wire [31:0] _019_;
  wire _020_;
  wire [31:0] _021_;
  wire [31:0] _022_;
  wire [31:0] _023_;
  wire [31:0] _024_;
  wire [31:0] _025_;
  wire [76:0] _026_;
  wire [31:0] _027_;
  wire [31:0] _028_;
  wire [31:0] _029_;
  wire [31:0] _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire [76:0] _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire [75:0] _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire [31:0] _091_;
  wire [31:0] _092_;
  wire [31:0] _093_;
  wire [31:0] _094_;
  wire _095_;
  wire [31:0] _096_;
  wire [76:0] _097_;
  wire _098_;
  wire _099_;
  wire [31:0] _100_;
  wire _101_;
  wire _102_;
  wire [75:0] addend_after_shift;
  wire [6:0] addend_shamt;
  wire [6:0] addend_shamt_q;
  wire [75:0] addend_shifted;
  wire [23:0] addend_sticky_bits;
  wire any_operand_inf;
  wire any_operand_nan;
  input aux_i;
  wire aux_i;
  output aux_o;
  wire aux_o;
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  wire effective_subtraction;
  wire effective_subtraction_q;
  wire [9:0] exponent_a;
  wire [9:0] exponent_addend;
  wire [9:0] exponent_b;
  wire [9:0] exponent_c;
  wire [9:0] exponent_difference;
  wire [9:0] exponent_difference_q;
  wire [9:0] exponent_product;
  wire [9:0] exponent_product_q;
  output extension_bit_o;
  wire extension_bit_o;
  wire [9:0] final_exponent;
  wire [24:0] final_mantissa;
  wire final_sign;
  wire final_sign_q;
  input flush_i;
  wire flush_i;
  wire \gen_input_pipeline[0].reg_ena ;
  wire \gen_inside_pipeline[0].reg_ena ;
  wire \gen_output_pipeline[0].reg_ena ;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  wire [7:0] info_a;
  wire [7:0] info_b;
  wire [7:0] info_c;
  wire [23:0] info_q;
  wire inject_carry_in;
  wire [0:1] inp_pipe_aux_q;
  wire [5:0] inp_pipe_is_boxed_q;
  wire [0:1] inp_pipe_mask_q;
  wire [0:1] inp_pipe_op_mod_q;
  wire [7:0] inp_pipe_op_q;
  wire [191:0] inp_pipe_operands_q;
  wire [0:1] inp_pipe_ready;
  wire [5:0] inp_pipe_rnd_mode_q;
  wire [3:0] inp_pipe_tag_q;
  wire [0:1] inp_pipe_valid_q;
  input [2:0] is_boxed_i;
  wire [2:0] is_boxed_i;
  wire [5:0] leading_zero_count;
  wire [6:0] leading_zero_count_sgn;
  wire lzc_zeroes;
  wire [23:0] mantissa_a;
  wire [23:0] mantissa_b;
  wire [23:0] mantissa_c;
  input mask_i;
  wire mask_i;
  output mask_o;
  wire mask_o;
  wire [13:0] mid_pipe_add_shamt_q;
  wire [0:1] mid_pipe_aux_q;
  wire [0:1] mid_pipe_eff_sub_q;
  wire [19:0] mid_pipe_exp_diff_q;
  wire [19:0] mid_pipe_exp_prod_q;
  wire [0:1] mid_pipe_final_sign_q;
  wire [0:1] mid_pipe_mask_q;
  wire [0:1] mid_pipe_ready;
  wire [0:1] mid_pipe_res_is_spec_q;
  wire [5:0] mid_pipe_rnd_mode_q;
  wire [63:0] mid_pipe_spec_res_q;
  wire [9:0] mid_pipe_spec_stat_q;
  wire [0:1] mid_pipe_sticky_q;
  wire [151:0] mid_pipe_sum_q;
  wire [3:0] mid_pipe_tag_q;
  wire [19:0] mid_pipe_tent_exp_q;
  wire [0:1] mid_pipe_valid_q;
  wire [6:0] norm_shamt;
  wire [9:0] normalized_exponent;
  wire of_after_round;
  wire of_before_round;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  wire [31:0] operand_a;
  wire [31:0] operand_b;
  wire [31:0] operand_c;
  input [95:0] operands_i;
  wire [95:0] operands_i;
  wire [0:1] out_pipe_aux_q;
  wire [0:1] out_pipe_mask_q;
  wire [0:1] out_pipe_ready;
  wire [63:0] out_pipe_result_q;
  wire [9:0] out_pipe_status_q;
  wire [3:0] out_pipe_tag_q;
  wire [0:1] out_pipe_valid_q;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  wire [30:0] pre_round_abs;
  wire [7:0] pre_round_exponent;
  wire [22:0] pre_round_mantissa;
  wire pre_round_sign;
  wire [47:0] product;
  wire [75:0] product_shifted;
  input [2:0] reg_ena_i;
  wire [2:0] reg_ena_i;
  wire [31:0] regular_result;
  wire [4:0] regular_status;
  wire [31:0] result_d;
  wire result_is_special;
  wire result_is_special_q;
  output [31:0] result_o;
  wire [31:0] result_o;
  wire result_zero;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_q;
  wire [1:0] round_sticky_bits;
  wire [30:0] rounded_abs;
  wire rounded_sign;
  input rst_ni;
  wire rst_ni;
  wire signalling_nan;
  wire [31:0] special_result;
  wire [31:0] special_result_q;
  wire [4:0] special_status;
  wire [4:0] special_status_q;
  wire [4:0] status_d;
  output [4:0] status_o;
  wire [4:0] status_o;
  wire sticky_after_norm;
  wire sticky_before_add;
  wire sticky_before_add_q;
  wire [75:0] sum;
  wire sum_carry;
  wire [50:0] sum_lower;
  wire [75:0] sum_q;
  wire [76:0] sum_raw;
  wire [76:0] sum_shifted;
  wire [50:0] sum_sticky_bits;
  wire [10:1] sv2v_tmp_00793;
  wire [32:1] sv2v_tmp_0252C;
  wire [2:1] sv2v_tmp_192AB;
  wire sv2v_tmp_25EE6;
  wire [5:1] sv2v_tmp_2A843;
  wire [10:1] sv2v_tmp_2D21E;
  wire [2:1] sv2v_tmp_36387;
  wire sv2v_tmp_407DF;
  wire [32:1] sv2v_tmp_4A83E;
  wire sv2v_tmp_56A72;
  wire [2:1] sv2v_tmp_6DFE4;
  wire sv2v_tmp_6F5F7;
  wire sv2v_tmp_73AEA;
  wire sv2v_tmp_7DEC5;
  wire [7:1] sv2v_tmp_83404;
  wire sv2v_tmp_8D189;
  wire sv2v_tmp_9E262;
  wire [3:1] sv2v_tmp_A74E2;
  wire [10:1] sv2v_tmp_B4C85;
  wire [96:1] sv2v_tmp_BC8B9;
  wire sv2v_tmp_CB10A;
  wire [4:1] sv2v_tmp_CBA8F;
  wire sv2v_tmp_CDA0E;
  wire [76:1] sv2v_tmp_CEAB3;
  wire sv2v_tmp_D1C37;
  wire sv2v_tmp_D7646;
  wire sv2v_tmp_D7BD0;
  wire sv2v_tmp_DB780;
  wire [3:1] sv2v_tmp_E1339;
  wire [5:1] sv2v_tmp_EC01B;
  wire [3:1] sv2v_tmp_FE389;
  input [1:0] tag_i;
  wire [1:0] tag_i;
  output [1:0] tag_o;
  wire [1:0] tag_o;
  wire [9:0] tentative_exponent;
  wire [9:0] tentative_exponent_q;
  wire tentative_sign;
  wire uf_after_round;
  assign exponent_addend = $signed({ 2'h0, operand_c[30:23] }) + $signed({ 9'h000, _078_ });
  assign _023_ = { 2'h0, exponent_a[7:0] } + info_a[6];
  assign _024_ = _023_ + { 2'h0, operand_b[30:23] };
  assign _025_ = _024_ + info_b[6];
  assign _026_ = { 26'h0000000, product, 2'h0 } + addend_shifted;
  assign sum_raw = _026_ + inject_carry_in;
  assign _028_ = 32'd26 + leading_zero_count;
  assign _027_ = $signed(_093_) + $signed(32'd1);
  assign _029_ = $signed(32'd26) + $signed(mid_pipe_exp_prod_q[9:0]);
  assign _030_ = $signed(normalized_exponent) + $signed(32'd1);
  assign _031_ = in_ready_o & in_valid_i;
  assign inject_carry_in = effective_subtraction & _080_;
  assign _032_ = inp_pipe_ready[1] & inp_pipe_valid_q[1];
  assign regular_status[1] = uf_after_round & regular_status[0];
  assign _033_ = mid_pipe_ready[1] & mid_pipe_valid_q[1];
  reg \mid_pipe_mask_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \mid_pipe_mask_q_reg[0]  <= 1'h0;
    else if (\gen_inside_pipeline[0].reg_ena ) \mid_pipe_mask_q_reg[0]  <= inp_pipe_mask_q[1];
  assign mid_pipe_mask_q[1] = \mid_pipe_mask_q_reg[0] ;
  reg [1:0] _119_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _119_ <= 2'h0;
    else if (\gen_inside_pipeline[0].reg_ena ) _119_ <= inp_pipe_tag_q[1:0];
  assign mid_pipe_tag_q[1:0] = _119_;
  reg \inp_pipe_valid_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \inp_pipe_valid_q_reg[0]  <= 1'h0;
    else if (_034_) \inp_pipe_valid_q_reg[0]  <= _000_;
  assign inp_pipe_valid_q[1] = \inp_pipe_valid_q_reg[0] ;
  reg [95:0] _121_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _121_ <= 96'h000000000000000000000000;
    else if (\gen_input_pipeline[0].reg_ena ) _121_ <= operands_i;
  assign inp_pipe_operands_q[95:0] = _121_;
  reg \mid_pipe_aux_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \mid_pipe_aux_q_reg[0]  <= 1'h0;
    else if (\gen_inside_pipeline[0].reg_ena ) \mid_pipe_aux_q_reg[0]  <= inp_pipe_aux_q[1];
  assign mid_pipe_aux_q[1] = \mid_pipe_aux_q_reg[0] ;
  reg [2:0] _123_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _123_ <= 3'h0;
    else if (\gen_input_pipeline[0].reg_ena ) _123_ <= is_boxed_i;
  assign inp_pipe_is_boxed_q[2:0] = _123_;
  reg [2:0] _124_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _124_ <= 3'h0;
    else if (\gen_input_pipeline[0].reg_ena ) _124_ <= rnd_mode_i;
  assign inp_pipe_rnd_mode_q[2:0] = _124_;
  reg [31:0] _125_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _125_ <= 32'd0;
    else if (\gen_inside_pipeline[0].reg_ena ) _125_ <= special_result;
  assign mid_pipe_spec_res_q[31:0] = _125_;
  reg \mid_pipe_res_is_spec_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \mid_pipe_res_is_spec_q_reg[0]  <= 1'h0;
    else if (\gen_inside_pipeline[0].reg_ena ) \mid_pipe_res_is_spec_q_reg[0]  <= result_is_special;
  assign mid_pipe_res_is_spec_q[1] = \mid_pipe_res_is_spec_q_reg[0] ;
  reg [2:0] _127_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _127_ <= 3'h0;
    else if (\gen_inside_pipeline[0].reg_ena ) _127_ <= inp_pipe_rnd_mode_q[2:0];
  assign mid_pipe_rnd_mode_q[2:0] = _127_;
  reg \mid_pipe_final_sign_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \mid_pipe_final_sign_q_reg[0]  <= 1'h0;
    else if (\gen_inside_pipeline[0].reg_ena ) \mid_pipe_final_sign_q_reg[0]  <= final_sign;
  assign mid_pipe_final_sign_q[1] = \mid_pipe_final_sign_q_reg[0] ;
  reg [75:0] _129_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _129_ <= 76'h0000000000000000000;
    else if (\gen_inside_pipeline[0].reg_ena ) _129_ <= mid_pipe_sum_q[151:76];
  assign mid_pipe_sum_q[75:0] = _129_;
  reg \mid_pipe_sticky_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \mid_pipe_sticky_q_reg[0]  <= 1'h0;
    else if (\gen_inside_pipeline[0].reg_ena ) \mid_pipe_sticky_q_reg[0]  <= sticky_before_add;
  assign mid_pipe_sticky_q[1] = \mid_pipe_sticky_q_reg[0] ;
  reg [6:0] _131_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _131_ <= 7'h00;
    else if (\gen_inside_pipeline[0].reg_ena ) _131_ <= addend_shamt;
  assign mid_pipe_add_shamt_q[6:0] = _131_;
  reg [9:0] _132_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _132_ <= 10'h000;
    else if (\gen_inside_pipeline[0].reg_ena ) _132_ <= sv2v_tmp_B4C85;
  assign mid_pipe_tent_exp_q[9:0] = _132_;
  reg [9:0] _133_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _133_ <= 10'h000;
    else if (\gen_inside_pipeline[0].reg_ena ) _133_ <= exponent_difference;
  assign mid_pipe_exp_diff_q[9:0] = _133_;
  reg [9:0] _134_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _134_ <= 10'h000;
    else if (\gen_inside_pipeline[0].reg_ena ) _134_ <= exponent_product;
  assign mid_pipe_exp_prod_q[9:0] = _134_;
  reg \mid_pipe_eff_sub_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \mid_pipe_eff_sub_q_reg[0]  <= 1'h0;
    else if (\gen_inside_pipeline[0].reg_ena ) \mid_pipe_eff_sub_q_reg[0]  <= effective_subtraction;
  assign mid_pipe_eff_sub_q[1] = \mid_pipe_eff_sub_q_reg[0] ;
  reg \mid_pipe_valid_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \mid_pipe_valid_q_reg[0]  <= 1'h0;
    else if (_035_) \mid_pipe_valid_q_reg[0]  <= _001_;
  assign mid_pipe_valid_q[1] = \mid_pipe_valid_q_reg[0] ;
  reg \inp_pipe_aux_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \inp_pipe_aux_q_reg[0]  <= 1'h0;
    else if (\gen_input_pipeline[0].reg_ena ) \inp_pipe_aux_q_reg[0]  <= aux_i;
  assign inp_pipe_aux_q[1] = \inp_pipe_aux_q_reg[0] ;
  reg \inp_pipe_mask_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \inp_pipe_mask_q_reg[0]  <= 1'h0;
    else if (\gen_input_pipeline[0].reg_ena ) \inp_pipe_mask_q_reg[0]  <= mask_i;
  assign inp_pipe_mask_q[1] = \inp_pipe_mask_q_reg[0] ;
  reg [1:0] _139_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _139_ <= 2'h0;
    else if (\gen_input_pipeline[0].reg_ena ) _139_ <= tag_i;
  assign inp_pipe_tag_q[1:0] = _139_;
  reg \inp_pipe_op_mod_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \inp_pipe_op_mod_q_reg[0]  <= 1'h0;
    else if (\gen_input_pipeline[0].reg_ena ) \inp_pipe_op_mod_q_reg[0]  <= op_mod_i;
  assign inp_pipe_op_mod_q[1] = \inp_pipe_op_mod_q_reg[0] ;
  reg [3:0] _141_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _141_ <= 4'h0;
    else if (\gen_input_pipeline[0].reg_ena ) _141_ <= op_i;
  assign inp_pipe_op_q[3:0] = _141_;
  reg \out_pipe_aux_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \out_pipe_aux_q_reg[0]  <= 1'h0;
    else if (\gen_output_pipeline[0].reg_ena ) \out_pipe_aux_q_reg[0]  <= mid_pipe_aux_q[1];
  assign out_pipe_aux_q[1] = \out_pipe_aux_q_reg[0] ;
  reg \out_pipe_mask_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \out_pipe_mask_q_reg[0]  <= 1'h0;
    else if (\gen_output_pipeline[0].reg_ena ) \out_pipe_mask_q_reg[0]  <= mid_pipe_mask_q[1];
  assign out_pipe_mask_q[1] = \out_pipe_mask_q_reg[0] ;
  reg [1:0] _144_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _144_ <= 2'h0;
    else if (\gen_output_pipeline[0].reg_ena ) _144_ <= mid_pipe_tag_q[1:0];
  assign out_pipe_tag_q[1:0] = _144_;
  reg [4:0] _145_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _145_ <= 5'h00;
    else if (\gen_output_pipeline[0].reg_ena ) _145_ <= status_d;
  assign out_pipe_status_q[4:0] = _145_;
  reg [31:0] _146_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _146_ <= 32'd0;
    else if (\gen_output_pipeline[0].reg_ena ) _146_ <= result_d;
  assign out_pipe_result_q[31:0] = _146_;
  reg \out_pipe_valid_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \out_pipe_valid_q_reg[0]  <= 1'h0;
    else if (_036_) \out_pipe_valid_q_reg[0]  <= _002_;
  assign out_pipe_valid_q[1] = \out_pipe_valid_q_reg[0] ;
  reg \mid_pipe_spec_stat_q_reg[4] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \mid_pipe_spec_stat_q_reg[4]  <= 1'h0;
    else if (\gen_inside_pipeline[0].reg_ena ) \mid_pipe_spec_stat_q_reg[4]  <= mid_pipe_spec_stat_q[9];
  assign mid_pipe_spec_stat_q[4] = \mid_pipe_spec_stat_q_reg[4] ;
  assign _034_ = | { in_ready_o, flush_i };
  assign _035_ = | { inp_pipe_ready[1], flush_i };
  assign _036_ = | { mid_pipe_ready[1], flush_i };
  assign _037_ = | { _088_, _085_ };
  assign _038_ = | { _088_, _087_, _086_ };
  assign _039_ = | { _088_, _087_, _086_, _085_ };
  assign _040_ = | { _088_, _087_, _085_ };
  assign _041_ = inp_pipe_rnd_mode_q[2:0] == 3'h2;
  assign _042_ = sum_raw[76] == tentative_sign;
  assign _043_ = ! rounded_abs[30:23];
  assign _044_ = ! pre_round_abs[30:23];
  assign _045_ = rounded_abs[30:23] == 8'h01;
  assign _046_ = ! rnd_mode_i;
  assign _047_ = rnd_mode_i == 3'h4;
  assign of_after_round = rounded_abs[30:23] == 8'hff;
  assign _048_ = $signed(_027_) >= $signed(32'd0);
  assign of_before_round = $signed(final_exponent) >= $signed(32'd255);
  assign _049_ = $signed(exponent_difference) > $signed(32'd0);
  assign _050_ = $signed(normalized_exponent) > $signed(32'd1);
  assign _051_ = $signed(exponent_difference) <= $signed(32'd4294967247);
  assign _052_ = $signed(exponent_difference) <= $signed(32'd26);
  assign _053_ = $signed(mid_pipe_exp_diff_q[9:0]) <= $signed(32'd0);
  assign _054_ = $signed(mid_pipe_exp_diff_q[9:0]) <= $signed(32'd2);
  assign _055_ = info_a[4] && info_b[5];
  assign _056_ = info_a[5] && info_b[4];
  assign _057_ = _069_ && info_c[4];
  assign _058_ = _057_ && effective_subtraction;
  assign _059_ = effective_subtraction && _081_;
  assign _060_ = effective_subtraction && _042_;
  assign _061_ = mid_pipe_eff_sub_q[1] && _054_;
  assign _062_ = _048_ && _066_;
  assign _063_ = _044_ && _045_;
  assign _064_ = _067_ && _072_;
  assign _065_ = _063_ && _073_;
  assign _066_ = ! lzc_zeroes;
  assign _067_ = ! sum_sticky_bits[50];
  assign _068_ = _055_ || _056_;
  assign _069_ = info_a[4] || info_b[4];
  assign _070_ = info_a[5] || info_b[5];
  assign _071_ = _053_ || _061_;
  assign _072_ = _046_ || _047_;
  assign _073_ = _074_ || _064_;
  assign uf_after_round = _043_ || _065_;
  assign product = { info_a[7], mantissa_a[22:0] } * { info_b[7], operand_b[22:0] };
  assign _074_ = round_sticky_bits != 2'h3;
  assign _075_ = - sum_raw;
  assign _076_ = ~ inp_pipe_valid_q[1];
  assign _077_ = ~ inp_pipe_operands_q[31];
  assign _078_ = ~ info_c[7];
  assign _079_ = ~ addend_after_shift;
  assign _080_ = ~ sticky_before_add;
  assign _081_ = ~ sum_raw[76];
  assign _082_ = ~ mid_pipe_valid_q[1];
  assign _083_ = ~ out_pipe_valid_q[1];
  assign in_ready_o = inp_pipe_ready[1] | _076_;
  assign \gen_input_pipeline[0].reg_ena  = _031_ | reg_ena_i[0];
  assign inp_pipe_ready[1] = mid_pipe_ready[1] | _082_;
  assign \gen_inside_pipeline[0].reg_ena  = _032_ | reg_ena_i[1];
  assign sticky_after_norm = _089_ | mid_pipe_sticky_q[1];
  assign regular_status[2] = of_before_round | of_after_round;
  assign _084_ = _090_ | of_before_round;
  assign regular_status[0] = _084_ | of_after_round;
  assign mid_pipe_ready[1] = out_ready_i | _083_;
  assign \gen_output_pipeline[0].reg_ena  = _033_ | reg_ena_i[2];
  assign _014_ = _050_ ? sum_shifted[74:50] : { 1'h0, sum_shifted[74:51] };
  assign _018_ = _050_ ? { sum_shifted[49:0], 1'h0 } : sum_shifted[50:0];
  assign _013_ = _050_ ? _094_[9:0] : 10'h000;
  assign _004_ = sum_shifted[75] ? normalized_exponent : _013_;
  assign _012_ = sum_shifted[75] ? sum_shifted[50:0] : _018_;
  assign _005_ = sum_shifted[75] ? { 1'h1, sum_shifted[74:51] } : _014_;
  assign final_mantissa = sum_shifted[76] ? { 1'h1, sum_shifted[75:52] } : _005_;
  assign sum_sticky_bits = sum_shifted[76] ? sum_shifted[51:1] : _012_;
  assign final_exponent = sum_shifted[76] ? _030_[9:0] : _004_;
  assign _007_ = _062_ ? _027_[9:0] : 10'h000;
  assign _006_ = _062_ ? _028_[6:0] : _029_[6:0];
  assign normalized_exponent = _071_ ? _007_ : mid_pipe_tent_exp_q[9:0];
  assign norm_shamt = _071_ ? _006_ : mid_pipe_add_shamt_q[6:0];
  assign _003_ = _052_ ? _092_[6:0] : 7'h00;
  assign addend_shamt = _051_ ? 7'h4c : _003_;
  assign _022_ = info_c[4] ? { operand_c[31], 31'h7f800000 } : 32'd2143289344;
  assign _021_ = _069_ ? { tentative_sign, 31'h7f800000 } : _022_;
  assign _020_ = _058_ ? 1'h1 : 1'h0;
  assign _019_ = _058_ ? 32'd2143289344 : _021_;
  assign _017_ = any_operand_inf ? _020_ : 1'h0;
  assign _016_ = any_operand_inf ? _019_ : 32'd2143289344;
  assign _015_ = any_operand_inf ? 1'h1 : 1'h0;
  assign _011_ = any_operand_nan ? signalling_nan : _017_;
  assign _009_ = any_operand_nan ? 1'h1 : _015_;
  assign _010_ = any_operand_nan ? 32'd2143289344 : _016_;
  assign mid_pipe_spec_stat_q[9] = _068_ ? 1'h1 : _011_;
  assign result_is_special = _068_ ? 1'h1 : _009_;
  assign special_result = _068_ ? 32'd2143289344 : _010_;
  function [0:0] _241_;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _241_ = b[0:0];
      3'b?1?:
        _241_ = b[1:1];
      3'b1??:
        _241_ = b[2:2];
      default:
        _241_ = a;
    endcase
  endfunction
  assign operand_a[31] = _241_(1'h1, { _077_, 1'h0, inp_pipe_operands_q[31] }, { _087_, _086_, _037_ });
  function [30:0] _242_;
    input [30:0] a;
    input [61:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _242_ = b[30:0];
      2'b1?:
        _242_ = b[61:31];
      default:
        _242_ = a;
    endcase
  endfunction
  assign { exponent_a[7:0], mantissa_a[22:0] } = _242_(31'h00800001, { 31'h3f800000, inp_pipe_operands_q[30:0] }, { _086_, _040_ });
  assign _008_ = _041_ ? 32'd0 : 32'd2147483648;
  assign info_b = _039_ ? info_q[15:8] : 8'hff;
  function [7:0] _245_;
    input [7:0] a;
    input [15:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _245_ = b[7:0];
      2'b1?:
        _245_ = b[15:8];
      default:
        _245_ = a;
    endcase
  endfunction
  assign info_a = _245_(8'hff, { 8'h81, info_q[7:0] }, { _086_, _040_ });
  function [31:0] _246_;
    input [31:0] a;
    input [63:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _246_ = b[31:0];
      2'b1?:
        _246_ = b[63:32];
      default:
        _246_ = a;
    endcase
  endfunction
  assign operand_c = _246_(32'd2155872257, { _102_, inp_pipe_operands_q[94:64], _008_ }, { _038_, _085_ });
  assign operand_b = _039_ ? inp_pipe_operands_q[63:32] : 32'd2155872257;
  function [7:0] _248_;
    input [7:0] a;
    input [15:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _248_ = b[7:0];
      2'b1?:
        _248_ = b[15:8];
      default:
        _248_ = a;
    endcase
  endfunction
  assign info_c = _248_(8'hff, { info_q[23:16], 8'h21 }, { _038_, _085_ });
  assign _085_ = inp_pipe_op_q[3:0] == 4'h3;
  assign _086_ = inp_pipe_op_q[3:0] == 4'h2;
  assign _087_ = inp_pipe_op_q[3:0] == 4'h1;
  assign _088_ = ! inp_pipe_op_q[3:0];
  assign any_operand_inf = | { info_c[4], info_b[4], info_a[4] };
  assign any_operand_nan = | { info_c[3], info_b[3], info_a[3] };
  assign signalling_nan = | { info_c[2], info_b[2], info_a[2] };
  assign sticky_before_add = | addend_sticky_bits;
  assign _089_ = | sum_sticky_bits;
  assign _090_ = | round_sticky_bits;
  assign busy_o = | { out_pipe_valid_q[1], mid_pipe_valid_q[1], inp_pipe_valid_q[1], in_valid_i };
  assign sum_shifted = mid_pipe_sum_q[75:0] << norm_shamt;
  assign { addend_after_shift, addend_sticky_bits } = { info_c[7], operand_c[22:0], 76'h0000000000000000000 } >> addend_shamt;
  assign _091_ = _025_ - 32'd127;
  assign exponent_difference = $signed(exponent_addend) - $signed(exponent_product);
  assign _092_ = $signed(32'd27) - $signed(exponent_difference);
  assign _093_ = $signed(mid_pipe_exp_prod_q[9:0]) - $signed({ 1'h0, leading_zero_count });
  assign _094_ = $signed(normalized_exponent) - $signed(32'd1);
  assign _095_ = in_ready_o ? in_valid_i : 1'hx;
  assign _000_ = flush_i ? 1'h0 : _095_;
  assign { _096_[31:10], exponent_product } = _070_ ? 32'd4294967171 : _091_;
  assign sv2v_tmp_B4C85 = _049_ ? exponent_addend : exponent_product;
  assign addend_shifted = effective_subtraction ? _079_ : addend_after_shift;
  assign { _097_[76], mid_pipe_sum_q[151:76] } = _059_ ? _075_ : sum_raw;
  assign _098_ = effective_subtraction ? 1'h0 : tentative_sign;
  assign final_sign = _060_ ? 1'h1 : _098_;
  assign _099_ = inp_pipe_ready[1] ? inp_pipe_valid_q[1] : 1'hx;
  assign _001_ = flush_i ? 1'h0 : _099_;
  assign { _100_[31:8], pre_round_abs[30:23] } = of_before_round ? 32'd254 : { 24'h000000, final_exponent[7:0] };
  assign pre_round_mantissa = of_before_round ? 23'h7fffff : final_mantissa[23:1];
  assign round_sticky_bits = of_before_round ? 2'h3 : { final_mantissa[0], sticky_after_norm };
  assign result_d = mid_pipe_res_is_spec_q[1] ? mid_pipe_spec_res_q[31:0] : { rounded_sign, rounded_abs };
  assign status_d = mid_pipe_res_is_spec_q[1] ? { mid_pipe_spec_stat_q[4], 4'h0 } : { 2'h0, regular_status[2:0] };
  assign _101_ = mid_pipe_ready[1] ? mid_pipe_valid_q[1] : 1'hx;
  assign _002_ = flush_i ? 1'h0 : _101_;
  assign _102_ = inp_pipe_operands_q[95] ^ inp_pipe_op_mod_q[1];
  assign effective_subtraction = tentative_sign ^ operand_c[31];
  assign tentative_sign = operand_a[31] ^ operand_b[31];
  \$paramod$aa198a329ffc044f9fef695fda54759a05728371\fpnew_classifier  i_class_inputs (
    .info_o(info_q),
    .is_boxed_i(inp_pipe_is_boxed_q[2:0]),
    .operands_i(inp_pipe_operands_q[95:0])
  );
  \$paramod\fpnew_rounding\AbsWidth=32'00000000000000000000000000011111  i_fpnew_rounding (
    .abs_rounded_o(rounded_abs),
    .abs_value_i({ pre_round_abs[30:23], pre_round_mantissa }),
    .effective_subtraction_i(mid_pipe_eff_sub_q[1]),
    .exact_zero_o(result_zero),
    .rnd_mode_i(mid_pipe_rnd_mode_q[2:0]),
    .round_sticky_bits_i(round_sticky_bits),
    .sign_i(mid_pipe_final_sign_q[1]),
    .sign_o(rounded_sign)
  );
  \$paramod$3dc9b54c1a715af223bba72fd88f9cd46ba20ed0\lzc  i_lzc (
    .cnt_o(leading_zero_count),
    .empty_o(lzc_zeroes),
    .in_i(mid_pipe_sum_q[50:0])
  );
  assign _096_[9:0] = exponent_product;
  assign _097_[75:0] = mid_pipe_sum_q[151:76];
  assign _100_[7:0] = pre_round_abs[30:23];
  assign addend_shamt_q = mid_pipe_add_shamt_q[6:0];
  assign aux_o = out_pipe_aux_q[1];
  assign effective_subtraction_q = mid_pipe_eff_sub_q[1];
  assign exponent_a[9:8] = 2'h0;
  assign exponent_b = { 2'h0, operand_b[30:23] };
  assign exponent_c = { 2'h0, operand_c[30:23] };
  assign exponent_difference_q = mid_pipe_exp_diff_q[9:0];
  assign exponent_product_q = mid_pipe_exp_prod_q[9:0];
  assign extension_bit_o = 1'h1;
  assign final_sign_q = mid_pipe_final_sign_q[1];
  assign inp_pipe_aux_q[0] = aux_i;
  assign inp_pipe_is_boxed_q[5:3] = is_boxed_i;
  assign inp_pipe_mask_q[0] = mask_i;
  assign inp_pipe_op_mod_q[0] = op_mod_i;
  assign inp_pipe_op_q[7:4] = op_i;
  assign inp_pipe_operands_q[191:96] = operands_i;
  assign inp_pipe_ready[0] = in_ready_o;
  assign inp_pipe_rnd_mode_q[5:3] = rnd_mode_i;
  assign inp_pipe_tag_q[3:2] = tag_i;
  assign inp_pipe_valid_q[0] = in_valid_i;
  assign leading_zero_count_sgn = { 1'h0, leading_zero_count };
  assign mantissa_a[23] = info_a[7];
  assign mantissa_b = { info_b[7], operand_b[22:0] };
  assign mantissa_c = { info_c[7], operand_c[22:0] };
  assign mask_o = out_pipe_mask_q[1];
  assign mid_pipe_add_shamt_q[13:7] = addend_shamt;
  assign mid_pipe_aux_q[0] = inp_pipe_aux_q[1];
  assign mid_pipe_eff_sub_q[0] = effective_subtraction;
  assign mid_pipe_exp_diff_q[19:10] = exponent_difference;
  assign mid_pipe_exp_prod_q[19:10] = exponent_product;
  assign mid_pipe_final_sign_q[0] = final_sign;
  assign mid_pipe_mask_q[0] = inp_pipe_mask_q[1];
  assign mid_pipe_ready[0] = inp_pipe_ready[1];
  assign mid_pipe_res_is_spec_q[0] = result_is_special;
  assign mid_pipe_rnd_mode_q[5:3] = inp_pipe_rnd_mode_q[2:0];
  assign mid_pipe_spec_res_q[63:32] = special_result;
  assign { mid_pipe_spec_stat_q[8:5], mid_pipe_spec_stat_q[3:0] } = 8'h00;
  assign mid_pipe_sticky_q[0] = sticky_before_add;
  assign mid_pipe_tag_q[3:2] = inp_pipe_tag_q[1:0];
  assign mid_pipe_tent_exp_q[19:10] = sv2v_tmp_B4C85;
  assign mid_pipe_valid_q[0] = inp_pipe_valid_q[1];
  assign operand_a[30:0] = { exponent_a[7:0], mantissa_a[22:0] };
  assign out_pipe_aux_q[0] = mid_pipe_aux_q[1];
  assign out_pipe_mask_q[0] = mid_pipe_mask_q[1];
  assign out_pipe_ready = { mid_pipe_ready[1], out_ready_i };
  assign out_pipe_result_q[63:32] = result_d;
  assign out_pipe_status_q[9:5] = status_d;
  assign out_pipe_tag_q[3:2] = mid_pipe_tag_q[1:0];
  assign out_pipe_valid_q[0] = mid_pipe_valid_q[1];
  assign out_valid_o = out_pipe_valid_q[1];
  assign pre_round_abs[22:0] = pre_round_mantissa;
  assign pre_round_exponent = pre_round_abs[30:23];
  assign pre_round_sign = mid_pipe_final_sign_q[1];
  assign product_shifted = { 26'h0000000, product, 2'h0 };
  assign regular_result = { rounded_sign, rounded_abs };
  assign regular_status[4:3] = 2'h0;
  assign result_is_special_q = mid_pipe_res_is_spec_q[1];
  assign result_o = out_pipe_result_q[31:0];
  assign rnd_mode_q = mid_pipe_rnd_mode_q[2:0];
  assign special_result_q = mid_pipe_spec_res_q[31:0];
  assign special_status = { mid_pipe_spec_stat_q[9], 4'h0 };
  assign special_status_q = { mid_pipe_spec_stat_q[4], 4'h0 };
  assign status_o = out_pipe_status_q[4:0];
  assign sticky_before_add_q = mid_pipe_sticky_q[1];
  assign sum = mid_pipe_sum_q[151:76];
  assign sum_carry = sum_raw[76];
  assign sum_lower = mid_pipe_sum_q[50:0];
  assign sum_q = mid_pipe_sum_q[75:0];
  assign sv2v_tmp_00793 = exponent_difference;
  assign sv2v_tmp_0252C = result_d;
  assign sv2v_tmp_192AB = mid_pipe_tag_q[1:0];
  assign sv2v_tmp_25EE6 = mid_pipe_valid_q[1];
  assign sv2v_tmp_2A843 = status_d;
  assign sv2v_tmp_2D21E = exponent_product;
  assign sv2v_tmp_36387 = tag_i;
  assign sv2v_tmp_407DF = mask_i;
  assign sv2v_tmp_4A83E = special_result;
  assign sv2v_tmp_56A72 = effective_subtraction;
  assign sv2v_tmp_6DFE4 = inp_pipe_tag_q[1:0];
  assign sv2v_tmp_6F5F7 = sticky_before_add;
  assign sv2v_tmp_73AEA = in_valid_i;
  assign sv2v_tmp_7DEC5 = result_is_special;
  assign sv2v_tmp_83404 = addend_shamt;
  assign sv2v_tmp_8D189 = aux_i;
  assign sv2v_tmp_9E262 = mid_pipe_aux_q[1];
  assign sv2v_tmp_A74E2 = inp_pipe_rnd_mode_q[2:0];
  assign sv2v_tmp_BC8B9 = operands_i;
  assign sv2v_tmp_CB10A = inp_pipe_valid_q[1];
  assign sv2v_tmp_CBA8F = op_i;
  assign sv2v_tmp_CDA0E = inp_pipe_aux_q[1];
  assign sv2v_tmp_CEAB3 = mid_pipe_sum_q[151:76];
  assign sv2v_tmp_D1C37 = op_mod_i;
  assign sv2v_tmp_D7646 = inp_pipe_mask_q[1];
  assign sv2v_tmp_D7BD0 = final_sign;
  assign sv2v_tmp_DB780 = mid_pipe_mask_q[1];
  assign sv2v_tmp_E1339 = rnd_mode_i;
  assign sv2v_tmp_EC01B = { mid_pipe_spec_stat_q[9], 4'h0 };
  assign sv2v_tmp_FE389 = is_boxed_i;
  assign tag_o = out_pipe_tag_q[1:0];
  assign tentative_exponent = sv2v_tmp_B4C85;
  assign tentative_exponent_q = mid_pipe_tent_exp_q[9:0];
endmodule

module \$paramod$aa198a329ffc044f9fef695fda54759a05728371\fpnew_classifier (operands_i, is_boxed_i, info_o);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire \gen_num_values[0].is_boxed ;
  wire \gen_num_values[0].is_inf ;
  wire \gen_num_values[0].is_nan ;
  wire \gen_num_values[0].is_normal ;
  wire \gen_num_values[0].is_quiet ;
  wire \gen_num_values[0].is_signalling ;
  wire \gen_num_values[0].is_subnormal ;
  wire \gen_num_values[0].is_zero ;
  wire [31:0] \gen_num_values[0].value ;
  wire \gen_num_values[1].is_boxed ;
  wire \gen_num_values[1].is_inf ;
  wire \gen_num_values[1].is_nan ;
  wire \gen_num_values[1].is_normal ;
  wire \gen_num_values[1].is_quiet ;
  wire \gen_num_values[1].is_signalling ;
  wire \gen_num_values[1].is_subnormal ;
  wire \gen_num_values[1].is_zero ;
  wire [31:0] \gen_num_values[1].value ;
  wire \gen_num_values[2].is_boxed ;
  wire \gen_num_values[2].is_inf ;
  wire \gen_num_values[2].is_nan ;
  wire \gen_num_values[2].is_normal ;
  wire \gen_num_values[2].is_quiet ;
  wire \gen_num_values[2].is_signalling ;
  wire \gen_num_values[2].is_subnormal ;
  wire \gen_num_values[2].is_zero ;
  wire [31:0] \gen_num_values[2].value ;
  output [23:0] info_o;
  wire [23:0] info_o;
  input [2:0] is_boxed_i;
  wire [2:0] is_boxed_i;
  input [95:0] operands_i;
  wire [95:0] operands_i;
  assign _000_ = ! operands_i[30:23];
  assign _002_ = ! operands_i[62:55];
  assign _004_ = ! operands_i[94:87];
  assign _001_ = ! operands_i[22:0];
  assign _003_ = ! operands_i[54:32];
  assign _005_ = ! operands_i[86:64];
  assign _006_ = operands_i[30:23] == 8'hff;
  assign _007_ = operands_i[62:55] == 8'hff;
  assign _008_ = operands_i[94:87] == 8'hff;
  assign _009_ = ~ operands_i[22];
  assign _010_ = ~ operands_i[54];
  assign _011_ = ~ operands_i[86];
  assign _012_ = is_boxed_i[0] && _036_;
  assign \gen_num_values[0].is_normal  = _012_ && _037_;
  assign _013_ = is_boxed_i[1] && _038_;
  assign \gen_num_values[1].is_normal  = _013_ && _039_;
  assign _014_ = is_boxed_i[2] && _040_;
  assign \gen_num_values[2].is_normal  = _014_ && _041_;
  assign \gen_num_values[0].is_zero  = _015_ && _001_;
  assign \gen_num_values[1].is_zero  = _016_ && _003_;
  assign \gen_num_values[2].is_zero  = _017_ && _005_;
  assign _015_ = is_boxed_i[0] && _000_;
  assign \gen_num_values[0].is_subnormal  = _015_ && _027_;
  assign _016_ = is_boxed_i[1] && _002_;
  assign \gen_num_values[1].is_subnormal  = _016_ && _028_;
  assign _017_ = is_boxed_i[2] && _004_;
  assign \gen_num_values[2].is_subnormal  = _017_ && _029_;
  assign _018_ = _006_ && _001_;
  assign \gen_num_values[0].is_inf  = is_boxed_i[0] && _018_;
  assign _019_ = _007_ && _003_;
  assign \gen_num_values[1].is_inf  = is_boxed_i[1] && _019_;
  assign _020_ = _008_ && _005_;
  assign \gen_num_values[2].is_inf  = is_boxed_i[2] && _020_;
  assign _021_ = _006_ && _042_;
  assign _022_ = _007_ && _043_;
  assign _023_ = _008_ && _044_;
  assign _024_ = is_boxed_i[0] && \gen_num_values[0].is_nan ;
  assign \gen_num_values[0].is_signalling  = _024_ && _009_;
  assign _025_ = is_boxed_i[1] && \gen_num_values[1].is_nan ;
  assign \gen_num_values[1].is_signalling  = _025_ && _010_;
  assign _026_ = is_boxed_i[2] && \gen_num_values[2].is_nan ;
  assign \gen_num_values[2].is_signalling  = _026_ && _011_;
  assign \gen_num_values[0].is_quiet  = \gen_num_values[0].is_nan  && _033_;
  assign \gen_num_values[1].is_quiet  = \gen_num_values[1].is_nan  && _034_;
  assign \gen_num_values[2].is_quiet  = \gen_num_values[2].is_nan  && _035_;
  assign _027_ = ! \gen_num_values[0].is_zero ;
  assign _028_ = ! \gen_num_values[1].is_zero ;
  assign _029_ = ! \gen_num_values[2].is_zero ;
  assign _030_ = ! is_boxed_i[0];
  assign _031_ = ! is_boxed_i[1];
  assign _032_ = ! is_boxed_i[2];
  assign _033_ = ! \gen_num_values[0].is_signalling ;
  assign _034_ = ! \gen_num_values[1].is_signalling ;
  assign _035_ = ! \gen_num_values[2].is_signalling ;
  assign \gen_num_values[0].is_nan  = _030_ || _021_;
  assign \gen_num_values[1].is_nan  = _031_ || _022_;
  assign \gen_num_values[2].is_nan  = _032_ || _023_;
  assign _036_ = | operands_i[30:23];
  assign _037_ = operands_i[30:23] != 8'hff;
  assign _038_ = | operands_i[62:55];
  assign _039_ = operands_i[62:55] != 8'hff;
  assign _040_ = | operands_i[94:87];
  assign _041_ = operands_i[94:87] != 8'hff;
  assign _042_ = | operands_i[22:0];
  assign _043_ = | operands_i[54:32];
  assign _044_ = | operands_i[86:64];
  assign \gen_num_values[0].is_boxed  = is_boxed_i[0];
  assign \gen_num_values[0].value  = operands_i[31:0];
  assign \gen_num_values[1].is_boxed  = is_boxed_i[1];
  assign \gen_num_values[1].value  = operands_i[63:32];
  assign \gen_num_values[2].is_boxed  = is_boxed_i[2];
  assign \gen_num_values[2].value  = operands_i[95:64];
  assign info_o = { \gen_num_values[2].is_normal , \gen_num_values[2].is_subnormal , \gen_num_values[2].is_zero , \gen_num_values[2].is_inf , \gen_num_values[2].is_nan , \gen_num_values[2].is_signalling , \gen_num_values[2].is_quiet , is_boxed_i[2], \gen_num_values[1].is_normal , \gen_num_values[1].is_subnormal , \gen_num_values[1].is_zero , \gen_num_values[1].is_inf , \gen_num_values[1].is_nan , \gen_num_values[1].is_signalling , \gen_num_values[1].is_quiet , is_boxed_i[1], \gen_num_values[0].is_normal , \gen_num_values[0].is_subnormal , \gen_num_values[0].is_zero , \gen_num_values[0].is_inf , \gen_num_values[0].is_nan , \gen_num_values[0].is_signalling , \gen_num_values[0].is_quiet , is_boxed_i[0] };
endmodule

module \$paramod$d5b90fe66138c08936b0a7e1923bfbabdfdb9d7d\fpnew_opgroup_block_A94B6_B7406 (clk_i, rst_ni, operands_i, is_boxed_i, rnd_mode_i, op_i, op_mod_i, src_fmt_i, dst_fmt_i, int_fmt_i, vectorial_op_i, tag_i, simd_mask_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, extension_bit_o, tag_o, out_valid_o
, out_ready_i, busy_o);
  wire _0_;
  wire [39:0] arbiter_output;
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  input [2:0] dst_fmt_i;
  wire [2:0] dst_fmt_i;
  output extension_bit_o;
  wire extension_bit_o;
  input flush_i;
  wire flush_i;
  wire [4:0] fmt_busy;
  wire [4:0] fmt_in_ready;
  wire [4:0] fmt_out_ready;
  wire [4:0] fmt_out_valid;
  wire [199:0] fmt_outputs;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  input [1:0] int_fmt_i;
  wire [1:0] int_fmt_i;
  input [9:0] is_boxed_i;
  wire [9:0] is_boxed_i;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  input [63:0] operands_i;
  wire [63:0] operands_i;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  output [31:0] result_o;
  wire [31:0] result_o;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input rst_ni;
  wire rst_ni;
  input simd_mask_i;
  wire simd_mask_i;
  input [2:0] src_fmt_i;
  wire [2:0] src_fmt_i;
  output [4:0] status_o;
  wire [4:0] status_o;
  input [1:0] tag_i;
  wire [1:0] tag_i;
  output [1:0] tag_o;
  wire [1:0] tag_o;
  input vectorial_op_i;
  wire vectorial_op_i;
  assign in_ready_o = in_valid_i & _0_;
  wire [4:0] _3_ = 5'h00;
  assign _0_ = _3_[dst_fmt_i +: 1];
  \$paramod$1ec311d8bbb78d5b213c030ce705238a3ade6dbb\rr_arb_tree_52163_F264E  i_arbiter (
    .clk_i(clk_i),
    .data_i(200'hfffffffffdfffffffffdfffffffffdfffffffffdfffffffffd),
    .data_o(arbiter_output),
    .flush_i(flush_i),
    .gnt_i(out_ready_i),
    .gnt_o(fmt_out_ready),
    .req_i(5'h00),
    .req_o(out_valid_o),
    .rr_i(3'h0),
    .rst_ni(rst_ni)
  );
  assign busy_o = 1'h0;
  assign extension_bit_o = arbiter_output[2];
  assign fmt_busy = 5'h00;
  assign fmt_in_ready = 5'h00;
  assign fmt_out_valid = 5'h00;
  assign fmt_outputs = 200'hfffffffffdfffffffffdfffffffffdfffffffffdfffffffffd;
  assign result_o = arbiter_output[39:8];
  assign status_o = arbiter_output[7:3];
  assign tag_o = arbiter_output[1:0];
endmodule

module \$paramod$d900b4e0e9e2add9a5590ba2d73deecd4f47db92\fpnew_opgroup_fmt_slice_E368D_75924 (clk_i, rst_ni, operands_i, is_boxed_i, rnd_mode_i, op_i, op_mod_i, vectorial_op_i, tag_i, simd_mask_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, extension_bit_o, tag_o, out_valid_o, out_ready_i, busy_o, reg_ena_i
);
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  output extension_bit_o;
  wire extension_bit_o;
  input flush_i;
  wire flush_i;
  wire \gen_num_lanes[0].active_lane.in_valid ;
  wire [95:0] \gen_num_lanes[0].active_lane.local_operands ;
  wire [31:0] \gen_num_lanes[0].active_lane.op_result ;
  wire [4:0] \gen_num_lanes[0].active_lane.op_status ;
  wire \gen_num_lanes[0].active_lane.out_ready ;
  wire \gen_num_lanes[0].active_lane.out_valid ;
  wire [31:0] \gen_num_lanes[0].active_lane.prepare_input.sv2v_autoblock_1.i ;
  wire [31:0] \gen_num_lanes[0].local_result ;
  wire \gen_num_lanes[0].local_sign ;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  input [2:0] is_boxed_i;
  wire [2:0] is_boxed_i;
  wire lane_busy;
  wire [9:0] lane_class_mask;
  wire lane_ext_bit;
  wire lane_in_ready;
  wire lane_is_class;
  wire lane_masks;
  wire lane_out_valid;
  wire [4:0] lane_status;
  wire [1:0] lane_tags;
  wire lane_vectorial;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  input [95:0] operands_i;
  wire [95:0] operands_i;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  wire [31:0] \output_processing.sv2v_autoblock_2.i ;
  wire [4:0] \output_processing.temp_status ;
  input [2:0] reg_ena_i;
  wire [2:0] reg_ena_i;
  wire result_is_class;
  wire result_is_vector;
  output [31:0] result_o;
  wire [31:0] result_o;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input rst_ni;
  wire rst_ni;
  input simd_mask_i;
  wire simd_mask_i;
  wire [31:0] slice_regular_result;
  wire [31:0] slice_result;
  wire [31:0] slice_vec_class_result;
  output [4:0] status_o;
  wire [4:0] status_o;
  input [1:0] tag_i;
  wire [1:0] tag_i;
  output [1:0] tag_o;
  wire [1:0] tag_o;
  wire vectorial_op;
  input vectorial_op_i;
  wire vectorial_op_i;
  assign status_o = lane_status & { lane_masks, lane_masks, lane_masks, lane_masks, lane_masks };
  assign result_o = \gen_num_lanes[0].active_lane.out_valid  ? \gen_num_lanes[0].active_lane.op_result  : { lane_ext_bit, lane_ext_bit, lane_ext_bit, lane_ext_bit, lane_ext_bit, lane_ext_bit, lane_ext_bit, lane_ext_bit, lane_ext_bit, lane_ext_bit, lane_ext_bit, lane_ext_bit, lane_ext_bit, lane_ext_bit, lane_ext_bit, lane_ext_bit, lane_ext_bit, lane_ext_bit, lane_ext_bit, lane_ext_bit, lane_ext_bit, lane_ext_bit, lane_ext_bit, lane_ext_bit, lane_ext_bit, lane_ext_bit, lane_ext_bit, lane_ext_bit, lane_ext_bit, lane_ext_bit, lane_ext_bit, lane_ext_bit };
  assign lane_status = \gen_num_lanes[0].active_lane.out_valid  ? \gen_num_lanes[0].active_lane.op_status  : 5'h00;
  \$paramod$801e9fb1703a709ea20c8c1c48b091cb830061d3\fpnew_fma_FC83A_5615B  \gen_num_lanes[0].active_lane.lane_instance.i_fma  (
    .aux_i(vectorial_op_i),
    .aux_o(lane_vectorial),
    .busy_o(lane_busy),
    .clk_i(clk_i),
    .extension_bit_o(lane_ext_bit),
    .flush_i(flush_i),
    .in_ready_o(lane_in_ready),
    .in_valid_i(in_valid_i),
    .is_boxed_i(is_boxed_i),
    .mask_i(simd_mask_i),
    .mask_o(lane_masks),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i(operands_i),
    .out_ready_i(out_ready_i),
    .out_valid_o(\gen_num_lanes[0].active_lane.out_valid ),
    .reg_ena_i(reg_ena_i),
    .result_o(\gen_num_lanes[0].active_lane.op_result ),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .status_o(\gen_num_lanes[0].active_lane.op_status ),
    .tag_i(tag_i),
    .tag_o(lane_tags)
  );
  assign busy_o = lane_busy;
  assign extension_bit_o = lane_ext_bit;
  assign \gen_num_lanes[0].active_lane.in_valid  = in_valid_i;
  assign \gen_num_lanes[0].active_lane.local_operands  = operands_i;
  assign \gen_num_lanes[0].active_lane.out_ready  = out_ready_i;
  assign \gen_num_lanes[0].active_lane.prepare_input.sv2v_autoblock_1.i  = 32'd3;
  assign \gen_num_lanes[0].local_result  = result_o;
  assign \gen_num_lanes[0].local_sign  = 1'h1;
  assign in_ready_o = lane_in_ready;
  assign lane_class_mask = 10'h001;
  assign lane_is_class = 1'h0;
  assign lane_out_valid = \gen_num_lanes[0].active_lane.out_valid ;
  assign out_valid_o = \gen_num_lanes[0].active_lane.out_valid ;
  assign \output_processing.sv2v_autoblock_2.i  = 32'd1;
  assign \output_processing.temp_status  = status_o;
  assign result_is_class = 1'h0;
  assign result_is_vector = lane_vectorial;
  assign slice_regular_result = result_o;
  assign slice_result = result_o;
  assign slice_vec_class_result = 32'd129;
  assign tag_o = lane_tags;
  assign vectorial_op = vectorial_op_i;
endmodule

module \$paramod$f61d992db5aa3ae46b9b60ce3145ed1289f77ea5\fpnew_opgroup_block_A94B6_B7406 (clk_i, rst_ni, operands_i, is_boxed_i, rnd_mode_i, op_i, op_mod_i, src_fmt_i, dst_fmt_i, int_fmt_i, vectorial_op_i, tag_i, simd_mask_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, extension_bit_o, tag_o, out_valid_o
, out_ready_i, busy_o);
  wire _0_;
  wire [39:0] arbiter_output;
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  input [2:0] dst_fmt_i;
  wire [2:0] dst_fmt_i;
  output extension_bit_o;
  wire extension_bit_o;
  input flush_i;
  wire flush_i;
  wire [4:0] fmt_busy;
  wire [4:0] fmt_in_ready;
  wire [4:0] fmt_out_ready;
  wire [4:0] fmt_out_valid;
  wire [199:0] fmt_outputs;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  input [1:0] int_fmt_i;
  wire [1:0] int_fmt_i;
  input [14:0] is_boxed_i;
  wire [14:0] is_boxed_i;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  input [95:0] operands_i;
  wire [95:0] operands_i;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  output [31:0] result_o;
  wire [31:0] result_o;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input rst_ni;
  wire rst_ni;
  input simd_mask_i;
  wire simd_mask_i;
  input [2:0] src_fmt_i;
  wire [2:0] src_fmt_i;
  output [4:0] status_o;
  wire [4:0] status_o;
  input [1:0] tag_i;
  wire [1:0] tag_i;
  output [1:0] tag_o;
  wire [1:0] tag_o;
  input vectorial_op_i;
  wire vectorial_op_i;
  assign in_ready_o = in_valid_i & _0_;
  wire [4:0] _3_ = 5'h00;
  assign _0_ = _3_[dst_fmt_i +: 1];
  \$paramod$1ec311d8bbb78d5b213c030ce705238a3ade6dbb\rr_arb_tree_52163_F264E  i_arbiter (
    .clk_i(clk_i),
    .data_i(200'hfffffffffdfffffffffdfffffffffdfffffffffdfffffffffd),
    .data_o(arbiter_output),
    .flush_i(flush_i),
    .gnt_i(out_ready_i),
    .gnt_o(fmt_out_ready),
    .req_i(5'h00),
    .req_o(out_valid_o),
    .rr_i(3'h0),
    .rst_ni(rst_ni)
  );
  assign busy_o = 1'h0;
  assign extension_bit_o = arbiter_output[2];
  assign fmt_busy = 5'h00;
  assign fmt_in_ready = 5'h00;
  assign fmt_out_valid = 5'h00;
  assign fmt_outputs = 200'hfffffffffdfffffffffdfffffffffdfffffffffdfffffffffd;
  assign result_o = arbiter_output[39:8];
  assign status_o = arbiter_output[7:3];
  assign tag_o = arbiter_output[1:0];
endmodule

module \$paramod$f637a6ae809e8c6b10b7a391a377fed1aeca29f3\fpnew_opgroup_block_A94B6_B7406 (clk_i, rst_ni, operands_i, is_boxed_i, rnd_mode_i, op_i, op_mod_i, src_fmt_i, dst_fmt_i, int_fmt_i, vectorial_op_i, tag_i, simd_mask_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, extension_bit_o, tag_o, out_valid_o
, out_ready_i, busy_o);
  wire _0_;
  wire [39:0] arbiter_output;
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  input [2:0] dst_fmt_i;
  wire [2:0] dst_fmt_i;
  output extension_bit_o;
  wire extension_bit_o;
  input flush_i;
  wire flush_i;
  wire [4:0] fmt_busy;
  wire [4:0] fmt_in_ready;
  wire [4:0] fmt_out_ready;
  wire [4:0] fmt_out_valid;
  wire [199:0] fmt_outputs;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  input [1:0] int_fmt_i;
  wire [1:0] int_fmt_i;
  input [9:0] is_boxed_i;
  wire [9:0] is_boxed_i;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  input [63:0] operands_i;
  wire [63:0] operands_i;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  output [31:0] result_o;
  wire [31:0] result_o;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input rst_ni;
  wire rst_ni;
  input simd_mask_i;
  wire simd_mask_i;
  input [2:0] src_fmt_i;
  wire [2:0] src_fmt_i;
  output [4:0] status_o;
  wire [4:0] status_o;
  input [1:0] tag_i;
  wire [1:0] tag_i;
  output [1:0] tag_o;
  wire [1:0] tag_o;
  input vectorial_op_i;
  wire vectorial_op_i;
  assign in_ready_o = in_valid_i & _0_;
  wire [4:0] _3_ = 5'h00;
  assign _0_ = _3_[dst_fmt_i +: 1];
  \$paramod$1ec311d8bbb78d5b213c030ce705238a3ade6dbb\rr_arb_tree_52163_F264E  i_arbiter (
    .clk_i(clk_i),
    .data_i(200'hfffffffffdfffffffffdfffffffffdfffffffffdfffffffffd),
    .data_o(arbiter_output),
    .flush_i(flush_i),
    .gnt_i(out_ready_i),
    .gnt_o(fmt_out_ready),
    .req_i(5'h00),
    .req_o(out_valid_o),
    .rr_i(3'h0),
    .rst_ni(rst_ni)
  );
  assign busy_o = 1'h0;
  assign extension_bit_o = arbiter_output[2];
  assign fmt_busy = 5'h00;
  assign fmt_in_ready = 5'h00;
  assign fmt_out_valid = 5'h00;
  assign fmt_outputs = 200'hfffffffffdfffffffffdfffffffffdfffffffffdfffffffffd;
  assign result_o = arbiter_output[39:8];
  assign status_o = arbiter_output[7:3];
  assign tag_o = arbiter_output[1:0];
endmodule

module \$paramod\fpnew_rounding\AbsWidth=32'00000000000000000000000000011111 (abs_value_i, sign_i, round_sticky_bits_i, rnd_mode_i, effective_subtraction_i, abs_rounded_o, sign_o, exact_zero_o);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire [1:0] _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  output [30:0] abs_rounded_o;
  wire [30:0] abs_rounded_o;
  input [30:0] abs_value_i;
  wire [30:0] abs_value_i;
  input effective_subtraction_i;
  wire effective_subtraction_i;
  output exact_zero_o;
  wire exact_zero_o;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input [1:0] round_sticky_bits_i;
  wire [1:0] round_sticky_bits_i;
  wire round_up;
  input sign_i;
  wire sign_i;
  output sign_o;
  wire sign_o;
  assign abs_rounded_o = abs_value_i + round_up;
  assign _01_ = _07_ & _17_;
  assign _02_ = ! abs_value_i;
  assign exact_zero_o = _02_ && _03_;
  assign _05_ = exact_zero_o && effective_subtraction_i;
  assign _06_ = ~ sign_i;
  assign _07_ = ~ abs_value_i[0];
  function [0:0] _27_;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _27_ = b[0:0];
      3'b?1?:
        _27_ = b[1:1];
      3'b1??:
        _27_ = b[2:2];
      default:
        _27_ = a;
    endcase
  endfunction
  assign _00_ = _27_(1'hx, { 1'h0, abs_value_i[0], 1'h1 }, { _11_, _09_, _08_ });
  assign _08_ = round_sticky_bits_i == 2'h3;
  assign _09_ = round_sticky_bits_i == 2'h2;
  assign _11_ = | { _10_[1], _03_ };
  assign _03_ = ! round_sticky_bits_i;
  assign _10_[1] = round_sticky_bits_i == 2'h1;
  function [0:0] _33_;
    input [0:0] a;
    input [5:0] b;
    input [5:0] s;
    casez (s) // synopsys parallel_case
      6'b?????1:
        _33_ = b[0:0];
      6'b????1?:
        _33_ = b[1:1];
      6'b???1??:
        _33_ = b[2:2];
      6'b??1???:
        _33_ = b[3:3];
      6'b?1????:
        _33_ = b[4:4];
      6'b1?????:
        _33_ = b[5:5];
      default:
        _33_ = a;
    endcase
  endfunction
  assign round_up = _33_(1'h1, { _00_, 1'h0, _18_, _19_, round_sticky_bits_i[1], _01_ }, { _12_, _16_, _04_, _15_, _14_, _13_ });
  assign _13_ = rnd_mode_i == 3'h5;
  assign _14_ = rnd_mode_i == 3'h4;
  assign _15_ = rnd_mode_i == 3'h3;
  assign _04_ = rnd_mode_i == 3'h2;
  assign _16_ = rnd_mode_i == 3'h1;
  assign _12_ = ! rnd_mode_i;
  assign _17_ = | round_sticky_bits_i;
  assign _18_ = _17_ ? sign_i : 1'h0;
  assign _19_ = _17_ ? _06_ : 1'h0;
  assign sign_o = _05_ ? _04_ : sign_i;
  assign _10_[0] = _03_;
endmodule

module \$paramod\lzc\WIDTH=32'00000000000000000000000000000100\MODE=1'0 (in_i, cnt_o, empty_o);
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  output empty_o;
  wire empty_o;
  wire [31:0] \gen_lzc.flip_vector.sv2v_autoblock_1.i ;
  wire [3:0] \gen_lzc.in_tmp ;
  wire [7:0] \gen_lzc.index_lut ;
  wire [7:0] \gen_lzc.index_nodes ;
  wire [3:0] \gen_lzc.sel_nodes ;
  input [3:0] in_i;
  wire [3:0] in_i;
  assign empty_o = ~ \gen_lzc.sel_nodes [0];
  assign \gen_lzc.sel_nodes [1] = in_i[0] | in_i[1];
  assign \gen_lzc.sel_nodes [2] = in_i[2] | in_i[3];
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | \gen_lzc.sel_nodes [2];
  assign \gen_lzc.index_nodes [3:2] = in_i[0] ? 2'h0 : 2'h1;
  assign \gen_lzc.index_nodes [5:4] = in_i[2] ? 2'h2 : 2'h3;
  assign cnt_o = \gen_lzc.sel_nodes [1] ? \gen_lzc.index_nodes [3:2] : \gen_lzc.index_nodes [5:4];
  assign \gen_lzc.flip_vector.sv2v_autoblock_1.i  = 32'd4;
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut  = 8'he4;
  assign \gen_lzc.index_nodes [1:0] = cnt_o;
endmodule

module \$paramod\lzc\WIDTH=32'00000000000000000000000000000101\MODE=1'0 (in_i, cnt_o, empty_o);
  output [2:0] cnt_o;
  wire [2:0] cnt_o;
  output empty_o;
  wire empty_o;
  wire [31:0] \gen_lzc.flip_vector.sv2v_autoblock_1.i ;
  wire [4:0] \gen_lzc.in_tmp ;
  wire [14:0] \gen_lzc.index_lut ;
  wire [23:0] \gen_lzc.index_nodes ;
  wire [7:0] \gen_lzc.sel_nodes ;
  input [4:0] in_i;
  wire [4:0] in_i;
  assign empty_o = ~ \gen_lzc.sel_nodes [0];
  assign \gen_lzc.sel_nodes [3] = in_i[0] | in_i[1];
  assign \gen_lzc.sel_nodes [4] = in_i[2] | in_i[3];
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | in_i[4];
  assign \gen_lzc.sel_nodes [1] = \gen_lzc.sel_nodes [3] | \gen_lzc.sel_nodes [4];
  assign \gen_lzc.index_nodes [11:9] = in_i[0] ? 3'h0 : 3'h1;
  assign \gen_lzc.index_nodes [14:12] = in_i[2] ? 3'h2 : 3'h3;
  assign cnt_o = \gen_lzc.sel_nodes [1] ? \gen_lzc.index_nodes [5:3] : \gen_lzc.index_nodes [8:6];
  assign \gen_lzc.index_nodes [5:3] = \gen_lzc.sel_nodes [3] ? \gen_lzc.index_nodes [11:9] : \gen_lzc.index_nodes [14:12];
  assign \gen_lzc.index_nodes [8:6] = in_i[4] ? 3'h4 : 3'h0;
  assign \gen_lzc.flip_vector.sv2v_autoblock_1.i  = 32'd5;
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut  = 15'h4688;
  assign { \gen_lzc.index_nodes [20:15], \gen_lzc.index_nodes [2:0] } = { 6'h04, cnt_o };
  assign { \gen_lzc.sel_nodes [6:5], \gen_lzc.sel_nodes [2] } = { 1'h0, in_i[4], in_i[4] };
endmodule

module FPNewBlackbox(clk_i, rst_ni, operands_i, rnd_mode_i, op_i, op_mod_i, src_fmt_i, dst_fmt_i, int_fmt_i, vectorial_op_i, tag_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, tag_o, out_valid_o, out_ready_i, busy_o);
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  input [2:0] dst_fmt_i;
  wire [2:0] dst_fmt_i;
  input flush_i;
  wire flush_i;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  input [1:0] int_fmt_i;
  wire [1:0] int_fmt_i;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  input [95:0] operands_i;
  wire [95:0] operands_i;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  output [31:0] result_o;
  wire [31:0] result_o;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input rst_ni;
  wire rst_ni;
  input [2:0] src_fmt_i;
  wire [2:0] src_fmt_i;
  output [4:0] status_o;
  wire [4:0] status_o;
  input [1:0] tag_i;
  wire [1:0] tag_i;
  output [1:0] tag_o;
  wire [1:0] tag_o;
  input vectorial_op_i;
  wire vectorial_op_i;
  \$paramod$6a56daa284ee7ecf4b17ad071518a3d0a64707d6\fpnew_top_21317_11D0A  inst (
    .busy_o(busy_o),
    .clk_i(clk_i),
    .dst_fmt_i(dst_fmt_i),
    .flush_i(flush_i),
    .in_ready_o(in_ready_o),
    .in_valid_i(in_valid_i),
    .int_fmt_i(int_fmt_i),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i(operands_i),
    .out_ready_i(out_ready_i),
    .out_valid_o(out_valid_o),
    .result_o(result_o),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .src_fmt_i(src_fmt_i),
    .status_o(status_o),
    .tag_i(tag_i),
    .tag_o(tag_o),
    .vectorial_op_i(vectorial_op_i)
  );
endmodule
