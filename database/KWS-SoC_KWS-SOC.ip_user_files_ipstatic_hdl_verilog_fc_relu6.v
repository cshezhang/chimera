// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fc_relu6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_stream_V_V_dout,
        in_stream_V_V_empty_n,
        in_stream_V_V_read,
        out_stream_V_V_din,
        out_stream_V_V_full_n,
        out_stream_V_V_write,
        gru2fc_scale_V_dout,
        gru2fc_scale_V_empty_n,
        gru2fc_scale_V_read,
        fc2final_scale_V_din,
        fc2final_scale_V_full_n,
        fc2final_scale_V_write,
        fc_weight1_scale,
        tmp_scale_fc6,
        fc_weights1_V_address0,
        fc_weights1_V_ce0,
        fc_weights1_V_q0,
        fc_bias1_V_address0,
        fc_bias1_V_ce0,
        fc_bias1_V_q0
);

parameter    ap_ST_fsm_state1 = 76'd1;
parameter    ap_ST_fsm_state2 = 76'd2;
parameter    ap_ST_fsm_state3 = 76'd4;
parameter    ap_ST_fsm_state4 = 76'd8;
parameter    ap_ST_fsm_state5 = 76'd16;
parameter    ap_ST_fsm_pp0_stage0 = 76'd32;
parameter    ap_ST_fsm_state8 = 76'd64;
parameter    ap_ST_fsm_state9 = 76'd128;
parameter    ap_ST_fsm_state10 = 76'd256;
parameter    ap_ST_fsm_state11 = 76'd512;
parameter    ap_ST_fsm_state12 = 76'd1024;
parameter    ap_ST_fsm_state13 = 76'd2048;
parameter    ap_ST_fsm_state14 = 76'd4096;
parameter    ap_ST_fsm_state15 = 76'd8192;
parameter    ap_ST_fsm_state16 = 76'd16384;
parameter    ap_ST_fsm_state17 = 76'd32768;
parameter    ap_ST_fsm_state18 = 76'd65536;
parameter    ap_ST_fsm_pp2_stage0 = 76'd131072;
parameter    ap_ST_fsm_pp2_stage1 = 76'd262144;
parameter    ap_ST_fsm_state22 = 76'd524288;
parameter    ap_ST_fsm_state23 = 76'd1048576;
parameter    ap_ST_fsm_state24 = 76'd2097152;
parameter    ap_ST_fsm_state25 = 76'd4194304;
parameter    ap_ST_fsm_state26 = 76'd8388608;
parameter    ap_ST_fsm_state27 = 76'd16777216;
parameter    ap_ST_fsm_state28 = 76'd33554432;
parameter    ap_ST_fsm_state29 = 76'd67108864;
parameter    ap_ST_fsm_state30 = 76'd134217728;
parameter    ap_ST_fsm_state31 = 76'd268435456;
parameter    ap_ST_fsm_state32 = 76'd536870912;
parameter    ap_ST_fsm_state33 = 76'd1073741824;
parameter    ap_ST_fsm_state34 = 76'd2147483648;
parameter    ap_ST_fsm_state35 = 76'd4294967296;
parameter    ap_ST_fsm_state36 = 76'd8589934592;
parameter    ap_ST_fsm_state37 = 76'd17179869184;
parameter    ap_ST_fsm_state38 = 76'd34359738368;
parameter    ap_ST_fsm_state39 = 76'd68719476736;
parameter    ap_ST_fsm_state40 = 76'd137438953472;
parameter    ap_ST_fsm_state41 = 76'd274877906944;
parameter    ap_ST_fsm_state42 = 76'd549755813888;
parameter    ap_ST_fsm_state43 = 76'd1099511627776;
parameter    ap_ST_fsm_state44 = 76'd2199023255552;
parameter    ap_ST_fsm_state45 = 76'd4398046511104;
parameter    ap_ST_fsm_state46 = 76'd8796093022208;
parameter    ap_ST_fsm_state47 = 76'd17592186044416;
parameter    ap_ST_fsm_state48 = 76'd35184372088832;
parameter    ap_ST_fsm_state49 = 76'd70368744177664;
parameter    ap_ST_fsm_state50 = 76'd140737488355328;
parameter    ap_ST_fsm_state51 = 76'd281474976710656;
parameter    ap_ST_fsm_state52 = 76'd562949953421312;
parameter    ap_ST_fsm_state53 = 76'd1125899906842624;
parameter    ap_ST_fsm_state54 = 76'd2251799813685248;
parameter    ap_ST_fsm_state55 = 76'd4503599627370496;
parameter    ap_ST_fsm_state56 = 76'd9007199254740992;
parameter    ap_ST_fsm_state57 = 76'd18014398509481984;
parameter    ap_ST_fsm_state58 = 76'd36028797018963968;
parameter    ap_ST_fsm_state59 = 76'd72057594037927936;
parameter    ap_ST_fsm_state60 = 76'd144115188075855872;
parameter    ap_ST_fsm_state61 = 76'd288230376151711744;
parameter    ap_ST_fsm_state62 = 76'd576460752303423488;
parameter    ap_ST_fsm_state63 = 76'd1152921504606846976;
parameter    ap_ST_fsm_state64 = 76'd2305843009213693952;
parameter    ap_ST_fsm_state65 = 76'd4611686018427387904;
parameter    ap_ST_fsm_state66 = 76'd9223372036854775808;
parameter    ap_ST_fsm_state67 = 76'd18446744073709551616;
parameter    ap_ST_fsm_state68 = 76'd36893488147419103232;
parameter    ap_ST_fsm_state69 = 76'd73786976294838206464;
parameter    ap_ST_fsm_state70 = 76'd147573952589676412928;
parameter    ap_ST_fsm_state71 = 76'd295147905179352825856;
parameter    ap_ST_fsm_state72 = 76'd590295810358705651712;
parameter    ap_ST_fsm_state73 = 76'd1180591620717411303424;
parameter    ap_ST_fsm_state74 = 76'd2361183241434822606848;
parameter    ap_ST_fsm_state75 = 76'd4722366482869645213696;
parameter    ap_ST_fsm_state76 = 76'd9444732965739290427392;
parameter    ap_ST_fsm_pp3_stage0 = 76'd18889465931478580854784;
parameter    ap_ST_fsm_state91 = 76'd37778931862957161709568;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] in_stream_V_V_dout;
input   in_stream_V_V_empty_n;
output   in_stream_V_V_read;
output  [7:0] out_stream_V_V_din;
input   out_stream_V_V_full_n;
output   out_stream_V_V_write;
input  [31:0] gru2fc_scale_V_dout;
input   gru2fc_scale_V_empty_n;
output   gru2fc_scale_V_read;
output  [31:0] fc2final_scale_V_din;
input   fc2final_scale_V_full_n;
output   fc2final_scale_V_write;
input  [31:0] fc_weight1_scale;
input  [31:0] tmp_scale_fc6;
output  [11:0] fc_weights1_V_address0;
output   fc_weights1_V_ce0;
input  [7:0] fc_weights1_V_q0;
output  [5:0] fc_bias1_V_address0;
output   fc_bias1_V_ce0;
input  [7:0] fc_bias1_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_stream_V_V_read;
reg out_stream_V_V_write;
reg gru2fc_scale_V_read;
reg fc2final_scale_V_write;
reg fc_weights1_V_ce0;
reg fc_bias1_V_ce0;

(* fsm_encoding = "none" *) reg   [75:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [5:0] x_V_3_address0;
reg    x_V_3_ce0;
reg    x_V_3_we0;
wire   [7:0] x_V_3_q0;
reg   [5:0] y_V_1_address0;
reg    y_V_1_ce0;
reg    y_V_1_we0;
reg   [31:0] y_V_1_d0;
wire   [31:0] y_V_1_q0;
reg   [5:0] tmp_relu_address0;
reg    tmp_relu_ce0;
reg    tmp_relu_we0;
wire   [31:0] tmp_relu_q0;
wire   [5:0] mask_table2_address0;
reg    mask_table2_ce0;
wire   [51:0] mask_table2_q0;
wire   [5:0] one_half_table3_address0;
reg    one_half_table3_ce0;
wire   [52:0] one_half_table3_q0;
reg    in_stream_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln38_reg_1598;
reg    out_stream_V_V_blk_n;
reg    ap_enable_reg_pp3_iter13;
wire    ap_block_pp3_stage0;
reg   [0:0] icmp_ln78_reg_1840;
reg   [0:0] icmp_ln78_reg_1840_pp3_iter12_reg;
reg    gru2fc_scale_V_blk_n;
reg    fc2final_scale_V_blk_n;
wire    ap_CS_fsm_state76;
reg   [6:0] i_0_reg_374;
reg   [6:0] im_0_reg_432;
reg   [6:0] om2_0_reg_443;
wire   [31:0] grp_fu_458_p2;
reg   [31:0] reg_499;
wire    ap_CS_fsm_state5;
wire    ap_block_state77_pp3_stage0_iter0;
wire    ap_block_state78_pp3_stage0_iter1;
wire    ap_block_state79_pp3_stage0_iter2;
wire    ap_block_state80_pp3_stage0_iter3;
wire    ap_block_state81_pp3_stage0_iter4;
wire    ap_block_state82_pp3_stage0_iter5;
wire    ap_block_state83_pp3_stage0_iter6;
wire    ap_block_state84_pp3_stage0_iter7;
wire    ap_block_state85_pp3_stage0_iter8;
wire    ap_block_state86_pp3_stage0_iter9;
wire    ap_block_state87_pp3_stage0_iter10;
wire    ap_block_state88_pp3_stage0_iter11;
wire    ap_block_state89_pp3_stage0_iter12;
reg    ap_block_state90_pp3_stage0_iter13;
reg    ap_block_pp3_stage0_11001;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_state75;
reg    ap_enable_reg_pp3_iter5;
reg   [0:0] icmp_ln78_reg_1840_pp3_iter4_reg;
reg   [31:0] reg_507;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state17;
wire   [31:0] grp_fu_469_p1;
reg   [31:0] reg_513;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state51;
wire   [63:0] grp_fu_475_p1;
reg   [63:0] reg_520;
wire    ap_CS_fsm_state43;
reg   [63:0] reg_520_pp3_iter8_reg;
reg    ap_enable_reg_pp3_iter7;
reg   [0:0] icmp_ln78_reg_1840_pp3_iter6_reg;
reg   [31:0] tmp_114_reg_1582;
reg    ap_block_state1;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln38_fu_526_p2;
wire    ap_block_state6_pp0_stage0_iter0;
reg    ap_block_state7_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [6:0] i_fu_532_p2;
reg   [6:0] i_reg_1602;
reg    ap_enable_reg_pp0_iter0;
wire   [6:0] om_fu_549_p2;
wire    ap_CS_fsm_state9;
wire   [31:0] bitcast_ln89_fu_560_p1;
reg   [31:0] bitcast_ln89_reg_1615;
wire   [0:0] icmp_ln89_6_fu_568_p2;
reg   [0:0] icmp_ln89_6_reg_1620;
wire   [0:0] icmp_ln55_fu_574_p2;
wire    ap_CS_fsm_state18;
wire   [6:0] om_6_fu_580_p2;
reg   [6:0] om_6_reg_1629;
wire   [63:0] zext_ln58_fu_586_p1;
reg   [63:0] zext_ln58_reg_1634;
wire   [13:0] zext_ln215_fu_591_p1;
reg   [13:0] zext_ln215_reg_1640;
reg   [5:0] y_V_1_addr_1_reg_1645;
wire   [31:0] select_ln70_fu_623_p3;
reg   [31:0] select_ln70_reg_1650;
wire   [0:0] icmp_ln56_fu_631_p2;
reg   [0:0] icmp_ln56_reg_1655;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state19_pp2_stage0_iter0;
wire    ap_block_state21_pp2_stage0_iter1;
wire    ap_block_pp2_stage0_11001;
wire   [6:0] im_fu_637_p2;
reg   [6:0] im_reg_1659;
reg    ap_enable_reg_pp2_iter0;
reg  signed [7:0] x_V_3_load_reg_1674;
wire    ap_CS_fsm_pp2_stage1;
wire    ap_block_state20_pp2_stage1_iter0;
wire    ap_block_pp2_stage1_11001;
reg  signed [7:0] fc_weights1_V_load_reg_1679;
wire    ap_CS_fsm_state22;
wire   [0:0] icmp_ln89_fu_685_p2;
reg   [0:0] icmp_ln89_reg_1689;
wire  signed [31:0] sext_ln1428_fu_691_p1;
wire    ap_CS_fsm_state23;
reg   [31:0] y_V_1_load_reg_1699;
wire    ap_CS_fsm_state26;
reg   [31:0] tmp_286_reg_1704;
wire   [31:0] grp_fu_454_p2;
reg   [31:0] in_var_assign_reg_1709;
wire    ap_CS_fsm_state37;
wire   [0:0] or_ln87_fu_725_p2;
reg   [0:0] or_ln87_reg_1717;
wire    ap_CS_fsm_state39;
wire   [0:0] and_ln87_fu_731_p2;
reg   [0:0] and_ln87_reg_1722;
wire   [31:0] select_ln87_fu_770_p3;
reg   [31:0] select_ln87_reg_1728;
wire    ap_CS_fsm_state41;
wire   [63:0] grp_fu_491_p1;
reg   [63:0] tmp_287_reg_1735;
wire   [31:0] reg_V_fu_777_p1;
reg   [31:0] reg_V_reg_1741;
reg   [0:0] p_Result_55_reg_1746;
wire   [23:0] tmp_82_fu_810_p3;
reg   [23:0] tmp_82_reg_1751;
wire   [0:0] icmp_ln278_3_fu_818_p2;
reg   [0:0] icmp_ln278_3_reg_1756;
wire   [0:0] icmp_ln285_3_fu_846_p2;
reg   [0:0] icmp_ln285_3_reg_1761;
wire  signed [8:0] sh_amt_10_fu_852_p2;
reg  signed [8:0] sh_amt_10_reg_1766;
wire   [0:0] and_ln284_3_fu_912_p2;
reg   [0:0] and_ln284_3_reg_1771;
wire   [23:0] select_ln285_9_fu_924_p3;
reg   [23:0] select_ln285_9_reg_1776;
wire   [0:0] and_ln295_3_fu_944_p2;
reg   [0:0] and_ln295_3_reg_1781;
wire   [63:0] grp_fu_495_p1;
reg   [63:0] tmp_288_reg_1786;
wire   [0:0] or_ln1629_fu_997_p2;
reg   [0:0] or_ln1629_reg_1792;
wire    ap_CS_fsm_state44;
wire   [0:0] icmp_ln1629_2_fu_1003_p2;
reg   [0:0] icmp_ln1629_2_reg_1798;
wire   [0:0] icmp_ln1629_3_fu_1009_p2;
reg   [0:0] icmp_ln1629_3_reg_1803;
wire   [31:0] tmp_max_V_fu_1083_p3;
reg   [31:0] tmp_max_V_reg_1808;
wire   [0:0] icmp_ln1630_fu_1107_p2;
reg   [0:0] icmp_ln1630_reg_1814;
wire   [0:0] icmp_ln1630_1_fu_1113_p2;
reg   [0:0] icmp_ln1630_1_reg_1819;
wire   [31:0] tmp_max_V_1_fu_1134_p3;
wire    ap_CS_fsm_state45;
wire   [31:0] tmp_min_V_2_fu_1156_p3;
wire   [31:0] grp_fu_464_p2;
reg   [31:0] shrink_reg_1834;
wire    ap_CS_fsm_state67;
wire   [0:0] icmp_ln78_fu_1163_p2;
wire    ap_CS_fsm_pp3_stage0;
reg   [0:0] icmp_ln78_reg_1840_pp3_iter1_reg;
reg   [0:0] icmp_ln78_reg_1840_pp3_iter2_reg;
reg   [0:0] icmp_ln78_reg_1840_pp3_iter3_reg;
reg   [0:0] icmp_ln78_reg_1840_pp3_iter5_reg;
reg   [0:0] icmp_ln78_reg_1840_pp3_iter7_reg;
reg   [0:0] icmp_ln78_reg_1840_pp3_iter8_reg;
reg   [0:0] icmp_ln78_reg_1840_pp3_iter9_reg;
reg   [0:0] icmp_ln78_reg_1840_pp3_iter10_reg;
reg   [0:0] icmp_ln78_reg_1840_pp3_iter11_reg;
wire   [6:0] om_5_fu_1169_p2;
reg    ap_enable_reg_pp3_iter0;
reg   [31:0] tmp_relu_load_reg_1854;
reg    ap_enable_reg_pp3_iter1;
reg   [0:0] p_Result_56_reg_1859;
reg   [0:0] p_Result_56_reg_1859_pp3_iter7_reg;
wire   [0:0] icmp_ln849_fu_1206_p2;
reg   [0:0] icmp_ln849_reg_1865;
reg   [0:0] icmp_ln849_reg_1865_pp3_iter8_reg;
wire   [0:0] icmp_ln849_3_fu_1212_p2;
reg   [0:0] icmp_ln849_3_reg_1871;
reg   [0:0] icmp_ln849_3_reg_1871_pp3_iter8_reg;
wire   [62:0] trunc_ln368_fu_1234_p1;
reg   [62:0] trunc_ln368_reg_1886;
wire   [63:0] bitcast_ln849_fu_1302_p1;
reg   [63:0] bitcast_ln849_reg_1891;
wire   [31:0] grp_fu_472_p1;
reg   [31:0] outprepare_tmp_reg_1901;
wire   [31:0] reg_V_4_fu_1324_p1;
reg   [31:0] reg_V_4_reg_1906;
reg   [0:0] p_Result_60_reg_1911;
wire   [7:0] trunc_ln283_fu_1357_p1;
reg   [7:0] trunc_ln283_reg_1916;
wire   [0:0] icmp_ln278_fu_1369_p2;
reg   [0:0] icmp_ln278_reg_1922;
wire   [0:0] icmp_ln282_fu_1385_p2;
reg   [0:0] icmp_ln282_reg_1928;
wire   [0:0] icmp_ln285_fu_1397_p2;
reg   [0:0] icmp_ln285_reg_1933;
wire  signed [8:0] sh_amt_8_fu_1403_p2;
reg  signed [8:0] sh_amt_8_reg_1938;
wire   [0:0] and_ln284_fu_1447_p2;
reg   [0:0] and_ln284_reg_1943;
wire   [7:0] select_ln285_fu_1459_p3;
reg   [7:0] select_ln285_reg_1948;
wire   [0:0] and_ln295_fu_1479_p2;
reg   [0:0] and_ln295_reg_1953;
wire   [7:0] outprepare_V_fu_1566_p3;
reg   [7:0] outprepare_V_reg_1958;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state6;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state19;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage1_subdone;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state77;
reg    ap_enable_reg_pp3_iter2;
reg    ap_enable_reg_pp3_iter3;
reg    ap_enable_reg_pp3_iter4;
reg    ap_enable_reg_pp3_iter6;
reg    ap_enable_reg_pp3_iter8;
reg    ap_enable_reg_pp3_iter9;
reg    ap_enable_reg_pp3_iter10;
reg    ap_enable_reg_pp3_iter11;
reg    ap_enable_reg_pp3_iter12;
reg   [6:0] ap_phi_mux_i_0_phi_fu_378_p4;
reg   [6:0] om_0_reg_386;
wire   [0:0] icmp_ln45_fu_543_p2;
wire    ap_CS_fsm_state8;
reg   [31:0] p_091_0_reg_397;
reg   [31:0] p_0130_0_reg_409;
reg   [6:0] om1_0_reg_421;
reg   [6:0] ap_phi_mux_im_0_phi_fu_436_p4;
wire    ap_block_pp2_stage0;
wire   [63:0] zext_ln41_fu_538_p1;
wire   [63:0] zext_ln47_fu_555_p1;
wire   [63:0] zext_ln215_11_fu_665_p1;
wire   [63:0] zext_ln58_1_fu_643_p1;
wire    ap_CS_fsm_state42;
wire   [63:0] zext_ln80_fu_1175_p1;
wire   [63:0] zext_ln498_fu_1228_p1;
reg    ap_block_pp3_stage0_01001;
wire    ap_block_pp2_stage1;
wire  signed [31:0] grp_fu_1573_p3;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state33;
reg   [31:0] grp_fu_458_p0;
reg   [31:0] grp_fu_458_p1;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state68;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state52;
reg  signed [31:0] grp_fu_469_p0;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state46;
wire   [63:0] grp_fu_472_p0;
reg   [31:0] grp_fu_475_p0;
reg   [31:0] grp_fu_478_p0;
reg   [31:0] grp_fu_478_p1;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state40;
wire   [22:0] trunc_ln89_fu_564_p1;
wire   [0:0] tmp_fu_595_p3;
wire   [31:0] tmp_min_V_fu_603_p2;
wire   [31:0] select_ln68_fu_609_p3;
wire   [0:0] icmp_ln895_fu_617_p2;
wire   [12:0] tmp_93_fu_648_p3;
wire   [13:0] zext_ln215_10_fu_656_p1;
wire   [13:0] add_ln215_fu_660_p2;
wire   [7:0] tmp_303_fu_676_p4;
wire   [31:0] bitcast_ln87_fu_696_p1;
wire   [7:0] tmp_301_fu_699_p4;
wire   [22:0] trunc_ln87_fu_709_p1;
wire   [0:0] icmp_ln87_4_fu_719_p2;
wire   [0:0] icmp_ln87_fu_713_p2;
wire   [0:0] grp_fu_478_p2;
wire   [0:0] or_ln89_fu_737_p2;
wire   [0:0] and_ln89_fu_741_p2;
wire   [0:0] and_ln89_5_fu_746_p2;
wire   [0:0] xor_ln87_fu_752_p2;
wire   [0:0] and_ln89_6_fu_757_p2;
wire   [31:0] select_ln89_fu_763_p3;
wire   [7:0] p_Result_s_fu_792_p4;
wire   [22:0] trunc_ln270_3_fu_806_p1;
wire   [30:0] trunc_ln262_3_fu_780_p1;
wire   [8:0] exp_V_3_fu_802_p1;
wire  signed [8:0] sh_amt_9_fu_824_p2;
wire   [3:0] tmp_112_fu_858_p4;
wire  signed [23:0] sext_ln281_3_fu_830_p1;
wire   [0:0] icmp_ln282_3_fu_834_p2;
wire   [0:0] xor_ln278_3_fu_880_p2;
wire   [0:0] and_ln282_3_fu_886_p2;
wire   [0:0] or_ln282_3_fu_900_p2;
wire   [0:0] icmp_ln284_3_fu_840_p2;
wire   [0:0] xor_ln282_3_fu_906_p2;
wire   [0:0] and_ln285_9_fu_918_p2;
wire   [23:0] lshr_ln286_3_fu_874_p2;
wire   [23:0] select_ln282_3_fu_892_p3;
wire   [0:0] or_ln284_3_fu_932_p2;
wire   [0:0] icmp_ln295_3_fu_868_p2;
wire   [0:0] xor_ln284_3_fu_938_p2;
wire   [63:0] bitcast_ln1629_fu_950_p1;
wire   [63:0] bitcast_ln1629_1_fu_968_p1;
wire   [10:0] tmp_305_fu_954_p4;
wire   [51:0] trunc_ln1629_fu_964_p1;
wire   [0:0] icmp_ln1629_1_fu_991_p2;
wire   [0:0] icmp_ln1629_fu_985_p2;
wire   [10:0] tmp_306_fu_971_p4;
wire   [51:0] trunc_ln1629_1_fu_981_p1;
wire   [0:0] tmp_113_fu_1021_p3;
wire   [31:0] zext_ln283_fu_1015_p1;
wire  signed [31:0] sext_ln294_3_fu_1018_p1;
wire   [31:0] shl_ln297_3_fu_1036_p2;
wire   [31:0] zext_ln285_fu_1042_p1;
wire   [31:0] select_ln295_3_fu_1045_p3;
wire   [0:0] xor_ln285_3_fu_1059_p2;
wire   [0:0] and_ln285_10_fu_1064_p2;
wire   [31:0] select_ln288_3_fu_1028_p3;
wire   [31:0] select_ln278_3_fu_1052_p3;
wire   [31:0] select_ln285_10_fu_1069_p3;
wire   [31:0] sub_ln461_3_fu_1077_p2;
wire   [63:0] bitcast_ln1630_fu_1090_p1;
wire   [10:0] tmp_308_fu_1093_p4;
wire   [51:0] trunc_ln1630_fu_1103_p1;
wire   [0:0] or_ln1629_1_fu_1119_p2;
wire   [0:0] and_ln1629_fu_1123_p2;
wire   [0:0] grp_fu_483_p2;
wire   [0:0] and_ln1629_1_fu_1128_p2;
wire   [0:0] or_ln1630_fu_1141_p2;
wire   [0:0] and_ln1630_fu_1145_p2;
wire   [0:0] grp_fu_487_p2;
wire   [0:0] and_ln1630_1_fu_1150_p2;
wire   [31:0] bitcast_ln475_fu_1180_p1;
wire   [63:0] p_Val2_s_fu_1192_p1;
wire   [10:0] tmp_V_14_fu_1196_p4;
wire   [5:0] index_V_fu_1218_p4;
wire   [63:0] p_Result_58_fu_1249_p3;
wire   [63:0] zext_ln209_fu_1245_p1;
wire   [63:0] p_Val2_33_fu_1255_p2;
wire   [51:0] tmp_V_15_fu_1261_p1;
wire   [51:0] xor_ln1309_fu_1265_p2;
wire   [11:0] tmp_92_fu_1277_p4;
wire   [51:0] xs_sig_V_fu_1271_p2;
wire   [63:0] p_Result_57_fu_1238_p3;
wire   [63:0] p_Result_59_fu_1287_p3;
wire   [63:0] select_ln849_fu_1295_p3;
wire   [0:0] xor_ln849_fu_1306_p2;
wire   [0:0] and_ln849_fu_1311_p2;
wire   [7:0] p_Result_s_110_fu_1339_p4;
wire   [22:0] trunc_ln270_fu_1353_p1;
wire   [30:0] trunc_ln262_fu_1327_p1;
wire   [8:0] exp_V_fu_1349_p1;
wire  signed [8:0] sh_amt_fu_1375_p2;
wire   [5:0] tmp_109_fu_1409_p4;
wire   [23:0] tmp_80_fu_1361_p3;
wire  signed [23:0] sext_ln281_fu_1381_p1;
wire   [23:0] lshr_ln286_fu_1425_p2;
wire   [0:0] or_ln282_fu_1435_p2;
wire   [0:0] icmp_ln284_fu_1391_p2;
wire   [0:0] xor_ln282_fu_1441_p2;
wire   [0:0] and_ln285_fu_1453_p2;
wire   [7:0] trunc_ln286_fu_1431_p1;
wire   [0:0] or_ln284_fu_1467_p2;
wire   [0:0] icmp_ln295_fu_1419_p2;
wire   [0:0] xor_ln284_fu_1473_p2;
wire   [0:0] tmp_110_fu_1488_p3;
wire  signed [31:0] sext_ln294_fu_1485_p1;
wire   [7:0] sext_ln294cast_fu_1503_p1;
wire   [7:0] shl_ln297_fu_1507_p2;
wire   [7:0] select_ln295_fu_1512_p3;
wire   [0:0] xor_ln285_fu_1525_p2;
wire   [0:0] and_ln285_8_fu_1530_p2;
wire   [7:0] select_ln288_fu_1495_p3;
wire   [7:0] select_ln278_fu_1518_p3;
wire   [0:0] xor_ln278_fu_1543_p2;
wire   [0:0] and_ln282_fu_1548_p2;
wire   [7:0] select_ln285_8_fu_1535_p3;
wire   [7:0] select_ln282_fu_1553_p3;
wire   [7:0] sub_ln461_fu_1560_p2;
reg    grp_fu_458_ce;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state69;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state74;
reg    grp_fu_472_ce;
reg    grp_fu_475_ce;
wire    ap_CS_fsm_state91;
reg   [75:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;

// power-on initialization
initial begin
#0 ap_CS_fsm = 76'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter13 = 1'b0;
#0 ap_enable_reg_pp3_iter5 = 1'b0;
#0 ap_enable_reg_pp3_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter3 = 1'b0;
#0 ap_enable_reg_pp3_iter4 = 1'b0;
#0 ap_enable_reg_pp3_iter6 = 1'b0;
#0 ap_enable_reg_pp3_iter8 = 1'b0;
#0 ap_enable_reg_pp3_iter9 = 1'b0;
#0 ap_enable_reg_pp3_iter10 = 1'b0;
#0 ap_enable_reg_pp3_iter11 = 1'b0;
#0 ap_enable_reg_pp3_iter12 = 1'b0;
end

fc_relu6_x_V_3 #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
x_V_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(x_V_3_address0),
    .ce0(x_V_3_ce0),
    .we0(x_V_3_we0),
    .d0(in_stream_V_V_dout),
    .q0(x_V_3_q0)
);

grucell_zz #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
y_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(y_V_1_address0),
    .ce0(y_V_1_ce0),
    .we0(y_V_1_we0),
    .d0(y_V_1_d0),
    .q0(y_V_1_q0)
);

grucell_zz #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
tmp_relu_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tmp_relu_address0),
    .ce0(tmp_relu_ce0),
    .we0(tmp_relu_we0),
    .d0(select_ln87_reg_1728),
    .q0(tmp_relu_q0)
);

dw_layer1_mask_taIfE #(
    .DataWidth( 52 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
mask_table2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mask_table2_address0),
    .ce0(mask_table2_ce0),
    .q0(mask_table2_q0)
);

dw_layer1_one_halJfO #(
    .DataWidth( 53 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
one_half_table3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(one_half_table3_address0),
    .ce0(one_half_table3_ce0),
    .q0(one_half_table3_q0)
);

kws_fadd_32ns_32nwdI #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kws_fadd_32ns_32nwdI_U342(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_513),
    .din1(tmp_286_reg_1704),
    .ce(1'b1),
    .dout(grp_fu_454_p2)
);

kws_fmul_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kws_fmul_32ns_32neOg_U343(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_458_p0),
    .din1(grp_fu_458_p1),
    .ce(grp_fu_458_ce),
    .dout(grp_fu_458_p2)
);

kws_fdiv_32ns_32nGfk #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kws_fdiv_32ns_32nGfk_U344(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd1123942400),
    .din1(reg_513),
    .ce(1'b1),
    .dout(grp_fu_464_p2)
);

kws_sitofp_32s_32OgC #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kws_sitofp_32s_32OgC_U345(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_469_p0),
    .ce(1'b1),
    .dout(grp_fu_469_p1)
);

kws_fptrunc_64ns_Aem #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
kws_fptrunc_64ns_Aem_U346(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_472_p0),
    .ce(grp_fu_472_ce),
    .dout(grp_fu_472_p1)
);

kws_fpext_32ns_64Bew #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
kws_fpext_32ns_64Bew_U347(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_475_p0),
    .ce(grp_fu_475_ce),
    .dout(grp_fu_475_p1)
);

kws_fcmp_32ns_32nHfu #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
kws_fcmp_32ns_32nHfu_U348(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_478_p0),
    .din1(grp_fu_478_p1),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_478_p2)
);

kws_dcmp_64ns_64nCeG #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
kws_dcmp_64ns_64nCeG_U349(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_520),
    .din1(tmp_287_reg_1735),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_483_p2)
);

kws_dcmp_64ns_64nCeG #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
kws_dcmp_64ns_64nCeG_U350(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_520),
    .din1(tmp_288_reg_1786),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_487_p2)
);

kws_sitodp_32ns_6Yie #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
kws_sitodp_32ns_6Yie_U351(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_091_0_reg_397),
    .ce(1'b1),
    .dout(grp_fu_491_p1)
);

kws_sitodp_32ns_6Yie #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
kws_sitodp_32ns_6Yie_U352(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_0130_0_reg_409),
    .ce(1'b1),
    .dout(grp_fu_495_p1)
);

kws_mac_muladd_8sLf8 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kws_mac_muladd_8sLf8_U353(
    .din0(x_V_3_load_reg_1674),
    .din1(fc_weights1_V_load_reg_1679),
    .din2(y_V_1_q0),
    .dout(grp_fu_1573_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state6) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state6))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state6);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state19) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln55_fu_574_p2 == 1'd0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln55_fu_574_p2 == 1'd0))) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state77) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state76) & (fc2final_scale_V_full_n == 1'b1))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state77)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state77);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter10 <= ap_enable_reg_pp3_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter11 <= ap_enable_reg_pp3_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter12 <= ap_enable_reg_pp3_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter13 <= ap_enable_reg_pp3_iter12;
        end else if (((1'b1 == ap_CS_fsm_state76) & (fc2final_scale_V_full_n == 1'b1))) begin
            ap_enable_reg_pp3_iter13 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter5 <= ap_enable_reg_pp3_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter6 <= ap_enable_reg_pp3_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter7 <= ap_enable_reg_pp3_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter8 <= ap_enable_reg_pp3_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter9 <= ap_enable_reg_pp3_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln38_reg_1598 == 1'd0))) begin
        i_0_reg_374 <= i_reg_1602;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        i_0_reg_374 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln56_reg_1655 == 1'd0))) begin
        im_0_reg_432 <= im_reg_1659;
    end else if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln55_fu_574_p2 == 1'd0))) begin
        im_0_reg_432 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        om1_0_reg_421 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        om1_0_reg_421 <= om_6_reg_1629;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln78_fu_1163_p2 == 1'd0))) begin
        om2_0_reg_443 <= om_5_fu_1169_p2;
    end else if (((1'b1 == ap_CS_fsm_state76) & (fc2final_scale_V_full_n == 1'b1))) begin
        om2_0_reg_443 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        om_0_reg_386 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln45_fu_543_p2 == 1'd0))) begin
        om_0_reg_386 <= om_fu_549_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        p_0130_0_reg_409 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        p_0130_0_reg_409 <= tmp_min_V_2_fu_1156_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        p_091_0_reg_397 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        p_091_0_reg_397 <= tmp_max_V_1_fu_1134_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        and_ln284_3_reg_1771 <= and_ln284_3_fu_912_p2;
        and_ln295_3_reg_1781 <= and_ln295_3_fu_944_p2;
        icmp_ln278_3_reg_1756 <= icmp_ln278_3_fu_818_p2;
        icmp_ln285_3_reg_1761 <= icmp_ln285_3_fu_846_p2;
        p_Result_55_reg_1746 <= reg_V_fu_777_p1[32'd31];
        reg_V_reg_1741 <= reg_V_fu_777_p1;
        select_ln285_9_reg_1776 <= select_ln285_9_fu_924_p3;
        sh_amt_10_reg_1766 <= sh_amt_10_fu_852_p2;
        tmp_287_reg_1735 <= grp_fu_491_p1;
        tmp_288_reg_1786 <= grp_fu_495_p1;
        tmp_82_reg_1751[22 : 0] <= tmp_82_fu_810_p3[22 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln78_reg_1840_pp3_iter10_reg == 1'd0))) begin
        and_ln284_reg_1943 <= and_ln284_fu_1447_p2;
        and_ln295_reg_1953 <= and_ln295_fu_1479_p2;
        icmp_ln278_reg_1922 <= icmp_ln278_fu_1369_p2;
        icmp_ln282_reg_1928 <= icmp_ln282_fu_1385_p2;
        icmp_ln285_reg_1933 <= icmp_ln285_fu_1397_p2;
        p_Result_60_reg_1911 <= reg_V_4_fu_1324_p1[32'd31];
        reg_V_4_reg_1906 <= reg_V_4_fu_1324_p1;
        select_ln285_reg_1948 <= select_ln285_fu_1459_p3;
        sh_amt_8_reg_1938 <= sh_amt_8_fu_1403_p2;
        trunc_ln283_reg_1916 <= trunc_ln283_fu_1357_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        and_ln87_reg_1722 <= and_ln87_fu_731_p2;
        or_ln87_reg_1717 <= or_ln87_fu_725_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln78_reg_1840_pp3_iter7_reg == 1'd0))) begin
        bitcast_ln849_reg_1891 <= bitcast_ln849_fu_1302_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        bitcast_ln89_reg_1615 <= bitcast_ln89_fu_560_p1;
        icmp_ln89_6_reg_1620 <= icmp_ln89_6_fu_568_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1) & (icmp_ln56_reg_1655 == 1'd0))) begin
        fc_weights1_V_load_reg_1679 <= fc_weights1_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_1602 <= i_fu_532_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        icmp_ln1629_2_reg_1798 <= icmp_ln1629_2_fu_1003_p2;
        icmp_ln1629_3_reg_1803 <= icmp_ln1629_3_fu_1009_p2;
        icmp_ln1630_1_reg_1819 <= icmp_ln1630_1_fu_1113_p2;
        icmp_ln1630_reg_1814 <= icmp_ln1630_fu_1107_p2;
        or_ln1629_reg_1792 <= or_ln1629_fu_997_p2;
        tmp_max_V_reg_1808 <= tmp_max_V_fu_1083_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln38_reg_1598 <= icmp_ln38_fu_526_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln56_reg_1655 <= icmp_ln56_fu_631_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln78_reg_1840 <= icmp_ln78_fu_1163_p2;
        icmp_ln78_reg_1840_pp3_iter1_reg <= icmp_ln78_reg_1840;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp3_stage0_11001)) begin
        icmp_ln78_reg_1840_pp3_iter10_reg <= icmp_ln78_reg_1840_pp3_iter9_reg;
        icmp_ln78_reg_1840_pp3_iter11_reg <= icmp_ln78_reg_1840_pp3_iter10_reg;
        icmp_ln78_reg_1840_pp3_iter12_reg <= icmp_ln78_reg_1840_pp3_iter11_reg;
        icmp_ln78_reg_1840_pp3_iter2_reg <= icmp_ln78_reg_1840_pp3_iter1_reg;
        icmp_ln78_reg_1840_pp3_iter3_reg <= icmp_ln78_reg_1840_pp3_iter2_reg;
        icmp_ln78_reg_1840_pp3_iter4_reg <= icmp_ln78_reg_1840_pp3_iter3_reg;
        icmp_ln78_reg_1840_pp3_iter5_reg <= icmp_ln78_reg_1840_pp3_iter4_reg;
        icmp_ln78_reg_1840_pp3_iter6_reg <= icmp_ln78_reg_1840_pp3_iter5_reg;
        icmp_ln78_reg_1840_pp3_iter7_reg <= icmp_ln78_reg_1840_pp3_iter6_reg;
        icmp_ln78_reg_1840_pp3_iter8_reg <= icmp_ln78_reg_1840_pp3_iter7_reg;
        icmp_ln78_reg_1840_pp3_iter9_reg <= icmp_ln78_reg_1840_pp3_iter8_reg;
        icmp_ln849_3_reg_1871_pp3_iter8_reg <= icmp_ln849_3_reg_1871;
        icmp_ln849_reg_1865_pp3_iter8_reg <= icmp_ln849_reg_1865;
        p_Result_56_reg_1859_pp3_iter7_reg <= p_Result_56_reg_1859;
        reg_520_pp3_iter8_reg <= reg_520;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln78_reg_1840_pp3_iter6_reg == 1'd0))) begin
        icmp_ln849_3_reg_1871 <= icmp_ln849_3_fu_1212_p2;
        icmp_ln849_reg_1865 <= icmp_ln849_fu_1206_p2;
        trunc_ln368_reg_1886 <= trunc_ln368_fu_1234_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        icmp_ln89_reg_1689 <= icmp_ln89_fu_685_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        im_reg_1659 <= im_fu_637_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        in_var_assign_reg_1709 <= grp_fu_454_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        om_6_reg_1629 <= om_6_fu_580_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln78_reg_1840_pp3_iter11_reg == 1'd0))) begin
        outprepare_V_reg_1958 <= outprepare_V_fu_1566_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln78_reg_1840_pp3_iter9_reg == 1'd0))) begin
        outprepare_tmp_reg_1901 <= grp_fu_472_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln78_reg_1840_pp3_iter5_reg == 1'd0))) begin
        p_Result_56_reg_1859 <= bitcast_ln475_fu_1180_p1[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state5) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter5 == 1'b1) & (icmp_ln78_reg_1840_pp3_iter4_reg == 1'd0)))) begin
        reg_499 <= grp_fu_458_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13))) begin
        reg_507 <= grp_fu_458_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state28))) begin
        reg_513 <= grp_fu_469_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state43) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter7 == 1'b1) & (icmp_ln78_reg_1840_pp3_iter6_reg == 1'd0)))) begin
        reg_520 <= grp_fu_475_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_fu_574_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        select_ln70_reg_1650 <= select_ln70_fu_623_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        select_ln87_reg_1728 <= select_ln87_fu_770_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        shrink_reg_1834 <= grp_fu_464_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (gru2fc_scale_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_114_reg_1582 <= gru2fc_scale_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        tmp_286_reg_1704 <= grp_fu_458_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln78_reg_1840 == 1'd0))) begin
        tmp_relu_load_reg_1854 <= tmp_relu_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln56_reg_1655 == 1'd0))) begin
        x_V_3_load_reg_1674 <= x_V_3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln55_fu_574_p2 == 1'd0))) begin
        y_V_1_addr_1_reg_1645 <= zext_ln58_fu_586_p1;
        zext_ln215_reg_1640[6 : 0] <= zext_ln215_fu_591_p1[6 : 0];
        zext_ln58_reg_1634[6 : 0] <= zext_ln58_fu_586_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        y_V_1_load_reg_1699 <= y_V_1_q0;
    end
end

always @ (*) begin
    if ((icmp_ln38_fu_526_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln56_fu_631_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state19 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state19 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln78_fu_1163_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state77 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state77 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state91) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter12 == 1'b0) & (ap_enable_reg_pp3_iter11 == 1'b0) & (ap_enable_reg_pp3_iter10 == 1'b0) & (ap_enable_reg_pp3_iter9 == 1'b0) & (ap_enable_reg_pp3_iter8 == 1'b0) & (ap_enable_reg_pp3_iter6 == 1'b0) & (ap_enable_reg_pp3_iter4 == 1'b0) & (ap_enable_reg_pp3_iter3 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter7 == 1'b0) & (ap_enable_reg_pp3_iter5 == 1'b0) & (ap_enable_reg_pp3_iter13 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln38_reg_1598 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_0_phi_fu_378_p4 = i_reg_1602;
    end else begin
        ap_phi_mux_i_0_phi_fu_378_p4 = i_0_reg_374;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln56_reg_1655 == 1'd0))) begin
        ap_phi_mux_im_0_phi_fu_436_p4 = im_reg_1659;
    end else begin
        ap_phi_mux_im_0_phi_fu_436_p4 = im_0_reg_432;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        fc2final_scale_V_blk_n = fc2final_scale_V_full_n;
    end else begin
        fc2final_scale_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state76) & (fc2final_scale_V_full_n == 1'b1))) begin
        fc2final_scale_V_write = 1'b1;
    end else begin
        fc2final_scale_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        fc_bias1_V_ce0 = 1'b1;
    end else begin
        fc_bias1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        fc_weights1_V_ce0 = 1'b1;
    end else begin
        fc_weights1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0)))) begin
        grp_fu_458_ce = 1'b1;
    end else begin
        grp_fu_458_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0))) begin
        grp_fu_458_p0 = tmp_relu_load_reg_1854;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        grp_fu_458_p0 = reg_499;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        grp_fu_458_p0 = shrink_reg_1834;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_458_p0 = reg_513;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_458_p0 = reg_507;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state2))) begin
        grp_fu_458_p0 = tmp_114_reg_1582;
    end else begin
        grp_fu_458_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0))) begin
        grp_fu_458_p1 = shrink_reg_1834;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        grp_fu_458_p1 = tmp_114_reg_1582;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_458_p1 = reg_499;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_458_p1 = 32'd1086324736;
    end else if (((1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_fu_458_p1 = fc_weight1_scale;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_458_p1 = tmp_scale_fc6;
    end else begin
        grp_fu_458_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_469_p0 = select_ln70_reg_1650;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_469_p0 = y_V_1_load_reg_1699;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_469_p0 = sext_ln1428_fu_691_p1;
    end else begin
        grp_fu_469_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        grp_fu_472_ce = 1'b1;
    end else begin
        grp_fu_472_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state43) | ((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0)))) begin
        grp_fu_475_ce = 1'b1;
    end else begin
        grp_fu_475_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter6 == 1'b1) & (1'b0 == ap_block_pp3_stage0))) begin
        grp_fu_475_p0 = reg_499;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_475_p0 = select_ln87_reg_1728;
    end else begin
        grp_fu_475_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        grp_fu_478_p0 = reg_507;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_478_p0 = in_var_assign_reg_1709;
    end else begin
        grp_fu_478_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        grp_fu_478_p1 = in_var_assign_reg_1709;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_478_p1 = 32'd0;
    end else begin
        grp_fu_478_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        gru2fc_scale_V_blk_n = gru2fc_scale_V_empty_n;
    end else begin
        gru2fc_scale_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (gru2fc_scale_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        gru2fc_scale_V_read = 1'b1;
    end else begin
        gru2fc_scale_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln38_reg_1598 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in_stream_V_V_blk_n = in_stream_V_V_empty_n;
    end else begin
        in_stream_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln38_reg_1598 == 1'd0))) begin
        in_stream_V_V_read = 1'b1;
    end else begin
        in_stream_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter7 == 1'b1))) begin
        mask_table2_ce0 = 1'b1;
    end else begin
        mask_table2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter7 == 1'b1))) begin
        one_half_table3_ce0 = 1'b1;
    end else begin
        one_half_table3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter13 == 1'b1) & (1'b0 == ap_block_pp3_stage0) & (icmp_ln78_reg_1840_pp3_iter12_reg == 1'd0))) begin
        out_stream_V_V_blk_n = out_stream_V_V_full_n;
    end else begin
        out_stream_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter13 == 1'b1) & (icmp_ln78_reg_1840_pp3_iter12_reg == 1'd0))) begin
        out_stream_V_V_write = 1'b1;
    end else begin
        out_stream_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        tmp_relu_address0 = zext_ln80_fu_1175_p1;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        tmp_relu_address0 = zext_ln58_reg_1634;
    end else begin
        tmp_relu_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)))) begin
        tmp_relu_ce0 = 1'b1;
    end else begin
        tmp_relu_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        tmp_relu_we0 = 1'b1;
    end else begin
        tmp_relu_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        x_V_3_address0 = zext_ln58_1_fu_643_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        x_V_3_address0 = zext_ln41_fu_538_p1;
    end else begin
        x_V_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        x_V_3_ce0 = 1'b1;
    end else begin
        x_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln38_reg_1598 == 1'd0))) begin
        x_V_3_we0 = 1'b1;
    end else begin
        x_V_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | ((1'b0 == ap_block_pp2_stage1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        y_V_1_address0 = y_V_1_addr_1_reg_1645;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        y_V_1_address0 = zext_ln47_fu_555_p1;
    end else begin
        y_V_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state9) | ((1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        y_V_1_ce0 = 1'b1;
    end else begin
        y_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        y_V_1_d0 = grp_fu_1573_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        y_V_1_d0 = 32'd0;
    end else begin
        y_V_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln56_reg_1655 == 1'd0)) | ((1'b1 == ap_CS_fsm_state9) & (icmp_ln45_fu_543_p2 == 1'd0)))) begin
        y_V_1_we0 = 1'b1;
    end else begin
        y_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (gru2fc_scale_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln38_fu_526_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln38_fu_526_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln45_fu_543_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln55_fu_574_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln56_fu_631_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end else if (((1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln56_fu_631_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage1 : begin
            if ((1'b0 == ap_block_pp2_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            if (((1'b1 == ap_CS_fsm_state76) & (fc2final_scale_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln78_fu_1163_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1)) & ~((ap_enable_reg_pp3_iter12 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter13 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln78_fu_1163_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1)) | ((ap_enable_reg_pp3_iter12 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter13 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state91;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln215_fu_660_p2 = (zext_ln215_reg_1640 + zext_ln215_10_fu_656_p1);

assign and_ln1629_1_fu_1128_p2 = (grp_fu_483_p2 & and_ln1629_fu_1123_p2);

assign and_ln1629_fu_1123_p2 = (or_ln1629_reg_1792 & or_ln1629_1_fu_1119_p2);

assign and_ln1630_1_fu_1150_p2 = (grp_fu_487_p2 & and_ln1630_fu_1145_p2);

assign and_ln1630_fu_1145_p2 = (or_ln1630_fu_1141_p2 & or_ln1629_reg_1792);

assign and_ln282_3_fu_886_p2 = (xor_ln278_3_fu_880_p2 & icmp_ln282_3_fu_834_p2);

assign and_ln282_fu_1548_p2 = (xor_ln278_fu_1543_p2 & icmp_ln282_reg_1928);

assign and_ln284_3_fu_912_p2 = (xor_ln282_3_fu_906_p2 & icmp_ln284_3_fu_840_p2);

assign and_ln284_fu_1447_p2 = (xor_ln282_fu_1441_p2 & icmp_ln284_fu_1391_p2);

assign and_ln285_10_fu_1064_p2 = (xor_ln285_3_fu_1059_p2 & and_ln284_3_reg_1771);

assign and_ln285_8_fu_1530_p2 = (xor_ln285_fu_1525_p2 & and_ln284_reg_1943);

assign and_ln285_9_fu_918_p2 = (icmp_ln285_3_fu_846_p2 & and_ln284_3_fu_912_p2);

assign and_ln285_fu_1453_p2 = (icmp_ln285_fu_1397_p2 & and_ln284_fu_1447_p2);

assign and_ln295_3_fu_944_p2 = (xor_ln284_3_fu_938_p2 & icmp_ln295_3_fu_868_p2);

assign and_ln295_fu_1479_p2 = (xor_ln284_fu_1473_p2 & icmp_ln295_fu_1419_p2);

assign and_ln849_fu_1311_p2 = (xor_ln849_fu_1306_p2 & icmp_ln849_3_reg_1871_pp3_iter8_reg);

assign and_ln87_fu_731_p2 = (or_ln87_fu_725_p2 & grp_fu_478_p2);

assign and_ln89_5_fu_746_p2 = (grp_fu_478_p2 & and_ln89_fu_741_p2);

assign and_ln89_6_fu_757_p2 = (xor_ln87_fu_752_p2 & and_ln89_5_fu_746_p2);

assign and_ln89_fu_741_p2 = (or_ln89_fu_737_p2 & or_ln87_reg_1717);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp2_stage1 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd75];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((in_stream_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln38_reg_1598 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((in_stream_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln38_reg_1598 == 1'd0));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_01001 = ((out_stream_V_V_full_n == 1'b0) & (ap_enable_reg_pp3_iter13 == 1'b1) & (icmp_ln78_reg_1840_pp3_iter12_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((out_stream_V_V_full_n == 1'b0) & (ap_enable_reg_pp3_iter13 == 1'b1) & (icmp_ln78_reg_1840_pp3_iter12_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((out_stream_V_V_full_n == 1'b0) & (ap_enable_reg_pp3_iter13 == 1'b1) & (icmp_ln78_reg_1840_pp3_iter12_reg == 1'd0));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (gru2fc_scale_V_empty_n == 1'b0));
end

assign ap_block_state19_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp2_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state77_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state78_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state79_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage0_iter1 = ((in_stream_V_V_empty_n == 1'b0) & (icmp_ln38_reg_1598 == 1'd0));
end

assign ap_block_state80_pp3_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state81_pp3_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state82_pp3_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state83_pp3_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state84_pp3_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state85_pp3_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state86_pp3_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state87_pp3_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state88_pp3_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state89_pp3_stage0_iter12 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state90_pp3_stage0_iter13 = ((out_stream_V_V_full_n == 1'b0) & (icmp_ln78_reg_1840_pp3_iter12_reg == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign bitcast_ln1629_1_fu_968_p1 = tmp_287_reg_1735;

assign bitcast_ln1629_fu_950_p1 = reg_520;

assign bitcast_ln1630_fu_1090_p1 = tmp_288_reg_1786;

assign bitcast_ln475_fu_1180_p1 = reg_499;

assign bitcast_ln849_fu_1302_p1 = select_ln849_fu_1295_p3;

assign bitcast_ln87_fu_696_p1 = in_var_assign_reg_1709;

assign bitcast_ln89_fu_560_p1 = grp_fu_458_p2;

assign exp_V_3_fu_802_p1 = p_Result_s_fu_792_p4;

assign exp_V_fu_1349_p1 = p_Result_s_110_fu_1339_p4;

assign fc2final_scale_V_din = reg_499;

assign fc_bias1_V_address0 = zext_ln58_reg_1634;

assign fc_weights1_V_address0 = zext_ln215_11_fu_665_p1;

assign grp_fu_472_p0 = ((and_ln849_fu_1311_p2[0:0] === 1'b1) ? reg_520_pp3_iter8_reg : bitcast_ln849_reg_1891);

assign i_fu_532_p2 = (ap_phi_mux_i_0_phi_fu_378_p4 + 7'd1);

assign icmp_ln1629_1_fu_991_p2 = ((trunc_ln1629_fu_964_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln1629_2_fu_1003_p2 = ((tmp_306_fu_971_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln1629_3_fu_1009_p2 = ((trunc_ln1629_1_fu_981_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln1629_fu_985_p2 = ((tmp_305_fu_954_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln1630_1_fu_1113_p2 = ((trunc_ln1630_fu_1103_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln1630_fu_1107_p2 = ((tmp_308_fu_1093_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln278_3_fu_818_p2 = ((trunc_ln262_3_fu_780_p1 == 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln278_fu_1369_p2 = ((trunc_ln262_fu_1327_p1 == 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln282_3_fu_834_p2 = ((p_Result_s_fu_792_p4 == 8'd150) ? 1'b1 : 1'b0);

assign icmp_ln282_fu_1385_p2 = ((p_Result_s_110_fu_1339_p4 == 8'd150) ? 1'b1 : 1'b0);

assign icmp_ln284_3_fu_840_p2 = (($signed(sh_amt_9_fu_824_p2) > $signed(9'd0)) ? 1'b1 : 1'b0);

assign icmp_ln284_fu_1391_p2 = (($signed(sh_amt_fu_1375_p2) > $signed(9'd0)) ? 1'b1 : 1'b0);

assign icmp_ln285_3_fu_846_p2 = (($signed(sh_amt_9_fu_824_p2) < $signed(9'd25)) ? 1'b1 : 1'b0);

assign icmp_ln285_fu_1397_p2 = (($signed(sh_amt_fu_1375_p2) < $signed(9'd25)) ? 1'b1 : 1'b0);

assign icmp_ln295_3_fu_868_p2 = (($signed(tmp_112_fu_858_p4) < $signed(4'd1)) ? 1'b1 : 1'b0);

assign icmp_ln295_fu_1419_p2 = (($signed(tmp_109_fu_1409_p4) < $signed(6'd1)) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_526_p2 = ((ap_phi_mux_i_0_phi_fu_378_p4 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_543_p2 = ((om_0_reg_386 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_574_p2 = ((om1_0_reg_421 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_631_p2 = ((ap_phi_mux_im_0_phi_fu_436_p4 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln78_fu_1163_p2 = ((om2_0_reg_443 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln849_3_fu_1212_p2 = ((tmp_V_14_fu_1196_p4 > 11'd1075) ? 1'b1 : 1'b0);

assign icmp_ln849_fu_1206_p2 = ((tmp_V_14_fu_1196_p4 < 11'd1022) ? 1'b1 : 1'b0);

assign icmp_ln87_4_fu_719_p2 = ((trunc_ln87_fu_709_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_713_p2 = ((tmp_301_fu_699_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln895_fu_617_p2 = (($signed(p_091_0_reg_397) > $signed(select_ln68_fu_609_p3)) ? 1'b1 : 1'b0);

assign icmp_ln89_6_fu_568_p2 = ((trunc_ln89_fu_564_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln89_fu_685_p2 = ((tmp_303_fu_676_p4 != 8'd255) ? 1'b1 : 1'b0);

assign im_fu_637_p2 = (ap_phi_mux_im_0_phi_fu_436_p4 + 7'd1);

assign index_V_fu_1218_p4 = {{p_Val2_s_fu_1192_p1[57:52]}};

assign lshr_ln286_3_fu_874_p2 = tmp_82_fu_810_p3 >> sext_ln281_3_fu_830_p1;

assign lshr_ln286_fu_1425_p2 = tmp_80_fu_1361_p3 >> sext_ln281_fu_1381_p1;

assign mask_table2_address0 = zext_ln498_fu_1228_p1;

assign om_5_fu_1169_p2 = (om2_0_reg_443 + 7'd1);

assign om_6_fu_580_p2 = (om1_0_reg_421 + 7'd1);

assign om_fu_549_p2 = (om_0_reg_386 + 7'd1);

assign one_half_table3_address0 = zext_ln498_fu_1228_p1;

assign or_ln1629_1_fu_1119_p2 = (icmp_ln1629_3_reg_1803 | icmp_ln1629_2_reg_1798);

assign or_ln1629_fu_997_p2 = (icmp_ln1629_fu_985_p2 | icmp_ln1629_1_fu_991_p2);

assign or_ln1630_fu_1141_p2 = (icmp_ln1630_reg_1814 | icmp_ln1630_1_reg_1819);

assign or_ln282_3_fu_900_p2 = (icmp_ln282_3_fu_834_p2 | icmp_ln278_3_fu_818_p2);

assign or_ln282_fu_1435_p2 = (icmp_ln282_fu_1385_p2 | icmp_ln278_fu_1369_p2);

assign or_ln284_3_fu_932_p2 = (or_ln282_3_fu_900_p2 | icmp_ln284_3_fu_840_p2);

assign or_ln284_fu_1467_p2 = (or_ln282_fu_1435_p2 | icmp_ln284_fu_1391_p2);

assign or_ln87_fu_725_p2 = (icmp_ln87_fu_713_p2 | icmp_ln87_4_fu_719_p2);

assign or_ln89_fu_737_p2 = (icmp_ln89_reg_1689 | icmp_ln89_6_reg_1620);

assign out_stream_V_V_din = outprepare_V_reg_1958;

assign outprepare_V_fu_1566_p3 = ((p_Result_60_reg_1911[0:0] === 1'b1) ? sub_ln461_fu_1560_p2 : select_ln282_fu_1553_p3);

assign p_Result_57_fu_1238_p3 = {{p_Result_56_reg_1859_pp3_iter7_reg}, {63'd0}};

assign p_Result_58_fu_1249_p3 = {{p_Result_56_reg_1859_pp3_iter7_reg}, {trunc_ln368_reg_1886}};

assign p_Result_59_fu_1287_p3 = {{tmp_92_fu_1277_p4}, {xs_sig_V_fu_1271_p2}};

assign p_Result_s_110_fu_1339_p4 = {{reg_V_4_fu_1324_p1[30:23]}};

assign p_Result_s_fu_792_p4 = {{reg_V_fu_777_p1[30:23]}};

assign p_Val2_33_fu_1255_p2 = (p_Result_58_fu_1249_p3 + zext_ln209_fu_1245_p1);

assign p_Val2_s_fu_1192_p1 = grp_fu_475_p1;

assign reg_V_4_fu_1324_p1 = outprepare_tmp_reg_1901;

assign reg_V_fu_777_p1 = select_ln87_reg_1728;

assign select_ln278_3_fu_1052_p3 = ((icmp_ln278_3_reg_1756[0:0] === 1'b1) ? 32'd0 : select_ln295_3_fu_1045_p3);

assign select_ln278_fu_1518_p3 = ((icmp_ln278_reg_1922[0:0] === 1'b1) ? 8'd0 : select_ln295_fu_1512_p3);

assign select_ln282_3_fu_892_p3 = ((and_ln282_3_fu_886_p2[0:0] === 1'b1) ? tmp_82_fu_810_p3 : 24'd0);

assign select_ln282_fu_1553_p3 = ((and_ln282_fu_1548_p2[0:0] === 1'b1) ? trunc_ln283_reg_1916 : select_ln285_8_fu_1535_p3);

assign select_ln285_10_fu_1069_p3 = ((and_ln285_10_fu_1064_p2[0:0] === 1'b1) ? select_ln288_3_fu_1028_p3 : select_ln278_3_fu_1052_p3);

assign select_ln285_8_fu_1535_p3 = ((and_ln285_8_fu_1530_p2[0:0] === 1'b1) ? select_ln288_fu_1495_p3 : select_ln278_fu_1518_p3);

assign select_ln285_9_fu_924_p3 = ((and_ln285_9_fu_918_p2[0:0] === 1'b1) ? lshr_ln286_3_fu_874_p2 : select_ln282_3_fu_892_p3);

assign select_ln285_fu_1459_p3 = ((and_ln285_fu_1453_p2[0:0] === 1'b1) ? trunc_ln286_fu_1431_p1 : 8'd0);

assign select_ln288_3_fu_1028_p3 = ((tmp_113_fu_1021_p3[0:0] === 1'b1) ? 32'd4294967295 : 32'd0);

assign select_ln288_fu_1495_p3 = ((tmp_110_fu_1488_p3[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign select_ln295_3_fu_1045_p3 = ((and_ln295_3_reg_1781[0:0] === 1'b1) ? shl_ln297_3_fu_1036_p2 : zext_ln285_fu_1042_p1);

assign select_ln295_fu_1512_p3 = ((and_ln295_reg_1953[0:0] === 1'b1) ? shl_ln297_fu_1507_p2 : select_ln285_reg_1948);

assign select_ln68_fu_609_p3 = ((tmp_fu_595_p3[0:0] === 1'b1) ? tmp_min_V_fu_603_p2 : p_0130_0_reg_409);

assign select_ln70_fu_623_p3 = ((icmp_ln895_fu_617_p2[0:0] === 1'b1) ? p_091_0_reg_397 : select_ln68_fu_609_p3);

assign select_ln849_fu_1295_p3 = ((icmp_ln849_reg_1865[0:0] === 1'b1) ? p_Result_57_fu_1238_p3 : p_Result_59_fu_1287_p3);

assign select_ln87_fu_770_p3 = ((and_ln87_reg_1722[0:0] === 1'b1) ? 32'd0 : select_ln89_fu_763_p3);

assign select_ln89_fu_763_p3 = ((and_ln89_6_fu_757_p2[0:0] === 1'b1) ? reg_507 : in_var_assign_reg_1709);

assign sext_ln1428_fu_691_p1 = $signed(fc_bias1_V_q0);

assign sext_ln281_3_fu_830_p1 = sh_amt_9_fu_824_p2;

assign sext_ln281_fu_1381_p1 = sh_amt_fu_1375_p2;

assign sext_ln294_3_fu_1018_p1 = sh_amt_10_reg_1766;

assign sext_ln294_fu_1485_p1 = sh_amt_8_reg_1938;

assign sext_ln294cast_fu_1503_p1 = sext_ln294_fu_1485_p1[7:0];

assign sh_amt_10_fu_852_p2 = ($signed(9'd0) - $signed(sh_amt_9_fu_824_p2));

assign sh_amt_8_fu_1403_p2 = ($signed(9'd0) - $signed(sh_amt_fu_1375_p2));

assign sh_amt_9_fu_824_p2 = (9'd150 - exp_V_3_fu_802_p1);

assign sh_amt_fu_1375_p2 = (9'd150 - exp_V_fu_1349_p1);

assign shl_ln297_3_fu_1036_p2 = zext_ln283_fu_1015_p1 << sext_ln294_3_fu_1018_p1;

assign shl_ln297_fu_1507_p2 = trunc_ln283_reg_1916 << sext_ln294cast_fu_1503_p1;

assign sub_ln461_3_fu_1077_p2 = (32'd0 - select_ln285_10_fu_1069_p3);

assign sub_ln461_fu_1560_p2 = (8'd0 - select_ln282_fu_1553_p3);

assign tmp_109_fu_1409_p4 = {{sh_amt_8_fu_1403_p2[8:3]}};

assign tmp_110_fu_1488_p3 = reg_V_4_reg_1906[32'd31];

assign tmp_112_fu_858_p4 = {{sh_amt_10_fu_852_p2[8:5]}};

assign tmp_113_fu_1021_p3 = reg_V_reg_1741[32'd31];

assign tmp_301_fu_699_p4 = {{bitcast_ln87_fu_696_p1[30:23]}};

assign tmp_303_fu_676_p4 = {{bitcast_ln89_reg_1615[30:23]}};

assign tmp_305_fu_954_p4 = {{bitcast_ln1629_fu_950_p1[62:52]}};

assign tmp_306_fu_971_p4 = {{bitcast_ln1629_1_fu_968_p1[62:52]}};

assign tmp_308_fu_1093_p4 = {{bitcast_ln1630_fu_1090_p1[62:52]}};

assign tmp_80_fu_1361_p3 = {{1'd1}, {trunc_ln270_fu_1353_p1}};

assign tmp_82_fu_810_p3 = {{1'd1}, {trunc_ln270_3_fu_806_p1}};

assign tmp_92_fu_1277_p4 = {{p_Val2_33_fu_1255_p2[63:52]}};

assign tmp_93_fu_648_p3 = {{ap_phi_mux_im_0_phi_fu_436_p4}, {6'd0}};

assign tmp_V_14_fu_1196_p4 = {{p_Val2_s_fu_1192_p1[62:52]}};

assign tmp_V_15_fu_1261_p1 = p_Val2_33_fu_1255_p2[51:0];

assign tmp_fu_595_p3 = p_0130_0_reg_409[32'd31];

assign tmp_max_V_1_fu_1134_p3 = ((and_ln1629_1_fu_1128_p2[0:0] === 1'b1) ? tmp_max_V_reg_1808 : p_091_0_reg_397);

assign tmp_max_V_fu_1083_p3 = ((p_Result_55_reg_1746[0:0] === 1'b1) ? sub_ln461_3_fu_1077_p2 : select_ln285_10_fu_1069_p3);

assign tmp_min_V_2_fu_1156_p3 = ((and_ln1630_1_fu_1150_p2[0:0] === 1'b1) ? tmp_max_V_reg_1808 : p_0130_0_reg_409);

assign tmp_min_V_fu_603_p2 = (32'd0 - p_0130_0_reg_409);

assign trunc_ln1629_1_fu_981_p1 = bitcast_ln1629_1_fu_968_p1[51:0];

assign trunc_ln1629_fu_964_p1 = bitcast_ln1629_fu_950_p1[51:0];

assign trunc_ln1630_fu_1103_p1 = bitcast_ln1630_fu_1090_p1[51:0];

assign trunc_ln262_3_fu_780_p1 = reg_V_fu_777_p1[30:0];

assign trunc_ln262_fu_1327_p1 = reg_V_4_fu_1324_p1[30:0];

assign trunc_ln270_3_fu_806_p1 = reg_V_fu_777_p1[22:0];

assign trunc_ln270_fu_1353_p1 = reg_V_4_fu_1324_p1[22:0];

assign trunc_ln283_fu_1357_p1 = reg_V_4_fu_1324_p1[7:0];

assign trunc_ln286_fu_1431_p1 = lshr_ln286_fu_1425_p2[7:0];

assign trunc_ln368_fu_1234_p1 = p_Val2_s_fu_1192_p1[62:0];

assign trunc_ln87_fu_709_p1 = bitcast_ln87_fu_696_p1[22:0];

assign trunc_ln89_fu_564_p1 = bitcast_ln89_fu_560_p1[22:0];

assign xor_ln1309_fu_1265_p2 = (mask_table2_q0 ^ 52'd4503599627370495);

assign xor_ln278_3_fu_880_p2 = (icmp_ln278_3_fu_818_p2 ^ 1'd1);

assign xor_ln278_fu_1543_p2 = (icmp_ln278_reg_1922 ^ 1'd1);

assign xor_ln282_3_fu_906_p2 = (or_ln282_3_fu_900_p2 ^ 1'd1);

assign xor_ln282_fu_1441_p2 = (or_ln282_fu_1435_p2 ^ 1'd1);

assign xor_ln284_3_fu_938_p2 = (or_ln284_3_fu_932_p2 ^ 1'd1);

assign xor_ln284_fu_1473_p2 = (or_ln284_fu_1467_p2 ^ 1'd1);

assign xor_ln285_3_fu_1059_p2 = (icmp_ln285_3_reg_1761 ^ 1'd1);

assign xor_ln285_fu_1525_p2 = (icmp_ln285_reg_1933 ^ 1'd1);

assign xor_ln849_fu_1306_p2 = (icmp_ln849_reg_1865_pp3_iter8_reg ^ 1'd1);

assign xor_ln87_fu_752_p2 = (1'd1 ^ and_ln87_reg_1722);

assign xs_sig_V_fu_1271_p2 = (xor_ln1309_fu_1265_p2 & tmp_V_15_fu_1261_p1);

assign zext_ln209_fu_1245_p1 = one_half_table3_q0;

assign zext_ln215_10_fu_656_p1 = tmp_93_fu_648_p3;

assign zext_ln215_11_fu_665_p1 = add_ln215_fu_660_p2;

assign zext_ln215_fu_591_p1 = om1_0_reg_421;

assign zext_ln283_fu_1015_p1 = tmp_82_reg_1751;

assign zext_ln285_fu_1042_p1 = select_ln285_9_reg_1776;

assign zext_ln41_fu_538_p1 = i_0_reg_374;

assign zext_ln47_fu_555_p1 = om_0_reg_386;

assign zext_ln498_fu_1228_p1 = index_V_fu_1218_p4;

assign zext_ln58_1_fu_643_p1 = ap_phi_mux_im_0_phi_fu_436_p4;

assign zext_ln58_fu_586_p1 = om1_0_reg_421;

assign zext_ln80_fu_1175_p1 = om2_0_reg_443;

always @ (posedge ap_clk) begin
    zext_ln58_reg_1634[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln215_reg_1640[13:7] <= 7'b0000000;
    tmp_82_reg_1751[23] <= 1'b1;
end

endmodule //fc_relu6
