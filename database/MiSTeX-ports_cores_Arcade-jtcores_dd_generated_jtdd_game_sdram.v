// This program was cloned from: https://github.com/MiSTeX-devel/MiSTeX-ports
// License: BSD 3-Clause "New" or "Revised" License

// jtdd_game_sdram.v is automatically generated by JTFRAME
// Do not modify it
// Do not add it to git

`ifndef JTFRAME_COLORW
`define JTFRAME_COLORW 4
`endif

`ifndef JTFRAME_BUTTONS
`define JTFRAME_BUTTONS 2
`endif

module jtdd_game_sdram(
    `include "jtframe_common_ports.inc"
    `include "jtframe_mem_ports.inc"
);

/* verilator lint_off WIDTH */
localparam [25:0] BA1_START  =`ifdef JTFRAME_BA1_START  `JTFRAME_BA1_START  `else 26'd0 `endif;
localparam [25:0] BA2_START  =`ifdef JTFRAME_BA2_START  `JTFRAME_BA2_START  `else 26'd0 `endif;
localparam [25:0] BA3_START  =`ifdef JTFRAME_BA3_START  `JTFRAME_BA3_START  `else 26'd0 `endif;
localparam [25:0] PROM_START =`ifdef JTFRAME_PROM_START `JTFRAME_PROM_START `else 26'd0 `endif;
localparam [25:0] HEADER_LEN =`ifdef JTFRAME_HEADER     `JTFRAME_HEADER     `else 26'd0 `endif;
/* verilator lint_on WIDTH */


parameter PCM0_OFFSET = (`ADPCM0_START-`JTFRAME_BA1_START)>>1;
parameter PCM1_OFFSET = (`ADPCM1_START-`JTFRAME_BA1_START)>>1;
parameter SCR_OFFSET = (`SCR_START-`JTFRAME_BA2_START) >>1;
parameter MCU_OFFSET = (`MCU_START-`JTFRAME_BA3_START)>>1;

`ifndef JTFRAME_IOCTL_RD
wire ioctl_ram = 0;
`endif
// Audio channels 
wire signed [11:0] pcm_a;
wire pcm_a_rcen;
wire signed [11:0] pcm_b;
wire pcm_b_rcen;
wire signed [15:0] fm_l, fm_r;
wire mute;
// Additional ports
wire [7:0] main_dout;
wire [7:0] obj_dout;
wire [15:0] cram_dout;
wire [1:0] cram_we;
wire [7:0] oram_dout;
wire  oram_we;
wire [10:1] cram_addr;
wire [15:0] char16_dout;
wire [8:0] oram_addr;

// BRAM buses




// SDRAM buses

wire [17:0] main_addr;
wire [ 7:0] main_data;
wire        main_cs, main_ok;
wire [14:0] snd_addr;
wire [ 7:0] snd_data;
wire        snd_cs, snd_ok;
wire [15:0] adpcm0_addr;
wire [ 7:0] adpcm0_data;
wire        adpcm0_cs, adpcm0_ok;
wire [15:0] adpcm1_addr;
wire [ 7:0] adpcm1_data;
wire        adpcm1_cs, adpcm1_ok;
wire [14:2] char_addr;
wire [31:0] char_data;
wire        char_cs, char_ok;
wire [17:1] scr_addr;
wire [15:0] scr_data;
wire        scr_cs, scr_ok;
wire [19:2] obj_addr;
wire [31:0] obj_data;
wire        obj_cs, obj_ok;
wire [13:0] mcu_addr;
wire [ 7:0] mcu_data;
wire        mcu_cs, mcu_ok;
wire        prom_we, header;
wire [21:0] raw_addr, post_addr;
wire [25:0] pre_addr, dwnld_addr, ioctl_addr_noheader;
wire [ 7:0] post_data;
wire [15:0] raw_data;
wire        pass_io;
// Clock enable signals
wire mcu_cen12; 
wire mcu_cen6; 
wire cen6; 
wire cen3; 
wire cen1p5; 
wire cen0p75; 
wire cen_fm; 
wire cen_fm2; 
wire gfx8_en, gfx16_en, ioctl_dwn;

assign pass_io = header | ioctl_ram;
assign ioctl_addr_noheader = `ifdef JTFRAME_HEADER header ? ioctl_addr : ioctl_addr - HEADER_LEN `else ioctl_addr `endif ;

wire rst_h, rst24_h, rst48_h, hold_rst;
/* verilator tracing_off */
jtframe_rsthold u_hold(
    .rst    ( rst       ),
    .clk    ( clk       ),
    .hold   ( hold_rst  ),
    .rst_h  ( rst_h     )
`ifdef JTFRAME_CLK24 ,
    .rst24  ( rst24     ),
    .clk24  ( clk24     ),
    .rst24_h( rst24_h   )
`endif
`ifdef JTFRAME_CLK48 ,
    .rst48  ( rst48     ),
    .clk48  ( clk48     ),
    .rst48_h( rst48_h   )
`endif
);
/* verilator tracing_on */
jtdd_game u_game(
    .rst        ( rst_h     ),
    .clk        ( clk       ),
`ifdef JTFRAME_CLK24
    .rst24      ( rst24_h   ),
    .clk24      ( clk24     ),
`endif
`ifdef JTFRAME_CLK48
    .rst48      ( rst48_h   ),
    .clk48      ( clk48     ),
`endif
    // Audio channels
    .pcm_a     ( pcm_a      ),
    .pcm_a_rcen( pcm_a_rcen ),
.pcm_b     ( pcm_b      ),
    .pcm_b_rcen( pcm_b_rcen ),
.fm_l   ( fm_l    ),
    .fm_r   ( fm_r    ),
    
    .snd_en         ( snd_en        ),
    .mcu_cen12    ( mcu_cen12    ), 
    .mcu_cen6    ( mcu_cen6    ), 

    .cen6    ( cen6    ), 
    .cen3    ( cen3    ), 
    .cen1p5    ( cen1p5    ), 
    .cen0p75    ( cen0p75    ), 
    .cen_fm    ( cen_fm    ), 
    .cen_fm2    ( cen_fm2    ), 

    .pxl2_cen       ( pxl2_cen      ),
    .pxl_cen        ( pxl_cen       ),
    .red            ( red           ),
    .green          ( green         ),
    .blue           ( blue          ),
    .LHBL           ( LHBL          ),
    .LVBL           ( LVBL          ),
    .HS             ( HS            ),
    .VS             ( VS            ),
    // cabinet I/O
    .cab_1p   ( cab_1p  ),
    .coin     ( coin    ),
    .joystick1    ( joystick1        ), .joystick2    ( joystick2        ), `ifdef JTFRAME_4PLAYERS
    .joystick3    ( joystick3        ), .joystick4    ( joystick4        ), `endif `ifdef JTFRAME_MOUSE
    .mouse_1p     ( mouse_1p         ), .mouse_2p     ( mouse_2p         ), `endif `ifdef JTFRAME_SPINNER
    .spinner_1p   ( spinner_1p       ), .spinner_2p   ( spinner_2p       ), `endif `ifdef JTFRAME_ANALOG
    .joyana_l1    ( joyana_l1        ), .joyana_l2    ( joyana_l2        ), `ifdef JTFRAME_ANALOG_DUAL
    .joyana_r1    ( joyana_r1        ), .joyana_r2    ( joyana_r2        ), `endif `ifdef JTFRAME_4PLAYERS
    .joyana_l3    ( joyana_l3        ), .joyana_l4    ( joyana_l4        ), `ifdef JTFRAME_ANALOG_DUAL
    .joyana_r3    ( joyana_r3        ), .joyana_r4    ( joyana_r4        ), `endif `endif `endif `ifdef JTFRAME_DIAL
    .dial_x       ( dial_x           ), .dial_y       ( dial_y           ), `endif
    // DIP switches
    .status         ( status        ),
    .dipsw          ( dipsw         ),
    .service        ( service       ),
    .tilt           ( tilt          ),
    .dip_pause      ( dip_pause     ),
    .dip_flip       ( dip_flip      ),
    .dip_test       ( dip_test      ),
    .dip_fxlevel    ( dip_fxlevel   ),
    .enable_psg     ( enable_psg    ),
    .enable_fm      ( enable_fm     ),
    // Ports declared in mem.yaml
    .main_dout   ( main_dout ),
    .obj_dout   ( obj_dout ),
    .cram_dout   ( cram_dout ),
    .cram_we   ( cram_we ),
    .oram_dout   ( oram_dout ),
    .oram_we   ( oram_we ),
    .cram_addr   ( cram_addr ),
    .char16_dout   ( char16_dout ),
    .oram_addr   ( oram_addr ),
    // Memory interface - SDRAM
    .main_addr ( main_addr ),
    .main_cs   ( main_cs   ),
    .main_ok   ( main_ok   ),
    .main_data ( main_data ),
    
    .snd_addr ( snd_addr ),
    .snd_cs   ( snd_cs   ),
    .snd_ok   ( snd_ok   ),
    .snd_data ( snd_data ),
    
    .adpcm0_addr ( adpcm0_addr ),
    .adpcm0_cs   ( adpcm0_cs   ),
    .adpcm0_ok   ( adpcm0_ok   ),
    .adpcm0_data ( adpcm0_data ),
    
    .adpcm1_addr ( adpcm1_addr ),
    .adpcm1_cs   ( adpcm1_cs   ),
    .adpcm1_ok   ( adpcm1_ok   ),
    .adpcm1_data ( adpcm1_data ),
    
    .char_addr ( char_addr ),
    .char_cs   ( char_cs   ),
    .char_ok   ( char_ok   ),
    .char_data ( char_data ),
    
    .scr_addr ( scr_addr ),
    .scr_cs   ( scr_cs   ),
    .scr_ok   ( scr_ok   ),
    .scr_data ( scr_data ),
    
    .obj_addr ( obj_addr ),
    .obj_cs   ( obj_cs   ),
    .obj_ok   ( obj_ok   ),
    .obj_data ( obj_data ),
    
    .mcu_addr ( mcu_addr ),
    .mcu_cs   ( mcu_cs   ),
    .mcu_ok   ( mcu_ok   ),
    .mcu_data ( mcu_data ),
    
    // Memory interface - BRAM

    
    
    
    
    // PROM writting
    .ioctl_addr   ( pass_io ? ioctl_addr       : ioctl_addr_noheader  ),
    .prog_addr    ( pass_io ? ioctl_addr[21:0] : raw_addr      ),
    .prog_data    ( pass_io ? ioctl_dout       : raw_data[7:0] ),
    .prog_we      ( pass_io ? ioctl_wr         : prog_we       ),
    .prog_ba      ( prog_ba        ), // prog_ba supplied in case it helps re-mapping addresses
`ifdef JTFRAME_PROM_START
    .prom_we      ( prom_we        ),
`endif
`ifdef JTFRAME_HEADER
    .header       ( header         ),
`endif
`ifdef JTFRAME_IOCTL_RD
    .ioctl_ram    ( ioctl_ram      ),
    .ioctl_din    ( ioctl_din      ),
    .ioctl_dout   ( ioctl_dout     ),
    .ioctl_wr     ( ioctl_wr       ), `endif
    .ioctl_cart   ( ioctl_cart     ),
    // Debug
    .debug_bus    ( debug_bus      ),
    .debug_view   ( debug_view     ),
`ifdef JTFRAME_STATUS
    .st_addr      ( st_addr        ),
    .st_dout      ( st_dout        ),
`endif
`ifdef JTFRAME_LF_BUFFER
    .game_vrender( game_vrender  ),
    .game_hdump  ( game_hdump    ),
    .ln_addr     ( ln_addr       ),
    .ln_data     ( ln_data       ),
    .ln_done     ( ln_done       ),
    .ln_hs       ( ln_hs         ),
    .ln_pxl      ( ln_pxl        ),
    .ln_v        ( ln_v          ),
    .ln_we       ( ln_we         ),
`endif
    .gfx_en      ( gfx_en        )
);
/* verilator tracing_off */
assign dwnld_busy = ioctl_rom | prom_we; // prom_we is really just for sims
assign dwnld_addr = ioctl_addr;
assign prog_addr = raw_addr;
assign prog_data = raw_data;
assign gfx8_en   = (ioctl_addr>=((`JTFRAME_BA2_START)) && ioctl_addr<(`JTFRAME_BA2_START+(SCR_OFFSET<<1))) /* char */;
assign gfx16_en  = (ioctl_addr>=((`JTFRAME_BA2_START+(SCR_OFFSET<<1))) && ioctl_addr<(`JTFRAME_BA3_START)) /* scr */||
    (ioctl_addr>=((`JTFRAME_BA3_START)) && ioctl_addr<(`JTFRAME_BA3_START+(MCU_OFFSET<<1))) /* obj */;
assign ioctl_dwn = ioctl_rom | ioctl_cart;
`ifdef VERILATOR_KEEP_SDRAM /* verilator tracing_on */ `else /* verilator tracing_off */ `endif
jtframe_dwnld #(
`ifdef JTFRAME_HEADER
    .HEADER    ( `JTFRAME_HEADER   ),
`endif
`ifdef JTFRAME_BA1_START
    .BA1_START ( BA1_START ),
`endif
`ifdef JTFRAME_BA2_START
    .BA2_START ( BA2_START ),
`endif
`ifdef JTFRAME_BA3_START
    .BA3_START ( BA3_START ),
`endif
`ifdef JTFRAME_PROM_START
    .PROM_START( PROM_START ),
`endif
    .SWAB      ( 1),
    .GFX8B0    ( 0),
    .GFX16B0   ( 1)
) u_dwnld(
    .clk          ( clk            ),
    .ioctl_rom    ( ioctl_dwn      ),
    .ioctl_addr   ( dwnld_addr     ),
    .ioctl_dout   ( ioctl_dout     ),
    .ioctl_wr     ( ioctl_wr       ),
    .gfx8_en      ( gfx8_en        ),
    .gfx16_en     ( gfx16_en       ),
    .prog_addr    ( raw_addr       ),
    .prog_data    ( raw_data       ),
    .prog_mask    ( prog_mask      ), // active low
    .prog_we      ( prog_we        ),
    .prog_rd      ( prog_rd        ),
    .prog_ba      ( prog_ba        ),
    .prom_we      ( prom_we        ),
    .header       ( header         ),
    .sdram_ack    ( prog_ack       )
);
`ifdef VERILATOR_KEEP_SDRAM /* verilator tracing_on */ `else /* verilator tracing_off */ `endif



jtframe_rom_1slot #(
    // main
    .SLOT0_AW(18),
    .SLOT0_DW( 8)
`ifdef JTFRAME_BA2_LEN
    ,.SLOT0_DOUBLE(1)
`endif
) u_bank0(
    .rst         ( rst        ),
    .clk         ( clk        ),
    
    .slot0_addr  ( main_addr  ),
    .slot0_dout  ( main_data  ),
    .slot0_cs    ( main_cs    ),
    .slot0_ok    ( main_ok    ),
    
    // SDRAM controller interface
    .sdram_ack   ( ba_ack[0]  ),
    .sdram_rd    ( ba_rd[0]   ),
    .sdram_addr  ( ba0_addr   ),
    .data_dst    ( ba_dst[0]  ),
    .data_rdy    ( ba_rdy[0]  ),
    .data_read   ( data_read  )
);
assign ba_wr[0] = 0;
assign ba0_din  = 0;
assign ba0_dsn  = 3;
jtframe_rom_3slots #(
    // snd
    .SLOT0_AW(15),
    .SLOT0_DW( 8), 
    // adpcm0
    .SLOT1_OFFSET(PCM0_OFFSET[21:0]),
    .SLOT1_AW(16),
    .SLOT1_DW( 8), 
    // adpcm1
    .SLOT2_OFFSET(PCM1_OFFSET[21:0]),
    .SLOT2_AW(16),
    .SLOT2_DW( 8)
`ifdef JTFRAME_BA2_LEN
    ,.SLOT0_DOUBLE(1)
    ,.SLOT1_DOUBLE(1)
    ,.SLOT2_DOUBLE(1)
`endif
) u_bank1(
    .rst         ( rst        ),
    .clk         ( clk        ),
    
    .slot0_addr  ( snd_addr  ),
    .slot0_dout  ( snd_data  ),
    .slot0_cs    ( snd_cs    ),
    .slot0_ok    ( snd_ok    ),
    
    .slot1_addr  ( adpcm0_addr  ),
    .slot1_dout  ( adpcm0_data  ),
    .slot1_cs    ( adpcm0_cs    ),
    .slot1_ok    ( adpcm0_ok    ),
    
    .slot2_addr  ( adpcm1_addr  ),
    .slot2_dout  ( adpcm1_data  ),
    .slot2_cs    ( adpcm1_cs    ),
    .slot2_ok    ( adpcm1_ok    ),
    
    // SDRAM controller interface
    .sdram_ack   ( ba_ack[1]  ),
    .sdram_rd    ( ba_rd[1]   ),
    .sdram_addr  ( ba1_addr   ),
    .data_dst    ( ba_dst[1]  ),
    .data_rdy    ( ba_rdy[1]  ),
    .data_read   ( data_read  )
);
assign ba_wr[1] = 0;
assign ba1_din  = 0;
assign ba1_dsn  = 3;
jtframe_rom_2slots #(
    // char
    .SLOT0_AW(14),
    .SLOT0_DW(32), 
    // scr
    .SLOT1_OFFSET(SCR_OFFSET[21:0]),
    .SLOT1_AW(17),
    .SLOT1_DW(16)
`ifdef JTFRAME_BA2_LEN
    ,.SLOT0_DOUBLE(1)
    ,.SLOT1_DOUBLE(1)
`endif
) u_bank2(
    .rst         ( rst        ),
    .clk         ( clk        ),
    
    .slot0_addr  ( { char_addr, 1'b0 } ),
    .slot0_dout  ( char_data  ),
    .slot0_cs    ( char_cs    ),
    .slot0_ok    ( char_ok    ),
    
    .slot1_addr  ( scr_addr  ),
    .slot1_dout  ( scr_data  ),
    .slot1_cs    ( scr_cs    ),
    .slot1_ok    ( scr_ok    ),
    
    // SDRAM controller interface
    .sdram_ack   ( ba_ack[2]  ),
    .sdram_rd    ( ba_rd[2]   ),
    .sdram_addr  ( ba2_addr   ),
    .data_dst    ( ba_dst[2]  ),
    .data_rdy    ( ba_rdy[2]  ),
    .data_read   ( data_read  )
);
assign ba_wr[2] = 0;
assign ba2_din  = 0;
assign ba2_dsn  = 3;
jtframe_rom_2slots #(
    // obj
    .SLOT0_AW(19),
    .SLOT0_DW(32), 
    // mcu
    .SLOT1_OFFSET(MCU_OFFSET[21:0]),
    .SLOT1_AW(14),
    .SLOT1_DW( 8)
`ifdef JTFRAME_BA2_LEN
    ,.SLOT0_DOUBLE(1)
    ,.SLOT1_DOUBLE(1)
`endif
) u_bank3(
    .rst         ( rst        ),
    .clk         ( clk        ),
    
    .slot0_addr  ( { obj_addr, 1'b0 } ),
    .slot0_dout  ( obj_data  ),
    .slot0_cs    ( obj_cs    ),
    .slot0_ok    ( obj_ok    ),
    
    .slot1_addr  ( mcu_addr  ),
    .slot1_dout  ( mcu_data  ),
    .slot1_cs    ( mcu_cs    ),
    .slot1_ok    ( mcu_ok    ),
    
    // SDRAM controller interface
    .sdram_ack   ( ba_ack[3]  ),
    .sdram_rd    ( ba_rd[3]   ),
    .sdram_addr  ( ba3_addr   ),
    .data_dst    ( ba_dst[3]  ),
    .data_rdy    ( ba_rdy[3]  ),
    .data_read   ( data_read  )
);
assign ba_wr[3] = 0;
assign ba3_din  = 0;
assign ba3_dsn  = 3;
assign hold_rst=0;

// Dual port BRAM for cram and main
jtframe_dual_ram16 #(
    .AW(11-1)
) u_bram_cram(
    // Port 0 - cram
    .clk0   ( clk ),
    .addr0  ( cram_addr ),
    .data0  ( 16'h0 ),
    .we0    ( 2'd0 ),
    .q0     ( cram_dout ),
    // Port 1 - main
    .clk1   ( clk ),
    .data1  ( {2{main_dout}} ),
    .addr1  ( main_addr[10:1] ),
    .we1    ( cram_we  ), 
    .q1     ( char16_dout )
);
// Dual port BRAM for oram and main
jtframe_dual_ram #(
    .AW(9)
) u_bram_oram(
    // Port 0 - oram
    .clk0   ( clk ),
    .addr0  ( oram_addr ),
    .data0  ( 8'h0 ),
    .we0    ( 1'd0 ),
    .q0     ( oram_dout ),
    // Port 1 - main
    .clk1   ( clk ),
    .data1  ( main_dout ),
    .addr1  ( main_addr[8:0] ),
    .we1    ( oram_we  ), 
    .q1     ( obj_dout )
);


// Clock enable generation
// 12000000 = 48000000*1/4 Hz from clk
`ifdef VERILATOR_KEEP_CEN /* verilator tracing_on */ `else /* verilator tracing_off */ `endif
jtframe_gated_cen #(.W(2),.NUM(1),.DEN(4),.MFREQ(48000)) u_cen0_clk(
    .rst    ( rst          ),
    .clk    ( clk ),
    .busy   ( (mcu_cs & ~mcu_ok)    ),
    .cen    ( { mcu_cen6, mcu_cen12 } ),
    .fave   (              ),
    .fworst (              )
); /* verilator tracing_off */

// 6000000 = 24000000*1/4 Hz from clk24
`ifdef VERILATOR_KEEP_CEN /* verilator tracing_on */ `else /* verilator tracing_off */ `endif
jtframe_gated_cen #(.W(4),.NUM(1),.DEN(4),.MFREQ(24000)) u_cen0_clk24(
    .rst    ( rst          ),
    .clk    ( clk24 ),
    .busy   ( (main_cs & ~main_ok) | (snd_cs & ~snd_ok)    ),
    .cen    ( { cen0p75, cen1p5, cen3, cen6 } ),
    .fave   (              ),
    .fworst (              )
); /* verilator tracing_off */

// 3579544 = 24000000*9721/65177 Hz from clk24
`ifdef VERILATOR_KEEP_CEN /* verilator tracing_on */ `else /* verilator tracing_off */ `endif
jtframe_gated_cen #(.W(2),.NUM(9721),.DEN(65177),.MFREQ(24000)) u_cen1_clk24(
    .rst    ( rst          ),
    .clk    ( clk24 ),
    .busy   ( 1'b0    ),
    .cen    ( { cen_fm2, cen_fm } ),
    .fave   (              ),
    .fworst (              )
); /* verilator tracing_off */

`ifndef NOSOUND/* verilator tracing_on */
assign mute=0;
jtframe_rcmix #(
    .W0(12),
    .W1(12),
    .W2(16),
    .STEREO0( 0),
    .STEREO1( 0),
    .STEREO2( 1),
    .STEREO3( 0),
    .STEREO4( 0),
    .STEREO5( 0),
    .DCRM0  ( 0),
    .DCRM1  ( 0),
    .DCRM2  ( 0),
    .DCRM3  ( 0),
    .DCRM4  ( 0),
    .DCRM5  ( 0),
    .STEREO ( 0),
    // Fractional cen for 192kHz
    .FRACW( 9), .FRACN(1), .FRACM(250)
) u_rcmix(
    .rst    ( rst       ),
    .clk    ( clk       ),
    .mute   ( mute      ),
    .sample ( sample    ),
    .ch_en  ( snd_en    ),
    .gpole  ( 8'h86 ),  // 19894 Hz 
    .ch0    ( pcm_a ),
    .ch1    ( pcm_b ),
    .ch2    ( { fm_l,fm_r } ),
    .ch3    ( 16'd0 ),
    .ch4    ( 16'd0 ),
    .ch5    ( 16'd0 ),
    .p0     ( pcm_a_rcen?16'h0000 : 16'h0), // 0 Hz, 0 Hz 
    .p1     ( pcm_b_rcen?16'h0000 : 16'h0), // 0 Hz, 0 Hz 
    .p2     ( 16'h00C9), // 7420 Hz, 0 Hz 
    .p3     ( 16'h0), 
    .p4     ( 16'h0), 
    .p5     ( 16'h0), 
    .g0     ( 8'h80 ), // pcm_a
    .g1     ( 8'h80 ), // pcm_b
    .g2     ( 8'h1B ), // fm
    .g3     ( 8'h00 ), 
    .g4     ( 8'h00 ), 
    .g5     ( 8'h00 ), 
    .mixed(snd),
    .peak ( game_led ),
    .vu   ( snd_vu   )
);
`else
assign snd=0;
assign snd_vu   = 0;
assign game_led = 0;
wire ncs;
jtframe_frac_cen #(.WC(9)) u_cen192(
    .clk    ( clk       ),
    .n      ( 1 ),
    .m      ( 250 ),
    .cen    ( {  ncs,sample }  ), // sample is always 192 kHz
    .cenb   (                  )
);
`endif
endmodule
