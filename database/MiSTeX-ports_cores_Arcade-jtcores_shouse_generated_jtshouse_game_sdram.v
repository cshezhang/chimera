// This program was cloned from: https://github.com/MiSTeX-devel/MiSTeX-ports
// License: BSD 3-Clause "New" or "Revised" License

// jtshouse_game_sdram.v is automatically generated by JTFRAME
// Do not modify it
// Do not add it to git

`ifndef JTFRAME_COLORW
`define JTFRAME_COLORW 4
`endif

`ifndef JTFRAME_BUTTONS
`define JTFRAME_BUTTONS 2
`endif

module jtshouse_game_sdram(
    `include "jtframe_common_ports.inc"
    `include "jtframe_mem_ports.inc"
);

/* verilator lint_off WIDTH */
localparam [25:0] BA1_START  =`ifdef JTFRAME_BA1_START  `JTFRAME_BA1_START  `else 26'd0 `endif;
localparam [25:0] BA2_START  =`ifdef JTFRAME_BA2_START  `JTFRAME_BA2_START  `else 26'd0 `endif;
localparam [25:0] BA3_START  =`ifdef JTFRAME_BA3_START  `JTFRAME_BA3_START  `else 26'd0 `endif;
localparam [25:0] PROM_START =`ifdef JTFRAME_PROM_START `JTFRAME_PROM_START `else 26'd0 `endif;
localparam [25:0] HEADER_LEN =`ifdef JTFRAME_HEADER     `JTFRAME_HEADER     `else 26'd0 `endif;
/* verilator lint_on WIDTH */


parameter RAM_OFFSET = 22'h20_0000;
parameter PCM_OFFSET = (`PCM_START-`JTFRAME_BA1_START) >> 1;
parameter SCR_OFFSET = (`SCR_START-`JTFRAME_BA2_START) >> 1;

`ifndef JTFRAME_IOCTL_RD
wire ioctl_ram = 0;
`endif
// Audio channels 
wire signed [15:0] fm_l, fm_r;
wire signed [10:0] pcm;
wire signed [12:0] cus30_l, cus30_r;
wire mute;
// Additional ports
wire [12:0] rgb_addr;
wire [7:0] mask_data;
wire [12:0] sndram_addr;
wire [1:0] oram_we;
wire [7:0] mcu_dout;
wire [11:1] obus_addr;
wire [15:0] obus_dout;
wire [10:0] eerom_addr;
wire [15:0] vram_dout;
wire [15:0] oram_din;
wire [7:0] bpal_dout;
wire [7:0] eerom_dout;
wire [16:0] mask_addr;
wire  ram_we;
wire [14:1] tmap_addr;
wire [7:0] green_dout;
wire  eerom_we;
wire [14:1] vram_addr;
wire [7:0] sndram_din;
wire [7:0] red_dout;
wire [7:0] ram_dout;
wire [11:1] oram_addr;
wire [7:0] gpal_dout;
wire  sndram_we;
wire [15:0] oram_dout;
wire [7:0] rpal_dout;
wire [14:0] ram_addr;
wire [7:0] ram_din;
wire [7:0] sndram_dout;
wire [15:0] bdout16;
wire [12:0] pal_addr;
wire [7:0] blue_dout;
wire [15:0] tmap_dout;

// BRAM buses



wire    [ 1:0]vram_we; // Dual port for vram



wire    [ 1:0]obus_we; // Dual port for obus


wire          rpal_we; // Dual port for rpal


wire          gpal_we; // Dual port for gpal


wire          bpal_we; // Dual port for bpal


// SDRAM buses

wire [21:0] main_addr;
wire [ 7:0] main_data;
wire        main_cs, main_ok;
wire [21:0] sub_addr;
wire [ 7:0] sub_data;
wire        sub_cs, sub_ok;
wire [16:0] snd_addr;
wire [ 7:0] snd_data;
wire        snd_cs, snd_ok;
wire [19:0] pcm_addr;
wire [ 7:0] pcm_data;
wire        pcm_cs, pcm_ok;
wire [19:0] scr_addr;
wire [ 7:0] scr_data;
wire        scr_cs, scr_ok;
wire [19:2] obj_addr;
wire [31:0] obj_data;
wire        obj_cs, obj_ok;
wire        prom_we, header;
wire [21:0] raw_addr, post_addr;
wire [25:0] pre_addr, dwnld_addr, ioctl_addr_noheader;
wire [ 7:0] post_data;
wire [15:0] raw_data;
wire        pass_io;
// Clock enable signals
wire cen_fm; 
wire cen_fm2; 
wire gfx8_en, gfx16_en, ioctl_dwn;

assign pass_io = header | ioctl_ram;
assign ioctl_addr_noheader = `ifdef JTFRAME_HEADER header ? ioctl_addr : ioctl_addr - HEADER_LEN `else ioctl_addr `endif ;

wire rst_h, rst24_h, rst48_h, hold_rst;
/* verilator tracing_off */
jtframe_rsthold u_hold(
    .rst    ( rst       ),
    .clk    ( clk       ),
    .hold   ( hold_rst  ),
    .rst_h  ( rst_h     )
`ifdef JTFRAME_CLK24 ,
    .rst24  ( rst24     ),
    .clk24  ( clk24     ),
    .rst24_h( rst24_h   )
`endif
`ifdef JTFRAME_CLK48 ,
    .rst48  ( rst48     ),
    .clk48  ( clk48     ),
    .rst48_h( rst48_h   )
`endif
);
/* verilator tracing_on */
jtshouse_game u_game(
    .rst        ( rst_h     ),
    .clk        ( clk       ),
`ifdef JTFRAME_CLK24
    .rst24      ( rst24_h   ),
    .clk24      ( clk24     ),
`endif
`ifdef JTFRAME_CLK48
    .rst48      ( rst48_h   ),
    .clk48      ( clk48     ),
`endif
    // Audio channels
    .fm_l   ( fm_l    ),
    .fm_r   ( fm_r    ),.pcm     ( pcm      ),.cus30_l   ( cus30_l    ),
    .cus30_r   ( cus30_r    ),
    
    .snd_en         ( snd_en        ),
    .cen_fm    ( cen_fm    ), 
    .cen_fm2    ( cen_fm2    ), 

    .pxl2_cen       ( pxl2_cen      ),
    .pxl_cen        ( pxl_cen       ),
    .red            ( red           ),
    .green          ( green         ),
    .blue           ( blue          ),
    .LHBL           ( LHBL          ),
    .LVBL           ( LVBL          ),
    .HS             ( HS            ),
    .VS             ( VS            ),
    // cabinet I/O
    .cab_1p   ( cab_1p  ),
    .coin     ( coin    ),
    .joystick1    ( joystick1        ), .joystick2    ( joystick2        ), `ifdef JTFRAME_4PLAYERS
    .joystick3    ( joystick3        ), .joystick4    ( joystick4        ), `endif `ifdef JTFRAME_MOUSE
    .mouse_1p     ( mouse_1p         ), .mouse_2p     ( mouse_2p         ), `endif `ifdef JTFRAME_SPINNER
    .spinner_1p   ( spinner_1p       ), .spinner_2p   ( spinner_2p       ), `endif `ifdef JTFRAME_ANALOG
    .joyana_l1    ( joyana_l1        ), .joyana_l2    ( joyana_l2        ), `ifdef JTFRAME_ANALOG_DUAL
    .joyana_r1    ( joyana_r1        ), .joyana_r2    ( joyana_r2        ), `endif `ifdef JTFRAME_4PLAYERS
    .joyana_l3    ( joyana_l3        ), .joyana_l4    ( joyana_l4        ), `ifdef JTFRAME_ANALOG_DUAL
    .joyana_r3    ( joyana_r3        ), .joyana_r4    ( joyana_r4        ), `endif `endif `endif `ifdef JTFRAME_DIAL
    .dial_x       ( dial_x           ), .dial_y       ( dial_y           ), `endif
    // DIP switches
    .status         ( status        ),
    .dipsw          ( dipsw         ),
    .service        ( service       ),
    .tilt           ( tilt          ),
    .dip_pause      ( dip_pause     ),
    .dip_flip       ( dip_flip      ),
    .dip_test       ( dip_test      ),
    .dip_fxlevel    ( dip_fxlevel   ),
    .enable_psg     ( enable_psg    ),
    .enable_fm      ( enable_fm     ),
    // Ports declared in mem.yaml
    .rgb_addr   ( rgb_addr ),
    .mask_data   ( mask_data ),
    .sndram_addr   ( sndram_addr ),
    .oram_we   ( oram_we ),
    .mcu_dout   ( mcu_dout ),
    .obus_addr   ( obus_addr ),
    .obus_dout   ( obus_dout ),
    .eerom_addr   ( eerom_addr ),
    .vram_dout   ( vram_dout ),
    .oram_din   ( oram_din ),
    .bpal_dout   ( bpal_dout ),
    .eerom_dout   ( eerom_dout ),
    .mask_addr   ( mask_addr ),
    .ram_we   ( ram_we ),
    .tmap_addr   ( tmap_addr ),
    .green_dout   ( green_dout ),
    .eerom_we   ( eerom_we ),
    .vram_addr   ( vram_addr ),
    .sndram_din   ( sndram_din ),
    .red_dout   ( red_dout ),
    .ram_dout   ( ram_dout ),
    .oram_addr   ( oram_addr ),
    .gpal_dout   ( gpal_dout ),
    .sndram_we   ( sndram_we ),
    .oram_dout   ( oram_dout ),
    .rpal_dout   ( rpal_dout ),
    .ram_addr   ( ram_addr ),
    .ram_din   ( ram_din ),
    .sndram_dout   ( sndram_dout ),
    .bdout16   ( bdout16 ),
    .pal_addr   ( pal_addr ),
    .blue_dout   ( blue_dout ),
    .tmap_dout   ( tmap_dout ),
    // Memory interface - SDRAM
    .main_addr ( main_addr ),
    .main_cs   ( main_cs   ),
    .main_ok   ( main_ok   ),
    .main_data ( main_data ),
    
    .sub_addr ( sub_addr ),
    .sub_cs   ( sub_cs   ),
    .sub_ok   ( sub_ok   ),
    .sub_data ( sub_data ),
    
    .snd_addr ( snd_addr ),
    .snd_cs   ( snd_cs   ),
    .snd_ok   ( snd_ok   ),
    .snd_data ( snd_data ),
    
    .pcm_addr ( pcm_addr ),
    .pcm_cs   ( pcm_cs   ),
    .pcm_ok   ( pcm_ok   ),
    .pcm_data ( pcm_data ),
    
    .scr_addr ( scr_addr ),
    .scr_cs   ( scr_cs   ),
    .scr_ok   ( scr_ok   ),
    .scr_data ( scr_data ),
    
    .obj_addr ( obj_addr ),
    .obj_cs   ( obj_cs   ),
    .obj_ok   ( obj_ok   ),
    .obj_data ( obj_data ),
    
    // Memory interface - BRAM

    
    .vram_we ( vram_we ),  // Dual port for vram
    
    
    
    .obus_we ( obus_we ),  // Dual port for obus
    
    .rpal_we ( rpal_we ),  // Dual port for rpal
    
    .gpal_we ( gpal_we ),  // Dual port for gpal
    
    .bpal_we ( bpal_we ),  // Dual port for bpal
    
    
    // PROM writting
    .ioctl_addr   ( pass_io ? ioctl_addr       : ioctl_addr_noheader  ),
    .prog_addr    ( pass_io ? ioctl_addr[21:0] : raw_addr      ),
    .prog_data    ( pass_io ? ioctl_dout       : raw_data[7:0] ),
    .prog_we      ( pass_io ? ioctl_wr         : prog_we       ),
    .prog_ba      ( prog_ba        ), // prog_ba supplied in case it helps re-mapping addresses
`ifdef JTFRAME_PROM_START
    .prom_we      ( prom_we        ),
`endif
`ifdef JTFRAME_HEADER
    .header       ( header         ),
`endif
`ifdef JTFRAME_IOCTL_RD
    .ioctl_ram    ( ioctl_ram      ),
    .ioctl_din    ( ioctl_aux      ),
    .ioctl_dout   ( ioctl_dout     ),
    .ioctl_wr     ( ioctl_wr       ), `endif
    .ioctl_cart   ( ioctl_cart     ),
    // Debug
    .debug_bus    ( debug_bus      ),
    .debug_view   ( debug_view     ),
`ifdef JTFRAME_STATUS
    .st_addr      ( st_addr        ),
    .st_dout      ( st_dout        ),
`endif
`ifdef JTFRAME_LF_BUFFER
    .game_vrender( game_vrender  ),
    .game_hdump  ( game_hdump    ),
    .ln_addr     ( ln_addr       ),
    .ln_data     ( ln_data       ),
    .ln_done     ( ln_done       ),
    .ln_hs       ( ln_hs         ),
    .ln_pxl      ( ln_pxl        ),
    .ln_v        ( ln_v          ),
    .ln_we       ( ln_we         ),
`endif
    .gfx_en      ( gfx_en        )
);
/* verilator tracing_off */
assign dwnld_busy = ioctl_rom | prom_we; // prom_we is really just for sims
assign dwnld_addr = ioctl_addr;
assign prog_addr = raw_addr;
assign prog_data = raw_data;
assign gfx8_en   = 0;
assign gfx16_en  = 0;
assign ioctl_dwn = ioctl_rom | ioctl_cart;
`ifdef VERILATOR_KEEP_SDRAM /* verilator tracing_on */ `else /* verilator tracing_off */ `endif
jtframe_dwnld #(
`ifdef JTFRAME_HEADER
    .HEADER    ( `JTFRAME_HEADER   ),
`endif
`ifdef JTFRAME_BA1_START
    .BA1_START ( BA1_START ),
`endif
`ifdef JTFRAME_BA2_START
    .BA2_START ( BA2_START ),
`endif
`ifdef JTFRAME_BA3_START
    .BA3_START ( BA3_START ),
`endif
`ifdef JTFRAME_PROM_START
    .PROM_START( PROM_START ),
`endif
    .SWAB      ( 1),
    .GFX8B0    ( 0),
    .GFX16B0   ( 0)
) u_dwnld(
    .clk          ( clk            ),
    .ioctl_rom    ( ioctl_dwn      ),
    .ioctl_addr   ( dwnld_addr     ),
    .ioctl_dout   ( ioctl_dout     ),
    .ioctl_wr     ( ioctl_wr       ),
    .gfx8_en      ( gfx8_en        ),
    .gfx16_en     ( gfx16_en       ),
    .prog_addr    ( raw_addr       ),
    .prog_data    ( raw_data       ),
    .prog_mask    ( prog_mask      ), // active low
    .prog_we      ( prog_we        ),
    .prog_rd      ( prog_rd        ),
    .prog_ba      ( prog_ba        ),
    .prom_we      ( prom_we        ),
    .header       ( header         ),
    .sdram_ack    ( prog_ack       )
);
`ifdef VERILATOR_KEEP_SDRAM /* verilator tracing_on */ `else /* verilator tracing_off */ `endif



jtframe_rom_2slots #(
    // main
    .SLOT0_AW(22),
    .SLOT0_DW( 8), 
    // sub
    .SLOT1_AW(22),
    .SLOT1_DW( 8)
`ifdef JTFRAME_BA2_LEN
    ,.SLOT0_DOUBLE(1)
    ,.SLOT1_DOUBLE(1)
`endif
) u_bank0(
    .rst         ( rst        ),
    .clk         ( clk        ),
    
    .slot0_addr  ( main_addr  ),
    .slot0_dout  ( main_data  ),
    .slot0_cs    ( main_cs    ),
    .slot0_ok    ( main_ok    ),
    
    .slot1_addr  ( sub_addr  ),
    .slot1_dout  ( sub_data  ),
    .slot1_cs    ( sub_cs    ),
    .slot1_ok    ( sub_ok    ),
    
    // SDRAM controller interface
    .sdram_ack   ( ba_ack[0]  ),
    .sdram_rd    ( ba_rd[0]   ),
    .sdram_addr  ( ba0_addr   ),
    .data_dst    ( ba_dst[0]  ),
    .data_rdy    ( ba_rdy[0]  ),
    .data_read   ( data_read  )
);
assign ba_wr[0] = 0;
assign ba0_din  = 0;
assign ba0_dsn  = 3;
jtframe_rom_2slots #(
    // snd
    .SLOT0_AW(17),
    .SLOT0_DW( 8), 
    // pcm
    .SLOT1_OFFSET(PCM_OFFSET[21:0]),
    .SLOT1_AW(20),
    .SLOT1_DW( 8)
`ifdef JTFRAME_BA2_LEN
    ,.SLOT0_DOUBLE(1)
    ,.SLOT1_DOUBLE(1)
`endif
) u_bank1(
    .rst         ( rst        ),
    .clk         ( clk        ),
    
    .slot0_addr  ( snd_addr  ),
    .slot0_dout  ( snd_data  ),
    .slot0_cs    ( snd_cs    ),
    .slot0_ok    ( snd_ok    ),
    
    .slot1_addr  ( pcm_addr  ),
    .slot1_dout  ( pcm_data  ),
    .slot1_cs    ( pcm_cs    ),
    .slot1_ok    ( pcm_ok    ),
    
    // SDRAM controller interface
    .sdram_ack   ( ba_ack[1]  ),
    .sdram_rd    ( ba_rd[1]   ),
    .sdram_addr  ( ba1_addr   ),
    .data_dst    ( ba_dst[1]  ),
    .data_rdy    ( ba_rdy[1]  ),
    .data_read   ( data_read  )
);
assign ba_wr[1] = 0;
assign ba1_din  = 0;
assign ba1_dsn  = 3;
jtframe_rom_1slot #(
    // scr
    .SLOT0_OFFSET(SCR_OFFSET[21:0]),
    .SLOT0_AW(20),
    .SLOT0_DW( 8)
`ifdef JTFRAME_BA2_LEN
    ,.SLOT0_DOUBLE(1)
`endif
) u_bank2(
    .rst         ( rst        ),
    .clk         ( clk        ),
    
    .slot0_addr  ( scr_addr  ),
    .slot0_dout  ( scr_data  ),
    .slot0_cs    ( scr_cs    ),
    .slot0_ok    ( scr_ok    ),
    
    // SDRAM controller interface
    .sdram_ack   ( ba_ack[2]  ),
    .sdram_rd    ( ba_rd[2]   ),
    .sdram_addr  ( ba2_addr   ),
    .data_dst    ( ba_dst[2]  ),
    .data_rdy    ( ba_rdy[2]  ),
    .data_read   ( data_read  )
);
assign ba_wr[2] = 0;
assign ba2_din  = 0;
assign ba2_dsn  = 3;
jtframe_rom_1slot #(
    // obj
    .SLOT0_AW(19),
    .SLOT0_DW(32)
`ifdef JTFRAME_BA2_LEN
    ,.SLOT0_DOUBLE(1)
`endif
) u_bank3(
    .rst         ( rst        ),
    .clk         ( clk        ),
    
    .slot0_addr  ( { obj_addr, 1'b0 } ),
    .slot0_dout  ( obj_data  ),
    .slot0_cs    ( obj_cs    ),
    .slot0_ok    ( obj_ok    ),
    
    // SDRAM controller interface
    .sdram_ack   ( ba_ack[3]  ),
    .sdram_rd    ( ba_rd[3]   ),
    .sdram_addr  ( ba3_addr   ),
    .data_dst    ( ba_dst[3]  ),
    .data_rdy    ( ba_rdy[3]  ),
    .data_read   ( data_read  )
);
assign ba_wr[3] = 0;
assign ba3_din  = 0;
assign ba3_dsn  = 3;
assign hold_rst=0;

/* verilator tracing_off */

jtframe_bram_rom #(
    .AW(17),.DW(8),
    .OFFSET({2'd2,22'd0}),.SIMFILE("mask.bin")
) u_brom_mask(
    .clk    ( clk       ),
    // Read port
    .addr   ( mask_addr ),
    .data   ( mask_data ),
    // Write port
    .prog_addr( {prog_ba,prog_addr} ),
    .prog_mask( prog_mask ),
    .prog_data( prog_data[7:0] ),
    .prog_we  ( prog_we   )
);
/* verilator tracing_off */



// BRAM for ram
jtframe_ram #(
    .AW(15)
) u_bram_ram(
    .clk    ( clk  ),
    .cen    ( 1'b1 ),
    .addr   ( ram_addr ),
    .data   ( ram_din ),
    .we     ( ram_we ),
    .q      ( ram_dout )
);

// Dual port BRAM for tmap and vram
jtframe_dual_ram16 #(
    .AW(15-1),
    .SIMFILE_LO("tmap_lo.bin"),
    .SIMFILE_HI("tmap_hi.bin")
) u_bram_tmap(
    // Port 0 - tmap
    .clk0   ( clk ),
    .addr0  ( tmap_amux ),
    .data0  ( 16'h0 ),
    .we0    ( 2'd0 ),
    .q0     ( tmap_dout ),
    // Port 1 - vram
    .clk1   ( clk ),
    .data1  ( bdout16 ),
    .addr1  ( vram_addr[14:1] ),
    .we1    ( vram_we  ), 
    .q1     ( vram_dout )
);
// BRAM for sndram
jtframe_ram #(
    .AW(13)
) u_bram_sndram(
    .clk    ( clk  ),
    .cen    ( 1'b1 ),
    .addr   ( sndram_addr ),
    .data   ( sndram_din ),
    .we     ( sndram_we ),
    .q      ( sndram_dout )
);

// Dual port BRAM for oram and obus
jtframe_dual_ram16 #(
    .AW(12-1),
    .SIMFILE_LO("oram_lo.bin"),
    .SIMFILE_HI("oram_hi.bin")
) u_bram_oram(
    // Port 0 - oram
    .clk0   ( clk ),
    .addr0  ( oram_amux ),
    .data0  ( oram_din  ),
    .we0    (  oram_we ), 
    .q0     ( oram_dout ),
    // Port 1 - obus
    .clk1   ( clk ),
    .data1  ( bdout16 ),
    .addr1  ( obus_addr[11:1] ),
    .we1    ( obus_we  ), 
    .q1     ( obus_dout )
);
// Dual port BRAM for red and rpal
jtframe_dual_ram #(
    .AW(13),
    .SIMFILE("red.bin")
) u_bram_red(
    // Port 0 - red
    .clk0   ( clk ),
    .addr0  ( red_amux ),
    .data0  ( 8'h0 ),
    .we0    ( 1'd0 ),
    .q0     ( red_dout ),
    // Port 1 - rpal
    .clk1   ( clk ),
    .data1  ( ram_din ),
    .addr1  ( pal_addr[12:0] ),
    .we1    ( rpal_we  ), 
    .q1     ( rpal_dout )
);
// Dual port BRAM for green and gpal
jtframe_dual_ram #(
    .AW(13),
    .SIMFILE("green.bin")
) u_bram_green(
    // Port 0 - green
    .clk0   ( clk ),
    .addr0  ( green_amux ),
    .data0  ( 8'h0 ),
    .we0    ( 1'd0 ),
    .q0     ( green_dout ),
    // Port 1 - gpal
    .clk1   ( clk ),
    .data1  ( ram_din ),
    .addr1  ( pal_addr[12:0] ),
    .we1    ( gpal_we  ), 
    .q1     ( gpal_dout )
);
// Dual port BRAM for blue and bpal
jtframe_dual_ram #(
    .AW(13),
    .SIMFILE("blue.bin")
) u_bram_blue(
    // Port 0 - blue
    .clk0   ( clk ),
    .addr0  ( blue_amux ),
    .data0  ( 8'h0 ),
    .we0    ( 1'd0 ),
    .q0     ( blue_dout ),
    // Port 1 - bpal
    .clk1   ( clk ),
    .data1  ( ram_din ),
    .addr1  ( pal_addr[12:0] ),
    .we1    ( bpal_we  ), 
    .q1     ( bpal_dout )
);
// BRAM for eerom
jtframe_ram #(
    .AW(11),
    .SIMFILE("eerom.bin")
) u_bram_eerom(
    .clk    ( clk  ),
    .cen    ( 1'b1 ),
    .addr   ( eerom_amux ),
    .data   ( eerom_dimx ),
    .we     ( eerom_wemx[0] ),
    .q      ( eerom_dout )
);

/* verilator tracing_off */
wire [7:0] ioctl_aux;
wire [8-1:0] eerom_dimx;
wire [  1:0] eerom_wemx;
wire [11-1:0] eerom_amux;
wire [16-1:0] tmap_dimx;
wire [  1:0] tmap_wemx;
wire [15-1:1] tmap_amux;
wire [8-1:0] red_dimx;
wire [  1:0] red_wemx;
wire [13-1:0] red_amux;
wire [8-1:0] green_dimx;
wire [  1:0] green_wemx;
wire [13-1:0] green_amux;
wire [8-1:0] blue_dimx;
wire [  1:0] blue_wemx;
wire [13-1:0] blue_amux;
wire [16-1:0] oram_dimx;
wire [  1:0] oram_wemx;
wire [12-1:1] oram_amux;

jtframe_ioctl_dump #(
    .DW0( 8 ), .AW0( 11 ),
    .DW1( 16 ), .AW1( 15 ),
    .DW2( 8 ), .AW2( 13 ),
    .DW3( 8 ), .AW3( 13 ),
    .DW4( 8 ), .AW4( 13 ),
    .DW5( 16 ), .AW5( 12 )
) u_dump (
    .clk       ( clk        ),
    // dump 0
    .dout0        ( eerom_dout ),
    .addr0        ( eerom_addr ),
    .addr0_mx     ( eerom_amux ),
    // restore
    .din0         ( mcu_dout ),
    .din0_mx      ( eerom_dimx ),
    .we0          ( { 1'b0,eerom_we }),
    .we0_mx       ( eerom_wemx ),
    
    // dump 1
    .dout1        ( tmap_dout ),
    .addr1        ( tmap_addr ),
    .addr1_mx     ( tmap_amux ),
    // restore
    .din1         (  ),
    .din1_mx      ( tmap_dimx ),
    .we1          ( 2'b0),
    .we1_mx       ( tmap_wemx ),
    
    // dump 2
    .dout2        ( red_dout ),
    .addr2        ( rgb_addr ),
    .addr2_mx     ( red_amux ),
    // restore
    .din2         (  ),
    .din2_mx      ( red_dimx ),
    .we2          ( { 1'b0,1'b0 }),
    .we2_mx       ( red_wemx ),
    
    // dump 3
    .dout3        ( green_dout ),
    .addr3        ( rgb_addr ),
    .addr3_mx     ( green_amux ),
    // restore
    .din3         (  ),
    .din3_mx      ( green_dimx ),
    .we3          ( { 1'b0,1'b0 }),
    .we3_mx       ( green_wemx ),
    
    // dump 4
    .dout4        ( blue_dout ),
    .addr4        ( rgb_addr ),
    .addr4_mx     ( blue_amux ),
    // restore
    .din4         (  ),
    .din4_mx      ( blue_dimx ),
    .we4          ( { 1'b0,1'b0 }),
    .we4_mx       ( blue_wemx ),
    
    // dump 5
    .dout5        ( oram_dout ),
    .addr5        ( oram_addr ),
    .addr5_mx     ( oram_amux ),
    // restore
    .din5         ( oram_din ),
    .din5_mx      ( oram_dimx ),
    .we5          ( 2'b0),
    .we5_mx       ( oram_wemx ),
    
    .ioctl_addr ( ioctl_addr[23:0] ),
    .ioctl_ram  ( ioctl_ram ),
    .ioctl_aux  ( ioctl_aux ),
    .ioctl_wr   ( ioctl_wr  ),
    .ioctl_din  ( ioctl_din ),
    .ioctl_dout ( ioctl_dout)
);



// Clock enable generation
// 3579545 = 49153840*455/6248 Hz from clk
`ifdef VERILATOR_KEEP_CEN /* verilator tracing_on */ `else /* verilator tracing_off */ `endif
jtframe_gated_cen #(.W(2),.NUM(455),.DEN(6248),.MFREQ(49153)) u_cen0_clk(
    .rst    ( rst          ),
    .clk    ( clk ),
    .busy   ( 1'b0    ),
    .cen    ( { cen_fm2, cen_fm } ),
    .fave   (              ),
    .fworst (              )
); /* verilator tracing_off */

`ifndef NOSOUND/* verilator tracing_on */
assign mute=0;
jtframe_rcmix #(
    .W0(16),
    .W1(11),
    .W2(13),
    .FIR1("fir_192k_4k.hex"),
    .STEREO0( 1),
    .STEREO1( 0),
    .STEREO2( 1),
    .STEREO3( 0),
    .STEREO4( 0),
    .STEREO5( 0),
    .DCRM0  ( 0),
    .DCRM1  ( 1),
    .DCRM2  ( 0),
    .DCRM3  ( 0),
    .DCRM4  ( 0),
    .DCRM5  ( 0),
    .STEREO (      1),
    // Fractional cen for 192kHz
    .FRACW( 17), .FRACN(209), .FRACM(53506)
) u_rcmix(
    .rst    ( rst       ),
    .clk    ( clk       ),
    .mute   ( mute      ),
    .sample ( sample    ),
    .ch_en  ( snd_en    ),
    .gpole  ( 8'h86 ),  // 19894 Hz 
    .ch0    ( { fm_l,fm_r } ),
    .ch1    ( pcm ),
    .ch2    ( { cus30_l,cus30_r } ),
    .ch3    ( 16'd0 ),
    .ch4    ( 16'd0 ),
    .ch5    ( 16'd0 ),
    .p0     ( 16'h00B2), // 11130 Hz, 0 Hz 
    .p1     ( 16'h00), // 0 Hz, 0 Hz 
    .p2     ( 16'h00C2), // 8466 Hz, 0 Hz 
    .p3     ( 16'h0), 
    .p4     ( 16'h0), 
    .p5     ( 16'h0), 
    .g0     ( 8'h53 ), // fm
    .g1     ( 8'h60 ), // pcm
    .g2     ( 8'h80 ), // cus30
    .g3     ( 8'h00 ), 
    .g4     ( 8'h00 ), 
    .g5     ( 8'h00 ), 
    .mixed({ snd_left, snd_right}),
    .peak ( game_led ),
    .vu   ( snd_vu   )
);
`else
assign { snd_left, snd_right}=0;
assign snd_vu   = 0;
assign game_led = 0;
wire ncs;
jtframe_frac_cen #(.WC(17)) u_cen192(
    .clk    ( clk       ),
    .n      ( 209 ),
    .m      ( 53506 ),
    .cen    ( {  ncs,sample }  ), // sample is always 192 kHz
    .cenb   (                  )
);
`endif
endmodule
