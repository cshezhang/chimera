//   Ordt 190617.01 autogenerated file 
//   Input: /huaihe/proj/ic/wa/jiongz/work/soc_dv/verify_common/regmodel/outdir/pico_def_demo/spec/manual/openreg.rdl
//   Parms: openreg.parms
//   Date: Tue Aug 13 05:29:54 EDT 2019
//

//
//---------- module addrmap_PICO_jrdl_logic
//
module addrmap_PICO_jrdl_logic
(
  clk,
  reset,
  d2l_ral_regs_demo_CTRL_w,
  d2l_ral_regs_demo_CTRL_we,
  d2l_ral_regs_demo_CTRL_re,
  d2l_ral_regs_demo_INTCTRL_w,
  d2l_ral_regs_demo_INTCTRL_we,
  d2l_ral_regs_demo_INTCTRL_re,
  d2l_ral_regs_demo_STATUS_w,
  d2l_ral_regs_demo_STATUS_we,
  d2l_ral_regs_demo_STATUS_re,
  d2l_ral_regs_demo_RCNT_SAT_w,
  d2l_ral_regs_demo_RCNT_SAT_we,
  d2l_ral_regs_demo_RCNT_SAT_re,
  h2l_ral_regs_demo_CTRL_PRESCALER_w,
  h2l_ral_regs_demo_CTRL_MODE_w,
  h2l_ral_regs_demo_CTRL_MASTER_w,
  h2l_ral_regs_demo_CTRL_MASTER_we,
  h2l_ral_regs_demo_STATUS_WRCOL_w,
  h2l_ral_regs_demo_STATUS_WRCOL_we,
  h2l_ral_regs_demo_STATUS_IF_w,
  h2l_ral_regs_demo_STATUS_IF_we,
  h2l_ral_regs_demo_RCNT_SAT_subch_w,
  h2l_ral_regs_demo_RCNT_SAT_subch_we,
  h2l_ral_regs_demo_RCNT_SAT_str_w,
  h2l_ral_regs_demo_RCNT_SAT_str_we,

  l2d_ral_regs_demo_CTRL_r,
  l2d_ral_regs_demo_INTCTRL_r,
  l2d_ral_regs_demo_STATUS_r,
  l2d_ral_regs_demo_RCNT_SAT_r,
  l2h_ral_regs_demo_CTRL_MASTER_r,
  l2h_ral_regs_demo_CTRL_DORD_r,
  l2h_ral_regs_demo_CTRL_ENABLE_r,
  l2h_ral_regs_demo_CTRL_CLK2X_r,
  l2h_ral_regs_demo_INTCTRL_INTLVL_r,
  l2h_ral_regs_demo_STATUS_WRCOL_r,
  l2h_ral_regs_demo_STATUS_IF_r,
  l2h_ral_regs_demo_RCNT_SAT_en_r );

  //------- inputs
  input    clk;
  input    reset;
  input     [31:0] d2l_ral_regs_demo_CTRL_w;
  input    d2l_ral_regs_demo_CTRL_we;
  input    d2l_ral_regs_demo_CTRL_re;
  input     [31:0] d2l_ral_regs_demo_INTCTRL_w;
  input    d2l_ral_regs_demo_INTCTRL_we;
  input    d2l_ral_regs_demo_INTCTRL_re;
  input     [31:0] d2l_ral_regs_demo_STATUS_w;
  input    d2l_ral_regs_demo_STATUS_we;
  input    d2l_ral_regs_demo_STATUS_re;
  input     [31:0] d2l_ral_regs_demo_RCNT_SAT_w;
  input    d2l_ral_regs_demo_RCNT_SAT_we;
  input    d2l_ral_regs_demo_RCNT_SAT_re;
  input     [1:0] h2l_ral_regs_demo_CTRL_PRESCALER_w;
  input     [1:0] h2l_ral_regs_demo_CTRL_MODE_w;
  input    h2l_ral_regs_demo_CTRL_MASTER_w;
  input    h2l_ral_regs_demo_CTRL_MASTER_we;
  input    h2l_ral_regs_demo_STATUS_WRCOL_w;
  input    h2l_ral_regs_demo_STATUS_WRCOL_we;
  input    h2l_ral_regs_demo_STATUS_IF_w;
  input    h2l_ral_regs_demo_STATUS_IF_we;
  input     [4:0] h2l_ral_regs_demo_RCNT_SAT_subch_w;
  input    h2l_ral_regs_demo_RCNT_SAT_subch_we;
  input     [9:0] h2l_ral_regs_demo_RCNT_SAT_str_w;
  input    h2l_ral_regs_demo_RCNT_SAT_str_we;

  //------- outputs
  output     [31:0] l2d_ral_regs_demo_CTRL_r;
  output     [31:0] l2d_ral_regs_demo_INTCTRL_r;
  output     [31:0] l2d_ral_regs_demo_STATUS_r;
  output     [31:0] l2d_ral_regs_demo_RCNT_SAT_r;
  output    l2h_ral_regs_demo_CTRL_MASTER_r;
  output    l2h_ral_regs_demo_CTRL_DORD_r;
  output    l2h_ral_regs_demo_CTRL_ENABLE_r;
  output    l2h_ral_regs_demo_CTRL_CLK2X_r;
  output     [1:0] l2h_ral_regs_demo_INTCTRL_INTLVL_r;
  output    l2h_ral_regs_demo_STATUS_WRCOL_r;
  output    l2h_ral_regs_demo_STATUS_IF_r;
  output    l2h_ral_regs_demo_RCNT_SAT_en_r;


  //------- reg defines
  reg   [1:0] rg_ral_regs_demo_CTRL_PRESCALER;
  reg   [1:0] rg_ral_regs_demo_CTRL_MODE;
  reg  rg_ral_regs_demo_CTRL_MASTER;
  reg  reg_ral_regs_demo_CTRL_MASTER_next;
  reg  l2h_ral_regs_demo_CTRL_MASTER_r;
  reg  rg_ral_regs_demo_CTRL_DORD;
  reg  reg_ral_regs_demo_CTRL_DORD_next;
  reg  l2h_ral_regs_demo_CTRL_DORD_r;
  reg  rg_ral_regs_demo_CTRL_ENABLE;
  reg  reg_ral_regs_demo_CTRL_ENABLE_next;
  reg  l2h_ral_regs_demo_CTRL_ENABLE_r;
  reg  rg_ral_regs_demo_CTRL_CLK2X;
  reg  reg_ral_regs_demo_CTRL_CLK2X_next;
  reg  l2h_ral_regs_demo_CTRL_CLK2X_r;
  reg   [31:0] l2d_ral_regs_demo_CTRL_r;
  reg   [1:0] rg_ral_regs_demo_INTCTRL_INTLVL;
  reg   [1:0] reg_ral_regs_demo_INTCTRL_INTLVL_next;
  reg   [1:0] l2h_ral_regs_demo_INTCTRL_INTLVL_r;
  reg   [31:0] l2d_ral_regs_demo_INTCTRL_r;
  reg  rg_ral_regs_demo_STATUS_WRCOL;
  reg  reg_ral_regs_demo_STATUS_WRCOL_next;
  reg  l2h_ral_regs_demo_STATUS_WRCOL_r;
  reg  rg_ral_regs_demo_STATUS_IF;
  reg  reg_ral_regs_demo_STATUS_IF_next;
  reg  l2h_ral_regs_demo_STATUS_IF_r;
  reg   [31:0] l2d_ral_regs_demo_STATUS_r;
  reg  rg_ral_regs_demo_RCNT_SAT_en;
  reg  reg_ral_regs_demo_RCNT_SAT_en_next;
  reg  l2h_ral_regs_demo_RCNT_SAT_en_r;
  reg   [4:0] rg_ral_regs_demo_RCNT_SAT_subch;
  reg   [4:0] reg_ral_regs_demo_RCNT_SAT_subch_next;
  reg   [9:0] rg_ral_regs_demo_RCNT_SAT_str;
  reg   [9:0] reg_ral_regs_demo_RCNT_SAT_str_next;
  reg   [31:0] l2d_ral_regs_demo_RCNT_SAT_r;
  
  
  //------- combinatorial assigns for ral_regs_demo_INTCTRL
  always @ (*) begin
    reg_ral_regs_demo_INTCTRL_INTLVL_next = rg_ral_regs_demo_INTCTRL_INTLVL;
    l2h_ral_regs_demo_INTCTRL_INTLVL_r = rg_ral_regs_demo_INTCTRL_INTLVL;
    if (d2l_ral_regs_demo_INTCTRL_we) reg_ral_regs_demo_INTCTRL_INTLVL_next = d2l_ral_regs_demo_INTCTRL_w [1:0] ;
  end
  
  //------- reg assigns for ral_regs_demo_INTCTRL
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_ral_regs_demo_INTCTRL_INTLVL <= #1 2'd0;
    end
    else begin
      rg_ral_regs_demo_INTCTRL_INTLVL <= #1  reg_ral_regs_demo_INTCTRL_INTLVL_next;
    end
  end
  
  //------- combinatorial assigns for ral_regs_demo_STATUS
  always @ (*) begin
    reg_ral_regs_demo_STATUS_WRCOL_next = rg_ral_regs_demo_STATUS_WRCOL;
    l2h_ral_regs_demo_STATUS_WRCOL_r = rg_ral_regs_demo_STATUS_WRCOL;
    reg_ral_regs_demo_STATUS_IF_next = rg_ral_regs_demo_STATUS_IF;
    l2h_ral_regs_demo_STATUS_IF_r = rg_ral_regs_demo_STATUS_IF;
    if (h2l_ral_regs_demo_STATUS_WRCOL_we) reg_ral_regs_demo_STATUS_WRCOL_next = h2l_ral_regs_demo_STATUS_WRCOL_w;
    if (h2l_ral_regs_demo_STATUS_IF_we) reg_ral_regs_demo_STATUS_IF_next = h2l_ral_regs_demo_STATUS_IF_w;
  end
  
  //------- reg assigns for ral_regs_demo_STATUS
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_ral_regs_demo_STATUS_WRCOL <= #1 1'd0;
      rg_ral_regs_demo_STATUS_IF <= #1 1'd0;
    end
    else begin
      rg_ral_regs_demo_STATUS_WRCOL <= #1  reg_ral_regs_demo_STATUS_WRCOL_next;
      rg_ral_regs_demo_STATUS_IF <= #1  reg_ral_regs_demo_STATUS_IF_next;
    end
  end
  
  //------- combinatorial assigns for ral_regs_demo_STATUS (pio read data)
  always @ (*) begin
    l2d_ral_regs_demo_STATUS_r = 32'b0;
    l2d_ral_regs_demo_STATUS_r [6]  = rg_ral_regs_demo_STATUS_WRCOL;
    l2d_ral_regs_demo_STATUS_r [7]  = rg_ral_regs_demo_STATUS_IF;
  end
  
  //------- combinatorial assigns for ral_regs_demo_RCNT_SAT (pio read data)
  always @ (*) begin
    l2d_ral_regs_demo_RCNT_SAT_r = 32'b0;
    l2d_ral_regs_demo_RCNT_SAT_r [31]  = rg_ral_regs_demo_RCNT_SAT_en;
    l2d_ral_regs_demo_RCNT_SAT_r [30:26]  = rg_ral_regs_demo_RCNT_SAT_subch;
    l2d_ral_regs_demo_RCNT_SAT_r [25:16]  = rg_ral_regs_demo_RCNT_SAT_str;
  end
  
  //------- combinatorial assigns for ral_regs_demo_CTRL
  always @ (*) begin
    rg_ral_regs_demo_CTRL_PRESCALER =  h2l_ral_regs_demo_CTRL_PRESCALER_w;
    rg_ral_regs_demo_CTRL_MODE =  h2l_ral_regs_demo_CTRL_MODE_w;
    reg_ral_regs_demo_CTRL_MASTER_next = rg_ral_regs_demo_CTRL_MASTER;
    l2h_ral_regs_demo_CTRL_MASTER_r = rg_ral_regs_demo_CTRL_MASTER;
    reg_ral_regs_demo_CTRL_DORD_next = rg_ral_regs_demo_CTRL_DORD;
    l2h_ral_regs_demo_CTRL_DORD_r = rg_ral_regs_demo_CTRL_DORD;
    reg_ral_regs_demo_CTRL_ENABLE_next = rg_ral_regs_demo_CTRL_ENABLE;
    l2h_ral_regs_demo_CTRL_ENABLE_r = rg_ral_regs_demo_CTRL_ENABLE;
    reg_ral_regs_demo_CTRL_CLK2X_next = rg_ral_regs_demo_CTRL_CLK2X;
    l2h_ral_regs_demo_CTRL_CLK2X_r = rg_ral_regs_demo_CTRL_CLK2X;
    if (h2l_ral_regs_demo_CTRL_MASTER_we) reg_ral_regs_demo_CTRL_MASTER_next = h2l_ral_regs_demo_CTRL_MASTER_w;
    if (d2l_ral_regs_demo_CTRL_we) reg_ral_regs_demo_CTRL_MASTER_next = d2l_ral_regs_demo_CTRL_w [4] ;
    if (d2l_ral_regs_demo_CTRL_we) reg_ral_regs_demo_CTRL_DORD_next = d2l_ral_regs_demo_CTRL_w [5] ;
    if (d2l_ral_regs_demo_CTRL_we) reg_ral_regs_demo_CTRL_ENABLE_next = d2l_ral_regs_demo_CTRL_w [6] ;
    if (d2l_ral_regs_demo_CTRL_we) reg_ral_regs_demo_CTRL_CLK2X_next = d2l_ral_regs_demo_CTRL_w [7] ;
  end
  
  //------- reg assigns for ral_regs_demo_CTRL
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_ral_regs_demo_CTRL_MASTER <= #1 1'd0;
      rg_ral_regs_demo_CTRL_DORD <= #1 1'd0;
      rg_ral_regs_demo_CTRL_ENABLE <= #1 1'd0;
      rg_ral_regs_demo_CTRL_CLK2X <= #1 1'd0;
    end
    else begin
      rg_ral_regs_demo_CTRL_MASTER <= #1  reg_ral_regs_demo_CTRL_MASTER_next;
      rg_ral_regs_demo_CTRL_DORD <= #1  reg_ral_regs_demo_CTRL_DORD_next;
      rg_ral_regs_demo_CTRL_ENABLE <= #1  reg_ral_regs_demo_CTRL_ENABLE_next;
      rg_ral_regs_demo_CTRL_CLK2X <= #1  reg_ral_regs_demo_CTRL_CLK2X_next;
    end
  end
  
  //------- combinatorial assigns for ral_regs_demo_RCNT_SAT
  always @ (*) begin
    reg_ral_regs_demo_RCNT_SAT_en_next = rg_ral_regs_demo_RCNT_SAT_en;
    l2h_ral_regs_demo_RCNT_SAT_en_r = rg_ral_regs_demo_RCNT_SAT_en;
    reg_ral_regs_demo_RCNT_SAT_subch_next = rg_ral_regs_demo_RCNT_SAT_subch;
    reg_ral_regs_demo_RCNT_SAT_str_next = rg_ral_regs_demo_RCNT_SAT_str;
    if (h2l_ral_regs_demo_RCNT_SAT_subch_we) reg_ral_regs_demo_RCNT_SAT_subch_next = h2l_ral_regs_demo_RCNT_SAT_subch_w;
    if (h2l_ral_regs_demo_RCNT_SAT_str_we) reg_ral_regs_demo_RCNT_SAT_str_next = h2l_ral_regs_demo_RCNT_SAT_str_w;
    if (d2l_ral_regs_demo_RCNT_SAT_we) reg_ral_regs_demo_RCNT_SAT_en_next = d2l_ral_regs_demo_RCNT_SAT_w [31] ;
    if (d2l_ral_regs_demo_RCNT_SAT_we) reg_ral_regs_demo_RCNT_SAT_subch_next = d2l_ral_regs_demo_RCNT_SAT_w [30:26] ;
    if (d2l_ral_regs_demo_RCNT_SAT_re) reg_ral_regs_demo_RCNT_SAT_subch_next = 5'b0;
    if (d2l_ral_regs_demo_RCNT_SAT_we) reg_ral_regs_demo_RCNT_SAT_str_next = d2l_ral_regs_demo_RCNT_SAT_w [25:16] ;
    if (d2l_ral_regs_demo_RCNT_SAT_re) reg_ral_regs_demo_RCNT_SAT_str_next = 10'b0;
  end
  
  //------- reg assigns for ral_regs_demo_RCNT_SAT
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_ral_regs_demo_RCNT_SAT_en <= #1 1'd1;
      rg_ral_regs_demo_RCNT_SAT_subch <= #1 5'd0;
      rg_ral_regs_demo_RCNT_SAT_str <= #1 10'd0;
    end
    else begin
      rg_ral_regs_demo_RCNT_SAT_en <= #1  reg_ral_regs_demo_RCNT_SAT_en_next;
      rg_ral_regs_demo_RCNT_SAT_subch <= #1  reg_ral_regs_demo_RCNT_SAT_subch_next;
      rg_ral_regs_demo_RCNT_SAT_str <= #1  reg_ral_regs_demo_RCNT_SAT_str_next;
    end
  end
  
  //------- combinatorial assigns for ral_regs_demo_CTRL (pio read data)
  always @ (*) begin
    l2d_ral_regs_demo_CTRL_r = 32'b0;
    l2d_ral_regs_demo_CTRL_r [1:0]  = rg_ral_regs_demo_CTRL_PRESCALER;
    l2d_ral_regs_demo_CTRL_r [3:2]  = rg_ral_regs_demo_CTRL_MODE;
    l2d_ral_regs_demo_CTRL_r [4]  = rg_ral_regs_demo_CTRL_MASTER;
    l2d_ral_regs_demo_CTRL_r [5]  = rg_ral_regs_demo_CTRL_DORD;
    l2d_ral_regs_demo_CTRL_r [6]  = rg_ral_regs_demo_CTRL_ENABLE;
    l2d_ral_regs_demo_CTRL_r [7]  = rg_ral_regs_demo_CTRL_CLK2X;
  end
  
  //------- combinatorial assigns for ral_regs_demo_INTCTRL (pio read data)
  always @ (*) begin
    l2d_ral_regs_demo_INTCTRL_r = 32'b0;
    l2d_ral_regs_demo_INTCTRL_r [1:0]  = rg_ral_regs_demo_INTCTRL_INTLVL;
  end
  
endmodule

//
//---------- module addrmap_PICO_jrdl_decode
//
module addrmap_PICO_jrdl_decode
(
  clk,
  reset,
  leaf_dec_wr_data,
  leaf_dec_addr,
  leaf_dec_block_sel,
  leaf_dec_valid,
  leaf_dec_wr_dvld,
  leaf_dec_cycle,
  leaf_dec_wr_width,
  l2d_ral_regs_demo_CTRL_r,
  l2d_ral_regs_demo_INTCTRL_r,
  l2d_ral_regs_demo_STATUS_r,
  l2d_ral_regs_demo_RCNT_SAT_r,

  dec_leaf_rd_data,
  dec_leaf_ack,
  dec_leaf_nack,
  dec_leaf_accept,
  dec_leaf_reject,
  dec_leaf_retry_atomic,
  dec_leaf_data_width,
  d2l_ral_regs_demo_CTRL_w,
  d2l_ral_regs_demo_CTRL_we,
  d2l_ral_regs_demo_CTRL_re,
  d2l_ral_regs_demo_INTCTRL_w,
  d2l_ral_regs_demo_INTCTRL_we,
  d2l_ral_regs_demo_INTCTRL_re,
  d2l_ral_regs_demo_STATUS_w,
  d2l_ral_regs_demo_STATUS_we,
  d2l_ral_regs_demo_STATUS_re,
  d2l_ral_regs_demo_RCNT_SAT_w,
  d2l_ral_regs_demo_RCNT_SAT_we,
  d2l_ral_regs_demo_RCNT_SAT_re );

  //------- inputs
  input    clk;
  input    reset;
  input     [31:0] leaf_dec_wr_data;
  input     [31:0] leaf_dec_addr;
  input    leaf_dec_block_sel;
  input    leaf_dec_valid;
  input    leaf_dec_wr_dvld;
  input     [1:0] leaf_dec_cycle;
  input     [2:0] leaf_dec_wr_width;
  input     [31:0] l2d_ral_regs_demo_CTRL_r;
  input     [31:0] l2d_ral_regs_demo_INTCTRL_r;
  input     [31:0] l2d_ral_regs_demo_STATUS_r;
  input     [31:0] l2d_ral_regs_demo_RCNT_SAT_r;

  //------- outputs
  output     [31:0] dec_leaf_rd_data;
  output    dec_leaf_ack;
  output    dec_leaf_nack;
  output    dec_leaf_accept;
  output    dec_leaf_reject;
  output    dec_leaf_retry_atomic;
  output     [2:0] dec_leaf_data_width;
  output     [31:0] d2l_ral_regs_demo_CTRL_w;
  output    d2l_ral_regs_demo_CTRL_we;
  output    d2l_ral_regs_demo_CTRL_re;
  output     [31:0] d2l_ral_regs_demo_INTCTRL_w;
  output    d2l_ral_regs_demo_INTCTRL_we;
  output    d2l_ral_regs_demo_INTCTRL_re;
  output     [31:0] d2l_ral_regs_demo_STATUS_w;
  output    d2l_ral_regs_demo_STATUS_we;
  output    d2l_ral_regs_demo_STATUS_re;
  output     [31:0] d2l_ral_regs_demo_RCNT_SAT_w;
  output    d2l_ral_regs_demo_RCNT_SAT_we;
  output    d2l_ral_regs_demo_RCNT_SAT_re;


  //------- wire defines
  wire   [31:0] pio_dec_write_data;
  wire   [3:2] pio_dec_address;
  wire  pio_dec_read;
  wire  pio_dec_write;
  wire   [31:0] block_sel_addr;
  wire  block_sel;
  wire  leaf_dec_valid_active;
  wire  leaf_dec_wr_dvld_active;
  
  //------- reg defines
  reg   [31:0] d2l_ral_regs_demo_CTRL_w;
  reg  d2l_ral_regs_demo_CTRL_we;
  reg  d2l_ral_regs_demo_CTRL_re;
  reg   [31:0] d2l_ral_regs_demo_INTCTRL_w;
  reg  d2l_ral_regs_demo_INTCTRL_we;
  reg  d2l_ral_regs_demo_INTCTRL_re;
  reg   [31:0] d2l_ral_regs_demo_STATUS_w;
  reg  d2l_ral_regs_demo_STATUS_we;
  reg  d2l_ral_regs_demo_STATUS_re;
  reg   [31:0] d2l_ral_regs_demo_RCNT_SAT_w;
  reg  d2l_ral_regs_demo_RCNT_SAT_we;
  reg  d2l_ral_regs_demo_RCNT_SAT_re;
  reg  leaf_dec_valid_hld1;
  reg  leaf_dec_valid_hld1_next;
  reg  leaf_dec_wr_dvld_hld1;
  reg  leaf_dec_wr_dvld_hld1_next;
  reg  pio_write_active;
  reg  pio_read_active;
  reg   [3:2] pio_dec_address_d1;
  reg   [31:0] pio_dec_write_data_d1;
  reg   [31:0] dec_pio_read_data;
  reg   [31:0] dec_pio_read_data_d1;
  reg  dec_pio_ack;
  reg  dec_pio_nack;
  reg  dec_pio_ack_next;
  reg  dec_pio_nack_next;
  reg  pio_internal_ack;
  reg  pio_internal_nack;
  reg  pio_external_ack;
  reg  pio_external_nack;
  reg  pio_external_ack_next;
  reg  pio_external_nack_next;
  reg  pio_no_acks;
  reg  pio_activate_write;
  reg  pio_activate_read;
  reg   [31:0] dec_pio_read_data_next;
  reg  external_transaction_active;
  
  
  //------- assigns
  assign  pio_dec_write_data = leaf_dec_wr_data;
  assign  dec_leaf_rd_data = dec_pio_read_data;
  assign  dec_leaf_ack = dec_pio_ack;
  assign  dec_leaf_nack = dec_pio_nack;
  assign  pio_dec_address = leaf_dec_addr [3:2] ;
  assign  block_sel_addr = 32'h0;
  assign  block_sel = leaf_dec_block_sel;
  assign  leaf_dec_wr_dvld_active = leaf_dec_wr_dvld | leaf_dec_wr_dvld_hld1;
  assign  leaf_dec_valid_active = leaf_dec_valid | leaf_dec_valid_hld1;
  assign  dec_leaf_accept = leaf_dec_valid & block_sel;
  assign  dec_leaf_reject = leaf_dec_valid & ~block_sel;
  assign  pio_dec_read = block_sel & leaf_dec_valid_active & (leaf_dec_cycle == 2'b10);
  assign  pio_dec_write = block_sel & leaf_dec_wr_dvld_active & (leaf_dec_cycle[1] == 1'b0);
  assign  dec_leaf_retry_atomic = 1'b0;
  assign  dec_leaf_data_width = 3'b0;
  
  //------- combinatorial assigns for pio read data
  always @ (*) begin
    dec_pio_read_data = dec_pio_read_data_d1;
  end
  
  //------- reg assigns for pio read data
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      dec_pio_read_data_d1 <= #1  32'b0;
    end
    else begin
      dec_pio_read_data_d1 <= #1 dec_pio_read_data_next;
    end
  end
  
  //------- reg assigns for pio i/f
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      pio_write_active <= #1  1'b0;
      pio_read_active <= #1  1'b0;
    end
    else begin
      pio_write_active <= #1  pio_write_active ? pio_no_acks : pio_activate_write;
      pio_read_active <= #1  pio_read_active ? pio_no_acks : pio_activate_read;
    end
    pio_dec_address_d1 <= #1   pio_dec_address;
    pio_dec_write_data_d1 <= #1  pio_dec_write_data;
  end
  
  //------- combinatorial assigns for leaf i/f
  always @ (*) begin
    leaf_dec_valid_hld1_next = leaf_dec_valid | leaf_dec_valid_hld1;
    if (dec_pio_ack_next | dec_pio_nack_next) leaf_dec_valid_hld1_next = 1'b0;
    leaf_dec_wr_dvld_hld1_next = leaf_dec_wr_dvld | leaf_dec_wr_dvld_hld1;
    if (dec_pio_ack_next | dec_pio_nack_next | leaf_dec_valid) leaf_dec_wr_dvld_hld1_next = 1'b0;
  end
  
  //------- reg assigns for leaf i/f
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      leaf_dec_valid_hld1 <= #1  1'b0;
      leaf_dec_wr_dvld_hld1 <= #1  1'b0;
    end
    else begin
      leaf_dec_valid_hld1 <= #1 leaf_dec_valid_hld1_next;
      leaf_dec_wr_dvld_hld1 <= #1 leaf_dec_wr_dvld_hld1_next;
    end
  end
  
  //------- combinatorial assigns for pio ack/nack
  always @ (*) begin
    pio_internal_nack = (pio_read_active | pio_write_active) & ~pio_internal_ack & ~external_transaction_active;
    dec_pio_ack_next = (pio_internal_ack | (pio_external_ack_next & external_transaction_active));
    dec_pio_nack_next = (pio_internal_nack | (pio_external_nack_next & external_transaction_active));
    pio_no_acks = ~(dec_pio_ack | dec_pio_nack | pio_external_ack | pio_external_nack);
    pio_activate_write = (pio_dec_write & ~(dec_pio_ack | dec_pio_nack));
    pio_activate_read = (pio_dec_read & ~(dec_pio_ack | dec_pio_nack));
  end
  
  //------- reg assigns for pio ack/nack
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      dec_pio_ack <= #1 1'b0;
      dec_pio_nack <= #1 1'b0;
      pio_external_ack <= #1  1'b0;
      pio_external_nack <= #1  1'b0;
    end
    else begin
      dec_pio_ack <= #1 dec_pio_ack ? 1'b0 : dec_pio_ack_next;
      dec_pio_nack <= #1 dec_pio_nack ? 1'b0 : dec_pio_nack_next;
      pio_external_ack <= #1 pio_external_ack_next;
      pio_external_nack <= #1 pio_external_nack_next;
    end
  end
  
  
  //------- address decode
  always @ (*) begin
    pio_internal_ack = 1'b0;
    external_transaction_active = 1'b0;
    pio_external_ack_next = 1'b0;
    pio_external_nack_next = 1'b0;
    dec_pio_read_data_next = 32'b0;
    
    d2l_ral_regs_demo_CTRL_w = pio_dec_write_data_d1  [31:0] ;
    d2l_ral_regs_demo_CTRL_we = 1'b0;
    d2l_ral_regs_demo_CTRL_re = 1'b0;
    d2l_ral_regs_demo_INTCTRL_w = pio_dec_write_data_d1  [31:0] ;
    d2l_ral_regs_demo_INTCTRL_we = 1'b0;
    d2l_ral_regs_demo_INTCTRL_re = 1'b0;
    d2l_ral_regs_demo_STATUS_w = pio_dec_write_data_d1  [31:0] ;
    d2l_ral_regs_demo_STATUS_we = 1'b0;
    d2l_ral_regs_demo_STATUS_re = 1'b0;
    d2l_ral_regs_demo_RCNT_SAT_w = pio_dec_write_data_d1  [31:0] ;
    d2l_ral_regs_demo_RCNT_SAT_we = 1'b0;
    d2l_ral_regs_demo_RCNT_SAT_re = 1'b0;
    
    casez(pio_dec_address_d1)
    //  Register: ral_regs_demo.CTRL     Address: 0x0     External: false
    2'b00:
      begin
        d2l_ral_regs_demo_CTRL_we = pio_write_active & ~dec_pio_ack;
        d2l_ral_regs_demo_CTRL_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_ral_regs_demo_CTRL_r;
      end
    //  Register: ral_regs_demo.INTCTRL     Address: 0x4     External: false
    2'b01:
      begin
        d2l_ral_regs_demo_INTCTRL_we = pio_write_active & ~dec_pio_ack;
        d2l_ral_regs_demo_INTCTRL_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_ral_regs_demo_INTCTRL_r;
      end
    //  Register: ral_regs_demo.STATUS     Address: 0x8     External: false
    2'b10:
      begin
        d2l_ral_regs_demo_STATUS_we = pio_write_active & ~dec_pio_ack;
        d2l_ral_regs_demo_STATUS_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active;
        dec_pio_read_data_next  [31:0]  = l2d_ral_regs_demo_STATUS_r;
      end
    //  Register: ral_regs_demo.RCNT_SAT     Address: 0xc     External: false
    2'b11:
      begin
        d2l_ral_regs_demo_RCNT_SAT_we = pio_write_active & ~dec_pio_ack;
        d2l_ral_regs_demo_RCNT_SAT_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_ral_regs_demo_RCNT_SAT_r;
      end
    endcase
  end
  
endmodule

//
//---------- module addrmap_PICO_pio
//
module addrmap_PICO_pio
(
  clk,
  reset,
  h2l_ral_regs_demo_CTRL_PRESCALER_w,
  h2l_ral_regs_demo_CTRL_MODE_w,
  h2l_ral_regs_demo_CTRL_MASTER_w,
  h2l_ral_regs_demo_CTRL_MASTER_we,
  h2l_ral_regs_demo_STATUS_WRCOL_w,
  h2l_ral_regs_demo_STATUS_WRCOL_we,
  h2l_ral_regs_demo_STATUS_IF_w,
  h2l_ral_regs_demo_STATUS_IF_we,
  h2l_ral_regs_demo_RCNT_SAT_subch_w,
  h2l_ral_regs_demo_RCNT_SAT_subch_we,
  h2l_ral_regs_demo_RCNT_SAT_str_w,
  h2l_ral_regs_demo_RCNT_SAT_str_we,
  leaf_dec_wr_data,
  leaf_dec_addr,
  leaf_dec_block_sel,
  leaf_dec_valid,
  leaf_dec_wr_dvld,
  leaf_dec_cycle,
  leaf_dec_wr_width,

  l2h_ral_regs_demo_CTRL_MASTER_r,
  l2h_ral_regs_demo_CTRL_DORD_r,
  l2h_ral_regs_demo_CTRL_ENABLE_r,
  l2h_ral_regs_demo_CTRL_CLK2X_r,
  l2h_ral_regs_demo_INTCTRL_INTLVL_r,
  l2h_ral_regs_demo_STATUS_WRCOL_r,
  l2h_ral_regs_demo_STATUS_IF_r,
  l2h_ral_regs_demo_RCNT_SAT_en_r,
  dec_leaf_rd_data,
  dec_leaf_ack,
  dec_leaf_nack,
  dec_leaf_accept,
  dec_leaf_reject,
  dec_leaf_retry_atomic,
  dec_leaf_data_width );

  //------- inputs
  input    clk;
  input    reset;
  input     [1:0] h2l_ral_regs_demo_CTRL_PRESCALER_w;
  input     [1:0] h2l_ral_regs_demo_CTRL_MODE_w;
  input    h2l_ral_regs_demo_CTRL_MASTER_w;
  input    h2l_ral_regs_demo_CTRL_MASTER_we;
  input    h2l_ral_regs_demo_STATUS_WRCOL_w;
  input    h2l_ral_regs_demo_STATUS_WRCOL_we;
  input    h2l_ral_regs_demo_STATUS_IF_w;
  input    h2l_ral_regs_demo_STATUS_IF_we;
  input     [4:0] h2l_ral_regs_demo_RCNT_SAT_subch_w;
  input    h2l_ral_regs_demo_RCNT_SAT_subch_we;
  input     [9:0] h2l_ral_regs_demo_RCNT_SAT_str_w;
  input    h2l_ral_regs_demo_RCNT_SAT_str_we;
  input     [31:0] leaf_dec_wr_data;
  input     [31:0] leaf_dec_addr;
  input    leaf_dec_block_sel;
  input    leaf_dec_valid;
  input    leaf_dec_wr_dvld;
  input     [1:0] leaf_dec_cycle;
  input     [2:0] leaf_dec_wr_width;

  //------- outputs
  output    l2h_ral_regs_demo_CTRL_MASTER_r;
  output    l2h_ral_regs_demo_CTRL_DORD_r;
  output    l2h_ral_regs_demo_CTRL_ENABLE_r;
  output    l2h_ral_regs_demo_CTRL_CLK2X_r;
  output     [1:0] l2h_ral_regs_demo_INTCTRL_INTLVL_r;
  output    l2h_ral_regs_demo_STATUS_WRCOL_r;
  output    l2h_ral_regs_demo_STATUS_IF_r;
  output    l2h_ral_regs_demo_RCNT_SAT_en_r;
  output     [31:0] dec_leaf_rd_data;
  output    dec_leaf_ack;
  output    dec_leaf_nack;
  output    dec_leaf_accept;
  output    dec_leaf_reject;
  output    dec_leaf_retry_atomic;
  output     [2:0] dec_leaf_data_width;


  //------- wire defines
  wire   [31:0] d2l_ral_regs_demo_CTRL_w;
  wire  d2l_ral_regs_demo_CTRL_we;
  wire  d2l_ral_regs_demo_CTRL_re;
  wire   [31:0] d2l_ral_regs_demo_INTCTRL_w;
  wire  d2l_ral_regs_demo_INTCTRL_we;
  wire  d2l_ral_regs_demo_INTCTRL_re;
  wire   [31:0] d2l_ral_regs_demo_STATUS_w;
  wire  d2l_ral_regs_demo_STATUS_we;
  wire  d2l_ral_regs_demo_STATUS_re;
  wire   [31:0] d2l_ral_regs_demo_RCNT_SAT_w;
  wire  d2l_ral_regs_demo_RCNT_SAT_we;
  wire  d2l_ral_regs_demo_RCNT_SAT_re;
  wire   [31:0] l2d_ral_regs_demo_CTRL_r;
  wire   [31:0] l2d_ral_regs_demo_INTCTRL_r;
  wire   [31:0] l2d_ral_regs_demo_STATUS_r;
  wire   [31:0] l2d_ral_regs_demo_RCNT_SAT_r;
  
  
  addrmap_PICO_jrdl_decode pio_decode (
    .clk(clk),
    .reset(reset),
    .leaf_dec_wr_data(leaf_dec_wr_data),
    .leaf_dec_addr(leaf_dec_addr),
    .leaf_dec_block_sel(leaf_dec_block_sel),
    .leaf_dec_valid(leaf_dec_valid),
    .leaf_dec_wr_dvld(leaf_dec_wr_dvld),
    .leaf_dec_cycle(leaf_dec_cycle),
    .leaf_dec_wr_width(leaf_dec_wr_width),
    .l2d_ral_regs_demo_CTRL_r(l2d_ral_regs_demo_CTRL_r),
    .l2d_ral_regs_demo_INTCTRL_r(l2d_ral_regs_demo_INTCTRL_r),
    .l2d_ral_regs_demo_STATUS_r(l2d_ral_regs_demo_STATUS_r),
    .l2d_ral_regs_demo_RCNT_SAT_r(l2d_ral_regs_demo_RCNT_SAT_r),
    .dec_leaf_rd_data(dec_leaf_rd_data),
    .dec_leaf_ack(dec_leaf_ack),
    .dec_leaf_nack(dec_leaf_nack),
    .dec_leaf_accept(dec_leaf_accept),
    .dec_leaf_reject(dec_leaf_reject),
    .dec_leaf_retry_atomic(dec_leaf_retry_atomic),
    .dec_leaf_data_width(dec_leaf_data_width),
    .d2l_ral_regs_demo_CTRL_w(d2l_ral_regs_demo_CTRL_w),
    .d2l_ral_regs_demo_CTRL_we(d2l_ral_regs_demo_CTRL_we),
    .d2l_ral_regs_demo_CTRL_re(d2l_ral_regs_demo_CTRL_re),
    .d2l_ral_regs_demo_INTCTRL_w(d2l_ral_regs_demo_INTCTRL_w),
    .d2l_ral_regs_demo_INTCTRL_we(d2l_ral_regs_demo_INTCTRL_we),
    .d2l_ral_regs_demo_INTCTRL_re(d2l_ral_regs_demo_INTCTRL_re),
    .d2l_ral_regs_demo_STATUS_w(d2l_ral_regs_demo_STATUS_w),
    .d2l_ral_regs_demo_STATUS_we(d2l_ral_regs_demo_STATUS_we),
    .d2l_ral_regs_demo_STATUS_re(d2l_ral_regs_demo_STATUS_re),
    .d2l_ral_regs_demo_RCNT_SAT_w(d2l_ral_regs_demo_RCNT_SAT_w),
    .d2l_ral_regs_demo_RCNT_SAT_we(d2l_ral_regs_demo_RCNT_SAT_we),
    .d2l_ral_regs_demo_RCNT_SAT_re(d2l_ral_regs_demo_RCNT_SAT_re) );
    
  addrmap_PICO_jrdl_logic pio_logic (
    .clk(clk),
    .reset(reset),
    .d2l_ral_regs_demo_CTRL_w(d2l_ral_regs_demo_CTRL_w),
    .d2l_ral_regs_demo_CTRL_we(d2l_ral_regs_demo_CTRL_we),
    .d2l_ral_regs_demo_CTRL_re(d2l_ral_regs_demo_CTRL_re),
    .d2l_ral_regs_demo_INTCTRL_w(d2l_ral_regs_demo_INTCTRL_w),
    .d2l_ral_regs_demo_INTCTRL_we(d2l_ral_regs_demo_INTCTRL_we),
    .d2l_ral_regs_demo_INTCTRL_re(d2l_ral_regs_demo_INTCTRL_re),
    .d2l_ral_regs_demo_STATUS_w(d2l_ral_regs_demo_STATUS_w),
    .d2l_ral_regs_demo_STATUS_we(d2l_ral_regs_demo_STATUS_we),
    .d2l_ral_regs_demo_STATUS_re(d2l_ral_regs_demo_STATUS_re),
    .d2l_ral_regs_demo_RCNT_SAT_w(d2l_ral_regs_demo_RCNT_SAT_w),
    .d2l_ral_regs_demo_RCNT_SAT_we(d2l_ral_regs_demo_RCNT_SAT_we),
    .d2l_ral_regs_demo_RCNT_SAT_re(d2l_ral_regs_demo_RCNT_SAT_re),
    .h2l_ral_regs_demo_CTRL_PRESCALER_w(h2l_ral_regs_demo_CTRL_PRESCALER_w),
    .h2l_ral_regs_demo_CTRL_MODE_w(h2l_ral_regs_demo_CTRL_MODE_w),
    .h2l_ral_regs_demo_CTRL_MASTER_w(h2l_ral_regs_demo_CTRL_MASTER_w),
    .h2l_ral_regs_demo_CTRL_MASTER_we(h2l_ral_regs_demo_CTRL_MASTER_we),
    .h2l_ral_regs_demo_STATUS_WRCOL_w(h2l_ral_regs_demo_STATUS_WRCOL_w),
    .h2l_ral_regs_demo_STATUS_WRCOL_we(h2l_ral_regs_demo_STATUS_WRCOL_we),
    .h2l_ral_regs_demo_STATUS_IF_w(h2l_ral_regs_demo_STATUS_IF_w),
    .h2l_ral_regs_demo_STATUS_IF_we(h2l_ral_regs_demo_STATUS_IF_we),
    .h2l_ral_regs_demo_RCNT_SAT_subch_w(h2l_ral_regs_demo_RCNT_SAT_subch_w),
    .h2l_ral_regs_demo_RCNT_SAT_subch_we(h2l_ral_regs_demo_RCNT_SAT_subch_we),
    .h2l_ral_regs_demo_RCNT_SAT_str_w(h2l_ral_regs_demo_RCNT_SAT_str_w),
    .h2l_ral_regs_demo_RCNT_SAT_str_we(h2l_ral_regs_demo_RCNT_SAT_str_we),
    .l2d_ral_regs_demo_CTRL_r(l2d_ral_regs_demo_CTRL_r),
    .l2d_ral_regs_demo_INTCTRL_r(l2d_ral_regs_demo_INTCTRL_r),
    .l2d_ral_regs_demo_STATUS_r(l2d_ral_regs_demo_STATUS_r),
    .l2d_ral_regs_demo_RCNT_SAT_r(l2d_ral_regs_demo_RCNT_SAT_r),
    .l2h_ral_regs_demo_CTRL_MASTER_r(l2h_ral_regs_demo_CTRL_MASTER_r),
    .l2h_ral_regs_demo_CTRL_DORD_r(l2h_ral_regs_demo_CTRL_DORD_r),
    .l2h_ral_regs_demo_CTRL_ENABLE_r(l2h_ral_regs_demo_CTRL_ENABLE_r),
    .l2h_ral_regs_demo_CTRL_CLK2X_r(l2h_ral_regs_demo_CTRL_CLK2X_r),
    .l2h_ral_regs_demo_INTCTRL_INTLVL_r(l2h_ral_regs_demo_INTCTRL_INTLVL_r),
    .l2h_ral_regs_demo_STATUS_WRCOL_r(l2h_ral_regs_demo_STATUS_WRCOL_r),
    .l2h_ral_regs_demo_STATUS_IF_r(l2h_ral_regs_demo_STATUS_IF_r),
    .l2h_ral_regs_demo_RCNT_SAT_en_r(l2h_ral_regs_demo_RCNT_SAT_en_r) );
    
endmodule

