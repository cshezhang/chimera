// This program was cloned from: https://github.com/rsnikhil/RISCV_Piccolo_v1
// License: MIT License

//
// Generated by Bluespec Compiler, version 2016.03.beta1 (build 34761, 2016-03-16)
//
// On Sat Jul  9 18:53:12 EDT 2016
//
//
// Ports:
// Name                         I/O  size props
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1 reg
// RDY_from_fabric_request_put    O     1 reg
// from_fabric_response_get       O    39 reg
// RDY_from_fabric_response_get   O     1 reg
// to_raw_mem_request_get         O   316 reg
// RDY_to_raw_mem_request_get     O     1 reg
// RDY_to_raw_mem_response_put    O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// from_fabric_request_put        I    70 reg
// to_raw_mem_response_put        I   256 reg
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_from_fabric_request_put     I     1
// EN_to_raw_mem_response_put     I     1
// EN_from_fabric_response_get    I     1
// EN_to_raw_mem_request_get      I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMem_Controller(CLK,
			RST_N,

			EN_server_reset_request_put,
			RDY_server_reset_request_put,

			EN_server_reset_response_get,
			RDY_server_reset_response_get,

			from_fabric_request_put,
			EN_from_fabric_request_put,
			RDY_from_fabric_request_put,

			EN_from_fabric_response_get,
			from_fabric_response_get,
			RDY_from_fabric_response_get,

			EN_to_raw_mem_request_get,
			to_raw_mem_request_get,
			RDY_to_raw_mem_request_get,

			to_raw_mem_response_put,
			EN_to_raw_mem_response_put,
			RDY_to_raw_mem_response_put);
  input  CLK;
  input  RST_N;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method from_fabric_request_put
  input  [69 : 0] from_fabric_request_put;
  input  EN_from_fabric_request_put;
  output RDY_from_fabric_request_put;

  // actionvalue method from_fabric_response_get
  input  EN_from_fabric_response_get;
  output [38 : 0] from_fabric_response_get;
  output RDY_from_fabric_response_get;

  // actionvalue method to_raw_mem_request_get
  input  EN_to_raw_mem_request_get;
  output [315 : 0] to_raw_mem_request_get;
  output RDY_to_raw_mem_request_get;

  // action method to_raw_mem_response_put
  input  [255 : 0] to_raw_mem_response_put;
  input  EN_to_raw_mem_response_put;
  output RDY_to_raw_mem_response_put;

  // signals for module outputs
  wire [315 : 0] to_raw_mem_request_get;
  wire [38 : 0] from_fabric_response_get;
  wire RDY_from_fabric_request_put,
       RDY_from_fabric_response_get,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_to_raw_mem_request_get,
       RDY_to_raw_mem_response_put;

  // register cfg_verbosity
  reg [31 : 0] cfg_verbosity;
  wire [31 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register rg_cached_addr
  reg [26 : 0] rg_cached_addr;
  reg [26 : 0] rg_cached_addr$D_IN;
  wire rg_cached_addr$EN;

  // register rg_cached_burst
  reg [255 : 0] rg_cached_burst;
  reg [255 : 0] rg_cached_burst$D_IN;
  wire rg_cached_burst$EN;

  // register rg_cached_clean
  reg rg_cached_clean;
  reg rg_cached_clean$D_IN;
  wire rg_cached_clean$EN;

  // register rg_rsp_burst
  reg [255 : 0] rg_rsp_burst;
  wire [255 : 0] rg_rsp_burst$D_IN;
  wire rg_rsp_burst$EN;

  // register rg_rsp_burst_countdown
  reg [2 : 0] rg_rsp_burst_countdown;
  wire [2 : 0] rg_rsp_burst_countdown$D_IN;
  wire rg_rsp_burst_countdown$EN;

  // register rg_rsp_op
  reg rg_rsp_op;
  wire rg_rsp_op$D_IN, rg_rsp_op$EN;

  // register rg_rsp_size
  reg [2 : 0] rg_rsp_size;
  wire [2 : 0] rg_rsp_size$D_IN;
  wire rg_rsp_size$EN;

  // register rg_rsp_status
  reg rg_rsp_status;
  wire rg_rsp_status$D_IN, rg_rsp_status$EN;

  // register rg_state
  reg [2 : 0] rg_state;
  reg [2 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // ports of submodule f_fabric_reqs
  wire [69 : 0] f_fabric_reqs$D_IN, f_fabric_reqs$D_OUT;
  wire f_fabric_reqs$CLR,
       f_fabric_reqs$DEQ,
       f_fabric_reqs$EMPTY_N,
       f_fabric_reqs$ENQ,
       f_fabric_reqs$FULL_N;

  // ports of submodule f_fabric_rsps
  reg [38 : 0] f_fabric_rsps$D_IN;
  wire [38 : 0] f_fabric_rsps$D_OUT;
  wire f_fabric_rsps$CLR,
       f_fabric_rsps$DEQ,
       f_fabric_rsps$EMPTY_N,
       f_fabric_rsps$ENQ,
       f_fabric_rsps$FULL_N;

  // ports of submodule f_raw_mem_reqs
  reg [315 : 0] f_raw_mem_reqs$D_IN;
  wire [315 : 0] f_raw_mem_reqs$D_OUT;
  wire f_raw_mem_reqs$CLR,
       f_raw_mem_reqs$DEQ,
       f_raw_mem_reqs$EMPTY_N,
       f_raw_mem_reqs$ENQ,
       f_raw_mem_reqs$FULL_N;

  // ports of submodule f_raw_mem_rsps
  wire [255 : 0] f_raw_mem_rsps$D_IN, f_raw_mem_rsps$D_OUT;
  wire f_raw_mem_rsps$CLR,
       f_raw_mem_rsps$DEQ,
       f_raw_mem_rsps$EMPTY_N,
       f_raw_mem_rsps$ENQ,
       f_raw_mem_rsps$FULL_N;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_clear,
       CAN_FIRE_RL_rl_config,
       CAN_FIRE_RL_rl_invalid_address,
       CAN_FIRE_RL_rl_miss_clean_req,
       CAN_FIRE_RL_rl_process_req,
       CAN_FIRE_RL_rl_reload,
       CAN_FIRE_RL_rl_reset,
       CAN_FIRE_RL_rl_send_rsp,
       CAN_FIRE_RL_rl_writeback_dirty,
       CAN_FIRE_from_fabric_request_put,
       CAN_FIRE_from_fabric_response_get,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_to_raw_mem_request_get,
       CAN_FIRE_to_raw_mem_response_put,
       WILL_FIRE_RL_rl_clear,
       WILL_FIRE_RL_rl_config,
       WILL_FIRE_RL_rl_invalid_address,
       WILL_FIRE_RL_rl_miss_clean_req,
       WILL_FIRE_RL_rl_process_req,
       WILL_FIRE_RL_rl_reload,
       WILL_FIRE_RL_rl_reset,
       WILL_FIRE_RL_rl_send_rsp,
       WILL_FIRE_RL_rl_writeback_dirty,
       WILL_FIRE_from_fabric_request_put,
       WILL_FIRE_from_fabric_response_get,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_to_raw_mem_request_get,
       WILL_FIRE_to_raw_mem_response_put;

  // inputs to muxes for submodule ports
  reg [255 : 0] MUX_rg_cached_burst$write_1__VAL_2;
  wire [315 : 0] MUX_f_raw_mem_reqs$enq_1__VAL_1,
		 MUX_f_raw_mem_reqs$enq_1__VAL_2,
		 MUX_f_raw_mem_reqs$enq_1__VAL_3;
  wire [255 : 0] MUX_rg_rsp_burst$write_1__VAL_1,
		 MUX_rg_rsp_burst$write_1__VAL_2;
  wire [38 : 0] MUX_f_fabric_rsps$enq_1__VAL_1,
		MUX_f_fabric_rsps$enq_1__VAL_2,
		MUX_f_fabric_rsps$enq_1__VAL_3,
		MUX_f_fabric_rsps$enq_1__VAL_4;
  wire [26 : 0] MUX_rg_cached_addr$write_1__VAL_2;
  wire [2 : 0] MUX_rg_rsp_burst_countdown$write_1__VAL_1,
	       MUX_rg_rsp_burst_countdown$write_1__VAL_2;
  wire MUX_f_fabric_rsps$enq_1__SEL_1,
       MUX_f_fabric_rsps$enq_1__SEL_2,
       MUX_rg_cached_addr$write_1__SEL_3,
       MUX_rg_cached_burst$write_1__SEL_2,
       MUX_rg_state$write_1__SEL_4;

  // remaining internal signals
  reg [31 : 0] SEL_ARR_rg_cached_burst_7_BITS_31_TO_0_8_rg_ca_ETC___d108,
	       n__h10541,
	       n__h8586,
	       v__h1186,
	       v__h1192,
	       v__h13411,
	       v__h13417,
	       v__h15342,
	       v__h15348,
	       v__h15591,
	       v__h15597,
	       v__h15775,
	       v__h15781,
	       v__h15935,
	       v__h15941,
	       v__h17326,
	       v__h17332,
	       v__h17421,
	       v__h17427,
	       v__h2437,
	       v__h2443,
	       v__h2585,
	       v__h2591,
	       v__h3744,
	       v__h3750,
	       v__h4258,
	       v__h4264;
  wire [255 : 0] IF_f_fabric_reqs_first__4_BITS_36_TO_34_07_EQ__ETC___d157,
		 IF_f_fabric_reqs_first__4_BITS_36_TO_34_07_EQ__ETC___d184;
  wire [191 : 0] IF_f_fabric_reqs_first__4_BITS_36_TO_34_07_EQ__ETC___d154,
		 IF_f_fabric_reqs_first__4_BITS_36_TO_34_07_EQ__ETC___d181;
  wire [127 : 0] IF_f_fabric_reqs_first__4_BITS_36_TO_34_07_EQ__ETC___d151,
		 IF_f_fabric_reqs_first__4_BITS_36_TO_34_07_EQ__ETC___d178;
  wire [31 : 0] word__h10602,
		word__h10725,
		word__h10812,
		word__h10899,
		word__h8647,
		word__h8728,
		y_avValue_snd_fst__h16056;
  wire [26 : 0] x__h16176;
  wire NOT_cfg_verbosity_read_ULE_1_8___d59,
       cfg_verbosity_read_ULE_2___d29,
       f_fabric_reqs_first__4_BITS_63_TO_32_5_ULE_209_ETC___d16,
       f_fabric_reqs_first__4_BITS_63_TO_32_5_ULE_322_ETC___d245,
       f_fabric_reqs_first__4_BITS_63_TO_32_5_ULT_0xC_ETC___d243,
       f_raw_mem_reqs_i_notFull_AND_NOT_rg_cached_add_ETC___d278,
       rg_cached_addr_8_EQ_f_fabric_reqs_first__4_BIT_ETC___d20;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method from_fabric_request_put
  assign RDY_from_fabric_request_put = f_fabric_reqs$FULL_N ;
  assign CAN_FIRE_from_fabric_request_put = f_fabric_reqs$FULL_N ;
  assign WILL_FIRE_from_fabric_request_put = EN_from_fabric_request_put ;

  // actionvalue method from_fabric_response_get
  assign from_fabric_response_get = f_fabric_rsps$D_OUT ;
  assign RDY_from_fabric_response_get = f_fabric_rsps$EMPTY_N ;
  assign CAN_FIRE_from_fabric_response_get = f_fabric_rsps$EMPTY_N ;
  assign WILL_FIRE_from_fabric_response_get = EN_from_fabric_response_get ;

  // actionvalue method to_raw_mem_request_get
  assign to_raw_mem_request_get = f_raw_mem_reqs$D_OUT ;
  assign RDY_to_raw_mem_request_get = f_raw_mem_reqs$EMPTY_N ;
  assign CAN_FIRE_to_raw_mem_request_get = f_raw_mem_reqs$EMPTY_N ;
  assign WILL_FIRE_to_raw_mem_request_get = EN_to_raw_mem_request_get ;

  // action method to_raw_mem_response_put
  assign RDY_to_raw_mem_response_put = f_raw_mem_rsps$FULL_N ;
  assign CAN_FIRE_to_raw_mem_response_put = f_raw_mem_rsps$FULL_N ;
  assign WILL_FIRE_to_raw_mem_response_put = EN_to_raw_mem_response_put ;

  // submodule f_fabric_reqs
  FIFO2 #(.width(32'd70), .guarded(32'd1)) f_fabric_reqs(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(f_fabric_reqs$D_IN),
							 .ENQ(f_fabric_reqs$ENQ),
							 .DEQ(f_fabric_reqs$DEQ),
							 .CLR(f_fabric_reqs$CLR),
							 .D_OUT(f_fabric_reqs$D_OUT),
							 .FULL_N(f_fabric_reqs$FULL_N),
							 .EMPTY_N(f_fabric_reqs$EMPTY_N));

  // submodule f_fabric_rsps
  FIFO2 #(.width(32'd39), .guarded(32'd1)) f_fabric_rsps(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(f_fabric_rsps$D_IN),
							 .ENQ(f_fabric_rsps$ENQ),
							 .DEQ(f_fabric_rsps$DEQ),
							 .CLR(f_fabric_rsps$CLR),
							 .D_OUT(f_fabric_rsps$D_OUT),
							 .FULL_N(f_fabric_rsps$FULL_N),
							 .EMPTY_N(f_fabric_rsps$EMPTY_N));

  // submodule f_raw_mem_reqs
  FIFO2 #(.width(32'd316), .guarded(32'd1)) f_raw_mem_reqs(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(f_raw_mem_reqs$D_IN),
							   .ENQ(f_raw_mem_reqs$ENQ),
							   .DEQ(f_raw_mem_reqs$DEQ),
							   .CLR(f_raw_mem_reqs$CLR),
							   .D_OUT(f_raw_mem_reqs$D_OUT),
							   .FULL_N(f_raw_mem_reqs$FULL_N),
							   .EMPTY_N(f_raw_mem_reqs$EMPTY_N));

  // submodule f_raw_mem_rsps
  FIFO2 #(.width(32'd256), .guarded(32'd1)) f_raw_mem_rsps(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(f_raw_mem_rsps$D_IN),
							   .ENQ(f_raw_mem_rsps$ENQ),
							   .DEQ(f_raw_mem_rsps$DEQ),
							   .CLR(f_raw_mem_rsps$CLR),
							   .D_OUT(f_raw_mem_rsps$D_OUT),
							   .FULL_N(f_raw_mem_rsps$FULL_N),
							   .EMPTY_N(f_raw_mem_rsps$EMPTY_N));

  // submodule f_reset_reqs
  FIFO20 #(.guarded(32'd1)) f_reset_reqs(.RST(RST_N),
					 .CLK(CLK),
					 .ENQ(f_reset_reqs$ENQ),
					 .DEQ(f_reset_reqs$DEQ),
					 .CLR(f_reset_reqs$CLR),
					 .FULL_N(f_reset_reqs$FULL_N),
					 .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO20 #(.guarded(32'd1)) f_reset_rsps(.RST(RST_N),
					 .CLK(CLK),
					 .ENQ(f_reset_rsps$ENQ),
					 .DEQ(f_reset_rsps$DEQ),
					 .CLR(f_reset_rsps$CLR),
					 .FULL_N(f_reset_rsps$FULL_N),
					 .EMPTY_N(f_reset_rsps$EMPTY_N));

  // rule RL_rl_writeback_dirty
  assign CAN_FIRE_RL_rl_writeback_dirty =
	     f_raw_mem_reqs$FULL_N && f_fabric_reqs$EMPTY_N &&
	     rg_state == 3'd2 &&
	     f_fabric_reqs_first__4_BITS_63_TO_32_5_ULE_209_ETC___d16 &&
	     !rg_cached_addr_8_EQ_f_fabric_reqs_first__4_BIT_ETC___d20 &&
	     !rg_cached_clean ;
  assign WILL_FIRE_RL_rl_writeback_dirty = CAN_FIRE_RL_rl_writeback_dirty ;

  // rule RL_rl_miss_clean_req
  assign CAN_FIRE_RL_rl_miss_clean_req =
	     f_fabric_reqs$EMPTY_N && f_raw_mem_reqs$FULL_N &&
	     rg_state == 3'd2 &&
	     f_fabric_reqs_first__4_BITS_63_TO_32_5_ULE_209_ETC___d16 &&
	     !rg_cached_addr_8_EQ_f_fabric_reqs_first__4_BIT_ETC___d20 &&
	     rg_cached_clean ;
  assign WILL_FIRE_RL_rl_miss_clean_req = CAN_FIRE_RL_rl_miss_clean_req ;

  // rule RL_rl_reload
  assign CAN_FIRE_RL_rl_reload =
	     f_raw_mem_rsps$EMPTY_N &&
	     (cfg_verbosity_read_ULE_2___d29 || f_fabric_reqs$EMPTY_N) &&
	     rg_state == 3'd3 ;
  assign WILL_FIRE_RL_rl_reload = CAN_FIRE_RL_rl_reload ;

  // rule RL_rl_process_req
  assign CAN_FIRE_RL_rl_process_req =
	     f_fabric_reqs$EMPTY_N && rg_state == 3'd2 &&
	     f_fabric_reqs_first__4_BITS_63_TO_32_5_ULE_209_ETC___d16 &&
	     rg_cached_addr_8_EQ_f_fabric_reqs_first__4_BIT_ETC___d20 ;
  assign WILL_FIRE_RL_rl_process_req = CAN_FIRE_RL_rl_process_req ;

  // rule RL_rl_send_rsp
  assign CAN_FIRE_RL_rl_send_rsp =
	     f_fabric_reqs$EMPTY_N && f_fabric_rsps$FULL_N &&
	     rg_state == 3'd4 ;
  assign WILL_FIRE_RL_rl_send_rsp = CAN_FIRE_RL_rl_send_rsp ;

  // rule RL_rl_config
  assign CAN_FIRE_RL_rl_config =
	     f_fabric_reqs$EMPTY_N &&
	     (f_fabric_reqs$D_OUT[67] && f_fabric_reqs$D_OUT[66:64] == 3'd2 &&
	      f_fabric_reqs$D_OUT[39:32] == 8'h80 ||
	      f_fabric_rsps$FULL_N) &&
	     rg_state == 3'd2 &&
	     !f_fabric_reqs_first__4_BITS_63_TO_32_5_ULT_0xC_ETC___d243 &&
	     f_fabric_reqs_first__4_BITS_63_TO_32_5_ULE_322_ETC___d245 ;
  assign WILL_FIRE_RL_rl_config = CAN_FIRE_RL_rl_config ;

  // rule RL_rl_clear
  assign CAN_FIRE_RL_rl_clear =
	     f_raw_mem_reqs_i_notFull_AND_NOT_rg_cached_add_ETC___d278 &&
	     rg_state == 3'd1 ;
  assign WILL_FIRE_RL_rl_clear = CAN_FIRE_RL_rl_clear ;

  // rule RL_rl_invalid_address
  assign CAN_FIRE_RL_rl_invalid_address =
	     f_fabric_reqs$EMPTY_N && f_fabric_rsps$FULL_N &&
	     rg_state == 3'd2 &&
	     !f_fabric_reqs_first__4_BITS_63_TO_32_5_ULE_209_ETC___d16 &&
	     (f_fabric_reqs_first__4_BITS_63_TO_32_5_ULT_0xC_ETC___d243 ||
	      !f_fabric_reqs_first__4_BITS_63_TO_32_5_ULE_322_ETC___d245) ;
  assign WILL_FIRE_RL_rl_invalid_address = CAN_FIRE_RL_rl_invalid_address ;

  // rule RL_rl_reset
  assign CAN_FIRE_RL_rl_reset = f_reset_reqs$EMPTY_N && f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_rl_reset = CAN_FIRE_RL_rl_reset ;

  // inputs to muxes for submodule ports
  assign MUX_f_fabric_rsps$enq_1__SEL_1 =
	     WILL_FIRE_RL_rl_clear && rg_cached_addr == 27'd65535 ;
  assign MUX_f_fabric_rsps$enq_1__SEL_2 =
	     WILL_FIRE_RL_rl_config &&
	     (!f_fabric_reqs$D_OUT[67] ||
	      f_fabric_reqs$D_OUT[66:64] != 3'd2 ||
	      f_fabric_reqs$D_OUT[39:32] != 8'h80) ;
  assign MUX_rg_cached_addr$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_config && f_fabric_reqs$D_OUT[67] &&
	     f_fabric_reqs$D_OUT[66:64] == 3'd2 &&
	     f_fabric_reqs$D_OUT[39:32] == 8'h80 ;
  assign MUX_rg_cached_burst$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_process_req && f_fabric_reqs$D_OUT[67] &&
	     (f_fabric_reqs$D_OUT[66:64] == 3'd2 ||
	      f_fabric_reqs$D_OUT[66:64] == 3'd1 ||
	      f_fabric_reqs$D_OUT[66:64] == 3'd0) ;
  assign MUX_rg_state$write_1__SEL_4 =
	     WILL_FIRE_RL_rl_send_rsp && rg_rsp_burst_countdown == 3'd0 ;
  assign MUX_f_fabric_rsps$enq_1__VAL_1 =
	     { f_fabric_reqs$D_OUT[69:64], 33'h0AAAAAAAA } ;
  assign MUX_f_fabric_rsps$enq_1__VAL_2 =
	     { f_fabric_reqs$D_OUT[69:64],
	       (!f_fabric_reqs$D_OUT[67] &&
		f_fabric_reqs$D_OUT[66:64] == 3'd2) ?
		 { f_fabric_reqs$D_OUT[39:32] != 8'h01,
		   y_avValue_snd_fst__h16056 } :
		 { !f_fabric_reqs$D_OUT[67] ||
		   f_fabric_reqs$D_OUT[66:64] != 3'd2 ||
		   f_fabric_reqs$D_OUT[39:32] != 8'h01,
		   f_fabric_reqs$D_OUT[63:32] } } ;
  assign MUX_f_fabric_rsps$enq_1__VAL_3 =
	     { f_fabric_reqs$D_OUT[69:68],
	       rg_rsp_op,
	       rg_rsp_size,
	       rg_rsp_status,
	       rg_rsp_burst[31:0] } ;
  assign MUX_f_fabric_rsps$enq_1__VAL_4 =
	     { f_fabric_reqs$D_OUT[69:64],
	       1'd1,
	       f_fabric_reqs$D_OUT[63:32] } ;
  assign MUX_f_raw_mem_reqs$enq_1__VAL_1 =
	     { 33'h1FFFFFFFF, rg_cached_addr, rg_cached_burst } ;
  assign MUX_f_raw_mem_reqs$enq_1__VAL_2 =
	     { 33'h0FFFFFFFF,
	       f_fabric_reqs$D_OUT[63:0],
	       219'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA } ;
  assign MUX_f_raw_mem_reqs$enq_1__VAL_3 =
	     { 33'h1FFFFFFFF, rg_cached_addr, 256'd0 } ;
  assign MUX_rg_cached_addr$write_1__VAL_2 =
	     (rg_cached_addr == 27'd65535) ? rg_cached_addr : x__h16176 ;
  always@(f_fabric_reqs$D_OUT or
	  IF_f_fabric_reqs_first__4_BITS_36_TO_34_07_EQ__ETC___d184 or
	  IF_f_fabric_reqs_first__4_BITS_36_TO_34_07_EQ__ETC___d157 or
	  rg_cached_burst)
  begin
    case (f_fabric_reqs$D_OUT[66:64])
      3'd1:
	  MUX_rg_cached_burst$write_1__VAL_2 =
	      IF_f_fabric_reqs_first__4_BITS_36_TO_34_07_EQ__ETC___d157;
      3'd2:
	  MUX_rg_cached_burst$write_1__VAL_2 =
	      { (f_fabric_reqs$D_OUT[36:34] == 3'd7) ?
		  f_fabric_reqs$D_OUT[31:0] :
		  rg_cached_burst[255:224],
		(f_fabric_reqs$D_OUT[36:34] == 3'd6) ?
		  f_fabric_reqs$D_OUT[31:0] :
		  rg_cached_burst[223:192],
		(f_fabric_reqs$D_OUT[36:34] == 3'd5) ?
		  f_fabric_reqs$D_OUT[31:0] :
		  rg_cached_burst[191:160],
		(f_fabric_reqs$D_OUT[36:34] == 3'd4) ?
		  f_fabric_reqs$D_OUT[31:0] :
		  rg_cached_burst[159:128],
		(f_fabric_reqs$D_OUT[36:34] == 3'd3) ?
		  f_fabric_reqs$D_OUT[31:0] :
		  rg_cached_burst[127:96],
		(f_fabric_reqs$D_OUT[36:34] == 3'd2) ?
		  f_fabric_reqs$D_OUT[31:0] :
		  rg_cached_burst[95:64],
		(f_fabric_reqs$D_OUT[36:34] == 3'd1) ?
		  f_fabric_reqs$D_OUT[31:0] :
		  rg_cached_burst[63:32],
		(f_fabric_reqs$D_OUT[36:34] == 3'd0) ?
		  f_fabric_reqs$D_OUT[31:0] :
		  rg_cached_burst[31:0] };
      default: MUX_rg_cached_burst$write_1__VAL_2 =
		   IF_f_fabric_reqs_first__4_BITS_36_TO_34_07_EQ__ETC___d184;
    endcase
  end
  assign MUX_rg_rsp_burst$write_1__VAL_1 =
	     (!f_fabric_reqs$D_OUT[67] &&
	      f_fabric_reqs$D_OUT[66:64] == 3'd4) ?
	       rg_cached_burst :
	       { 224'd0,
		 (!f_fabric_reqs$D_OUT[67] &&
		  f_fabric_reqs$D_OUT[66:64] == 3'd2) ?
		   SEL_ARR_rg_cached_burst_7_BITS_31_TO_0_8_rg_ca_ETC___d108 :
		   f_fabric_reqs$D_OUT[63:32] } ;
  assign MUX_rg_rsp_burst$write_1__VAL_2 =
	     { 32'hAAAAAAAA, rg_rsp_burst[255:32] } ;
  assign MUX_rg_rsp_burst_countdown$write_1__VAL_1 =
	     rg_rsp_burst_countdown - 3'd1 ;
  assign MUX_rg_rsp_burst_countdown$write_1__VAL_2 =
	     (!f_fabric_reqs$D_OUT[67] &&
	      f_fabric_reqs$D_OUT[66:64] == 3'd4) ?
	       3'd7 :
	       3'd0 ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = f_fabric_reqs$D_OUT[31:0] ;
  assign cfg_verbosity$EN =
	     WILL_FIRE_RL_rl_config && f_fabric_reqs$D_OUT[67] &&
	     f_fabric_reqs$D_OUT[66:64] == 3'd2 &&
	     f_fabric_reqs$D_OUT[39:32] == 8'h01 ;

  // register rg_cached_addr
  always@(WILL_FIRE_RL_rl_reset or
	  WILL_FIRE_RL_rl_clear or
	  MUX_rg_cached_addr$write_1__VAL_2 or
	  MUX_rg_cached_addr$write_1__SEL_3 or
	  WILL_FIRE_RL_rl_miss_clean_req or f_fabric_reqs$D_OUT)
  case (1'b1)
    WILL_FIRE_RL_rl_reset: rg_cached_addr$D_IN = 27'd0;
    WILL_FIRE_RL_rl_clear:
	rg_cached_addr$D_IN = MUX_rg_cached_addr$write_1__VAL_2;
    MUX_rg_cached_addr$write_1__SEL_3: rg_cached_addr$D_IN = 27'd0;
    WILL_FIRE_RL_rl_miss_clean_req:
	rg_cached_addr$D_IN = f_fabric_reqs$D_OUT[63:37];
    default: rg_cached_addr$D_IN =
		 27'b010101010101010101010101010 /* unspecified value */ ;
  endcase
  assign rg_cached_addr$EN =
	     WILL_FIRE_RL_rl_config && f_fabric_reqs$D_OUT[67] &&
	     f_fabric_reqs$D_OUT[66:64] == 3'd2 &&
	     f_fabric_reqs$D_OUT[39:32] == 8'h80 ||
	     WILL_FIRE_RL_rl_miss_clean_req ||
	     WILL_FIRE_RL_rl_clear ||
	     WILL_FIRE_RL_rl_reset ;

  // register rg_cached_burst
  always@(MUX_f_fabric_rsps$enq_1__SEL_1 or
	  MUX_rg_cached_burst$write_1__SEL_2 or
	  MUX_rg_cached_burst$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_reload or f_raw_mem_rsps$D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_f_fabric_rsps$enq_1__SEL_1: rg_cached_burst$D_IN = 256'd0;
      MUX_rg_cached_burst$write_1__SEL_2:
	  rg_cached_burst$D_IN = MUX_rg_cached_burst$write_1__VAL_2;
      WILL_FIRE_RL_rl_reload: rg_cached_burst$D_IN = f_raw_mem_rsps$D_OUT;
      default: rg_cached_burst$D_IN =
		   256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_cached_burst$EN =
	     WILL_FIRE_RL_rl_clear && rg_cached_addr == 27'd65535 ||
	     WILL_FIRE_RL_rl_process_req && f_fabric_reqs$D_OUT[67] &&
	     (f_fabric_reqs$D_OUT[66:64] == 3'd2 ||
	      f_fabric_reqs$D_OUT[66:64] == 3'd1 ||
	      f_fabric_reqs$D_OUT[66:64] == 3'd0) ||
	     WILL_FIRE_RL_rl_reload ;

  // register rg_cached_clean
  always@(WILL_FIRE_RL_rl_reset or
	  MUX_f_fabric_rsps$enq_1__SEL_1 or
	  MUX_rg_cached_burst$write_1__SEL_2 or
	  WILL_FIRE_RL_rl_writeback_dirty)
  case (1'b1)
    WILL_FIRE_RL_rl_reset: rg_cached_clean$D_IN = 1'd0;
    MUX_f_fabric_rsps$enq_1__SEL_1: rg_cached_clean$D_IN = 1'd1;
    MUX_rg_cached_burst$write_1__SEL_2: rg_cached_clean$D_IN = 1'd0;
    WILL_FIRE_RL_rl_writeback_dirty: rg_cached_clean$D_IN = 1'd1;
    default: rg_cached_clean$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign rg_cached_clean$EN =
	     WILL_FIRE_RL_rl_clear && rg_cached_addr == 27'd65535 ||
	     WILL_FIRE_RL_rl_process_req && f_fabric_reqs$D_OUT[67] &&
	     (f_fabric_reqs$D_OUT[66:64] == 3'd2 ||
	      f_fabric_reqs$D_OUT[66:64] == 3'd1 ||
	      f_fabric_reqs$D_OUT[66:64] == 3'd0) ||
	     WILL_FIRE_RL_rl_reset ||
	     WILL_FIRE_RL_rl_writeback_dirty ;

  // register rg_rsp_burst
  assign rg_rsp_burst$D_IN =
	     WILL_FIRE_RL_rl_process_req ?
	       MUX_rg_rsp_burst$write_1__VAL_1 :
	       MUX_rg_rsp_burst$write_1__VAL_2 ;
  assign rg_rsp_burst$EN =
	     WILL_FIRE_RL_rl_process_req || WILL_FIRE_RL_rl_send_rsp ;

  // register rg_rsp_burst_countdown
  assign rg_rsp_burst_countdown$D_IN =
	     WILL_FIRE_RL_rl_send_rsp ?
	       MUX_rg_rsp_burst_countdown$write_1__VAL_1 :
	       MUX_rg_rsp_burst_countdown$write_1__VAL_2 ;
  assign rg_rsp_burst_countdown$EN =
	     WILL_FIRE_RL_rl_send_rsp || WILL_FIRE_RL_rl_process_req ;

  // register rg_rsp_op
  assign rg_rsp_op$D_IN = f_fabric_reqs$D_OUT[67] ;
  assign rg_rsp_op$EN = CAN_FIRE_RL_rl_process_req ;

  // register rg_rsp_size
  assign rg_rsp_size$D_IN = f_fabric_reqs$D_OUT[66:64] ;
  assign rg_rsp_size$EN = CAN_FIRE_RL_rl_process_req ;

  // register rg_rsp_status
  assign rg_rsp_status$D_IN =
	     (f_fabric_reqs$D_OUT[67] ||
	      f_fabric_reqs$D_OUT[66:64] != 3'd4) &&
	     (f_fabric_reqs$D_OUT[67] ||
	      f_fabric_reqs$D_OUT[66:64] != 3'd2) &&
	     (!f_fabric_reqs$D_OUT[67] ||
	      f_fabric_reqs$D_OUT[66:64] != 3'd2) &&
	     (!f_fabric_reqs$D_OUT[67] ||
	      f_fabric_reqs$D_OUT[66:64] != 3'd1) &&
	     (!f_fabric_reqs$D_OUT[67] ||
	      f_fabric_reqs$D_OUT[66:64] != 3'd0) ;
  assign rg_rsp_status$EN = CAN_FIRE_RL_rl_process_req ;

  // register rg_state
  always@(WILL_FIRE_RL_rl_reset or
	  MUX_f_fabric_rsps$enq_1__SEL_1 or
	  MUX_rg_cached_addr$write_1__SEL_3 or
	  MUX_rg_state$write_1__SEL_4 or
	  WILL_FIRE_RL_rl_process_req or
	  WILL_FIRE_RL_rl_reload or WILL_FIRE_RL_rl_miss_clean_req)
  case (1'b1)
    WILL_FIRE_RL_rl_reset || MUX_f_fabric_rsps$enq_1__SEL_1:
	rg_state$D_IN = 3'd2;
    MUX_rg_cached_addr$write_1__SEL_3: rg_state$D_IN = 3'd1;
    MUX_rg_state$write_1__SEL_4: rg_state$D_IN = 3'd2;
    WILL_FIRE_RL_rl_process_req: rg_state$D_IN = 3'd4;
    WILL_FIRE_RL_rl_reload: rg_state$D_IN = 3'd2;
    WILL_FIRE_RL_rl_miss_clean_req: rg_state$D_IN = 3'd3;
    default: rg_state$D_IN = 3'b010 /* unspecified value */ ;
  endcase
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_config && f_fabric_reqs$D_OUT[67] &&
	     f_fabric_reqs$D_OUT[66:64] == 3'd2 &&
	     f_fabric_reqs$D_OUT[39:32] == 8'h80 ||
	     WILL_FIRE_RL_rl_clear && rg_cached_addr == 27'd65535 ||
	     WILL_FIRE_RL_rl_send_rsp && rg_rsp_burst_countdown == 3'd0 ||
	     WILL_FIRE_RL_rl_reload ||
	     WILL_FIRE_RL_rl_reset ||
	     WILL_FIRE_RL_rl_miss_clean_req ||
	     WILL_FIRE_RL_rl_process_req ;

  // submodule f_fabric_reqs
  assign f_fabric_reqs$D_IN = from_fabric_request_put ;
  assign f_fabric_reqs$ENQ = EN_from_fabric_request_put ;
  assign f_fabric_reqs$DEQ =
	     WILL_FIRE_RL_rl_clear && rg_cached_addr == 27'd65535 ||
	     WILL_FIRE_RL_rl_send_rsp && rg_rsp_burst_countdown == 3'd0 ||
	     WILL_FIRE_RL_rl_config &&
	     (!f_fabric_reqs$D_OUT[67] ||
	      f_fabric_reqs$D_OUT[66:64] != 3'd2 ||
	      f_fabric_reqs$D_OUT[39:32] != 8'h80) ;
  assign f_fabric_reqs$CLR = CAN_FIRE_RL_rl_reset ;

  // submodule f_fabric_rsps
  always@(MUX_f_fabric_rsps$enq_1__SEL_1 or
	  MUX_f_fabric_rsps$enq_1__VAL_1 or
	  MUX_f_fabric_rsps$enq_1__SEL_2 or
	  MUX_f_fabric_rsps$enq_1__VAL_2 or
	  WILL_FIRE_RL_rl_send_rsp or
	  MUX_f_fabric_rsps$enq_1__VAL_3 or
	  WILL_FIRE_RL_rl_invalid_address or MUX_f_fabric_rsps$enq_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_f_fabric_rsps$enq_1__SEL_1:
	  f_fabric_rsps$D_IN = MUX_f_fabric_rsps$enq_1__VAL_1;
      MUX_f_fabric_rsps$enq_1__SEL_2:
	  f_fabric_rsps$D_IN = MUX_f_fabric_rsps$enq_1__VAL_2;
      WILL_FIRE_RL_rl_send_rsp:
	  f_fabric_rsps$D_IN = MUX_f_fabric_rsps$enq_1__VAL_3;
      WILL_FIRE_RL_rl_invalid_address:
	  f_fabric_rsps$D_IN = MUX_f_fabric_rsps$enq_1__VAL_4;
      default: f_fabric_rsps$D_IN = 39'h2AAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign f_fabric_rsps$ENQ =
	     WILL_FIRE_RL_rl_clear && rg_cached_addr == 27'd65535 ||
	     WILL_FIRE_RL_rl_config &&
	     (!f_fabric_reqs$D_OUT[67] ||
	      f_fabric_reqs$D_OUT[66:64] != 3'd2 ||
	      f_fabric_reqs$D_OUT[39:32] != 8'h80) ||
	     WILL_FIRE_RL_rl_send_rsp ||
	     WILL_FIRE_RL_rl_invalid_address ;
  assign f_fabric_rsps$DEQ = EN_from_fabric_response_get ;
  assign f_fabric_rsps$CLR = CAN_FIRE_RL_rl_reset ;

  // submodule f_raw_mem_reqs
  always@(WILL_FIRE_RL_rl_writeback_dirty or
	  MUX_f_raw_mem_reqs$enq_1__VAL_1 or
	  WILL_FIRE_RL_rl_miss_clean_req or
	  MUX_f_raw_mem_reqs$enq_1__VAL_2 or
	  WILL_FIRE_RL_rl_clear or MUX_f_raw_mem_reqs$enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_writeback_dirty:
	  f_raw_mem_reqs$D_IN = MUX_f_raw_mem_reqs$enq_1__VAL_1;
      WILL_FIRE_RL_rl_miss_clean_req:
	  f_raw_mem_reqs$D_IN = MUX_f_raw_mem_reqs$enq_1__VAL_2;
      WILL_FIRE_RL_rl_clear:
	  f_raw_mem_reqs$D_IN = MUX_f_raw_mem_reqs$enq_1__VAL_3;
      default: f_raw_mem_reqs$D_IN =
		   316'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign f_raw_mem_reqs$ENQ =
	     WILL_FIRE_RL_rl_writeback_dirty ||
	     WILL_FIRE_RL_rl_miss_clean_req ||
	     WILL_FIRE_RL_rl_clear ;
  assign f_raw_mem_reqs$DEQ = EN_to_raw_mem_request_get ;
  assign f_raw_mem_reqs$CLR = f_reset_reqs$EMPTY_N && f_reset_rsps$FULL_N ;

  // submodule f_raw_mem_rsps
  assign f_raw_mem_rsps$D_IN = to_raw_mem_response_put ;
  assign f_raw_mem_rsps$ENQ = EN_to_raw_mem_response_put ;
  assign f_raw_mem_rsps$DEQ =
	     f_raw_mem_rsps$EMPTY_N &&
	     (cfg_verbosity_read_ULE_2___d29 || f_fabric_reqs$EMPTY_N) &&
	     rg_state == 3'd3 ;
  assign f_raw_mem_rsps$CLR = f_reset_reqs$EMPTY_N && f_reset_rsps$FULL_N ;

  // submodule f_reset_reqs
  assign f_reset_reqs$ENQ = EN_server_reset_request_put ;
  assign f_reset_reqs$DEQ = CAN_FIRE_RL_rl_reset ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$ENQ = CAN_FIRE_RL_rl_reset ;
  assign f_reset_rsps$DEQ = EN_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_f_fabric_reqs_first__4_BITS_36_TO_34_07_EQ__ETC___d151 =
	     { (f_fabric_reqs$D_OUT[36:34] == 3'd7) ?
		 n__h8586 :
		 rg_cached_burst[255:224],
	       (f_fabric_reqs$D_OUT[36:34] == 3'd6) ?
		 n__h8586 :
		 rg_cached_burst[223:192],
	       (f_fabric_reqs$D_OUT[36:34] == 3'd5) ?
		 n__h8586 :
		 rg_cached_burst[191:160],
	       (f_fabric_reqs$D_OUT[36:34] == 3'd4) ?
		 n__h8586 :
		 rg_cached_burst[159:128] } ;
  assign IF_f_fabric_reqs_first__4_BITS_36_TO_34_07_EQ__ETC___d154 =
	     { IF_f_fabric_reqs_first__4_BITS_36_TO_34_07_EQ__ETC___d151,
	       (f_fabric_reqs$D_OUT[36:34] == 3'd3) ?
		 n__h8586 :
		 rg_cached_burst[127:96],
	       (f_fabric_reqs$D_OUT[36:34] == 3'd2) ?
		 n__h8586 :
		 rg_cached_burst[95:64] } ;
  assign IF_f_fabric_reqs_first__4_BITS_36_TO_34_07_EQ__ETC___d157 =
	     { IF_f_fabric_reqs_first__4_BITS_36_TO_34_07_EQ__ETC___d154,
	       (f_fabric_reqs$D_OUT[36:34] == 3'd1) ?
		 n__h8586 :
		 rg_cached_burst[63:32],
	       (f_fabric_reqs$D_OUT[36:34] == 3'd0) ?
		 n__h8586 :
		 rg_cached_burst[31:0] } ;
  assign IF_f_fabric_reqs_first__4_BITS_36_TO_34_07_EQ__ETC___d178 =
	     { (f_fabric_reqs$D_OUT[36:34] == 3'd7) ?
		 n__h10541 :
		 rg_cached_burst[255:224],
	       (f_fabric_reqs$D_OUT[36:34] == 3'd6) ?
		 n__h10541 :
		 rg_cached_burst[223:192],
	       (f_fabric_reqs$D_OUT[36:34] == 3'd5) ?
		 n__h10541 :
		 rg_cached_burst[191:160],
	       (f_fabric_reqs$D_OUT[36:34] == 3'd4) ?
		 n__h10541 :
		 rg_cached_burst[159:128] } ;
  assign IF_f_fabric_reqs_first__4_BITS_36_TO_34_07_EQ__ETC___d181 =
	     { IF_f_fabric_reqs_first__4_BITS_36_TO_34_07_EQ__ETC___d178,
	       (f_fabric_reqs$D_OUT[36:34] == 3'd3) ?
		 n__h10541 :
		 rg_cached_burst[127:96],
	       (f_fabric_reqs$D_OUT[36:34] == 3'd2) ?
		 n__h10541 :
		 rg_cached_burst[95:64] } ;
  assign IF_f_fabric_reqs_first__4_BITS_36_TO_34_07_EQ__ETC___d184 =
	     { IF_f_fabric_reqs_first__4_BITS_36_TO_34_07_EQ__ETC___d181,
	       (f_fabric_reqs$D_OUT[36:34] == 3'd1) ?
		 n__h10541 :
		 rg_cached_burst[63:32],
	       (f_fabric_reqs$D_OUT[36:34] == 3'd0) ?
		 n__h10541 :
		 rg_cached_burst[31:0] } ;
  assign NOT_cfg_verbosity_read_ULE_1_8___d59 = cfg_verbosity > 32'd1 ;
  assign cfg_verbosity_read_ULE_2___d29 = cfg_verbosity <= 32'd2 ;
  assign f_fabric_reqs_first__4_BITS_63_TO_32_5_ULE_209_ETC___d16 =
	     f_fabric_reqs$D_OUT[63:32] <= 32'd2097151 ;
  assign f_fabric_reqs_first__4_BITS_63_TO_32_5_ULE_322_ETC___d245 =
	     f_fabric_reqs$D_OUT[63:32] <= 32'hC00001FF ;
  assign f_fabric_reqs_first__4_BITS_63_TO_32_5_ULT_0xC_ETC___d243 =
	     f_fabric_reqs$D_OUT[63:32] < 32'hC0000100 ;
  assign f_raw_mem_reqs_i_notFull_AND_NOT_rg_cached_add_ETC___d278 =
	     f_raw_mem_reqs$FULL_N &&
	     (rg_cached_addr != 27'd65535 ||
	      f_fabric_reqs$EMPTY_N && f_fabric_rsps$FULL_N) ;
  assign rg_cached_addr_8_EQ_f_fabric_reqs_first__4_BIT_ETC___d20 =
	     rg_cached_addr == f_fabric_reqs$D_OUT[63:37] ;
  assign word__h10602 =
	     { SEL_ARR_rg_cached_burst_7_BITS_31_TO_0_8_rg_ca_ETC___d108[31:8],
	       f_fabric_reqs$D_OUT[7:0] } ;
  assign word__h10725 =
	     { SEL_ARR_rg_cached_burst_7_BITS_31_TO_0_8_rg_ca_ETC___d108[31:16],
	       f_fabric_reqs$D_OUT[7:0],
	       SEL_ARR_rg_cached_burst_7_BITS_31_TO_0_8_rg_ca_ETC___d108[7:0] } ;
  assign word__h10812 =
	     { SEL_ARR_rg_cached_burst_7_BITS_31_TO_0_8_rg_ca_ETC___d108[31:24],
	       f_fabric_reqs$D_OUT[7:0],
	       SEL_ARR_rg_cached_burst_7_BITS_31_TO_0_8_rg_ca_ETC___d108[15:0] } ;
  assign word__h10899 =
	     { f_fabric_reqs$D_OUT[7:0],
	       SEL_ARR_rg_cached_burst_7_BITS_31_TO_0_8_rg_ca_ETC___d108[23:0] } ;
  assign word__h8647 =
	     { SEL_ARR_rg_cached_burst_7_BITS_31_TO_0_8_rg_ca_ETC___d108[31:16],
	       f_fabric_reqs$D_OUT[15:0] } ;
  assign word__h8728 =
	     { f_fabric_reqs$D_OUT[15:0],
	       SEL_ARR_rg_cached_burst_7_BITS_31_TO_0_8_rg_ca_ETC___d108[15:0] } ;
  assign x__h16176 = rg_cached_addr + 27'd1 ;
  assign y_avValue_snd_fst__h16056 =
	     (f_fabric_reqs$D_OUT[39:32] == 8'h01) ?
	       cfg_verbosity :
	       f_fabric_reqs$D_OUT[63:32] ;
  always@(f_fabric_reqs$D_OUT or rg_cached_burst)
  begin
    case (f_fabric_reqs$D_OUT[36:34])
      3'd0:
	  SEL_ARR_rg_cached_burst_7_BITS_31_TO_0_8_rg_ca_ETC___d108 =
	      rg_cached_burst[31:0];
      3'd1:
	  SEL_ARR_rg_cached_burst_7_BITS_31_TO_0_8_rg_ca_ETC___d108 =
	      rg_cached_burst[63:32];
      3'd2:
	  SEL_ARR_rg_cached_burst_7_BITS_31_TO_0_8_rg_ca_ETC___d108 =
	      rg_cached_burst[95:64];
      3'd3:
	  SEL_ARR_rg_cached_burst_7_BITS_31_TO_0_8_rg_ca_ETC___d108 =
	      rg_cached_burst[127:96];
      3'd4:
	  SEL_ARR_rg_cached_burst_7_BITS_31_TO_0_8_rg_ca_ETC___d108 =
	      rg_cached_burst[159:128];
      3'd5:
	  SEL_ARR_rg_cached_burst_7_BITS_31_TO_0_8_rg_ca_ETC___d108 =
	      rg_cached_burst[191:160];
      3'd6:
	  SEL_ARR_rg_cached_burst_7_BITS_31_TO_0_8_rg_ca_ETC___d108 =
	      rg_cached_burst[223:192];
      3'd7:
	  SEL_ARR_rg_cached_burst_7_BITS_31_TO_0_8_rg_ca_ETC___d108 =
	      rg_cached_burst[255:224];
    endcase
  end
  always@(f_fabric_reqs$D_OUT or
	  SEL_ARR_rg_cached_burst_7_BITS_31_TO_0_8_rg_ca_ETC___d108 or
	  word__h8647 or word__h8728)
  begin
    case (f_fabric_reqs$D_OUT[33:32])
      2'b0: n__h8586 = word__h8647;
      2'b10: n__h8586 = word__h8728;
      default: n__h8586 =
		   SEL_ARR_rg_cached_burst_7_BITS_31_TO_0_8_rg_ca_ETC___d108;
    endcase
  end
  always@(f_fabric_reqs$D_OUT or
	  SEL_ARR_rg_cached_burst_7_BITS_31_TO_0_8_rg_ca_ETC___d108 or
	  word__h10602 or word__h10725 or word__h10812 or word__h10899)
  begin
    case (f_fabric_reqs$D_OUT[33:32])
      2'b0: n__h10541 = word__h10602;
      2'b01: n__h10541 = word__h10725;
      2'b10: n__h10541 = word__h10812;
      2'b11: n__h10541 = word__h10899;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 3'd0;
      end
    else
      begin
        if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
      end
    if (rg_cached_addr$EN)
      rg_cached_addr <= `BSV_ASSIGNMENT_DELAY rg_cached_addr$D_IN;
    if (rg_cached_burst$EN)
      rg_cached_burst <= `BSV_ASSIGNMENT_DELAY rg_cached_burst$D_IN;
    if (rg_cached_clean$EN)
      rg_cached_clean <= `BSV_ASSIGNMENT_DELAY rg_cached_clean$D_IN;
    if (rg_rsp_burst$EN)
      rg_rsp_burst <= `BSV_ASSIGNMENT_DELAY rg_rsp_burst$D_IN;
    if (rg_rsp_burst_countdown$EN)
      rg_rsp_burst_countdown <= `BSV_ASSIGNMENT_DELAY
	  rg_rsp_burst_countdown$D_IN;
    if (rg_rsp_op$EN) rg_rsp_op <= `BSV_ASSIGNMENT_DELAY rg_rsp_op$D_IN;
    if (rg_rsp_size$EN) rg_rsp_size <= `BSV_ASSIGNMENT_DELAY rg_rsp_size$D_IN;
    if (rg_rsp_status$EN)
      rg_rsp_status <= `BSV_ASSIGNMENT_DELAY rg_rsp_status$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_verbosity = 32'hAAAAAAAA;
    rg_cached_addr = 27'h2AAAAAA;
    rg_cached_burst =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_cached_clean = 1'h0;
    rg_rsp_burst =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_rsp_burst_countdown = 3'h2;
    rg_rsp_op = 1'h0;
    rg_rsp_size = 3'h2;
    rg_rsp_status = 1'h0;
    rg_state = 3'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_dirty && !cfg_verbosity_read_ULE_2___d29)
	begin
	  v__h2443 = $stime;
	  #0;
	end
    v__h2437 = v__h2443 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_dirty && !cfg_verbosity_read_ULE_2___d29)
	$display("%0d: Mem_Controller.rl_writeback_dirty to raw addr 0x%0h",
		 v__h2437,
		 rg_cached_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_miss_clean_req && !cfg_verbosity_read_ULE_2___d29)
	begin
	  v__h2591 = $stime;
	  #0;
	end
    v__h2585 = v__h2591 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_miss_clean_req && !cfg_verbosity_read_ULE_2___d29)
	$display("%0d: Mem_Controller.rl_miss_clean_req: read raw addr 0x%0h",
		 v__h2585,
		 f_fabric_reqs$D_OUT[63:37]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reload && !cfg_verbosity_read_ULE_2___d29)
	begin
	  v__h3750 = $stime;
	  #0;
	end
    v__h3744 = v__h3750 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reload && !cfg_verbosity_read_ULE_2___d29)
	$display("%0d: Mem_Controller.rl_reload: raw addr 0x%0h",
		 v__h3744,
		 f_fabric_reqs$D_OUT[63:37]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reload && !cfg_verbosity_read_ULE_2___d29)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reload && !cfg_verbosity_read_ULE_2___d29)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reload && !cfg_verbosity_read_ULE_2___d29)
	$write("'h%h", f_raw_mem_rsps$D_OUT[31:0], " ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reload && !cfg_verbosity_read_ULE_2___d29)
	$write("'h%h", f_raw_mem_rsps$D_OUT[63:32], " ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reload && !cfg_verbosity_read_ULE_2___d29)
	$write("'h%h", f_raw_mem_rsps$D_OUT[95:64], " ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reload && !cfg_verbosity_read_ULE_2___d29)
	$write("'h%h", f_raw_mem_rsps$D_OUT[127:96], " ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reload && !cfg_verbosity_read_ULE_2___d29)
	$write("'h%h", f_raw_mem_rsps$D_OUT[159:128], " ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reload && !cfg_verbosity_read_ULE_2___d29)
	$write("'h%h", f_raw_mem_rsps$D_OUT[191:160], " ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reload && !cfg_verbosity_read_ULE_2___d29)
	$write("'h%h", f_raw_mem_rsps$D_OUT[223:192], " ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reload && !cfg_verbosity_read_ULE_2___d29)
	$write("'h%h", f_raw_mem_rsps$D_OUT[255:224], " ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reload && !cfg_verbosity_read_ULE_2___d29)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reload && !cfg_verbosity_read_ULE_2___d29)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reload && !cfg_verbosity_read_ULE_2___d29)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && NOT_cfg_verbosity_read_ULE_1_8___d59)
	begin
	  v__h4264 = $stime;
	  #0;
	end
    v__h4258 = v__h4264 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && NOT_cfg_verbosity_read_ULE_1_8___d59)
	$display("%0d: Mem_Controller.rl_process_req: ", v__h4258);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && NOT_cfg_verbosity_read_ULE_1_8___d59)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && NOT_cfg_verbosity_read_ULE_1_8___d59)
	$write("Fabric_Req { ", "initiator_id: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && NOT_cfg_verbosity_read_ULE_1_8___d59)
	$write("'h%h", f_fabric_reqs$D_OUT[69:68]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && NOT_cfg_verbosity_read_ULE_1_8___d59)
	$write(", ", "op: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  NOT_cfg_verbosity_read_ULE_1_8___d59 &&
	  f_fabric_reqs$D_OUT[67])
	$write("FABRIC_REQ_WR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  NOT_cfg_verbosity_read_ULE_1_8___d59 &&
	  !f_fabric_reqs$D_OUT[67])
	$write("FABRIC_REQ_RD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && NOT_cfg_verbosity_read_ULE_1_8___d59)
	$write(", ", "size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  NOT_cfg_verbosity_read_ULE_1_8___d59 &&
	  f_fabric_reqs$D_OUT[66:64] == 3'd0)
	$write("FABRIC_REQ_8b");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  NOT_cfg_verbosity_read_ULE_1_8___d59 &&
	  f_fabric_reqs$D_OUT[66:64] == 3'd1)
	$write("FABRIC_REQ_16b");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  NOT_cfg_verbosity_read_ULE_1_8___d59 &&
	  f_fabric_reqs$D_OUT[66:64] == 3'd2)
	$write("FABRIC_REQ_32b");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  NOT_cfg_verbosity_read_ULE_1_8___d59 &&
	  f_fabric_reqs$D_OUT[66:64] == 3'd3)
	$write("FABRIC_REQ_64b");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  NOT_cfg_verbosity_read_ULE_1_8___d59 &&
	  f_fabric_reqs$D_OUT[66:64] != 3'd0 &&
	  f_fabric_reqs$D_OUT[66:64] != 3'd1 &&
	  f_fabric_reqs$D_OUT[66:64] != 3'd2 &&
	  f_fabric_reqs$D_OUT[66:64] != 3'd3)
	$write("FABRIC_REQ_BURST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && NOT_cfg_verbosity_read_ULE_1_8___d59)
	$write(", ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && NOT_cfg_verbosity_read_ULE_1_8___d59)
	$write("'h%h", f_fabric_reqs$D_OUT[63:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && NOT_cfg_verbosity_read_ULE_1_8___d59)
	$write(", ", "word: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && NOT_cfg_verbosity_read_ULE_1_8___d59)
	$write("'h%h", f_fabric_reqs$D_OUT[31:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && NOT_cfg_verbosity_read_ULE_1_8___d59)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  (f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd4) &&
	  (f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd2) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd2) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd1) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd0))
	begin
	  v__h13417 = $stime;
	  #0;
	end
    v__h13411 = v__h13417 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  (f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd4) &&
	  (f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd2) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd2) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd1) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd0))
	$display("%0d: ERROR: Mem_Controller: request op not yet implemented",
		 v__h13411);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  (f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd4) &&
	  (f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd2) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd2) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd1) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd0))
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  (f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd4) &&
	  (f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd2) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd2) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd1) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd0))
	$write("Fabric_Req { ", "initiator_id: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  (f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd4) &&
	  (f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd2) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd2) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd1) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd0))
	$write("'h%h", f_fabric_reqs$D_OUT[69:68]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  (f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd4) &&
	  (f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd2) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd2) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd1) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd0))
	$write(", ", "op: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && f_fabric_reqs$D_OUT[66:64] != 3'd2 &&
	  f_fabric_reqs$D_OUT[66:64] != 3'd1 &&
	  f_fabric_reqs$D_OUT[66:64] != 3'd0 &&
	  f_fabric_reqs$D_OUT[67])
	$write("FABRIC_REQ_WR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && f_fabric_reqs$D_OUT[66:64] != 3'd4 &&
	  f_fabric_reqs$D_OUT[66:64] != 3'd2 &&
	  !f_fabric_reqs$D_OUT[67])
	$write("FABRIC_REQ_RD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  (f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd4) &&
	  (f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd2) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd2) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd1) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd0))
	$write(", ", "size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && !f_fabric_reqs$D_OUT[67] &&
	  f_fabric_reqs$D_OUT[66:64] == 3'd0)
	$write("FABRIC_REQ_8b");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && !f_fabric_reqs$D_OUT[67] &&
	  f_fabric_reqs$D_OUT[66:64] == 3'd1)
	$write("FABRIC_REQ_16b");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req && f_fabric_reqs$D_OUT[66:64] == 3'd3)
	$write("FABRIC_REQ_64b");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  (f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd4) &&
	  f_fabric_reqs$D_OUT[66:64] != 3'd0 &&
	  f_fabric_reqs$D_OUT[66:64] != 3'd1 &&
	  f_fabric_reqs$D_OUT[66:64] != 3'd2 &&
	  f_fabric_reqs$D_OUT[66:64] != 3'd3)
	$write("FABRIC_REQ_BURST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  (f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd4) &&
	  (f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd2) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd2) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd1) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd0))
	$write(", ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  (f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd4) &&
	  (f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd2) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd2) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd1) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd0))
	$write("'h%h", f_fabric_reqs$D_OUT[63:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  (f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd4) &&
	  (f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd2) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd2) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd1) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd0))
	$write(", ", "word: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  (f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd4) &&
	  (f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd2) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd2) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd1) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd0))
	$write("'h%h", f_fabric_reqs$D_OUT[31:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_req &&
	  (f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd4) &&
	  (f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd2) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd2) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd1) &&
	  (!f_fabric_reqs$D_OUT[67] || f_fabric_reqs$D_OUT[66:64] != 3'd0))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rsp && NOT_cfg_verbosity_read_ULE_1_8___d59)
	begin
	  v__h15348 = $stime;
	  #0;
	end
    v__h15342 = v__h15348 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rsp && NOT_cfg_verbosity_read_ULE_1_8___d59)
	$display("%0d: Mem_Controller.rl_send_rsp: ", v__h15342);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rsp && NOT_cfg_verbosity_read_ULE_1_8___d59)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rsp && NOT_cfg_verbosity_read_ULE_1_8___d59)
	$write("Fabric_Rsp { ", "initiator_id: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rsp && NOT_cfg_verbosity_read_ULE_1_8___d59)
	$write("'h%h", f_fabric_reqs$D_OUT[69:68]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rsp && NOT_cfg_verbosity_read_ULE_1_8___d59)
	$write(", ", "op: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rsp && NOT_cfg_verbosity_read_ULE_1_8___d59 &&
	  rg_rsp_op)
	$write("FABRIC_REQ_WR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rsp && NOT_cfg_verbosity_read_ULE_1_8___d59 &&
	  !rg_rsp_op)
	$write("FABRIC_REQ_RD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rsp && NOT_cfg_verbosity_read_ULE_1_8___d59)
	$write(", ", "size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rsp && NOT_cfg_verbosity_read_ULE_1_8___d59 &&
	  rg_rsp_size == 3'd0)
	$write("FABRIC_REQ_8b");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rsp && NOT_cfg_verbosity_read_ULE_1_8___d59 &&
	  rg_rsp_size == 3'd1)
	$write("FABRIC_REQ_16b");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rsp && NOT_cfg_verbosity_read_ULE_1_8___d59 &&
	  rg_rsp_size == 3'd2)
	$write("FABRIC_REQ_32b");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rsp && NOT_cfg_verbosity_read_ULE_1_8___d59 &&
	  rg_rsp_size == 3'd3)
	$write("FABRIC_REQ_64b");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rsp && NOT_cfg_verbosity_read_ULE_1_8___d59 &&
	  rg_rsp_size != 3'd0 &&
	  rg_rsp_size != 3'd1 &&
	  rg_rsp_size != 3'd2 &&
	  rg_rsp_size != 3'd3)
	$write("FABRIC_REQ_BURST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rsp && NOT_cfg_verbosity_read_ULE_1_8___d59)
	$write(", ", "status: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rsp && NOT_cfg_verbosity_read_ULE_1_8___d59 &&
	  rg_rsp_status)
	$write("FABRIC_RSP_ERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rsp && NOT_cfg_verbosity_read_ULE_1_8___d59 &&
	  !rg_rsp_status)
	$write("FABRIC_RSP_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rsp && NOT_cfg_verbosity_read_ULE_1_8___d59)
	$write(", ", "word: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rsp && NOT_cfg_verbosity_read_ULE_1_8___d59)
	$write("'h%h", rg_rsp_burst[31:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rsp && NOT_cfg_verbosity_read_ULE_1_8___d59)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_config && !f_fabric_reqs$D_OUT[67] &&
	  f_fabric_reqs$D_OUT[66:64] == 3'd2 &&
	  f_fabric_reqs$D_OUT[39:32] == 8'h01 &&
	  cfg_verbosity != 32'd0)
	begin
	  v__h15597 = $stime;
	  #0;
	end
    v__h15591 = v__h15597 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_config && !f_fabric_reqs$D_OUT[67] &&
	  f_fabric_reqs$D_OUT[66:64] == 3'd2 &&
	  f_fabric_reqs$D_OUT[39:32] == 8'h01 &&
	  cfg_verbosity != 32'd0)
	$display("%0d: Mem_Controller.rl_handle_control_req: read verbosity => %0d",
		 v__h15591,
		 cfg_verbosity);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_config && f_fabric_reqs$D_OUT[67] &&
	  f_fabric_reqs$D_OUT[66:64] == 3'd2 &&
	  f_fabric_reqs$D_OUT[39:32] == 8'h01 &&
	  f_fabric_reqs$D_OUT[31:0] != 32'd0)
	begin
	  v__h15781 = $stime;
	  #0;
	end
    v__h15775 = v__h15781 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_config && f_fabric_reqs$D_OUT[67] &&
	  f_fabric_reqs$D_OUT[66:64] == 3'd2 &&
	  f_fabric_reqs$D_OUT[39:32] == 8'h01 &&
	  f_fabric_reqs$D_OUT[31:0] != 32'd0)
	$display("%0d: Mem_Controller.rl_handle_control_req: setting verbosity to %0d",
		 v__h15775,
		 f_fabric_reqs$D_OUT[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_config && f_fabric_reqs$D_OUT[67] &&
	  f_fabric_reqs$D_OUT[66:64] == 3'd2 &&
	  f_fabric_reqs$D_OUT[39:32] == 8'h80 &&
	  cfg_verbosity != 32'd0)
	begin
	  v__h15941 = $stime;
	  #0;
	end
    v__h15935 = v__h15941 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_config && f_fabric_reqs$D_OUT[67] &&
	  f_fabric_reqs$D_OUT[66:64] == 3'd2 &&
	  f_fabric_reqs$D_OUT[39:32] == 8'h80 &&
	  cfg_verbosity != 32'd0)
	$display("%0d: Mem_Controller.rl_handle_control_req: clearing mem",
		 v__h15935);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_clear && rg_cached_addr == 27'd65535 &&
	  cfg_verbosity != 32'd0)
	begin
	  v__h17332 = $stime;
	  #0;
	end
    v__h17326 = v__h17332 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_clear && rg_cached_addr == 27'd65535 &&
	  cfg_verbosity != 32'd0)
	$display("%0d: Mem_Controller: initialized %0d locations to 0",
		 v__h17326,
		 $signed(32'd65536));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_address)
	begin
	  v__h17427 = $stime;
	  #0;
	end
    v__h17421 = v__h17427 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_address)
	$display("%0d: ERROR: Mem_Controller: addr out of bounds", v__h17421);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_address) $write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_address)
	$write("Fabric_Req { ", "initiator_id: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_address)
	$write("'h%h", f_fabric_reqs$D_OUT[69:68]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_address) $write(", ", "op: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_address && f_fabric_reqs$D_OUT[67])
	$write("FABRIC_REQ_WR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_address && !f_fabric_reqs$D_OUT[67])
	$write("FABRIC_REQ_RD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_address) $write(", ", "size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_address &&
	  f_fabric_reqs$D_OUT[66:64] == 3'd0)
	$write("FABRIC_REQ_8b");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_address &&
	  f_fabric_reqs$D_OUT[66:64] == 3'd1)
	$write("FABRIC_REQ_16b");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_address &&
	  f_fabric_reqs$D_OUT[66:64] == 3'd2)
	$write("FABRIC_REQ_32b");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_address &&
	  f_fabric_reqs$D_OUT[66:64] == 3'd3)
	$write("FABRIC_REQ_64b");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_address &&
	  f_fabric_reqs$D_OUT[66:64] != 3'd0 &&
	  f_fabric_reqs$D_OUT[66:64] != 3'd1 &&
	  f_fabric_reqs$D_OUT[66:64] != 3'd2 &&
	  f_fabric_reqs$D_OUT[66:64] != 3'd3)
	$write("FABRIC_REQ_BURST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_address) $write(", ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_address)
	$write("'h%h", f_fabric_reqs$D_OUT[63:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_address) $write(", ", "word: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_address)
	$write("'h%h", f_fabric_reqs$D_OUT[31:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_address) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && cfg_verbosity != 32'd0)
	begin
	  v__h1192 = $stime;
	  #0;
	end
    v__h1186 = v__h1192 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && cfg_verbosity != 32'd0)
	$display("%0d: Mem_Controller.rl_reset", v__h1186);
  end
  // synopsys translate_on
endmodule  // mkMem_Controller

