// This program was cloned from: https://github.com/rsnikhil/RISCV_Piccolo_v1
// License: MIT License

//
// Generated by Bluespec Compiler, version 2016.03.beta1 (build 34761, 2016-03-16)
//
// On Sat Jul  9 18:53:25 EDT 2016
//
//
// Ports:
// Name                         I/O  size props
// RDY_reset_start                O     1 const
// RDY_reset_complete             O     1 const
// do_riscv                       O   144
// RDY_do_riscv                   O     1 const
// CLK                            I     1 unused
// RST_N                          I     1 unused
// do_riscv_verbosity             I     4
// do_riscv_pc                    I    32
// do_riscv_instr                 I    32
// do_riscv_v1                    I    32
// do_riscv_v2                    I    32
// do_riscv_v_csr                 I    33
// EN_reset_start                 I     1 unused
// EN_reset_complete              I     1 unused
// EN_do_riscv                    I     1 unused
//
// Combinational paths from inputs to outputs:
//   (do_riscv_pc,
//    do_riscv_instr,
//    do_riscv_v1,
//    do_riscv_v2,
//    do_riscv_v_csr) -> do_riscv
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkRISCV_Exec(CLK,
		    RST_N,

		    EN_reset_start,
		    RDY_reset_start,

		    EN_reset_complete,
		    RDY_reset_complete,

		    do_riscv_verbosity,
		    do_riscv_pc,
		    do_riscv_instr,
		    do_riscv_v1,
		    do_riscv_v2,
		    do_riscv_v_csr,
		    EN_do_riscv,
		    do_riscv,
		    RDY_do_riscv);
  input  CLK;
  input  RST_N;

  // action method reset_start
  input  EN_reset_start;
  output RDY_reset_start;

  // action method reset_complete
  input  EN_reset_complete;
  output RDY_reset_complete;

  // actionvalue method do_riscv
  input  [3 : 0] do_riscv_verbosity;
  input  [31 : 0] do_riscv_pc;
  input  [31 : 0] do_riscv_instr;
  input  [31 : 0] do_riscv_v1;
  input  [31 : 0] do_riscv_v2;
  input  [32 : 0] do_riscv_v_csr;
  input  EN_do_riscv;
  output [143 : 0] do_riscv;
  output RDY_do_riscv;

  // signals for module outputs
  wire [143 : 0] do_riscv;
  wire RDY_do_riscv, RDY_reset_complete, RDY_reset_start;

  // rule scheduling signals
  wire CAN_FIRE_do_riscv,
       CAN_FIRE_reset_complete,
       CAN_FIRE_reset_start,
       WILL_FIRE_do_riscv,
       WILL_FIRE_reset_complete,
       WILL_FIRE_reset_start;

  // remaining internal signals
  reg [31 : 0] _theResult_____2_snd__h518,
	       _theResult___fst_next_pc__h1650,
	       v__h1181,
	       v__h1187,
	       v__h1946,
	       v__h1952,
	       value__h2636,
	       x1_avValue_value1__h1441;
  reg [4 : 0] x1_avValue_rd__h1408;
  reg [2 : 0] CASE_do_riscv_instr_BITS_14_TO_12_0b0_1_0b1_1__ETC__q5,
	      CASE_do_riscv_instr_BITS_6_TO_0_0b1100011_CASE_ETC__q6,
	      CASE_do_riscv_instr_BITS_6_TO_0_0b11_IF_do_ris_ETC__q4;
  reg CASE_do_riscv_instr_BITS_6_TO_0_0b11_NOT_do_ri_ETC__q2,
      CASE_do_riscv_instr_BITS_6_TO_0_0b11_do_riscv__ETC__q3,
      IF_do_riscv_instr_BITS_14_TO_12_1_EQ_0b0_4_THE_ETC___d183;
  wire [31 : 0] IF_do_riscv_instr_BITS_6_TO_0_EQ_0b11_6_THEN_S_ETC___d48,
		SEXT_do_riscv_instr_BITS_31_TO_20____d8,
		_theResult_____2_snd__h511,
		_theResult_____2_snd__h548,
		_theResult_____2_snd__h557,
		_theResult_____2_snd__h564,
		_theResult_____2_snd__h571,
		_theResult_____3__h1121,
		eaddr__h1494,
		eaddr__h809,
		result___1_next_pc__h1700,
		v1_local___1__h2688,
		v_csr___1__h2666,
		v_csr___1__h2734,
		v_rd___1__h498,
		v_rd___1__h506,
		v_rd___1__h513,
		v_rd___1__h520,
		v_rd___1__h527,
		v_rd___1__h534,
		v_rd___1__h543,
		v_rd___1__h552,
		v_rd___1__h559,
		v_rd__h688,
		value__h772,
		x1_avValue_next_pc__h1439,
		x1_avValue_next_pc__h1474,
		x1_avValue_next_pc__h1658,
		x1_avValue_snd_snd__h2401,
		x1_avValue_value1__h1460,
		x1_avValue_value1__h1476,
		x1_avValue_value1__h1660,
		y__h2746,
		y_avValue_value1__h1007,
		y_avValue_value1__h597;
  wire [20 : 0] imm21_UJ__h83;
  wire [12 : 0] imm13_SB__h81;
  wire [11 : 0] do_riscv_instr_BITS_31_TO_20__q1, imm12_S__h80;
  wire [4 : 0] shamt__h446,
	       x1_avValue_rd__h1459,
	       x1_avValue_rd__h1475,
	       x1_avValue_rd__h1659;
  wire [2 : 0] IF_do_riscv_instr_BITS_6_TO_0_EQ_0b110011_0_AN_ETC___d291,
	       IF_do_riscv_instr_BITS_6_TO_0_EQ_0b11_6_AND_do_ETC___d286;
  wire IF_NOT_do_riscv_instr_BITS_6_TO_0_EQ_0b1100011_ETC___d120,
       IF_NOT_do_riscv_instr_BITS_6_TO_0_EQ_0b1100011_ETC___d163,
       NOT_do_riscv_verbosity_ULE_1___d4,
       do_riscv_v1_EQ_do_riscv_v2___d172,
       do_riscv_v1_SLT_do_riscv_v2___d174,
       do_riscv_v1_ULT_do_riscv_v2___d176;

  // action method reset_start
  assign RDY_reset_start = 1'd1 ;
  assign CAN_FIRE_reset_start = 1'd1 ;
  assign WILL_FIRE_reset_start = EN_reset_start ;

  // action method reset_complete
  assign RDY_reset_complete = 1'd1 ;
  assign CAN_FIRE_reset_complete = 1'd1 ;
  assign WILL_FIRE_reset_complete = EN_reset_complete ;

  // actionvalue method do_riscv
  assign do_riscv =
	     { (do_riscv_instr[6:0] != 7'b1100011 &&
		do_riscv_instr[6:0] != 7'b1101111 &&
		do_riscv_instr[6:0] != 7'b1100111) ?
		 ((do_riscv_instr[6:0] == 7'b0010011 ||
		   do_riscv_instr[6:0] == 7'b0110011 &&
		   do_riscv_instr[31:25] != 7'b0000001) ?
		    3'd2 :
		    IF_do_riscv_instr_BITS_6_TO_0_EQ_0b110011_0_AN_ETC___d291) :
		 CASE_do_riscv_instr_BITS_6_TO_0_0b1100011_CASE_ETC__q6,
	       4'h2,
	       x1_avValue_next_pc__h1658,
	       x1_avValue_rd__h1659,
	       x1_avValue_value1__h1660,
	       do_riscv_v2,
	       do_riscv_instr[14:12],
	       do_riscv_instr[6:0] == 7'b1110011 &&
	       do_riscv_instr[13:12] != 2'd0,
	       value__h2636 } ;
  assign RDY_do_riscv = 1'd1 ;
  assign CAN_FIRE_do_riscv = 1'd1 ;
  assign WILL_FIRE_do_riscv = EN_do_riscv ;

  // remaining internal signals
  assign IF_NOT_do_riscv_instr_BITS_6_TO_0_EQ_0b1100011_ETC___d120 =
	     (do_riscv_instr[6:0] != 7'b1100011 &&
	      do_riscv_instr[6:0] != 7'b1101111 &&
	      do_riscv_instr[6:0] != 7'b1100111) ?
	       ((do_riscv_instr[6:0] == 7'b0010011 ||
		 do_riscv_instr[6:0] == 7'b0110011 &&
		 do_riscv_instr[31:25] != 7'b0000001) ?
		  1'b0 :
		  (do_riscv_instr[6:0] != 7'b0110011 ||
		   do_riscv_instr[31:25] != 7'b0000001) &&
		  do_riscv_instr[6:0] != 7'b0110111 &&
		  do_riscv_instr[6:0] != 7'b0010111 &&
		  CASE_do_riscv_instr_BITS_6_TO_0_0b11_NOT_do_ri_ETC__q2) :
	       ((do_riscv_instr[6:0] == 7'b1100011) ?
		  do_riscv_instr[14:12] != 3'b0 &&
		  do_riscv_instr[14:12] != 3'b001 &&
		  do_riscv_instr[14:12] != 3'b100 &&
		  do_riscv_instr[14:12] != 3'b101 &&
		  do_riscv_instr[14:12] != 3'b110 &&
		  do_riscv_instr[14:12] != 3'b111 :
		  do_riscv_instr[6:0] != 7'b1101111 &&
		  do_riscv_instr[6:0] != 7'b1100111) ;
  assign IF_NOT_do_riscv_instr_BITS_6_TO_0_EQ_0b1100011_ETC___d163 =
	     (do_riscv_instr[6:0] != 7'b1100011 &&
	      do_riscv_instr[6:0] != 7'b1101111 &&
	      do_riscv_instr[6:0] != 7'b1100111) ?
	       ((do_riscv_instr[6:0] == 7'b0010011 ||
		 do_riscv_instr[6:0] == 7'b0110011 &&
		 do_riscv_instr[31:25] != 7'b0000001) ?
		  1'b1 :
		  do_riscv_instr[6:0] == 7'b0110011 &&
		  do_riscv_instr[31:25] == 7'b0000001 ||
		  do_riscv_instr[6:0] == 7'b0110111 ||
		  do_riscv_instr[6:0] == 7'b0010111 ||
		  CASE_do_riscv_instr_BITS_6_TO_0_0b11_do_riscv__ETC__q3) :
	       ((do_riscv_instr[6:0] == 7'b1100011) ?
		  do_riscv_instr[14:12] == 3'b0 ||
		  do_riscv_instr[14:12] == 3'b001 ||
		  do_riscv_instr[14:12] == 3'b100 ||
		  do_riscv_instr[14:12] == 3'b101 ||
		  do_riscv_instr[14:12] == 3'b110 ||
		  do_riscv_instr[14:12] == 3'b111 :
		  do_riscv_instr[6:0] == 7'b1101111 ||
		  do_riscv_instr[6:0] == 7'b1100111) ;
  assign IF_do_riscv_instr_BITS_6_TO_0_EQ_0b110011_0_AN_ETC___d291 =
	     (do_riscv_instr[6:0] == 7'b0110011 &&
	      do_riscv_instr[31:25] == 7'b0000001) ?
	       3'd3 :
	       CASE_do_riscv_instr_BITS_6_TO_0_0b11_IF_do_ris_ETC__q4 ;
  assign IF_do_riscv_instr_BITS_6_TO_0_EQ_0b11_6_AND_do_ETC___d286 =
	     (do_riscv_instr[6:0] == 7'b0000011 &&
	      (do_riscv_instr[14:12] == 3'b0 ||
	       do_riscv_instr[14:12] == 3'b100 ||
	       do_riscv_instr[14:12] == 3'b001 ||
	       do_riscv_instr[14:12] == 3'b101 ||
	       do_riscv_instr[14:12] == 3'b010) ||
	      do_riscv_instr[6:0] != 7'b0000011 &&
	      (do_riscv_instr[14:12] == 3'b0 ||
	       do_riscv_instr[14:12] == 3'b001 ||
	       do_riscv_instr[14:12] == 3'b010)) ?
	       ((do_riscv_instr[6:0] == 7'b0000011) ? 3'd4 : 3'd5) :
	       3'd0 ;
  assign IF_do_riscv_instr_BITS_6_TO_0_EQ_0b11_6_THEN_S_ETC___d48 =
	     (do_riscv_instr[6:0] == 7'b0000011) ?
	       SEXT_do_riscv_instr_BITS_31_TO_20____d8 :
	       { {20{imm12_S__h80[11]}}, imm12_S__h80 } ;
  assign NOT_do_riscv_verbosity_ULE_1___d4 = do_riscv_verbosity > 4'd1 ;
  assign SEXT_do_riscv_instr_BITS_31_TO_20____d8 =
	     { {20{do_riscv_instr_BITS_31_TO_20__q1[11]}},
	       do_riscv_instr_BITS_31_TO_20__q1 } ;
  assign _theResult_____2_snd__h511 =
	     (do_riscv_instr[14:12] == 3'b0 &&
	      do_riscv_instr[6:0] == 7'b0110011 &&
	      do_riscv_instr[30]) ?
	       v_rd___1__h506 :
	       _theResult_____2_snd__h518 ;
  assign _theResult_____2_snd__h548 =
	     (do_riscv_instr[14:12] == 3'b101 && !do_riscv_instr[30]) ?
	       v_rd___1__h543 :
	       _theResult_____2_snd__h557 ;
  assign _theResult_____2_snd__h557 =
	     (do_riscv_instr[14:12] == 3'b101 && do_riscv_instr[30]) ?
	       v_rd___1__h552 :
	       _theResult_____2_snd__h564 ;
  assign _theResult_____2_snd__h564 =
	     (do_riscv_instr[14:12] == 3'b110) ?
	       v_rd___1__h559 :
	       _theResult_____2_snd__h571 ;
  assign _theResult_____2_snd__h571 =
	     do_riscv_v1 & x1_avValue_snd_snd__h2401 ;
  assign _theResult_____3__h1121 =
	     do_riscv_instr[14] ? v1_local___1__h2688 : do_riscv_v1 ;
  assign do_riscv_instr_BITS_31_TO_20__q1 = do_riscv_instr[31:20] ;
  assign do_riscv_v1_EQ_do_riscv_v2___d172 = do_riscv_v1 == do_riscv_v2 ;
  assign do_riscv_v1_SLT_do_riscv_v2___d174 =
	     (do_riscv_v1 ^ 32'h80000000) < (do_riscv_v2 ^ 32'h80000000) ;
  assign do_riscv_v1_ULT_do_riscv_v2___d176 = do_riscv_v1 < do_riscv_v2 ;
  assign eaddr__h1494 =
	     do_riscv_pc + { {19{imm13_SB__h81[12]}}, imm13_SB__h81 } ;
  assign eaddr__h809 = y_avValue_value1__h1007 ;
  assign imm12_S__h80 = { do_riscv_instr[31:25], do_riscv_instr[11:7] } ;
  assign imm13_SB__h81 =
	     { do_riscv_instr[31],
	       do_riscv_instr[7],
	       do_riscv_instr[30:25],
	       do_riscv_instr[11:8],
	       1'b0 } ;
  assign imm21_UJ__h83 =
	     { do_riscv_instr[31],
	       do_riscv_instr[19:12],
	       do_riscv_instr[20],
	       do_riscv_instr[30:21],
	       1'b0 } ;
  assign result___1_next_pc__h1700 = do_riscv_pc + 32'd4 ;
  assign shamt__h446 =
	     (do_riscv_instr[6:0] == 7'b0010011) ?
	       do_riscv_instr[24:20] :
	       do_riscv_v2[4:0] ;
  assign v1_local___1__h2688 = { 27'd0, do_riscv_instr[19:15] } ;
  assign v_csr___1__h2666 = do_riscv_v_csr[31:0] | _theResult_____3__h1121 ;
  assign v_csr___1__h2734 = do_riscv_v_csr[31:0] & y__h2746 ;
  assign v_rd___1__h498 = do_riscv_v1 + x1_avValue_snd_snd__h2401 ;
  assign v_rd___1__h506 = do_riscv_v1 - x1_avValue_snd_snd__h2401 ;
  assign v_rd___1__h513 = do_riscv_v1 << shamt__h446 ;
  assign v_rd___1__h520 =
	     ((do_riscv_v1 ^ 32'h80000000) <
	      (x1_avValue_snd_snd__h2401 ^ 32'h80000000)) ?
	       32'd1 :
	       32'd0 ;
  assign v_rd___1__h527 =
	     (do_riscv_v1 < x1_avValue_snd_snd__h2401) ? 32'd1 : 32'd0 ;
  assign v_rd___1__h534 = do_riscv_v1 ^ x1_avValue_snd_snd__h2401 ;
  assign v_rd___1__h543 = do_riscv_v1 >> shamt__h446 ;
  assign v_rd___1__h552 =
	     do_riscv_v1 >> shamt__h446 |
	     ~(32'hFFFFFFFF >> shamt__h446) & {32{do_riscv_v1[31]}} ;
  assign v_rd___1__h559 = do_riscv_v1 | x1_avValue_snd_snd__h2401 ;
  assign v_rd__h688 = { do_riscv_instr[31:12], 12'h0 } ;
  assign value__h772 = do_riscv_pc + v_rd__h688 ;
  assign x1_avValue_next_pc__h1439 = result___1_next_pc__h1700 ;
  assign x1_avValue_next_pc__h1474 =
	     (do_riscv_instr[6:0] == 7'b0110011 &&
	      do_riscv_instr[31:25] == 7'b0000001) ?
	       result___1_next_pc__h1700 :
	       x1_avValue_next_pc__h1439 ;
  assign x1_avValue_next_pc__h1658 =
	     (do_riscv_instr[6:0] != 7'b1100011 &&
	      do_riscv_instr[6:0] != 7'b1101111 &&
	      do_riscv_instr[6:0] != 7'b1100111) ?
	       x1_avValue_next_pc__h1474 :
	       _theResult___fst_next_pc__h1650 ;
  assign x1_avValue_rd__h1459 =
	     (do_riscv_instr[6:0] == 7'b0110011 &&
	      do_riscv_instr[31:25] == 7'b0000001 ||
	      do_riscv_instr[6:0] == 7'b0110111 ||
	      do_riscv_instr[6:0] == 7'b0010111) ?
	       do_riscv_instr[11:7] :
	       x1_avValue_rd__h1408 ;
  assign x1_avValue_rd__h1475 =
	     (do_riscv_instr[6:0] == 7'b0010011 ||
	      do_riscv_instr[6:0] == 7'b0110011 &&
	      do_riscv_instr[31:25] != 7'b0000001) ?
	       do_riscv_instr[11:7] :
	       x1_avValue_rd__h1459 ;
  assign x1_avValue_rd__h1659 =
	     (do_riscv_instr[6:0] != 7'b1100011 &&
	      do_riscv_instr[6:0] != 7'b1101111 &&
	      do_riscv_instr[6:0] != 7'b1100111) ?
	       x1_avValue_rd__h1475 :
	       do_riscv_instr[11:7] ;
  assign x1_avValue_snd_snd__h2401 =
	     (do_riscv_instr[6:0] == 7'b0010011) ?
	       SEXT_do_riscv_instr_BITS_31_TO_20____d8 :
	       do_riscv_v2 ;
  assign x1_avValue_value1__h1460 =
	     (do_riscv_instr[6:0] == 7'b0110011 &&
	      do_riscv_instr[31:25] == 7'b0000001) ?
	       do_riscv_v1 :
	       x1_avValue_value1__h1441 ;
  assign x1_avValue_value1__h1476 =
	     (do_riscv_instr[6:0] == 7'b0010011 ||
	      do_riscv_instr[6:0] == 7'b0110011 &&
	      do_riscv_instr[31:25] != 7'b0000001) ?
	       y_avValue_value1__h597 :
	       x1_avValue_value1__h1460 ;
  assign x1_avValue_value1__h1660 =
	     (do_riscv_instr[6:0] != 7'b1100011 &&
	      do_riscv_instr[6:0] != 7'b1101111 &&
	      do_riscv_instr[6:0] != 7'b1100111) ?
	       x1_avValue_value1__h1476 :
	       result___1_next_pc__h1700 ;
  assign y__h2746 = ~_theResult_____3__h1121 ;
  assign y_avValue_value1__h1007 =
	     do_riscv_v1 +
	     IF_do_riscv_instr_BITS_6_TO_0_EQ_0b11_6_THEN_S_ETC___d48 ;
  assign y_avValue_value1__h597 =
	     (do_riscv_instr[14:12] == 3'b0 &&
	      (do_riscv_instr[6:0] != 7'b0110011 || !do_riscv_instr[30])) ?
	       v_rd___1__h498 :
	       _theResult_____2_snd__h511 ;
  always@(do_riscv_instr)
  begin
    case (do_riscv_instr[6:0])
      7'b0000011, 7'b0100011: x1_avValue_rd__h1408 = do_riscv_instr[11:7];
      default: x1_avValue_rd__h1408 = do_riscv_instr[11:7];
    endcase
  end
  always@(do_riscv_instr or
	  do_riscv_v_csr or
	  _theResult_____3__h1121 or v_csr___1__h2666 or v_csr___1__h2734)
  begin
    case (do_riscv_instr[13:12])
      2'd0: value__h2636 = do_riscv_v_csr[31:0];
      2'd1: value__h2636 = _theResult_____3__h1121;
      2'd2: value__h2636 = v_csr___1__h2666;
      2'd3: value__h2636 = v_csr___1__h2734;
    endcase
  end
  always@(do_riscv_instr or
	  do_riscv_v_csr or
	  y_avValue_value1__h1007 or value__h772 or v_rd__h688)
  begin
    case (do_riscv_instr[6:0])
      7'b0000011, 7'b0100011:
	  x1_avValue_value1__h1441 = y_avValue_value1__h1007;
      7'b0010111: x1_avValue_value1__h1441 = value__h772;
      7'b0110111: x1_avValue_value1__h1441 = v_rd__h688;
      default: x1_avValue_value1__h1441 = do_riscv_v_csr[31:0];
    endcase
  end
  always@(do_riscv_instr or
	  _theResult_____2_snd__h548 or
	  v_rd___1__h513 or
	  v_rd___1__h520 or v_rd___1__h527 or v_rd___1__h534)
  begin
    case (do_riscv_instr[14:12])
      3'b001: _theResult_____2_snd__h518 = v_rd___1__h513;
      3'b010: _theResult_____2_snd__h518 = v_rd___1__h520;
      3'b011: _theResult_____2_snd__h518 = v_rd___1__h527;
      3'b100: _theResult_____2_snd__h518 = v_rd___1__h534;
      default: _theResult_____2_snd__h518 = _theResult_____2_snd__h548;
    endcase
  end
  always@(do_riscv_instr or do_riscv_v_csr)
  begin
    case (do_riscv_instr[6:0])
      7'b0000011, 7'b0100011:
	  CASE_do_riscv_instr_BITS_6_TO_0_0b11_NOT_do_ri_ETC__q2 =
	      (do_riscv_instr[6:0] != 7'b0000011 ||
	       do_riscv_instr[14:12] != 3'b0 &&
	       do_riscv_instr[14:12] != 3'b100 &&
	       do_riscv_instr[14:12] != 3'b001 &&
	       do_riscv_instr[14:12] != 3'b101 &&
	       do_riscv_instr[14:12] != 3'b010) &&
	      (do_riscv_instr[6:0] == 7'b0000011 ||
	       do_riscv_instr[14:12] != 3'b0 &&
	       do_riscv_instr[14:12] != 3'b001 &&
	       do_riscv_instr[14:12] != 3'b010);
      default: CASE_do_riscv_instr_BITS_6_TO_0_0b11_NOT_do_ri_ETC__q2 =
		   do_riscv_instr[6:0] != 7'b1110011 ||
		   do_riscv_instr[13:12] == 2'd0 ||
		   !do_riscv_v_csr[32];
    endcase
  end
  always@(do_riscv_instr or do_riscv_v_csr)
  begin
    case (do_riscv_instr[6:0])
      7'b0000011, 7'b0100011:
	  CASE_do_riscv_instr_BITS_6_TO_0_0b11_do_riscv__ETC__q3 =
	      do_riscv_instr[6:0] == 7'b0000011 &&
	      (do_riscv_instr[14:12] == 3'b0 ||
	       do_riscv_instr[14:12] == 3'b100 ||
	       do_riscv_instr[14:12] == 3'b001 ||
	       do_riscv_instr[14:12] == 3'b101 ||
	       do_riscv_instr[14:12] == 3'b010) ||
	      do_riscv_instr[6:0] != 7'b0000011 &&
	      (do_riscv_instr[14:12] == 3'b0 ||
	       do_riscv_instr[14:12] == 3'b001 ||
	       do_riscv_instr[14:12] == 3'b010);
      default: CASE_do_riscv_instr_BITS_6_TO_0_0b11_do_riscv__ETC__q3 =
		   do_riscv_instr[6:0] == 7'b1110011 &&
		   do_riscv_instr[13:12] != 2'd0 &&
		   do_riscv_v_csr[32];
    endcase
  end
  always@(do_riscv_instr or
	  do_riscv_v1_ULT_do_riscv_v2___d176 or
	  do_riscv_v1_EQ_do_riscv_v2___d172 or
	  do_riscv_v1_SLT_do_riscv_v2___d174)
  begin
    case (do_riscv_instr[14:12])
      3'b0:
	  IF_do_riscv_instr_BITS_14_TO_12_1_EQ_0b0_4_THE_ETC___d183 =
	      do_riscv_v1_EQ_do_riscv_v2___d172;
      3'b001:
	  IF_do_riscv_instr_BITS_14_TO_12_1_EQ_0b0_4_THE_ETC___d183 =
	      !do_riscv_v1_EQ_do_riscv_v2___d172;
      3'b100:
	  IF_do_riscv_instr_BITS_14_TO_12_1_EQ_0b0_4_THE_ETC___d183 =
	      do_riscv_v1_SLT_do_riscv_v2___d174;
      3'b101:
	  IF_do_riscv_instr_BITS_14_TO_12_1_EQ_0b0_4_THE_ETC___d183 =
	      !do_riscv_v1_SLT_do_riscv_v2___d174;
      3'b110:
	  IF_do_riscv_instr_BITS_14_TO_12_1_EQ_0b0_4_THE_ETC___d183 =
	      do_riscv_v1_ULT_do_riscv_v2___d176;
      default: IF_do_riscv_instr_BITS_14_TO_12_1_EQ_0b0_4_THE_ETC___d183 =
		   do_riscv_instr[14:12] == 3'b111 &&
		   !do_riscv_v1_ULT_do_riscv_v2___d176;
    endcase
  end
  always@(do_riscv_instr or
	  result___1_next_pc__h1700 or
	  IF_do_riscv_instr_BITS_14_TO_12_1_EQ_0b0_4_THE_ETC___d183 or
	  eaddr__h1494 or
	  do_riscv_v1 or
	  SEXT_do_riscv_instr_BITS_31_TO_20____d8 or
	  do_riscv_pc or imm21_UJ__h83)
  begin
    case (do_riscv_instr[6:0])
      7'b1100011:
	  _theResult___fst_next_pc__h1650 =
	      IF_do_riscv_instr_BITS_14_TO_12_1_EQ_0b0_4_THE_ETC___d183 ?
		eaddr__h1494 :
		result___1_next_pc__h1700;
      7'b1100111:
	  _theResult___fst_next_pc__h1650 =
	      do_riscv_v1 + SEXT_do_riscv_instr_BITS_31_TO_20____d8;
      7'b1101111:
	  _theResult___fst_next_pc__h1650 =
	      do_riscv_pc + { {11{imm21_UJ__h83[20]}}, imm21_UJ__h83 };
      default: _theResult___fst_next_pc__h1650 = result___1_next_pc__h1700;
    endcase
  end
  always@(do_riscv_instr or
	  IF_do_riscv_instr_BITS_6_TO_0_EQ_0b11_6_AND_do_ETC___d286 or
	  do_riscv_v_csr)
  begin
    case (do_riscv_instr[6:0])
      7'b0000011, 7'b0100011:
	  CASE_do_riscv_instr_BITS_6_TO_0_0b11_IF_do_ris_ETC__q4 =
	      IF_do_riscv_instr_BITS_6_TO_0_EQ_0b11_6_AND_do_ETC___d286;
      7'b0010111, 7'b0110111:
	  CASE_do_riscv_instr_BITS_6_TO_0_0b11_IF_do_ris_ETC__q4 = 3'd2;
      7'b1110011:
	  CASE_do_riscv_instr_BITS_6_TO_0_0b11_IF_do_ris_ETC__q4 =
	      (do_riscv_instr[13:12] == 2'd0 || !do_riscv_v_csr[32]) ?
		3'd0 :
		3'd2;
      default: CASE_do_riscv_instr_BITS_6_TO_0_0b11_IF_do_ris_ETC__q4 = 3'd0;
    endcase
  end
  always@(do_riscv_instr)
  begin
    case (do_riscv_instr[14:12])
      3'b0, 3'b001, 3'b100, 3'b101, 3'b110, 3'b111:
	  CASE_do_riscv_instr_BITS_14_TO_12_0b0_1_0b1_1__ETC__q5 = 3'd1;
      default: CASE_do_riscv_instr_BITS_14_TO_12_0b0_1_0b1_1__ETC__q5 = 3'd0;
    endcase
  end
  always@(do_riscv_instr or
	  CASE_do_riscv_instr_BITS_14_TO_12_0b0_1_0b1_1__ETC__q5)
  begin
    case (do_riscv_instr[6:0])
      7'b1100011:
	  CASE_do_riscv_instr_BITS_6_TO_0_0b1100011_CASE_ETC__q6 =
	      CASE_do_riscv_instr_BITS_14_TO_12_0b0_1_0b1_1__ETC__q5;
      7'b1100111, 7'b1101111:
	  CASE_do_riscv_instr_BITS_6_TO_0_0b1100011_CASE_ETC__q6 = 3'd2;
      default: CASE_do_riscv_instr_BITS_6_TO_0_0b1100011_CASE_ETC__q6 = 3'd0;
    endcase
  end

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (EN_do_riscv && do_riscv_instr[6:0] == 7'b0010011 &&
	NOT_do_riscv_verbosity_ULE_1___d4)
      $display("    fav_ALU_OP_IMM: s_v1 = %0h, s_v2_local = %0h",
	       $signed(do_riscv_v1),
	       $signed(SEXT_do_riscv_instr_BITS_31_TO_20____d8));
    if (EN_do_riscv && do_riscv_instr[6:0] == 7'b0110011 &&
	do_riscv_instr[31:25] != 7'b0000001 &&
	NOT_do_riscv_verbosity_ULE_1___d4)
      $display("    fav_ALU_OP: s_v1 = %0h, s_v2_local = %0h",
	       $signed(do_riscv_v1),
	       $signed(do_riscv_v2));
    if (EN_do_riscv && do_riscv_instr[6:0] == 7'b0110111 &&
	NOT_do_riscv_verbosity_ULE_1___d4)
      $display("    fav_ALU_LUI");
    if (EN_do_riscv && do_riscv_instr[6:0] == 7'b0010111 &&
	NOT_do_riscv_verbosity_ULE_1___d4)
      $display("    fav_ALU_AUIPC");
    if (EN_do_riscv && do_riscv_instr[6:0] != 7'b1100011 &&
	do_riscv_instr[6:0] != 7'b1101111 &&
	do_riscv_instr[6:0] != 7'b1100111 &&
	do_riscv_instr[6:0] != 7'b0010011 &&
	(do_riscv_instr[6:0] != 7'b0110011 ||
	 do_riscv_instr[31:25] == 7'b0000001) &&
	(do_riscv_instr[6:0] != 7'b0110011 ||
	 do_riscv_instr[31:25] != 7'b0000001) &&
	do_riscv_instr[6:0] != 7'b0110111 &&
	do_riscv_instr[6:0] != 7'b0010111 &&
	(do_riscv_instr[6:0] == 7'b0000011 ||
	 do_riscv_instr[6:0] == 7'b0100011) &&
	NOT_do_riscv_verbosity_ULE_1___d4)
      $display("    fav_LD_ST: rd %0h, ld_addr 0x%0h = s_v1 0x%0h + imm_s 0x%0h, f3 = 0x%0h",
	       do_riscv_instr[11:7],
	       eaddr__h809,
	       $signed(do_riscv_v1),
	       $signed(IF_do_riscv_instr_BITS_6_TO_0_EQ_0b11_6_THEN_S_ETC___d48),
	       do_riscv_instr[14:12]);
    if (EN_do_riscv && do_riscv_instr[6:0] == 7'b1110011 &&
	NOT_do_riscv_verbosity_ULE_1___d4)
      $display("    fav_ALU_SYSTEM");
    if (EN_do_riscv && do_riscv_instr[6:0] == 7'b1110011 &&
	do_riscv_instr[13:12] != 2'd0 &&
	!do_riscv_v_csr[32])
      begin
        v__h1187 = $stime;
	#0;
      end
    v__h1181 = v__h1187 / 32'd10;
    if (EN_do_riscv && do_riscv_instr[6:0] == 7'b1110011 &&
	do_riscv_instr[13:12] != 2'd0 &&
	!do_riscv_v_csr[32])
      $display("%0d: ERROR: fav_ALU_SYSTEM: unimplemented CSR", v__h1181);
    if (EN_do_riscv &&
	(NOT_do_riscv_verbosity_ULE_1___d4 ||
	 IF_NOT_do_riscv_instr_BITS_6_TO_0_EQ_0b1100011_ETC___d120))
      begin
        v__h1952 = $stime;
	#0;
      end
    v__h1946 = v__h1952 / 32'd10;
    if (EN_do_riscv &&
	(NOT_do_riscv_verbosity_ULE_1___d4 ||
	 IF_NOT_do_riscv_instr_BITS_6_TO_0_EQ_0b1100011_ETC___d120))
      $write("%0d: fav_do_riscv: pc 0x%0h  instr 0x%0h  v1 0x%0h  v2 0x%0h  m_v_csr ",
	     v__h1946,
	     do_riscv_pc,
	     do_riscv_instr,
	     do_riscv_v1,
	     do_riscv_v2);
    if (EN_do_riscv &&
	(NOT_do_riscv_verbosity_ULE_1___d4 ||
	 IF_NOT_do_riscv_instr_BITS_6_TO_0_EQ_0b1100011_ETC___d120) &&
	do_riscv_v_csr[32])
      $write("tagged Valid ", "'h%h", do_riscv_v_csr[31:0]);
    if (EN_do_riscv &&
	(NOT_do_riscv_verbosity_ULE_1___d4 ||
	 IF_NOT_do_riscv_instr_BITS_6_TO_0_EQ_0b1100011_ETC___d120) &&
	!do_riscv_v_csr[32])
      $write("tagged Invalid ", "");
    if (EN_do_riscv &&
	(NOT_do_riscv_verbosity_ULE_1___d4 ||
	 IF_NOT_do_riscv_instr_BITS_6_TO_0_EQ_0b1100011_ETC___d120))
      $write("\n");
    if (EN_do_riscv &&
	(NOT_do_riscv_verbosity_ULE_1___d4 ||
	 IF_NOT_do_riscv_instr_BITS_6_TO_0_EQ_0b1100011_ETC___d120))
      $write("    result: ");
    if (EN_do_riscv &&
	(NOT_do_riscv_verbosity_ULE_1___d4 ||
	 IF_NOT_do_riscv_instr_BITS_6_TO_0_EQ_0b1100011_ETC___d120))
      $write("Result [");
    if (EN_do_riscv &&
	IF_NOT_do_riscv_instr_BITS_6_TO_0_EQ_0b1100011_ETC___d120)
      $write("ILLEGAL_INSTRUCTION");
    if (EN_do_riscv &&
	(NOT_do_riscv_verbosity_ULE_1___d4 ||
	 IF_NOT_do_riscv_instr_BITS_6_TO_0_EQ_0b1100011_ETC___d120) &&
	IF_NOT_do_riscv_instr_BITS_6_TO_0_EQ_0b1100011_ETC___d163)
      $write("next_pc 0x%0h rd %0d value1 0x%0h value2 0x%0h f3 0x%0h m_csr_val ",
	     x1_avValue_next_pc__h1658,
	     x1_avValue_rd__h1659,
	     x1_avValue_value1__h1660,
	     do_riscv_v2,
	     do_riscv_instr[14:12]);
    if (EN_do_riscv &&
	(NOT_do_riscv_verbosity_ULE_1___d4 ||
	 IF_NOT_do_riscv_instr_BITS_6_TO_0_EQ_0b1100011_ETC___d120) &&
	IF_NOT_do_riscv_instr_BITS_6_TO_0_EQ_0b1100011_ETC___d163 &&
	(do_riscv_instr[6:0] != 7'b1110011 || do_riscv_instr[13:12] == 2'd0))
      $write("tagged Invalid ", "");
    if (EN_do_riscv &&
	(NOT_do_riscv_verbosity_ULE_1___d4 ||
	 IF_NOT_do_riscv_instr_BITS_6_TO_0_EQ_0b1100011_ETC___d120) &&
	IF_NOT_do_riscv_instr_BITS_6_TO_0_EQ_0b1100011_ETC___d163 &&
	do_riscv_instr[6:0] == 7'b1110011 &&
	do_riscv_instr[13:12] != 2'd0)
      $write("tagged Valid ", "'h%h", value__h2636);
    if (EN_do_riscv &&
	(NOT_do_riscv_verbosity_ULE_1___d4 ||
	 IF_NOT_do_riscv_instr_BITS_6_TO_0_EQ_0b1100011_ETC___d120))
      $write("]");
    if (EN_do_riscv &&
	(NOT_do_riscv_verbosity_ULE_1___d4 ||
	 IF_NOT_do_riscv_instr_BITS_6_TO_0_EQ_0b1100011_ETC___d120))
      $write("\n");
  end
  // synopsys translate_on
endmodule  // mkRISCV_Exec

