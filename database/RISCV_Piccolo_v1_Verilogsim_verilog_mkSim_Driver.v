// This program was cloned from: https://github.com/rsnikhil/RISCV_Piccolo_v1
// License: MIT License

//
// Generated by Bluespec Compiler, version 2016.03.beta1 (build 34761, 2016-03-16)
//
// On Sat Jul  9 22:06:04 EDT 2016
//
//
// Ports:
// Name                         I/O  size props
// client_control_request_get     O   208 reg
// RDY_client_control_request_get  O     1 reg
// RDY_client_control_response_put  O     1 reg
// from_console_get               O     8 reg
// RDY_from_console_get           O     1 reg
// RDY_to_console_put             O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// client_control_response_put    I    72 reg
// to_console_put                 I     8 reg
// EN_client_control_response_put  I     1
// EN_to_console_put              I     1
// EN_client_control_request_get  I     1
// EN_from_console_get            I     1
//
// No combinational paths from inputs to outputs
//
//

`include "import_DPI_C_decls.vh"

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkSim_Driver(CLK,
		    RST_N,

		    EN_client_control_request_get,
		    client_control_request_get,
		    RDY_client_control_request_get,

		    client_control_response_put,
		    EN_client_control_response_put,
		    RDY_client_control_response_put,

		    EN_from_console_get,
		    from_console_get,
		    RDY_from_console_get,

		    to_console_put,
		    EN_to_console_put,
		    RDY_to_console_put);
  input  CLK;
  input  RST_N;

  // actionvalue method client_control_request_get
  input  EN_client_control_request_get;
  output [207 : 0] client_control_request_get;
  output RDY_client_control_request_get;

  // action method client_control_response_put
  input  [71 : 0] client_control_response_put;
  input  EN_client_control_response_put;
  output RDY_client_control_response_put;

  // actionvalue method from_console_get
  input  EN_from_console_get;
  output [7 : 0] from_console_get;
  output RDY_from_console_get;

  // action method to_console_put
  input  [7 : 0] to_console_put;
  input  EN_to_console_put;
  output RDY_to_console_put;

  // signals for module outputs
  wire [207 : 0] client_control_request_get;
  wire [7 : 0] from_console_get;
  wire RDY_client_control_request_get,
       RDY_client_control_response_put,
       RDY_from_console_get,
       RDY_to_console_put;

  // inlined wires
  wire start_wire$whas, state_set_pw$whas;

  // register rg_addr
  reg [63 : 0] rg_addr;
  wire [63 : 0] rg_addr$D_IN;
  wire rg_addr$EN;

  // register rg_elf_file_loaded
  reg rg_elf_file_loaded;
  wire rg_elf_file_loaded$D_IN, rg_elf_file_loaded$EN;

  // register rg_end_cycle
  reg [63 : 0] rg_end_cycle;
  wire [63 : 0] rg_end_cycle$D_IN;
  wire rg_end_cycle$EN;

  // register rg_end_instret
  reg [63 : 0] rg_end_instret;
  wire [63 : 0] rg_end_instret$D_IN;
  wire rg_end_instret$EN;

  // register rg_exit_pc
  reg [63 : 0] rg_exit_pc;
  wire [63 : 0] rg_exit_pc$D_IN;
  wire rg_exit_pc$EN;

  // register rg_max_addr
  reg [63 : 0] rg_max_addr;
  wire [63 : 0] rg_max_addr$D_IN;
  wire rg_max_addr$EN;

  // register rg_min_addr
  reg [63 : 0] rg_min_addr;
  wire [63 : 0] rg_min_addr$D_IN;
  wire rg_min_addr$EN;

  // register rg_p_state
  reg [63 : 0] rg_p_state;
  wire [63 : 0] rg_p_state$D_IN;
  wire rg_p_state$EN;

  // register rg_start_cycle
  reg [63 : 0] rg_start_cycle;
  wire [63 : 0] rg_start_cycle$D_IN;
  wire rg_start_cycle$EN;

  // register rg_start_instret
  reg [63 : 0] rg_start_instret;
  wire [63 : 0] rg_start_instret$D_IN;
  wire rg_start_instret$EN;

  // register running
  reg running;
  wire running$D_IN, running$EN;

  // register start_reg
  reg start_reg;
  wire start_reg$D_IN, start_reg$EN;

  // register start_reg_1
  reg start_reg_1;
  wire start_reg_1$D_IN, start_reg_1$EN;

  // register state_can_overlap
  reg state_can_overlap;
  wire state_can_overlap$D_IN, state_can_overlap$EN;

  // register state_fired
  reg state_fired;
  wire state_fired$D_IN, state_fired$EN;

  // register state_mkFSMstate
  reg [4 : 0] state_mkFSMstate;
  reg [4 : 0] state_mkFSMstate$D_IN;
  wire state_mkFSMstate$EN;

  // ports of submodule fControlReq
  reg [207 : 0] fControlReq$D_IN;
  wire [207 : 0] fControlReq$D_OUT;
  wire fControlReq$CLR,
       fControlReq$DEQ,
       fControlReq$EMPTY_N,
       fControlReq$ENQ,
       fControlReq$FULL_N;

  // ports of submodule fControlRsp
  wire [71 : 0] fControlRsp$D_IN, fControlRsp$D_OUT;
  wire fControlRsp$CLR,
       fControlRsp$DEQ,
       fControlRsp$EMPTY_N,
       fControlRsp$ENQ,
       fControlRsp$FULL_N;

  // ports of submodule f_from_console
  wire [7 : 0] f_from_console$D_IN, f_from_console$D_OUT;
  wire f_from_console$CLR,
       f_from_console$DEQ,
       f_from_console$EMPTY_N,
       f_from_console$ENQ,
       f_from_console$FULL_N;

  // ports of submodule f_to_console
  wire [7 : 0] f_to_console$D_IN, f_to_console$D_OUT;
  wire f_to_console$CLR,
       f_to_console$DEQ,
       f_to_console$EMPTY_N,
       f_to_console$ENQ,
       f_to_console$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_action_f_init_l232c13,
       CAN_FIRE_RL_action_f_update_l232c13,
       CAN_FIRE_RL_action_l104c7,
       CAN_FIRE_RL_action_l108c7,
       CAN_FIRE_RL_action_l116c7,
       CAN_FIRE_RL_action_l120c7,
       CAN_FIRE_RL_action_l128c7,
       CAN_FIRE_RL_action_l135c7,
       CAN_FIRE_RL_action_l141c7,
       CAN_FIRE_RL_action_l145c7,
       CAN_FIRE_RL_action_l151c7,
       CAN_FIRE_RL_action_l155c7,
       CAN_FIRE_RL_action_l160c53,
       CAN_FIRE_RL_action_l172c10,
       CAN_FIRE_RL_action_l178c10,
       CAN_FIRE_RL_action_l201c10,
       CAN_FIRE_RL_action_l207c10,
       CAN_FIRE_RL_action_l216c13,
       CAN_FIRE_RL_action_l227c32,
       CAN_FIRE_RL_action_l232c89,
       CAN_FIRE_RL_action_l244c16,
       CAN_FIRE_RL_action_l248c10,
       CAN_FIRE_RL_action_l261c10,
       CAN_FIRE_RL_auto_finish,
       CAN_FIRE_RL_auto_start,
       CAN_FIRE_RL_fsm_start,
       CAN_FIRE_RL_idle_l170c7,
       CAN_FIRE_RL_restart,
       CAN_FIRE_RL_rl_from_console,
       CAN_FIRE_RL_rl_to_console,
       CAN_FIRE_RL_start_reg__dreg_update,
       CAN_FIRE_RL_state_every,
       CAN_FIRE_RL_state_fired__dreg_update,
       CAN_FIRE_RL_state_handle_abort,
       CAN_FIRE___me_check_10,
       CAN_FIRE___me_check_11,
       CAN_FIRE___me_check_12,
       CAN_FIRE___me_check_13,
       CAN_FIRE___me_check_14,
       CAN_FIRE___me_check_15,
       CAN_FIRE___me_check_16,
       CAN_FIRE___me_check_17,
       CAN_FIRE___me_check_18,
       CAN_FIRE___me_check_19,
       CAN_FIRE___me_check_20,
       CAN_FIRE___me_check_21,
       CAN_FIRE___me_check_22,
       CAN_FIRE___me_check_23,
       CAN_FIRE___me_check_24,
       CAN_FIRE___me_check_25,
       CAN_FIRE___me_check_26,
       CAN_FIRE___me_check_27,
       CAN_FIRE___me_check_28,
       CAN_FIRE___me_check_7,
       CAN_FIRE___me_check_8,
       CAN_FIRE___me_check_9,
       CAN_FIRE_client_control_request_get,
       CAN_FIRE_client_control_response_put,
       CAN_FIRE_from_console_get,
       CAN_FIRE_to_console_put,
       WILL_FIRE_RL_action_f_init_l232c13,
       WILL_FIRE_RL_action_f_update_l232c13,
       WILL_FIRE_RL_action_l104c7,
       WILL_FIRE_RL_action_l108c7,
       WILL_FIRE_RL_action_l116c7,
       WILL_FIRE_RL_action_l120c7,
       WILL_FIRE_RL_action_l128c7,
       WILL_FIRE_RL_action_l135c7,
       WILL_FIRE_RL_action_l141c7,
       WILL_FIRE_RL_action_l145c7,
       WILL_FIRE_RL_action_l151c7,
       WILL_FIRE_RL_action_l155c7,
       WILL_FIRE_RL_action_l160c53,
       WILL_FIRE_RL_action_l172c10,
       WILL_FIRE_RL_action_l178c10,
       WILL_FIRE_RL_action_l201c10,
       WILL_FIRE_RL_action_l207c10,
       WILL_FIRE_RL_action_l216c13,
       WILL_FIRE_RL_action_l227c32,
       WILL_FIRE_RL_action_l232c89,
       WILL_FIRE_RL_action_l244c16,
       WILL_FIRE_RL_action_l248c10,
       WILL_FIRE_RL_action_l261c10,
       WILL_FIRE_RL_auto_finish,
       WILL_FIRE_RL_auto_start,
       WILL_FIRE_RL_fsm_start,
       WILL_FIRE_RL_idle_l170c7,
       WILL_FIRE_RL_restart,
       WILL_FIRE_RL_rl_from_console,
       WILL_FIRE_RL_rl_to_console,
       WILL_FIRE_RL_start_reg__dreg_update,
       WILL_FIRE_RL_state_every,
       WILL_FIRE_RL_state_fired__dreg_update,
       WILL_FIRE_RL_state_handle_abort,
       WILL_FIRE___me_check_10,
       WILL_FIRE___me_check_11,
       WILL_FIRE___me_check_12,
       WILL_FIRE___me_check_13,
       WILL_FIRE___me_check_14,
       WILL_FIRE___me_check_15,
       WILL_FIRE___me_check_16,
       WILL_FIRE___me_check_17,
       WILL_FIRE___me_check_18,
       WILL_FIRE___me_check_19,
       WILL_FIRE___me_check_20,
       WILL_FIRE___me_check_21,
       WILL_FIRE___me_check_22,
       WILL_FIRE___me_check_23,
       WILL_FIRE___me_check_24,
       WILL_FIRE___me_check_25,
       WILL_FIRE___me_check_26,
       WILL_FIRE___me_check_27,
       WILL_FIRE___me_check_28,
       WILL_FIRE___me_check_7,
       WILL_FIRE___me_check_8,
       WILL_FIRE___me_check_9,
       WILL_FIRE_client_control_request_get,
       WILL_FIRE_client_control_response_put,
       WILL_FIRE_from_console_get,
       WILL_FIRE_to_console_put;

  // inputs to muxes for submodule ports
  wire [207 : 0] MUX_fControlReq$enq_1__VAL_1,
		 MUX_fControlReq$enq_1__VAL_2,
		 MUX_fControlReq$enq_1__VAL_3;
  wire [63 : 0] MUX_rg_addr$write_1__VAL_2;
  wire MUX_fControlReq$enq_1__SEL_1,
       MUX_fControlReq$enq_1__SEL_7,
       MUX_fControlReq$enq_1__SEL_8;

  // remaining internal signals
  reg [63 : 0] v__h43325,
	       v__h43862,
	       v__h43905,
	       v__h43948,
	       x__h43101,
	       x__h46116;
  reg [31 : 0] b__h43615, v__h44836;
  reg [7 : 0] v__h503;
  wire [127 : 0] rg_end_cycle_49_MINUS_rg_start_cycle_50_51_MUL_10___d152;
  wire [63 : 0] c__h50790,
		cpi_x10__h50792,
		rg_end_cycle_49_MINUS_rg_start_cycle_50_51_MUL_ETC___d155,
		rg_end_cycle_49_MINUS_rg_start_cycle_50_51_MUL_ETC___d156,
		rg_end_instret_41_MINUS_rg_start_instret_42___d143,
		x__h44883;
  wire [31 : 0] x__h44886;
  wire abort_whas__0_AND_abort_wget__1_2_OR_state_mkF_ETC___d167,
       rg_addr_5_EQ_rg_exit_pc_3___d84,
       rg_addr_5_ULT_rg_max_addr_2___d76;

  // actionvalue method client_control_request_get
  assign client_control_request_get = fControlReq$D_OUT ;
  assign RDY_client_control_request_get = fControlReq$EMPTY_N ;
  assign CAN_FIRE_client_control_request_get = fControlReq$EMPTY_N ;
  assign WILL_FIRE_client_control_request_get =
	     EN_client_control_request_get ;

  // action method client_control_response_put
  assign RDY_client_control_response_put = fControlRsp$FULL_N ;
  assign CAN_FIRE_client_control_response_put = fControlRsp$FULL_N ;
  assign WILL_FIRE_client_control_response_put =
	     EN_client_control_response_put ;

  // actionvalue method from_console_get
  assign from_console_get = f_from_console$D_OUT ;
  assign RDY_from_console_get = f_from_console$EMPTY_N ;
  assign CAN_FIRE_from_console_get = f_from_console$EMPTY_N ;
  assign WILL_FIRE_from_console_get = EN_from_console_get ;

  // action method to_console_put
  assign RDY_to_console_put = f_to_console$FULL_N ;
  assign CAN_FIRE_to_console_put = f_to_console$FULL_N ;
  assign WILL_FIRE_to_console_put = EN_to_console_put ;

  // submodule fControlReq
  FIFO2 #(.width(32'd208), .guarded(32'd1)) fControlReq(.RST(RST_N),
							.CLK(CLK),
							.D_IN(fControlReq$D_IN),
							.ENQ(fControlReq$ENQ),
							.DEQ(fControlReq$DEQ),
							.CLR(fControlReq$CLR),
							.D_OUT(fControlReq$D_OUT),
							.FULL_N(fControlReq$FULL_N),
							.EMPTY_N(fControlReq$EMPTY_N));

  // submodule fControlRsp
  FIFO2 #(.width(32'd72), .guarded(32'd1)) fControlRsp(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(fControlRsp$D_IN),
						       .ENQ(fControlRsp$ENQ),
						       .DEQ(fControlRsp$DEQ),
						       .CLR(fControlRsp$CLR),
						       .D_OUT(fControlRsp$D_OUT),
						       .FULL_N(fControlRsp$FULL_N),
						       .EMPTY_N(fControlRsp$EMPTY_N));

  // submodule f_from_console
  FIFO2 #(.width(32'd8), .guarded(32'd1)) f_from_console(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(f_from_console$D_IN),
							 .ENQ(f_from_console$ENQ),
							 .DEQ(f_from_console$DEQ),
							 .CLR(f_from_console$CLR),
							 .D_OUT(f_from_console$D_OUT),
							 .FULL_N(f_from_console$FULL_N),
							 .EMPTY_N(f_from_console$EMPTY_N));

  // submodule f_to_console
  FIFO2 #(.width(32'd8), .guarded(32'd1)) f_to_console(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_to_console$D_IN),
						       .ENQ(f_to_console$ENQ),
						       .DEQ(f_to_console$DEQ),
						       .CLR(f_to_console$CLR),
						       .D_OUT(f_to_console$D_OUT),
						       .FULL_N(f_to_console$FULL_N),
						       .EMPTY_N(f_to_console$EMPTY_N));

  // rule RL_rl_to_console
  assign CAN_FIRE_RL_rl_to_console = f_to_console$EMPTY_N ;
  assign WILL_FIRE_RL_rl_to_console = f_to_console$EMPTY_N ;

  // rule RL_rl_from_console
  assign CAN_FIRE_RL_rl_from_console = f_from_console$FULL_N ;
  assign WILL_FIRE_RL_rl_from_console = f_from_console$FULL_N ;

  // rule RL_restart
  assign CAN_FIRE_RL_restart = start_reg_1 && !state_fired ;
  assign WILL_FIRE_RL_restart = CAN_FIRE_RL_restart ;

  // rule RL_action_l178c10
  assign CAN_FIRE_RL_action_l178c10 =
	     fControlReq$FULL_N && state_mkFSMstate == 5'd1 ;
  assign WILL_FIRE_RL_action_l178c10 = CAN_FIRE_RL_action_l178c10 ;

  // rule RL_action_l201c10
  assign CAN_FIRE_RL_action_l201c10 = state_mkFSMstate == 5'd2 ;
  assign WILL_FIRE_RL_action_l201c10 = CAN_FIRE_RL_action_l201c10 ;

  // rule RL_action_l207c10
  assign CAN_FIRE_RL_action_l207c10 = state_mkFSMstate == 5'd3 ;
  assign WILL_FIRE_RL_action_l207c10 = CAN_FIRE_RL_action_l207c10 ;

  // rule RL_action_l216c13
  assign CAN_FIRE_RL_action_l216c13 =
	     rg_elf_file_loaded && state_mkFSMstate == 5'd4 ;
  assign WILL_FIRE_RL_action_l216c13 = CAN_FIRE_RL_action_l216c13 ;

  // rule RL_action_l227c32
  assign CAN_FIRE_RL_action_l227c32 = state_mkFSMstate == 5'd5 ;
  assign WILL_FIRE_RL_action_l227c32 = CAN_FIRE_RL_action_l227c32 ;

  // rule RL_action_f_init_l232c13
  assign CAN_FIRE_RL_action_f_init_l232c13 = state_mkFSMstate == 5'd6 ;
  assign WILL_FIRE_RL_action_f_init_l232c13 =
	     CAN_FIRE_RL_action_f_init_l232c13 ;

  // rule RL_action_l232c89
  assign CAN_FIRE_RL_action_l232c89 =
	     fControlReq$FULL_N && rg_addr_5_ULT_rg_max_addr_2___d76 &&
	     (state_mkFSMstate == 5'd7 || state_mkFSMstate == 5'd9) ;
  assign WILL_FIRE_RL_action_l232c89 = CAN_FIRE_RL_action_l232c89 ;

  // rule RL_action_f_update_l232c13
  assign CAN_FIRE_RL_action_f_update_l232c13 = state_mkFSMstate == 5'd8 ;
  assign WILL_FIRE_RL_action_f_update_l232c13 =
	     CAN_FIRE_RL_action_f_update_l232c13 ;

  // rule RL_action_l244c16
  assign CAN_FIRE_RL_action_l244c16 =
	     !rg_addr_5_ULT_rg_max_addr_2___d76 &&
	     (state_mkFSMstate == 5'd7 || state_mkFSMstate == 5'd9) ;
  assign WILL_FIRE_RL_action_l244c16 = CAN_FIRE_RL_action_l244c16 ;

  // rule RL_action_l104c7
  assign CAN_FIRE_RL_action_l104c7 =
	     fControlReq$FULL_N && state_mkFSMstate == 5'd11 ;
  assign WILL_FIRE_RL_action_l104c7 = CAN_FIRE_RL_action_l104c7 ;

  // rule RL_action_l108c7
  assign CAN_FIRE_RL_action_l108c7 =
	     fControlRsp$EMPTY_N && state_mkFSMstate == 5'd12 ;
  assign WILL_FIRE_RL_action_l108c7 = CAN_FIRE_RL_action_l108c7 ;

  // rule RL_action_l116c7
  assign CAN_FIRE_RL_action_l116c7 =
	     fControlReq$FULL_N && state_mkFSMstate == 5'd13 ;
  assign WILL_FIRE_RL_action_l116c7 = CAN_FIRE_RL_action_l116c7 ;

  // rule RL_action_l120c7
  assign CAN_FIRE_RL_action_l120c7 =
	     fControlRsp$EMPTY_N && state_mkFSMstate == 5'd14 ;
  assign WILL_FIRE_RL_action_l120c7 = CAN_FIRE_RL_action_l120c7 ;

  // rule RL_action_l128c7
  assign CAN_FIRE_RL_action_l128c7 =
	     fControlReq$FULL_N && state_mkFSMstate == 5'd15 ;
  assign WILL_FIRE_RL_action_l128c7 = CAN_FIRE_RL_action_l128c7 ;

  // rule RL_action_l135c7
  assign CAN_FIRE_RL_action_l135c7 =
	     fControlRsp$EMPTY_N && state_mkFSMstate == 5'd16 ;
  assign WILL_FIRE_RL_action_l135c7 = CAN_FIRE_RL_action_l135c7 ;

  // rule RL_action_l141c7
  assign CAN_FIRE_RL_action_l141c7 =
	     fControlReq$FULL_N && state_mkFSMstate == 5'd17 ;
  assign WILL_FIRE_RL_action_l141c7 = CAN_FIRE_RL_action_l141c7 ;

  // rule RL_action_l145c7
  assign CAN_FIRE_RL_action_l145c7 =
	     fControlRsp$EMPTY_N && state_mkFSMstate == 5'd18 ;
  assign WILL_FIRE_RL_action_l145c7 = CAN_FIRE_RL_action_l145c7 ;

  // rule RL_action_l151c7
  assign CAN_FIRE_RL_action_l151c7 =
	     fControlReq$FULL_N && state_mkFSMstate == 5'd19 ;
  assign WILL_FIRE_RL_action_l151c7 = CAN_FIRE_RL_action_l151c7 ;

  // rule RL_action_l155c7
  assign CAN_FIRE_RL_action_l155c7 =
	     fControlRsp$EMPTY_N && state_mkFSMstate == 5'd20 ;
  assign WILL_FIRE_RL_action_l155c7 = CAN_FIRE_RL_action_l155c7 ;

  // rule RL_action_l160c53
  assign CAN_FIRE_RL_action_l160c53 =
	     rg_end_instret_41_MINUS_rg_start_instret_42___d143 != 64'd0 &&
	     state_mkFSMstate == 5'd21 ;
  assign WILL_FIRE_RL_action_l160c53 = CAN_FIRE_RL_action_l160c53 ;

  // rule RL_fsm_start
  assign CAN_FIRE_RL_fsm_start =
	     abort_whas__0_AND_abort_wget__1_2_OR_state_mkF_ETC___d167 &&
	     start_reg ;
  assign WILL_FIRE_RL_fsm_start = CAN_FIRE_RL_fsm_start ;

  // rule RL_action_l172c10
  assign CAN_FIRE_RL_action_l172c10 =
	     fControlReq$FULL_N && start_wire$whas &&
	     (state_mkFSMstate == 5'd0 || state_mkFSMstate == 5'd23) ;
  assign WILL_FIRE_RL_action_l172c10 = CAN_FIRE_RL_action_l172c10 ;

  // rule RL_action_l248c10
  assign CAN_FIRE_RL_action_l248c10 =
	     fControlReq$FULL_N &&
	     (!rg_elf_file_loaded && state_mkFSMstate == 5'd4 ||
	      state_mkFSMstate == 5'd10) ;
  assign WILL_FIRE_RL_action_l248c10 = CAN_FIRE_RL_action_l248c10 ;

  // rule RL_action_l261c10
  assign CAN_FIRE_RL_action_l261c10 =
	     fControlReq$FULL_N &&
	     (rg_end_instret_41_MINUS_rg_start_instret_42___d143 == 64'd0 &&
	      state_mkFSMstate == 5'd21 ||
	      state_mkFSMstate == 5'd22) ;
  assign WILL_FIRE_RL_action_l261c10 = CAN_FIRE_RL_action_l261c10 ;

  // rule __me_check_7
  assign CAN_FIRE___me_check_7 = 1'b1 ;
  assign WILL_FIRE___me_check_7 = 1'b1 ;

  // rule __me_check_8
  assign CAN_FIRE___me_check_8 = 1'b1 ;
  assign WILL_FIRE___me_check_8 = 1'b1 ;

  // rule __me_check_9
  assign CAN_FIRE___me_check_9 = 1'b1 ;
  assign WILL_FIRE___me_check_9 = 1'b1 ;

  // rule __me_check_10
  assign CAN_FIRE___me_check_10 = 1'b1 ;
  assign WILL_FIRE___me_check_10 = 1'b1 ;

  // rule __me_check_11
  assign CAN_FIRE___me_check_11 = 1'b1 ;
  assign WILL_FIRE___me_check_11 = 1'b1 ;

  // rule __me_check_12
  assign CAN_FIRE___me_check_12 = 1'b1 ;
  assign WILL_FIRE___me_check_12 = 1'b1 ;

  // rule __me_check_13
  assign CAN_FIRE___me_check_13 = 1'b1 ;
  assign WILL_FIRE___me_check_13 = 1'b1 ;

  // rule __me_check_14
  assign CAN_FIRE___me_check_14 = 1'b1 ;
  assign WILL_FIRE___me_check_14 = 1'b1 ;

  // rule __me_check_15
  assign CAN_FIRE___me_check_15 = 1'b1 ;
  assign WILL_FIRE___me_check_15 = 1'b1 ;

  // rule __me_check_16
  assign CAN_FIRE___me_check_16 = 1'b1 ;
  assign WILL_FIRE___me_check_16 = 1'b1 ;

  // rule __me_check_17
  assign CAN_FIRE___me_check_17 = 1'b1 ;
  assign WILL_FIRE___me_check_17 = 1'b1 ;

  // rule __me_check_18
  assign CAN_FIRE___me_check_18 = 1'b1 ;
  assign WILL_FIRE___me_check_18 = 1'b1 ;

  // rule __me_check_19
  assign CAN_FIRE___me_check_19 = 1'b1 ;
  assign WILL_FIRE___me_check_19 = 1'b1 ;

  // rule __me_check_20
  assign CAN_FIRE___me_check_20 = 1'b1 ;
  assign WILL_FIRE___me_check_20 = 1'b1 ;

  // rule __me_check_21
  assign CAN_FIRE___me_check_21 = 1'b1 ;
  assign WILL_FIRE___me_check_21 = 1'b1 ;

  // rule __me_check_22
  assign CAN_FIRE___me_check_22 = 1'b1 ;
  assign WILL_FIRE___me_check_22 = 1'b1 ;

  // rule __me_check_24
  assign CAN_FIRE___me_check_24 = 1'b1 ;
  assign WILL_FIRE___me_check_24 = 1'b1 ;

  // rule __me_check_23
  assign CAN_FIRE___me_check_23 = 1'b1 ;
  assign WILL_FIRE___me_check_23 = 1'b1 ;

  // rule __me_check_25
  assign CAN_FIRE___me_check_25 = 1'b1 ;
  assign WILL_FIRE___me_check_25 = 1'b1 ;

  // rule __me_check_26
  assign CAN_FIRE___me_check_26 = 1'b1 ;
  assign WILL_FIRE___me_check_26 = 1'b1 ;

  // rule __me_check_27
  assign CAN_FIRE___me_check_27 = 1'b1 ;
  assign WILL_FIRE___me_check_27 = 1'b1 ;

  // rule __me_check_28
  assign CAN_FIRE___me_check_28 = 1'b1 ;
  assign WILL_FIRE___me_check_28 = 1'b1 ;

  // rule RL_idle_l170c7
  assign CAN_FIRE_RL_idle_l170c7 =
	     !start_wire$whas && state_mkFSMstate == 5'd23 ;
  assign WILL_FIRE_RL_idle_l170c7 = CAN_FIRE_RL_idle_l170c7 ;

  // rule RL_auto_start
  assign CAN_FIRE_RL_auto_start =
	     abort_whas__0_AND_abort_wget__1_2_OR_state_mkF_ETC___d167 &&
	     !start_reg &&
	     !running ;
  assign WILL_FIRE_RL_auto_start = CAN_FIRE_RL_auto_start ;

  // rule RL_auto_finish
  assign CAN_FIRE_RL_auto_finish =
	     running &&
	     abort_whas__0_AND_abort_wget__1_2_OR_state_mkF_ETC___d167 &&
	     !start_reg ;
  assign WILL_FIRE_RL_auto_finish = CAN_FIRE_RL_auto_finish ;

  // rule RL_start_reg__dreg_update
  assign CAN_FIRE_RL_start_reg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_start_reg__dreg_update = 1'd1 ;

  // rule RL_state_handle_abort
  assign CAN_FIRE_RL_state_handle_abort = 1'b0 ;
  assign WILL_FIRE_RL_state_handle_abort = 1'b0 ;

  // rule RL_state_every
  assign CAN_FIRE_RL_state_every = 1'd1 ;
  assign WILL_FIRE_RL_state_every = 1'd1 ;

  // rule RL_state_fired__dreg_update
  assign CAN_FIRE_RL_state_fired__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_state_fired__dreg_update = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_fControlReq$enq_1__SEL_1 =
	     WILL_FIRE_RL_action_l178c10 && x__h43101 != 64'd0 ;
  assign MUX_fControlReq$enq_1__SEL_7 =
	     WILL_FIRE_RL_action_l141c7 || WILL_FIRE_RL_action_l116c7 ;
  assign MUX_fControlReq$enq_1__SEL_8 =
	     WILL_FIRE_RL_action_l151c7 || WILL_FIRE_RL_action_l104c7 ;
  assign MUX_fControlReq$enq_1__VAL_1 =
	     { 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA, x__h43101, 16'd10498 } ;
  assign MUX_fControlReq$enq_1__VAL_2 =
	     { 64'd0, x__h44883, rg_addr, 16'd2819 } ;
  assign MUX_fControlReq$enq_1__VAL_3 =
	     { 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA, x__h46116, 16'd10242 } ;
  assign MUX_rg_addr$write_1__VAL_2 = rg_addr + 64'd4 ;

  // inlined wires
  assign start_wire$whas = WILL_FIRE_RL_fsm_start || WILL_FIRE_RL_restart ;
  assign state_set_pw$whas =
	     WILL_FIRE_RL_idle_l170c7 || WILL_FIRE_RL_action_l261c10 ||
	     WILL_FIRE_RL_action_l160c53 ||
	     WILL_FIRE_RL_action_l155c7 ||
	     WILL_FIRE_RL_action_l151c7 ||
	     WILL_FIRE_RL_action_l145c7 ||
	     WILL_FIRE_RL_action_l141c7 ||
	     WILL_FIRE_RL_action_l135c7 ||
	     WILL_FIRE_RL_action_l128c7 ||
	     WILL_FIRE_RL_action_l120c7 ||
	     WILL_FIRE_RL_action_l116c7 ||
	     WILL_FIRE_RL_action_l108c7 ||
	     WILL_FIRE_RL_action_l104c7 ||
	     WILL_FIRE_RL_action_l248c10 ||
	     WILL_FIRE_RL_action_l244c16 ||
	     WILL_FIRE_RL_action_f_update_l232c13 ||
	     WILL_FIRE_RL_action_l232c89 ||
	     WILL_FIRE_RL_action_f_init_l232c13 ||
	     WILL_FIRE_RL_action_l227c32 ||
	     WILL_FIRE_RL_action_l216c13 ||
	     WILL_FIRE_RL_action_l207c10 ||
	     WILL_FIRE_RL_action_l201c10 ||
	     WILL_FIRE_RL_action_l178c10 ||
	     WILL_FIRE_RL_action_l172c10 ;

  // register rg_addr
  assign rg_addr$D_IN =
	     WILL_FIRE_RL_action_f_init_l232c13 ?
	       rg_min_addr :
	       MUX_rg_addr$write_1__VAL_2 ;
  assign rg_addr$EN =
	     WILL_FIRE_RL_action_f_init_l232c13 ||
	     WILL_FIRE_RL_action_f_update_l232c13 ;

  // register rg_elf_file_loaded
  assign rg_elf_file_loaded$D_IN = b__h43615 != 32'd0 ;
  assign rg_elf_file_loaded$EN = CAN_FIRE_RL_action_l207c10 ;

  // register rg_end_cycle
  assign rg_end_cycle$D_IN = fControlRsp$D_OUT[71:8] ;
  assign rg_end_cycle$EN = CAN_FIRE_RL_action_l145c7 ;

  // register rg_end_instret
  assign rg_end_instret$D_IN = fControlRsp$D_OUT[71:8] ;
  assign rg_end_instret$EN = CAN_FIRE_RL_action_l155c7 ;

  // register rg_exit_pc
  assign rg_exit_pc$D_IN = v__h43948 ;
  assign rg_exit_pc$EN = CAN_FIRE_RL_action_l216c13 ;

  // register rg_max_addr
  assign rg_max_addr$D_IN = v__h43905 ;
  assign rg_max_addr$EN = CAN_FIRE_RL_action_l216c13 ;

  // register rg_min_addr
  assign rg_min_addr$D_IN = v__h43862 ;
  assign rg_min_addr$EN = CAN_FIRE_RL_action_l216c13 ;

  // register rg_p_state
  assign rg_p_state$D_IN = v__h43325 ;
  assign rg_p_state$EN = CAN_FIRE_RL_action_l201c10 ;

  // register rg_start_cycle
  assign rg_start_cycle$D_IN = fControlRsp$D_OUT[71:8] ;
  assign rg_start_cycle$EN = CAN_FIRE_RL_action_l120c7 ;

  // register rg_start_instret
  assign rg_start_instret$D_IN = fControlRsp$D_OUT[71:8] ;
  assign rg_start_instret$EN = CAN_FIRE_RL_action_l108c7 ;

  // register running
  assign running$D_IN = 1'd1 ;
  assign running$EN = CAN_FIRE_RL_auto_start ;

  // register start_reg
  assign start_reg$D_IN = !WILL_FIRE_RL_fsm_start ;
  assign start_reg$EN = WILL_FIRE_RL_fsm_start || WILL_FIRE_RL_auto_start ;

  // register start_reg_1
  assign start_reg_1$D_IN = start_wire$whas ;
  assign start_reg_1$EN = 1'd1 ;

  // register state_can_overlap
  assign state_can_overlap$D_IN = state_set_pw$whas || state_can_overlap ;
  assign state_can_overlap$EN = 1'd1 ;

  // register state_fired
  assign state_fired$D_IN = state_set_pw$whas ;
  assign state_fired$EN = 1'd1 ;

  // register state_mkFSMstate
  always@(WILL_FIRE_RL_idle_l170c7 or
	  WILL_FIRE_RL_action_l172c10 or
	  WILL_FIRE_RL_action_l178c10 or
	  WILL_FIRE_RL_action_l201c10 or
	  WILL_FIRE_RL_action_l207c10 or
	  WILL_FIRE_RL_action_l216c13 or
	  WILL_FIRE_RL_action_l227c32 or
	  WILL_FIRE_RL_action_f_init_l232c13 or
	  WILL_FIRE_RL_action_l232c89 or
	  WILL_FIRE_RL_action_f_update_l232c13 or
	  WILL_FIRE_RL_action_l244c16 or
	  WILL_FIRE_RL_action_l248c10 or
	  WILL_FIRE_RL_action_l104c7 or
	  WILL_FIRE_RL_action_l108c7 or
	  WILL_FIRE_RL_action_l116c7 or
	  WILL_FIRE_RL_action_l120c7 or
	  WILL_FIRE_RL_action_l128c7 or
	  WILL_FIRE_RL_action_l135c7 or
	  WILL_FIRE_RL_action_l141c7 or
	  WILL_FIRE_RL_action_l145c7 or
	  WILL_FIRE_RL_action_l151c7 or
	  WILL_FIRE_RL_action_l155c7 or
	  WILL_FIRE_RL_action_l160c53 or WILL_FIRE_RL_action_l261c10)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_idle_l170c7: state_mkFSMstate$D_IN = 5'd0;
      WILL_FIRE_RL_action_l172c10: state_mkFSMstate$D_IN = 5'd1;
      WILL_FIRE_RL_action_l178c10: state_mkFSMstate$D_IN = 5'd2;
      WILL_FIRE_RL_action_l201c10: state_mkFSMstate$D_IN = 5'd3;
      WILL_FIRE_RL_action_l207c10: state_mkFSMstate$D_IN = 5'd4;
      WILL_FIRE_RL_action_l216c13: state_mkFSMstate$D_IN = 5'd5;
      WILL_FIRE_RL_action_l227c32: state_mkFSMstate$D_IN = 5'd6;
      WILL_FIRE_RL_action_f_init_l232c13: state_mkFSMstate$D_IN = 5'd7;
      WILL_FIRE_RL_action_l232c89: state_mkFSMstate$D_IN = 5'd8;
      WILL_FIRE_RL_action_f_update_l232c13: state_mkFSMstate$D_IN = 5'd9;
      WILL_FIRE_RL_action_l244c16: state_mkFSMstate$D_IN = 5'd10;
      WILL_FIRE_RL_action_l248c10: state_mkFSMstate$D_IN = 5'd11;
      WILL_FIRE_RL_action_l104c7: state_mkFSMstate$D_IN = 5'd12;
      WILL_FIRE_RL_action_l108c7: state_mkFSMstate$D_IN = 5'd13;
      WILL_FIRE_RL_action_l116c7: state_mkFSMstate$D_IN = 5'd14;
      WILL_FIRE_RL_action_l120c7: state_mkFSMstate$D_IN = 5'd15;
      WILL_FIRE_RL_action_l128c7: state_mkFSMstate$D_IN = 5'd16;
      WILL_FIRE_RL_action_l135c7: state_mkFSMstate$D_IN = 5'd17;
      WILL_FIRE_RL_action_l141c7: state_mkFSMstate$D_IN = 5'd18;
      WILL_FIRE_RL_action_l145c7: state_mkFSMstate$D_IN = 5'd19;
      WILL_FIRE_RL_action_l151c7: state_mkFSMstate$D_IN = 5'd20;
      WILL_FIRE_RL_action_l155c7: state_mkFSMstate$D_IN = 5'd21;
      WILL_FIRE_RL_action_l160c53: state_mkFSMstate$D_IN = 5'd22;
      WILL_FIRE_RL_action_l261c10: state_mkFSMstate$D_IN = 5'd23;
      default: state_mkFSMstate$D_IN = 5'b01010 /* unspecified value */ ;
    endcase
  end
  assign state_mkFSMstate$EN =
	     WILL_FIRE_RL_idle_l170c7 || WILL_FIRE_RL_action_l172c10 ||
	     WILL_FIRE_RL_action_l178c10 ||
	     WILL_FIRE_RL_action_l201c10 ||
	     WILL_FIRE_RL_action_l207c10 ||
	     WILL_FIRE_RL_action_l216c13 ||
	     WILL_FIRE_RL_action_l227c32 ||
	     WILL_FIRE_RL_action_f_init_l232c13 ||
	     WILL_FIRE_RL_action_l232c89 ||
	     WILL_FIRE_RL_action_f_update_l232c13 ||
	     WILL_FIRE_RL_action_l244c16 ||
	     WILL_FIRE_RL_action_l248c10 ||
	     WILL_FIRE_RL_action_l104c7 ||
	     WILL_FIRE_RL_action_l108c7 ||
	     WILL_FIRE_RL_action_l116c7 ||
	     WILL_FIRE_RL_action_l120c7 ||
	     WILL_FIRE_RL_action_l128c7 ||
	     WILL_FIRE_RL_action_l135c7 ||
	     WILL_FIRE_RL_action_l141c7 ||
	     WILL_FIRE_RL_action_l145c7 ||
	     WILL_FIRE_RL_action_l151c7 ||
	     WILL_FIRE_RL_action_l155c7 ||
	     WILL_FIRE_RL_action_l160c53 ||
	     WILL_FIRE_RL_action_l261c10 ;

  // submodule fControlReq
  always@(MUX_fControlReq$enq_1__SEL_1 or
	  MUX_fControlReq$enq_1__VAL_1 or
	  WILL_FIRE_RL_action_l232c89 or
	  MUX_fControlReq$enq_1__VAL_2 or
	  WILL_FIRE_RL_action_l248c10 or
	  MUX_fControlReq$enq_1__VAL_3 or
	  WILL_FIRE_RL_action_l172c10 or
	  WILL_FIRE_RL_action_l261c10 or
	  WILL_FIRE_RL_action_l128c7 or
	  MUX_fControlReq$enq_1__SEL_7 or MUX_fControlReq$enq_1__SEL_8)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_fControlReq$enq_1__SEL_1:
	  fControlReq$D_IN = MUX_fControlReq$enq_1__VAL_1;
      WILL_FIRE_RL_action_l232c89:
	  fControlReq$D_IN = MUX_fControlReq$enq_1__VAL_2;
      WILL_FIRE_RL_action_l248c10:
	  fControlReq$D_IN = MUX_fControlReq$enq_1__VAL_3;
      WILL_FIRE_RL_action_l172c10: fControlReq$D_IN = 208'd257;
      WILL_FIRE_RL_action_l261c10: fControlReq$D_IN = 208'd513;
      WILL_FIRE_RL_action_l128c7: fControlReq$D_IN = 208'd769;
      MUX_fControlReq$enq_1__SEL_7: fControlReq$D_IN = 208'd8193;
      MUX_fControlReq$enq_1__SEL_8: fControlReq$D_IN = 208'd8705;
      default: fControlReq$D_IN =
		   208'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign fControlReq$ENQ =
	     WILL_FIRE_RL_action_l178c10 && x__h43101 != 64'd0 ||
	     WILL_FIRE_RL_action_l232c89 ||
	     WILL_FIRE_RL_action_l248c10 ||
	     WILL_FIRE_RL_action_l172c10 ||
	     WILL_FIRE_RL_action_l261c10 ||
	     WILL_FIRE_RL_action_l128c7 ||
	     WILL_FIRE_RL_action_l141c7 ||
	     WILL_FIRE_RL_action_l116c7 ||
	     WILL_FIRE_RL_action_l151c7 ||
	     WILL_FIRE_RL_action_l104c7 ;
  assign fControlReq$DEQ = EN_client_control_request_get ;
  assign fControlReq$CLR = 1'b0 ;

  // submodule fControlRsp
  assign fControlRsp$D_IN = client_control_response_put ;
  assign fControlRsp$ENQ = EN_client_control_response_put ;
  assign fControlRsp$DEQ =
	     WILL_FIRE_RL_action_l155c7 || WILL_FIRE_RL_action_l145c7 ||
	     WILL_FIRE_RL_action_l135c7 ||
	     WILL_FIRE_RL_action_l120c7 ||
	     WILL_FIRE_RL_action_l108c7 ;
  assign fControlRsp$CLR = 1'b0 ;

  // submodule f_from_console
  assign f_from_console$D_IN = v__h503 ;
  assign f_from_console$ENQ = f_from_console$FULL_N && v__h503 != 8'd0 ;
  assign f_from_console$DEQ = EN_from_console_get ;
  assign f_from_console$CLR = 1'b0 ;

  // submodule f_to_console
  assign f_to_console$D_IN = to_console_put ;
  assign f_to_console$ENQ = EN_to_console_put ;
  assign f_to_console$DEQ = f_to_console$EMPTY_N ;
  assign f_to_console$CLR = 1'b0 ;

  // remaining internal signals
  assign abort_whas__0_AND_abort_wget__1_2_OR_state_mkF_ETC___d167 =
	     (state_mkFSMstate == 5'd0 || state_mkFSMstate == 5'd23) &&
	     (!start_reg_1 || state_fired) ;
  assign c__h50790 = rg_end_cycle - rg_start_cycle ;
  assign cpi_x10__h50792 =
	     rg_end_cycle_49_MINUS_rg_start_cycle_50_51_MUL_10___d152[63:0] /
	     rg_end_instret_41_MINUS_rg_start_instret_42___d143 ;
  assign rg_addr_5_EQ_rg_exit_pc_3___d84 = rg_addr == rg_exit_pc ;
  assign rg_addr_5_ULT_rg_max_addr_2___d76 = rg_addr < rg_max_addr ;
  assign rg_end_cycle_49_MINUS_rg_start_cycle_50_51_MUL_10___d152 =
	     c__h50790 * 64'd10 ;
  assign rg_end_cycle_49_MINUS_rg_start_cycle_50_51_MUL_ETC___d155 =
	     cpi_x10__h50792 / 64'd10 ;
  assign rg_end_cycle_49_MINUS_rg_start_cycle_50_51_MUL_ETC___d156 =
	     cpi_x10__h50792 % 64'd10 ;
  assign rg_end_instret_41_MINUS_rg_start_instret_42___d143 =
	     rg_end_instret - rg_start_instret ;
  assign x__h44883 = { 32'd0, x__h44886 } ;
  assign x__h44886 =
	     rg_addr_5_EQ_rg_exit_pc_3___d84 ? 32'd1048691 : v__h44836 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_p_state <= `BSV_ASSIGNMENT_DELAY 64'd0;
	running <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 5'd0;
      end
    else
      begin
        if (rg_p_state$EN)
	  rg_p_state <= `BSV_ASSIGNMENT_DELAY rg_p_state$D_IN;
	if (running$EN) running <= `BSV_ASSIGNMENT_DELAY running$D_IN;
	if (start_reg$EN) start_reg <= `BSV_ASSIGNMENT_DELAY start_reg$D_IN;
	if (start_reg_1$EN)
	  start_reg_1 <= `BSV_ASSIGNMENT_DELAY start_reg_1$D_IN;
	if (state_can_overlap$EN)
	  state_can_overlap <= `BSV_ASSIGNMENT_DELAY state_can_overlap$D_IN;
	if (state_fired$EN)
	  state_fired <= `BSV_ASSIGNMENT_DELAY state_fired$D_IN;
	if (state_mkFSMstate$EN)
	  state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY state_mkFSMstate$D_IN;
      end
    if (rg_addr$EN) rg_addr <= `BSV_ASSIGNMENT_DELAY rg_addr$D_IN;
    if (rg_elf_file_loaded$EN)
      rg_elf_file_loaded <= `BSV_ASSIGNMENT_DELAY rg_elf_file_loaded$D_IN;
    if (rg_end_cycle$EN)
      rg_end_cycle <= `BSV_ASSIGNMENT_DELAY rg_end_cycle$D_IN;
    if (rg_end_instret$EN)
      rg_end_instret <= `BSV_ASSIGNMENT_DELAY rg_end_instret$D_IN;
    if (rg_exit_pc$EN) rg_exit_pc <= `BSV_ASSIGNMENT_DELAY rg_exit_pc$D_IN;
    if (rg_max_addr$EN) rg_max_addr <= `BSV_ASSIGNMENT_DELAY rg_max_addr$D_IN;
    if (rg_min_addr$EN) rg_min_addr <= `BSV_ASSIGNMENT_DELAY rg_min_addr$D_IN;
    if (rg_start_cycle$EN)
      rg_start_cycle <= `BSV_ASSIGNMENT_DELAY rg_start_cycle$D_IN;
    if (rg_start_instret$EN)
      rg_start_instret <= `BSV_ASSIGNMENT_DELAY rg_start_instret$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_addr = 64'hAAAAAAAAAAAAAAAA;
    rg_elf_file_loaded = 1'h0;
    rg_end_cycle = 64'hAAAAAAAAAAAAAAAA;
    rg_end_instret = 64'hAAAAAAAAAAAAAAAA;
    rg_exit_pc = 64'hAAAAAAAAAAAAAAAA;
    rg_max_addr = 64'hAAAAAAAAAAAAAAAA;
    rg_min_addr = 64'hAAAAAAAAAAAAAAAA;
    rg_p_state = 64'hAAAAAAAAAAAAAAAA;
    rg_start_cycle = 64'hAAAAAAAAAAAAAAAA;
    rg_start_instret = 64'hAAAAAAAAAAAAAAAA;
    running = 1'h0;
    start_reg = 1'h0;
    start_reg_1 = 1'h0;
    state_can_overlap = 1'h0;
    state_fired = 1'h0;
    state_mkFSMstate = 5'h0A;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (f_to_console$EMPTY_N) c_putchar(f_to_console$D_OUT);
    if (RST_N != `BSV_RESET_VALUE)
      if (f_from_console$FULL_N)
	begin
	  v__h503 = c_trygetchar ();
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l178c10)
	begin
	  x__h43101 = c_getenv_u64("SIM_LOGDELAY");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l178c10 && x__h43101 != 64'd0)
	$display("INFO: Top_Sim_Standalone: setting logdelay = %0d from environment setting",
		 x__h43101);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l201c10)
	begin
	  v__h43325 = bsv_mem_init(64'd0, 64'd2097152);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l207c10)
	$display("Sim_Driver: reading ELF file into tandem verifier");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l207c10)
	begin
	  b__h43615 = bsv_mem_load_elf2(rg_p_state, 64'd32);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l216c13)
	begin
	  v__h43862 = bsv_mem_get_min_addr(rg_p_state);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l216c13)
	begin
	  v__h43905 = bsv_mem_get_max_addr(rg_p_state);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l216c13)
	begin
	  v__h43948 = bsv_mem_get_exit_pc(rg_p_state);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l227c32)
	$display("Sim_Driver: min_addr %0h, max_addr %0h",
		 rg_min_addr,
		 rg_max_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l227c32) $display("Sim_Driver: loading memory");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l232c89)
	begin
	  v__h44836 = bsv_mem_read32(rg_p_state, 64'd0, rg_addr);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l232c89 && rg_addr_5_EQ_rg_exit_pc_3___d84)
	$display("Sim_Driver: breakpoint set at PC 0x%8h", rg_exit_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l244c16) $display("Sim_Driver: loaded memory");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l108c7)
	$display("Sim_Driver: start instret: %0d", fControlRsp$D_OUT[71:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l120c7)
	$display("Sim_Driver: start cycle: %0d", fControlRsp$D_OUT[71:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l128c7) $display("Sim_Driver: running CPU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l135c7)
	$display("Sim_Driver: CPU stopped with reason: %0d",
		 fControlRsp$D_OUT[71:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l160c53)
	$display("Sim_Driver: CPI: %0d.%0d = (%0d/%0d)",
		 rg_end_cycle_49_MINUS_rg_start_cycle_50_51_MUL_ETC___d155,
		 rg_end_cycle_49_MINUS_rg_start_cycle_50_51_MUL_ETC___d156,
		 c__h50790,
		 rg_end_instret_41_MINUS_rg_start_instret_42___d143);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l160c53)
	$display("            cycles - instrs %0d",
		 c__h50790 -
		 rg_end_instret_41_MINUS_rg_start_instret_42___d143);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l248c10)
	begin
	  x__h46116 = c_getenv_u64("SIM_VERBOSITY");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l248c10 && x__h46116 != 64'd0)
	$display("INFO: Top_Sim_Standalone: setting verbosity = %0d from environment setting",
		 x__h46116);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l261c10) $display("Sim_Driver: shutting down");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l172c10 &&
	  (WILL_FIRE_RL_action_l178c10 || WILL_FIRE_RL_action_l201c10 ||
	   WILL_FIRE_RL_action_l207c10 ||
	   WILL_FIRE_RL_action_l216c13 ||
	   WILL_FIRE_RL_action_l227c32 ||
	   WILL_FIRE_RL_action_f_init_l232c13 ||
	   WILL_FIRE_RL_action_l232c89 ||
	   WILL_FIRE_RL_action_f_update_l232c13 ||
	   WILL_FIRE_RL_action_l244c16 ||
	   WILL_FIRE_RL_action_l248c10 ||
	   WILL_FIRE_RL_action_l104c7 ||
	   WILL_FIRE_RL_action_l108c7 ||
	   WILL_FIRE_RL_action_l116c7 ||
	   WILL_FIRE_RL_action_l120c7 ||
	   WILL_FIRE_RL_action_l128c7 ||
	   WILL_FIRE_RL_action_l135c7 ||
	   WILL_FIRE_RL_action_l141c7 ||
	   WILL_FIRE_RL_action_l145c7 ||
	   WILL_FIRE_RL_action_l151c7 ||
	   WILL_FIRE_RL_action_l155c7 ||
	   WILL_FIRE_RL_action_l160c53 ||
	   WILL_FIRE_RL_action_l261c10))
	$display("Error: \"../../Piccolo/Sim_Driver.bsv\", line 172, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l172c10] and\n  [RL_action_l178c10, RL_action_l201c10, RL_action_l207c10, RL_action_l216c13,\n  RL_action_l227c32, RL_action_f_init_l232c13, RL_action_l232c89,\n  RL_action_f_update_l232c13, RL_action_l244c16, RL_action_l248c10,\n  RL_action_l104c7, RL_action_l108c7, RL_action_l116c7, RL_action_l120c7,\n  RL_action_l128c7, RL_action_l135c7, RL_action_l141c7, RL_action_l145c7,\n  RL_action_l151c7, RL_action_l155c7, RL_action_l160c53, RL_action_l261c10] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l178c10 &&
	  (WILL_FIRE_RL_action_l201c10 || WILL_FIRE_RL_action_l207c10 ||
	   WILL_FIRE_RL_action_l216c13 ||
	   WILL_FIRE_RL_action_l227c32 ||
	   WILL_FIRE_RL_action_f_init_l232c13 ||
	   WILL_FIRE_RL_action_l232c89 ||
	   WILL_FIRE_RL_action_f_update_l232c13 ||
	   WILL_FIRE_RL_action_l244c16 ||
	   WILL_FIRE_RL_action_l248c10 ||
	   WILL_FIRE_RL_action_l104c7 ||
	   WILL_FIRE_RL_action_l108c7 ||
	   WILL_FIRE_RL_action_l116c7 ||
	   WILL_FIRE_RL_action_l120c7 ||
	   WILL_FIRE_RL_action_l128c7 ||
	   WILL_FIRE_RL_action_l135c7 ||
	   WILL_FIRE_RL_action_l141c7 ||
	   WILL_FIRE_RL_action_l145c7 ||
	   WILL_FIRE_RL_action_l151c7 ||
	   WILL_FIRE_RL_action_l155c7 ||
	   WILL_FIRE_RL_action_l160c53 ||
	   WILL_FIRE_RL_action_l261c10))
	$display("Error: \"../../Piccolo/Sim_Driver.bsv\", line 178, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l178c10] and\n  [RL_action_l201c10, RL_action_l207c10, RL_action_l216c13, RL_action_l227c32,\n  RL_action_f_init_l232c13, RL_action_l232c89, RL_action_f_update_l232c13,\n  RL_action_l244c16, RL_action_l248c10, RL_action_l104c7, RL_action_l108c7,\n  RL_action_l116c7, RL_action_l120c7, RL_action_l128c7, RL_action_l135c7,\n  RL_action_l141c7, RL_action_l145c7, RL_action_l151c7, RL_action_l155c7,\n  RL_action_l160c53, RL_action_l261c10] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l201c10 &&
	  (WILL_FIRE_RL_action_l207c10 || WILL_FIRE_RL_action_l216c13 ||
	   WILL_FIRE_RL_action_l227c32 ||
	   WILL_FIRE_RL_action_f_init_l232c13 ||
	   WILL_FIRE_RL_action_l232c89 ||
	   WILL_FIRE_RL_action_f_update_l232c13 ||
	   WILL_FIRE_RL_action_l244c16 ||
	   WILL_FIRE_RL_action_l248c10 ||
	   WILL_FIRE_RL_action_l104c7 ||
	   WILL_FIRE_RL_action_l108c7 ||
	   WILL_FIRE_RL_action_l116c7 ||
	   WILL_FIRE_RL_action_l120c7 ||
	   WILL_FIRE_RL_action_l128c7 ||
	   WILL_FIRE_RL_action_l135c7 ||
	   WILL_FIRE_RL_action_l141c7 ||
	   WILL_FIRE_RL_action_l145c7 ||
	   WILL_FIRE_RL_action_l151c7 ||
	   WILL_FIRE_RL_action_l155c7 ||
	   WILL_FIRE_RL_action_l160c53 ||
	   WILL_FIRE_RL_action_l261c10))
	$display("Error: \"../../Piccolo/Sim_Driver.bsv\", line 201, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l201c10] and\n  [RL_action_l207c10, RL_action_l216c13, RL_action_l227c32,\n  RL_action_f_init_l232c13, RL_action_l232c89, RL_action_f_update_l232c13,\n  RL_action_l244c16, RL_action_l248c10, RL_action_l104c7, RL_action_l108c7,\n  RL_action_l116c7, RL_action_l120c7, RL_action_l128c7, RL_action_l135c7,\n  RL_action_l141c7, RL_action_l145c7, RL_action_l151c7, RL_action_l155c7,\n  RL_action_l160c53, RL_action_l261c10] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l207c10 &&
	  (WILL_FIRE_RL_action_l216c13 || WILL_FIRE_RL_action_l227c32 ||
	   WILL_FIRE_RL_action_f_init_l232c13 ||
	   WILL_FIRE_RL_action_l232c89 ||
	   WILL_FIRE_RL_action_f_update_l232c13 ||
	   WILL_FIRE_RL_action_l244c16 ||
	   WILL_FIRE_RL_action_l248c10 ||
	   WILL_FIRE_RL_action_l104c7 ||
	   WILL_FIRE_RL_action_l108c7 ||
	   WILL_FIRE_RL_action_l116c7 ||
	   WILL_FIRE_RL_action_l120c7 ||
	   WILL_FIRE_RL_action_l128c7 ||
	   WILL_FIRE_RL_action_l135c7 ||
	   WILL_FIRE_RL_action_l141c7 ||
	   WILL_FIRE_RL_action_l145c7 ||
	   WILL_FIRE_RL_action_l151c7 ||
	   WILL_FIRE_RL_action_l155c7 ||
	   WILL_FIRE_RL_action_l160c53 ||
	   WILL_FIRE_RL_action_l261c10))
	$display("Error: \"../../Piccolo/Sim_Driver.bsv\", line 207, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l207c10] and\n  [RL_action_l216c13, RL_action_l227c32, RL_action_f_init_l232c13,\n  RL_action_l232c89, RL_action_f_update_l232c13, RL_action_l244c16,\n  RL_action_l248c10, RL_action_l104c7, RL_action_l108c7, RL_action_l116c7,\n  RL_action_l120c7, RL_action_l128c7, RL_action_l135c7, RL_action_l141c7,\n  RL_action_l145c7, RL_action_l151c7, RL_action_l155c7, RL_action_l160c53,\n  RL_action_l261c10] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l216c13 &&
	  (WILL_FIRE_RL_action_l227c32 ||
	   WILL_FIRE_RL_action_f_init_l232c13 ||
	   WILL_FIRE_RL_action_l232c89 ||
	   WILL_FIRE_RL_action_f_update_l232c13 ||
	   WILL_FIRE_RL_action_l244c16 ||
	   WILL_FIRE_RL_action_l248c10 ||
	   WILL_FIRE_RL_action_l104c7 ||
	   WILL_FIRE_RL_action_l108c7 ||
	   WILL_FIRE_RL_action_l116c7 ||
	   WILL_FIRE_RL_action_l120c7 ||
	   WILL_FIRE_RL_action_l128c7 ||
	   WILL_FIRE_RL_action_l135c7 ||
	   WILL_FIRE_RL_action_l141c7 ||
	   WILL_FIRE_RL_action_l145c7 ||
	   WILL_FIRE_RL_action_l151c7 ||
	   WILL_FIRE_RL_action_l155c7 ||
	   WILL_FIRE_RL_action_l160c53 ||
	   WILL_FIRE_RL_action_l261c10))
	$display("Error: \"../../Piccolo/Sim_Driver.bsv\", line 216, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l216c13] and\n  [RL_action_l227c32, RL_action_f_init_l232c13, RL_action_l232c89,\n  RL_action_f_update_l232c13, RL_action_l244c16, RL_action_l248c10,\n  RL_action_l104c7, RL_action_l108c7, RL_action_l116c7, RL_action_l120c7,\n  RL_action_l128c7, RL_action_l135c7, RL_action_l141c7, RL_action_l145c7,\n  RL_action_l151c7, RL_action_l155c7, RL_action_l160c53, RL_action_l261c10] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l227c32 &&
	  (WILL_FIRE_RL_action_f_init_l232c13 ||
	   WILL_FIRE_RL_action_l232c89 ||
	   WILL_FIRE_RL_action_f_update_l232c13 ||
	   WILL_FIRE_RL_action_l244c16 ||
	   WILL_FIRE_RL_action_l248c10 ||
	   WILL_FIRE_RL_action_l104c7 ||
	   WILL_FIRE_RL_action_l108c7 ||
	   WILL_FIRE_RL_action_l116c7 ||
	   WILL_FIRE_RL_action_l120c7 ||
	   WILL_FIRE_RL_action_l128c7 ||
	   WILL_FIRE_RL_action_l135c7 ||
	   WILL_FIRE_RL_action_l141c7 ||
	   WILL_FIRE_RL_action_l145c7 ||
	   WILL_FIRE_RL_action_l151c7 ||
	   WILL_FIRE_RL_action_l155c7 ||
	   WILL_FIRE_RL_action_l160c53 ||
	   WILL_FIRE_RL_action_l261c10))
	$display("Error: \"../../Piccolo/Sim_Driver.bsv\", line 227, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l227c32] and\n  [RL_action_f_init_l232c13, RL_action_l232c89, RL_action_f_update_l232c13,\n  RL_action_l244c16, RL_action_l248c10, RL_action_l104c7, RL_action_l108c7,\n  RL_action_l116c7, RL_action_l120c7, RL_action_l128c7, RL_action_l135c7,\n  RL_action_l141c7, RL_action_l145c7, RL_action_l151c7, RL_action_l155c7,\n  RL_action_l160c53, RL_action_l261c10] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_f_init_l232c13 &&
	  (WILL_FIRE_RL_action_l232c89 ||
	   WILL_FIRE_RL_action_f_update_l232c13 ||
	   WILL_FIRE_RL_action_l244c16 ||
	   WILL_FIRE_RL_action_l248c10 ||
	   WILL_FIRE_RL_action_l104c7 ||
	   WILL_FIRE_RL_action_l108c7 ||
	   WILL_FIRE_RL_action_l116c7 ||
	   WILL_FIRE_RL_action_l120c7 ||
	   WILL_FIRE_RL_action_l128c7 ||
	   WILL_FIRE_RL_action_l135c7 ||
	   WILL_FIRE_RL_action_l141c7 ||
	   WILL_FIRE_RL_action_l145c7 ||
	   WILL_FIRE_RL_action_l151c7 ||
	   WILL_FIRE_RL_action_l155c7 ||
	   WILL_FIRE_RL_action_l160c53 ||
	   WILL_FIRE_RL_action_l261c10))
	$display("Error: \"../../Piccolo/Sim_Driver.bsv\", line 232, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_f_init_l232c13] and\n  [RL_action_l232c89, RL_action_f_update_l232c13, RL_action_l244c16,\n  RL_action_l248c10, RL_action_l104c7, RL_action_l108c7, RL_action_l116c7,\n  RL_action_l120c7, RL_action_l128c7, RL_action_l135c7, RL_action_l141c7,\n  RL_action_l145c7, RL_action_l151c7, RL_action_l155c7, RL_action_l160c53,\n  RL_action_l261c10] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l232c89 &&
	  (WILL_FIRE_RL_action_f_update_l232c13 ||
	   WILL_FIRE_RL_action_l244c16 ||
	   WILL_FIRE_RL_action_l248c10 ||
	   WILL_FIRE_RL_action_l104c7 ||
	   WILL_FIRE_RL_action_l108c7 ||
	   WILL_FIRE_RL_action_l116c7 ||
	   WILL_FIRE_RL_action_l120c7 ||
	   WILL_FIRE_RL_action_l128c7 ||
	   WILL_FIRE_RL_action_l135c7 ||
	   WILL_FIRE_RL_action_l141c7 ||
	   WILL_FIRE_RL_action_l145c7 ||
	   WILL_FIRE_RL_action_l151c7 ||
	   WILL_FIRE_RL_action_l155c7 ||
	   WILL_FIRE_RL_action_l160c53 ||
	   WILL_FIRE_RL_action_l261c10))
	$display("Error: \"../../Piccolo/Sim_Driver.bsv\", line 232, column 89: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l232c89] and\n  [RL_action_f_update_l232c13, RL_action_l244c16, RL_action_l248c10,\n  RL_action_l104c7, RL_action_l108c7, RL_action_l116c7, RL_action_l120c7,\n  RL_action_l128c7, RL_action_l135c7, RL_action_l141c7, RL_action_l145c7,\n  RL_action_l151c7, RL_action_l155c7, RL_action_l160c53, RL_action_l261c10] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_f_update_l232c13 &&
	  (WILL_FIRE_RL_action_l244c16 || WILL_FIRE_RL_action_l248c10 ||
	   WILL_FIRE_RL_action_l104c7 ||
	   WILL_FIRE_RL_action_l108c7 ||
	   WILL_FIRE_RL_action_l116c7 ||
	   WILL_FIRE_RL_action_l120c7 ||
	   WILL_FIRE_RL_action_l128c7 ||
	   WILL_FIRE_RL_action_l135c7 ||
	   WILL_FIRE_RL_action_l141c7 ||
	   WILL_FIRE_RL_action_l145c7 ||
	   WILL_FIRE_RL_action_l151c7 ||
	   WILL_FIRE_RL_action_l155c7 ||
	   WILL_FIRE_RL_action_l160c53 ||
	   WILL_FIRE_RL_action_l261c10))
	$display("Error: \"../../Piccolo/Sim_Driver.bsv\", line 232, column 73: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_f_update_l232c13] and\n  [RL_action_l244c16, RL_action_l248c10, RL_action_l104c7, RL_action_l108c7,\n  RL_action_l116c7, RL_action_l120c7, RL_action_l128c7, RL_action_l135c7,\n  RL_action_l141c7, RL_action_l145c7, RL_action_l151c7, RL_action_l155c7,\n  RL_action_l160c53, RL_action_l261c10] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l244c16 &&
	  (WILL_FIRE_RL_action_l248c10 || WILL_FIRE_RL_action_l104c7 ||
	   WILL_FIRE_RL_action_l108c7 ||
	   WILL_FIRE_RL_action_l116c7 ||
	   WILL_FIRE_RL_action_l120c7 ||
	   WILL_FIRE_RL_action_l128c7 ||
	   WILL_FIRE_RL_action_l135c7 ||
	   WILL_FIRE_RL_action_l141c7 ||
	   WILL_FIRE_RL_action_l145c7 ||
	   WILL_FIRE_RL_action_l151c7 ||
	   WILL_FIRE_RL_action_l155c7 ||
	   WILL_FIRE_RL_action_l160c53 ||
	   WILL_FIRE_RL_action_l261c10))
	$display("Error: \"../../Piccolo/Sim_Driver.bsv\", line 244, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l244c16] and\n  [RL_action_l248c10, RL_action_l104c7, RL_action_l108c7, RL_action_l116c7,\n  RL_action_l120c7, RL_action_l128c7, RL_action_l135c7, RL_action_l141c7,\n  RL_action_l145c7, RL_action_l151c7, RL_action_l155c7, RL_action_l160c53,\n  RL_action_l261c10] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l248c10 &&
	  (WILL_FIRE_RL_action_l104c7 || WILL_FIRE_RL_action_l108c7 ||
	   WILL_FIRE_RL_action_l116c7 ||
	   WILL_FIRE_RL_action_l120c7 ||
	   WILL_FIRE_RL_action_l128c7 ||
	   WILL_FIRE_RL_action_l135c7 ||
	   WILL_FIRE_RL_action_l141c7 ||
	   WILL_FIRE_RL_action_l145c7 ||
	   WILL_FIRE_RL_action_l151c7 ||
	   WILL_FIRE_RL_action_l155c7 ||
	   WILL_FIRE_RL_action_l160c53 ||
	   WILL_FIRE_RL_action_l261c10))
	$display("Error: \"../../Piccolo/Sim_Driver.bsv\", line 248, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l248c10] and\n  [RL_action_l104c7, RL_action_l108c7, RL_action_l116c7, RL_action_l120c7,\n  RL_action_l128c7, RL_action_l135c7, RL_action_l141c7, RL_action_l145c7,\n  RL_action_l151c7, RL_action_l155c7, RL_action_l160c53, RL_action_l261c10] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l104c7 &&
	  (WILL_FIRE_RL_action_l108c7 || WILL_FIRE_RL_action_l116c7 ||
	   WILL_FIRE_RL_action_l120c7 ||
	   WILL_FIRE_RL_action_l128c7 ||
	   WILL_FIRE_RL_action_l135c7 ||
	   WILL_FIRE_RL_action_l141c7 ||
	   WILL_FIRE_RL_action_l145c7 ||
	   WILL_FIRE_RL_action_l151c7 ||
	   WILL_FIRE_RL_action_l155c7 ||
	   WILL_FIRE_RL_action_l160c53 ||
	   WILL_FIRE_RL_action_l261c10))
	$display("Error: \"../../Piccolo/Sim_Driver.bsv\", line 104, column 7: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l104c7] and\n  [RL_action_l108c7, RL_action_l116c7, RL_action_l120c7, RL_action_l128c7,\n  RL_action_l135c7, RL_action_l141c7, RL_action_l145c7, RL_action_l151c7,\n  RL_action_l155c7, RL_action_l160c53, RL_action_l261c10] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l108c7 &&
	  (WILL_FIRE_RL_action_l116c7 || WILL_FIRE_RL_action_l120c7 ||
	   WILL_FIRE_RL_action_l128c7 ||
	   WILL_FIRE_RL_action_l135c7 ||
	   WILL_FIRE_RL_action_l141c7 ||
	   WILL_FIRE_RL_action_l145c7 ||
	   WILL_FIRE_RL_action_l151c7 ||
	   WILL_FIRE_RL_action_l155c7 ||
	   WILL_FIRE_RL_action_l160c53 ||
	   WILL_FIRE_RL_action_l261c10))
	$display("Error: \"../../Piccolo/Sim_Driver.bsv\", line 108, column 7: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l108c7] and\n  [RL_action_l116c7, RL_action_l120c7, RL_action_l128c7, RL_action_l135c7,\n  RL_action_l141c7, RL_action_l145c7, RL_action_l151c7, RL_action_l155c7,\n  RL_action_l160c53, RL_action_l261c10] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l116c7 &&
	  (WILL_FIRE_RL_action_l120c7 || WILL_FIRE_RL_action_l128c7 ||
	   WILL_FIRE_RL_action_l135c7 ||
	   WILL_FIRE_RL_action_l141c7 ||
	   WILL_FIRE_RL_action_l145c7 ||
	   WILL_FIRE_RL_action_l151c7 ||
	   WILL_FIRE_RL_action_l155c7 ||
	   WILL_FIRE_RL_action_l160c53 ||
	   WILL_FIRE_RL_action_l261c10))
	$display("Error: \"../../Piccolo/Sim_Driver.bsv\", line 116, column 7: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l116c7] and\n  [RL_action_l120c7, RL_action_l128c7, RL_action_l135c7, RL_action_l141c7,\n  RL_action_l145c7, RL_action_l151c7, RL_action_l155c7, RL_action_l160c53,\n  RL_action_l261c10] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l120c7 &&
	  (WILL_FIRE_RL_action_l128c7 || WILL_FIRE_RL_action_l135c7 ||
	   WILL_FIRE_RL_action_l141c7 ||
	   WILL_FIRE_RL_action_l145c7 ||
	   WILL_FIRE_RL_action_l151c7 ||
	   WILL_FIRE_RL_action_l155c7 ||
	   WILL_FIRE_RL_action_l160c53 ||
	   WILL_FIRE_RL_action_l261c10))
	$display("Error: \"../../Piccolo/Sim_Driver.bsv\", line 120, column 7: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l120c7] and\n  [RL_action_l128c7, RL_action_l135c7, RL_action_l141c7, RL_action_l145c7,\n  RL_action_l151c7, RL_action_l155c7, RL_action_l160c53, RL_action_l261c10] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l128c7 &&
	  (WILL_FIRE_RL_action_l135c7 || WILL_FIRE_RL_action_l141c7 ||
	   WILL_FIRE_RL_action_l145c7 ||
	   WILL_FIRE_RL_action_l151c7 ||
	   WILL_FIRE_RL_action_l155c7 ||
	   WILL_FIRE_RL_action_l160c53 ||
	   WILL_FIRE_RL_action_l261c10))
	$display("Error: \"../../Piccolo/Sim_Driver.bsv\", line 128, column 7: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l128c7] and\n  [RL_action_l135c7, RL_action_l141c7, RL_action_l145c7, RL_action_l151c7,\n  RL_action_l155c7, RL_action_l160c53, RL_action_l261c10] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l141c7 &&
	  (WILL_FIRE_RL_action_l145c7 || WILL_FIRE_RL_action_l151c7 ||
	   WILL_FIRE_RL_action_l155c7 ||
	   WILL_FIRE_RL_action_l160c53 ||
	   WILL_FIRE_RL_action_l261c10))
	$display("Error: \"../../Piccolo/Sim_Driver.bsv\", line 141, column 7: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l141c7] and\n  [RL_action_l145c7, RL_action_l151c7, RL_action_l155c7, RL_action_l160c53,\n  RL_action_l261c10] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l135c7 &&
	  (WILL_FIRE_RL_action_l141c7 || WILL_FIRE_RL_action_l145c7 ||
	   WILL_FIRE_RL_action_l151c7 ||
	   WILL_FIRE_RL_action_l155c7 ||
	   WILL_FIRE_RL_action_l160c53 ||
	   WILL_FIRE_RL_action_l261c10))
	$display("Error: \"../../Piccolo/Sim_Driver.bsv\", line 135, column 7: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l135c7] and\n  [RL_action_l141c7, RL_action_l145c7, RL_action_l151c7, RL_action_l155c7,\n  RL_action_l160c53, RL_action_l261c10] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l145c7 &&
	  (WILL_FIRE_RL_action_l151c7 || WILL_FIRE_RL_action_l155c7 ||
	   WILL_FIRE_RL_action_l160c53 ||
	   WILL_FIRE_RL_action_l261c10))
	$display("Error: \"../../Piccolo/Sim_Driver.bsv\", line 145, column 7: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l145c7] and\n  [RL_action_l151c7, RL_action_l155c7, RL_action_l160c53, RL_action_l261c10] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l151c7 &&
	  (WILL_FIRE_RL_action_l155c7 || WILL_FIRE_RL_action_l160c53 ||
	   WILL_FIRE_RL_action_l261c10))
	$display("Error: \"../../Piccolo/Sim_Driver.bsv\", line 151, column 7: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l151c7] and\n  [RL_action_l155c7, RL_action_l160c53, RL_action_l261c10] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l155c7 &&
	  (WILL_FIRE_RL_action_l160c53 || WILL_FIRE_RL_action_l261c10))
	$display("Error: \"../../Piccolo/Sim_Driver.bsv\", line 155, column 7: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l155c7] and\n  [RL_action_l160c53, RL_action_l261c10] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l160c53 && WILL_FIRE_RL_action_l261c10)
	$display("Error: \"../../Piccolo/Sim_Driver.bsv\", line 160, column 53: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l160c53] and\n  [RL_action_l261c10] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_auto_finish) $finish(32'd0);
  end
  // synopsys translate_on
endmodule  // mkSim_Driver

