// This program was cloned from: https://github.com/rsnikhil/RISCV_Piccolo_v1
// License: MIT License

//
// Generated by Bluespec Compiler, version 2016.03.beta1 (build 34761, 2016-03-16)
//
// On Sat Jul  9 18:53:33 EDT 2016
//
//
// Ports:
// Name                         I/O  size props
// RDY_server_control_request_put  O     1 reg
// server_control_response_get    O    72 reg
// RDY_server_control_response_get  O     1 reg
// RDY_from_console_put           O     1 reg
// to_console_get                 O     8 reg
// RDY_to_console_get             O     1 reg
// verify_out_get                 O   420 const
// RDY_verify_out_get             O     1 const
// to_raw_mem_request_get         O   316 reg
// RDY_to_raw_mem_request_get     O     1 reg
// RDY_to_raw_mem_response_put    O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// server_control_request_put     I   208 reg
// from_console_put               I     8 reg
// to_raw_mem_response_put        I   256 reg
// EN_server_control_request_put  I     1
// EN_from_console_put            I     1
// EN_to_raw_mem_response_put     I     1
// EN_server_control_response_get  I     1
// EN_to_console_get              I     1
// EN_verify_out_get              I     1 unused
// EN_to_raw_mem_request_get      I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkSoC_Top(CLK,
		 RST_N,

		 server_control_request_put,
		 EN_server_control_request_put,
		 RDY_server_control_request_put,

		 EN_server_control_response_get,
		 server_control_response_get,
		 RDY_server_control_response_get,

		 from_console_put,
		 EN_from_console_put,
		 RDY_from_console_put,

		 EN_to_console_get,
		 to_console_get,
		 RDY_to_console_get,

		 EN_verify_out_get,
		 verify_out_get,
		 RDY_verify_out_get,

		 EN_to_raw_mem_request_get,
		 to_raw_mem_request_get,
		 RDY_to_raw_mem_request_get,

		 to_raw_mem_response_put,
		 EN_to_raw_mem_response_put,
		 RDY_to_raw_mem_response_put);
  input  CLK;
  input  RST_N;

  // action method server_control_request_put
  input  [207 : 0] server_control_request_put;
  input  EN_server_control_request_put;
  output RDY_server_control_request_put;

  // actionvalue method server_control_response_get
  input  EN_server_control_response_get;
  output [71 : 0] server_control_response_get;
  output RDY_server_control_response_get;

  // action method from_console_put
  input  [7 : 0] from_console_put;
  input  EN_from_console_put;
  output RDY_from_console_put;

  // actionvalue method to_console_get
  input  EN_to_console_get;
  output [7 : 0] to_console_get;
  output RDY_to_console_get;

  // actionvalue method verify_out_get
  input  EN_verify_out_get;
  output [419 : 0] verify_out_get;
  output RDY_verify_out_get;

  // actionvalue method to_raw_mem_request_get
  input  EN_to_raw_mem_request_get;
  output [315 : 0] to_raw_mem_request_get;
  output RDY_to_raw_mem_request_get;

  // action method to_raw_mem_response_put
  input  [255 : 0] to_raw_mem_response_put;
  input  EN_to_raw_mem_response_put;
  output RDY_to_raw_mem_response_put;

  // signals for module outputs
  wire [419 : 0] verify_out_get;
  wire [315 : 0] to_raw_mem_request_get;
  wire [71 : 0] server_control_response_get;
  wire [7 : 0] to_console_get;
  wire RDY_from_console_put,
       RDY_server_control_request_put,
       RDY_server_control_response_get,
       RDY_to_console_get,
       RDY_to_raw_mem_request_get,
       RDY_to_raw_mem_response_put,
       RDY_verify_out_get;

  // register rg_state
  reg rg_state;
  wire rg_state$D_IN, rg_state$EN;

  // ports of submodule cpu
  wire [69 : 0] cpu$control_request_put;
  wire [38 : 0] cpu$control_response_get;
  wire [31 : 0] cpu$dcache_cable_ifc_req_arg_addr,
		cpu$dcache_cable_ifc_req_arg_st_value,
		cpu$dcache_cable_ifc_word_result_word,
		cpu$icache_cable_ifc_instr_result_instr,
		cpu$icache_cable_ifc_pc_result_pc,
		cpu$icache_cable_ifc_req_arg_addr;
  wire [3 : 0] cpu$dcache_cable_ifc_exc_code_result_exc_code,
	       cpu$icache_cable_ifc_exc_code_result_exc_code;
  wire [2 : 0] cpu$dcache_cable_ifc_req_arg_f3;
  wire cpu$EN_control_request_put,
       cpu$EN_control_response_get,
       cpu$EN_reset_complete,
       cpu$EN_reset_start,
       cpu$RDY_control_request_put,
       cpu$RDY_control_response_get,
       cpu$RDY_reset_complete,
       cpu$dcache_cable_ifc_exc_result_exc,
       cpu$dcache_cable_ifc_req_arg_op,
       cpu$dcache_cable_ifc_req_enabled,
       cpu$dcache_cable_ifc_valid_result_valid,
       cpu$icache_cable_ifc_exc_result_exc,
       cpu$icache_cable_ifc_req_enabled,
       cpu$icache_cable_ifc_valid_result_valid;

  // ports of submodule dcache
  wire [69 : 0] dcache$txe_req_dmem_fabric_enq_data;
  wire [38 : 0] dcache$rxe_rsp_fabric_dmem_first_x;
  wire [31 : 0] dcache$req_addr,
		dcache$req_st_value,
		dcache$set_verbosity_verbosity,
		dcache$word;
  wire [3 : 0] dcache$exc_code;
  wire [2 : 0] dcache$req_f3;
  wire dcache$EN_dump_stats,
       dcache$EN_req,
       dcache$EN_req_reset,
       dcache$EN_rsp_reset,
       dcache$EN_set_verbosity,
       dcache$RDY_rsp_reset,
       dcache$exc,
       dcache$req_op,
       dcache$rxe_rsp_fabric_dmem_deq_ena,
       dcache$rxe_rsp_fabric_dmem_first_deq_rdy_b,
       dcache$rxe_rsp_fabric_dmem_notEmpty_b,
       dcache$txe_req_dmem_fabric_enq_ena,
       dcache$txe_req_dmem_fabric_enq_rdy_b,
       dcache$txe_req_dmem_fabric_notFull_b,
       dcache$valid;

  // ports of submodule f_req_dmem_fabric
  wire [69 : 0] f_req_dmem_fabric$D_IN, f_req_dmem_fabric$D_OUT;
  wire f_req_dmem_fabric$CLR,
       f_req_dmem_fabric$DEQ,
       f_req_dmem_fabric$EMPTY_N,
       f_req_dmem_fabric$ENQ,
       f_req_dmem_fabric$FULL_N;

  // ports of submodule f_req_imem_fabric
  wire [69 : 0] f_req_imem_fabric$D_IN, f_req_imem_fabric$D_OUT;
  wire f_req_imem_fabric$CLR,
       f_req_imem_fabric$DEQ,
       f_req_imem_fabric$EMPTY_N,
       f_req_imem_fabric$ENQ,
       f_req_imem_fabric$FULL_N;

  // ports of submodule f_rsp_fabric_dmem
  wire [38 : 0] f_rsp_fabric_dmem$D_IN, f_rsp_fabric_dmem$D_OUT;
  wire f_rsp_fabric_dmem$CLR,
       f_rsp_fabric_dmem$DEQ,
       f_rsp_fabric_dmem$EMPTY_N,
       f_rsp_fabric_dmem$ENQ,
       f_rsp_fabric_dmem$FULL_N;

  // ports of submodule f_rsp_fabric_imem
  wire [38 : 0] f_rsp_fabric_imem$D_IN, f_rsp_fabric_imem$D_OUT;
  wire f_rsp_fabric_imem$CLR,
       f_rsp_fabric_imem$DEQ,
       f_rsp_fabric_imem$EMPTY_N,
       f_rsp_fabric_imem$ENQ,
       f_rsp_fabric_imem$FULL_N;

  // ports of submodule fabric
  wire [69 : 0] fabric$v_from_initiators_0_request_put,
		fabric$v_from_initiators_1_request_put,
		fabric$v_from_initiators_2_request_put,
		fabric$v_to_targets_0_request_get,
		fabric$v_to_targets_1_request_get,
		fabric$v_to_targets_2_request_get;
  wire [38 : 0] fabric$v_from_initiators_0_response_get,
		fabric$v_from_initiators_1_response_get,
		fabric$v_from_initiators_2_response_get,
		fabric$v_to_targets_0_response_put,
		fabric$v_to_targets_1_response_put,
		fabric$v_to_targets_2_response_put;
  wire fabric$EN_server_reset_request_put,
       fabric$EN_server_reset_response_get,
       fabric$EN_v_from_initiators_0_request_put,
       fabric$EN_v_from_initiators_0_response_get,
       fabric$EN_v_from_initiators_1_request_put,
       fabric$EN_v_from_initiators_1_response_get,
       fabric$EN_v_from_initiators_2_request_put,
       fabric$EN_v_from_initiators_2_response_get,
       fabric$EN_v_to_targets_0_request_get,
       fabric$EN_v_to_targets_0_response_put,
       fabric$EN_v_to_targets_1_request_get,
       fabric$EN_v_to_targets_1_response_put,
       fabric$EN_v_to_targets_2_request_get,
       fabric$EN_v_to_targets_2_response_put,
       fabric$RDY_server_reset_request_put,
       fabric$RDY_server_reset_response_get,
       fabric$RDY_v_from_initiators_0_request_put,
       fabric$RDY_v_from_initiators_0_response_get,
       fabric$RDY_v_from_initiators_1_request_put,
       fabric$RDY_v_from_initiators_1_response_get,
       fabric$RDY_v_from_initiators_2_request_put,
       fabric$RDY_v_from_initiators_2_response_get,
       fabric$RDY_v_to_targets_0_request_get,
       fabric$RDY_v_to_targets_0_response_put,
       fabric$RDY_v_to_targets_1_request_get,
       fabric$RDY_v_to_targets_1_response_put,
       fabric$RDY_v_to_targets_2_request_get,
       fabric$RDY_v_to_targets_2_response_put;

  // ports of submodule icache
  wire [69 : 0] icache$txe_req_imem_fabric_enq_data;
  wire [38 : 0] icache$rxe_rsp_fabric_imem_first_x;
  wire [31 : 0] icache$instr,
		icache$pc,
		icache$req_addr,
		icache$set_verbosity_verbosity;
  wire [3 : 0] icache$exc_code;
  wire icache$EN_req,
       icache$EN_req_reset,
       icache$EN_rsp_reset,
       icache$EN_set_verbosity,
       icache$RDY_rsp_reset,
       icache$exc,
       icache$rxe_rsp_fabric_imem_deq_ena,
       icache$rxe_rsp_fabric_imem_first_deq_rdy_b,
       icache$rxe_rsp_fabric_imem_notEmpty_b,
       icache$txe_req_imem_fabric_enq_ena,
       icache$txe_req_imem_fabric_enq_rdy_b,
       icache$txe_req_imem_fabric_notFull_b,
       icache$valid;

  // ports of submodule mem_controller
  wire [315 : 0] mem_controller$to_raw_mem_request_get;
  wire [255 : 0] mem_controller$to_raw_mem_response_put;
  wire [69 : 0] mem_controller$from_fabric_request_put;
  wire [38 : 0] mem_controller$from_fabric_response_get;
  wire mem_controller$EN_from_fabric_request_put,
       mem_controller$EN_from_fabric_response_get,
       mem_controller$EN_server_reset_request_put,
       mem_controller$EN_server_reset_response_get,
       mem_controller$EN_to_raw_mem_request_get,
       mem_controller$EN_to_raw_mem_response_put,
       mem_controller$RDY_from_fabric_request_put,
       mem_controller$RDY_from_fabric_response_get,
       mem_controller$RDY_server_reset_request_put,
       mem_controller$RDY_server_reset_response_get,
       mem_controller$RDY_to_raw_mem_request_get,
       mem_controller$RDY_to_raw_mem_response_put;

  // ports of submodule soc_controller
  wire [207 : 0] soc_controller$server_control_request_put;
  wire [71 : 0] soc_controller$server_control_response_get;
  wire [69 : 0] soc_controller$to_fabric_request_get;
  wire [38 : 0] soc_controller$to_fabric_response_put;
  wire soc_controller$EN_client_reset_request_get,
       soc_controller$EN_client_reset_response_put,
       soc_controller$EN_finished_get,
       soc_controller$EN_server_control_request_put,
       soc_controller$EN_server_control_response_get,
       soc_controller$EN_to_fabric_request_get,
       soc_controller$EN_to_fabric_response_put,
       soc_controller$RDY_client_reset_request_get,
       soc_controller$RDY_client_reset_response_put,
       soc_controller$RDY_finished_get,
       soc_controller$RDY_server_control_request_put,
       soc_controller$RDY_server_control_response_get,
       soc_controller$RDY_to_fabric_request_get,
       soc_controller$RDY_to_fabric_response_put;

  // ports of submodule uart
  wire [69 : 0] uart$from_fabric_request_put;
  wire [38 : 0] uart$from_fabric_response_get;
  wire [7 : 0] uart$from_console_put, uart$to_console_get;
  wire uart$EN_from_console_put,
       uart$EN_from_fabric_request_put,
       uart$EN_from_fabric_response_get,
       uart$EN_server_reset_request_put,
       uart$EN_server_reset_response_get,
       uart$EN_to_console_get,
       uart$RDY_from_console_put,
       uart$RDY_from_fabric_request_put,
       uart$RDY_from_fabric_response_get,
       uart$RDY_server_reset_request_put,
       uart$RDY_server_reset_response_get,
       uart$RDY_to_console_get;

  // rule scheduling signals
  wire CAN_FIRE_RL_ClientServerRequest,
       CAN_FIRE_RL_ClientServerRequest_1,
       CAN_FIRE_RL_ClientServerRequest_2,
       CAN_FIRE_RL_ClientServerRequest_3,
       CAN_FIRE_RL_ClientServerRequest_4,
       CAN_FIRE_RL_ClientServerRequest_5,
       CAN_FIRE_RL_ClientServerResponse,
       CAN_FIRE_RL_ClientServerResponse_1,
       CAN_FIRE_RL_ClientServerResponse_2,
       CAN_FIRE_RL_ClientServerResponse_3,
       CAN_FIRE_RL_ClientServerResponse_4,
       CAN_FIRE_RL_ClientServerResponse_5,
       CAN_FIRE_RL_connect_ena,
       CAN_FIRE_RL_connect_ena_1,
       CAN_FIRE_RL_connect_ena_data,
       CAN_FIRE_RL_connect_ena_data_1,
       CAN_FIRE_RL_connect_first,
       CAN_FIRE_RL_connect_first_1,
       CAN_FIRE_RL_connect_notEmpty,
       CAN_FIRE_RL_connect_notEmpty_1,
       CAN_FIRE_RL_connect_notFull,
       CAN_FIRE_RL_connect_notFull_1,
       CAN_FIRE_RL_connect_rdy,
       CAN_FIRE_RL_connect_rdy_1,
       CAN_FIRE_RL_connect_rdy_2,
       CAN_FIRE_RL_connect_rdy_3,
       CAN_FIRE_RL_rl_finish,
       CAN_FIRE_RL_rl_method_exc,
       CAN_FIRE_RL_rl_method_exc_1,
       CAN_FIRE_RL_rl_method_exc_code,
       CAN_FIRE_RL_rl_method_exc_code_1,
       CAN_FIRE_RL_rl_method_instr,
       CAN_FIRE_RL_rl_method_pc,
       CAN_FIRE_RL_rl_method_req,
       CAN_FIRE_RL_rl_method_req_1,
       CAN_FIRE_RL_rl_method_valid,
       CAN_FIRE_RL_rl_method_valid_1,
       CAN_FIRE_RL_rl_method_word,
       CAN_FIRE_RL_rl_reset_complete,
       CAN_FIRE_RL_rl_reset_start,
       CAN_FIRE_from_console_put,
       CAN_FIRE_server_control_request_put,
       CAN_FIRE_server_control_response_get,
       CAN_FIRE_to_console_get,
       CAN_FIRE_to_raw_mem_request_get,
       CAN_FIRE_to_raw_mem_response_put,
       CAN_FIRE_verify_out_get,
       WILL_FIRE_RL_ClientServerRequest,
       WILL_FIRE_RL_ClientServerRequest_1,
       WILL_FIRE_RL_ClientServerRequest_2,
       WILL_FIRE_RL_ClientServerRequest_3,
       WILL_FIRE_RL_ClientServerRequest_4,
       WILL_FIRE_RL_ClientServerRequest_5,
       WILL_FIRE_RL_ClientServerResponse,
       WILL_FIRE_RL_ClientServerResponse_1,
       WILL_FIRE_RL_ClientServerResponse_2,
       WILL_FIRE_RL_ClientServerResponse_3,
       WILL_FIRE_RL_ClientServerResponse_4,
       WILL_FIRE_RL_ClientServerResponse_5,
       WILL_FIRE_RL_connect_ena,
       WILL_FIRE_RL_connect_ena_1,
       WILL_FIRE_RL_connect_ena_data,
       WILL_FIRE_RL_connect_ena_data_1,
       WILL_FIRE_RL_connect_first,
       WILL_FIRE_RL_connect_first_1,
       WILL_FIRE_RL_connect_notEmpty,
       WILL_FIRE_RL_connect_notEmpty_1,
       WILL_FIRE_RL_connect_notFull,
       WILL_FIRE_RL_connect_notFull_1,
       WILL_FIRE_RL_connect_rdy,
       WILL_FIRE_RL_connect_rdy_1,
       WILL_FIRE_RL_connect_rdy_2,
       WILL_FIRE_RL_connect_rdy_3,
       WILL_FIRE_RL_rl_finish,
       WILL_FIRE_RL_rl_method_exc,
       WILL_FIRE_RL_rl_method_exc_1,
       WILL_FIRE_RL_rl_method_exc_code,
       WILL_FIRE_RL_rl_method_exc_code_1,
       WILL_FIRE_RL_rl_method_instr,
       WILL_FIRE_RL_rl_method_pc,
       WILL_FIRE_RL_rl_method_req,
       WILL_FIRE_RL_rl_method_req_1,
       WILL_FIRE_RL_rl_method_valid,
       WILL_FIRE_RL_rl_method_valid_1,
       WILL_FIRE_RL_rl_method_word,
       WILL_FIRE_RL_rl_reset_complete,
       WILL_FIRE_RL_rl_reset_start,
       WILL_FIRE_from_console_put,
       WILL_FIRE_server_control_request_put,
       WILL_FIRE_server_control_response_get,
       WILL_FIRE_to_console_get,
       WILL_FIRE_to_raw_mem_request_get,
       WILL_FIRE_to_raw_mem_response_put,
       WILL_FIRE_verify_out_get;

  // inputs to muxes for submodule ports
  wire MUX_rg_state$write_1__SEL_1, MUX_rg_state$write_1__SEL_2;

  // remaining internal signals
  reg [31 : 0] v__h3474, v__h3480;

  // action method server_control_request_put
  assign RDY_server_control_request_put =
	     soc_controller$RDY_server_control_request_put ;
  assign CAN_FIRE_server_control_request_put =
	     soc_controller$RDY_server_control_request_put ;
  assign WILL_FIRE_server_control_request_put =
	     EN_server_control_request_put ;

  // actionvalue method server_control_response_get
  assign server_control_response_get =
	     soc_controller$server_control_response_get ;
  assign RDY_server_control_response_get =
	     soc_controller$RDY_server_control_response_get ;
  assign CAN_FIRE_server_control_response_get =
	     soc_controller$RDY_server_control_response_get ;
  assign WILL_FIRE_server_control_response_get =
	     EN_server_control_response_get ;

  // action method from_console_put
  assign RDY_from_console_put = uart$RDY_from_console_put ;
  assign CAN_FIRE_from_console_put = uart$RDY_from_console_put ;
  assign WILL_FIRE_from_console_put = EN_from_console_put ;

  // actionvalue method to_console_get
  assign to_console_get = uart$to_console_get ;
  assign RDY_to_console_get = uart$RDY_to_console_get ;
  assign CAN_FIRE_to_console_get = uart$RDY_to_console_get ;
  assign WILL_FIRE_to_console_get = EN_to_console_get ;

  // actionvalue method verify_out_get
  assign verify_out_get =
	     420'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ;
  assign RDY_verify_out_get = 1'd0 ;
  assign CAN_FIRE_verify_out_get = 1'd0 ;
  assign WILL_FIRE_verify_out_get = EN_verify_out_get ;

  // actionvalue method to_raw_mem_request_get
  assign to_raw_mem_request_get = mem_controller$to_raw_mem_request_get ;
  assign RDY_to_raw_mem_request_get =
	     mem_controller$RDY_to_raw_mem_request_get ;
  assign CAN_FIRE_to_raw_mem_request_get =
	     mem_controller$RDY_to_raw_mem_request_get ;
  assign WILL_FIRE_to_raw_mem_request_get = EN_to_raw_mem_request_get ;

  // action method to_raw_mem_response_put
  assign RDY_to_raw_mem_response_put =
	     mem_controller$RDY_to_raw_mem_response_put ;
  assign CAN_FIRE_to_raw_mem_response_put =
	     mem_controller$RDY_to_raw_mem_response_put ;
  assign WILL_FIRE_to_raw_mem_response_put = EN_to_raw_mem_response_put ;

  // submodule cpu
  mkCPU cpu(.CLK(CLK),
	    .RST_N(RST_N),
	    .control_request_put(cpu$control_request_put),
	    .dcache_cable_ifc_exc_code_result_exc_code(cpu$dcache_cable_ifc_exc_code_result_exc_code),
	    .dcache_cable_ifc_exc_result_exc(cpu$dcache_cable_ifc_exc_result_exc),
	    .dcache_cable_ifc_valid_result_valid(cpu$dcache_cable_ifc_valid_result_valid),
	    .dcache_cable_ifc_word_result_word(cpu$dcache_cable_ifc_word_result_word),
	    .icache_cable_ifc_exc_code_result_exc_code(cpu$icache_cable_ifc_exc_code_result_exc_code),
	    .icache_cable_ifc_exc_result_exc(cpu$icache_cable_ifc_exc_result_exc),
	    .icache_cable_ifc_instr_result_instr(cpu$icache_cable_ifc_instr_result_instr),
	    .icache_cable_ifc_pc_result_pc(cpu$icache_cable_ifc_pc_result_pc),
	    .icache_cable_ifc_valid_result_valid(cpu$icache_cable_ifc_valid_result_valid),
	    .EN_reset_start(cpu$EN_reset_start),
	    .EN_reset_complete(cpu$EN_reset_complete),
	    .EN_control_request_put(cpu$EN_control_request_put),
	    .EN_control_response_get(cpu$EN_control_response_get),
	    .RDY_reset_start(),
	    .RDY_reset_complete(cpu$RDY_reset_complete),
	    .icache_cable_ifc_req_enabled(cpu$icache_cable_ifc_req_enabled),
	    .icache_cable_ifc_req_arg_addr(cpu$icache_cable_ifc_req_arg_addr),
	    .dcache_cable_ifc_req_enabled(cpu$dcache_cable_ifc_req_enabled),
	    .dcache_cable_ifc_req_arg_op(cpu$dcache_cable_ifc_req_arg_op),
	    .dcache_cable_ifc_req_arg_f3(cpu$dcache_cable_ifc_req_arg_f3),
	    .dcache_cable_ifc_req_arg_addr(cpu$dcache_cable_ifc_req_arg_addr),
	    .dcache_cable_ifc_req_arg_st_value(cpu$dcache_cable_ifc_req_arg_st_value),
	    .RDY_control_request_put(cpu$RDY_control_request_put),
	    .control_response_get(cpu$control_response_get),
	    .RDY_control_response_get(cpu$RDY_control_response_get));

  // submodule dcache
  mkDCache dcache(.CLK(CLK),
		  .RST_N(RST_N),
		  .req_addr(dcache$req_addr),
		  .req_f3(dcache$req_f3),
		  .req_op(dcache$req_op),
		  .req_st_value(dcache$req_st_value),
		  .rxe_rsp_fabric_dmem_first_deq_rdy_b(dcache$rxe_rsp_fabric_dmem_first_deq_rdy_b),
		  .rxe_rsp_fabric_dmem_first_x(dcache$rxe_rsp_fabric_dmem_first_x),
		  .rxe_rsp_fabric_dmem_notEmpty_b(dcache$rxe_rsp_fabric_dmem_notEmpty_b),
		  .set_verbosity_verbosity(dcache$set_verbosity_verbosity),
		  .txe_req_dmem_fabric_enq_rdy_b(dcache$txe_req_dmem_fabric_enq_rdy_b),
		  .txe_req_dmem_fabric_notFull_b(dcache$txe_req_dmem_fabric_notFull_b),
		  .EN_set_verbosity(dcache$EN_set_verbosity),
		  .EN_req_reset(dcache$EN_req_reset),
		  .EN_rsp_reset(dcache$EN_rsp_reset),
		  .EN_req(dcache$EN_req),
		  .EN_dump_stats(dcache$EN_dump_stats),
		  .RDY_set_verbosity(),
		  .RDY_req_reset(),
		  .RDY_rsp_reset(dcache$RDY_rsp_reset),
		  .valid(dcache$valid),
		  .word(dcache$word),
		  .exc(dcache$exc),
		  .exc_code(dcache$exc_code),
		  .txe_req_dmem_fabric_enq_ena(dcache$txe_req_dmem_fabric_enq_ena),
		  .txe_req_dmem_fabric_enq_data(dcache$txe_req_dmem_fabric_enq_data),
		  .rxe_rsp_fabric_dmem_deq_ena(dcache$rxe_rsp_fabric_dmem_deq_ena),
		  .RDY_dump_stats());

  // submodule f_req_dmem_fabric
  FIFO2 #(.width(32'd70), .guarded(32'd1)) f_req_dmem_fabric(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(f_req_dmem_fabric$D_IN),
							     .ENQ(f_req_dmem_fabric$ENQ),
							     .DEQ(f_req_dmem_fabric$DEQ),
							     .CLR(f_req_dmem_fabric$CLR),
							     .D_OUT(f_req_dmem_fabric$D_OUT),
							     .FULL_N(f_req_dmem_fabric$FULL_N),
							     .EMPTY_N(f_req_dmem_fabric$EMPTY_N));

  // submodule f_req_imem_fabric
  FIFO2 #(.width(32'd70), .guarded(32'd1)) f_req_imem_fabric(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(f_req_imem_fabric$D_IN),
							     .ENQ(f_req_imem_fabric$ENQ),
							     .DEQ(f_req_imem_fabric$DEQ),
							     .CLR(f_req_imem_fabric$CLR),
							     .D_OUT(f_req_imem_fabric$D_OUT),
							     .FULL_N(f_req_imem_fabric$FULL_N),
							     .EMPTY_N(f_req_imem_fabric$EMPTY_N));

  // submodule f_rsp_fabric_dmem
  FIFO2 #(.width(32'd39), .guarded(32'd1)) f_rsp_fabric_dmem(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(f_rsp_fabric_dmem$D_IN),
							     .ENQ(f_rsp_fabric_dmem$ENQ),
							     .DEQ(f_rsp_fabric_dmem$DEQ),
							     .CLR(f_rsp_fabric_dmem$CLR),
							     .D_OUT(f_rsp_fabric_dmem$D_OUT),
							     .FULL_N(f_rsp_fabric_dmem$FULL_N),
							     .EMPTY_N(f_rsp_fabric_dmem$EMPTY_N));

  // submodule f_rsp_fabric_imem
  FIFO2 #(.width(32'd39), .guarded(32'd1)) f_rsp_fabric_imem(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(f_rsp_fabric_imem$D_IN),
							     .ENQ(f_rsp_fabric_imem$ENQ),
							     .DEQ(f_rsp_fabric_imem$DEQ),
							     .CLR(f_rsp_fabric_imem$CLR),
							     .D_OUT(f_rsp_fabric_imem$D_OUT),
							     .FULL_N(f_rsp_fabric_imem$FULL_N),
							     .EMPTY_N(f_rsp_fabric_imem$EMPTY_N));

  // submodule fabric
  mkFabric fabric(.CLK(CLK),
		  .RST_N(RST_N),
		  .v_from_initiators_0_request_put(fabric$v_from_initiators_0_request_put),
		  .v_from_initiators_1_request_put(fabric$v_from_initiators_1_request_put),
		  .v_from_initiators_2_request_put(fabric$v_from_initiators_2_request_put),
		  .v_to_targets_0_response_put(fabric$v_to_targets_0_response_put),
		  .v_to_targets_1_response_put(fabric$v_to_targets_1_response_put),
		  .v_to_targets_2_response_put(fabric$v_to_targets_2_response_put),
		  .EN_server_reset_request_put(fabric$EN_server_reset_request_put),
		  .EN_server_reset_response_get(fabric$EN_server_reset_response_get),
		  .EN_v_from_initiators_0_request_put(fabric$EN_v_from_initiators_0_request_put),
		  .EN_v_from_initiators_0_response_get(fabric$EN_v_from_initiators_0_response_get),
		  .EN_v_from_initiators_1_request_put(fabric$EN_v_from_initiators_1_request_put),
		  .EN_v_from_initiators_1_response_get(fabric$EN_v_from_initiators_1_response_get),
		  .EN_v_from_initiators_2_request_put(fabric$EN_v_from_initiators_2_request_put),
		  .EN_v_from_initiators_2_response_get(fabric$EN_v_from_initiators_2_response_get),
		  .EN_v_to_targets_0_request_get(fabric$EN_v_to_targets_0_request_get),
		  .EN_v_to_targets_0_response_put(fabric$EN_v_to_targets_0_response_put),
		  .EN_v_to_targets_1_request_get(fabric$EN_v_to_targets_1_request_get),
		  .EN_v_to_targets_1_response_put(fabric$EN_v_to_targets_1_response_put),
		  .EN_v_to_targets_2_request_get(fabric$EN_v_to_targets_2_request_get),
		  .EN_v_to_targets_2_response_put(fabric$EN_v_to_targets_2_response_put),
		  .RDY_server_reset_request_put(fabric$RDY_server_reset_request_put),
		  .RDY_server_reset_response_get(fabric$RDY_server_reset_response_get),
		  .RDY_v_from_initiators_0_request_put(fabric$RDY_v_from_initiators_0_request_put),
		  .v_from_initiators_0_response_get(fabric$v_from_initiators_0_response_get),
		  .RDY_v_from_initiators_0_response_get(fabric$RDY_v_from_initiators_0_response_get),
		  .RDY_v_from_initiators_1_request_put(fabric$RDY_v_from_initiators_1_request_put),
		  .v_from_initiators_1_response_get(fabric$v_from_initiators_1_response_get),
		  .RDY_v_from_initiators_1_response_get(fabric$RDY_v_from_initiators_1_response_get),
		  .RDY_v_from_initiators_2_request_put(fabric$RDY_v_from_initiators_2_request_put),
		  .v_from_initiators_2_response_get(fabric$v_from_initiators_2_response_get),
		  .RDY_v_from_initiators_2_response_get(fabric$RDY_v_from_initiators_2_response_get),
		  .v_to_targets_0_request_get(fabric$v_to_targets_0_request_get),
		  .RDY_v_to_targets_0_request_get(fabric$RDY_v_to_targets_0_request_get),
		  .RDY_v_to_targets_0_response_put(fabric$RDY_v_to_targets_0_response_put),
		  .v_to_targets_1_request_get(fabric$v_to_targets_1_request_get),
		  .RDY_v_to_targets_1_request_get(fabric$RDY_v_to_targets_1_request_get),
		  .RDY_v_to_targets_1_response_put(fabric$RDY_v_to_targets_1_response_put),
		  .v_to_targets_2_request_get(fabric$v_to_targets_2_request_get),
		  .RDY_v_to_targets_2_request_get(fabric$RDY_v_to_targets_2_request_get),
		  .RDY_v_to_targets_2_response_put(fabric$RDY_v_to_targets_2_response_put));

  // submodule icache
  mkICache icache(.CLK(CLK),
		  .RST_N(RST_N),
		  .req_addr(icache$req_addr),
		  .rxe_rsp_fabric_imem_first_deq_rdy_b(icache$rxe_rsp_fabric_imem_first_deq_rdy_b),
		  .rxe_rsp_fabric_imem_first_x(icache$rxe_rsp_fabric_imem_first_x),
		  .rxe_rsp_fabric_imem_notEmpty_b(icache$rxe_rsp_fabric_imem_notEmpty_b),
		  .set_verbosity_verbosity(icache$set_verbosity_verbosity),
		  .txe_req_imem_fabric_enq_rdy_b(icache$txe_req_imem_fabric_enq_rdy_b),
		  .txe_req_imem_fabric_notFull_b(icache$txe_req_imem_fabric_notFull_b),
		  .EN_set_verbosity(icache$EN_set_verbosity),
		  .EN_req_reset(icache$EN_req_reset),
		  .EN_rsp_reset(icache$EN_rsp_reset),
		  .EN_req(icache$EN_req),
		  .RDY_set_verbosity(),
		  .RDY_req_reset(),
		  .RDY_rsp_reset(icache$RDY_rsp_reset),
		  .valid(icache$valid),
		  .pc(icache$pc),
		  .instr(icache$instr),
		  .exc(icache$exc),
		  .exc_code(icache$exc_code),
		  .txe_req_imem_fabric_enq_ena(icache$txe_req_imem_fabric_enq_ena),
		  .txe_req_imem_fabric_enq_data(icache$txe_req_imem_fabric_enq_data),
		  .rxe_rsp_fabric_imem_deq_ena(icache$rxe_rsp_fabric_imem_deq_ena));

  // submodule mem_controller
  mkMem_Controller mem_controller(.CLK(CLK),
				  .RST_N(RST_N),
				  .from_fabric_request_put(mem_controller$from_fabric_request_put),
				  .to_raw_mem_response_put(mem_controller$to_raw_mem_response_put),
				  .EN_server_reset_request_put(mem_controller$EN_server_reset_request_put),
				  .EN_server_reset_response_get(mem_controller$EN_server_reset_response_get),
				  .EN_from_fabric_request_put(mem_controller$EN_from_fabric_request_put),
				  .EN_from_fabric_response_get(mem_controller$EN_from_fabric_response_get),
				  .EN_to_raw_mem_request_get(mem_controller$EN_to_raw_mem_request_get),
				  .EN_to_raw_mem_response_put(mem_controller$EN_to_raw_mem_response_put),
				  .RDY_server_reset_request_put(mem_controller$RDY_server_reset_request_put),
				  .RDY_server_reset_response_get(mem_controller$RDY_server_reset_response_get),
				  .RDY_from_fabric_request_put(mem_controller$RDY_from_fabric_request_put),
				  .from_fabric_response_get(mem_controller$from_fabric_response_get),
				  .RDY_from_fabric_response_get(mem_controller$RDY_from_fabric_response_get),
				  .to_raw_mem_request_get(mem_controller$to_raw_mem_request_get),
				  .RDY_to_raw_mem_request_get(mem_controller$RDY_to_raw_mem_request_get),
				  .RDY_to_raw_mem_response_put(mem_controller$RDY_to_raw_mem_response_put));

  // submodule soc_controller
  mkSoC_Controller soc_controller(.CLK(CLK),
				  .RST_N(RST_N),
				  .server_control_request_put(soc_controller$server_control_request_put),
				  .to_fabric_response_put(soc_controller$to_fabric_response_put),
				  .EN_server_control_request_put(soc_controller$EN_server_control_request_put),
				  .EN_server_control_response_get(soc_controller$EN_server_control_response_get),
				  .EN_client_reset_request_get(soc_controller$EN_client_reset_request_get),
				  .EN_client_reset_response_put(soc_controller$EN_client_reset_response_put),
				  .EN_to_fabric_request_get(soc_controller$EN_to_fabric_request_get),
				  .EN_to_fabric_response_put(soc_controller$EN_to_fabric_response_put),
				  .EN_finished_get(soc_controller$EN_finished_get),
				  .RDY_server_control_request_put(soc_controller$RDY_server_control_request_put),
				  .server_control_response_get(soc_controller$server_control_response_get),
				  .RDY_server_control_response_get(soc_controller$RDY_server_control_response_get),
				  .RDY_client_reset_request_get(soc_controller$RDY_client_reset_request_get),
				  .RDY_client_reset_response_put(soc_controller$RDY_client_reset_response_put),
				  .to_fabric_request_get(soc_controller$to_fabric_request_get),
				  .RDY_to_fabric_request_get(soc_controller$RDY_to_fabric_request_get),
				  .RDY_to_fabric_response_put(soc_controller$RDY_to_fabric_response_put),
				  .RDY_finished_get(soc_controller$RDY_finished_get));

  // submodule uart
  mkUART uart(.CLK(CLK),
	      .RST_N(RST_N),
	      .from_console_put(uart$from_console_put),
	      .from_fabric_request_put(uart$from_fabric_request_put),
	      .EN_server_reset_request_put(uart$EN_server_reset_request_put),
	      .EN_server_reset_response_get(uart$EN_server_reset_response_get),
	      .EN_from_fabric_request_put(uart$EN_from_fabric_request_put),
	      .EN_from_fabric_response_get(uart$EN_from_fabric_response_get),
	      .EN_to_console_get(uart$EN_to_console_get),
	      .EN_from_console_put(uart$EN_from_console_put),
	      .RDY_server_reset_request_put(uart$RDY_server_reset_request_put),
	      .RDY_server_reset_response_get(uart$RDY_server_reset_response_get),
	      .RDY_from_fabric_request_put(uart$RDY_from_fabric_request_put),
	      .from_fabric_response_get(uart$from_fabric_response_get),
	      .RDY_from_fabric_response_get(uart$RDY_from_fabric_response_get),
	      .to_console_get(uart$to_console_get),
	      .RDY_to_console_get(uart$RDY_to_console_get),
	      .RDY_from_console_put(uart$RDY_from_console_put));

  // rule RL_ClientServerRequest
  assign CAN_FIRE_RL_ClientServerRequest =
	     fabric$RDY_v_from_initiators_0_request_put &&
	     soc_controller$RDY_to_fabric_request_get ;
  assign WILL_FIRE_RL_ClientServerRequest = CAN_FIRE_RL_ClientServerRequest ;

  // rule RL_ClientServerResponse
  assign CAN_FIRE_RL_ClientServerResponse =
	     fabric$RDY_v_from_initiators_0_response_get &&
	     soc_controller$RDY_to_fabric_response_put ;
  assign WILL_FIRE_RL_ClientServerResponse =
	     CAN_FIRE_RL_ClientServerResponse ;

  // rule RL_rl_method_pc
  assign CAN_FIRE_RL_rl_method_pc = 1'd1 ;
  assign WILL_FIRE_RL_rl_method_pc = 1'd1 ;

  // rule RL_rl_method_exc
  assign CAN_FIRE_RL_rl_method_exc = 1'd1 ;
  assign WILL_FIRE_RL_rl_method_exc = 1'd1 ;

  // rule RL_rl_method_exc_code
  assign CAN_FIRE_RL_rl_method_exc_code = 1'd1 ;
  assign WILL_FIRE_RL_rl_method_exc_code = 1'd1 ;

  // rule RL_connect_notFull
  assign CAN_FIRE_RL_connect_notFull = 1'd1 ;
  assign WILL_FIRE_RL_connect_notFull = 1'd1 ;

  // rule RL_connect_rdy
  assign CAN_FIRE_RL_connect_rdy = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy = 1'd1 ;

  // rule RL_rl_method_valid
  assign CAN_FIRE_RL_rl_method_valid = 1'd1 ;
  assign WILL_FIRE_RL_rl_method_valid = 1'd1 ;

  // rule RL_rl_method_instr
  assign CAN_FIRE_RL_rl_method_instr = 1'd1 ;
  assign WILL_FIRE_RL_rl_method_instr = 1'd1 ;

  // rule RL_connect_ena_data
  assign CAN_FIRE_RL_connect_ena_data =
	     f_req_imem_fabric$FULL_N && icache$txe_req_imem_fabric_enq_ena ;
  assign WILL_FIRE_RL_connect_ena_data = CAN_FIRE_RL_connect_ena_data ;

  // rule RL_connect_notEmpty
  assign CAN_FIRE_RL_connect_notEmpty = 1'd1 ;
  assign WILL_FIRE_RL_connect_notEmpty = 1'd1 ;

  // rule RL_connect_rdy_1
  assign CAN_FIRE_RL_connect_rdy_1 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_1 = 1'd1 ;

  // rule RL_connect_first
  assign CAN_FIRE_RL_connect_first = 1'b1 ;
  assign WILL_FIRE_RL_connect_first = 1'b1 ;

  // rule RL_ClientServerRequest_1
  assign CAN_FIRE_RL_ClientServerRequest_1 =
	     fabric$RDY_v_from_initiators_1_request_put &&
	     f_req_imem_fabric$EMPTY_N ;
  assign WILL_FIRE_RL_ClientServerRequest_1 =
	     CAN_FIRE_RL_ClientServerRequest_1 ;

  // rule RL_ClientServerResponse_1
  assign CAN_FIRE_RL_ClientServerResponse_1 =
	     fabric$RDY_v_from_initiators_1_response_get &&
	     f_rsp_fabric_imem$FULL_N ;
  assign WILL_FIRE_RL_ClientServerResponse_1 =
	     CAN_FIRE_RL_ClientServerResponse_1 ;

  // rule RL_rl_method_exc_1
  assign CAN_FIRE_RL_rl_method_exc_1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_method_exc_1 = 1'd1 ;

  // rule RL_rl_method_exc_code_1
  assign CAN_FIRE_RL_rl_method_exc_code_1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_method_exc_code_1 = 1'd1 ;

  // rule RL_connect_notFull_1
  assign CAN_FIRE_RL_connect_notFull_1 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notFull_1 = 1'd1 ;

  // rule RL_connect_rdy_2
  assign CAN_FIRE_RL_connect_rdy_2 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_2 = 1'd1 ;

  // rule RL_connect_ena_data_1
  assign CAN_FIRE_RL_connect_ena_data_1 =
	     f_req_dmem_fabric$FULL_N && dcache$txe_req_dmem_fabric_enq_ena ;
  assign WILL_FIRE_RL_connect_ena_data_1 = CAN_FIRE_RL_connect_ena_data_1 ;

  // rule RL_connect_notEmpty_1
  assign CAN_FIRE_RL_connect_notEmpty_1 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notEmpty_1 = 1'd1 ;

  // rule RL_connect_rdy_3
  assign CAN_FIRE_RL_connect_rdy_3 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_3 = 1'd1 ;

  // rule RL_connect_first_1
  assign CAN_FIRE_RL_connect_first_1 = 1'b1 ;
  assign WILL_FIRE_RL_connect_first_1 = 1'b1 ;

  // rule RL_rl_method_valid_1
  assign CAN_FIRE_RL_rl_method_valid_1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_method_valid_1 = 1'd1 ;

  // rule RL_rl_method_word
  assign CAN_FIRE_RL_rl_method_word = 1'd1 ;
  assign WILL_FIRE_RL_rl_method_word = 1'd1 ;

  // rule RL_rl_method_req
  assign CAN_FIRE_RL_rl_method_req = cpu$icache_cable_ifc_req_enabled ;
  assign WILL_FIRE_RL_rl_method_req = cpu$icache_cable_ifc_req_enabled ;

  // rule RL_connect_ena
  assign CAN_FIRE_RL_connect_ena =
	     f_rsp_fabric_imem$EMPTY_N && icache$rxe_rsp_fabric_imem_deq_ena ;
  assign WILL_FIRE_RL_connect_ena = CAN_FIRE_RL_connect_ena ;

  // rule RL_ClientServerRequest_2
  assign CAN_FIRE_RL_ClientServerRequest_2 =
	     fabric$RDY_v_from_initiators_2_request_put &&
	     f_req_dmem_fabric$EMPTY_N ;
  assign WILL_FIRE_RL_ClientServerRequest_2 =
	     CAN_FIRE_RL_ClientServerRequest_2 ;

  // rule RL_ClientServerResponse_2
  assign CAN_FIRE_RL_ClientServerResponse_2 =
	     fabric$RDY_v_from_initiators_2_response_get &&
	     f_rsp_fabric_dmem$FULL_N ;
  assign WILL_FIRE_RL_ClientServerResponse_2 =
	     CAN_FIRE_RL_ClientServerResponse_2 ;

  // rule RL_ClientServerRequest_3
  assign CAN_FIRE_RL_ClientServerRequest_3 =
	     fabric$RDY_v_to_targets_0_request_get &&
	     mem_controller$RDY_from_fabric_request_put ;
  assign WILL_FIRE_RL_ClientServerRequest_3 =
	     CAN_FIRE_RL_ClientServerRequest_3 ;

  // rule RL_ClientServerResponse_3
  assign CAN_FIRE_RL_ClientServerResponse_3 =
	     fabric$RDY_v_to_targets_0_response_put &&
	     mem_controller$RDY_from_fabric_response_get ;
  assign WILL_FIRE_RL_ClientServerResponse_3 =
	     CAN_FIRE_RL_ClientServerResponse_3 ;

  // rule RL_ClientServerResponse_4
  assign CAN_FIRE_RL_ClientServerResponse_4 =
	     fabric$RDY_v_to_targets_1_response_put &&
	     cpu$RDY_control_response_get ;
  assign WILL_FIRE_RL_ClientServerResponse_4 =
	     CAN_FIRE_RL_ClientServerResponse_4 ;

  // rule RL_ClientServerRequest_5
  assign CAN_FIRE_RL_ClientServerRequest_5 =
	     fabric$RDY_v_to_targets_2_request_get &&
	     uart$RDY_from_fabric_request_put ;
  assign WILL_FIRE_RL_ClientServerRequest_5 =
	     CAN_FIRE_RL_ClientServerRequest_5 ;

  // rule RL_ClientServerResponse_5
  assign CAN_FIRE_RL_ClientServerResponse_5 =
	     fabric$RDY_v_to_targets_2_response_put &&
	     uart$RDY_from_fabric_response_get ;
  assign WILL_FIRE_RL_ClientServerResponse_5 =
	     CAN_FIRE_RL_ClientServerResponse_5 ;

  // rule RL_rl_reset_complete
  assign CAN_FIRE_RL_rl_reset_complete = MUX_rg_state$write_1__SEL_1 ;
  assign WILL_FIRE_RL_rl_reset_complete = MUX_rg_state$write_1__SEL_1 ;

  // rule RL_ClientServerRequest_4
  assign CAN_FIRE_RL_ClientServerRequest_4 =
	     fabric$RDY_v_to_targets_1_request_get &&
	     cpu$RDY_control_request_put ;
  assign WILL_FIRE_RL_ClientServerRequest_4 =
	     CAN_FIRE_RL_ClientServerRequest_4 ;

  // rule RL_rl_method_req_1
  assign CAN_FIRE_RL_rl_method_req_1 = cpu$dcache_cable_ifc_req_enabled ;
  assign WILL_FIRE_RL_rl_method_req_1 = cpu$dcache_cable_ifc_req_enabled ;

  // rule RL_connect_ena_1
  assign CAN_FIRE_RL_connect_ena_1 =
	     f_rsp_fabric_dmem$EMPTY_N && dcache$rxe_rsp_fabric_dmem_deq_ena ;
  assign WILL_FIRE_RL_connect_ena_1 = CAN_FIRE_RL_connect_ena_1 ;

  // rule RL_rl_reset_start
  assign CAN_FIRE_RL_rl_reset_start =
	     fabric$RDY_server_reset_request_put &&
	     mem_controller$RDY_server_reset_request_put &&
	     uart$RDY_server_reset_request_put &&
	     soc_controller$RDY_client_reset_request_get &&
	     !rg_state ;
  assign WILL_FIRE_RL_rl_reset_start = MUX_rg_state$write_1__SEL_2 ;

  // rule RL_rl_finish
  assign CAN_FIRE_RL_rl_finish = soc_controller$RDY_finished_get ;
  assign WILL_FIRE_RL_rl_finish = soc_controller$RDY_finished_get ;

  // inputs to muxes for submodule ports
  assign MUX_rg_state$write_1__SEL_1 =
	     fabric$RDY_server_reset_response_get &&
	     mem_controller$RDY_server_reset_response_get &&
	     uart$RDY_server_reset_response_get &&
	     soc_controller$RDY_client_reset_response_put &&
	     cpu$RDY_reset_complete &&
	     icache$RDY_rsp_reset &&
	     dcache$RDY_rsp_reset ;
  assign MUX_rg_state$write_1__SEL_2 =
	     CAN_FIRE_RL_rl_reset_start && !WILL_FIRE_RL_rl_reset_complete ;

  // register rg_state
  assign rg_state$D_IN = !WILL_FIRE_RL_rl_reset_complete ;
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_reset_complete || WILL_FIRE_RL_rl_reset_start ;

  // submodule cpu
  assign cpu$control_request_put = fabric$v_to_targets_1_request_get ;
  assign cpu$dcache_cable_ifc_exc_code_result_exc_code = dcache$exc_code ;
  assign cpu$dcache_cable_ifc_exc_result_exc = dcache$exc ;
  assign cpu$dcache_cable_ifc_valid_result_valid = dcache$valid ;
  assign cpu$dcache_cable_ifc_word_result_word = dcache$word ;
  assign cpu$icache_cable_ifc_exc_code_result_exc_code = icache$exc_code ;
  assign cpu$icache_cable_ifc_exc_result_exc = icache$exc ;
  assign cpu$icache_cable_ifc_instr_result_instr = icache$instr ;
  assign cpu$icache_cable_ifc_pc_result_pc = icache$pc ;
  assign cpu$icache_cable_ifc_valid_result_valid = icache$valid ;
  assign cpu$EN_reset_start = MUX_rg_state$write_1__SEL_2 ;
  assign cpu$EN_reset_complete = MUX_rg_state$write_1__SEL_1 ;
  assign cpu$EN_control_request_put = CAN_FIRE_RL_ClientServerRequest_4 ;
  assign cpu$EN_control_response_get = CAN_FIRE_RL_ClientServerResponse_4 ;

  // submodule dcache
  assign dcache$req_addr = cpu$dcache_cable_ifc_req_arg_addr ;
  assign dcache$req_f3 = cpu$dcache_cable_ifc_req_arg_f3 ;
  assign dcache$req_op = cpu$dcache_cable_ifc_req_arg_op ;
  assign dcache$req_st_value = cpu$dcache_cable_ifc_req_arg_st_value ;
  assign dcache$rxe_rsp_fabric_dmem_first_deq_rdy_b =
	     f_rsp_fabric_dmem$EMPTY_N ;
  assign dcache$rxe_rsp_fabric_dmem_first_x = f_rsp_fabric_dmem$D_OUT ;
  assign dcache$rxe_rsp_fabric_dmem_notEmpty_b = f_rsp_fabric_dmem$EMPTY_N ;
  assign dcache$set_verbosity_verbosity = 32'h0 ;
  assign dcache$txe_req_dmem_fabric_enq_rdy_b = f_req_dmem_fabric$FULL_N ;
  assign dcache$txe_req_dmem_fabric_notFull_b = f_req_dmem_fabric$FULL_N ;
  assign dcache$EN_set_verbosity = 1'b0 ;
  assign dcache$EN_req_reset = MUX_rg_state$write_1__SEL_2 ;
  assign dcache$EN_rsp_reset = MUX_rg_state$write_1__SEL_1 ;
  assign dcache$EN_req = cpu$dcache_cable_ifc_req_enabled ;
  assign dcache$EN_dump_stats = soc_controller$RDY_finished_get ;

  // submodule f_req_dmem_fabric
  assign f_req_dmem_fabric$D_IN = dcache$txe_req_dmem_fabric_enq_data ;
  assign f_req_dmem_fabric$ENQ = CAN_FIRE_RL_connect_ena_data_1 ;
  assign f_req_dmem_fabric$DEQ = CAN_FIRE_RL_ClientServerRequest_2 ;
  assign f_req_dmem_fabric$CLR = 1'b0 ;

  // submodule f_req_imem_fabric
  assign f_req_imem_fabric$D_IN = icache$txe_req_imem_fabric_enq_data ;
  assign f_req_imem_fabric$ENQ = CAN_FIRE_RL_connect_ena_data ;
  assign f_req_imem_fabric$DEQ = CAN_FIRE_RL_ClientServerRequest_1 ;
  assign f_req_imem_fabric$CLR = 1'b0 ;

  // submodule f_rsp_fabric_dmem
  assign f_rsp_fabric_dmem$D_IN = fabric$v_from_initiators_2_response_get ;
  assign f_rsp_fabric_dmem$ENQ = CAN_FIRE_RL_ClientServerResponse_2 ;
  assign f_rsp_fabric_dmem$DEQ = CAN_FIRE_RL_connect_ena_1 ;
  assign f_rsp_fabric_dmem$CLR = 1'b0 ;

  // submodule f_rsp_fabric_imem
  assign f_rsp_fabric_imem$D_IN = fabric$v_from_initiators_1_response_get ;
  assign f_rsp_fabric_imem$ENQ = CAN_FIRE_RL_ClientServerResponse_1 ;
  assign f_rsp_fabric_imem$DEQ = CAN_FIRE_RL_connect_ena ;
  assign f_rsp_fabric_imem$CLR = 1'b0 ;

  // submodule fabric
  assign fabric$v_from_initiators_0_request_put =
	     soc_controller$to_fabric_request_get ;
  assign fabric$v_from_initiators_1_request_put = f_req_imem_fabric$D_OUT ;
  assign fabric$v_from_initiators_2_request_put = f_req_dmem_fabric$D_OUT ;
  assign fabric$v_to_targets_0_response_put =
	     mem_controller$from_fabric_response_get ;
  assign fabric$v_to_targets_1_response_put = cpu$control_response_get ;
  assign fabric$v_to_targets_2_response_put = uart$from_fabric_response_get ;
  assign fabric$EN_server_reset_request_put = MUX_rg_state$write_1__SEL_2 ;
  assign fabric$EN_server_reset_response_get = MUX_rg_state$write_1__SEL_1 ;
  assign fabric$EN_v_from_initiators_0_request_put =
	     CAN_FIRE_RL_ClientServerRequest ;
  assign fabric$EN_v_from_initiators_0_response_get =
	     CAN_FIRE_RL_ClientServerResponse ;
  assign fabric$EN_v_from_initiators_1_request_put =
	     CAN_FIRE_RL_ClientServerRequest_1 ;
  assign fabric$EN_v_from_initiators_1_response_get =
	     CAN_FIRE_RL_ClientServerResponse_1 ;
  assign fabric$EN_v_from_initiators_2_request_put =
	     CAN_FIRE_RL_ClientServerRequest_2 ;
  assign fabric$EN_v_from_initiators_2_response_get =
	     CAN_FIRE_RL_ClientServerResponse_2 ;
  assign fabric$EN_v_to_targets_0_request_get =
	     CAN_FIRE_RL_ClientServerRequest_3 ;
  assign fabric$EN_v_to_targets_0_response_put =
	     CAN_FIRE_RL_ClientServerResponse_3 ;
  assign fabric$EN_v_to_targets_1_request_get =
	     CAN_FIRE_RL_ClientServerRequest_4 ;
  assign fabric$EN_v_to_targets_1_response_put =
	     CAN_FIRE_RL_ClientServerResponse_4 ;
  assign fabric$EN_v_to_targets_2_request_get =
	     CAN_FIRE_RL_ClientServerRequest_5 ;
  assign fabric$EN_v_to_targets_2_response_put =
	     CAN_FIRE_RL_ClientServerResponse_5 ;

  // submodule icache
  assign icache$req_addr = cpu$icache_cable_ifc_req_arg_addr ;
  assign icache$rxe_rsp_fabric_imem_first_deq_rdy_b =
	     f_rsp_fabric_imem$EMPTY_N ;
  assign icache$rxe_rsp_fabric_imem_first_x = f_rsp_fabric_imem$D_OUT ;
  assign icache$rxe_rsp_fabric_imem_notEmpty_b = f_rsp_fabric_imem$EMPTY_N ;
  assign icache$set_verbosity_verbosity = 32'h0 ;
  assign icache$txe_req_imem_fabric_enq_rdy_b = f_req_imem_fabric$FULL_N ;
  assign icache$txe_req_imem_fabric_notFull_b = f_req_imem_fabric$FULL_N ;
  assign icache$EN_set_verbosity = 1'b0 ;
  assign icache$EN_req_reset = MUX_rg_state$write_1__SEL_2 ;
  assign icache$EN_rsp_reset = MUX_rg_state$write_1__SEL_1 ;
  assign icache$EN_req = cpu$icache_cable_ifc_req_enabled ;

  // submodule mem_controller
  assign mem_controller$from_fabric_request_put =
	     fabric$v_to_targets_0_request_get ;
  assign mem_controller$to_raw_mem_response_put = to_raw_mem_response_put ;
  assign mem_controller$EN_server_reset_request_put =
	     MUX_rg_state$write_1__SEL_2 ;
  assign mem_controller$EN_server_reset_response_get =
	     MUX_rg_state$write_1__SEL_1 ;
  assign mem_controller$EN_from_fabric_request_put =
	     CAN_FIRE_RL_ClientServerRequest_3 ;
  assign mem_controller$EN_from_fabric_response_get =
	     CAN_FIRE_RL_ClientServerResponse_3 ;
  assign mem_controller$EN_to_raw_mem_request_get =
	     EN_to_raw_mem_request_get ;
  assign mem_controller$EN_to_raw_mem_response_put =
	     EN_to_raw_mem_response_put ;

  // submodule soc_controller
  assign soc_controller$server_control_request_put =
	     server_control_request_put ;
  assign soc_controller$to_fabric_response_put =
	     fabric$v_from_initiators_0_response_get ;
  assign soc_controller$EN_server_control_request_put =
	     EN_server_control_request_put ;
  assign soc_controller$EN_server_control_response_get =
	     EN_server_control_response_get ;
  assign soc_controller$EN_client_reset_request_get =
	     MUX_rg_state$write_1__SEL_2 ;
  assign soc_controller$EN_client_reset_response_put =
	     MUX_rg_state$write_1__SEL_1 ;
  assign soc_controller$EN_to_fabric_request_get =
	     CAN_FIRE_RL_ClientServerRequest ;
  assign soc_controller$EN_to_fabric_response_put =
	     CAN_FIRE_RL_ClientServerResponse ;
  assign soc_controller$EN_finished_get = soc_controller$RDY_finished_get ;

  // submodule uart
  assign uart$from_console_put = from_console_put ;
  assign uart$from_fabric_request_put = fabric$v_to_targets_2_request_get ;
  assign uart$EN_server_reset_request_put = MUX_rg_state$write_1__SEL_2 ;
  assign uart$EN_server_reset_response_get = MUX_rg_state$write_1__SEL_1 ;
  assign uart$EN_from_fabric_request_put = CAN_FIRE_RL_ClientServerRequest_5 ;
  assign uart$EN_from_fabric_response_get =
	     CAN_FIRE_RL_ClientServerResponse_5 ;
  assign uart$EN_to_console_get = EN_to_console_get ;
  assign uart$EN_from_console_put = EN_from_console_put ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_state = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	begin
	  v__h3480 = $stime;
	  #0;
	end
    v__h3474 = v__h3480 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("%0d: SoC_Top: resetting all sub-modules", v__h3474);
  end
  // synopsys translate_on
endmodule  // mkSoC_Top

