`timescale 1ns / 1ps
/***********************************************************************************************************************
*                                                                                                                      *
* ANTIKERNEL v0.1                                                                                                      *
*                                                                                                                      *
* Copyright (c) 2012-2016 Andrew D. Zonenberg                                                                          *
* All rights reserved.                                                                                                 *
*                                                                                                                      *
* Redistribution and use in source and binary forms, with or without modification, are permitted provided that the     *
* following conditions are met:                                                                                        *
*                                                                                                                      *
*    * Redistributions of source code must retain the above copyright notice, this list of conditions, and the         *
*      following disclaimer.                                                                                           *
*                                                                                                                      *
*    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the       *
*      following disclaimer in the documentation and/or other materials provided with the distribution.                *
*                                                                                                                      *
*    * Neither the name of the author nor the names of any contributors may be used to endorse or promote products     *
*      derived from this software without specific prior written permission.                                           *
*                                                                                                                      *
* THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED   *
* TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL *
* THE AUTHORS BE HELD LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES        *
* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR       *
* BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT *
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE       *
* POSSIBILITY OF SUCH DAMAGE.                                                                                          *
*                                                                                                                      *
***********************************************************************************************************************/

/**
	@file
	@author Andrew D. Zonenberg
	@brief Fixed-point sine/cosine table with RPC interface

	Useful for occasional trig function lookups, but was primarily created as a test fixture for SineWaveGenerator

	@module
	@opcodefile NetworkedSineWaveGenerator_opcodes.constants
	
	@rpcfn		TRIG_OP_SINCOS	
	@param		phase	d0[11:0]:dec		The phase
	@brief		Compute sine/cosine of a signal
 */
module NetworkedSineWaveGenerator(
	
	//Clocks
	clk,

	//NoC interface
	rpc_tx_en, rpc_tx_data, rpc_tx_ack, rpc_rx_en, rpc_rx_data, rpc_rx_ack
	);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// I/O declarations
	
	//Clocks
	input wire clk;

	//NoC interface
	output wire rpc_tx_en;
	output wire[31:0] rpc_tx_data;
	input wire[1:0] rpc_tx_ack;
	input wire rpc_rx_en;
	input wire[31:0] rpc_rx_data;
	output wire[1:0] rpc_rx_ack;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// NoC transceivers
	
	`include "RPCv2Router_type_constants.v"	//Pull in autogenerated constant table
	`include "RPCv2Router_ack_constants.v"
	
	parameter NOC_ADDR = 16'h0000;
	
	reg			rpc_fab_tx_en 		= 0;
	reg[15:0]	rpc_fab_tx_dst_addr	= 0;
	reg[7:0]	rpc_fab_tx_callnum	= 0;
	reg[2:0]	rpc_fab_tx_type		= 0;
	reg[20:0]	rpc_fab_tx_d0		= 0;
	reg[31:0]	rpc_fab_tx_d1		= 0;
	reg[31:0]	rpc_fab_tx_d2		= 0;
	wire		rpc_fab_tx_done;
	
	wire		rpc_fab_inbox_full;
	wire[15:0]	rpc_fab_rx_src_addr;
	wire[15:0]	rpc_fab_rx_dst_addr;
	wire[7:0]	rpc_fab_rx_callnum;
	wire[2:0]	rpc_fab_rx_type;
	wire[20:0]	rpc_fab_rx_d0;
	wire[31:0]	rpc_fab_rx_d1;
	wire[31:0]	rpc_fab_rx_d2;
	reg			rpc_fab_rx_done		= 0;
	
	RPCv2Transceiver #(
		.LEAF_PORT(1),
		.LEAF_ADDR(NOC_ADDR)
	) txvr(
		.clk(clk),
		
		.rpc_tx_en(rpc_tx_en),
		.rpc_tx_data(rpc_tx_data),
		.rpc_tx_ack(rpc_tx_ack),
		
		.rpc_rx_en(rpc_rx_en),
		.rpc_rx_data(rpc_rx_data),
		.rpc_rx_ack(rpc_rx_ack),
		
		.rpc_fab_tx_en(rpc_fab_tx_en),
		.rpc_fab_tx_src_addr(16'h0000),
		.rpc_fab_tx_dst_addr(rpc_fab_tx_dst_addr),
		.rpc_fab_tx_callnum(rpc_fab_tx_callnum),
		.rpc_fab_tx_type(rpc_fab_tx_type),
		.rpc_fab_tx_d0(rpc_fab_tx_d0),
		.rpc_fab_tx_d1(rpc_fab_tx_d1),
		.rpc_fab_tx_d2(rpc_fab_tx_d2),
		.rpc_fab_tx_done(rpc_fab_tx_done),
		
		.rpc_fab_inbox_full(rpc_fab_inbox_full),
		.rpc_fab_rx_en(),
		.rpc_fab_rx_src_addr(rpc_fab_rx_src_addr),
		.rpc_fab_rx_dst_addr(rpc_fab_rx_dst_addr),
		.rpc_fab_rx_callnum(rpc_fab_rx_callnum),
		.rpc_fab_rx_type(rpc_fab_rx_type),
		.rpc_fab_rx_d0(rpc_fab_rx_d0),
		.rpc_fab_rx_d1(rpc_fab_rx_d1),
		.rpc_fab_rx_d2(rpc_fab_rx_d2),
		.rpc_fab_rx_done(rpc_fab_rx_done)
		);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// The sine table
	
	reg			update	= 0;
	reg[11:0]	phase	= 0;
	wire[15:0]	sin_out;
	wire[15:0]	cos_out;
	
	SineWaveGenerator #(
		.PHASE_SIZE(1024),
		.FRAC_BITS(16)
	) sintable (
		.clk(clk),
		.update(update),
		.phase(phase),
		.sin_out(sin_out),
		.cos_out(cos_out)
	);
	
	//Keep track of latency
	reg			update_ff	= 0;
	reg			update_ff2	= 0;
	reg			update_ff3	= 0;
	reg			update_ff4	= 0;
	always @(posedge clk) begin
		update_ff		<= update;
		update_ff2		<= update_ff;
		update_ff3		<= update_ff2;
		update_ff4		<= update_ff3;
	end
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Main state machine
	
	`include "NetworkedSineWaveGenerator_opcodes_constants.v"
	
	localparam STATE_IDLE		= 4'h0;
	localparam STATE_RPC_TXHOLD	= 4'h1;
	localparam STATE_SIN_WAIT	= 4'h2;
	
	reg[3:0] state = STATE_IDLE;
	
	always @(posedge clk) begin
	
		rpc_fab_tx_en	<= 0;
		rpc_fab_rx_done <= 0;
		
		update			<= 0;
		phase			<= 0;
		
		case(state)
		
			//Wait for messages to show up
			STATE_IDLE: begin
			
				if(rpc_fab_inbox_full) begin
				
					//Clear inbox no matter what it is
					rpc_fab_rx_done		<= 1;
					
					//Save destination info
					rpc_fab_tx_dst_addr	<= rpc_fab_rx_src_addr;
					rpc_fab_tx_type		<= RPC_TYPE_RETURN_FAIL;
					rpc_fab_tx_d0		<= rpc_fab_rx_d0;
					rpc_fab_tx_d1		<= rpc_fab_rx_d1;
					rpc_fab_tx_d2		<= rpc_fab_rx_d2;
					rpc_fab_tx_callnum	<= rpc_fab_rx_callnum;
					
					//We have to respond to calls
					if(rpc_fab_rx_type == RPC_TYPE_CALL) begin
					
						//Process lookups
						if(rpc_fab_rx_callnum == TRIG_OP_SINCOS) begin
							update				<= 1;
							phase				<= rpc_fab_rx_d0[11:0];
							state				<= STATE_SIN_WAIT;
						end
						
						//Bad function, reject with failure
						else begin
							rpc_fab_tx_en		<= 1;
							state				<= STATE_RPC_TXHOLD;
						end
						
					end

				end
				
			end	//end STATE_IDLE
			
			STATE_SIN_WAIT: begin
			
				//TODO: Detect being done
				if(update_ff4) begin
					rpc_fab_tx_en		<= 1;
					rpc_fab_tx_type		<= RPC_TYPE_RETURN_SUCCESS;
					rpc_fab_tx_d0		<= 0;
					rpc_fab_tx_d1		<= sin_out;
					rpc_fab_tx_d2		<= cos_out;
					state				<= STATE_RPC_TXHOLD;
				end
			
			end
			
			//Wait for RPC transmits to finish
			STATE_RPC_TXHOLD: begin
				if(rpc_fab_tx_done) begin
					rpc_fab_rx_done <= 1;
					state <= STATE_IDLE;
				end
			end	//end STATE_RPC_TXHOLD

		endcase	
	end
	
endmodule
