// This program was cloned from: https://github.com/jiegec/fpu-wrappers
// License: MIT License

/* Generated by Yosys 0.13+37 (git sha1 675a7bd22, clang 11.0.1-2 -fPIC -Os) */

module IEEEFMA_S(clk, A, B, C, negateAB, negateC, RndMode, R);
  reg _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire [7:0] _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire [9:0] _091_;
  wire [9:0] _092_;
  wire [9:0] _093_;
  wire [9:0] _094_;
  wire [9:0] _095_;
  wire [9:0] _096_;
  wire [9:0] _097_;
  wire [9:0] _098_;
  wire [6:0] _099_;
  wire _100_;
  wire [6:0] _101_;
  wire [6:0] _102_;
  wire [99:0] _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  reg _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  wire _128_;
  wire _129_;
  wire [47:0] _130_;
  wire _131_;
  wire [76:0] _132_;
  wire [75:0] _133_;
  wire _134_;
  wire [76:0] _135_;
  wire [76:0] _136_;
  wire [76:0] _137_;
  wire _138_;
  wire _139_;
  wire _140_;
  wire _141_;
  wire _142_;
  wire [75:0] _143_;
  wire [5:0] _144_;
  wire _145_;
  wire [9:0] _146_;
  wire [9:0] _147_;
  wire _148_;
  wire _149_;
  wire _150_;
  wire _151_;
  wire _152_;
  wire _153_;
  wire _154_;
  wire _155_;
  wire _156_;
  wire _157_;
  wire _158_;
  wire _159_;
  wire _160_;
  wire _161_;
  wire [8:0] _162_;
  wire [6:0] _163_;
  wire _164_;
  wire _165_;
  wire [6:0] _166_;
  wire _167_;
  wire _168_;
  wire [6:0] _169_;
  wire [150:0] _170_;
  wire [9:0] _171_;
  wire [9:0] _172_;
  wire [9:0] _173_;
  wire [9:0] _174_;
  wire _175_;
  wire _176_;
  wire [9:0] _177_;
  wire _178_;
  wire [9:0] _179_;
  wire _180_;
  wire _181_;
  wire _182_;
  wire _183_;
  wire _184_;
  wire _185_;
  wire _186_;
  wire _187_;
  wire _188_;
  wire _189_;
  wire _190_;
  wire _191_;
  wire _192_;
  wire _193_;
  wire _194_;
  wire _195_;
  wire _196_;
  wire _197_;
  wire _198_;
  wire _199_;
  wire _200_;
  wire _201_;
  wire _202_;
  wire _203_;
  wire _204_;
  wire _205_;
  wire _206_;
  wire _207_;
  wire _208_;
  wire _209_;
  wire _210_;
  wire _211_;
  wire _212_;
  wire _213_;
  wire _214_;
  wire _215_;
  wire _216_;
  wire _217_;
  wire _218_;
  wire _219_;
  wire _220_;
  wire _221_;
  reg _222_;
  wire _223_;
  wire _224_;
  wire _225_;
  wire _226_;
  wire _227_;
  wire _228_;
  wire _229_;
  wire _230_;
  wire _231_;
  wire _232_;
  wire _233_;
  wire _234_;
  wire [1:0] _235_;
  wire _236_;
  wire [22:0] _237_;
  wire _238_;
  wire [22:0] _239_;
  wire _240_;
  wire _241_;
  wire _242_;
  wire _243_;
  wire _244_;
  wire _245_;
  wire _246_;
  wire _247_;
  wire _248_;
  wire _249_;
  wire _250_;
  wire _251_;
  wire _252_;
  wire _253_;
  wire _254_;
  wire _255_;
  wire _256_;
  wire _257_;
  wire [9:0] _258_;
  wire _259_;
  wire [9:0] _260_;
  wire _261_;
  wire [9:0] _262_;
  wire [9:0] _263_;
  wire [32:0] _264_;
  wire _265_;
  wire _266_;
  wire _267_;
  wire _268_;
  wire _269_;
  wire _270_;
  wire _271_;
  wire _272_;
  wire _273_;
  wire _274_;
  wire _275_;
  wire _276_;
  wire _277_;
  wire _278_;
  wire [31:0] _279_;
  wire [31:0] _280_;
  wire _281_;
  wire _282_;
  wire _283_;
  wire _284_;
  reg _285_;
  wire _286_;
  wire _287_;
  wire _288_;
  wire _289_;
  wire _290_;
  wire _291_;
  wire _292_;
  wire _293_;
  wire _294_;
  wire _295_;
  reg _296_;
  wire _297_;
  wire _298_;
  wire _299_;
  wire _300_;
  wire _301_;
  wire _302_;
  wire _303_;
  wire _304_;
  wire _305_;
  wire _306_;
  reg _307_;
  wire _308_;
  wire _309_;
  wire _310_;
  wire _311_;
  wire _312_;
  wire _313_;
  wire _314_;
  wire _315_;
  wire _316_;
  wire _317_;
  reg [9:0] _318_;
  wire _319_;
  wire _320_;
  wire _321_;
  wire _322_;
  wire _323_;
  wire _324_;
  wire _325_;
  wire _326_;
  wire _327_;
  wire _328_;
  reg [30:0] _329_;
  wire _330_;
  wire _331_;
  wire _332_;
  wire _333_;
  wire _334_;
  wire _335_;
  wire _336_;
  wire _337_;
  wire _338_;
  wire _339_;
  reg [30:0] _340_;
  wire _341_;
  wire _342_;
  wire _343_;
  wire _344_;
  wire [7:0] _345_;
  wire [7:0] _346_;
  wire [8:0] _347_;
  wire _348_;
  wire _349_;
  wire _350_;
  input [31:0] A;
  wire [31:0] A;
  input [31:0] B;
  wire [31:0] B;
  input [31:0] C;
  wire [31:0] C;
  output [31:0] R;
  wire [31:0] R;
  input [1:0] RndMode;
  wire [1:0] RndMode;
  wire [7:0] aexp;
  wire [7:0] aexpfield;
  wire [8:0] aexpplusbexp;
  wire ahasnonnullsig;
  wire aisinf;
  wire aisinfornan;
  wire aisnan;
  wire aisnormal;
  wire aiszero;
  wire asgn;
  wire [23:0] asig;
  wire [22:0] asigfield;
  wire [7:0] bexp;
  wire [7:0] bexpfield;
  wire bhasnonnullsig;
  wire [76:0] bigsum;
  wire [76:0] bigsum2;
  wire [75:0] bigsumabs;
  wire [51:0] bigsumabslowerbits;
  wire [150:0] bigsumnormd;
  wire bisinf;
  wire bisinfornan;
  wire bisnan;
  wire bisnormal;
  wire biszero;
  wire bsgn;
  wire [23:0] bsig;
  wire [22:0] bsigfield;
  wire [7:0] cexp;
  wire [7:0] cexpfield;
  wire chasnonnullsig;
  wire cisinf;
  wire cisinfornan;
  wire cisnan;
  wire cisnormal;
  wire ciszero;
  input clk;
  wire clk;
  wire csgn;
  wire [23:0] csig;
  wire [22:0] csigfield;
  wire [76:0] csiginverted;
  wire [99:0] csigshifted;
  wire [75:0] csigshiftedt;
  wire effectivesub;
  wire [9:0] expdiff;
  wire expdiffnotlarge;
  wire [9:0] expdiffprepare;
  wire expdiffsmall;
  wire expdiffverysmall;
  wire [9:0] exponentresult1;
  wire [9:0] exptentative;
  wire [9:0] exptentative_d1;
  wire [9:0] expupdate;
  wire finalrisinf;
  wire [1:0] fracleadingbits;
  wire [1:0] fracleadingbitsnormal;
  wire [22:0] fracresultnormd;
  wire fracresultroundbit;
  wire fracresultstickybit;
  wire [26:0] fractentative;
  wire [5:0] \ieeefma_8_23_f100_uid2leadingzerocounter:534 ;
  wire [30:0] inf;
  wire [30:0] inf_d1;
  wire [5:0] l;
  wire [30:0] nan;
  wire [30:0] nan_d1;
  input negateAB;
  wire negateAB;
  input negateC;
  wire negateC;
  wire [150:0] \normalizationshifter:598 ;
  wire [6:0] normshiftvalue;
  wire [47:0] p;
  wire [75:0] paligned;
  wire [32:0] resultbeforeround;
  wire [32:0] resultrounded;
  wire [99:0] \rightshiftercomponent:429 ;
  wire risnan;
  wire risnan_d1;
  wire rissubnormal;
  wire rissubnormal_d1;
  wire riszero;
  wire riszero_d1;
  wire round;
  wire roverflowed;
  wire rsgn;
  wire rsgn_d1;
  wire rsgntentative;
  wire [6:0] shiftvalue;
  wire [8:0] shiftvaluecasesubnormal;
  wire sticky1;
  wire sticky1_d1;
  wire sticky2;
  wire tentativerisinf;
  wire tentativerisinf_d1;
  wire [9:0] tmpexpcomp1;
  wire [9:0] tmpexpcomp2;
  wire [9:0] tmpexpcomp3;
  wire [9:0] tmpexpcompres1;
  wire [9:0] tmpexpcompres2;
  assign _291_ = _290_ | A[22];
  assign _292_ = ~ aisnormal;
  assign _293_ = ~ ahasnonnullsig;
  assign _294_ = _292_ & _293_;
  assign _295_ = ~ ahasnonnullsig;
  assign _297_ = aisinfornan & _295_;
  assign _298_ = aisinfornan & ahasnonnullsig;
  assign _299_ = B[23] | B[24];
  assign _300_ = _299_ | B[25];
  assign _301_ = _300_ | B[26];
  assign _302_ = _301_ | B[27];
  assign _303_ = _302_ | B[28];
  assign _304_ = _303_ | B[29];
  assign _305_ = _304_ | B[30];
  assign _306_ = B[23] & B[24];
  assign _308_ = _306_ & B[25];
  assign _309_ = _308_ & B[26];
  assign _310_ = _309_ & B[27];
  assign _311_ = _310_ & B[28];
  assign _312_ = _311_ & B[29];
  assign _313_ = _312_ & B[30];
  always @(posedge clk)
    _000_ <= risnan;
  assign _314_ = B[0] | B[1];
  assign _315_ = _314_ | B[2];
  assign _316_ = _315_ | B[3];
  assign _317_ = _316_ | B[4];
  always @(posedge clk)
    _111_ <= tentativerisinf;
  assign _319_ = _317_ | B[5];
  assign _320_ = _319_ | B[6];
  assign _321_ = _320_ | B[7];
  assign _322_ = _321_ | B[8];
  assign _323_ = _322_ | B[9];
  always @(posedge clk)
    _222_ <= sticky1;
  assign _324_ = _323_ | B[10];
  assign _325_ = _324_ | B[11];
  assign _326_ = _325_ | B[12];
  assign _327_ = _326_ | B[13];
  assign _328_ = _327_ | B[14];
  always @(posedge clk)
    _285_ <= rissubnormal;
  assign _330_ = _328_ | B[15];
  assign _331_ = _330_ | B[16];
  assign _332_ = _331_ | B[17];
  assign _333_ = _332_ | B[18];
  assign _334_ = _333_ | B[19];
  always @(posedge clk)
    _296_ <= riszero;
  assign _335_ = _334_ | B[20];
  assign _336_ = _335_ | B[21];
  assign _337_ = _336_ | B[22];
  assign _338_ = ~ bisnormal;
  assign _339_ = ~ bhasnonnullsig;
  assign _341_ = _338_ & _339_;
  assign _342_ = ~ bhasnonnullsig;
  assign _343_ = bisinfornan & _342_;
  always @(posedge clk)
    _307_ <= rsgn;
  assign _344_ = bisinfornan & bhasnonnullsig;
  assign _345_ = aexpfield - { 7'h3f, aisnormal };
  always @(posedge clk)
    _318_ <= exptentative;
  assign _346_ = bexpfield - { 7'h3f, bisnormal };
  always @(posedge clk)
    _329_ <= inf;
  assign _347_ = { aexp[7], aexp } + { bexp[7], bexp };
  always @(posedge clk)
    _340_ <= nan;
  assign _348_ = C[23] | C[24];
  assign _349_ = _348_ | C[25];
  assign _350_ = _349_ | C[26];
  assign _002_ = _350_ | C[27];
  assign _003_ = _002_ | C[28];
  assign _004_ = _003_ | C[29];
  assign _005_ = _004_ | C[30];
  assign _006_ = C[23] & C[24];
  assign _007_ = _006_ & C[25];
  assign _008_ = _007_ & C[26];
  assign _009_ = _008_ & C[27];
  assign _010_ = _009_ & C[28];
  assign _011_ = _010_ & C[29];
  assign _013_ = _011_ & C[30];
  assign _014_ = C[0] | C[1];
  assign _015_ = _014_ | C[2];
  assign _016_ = _015_ | C[3];
  assign _017_ = _016_ | C[4];
  assign _018_ = _017_ | C[5];
  assign _019_ = _018_ | C[6];
  assign _020_ = _019_ | C[7];
  assign _021_ = _020_ | C[8];
  assign _022_ = _021_ | C[9];
  assign _024_ = _022_ | C[10];
  assign _025_ = _024_ | C[11];
  assign _026_ = _025_ | C[12];
  assign _027_ = _026_ | C[13];
  assign _001_ = A[23] | A[24];
  assign _028_ = _027_ | C[14];
  assign _029_ = _028_ | C[15];
  assign _030_ = _029_ | C[16];
  assign _031_ = _030_ | C[17];
  assign _032_ = _031_ | C[18];
  assign _033_ = _032_ | C[19];
  assign _035_ = _033_ | C[20];
  assign _036_ = _035_ | C[21];
  assign _037_ = _036_ | C[22];
  assign _038_ = ~ cisnormal;
  assign _039_ = ~ chasnonnullsig;
  assign _040_ = _038_ & _039_;
  assign _012_ = _001_ | A[25];
  assign _041_ = ~ chasnonnullsig;
  assign _042_ = cisinfornan & _041_;
  assign _043_ = cisinfornan & chasnonnullsig;
  assign _044_ = aisnan | bisnan;
  assign _046_ = _044_ | cisnan;
  assign _047_ = aisinf | bisinf;
  assign _048_ = _047_ & cisinf;
  assign _049_ = asgn ^ bsgn;
  assign _050_ = _049_ ^ csgn;
  assign _051_ = _048_ & _050_;
  assign _052_ = _046_ | _051_;
  assign _053_ = biszero | bisnan;
  assign _054_ = ~ _053_;
  assign _055_ = aisinf & _054_;
  assign _057_ = aiszero | aisnan;
  assign _058_ = ~ _057_;
  assign _059_ = bisinf & _058_;
  assign _060_ = _055_ | _059_;
  assign _061_ = ~ cisnan;
  assign _062_ = _060_ & _061_;
  assign _023_ = _012_ | A[26];
  assign _063_ = asgn ^ bsgn;
  assign _064_ = _063_ ^ csgn;
  assign _065_ = ~ _064_;
  assign _066_ = cisinf & _065_;
  assign _068_ = ~ cisinf;
  assign _069_ = _066_ | _068_;
  assign _070_ = _062_ & _069_;
  assign _071_ = aisnan | bisnan;
  assign _072_ = ~ _071_;
  assign _073_ = cisinf & _072_;
  assign _074_ = aisinf | bisinf;
  assign _075_ = asgn ^ bsgn;
  assign _076_ = _075_ ^ csgn;
  assign _077_ = ~ _076_;
  assign _079_ = _074_ & _077_;
  assign _080_ = aisinf | bisinf;
  assign _081_ = ~ _080_;
  assign _082_ = _079_ | _081_;
  assign _083_ = _073_ & _082_;
  assign _084_ = _070_ | _083_;
  assign _034_ = _023_ | A[27];
  assign _085_ = cexpfield - { 7'h3f, cisnormal };
  assign _086_ = negateAB ^ asgn;
  assign _087_ = _086_ ^ bsgn;
  assign _088_ = negateC ^ csgn;
  assign _090_ = _087_ ^ _088_;
  assign _045_ = _034_ | A[28];
  assign _091_ = { 2'h0, aexpfield } + { 2'h0, bexpfield };
  assign _092_ = _091_ - { 9'h03f, aisnormal };
  assign _093_ = _092_ - { 9'h000, bisnormal };
  assign _056_ = _045_ | A[29];
  assign _094_ = { 2'h0, cexpfield } - expdiffprepare;
  assign _095_ = _094_ - { 9'h000, cisnormal };
  assign _096_ = expdiff + 10'h030;
  assign _067_ = _056_ | A[30];
  assign _097_ = expdiff - 10'h003;
  assign _098_ = expdiff - 10'h01b;
  assign _099_ = expdiffverysmall ? 7'h4c : _102_;
  assign _101_ = 7'h1b - expdiff[6:0];
  assign _102_ = expdiffnotlarge ? _101_ : 7'h00;
  assign _078_ = A[23] & A[24];
  assign _104_ = csigshifted[0] | csigshifted[1];
  assign _105_ = _104_ | csigshifted[2];
  assign _106_ = _105_ | csigshifted[3];
  assign _107_ = _106_ | csigshifted[4];
  assign _108_ = _107_ | csigshifted[5];
  assign _109_ = _108_ | csigshifted[6];
  assign _110_ = _109_ | csigshifted[7];
  assign _113_ = _110_ | csigshifted[8];
  assign _089_ = _078_ & A[25];
  assign _114_ = _113_ | csigshifted[9];
  assign _115_ = _114_ | csigshifted[10];
  assign _116_ = _115_ | csigshifted[11];
  assign _117_ = _116_ | csigshifted[12];
  assign _118_ = _117_ | csigshifted[13];
  assign _119_ = _118_ | csigshifted[14];
  assign _120_ = _119_ | csigshifted[15];
  assign _121_ = _120_ | csigshifted[16];
  assign _122_ = _121_ | csigshifted[17];
  assign _124_ = _122_ | csigshifted[18];
  assign _100_ = _089_ & A[26];
  assign _125_ = _124_ | csigshifted[19];
  assign _126_ = _125_ | csigshifted[20];
  assign _127_ = _126_ | csigshifted[21];
  assign _128_ = _127_ | csigshifted[22];
  assign _129_ = _128_ | csigshifted[23];
  assign _130_ = $signed({ 24'h000000, asig }) * $signed({ 24'h000000, bsig });
  assign _112_ = _100_ & A[27];
  assign _131_ = ~ effectivesub;
  assign _132_ = _131_ ? { 1'h0, csigshiftedt } : { 1'h1, _133_ };
  assign _133_ = ~ csigshiftedt;
  assign _135_ = csiginverted + { 1'h0, paligned };
  assign _123_ = _112_ & A[28];
  assign _136_ = _135_ + { 76'h0000000000000000000, effectivesub };
  assign _137_ = { 1'h0, csigshiftedt } - { 1'h0, paligned };
  assign _138_ = asgn ^ bsgn;
  assign _139_ = _138_ ^ negateAB;
  assign _140_ = _139_ ^ bigsum[76];
  assign _141_ = ~ effectivesub;
  assign _134_ = _123_ & A[29];
  assign _142_ = bigsum2[76] | _141_;
  assign _143_ = _142_ ? bigsum[75:0] : bigsum2[75:0];
  assign _146_ = { aexpplusbexp[8], aexpplusbexp } + 10'h081;
  assign _145_ = _134_ & A[30];
  assign _147_ = tmpexpcompres1 - { 4'h0, l };
  assign _148_ = ~ cisnormal;
  assign _149_ = expdiffsmall | _148_;
  assign _150_ = _149_ & tmpexpcompres2[9];
  assign _151_ = l == 6'h34;
  assign _152_ = _151_ ? expdiffsmall : 1'h0;
  assign _153_ = asgn ^ bsgn;
  assign _154_ = _153_ ^ negateAB;
  assign _155_ = csgn ^ negateC;
  assign _157_ = _154_ & _155_;
  assign _158_ = aiszero | biszero;
  assign _159_ = _158_ & ciszero;
  assign _160_ = _159_ ? _157_ : _161_;
  assign _161_ = riszero ? 1'h0 : rsgntentative;
  assign _156_ = A[0] | A[1];
  assign _162_ = aexpplusbexp + 9'h099;
  assign _163_ = { 1'h0, l } + 7'h19;
  assign _164_ = ~ rissubnormal;
  assign _165_ = expdiffsmall & _164_;
  assign _166_ = _165_ ? _163_ : _169_;
  assign _168_ = expdiffsmall & rissubnormal;
  assign _169_ = _168_ ? shiftvaluecasesubnormal[6:0] : shiftvalue;
  assign _167_ = _156_ | A[2];
  assign _171_ = riszero ? 10'h383 : _172_;
  assign _172_ = rissubnormal ? 10'h382 : _177_;
  assign _173_ = { aexpplusbexp[8], aexpplusbexp } - { 4'h0, l };
  assign _178_ = _167_ | A[3];
  assign _174_ = _173_ + 10'h003;
  assign _175_ = ~ rissubnormal;
  assign _176_ = expdiffsmall & _175_;
  assign _177_ = _176_ ? _174_ : _179_;
  assign _179_ = { cexp[7], cexp[7], cexp } + 10'h001;
  assign _180_ = bigsumnormd[0] | bigsumnormd[1];
  assign _189_ = _178_ | A[4];
  assign _181_ = _180_ | bigsumnormd[2];
  assign _182_ = _181_ | bigsumnormd[3];
  assign _183_ = _182_ | bigsumnormd[4];
  assign _184_ = _183_ | bigsumnormd[5];
  assign _185_ = _184_ | bigsumnormd[6];
  assign _186_ = _185_ | bigsumnormd[7];
  assign _187_ = _186_ | bigsumnormd[8];
  assign _188_ = _187_ | bigsumnormd[9];
  assign _190_ = _188_ | bigsumnormd[10];
  assign _191_ = _190_ | bigsumnormd[11];
  assign _200_ = _189_ | A[5];
  assign _192_ = _191_ | bigsumnormd[12];
  assign _193_ = _192_ | bigsumnormd[13];
  assign _194_ = _193_ | bigsumnormd[14];
  assign _195_ = _194_ | bigsumnormd[15];
  assign _196_ = _195_ | bigsumnormd[16];
  assign _197_ = _196_ | bigsumnormd[17];
  assign _198_ = _197_ | bigsumnormd[18];
  assign _199_ = _198_ | bigsumnormd[19];
  assign _201_ = _199_ | bigsumnormd[20];
  assign _202_ = _201_ | bigsumnormd[21];
  assign _211_ = _200_ | A[6];
  assign _203_ = _202_ | bigsumnormd[22];
  assign _204_ = _203_ | bigsumnormd[23];
  assign _205_ = _204_ | bigsumnormd[24];
  assign _206_ = _205_ | bigsumnormd[25];
  assign _207_ = _206_ | bigsumnormd[26];
  assign _208_ = _207_ | bigsumnormd[27];
  assign _209_ = _208_ | bigsumnormd[28];
  assign _210_ = _209_ | bigsumnormd[29];
  assign _212_ = _210_ | bigsumnormd[30];
  assign _213_ = _212_ | bigsumnormd[31];
  assign _223_ = _211_ | A[7];
  assign _214_ = _213_ | bigsumnormd[32];
  assign _215_ = _214_ | bigsumnormd[33];
  assign _216_ = _215_ | bigsumnormd[34];
  assign _217_ = _216_ | bigsumnormd[35];
  assign _218_ = _217_ | bigsumnormd[36];
  assign _219_ = _218_ | bigsumnormd[37];
  assign _220_ = _219_ | bigsumnormd[38];
  assign _221_ = _220_ | bigsumnormd[39];
  assign _224_ = _221_ | bigsumnormd[40];
  assign _225_ = _224_ | bigsumnormd[41];
  assign _234_ = _223_ | A[8];
  assign _226_ = _225_ | bigsumnormd[42];
  assign _227_ = _226_ | bigsumnormd[43];
  assign _228_ = _227_ | bigsumnormd[44];
  assign _229_ = _228_ | bigsumnormd[45];
  assign _230_ = _229_ | bigsumnormd[46];
  assign _231_ = _230_ | bigsumnormd[47];
  assign _232_ = _231_ | bigsumnormd[48];
  assign _233_ = _232_ | bigsumnormd[49];
  assign _235_ = rissubnormal_d1 ? 2'h1 : fracleadingbitsnormal;
  assign _245_ = _234_ | A[9];
  assign _236_ = fracleadingbits == 2'h0;
  assign _237_ = _236_ ? fractentative[23:1] : _239_;
  assign _238_ = fracleadingbits == 2'h1;
  assign _239_ = _238_ ? fractentative[24:2] : fractentative[25:3];
  assign _256_ = _245_ | A[10];
  assign _240_ = fracleadingbits == 2'h0;
  assign _241_ = _240_ ? fractentative[0] : _243_;
  assign _242_ = fracleadingbits == 2'h1;
  assign _243_ = _242_ ? fractentative[1] : fractentative[2];
  assign _244_ = sticky1_d1 | sticky2;
  assign _267_ = _256_ | A[11];
  assign _246_ = fracleadingbits == 2'h0;
  assign _247_ = _246_ ? _244_ : _251_;
  assign _248_ = fractentative[0] | sticky1_d1;
  assign _249_ = _248_ | sticky2;
  assign _250_ = fracleadingbits == 2'h1;
  assign _251_ = _250_ ? _249_ : _254_;
  assign _252_ = fractentative[1] | fractentative[0];
  assign _278_ = _267_ | A[12];
  assign _253_ = _252_ | sticky1_d1;
  assign _254_ = _253_ | sticky2;
  assign _255_ = fracresultstickybit | fracresultnormd[0];
  assign _257_ = fracresultroundbit & _255_;
  assign _258_ = riszero_d1 ? 10'h07d : _260_;
  assign _259_ = fracleadingbits == 2'h0;
  assign _260_ = _259_ ? 10'h07d : _262_;
  assign _281_ = _278_ | A[13];
  assign _261_ = fracleadingbits == 2'h1;
  assign _262_ = _261_ ? 10'h07e : 10'h07f;
  assign _263_ = exptentative_d1 + expupdate;
  assign _282_ = _281_ | A[14];
  assign _264_ = resultbeforeround + { 32'h00000000, round };
  assign _265_ = resultrounded[32] | resultrounded[31];
  assign _266_ = resultrounded[30] & resultrounded[29];
  assign _268_ = _266_ & resultrounded[28];
  assign _269_ = _268_ & resultrounded[27];
  assign _270_ = _269_ & resultrounded[26];
  assign _271_ = _270_ & resultrounded[25];
  assign _272_ = _271_ & resultrounded[24];
  assign _273_ = _272_ & resultrounded[23];
  assign _274_ = _265_ | _273_;
  assign _283_ = _282_ | A[15];
  assign _275_ = tentativerisinf_d1 | roverflowed;
  assign _276_ = ~ risnan_d1;
  assign _277_ = _276_ & finalrisinf;
  assign _279_ = _277_ ? { rsgn_d1, inf_d1 } : _280_;
  assign _280_ = risnan_d1 ? { 1'h0, nan_d1 } : { rsgn_d1, resultrounded[30:0] };
  assign _284_ = _283_ | A[16];
  assign _286_ = _284_ | A[17];
  assign _287_ = _286_ | A[18];
  assign _288_ = _287_ | A[19];
  assign _289_ = _288_ | A[20];
  assign _290_ = _289_ | A[21];
  lzc_52_f100_uid6 ieeefma_8_23_f100_uid2leadingzerocounter (
    .clk(clk),
    .i(bigsumabslowerbits),
    .o(_144_)
  );
  leftshifter76_by_max_75_f100_uid8 normalizationshifter (
    .clk(clk),
    .r(_170_),
    .s(normshiftvalue),
    .x(bigsumabs)
  );
  rightshifter24_by_max_76_f100_uid4 rightshiftercomponent (
    .clk(clk),
    .r(_103_),
    .s(shiftvalue),
    .x(csig)
  );
  assign asgn = A[31];
  assign aexpfield = A[30:23];
  assign asigfield = A[22:0];
  assign aisnormal = _067_;
  assign aisinfornan = _145_;
  assign ahasnonnullsig = _291_;
  assign aiszero = _294_;
  assign aisinf = _297_;
  assign aisnan = _298_;
  assign bsgn = B[31];
  assign bexpfield = B[30:23];
  assign bsigfield = B[22:0];
  assign bisnormal = _305_;
  assign bisinfornan = _313_;
  assign bhasnonnullsig = _337_;
  assign biszero = _341_;
  assign bisinf = _343_;
  assign bisnan = _344_;
  assign aexp = _345_;
  assign bexp = _346_;
  assign asig = { aisnormal, asigfield };
  assign bsig = { bisnormal, bsigfield };
  assign aexpplusbexp = _347_;
  assign csgn = C[31];
  assign cexpfield = C[30:23];
  assign csigfield = C[22:0];
  assign cisnormal = _005_;
  assign cisinfornan = _013_;
  assign chasnonnullsig = _037_;
  assign ciszero = _040_;
  assign cisinf = _042_;
  assign cisnan = _043_;
  assign risnan = _052_;
  assign risnan_d1 = _000_;
  assign tentativerisinf = _084_;
  assign tentativerisinf_d1 = _111_;
  assign cexp = _085_;
  assign effectivesub = _090_;
  assign csig = { cisnormal, csigfield };
  assign expdiffprepare = _093_;
  assign expdiff = _095_;
  assign tmpexpcomp1 = _096_;
  assign expdiffverysmall = tmpexpcomp1[9];
  assign tmpexpcomp2 = _097_;
  assign expdiffsmall = tmpexpcomp2[9];
  assign tmpexpcomp3 = _098_;
  assign expdiffnotlarge = tmpexpcomp3[9];
  assign shiftvalue = _099_;
  assign csigshifted = \rightshiftercomponent:429 ;
  assign sticky1 = _129_;
  assign sticky1_d1 = _222_;
  assign csigshiftedt = csigshifted[99:24];
  assign p = _130_;
  assign paligned = { 26'h0000000, p, 2'h0 };
  assign csiginverted = _132_;
  assign bigsum = _136_;
  assign bigsum2 = _137_;
  assign rsgntentative = _140_;
  assign bigsumabs = _143_;
  assign bigsumabslowerbits = bigsumabs[51:0];
  assign l = \ieeefma_8_23_f100_uid2leadingzerocounter:534 ;
  assign tmpexpcompres1 = _146_;
  assign tmpexpcompres2 = _147_;
  assign rissubnormal = _150_;
  assign rissubnormal_d1 = _285_;
  assign riszero = _152_;
  assign riszero_d1 = _296_;
  assign rsgn = _160_;
  assign rsgn_d1 = _307_;
  assign shiftvaluecasesubnormal = _162_;
  assign normshiftvalue = _166_;
  assign bigsumnormd = \normalizationshifter:598 ;
  assign exptentative = _171_;
  assign exptentative_d1 = _318_;
  assign sticky2 = _233_;
  assign fractentative = bigsumnormd[76:50];
  assign fracleadingbitsnormal = fractentative[26:25];
  assign fracleadingbits = _235_;
  assign fracresultnormd = _237_;
  assign fracresultroundbit = _241_;
  assign fracresultstickybit = _247_;
  assign round = _257_;
  assign expupdate = _258_;
  assign exponentresult1 = _263_;
  assign resultbeforeround = { exponentresult1, fracresultnormd };
  assign resultrounded = _264_;
  assign roverflowed = _274_;
  assign finalrisinf = _275_;
  assign inf = 31'h7f800000;
  assign inf_d1 = _329_;
  assign nan = 31'h7fffffff;
  assign nan_d1 = _340_;
  assign \rightshiftercomponent:429  = _103_;
  assign \ieeefma_8_23_f100_uid2leadingzerocounter:534  = _144_;
  assign \normalizationshifter:598  = _170_;
  assign R = _279_;
endmodule

module leftshifter76_by_max_75_f100_uid8(clk, x, s, r);
  reg [6:0] _0_;
  reg [76:0] _1_;
  wire [76:0] _2_;
  wire [78:0] _3_;
  wire [82:0] _4_;
  wire [90:0] _5_;
  wire [106:0] _6_;
  wire [138:0] _7_;
  wire [202:0] _8_;
  input clk;
  wire clk;
  wire [75:0] level0;
  wire [76:0] level1;
  wire [76:0] level1_d1;
  wire [78:0] level2;
  wire [82:0] level3;
  wire [90:0] level4;
  wire [106:0] level5;
  wire [138:0] level6;
  wire [202:0] level7;
  wire [6:0] ps;
  wire [6:0] ps_d1;
  output [150:0] r;
  wire [150:0] r;
  input [6:0] s;
  wire [6:0] s;
  input [75:0] x;
  wire [75:0] x;
  always @(posedge clk)
    _0_ <= ps;
  always @(posedge clk)
    _1_ <= level1;
  assign _2_ = ps[0] ? { level0, 1'h0 } : { 1'h0, level0 };
  assign _3_ = ps_d1[1] ? { level1_d1, 2'h0 } : { 2'h0, level1_d1 };
  assign _4_ = ps_d1[2] ? { level2, 4'h0 } : { 4'h0, level2 };
  assign _5_ = ps_d1[3] ? { level3, 8'h00 } : { 8'h00, level3 };
  assign _6_ = ps_d1[4] ? { level4, 16'h0000 } : { 16'h0000, level4 };
  assign _7_ = ps_d1[5] ? { level5, 32'h00000000 } : { 32'h00000000, level5 };
  assign _8_ = ps_d1[6] ? { level6, 64'h0000000000000000 } : { 64'h0000000000000000, level6 };
  assign ps = s;
  assign ps_d1 = _0_;
  assign level0 = x;
  assign level1 = _2_;
  assign level1_d1 = _1_;
  assign level2 = _3_;
  assign level3 = _4_;
  assign level4 = _5_;
  assign level5 = _6_;
  assign level6 = _7_;
  assign level7 = _8_;
  assign r = level7[150:0];
endmodule

module lzc_52_f100_uid6(clk, i, o);
  wire _00_;
  wire _01_;
  wire [30:0] _02_;
  wire _03_;
  wire _04_;
  wire [14:0] _05_;
  wire _06_;
  wire _07_;
  wire [6:0] _08_;
  wire _09_;
  wire _10_;
  wire [2:0] _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire [1:0] _16_;
  input clk;
  wire clk;
  wire digit2;
  wire digit3;
  wire digit4;
  wire digit5;
  input [51:0] i;
  wire [51:0] i;
  wire [2:0] level2;
  wire [6:0] level3;
  wire [14:0] level4;
  wire [30:0] level5;
  wire [62:0] level6;
  wire [1:0] lowbits;
  output [5:0] o;
  wire [5:0] o;
  wire [3:0] outhighbits;
  assign _00_ = level6[62:31] == 32'd0;
  assign _01_ = _00_ ? 1'h1 : 1'h0;
  assign _02_ = digit5 ? level6[30:0] : level6[62:32];
  assign _03_ = level5[30:15] == 16'h0000;
  assign _04_ = _03_ ? 1'h1 : 1'h0;
  assign _05_ = digit4 ? level5[14:0] : level5[30:16];
  assign _06_ = level4[14:7] == 8'h00;
  assign _07_ = _06_ ? 1'h1 : 1'h0;
  assign _08_ = digit3 ? level4[6:0] : level4[14:8];
  assign _09_ = level3[6:3] == 4'h0;
  assign _10_ = _09_ ? 1'h1 : 1'h0;
  assign _11_ = digit2 ? level3[2:0] : level3[6:4];
  assign _12_ = level2 == 3'h0;
  assign _13_ = level2 == 3'h1;
  assign _14_ = level2 == 3'h2;
  assign _15_ = level2 == 3'h3;
  function [1:0] \989 ;
    input [1:0] a;
    input [7:0] b;
    input [3:0] s;
    (* parallel_case *)
    casez (s)
      4'b???1:
        \989  = b[1:0];
      4'b??1?:
        \989  = b[3:2];
      4'b?1??:
        \989  = b[5:4];
      4'b1???:
        \989  = b[7:6];
      default:
        \989  = a;
    endcase
  endfunction
  assign _16_ = \989 (2'h0, 8'h5b, { _15_, _14_, _13_, _12_ });
  assign level6 = { i, 11'h7ff };
  assign digit5 = _01_;
  assign level5 = _02_;
  assign digit4 = _04_;
  assign level4 = _05_;
  assign digit3 = _07_;
  assign level3 = _08_;
  assign digit2 = _10_;
  assign level2 = _11_;
  assign lowbits = _16_;
  assign outhighbits = { digit5, digit4, digit3, digit2 };
  assign o = { outhighbits, lowbits };
endmodule

module rightshifter24_by_max_76_f100_uid4(clk, x, s, r);
  wire [24:0] _0_;
  wire [26:0] _1_;
  wire [30:0] _2_;
  wire [38:0] _3_;
  wire [54:0] _4_;
  wire [86:0] _5_;
  wire [150:0] _6_;
  input clk;
  wire clk;
  wire [23:0] level0;
  wire [24:0] level1;
  wire [26:0] level2;
  wire [30:0] level3;
  wire [38:0] level4;
  wire [54:0] level5;
  wire [86:0] level6;
  wire [150:0] level7;
  wire [6:0] ps;
  output [99:0] r;
  wire [99:0] r;
  input [6:0] s;
  wire [6:0] s;
  input [23:0] x;
  wire [23:0] x;
  assign _0_ = ps[0] ? { 1'h0, level0 } : { level0, 1'h0 };
  assign _1_ = ps[1] ? { 2'h0, level1 } : { level1, 2'h0 };
  assign _2_ = ps[2] ? { 4'h0, level2 } : { level2, 4'h0 };
  assign _3_ = ps[3] ? { 8'h00, level3 } : { level3, 8'h00 };
  assign _4_ = ps[4] ? { 16'h0000, level4 } : { level4, 16'h0000 };
  assign _5_ = ps[5] ? { 32'h00000000, level5 } : { level5, 32'h00000000 };
  assign _6_ = ps[6] ? { 64'h0000000000000000, level6 } : { level6, 64'h0000000000000000 };
  assign ps = s;
  assign level0 = x;
  assign level1 = _0_;
  assign level2 = _1_;
  assign level3 = _2_;
  assign level4 = _3_;
  assign level5 = _4_;
  assign level6 = _5_;
  assign level7 = _6_;
  assign r = level7[150:51];
endmodule
