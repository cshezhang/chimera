// This program was cloned from: https://github.com/jiegec/fpu-wrappers
// License: MIT License

/* Generated by Yosys 0.13+37 (git sha1 675a7bd22, clang 11.0.1-2 -fPIC -Os) */

module IEEEFMA_S(clk, A, B, C, negateAB, negateC, RndMode, R);
  reg _000_;
  reg [8:0] _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  reg _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  reg _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  reg _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  reg _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire [7:0] _051_;
  wire [7:0] _052_;
  wire [8:0] _053_;
  wire _054_;
  wire _055_;
  reg _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  reg _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  reg _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  reg _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  reg _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  reg _111_;
  reg _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  reg _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  wire _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  wire _133_;
  reg _134_;
  wire _135_;
  wire _136_;
  wire _137_;
  wire _138_;
  wire _139_;
  wire _140_;
  wire _141_;
  wire [7:0] _142_;
  wire _143_;
  wire _144_;
  reg _145_;
  wire _146_;
  wire _147_;
  wire [9:0] _148_;
  wire [9:0] _149_;
  wire [9:0] _150_;
  wire [9:0] _151_;
  wire [9:0] _152_;
  wire [9:0] _153_;
  wire [9:0] _154_;
  wire [9:0] _155_;
  reg _156_;
  wire [6:0] _157_;
  wire [6:0] _158_;
  wire [6:0] _159_;
  wire [99:0] _160_;
  wire _161_;
  wire _162_;
  wire _163_;
  wire _164_;
  wire _165_;
  wire _166_;
  reg [7:0] _167_;
  wire _168_;
  wire _169_;
  wire _170_;
  wire _171_;
  wire _172_;
  wire _173_;
  wire _174_;
  wire _175_;
  wire _176_;
  wire _177_;
  reg [7:0] _178_;
  wire _179_;
  wire _180_;
  wire _181_;
  wire _182_;
  wire _183_;
  wire _184_;
  wire _185_;
  wire [47:0] _186_;
  wire _187_;
  wire [76:0] _188_;
  reg _189_;
  wire [75:0] _190_;
  wire [76:0] _191_;
  wire [76:0] _192_;
  wire [76:0] _193_;
  wire _194_;
  wire _195_;
  wire _196_;
  wire _197_;
  wire _198_;
  wire [75:0] _199_;
  reg _200_;
  wire [5:0] _201_;
  wire [9:0] _202_;
  wire [9:0] _203_;
  wire _204_;
  wire _205_;
  wire _206_;
  wire _207_;
  wire _208_;
  wire _209_;
  wire _210_;
  reg _211_;
  wire _212_;
  wire _213_;
  wire _214_;
  wire _215_;
  wire _216_;
  wire _217_;
  wire [8:0] _218_;
  wire [6:0] _219_;
  wire _220_;
  wire _221_;
  reg _222_;
  reg [6:0] _223_;
  wire [6:0] _224_;
  wire _225_;
  wire [6:0] _226_;
  wire [150:0] _227_;
  wire [9:0] _228_;
  wire [9:0] _229_;
  wire [9:0] _230_;
  wire [9:0] _231_;
  wire _232_;
  wire _233_;
  reg [6:0] _234_;
  wire [9:0] _235_;
  wire [9:0] _236_;
  wire _237_;
  wire _238_;
  wire _239_;
  wire _240_;
  wire _241_;
  wire _242_;
  wire _243_;
  wire _244_;
  reg _245_;
  wire _246_;
  wire _247_;
  wire _248_;
  wire _249_;
  wire _250_;
  wire _251_;
  wire _252_;
  wire _253_;
  wire _254_;
  wire _255_;
  reg _256_;
  wire _257_;
  wire _258_;
  wire _259_;
  wire _260_;
  wire _261_;
  wire _262_;
  wire _263_;
  wire _264_;
  wire _265_;
  wire _266_;
  reg _267_;
  wire _268_;
  wire _269_;
  wire _270_;
  wire _271_;
  wire _272_;
  wire _273_;
  wire _274_;
  wire _275_;
  wire _276_;
  wire _277_;
  reg [75:0] _278_;
  wire _279_;
  wire _280_;
  wire _281_;
  wire _282_;
  wire _283_;
  wire _284_;
  wire _285_;
  wire _286_;
  wire _287_;
  wire _288_;
  reg _289_;
  wire _290_;
  wire [1:0] _291_;
  wire _292_;
  wire [22:0] _293_;
  wire _294_;
  wire [22:0] _295_;
  wire _296_;
  wire _297_;
  wire _298_;
  wire _299_;
  reg [9:0] _300_;
  wire _301_;
  wire _302_;
  wire _303_;
  wire _304_;
  wire _305_;
  wire _306_;
  wire _307_;
  wire _308_;
  wire _309_;
  wire _310_;
  reg [9:0] _311_;
  wire _312_;
  wire _313_;
  wire [9:0] _314_;
  wire _315_;
  wire [9:0] _316_;
  wire _317_;
  wire [9:0] _318_;
  wire [9:0] _319_;
  wire [32:0] _320_;
  wire _321_;
  reg _322_;
  wire _323_;
  wire _324_;
  wire _325_;
  wire _326_;
  wire _327_;
  wire _328_;
  wire _329_;
  wire _330_;
  wire _331_;
  wire _332_;
  reg _333_;
  reg _334_;
  wire _335_;
  wire [31:0] _336_;
  wire [31:0] _337_;
  reg _338_;
  reg _339_;
  reg _340_;
  reg _341_;
  reg [8:0] _342_;
  reg [8:0] _343_;
  reg [9:0] _344_;
  reg [9:0] _345_;
  reg [30:0] _346_;
  reg _347_;
  reg [30:0] _348_;
  reg [30:0] _349_;
  reg [30:0] _350_;
  reg [30:0] _351_;
  reg [30:0] _352_;
  reg [30:0] _353_;
  reg [30:0] _354_;
  reg _355_;
  reg _356_;
  reg _357_;
  reg _358_;
  reg _359_;
  wire _360_;
  wire _361_;
  wire _362_;
  wire _363_;
  wire _364_;
  wire _365_;
  wire _366_;
  wire _367_;
  wire _368_;
  reg _369_;
  wire _370_;
  wire _371_;
  wire _372_;
  wire _373_;
  wire _374_;
  wire _375_;
  wire _376_;
  wire _377_;
  wire _378_;
  wire _379_;
  reg _380_;
  wire _381_;
  wire _382_;
  wire _383_;
  wire _384_;
  wire _385_;
  wire _386_;
  wire _387_;
  wire _388_;
  wire _389_;
  wire _390_;
  reg [8:0] _391_;
  wire _392_;
  wire _393_;
  wire _394_;
  wire _395_;
  wire _396_;
  wire _397_;
  wire _398_;
  wire _399_;
  wire _400_;
  wire _401_;
  input [31:0] A;
  wire [31:0] A;
  input [31:0] B;
  wire [31:0] B;
  input [31:0] C;
  wire [31:0] C;
  output [31:0] R;
  wire [31:0] R;
  input [1:0] RndMode;
  wire [1:0] RndMode;
  wire [7:0] aexp;
  wire [7:0] aexpfield;
  wire [8:0] aexpplusbexp;
  wire [8:0] aexpplusbexp_d1;
  wire [8:0] aexpplusbexp_d2;
  wire ahasnonnullsig;
  wire aisinf;
  wire aisinfornan;
  wire aisnan;
  wire aisnormal;
  wire aiszero;
  wire aiszero_d1;
  wire aiszero_d2;
  wire asgn;
  wire asgn_d1;
  wire asgn_d2;
  wire [23:0] asig;
  wire [22:0] asigfield;
  wire [7:0] bexp;
  wire [7:0] bexpfield;
  wire bhasnonnullsig;
  wire [76:0] bigsum;
  wire [76:0] bigsum2;
  wire [75:0] bigsumabs;
  wire [51:0] bigsumabslowerbits;
  wire [150:0] bigsumnormd;
  wire bisinf;
  wire bisinfornan;
  wire bisnan;
  wire bisnormal;
  wire biszero;
  wire biszero_d1;
  wire biszero_d2;
  wire bsgn;
  wire bsgn_d1;
  wire bsgn_d2;
  wire [23:0] bsig;
  wire [22:0] bsigfield;
  wire [7:0] cexp;
  wire [7:0] cexp_d1;
  wire [7:0] cexp_d2;
  wire [7:0] cexpfield;
  wire chasnonnullsig;
  wire cisinf;
  wire cisinfornan;
  wire cisnan;
  wire cisnormal;
  wire cisnormal_d1;
  wire cisnormal_d2;
  wire ciszero;
  wire ciszero_d1;
  wire ciszero_d2;
  input clk;
  wire clk;
  wire csgn;
  wire csgn_d1;
  wire csgn_d2;
  wire [23:0] csig;
  wire [22:0] csigfield;
  wire [76:0] csiginverted;
  wire [99:0] csigshifted;
  wire [75:0] csigshiftedt;
  wire effectivesub;
  wire effectivesub_d1;
  wire [9:0] expdiff;
  wire expdiffnotlarge;
  wire [9:0] expdiffprepare;
  wire expdiffsmall;
  wire expdiffsmall_d1;
  wire expdiffsmall_d2;
  wire expdiffverysmall;
  wire [9:0] exponentresult1;
  wire [9:0] exptentative;
  wire [9:0] exptentative_d1;
  wire [9:0] exptentative_d2;
  wire [9:0] expupdate;
  wire finalrisinf;
  wire [1:0] fracleadingbits;
  wire [1:0] fracleadingbitsnormal;
  wire [22:0] fracresultnormd;
  wire fracresultroundbit;
  wire fracresultstickybit;
  wire [26:0] fractentative;
  wire [5:0] \ieeefma_8_23_f300_uid2leadingzerocounter:636 ;
  wire [30:0] inf;
  wire [30:0] inf_d1;
  wire [30:0] inf_d2;
  wire [30:0] inf_d3;
  wire [30:0] inf_d4;
  wire [5:0] l;
  wire [30:0] nan;
  wire [30:0] nan_d1;
  wire [30:0] nan_d2;
  wire [30:0] nan_d3;
  wire [30:0] nan_d4;
  input negateAB;
  wire negateAB;
  input negateC;
  wire negateC;
  wire negateab_d1;
  wire negateab_d2;
  wire negatec_d1;
  wire negatec_d2;
  wire [150:0] \normalizationshifter:700 ;
  wire [6:0] normshiftvalue;
  wire [47:0] p;
  wire [75:0] paligned;
  wire [75:0] paligned_d1;
  wire [32:0] resultbeforeround;
  wire [32:0] resultrounded;
  wire [99:0] \rightshiftercomponent:531 ;
  wire risnan;
  wire risnan_d1;
  wire risnan_d2;
  wire risnan_d3;
  wire risnan_d4;
  wire rissubnormal;
  wire rissubnormal_d1;
  wire rissubnormal_d2;
  wire riszero;
  wire riszero_d1;
  wire riszero_d2;
  wire round;
  wire roverflowed;
  wire rsgn;
  wire rsgn_d1;
  wire rsgn_d2;
  wire rsgntentative;
  wire rsgntentative_d1;
  wire [6:0] shiftvalue;
  wire [6:0] shiftvalue_d1;
  wire [6:0] shiftvalue_d2;
  wire [8:0] shiftvaluecasesubnormal;
  wire [8:0] shiftvaluecasesubnormal_d1;
  wire [8:0] shiftvaluecasesubnormal_d2;
  wire sticky1;
  wire sticky1_d1;
  wire sticky1_d2;
  wire sticky1_d3;
  wire sticky2;
  wire tentativerisinf;
  wire tentativerisinf_d1;
  wire tentativerisinf_d2;
  wire tentativerisinf_d3;
  wire tentativerisinf_d4;
  wire [9:0] tmpexpcomp1;
  wire [9:0] tmpexpcomp2;
  wire [9:0] tmpexpcomp3;
  wire [9:0] tmpexpcompres1;
  wire [9:0] tmpexpcompres1_d1;
  wire [9:0] tmpexpcompres1_d2;
  wire [9:0] tmpexpcompres2;
  always @(posedge clk)
    _289_ <= rsgntentative;
  always @(posedge clk)
    _300_ <= tmpexpcompres1;
  always @(posedge clk)
    _311_ <= tmpexpcompres1_d1;
  always @(posedge clk)
    _322_ <= rissubnormal;
  always @(posedge clk)
    _334_ <= rissubnormal_d1;
  always @(posedge clk)
    _338_ <= riszero;
  always @(posedge clk)
    _339_ <= riszero_d1;
  always @(posedge clk)
    _340_ <= rsgn;
  always @(posedge clk)
    _341_ <= rsgn_d1;
  always @(posedge clk)
    _342_ <= shiftvaluecasesubnormal;
  always @(posedge clk)
    _343_ <= shiftvaluecasesubnormal_d1;
  always @(posedge clk)
    _344_ <= exptentative;
  always @(posedge clk)
    _345_ <= exptentative_d1;
  always @(posedge clk)
    _346_ <= inf;
  always @(posedge clk)
    _348_ <= inf_d1;
  always @(posedge clk)
    _349_ <= inf_d2;
  always @(posedge clk)
    _350_ <= inf_d3;
  always @(posedge clk)
    _351_ <= nan;
  always @(posedge clk)
    _352_ <= nan_d1;
  always @(posedge clk)
    _353_ <= nan_d2;
  always @(posedge clk)
    _354_ <= nan_d3;
  always @(posedge clk)
    _355_ <= negateAB;
  always @(posedge clk)
    _356_ <= negateab_d1;
  always @(posedge clk)
    _357_ <= negateC;
  always @(posedge clk)
    _359_ <= negatec_d1;
  assign _360_ = A[23] | A[24];
  assign _361_ = _360_ | A[25];
  assign _362_ = _361_ | A[26];
  assign _363_ = _362_ | A[27];
  assign _364_ = _363_ | A[28];
  assign _365_ = _364_ | A[29];
  assign _366_ = _365_ | A[30];
  assign _367_ = A[23] & A[24];
  assign _368_ = _367_ & A[25];
  assign _370_ = _368_ & A[26];
  assign _371_ = _370_ & A[27];
  assign _372_ = _371_ & A[28];
  assign _373_ = _372_ & A[29];
  assign _374_ = _373_ & A[30];
  assign _375_ = A[0] | A[1];
  assign _376_ = _375_ | A[2];
  assign _377_ = _376_ | A[3];
  assign _378_ = _377_ | A[4];
  assign _379_ = _378_ | A[5];
  assign _381_ = _379_ | A[6];
  assign _382_ = _381_ | A[7];
  assign _383_ = _382_ | A[8];
  assign _384_ = _383_ | A[9];
  assign _385_ = _384_ | A[10];
  assign _386_ = _385_ | A[11];
  assign _387_ = _386_ | A[12];
  assign _388_ = _387_ | A[13];
  assign _389_ = _388_ | A[14];
  assign _390_ = _389_ | A[15];
  assign _392_ = _390_ | A[16];
  assign _393_ = _392_ | A[17];
  assign _394_ = _393_ | A[18];
  assign _395_ = _394_ | A[19];
  assign _396_ = _395_ | A[20];
  assign _397_ = _396_ | A[21];
  assign _398_ = _397_ | A[22];
  assign _399_ = ~ aisnormal;
  assign _400_ = ~ ahasnonnullsig;
  assign _401_ = _399_ & _400_;
  assign _002_ = ~ ahasnonnullsig;
  assign _003_ = aisinfornan & _002_;
  assign _004_ = aisinfornan & ahasnonnullsig;
  assign _005_ = B[23] | B[24];
  assign _006_ = _005_ | B[25];
  assign _007_ = _006_ | B[26];
  assign _008_ = _007_ | B[27];
  assign _009_ = _008_ | B[28];
  assign _010_ = _009_ | B[29];
  assign _011_ = _010_ | B[30];
  assign _013_ = B[23] & B[24];
  assign _014_ = _013_ & B[25];
  assign _015_ = _014_ & B[26];
  assign _016_ = _015_ & B[27];
  assign _017_ = _016_ & B[28];
  assign _018_ = _017_ & B[29];
  assign _019_ = _018_ & B[30];
  assign _020_ = B[0] | B[1];
  assign _021_ = _020_ | B[2];
  assign _022_ = _021_ | B[3];
  assign _024_ = _022_ | B[4];
  assign _025_ = _024_ | B[5];
  assign _026_ = _025_ | B[6];
  assign _027_ = _026_ | B[7];
  assign _028_ = _027_ | B[8];
  assign _029_ = _028_ | B[9];
  assign _030_ = _029_ | B[10];
  assign _031_ = _030_ | B[11];
  assign _032_ = _031_ | B[12];
  assign _033_ = _032_ | B[13];
  assign _035_ = _033_ | B[14];
  assign _036_ = _035_ | B[15];
  assign _037_ = _036_ | B[16];
  assign _038_ = _037_ | B[17];
  assign _039_ = _038_ | B[18];
  assign _040_ = _039_ | B[19];
  assign _041_ = _040_ | B[20];
  assign _042_ = _041_ | B[21];
  assign _043_ = _042_ | B[22];
  assign _044_ = ~ bisnormal;
  assign _046_ = ~ bhasnonnullsig;
  assign _047_ = _044_ & _046_;
  assign _048_ = ~ bhasnonnullsig;
  assign _049_ = bisinfornan & _048_;
  assign _050_ = bisinfornan & bhasnonnullsig;
  assign _051_ = aexpfield - { 7'h3f, aisnormal };
  assign _052_ = bexpfield - { 7'h3f, bisnormal };
  assign _053_ = { aexp[7], aexp } + { bexp[7], bexp };
  assign _054_ = C[23] | C[24];
  assign _055_ = _054_ | C[25];
  assign _057_ = _055_ | C[26];
  assign _058_ = _057_ | C[27];
  assign _059_ = _058_ | C[28];
  assign _060_ = _059_ | C[29];
  assign _061_ = _060_ | C[30];
  assign _062_ = C[23] & C[24];
  assign _063_ = _062_ & C[25];
  assign _064_ = _063_ & C[26];
  assign _065_ = _064_ & C[27];
  assign _066_ = _065_ & C[28];
  assign _068_ = _066_ & C[29];
  assign _069_ = _068_ & C[30];
  assign _070_ = C[0] | C[1];
  assign _071_ = _070_ | C[2];
  assign _072_ = _071_ | C[3];
  assign _073_ = _072_ | C[4];
  assign _074_ = _073_ | C[5];
  assign _075_ = _074_ | C[6];
  assign _076_ = _075_ | C[7];
  assign _077_ = _076_ | C[8];
  assign _079_ = _077_ | C[9];
  assign _080_ = _079_ | C[10];
  assign _081_ = _080_ | C[11];
  assign _082_ = _081_ | C[12];
  assign _083_ = _082_ | C[13];
  assign _084_ = _083_ | C[14];
  assign _085_ = _084_ | C[15];
  assign _086_ = _085_ | C[16];
  assign _087_ = _086_ | C[17];
  assign _088_ = _087_ | C[18];
  assign _090_ = _088_ | C[19];
  assign _091_ = _090_ | C[20];
  assign _092_ = _091_ | C[21];
  assign _093_ = _092_ | C[22];
  assign _094_ = ~ cisnormal;
  assign _095_ = ~ chasnonnullsig;
  assign _096_ = _094_ & _095_;
  assign _097_ = ~ chasnonnullsig;
  assign _098_ = cisinfornan & _097_;
  assign _099_ = cisinfornan & chasnonnullsig;
  assign _101_ = aisnan | bisnan;
  assign _102_ = _101_ | cisnan;
  assign _103_ = aisinf | bisinf;
  assign _104_ = _103_ & cisinf;
  assign _105_ = asgn ^ bsgn;
  assign _106_ = _105_ ^ csgn;
  assign _107_ = _104_ & _106_;
  assign _108_ = _102_ | _107_;
  assign _109_ = biszero | bisnan;
  assign _110_ = ~ _109_;
  assign _113_ = aisinf & _110_;
  assign _114_ = aiszero | aisnan;
  assign _115_ = ~ _114_;
  assign _116_ = bisinf & _115_;
  assign _117_ = _113_ | _116_;
  assign _118_ = ~ cisnan;
  assign _119_ = _117_ & _118_;
  assign _120_ = asgn ^ bsgn;
  assign _121_ = _120_ ^ csgn;
  assign _122_ = ~ _121_;
  assign _124_ = cisinf & _122_;
  assign _125_ = ~ cisinf;
  assign _126_ = _124_ | _125_;
  assign _127_ = _119_ & _126_;
  assign _128_ = aisnan | bisnan;
  assign _129_ = ~ _128_;
  assign _130_ = cisinf & _129_;
  assign _131_ = aisinf | bisinf;
  assign _132_ = asgn ^ bsgn;
  assign _133_ = _132_ ^ csgn;
  assign _135_ = ~ _133_;
  assign _136_ = _131_ & _135_;
  assign _137_ = aisinf | bisinf;
  assign _138_ = ~ _137_;
  assign _139_ = _136_ | _138_;
  assign _140_ = _130_ & _139_;
  assign _141_ = _127_ | _140_;
  assign _142_ = cexpfield - { 7'h3f, cisnormal };
  assign _143_ = negateAB ^ asgn;
  assign _144_ = _143_ ^ bsgn;
  assign _146_ = negateC ^ csgn;
  assign _147_ = _144_ ^ _146_;
  assign _148_ = { 2'h0, aexpfield } + { 2'h0, bexpfield };
  assign _149_ = _148_ - { 9'h03f, aisnormal };
  assign _150_ = _149_ - { 9'h000, bisnormal };
  assign _151_ = { 2'h0, cexpfield } - expdiffprepare;
  assign _152_ = _151_ - { 9'h000, cisnormal };
  assign _153_ = expdiff + 10'h030;
  assign _154_ = expdiff - 10'h003;
  assign _155_ = expdiff - 10'h01b;
  assign _157_ = expdiffverysmall ? 7'h4c : _159_;
  assign _158_ = 7'h1b - expdiff[6:0];
  assign _159_ = expdiffnotlarge ? _158_ : 7'h00;
  assign _161_ = csigshifted[0] | csigshifted[1];
  assign _162_ = _161_ | csigshifted[2];
  assign _163_ = _162_ | csigshifted[3];
  assign _164_ = _163_ | csigshifted[4];
  assign _165_ = _164_ | csigshifted[5];
  assign _166_ = _165_ | csigshifted[6];
  assign _168_ = _166_ | csigshifted[7];
  assign _169_ = _168_ | csigshifted[8];
  assign _170_ = _169_ | csigshifted[9];
  assign _171_ = _170_ | csigshifted[10];
  assign _172_ = _171_ | csigshifted[11];
  assign _173_ = _172_ | csigshifted[12];
  assign _174_ = _173_ | csigshifted[13];
  assign _175_ = _174_ | csigshifted[14];
  assign _176_ = _175_ | csigshifted[15];
  assign _177_ = _176_ | csigshifted[16];
  assign _179_ = _177_ | csigshifted[17];
  assign _180_ = _179_ | csigshifted[18];
  assign _181_ = _180_ | csigshifted[19];
  assign _182_ = _181_ | csigshifted[20];
  assign _183_ = _182_ | csigshifted[21];
  assign _184_ = _183_ | csigshifted[22];
  assign _185_ = _184_ | csigshifted[23];
  assign _186_ = $signed({ 24'h000000, asig }) * $signed({ 24'h000000, bsig });
  assign _187_ = ~ effectivesub_d1;
  assign _188_ = _187_ ? { 1'h0, csigshiftedt } : { 1'h1, _190_ };
  assign _190_ = ~ csigshiftedt;
  assign _191_ = csiginverted + { 1'h0, paligned_d1 };
  assign _192_ = _191_ + { 76'h0000000000000000000, effectivesub_d1 };
  assign _193_ = { 1'h0, csigshiftedt } - { 1'h0, paligned_d1 };
  assign _194_ = asgn_d1 ^ bsgn_d1;
  assign _195_ = _194_ ^ negateab_d1;
  assign _196_ = _195_ ^ bigsum[76];
  assign _197_ = ~ effectivesub_d1;
  assign _198_ = bigsum2[76] | _197_;
  assign _199_ = _198_ ? bigsum[75:0] : bigsum2[75:0];
  assign _202_ = { aexpplusbexp[8], aexpplusbexp } + 10'h081;
  always @(posedge clk)
    _000_ <= asgn;
  assign _203_ = tmpexpcompres1_d2 - { 4'h0, l };
  assign _204_ = ~ cisnormal_d2;
  assign _205_ = expdiffsmall_d2 | _204_;
  assign _206_ = _205_ & tmpexpcompres2[9];
  always @(posedge clk)
    _111_ <= asgn_d1;
  assign _207_ = l == 6'h34;
  assign _208_ = _207_ ? expdiffsmall_d2 : 1'h0;
  always @(posedge clk)
    _222_ <= aiszero;
  assign _209_ = asgn_d2 ^ bsgn_d2;
  assign _210_ = _209_ ^ negateab_d2;
  assign _212_ = csgn_d2 ^ negatec_d2;
  assign _213_ = _210_ & _212_;
  assign _214_ = aiszero_d2 | biszero_d2;
  assign _215_ = _214_ & ciszero_d2;
  assign _216_ = _215_ ? _213_ : _217_;
  assign _217_ = riszero ? 1'h0 : rsgntentative_d1;
  always @(posedge clk)
    _333_ <= aiszero_d1;
  assign _218_ = aexpplusbexp + 9'h099;
  always @(posedge clk)
    _347_ <= bsgn;
  assign _219_ = { 1'h0, l } + 7'h19;
  assign _220_ = ~ rissubnormal;
  assign _221_ = expdiffsmall_d2 & _220_;
  assign _224_ = _221_ ? _219_ : _226_;
  assign _225_ = expdiffsmall_d2 & rissubnormal;
  assign _226_ = _225_ ? shiftvaluecasesubnormal_d2[6:0] : shiftvalue_d2;
  always @(posedge clk)
    _358_ <= bsgn_d1;
  assign _228_ = riszero ? 10'h383 : _229_;
  assign _229_ = rissubnormal ? 10'h382 : _235_;
  always @(posedge clk)
    _369_ <= biszero;
  assign _230_ = { aexpplusbexp_d2[8], aexpplusbexp_d2 } - { 4'h0, l };
  always @(posedge clk)
    _380_ <= biszero_d1;
  assign _231_ = _230_ + 10'h003;
  assign _232_ = ~ rissubnormal;
  assign _233_ = expdiffsmall_d2 & _232_;
  assign _235_ = _233_ ? _231_ : _236_;
  always @(posedge clk)
    _391_ <= aexpplusbexp;
  assign _236_ = { cexp_d2[7], cexp_d2[7], cexp_d2 } + 10'h001;
  always @(posedge clk)
    _001_ <= aexpplusbexp_d1;
  assign _237_ = bigsumnormd[0] | bigsumnormd[1];
  assign _238_ = _237_ | bigsumnormd[2];
  assign _239_ = _238_ | bigsumnormd[3];
  assign _240_ = _239_ | bigsumnormd[4];
  assign _241_ = _240_ | bigsumnormd[5];
  always @(posedge clk)
    _012_ <= csgn;
  assign _242_ = _241_ | bigsumnormd[6];
  assign _243_ = _242_ | bigsumnormd[7];
  assign _244_ = _243_ | bigsumnormd[8];
  assign _246_ = _244_ | bigsumnormd[9];
  assign _247_ = _246_ | bigsumnormd[10];
  always @(posedge clk)
    _023_ <= csgn_d1;
  assign _248_ = _247_ | bigsumnormd[11];
  assign _249_ = _248_ | bigsumnormd[12];
  assign _250_ = _249_ | bigsumnormd[13];
  assign _251_ = _250_ | bigsumnormd[14];
  assign _252_ = _251_ | bigsumnormd[15];
  always @(posedge clk)
    _034_ <= cisnormal;
  assign _253_ = _252_ | bigsumnormd[16];
  assign _254_ = _253_ | bigsumnormd[17];
  assign _255_ = _254_ | bigsumnormd[18];
  assign _257_ = _255_ | bigsumnormd[19];
  assign _258_ = _257_ | bigsumnormd[20];
  always @(posedge clk)
    _045_ <= cisnormal_d1;
  assign _259_ = _258_ | bigsumnormd[21];
  assign _260_ = _259_ | bigsumnormd[22];
  assign _261_ = _260_ | bigsumnormd[23];
  assign _262_ = _261_ | bigsumnormd[24];
  assign _263_ = _262_ | bigsumnormd[25];
  always @(posedge clk)
    _056_ <= ciszero;
  assign _264_ = _263_ | bigsumnormd[26];
  assign _265_ = _264_ | bigsumnormd[27];
  assign _266_ = _265_ | bigsumnormd[28];
  assign _268_ = _266_ | bigsumnormd[29];
  assign _269_ = _268_ | bigsumnormd[30];
  always @(posedge clk)
    _067_ <= ciszero_d1;
  assign _270_ = _269_ | bigsumnormd[31];
  assign _271_ = _270_ | bigsumnormd[32];
  assign _272_ = _271_ | bigsumnormd[33];
  assign _273_ = _272_ | bigsumnormd[34];
  assign _274_ = _273_ | bigsumnormd[35];
  always @(posedge clk)
    _078_ <= risnan;
  assign _275_ = _274_ | bigsumnormd[36];
  assign _276_ = _275_ | bigsumnormd[37];
  assign _277_ = _276_ | bigsumnormd[38];
  assign _279_ = _277_ | bigsumnormd[39];
  assign _280_ = _279_ | bigsumnormd[40];
  always @(posedge clk)
    _089_ <= risnan_d1;
  assign _281_ = _280_ | bigsumnormd[41];
  assign _282_ = _281_ | bigsumnormd[42];
  assign _283_ = _282_ | bigsumnormd[43];
  assign _284_ = _283_ | bigsumnormd[44];
  assign _285_ = _284_ | bigsumnormd[45];
  always @(posedge clk)
    _100_ <= risnan_d2;
  assign _286_ = _285_ | bigsumnormd[46];
  assign _287_ = _286_ | bigsumnormd[47];
  assign _288_ = _287_ | bigsumnormd[48];
  assign _290_ = _288_ | bigsumnormd[49];
  always @(posedge clk)
    _112_ <= risnan_d3;
  assign _291_ = rissubnormal_d2 ? 2'h1 : fracleadingbitsnormal;
  assign _292_ = fracleadingbits == 2'h0;
  assign _293_ = _292_ ? fractentative[23:1] : _295_;
  always @(posedge clk)
    _123_ <= tentativerisinf;
  assign _294_ = fracleadingbits == 2'h1;
  assign _295_ = _294_ ? fractentative[24:2] : fractentative[25:3];
  always @(posedge clk)
    _134_ <= tentativerisinf_d1;
  assign _296_ = fracleadingbits == 2'h0;
  assign _297_ = _296_ ? fractentative[0] : _299_;
  always @(posedge clk)
    _145_ <= tentativerisinf_d2;
  assign _298_ = fracleadingbits == 2'h1;
  assign _299_ = _298_ ? fractentative[1] : fractentative[2];
  assign _301_ = sticky1_d3 | sticky2;
  always @(posedge clk)
    _156_ <= tentativerisinf_d3;
  assign _302_ = fracleadingbits == 2'h0;
  assign _303_ = _302_ ? _301_ : _307_;
  assign _304_ = fractentative[0] | sticky1_d3;
  always @(posedge clk)
    _167_ <= cexp;
  assign _305_ = _304_ | sticky2;
  assign _306_ = fracleadingbits == 2'h1;
  assign _307_ = _306_ ? _305_ : _310_;
  always @(posedge clk)
    _178_ <= cexp_d1;
  assign _308_ = fractentative[1] | fractentative[0];
  assign _309_ = _308_ | sticky1_d3;
  assign _310_ = _309_ | sticky2;
  assign _312_ = fracresultstickybit | fracresultnormd[0];
  assign _313_ = fracresultroundbit & _312_;
  assign _314_ = riszero_d2 ? 10'h07d : _316_;
  always @(posedge clk)
    _189_ <= effectivesub;
  assign _315_ = fracleadingbits == 2'h0;
  assign _316_ = _315_ ? 10'h07d : _318_;
  always @(posedge clk)
    _200_ <= expdiffsmall;
  assign _317_ = fracleadingbits == 2'h1;
  assign _318_ = _317_ ? 10'h07e : 10'h07f;
  always @(posedge clk)
    _211_ <= expdiffsmall_d1;
  assign _319_ = exptentative_d2 + expupdate;
  always @(posedge clk)
    _223_ <= shiftvalue;
  assign _320_ = resultbeforeround + { 32'h00000000, round };
  assign _321_ = resultrounded[32] | resultrounded[31];
  assign _323_ = resultrounded[30] & resultrounded[29];
  always @(posedge clk)
    _234_ <= shiftvalue_d1;
  assign _324_ = _323_ & resultrounded[28];
  assign _325_ = _324_ & resultrounded[27];
  assign _326_ = _325_ & resultrounded[26];
  assign _327_ = _326_ & resultrounded[25];
  assign _328_ = _327_ & resultrounded[24];
  always @(posedge clk)
    _245_ <= sticky1;
  assign _329_ = _328_ & resultrounded[23];
  assign _330_ = _321_ | _329_;
  assign _331_ = tentativerisinf_d4 | roverflowed;
  assign _332_ = ~ risnan_d4;
  assign _335_ = _332_ & finalrisinf;
  assign _336_ = _335_ ? { rsgn_d2, inf_d4 } : _337_;
  always @(posedge clk)
    _256_ <= sticky1_d1;
  assign _337_ = risnan_d4 ? { 1'h0, nan_d4 } : { rsgn_d2, resultrounded[30:0] };
  always @(posedge clk)
    _267_ <= sticky1_d2;
  always @(posedge clk)
    _278_ <= paligned;
  lzc_52_f300_uid6 ieeefma_8_23_f300_uid2leadingzerocounter (
    .clk(clk),
    .i(bigsumabslowerbits),
    .o(_201_)
  );
  leftshifter76_by_max_75_f300_uid8 normalizationshifter (
    .clk(clk),
    .r(_227_),
    .s(normshiftvalue),
    .x(bigsumabs)
  );
  rightshifter24_by_max_76_f300_uid4 rightshiftercomponent (
    .clk(clk),
    .r(_160_),
    .s(shiftvalue),
    .x(csig)
  );
  assign asgn = A[31];
  assign asgn_d1 = _000_;
  assign asgn_d2 = _111_;
  assign aexpfield = A[30:23];
  assign asigfield = A[22:0];
  assign aisnormal = _366_;
  assign aisinfornan = _374_;
  assign ahasnonnullsig = _398_;
  assign aiszero = _401_;
  assign aiszero_d1 = _222_;
  assign aiszero_d2 = _333_;
  assign aisinf = _003_;
  assign aisnan = _004_;
  assign bsgn = B[31];
  assign bsgn_d1 = _347_;
  assign bsgn_d2 = _358_;
  assign bexpfield = B[30:23];
  assign bsigfield = B[22:0];
  assign bisnormal = _011_;
  assign bisinfornan = _019_;
  assign bhasnonnullsig = _043_;
  assign biszero = _047_;
  assign biszero_d1 = _369_;
  assign biszero_d2 = _380_;
  assign bisinf = _049_;
  assign bisnan = _050_;
  assign aexp = _051_;
  assign bexp = _052_;
  assign asig = { aisnormal, asigfield };
  assign bsig = { bisnormal, bsigfield };
  assign aexpplusbexp = _053_;
  assign aexpplusbexp_d1 = _391_;
  assign aexpplusbexp_d2 = _001_;
  assign csgn = C[31];
  assign csgn_d1 = _012_;
  assign csgn_d2 = _023_;
  assign cexpfield = C[30:23];
  assign csigfield = C[22:0];
  assign cisnormal = _061_;
  assign cisnormal_d1 = _034_;
  assign cisnormal_d2 = _045_;
  assign cisinfornan = _069_;
  assign chasnonnullsig = _093_;
  assign ciszero = _096_;
  assign ciszero_d1 = _056_;
  assign ciszero_d2 = _067_;
  assign cisinf = _098_;
  assign cisnan = _099_;
  assign risnan = _108_;
  assign risnan_d1 = _078_;
  assign risnan_d2 = _089_;
  assign risnan_d3 = _100_;
  assign risnan_d4 = _112_;
  assign tentativerisinf = _141_;
  assign tentativerisinf_d1 = _123_;
  assign tentativerisinf_d2 = _134_;
  assign tentativerisinf_d3 = _145_;
  assign tentativerisinf_d4 = _156_;
  assign cexp = _142_;
  assign cexp_d1 = _167_;
  assign cexp_d2 = _178_;
  assign effectivesub = _147_;
  assign effectivesub_d1 = _189_;
  assign csig = { cisnormal, csigfield };
  assign expdiffprepare = _150_;
  assign expdiff = _152_;
  assign tmpexpcomp1 = _153_;
  assign expdiffverysmall = tmpexpcomp1[9];
  assign tmpexpcomp2 = _154_;
  assign expdiffsmall = tmpexpcomp2[9];
  assign expdiffsmall_d1 = _200_;
  assign expdiffsmall_d2 = _211_;
  assign tmpexpcomp3 = _155_;
  assign expdiffnotlarge = tmpexpcomp3[9];
  assign shiftvalue = _157_;
  assign shiftvalue_d1 = _223_;
  assign shiftvalue_d2 = _234_;
  assign csigshifted = \rightshiftercomponent:531 ;
  assign sticky1 = _185_;
  assign sticky1_d1 = _245_;
  assign sticky1_d2 = _256_;
  assign sticky1_d3 = _267_;
  assign csigshiftedt = csigshifted[99:24];
  assign p = _186_;
  assign paligned = { 26'h0000000, p, 2'h0 };
  assign paligned_d1 = _278_;
  assign csiginverted = _188_;
  assign bigsum = _192_;
  assign bigsum2 = _193_;
  assign rsgntentative = _196_;
  assign rsgntentative_d1 = _289_;
  assign bigsumabs = _199_;
  assign bigsumabslowerbits = bigsumabs[51:0];
  assign l = \ieeefma_8_23_f300_uid2leadingzerocounter:636 ;
  assign tmpexpcompres1 = _202_;
  assign tmpexpcompres1_d1 = _300_;
  assign tmpexpcompres1_d2 = _311_;
  assign tmpexpcompres2 = _203_;
  assign rissubnormal = _206_;
  assign rissubnormal_d1 = _322_;
  assign rissubnormal_d2 = _334_;
  assign riszero = _208_;
  assign riszero_d1 = _338_;
  assign riszero_d2 = _339_;
  assign rsgn = _216_;
  assign rsgn_d1 = _340_;
  assign rsgn_d2 = _341_;
  assign shiftvaluecasesubnormal = _218_;
  assign shiftvaluecasesubnormal_d1 = _342_;
  assign shiftvaluecasesubnormal_d2 = _343_;
  assign normshiftvalue = _224_;
  assign bigsumnormd = \normalizationshifter:700 ;
  assign exptentative = _228_;
  assign exptentative_d1 = _344_;
  assign exptentative_d2 = _345_;
  assign sticky2 = _290_;
  assign fractentative = bigsumnormd[76:50];
  assign fracleadingbitsnormal = fractentative[26:25];
  assign fracleadingbits = _291_;
  assign fracresultnormd = _293_;
  assign fracresultroundbit = _297_;
  assign fracresultstickybit = _303_;
  assign round = _313_;
  assign expupdate = _314_;
  assign exponentresult1 = _319_;
  assign resultbeforeround = { exponentresult1, fracresultnormd };
  assign resultrounded = _320_;
  assign roverflowed = _330_;
  assign finalrisinf = _331_;
  assign inf = 31'h7f800000;
  assign inf_d1 = _346_;
  assign inf_d2 = _348_;
  assign inf_d3 = _349_;
  assign inf_d4 = _350_;
  assign nan = 31'h7fffffff;
  assign nan_d1 = _351_;
  assign nan_d2 = _352_;
  assign nan_d3 = _353_;
  assign nan_d4 = _354_;
  assign negateab_d1 = _355_;
  assign negateab_d2 = _356_;
  assign negatec_d1 = _357_;
  assign negatec_d2 = _359_;
  assign \rightshiftercomponent:531  = _160_;
  assign \ieeefma_8_23_f300_uid2leadingzerocounter:636  = _201_;
  assign \normalizationshifter:700  = _227_;
  assign R = _336_;
endmodule

module leftshifter76_by_max_75_f300_uid8(clk, x, s, r);
  reg [6:0] _00_;
  reg [6:0] _01_;
  reg [75:0] _02_;
  reg [76:0] _03_;
  reg [82:0] _04_;
  wire [76:0] _05_;
  wire [78:0] _06_;
  wire [82:0] _07_;
  wire [90:0] _08_;
  wire [106:0] _09_;
  wire [138:0] _10_;
  wire [202:0] _11_;
  input clk;
  wire clk;
  wire [75:0] level0;
  wire [75:0] level0_d1;
  wire [76:0] level1;
  wire [76:0] level1_d1;
  wire [78:0] level2;
  wire [82:0] level3;
  wire [82:0] level3_d1;
  wire [90:0] level4;
  wire [106:0] level5;
  wire [138:0] level6;
  wire [202:0] level7;
  wire [6:0] ps;
  wire [6:0] ps_d1;
  wire [6:0] ps_d2;
  output [150:0] r;
  wire [150:0] r;
  input [6:0] s;
  wire [6:0] s;
  input [75:0] x;
  wire [75:0] x;
  always @(posedge clk)
    _00_ <= ps;
  always @(posedge clk)
    _01_ <= ps_d1;
  always @(posedge clk)
    _02_ <= level0;
  always @(posedge clk)
    _03_ <= level1;
  always @(posedge clk)
    _04_ <= level3;
  assign _05_ = ps[0] ? { level0_d1, 1'h0 } : { 1'h0, level0_d1 };
  assign _06_ = ps_d1[1] ? { level1_d1, 2'h0 } : { 2'h0, level1_d1 };
  assign _07_ = ps_d1[2] ? { level2, 4'h0 } : { 4'h0, level2 };
  assign _08_ = ps_d2[3] ? { level3_d1, 8'h00 } : { 8'h00, level3_d1 };
  assign _09_ = ps_d2[4] ? { level4, 16'h0000 } : { 16'h0000, level4 };
  assign _10_ = ps_d2[5] ? { level5, 32'h00000000 } : { 32'h00000000, level5 };
  assign _11_ = ps_d2[6] ? { level6, 64'h0000000000000000 } : { 64'h0000000000000000, level6 };
  assign ps = s;
  assign ps_d1 = _00_;
  assign ps_d2 = _01_;
  assign level0 = x;
  assign level0_d1 = _02_;
  assign level1 = _05_;
  assign level1_d1 = _03_;
  assign level2 = _06_;
  assign level3 = _07_;
  assign level3_d1 = _04_;
  assign level4 = _08_;
  assign level5 = _09_;
  assign level6 = _10_;
  assign level7 = _11_;
  assign r = level7[150:0];
endmodule

module lzc_52_f300_uid6(clk, i, o);
  reg _00_;
  reg [30:0] _01_;
  reg _02_;
  wire _03_;
  wire _04_;
  wire [30:0] _05_;
  wire _06_;
  wire _07_;
  wire [14:0] _08_;
  wire _09_;
  wire _10_;
  wire [6:0] _11_;
  wire _12_;
  wire _13_;
  wire [2:0] _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire [1:0] _19_;
  input clk;
  wire clk;
  wire digit2;
  wire digit3;
  wire digit4;
  wire digit4_d1;
  wire digit5;
  wire digit5_d1;
  input [51:0] i;
  wire [51:0] i;
  wire [2:0] level2;
  wire [6:0] level3;
  wire [14:0] level4;
  wire [30:0] level5;
  wire [30:0] level5_d1;
  wire [62:0] level6;
  wire [1:0] lowbits;
  output [5:0] o;
  wire [5:0] o;
  wire [3:0] outhighbits;
  always @(posedge clk)
    _00_ <= digit5;
  always @(posedge clk)
    _01_ <= level5;
  always @(posedge clk)
    _02_ <= digit4;
  assign _03_ = level6[62:31] == 32'd0;
  assign _04_ = _03_ ? 1'h1 : 1'h0;
  assign _05_ = digit5 ? level6[30:0] : level6[62:32];
  assign _06_ = level5[30:15] == 16'h0000;
  assign _07_ = _06_ ? 1'h1 : 1'h0;
  assign _08_ = digit4_d1 ? level5_d1[14:0] : level5_d1[30:16];
  assign _09_ = level4[14:7] == 8'h00;
  assign _10_ = _09_ ? 1'h1 : 1'h0;
  assign _11_ = digit3 ? level4[6:0] : level4[14:8];
  assign _12_ = level3[6:3] == 4'h0;
  assign _13_ = _12_ ? 1'h1 : 1'h0;
  assign _14_ = digit2 ? level3[2:0] : level3[6:4];
  assign _15_ = level2 == 3'h0;
  assign _16_ = level2 == 3'h1;
  assign _17_ = level2 == 3'h2;
  assign _18_ = level2 == 3'h3;
  function [1:0] \1109 ;
    input [1:0] a;
    input [7:0] b;
    input [3:0] s;
    (* parallel_case *)
    casez (s)
      4'b???1:
        \1109  = b[1:0];
      4'b??1?:
        \1109  = b[3:2];
      4'b?1??:
        \1109  = b[5:4];
      4'b1???:
        \1109  = b[7:6];
      default:
        \1109  = a;
    endcase
  endfunction
  assign _19_ = \1109 (2'h0, 8'h5b, { _18_, _17_, _16_, _15_ });
  assign level6 = { i, 11'h7ff };
  assign digit5 = _04_;
  assign digit5_d1 = _00_;
  assign level5 = _05_;
  assign level5_d1 = _01_;
  assign digit4 = _07_;
  assign digit4_d1 = _02_;
  assign level4 = _08_;
  assign digit3 = _10_;
  assign level3 = _11_;
  assign digit2 = _13_;
  assign level2 = _14_;
  assign lowbits = _19_;
  assign outhighbits = { digit5_d1, digit4_d1, digit3, digit2 };
  assign o = { outhighbits, lowbits };
endmodule

module rightshifter24_by_max_76_f300_uid4(clk, x, s, r);
  reg [6:0] _0_;
  reg [54:0] _1_;
  wire [24:0] _2_;
  wire [26:0] _3_;
  wire [30:0] _4_;
  wire [38:0] _5_;
  wire [54:0] _6_;
  wire [86:0] _7_;
  wire [150:0] _8_;
  input clk;
  wire clk;
  wire [23:0] level0;
  wire [24:0] level1;
  wire [26:0] level2;
  wire [30:0] level3;
  wire [38:0] level4;
  wire [54:0] level5;
  wire [54:0] level5_d1;
  wire [86:0] level6;
  wire [150:0] level7;
  wire [6:0] ps;
  wire [6:0] ps_d1;
  output [99:0] r;
  wire [99:0] r;
  input [6:0] s;
  wire [6:0] s;
  input [23:0] x;
  wire [23:0] x;
  assign _5_ = ps[3] ? { 8'h00, level3 } : { level3, 8'h00 };
  assign _6_ = ps[4] ? { 16'h0000, level4 } : { level4, 16'h0000 };
  assign _7_ = ps_d1[5] ? { 32'h00000000, level5_d1 } : { level5_d1, 32'h00000000 };
  assign _8_ = ps_d1[6] ? { 64'h0000000000000000, level6 } : { level6, 64'h0000000000000000 };
  always @(posedge clk)
    _0_ <= ps;
  always @(posedge clk)
    _1_ <= level5;
  assign _2_ = ps[0] ? { 1'h0, level0 } : { level0, 1'h0 };
  assign _3_ = ps[1] ? { 2'h0, level1 } : { level1, 2'h0 };
  assign _4_ = ps[2] ? { 4'h0, level2 } : { level2, 4'h0 };
  assign ps = s;
  assign ps_d1 = _0_;
  assign level0 = x;
  assign level1 = _2_;
  assign level2 = _3_;
  assign level3 = _4_;
  assign level4 = _5_;
  assign level5 = _6_;
  assign level5_d1 = _1_;
  assign level6 = _7_;
  assign level7 = _8_;
  assign r = level7[150:51];
endmodule
