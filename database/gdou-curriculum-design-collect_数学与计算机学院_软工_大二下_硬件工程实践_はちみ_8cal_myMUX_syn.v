// This program was cloned from: https://github.com/QingXia-Ela/gdou-curriculum-design-collect
// License: MIT License

// megafunction wizard: %LPM_MUX%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: lpm_mux 

// ============================================================
// File Name: myMUX.v
// Megafunction Name(s):
// 			lpm_mux
//
// Simulation Library Files(s):
// 			lpm
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 9.1 Build 222 10/21/2009 SJ Web Edition
// ************************************************************


//Copyright (C) 1991-2009 Altera Corporation
//Your use of Altera Corporation's design tools, logic functions 
//and other software and tools, and its AMPP partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Altera Program License 
//Subscription Agreement, Altera MegaCore Function License 
//Agreement, or other applicable license agreement, including, 
//without limitation, that your use is for the sole purpose of 
//programming logic devices manufactured by Altera and sold by 
//Altera or its authorized distributors.  Please refer to the 
//applicable agreement for further details.


//lpm_mux DEVICE_FAMILY="Cyclone II" LPM_SIZE=9 LPM_WIDTH=8 LPM_WIDTHS=4 data result sel
//VERSION_BEGIN 9.1 cbx_lpm_mux 2009:10:21:21:22:16:SJ cbx_mgl 2009:10:21:21:37:49:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463


//synthesis_resources = lut 48 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  myMUX_mux
	( 
	data,
	result,
	sel) /* synthesis synthesis_clearbox=1 */;
	input   [71:0]  data;
	output   [7:0]  result;
	input   [3:0]  sel;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   [71:0]  data;
	tri0   [3:0]  sel;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [8:0]  muxlut_data0w;
	wire  [8:0]  muxlut_data1w;
	wire  [8:0]  muxlut_data2w;
	wire  [8:0]  muxlut_data3w;
	wire  [8:0]  muxlut_data4w;
	wire  [8:0]  muxlut_data5w;
	wire  [8:0]  muxlut_data6w;
	wire  [8:0]  muxlut_data7w;
	wire  muxlut_result0w;
	wire  muxlut_result1w;
	wire  muxlut_result2w;
	wire  muxlut_result3w;
	wire  muxlut_result4w;
	wire  muxlut_result5w;
	wire  muxlut_result6w;
	wire  muxlut_result7w;
	wire  [3:0]  muxlut_select0w;
	wire  [3:0]  muxlut_select1w;
	wire  [3:0]  muxlut_select2w;
	wire  [3:0]  muxlut_select3w;
	wire  [3:0]  muxlut_select4w;
	wire  [3:0]  muxlut_select5w;
	wire  [3:0]  muxlut_select6w;
	wire  [3:0]  muxlut_select7w;
	wire  [7:0]  result_node;
	wire  [3:0]  sel_ffs_wire;
	wire  [3:0]  sel_node;
	wire  [3:0]  w118w;
	wire  [1:0]  w120w;
	wire  [3:0]  w143w;
	wire  [1:0]  w145w;
	wire  [1:0]  w166w;
	wire  [3:0]  w203w;
	wire  [1:0]  w205w;
	wire  [3:0]  w228w;
	wire  [1:0]  w230w;
	wire  [1:0]  w251w;
	wire  [3:0]  w288w;
	wire  [1:0]  w290w;
	wire  [3:0]  w313w;
	wire  [1:0]  w315w;
	wire  [1:0]  w336w;
	wire  [3:0]  w33w;
	wire  [1:0]  w35w;
	wire  [3:0]  w373w;
	wire  [1:0]  w375w;
	wire  [3:0]  w398w;
	wire  [1:0]  w400w;
	wire  [1:0]  w421w;
	wire  [3:0]  w458w;
	wire  [1:0]  w460w;
	wire  [3:0]  w483w;
	wire  [1:0]  w485w;
	wire  [1:0]  w506w;
	wire  [3:0]  w543w;
	wire  [1:0]  w545w;
	wire  [3:0]  w568w;
	wire  [1:0]  w570w;
	wire  [3:0]  w58w;
	wire  [1:0]  w591w;
	wire  [1:0]  w60w;
	wire  [3:0]  w628w;
	wire  [1:0]  w630w;
	wire  [3:0]  w653w;
	wire  [1:0]  w655w;
	wire  [1:0]  w676w;
	wire  [1:0]  w81w;
	wire  [2:0]  w_mux_outputs116w;
	wire  [2:0]  w_mux_outputs201w;
	wire  [2:0]  w_mux_outputs286w;
	wire  [2:0]  w_mux_outputs31w;
	wire  [2:0]  w_mux_outputs371w;
	wire  [2:0]  w_mux_outputs456w;
	wire  [2:0]  w_mux_outputs541w;
	wire  [2:0]  w_mux_outputs626w;

	assign
		muxlut_data0w = {data[64], data[56], data[48], data[40], data[32], data[24], data[16], data[8], data[0]},
		muxlut_data1w = {data[65], data[57], data[49], data[41], data[33], data[25], data[17], data[9], data[1]},
		muxlut_data2w = {data[66], data[58], data[50], data[42], data[34], data[26], data[18], data[10], data[2]},
		muxlut_data3w = {data[67], data[59], data[51], data[43], data[35], data[27], data[19], data[11], data[3]},
		muxlut_data4w = {data[68], data[60], data[52], data[44], data[36], data[28], data[20], data[12], data[4]},
		muxlut_data5w = {data[69], data[61], data[53], data[45], data[37], data[29], data[21], data[13], data[5]},
		muxlut_data6w = {data[70], data[62], data[54], data[46], data[38], data[30], data[22], data[14], data[6]},
		muxlut_data7w = {data[71], data[63], data[55], data[47], data[39], data[31], data[23], data[15], data[7]},
		muxlut_result0w = (((~ w81w[1]) | ((~ w81w[0]) & w_mux_outputs31w[2])) & ((w81w[1] | (w81w[0] & w_mux_outputs31w[1])) | ((~ w81w[0]) & w_mux_outputs31w[0]))),
		muxlut_result1w = (((~ w166w[1]) | ((~ w166w[0]) & w_mux_outputs116w[2])) & ((w166w[1] | (w166w[0] & w_mux_outputs116w[1])) | ((~ w166w[0]) & w_mux_outputs116w[0]))),
		muxlut_result2w = (((~ w251w[1]) | ((~ w251w[0]) & w_mux_outputs201w[2])) & ((w251w[1] | (w251w[0] & w_mux_outputs201w[1])) | ((~ w251w[0]) & w_mux_outputs201w[0]))),
		muxlut_result3w = (((~ w336w[1]) | ((~ w336w[0]) & w_mux_outputs286w[2])) & ((w336w[1] | (w336w[0] & w_mux_outputs286w[1])) | ((~ w336w[0]) & w_mux_outputs286w[0]))),
		muxlut_result4w = (((~ w421w[1]) | ((~ w421w[0]) & w_mux_outputs371w[2])) & ((w421w[1] | (w421w[0] & w_mux_outputs371w[1])) | ((~ w421w[0]) & w_mux_outputs371w[0]))),
		muxlut_result5w = (((~ w506w[1]) | ((~ w506w[0]) & w_mux_outputs456w[2])) & ((w506w[1] | (w506w[0] & w_mux_outputs456w[1])) | ((~ w506w[0]) & w_mux_outputs456w[0]))),
		muxlut_result6w = (((~ w591w[1]) | ((~ w591w[0]) & w_mux_outputs541w[2])) & ((w591w[1] | (w591w[0] & w_mux_outputs541w[1])) | ((~ w591w[0]) & w_mux_outputs541w[0]))),
		muxlut_result7w = (((~ w676w[1]) | ((~ w676w[0]) & w_mux_outputs626w[2])) & ((w676w[1] | (w676w[0] & w_mux_outputs626w[1])) | ((~ w676w[0]) & w_mux_outputs626w[0]))),
		muxlut_select0w = sel_node,
		muxlut_select1w = sel_node,
		muxlut_select2w = sel_node,
		muxlut_select3w = sel_node,
		muxlut_select4w = sel_node,
		muxlut_select5w = sel_node,
		muxlut_select6w = sel_node,
		muxlut_select7w = sel_node,
		result = result_node,
		result_node = {muxlut_result7w, muxlut_result6w, muxlut_result5w, muxlut_result4w, muxlut_result3w, muxlut_result2w, muxlut_result1w, muxlut_result0w},
		sel_ffs_wire = {sel[3:0]},
		sel_node = {sel_ffs_wire[3:2], sel[1:0]},
		w118w = muxlut_data1w[3:0],
		w120w = muxlut_select1w[1:0],
		w143w = muxlut_data1w[7:4],
		w145w = muxlut_select1w[1:0],
		w166w = muxlut_select1w[3:2],
		w203w = muxlut_data2w[3:0],
		w205w = muxlut_select2w[1:0],
		w228w = muxlut_data2w[7:4],
		w230w = muxlut_select2w[1:0],
		w251w = muxlut_select2w[3:2],
		w288w = muxlut_data3w[3:0],
		w290w = muxlut_select3w[1:0],
		w313w = muxlut_data3w[7:4],
		w315w = muxlut_select3w[1:0],
		w336w = muxlut_select3w[3:2],
		w33w = muxlut_data0w[3:0],
		w35w = muxlut_select0w[1:0],
		w373w = muxlut_data4w[3:0],
		w375w = muxlut_select4w[1:0],
		w398w = muxlut_data4w[7:4],
		w400w = muxlut_select4w[1:0],
		w421w = muxlut_select4w[3:2],
		w458w = muxlut_data5w[3:0],
		w460w = muxlut_select5w[1:0],
		w483w = muxlut_data5w[7:4],
		w485w = muxlut_select5w[1:0],
		w506w = muxlut_select5w[3:2],
		w543w = muxlut_data6w[3:0],
		w545w = muxlut_select6w[1:0],
		w568w = muxlut_data6w[7:4],
		w570w = muxlut_select6w[1:0],
		w58w = muxlut_data0w[7:4],
		w591w = muxlut_select6w[3:2],
		w60w = muxlut_select0w[1:0],
		w628w = muxlut_data7w[3:0],
		w630w = muxlut_select7w[1:0],
		w653w = muxlut_data7w[7:4],
		w655w = muxlut_select7w[1:0],
		w676w = muxlut_select7w[3:2],
		w81w = muxlut_select0w[3:2],
		w_mux_outputs116w = {muxlut_data1w[8], ((((~ w145w[1]) | (w145w[0] & w143w[3])) | ((~ w145w[0]) & w143w[2])) & ((w145w[1] | (w145w[0] & w143w[1])) | ((~ w145w[0]) & w143w[0]))), ((((~ w120w[1]) | (w120w[0] & w118w[3])) | ((~ w120w[0]) & w118w[2])) & ((w120w[1] | (w120w[0] & w118w[1])) | ((~ w120w[0]) & w118w[0])))},
		w_mux_outputs201w = {muxlut_data2w[8], ((((~ w230w[1]) | (w230w[0] & w228w[3])) | ((~ w230w[0]) & w228w[2])) & ((w230w[1] | (w230w[0] & w228w[1])) | ((~ w230w[0]) & w228w[0]))), ((((~ w205w[1]) | (w205w[0] & w203w[3])) | ((~ w205w[0]) & w203w[2])) & ((w205w[1] | (w205w[0] & w203w[1])) | ((~ w205w[0]) & w203w[0])))},
		w_mux_outputs286w = {muxlut_data3w[8], ((((~ w315w[1]) | (w315w[0] & w313w[3])) | ((~ w315w[0]) & w313w[2])) & ((w315w[1] | (w315w[0] & w313w[1])) | ((~ w315w[0]) & w313w[0]))), ((((~ w290w[1]) | (w290w[0] & w288w[3])) | ((~ w290w[0]) & w288w[2])) & ((w290w[1] | (w290w[0] & w288w[1])) | ((~ w290w[0]) & w288w[0])))},
		w_mux_outputs31w = {muxlut_data0w[8], ((((~ w60w[1]) | (w60w[0] & w58w[3])) | ((~ w60w[0]) & w58w[2])) & ((w60w[1] | (w60w[0] & w58w[1])) | ((~ w60w[0]) & w58w[0]))), ((((~ w35w[1]) | (w35w[0] & w33w[3])) | ((~ w35w[0]) & w33w[2])) & ((w35w[1] | (w35w[0] & w33w[1])) | ((~ w35w[0]) & w33w[0])))},
		w_mux_outputs371w = {muxlut_data4w[8], ((((~ w400w[1]) | (w400w[0] & w398w[3])) | ((~ w400w[0]) & w398w[2])) & ((w400w[1] | (w400w[0] & w398w[1])) | ((~ w400w[0]) & w398w[0]))), ((((~ w375w[1]) | (w375w[0] & w373w[3])) | ((~ w375w[0]) & w373w[2])) & ((w375w[1] | (w375w[0] & w373w[1])) | ((~ w375w[0]) & w373w[0])))},
		w_mux_outputs456w = {muxlut_data5w[8], ((((~ w485w[1]) | (w485w[0] & w483w[3])) | ((~ w485w[0]) & w483w[2])) & ((w485w[1] | (w485w[0] & w483w[1])) | ((~ w485w[0]) & w483w[0]))), ((((~ w460w[1]) | (w460w[0] & w458w[3])) | ((~ w460w[0]) & w458w[2])) & ((w460w[1] | (w460w[0] & w458w[1])) | ((~ w460w[0]) & w458w[0])))},
		w_mux_outputs541w = {muxlut_data6w[8], ((((~ w570w[1]) | (w570w[0] & w568w[3])) | ((~ w570w[0]) & w568w[2])) & ((w570w[1] | (w570w[0] & w568w[1])) | ((~ w570w[0]) & w568w[0]))), ((((~ w545w[1]) | (w545w[0] & w543w[3])) | ((~ w545w[0]) & w543w[2])) & ((w545w[1] | (w545w[0] & w543w[1])) | ((~ w545w[0]) & w543w[0])))},
		w_mux_outputs626w = {muxlut_data7w[8], ((((~ w655w[1]) | (w655w[0] & w653w[3])) | ((~ w655w[0]) & w653w[2])) & ((w655w[1] | (w655w[0] & w653w[1])) | ((~ w655w[0]) & w653w[0]))), ((((~ w630w[1]) | (w630w[0] & w628w[3])) | ((~ w630w[0]) & w628w[2])) & ((w630w[1] | (w630w[0] & w628w[1])) | ((~ w630w[0]) & w628w[0])))};
endmodule //myMUX_mux
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module myMUX (
	data0x,
	data1x,
	data2x,
	data3x,
	data4x,
	data5x,
	data6x,
	data7x,
	data8x,
	sel,
	result)/* synthesis synthesis_clearbox = 1 */;

	input	[7:0]  data0x;
	input	[7:0]  data1x;
	input	[7:0]  data2x;
	input	[7:0]  data3x;
	input	[7:0]  data4x;
	input	[7:0]  data5x;
	input	[7:0]  data6x;
	input	[7:0]  data7x;
	input	[7:0]  data8x;
	input	[3:0]  sel;
	output	[7:0]  result;

	wire [7:0] sub_wire0;
	wire [7:0] sub_wire10 = data0x[7:0];
	wire [7:0] sub_wire9 = data1x[7:0];
	wire [7:0] sub_wire8 = data2x[7:0];
	wire [7:0] sub_wire7 = data3x[7:0];
	wire [7:0] sub_wire6 = data4x[7:0];
	wire [7:0] sub_wire5 = data5x[7:0];
	wire [7:0] sub_wire4 = data6x[7:0];
	wire [7:0] sub_wire3 = data7x[7:0];
	wire [7:0] result = sub_wire0[7:0];
	wire [7:0] sub_wire1 = data8x[7:0];
	wire [71:0] sub_wire2 = {sub_wire10, sub_wire9, sub_wire8, sub_wire7, sub_wire6, sub_wire5, sub_wire4, sub_wire3, sub_wire1};

	myMUX_mux	myMUX_mux_component (
				.sel (sel),
				.data (sub_wire2),
				.result (sub_wire0));

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Cyclone II"
// Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX STRING "1"
// Retrieval info: CONSTANT: LPM_SIZE NUMERIC "9"
// Retrieval info: CONSTANT: LPM_TYPE STRING "LPM_MUX"
// Retrieval info: CONSTANT: LPM_WIDTH NUMERIC "8"
// Retrieval info: CONSTANT: LPM_WIDTHS NUMERIC "4"
// Retrieval info: USED_PORT: data0x 0 0 8 0 INPUT NODEFVAL data0x[7..0]
// Retrieval info: USED_PORT: data1x 0 0 8 0 INPUT NODEFVAL data1x[7..0]
// Retrieval info: USED_PORT: data2x 0 0 8 0 INPUT NODEFVAL data2x[7..0]
// Retrieval info: USED_PORT: data3x 0 0 8 0 INPUT NODEFVAL data3x[7..0]
// Retrieval info: USED_PORT: data4x 0 0 8 0 INPUT NODEFVAL data4x[7..0]
// Retrieval info: USED_PORT: data5x 0 0 8 0 INPUT NODEFVAL data5x[7..0]
// Retrieval info: USED_PORT: data6x 0 0 8 0 INPUT NODEFVAL data6x[7..0]
// Retrieval info: USED_PORT: data7x 0 0 8 0 INPUT NODEFVAL data7x[7..0]
// Retrieval info: USED_PORT: data8x 0 0 8 0 INPUT NODEFVAL data8x[7..0]
// Retrieval info: USED_PORT: result 0 0 8 0 OUTPUT NODEFVAL result[7..0]
// Retrieval info: USED_PORT: sel 0 0 4 0 INPUT NODEFVAL sel[3..0]
// Retrieval info: CONNECT: result 0 0 8 0 @result 0 0 8 0
// Retrieval info: CONNECT: @data 1 8 8 0 data8x 0 0 8 0
// Retrieval info: CONNECT: @data 1 7 8 0 data7x 0 0 8 0
// Retrieval info: CONNECT: @data 1 6 8 0 data6x 0 0 8 0
// Retrieval info: CONNECT: @data 1 5 8 0 data5x 0 0 8 0
// Retrieval info: CONNECT: @data 1 4 8 0 data4x 0 0 8 0
// Retrieval info: CONNECT: @data 1 3 8 0 data3x 0 0 8 0
// Retrieval info: CONNECT: @data 1 2 8 0 data2x 0 0 8 0
// Retrieval info: CONNECT: @data 1 1 8 0 data1x 0 0 8 0
// Retrieval info: CONNECT: @data 1 0 8 0 data0x 0 0 8 0
// Retrieval info: CONNECT: @sel 0 0 4 0 sel 0 0 4 0
// Retrieval info: LIBRARY: lpm lpm.lpm_components.all
// Retrieval info: GEN_FILE: TYPE_NORMAL myMUX.vhd TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL myMUX.inc TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL myMUX.cmp TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL myMUX.bsf TRUE FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL myMUX_inst.vhd TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL myMUX_syn.v TRUE
// Retrieval info: LIB_FILE: lpm
