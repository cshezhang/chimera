// This program was cloned from: https://github.com/rsnikhil/RISCV_Piccolo_v1
// License: MIT License

//
// Generated by Bluespec Compiler, version 2016.03.beta1 (build 34761, 2016-03-16)
//
// On Sat Jul  9 22:06:05 EDT 2016
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`include "verilator_config.vlt"

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTop_Sim_Standalone(CLK,
			    RST_N);
  input  CLK;
  input  RST_N;

  // ports of submodule mem
  wire [315 : 0] mem$request_put;
  wire [255 : 0] mem$response_get;
  wire mem$EN_request_put,
       mem$EN_response_get,
       mem$RDY_request_put,
       mem$RDY_response_get;

  // ports of submodule sim_driver
  wire [207 : 0] sim_driver$client_control_request_get;
  wire [71 : 0] sim_driver$client_control_response_put;
  wire [7 : 0] sim_driver$from_console_get, sim_driver$to_console_put;
  wire sim_driver$EN_client_control_request_get,
       sim_driver$EN_client_control_response_put,
       sim_driver$EN_from_console_get,
       sim_driver$EN_to_console_put,
       sim_driver$RDY_client_control_request_get,
       sim_driver$RDY_client_control_response_put,
       sim_driver$RDY_from_console_get,
       sim_driver$RDY_to_console_put;

  // ports of submodule soc_top
  wire [315 : 0] soc_top$to_raw_mem_request_get;
  wire [255 : 0] soc_top$to_raw_mem_response_put;
  wire [207 : 0] soc_top$server_control_request_put;
  wire [71 : 0] soc_top$server_control_response_get;
  wire [7 : 0] soc_top$from_console_put, soc_top$to_console_get;
  wire soc_top$EN_from_console_put,
       soc_top$EN_server_control_request_put,
       soc_top$EN_server_control_response_get,
       soc_top$EN_to_console_get,
       soc_top$EN_to_raw_mem_request_get,
       soc_top$EN_to_raw_mem_response_put,
       soc_top$EN_verify_out_get,
       soc_top$RDY_from_console_put,
       soc_top$RDY_server_control_request_put,
       soc_top$RDY_server_control_response_get,
       soc_top$RDY_to_console_get,
       soc_top$RDY_to_raw_mem_request_get,
       soc_top$RDY_to_raw_mem_response_put;

  // rule scheduling signals
  wire CAN_FIRE_RL_control_connection_ClientServerRequest,
       CAN_FIRE_RL_control_connection_ClientServerResponse,
       CAN_FIRE_RL_from_console_cnx_mkConnectionGetPut,
       CAN_FIRE_RL_memCnx_ClientServerRequest,
       CAN_FIRE_RL_memCnx_ClientServerResponse,
       CAN_FIRE_RL_to_console_cnx_mkConnectionGetPut,
       WILL_FIRE_RL_control_connection_ClientServerRequest,
       WILL_FIRE_RL_control_connection_ClientServerResponse,
       WILL_FIRE_RL_from_console_cnx_mkConnectionGetPut,
       WILL_FIRE_RL_memCnx_ClientServerRequest,
       WILL_FIRE_RL_memCnx_ClientServerResponse,
       WILL_FIRE_RL_to_console_cnx_mkConnectionGetPut;

  // submodule mem
  mkMem_Model mem(.CLK(CLK),
		  .RST_N(RST_N),
		  .request_put(mem$request_put),
		  .EN_request_put(mem$EN_request_put),
		  .EN_response_get(mem$EN_response_get),
		  .RDY_request_put(mem$RDY_request_put),
		  .response_get(mem$response_get),
		  .RDY_response_get(mem$RDY_response_get));

  // submodule sim_driver
  mkSim_Driver sim_driver(.CLK(CLK),
			  .RST_N(RST_N),
			  .client_control_response_put(sim_driver$client_control_response_put),
			  .to_console_put(sim_driver$to_console_put),
			  .EN_client_control_request_get(sim_driver$EN_client_control_request_get),
			  .EN_client_control_response_put(sim_driver$EN_client_control_response_put),
			  .EN_from_console_get(sim_driver$EN_from_console_get),
			  .EN_to_console_put(sim_driver$EN_to_console_put),
			  .client_control_request_get(sim_driver$client_control_request_get),
			  .RDY_client_control_request_get(sim_driver$RDY_client_control_request_get),
			  .RDY_client_control_response_put(sim_driver$RDY_client_control_response_put),
			  .from_console_get(sim_driver$from_console_get),
			  .RDY_from_console_get(sim_driver$RDY_from_console_get),
			  .RDY_to_console_put(sim_driver$RDY_to_console_put));

  // submodule soc_top
  mkSoC_Top soc_top(.CLK(CLK),
		    .RST_N(RST_N),
		    .from_console_put(soc_top$from_console_put),
		    .server_control_request_put(soc_top$server_control_request_put),
		    .to_raw_mem_response_put(soc_top$to_raw_mem_response_put),
		    .EN_server_control_request_put(soc_top$EN_server_control_request_put),
		    .EN_server_control_response_get(soc_top$EN_server_control_response_get),
		    .EN_from_console_put(soc_top$EN_from_console_put),
		    .EN_to_console_get(soc_top$EN_to_console_get),
		    .EN_verify_out_get(soc_top$EN_verify_out_get),
		    .EN_to_raw_mem_request_get(soc_top$EN_to_raw_mem_request_get),
		    .EN_to_raw_mem_response_put(soc_top$EN_to_raw_mem_response_put),
		    .RDY_server_control_request_put(soc_top$RDY_server_control_request_put),
		    .server_control_response_get(soc_top$server_control_response_get),
		    .RDY_server_control_response_get(soc_top$RDY_server_control_response_get),
		    .RDY_from_console_put(soc_top$RDY_from_console_put),
		    .to_console_get(soc_top$to_console_get),
		    .RDY_to_console_get(soc_top$RDY_to_console_get),
		    .verify_out_get(),
		    .RDY_verify_out_get(),
		    .to_raw_mem_request_get(soc_top$to_raw_mem_request_get),
		    .RDY_to_raw_mem_request_get(soc_top$RDY_to_raw_mem_request_get),
		    .RDY_to_raw_mem_response_put(soc_top$RDY_to_raw_mem_response_put));

  // rule RL_memCnx_ClientServerRequest
  assign CAN_FIRE_RL_memCnx_ClientServerRequest =
	     soc_top$RDY_to_raw_mem_request_get && mem$RDY_request_put ;
  assign WILL_FIRE_RL_memCnx_ClientServerRequest =
	     CAN_FIRE_RL_memCnx_ClientServerRequest ;

  // rule RL_memCnx_ClientServerResponse
  assign CAN_FIRE_RL_memCnx_ClientServerResponse =
	     soc_top$RDY_to_raw_mem_response_put && mem$RDY_response_get ;
  assign WILL_FIRE_RL_memCnx_ClientServerResponse =
	     CAN_FIRE_RL_memCnx_ClientServerResponse ;

  // rule RL_control_connection_ClientServerRequest
  assign CAN_FIRE_RL_control_connection_ClientServerRequest =
	     sim_driver$RDY_client_control_request_get &&
	     soc_top$RDY_server_control_request_put ;
  assign WILL_FIRE_RL_control_connection_ClientServerRequest =
	     CAN_FIRE_RL_control_connection_ClientServerRequest ;

  // rule RL_control_connection_ClientServerResponse
  assign CAN_FIRE_RL_control_connection_ClientServerResponse =
	     sim_driver$RDY_client_control_response_put &&
	     soc_top$RDY_server_control_response_get ;
  assign WILL_FIRE_RL_control_connection_ClientServerResponse =
	     CAN_FIRE_RL_control_connection_ClientServerResponse ;

  // rule RL_from_console_cnx_mkConnectionGetPut
  assign CAN_FIRE_RL_from_console_cnx_mkConnectionGetPut =
	     sim_driver$RDY_from_console_get && soc_top$RDY_from_console_put ;
  assign WILL_FIRE_RL_from_console_cnx_mkConnectionGetPut =
	     CAN_FIRE_RL_from_console_cnx_mkConnectionGetPut ;

  // rule RL_to_console_cnx_mkConnectionGetPut
  assign CAN_FIRE_RL_to_console_cnx_mkConnectionGetPut =
	     sim_driver$RDY_to_console_put && soc_top$RDY_to_console_get ;
  assign WILL_FIRE_RL_to_console_cnx_mkConnectionGetPut =
	     CAN_FIRE_RL_to_console_cnx_mkConnectionGetPut ;

  // submodule mem
  assign mem$request_put = soc_top$to_raw_mem_request_get ;
  assign mem$EN_request_put = CAN_FIRE_RL_memCnx_ClientServerRequest ;
  assign mem$EN_response_get = CAN_FIRE_RL_memCnx_ClientServerResponse ;

  // submodule sim_driver
  assign sim_driver$client_control_response_put =
	     soc_top$server_control_response_get ;
  assign sim_driver$to_console_put = soc_top$to_console_get ;
  assign sim_driver$EN_client_control_request_get =
	     CAN_FIRE_RL_control_connection_ClientServerRequest ;
  assign sim_driver$EN_client_control_response_put =
	     CAN_FIRE_RL_control_connection_ClientServerResponse ;
  assign sim_driver$EN_from_console_get =
	     CAN_FIRE_RL_from_console_cnx_mkConnectionGetPut ;
  assign sim_driver$EN_to_console_put =
	     CAN_FIRE_RL_to_console_cnx_mkConnectionGetPut ;

  // submodule soc_top
  assign soc_top$from_console_put = sim_driver$from_console_get ;
  assign soc_top$server_control_request_put =
	     sim_driver$client_control_request_get ;
  assign soc_top$to_raw_mem_response_put = mem$response_get ;
  assign soc_top$EN_server_control_request_put =
	     CAN_FIRE_RL_control_connection_ClientServerRequest ;
  assign soc_top$EN_server_control_response_get =
	     CAN_FIRE_RL_control_connection_ClientServerResponse ;
  assign soc_top$EN_from_console_put =
	     CAN_FIRE_RL_from_console_cnx_mkConnectionGetPut ;
  assign soc_top$EN_to_console_get =
	     CAN_FIRE_RL_to_console_cnx_mkConnectionGetPut ;
  assign soc_top$EN_verify_out_get = 1'b0 ;
  assign soc_top$EN_to_raw_mem_request_get =
	     CAN_FIRE_RL_memCnx_ClientServerRequest ;
  assign soc_top$EN_to_raw_mem_response_put =
	     CAN_FIRE_RL_memCnx_ClientServerResponse ;
endmodule  // mkTop_Sim_Standalone

