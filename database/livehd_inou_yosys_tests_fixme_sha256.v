/* Generated by Yosys 0.8+506 from sha256.v */

// sha256.v
// --------
// Top level wrapper for the SHA-256 hash function providing
// a simple memory like interface with 32 bit data access.
//
//
// Author: Joachim Strombergson
// Copyright (c) 2013, 201, Secworks Sweden AB
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or
// without modification, are permitted provided that the following
// conditions are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in
//    the documentation and/or other materials provided with the
//    distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
// COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

(* top =  1  *)
(* src = "sha256_core.v:40" *)
module sha256(clk, reset_n, init, next, mode, block, ready, digest, digest_valid);
  (* src = "sha256_core.v:199" *)
  wire [31:0] _000_;
  (* src = "sha256_core.v:199" *)
  wire [31:0] _001_;
  (* src = "sha256_core.v:199" *)
  wire [31:0] _002_;
  (* src = "sha256_core.v:199" *)
  wire [31:0] _003_;
  (* src = "sha256_core.v:199" *)
  wire [31:0] _004_;
  (* src = "sha256_core.v:199" *)
  wire [31:0] _005_;
  (* src = "sha256_core.v:199" *)
  wire [31:0] _006_;
  (* src = "sha256_core.v:199" *)
  wire [31:0] _007_;
  (* src = "sha256_core.v:199" *)
  wire [31:0] _008_;
  (* src = "sha256_core.v:199" *)
  wire [31:0] _009_;
  (* src = "sha256_core.v:199" *)
  wire [31:0] _010_;
  (* src = "sha256_core.v:199" *)
  wire [31:0] _011_;
  (* src = "sha256_core.v:199" *)
  wire _012_;
  (* src = "sha256_core.v:199" *)
  wire [31:0] _013_;
  (* src = "sha256_core.v:199" *)
  wire [31:0] _014_;
  (* src = "sha256_core.v:199" *)
  wire [31:0] _015_;
  (* src = "sha256_core.v:199" *)
  wire [31:0] _016_;
  (* src = "sha256_core.v:199" *)
  wire [1:0] _017_;
  (* src = "sha256_core.v:199" *)
  wire [5:0] _018_;
  (* src = "sha256_core.v:267" *)
  wire [31:0] _019_;
  (* src = "sha256_core.v:267" *)
  wire [31:0] _020_;
  (* src = "sha256_core.v:267" *)
  wire [31:0] _021_;
  (* src = "sha256_core.v:267" *)
  wire [31:0] _022_;
  (* src = "sha256_core.v:267" *)
  wire [31:0] _023_;
  (* src = "sha256_core.v:267" *)
  wire [31:0] _024_;
  (* src = "sha256_core.v:267" *)
  wire [31:0] _025_;
  (* src = "sha256_core.v:267" *)
  wire [31:0] _026_;
  (* src = "sha256_core.v:267" *)
  wire _027_;
  (* src = "sha256_core.v:367" *)
  wire _028_;
  (* src = "sha256_core.v:367" *)
  wire [31:0] _029_;
  (* src = "sha256_core.v:367" *)
  wire [31:0] _030_;
  (* src = "sha256_core.v:367" *)
  wire [31:0] _031_;
  (* src = "sha256_core.v:367" *)
  wire [31:0] _032_;
  (* src = "sha256_core.v:367" *)
  wire [31:0] _033_;
  (* src = "sha256_core.v:367" *)
  wire [31:0] _034_;
  (* src = "sha256_core.v:367" *)
  wire [31:0] _035_;
  (* src = "sha256_core.v:367" *)
  wire [31:0] _036_;
  (* src = "sha256_core.v:267" *)
  wire [31:0] _037_;
  (* src = "sha256_core.v:267" *)
  wire [31:0] _038_;
  (* src = "sha256_core.v:267" *)
  wire [31:0] _039_;
  (* src = "sha256_core.v:267" *)
  wire [31:0] _040_;
  (* src = "sha256_core.v:267" *)
  wire [31:0] _041_;
  (* src = "sha256_core.v:267" *)
  wire [31:0] _042_;
  (* src = "sha256_core.v:267" *)
  wire [31:0] _043_;
  (* src = "sha256_core.v:267" *)
  wire [31:0] _044_;
  (* src = "sha256_core.v:367" *)
  wire [31:0] _045_;
  (* src = "sha256_core.v:367" *)
  wire [31:0] _046_;
  (* src = "sha256_core.v:367" *)
  wire [31:0] _047_;
  (* src = "sha256_core.v:367" *)
  wire [31:0] _048_;
  (* src = "sha256_core.v:465" *)
  wire _049_;
  (* src = "sha256_core.v:367" *)
  wire [31:0] _050_;
  (* src = "sha256_core.v:367" *)
  wire [31:0] _051_;
  (* src = "sha256_core.v:367" *)
  wire [31:0] _052_;
  (* src = "sha256_core.v:367" *)
  wire [31:0] _053_;
  (* src = "sha256_core.v:465" *)
  wire [1:0] _054_;
  (* src = "sha256_core.v:465" *)
  wire _055_;
  (* src = "sha256_core.v:465" *)
  wire [1:0] _056_;
  (* src = "sha256_core.v:465" *)
  wire [1:0] _057_;
  (* src = "sha256_core.v:465" *)
  wire _058_;
  (* src = "sha256_core.v:308" *)
  wire [31:0] _059_;
  (* src = "sha256_core.v:309" *)
  wire [31:0] _060_;
  (* src = "sha256_core.v:310" *)
  wire [31:0] _061_;
  (* src = "sha256_core.v:311" *)
  wire [31:0] _062_;
  (* src = "sha256_core.v:312" *)
  wire [31:0] _063_;
  (* src = "sha256_core.v:313" *)
  wire [31:0] _064_;
  (* src = "sha256_core.v:314" *)
  wire [31:0] _065_;
  (* src = "sha256_core.v:315" *)
  wire [31:0] _066_;
  (* src = "sha256_core.v:337" *)
  wire [31:0] _067_;
  (* src = "sha256_core.v:337" *)
  wire [31:0] _068_;
  (* src = "sha256_core.v:337" *)
  wire [31:0] _069_;
  (* src = "sha256_core.v:422" *)
  wire [31:0] _070_;
  (* src = "sha256_core.v:426" *)
  wire [31:0] _071_;
  (* src = "sha256_core.v:454" *)
  wire [5:0] _072_;
  (* src = "sha256_core.v:335" *)
  wire [31:0] _073_;
  (* src = "sha256_core.v:335" *)
  wire [31:0] _074_;
  (* src = "sha256_core.v:355" *)
  wire [31:0] _075_;
  (* src = "sha256_core.v:355" *)
  wire [31:0] _076_;
  (* src = "sha256_core.v:355" *)
  wire [31:0] _077_;
  wire _078_;
  wire _079_;
  wire [1:0] _080_;
  (* src = "sha256_core.v:526" *)
  wire _081_;
  (* src = "sha256_core.v:335" *)
  wire [31:0] _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire [31:0] _118_;
  wire [31:0] _119_;
  wire [31:0] _120_;
  wire [31:0] _121_;
  wire [31:0] _122_;
  wire [31:0] _123_;
  wire [31:0] _124_;
  wire [31:0] _125_;
  wire [31:0] _126_;
  wire [31:0] _127_;
  wire [31:0] _128_;
  wire [31:0] _129_;
  wire [31:0] _130_;
  wire [31:0] _131_;
  wire [31:0] _132_;
  wire [31:0] _133_;
  wire [31:0] _134_;
  wire [31:0] _135_;
  wire [31:0] _136_;
  wire [31:0] _137_;
  wire [31:0] _138_;
  wire [31:0] _139_;
  wire [31:0] _140_;
  wire [31:0] _141_;
  wire [31:0] _142_;
  wire [31:0] _143_;
  wire [31:0] _144_;
  wire [31:0] _145_;
  wire [31:0] _146_;
  wire [31:0] _147_;
  wire [31:0] _148_;
  wire [31:0] _149_;
  wire [31:0] _150_;
  wire [31:0] _151_;
  wire [31:0] _152_;
  wire [31:0] _153_;
  wire [31:0] _154_;
  wire [31:0] _155_;
  wire [31:0] _156_;
  wire [31:0] _157_;
  wire [31:0] _158_;
  wire [31:0] _159_;
  wire [31:0] _160_;
  wire [31:0] _161_;
  wire [31:0] _162_;
  wire [31:0] _163_;
  wire [31:0] _164_;
  wire [31:0] _165_;
  wire [31:0] _166_;
  wire [31:0] _167_;
  wire [31:0] _168_;
  wire [31:0] _169_;
  wire [31:0] _170_;
  wire [31:0] _171_;
  wire [31:0] _172_;
  wire [31:0] _173_;
  wire [31:0] _174_;
  wire [31:0] _175_;
  wire [31:0] _176_;
  wire [31:0] _177_;
  wire [31:0] _178_;
  wire [31:0] _179_;
  wire _180_;
  wire _181_;
  wire _182_;
  wire _183_;
  wire _184_;
  wire _185_;
  wire _186_;
  wire _187_;
  wire _188_;
  wire _189_;
  wire _190_;
  wire _191_;
  wire _192_;
  wire _193_;
  wire _194_;
  wire _195_;
  wire _196_;
  wire _197_;
  wire _198_;
  wire _199_;
  wire _200_;
  wire _201_;
  wire _202_;
  wire _203_;
  wire _204_;
  wire _205_;
  wire _206_;
  wire _207_;
  wire _208_;
  wire _209_;
  wire _210_;
  wire _211_;
  wire _212_;
  wire _213_;
  wire _214_;
  wire _215_;
  wire _216_;
  wire _217_;
  wire _218_;
  wire _219_;
  wire _220_;
  wire _221_;
  wire _222_;
  wire _223_;
  wire _224_;
  wire _225_;
  wire _226_;
  wire _227_;
  wire _228_;
  wire _229_;
  wire _230_;
  wire _231_;
  wire _232_;
  wire _233_;
  wire _234_;
  wire _235_;
  wire _236_;
  wire _237_;
  wire _238_;
  wire _239_;
  wire _240_;
  wire _241_;
  (* src = "sha256_core.v:170|sha256_w_mem.v:105" *)
  wire [5:0] _242_;
  (* src = "sha256_core.v:170|sha256_w_mem.v:105" *)
  wire [31:0] _243_;
  (* src = "sha256_core.v:170|sha256_w_mem.v:105" *)
  wire [31:0] _244_;
  (* src = "sha256_core.v:170|sha256_w_mem.v:105" *)
  wire [31:0] _245_;
  (* src = "sha256_core.v:170|sha256_w_mem.v:105" *)
  wire [31:0] _246_;
  (* src = "sha256_core.v:170|sha256_w_mem.v:105" *)
  wire [31:0] _247_;
  (* src = "sha256_core.v:170|sha256_w_mem.v:105" *)
  wire [31:0] _248_;
  (* src = "sha256_core.v:170|sha256_w_mem.v:105" *)
  wire [31:0] _249_;
  (* src = "sha256_core.v:170|sha256_w_mem.v:105" *)
  wire [31:0] _250_;
  (* src = "sha256_core.v:170|sha256_w_mem.v:105" *)
  wire [31:0] _251_;
  (* src = "sha256_core.v:170|sha256_w_mem.v:105" *)
  wire [31:0] _252_;
  (* src = "sha256_core.v:170|sha256_w_mem.v:105" *)
  wire [31:0] _253_;
  (* src = "sha256_core.v:170|sha256_w_mem.v:105" *)
  wire [31:0] _254_;
  (* src = "sha256_core.v:170|sha256_w_mem.v:105" *)
  wire [31:0] _255_;
  (* src = "sha256_core.v:170|sha256_w_mem.v:105" *)
  wire [31:0] _256_;
  (* src = "sha256_core.v:170|sha256_w_mem.v:105" *)
  wire [31:0] _257_;
  (* src = "sha256_core.v:170|sha256_w_mem.v:105" *)
  wire [31:0] _258_;
  (* src = "sha256_core.v:170|sha256_w_mem.v:165" *)
  wire [31:0] _259_;
  (* src = "sha256_core.v:170|sha256_w_mem.v:165" *)
  wire [31:0] _260_;
  (* src = "sha256_core.v:170|sha256_w_mem.v:165" *)
  wire [31:0] _261_;
  (* src = "sha256_core.v:170|sha256_w_mem.v:165" *)
  wire [31:0] _262_;
  (* src = "sha256_core.v:170|sha256_w_mem.v:165" *)
  wire [31:0] _263_;
  (* src = "sha256_core.v:170|sha256_w_mem.v:165" *)
  wire [31:0] _264_;
  (* src = "sha256_core.v:170|sha256_w_mem.v:165" *)
  wire [31:0] _265_;
  (* src = "sha256_core.v:170|sha256_w_mem.v:165" *)
  wire [31:0] _266_;
  (* src = "sha256_core.v:170|sha256_w_mem.v:165" *)
  wire [31:0] _267_;
  (* src = "sha256_core.v:170|sha256_w_mem.v:165" *)
  wire [31:0] _268_;
  (* src = "sha256_core.v:170|sha256_w_mem.v:165" *)
  wire [31:0] _269_;
  (* src = "sha256_core.v:170|sha256_w_mem.v:165" *)
  wire [31:0] _270_;
  (* src = "sha256_core.v:170|sha256_w_mem.v:165" *)
  wire [31:0] _271_;
  (* src = "sha256_core.v:170|sha256_w_mem.v:165" *)
  wire [31:0] _272_;
  (* src = "sha256_core.v:170|sha256_w_mem.v:165" *)
  wire [31:0] _273_;
  (* src = "sha256_core.v:170|sha256_w_mem.v:165" *)
  wire [31:0] _274_;
  (* src = "sha256_core.v:170|sha256_w_mem.v:150" *)
  wire [31:0] _275_;
  (* src = "sha256_core.v:170|sha256_w_mem.v:205" *)
  wire [31:0] _276_;
  (* src = "sha256_core.v:170|sha256_w_mem.v:205" *)
  wire [31:0] _277_;
  (* src = "sha256_core.v:170|sha256_w_mem.v:269" *)
  wire [5:0] _278_;
  wire _279_;
  wire _280_;
  wire _281_;
  wire _282_;
  wire _283_;
  wire _284_;
  wire _285_;
  wire [31:0] _286_;
  wire [31:0] _287_;
  wire [31:0] _288_;
  wire [31:0] _289_;
  wire [31:0] _290_;
  wire [31:0] _291_;
  wire [31:0] _292_;
  wire [31:0] _293_;
  wire [31:0] _294_;
  wire [31:0] _295_;
  wire [31:0] _296_;
  wire [31:0] _297_;
  wire [31:0] _298_;
  wire [31:0] _299_;
  (* src = "sha256_core.v:170|sha256_w_mem.v:228" *)
  wire _300_;
  (* src = "sha256_core.v:170|sha256_w_mem.v:228" *)
  wire _301_;
  (* src = "sha256_core.v:170|sha256_w_mem.v:152" *)
  wire _302_;
  wire _303_;
  wire _304_;
  wire _305_;
  wire _306_;
  wire _307_;
  wire _308_;
  wire _309_;
  wire _310_;
  wire _311_;
  wire _312_;
  wire _313_;
  wire _314_;
  wire _315_;
  wire _316_;
  wire _317_;
  (* src = "sha256_core.v:170|sha256_w_mem.v:198" *)
  wire [31:0] _318_;
  (* src = "sha256_core.v:170|sha256_w_mem.v:202" *)
  wire [31:0] _319_;
  (* src = "sha256_core.v:332" *)
  wire [31:0] _320_;
  (* src = "sha256_core.v:352" *)
  wire [31:0] _321_;
  (* src = "sha256_core.v:355" *)
  wire [31:0] _322_;
  (* src = "sha256_core.v:106" *)
  wire [31:0] H0_new;
  (* src = "sha256_core.v:105" *)
  reg [31:0] H0_reg;
  (* src = "sha256_core.v:108" *)
  wire [31:0] H1_new;
  (* src = "sha256_core.v:107" *)
  reg [31:0] H1_reg;
  (* src = "sha256_core.v:110" *)
  wire [31:0] H2_new;
  (* src = "sha256_core.v:109" *)
  reg [31:0] H2_reg;
  (* src = "sha256_core.v:112" *)
  wire [31:0] H3_new;
  (* src = "sha256_core.v:111" *)
  reg [31:0] H3_reg;
  (* src = "sha256_core.v:114" *)
  wire [31:0] H4_new;
  (* src = "sha256_core.v:113" *)
  reg [31:0] H4_reg;
  (* src = "sha256_core.v:116" *)
  wire [31:0] H5_new;
  (* src = "sha256_core.v:115" *)
  reg [31:0] H5_reg;
  (* src = "sha256_core.v:118" *)
  wire [31:0] H6_new;
  (* src = "sha256_core.v:117" *)
  reg [31:0] H6_reg;
  (* src = "sha256_core.v:120" *)
  wire [31:0] H7_new;
  (* src = "sha256_core.v:119" *)
  reg [31:0] H7_reg;
  (* src = "sha256_core.v:121" *)
  wire H_we;
  (* src = "sha256_core.v:103" *)
  wire a_h_we;
  (* src = "sha256_core.v:88" *)
  wire [31:0] a_new;
  (* src = "sha256_core.v:87" *)
  reg [31:0] a_reg;
  (* src = "sha256_core.v:90" *)
  wire [31:0] b_new;
  (* src = "sha256_core.v:89" *)
  reg [31:0] b_reg;
  (* src = "sha256_core.v:48" *)
  input [511:0] block;
  (* src = "sha256_core.v:92" *)
  wire [31:0] c_new;
  (* src = "sha256_core.v:91" *)
  reg [31:0] c_reg;
  (* src = "sha256_core.v:41" *)
  input clk;
  (* src = "sha256_core.v:94" *)
  wire [31:0] d_new;
  (* src = "sha256_core.v:93" *)
  reg [31:0] d_reg;
  (* src = "sha256_core.v:51" *)
  output [255:0] digest;
  (* src = "sha256_core.v:141" *)
  wire digest_init;
  (* src = "sha256_core.v:142" *)
  wire digest_update;
  (* src = "sha256_core.v:52" *)
  output digest_valid;
  (* src = "sha256_core.v:130" *)
  wire digest_valid_new;
  (* src = "sha256_core.v:129" *)
  reg digest_valid_reg;
  (* src = "sha256_core.v:131" *)
  wire digest_valid_we;
  (* src = "sha256_core.v:96" *)
  wire [31:0] e_new;
  (* src = "sha256_core.v:95" *)
  reg [31:0] e_reg;
  (* src = "sha256_core.v:98" *)
  wire [31:0] f_new;
  (* src = "sha256_core.v:97" *)
  reg [31:0] f_reg;
  (* src = "sha256_core.v:147" *)
  wire first_block;
  (* src = "sha256_core.v:100" *)
  wire [31:0] g_new;
  (* src = "sha256_core.v:99" *)
  reg [31:0] g_reg;
  (* src = "sha256_core.v:102" *)
  wire [31:0] h_new;
  (* src = "sha256_core.v:101" *)
  reg [31:0] h_reg;
  (* src = "sha256_core.v:44" *)
  input init;
  (* src = "sha256_core.v:164|sha256_k_constants.v:41" *)
  wire [31:0] \k_constants_inst.K ;
  (* src = "sha256_core.v:164|sha256_k_constants.v:40" *)
  wire [5:0] \k_constants_inst.addr ;
  (* src = "sha256_core.v:164|sha256_k_constants.v:47" *)
  wire [31:0] \k_constants_inst.tmp_K ;
  (* src = "sha256_core.v:154" *)
  wire [31:0] k_data;
  (* src = "sha256_core.v:46" *)
  input mode;
  (* src = "sha256_core.v:45" *)
  input next;
  (* src = "sha256_core.v:50" *)
  output ready;
  (* src = "sha256_core.v:149" *)
  wire ready_flag;
  (* src = "sha256_core.v:42" *)
  input reset_n;
  (* src = "sha256_core.v:134" *)
  wire [1:0] sha256_ctrl_new;
  (* src = "sha256_core.v:133" *)
  reg [1:0] sha256_ctrl_reg;
  (* src = "sha256_core.v:135" *)
  wire sha256_ctrl_we;
  (* src = "sha256_core.v:144" *)
  wire state_init;
  (* src = "sha256_core.v:145" *)
  wire state_update;
  (* src = "sha256_core.v:151" *)
  wire [31:0] t1;
  (* src = "sha256_core.v:329" *)
  wire [31:0] \t1_logic.ch ;
  (* src = "sha256_core.v:328" *)
  wire [31:0] \t1_logic.sum1 ;
  (* src = "sha256_core.v:152" *)
  wire [31:0] t2;
  (* src = "sha256_core.v:349" *)
  wire [31:0] \t2_logic.maj ;
  (* src = "sha256_core.v:348" *)
  wire [31:0] \t2_logic.sum0 ;
  (* src = "sha256_core.v:126" *)
  wire t_ctr_inc;
  (* src = "sha256_core.v:124" *)
  wire [5:0] t_ctr_new;
  (* src = "sha256_core.v:123" *)
  reg [5:0] t_ctr_reg;
  (* src = "sha256_core.v:127" *)
  wire t_ctr_rst;
  (* src = "sha256_core.v:125" *)
  wire t_ctr_we;
  (* src = "sha256_core.v:158" *)
  wire [31:0] w_data;
  (* src = "sha256_core.v:156" *)
  wire w_init;
  (* src = "sha256_core.v:170|sha256_w_mem.v:44" *)
  wire [511:0] \w_mem_inst.block ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:41" *)
  wire \w_mem_inst.clk ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:46" *)
  wire \w_mem_inst.init ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:47" *)
  wire \w_mem_inst.next ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:107" *)
  wire [31:0] \w_mem_inst.reg_update.i ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:42" *)
  wire \w_mem_inst.reset_n ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:48" *)
  wire [31:0] \w_mem_inst.w ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:82" *)
  wire [5:0] \w_mem_inst.w_ctr_new ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:81" *)
  reg [5:0] \w_mem_inst.w_ctr_reg ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:83" *)
  wire \w_mem_inst.w_ctr_we ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:63" *)
  wire [31:0] \w_mem_inst.w_mem00_new ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:64" *)
  wire [31:0] \w_mem_inst.w_mem01_new ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:65" *)
  wire [31:0] \w_mem_inst.w_mem02_new ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:66" *)
  wire [31:0] \w_mem_inst.w_mem03_new ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:67" *)
  wire [31:0] \w_mem_inst.w_mem04_new ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:68" *)
  wire [31:0] \w_mem_inst.w_mem05_new ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:69" *)
  wire [31:0] \w_mem_inst.w_mem06_new ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:70" *)
  wire [31:0] \w_mem_inst.w_mem07_new ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:71" *)
  wire [31:0] \w_mem_inst.w_mem08_new ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:72" *)
  wire [31:0] \w_mem_inst.w_mem09_new ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:73" *)
  wire [31:0] \w_mem_inst.w_mem10_new ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:74" *)
  wire [31:0] \w_mem_inst.w_mem11_new ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:75" *)
  wire [31:0] \w_mem_inst.w_mem12_new ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:76" *)
  wire [31:0] \w_mem_inst.w_mem13_new ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:77" *)
  wire [31:0] \w_mem_inst.w_mem14_new ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:78" *)
  wire [31:0] \w_mem_inst.w_mem15_new ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:40" *)
  reg [31:0] \w_mem_inst.w_mem[0] ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:40" *)
  reg [31:0] \w_mem_inst.w_mem[10] ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:40" *)
  reg [31:0] \w_mem_inst.w_mem[11] ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:40" *)
  reg [31:0] \w_mem_inst.w_mem[12] ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:40" *)
  reg [31:0] \w_mem_inst.w_mem[13] ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:40" *)
  reg [31:0] \w_mem_inst.w_mem[14] ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:40" *)
  reg [31:0] \w_mem_inst.w_mem[15] ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:40" *)
  reg [31:0] \w_mem_inst.w_mem[1] ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:40" *)
  reg [31:0] \w_mem_inst.w_mem[2] ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:40" *)
  reg [31:0] \w_mem_inst.w_mem[3] ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:40" *)
  reg [31:0] \w_mem_inst.w_mem[4] ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:40" *)
  reg [31:0] \w_mem_inst.w_mem[5] ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:40" *)
  reg [31:0] \w_mem_inst.w_mem[6] ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:40" *)
  reg [31:0] \w_mem_inst.w_mem[7] ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:40" *)
  reg [31:0] \w_mem_inst.w_mem[8] ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:40" *)
  reg [31:0] \w_mem_inst.w_mem[9] ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:171" *)
  wire [31:0] \w_mem_inst.w_mem_update_logic.d0 ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:172" *)
  wire [31:0] \w_mem_inst.w_mem_update_logic.d1 ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:167" *)
  wire [31:0] \w_mem_inst.w_mem_update_logic.w_0 ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:168" *)
  wire [31:0] \w_mem_inst.w_mem_update_logic.w_1 ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:170" *)
  wire [31:0] \w_mem_inst.w_mem_update_logic.w_14 ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:169" *)
  wire [31:0] \w_mem_inst.w_mem_update_logic.w_9 ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:79" *)
  wire \w_mem_inst.w_mem_we ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:90" *)
  wire [31:0] \w_mem_inst.w_new ;
  (* src = "sha256_core.v:170|sha256_w_mem.v:89" *)
  wire [31:0] \w_mem_inst.w_tmp ;
  (* src = "sha256_core.v:157" *)
  wire w_next;
  assign _059_ = H0_reg + (* src = "sha256_core.v:308" *) a_reg;
  assign _060_ = H1_reg + (* src = "sha256_core.v:309" *) b_reg;
  assign _061_ = H2_reg + (* src = "sha256_core.v:310" *) c_reg;
  assign _062_ = H3_reg + (* src = "sha256_core.v:311" *) d_reg;
  assign _063_ = H4_reg + (* src = "sha256_core.v:312" *) e_reg;
  assign _064_ = H5_reg + (* src = "sha256_core.v:313" *) f_reg;
  assign _065_ = H6_reg + (* src = "sha256_core.v:314" *) g_reg;
  assign _066_ = H7_reg + (* src = "sha256_core.v:315" *) h_reg;
  assign _067_ = h_reg + (* src = "sha256_core.v:337" *) \t1_logic.sum1 ;
  assign _068_ = _067_ + (* src = "sha256_core.v:337" *) \t1_logic.ch ;
  assign _069_ = _068_ + (* src = "sha256_core.v:337" *) w_data;
  assign t1 = _069_ + (* src = "sha256_core.v:337" *) \k_constants_inst.K ;
  assign t2 = \t2_logic.sum0  + (* src = "sha256_core.v:357" *) \t2_logic.maj ;
  assign _070_ = t1 + (* src = "sha256_core.v:422" *) t2;
  assign _071_ = d_reg + (* src = "sha256_core.v:426" *) t1;
  assign _072_ = t_ctr_reg + (* src = "sha256_core.v:454" *) 1'h1;
  assign _073_ = e_reg & (* src = "sha256_core.v:335" *) f_reg;
  assign _074_ = _082_ & (* src = "sha256_core.v:335" *) g_reg;
  assign _075_ = a_reg & (* src = "sha256_core.v:355" *) b_reg;
  assign _076_ = a_reg & (* src = "sha256_core.v:355" *) c_reg;
  assign _077_ = b_reg & (* src = "sha256_core.v:355" *) c_reg;
  assign _078_ = _084_ | _086_;
  assign _079_ = _086_ ? 1'h1 : _058_;
  assign sha256_ctrl_we = _078_ ? _079_ : w_init;
  assign _080_ = _085_ ? _056_ : 2'h0;
  assign sha256_ctrl_new = _084_ ? _057_ : _080_;
  assign w_init = _085_ ? _055_ : 1'h0;
  assign digest_valid_we = _086_ ? 1'h1 : w_init;
  assign digest_update = _086_ ? 1'h1 : 1'h0;
  assign _082_ = ~ (* src = "sha256_core.v:335" *) e_reg;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      digest_valid_reg <= 1'h0;
    else
      digest_valid_reg <= _012_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      a_reg <= 32'd0;
    else
      a_reg <= _008_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      b_reg <= 32'd0;
    else
      b_reg <= _009_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      c_reg <= 32'd0;
    else
      c_reg <= _010_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      d_reg <= 32'd0;
    else
      d_reg <= _011_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      e_reg <= 32'd0;
    else
      e_reg <= _013_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      f_reg <= 32'd0;
    else
      f_reg <= _014_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      g_reg <= 32'd0;
    else
      g_reg <= _015_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      h_reg <= 32'd0;
    else
      h_reg <= _016_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      H0_reg <= 32'd0;
    else
      H0_reg <= _000_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      H1_reg <= 32'd0;
    else
      H1_reg <= _001_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      H2_reg <= 32'd0;
    else
      H2_reg <= _002_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      H3_reg <= 32'd0;
    else
      H3_reg <= _003_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      H4_reg <= 32'd0;
    else
      H4_reg <= _004_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      H5_reg <= 32'd0;
    else
      H5_reg <= _005_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      H6_reg <= 32'd0;
    else
      H6_reg <= _006_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      H7_reg <= 32'd0;
    else
      H7_reg <= _007_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      t_ctr_reg <= 6'h00;
    else
      t_ctr_reg <= _018_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      sha256_ctrl_reg <= 2'h0;
    else
      sha256_ctrl_reg <= _017_;
  assign _083_ = _081_ ? (* full_case = 32'd1 *) (* src = "sha256_core.v:526" *) 1'h1 : 1'h0;
  assign _058_ = _084_ ? (* full_case = 32'd1 *) (* src = "sha256_core.v:489" *) _083_ : 1'hx;
  assign _057_ = _081_ ? (* full_case = 32'd1 *) (* src = "sha256_core.v:526" *) 2'h2 : 2'h0;
  assign _056_ = next ? (* full_case = 32'd1 *) (* src = "sha256_core.v:507" *) 2'h1 : _054_;
  assign _055_ = next ? (* full_case = 32'd1 *) (* src = "sha256_core.v:507" *) 1'h1 : _049_;
  assign _054_ = init ? (* full_case = 32'd1 *) (* src = "sha256_core.v:494" *) 2'h1 : 2'h0;
  assign _049_ = init ? (* full_case = 32'd1 *) (* src = "sha256_core.v:494" *) 1'h1 : 1'h0;
  assign digest_init = _085_ ? (* full_case = 32'd1 *) (* src = "sha256_core.v:489" *) _049_ : 1'h0;
  assign ready = _085_ ? (* full_case = 32'd1 *) (* src = "sha256_core.v:489" *) 1'h1 : 1'h0;
  assign _085_ = ! (* full_case = 32'd1 *) (* src = "sha256_core.v:489" *) sha256_ctrl_reg;
  assign _086_ = sha256_ctrl_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:489" *) 2'h2;
  assign \w_mem_inst.next  = _084_ ? (* full_case = 32'd1 *) (* src = "sha256_core.v:489" *) 1'h1 : 1'h0;
  assign _084_ = sha256_ctrl_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:489" *) 2'h1;
  assign t_ctr_new = \w_mem_inst.next  ? (* full_case = 32'd1 *) (* src = "sha256_core.v:452" *) _072_ : 6'h00;
  assign h_new = \w_mem_inst.next  ? (* full_case = 32'd1 *) (* src = "sha256_core.v:420" *) g_reg : _036_;
  assign g_new = \w_mem_inst.next  ? (* full_case = 32'd1 *) (* src = "sha256_core.v:420" *) f_reg : _035_;
  assign f_new = \w_mem_inst.next  ? (* full_case = 32'd1 *) (* src = "sha256_core.v:420" *) e_reg : _034_;
  assign e_new = \w_mem_inst.next  ? (* full_case = 32'd1 *) (* src = "sha256_core.v:420" *) _071_ : _033_;
  assign d_new = \w_mem_inst.next  ? (* full_case = 32'd1 *) (* src = "sha256_core.v:420" *) c_reg : _032_;
  assign c_new = \w_mem_inst.next  ? (* full_case = 32'd1 *) (* src = "sha256_core.v:420" *) b_reg : _031_;
  assign b_new = \w_mem_inst.next  ? (* full_case = 32'd1 *) (* src = "sha256_core.v:420" *) a_reg : _030_;
  assign a_new = \w_mem_inst.next  ? (* full_case = 32'd1 *) (* src = "sha256_core.v:420" *) _070_ : _029_;
  assign _053_ = digest_init ? (* full_case = 32'd1 *) (* src = "sha256_core.v:382" *) _044_ : H7_reg;
  assign _052_ = digest_init ? (* full_case = 32'd1 *) (* src = "sha256_core.v:382" *) _043_ : H6_reg;
  assign _051_ = digest_init ? (* full_case = 32'd1 *) (* src = "sha256_core.v:382" *) _042_ : H5_reg;
  assign _050_ = digest_init ? (* full_case = 32'd1 *) (* src = "sha256_core.v:382" *) _041_ : H4_reg;
  assign _048_ = digest_init ? (* full_case = 32'd1 *) (* src = "sha256_core.v:382" *) _040_ : H3_reg;
  assign _047_ = digest_init ? (* full_case = 32'd1 *) (* src = "sha256_core.v:382" *) _039_ : H2_reg;
  assign _046_ = digest_init ? (* full_case = 32'd1 *) (* src = "sha256_core.v:382" *) _038_ : H1_reg;
  assign _045_ = digest_init ? (* full_case = 32'd1 *) (* src = "sha256_core.v:382" *) _037_ : H0_reg;
  assign _036_ = w_init ? (* full_case = 32'd1 *) (* src = "sha256_core.v:379" *) _053_ : 32'd0;
  assign _035_ = w_init ? (* full_case = 32'd1 *) (* src = "sha256_core.v:379" *) _052_ : 32'd0;
  assign _034_ = w_init ? (* full_case = 32'd1 *) (* src = "sha256_core.v:379" *) _051_ : 32'd0;
  assign _033_ = w_init ? (* full_case = 32'd1 *) (* src = "sha256_core.v:379" *) _050_ : 32'd0;
  assign _032_ = w_init ? (* full_case = 32'd1 *) (* src = "sha256_core.v:379" *) _048_ : 32'd0;
  assign _031_ = w_init ? (* full_case = 32'd1 *) (* src = "sha256_core.v:379" *) _047_ : 32'd0;
  assign _030_ = w_init ? (* full_case = 32'd1 *) (* src = "sha256_core.v:379" *) _046_ : 32'd0;
  assign _029_ = w_init ? (* full_case = 32'd1 *) (* src = "sha256_core.v:379" *) _045_ : 32'd0;
  assign H_we = digest_update ? (* full_case = 32'd1 *) (* src = "sha256_core.v:306" *) 1'h1 : _027_;
  assign H7_new = digest_update ? (* full_case = 32'd1 *) (* src = "sha256_core.v:306" *) _066_ : _026_;
  assign H6_new = digest_update ? (* full_case = 32'd1 *) (* src = "sha256_core.v:306" *) _065_ : _025_;
  assign H5_new = digest_update ? (* full_case = 32'd1 *) (* src = "sha256_core.v:306" *) _064_ : _024_;
  assign H4_new = digest_update ? (* full_case = 32'd1 *) (* src = "sha256_core.v:306" *) _063_ : _023_;
  assign H3_new = digest_update ? (* full_case = 32'd1 *) (* src = "sha256_core.v:306" *) _062_ : _022_;
  assign H2_new = digest_update ? (* full_case = 32'd1 *) (* src = "sha256_core.v:306" *) _061_ : _021_;
  assign H1_new = digest_update ? (* full_case = 32'd1 *) (* src = "sha256_core.v:306" *) _060_ : _020_;
  assign H0_new = digest_update ? (* full_case = 32'd1 *) (* src = "sha256_core.v:306" *) _059_ : _019_;
  assign _044_ = mode ? (* full_case = 32'd1 *) (* src = "sha256_core.v:282" *) 32'd1541459225 : 32'd3204075428;
  assign _043_ = mode ? (* full_case = 32'd1 *) (* src = "sha256_core.v:282" *) 32'd528734635 : 32'd1694076839;
  assign _042_ = mode ? (* full_case = 32'd1 *) (* src = "sha256_core.v:282" *) 32'd2600822924 : 32'd1750603025;
  assign _041_ = mode ? (* full_case = 32'd1 *) (* src = "sha256_core.v:282" *) 32'd1359893119 : 32'd4290775857;
  assign _040_ = mode ? (* full_case = 32'd1 *) (* src = "sha256_core.v:282" *) 32'd2773480762 : 32'd4144912697;
  assign _039_ = mode ? (* full_case = 32'd1 *) (* src = "sha256_core.v:282" *) 32'd1013904242 : 32'd812702999;
  assign _038_ = mode ? (* full_case = 32'd1 *) (* src = "sha256_core.v:282" *) 32'd3144134277 : 32'd914150663;
  assign _037_ = mode ? (* full_case = 32'd1 *) (* src = "sha256_core.v:282" *) 32'd1779033703 : 32'd3238371032;
  assign _026_ = digest_init ? (* full_case = 32'd1 *) (* src = "sha256_core.v:279" *) _044_ : 32'd0;
  assign _025_ = digest_init ? (* full_case = 32'd1 *) (* src = "sha256_core.v:279" *) _043_ : 32'd0;
  assign _024_ = digest_init ? (* full_case = 32'd1 *) (* src = "sha256_core.v:279" *) _042_ : 32'd0;
  assign _023_ = digest_init ? (* full_case = 32'd1 *) (* src = "sha256_core.v:279" *) _041_ : 32'd0;
  assign _022_ = digest_init ? (* full_case = 32'd1 *) (* src = "sha256_core.v:279" *) _040_ : 32'd0;
  assign _021_ = digest_init ? (* full_case = 32'd1 *) (* src = "sha256_core.v:279" *) _039_ : 32'd0;
  assign _020_ = digest_init ? (* full_case = 32'd1 *) (* src = "sha256_core.v:279" *) _038_ : 32'd0;
  assign _019_ = digest_init ? (* full_case = 32'd1 *) (* src = "sha256_core.v:279" *) _037_ : 32'd0;
  assign _027_ = digest_init ? (* full_case = 32'd1 *) (* src = "sha256_core.v:279" *) 1'h1 : 1'h0;
  assign _017_ = sha256_ctrl_we ? (* src = "sha256_core.v:256" *) sha256_ctrl_new : sha256_ctrl_reg;
  assign _018_ = a_h_we ? (* src = "sha256_core.v:250" *) t_ctr_new : t_ctr_reg;
  assign _007_ = H_we ? (* src = "sha256_core.v:238" *) H7_new : H7_reg;
  assign _006_ = H_we ? (* src = "sha256_core.v:238" *) H6_new : H6_reg;
  assign _005_ = H_we ? (* src = "sha256_core.v:238" *) H5_new : H5_reg;
  assign _004_ = H_we ? (* src = "sha256_core.v:238" *) H4_new : H4_reg;
  assign _003_ = H_we ? (* src = "sha256_core.v:238" *) H3_new : H3_reg;
  assign _002_ = H_we ? (* src = "sha256_core.v:238" *) H2_new : H2_reg;
  assign _001_ = H_we ? (* src = "sha256_core.v:238" *) H1_new : H1_reg;
  assign _000_ = H_we ? (* src = "sha256_core.v:238" *) H0_new : H0_reg;
  assign _016_ = a_h_we ? (* src = "sha256_core.v:226" *) h_new : h_reg;
  assign _015_ = a_h_we ? (* src = "sha256_core.v:226" *) g_new : g_reg;
  assign _014_ = a_h_we ? (* src = "sha256_core.v:226" *) f_new : f_reg;
  assign _013_ = a_h_we ? (* src = "sha256_core.v:226" *) e_new : e_reg;
  assign _011_ = a_h_we ? (* src = "sha256_core.v:226" *) d_new : d_reg;
  assign _010_ = a_h_we ? (* src = "sha256_core.v:226" *) c_new : c_reg;
  assign _009_ = a_h_we ? (* src = "sha256_core.v:226" *) b_new : b_reg;
  assign _008_ = a_h_we ? (* src = "sha256_core.v:226" *) a_new : a_reg;
  assign _012_ = digest_valid_we ? (* src = "sha256_core.v:253" *) digest_update : digest_valid_reg;
  assign _102_ = _180_ | _081_;
  assign _103_ = _184_ | _183_;
  assign _104_ = _188_ | _187_;
  assign _105_ = _192_ | _191_;
  assign _106_ = _196_ | _195_;
  assign _107_ = _200_ | _199_;
  assign _108_ = _204_ | _203_;
  assign _109_ = _208_ | _207_;
  assign _110_ = _212_ | _211_;
  assign _111_ = _216_ | _215_;
  assign _112_ = _220_ | _219_;
  assign _113_ = _224_ | _223_;
  assign _114_ = _228_ | _227_;
  assign _115_ = _232_ | _231_;
  assign _116_ = _236_ | _235_;
  assign _117_ = _240_ | _239_;
  assign _087_ = | { _181_, _182_, _102_ };
  assign _088_ = | { _189_, _190_, _104_ };
  assign _089_ = | { _181_, _182_, _185_, _186_, _103_, _102_ };
  assign _090_ = | { _197_, _198_, _106_ };
  assign _091_ = | { _108_, _205_, _206_ };
  assign _092_ = | { _197_, _198_, _201_, _202_, _107_, _106_ };
  assign _093_ = | { _181_, _182_, _185_, _186_, _189_, _190_, _193_, _194_, _105_, _104_, _103_, _102_ };
  assign _094_ = | { _110_, _213_, _214_ };
  assign _095_ = | { _221_, _222_, _112_ };
  assign _096_ = | { _110_, _213_, _214_, _217_, _218_, _111_ };
  assign _097_ = | { _229_, _230_, _114_ };
  assign _098_ = | { _237_, _238_, _116_ };
  assign _099_ = | { _229_, _230_, _233_, _234_, _115_, _114_ };
  assign _100_ = | { _110_, _213_, _214_, _217_, _218_, _221_, _222_, _225_, _226_, _113_, _112_, _111_ };
  assign _101_ = | { _109_, _108_, _181_, _182_, _185_, _186_, _189_, _190_, _193_, _194_, _197_, _198_, _201_, _202_, _205_, _206_, _209_, _210_, _107_, _106_, _105_, _104_, _103_, _102_ };
  assign _118_ = _081_ ? 32'd3329325298 : 32'd3204031479;
  assign _119_ = _181_ ? 32'd2756734187 : 32'd2428436474;
  assign _120_ = _102_ ? _118_ : _119_;
  assign _121_ = _183_ ? 32'd2361852424 : 32'd2227730452;
  assign _122_ = _185_ ? 32'd2024104815 : 32'd1955562222;
  assign _123_ = _103_ ? _121_ : _122_;
  assign _124_ = _087_ ? _120_ : _123_;
  assign _125_ = _187_ ? 32'd1747873779 : 32'd1537002063;
  assign _126_ = _189_ ? 32'd1322822218 : 32'd958139571;
  assign _127_ = _104_ ? _125_ : _126_;
  assign _128_ = _191_ ? 32'd883997877 : 32'd659060556;
  assign _129_ = _193_ ? 32'd506948616 : 32'd430227734;
  assign _130_ = _105_ ? _128_ : _129_;
  assign _131_ = _088_ ? _127_ : _130_;
  assign _132_ = _089_ ? _124_ : _131_;
  assign _133_ = _195_ ? 32'd275423344 : 32'd4094571909;
  assign _134_ = _197_ ? 32'd3600352804 : 32'd3516065817;
  assign _135_ = _106_ ? _133_ : _134_;
  assign _136_ = _199_ ? 32'd3345764771 : 32'd3259730800;
  assign _137_ = _201_ ? 32'd2820302411 : 32'd2730485921;
  assign _138_ = _107_ ? _136_ : _137_;
  assign _139_ = _090_ ? _135_ : _138_;
  assign _140_ = _203_ ? 32'd2456956037 : 32'd2177026350;
  assign _141_ = _205_ ? 32'd1986661051 : 32'd1695183700;
  assign _142_ = _108_ ? _140_ : _141_;
  assign _143_ = _207_ ? 32'd1396182291 : 32'd1294757372;
  assign _144_ = _209_ ? 32'd773529912 : 32'd666307205;
  assign _145_ = _109_ ? _143_ : _144_;
  assign _146_ = _091_ ? _142_ : _145_;
  assign _147_ = _092_ ? _139_ : _146_;
  assign _148_ = _093_ ? _132_ : _147_;
  assign _149_ = _211_ ? 32'd338241895 : 32'd113926993;
  assign _150_ = _213_ ? 32'd3584528711 : 32'd3336571891;
  assign _151_ = _110_ ? _149_ : _150_;
  assign _152_ = _215_ ? 32'd3210313671 : 32'd2952996808;
  assign _153_ = _217_ ? 32'd2821834349 : 32'd2554220882;
  assign _154_ = _111_ ? _152_ : _153_;
  assign _155_ = _094_ ? _151_ : _154_;
  assign _156_ = _219_ ? 32'd1996064986 : 32'd1555081692;
  assign _157_ = _221_ ? 32'd1249150122 : 32'd770255983;
  assign _158_ = _112_ ? _156_ : _157_;
  assign _159_ = _223_ ? 32'd604807628 : 32'd264347078;
  assign _160_ = _225_ ? 32'd4022224774 : 32'd3835390401;
  assign _161_ = _113_ ? _159_ : _160_;
  assign _162_ = _095_ ? _158_ : _161_;
  assign _163_ = _096_ ? _155_ : _162_;
  assign _164_ = _227_ ? 32'd3248222580 : 32'd2614888103;
  assign _165_ = _229_ ? 32'd2162078206 : 32'd1925078388;
  assign _166_ = _114_ ? _164_ : _165_;
  assign _167_ = _231_ ? 32'd1426881987 : 32'd607225278;
  assign _168_ = _233_ ? 32'd310598401 : 32'd3624381080;
  assign _169_ = _115_ ? _167_ : _168_;
  assign _170_ = _097_ ? _166_ : _169_;
  assign _171_ = _235_ ? 32'd2870763221 : 32'd2453635748;
  assign _172_ = _237_ ? 32'd1508970993 : 32'd961987163;
  assign _173_ = _116_ ? _171_ : _172_;
  assign _174_ = _239_ ? 32'd3921009573 : 32'd3049323471;
  assign _175_ = _241_ ? 32'd1899447441 : 32'd1116352408;
  assign _176_ = _117_ ? _174_ : _175_;
  assign _177_ = _098_ ? _173_ : _176_;
  assign _178_ = _099_ ? _170_ : _177_;
  assign _179_ = _100_ ? _163_ : _178_;
  assign \k_constants_inst.K  = _101_ ? _148_ : _179_;
  assign _081_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h3f;
  assign _180_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h3e;
  assign _181_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h3d;
  assign _182_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h3c;
  assign _183_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h3b;
  assign _184_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h3a;
  assign _185_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h39;
  assign _186_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h38;
  assign _187_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h37;
  assign _188_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h36;
  assign _189_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h35;
  assign _190_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h34;
  assign _191_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h33;
  assign _192_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h32;
  assign _193_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h31;
  assign _194_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h30;
  assign _195_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h2f;
  assign _196_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h2e;
  assign _197_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h2d;
  assign _198_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h2c;
  assign _199_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h2b;
  assign _200_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h2a;
  assign _201_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h29;
  assign _202_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h28;
  assign _203_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h27;
  assign _204_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h26;
  assign _205_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h25;
  assign _206_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h24;
  assign _207_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h23;
  assign _208_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h22;
  assign _209_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h21;
  assign _210_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h20;
  assign _211_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h1f;
  assign _212_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h1e;
  assign _213_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h1d;
  assign _214_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h1c;
  assign _215_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h1b;
  assign _216_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h1a;
  assign _217_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h19;
  assign _218_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h18;
  assign _219_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h17;
  assign _220_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h16;
  assign _221_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h15;
  assign _222_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h14;
  assign _223_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h13;
  assign _224_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h12;
  assign _225_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h11;
  assign _226_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h10;
  assign _227_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h0f;
  assign _228_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h0e;
  assign _229_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h0d;
  assign _230_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h0c;
  assign _231_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h0b;
  assign _232_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h0a;
  assign _233_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h09;
  assign _234_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h08;
  assign _235_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h07;
  assign _236_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h06;
  assign _237_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h05;
  assign _238_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h04;
  assign _239_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h03;
  assign _240_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h02;
  assign _241_ = t_ctr_reg == (* full_case = 32'd1 *) (* src = "sha256_core.v:164|sha256_k_constants.v:61" *) 6'h01;
  assign _276_ = \w_mem_inst.w_mem_update_logic.d1  + (* src = "sha256_core.v:170|sha256_w_mem.v:205" *) \w_mem_inst.w_mem[9] ;
  assign _277_ = _276_ + (* src = "sha256_core.v:170|sha256_w_mem.v:205" *) \w_mem_inst.w_mem_update_logic.d0 ;
  assign \w_mem_inst.w_new  = _277_ + (* src = "sha256_core.v:170|sha256_w_mem.v:205" *) \w_mem_inst.w_mem[0] ;
  assign _278_ = \w_mem_inst.w_ctr_reg  + (* src = "sha256_core.v:170|sha256_w_mem.v:269" *) 6'h01;
  assign _282_ = _304_ | _303_;
  assign _283_ = _308_ | _307_;
  assign _284_ = _312_ | _311_;
  assign _285_ = _316_ | _315_;
  assign _279_ = | { _305_, _306_, _282_ };
  assign _280_ = | { _313_, _314_, _284_ };
  assign _281_ = | { _305_, _306_, _309_, _310_, _283_, _282_ };
  assign _286_ = _303_ ? \w_mem_inst.w_mem[15]  : \w_mem_inst.w_mem[14] ;
  assign _287_ = _305_ ? \w_mem_inst.w_mem[13]  : \w_mem_inst.w_mem[12] ;
  assign _288_ = _282_ ? _286_ : _287_;
  assign _289_ = _307_ ? \w_mem_inst.w_mem[11]  : \w_mem_inst.w_mem[10] ;
  assign _290_ = _309_ ? \w_mem_inst.w_mem[9]  : \w_mem_inst.w_mem[8] ;
  assign _291_ = _283_ ? _289_ : _290_;
  assign _292_ = _279_ ? _288_ : _291_;
  assign _293_ = _311_ ? \w_mem_inst.w_mem[7]  : \w_mem_inst.w_mem[6] ;
  assign _294_ = _313_ ? \w_mem_inst.w_mem[5]  : \w_mem_inst.w_mem[4] ;
  assign _295_ = _284_ ? _293_ : _294_;
  assign _296_ = _315_ ? \w_mem_inst.w_mem[3]  : \w_mem_inst.w_mem[2] ;
  assign _297_ = _317_ ? \w_mem_inst.w_mem[1]  : \w_mem_inst.w_mem[0] ;
  assign _298_ = _285_ ? _296_ : _297_;
  assign _299_ = _280_ ? _295_ : _298_;
  assign _275_ = _281_ ? _292_ : _299_;
  assign _300_ = \w_mem_inst.w_ctr_reg  > (* src = "sha256_core.v:170|sha256_w_mem.v:228" *) 32'd15;
  assign _301_ = \w_mem_inst.next  && (* src = "sha256_core.v:170|sha256_w_mem.v:228" *) _300_;
  assign _302_ = \w_mem_inst.w_ctr_reg  < (* src = "sha256_core.v:170|sha256_w_mem.v:152" *) 32'd16;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem_inst.w_ctr_reg  <= 6'h00;
    else
      \w_mem_inst.w_ctr_reg  <= _242_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem_inst.w_mem[0]  <= 32'd0;
    else
      \w_mem_inst.w_mem[0]  <= _243_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem_inst.w_mem[1]  <= 32'd0;
    else
      \w_mem_inst.w_mem[1]  <= _250_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem_inst.w_mem[2]  <= 32'd0;
    else
      \w_mem_inst.w_mem[2]  <= _251_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem_inst.w_mem[3]  <= 32'd0;
    else
      \w_mem_inst.w_mem[3]  <= _252_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem_inst.w_mem[4]  <= 32'd0;
    else
      \w_mem_inst.w_mem[4]  <= _253_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem_inst.w_mem[5]  <= 32'd0;
    else
      \w_mem_inst.w_mem[5]  <= _254_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem_inst.w_mem[6]  <= 32'd0;
    else
      \w_mem_inst.w_mem[6]  <= _255_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem_inst.w_mem[7]  <= 32'd0;
    else
      \w_mem_inst.w_mem[7]  <= _256_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem_inst.w_mem[8]  <= 32'd0;
    else
      \w_mem_inst.w_mem[8]  <= _257_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem_inst.w_mem[9]  <= 32'd0;
    else
      \w_mem_inst.w_mem[9]  <= _258_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem_inst.w_mem[10]  <= 32'd0;
    else
      \w_mem_inst.w_mem[10]  <= _244_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem_inst.w_mem[11]  <= 32'd0;
    else
      \w_mem_inst.w_mem[11]  <= _245_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem_inst.w_mem[12]  <= 32'd0;
    else
      \w_mem_inst.w_mem[12]  <= _246_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem_inst.w_mem[13]  <= 32'd0;
    else
      \w_mem_inst.w_mem[13]  <= _247_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem_inst.w_mem[14]  <= 32'd0;
    else
      \w_mem_inst.w_mem[14]  <= _248_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem_inst.w_mem[15]  <= 32'd0;
    else
      \w_mem_inst.w_mem[15]  <= _249_;
  assign a_h_we = \w_mem_inst.next  ? (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:267" *) 1'h1 : _028_;
  assign \w_mem_inst.w_ctr_new  = \w_mem_inst.next  ? (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:267" *) _278_ : 6'h00;
  assign \w_mem_inst.w_mem_we  = _301_ ? (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:228" *) 1'h1 : _028_;
  assign \w_mem_inst.w_mem15_new  = _301_ ? (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:228" *) \w_mem_inst.w_new  : _274_;
  assign \w_mem_inst.w_mem14_new  = _301_ ? (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:228" *) \w_mem_inst.w_mem[15]  : _273_;
  assign \w_mem_inst.w_mem13_new  = _301_ ? (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:228" *) \w_mem_inst.w_mem[14]  : _272_;
  assign \w_mem_inst.w_mem12_new  = _301_ ? (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:228" *) \w_mem_inst.w_mem[13]  : _271_;
  assign \w_mem_inst.w_mem11_new  = _301_ ? (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:228" *) \w_mem_inst.w_mem[12]  : _270_;
  assign \w_mem_inst.w_mem10_new  = _301_ ? (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:228" *) \w_mem_inst.w_mem[11]  : _269_;
  assign \w_mem_inst.w_mem09_new  = _301_ ? (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:228" *) \w_mem_inst.w_mem[10]  : _268_;
  assign \w_mem_inst.w_mem08_new  = _301_ ? (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:228" *) \w_mem_inst.w_mem[9]  : _267_;
  assign \w_mem_inst.w_mem07_new  = _301_ ? (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:228" *) \w_mem_inst.w_mem[8]  : _266_;
  assign \w_mem_inst.w_mem06_new  = _301_ ? (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:228" *) \w_mem_inst.w_mem[7]  : _265_;
  assign \w_mem_inst.w_mem05_new  = _301_ ? (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:228" *) \w_mem_inst.w_mem[6]  : _264_;
  assign \w_mem_inst.w_mem04_new  = _301_ ? (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:228" *) \w_mem_inst.w_mem[5]  : _263_;
  assign \w_mem_inst.w_mem03_new  = _301_ ? (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:228" *) \w_mem_inst.w_mem[4]  : _262_;
  assign \w_mem_inst.w_mem02_new  = _301_ ? (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:228" *) \w_mem_inst.w_mem[3]  : _261_;
  assign \w_mem_inst.w_mem01_new  = _301_ ? (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:228" *) \w_mem_inst.w_mem[2]  : _260_;
  assign \w_mem_inst.w_mem00_new  = _301_ ? (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:228" *) \w_mem_inst.w_mem[1]  : _259_;
  assign _028_ = w_init ? (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:207" *) 1'h1 : 1'h0;
  assign _274_ = w_init ? (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:207" *) block[31:0] : 32'd0;
  assign _273_ = w_init ? (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:207" *) block[63:32] : 32'd0;
  assign _272_ = w_init ? (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:207" *) block[95:64] : 32'd0;
  assign _271_ = w_init ? (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:207" *) block[127:96] : 32'd0;
  assign _270_ = w_init ? (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:207" *) block[159:128] : 32'd0;
  assign _269_ = w_init ? (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:207" *) block[191:160] : 32'd0;
  assign _268_ = w_init ? (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:207" *) block[223:192] : 32'd0;
  assign _267_ = w_init ? (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:207" *) block[255:224] : 32'd0;
  assign _266_ = w_init ? (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:207" *) block[287:256] : 32'd0;
  assign _265_ = w_init ? (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:207" *) block[319:288] : 32'd0;
  assign _264_ = w_init ? (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:207" *) block[351:320] : 32'd0;
  assign _263_ = w_init ? (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:207" *) block[383:352] : 32'd0;
  assign _262_ = w_init ? (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:207" *) block[415:384] : 32'd0;
  assign _261_ = w_init ? (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:207" *) block[447:416] : 32'd0;
  assign _260_ = w_init ? (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:207" *) block[479:448] : 32'd0;
  assign _259_ = w_init ? (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:207" *) block[511:480] : 32'd0;
  assign _303_ = \w_mem_inst.w_ctr_reg [3:0] == (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:40" *) 4'hf;
  assign _304_ = \w_mem_inst.w_ctr_reg [3:0] == (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:40" *) 4'he;
  assign _305_ = \w_mem_inst.w_ctr_reg [3:0] == (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:40" *) 4'hd;
  assign _306_ = \w_mem_inst.w_ctr_reg [3:0] == (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:40" *) 4'hc;
  assign _307_ = \w_mem_inst.w_ctr_reg [3:0] == (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:40" *) 4'hb;
  assign _308_ = \w_mem_inst.w_ctr_reg [3:0] == (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:40" *) 4'ha;
  assign _309_ = \w_mem_inst.w_ctr_reg [3:0] == (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:40" *) 4'h9;
  assign _310_ = \w_mem_inst.w_ctr_reg [3:0] == (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:40" *) 4'h8;
  assign _311_ = \w_mem_inst.w_ctr_reg [3:0] == (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:40" *) 4'h7;
  assign _312_ = \w_mem_inst.w_ctr_reg [3:0] == (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:40" *) 4'h6;
  assign _313_ = \w_mem_inst.w_ctr_reg [3:0] == (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:40" *) 4'h5;
  assign _314_ = \w_mem_inst.w_ctr_reg [3:0] == (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:40" *) 4'h4;
  assign _315_ = \w_mem_inst.w_ctr_reg [3:0] == (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:40" *) 4'h3;
  assign _316_ = \w_mem_inst.w_ctr_reg [3:0] == (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:40" *) 4'h2;
  assign _317_ = \w_mem_inst.w_ctr_reg [3:0] == (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:40" *) 4'h1;
  assign w_data = _302_ ? (* full_case = 32'd1 *) (* src = "sha256_core.v:170|sha256_w_mem.v:152" *) _275_ : \w_mem_inst.w_new ;
  assign _249_ = \w_mem_inst.w_mem_we  ? (* src = "sha256_core.v:170|sha256_w_mem.v:118" *) \w_mem_inst.w_mem15_new  : \w_mem_inst.w_mem[15] ;
  assign _248_ = \w_mem_inst.w_mem_we  ? (* src = "sha256_core.v:170|sha256_w_mem.v:118" *) \w_mem_inst.w_mem14_new  : \w_mem_inst.w_mem[14] ;
  assign _247_ = \w_mem_inst.w_mem_we  ? (* src = "sha256_core.v:170|sha256_w_mem.v:118" *) \w_mem_inst.w_mem13_new  : \w_mem_inst.w_mem[13] ;
  assign _246_ = \w_mem_inst.w_mem_we  ? (* src = "sha256_core.v:170|sha256_w_mem.v:118" *) \w_mem_inst.w_mem12_new  : \w_mem_inst.w_mem[12] ;
  assign _245_ = \w_mem_inst.w_mem_we  ? (* src = "sha256_core.v:170|sha256_w_mem.v:118" *) \w_mem_inst.w_mem11_new  : \w_mem_inst.w_mem[11] ;
  assign _244_ = \w_mem_inst.w_mem_we  ? (* src = "sha256_core.v:170|sha256_w_mem.v:118" *) \w_mem_inst.w_mem10_new  : \w_mem_inst.w_mem[10] ;
  assign _258_ = \w_mem_inst.w_mem_we  ? (* src = "sha256_core.v:170|sha256_w_mem.v:118" *) \w_mem_inst.w_mem09_new  : \w_mem_inst.w_mem[9] ;
  assign _257_ = \w_mem_inst.w_mem_we  ? (* src = "sha256_core.v:170|sha256_w_mem.v:118" *) \w_mem_inst.w_mem08_new  : \w_mem_inst.w_mem[8] ;
  assign _256_ = \w_mem_inst.w_mem_we  ? (* src = "sha256_core.v:170|sha256_w_mem.v:118" *) \w_mem_inst.w_mem07_new  : \w_mem_inst.w_mem[7] ;
  assign _255_ = \w_mem_inst.w_mem_we  ? (* src = "sha256_core.v:170|sha256_w_mem.v:118" *) \w_mem_inst.w_mem06_new  : \w_mem_inst.w_mem[6] ;
  assign _254_ = \w_mem_inst.w_mem_we  ? (* src = "sha256_core.v:170|sha256_w_mem.v:118" *) \w_mem_inst.w_mem05_new  : \w_mem_inst.w_mem[5] ;
  assign _253_ = \w_mem_inst.w_mem_we  ? (* src = "sha256_core.v:170|sha256_w_mem.v:118" *) \w_mem_inst.w_mem04_new  : \w_mem_inst.w_mem[4] ;
  assign _252_ = \w_mem_inst.w_mem_we  ? (* src = "sha256_core.v:170|sha256_w_mem.v:118" *) \w_mem_inst.w_mem03_new  : \w_mem_inst.w_mem[3] ;
  assign _251_ = \w_mem_inst.w_mem_we  ? (* src = "sha256_core.v:170|sha256_w_mem.v:118" *) \w_mem_inst.w_mem02_new  : \w_mem_inst.w_mem[2] ;
  assign _250_ = \w_mem_inst.w_mem_we  ? (* src = "sha256_core.v:170|sha256_w_mem.v:118" *) \w_mem_inst.w_mem01_new  : \w_mem_inst.w_mem[1] ;
  assign _243_ = \w_mem_inst.w_mem_we  ? (* src = "sha256_core.v:170|sha256_w_mem.v:118" *) \w_mem_inst.w_mem00_new  : \w_mem_inst.w_mem[0] ;
  assign _242_ = a_h_we ? (* src = "sha256_core.v:170|sha256_w_mem.v:138" *) \w_mem_inst.w_ctr_new  : \w_mem_inst.w_ctr_reg ;
  assign _318_ = { \w_mem_inst.w_mem[1] [6:0], \w_mem_inst.w_mem[1] [31:7] } ^ (* src = "sha256_core.v:170|sha256_w_mem.v:198" *) { \w_mem_inst.w_mem[1] [17:0], \w_mem_inst.w_mem[1] [31:18] };
  assign \w_mem_inst.w_mem_update_logic.d0  = _318_ ^ (* src = "sha256_core.v:170|sha256_w_mem.v:199" *) { 3'h0, \w_mem_inst.w_mem[1] [31:3] };
  assign _319_ = { \w_mem_inst.w_mem[14] [16:0], \w_mem_inst.w_mem[14] [31:17] } ^ (* src = "sha256_core.v:170|sha256_w_mem.v:202" *) { \w_mem_inst.w_mem[14] [18:0], \w_mem_inst.w_mem[14] [31:19] };
  assign \w_mem_inst.w_mem_update_logic.d1  = _319_ ^ (* src = "sha256_core.v:170|sha256_w_mem.v:203" *) { 10'h000, \w_mem_inst.w_mem[14] [31:10] };
  assign _320_ = { e_reg[5:0], e_reg[31:6] } ^ (* src = "sha256_core.v:332" *) { e_reg[10:0], e_reg[31:11] };
  assign \t1_logic.sum1  = _320_ ^ (* src = "sha256_core.v:333" *) { e_reg[24:0], e_reg[31:25] };
  assign \t1_logic.ch  = _073_ ^ (* src = "sha256_core.v:335" *) _074_;
  assign _321_ = { a_reg[1:0], a_reg[31:2] } ^ (* src = "sha256_core.v:352" *) { a_reg[12:0], a_reg[31:13] };
  assign \t2_logic.sum0  = _321_ ^ (* src = "sha256_core.v:353" *) { a_reg[21:0], a_reg[31:22] };
  assign _322_ = _075_ ^ (* src = "sha256_core.v:355" *) _076_;
  assign \t2_logic.maj  = _322_ ^ (* src = "sha256_core.v:355" *) _077_;
  assign \w_mem_inst.w_mem_update_logic.w_9  = \w_mem_inst.w_mem[9] ;
  assign \w_mem_inst.w_mem_update_logic.w_14  = \w_mem_inst.w_mem[14] ;
  assign \w_mem_inst.w_mem_update_logic.w_1  = \w_mem_inst.w_mem[1] ;
  assign \w_mem_inst.w_mem_update_logic.w_0  = \w_mem_inst.w_mem[0] ;
  assign \w_mem_inst.w_ctr_we  = a_h_we;
  assign \w_mem_inst.w  = w_data;
  assign \w_mem_inst.reset_n  = reset_n;
  assign \w_mem_inst.reg_update.i  = 32'd16;
  assign \w_mem_inst.init  = w_init;
  assign \w_mem_inst.clk  = clk;
  assign \w_mem_inst.block  = block;
  assign \k_constants_inst.tmp_K  = \k_constants_inst.K ;
  assign \k_constants_inst.addr  = t_ctr_reg;
  assign \w_mem_inst.w_tmp  = w_data;
  assign digest = { H0_reg, H1_reg, H2_reg, H3_reg, H4_reg, H5_reg, H6_reg, H7_reg };
  assign digest_valid = digest_valid_reg;
  assign digest_valid_new = digest_update;
  assign first_block = digest_init;
  assign k_data = \k_constants_inst.K ;
  assign ready_flag = ready;
  assign state_init = w_init;
  assign state_update = \w_mem_inst.next ;
  assign t_ctr_inc = \w_mem_inst.next ;
  assign t_ctr_rst = w_init;
  assign t_ctr_we = a_h_we;
  assign w_next = \w_mem_inst.next ;
endmodule
