// soc_system_mm_interconnect_1.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 14.0 200 at 2018.04.18.12:49:40

`timescale 1 ps / 1 ps
module soc_system_mm_interconnect_1 (
		output wire [7:0]  hps_0_f2h_axi_slave_awid,                                         //                                        hps_0_f2h_axi_slave.awid
		output wire [31:0] hps_0_f2h_axi_slave_awaddr,                                       //                                                           .awaddr
		output wire [3:0]  hps_0_f2h_axi_slave_awlen,                                        //                                                           .awlen
		output wire [2:0]  hps_0_f2h_axi_slave_awsize,                                       //                                                           .awsize
		output wire [1:0]  hps_0_f2h_axi_slave_awburst,                                      //                                                           .awburst
		output wire [1:0]  hps_0_f2h_axi_slave_awlock,                                       //                                                           .awlock
		output wire [3:0]  hps_0_f2h_axi_slave_awcache,                                      //                                                           .awcache
		output wire [2:0]  hps_0_f2h_axi_slave_awprot,                                       //                                                           .awprot
		output wire [4:0]  hps_0_f2h_axi_slave_awuser,                                       //                                                           .awuser
		output wire        hps_0_f2h_axi_slave_awvalid,                                      //                                                           .awvalid
		input  wire        hps_0_f2h_axi_slave_awready,                                      //                                                           .awready
		output wire [7:0]  hps_0_f2h_axi_slave_wid,                                          //                                                           .wid
		output wire [31:0] hps_0_f2h_axi_slave_wdata,                                        //                                                           .wdata
		output wire [3:0]  hps_0_f2h_axi_slave_wstrb,                                        //                                                           .wstrb
		output wire        hps_0_f2h_axi_slave_wlast,                                        //                                                           .wlast
		output wire        hps_0_f2h_axi_slave_wvalid,                                       //                                                           .wvalid
		input  wire        hps_0_f2h_axi_slave_wready,                                       //                                                           .wready
		input  wire [7:0]  hps_0_f2h_axi_slave_bid,                                          //                                                           .bid
		input  wire [1:0]  hps_0_f2h_axi_slave_bresp,                                        //                                                           .bresp
		input  wire        hps_0_f2h_axi_slave_bvalid,                                       //                                                           .bvalid
		output wire        hps_0_f2h_axi_slave_bready,                                       //                                                           .bready
		output wire [7:0]  hps_0_f2h_axi_slave_arid,                                         //                                                           .arid
		output wire [31:0] hps_0_f2h_axi_slave_araddr,                                       //                                                           .araddr
		output wire [3:0]  hps_0_f2h_axi_slave_arlen,                                        //                                                           .arlen
		output wire [2:0]  hps_0_f2h_axi_slave_arsize,                                       //                                                           .arsize
		output wire [1:0]  hps_0_f2h_axi_slave_arburst,                                      //                                                           .arburst
		output wire [1:0]  hps_0_f2h_axi_slave_arlock,                                       //                                                           .arlock
		output wire [3:0]  hps_0_f2h_axi_slave_arcache,                                      //                                                           .arcache
		output wire [2:0]  hps_0_f2h_axi_slave_arprot,                                       //                                                           .arprot
		output wire [4:0]  hps_0_f2h_axi_slave_aruser,                                       //                                                           .aruser
		output wire        hps_0_f2h_axi_slave_arvalid,                                      //                                                           .arvalid
		input  wire        hps_0_f2h_axi_slave_arready,                                      //                                                           .arready
		input  wire [7:0]  hps_0_f2h_axi_slave_rid,                                          //                                                           .rid
		input  wire [31:0] hps_0_f2h_axi_slave_rdata,                                        //                                                           .rdata
		input  wire [1:0]  hps_0_f2h_axi_slave_rresp,                                        //                                                           .rresp
		input  wire        hps_0_f2h_axi_slave_rlast,                                        //                                                           .rlast
		input  wire        hps_0_f2h_axi_slave_rvalid,                                       //                                                           .rvalid
		output wire        hps_0_f2h_axi_slave_rready,                                       //                                                           .rready
		input  wire        clk_0_clk_clk,                                                    //                                                  clk_0_clk.clk
		input  wire        avalon_f2h_reset_reset_bridge_in_reset_reset,                     //                     avalon_f2h_reset_reset_bridge_in_reset.reset
		input  wire        hps_0_f2h_axi_slave_agent_reset_sink_reset_bridge_in_reset_reset, // hps_0_f2h_axi_slave_agent_reset_sink_reset_bridge_in_reset.reset
		input  wire [31:0] avalon_f2h_avalon_universal_master_0_address,                     //                       avalon_f2h_avalon_universal_master_0.address
		output wire        avalon_f2h_avalon_universal_master_0_waitrequest,                 //                                                           .waitrequest
		input  wire [3:0]  avalon_f2h_avalon_universal_master_0_burstcount,                  //                                                           .burstcount
		input  wire [3:0]  avalon_f2h_avalon_universal_master_0_byteenable,                  //                                                           .byteenable
		input  wire        avalon_f2h_avalon_universal_master_0_read,                        //                                                           .read
		output wire [31:0] avalon_f2h_avalon_universal_master_0_readdata,                    //                                                           .readdata
		output wire        avalon_f2h_avalon_universal_master_0_readdatavalid,               //                                                           .readdatavalid
		input  wire        avalon_f2h_avalon_universal_master_0_write,                       //                                                           .write
		input  wire [31:0] avalon_f2h_avalon_universal_master_0_writedata,                   //                                                           .writedata
		input  wire        avalon_f2h_avalon_universal_master_0_lock,                        //                                                           .lock
		input  wire        avalon_f2h_avalon_universal_master_0_debugaccess                  //                                                           .debugaccess
	);

	wire          avalon_f2h_avalon_universal_master_0_translator_avalon_universal_master_0_waitrequest;   // avalon_f2h_avalon_universal_master_0_agent:av_waitrequest -> avalon_f2h_avalon_universal_master_0_translator:uav_waitrequest
	wire    [3:0] avalon_f2h_avalon_universal_master_0_translator_avalon_universal_master_0_burstcount;    // avalon_f2h_avalon_universal_master_0_translator:uav_burstcount -> avalon_f2h_avalon_universal_master_0_agent:av_burstcount
	wire   [31:0] avalon_f2h_avalon_universal_master_0_translator_avalon_universal_master_0_writedata;     // avalon_f2h_avalon_universal_master_0_translator:uav_writedata -> avalon_f2h_avalon_universal_master_0_agent:av_writedata
	wire   [31:0] avalon_f2h_avalon_universal_master_0_translator_avalon_universal_master_0_address;       // avalon_f2h_avalon_universal_master_0_translator:uav_address -> avalon_f2h_avalon_universal_master_0_agent:av_address
	wire          avalon_f2h_avalon_universal_master_0_translator_avalon_universal_master_0_lock;          // avalon_f2h_avalon_universal_master_0_translator:uav_lock -> avalon_f2h_avalon_universal_master_0_agent:av_lock
	wire          avalon_f2h_avalon_universal_master_0_translator_avalon_universal_master_0_write;         // avalon_f2h_avalon_universal_master_0_translator:uav_write -> avalon_f2h_avalon_universal_master_0_agent:av_write
	wire          avalon_f2h_avalon_universal_master_0_translator_avalon_universal_master_0_read;          // avalon_f2h_avalon_universal_master_0_translator:uav_read -> avalon_f2h_avalon_universal_master_0_agent:av_read
	wire   [31:0] avalon_f2h_avalon_universal_master_0_translator_avalon_universal_master_0_readdata;      // avalon_f2h_avalon_universal_master_0_agent:av_readdata -> avalon_f2h_avalon_universal_master_0_translator:uav_readdata
	wire          avalon_f2h_avalon_universal_master_0_translator_avalon_universal_master_0_debugaccess;   // avalon_f2h_avalon_universal_master_0_translator:uav_debugaccess -> avalon_f2h_avalon_universal_master_0_agent:av_debugaccess
	wire    [3:0] avalon_f2h_avalon_universal_master_0_translator_avalon_universal_master_0_byteenable;    // avalon_f2h_avalon_universal_master_0_translator:uav_byteenable -> avalon_f2h_avalon_universal_master_0_agent:av_byteenable
	wire          avalon_f2h_avalon_universal_master_0_translator_avalon_universal_master_0_readdatavalid; // avalon_f2h_avalon_universal_master_0_agent:av_readdatavalid -> avalon_f2h_avalon_universal_master_0_translator:uav_readdatavalid
	wire          avalon_f2h_avalon_universal_master_0_agent_cp_endofpacket;                               // avalon_f2h_avalon_universal_master_0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          avalon_f2h_avalon_universal_master_0_agent_cp_valid;                                     // avalon_f2h_avalon_universal_master_0_agent:cp_valid -> router:sink_valid
	wire          avalon_f2h_avalon_universal_master_0_agent_cp_startofpacket;                             // avalon_f2h_avalon_universal_master_0_agent:cp_startofpacket -> router:sink_startofpacket
	wire  [115:0] avalon_f2h_avalon_universal_master_0_agent_cp_data;                                      // avalon_f2h_avalon_universal_master_0_agent:cp_data -> router:sink_data
	wire          avalon_f2h_avalon_universal_master_0_agent_cp_ready;                                     // router:sink_ready -> avalon_f2h_avalon_universal_master_0_agent:cp_ready
	wire          router_001_src_endofpacket;                                                              // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_001_src_valid;                                                                    // router_001:src_valid -> rsp_demux:sink_valid
	wire          router_001_src_startofpacket;                                                            // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire  [115:0] router_001_src_data;                                                                     // router_001:src_data -> rsp_demux:sink_data
	wire    [1:0] router_001_src_channel;                                                                  // router_001:src_channel -> rsp_demux:sink_channel
	wire          router_001_src_ready;                                                                    // rsp_demux:sink_ready -> router_001:src_ready
	wire          router_002_src_endofpacket;                                                              // router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_002_src_valid;                                                                    // router_002:src_valid -> rsp_demux_001:sink_valid
	wire          router_002_src_startofpacket;                                                            // router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire  [115:0] router_002_src_data;                                                                     // router_002:src_data -> rsp_demux_001:sink_data
	wire    [1:0] router_002_src_channel;                                                                  // router_002:src_channel -> rsp_demux_001:sink_channel
	wire          router_002_src_ready;                                                                    // rsp_demux_001:sink_ready -> router_002:src_ready
	wire          router_src_endofpacket;                                                                  // router:src_endofpacket -> avalon_f2h_avalon_universal_master_0_limiter:cmd_sink_endofpacket
	wire          router_src_valid;                                                                        // router:src_valid -> avalon_f2h_avalon_universal_master_0_limiter:cmd_sink_valid
	wire          router_src_startofpacket;                                                                // router:src_startofpacket -> avalon_f2h_avalon_universal_master_0_limiter:cmd_sink_startofpacket
	wire  [115:0] router_src_data;                                                                         // router:src_data -> avalon_f2h_avalon_universal_master_0_limiter:cmd_sink_data
	wire    [1:0] router_src_channel;                                                                      // router:src_channel -> avalon_f2h_avalon_universal_master_0_limiter:cmd_sink_channel
	wire          router_src_ready;                                                                        // avalon_f2h_avalon_universal_master_0_limiter:cmd_sink_ready -> router:src_ready
	wire          avalon_f2h_avalon_universal_master_0_limiter_rsp_src_endofpacket;                        // avalon_f2h_avalon_universal_master_0_limiter:rsp_src_endofpacket -> avalon_f2h_avalon_universal_master_0_agent:rp_endofpacket
	wire          avalon_f2h_avalon_universal_master_0_limiter_rsp_src_valid;                              // avalon_f2h_avalon_universal_master_0_limiter:rsp_src_valid -> avalon_f2h_avalon_universal_master_0_agent:rp_valid
	wire          avalon_f2h_avalon_universal_master_0_limiter_rsp_src_startofpacket;                      // avalon_f2h_avalon_universal_master_0_limiter:rsp_src_startofpacket -> avalon_f2h_avalon_universal_master_0_agent:rp_startofpacket
	wire  [115:0] avalon_f2h_avalon_universal_master_0_limiter_rsp_src_data;                               // avalon_f2h_avalon_universal_master_0_limiter:rsp_src_data -> avalon_f2h_avalon_universal_master_0_agent:rp_data
	wire    [1:0] avalon_f2h_avalon_universal_master_0_limiter_rsp_src_channel;                            // avalon_f2h_avalon_universal_master_0_limiter:rsp_src_channel -> avalon_f2h_avalon_universal_master_0_agent:rp_channel
	wire          avalon_f2h_avalon_universal_master_0_limiter_rsp_src_ready;                              // avalon_f2h_avalon_universal_master_0_agent:rp_ready -> avalon_f2h_avalon_universal_master_0_limiter:rsp_src_ready
	wire          avalon_f2h_avalon_universal_master_0_limiter_cmd_src_endofpacket;                        // avalon_f2h_avalon_universal_master_0_limiter:cmd_src_endofpacket -> limiter_pipeline:in_endofpacket
	wire    [0:0] avalon_f2h_avalon_universal_master_0_limiter_cmd_src_valid;                              // avalon_f2h_avalon_universal_master_0_limiter:cmd_src_valid -> limiter_pipeline:in_valid
	wire          avalon_f2h_avalon_universal_master_0_limiter_cmd_src_startofpacket;                      // avalon_f2h_avalon_universal_master_0_limiter:cmd_src_startofpacket -> limiter_pipeline:in_startofpacket
	wire  [115:0] avalon_f2h_avalon_universal_master_0_limiter_cmd_src_data;                               // avalon_f2h_avalon_universal_master_0_limiter:cmd_src_data -> limiter_pipeline:in_data
	wire    [1:0] avalon_f2h_avalon_universal_master_0_limiter_cmd_src_channel;                            // avalon_f2h_avalon_universal_master_0_limiter:cmd_src_channel -> limiter_pipeline:in_channel
	wire          avalon_f2h_avalon_universal_master_0_limiter_cmd_src_ready;                              // limiter_pipeline:in_ready -> avalon_f2h_avalon_universal_master_0_limiter:cmd_src_ready
	wire          limiter_pipeline_source0_endofpacket;                                                    // limiter_pipeline:out_endofpacket -> cmd_demux:sink_endofpacket
	wire          limiter_pipeline_source0_valid;                                                          // limiter_pipeline:out_valid -> cmd_demux:sink_valid
	wire          limiter_pipeline_source0_startofpacket;                                                  // limiter_pipeline:out_startofpacket -> cmd_demux:sink_startofpacket
	wire  [115:0] limiter_pipeline_source0_data;                                                           // limiter_pipeline:out_data -> cmd_demux:sink_data
	wire    [1:0] limiter_pipeline_source0_channel;                                                        // limiter_pipeline:out_channel -> cmd_demux:sink_channel
	wire          limiter_pipeline_source0_ready;                                                          // cmd_demux:sink_ready -> limiter_pipeline:out_ready
	wire          rsp_mux_src_endofpacket;                                                                 // rsp_mux:src_endofpacket -> limiter_pipeline_001:in_endofpacket
	wire          rsp_mux_src_valid;                                                                       // rsp_mux:src_valid -> limiter_pipeline_001:in_valid
	wire          rsp_mux_src_startofpacket;                                                               // rsp_mux:src_startofpacket -> limiter_pipeline_001:in_startofpacket
	wire  [115:0] rsp_mux_src_data;                                                                        // rsp_mux:src_data -> limiter_pipeline_001:in_data
	wire    [1:0] rsp_mux_src_channel;                                                                     // rsp_mux:src_channel -> limiter_pipeline_001:in_channel
	wire          rsp_mux_src_ready;                                                                       // limiter_pipeline_001:in_ready -> rsp_mux:src_ready
	wire          limiter_pipeline_001_source0_endofpacket;                                                // limiter_pipeline_001:out_endofpacket -> avalon_f2h_avalon_universal_master_0_limiter:rsp_sink_endofpacket
	wire          limiter_pipeline_001_source0_valid;                                                      // limiter_pipeline_001:out_valid -> avalon_f2h_avalon_universal_master_0_limiter:rsp_sink_valid
	wire          limiter_pipeline_001_source0_startofpacket;                                              // limiter_pipeline_001:out_startofpacket -> avalon_f2h_avalon_universal_master_0_limiter:rsp_sink_startofpacket
	wire  [115:0] limiter_pipeline_001_source0_data;                                                       // limiter_pipeline_001:out_data -> avalon_f2h_avalon_universal_master_0_limiter:rsp_sink_data
	wire    [1:0] limiter_pipeline_001_source0_channel;                                                    // limiter_pipeline_001:out_channel -> avalon_f2h_avalon_universal_master_0_limiter:rsp_sink_channel
	wire          limiter_pipeline_001_source0_ready;                                                      // avalon_f2h_avalon_universal_master_0_limiter:rsp_sink_ready -> limiter_pipeline_001:out_ready
	wire          cmd_mux_src_endofpacket;                                                                 // cmd_mux:src_endofpacket -> agent_pipeline:in_endofpacket
	wire          cmd_mux_src_valid;                                                                       // cmd_mux:src_valid -> agent_pipeline:in_valid
	wire          cmd_mux_src_startofpacket;                                                               // cmd_mux:src_startofpacket -> agent_pipeline:in_startofpacket
	wire  [115:0] cmd_mux_src_data;                                                                        // cmd_mux:src_data -> agent_pipeline:in_data
	wire    [1:0] cmd_mux_src_channel;                                                                     // cmd_mux:src_channel -> agent_pipeline:in_channel
	wire          cmd_mux_src_ready;                                                                       // agent_pipeline:in_ready -> cmd_mux:src_ready
	wire          agent_pipeline_source0_endofpacket;                                                      // agent_pipeline:out_endofpacket -> hps_0_f2h_axi_slave_agent:write_cp_endofpacket
	wire          agent_pipeline_source0_valid;                                                            // agent_pipeline:out_valid -> hps_0_f2h_axi_slave_agent:write_cp_valid
	wire          agent_pipeline_source0_startofpacket;                                                    // agent_pipeline:out_startofpacket -> hps_0_f2h_axi_slave_agent:write_cp_startofpacket
	wire  [115:0] agent_pipeline_source0_data;                                                             // agent_pipeline:out_data -> hps_0_f2h_axi_slave_agent:write_cp_data
	wire    [1:0] agent_pipeline_source0_channel;                                                          // agent_pipeline:out_channel -> hps_0_f2h_axi_slave_agent:write_cp_channel
	wire          agent_pipeline_source0_ready;                                                            // hps_0_f2h_axi_slave_agent:write_cp_ready -> agent_pipeline:out_ready
	wire          cmd_mux_001_src_endofpacket;                                                             // cmd_mux_001:src_endofpacket -> agent_pipeline_001:in_endofpacket
	wire          cmd_mux_001_src_valid;                                                                   // cmd_mux_001:src_valid -> agent_pipeline_001:in_valid
	wire          cmd_mux_001_src_startofpacket;                                                           // cmd_mux_001:src_startofpacket -> agent_pipeline_001:in_startofpacket
	wire  [115:0] cmd_mux_001_src_data;                                                                    // cmd_mux_001:src_data -> agent_pipeline_001:in_data
	wire    [1:0] cmd_mux_001_src_channel;                                                                 // cmd_mux_001:src_channel -> agent_pipeline_001:in_channel
	wire          cmd_mux_001_src_ready;                                                                   // agent_pipeline_001:in_ready -> cmd_mux_001:src_ready
	wire          agent_pipeline_001_source0_endofpacket;                                                  // agent_pipeline_001:out_endofpacket -> hps_0_f2h_axi_slave_agent:read_cp_endofpacket
	wire          agent_pipeline_001_source0_valid;                                                        // agent_pipeline_001:out_valid -> hps_0_f2h_axi_slave_agent:read_cp_valid
	wire          agent_pipeline_001_source0_startofpacket;                                                // agent_pipeline_001:out_startofpacket -> hps_0_f2h_axi_slave_agent:read_cp_startofpacket
	wire  [115:0] agent_pipeline_001_source0_data;                                                         // agent_pipeline_001:out_data -> hps_0_f2h_axi_slave_agent:read_cp_data
	wire    [1:0] agent_pipeline_001_source0_channel;                                                      // agent_pipeline_001:out_channel -> hps_0_f2h_axi_slave_agent:read_cp_channel
	wire          agent_pipeline_001_source0_ready;                                                        // hps_0_f2h_axi_slave_agent:read_cp_ready -> agent_pipeline_001:out_ready
	wire          hps_0_f2h_axi_slave_agent_write_rp_endofpacket;                                          // hps_0_f2h_axi_slave_agent:write_rp_endofpacket -> agent_pipeline_002:in_endofpacket
	wire          hps_0_f2h_axi_slave_agent_write_rp_valid;                                                // hps_0_f2h_axi_slave_agent:write_rp_valid -> agent_pipeline_002:in_valid
	wire          hps_0_f2h_axi_slave_agent_write_rp_startofpacket;                                        // hps_0_f2h_axi_slave_agent:write_rp_startofpacket -> agent_pipeline_002:in_startofpacket
	wire  [115:0] hps_0_f2h_axi_slave_agent_write_rp_data;                                                 // hps_0_f2h_axi_slave_agent:write_rp_data -> agent_pipeline_002:in_data
	wire          hps_0_f2h_axi_slave_agent_write_rp_ready;                                                // agent_pipeline_002:in_ready -> hps_0_f2h_axi_slave_agent:write_rp_ready
	wire          agent_pipeline_002_source0_endofpacket;                                                  // agent_pipeline_002:out_endofpacket -> router_001:sink_endofpacket
	wire          agent_pipeline_002_source0_valid;                                                        // agent_pipeline_002:out_valid -> router_001:sink_valid
	wire          agent_pipeline_002_source0_startofpacket;                                                // agent_pipeline_002:out_startofpacket -> router_001:sink_startofpacket
	wire  [115:0] agent_pipeline_002_source0_data;                                                         // agent_pipeline_002:out_data -> router_001:sink_data
	wire          agent_pipeline_002_source0_ready;                                                        // router_001:sink_ready -> agent_pipeline_002:out_ready
	wire          hps_0_f2h_axi_slave_agent_read_rp_endofpacket;                                           // hps_0_f2h_axi_slave_agent:read_rp_endofpacket -> agent_pipeline_003:in_endofpacket
	wire          hps_0_f2h_axi_slave_agent_read_rp_valid;                                                 // hps_0_f2h_axi_slave_agent:read_rp_valid -> agent_pipeline_003:in_valid
	wire          hps_0_f2h_axi_slave_agent_read_rp_startofpacket;                                         // hps_0_f2h_axi_slave_agent:read_rp_startofpacket -> agent_pipeline_003:in_startofpacket
	wire  [115:0] hps_0_f2h_axi_slave_agent_read_rp_data;                                                  // hps_0_f2h_axi_slave_agent:read_rp_data -> agent_pipeline_003:in_data
	wire          hps_0_f2h_axi_slave_agent_read_rp_ready;                                                 // agent_pipeline_003:in_ready -> hps_0_f2h_axi_slave_agent:read_rp_ready
	wire          agent_pipeline_003_source0_endofpacket;                                                  // agent_pipeline_003:out_endofpacket -> router_002:sink_endofpacket
	wire          agent_pipeline_003_source0_valid;                                                        // agent_pipeline_003:out_valid -> router_002:sink_valid
	wire          agent_pipeline_003_source0_startofpacket;                                                // agent_pipeline_003:out_startofpacket -> router_002:sink_startofpacket
	wire  [115:0] agent_pipeline_003_source0_data;                                                         // agent_pipeline_003:out_data -> router_002:sink_data
	wire          agent_pipeline_003_source0_ready;                                                        // router_002:sink_ready -> agent_pipeline_003:out_ready
	wire          cmd_demux_src0_endofpacket;                                                              // cmd_demux:src0_endofpacket -> mux_pipeline:in_endofpacket
	wire          cmd_demux_src0_valid;                                                                    // cmd_demux:src0_valid -> mux_pipeline:in_valid
	wire          cmd_demux_src0_startofpacket;                                                            // cmd_demux:src0_startofpacket -> mux_pipeline:in_startofpacket
	wire  [115:0] cmd_demux_src0_data;                                                                     // cmd_demux:src0_data -> mux_pipeline:in_data
	wire    [1:0] cmd_demux_src0_channel;                                                                  // cmd_demux:src0_channel -> mux_pipeline:in_channel
	wire          cmd_demux_src0_ready;                                                                    // mux_pipeline:in_ready -> cmd_demux:src0_ready
	wire          mux_pipeline_source0_endofpacket;                                                        // mux_pipeline:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          mux_pipeline_source0_valid;                                                              // mux_pipeline:out_valid -> cmd_mux:sink0_valid
	wire          mux_pipeline_source0_startofpacket;                                                      // mux_pipeline:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire  [115:0] mux_pipeline_source0_data;                                                               // mux_pipeline:out_data -> cmd_mux:sink0_data
	wire    [1:0] mux_pipeline_source0_channel;                                                            // mux_pipeline:out_channel -> cmd_mux:sink0_channel
	wire          mux_pipeline_source0_ready;                                                              // cmd_mux:sink0_ready -> mux_pipeline:out_ready
	wire          cmd_demux_src1_endofpacket;                                                              // cmd_demux:src1_endofpacket -> mux_pipeline_001:in_endofpacket
	wire          cmd_demux_src1_valid;                                                                    // cmd_demux:src1_valid -> mux_pipeline_001:in_valid
	wire          cmd_demux_src1_startofpacket;                                                            // cmd_demux:src1_startofpacket -> mux_pipeline_001:in_startofpacket
	wire  [115:0] cmd_demux_src1_data;                                                                     // cmd_demux:src1_data -> mux_pipeline_001:in_data
	wire    [1:0] cmd_demux_src1_channel;                                                                  // cmd_demux:src1_channel -> mux_pipeline_001:in_channel
	wire          cmd_demux_src1_ready;                                                                    // mux_pipeline_001:in_ready -> cmd_demux:src1_ready
	wire          mux_pipeline_001_source0_endofpacket;                                                    // mux_pipeline_001:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          mux_pipeline_001_source0_valid;                                                          // mux_pipeline_001:out_valid -> cmd_mux_001:sink0_valid
	wire          mux_pipeline_001_source0_startofpacket;                                                  // mux_pipeline_001:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire  [115:0] mux_pipeline_001_source0_data;                                                           // mux_pipeline_001:out_data -> cmd_mux_001:sink0_data
	wire    [1:0] mux_pipeline_001_source0_channel;                                                        // mux_pipeline_001:out_channel -> cmd_mux_001:sink0_channel
	wire          mux_pipeline_001_source0_ready;                                                          // cmd_mux_001:sink0_ready -> mux_pipeline_001:out_ready
	wire          rsp_demux_src0_endofpacket;                                                              // rsp_demux:src0_endofpacket -> mux_pipeline_002:in_endofpacket
	wire          rsp_demux_src0_valid;                                                                    // rsp_demux:src0_valid -> mux_pipeline_002:in_valid
	wire          rsp_demux_src0_startofpacket;                                                            // rsp_demux:src0_startofpacket -> mux_pipeline_002:in_startofpacket
	wire  [115:0] rsp_demux_src0_data;                                                                     // rsp_demux:src0_data -> mux_pipeline_002:in_data
	wire    [1:0] rsp_demux_src0_channel;                                                                  // rsp_demux:src0_channel -> mux_pipeline_002:in_channel
	wire          rsp_demux_src0_ready;                                                                    // mux_pipeline_002:in_ready -> rsp_demux:src0_ready
	wire          mux_pipeline_002_source0_endofpacket;                                                    // mux_pipeline_002:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          mux_pipeline_002_source0_valid;                                                          // mux_pipeline_002:out_valid -> rsp_mux:sink0_valid
	wire          mux_pipeline_002_source0_startofpacket;                                                  // mux_pipeline_002:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire  [115:0] mux_pipeline_002_source0_data;                                                           // mux_pipeline_002:out_data -> rsp_mux:sink0_data
	wire    [1:0] mux_pipeline_002_source0_channel;                                                        // mux_pipeline_002:out_channel -> rsp_mux:sink0_channel
	wire          mux_pipeline_002_source0_ready;                                                          // rsp_mux:sink0_ready -> mux_pipeline_002:out_ready
	wire          rsp_demux_001_src0_endofpacket;                                                          // rsp_demux_001:src0_endofpacket -> mux_pipeline_003:in_endofpacket
	wire          rsp_demux_001_src0_valid;                                                                // rsp_demux_001:src0_valid -> mux_pipeline_003:in_valid
	wire          rsp_demux_001_src0_startofpacket;                                                        // rsp_demux_001:src0_startofpacket -> mux_pipeline_003:in_startofpacket
	wire  [115:0] rsp_demux_001_src0_data;                                                                 // rsp_demux_001:src0_data -> mux_pipeline_003:in_data
	wire    [1:0] rsp_demux_001_src0_channel;                                                              // rsp_demux_001:src0_channel -> mux_pipeline_003:in_channel
	wire          rsp_demux_001_src0_ready;                                                                // mux_pipeline_003:in_ready -> rsp_demux_001:src0_ready
	wire          mux_pipeline_003_source0_endofpacket;                                                    // mux_pipeline_003:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          mux_pipeline_003_source0_valid;                                                          // mux_pipeline_003:out_valid -> rsp_mux:sink1_valid
	wire          mux_pipeline_003_source0_startofpacket;                                                  // mux_pipeline_003:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire  [115:0] mux_pipeline_003_source0_data;                                                           // mux_pipeline_003:out_data -> rsp_mux:sink1_data
	wire    [1:0] mux_pipeline_003_source0_channel;                                                        // mux_pipeline_003:out_channel -> rsp_mux:sink1_channel
	wire          mux_pipeline_003_source0_ready;                                                          // rsp_mux:sink1_ready -> mux_pipeline_003:out_ready

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (4),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (4),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (1),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) avalon_f2h_avalon_universal_master_0_translator (
		.clk                      (clk_0_clk_clk),                                                                           //                       clk.clk
		.reset                    (avalon_f2h_reset_reset_bridge_in_reset_reset),                                            //                     reset.reset
		.uav_address              (avalon_f2h_avalon_universal_master_0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (avalon_f2h_avalon_universal_master_0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (avalon_f2h_avalon_universal_master_0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (avalon_f2h_avalon_universal_master_0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (avalon_f2h_avalon_universal_master_0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (avalon_f2h_avalon_universal_master_0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (avalon_f2h_avalon_universal_master_0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (avalon_f2h_avalon_universal_master_0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (avalon_f2h_avalon_universal_master_0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (avalon_f2h_avalon_universal_master_0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (avalon_f2h_avalon_universal_master_0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (avalon_f2h_avalon_universal_master_0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (avalon_f2h_avalon_universal_master_0_waitrequest),                                        //                          .waitrequest
		.av_burstcount            (avalon_f2h_avalon_universal_master_0_burstcount),                                         //                          .burstcount
		.av_byteenable            (avalon_f2h_avalon_universal_master_0_byteenable),                                         //                          .byteenable
		.av_read                  (avalon_f2h_avalon_universal_master_0_read),                                               //                          .read
		.av_readdata              (avalon_f2h_avalon_universal_master_0_readdata),                                           //                          .readdata
		.av_readdatavalid         (avalon_f2h_avalon_universal_master_0_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (avalon_f2h_avalon_universal_master_0_write),                                              //                          .write
		.av_writedata             (avalon_f2h_avalon_universal_master_0_writedata),                                          //                          .writedata
		.av_lock                  (avalon_f2h_avalon_universal_master_0_lock),                                               //                          .lock
		.av_debugaccess           (avalon_f2h_avalon_universal_master_0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer    (1'b0),                                                                                    //               (terminated)
		.av_begintransfer         (1'b0),                                                                                    //               (terminated)
		.av_chipselect            (1'b0),                                                                                    //               (terminated)
		.uav_clken                (),                                                                                        //               (terminated)
		.av_clken                 (1'b1),                                                                                    //               (terminated)
		.uav_response             (2'b00),                                                                                   //               (terminated)
		.av_response              (),                                                                                        //               (terminated)
		.uav_writeresponserequest (),                                                                                        //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                                    //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                                    //               (terminated)
		.av_writeresponsevalid    ()                                                                                         //               (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BEGIN_BURST           (99),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (81),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (102),
		.PKT_THREAD_ID_H           (103),
		.PKT_THREAD_ID_L           (103),
		.PKT_CACHE_H               (110),
		.PKT_CACHE_L               (107),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.PKT_QOS_H                 (100),
		.PKT_QOS_L                 (100),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (93),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_ORI_BURST_SIZE_H      (115),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (4),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (127),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) avalon_f2h_avalon_universal_master_0_agent (
		.clk                     (clk_0_clk_clk),                                                                           //       clk.clk
		.reset                   (avalon_f2h_reset_reset_bridge_in_reset_reset),                                            // clk_reset.reset
		.av_address              (avalon_f2h_avalon_universal_master_0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (avalon_f2h_avalon_universal_master_0_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (avalon_f2h_avalon_universal_master_0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (avalon_f2h_avalon_universal_master_0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (avalon_f2h_avalon_universal_master_0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (avalon_f2h_avalon_universal_master_0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (avalon_f2h_avalon_universal_master_0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (avalon_f2h_avalon_universal_master_0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (avalon_f2h_avalon_universal_master_0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (avalon_f2h_avalon_universal_master_0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (avalon_f2h_avalon_universal_master_0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (avalon_f2h_avalon_universal_master_0_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (avalon_f2h_avalon_universal_master_0_agent_cp_data),                                      //          .data
		.cp_startofpacket        (avalon_f2h_avalon_universal_master_0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (avalon_f2h_avalon_universal_master_0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (avalon_f2h_avalon_universal_master_0_agent_cp_ready),                                     //          .ready
		.rp_valid                (avalon_f2h_avalon_universal_master_0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data                 (avalon_f2h_avalon_universal_master_0_limiter_rsp_src_data),                               //          .data
		.rp_channel              (avalon_f2h_avalon_universal_master_0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket        (avalon_f2h_avalon_universal_master_0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket          (avalon_f2h_avalon_universal_master_0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready                (avalon_f2h_avalon_universal_master_0_limiter_rsp_src_ready),                              //          .ready
		.av_response             (),                                                                                        // (terminated)
		.av_writeresponserequest (1'b0),                                                                                    // (terminated)
		.av_writeresponsevalid   ()                                                                                         // (terminated)
	);

	altera_merlin_axi_slave_ni #(
		.PKT_QOS_H                   (100),
		.PKT_QOS_L                   (100),
		.PKT_THREAD_ID_H             (103),
		.PKT_THREAD_ID_L             (103),
		.PKT_RESPONSE_STATUS_H       (112),
		.PKT_RESPONSE_STATUS_L       (111),
		.PKT_BEGIN_BURST             (99),
		.PKT_CACHE_H                 (110),
		.PKT_CACHE_L                 (107),
		.PKT_DATA_SIDEBAND_H         (98),
		.PKT_DATA_SIDEBAND_L         (98),
		.PKT_ADDR_SIDEBAND_H         (97),
		.PKT_ADDR_SIDEBAND_L         (93),
		.PKT_BURST_TYPE_H            (92),
		.PKT_BURST_TYPE_L            (91),
		.PKT_PROTECTION_H            (106),
		.PKT_PROTECTION_L            (104),
		.PKT_BURST_SIZE_H            (90),
		.PKT_BURST_SIZE_L            (88),
		.PKT_BURSTWRAP_H             (87),
		.PKT_BURSTWRAP_L             (81),
		.PKT_BYTE_CNT_H              (80),
		.PKT_BYTE_CNT_L              (74),
		.PKT_ADDR_H                  (67),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (73),
		.PKT_TRANS_LOCK              (72),
		.PKT_TRANS_COMPRESSED_READ   (68),
		.PKT_TRANS_POSTED            (69),
		.PKT_TRANS_WRITE             (70),
		.PKT_TRANS_READ              (71),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (101),
		.PKT_SRC_ID_L                (101),
		.PKT_DEST_ID_H               (102),
		.PKT_DEST_ID_L               (102),
		.PKT_ORI_BURST_SIZE_L        (113),
		.PKT_ORI_BURST_SIZE_H        (115),
		.ADDR_USER_WIDTH             (5),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (116),
		.ADDR_WIDTH                  (32),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (2),
		.AXI_SLAVE_ID_W              (8),
		.PASS_ID_TO_SLAVE            (1),
		.AXI_VERSION                 ("AXI3"),
		.WRITE_ACCEPTANCE_CAPABILITY (8),
		.READ_ACCEPTANCE_CAPABILITY  (8)
	) hps_0_f2h_axi_slave_agent (
		.aclk                   (clk_0_clk_clk),                                                     //        clock_sink.clk
		.aresetn                (~hps_0_f2h_axi_slave_agent_reset_sink_reset_bridge_in_reset_reset), //        reset_sink.reset_n
		.read_cp_valid          (agent_pipeline_001_source0_valid),                                  //           read_cp.valid
		.read_cp_ready          (agent_pipeline_001_source0_ready),                                  //                  .ready
		.read_cp_data           (agent_pipeline_001_source0_data),                                   //                  .data
		.read_cp_channel        (agent_pipeline_001_source0_channel),                                //                  .channel
		.read_cp_startofpacket  (agent_pipeline_001_source0_startofpacket),                          //                  .startofpacket
		.read_cp_endofpacket    (agent_pipeline_001_source0_endofpacket),                            //                  .endofpacket
		.write_cp_ready         (agent_pipeline_source0_ready),                                      //          write_cp.ready
		.write_cp_valid         (agent_pipeline_source0_valid),                                      //                  .valid
		.write_cp_data          (agent_pipeline_source0_data),                                       //                  .data
		.write_cp_channel       (agent_pipeline_source0_channel),                                    //                  .channel
		.write_cp_startofpacket (agent_pipeline_source0_startofpacket),                              //                  .startofpacket
		.write_cp_endofpacket   (agent_pipeline_source0_endofpacket),                                //                  .endofpacket
		.read_rp_ready          (hps_0_f2h_axi_slave_agent_read_rp_ready),                           //           read_rp.ready
		.read_rp_valid          (hps_0_f2h_axi_slave_agent_read_rp_valid),                           //                  .valid
		.read_rp_data           (hps_0_f2h_axi_slave_agent_read_rp_data),                            //                  .data
		.read_rp_startofpacket  (hps_0_f2h_axi_slave_agent_read_rp_startofpacket),                   //                  .startofpacket
		.read_rp_endofpacket    (hps_0_f2h_axi_slave_agent_read_rp_endofpacket),                     //                  .endofpacket
		.write_rp_ready         (hps_0_f2h_axi_slave_agent_write_rp_ready),                          //          write_rp.ready
		.write_rp_valid         (hps_0_f2h_axi_slave_agent_write_rp_valid),                          //                  .valid
		.write_rp_data          (hps_0_f2h_axi_slave_agent_write_rp_data),                           //                  .data
		.write_rp_startofpacket (hps_0_f2h_axi_slave_agent_write_rp_startofpacket),                  //                  .startofpacket
		.write_rp_endofpacket   (hps_0_f2h_axi_slave_agent_write_rp_endofpacket),                    //                  .endofpacket
		.awid                   (hps_0_f2h_axi_slave_awid),                                          // altera_axi_master.awid
		.awaddr                 (hps_0_f2h_axi_slave_awaddr),                                        //                  .awaddr
		.awlen                  (hps_0_f2h_axi_slave_awlen),                                         //                  .awlen
		.awsize                 (hps_0_f2h_axi_slave_awsize),                                        //                  .awsize
		.awburst                (hps_0_f2h_axi_slave_awburst),                                       //                  .awburst
		.awlock                 (hps_0_f2h_axi_slave_awlock),                                        //                  .awlock
		.awcache                (hps_0_f2h_axi_slave_awcache),                                       //                  .awcache
		.awprot                 (hps_0_f2h_axi_slave_awprot),                                        //                  .awprot
		.awuser                 (hps_0_f2h_axi_slave_awuser),                                        //                  .awuser
		.awvalid                (hps_0_f2h_axi_slave_awvalid),                                       //                  .awvalid
		.awready                (hps_0_f2h_axi_slave_awready),                                       //                  .awready
		.wid                    (hps_0_f2h_axi_slave_wid),                                           //                  .wid
		.wdata                  (hps_0_f2h_axi_slave_wdata),                                         //                  .wdata
		.wstrb                  (hps_0_f2h_axi_slave_wstrb),                                         //                  .wstrb
		.wlast                  (hps_0_f2h_axi_slave_wlast),                                         //                  .wlast
		.wvalid                 (hps_0_f2h_axi_slave_wvalid),                                        //                  .wvalid
		.wready                 (hps_0_f2h_axi_slave_wready),                                        //                  .wready
		.bid                    (hps_0_f2h_axi_slave_bid),                                           //                  .bid
		.bresp                  (hps_0_f2h_axi_slave_bresp),                                         //                  .bresp
		.bvalid                 (hps_0_f2h_axi_slave_bvalid),                                        //                  .bvalid
		.bready                 (hps_0_f2h_axi_slave_bready),                                        //                  .bready
		.arid                   (hps_0_f2h_axi_slave_arid),                                          //                  .arid
		.araddr                 (hps_0_f2h_axi_slave_araddr),                                        //                  .araddr
		.arlen                  (hps_0_f2h_axi_slave_arlen),                                         //                  .arlen
		.arsize                 (hps_0_f2h_axi_slave_arsize),                                        //                  .arsize
		.arburst                (hps_0_f2h_axi_slave_arburst),                                       //                  .arburst
		.arlock                 (hps_0_f2h_axi_slave_arlock),                                        //                  .arlock
		.arcache                (hps_0_f2h_axi_slave_arcache),                                       //                  .arcache
		.arprot                 (hps_0_f2h_axi_slave_arprot),                                        //                  .arprot
		.aruser                 (hps_0_f2h_axi_slave_aruser),                                        //                  .aruser
		.arvalid                (hps_0_f2h_axi_slave_arvalid),                                       //                  .arvalid
		.arready                (hps_0_f2h_axi_slave_arready),                                       //                  .arready
		.rid                    (hps_0_f2h_axi_slave_rid),                                           //                  .rid
		.rdata                  (hps_0_f2h_axi_slave_rdata),                                         //                  .rdata
		.rresp                  (hps_0_f2h_axi_slave_rresp),                                         //                  .rresp
		.rlast                  (hps_0_f2h_axi_slave_rlast),                                         //                  .rlast
		.rvalid                 (hps_0_f2h_axi_slave_rvalid),                                        //                  .rvalid
		.rready                 (hps_0_f2h_axi_slave_rready)                                         //                  .rready
	);

	soc_system_mm_interconnect_1_router router (
		.sink_ready         (avalon_f2h_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (avalon_f2h_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (avalon_f2h_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (avalon_f2h_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (avalon_f2h_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                               //       clk.clk
		.reset              (avalon_f2h_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.src_ready          (router_src_ready),                                            //       src.ready
		.src_valid          (router_src_valid),                                            //          .valid
		.src_data           (router_src_data),                                             //          .data
		.src_channel        (router_src_channel),                                          //          .channel
		.src_startofpacket  (router_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                       //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_001 router_001 (
		.sink_ready         (agent_pipeline_002_source0_ready),                                 //      sink.ready
		.sink_valid         (agent_pipeline_002_source0_valid),                                 //          .valid
		.sink_data          (agent_pipeline_002_source0_data),                                  //          .data
		.sink_startofpacket (agent_pipeline_002_source0_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (agent_pipeline_002_source0_endofpacket),                           //          .endofpacket
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_f2h_axi_slave_agent_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                             //       src.ready
		.src_valid          (router_001_src_valid),                                             //          .valid
		.src_data           (router_001_src_data),                                              //          .data
		.src_channel        (router_001_src_channel),                                           //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_001 router_002 (
		.sink_ready         (agent_pipeline_003_source0_ready),                                 //      sink.ready
		.sink_valid         (agent_pipeline_003_source0_valid),                                 //          .valid
		.sink_data          (agent_pipeline_003_source0_data),                                  //          .data
		.sink_startofpacket (agent_pipeline_003_source0_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (agent_pipeline_003_source0_endofpacket),                           //          .endofpacket
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_f2h_axi_slave_agent_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                             //       src.ready
		.src_valid          (router_002_src_valid),                                             //          .valid
		.src_data           (router_002_src_data),                                              //          .data
		.src_channel        (router_002_src_channel),                                           //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                        //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (102),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (101),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (28),
		.PIPELINED                 (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (2),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (1),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.REORDER                   (0)
	) avalon_f2h_avalon_universal_master_0_limiter (
		.clk                    (clk_0_clk_clk),                                                      //       clk.clk
		.reset                  (avalon_f2h_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                   //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                   //          .valid
		.cmd_sink_data          (router_src_data),                                                    //          .data
		.cmd_sink_channel       (router_src_channel),                                                 //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                           //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                             //          .endofpacket
		.cmd_src_ready          (avalon_f2h_avalon_universal_master_0_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (avalon_f2h_avalon_universal_master_0_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (avalon_f2h_avalon_universal_master_0_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (avalon_f2h_avalon_universal_master_0_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (avalon_f2h_avalon_universal_master_0_limiter_cmd_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (avalon_f2h_avalon_universal_master_0_limiter_cmd_src_valid),         //          .valid
		.rsp_sink_ready         (limiter_pipeline_001_source0_ready),                                 //  rsp_sink.ready
		.rsp_sink_valid         (limiter_pipeline_001_source0_valid),                                 //          .valid
		.rsp_sink_channel       (limiter_pipeline_001_source0_channel),                               //          .channel
		.rsp_sink_data          (limiter_pipeline_001_source0_data),                                  //          .data
		.rsp_sink_startofpacket (limiter_pipeline_001_source0_startofpacket),                         //          .startofpacket
		.rsp_sink_endofpacket   (limiter_pipeline_001_source0_endofpacket),                           //          .endofpacket
		.rsp_src_ready          (avalon_f2h_avalon_universal_master_0_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (avalon_f2h_avalon_universal_master_0_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (avalon_f2h_avalon_universal_master_0_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (avalon_f2h_avalon_universal_master_0_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (avalon_f2h_avalon_universal_master_0_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (avalon_f2h_avalon_universal_master_0_limiter_rsp_src_endofpacket)    //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_demux cmd_demux (
		.clk                (clk_0_clk_clk),                                //       clk.clk
		.reset              (avalon_f2h_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (limiter_pipeline_source0_ready),               //      sink.ready
		.sink_channel       (limiter_pipeline_source0_channel),             //          .channel
		.sink_data          (limiter_pipeline_source0_data),                //          .data
		.sink_startofpacket (limiter_pipeline_source0_startofpacket),       //          .startofpacket
		.sink_endofpacket   (limiter_pipeline_source0_endofpacket),         //          .endofpacket
		.sink_valid         (limiter_pipeline_source0_valid),               //          .valid
		.src0_ready         (cmd_demux_src0_ready),                         //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                         //          .valid
		.src0_data          (cmd_demux_src0_data),                          //          .data
		.src0_channel       (cmd_demux_src0_channel),                       //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                         //      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                         //          .valid
		.src1_data          (cmd_demux_src1_data),                          //          .data
		.src1_channel       (cmd_demux_src1_channel),                       //          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket)                    //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                                    //       clk.clk
		.reset               (hps_0_f2h_axi_slave_agent_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                //       src.ready
		.src_valid           (cmd_mux_src_valid),                                                //          .valid
		.src_data            (cmd_mux_src_data),                                                 //          .data
		.src_channel         (cmd_mux_src_channel),                                              //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                          //          .endofpacket
		.sink0_ready         (mux_pipeline_source0_ready),                                       //     sink0.ready
		.sink0_valid         (mux_pipeline_source0_valid),                                       //          .valid
		.sink0_channel       (mux_pipeline_source0_channel),                                     //          .channel
		.sink0_data          (mux_pipeline_source0_data),                                        //          .data
		.sink0_startofpacket (mux_pipeline_source0_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_source0_endofpacket)                                  //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                                    //       clk.clk
		.reset               (hps_0_f2h_axi_slave_agent_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                            //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                            //          .valid
		.src_data            (cmd_mux_001_src_data),                                             //          .data
		.src_channel         (cmd_mux_001_src_channel),                                          //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                      //          .endofpacket
		.sink0_ready         (mux_pipeline_001_source0_ready),                                   //     sink0.ready
		.sink0_valid         (mux_pipeline_001_source0_valid),                                   //          .valid
		.sink0_channel       (mux_pipeline_001_source0_channel),                                 //          .channel
		.sink0_data          (mux_pipeline_001_source0_data),                                    //          .data
		.sink0_startofpacket (mux_pipeline_001_source0_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_001_source0_endofpacket)                              //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_f2h_axi_slave_agent_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                             //      sink.ready
		.sink_channel       (router_001_src_channel),                                           //          .channel
		.sink_data          (router_001_src_data),                                              //          .data
		.sink_startofpacket (router_001_src_startofpacket),                                     //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                       //          .endofpacket
		.sink_valid         (router_001_src_valid),                                             //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                             //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                             //          .valid
		.src0_data          (rsp_demux_src0_data),                                              //          .data
		.src0_channel       (rsp_demux_src0_channel),                                           //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_f2h_axi_slave_agent_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                                             //      sink.ready
		.sink_channel       (router_002_src_channel),                                           //          .channel
		.sink_data          (router_002_src_data),                                              //          .data
		.sink_startofpacket (router_002_src_startofpacket),                                     //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                                       //          .endofpacket
		.sink_valid         (router_002_src_valid),                                             //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                         //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                         //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                          //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                       //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                                    //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_mux rsp_mux (
		.clk                 (clk_0_clk_clk),                                //       clk.clk
		.reset               (avalon_f2h_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                            //       src.ready
		.src_valid           (rsp_mux_src_valid),                            //          .valid
		.src_data            (rsp_mux_src_data),                             //          .data
		.src_channel         (rsp_mux_src_channel),                          //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (mux_pipeline_002_source0_ready),               //     sink0.ready
		.sink0_valid         (mux_pipeline_002_source0_valid),               //          .valid
		.sink0_channel       (mux_pipeline_002_source0_channel),             //          .channel
		.sink0_data          (mux_pipeline_002_source0_data),                //          .data
		.sink0_startofpacket (mux_pipeline_002_source0_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_002_source0_endofpacket),         //          .endofpacket
		.sink1_ready         (mux_pipeline_003_source0_ready),               //     sink1.ready
		.sink1_valid         (mux_pipeline_003_source0_valid),               //          .valid
		.sink1_channel       (mux_pipeline_003_source0_channel),             //          .channel
		.sink1_data          (mux_pipeline_003_source0_data),                //          .data
		.sink1_startofpacket (mux_pipeline_003_source0_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_003_source0_endofpacket)          //          .endofpacket
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline (
		.clk               (clk_0_clk_clk),                                                      //       cr0.clk
		.reset             (avalon_f2h_reset_reset_bridge_in_reset_reset),                       // cr0_reset.reset
		.in_ready          (avalon_f2h_avalon_universal_master_0_limiter_cmd_src_ready),         //     sink0.ready
		.in_valid          (avalon_f2h_avalon_universal_master_0_limiter_cmd_src_valid),         //          .valid
		.in_startofpacket  (avalon_f2h_avalon_universal_master_0_limiter_cmd_src_startofpacket), //          .startofpacket
		.in_endofpacket    (avalon_f2h_avalon_universal_master_0_limiter_cmd_src_endofpacket),   //          .endofpacket
		.in_data           (avalon_f2h_avalon_universal_master_0_limiter_cmd_src_data),          //          .data
		.in_channel        (avalon_f2h_avalon_universal_master_0_limiter_cmd_src_channel),       //          .channel
		.out_ready         (limiter_pipeline_source0_ready),                                     //   source0.ready
		.out_valid         (limiter_pipeline_source0_valid),                                     //          .valid
		.out_startofpacket (limiter_pipeline_source0_startofpacket),                             //          .startofpacket
		.out_endofpacket   (limiter_pipeline_source0_endofpacket),                               //          .endofpacket
		.out_data          (limiter_pipeline_source0_data),                                      //          .data
		.out_channel       (limiter_pipeline_source0_channel),                                   //          .channel
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_error          (1'b0)                                                                // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_001 (
		.clk               (clk_0_clk_clk),                                //       cr0.clk
		.reset             (avalon_f2h_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_mux_src_ready),                            //     sink0.ready
		.in_valid          (rsp_mux_src_valid),                            //          .valid
		.in_startofpacket  (rsp_mux_src_startofpacket),                    //          .startofpacket
		.in_endofpacket    (rsp_mux_src_endofpacket),                      //          .endofpacket
		.in_data           (rsp_mux_src_data),                             //          .data
		.in_channel        (rsp_mux_src_channel),                          //          .channel
		.out_ready         (limiter_pipeline_001_source0_ready),           //   source0.ready
		.out_valid         (limiter_pipeline_001_source0_valid),           //          .valid
		.out_startofpacket (limiter_pipeline_001_source0_startofpacket),   //          .startofpacket
		.out_endofpacket   (limiter_pipeline_001_source0_endofpacket),     //          .endofpacket
		.out_data          (limiter_pipeline_001_source0_data),            //          .data
		.out_channel       (limiter_pipeline_001_source0_channel),         //          .channel
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.out_error         (),                                             // (terminated)
		.in_error          (1'b0)                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline (
		.clk               (clk_0_clk_clk),                                                    //       cr0.clk
		.reset             (hps_0_f2h_axi_slave_agent_reset_sink_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_src_ready),                                                //     sink0.ready
		.in_valid          (cmd_mux_src_valid),                                                //          .valid
		.in_startofpacket  (cmd_mux_src_startofpacket),                                        //          .startofpacket
		.in_endofpacket    (cmd_mux_src_endofpacket),                                          //          .endofpacket
		.in_data           (cmd_mux_src_data),                                                 //          .data
		.in_channel        (cmd_mux_src_channel),                                              //          .channel
		.out_ready         (agent_pipeline_source0_ready),                                     //   source0.ready
		.out_valid         (agent_pipeline_source0_valid),                                     //          .valid
		.out_startofpacket (agent_pipeline_source0_startofpacket),                             //          .startofpacket
		.out_endofpacket   (agent_pipeline_source0_endofpacket),                               //          .endofpacket
		.out_data          (agent_pipeline_source0_data),                                      //          .data
		.out_channel       (agent_pipeline_source0_channel),                                   //          .channel
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_error          (1'b0)                                                              // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_001 (
		.clk               (clk_0_clk_clk),                                                    //       cr0.clk
		.reset             (hps_0_f2h_axi_slave_agent_reset_sink_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_001_src_ready),                                            //     sink0.ready
		.in_valid          (cmd_mux_001_src_valid),                                            //          .valid
		.in_startofpacket  (cmd_mux_001_src_startofpacket),                                    //          .startofpacket
		.in_endofpacket    (cmd_mux_001_src_endofpacket),                                      //          .endofpacket
		.in_data           (cmd_mux_001_src_data),                                             //          .data
		.in_channel        (cmd_mux_001_src_channel),                                          //          .channel
		.out_ready         (agent_pipeline_001_source0_ready),                                 //   source0.ready
		.out_valid         (agent_pipeline_001_source0_valid),                                 //          .valid
		.out_startofpacket (agent_pipeline_001_source0_startofpacket),                         //          .startofpacket
		.out_endofpacket   (agent_pipeline_001_source0_endofpacket),                           //          .endofpacket
		.out_data          (agent_pipeline_001_source0_data),                                  //          .data
		.out_channel       (agent_pipeline_001_source0_channel),                               //          .channel
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_error          (1'b0)                                                              // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_002 (
		.clk               (clk_0_clk_clk),                                                    //       cr0.clk
		.reset             (hps_0_f2h_axi_slave_agent_reset_sink_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (hps_0_f2h_axi_slave_agent_write_rp_ready),                         //     sink0.ready
		.in_valid          (hps_0_f2h_axi_slave_agent_write_rp_valid),                         //          .valid
		.in_startofpacket  (hps_0_f2h_axi_slave_agent_write_rp_startofpacket),                 //          .startofpacket
		.in_endofpacket    (hps_0_f2h_axi_slave_agent_write_rp_endofpacket),                   //          .endofpacket
		.in_data           (hps_0_f2h_axi_slave_agent_write_rp_data),                          //          .data
		.out_ready         (agent_pipeline_002_source0_ready),                                 //   source0.ready
		.out_valid         (agent_pipeline_002_source0_valid),                                 //          .valid
		.out_startofpacket (agent_pipeline_002_source0_startofpacket),                         //          .startofpacket
		.out_endofpacket   (agent_pipeline_002_source0_endofpacket),                           //          .endofpacket
		.out_data          (agent_pipeline_002_source0_data),                                  //          .data
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_error          (1'b0),                                                             // (terminated)
		.out_channel       (),                                                                 // (terminated)
		.in_channel        (1'b0)                                                              // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_003 (
		.clk               (clk_0_clk_clk),                                                    //       cr0.clk
		.reset             (hps_0_f2h_axi_slave_agent_reset_sink_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (hps_0_f2h_axi_slave_agent_read_rp_ready),                          //     sink0.ready
		.in_valid          (hps_0_f2h_axi_slave_agent_read_rp_valid),                          //          .valid
		.in_startofpacket  (hps_0_f2h_axi_slave_agent_read_rp_startofpacket),                  //          .startofpacket
		.in_endofpacket    (hps_0_f2h_axi_slave_agent_read_rp_endofpacket),                    //          .endofpacket
		.in_data           (hps_0_f2h_axi_slave_agent_read_rp_data),                           //          .data
		.out_ready         (agent_pipeline_003_source0_ready),                                 //   source0.ready
		.out_valid         (agent_pipeline_003_source0_valid),                                 //          .valid
		.out_startofpacket (agent_pipeline_003_source0_startofpacket),                         //          .startofpacket
		.out_endofpacket   (agent_pipeline_003_source0_endofpacket),                           //          .endofpacket
		.out_data          (agent_pipeline_003_source0_data),                                  //          .data
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_error          (1'b0),                                                             // (terminated)
		.out_channel       (),                                                                 // (terminated)
		.in_channel        (1'b0)                                                              // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline (
		.clk               (clk_0_clk_clk),                                                    //       cr0.clk
		.reset             (hps_0_f2h_axi_slave_agent_reset_sink_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                             //     sink0.ready
		.in_valid          (cmd_demux_src0_valid),                                             //          .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                                     //          .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                                       //          .endofpacket
		.in_data           (cmd_demux_src0_data),                                              //          .data
		.in_channel        (cmd_demux_src0_channel),                                           //          .channel
		.out_ready         (mux_pipeline_source0_ready),                                       //   source0.ready
		.out_valid         (mux_pipeline_source0_valid),                                       //          .valid
		.out_startofpacket (mux_pipeline_source0_startofpacket),                               //          .startofpacket
		.out_endofpacket   (mux_pipeline_source0_endofpacket),                                 //          .endofpacket
		.out_data          (mux_pipeline_source0_data),                                        //          .data
		.out_channel       (mux_pipeline_source0_channel),                                     //          .channel
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_error          (1'b0)                                                              // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_001 (
		.clk               (clk_0_clk_clk),                                                    //       cr0.clk
		.reset             (hps_0_f2h_axi_slave_agent_reset_sink_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src1_ready),                                             //     sink0.ready
		.in_valid          (cmd_demux_src1_valid),                                             //          .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),                                     //          .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),                                       //          .endofpacket
		.in_data           (cmd_demux_src1_data),                                              //          .data
		.in_channel        (cmd_demux_src1_channel),                                           //          .channel
		.out_ready         (mux_pipeline_001_source0_ready),                                   //   source0.ready
		.out_valid         (mux_pipeline_001_source0_valid),                                   //          .valid
		.out_startofpacket (mux_pipeline_001_source0_startofpacket),                           //          .startofpacket
		.out_endofpacket   (mux_pipeline_001_source0_endofpacket),                             //          .endofpacket
		.out_data          (mux_pipeline_001_source0_data),                                    //          .data
		.out_channel       (mux_pipeline_001_source0_channel),                                 //          .channel
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_error          (1'b0)                                                              // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_002 (
		.clk               (clk_0_clk_clk),                                //       cr0.clk
		.reset             (avalon_f2h_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_src0_ready),                         //     sink0.ready
		.in_valid          (rsp_demux_src0_valid),                         //          .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                 //          .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                   //          .endofpacket
		.in_data           (rsp_demux_src0_data),                          //          .data
		.in_channel        (rsp_demux_src0_channel),                       //          .channel
		.out_ready         (mux_pipeline_002_source0_ready),               //   source0.ready
		.out_valid         (mux_pipeline_002_source0_valid),               //          .valid
		.out_startofpacket (mux_pipeline_002_source0_startofpacket),       //          .startofpacket
		.out_endofpacket   (mux_pipeline_002_source0_endofpacket),         //          .endofpacket
		.out_data          (mux_pipeline_002_source0_data),                //          .data
		.out_channel       (mux_pipeline_002_source0_channel),             //          .channel
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.out_error         (),                                             // (terminated)
		.in_error          (1'b0)                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_003 (
		.clk               (clk_0_clk_clk),                                //       cr0.clk
		.reset             (avalon_f2h_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                     //     sink0.ready
		.in_valid          (rsp_demux_001_src0_valid),                     //          .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),             //          .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),               //          .endofpacket
		.in_data           (rsp_demux_001_src0_data),                      //          .data
		.in_channel        (rsp_demux_001_src0_channel),                   //          .channel
		.out_ready         (mux_pipeline_003_source0_ready),               //   source0.ready
		.out_valid         (mux_pipeline_003_source0_valid),               //          .valid
		.out_startofpacket (mux_pipeline_003_source0_startofpacket),       //          .startofpacket
		.out_endofpacket   (mux_pipeline_003_source0_endofpacket),         //          .endofpacket
		.out_data          (mux_pipeline_003_source0_data),                //          .data
		.out_channel       (mux_pipeline_003_source0_channel),             //          .channel
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.out_error         (),                                             // (terminated)
		.in_error          (1'b0)                                          // (terminated)
	);

endmodule
