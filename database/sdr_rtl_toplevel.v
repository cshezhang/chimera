////////////////////////////////////////////////////////////////////////////////
//
// Filename:	./toplevel.v
// {{{
// Project:	SDR, a basic Soft(Gate)ware Defined Radio architecture
//
// DO NOT EDIT THIS FILE!
// Computer Generated: This file is computer generated by AUTOFPGA. DO NOT EDIT.
// DO NOT EDIT THIS FILE!
//
// CmdLine:	autofpga autofpga -d -o . global.txt clock36.txt version.txt hexbus.txt gpio.txt qpsksim.txt histogram.txt rfscope.txt samplerate.txt
//
// Creator:	Dan Gisselquist, Ph.D.
//		Gisselquist Technology, LLC
//
////////////////////////////////////////////////////////////////////////////////
// }}}
// Copyright (C) 2019-2024, Gisselquist Technology, LLC
// {{{
// This program is free software (firmware): you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
// target there if the PDF file isn't present.)  If not, see
// <http://www.gnu.org/licenses/> for a copy.
// }}}
// License:	GPL, v3, as defined and found on www.gnu.org,
// {{{
//		http://www.gnu.org/licenses/gpl.html
//
////////////////////////////////////////////////////////////////////////////////
//
// }}}
`default_nettype	none


//
// Here we declare our toplevel.v (toplevel) design module.
// All design logic must take place beneath this top level.
//
// The port declarations just copy data from the @TOP.PORTLIST
// key, or equivalently from the @MAIN.PORTLIST key if
// @TOP.PORTLIST is absent.  For those peripherals that don't need
// any top level logic, the @MAIN.PORTLIST should be sufficent,
// so the @TOP.PORTLIST key may be left undefined.
//
// The only exception is that any clocks with CLOCK.TOP tags will
// also appear in this list
//
module	toplevel(i_clk_12mhz,
		// Transmitter I/O ports
		o_rf_data, o_mic_csn, o_mic_sck, i_mic_miso,
		// Receiver I/O ports
		o_pwm_audio, o_pwm_shutdown_n, o_pwm_gain,
		// GPIO ports
		io_i2c_scl, io_i2c_sda, o_ledg, o_ledr, i_btn, o_rf_clk,
 		// UART/host to wishbone interface
 		i_host_uart_rx, o_host_uart_tx);
	//
	// Declaring our input and output ports.  We listed these above,
	// now we are declaring them here.
	//
	// These declarations just copy data from the @TOP.IODECLS key,
	// or from the @MAIN.IODECL key if @TOP.IODECL is absent.  For
	// those peripherals that don't do anything at the top level,
	// the @MAIN.IODECL key should be sufficient, so the @TOP.IODECL
	// key may be left undefined.
	//
	// We start with any @CLOCK.TOP keys
	//
	input	wire		i_clk_12mhz;
	output	wire	[1:0]	o_rf_data;
	output	wire		o_mic_csn, o_mic_sck;
	input	wire		i_mic_miso;
	output	wire		o_pwm_audio, o_pwm_shutdown_n, o_pwm_gain;
	// GPIO wires
	inout	wire		io_i2c_scl, io_i2c_sda;
	output	wire		o_ledg;
	output	wire		o_ledr;
	input	wire	[3:0]	i_btn;
	output	wire		o_rf_clk;
	input	wire		i_host_uart_rx;
	output	wire		o_host_uart_tx;


	//
	// Declaring component data, internal wires and registers
	//
	// These declarations just copy data from the @TOP.DEFNS key
	// within the component data files.
	//
	// GPIO declarations.  The two wire busses are just virtual lists of
	// input (or output) ports.
	wire	[6 -1:0]	i_gpio;
	wire	[9-1:0]	o_gpio;
	wire				i_i2c_sda, i_i2c_scl;
	wire		s_clk, s_reset, pll_locked;
	reg	[2:0]	reset_pipe;
	reg	[9:0]	rst_counter;


	//
	// Time to call the main module within main.v.  Remember, the purpose
	// of the main.v module is to contain all of our portable logic.
	// Things that are Xilinx (or even Altera) specific, or for that
	// matter anything that requires something other than on-off logic,
	// such as the high impedence states required by many wires, is
	// kept in this (toplevel.v) module.  Everything else goes in
	// main.v.
	//
	// We automatically place s_clk, and s_reset here.  You may need
	// to define those above.  (You did, didn't you?)  Other
	// component descriptions come from the keys @TOP.MAIN (if it
	// exists), or @MAIN.PORTLIST if it does not.
	//

	main	thedesign(s_clk, s_reset,
		// Transmitter I/O ports
		o_rf_data, o_mic_csn, o_mic_sck, i_mic_miso,
		// Receiver I/O ports
		o_pwm_audio, o_pwm_shutdown_n, o_pwm_gain,
		// GPIO wires
		i_gpio, o_gpio,
 		// UART/host to wishbone interface
 		i_host_uart_rx, o_host_uart_tx);


	//
	// Our final section to the toplevel is used to provide all of
	// that special logic that couldnt fit in main.  This logic is
	// given by the @TOP.INSERT tag in our data files.
	//


	assign	i_gpio = { i_btn[3:1], ~i_btn[0], i_i2c_sda, i_i2c_scl };
	assign	o_ledg = !o_gpio[2];
	assign	o_ledr = !o_gpio[3] || !pll_locked;

	i2cio sckz(o_gpio[0], i_i2c_scl, io_i2c_scl);
	i2cio sdaz(o_gpio[1], i_i2c_sda, io_i2c_sda);

	oclkddr
	rfclock(s_clk, { o_gpio[4], 1'b0 }, o_rf_clk);
	

	// No resets?
	// assign	s_reset = 1'b0;
	initial	reset_pipe = -1;
	always @(posedge s_clk, negedge pll_locked)
	if (!pll_locked)
		reset_pipe <= -1;
	else
		reset_pipe <= { reset_pipe[1:0], 1'b0 };

	initial	rst_counter = 0;
	always @(posedge s_clk)
	if (reset_pipe[2])
		rst_counter <= 0;
	else if (!rst_counter[9])
		rst_counter <= rst_counter + 1;

	assign	s_reset = !rst_counter[9];

`ifdef	VERILATOR
	assign	s_clk = i_clk;
	assign	pll_locked = 1'b1;
`else
	// wire		s_clk_36mhz;

	SB_PLL40_PAD #(
		/**
 		* PLL configuration
 		*
 		* This Verilog header file was generated automatically
 		* using the icepll tool from the IceStorm project.
 		* It is intended for use with FPGA primitives SB_PLL40_CORE,
 		* SB_PLL40_PAD, SB_PLL40_2_PAD, SB_PLL40_2F_CORE or
		* SB_PLL40_2F_PAD.
 		* Use at your own risk.
 		*
 		* Given input frequency:        12.000 MHz
 		* Requested output frequency:   36.000 MHz
 		* Achieved output frequency:    36.000 MHz
 		*/

		.FEEDBACK_PATH("SIMPLE"),
		.DIVR(4'b0000),		// DIVR =  0
		.DIVF(7'b0101111),	// DIVF = 47
		.DIVQ(3'b100),		// DIVQ =  4
		.FILTER_RANGE(3'b001)	// FILTER_RANGE = 1
	) pll (
		.PACKAGEPIN(i_clk_12mhz),
		// .PLLOUTCORE(s_clk_36mhz),
		.PLLOUTCORE(s_clk),
		.LOCK(pll_locked),
		.BYPASS(1'b0),
		.RESETB(1'b1));

	// SB_GB global_buffer(s_clk_36mhz, s_clk);
`endif




endmodule // end of toplevel.v module definition
