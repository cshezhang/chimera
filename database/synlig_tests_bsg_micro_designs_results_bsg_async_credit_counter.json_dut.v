/* Generated by Yosys 0.27+9 (git sha1 101d19bb6, gcc 11.2.0-7ubuntu2 -fPIC -Os) */


module \$paramod$f096e2053a9b52ec52dbdcc8413808dc69e3cc65\bsg_launch_sync_sync (iclk_i, iclk_reset_i, oclk_i, iclk_data_i, iclk_data_o, oclk_data_o);
  
  input [1:0] iclk_data_i;
  wire [1:0] iclk_data_i;
  
  output [1:0] iclk_data_o;
  wire [1:0] iclk_data_o;
  
  input iclk_i;
  wire iclk_i;
  
  input iclk_reset_i;
  wire iclk_reset_i;
  
  output [1:0] oclk_data_o;
  wire [1:0] oclk_data_o;
  
  input oclk_i;
  wire oclk_i;
  (* module_not_derived = 32'd1 *)
  
  bsg_launch_sync_sync_posedge_2_unit \sync.p.z.blss  (
    .iclk_data_i(iclk_data_i),
    .iclk_data_o(iclk_data_o),
    .iclk_i(iclk_i),
    .iclk_reset_i(iclk_reset_i),
    .oclk_data_o(oclk_data_o),
    .oclk_i(oclk_i)
  );
endmodule


module \$paramod$f943ade877fe43c67714d73114fb3b807c491252\bsg_async_ptr_gray (w_clk_i, w_reset_i, w_inc_i, r_clk_i, w_ptr_binary_r_o, w_ptr_gray_r_o, w_ptr_gray_r_rsync_o);
  
  input r_clk_i;
  wire r_clk_i;
  
  input w_clk_i;
  wire w_clk_i;
  
  input w_inc_i;
  wire w_inc_i;
  
  output [1:0] w_ptr_binary_r_o;
  wire [1:0] w_ptr_binary_r_o;
  
  wire [1:0] w_ptr_gray_n;
  
  wire [1:0] w_ptr_gray_r;
  
  output [1:0] w_ptr_gray_r_o;
  wire [1:0] w_ptr_gray_r_o;
  
  wire [1:0] w_ptr_gray_r_rsync;
  
  output [1:0] w_ptr_gray_r_rsync_o;
  wire [1:0] w_ptr_gray_r_rsync_o;
  
  reg [1:0] w_ptr_p1_r;
  
  wire [1:0] w_ptr_p2;
  
  reg [1:0] w_ptr_r;
  
  input w_reset_i;
  wire w_reset_i;
  assign w_ptr_p2[0] = ~w_ptr_p1_r[0];
  assign w_ptr_p2[1] = w_ptr_p1_r[1] ^ w_ptr_p1_r[0];
  assign w_ptr_gray_n[0] = w_inc_i ? w_ptr_p2[1] : w_ptr_gray_r[0];
  assign w_ptr_gray_n[1] = w_inc_i ? w_ptr_p1_r[1] : w_ptr_gray_r[1];
  
  always @(posedge w_clk_i)
    if (w_reset_i) w_ptr_r[0] <= 1'h0;
    else if (w_inc_i) w_ptr_r[0] <= w_ptr_p1_r[0];
  
  always @(posedge w_clk_i)
    if (w_reset_i) w_ptr_r[1] <= 1'h0;
    else if (w_inc_i) w_ptr_r[1] <= w_ptr_p1_r[1];
  
  always @(posedge w_clk_i)
    if (w_reset_i) w_ptr_p1_r[0] <= 1'h1;
    else if (w_inc_i) w_ptr_p1_r[0] <= w_ptr_p2[0];
  
  always @(posedge w_clk_i)
    if (w_reset_i) w_ptr_p1_r[1] <= 1'h0;
    else if (w_inc_i) w_ptr_p1_r[1] <= w_ptr_p2[1];
  (* module_not_derived = 32'd1 *)
  
  \$paramod$f096e2053a9b52ec52dbdcc8413808dc69e3cc65\bsg_launch_sync_sync  ptr_sync (
    .iclk_data_i(w_ptr_gray_n),
    .iclk_data_o(w_ptr_gray_r),
    .iclk_i(w_clk_i),
    .iclk_reset_i(w_reset_i),
    .oclk_data_o(w_ptr_gray_r_rsync),
    .oclk_i(r_clk_i)
  );
  assign w_ptr_binary_r_o = w_ptr_r;
  assign w_ptr_gray_r_o = w_ptr_gray_r;
  assign w_ptr_gray_r_rsync_o = w_ptr_gray_r_rsync;
endmodule

(* top =  1  *)

module bsg_async_credit_counter(w_clk_i, w_inc_token_i, w_reset_i, r_clk_i, r_reset_i, r_dec_credit_i, r_infinite_credits_i, r_credits_avail_o);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  (* force_downto = 32'd1 *)
  
  wire [5:0] _15_;
  (* force_downto = 32'd1 *)
  
  wire [5:0] _16_;
  
  input r_clk_i;
  wire r_clk_i;
  
  reg [5:0] r_counter_r;
  
  wire [1:0] r_counter_r_hi_bits;
  
  (* unused_bits = "0" *)
  wire [1:0] r_counter_r_hi_bits_gray;
  
  output r_credits_avail_o;
  wire r_credits_avail_o;
  
  input r_dec_credit_i;
  wire r_dec_credit_i;
  
  input r_infinite_credits_i;
  wire r_infinite_credits_i;
  
  input r_reset_i;
  wire r_reset_i;
  
  input w_clk_i;
  wire w_clk_i;
  
  (* unused_bits = "0 1" *)
  wire [1:0] w_counter_gray_r;
  
  wire [1:0] w_counter_gray_r_rsync;
  
  input w_inc_token_i;
  wire w_inc_token_i;
  
  input w_reset_i;
  wire w_reset_i;
  assign _00_ = r_counter_r[1] | r_counter_r[0];
  assign _01_ = r_counter_r[3] | r_counter_r[2];
  assign _02_ = _01_ | _00_;
  assign _03_ = _02_ | r_infinite_credits_i;
  assign _04_ = r_counter_r[4] ^ r_counter_r[5];
  assign _05_ = _04_ ^ w_counter_gray_r_rsync[0];
  assign _06_ = w_counter_gray_r_rsync[1] ^ r_counter_r[5];
  assign _07_ = _06_ | _05_;
  assign r_credits_avail_o = _07_ | _03_;
  assign _08_ = ~r_counter_r[1];
  assign _09_ = ~(r_dec_credit_i & r_counter_r[0]);
  assign _16_[1] = _09_ ^ _08_;
  assign _10_ = _09_ | _08_;
  assign _16_[2] = ~(_10_ ^ r_counter_r[2]);
  assign _11_ = r_counter_r[2] & ~(_10_);
  assign _16_[3] = _11_ ^ r_counter_r[3];
  assign _12_ = ~(r_counter_r[3] & r_counter_r[2]);
  assign _13_ = _12_ | _10_;
  assign _16_[4] = ~(_13_ ^ r_counter_r[4]);
  assign _14_ = r_counter_r[4] & ~(_13_);
  assign _16_[5] = _14_ ^ r_counter_r[5];
  assign _15_[0] = r_dec_credit_i ^ r_counter_r[0];
  
  always @(posedge r_clk_i)
    if (r_reset_i) r_counter_r[0] <= 1'h0;
    else r_counter_r[0] <= _15_[0];
  
  always @(posedge r_clk_i)
    if (r_reset_i) r_counter_r[1] <= 1'h0;
    else r_counter_r[1] <= _16_[1];
  
  always @(posedge r_clk_i)
    if (r_reset_i) r_counter_r[2] <= 1'h0;
    else r_counter_r[2] <= _16_[2];
  
  always @(posedge r_clk_i)
    if (r_reset_i) r_counter_r[3] <= 1'h0;
    else r_counter_r[3] <= _16_[3];
  
  always @(posedge r_clk_i)
    if (r_reset_i) r_counter_r[4] <= 1'h0;
    else r_counter_r[4] <= _16_[4];
  
  always @(posedge r_clk_i)
    if (r_reset_i) r_counter_r[5] <= 1'h1;
    else r_counter_r[5] <= _16_[5];
  (* module_not_derived = 32'd1 *)
  
  \$paramod$f943ade877fe43c67714d73114fb3b807c491252\bsg_async_ptr_gray  bapg (
    .r_clk_i(r_clk_i),
    .w_clk_i(w_clk_i),
    .w_inc_i(w_inc_token_i),
    .w_ptr_gray_r_o(w_counter_gray_r),
    .w_ptr_gray_r_rsync_o(w_counter_gray_r_rsync),
    .w_reset_i(w_reset_i)
  );
  assign _15_[5:1] = r_counter_r[5:1];
  assign _16_[0] = _15_[0];
  assign r_counter_r_hi_bits = r_counter_r[5:4];
  assign r_counter_r_hi_bits_gray[1] = r_counter_r[5];
endmodule


module bsg_launch_sync_sync_posedge_2_unit(iclk_i, iclk_reset_i, oclk_i, iclk_data_i, iclk_data_o, oclk_data_o);
  
  reg [1:0] bsg_SYNC_1_r;
  
  reg [1:0] bsg_SYNC_2_r;
  
  reg [1:0] bsg_SYNC_LNCH_r;
  
  input [1:0] iclk_data_i;
  wire [1:0] iclk_data_i;
  
  output [1:0] iclk_data_o;
  wire [1:0] iclk_data_o;
  
  input iclk_i;
  wire iclk_i;
  
  input iclk_reset_i;
  wire iclk_reset_i;
  
  output [1:0] oclk_data_o;
  wire [1:0] oclk_data_o;
  
  input oclk_i;
  wire oclk_i;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge iclk_i)
    if (iclk_reset_i) bsg_SYNC_LNCH_r[0] <= 1'h0;
    else bsg_SYNC_LNCH_r[0] <= iclk_data_i[0];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge iclk_i)
    if (iclk_reset_i) bsg_SYNC_LNCH_r[1] <= 1'h0;
    else bsg_SYNC_LNCH_r[1] <= iclk_data_i[1];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge oclk_i)
    bsg_SYNC_2_r[0] <= bsg_SYNC_1_r[0];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge oclk_i)
    bsg_SYNC_2_r[1] <= bsg_SYNC_1_r[1];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge oclk_i)
    bsg_SYNC_1_r[0] <= bsg_SYNC_LNCH_r[0];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge oclk_i)
    bsg_SYNC_1_r[1] <= bsg_SYNC_LNCH_r[1];
  assign iclk_data_o = bsg_SYNC_LNCH_r;
  assign oclk_data_o = bsg_SYNC_2_r;
endmodule

