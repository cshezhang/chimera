/* Generated by Yosys 0.27+9 (git sha1 101d19bb6, gcc 11.2.0-7ubuntu2 -fPIC -Os) */


module \$paramod$93805a5ea0f6cec23d39b44c0227cf8087c0f302\bsg_mux_segmented (data0_i, data1_i, sel_i, data_o);
  
  input [31:0] data0_i;
  wire [31:0] data0_i;
  
  input [31:0] data1_i;
  wire [31:0] data1_i;
  
  output [31:0] data_o;
  wire [31:0] data_o;
  
  input [3:0] sel_i;
  wire [3:0] sel_i;
  assign data_o[0] = sel_i[0] ? data1_i[0] : data0_i[0];
  assign data_o[1] = sel_i[0] ? data1_i[1] : data0_i[1];
  assign data_o[2] = sel_i[0] ? data1_i[2] : data0_i[2];
  assign data_o[3] = sel_i[0] ? data1_i[3] : data0_i[3];
  assign data_o[4] = sel_i[0] ? data1_i[4] : data0_i[4];
  assign data_o[5] = sel_i[0] ? data1_i[5] : data0_i[5];
  assign data_o[6] = sel_i[0] ? data1_i[6] : data0_i[6];
  assign data_o[7] = sel_i[0] ? data1_i[7] : data0_i[7];
  assign data_o[8] = sel_i[1] ? data1_i[8] : data0_i[8];
  assign data_o[9] = sel_i[1] ? data1_i[9] : data0_i[9];
  assign data_o[10] = sel_i[1] ? data1_i[10] : data0_i[10];
  assign data_o[11] = sel_i[1] ? data1_i[11] : data0_i[11];
  assign data_o[12] = sel_i[1] ? data1_i[12] : data0_i[12];
  assign data_o[13] = sel_i[1] ? data1_i[13] : data0_i[13];
  assign data_o[14] = sel_i[1] ? data1_i[14] : data0_i[14];
  assign data_o[15] = sel_i[1] ? data1_i[15] : data0_i[15];
  assign data_o[16] = sel_i[2] ? data1_i[16] : data0_i[16];
  assign data_o[17] = sel_i[2] ? data1_i[17] : data0_i[17];
  assign data_o[18] = sel_i[2] ? data1_i[18] : data0_i[18];
  assign data_o[19] = sel_i[2] ? data1_i[19] : data0_i[19];
  assign data_o[20] = sel_i[2] ? data1_i[20] : data0_i[20];
  assign data_o[21] = sel_i[2] ? data1_i[21] : data0_i[21];
  assign data_o[22] = sel_i[2] ? data1_i[22] : data0_i[22];
  assign data_o[23] = sel_i[2] ? data1_i[23] : data0_i[23];
  assign data_o[24] = sel_i[3] ? data1_i[24] : data0_i[24];
  assign data_o[25] = sel_i[3] ? data1_i[25] : data0_i[25];
  assign data_o[26] = sel_i[3] ? data1_i[26] : data0_i[26];
  assign data_o[27] = sel_i[3] ? data1_i[27] : data0_i[27];
  assign data_o[28] = sel_i[3] ? data1_i[28] : data0_i[28];
  assign data_o[29] = sel_i[3] ? data1_i[29] : data0_i[29];
  assign data_o[30] = sel_i[3] ? data1_i[30] : data0_i[30];
  assign data_o[31] = sel_i[3] ? data1_i[31] : data0_i[31];
endmodule


module \$paramod\bsg_cache_buffer_queue\width_p=s32'00000000000000000000000001000001 (clk_i, reset_i, v_i, data_i, v_o, data_o, yumi_i, el0_valid_o, el1_valid_o, el0_snoop_o, el1_snoop_o, empty_o, full_o);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  
  wire _022_;
  
  wire _023_;
  
  wire _024_;
  
  wire _025_;
  
  wire _026_;
  
  wire _027_;
  
  wire _028_;
  
  wire _029_;
  
  wire _030_;
  
  wire _031_;
  
  wire _032_;
  
  wire _033_;
  
  wire _034_;
  
  wire _035_;
  
  wire _036_;
  
  wire _037_;
  
  wire _038_;
  
  wire _039_;
  
  wire _040_;
  
  wire _041_;
  
  wire _042_;
  
  wire _043_;
  
  wire _044_;
  
  wire _045_;
  
  wire _046_;
  
  wire _047_;
  
  wire _048_;
  
  wire _049_;
  
  wire _050_;
  
  wire _051_;
  
  wire _052_;
  
  wire _053_;
  
  wire _054_;
  
  wire _055_;
  
  wire _056_;
  
  wire _057_;
  
  wire _058_;
  
  wire _059_;
  
  wire _060_;
  
  wire _061_;
  
  wire _062_;
  
  wire _063_;
  
  wire _064_;
  
  wire _065_;
  
  wire _066_;
  
  wire _067_;
  
  wire _068_;
  
  wire _069_;
  
  wire _070_;
  
  wire _071_;
  
  wire _072_;
  
  wire _073_;
  
  wire _074_;
  
  wire _075_;
  
  wire _076_;
  
  wire _077_;
  
  wire _078_;
  
  wire _079_;
  
  wire _080_;
  
  wire _081_;
  
  wire _082_;
  
  wire _083_;
  
  wire _084_;
  
  wire _085_;
  
  wire _086_;
  (* force_downto = 32'd1 *)
  
  (* unused_bits = "1" *)
  wire [1:0] _087_;
  (* force_downto = 32'd1 *)
  
  wire [1:0] _088_;
  
  input clk_i;
  wire clk_i;
  
  input [64:0] data_i;
  wire [64:0] data_i;
  
  output [64:0] data_o;
  wire [64:0] data_o;
  
  wire el0_enable;
  
  reg [64:0] el0_r;
  
  output [64:0] el0_snoop_o;
  wire [64:0] el0_snoop_o;
  
  output el0_valid_o;
  wire el0_valid_o;
  
  wire el1_enable;
  
  reg [64:0] el1_r;
  
  output [64:0] el1_snoop_o;
  wire [64:0] el1_snoop_o;
  
  output el1_valid_o;
  wire el1_valid_o;
  
  output empty_o;
  wire empty_o;
  
  output full_o;
  wire full_o;
  
  wire mux0_sel;
  
  wire mux1_sel;
  
  reg [1:0] num_els_r;
  
  input reset_i;
  wire reset_i;
  
  input v_i;
  wire v_i;
  
  output v_o;
  wire v_o;
  
  input yumi_i;
  wire yumi_i;
  assign data_o[47] = _002_ ? data_i[47] : el1_r[47];
  assign data_o[48] = _002_ ? data_i[48] : el1_r[48];
  assign data_o[49] = _002_ ? data_i[49] : el1_r[49];
  assign data_o[50] = _002_ ? data_i[50] : el1_r[50];
  assign data_o[51] = _002_ ? data_i[51] : el1_r[51];
  assign data_o[52] = _002_ ? data_i[52] : el1_r[52];
  assign data_o[53] = _002_ ? data_i[53] : el1_r[53];
  assign data_o[54] = _002_ ? data_i[54] : el1_r[54];
  assign data_o[55] = _002_ ? data_i[55] : el1_r[55];
  assign data_o[56] = _002_ ? data_i[56] : el1_r[56];
  assign data_o[57] = _002_ ? data_i[57] : el1_r[57];
  assign data_o[58] = _002_ ? data_i[58] : el1_r[58];
  assign data_o[59] = _002_ ? data_i[59] : el1_r[59];
  assign data_o[60] = _002_ ? data_i[60] : el1_r[60];
  assign data_o[61] = _002_ ? data_i[61] : el1_r[61];
  assign data_o[62] = _002_ ? data_i[62] : el1_r[62];
  assign data_o[63] = _002_ ? data_i[63] : el1_r[63];
  assign data_o[64] = _002_ ? data_i[64] : el1_r[64];
  assign _003_ = yumi_i & ~(_000_);
  assign _004_ = ~(yumi_i & v_i);
  assign _005_ = _001_ & ~(_004_);
  assign _006_ = _005_ | _003_;
  assign _007_ = yumi_i | ~(v_i);
  assign _008_ = empty_o & ~(_007_);
  assign _009_ = _008_ | _006_;
  assign _010_ = num_els_r[0] & num_els_r[1];
  assign el1_enable = _009_ & ~(_010_);
  assign _011_ = _004_ | _000_;
  assign _012_ = _001_ & ~(_007_);
  assign _013_ = _011_ & ~(_012_);
  assign el0_enable = el1_valid_o & ~(_013_);
  assign _014_ = ~v_i;
  assign _015_ = empty_o & ~(_014_);
  assign _016_ = _002_ & ~(_015_);
  assign v_o = ~(_016_ | _010_);
  assign _017_ = v_o & yumi_i;
  assign _018_ = _017_ & ~(v_i);
  assign _019_ = _018_ ^ num_els_r[1];
  assign _020_ = _017_ ^ _014_;
  assign _021_ = num_els_r[0] & ~(_020_);
  assign _088_[1] = _021_ ^ _019_;
  assign _087_[0] = ~(_020_ ^ num_els_r[0]);
  assign _000_ = num_els_r[0] | ~(num_els_r[1]);
  assign el0_valid_o = ~_000_;
  assign _001_ = num_els_r[0] & ~(num_els_r[1]);
  assign _002_ = _000_ & ~(_001_);
  assign el1_valid_o = ~_002_;
  assign empty_o = ~(num_els_r[0] | num_els_r[1]);
  assign _022_ = _000_ ? data_i[0] : el0_r[0];
  assign _033_ = _000_ ? data_i[1] : el0_r[1];
  assign _044_ = _000_ ? data_i[2] : el0_r[2];
  assign _055_ = _000_ ? data_i[3] : el0_r[3];
  assign _066_ = _000_ ? data_i[4] : el0_r[4];
  assign _077_ = _000_ ? data_i[5] : el0_r[5];
  assign _083_ = _000_ ? data_i[6] : el0_r[6];
  assign _084_ = _000_ ? data_i[7] : el0_r[7];
  assign _085_ = _000_ ? data_i[8] : el0_r[8];
  assign _086_ = _000_ ? data_i[9] : el0_r[9];
  assign _023_ = _000_ ? data_i[10] : el0_r[10];
  assign _024_ = _000_ ? data_i[11] : el0_r[11];
  assign _025_ = _000_ ? data_i[12] : el0_r[12];
  assign _026_ = _000_ ? data_i[13] : el0_r[13];
  assign _027_ = _000_ ? data_i[14] : el0_r[14];
  assign _028_ = _000_ ? data_i[15] : el0_r[15];
  assign _029_ = _000_ ? data_i[16] : el0_r[16];
  assign _030_ = _000_ ? data_i[17] : el0_r[17];
  assign _031_ = _000_ ? data_i[18] : el0_r[18];
  assign _032_ = _000_ ? data_i[19] : el0_r[19];
  assign _034_ = _000_ ? data_i[20] : el0_r[20];
  assign _035_ = _000_ ? data_i[21] : el0_r[21];
  assign _036_ = _000_ ? data_i[22] : el0_r[22];
  assign _037_ = _000_ ? data_i[23] : el0_r[23];
  assign _038_ = _000_ ? data_i[24] : el0_r[24];
  assign _039_ = _000_ ? data_i[25] : el0_r[25];
  assign _040_ = _000_ ? data_i[26] : el0_r[26];
  assign _041_ = _000_ ? data_i[27] : el0_r[27];
  assign _042_ = _000_ ? data_i[28] : el0_r[28];
  assign _043_ = _000_ ? data_i[29] : el0_r[29];
  assign _045_ = _000_ ? data_i[30] : el0_r[30];
  assign _046_ = _000_ ? data_i[31] : el0_r[31];
  assign _047_ = _000_ ? data_i[32] : el0_r[32];
  assign _048_ = _000_ ? data_i[33] : el0_r[33];
  assign _049_ = _000_ ? data_i[34] : el0_r[34];
  assign _050_ = _000_ ? data_i[35] : el0_r[35];
  assign _051_ = _000_ ? data_i[36] : el0_r[36];
  assign _052_ = _000_ ? data_i[37] : el0_r[37];
  assign _053_ = _000_ ? data_i[38] : el0_r[38];
  assign _054_ = _000_ ? data_i[39] : el0_r[39];
  assign _056_ = _000_ ? data_i[40] : el0_r[40];
  assign _057_ = _000_ ? data_i[41] : el0_r[41];
  assign _058_ = _000_ ? data_i[42] : el0_r[42];
  assign _059_ = _000_ ? data_i[43] : el0_r[43];
  assign _060_ = _000_ ? data_i[44] : el0_r[44];
  assign _061_ = _000_ ? data_i[45] : el0_r[45];
  assign _062_ = _000_ ? data_i[46] : el0_r[46];
  assign _063_ = _000_ ? data_i[47] : el0_r[47];
  assign _064_ = _000_ ? data_i[48] : el0_r[48];
  assign _065_ = _000_ ? data_i[49] : el0_r[49];
  assign _067_ = _000_ ? data_i[50] : el0_r[50];
  assign _068_ = _000_ ? data_i[51] : el0_r[51];
  assign _069_ = _000_ ? data_i[52] : el0_r[52];
  assign _070_ = _000_ ? data_i[53] : el0_r[53];
  assign _071_ = _000_ ? data_i[54] : el0_r[54];
  assign _072_ = _000_ ? data_i[55] : el0_r[55];
  assign _073_ = _000_ ? data_i[56] : el0_r[56];
  assign _074_ = _000_ ? data_i[57] : el0_r[57];
  assign _075_ = _000_ ? data_i[58] : el0_r[58];
  assign _076_ = _000_ ? data_i[59] : el0_r[59];
  assign _078_ = _000_ ? data_i[60] : el0_r[60];
  assign _079_ = _000_ ? data_i[61] : el0_r[61];
  assign _080_ = _000_ ? data_i[62] : el0_r[62];
  assign _081_ = _000_ ? data_i[63] : el0_r[63];
  assign _082_ = _000_ ? data_i[64] : el0_r[64];
  assign data_o[0] = _002_ ? data_i[0] : el1_r[0];
  assign data_o[1] = _002_ ? data_i[1] : el1_r[1];
  assign data_o[2] = _002_ ? data_i[2] : el1_r[2];
  assign data_o[3] = _002_ ? data_i[3] : el1_r[3];
  assign data_o[4] = _002_ ? data_i[4] : el1_r[4];
  assign data_o[5] = _002_ ? data_i[5] : el1_r[5];
  assign data_o[6] = _002_ ? data_i[6] : el1_r[6];
  assign data_o[7] = _002_ ? data_i[7] : el1_r[7];
  assign data_o[8] = _002_ ? data_i[8] : el1_r[8];
  assign data_o[9] = _002_ ? data_i[9] : el1_r[9];
  assign data_o[10] = _002_ ? data_i[10] : el1_r[10];
  assign data_o[11] = _002_ ? data_i[11] : el1_r[11];
  assign data_o[12] = _002_ ? data_i[12] : el1_r[12];
  assign data_o[13] = _002_ ? data_i[13] : el1_r[13];
  assign data_o[14] = _002_ ? data_i[14] : el1_r[14];
  assign data_o[15] = _002_ ? data_i[15] : el1_r[15];
  assign data_o[16] = _002_ ? data_i[16] : el1_r[16];
  assign data_o[17] = _002_ ? data_i[17] : el1_r[17];
  assign data_o[18] = _002_ ? data_i[18] : el1_r[18];
  assign data_o[19] = _002_ ? data_i[19] : el1_r[19];
  assign data_o[20] = _002_ ? data_i[20] : el1_r[20];
  assign data_o[21] = _002_ ? data_i[21] : el1_r[21];
  assign data_o[22] = _002_ ? data_i[22] : el1_r[22];
  assign data_o[23] = _002_ ? data_i[23] : el1_r[23];
  assign data_o[24] = _002_ ? data_i[24] : el1_r[24];
  assign data_o[25] = _002_ ? data_i[25] : el1_r[25];
  assign data_o[26] = _002_ ? data_i[26] : el1_r[26];
  assign data_o[27] = _002_ ? data_i[27] : el1_r[27];
  assign data_o[28] = _002_ ? data_i[28] : el1_r[28];
  assign data_o[29] = _002_ ? data_i[29] : el1_r[29];
  assign data_o[30] = _002_ ? data_i[30] : el1_r[30];
  assign data_o[31] = _002_ ? data_i[31] : el1_r[31];
  assign data_o[32] = _002_ ? data_i[32] : el1_r[32];
  assign data_o[33] = _002_ ? data_i[33] : el1_r[33];
  assign data_o[34] = _002_ ? data_i[34] : el1_r[34];
  assign data_o[35] = _002_ ? data_i[35] : el1_r[35];
  assign data_o[36] = _002_ ? data_i[36] : el1_r[36];
  assign data_o[37] = _002_ ? data_i[37] : el1_r[37];
  assign data_o[38] = _002_ ? data_i[38] : el1_r[38];
  assign data_o[39] = _002_ ? data_i[39] : el1_r[39];
  assign data_o[40] = _002_ ? data_i[40] : el1_r[40];
  assign data_o[41] = _002_ ? data_i[41] : el1_r[41];
  assign data_o[42] = _002_ ? data_i[42] : el1_r[42];
  assign data_o[43] = _002_ ? data_i[43] : el1_r[43];
  assign data_o[44] = _002_ ? data_i[44] : el1_r[44];
  assign data_o[45] = _002_ ? data_i[45] : el1_r[45];
  assign data_o[46] = _002_ ? data_i[46] : el1_r[46];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) num_els_r[0] <= 1'h0;
    else num_els_r[0] <= _087_[0];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) num_els_r[1] <= 1'h0;
    else num_els_r[1] <= _088_[1];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[0] <= data_i[0];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[1] <= data_i[1];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[2] <= data_i[2];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[3] <= data_i[3];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[4] <= data_i[4];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[5] <= data_i[5];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[6] <= data_i[6];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[7] <= data_i[7];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[8] <= data_i[8];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[9] <= data_i[9];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[10] <= data_i[10];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[11] <= data_i[11];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[12] <= data_i[12];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[13] <= data_i[13];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[14] <= data_i[14];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[15] <= data_i[15];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[16] <= data_i[16];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[17] <= data_i[17];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[18] <= data_i[18];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[19] <= data_i[19];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[20] <= data_i[20];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[21] <= data_i[21];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[22] <= data_i[22];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[23] <= data_i[23];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[24] <= data_i[24];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[25] <= data_i[25];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[26] <= data_i[26];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[27] <= data_i[27];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[28] <= data_i[28];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[29] <= data_i[29];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[30] <= data_i[30];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[31] <= data_i[31];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[32] <= data_i[32];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[33] <= data_i[33];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[34] <= data_i[34];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[35] <= data_i[35];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[36] <= data_i[36];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[37] <= data_i[37];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[38] <= data_i[38];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[39] <= data_i[39];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[40] <= data_i[40];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[41] <= data_i[41];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[42] <= data_i[42];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[43] <= data_i[43];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[44] <= data_i[44];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[45] <= data_i[45];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[46] <= data_i[46];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[47] <= data_i[47];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[48] <= data_i[48];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[49] <= data_i[49];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[50] <= data_i[50];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[51] <= data_i[51];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[52] <= data_i[52];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[53] <= data_i[53];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[54] <= data_i[54];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[55] <= data_i[55];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[56] <= data_i[56];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[57] <= data_i[57];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[58] <= data_i[58];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[59] <= data_i[59];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[60] <= data_i[60];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[61] <= data_i[61];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[62] <= data_i[62];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[63] <= data_i[63];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el0_enable) el0_r[64] <= data_i[64];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[0] <= _022_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[1] <= _033_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[2] <= _044_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[3] <= _055_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[4] <= _066_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[5] <= _077_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[6] <= _083_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[7] <= _084_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[8] <= _085_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[9] <= _086_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[10] <= _023_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[11] <= _024_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[12] <= _025_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[13] <= _026_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[14] <= _027_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[15] <= _028_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[16] <= _029_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[17] <= _030_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[18] <= _031_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[19] <= _032_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[20] <= _034_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[21] <= _035_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[22] <= _036_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[23] <= _037_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[24] <= _038_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[25] <= _039_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[26] <= _040_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[27] <= _041_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[28] <= _042_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[29] <= _043_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[30] <= _045_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[31] <= _046_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[32] <= _047_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[33] <= _048_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[34] <= _049_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[35] <= _050_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[36] <= _051_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[37] <= _052_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[38] <= _053_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[39] <= _054_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[40] <= _056_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[41] <= _057_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[42] <= _058_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[43] <= _059_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[44] <= _060_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[45] <= _061_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[46] <= _062_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[47] <= _063_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[48] <= _064_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[49] <= _065_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[50] <= _067_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[51] <= _068_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[52] <= _069_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[53] <= _070_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[54] <= _071_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[55] <= _072_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[56] <= _073_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[57] <= _074_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[58] <= _075_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[59] <= _076_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[60] <= _078_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[61] <= _079_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[62] <= _080_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[63] <= _081_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (el1_enable) el1_r[64] <= _082_;
  assign _088_[0] = _087_[0];
  assign el0_snoop_o = el0_r;
  assign el1_snoop_o = el1_r;
  assign full_o = el0_valid_o;
  assign mux0_sel = el0_valid_o;
  assign mux1_sel = el1_valid_o;
endmodule

(* top =  1  *)

module bsg_cache_sbuf(clk_i, reset_i, sbuf_entry_i, v_i, sbuf_entry_o, v_o, yumi_i, empty_o, full_o, bypass_addr_i, bypass_v_i, bypass_data_o, bypass_mask_o);
  
  wire _000_;
  
  wire _001_;
  
  wire _002_;
  
  wire _003_;
  
  wire _004_;
  
  wire _005_;
  
  wire _006_;
  
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  wire _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  wire _133_;
  wire _134_;
  wire _135_;
  wire _136_;
  wire _137_;
  wire _138_;
  wire _139_;
  wire _140_;
  wire _141_;
  wire _142_;
  wire _143_;
  wire _144_;
  wire _145_;
  wire _146_;
  wire _147_;
  wire _148_;
  wire _149_;
  wire _150_;
  wire _151_;
  wire _152_;
  wire _153_;
  wire _154_;
  wire _155_;
  wire _156_;
  wire _157_;
  wire _158_;
  wire _159_;
  wire _160_;
  wire _161_;
  wire _162_;
  wire _163_;
  wire _164_;
  wire _165_;
  wire _166_;
  wire _167_;
  wire _168_;
  wire _169_;
  wire _170_;
  wire _171_;
  
  input [27:0] bypass_addr_i;
  wire [27:0] bypass_addr_i;
  
  wire [31:0] bypass_data_n;
  
  output [31:0] bypass_data_o;
  reg [31:0] bypass_data_o;
  
  wire [3:0] bypass_mask_n;
  
  output [3:0] bypass_mask_o;
  reg [3:0] bypass_mask_o;
  
  input bypass_v_i;
  wire bypass_v_i;
  
  wire [25:0] bypass_word_addr;
  
  input clk_i;
  wire clk_i;
  
  (* unused_bits = "0 37 38" *)
  (* wiretype = "\\bsg_cache_sbuf_entry_s" *)
  wire [64:0] el0;
  
  wire el0_valid;
  
  wire [31:0] el0or1_data;
  
  (* unused_bits = "0 37 38" *)
  (* wiretype = "\\bsg_cache_sbuf_entry_s" *)
  wire [64:0] el1;
  
  wire el1_valid;
  
  output empty_o;
  wire empty_o;
  
  output full_o;
  wire full_o;
  
  input reset_i;
  wire reset_i;
  
  input [64:0] sbuf_entry_i;
  wire [64:0] sbuf_entry_i;
  
  (* wiretype = "\\bsg_cache_sbuf_entry_s" *)
  wire [64:0] sbuf_entry_in;
  
  output [64:0] sbuf_entry_o;
  wire [64:0] sbuf_entry_o;
  
  input v_i;
  wire v_i;
  
  output v_o;
  wire v_o;
  
  input yumi_i;
  wire yumi_i;
  assign _008_ = el0[39] ^ bypass_addr_i[2];
  assign _009_ = el0[40] ^ bypass_addr_i[3];
  assign _010_ = _009_ | _008_;
  assign _011_ = el0[41] ^ bypass_addr_i[4];
  assign _012_ = el0[42] ^ bypass_addr_i[5];
  assign _013_ = _012_ | _011_;
  assign _014_ = _013_ | _010_;
  assign _015_ = el0[43] ^ bypass_addr_i[6];
  assign _016_ = el0[44] ^ bypass_addr_i[7];
  assign _017_ = _016_ | _015_;
  assign _018_ = el0[45] ^ bypass_addr_i[8];
  assign _019_ = el0[46] ^ bypass_addr_i[9];
  assign _020_ = _019_ | _018_;
  assign _021_ = _020_ | _017_;
  assign _022_ = _021_ | _014_;
  assign _023_ = el0[47] ^ bypass_addr_i[10];
  assign _024_ = el0[48] ^ bypass_addr_i[11];
  assign _025_ = _024_ | _023_;
  assign _026_ = el0[49] ^ bypass_addr_i[12];
  assign _027_ = el0[50] ^ bypass_addr_i[13];
  assign _028_ = _027_ | _026_;
  assign _029_ = _028_ | _025_;
  assign _030_ = el0[51] ^ bypass_addr_i[14];
  assign _031_ = el0[52] ^ bypass_addr_i[15];
  assign _032_ = _031_ | _030_;
  assign _033_ = el0[53] ^ bypass_addr_i[16];
  assign _034_ = el0[54] ^ bypass_addr_i[17];
  assign _035_ = _034_ | _033_;
  assign _036_ = _035_ | _032_;
  assign _037_ = _036_ | _029_;
  assign _038_ = _037_ | _022_;
  assign _039_ = el0[55] ^ bypass_addr_i[18];
  assign _040_ = el0[56] ^ bypass_addr_i[19];
  assign _041_ = _040_ | _039_;
  assign _042_ = el0[57] ^ bypass_addr_i[20];
  assign _043_ = el0[58] ^ bypass_addr_i[21];
  assign _044_ = _043_ | _042_;
  assign _045_ = _044_ | _041_;
  assign _046_ = el0[59] ^ bypass_addr_i[22];
  assign _047_ = el0[60] ^ bypass_addr_i[23];
  assign _048_ = _047_ | _046_;
  assign _049_ = el0[61] ^ bypass_addr_i[24];
  assign _050_ = el0[62] ^ bypass_addr_i[25];
  assign _051_ = _050_ | _049_;
  assign _052_ = _051_ | _048_;
  assign _053_ = _052_ | _045_;
  assign _054_ = el0[63] ^ bypass_addr_i[26];
  assign _055_ = el0[64] ^ bypass_addr_i[27];
  assign _056_ = _055_ | _054_;
  assign _057_ = _056_ | _053_;
  assign _058_ = ~(_057_ | _038_);
  assign _059_ = ~(_058_ & el0_valid);
  assign _000_ = el0[1] & ~(_059_);
  assign _001_ = el0[2] & ~(_059_);
  assign _002_ = el0[3] & ~(_059_);
  assign _003_ = el0[4] & ~(_059_);
  assign _060_ = sbuf_entry_i[39] ^ bypass_addr_i[2];
  assign _061_ = sbuf_entry_i[40] ^ bypass_addr_i[3];
  assign _062_ = _061_ | _060_;
  assign _063_ = sbuf_entry_i[41] ^ bypass_addr_i[4];
  assign _064_ = sbuf_entry_i[42] ^ bypass_addr_i[5];
  assign _065_ = _064_ | _063_;
  assign _066_ = _065_ | _062_;
  assign _067_ = sbuf_entry_i[43] ^ bypass_addr_i[6];
  assign _068_ = sbuf_entry_i[44] ^ bypass_addr_i[7];
  assign _069_ = _068_ | _067_;
  assign _070_ = sbuf_entry_i[45] ^ bypass_addr_i[8];
  assign _071_ = sbuf_entry_i[46] ^ bypass_addr_i[9];
  assign _072_ = _071_ | _070_;
  assign _073_ = _072_ | _069_;
  assign _074_ = _073_ | _066_;
  assign _075_ = sbuf_entry_i[47] ^ bypass_addr_i[10];
  assign _076_ = sbuf_entry_i[48] ^ bypass_addr_i[11];
  assign _077_ = _076_ | _075_;
  assign _078_ = sbuf_entry_i[49] ^ bypass_addr_i[12];
  assign _079_ = sbuf_entry_i[50] ^ bypass_addr_i[13];
  assign _080_ = _079_ | _078_;
  assign _081_ = _080_ | _077_;
  assign _082_ = sbuf_entry_i[51] ^ bypass_addr_i[14];
  assign _083_ = sbuf_entry_i[52] ^ bypass_addr_i[15];
  assign _084_ = _083_ | _082_;
  assign _085_ = sbuf_entry_i[53] ^ bypass_addr_i[16];
  assign _086_ = sbuf_entry_i[54] ^ bypass_addr_i[17];
  assign _087_ = _086_ | _085_;
  assign _088_ = _087_ | _084_;
  assign _089_ = _088_ | _081_;
  assign _090_ = _089_ | _074_;
  assign _091_ = sbuf_entry_i[55] ^ bypass_addr_i[18];
  assign _092_ = sbuf_entry_i[56] ^ bypass_addr_i[19];
  assign _093_ = _092_ | _091_;
  assign _094_ = sbuf_entry_i[57] ^ bypass_addr_i[20];
  assign _095_ = sbuf_entry_i[58] ^ bypass_addr_i[21];
  assign _096_ = _095_ | _094_;
  assign _097_ = _096_ | _093_;
  assign _098_ = sbuf_entry_i[59] ^ bypass_addr_i[22];
  assign _099_ = sbuf_entry_i[60] ^ bypass_addr_i[23];
  assign _100_ = _099_ | _098_;
  assign _101_ = sbuf_entry_i[61] ^ bypass_addr_i[24];
  assign _102_ = sbuf_entry_i[62] ^ bypass_addr_i[25];
  assign _103_ = _102_ | _101_;
  assign _104_ = _103_ | _100_;
  assign _105_ = _104_ | _097_;
  assign _106_ = sbuf_entry_i[63] ^ bypass_addr_i[26];
  assign _107_ = sbuf_entry_i[64] ^ bypass_addr_i[27];
  assign _108_ = _107_ | _106_;
  assign _109_ = _108_ | _105_;
  assign _110_ = ~(_109_ | _090_);
  assign _111_ = ~(_110_ & v_i);
  assign _004_ = sbuf_entry_i[1] & ~(_111_);
  assign _005_ = sbuf_entry_i[2] & ~(_111_);
  assign _006_ = sbuf_entry_i[3] & ~(_111_);
  assign _007_ = sbuf_entry_i[4] & ~(_111_);
  assign _112_ = el1[39] ^ bypass_addr_i[2];
  assign _113_ = el1[40] ^ bypass_addr_i[3];
  assign _114_ = _113_ | _112_;
  assign _115_ = el1[41] ^ bypass_addr_i[4];
  assign _116_ = el1[42] ^ bypass_addr_i[5];
  assign _117_ = _116_ | _115_;
  assign _118_ = _117_ | _114_;
  assign _119_ = el1[43] ^ bypass_addr_i[6];
  assign _120_ = el1[44] ^ bypass_addr_i[7];
  assign _121_ = _120_ | _119_;
  assign _122_ = el1[45] ^ bypass_addr_i[8];
  assign _123_ = el1[46] ^ bypass_addr_i[9];
  assign _124_ = _123_ | _122_;
  assign _125_ = _124_ | _121_;
  assign _126_ = _125_ | _118_;
  assign _127_ = el1[47] ^ bypass_addr_i[10];
  assign _128_ = el1[48] ^ bypass_addr_i[11];
  assign _129_ = _128_ | _127_;
  assign _130_ = el1[49] ^ bypass_addr_i[12];
  assign _131_ = el1[50] ^ bypass_addr_i[13];
  assign _132_ = _131_ | _130_;
  assign _133_ = _132_ | _129_;
  assign _134_ = el1[51] ^ bypass_addr_i[14];
  assign _135_ = el1[52] ^ bypass_addr_i[15];
  assign _136_ = _135_ | _134_;
  assign _137_ = el1[53] ^ bypass_addr_i[16];
  assign _138_ = el1[54] ^ bypass_addr_i[17];
  assign _139_ = _138_ | _137_;
  assign _140_ = _139_ | _136_;
  assign _141_ = _140_ | _133_;
  assign _142_ = _141_ | _126_;
  assign _143_ = el1[55] ^ bypass_addr_i[18];
  assign _144_ = el1[56] ^ bypass_addr_i[19];
  assign _145_ = _144_ | _143_;
  assign _146_ = el1[57] ^ bypass_addr_i[20];
  assign _147_ = el1[58] ^ bypass_addr_i[21];
  assign _148_ = _147_ | _146_;
  assign _149_ = _148_ | _145_;
  assign _150_ = el1[59] ^ bypass_addr_i[22];
  assign _151_ = el1[60] ^ bypass_addr_i[23];
  assign _152_ = _151_ | _150_;
  assign _153_ = el1[61] ^ bypass_addr_i[24];
  assign _154_ = el1[62] ^ bypass_addr_i[25];
  assign _155_ = _154_ | _153_;
  assign _156_ = _155_ | _152_;
  assign _157_ = _156_ | _149_;
  assign _158_ = el1[63] ^ bypass_addr_i[26];
  assign _159_ = el1[64] ^ bypass_addr_i[27];
  assign _160_ = _159_ | _158_;
  assign _161_ = _160_ | _157_;
  assign _162_ = ~(_161_ | _142_);
  assign _163_ = ~(_162_ & el1_valid);
  assign _164_ = el1[1] & ~(_163_);
  assign _165_ = _164_ | _000_;
  assign bypass_mask_n[0] = _165_ | _004_;
  assign _166_ = el1[2] & ~(_163_);
  assign _167_ = _166_ | _001_;
  assign bypass_mask_n[1] = _167_ | _005_;
  assign _168_ = el1[3] & ~(_163_);
  assign _169_ = _168_ | _002_;
  assign bypass_mask_n[2] = _169_ | _006_;
  assign _170_ = el1[4] & ~(_163_);
  assign _171_ = _170_ | _003_;
  assign bypass_mask_n[3] = _171_ | _007_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) bypass_data_o[0] <= 1'h0;
    else if (bypass_v_i) bypass_data_o[0] <= bypass_data_n[0];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) bypass_data_o[1] <= 1'h0;
    else if (bypass_v_i) bypass_data_o[1] <= bypass_data_n[1];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) bypass_data_o[2] <= 1'h0;
    else if (bypass_v_i) bypass_data_o[2] <= bypass_data_n[2];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) bypass_data_o[3] <= 1'h0;
    else if (bypass_v_i) bypass_data_o[3] <= bypass_data_n[3];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) bypass_data_o[4] <= 1'h0;
    else if (bypass_v_i) bypass_data_o[4] <= bypass_data_n[4];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) bypass_data_o[5] <= 1'h0;
    else if (bypass_v_i) bypass_data_o[5] <= bypass_data_n[5];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) bypass_data_o[6] <= 1'h0;
    else if (bypass_v_i) bypass_data_o[6] <= bypass_data_n[6];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) bypass_data_o[7] <= 1'h0;
    else if (bypass_v_i) bypass_data_o[7] <= bypass_data_n[7];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) bypass_data_o[8] <= 1'h0;
    else if (bypass_v_i) bypass_data_o[8] <= bypass_data_n[8];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) bypass_data_o[9] <= 1'h0;
    else if (bypass_v_i) bypass_data_o[9] <= bypass_data_n[9];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) bypass_data_o[10] <= 1'h0;
    else if (bypass_v_i) bypass_data_o[10] <= bypass_data_n[10];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) bypass_data_o[11] <= 1'h0;
    else if (bypass_v_i) bypass_data_o[11] <= bypass_data_n[11];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) bypass_data_o[12] <= 1'h0;
    else if (bypass_v_i) bypass_data_o[12] <= bypass_data_n[12];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) bypass_data_o[13] <= 1'h0;
    else if (bypass_v_i) bypass_data_o[13] <= bypass_data_n[13];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) bypass_data_o[14] <= 1'h0;
    else if (bypass_v_i) bypass_data_o[14] <= bypass_data_n[14];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) bypass_data_o[15] <= 1'h0;
    else if (bypass_v_i) bypass_data_o[15] <= bypass_data_n[15];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) bypass_data_o[16] <= 1'h0;
    else if (bypass_v_i) bypass_data_o[16] <= bypass_data_n[16];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) bypass_data_o[17] <= 1'h0;
    else if (bypass_v_i) bypass_data_o[17] <= bypass_data_n[17];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) bypass_data_o[18] <= 1'h0;
    else if (bypass_v_i) bypass_data_o[18] <= bypass_data_n[18];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) bypass_data_o[19] <= 1'h0;
    else if (bypass_v_i) bypass_data_o[19] <= bypass_data_n[19];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) bypass_data_o[20] <= 1'h0;
    else if (bypass_v_i) bypass_data_o[20] <= bypass_data_n[20];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) bypass_data_o[21] <= 1'h0;
    else if (bypass_v_i) bypass_data_o[21] <= bypass_data_n[21];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) bypass_data_o[22] <= 1'h0;
    else if (bypass_v_i) bypass_data_o[22] <= bypass_data_n[22];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) bypass_data_o[23] <= 1'h0;
    else if (bypass_v_i) bypass_data_o[23] <= bypass_data_n[23];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) bypass_data_o[24] <= 1'h0;
    else if (bypass_v_i) bypass_data_o[24] <= bypass_data_n[24];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) bypass_data_o[25] <= 1'h0;
    else if (bypass_v_i) bypass_data_o[25] <= bypass_data_n[25];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) bypass_data_o[26] <= 1'h0;
    else if (bypass_v_i) bypass_data_o[26] <= bypass_data_n[26];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) bypass_data_o[27] <= 1'h0;
    else if (bypass_v_i) bypass_data_o[27] <= bypass_data_n[27];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) bypass_data_o[28] <= 1'h0;
    else if (bypass_v_i) bypass_data_o[28] <= bypass_data_n[28];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) bypass_data_o[29] <= 1'h0;
    else if (bypass_v_i) bypass_data_o[29] <= bypass_data_n[29];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) bypass_data_o[30] <= 1'h0;
    else if (bypass_v_i) bypass_data_o[30] <= bypass_data_n[30];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) bypass_data_o[31] <= 1'h0;
    else if (bypass_v_i) bypass_data_o[31] <= bypass_data_n[31];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) bypass_mask_o[0] <= 1'h0;
    else if (bypass_v_i) bypass_mask_o[0] <= bypass_mask_n[0];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) bypass_mask_o[1] <= 1'h0;
    else if (bypass_v_i) bypass_mask_o[1] <= bypass_mask_n[1];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) bypass_mask_o[2] <= 1'h0;
    else if (bypass_v_i) bypass_mask_o[2] <= bypass_mask_n[2];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) bypass_mask_o[3] <= 1'h0;
    else if (bypass_v_i) bypass_mask_o[3] <= bypass_mask_n[3];
  (* module_not_derived = 32'd1 *)
  
  \$paramod$93805a5ea0f6cec23d39b44c0227cf8087c0f302\bsg_mux_segmented  mux_segmented_merge0 (
    .data0_i(el1[36:5]),
    .data1_i(el0[36:5]),
    .data_o(el0or1_data),
    .sel_i({ _003_, _002_, _001_, _000_ })
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod$93805a5ea0f6cec23d39b44c0227cf8087c0f302\bsg_mux_segmented  mux_segmented_merge1 (
    .data0_i(el0or1_data),
    .data1_i(sbuf_entry_i[36:5]),
    .data_o(bypass_data_n),
    .sel_i({ _007_, _006_, _005_, _004_ })
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod\bsg_cache_buffer_queue\width_p=s32'00000000000000000000000001000001  q0 (
    .clk_i(clk_i),
    .data_i(sbuf_entry_i),
    .data_o(sbuf_entry_o),
    .el0_snoop_o(el0),
    .el0_valid_o(el0_valid),
    .el1_snoop_o(el1),
    .el1_valid_o(el1_valid),
    .empty_o(empty_o),
    .full_o(full_o),
    .reset_i(reset_i),
    .v_i(v_i),
    .v_o(v_o),
    .yumi_i(yumi_i)
  );
  assign bypass_word_addr = bypass_addr_i[27:2];
  assign sbuf_entry_in = sbuf_entry_i;
endmodule

