/* Generated by Yosys 0.27+9 (git sha1 101d19bb6, gcc 11.2.0-7ubuntu2 -fPIC -Os) */


module \$paramod$1be16e1419a23e5b13eca364f8a37b8db3da0a29\bsg_mem_1r1w (w_clk_i, w_reset_i, w_v_i, w_addr_i, w_data_i, r_v_i, r_addr_i, r_data_o);
  
  input r_addr_i;
  wire r_addr_i;
  
  output r_data_o;
  wire r_data_o;
  
  input r_v_i;
  wire r_v_i;
  
  input w_addr_i;
  wire w_addr_i;
  
  input w_clk_i;
  wire w_clk_i;
  
  input w_data_i;
  wire w_data_i;
  
  input w_reset_i;
  wire w_reset_i;
  
  input w_v_i;
  wire w_v_i;
  (* module_not_derived = 32'd1 *)
  
  \$paramod$afef787fcfbbeeb13271162ea5cae9b70ff12598\bsg_mem_1r1w_synth  synth (
    .r_addr_i(r_addr_i),
    .r_data_o(r_data_o),
    .r_v_i(r_v_i),
    .w_addr_i(w_addr_i),
    .w_clk_i(w_clk_i),
    .w_data_i(w_data_i),
    .w_reset_i(w_reset_i),
    .w_v_i(w_v_i)
  );
endmodule


module \$paramod$46590011b4979884a7dba71a175aeb19ed6983ca\bsg_two_fifo (clk_i, reset_i, ready_o, data_i, v_i, v_o, data_o, yumi_i);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  
  wire _07_;
  
  wire _08_;
  
  wire _09_;
  
  wire _10_;
  
  input clk_i;
  wire clk_i;
  
  input [31:0] data_i;
  wire [31:0] data_i;
  
  output [31:0] data_o;
  wire [31:0] data_o;
  
  wire deq_i;
  
  reg empty_r;
  
  wire enq_i;
  
  reg full_r;
  
  reg head_r;
  
  output ready_o;
  wire ready_o;
  
  input reset_i;
  wire reset_i;
  
  reg tail_r;
  
  input v_i;
  wire v_i;
  
  output v_o;
  wire v_o;
  
  input yumi_i;
  wire yumi_i;
  assign _07_ = ~tail_r;
  assign _08_ = ~head_r;
  assign enq_i = v_i & ~(full_r);
  assign v_o = ~empty_r;
  assign ready_o = ~full_r;
  assign _00_ = empty_r & ~(enq_i);
  assign _01_ = full_r | ~(v_i);
  assign _02_ = full_r | ~(yumi_i);
  assign _03_ = _01_ & ~(_02_);
  assign _10_ = _03_ | _00_;
  assign _04_ = v_o & ~(_01_);
  assign _05_ = _04_ & ~(yumi_i);
  assign _06_ = full_r & ~(yumi_i);
  assign _09_ = _06_ | _05_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) full_r <= 1'h0;
    else full_r <= _09_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) head_r <= 1'h0;
    else if (yumi_i) head_r <= _08_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) tail_r <= 1'h0;
    else if (enq_i) tail_r <= _07_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) empty_r <= 1'h1;
    else empty_r <= _10_;
  (* module_not_derived = 32'd1 *)
  
  \$paramod$70fd81d1b8b0cc84c5b69f7d0a42cb8108998cf5\bsg_mem_1r1w  mem_1r1w (
    .r_addr_i(head_r),
    .r_data_o(data_o),
    .r_v_i(v_o),
    .w_addr_i(tail_r),
    .w_clk_i(clk_i),
    .w_data_i(data_i),
    .w_reset_i(reset_i),
    .w_v_i(enq_i)
  );
  assign deq_i = yumi_i;
endmodule


module \$paramod$5650c213e0f6838aed11fb42cc676151c5d1f85e\bsg_fifo_1r1w_small (clk_i, reset_i, v_i, ready_o, data_i, v_o, data_o, yumi_i);
  
  input clk_i;
  wire clk_i;
  
  input data_i;
  wire data_i;
  
  output data_o;
  wire data_o;
  
  output ready_o;
  wire ready_o;
  
  input reset_i;
  wire reset_i;
  
  input v_i;
  wire v_i;
  
  output v_o;
  wire v_o;
  
  input yumi_i;
  wire yumi_i;
  (* module_not_derived = 32'd1 *)
  
  \$paramod$929d2fae428f6a2e2d1993a77a6e63b6f88e0173\bsg_fifo_1r1w_small_unhardened  \unhardened.un.fifo  (
    .clk_i(clk_i),
    .data_i(data_i),
    .data_o(data_o),
    .ready_o(ready_o),
    .reset_i(reset_i),
    .v_i(v_i),
    .v_o(v_o),
    .yumi_i(yumi_i)
  );
endmodule


module \$paramod$5e0491e6206c8588dd12b6fb67749dd612da7f7f\bsg_mem_1r1w_synth (w_clk_i, w_reset_i, w_v_i, w_addr_i, w_data_i, r_v_i, r_addr_i, r_data_o);
  wire _00_;
  wire _01_;
  reg [31:0] \nz.mem[0] ;
  reg [31:0] \nz.mem[1] ;
  
  input r_addr_i;
  wire r_addr_i;
  
  output [31:0] r_data_o;
  wire [31:0] r_data_o;
  
  input r_v_i;
  wire r_v_i;
  
  (* unused_bits = "0" *)
  wire unused0;
  
  (* unused_bits = "0" *)
  wire unused1;
  
  input w_addr_i;
  wire w_addr_i;
  
  input w_clk_i;
  wire w_clk_i;
  
  input [31:0] w_data_i;
  wire [31:0] w_data_i;
  
  input w_reset_i;
  wire w_reset_i;
  
  input w_v_i;
  wire w_v_i;
  assign r_data_o[0] = r_addr_i ? \nz.mem[1] [0] : \nz.mem[0] [0];
  assign r_data_o[1] = r_addr_i ? \nz.mem[1] [1] : \nz.mem[0] [1];
  assign r_data_o[2] = r_addr_i ? \nz.mem[1] [2] : \nz.mem[0] [2];
  assign r_data_o[3] = r_addr_i ? \nz.mem[1] [3] : \nz.mem[0] [3];
  assign r_data_o[4] = r_addr_i ? \nz.mem[1] [4] : \nz.mem[0] [4];
  assign r_data_o[5] = r_addr_i ? \nz.mem[1] [5] : \nz.mem[0] [5];
  assign r_data_o[6] = r_addr_i ? \nz.mem[1] [6] : \nz.mem[0] [6];
  assign r_data_o[7] = r_addr_i ? \nz.mem[1] [7] : \nz.mem[0] [7];
  assign r_data_o[8] = r_addr_i ? \nz.mem[1] [8] : \nz.mem[0] [8];
  assign r_data_o[9] = r_addr_i ? \nz.mem[1] [9] : \nz.mem[0] [9];
  assign r_data_o[10] = r_addr_i ? \nz.mem[1] [10] : \nz.mem[0] [10];
  assign r_data_o[11] = r_addr_i ? \nz.mem[1] [11] : \nz.mem[0] [11];
  assign r_data_o[12] = r_addr_i ? \nz.mem[1] [12] : \nz.mem[0] [12];
  assign r_data_o[13] = r_addr_i ? \nz.mem[1] [13] : \nz.mem[0] [13];
  assign r_data_o[14] = r_addr_i ? \nz.mem[1] [14] : \nz.mem[0] [14];
  assign r_data_o[15] = r_addr_i ? \nz.mem[1] [15] : \nz.mem[0] [15];
  assign r_data_o[16] = r_addr_i ? \nz.mem[1] [16] : \nz.mem[0] [16];
  assign r_data_o[17] = r_addr_i ? \nz.mem[1] [17] : \nz.mem[0] [17];
  assign r_data_o[18] = r_addr_i ? \nz.mem[1] [18] : \nz.mem[0] [18];
  assign r_data_o[19] = r_addr_i ? \nz.mem[1] [19] : \nz.mem[0] [19];
  assign r_data_o[20] = r_addr_i ? \nz.mem[1] [20] : \nz.mem[0] [20];
  assign r_data_o[21] = r_addr_i ? \nz.mem[1] [21] : \nz.mem[0] [21];
  assign r_data_o[22] = r_addr_i ? \nz.mem[1] [22] : \nz.mem[0] [22];
  assign r_data_o[23] = r_addr_i ? \nz.mem[1] [23] : \nz.mem[0] [23];
  assign r_data_o[24] = r_addr_i ? \nz.mem[1] [24] : \nz.mem[0] [24];
  assign r_data_o[25] = r_addr_i ? \nz.mem[1] [25] : \nz.mem[0] [25];
  assign r_data_o[26] = r_addr_i ? \nz.mem[1] [26] : \nz.mem[0] [26];
  assign r_data_o[27] = r_addr_i ? \nz.mem[1] [27] : \nz.mem[0] [27];
  assign r_data_o[28] = r_addr_i ? \nz.mem[1] [28] : \nz.mem[0] [28];
  assign r_data_o[29] = r_addr_i ? \nz.mem[1] [29] : \nz.mem[0] [29];
  assign r_data_o[30] = r_addr_i ? \nz.mem[1] [30] : \nz.mem[0] [30];
  assign r_data_o[31] = r_addr_i ? \nz.mem[1] [31] : \nz.mem[0] [31];
  assign _01_ = w_v_i & w_addr_i;
  assign _00_ = w_v_i & ~(w_addr_i);
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [0] <= w_data_i[0];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [1] <= w_data_i[1];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [2] <= w_data_i[2];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [3] <= w_data_i[3];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [4] <= w_data_i[4];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [5] <= w_data_i[5];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [6] <= w_data_i[6];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [7] <= w_data_i[7];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [8] <= w_data_i[8];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [9] <= w_data_i[9];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [10] <= w_data_i[10];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [11] <= w_data_i[11];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [12] <= w_data_i[12];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [13] <= w_data_i[13];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [14] <= w_data_i[14];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [15] <= w_data_i[15];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [16] <= w_data_i[16];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [17] <= w_data_i[17];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [18] <= w_data_i[18];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [19] <= w_data_i[19];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [20] <= w_data_i[20];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [21] <= w_data_i[21];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [22] <= w_data_i[22];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [23] <= w_data_i[23];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [24] <= w_data_i[24];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [25] <= w_data_i[25];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [26] <= w_data_i[26];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [27] <= w_data_i[27];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [28] <= w_data_i[28];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [29] <= w_data_i[29];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [30] <= w_data_i[30];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [31] <= w_data_i[31];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [0] <= w_data_i[0];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [1] <= w_data_i[1];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [2] <= w_data_i[2];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [3] <= w_data_i[3];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [4] <= w_data_i[4];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [5] <= w_data_i[5];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [6] <= w_data_i[6];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [7] <= w_data_i[7];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [8] <= w_data_i[8];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [9] <= w_data_i[9];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [10] <= w_data_i[10];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [11] <= w_data_i[11];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [12] <= w_data_i[12];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [13] <= w_data_i[13];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [14] <= w_data_i[14];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [15] <= w_data_i[15];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [16] <= w_data_i[16];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [17] <= w_data_i[17];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [18] <= w_data_i[18];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [19] <= w_data_i[19];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [20] <= w_data_i[20];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [21] <= w_data_i[21];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [22] <= w_data_i[22];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [23] <= w_data_i[23];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [24] <= w_data_i[24];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [25] <= w_data_i[25];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [26] <= w_data_i[26];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [27] <= w_data_i[27];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [28] <= w_data_i[28];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [29] <= w_data_i[29];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [30] <= w_data_i[30];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [31] <= w_data_i[31];
  assign unused0 = w_reset_i;
  assign unused1 = r_v_i;
endmodule


module \$paramod$614f373f35abace1b250c404d01609c830e0ee6a\bsg_circular_ptr (clk, reset_i, add_i, o, n_o);
  
  input add_i;
  wire add_i;
  
  input clk;
  wire clk;
  
  (* unused_bits = "0" *)
  wire \genblk1.ignore ;
  
  output n_o;
  wire n_o;
  
  output o;
  wire o;
  
  wire ptr_n;
  
  wire ptr_r;
  
  input reset_i;
  wire reset_i;
  assign \genblk1.ignore  = add_i;
  assign n_o = 1'h0;
  assign o = 1'h0;
  assign ptr_n = 1'h0;
  assign ptr_r = 1'h0;
endmodule


module \$paramod$6201c55b246bfdd112a7a6a70c8d003372c9b7a1\bsg_counter_clear_up (clk_i, reset_i, clear_i, up_i, count_o);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  (* force_downto = 32'd1 *)
  
  (* unused_bits = "0" *)
  wire [1:0] _04_;
  
  input clear_i;
  wire clear_i;
  
  input clk_i;
  wire clk_i;
  
  output [1:0] count_o;
  reg [1:0] count_o;
  
  input reset_i;
  wire reset_i;
  
  input up_i;
  wire up_i;
  assign _00_ = up_i | clear_i;
  assign _01_ = reset_i | clear_i;
  assign _03_ = ~count_o[0];
  assign _02_ = clear_i ? up_i : _03_;
  assign _04_[1] = count_o[1] ^ count_o[0];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (_01_) count_o[1] <= 1'h0;
    else if (up_i) count_o[1] <= _04_[1];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) count_o[0] <= 1'h0;
    else if (_00_) count_o[0] <= _02_;
endmodule


module \$paramod$70fd81d1b8b0cc84c5b69f7d0a42cb8108998cf5\bsg_mem_1r1w (w_clk_i, w_reset_i, w_v_i, w_addr_i, w_data_i, r_v_i, r_addr_i, r_data_o);
  
  input r_addr_i;
  wire r_addr_i;
  
  output [31:0] r_data_o;
  wire [31:0] r_data_o;
  
  input r_v_i;
  wire r_v_i;
  
  input w_addr_i;
  wire w_addr_i;
  
  input w_clk_i;
  wire w_clk_i;
  
  input [31:0] w_data_i;
  wire [31:0] w_data_i;
  
  input w_reset_i;
  wire w_reset_i;
  
  input w_v_i;
  wire w_v_i;
  (* module_not_derived = 32'd1 *)
  
  \$paramod$5e0491e6206c8588dd12b6fb67749dd612da7f7f\bsg_mem_1r1w_synth  synth (
    .r_addr_i(r_addr_i),
    .r_data_o(r_data_o),
    .r_v_i(r_v_i),
    .w_addr_i(w_addr_i),
    .w_clk_i(w_clk_i),
    .w_data_i(w_data_i),
    .w_reset_i(w_reset_i),
    .w_v_i(w_v_i)
  );
endmodule


module \$paramod$8116118c8efe3d35a36a9aafcda3d08533b4ec27\bsg_parallel_in_serial_out (clk_i, reset_i, valid_i, data_i, ready_and_o, valid_o, data_o, yumi_i);
  
  input clk_i;
  wire clk_i;
  
  input [31:0] data_i;
  wire [31:0] data_i;
  
  wire [31:0] data_li;
  
  output [31:0] data_o;
  wire [31:0] data_o;
  
  wire fifo0_ready_lo;
  
  wire fifo0_yumi_li;
  
  wire [31:0] fifo_data_lo;
  
  wire fifo_v_li;
  
  wire fifo_v_lo;
  
  output ready_and_o;
  wire ready_and_o;
  
  input reset_i;
  wire reset_i;
  
  input valid_i;
  wire valid_i;
  
  output valid_o;
  wire valid_o;
  
  input yumi_i;
  wire yumi_i;
  (* module_not_derived = 32'd1 *)
  
  \$paramod$46590011b4979884a7dba71a175aeb19ed6983ca\bsg_two_fifo  \two_fifo.fifo0  (
    .clk_i(clk_i),
    .data_i(data_i),
    .data_o(fifo_data_lo),
    .ready_o(fifo0_ready_lo),
    .reset_i(reset_i),
    .v_i(valid_i),
    .v_o(fifo_v_lo),
    .yumi_i(yumi_i)
  );
  assign data_li = data_i;
  assign data_o = fifo_data_lo;
  assign fifo0_yumi_li = yumi_i;
  assign fifo_v_li = valid_i;
  assign ready_and_o = fifo0_ready_lo;
  assign valid_o = fifo_v_lo;
endmodule


module \$paramod$929d2fae428f6a2e2d1993a77a6e63b6f88e0173\bsg_fifo_1r1w_small_unhardened (clk_i, reset_i, v_i, ready_o, data_i, v_o, data_o, yumi_i);
  
  input clk_i;
  wire clk_i;
  
  input data_i;
  wire data_i;
  
  output data_o;
  wire data_o;
  
  wire deque;
  
  wire empty;
  
  wire enque;
  
  wire full;
  
  wire ready_lo;
  
  output ready_o;
  wire ready_o;
  
  input reset_i;
  wire reset_i;
  
  wire rptr_r;
  
  input v_i;
  wire v_i;
  
  output v_o;
  wire v_o;
  
  wire v_o_tmp;
  
  wire wptr_r;
  
  input yumi_i;
  wire yumi_i;
  assign ready_o = ~full;
  assign v_o_tmp = ~empty;
  assign enque = v_i & ~(full);
  (* module_not_derived = 32'd1 *)
  
  \$paramod$c8a42f9f13ed0601fa113364e86e41191c275a68\bsg_fifo_tracker  ft (
    .clk_i(clk_i),
    .deq_i(yumi_i),
    .empty_o(empty),
    .enq_i(enque),
    .full_o(full),
    .reset_i(reset_i),
    .rptr_r_o(rptr_r),
    .wptr_r_o(wptr_r)
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod$1be16e1419a23e5b13eca364f8a37b8db3da0a29\bsg_mem_1r1w  mem_1r1w (
    .r_addr_i(rptr_r),
    .r_data_o(data_o),
    .r_v_i(v_o_tmp),
    .w_addr_i(wptr_r),
    .w_clk_i(clk_i),
    .w_data_i(data_i),
    .w_reset_i(reset_i),
    .w_v_i(enque)
  );
  assign deque = yumi_i;
  assign ready_lo = ready_o;
  assign v_o = v_o_tmp;
endmodule


module \$paramod$afef787fcfbbeeb13271162ea5cae9b70ff12598\bsg_mem_1r1w_synth (w_clk_i, w_reset_i, w_v_i, w_addr_i, w_data_i, r_v_i, r_addr_i, r_data_o);
  reg \nz.mem[0] ;
  
  input r_addr_i;
  wire r_addr_i;
  
  output r_data_o;
  wire r_data_o;
  
  input r_v_i;
  wire r_v_i;
  
  (* unused_bits = "0" *)
  wire unused0;
  
  (* unused_bits = "0" *)
  wire unused1;
  
  input w_addr_i;
  wire w_addr_i;
  
  input w_clk_i;
  wire w_clk_i;
  
  input w_data_i;
  wire w_data_i;
  
  input w_reset_i;
  wire w_reset_i;
  
  input w_v_i;
  wire w_v_i;
  always @(posedge w_clk_i)
    if (w_v_i) \nz.mem[0]  <= w_data_i;
  assign r_data_o = \nz.mem[0] ;
  assign unused0 = w_reset_i;
  assign unused1 = r_v_i;
endmodule


module \$paramod$c8a42f9f13ed0601fa113364e86e41191c275a68\bsg_fifo_tracker (clk_i, reset_i, enq_i, deq_i, wptr_r_o, rptr_r_o, rptr_n_o, full_o, empty_o);
  wire _0_;
  
  wire _1_;
  
  input clk_i;
  wire clk_i;
  
  input deq_i;
  wire deq_i;
  
  reg deq_r;
  
  wire empty;
  
  output empty_o;
  wire empty_o;
  
  input enq_i;
  wire enq_i;
  
  reg enq_r;
  
  wire full;
  
  output full_o;
  wire full_o;
  
  input reset_i;
  wire reset_i;
  
  wire rptr_n;
  
  output rptr_n_o;
  wire rptr_n_o;
  
  wire rptr_r;
  
  output rptr_r_o;
  wire rptr_r_o;
  
  wire wptr_r;
  
  output wptr_r_o;
  wire wptr_r_o;
  assign _1_ = deq_i | enq_i;
  assign _0_ = wptr_r ^ rptr_r;
  assign empty_o = deq_r & ~(_0_);
  assign full_o = enq_r & ~(_0_);
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) enq_r <= 1'h0;
    else if (_1_) enq_r <= enq_i;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) deq_r <= 1'h1;
    else if (_1_) deq_r <= deq_i;
  (* module_not_derived = 32'd1 *)
  
  \$paramod$614f373f35abace1b250c404d01609c830e0ee6a\bsg_circular_ptr  rptr (
    .add_i(deq_i),
    .clk(clk_i),
    .n_o(rptr_n),
    .o(rptr_r),
    .reset_i(reset_i)
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod$614f373f35abace1b250c404d01609c830e0ee6a\bsg_circular_ptr  wptr (
    .add_i(enq_i),
    .clk(clk_i),
    .o(wptr_r),
    .reset_i(reset_i)
  );
  assign empty = empty_o;
  assign full = full_o;
  assign rptr_n_o = rptr_n;
  assign rptr_r_o = rptr_r;
  assign wptr_r_o = wptr_r;
endmodule


module \$paramod\bsg_decode\num_out_p=s32'00000000000000000000000000000001 (i, o);
  
  (* unused_bits = "0" *)
  wire \genblk1.unused ;
  
  input i;
  wire i;
  
  output o;
  wire o;
  assign \genblk1.unused  = i;
  assign o = 1'h1;
endmodule


module \$paramod\bsg_decode_with_v\num_out_p=s32'00000000000000000000000000000001 (i, v_i, o);
  
  input i;
  wire i;
  
  wire lo;
  
  output o;
  wire o;
  
  input v_i;
  wire v_i;
  assign o = lo & v_i;
  (* module_not_derived = 32'd1 *)
  
  \$paramod\bsg_decode\num_out_p=s32'00000000000000000000000000000001  bd (
    .i(i),
    .o(lo)
  );
endmodule

(* top =  1  *)

module bsg_cache_to_axi_rx(clk_i, reset_i, v_i, yumi_o, cache_id_i, addr_i, dma_data_o, dma_data_v_o, dma_data_ready_i, axi_arid_o, axi_araddr_addr_o, axi_araddr_cache_id_o, axi_arlen_o, axi_arsize_o, axi_arburst_o, axi_arcache_o, axi_arprot_o, axi_arlock_o, axi_arvalid_o, axi_arready_i, axi_rid_i
, axi_rdata_i, axi_rresp_i, axi_rlast_i, axi_rvalid_i, axi_rready_o);
  wire _00_;
  wire _01_;
  
  input [27:0] addr_i;
  wire [27:0] addr_i;
  
  output [27:0] axi_araddr_addr_o;
  wire [27:0] axi_araddr_addr_o;
  
  output axi_araddr_cache_id_o;
  wire axi_araddr_cache_id_o;
  
  output [1:0] axi_arburst_o;
  wire [1:0] axi_arburst_o;
  
  output [3:0] axi_arcache_o;
  wire [3:0] axi_arcache_o;
  
  output [5:0] axi_arid_o;
  wire [5:0] axi_arid_o;
  
  output [7:0] axi_arlen_o;
  wire [7:0] axi_arlen_o;
  
  output axi_arlock_o;
  wire axi_arlock_o;
  
  output [2:0] axi_arprot_o;
  wire [2:0] axi_arprot_o;
  
  input axi_arready_i;
  wire axi_arready_i;
  
  output [2:0] axi_arsize_o;
  wire [2:0] axi_arsize_o;
  
  output axi_arvalid_o;
  wire axi_arvalid_o;
  
  input [31:0] axi_rdata_i;
  wire [31:0] axi_rdata_i;
  
  input [5:0] axi_rid_i;
  wire [5:0] axi_rid_i;
  
  input axi_rlast_i;
  wire axi_rlast_i;
  
  output axi_rready_o;
  wire axi_rready_o;
  
  input [1:0] axi_rresp_i;
  wire [1:0] axi_rresp_i;
  
  input axi_rvalid_i;
  wire axi_rvalid_i;
  
  input cache_id_i;
  wire cache_id_i;
  
  wire cache_sel;
  
  input clk_i;
  wire clk_i;
  
  wire [1:0] count_lo;
  
  wire counter_clear_li;
  
  wire counter_up_li;
  
  output [31:0] dma_data_o;
  wire [31:0] dma_data_o;
  
  input dma_data_ready_i;
  wire dma_data_ready_i;
  
  output dma_data_v_o;
  wire dma_data_v_o;
  
  wire [31:0] piso_data_lo;
  
  wire piso_v_lo;
  
  wire piso_yumi_li;
  
  input reset_i;
  wire reset_i;
  
  wire tag_fifo_ready_lo;
  
  wire tag_fifo_v_li;
  
  wire tag_fifo_v_lo;
  
  wire tag_fifo_yumi_li;
  
  wire tag_lo;
  
  (* unused_bits = "0 1 2 3 4 5" *)
  wire [5:0] unused_rid;
  
  (* unused_bits = "0" *)
  wire unused_rlast;
  
  (* unused_bits = "0 1" *)
  wire [1:0] unused_rresp;
  
  input v_i;
  wire v_i;
  
  output yumi_o;
  wire yumi_o;
  assign _00_ = ~(dma_data_ready_i & piso_v_lo);
  assign piso_yumi_li = tag_fifo_v_lo & ~(_00_);
  assign _01_ = ~(count_lo[0] & count_lo[1]);
  assign counter_up_li = _01_ & piso_yumi_li;
  assign tag_fifo_v_li = axi_arready_i & v_i;
  assign yumi_o = tag_fifo_v_li & tag_fifo_ready_lo;
  assign axi_arvalid_o = tag_fifo_ready_lo & v_i;
  assign dma_data_v_o = piso_v_lo & cache_sel;
  assign counter_clear_li = piso_yumi_li & ~(_01_);
  (* module_not_derived = 32'd1 *)
  
  \$paramod$6201c55b246bfdd112a7a6a70c8d003372c9b7a1\bsg_counter_clear_up  counter (
    .clear_i(counter_clear_li),
    .clk_i(clk_i),
    .count_o(count_lo),
    .reset_i(reset_i),
    .up_i(counter_up_li)
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod\bsg_decode_with_v\num_out_p=s32'00000000000000000000000000000001  demux (
    .i(tag_lo),
    .o(cache_sel),
    .v_i(tag_fifo_v_lo)
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod$8116118c8efe3d35a36a9aafcda3d08533b4ec27\bsg_parallel_in_serial_out  piso (
    .clk_i(clk_i),
    .data_i(axi_rdata_i),
    .data_o(piso_data_lo),
    .ready_and_o(axi_rready_o),
    .reset_i(reset_i),
    .valid_i(axi_rvalid_i),
    .valid_o(piso_v_lo),
    .yumi_i(piso_yumi_li)
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod$5650c213e0f6838aed11fb42cc676151c5d1f85e\bsg_fifo_1r1w_small  tag_fifo (
    .clk_i(clk_i),
    .data_i(cache_id_i),
    .data_o(tag_lo),
    .ready_o(tag_fifo_ready_lo),
    .reset_i(reset_i),
    .v_i(tag_fifo_v_li),
    .v_o(tag_fifo_v_lo),
    .yumi_i(counter_clear_li)
  );
  assign axi_araddr_addr_o = addr_i;
  assign axi_araddr_cache_id_o = cache_id_i;
  assign axi_arburst_o = 2'h0;
  assign axi_arcache_o = 4'h0;
  assign axi_arid_o = 6'h00;
  assign axi_arlen_o = 8'h00;
  assign axi_arlock_o = 1'h0;
  assign axi_arprot_o = 3'h0;
  assign axi_arsize_o = 3'h2;
  assign dma_data_o = piso_data_lo;
  assign tag_fifo_yumi_li = counter_clear_li;
  assign unused_rid = axi_rid_i;
  assign unused_rlast = axi_rlast_i;
  assign unused_rresp = axi_rresp_i;
endmodule

