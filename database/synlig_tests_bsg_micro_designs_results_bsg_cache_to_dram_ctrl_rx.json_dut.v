/* Generated by Yosys 0.27+9 (git sha1 101d19bb6, gcc 11.2.0-7ubuntu2 -fPIC -Os) */


module \$paramod$178264a5165c1cd104ffa6bfd64842c34001f91b\bsg_two_fifo (clk_i, reset_i, ready_o, data_i, v_i, v_o, data_o, yumi_i);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  
  wire _07_;
  
  wire _08_;
  
  wire _09_;
  
  wire _10_;
  
  input clk_i;
  wire clk_i;
  
  input [15:0] data_i;
  wire [15:0] data_i;
  
  output [15:0] data_o;
  wire [15:0] data_o;
  
  wire deq_i;
  
  reg empty_r;
  
  wire enq_i;
  
  reg full_r;
  
  reg head_r;
  
  output ready_o;
  wire ready_o;
  
  input reset_i;
  wire reset_i;
  
  reg tail_r;
  
  input v_i;
  wire v_i;
  
  output v_o;
  wire v_o;
  
  input yumi_i;
  wire yumi_i;
  assign _07_ = ~tail_r;
  assign _08_ = ~head_r;
  assign enq_i = v_i & ~(full_r);
  assign v_o = ~empty_r;
  assign ready_o = ~full_r;
  assign _00_ = empty_r & ~(enq_i);
  assign _01_ = full_r | ~(v_i);
  assign _02_ = full_r | ~(yumi_i);
  assign _03_ = _01_ & ~(_02_);
  assign _10_ = _03_ | _00_;
  assign _04_ = v_o & ~(_01_);
  assign _05_ = _04_ & ~(yumi_i);
  assign _06_ = full_r & ~(yumi_i);
  assign _09_ = _06_ | _05_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) full_r <= 1'h0;
    else full_r <= _09_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) head_r <= 1'h0;
    else if (yumi_i) head_r <= _08_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) tail_r <= 1'h0;
    else if (enq_i) tail_r <= _07_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) empty_r <= 1'h1;
    else empty_r <= _10_;
  (* module_not_derived = 32'd1 *)
  
  \$paramod$3a18e26df69586b9660058508f39e2fbcd072454\bsg_mem_1r1w  mem_1r1w (
    .r_addr_i(head_r),
    .r_data_o(data_o),
    .r_v_i(v_o),
    .w_addr_i(tail_r),
    .w_clk_i(clk_i),
    .w_data_i(data_i),
    .w_reset_i(reset_i),
    .w_v_i(enq_i)
  );
  assign deq_i = yumi_i;
endmodule


module \$paramod$321667aebe91027dd7e4249271052f747f2f7973\bsg_mem_1rw_sync (clk_i, reset_i, data_i, addr_i, v_i, w_i, data_o);
  
  input addr_i;
  wire addr_i;
  
  input clk_i;
  wire clk_i;
  
  wire clk_lo;
  
  input [31:0] data_i;
  wire [31:0] data_i;
  
  output [31:0] data_o;
  wire [31:0] data_o;
  
  input reset_i;
  wire reset_i;
  
  input v_i;
  wire v_i;
  
  input w_i;
  wire w_i;
  (* module_not_derived = 32'd1 *)
  
  \$paramod$7eb7e08a4595ca65956880ee9c69888df11371b4\bsg_mem_1rw_sync_synth  synth (
    .addr_i(addr_i),
    .clk_i(clk_i),
    .data_i(data_i),
    .data_o(data_o),
    .reset_i(reset_i),
    .v_i(v_i),
    .w_i(w_i)
  );
  assign clk_lo = clk_i;
endmodule


module \$paramod$3a18e26df69586b9660058508f39e2fbcd072454\bsg_mem_1r1w (w_clk_i, w_reset_i, w_v_i, w_addr_i, w_data_i, r_v_i, r_addr_i, r_data_o);
  
  input r_addr_i;
  wire r_addr_i;
  
  output [15:0] r_data_o;
  wire [15:0] r_data_o;
  
  input r_v_i;
  wire r_v_i;
  
  input w_addr_i;
  wire w_addr_i;
  
  input w_clk_i;
  wire w_clk_i;
  
  input [15:0] w_data_i;
  wire [15:0] w_data_i;
  
  input w_reset_i;
  wire w_reset_i;
  
  input w_v_i;
  wire w_v_i;
  (* module_not_derived = 32'd1 *)
  
  \$paramod$e79b8c4e6409b809f38f3196ee2cb80d3fcb268c\bsg_mem_1r1w_synth  synth (
    .r_addr_i(r_addr_i),
    .r_data_o(r_data_o),
    .r_v_i(r_v_i),
    .w_addr_i(w_addr_i),
    .w_clk_i(w_clk_i),
    .w_data_i(w_data_i),
    .w_reset_i(w_reset_i),
    .w_v_i(w_v_i)
  );
endmodule


module \$paramod$4b22cfe78632843a35ebdb06e358bb592d8ef843\bsg_serial_in_parallel_out (clk_i, reset_i, valid_i, data_i, ready_o, valid_o, data_o, yumi_cnt_i);
  wire _0000_;
  wire _0001_;
  wire _0002_;
  wire _0003_;
  wire _0004_;
  wire _0005_;
  wire _0006_;
  wire _0007_;
  wire _0008_;
  wire _0009_;
  wire _0010_;
  wire _0011_;
  wire _0012_;
  wire _0013_;
  wire _0014_;
  wire _0015_;
  wire _0016_;
  wire _0017_;
  wire _0018_;
  wire _0019_;
  wire _0020_;
  wire _0021_;
  wire _0022_;
  wire _0023_;
  wire _0024_;
  wire _0025_;
  wire _0026_;
  wire _0027_;
  wire _0028_;
  wire _0029_;
  wire _0030_;
  wire _0031_;
  wire _0032_;
  wire _0033_;
  wire _0034_;
  wire _0035_;
  wire _0036_;
  wire _0037_;
  wire _0038_;
  wire _0039_;
  wire _0040_;
  wire _0041_;
  wire _0042_;
  wire _0043_;
  wire _0044_;
  wire _0045_;
  wire _0046_;
  wire _0047_;
  wire _0048_;
  wire _0049_;
  wire _0050_;
  wire _0051_;
  wire _0052_;
  wire _0053_;
  wire _0054_;
  wire _0055_;
  wire _0056_;
  wire _0057_;
  wire _0058_;
  wire _0059_;
  wire _0060_;
  wire _0061_;
  wire _0062_;
  wire _0063_;
  wire _0064_;
  wire _0065_;
  wire _0066_;
  wire _0067_;
  wire _0068_;
  wire _0069_;
  wire _0070_;
  wire _0071_;
  wire _0072_;
  wire _0073_;
  wire _0074_;
  wire _0075_;
  wire _0076_;
  wire _0077_;
  wire _0078_;
  wire _0079_;
  wire _0080_;
  wire _0081_;
  wire _0082_;
  wire _0083_;
  wire _0084_;
  wire _0085_;
  wire _0086_;
  wire _0087_;
  wire _0088_;
  wire _0089_;
  wire _0090_;
  wire _0091_;
  wire _0092_;
  wire _0093_;
  wire _0094_;
  wire _0095_;
  wire _0096_;
  wire _0097_;
  wire _0098_;
  wire _0099_;
  wire _0100_;
  wire _0101_;
  wire _0102_;
  wire _0103_;
  wire _0104_;
  wire _0105_;
  wire _0106_;
  wire _0107_;
  wire _0108_;
  wire _0109_;
  wire _0110_;
  wire _0111_;
  wire _0112_;
  wire _0113_;
  wire _0114_;
  wire _0115_;
  wire _0116_;
  wire _0117_;
  wire _0118_;
  wire _0119_;
  wire _0120_;
  wire _0121_;
  wire _0122_;
  wire _0123_;
  wire _0124_;
  wire _0125_;
  wire _0126_;
  wire _0127_;
  wire _0128_;
  wire _0129_;
  wire _0130_;
  wire _0131_;
  wire _0132_;
  wire _0133_;
  wire _0134_;
  wire _0135_;
  wire _0136_;
  wire _0137_;
  wire _0138_;
  wire _0139_;
  wire _0140_;
  wire _0141_;
  wire _0142_;
  wire _0143_;
  wire _0144_;
  wire _0145_;
  wire _0146_;
  wire _0147_;
  wire _0148_;
  wire _0149_;
  wire _0150_;
  wire _0151_;
  wire _0152_;
  wire _0153_;
  wire _0154_;
  wire _0155_;
  wire _0156_;
  wire _0157_;
  wire _0158_;
  wire _0159_;
  wire _0160_;
  wire _0161_;
  wire _0162_;
  wire _0163_;
  wire _0164_;
  wire _0165_;
  wire _0166_;
  wire _0167_;
  wire _0168_;
  wire _0169_;
  wire _0170_;
  wire _0171_;
  wire _0172_;
  wire _0173_;
  wire _0174_;
  wire _0175_;
  wire _0176_;
  wire _0177_;
  wire _0178_;
  wire _0179_;
  wire _0180_;
  wire _0181_;
  wire _0182_;
  wire _0183_;
  wire _0184_;
  wire _0185_;
  wire _0186_;
  wire _0187_;
  wire _0188_;
  wire _0189_;
  wire _0190_;
  wire _0191_;
  wire _0192_;
  wire _0193_;
  wire _0194_;
  wire _0195_;
  wire _0196_;
  wire _0197_;
  wire _0198_;
  wire _0199_;
  wire _0200_;
  wire _0201_;
  wire _0202_;
  wire _0203_;
  wire _0204_;
  wire _0205_;
  wire _0206_;
  wire _0207_;
  wire _0208_;
  wire _0209_;
  wire _0210_;
  wire _0211_;
  wire _0212_;
  wire _0213_;
  wire _0214_;
  wire _0215_;
  wire _0216_;
  wire _0217_;
  wire _0218_;
  wire _0219_;
  wire _0220_;
  wire _0221_;
  wire _0222_;
  wire _0223_;
  wire _0224_;
  wire _0225_;
  wire _0226_;
  wire _0227_;
  wire _0228_;
  wire _0229_;
  wire _0230_;
  wire _0231_;
  wire _0232_;
  wire _0233_;
  wire _0234_;
  wire _0235_;
  wire _0236_;
  wire _0237_;
  wire _0238_;
  wire _0239_;
  wire _0240_;
  wire _0241_;
  wire _0242_;
  wire _0243_;
  wire _0244_;
  wire _0245_;
  wire _0246_;
  wire _0247_;
  wire _0248_;
  wire _0249_;
  wire _0250_;
  wire _0251_;
  wire _0252_;
  wire _0253_;
  wire _0254_;
  wire _0255_;
  wire _0256_;
  wire _0257_;
  wire _0258_;
  wire _0259_;
  wire _0260_;
  wire _0261_;
  wire _0262_;
  wire _0263_;
  wire _0264_;
  wire _0265_;
  wire _0266_;
  wire _0267_;
  wire _0268_;
  wire _0269_;
  wire _0270_;
  wire _0271_;
  wire _0272_;
  wire _0273_;
  wire _0274_;
  wire _0275_;
  wire _0276_;
  wire _0277_;
  wire _0278_;
  wire _0279_;
  wire _0280_;
  wire _0281_;
  wire _0282_;
  wire _0283_;
  wire _0284_;
  wire _0285_;
  wire _0286_;
  wire _0287_;
  wire _0288_;
  wire _0289_;
  wire _0290_;
  wire _0291_;
  wire _0292_;
  wire _0293_;
  wire _0294_;
  wire _0295_;
  wire _0296_;
  wire _0297_;
  wire _0298_;
  wire _0299_;
  wire _0300_;
  wire _0301_;
  wire _0302_;
  wire _0303_;
  wire _0304_;
  wire _0305_;
  wire _0306_;
  wire _0307_;
  wire _0308_;
  wire _0309_;
  wire _0310_;
  wire _0311_;
  wire _0312_;
  wire _0313_;
  wire _0314_;
  wire _0315_;
  wire _0316_;
  wire _0317_;
  wire _0318_;
  wire _0319_;
  wire _0320_;
  wire _0321_;
  wire _0322_;
  wire _0323_;
  wire _0324_;
  wire _0325_;
  wire _0326_;
  wire _0327_;
  wire _0328_;
  wire _0329_;
  wire _0330_;
  wire _0331_;
  wire _0332_;
  wire _0333_;
  wire _0334_;
  wire _0335_;
  wire _0336_;
  wire _0337_;
  wire _0338_;
  wire _0339_;
  wire _0340_;
  wire _0341_;
  wire _0342_;
  wire _0343_;
  wire _0344_;
  wire _0345_;
  wire _0346_;
  wire _0347_;
  wire _0348_;
  wire _0349_;
  wire _0350_;
  wire _0351_;
  wire _0352_;
  wire _0353_;
  wire _0354_;
  wire _0355_;
  wire _0356_;
  wire _0357_;
  wire _0358_;
  wire _0359_;
  wire _0360_;
  wire _0361_;
  wire _0362_;
  wire _0363_;
  wire _0364_;
  wire _0365_;
  wire _0366_;
  wire _0367_;
  wire _0368_;
  wire _0369_;
  wire _0370_;
  wire _0371_;
  wire _0372_;
  wire _0373_;
  wire _0374_;
  wire _0375_;
  wire _0376_;
  wire _0377_;
  wire _0378_;
  wire _0379_;
  wire _0380_;
  wire _0381_;
  wire _0382_;
  wire _0383_;
  wire _0384_;
  wire _0385_;
  wire _0386_;
  wire _0387_;
  wire _0388_;
  wire _0389_;
  wire _0390_;
  wire _0391_;
  wire _0392_;
  wire _0393_;
  wire _0394_;
  wire _0395_;
  wire _0396_;
  wire _0397_;
  wire _0398_;
  wire _0399_;
  wire _0400_;
  wire _0401_;
  wire _0402_;
  wire _0403_;
  wire _0404_;
  wire _0405_;
  wire _0406_;
  wire _0407_;
  wire _0408_;
  wire _0409_;
  wire _0410_;
  wire _0411_;
  wire _0412_;
  wire _0413_;
  wire _0414_;
  wire _0415_;
  wire _0416_;
  wire _0417_;
  wire _0418_;
  wire _0419_;
  wire _0420_;
  wire _0421_;
  wire _0422_;
  wire _0423_;
  wire _0424_;
  wire _0425_;
  wire _0426_;
  wire _0427_;
  wire _0428_;
  wire _0429_;
  wire _0430_;
  wire _0431_;
  wire _0432_;
  wire _0433_;
  wire _0434_;
  wire _0435_;
  wire _0436_;
  wire _0437_;
  wire _0438_;
  wire _0439_;
  wire _0440_;
  wire _0441_;
  wire _0442_;
  wire _0443_;
  wire _0444_;
  wire _0445_;
  wire _0446_;
  wire _0447_;
  wire _0448_;
  wire _0449_;
  wire _0450_;
  wire _0451_;
  wire _0452_;
  wire _0453_;
  wire _0454_;
  wire _0455_;
  wire _0456_;
  wire _0457_;
  wire _0458_;
  wire _0459_;
  wire _0460_;
  wire _0461_;
  wire _0462_;
  wire _0463_;
  wire _0464_;
  wire _0465_;
  wire _0466_;
  wire _0467_;
  wire _0468_;
  wire _0469_;
  wire _0470_;
  wire _0471_;
  wire _0472_;
  wire _0473_;
  wire _0474_;
  wire _0475_;
  wire _0476_;
  wire _0477_;
  wire _0478_;
  wire _0479_;
  wire _0480_;
  wire _0481_;
  wire _0482_;
  wire _0483_;
  wire _0484_;
  wire _0485_;
  wire _0486_;
  wire _0487_;
  wire _0488_;
  wire _0489_;
  wire _0490_;
  wire _0491_;
  wire _0492_;
  wire _0493_;
  wire _0494_;
  wire _0495_;
  wire _0496_;
  wire _0497_;
  wire _0498_;
  wire _0499_;
  wire _0500_;
  wire _0501_;
  wire _0502_;
  wire _0503_;
  wire _0504_;
  wire _0505_;
  wire _0506_;
  wire _0507_;
  wire _0508_;
  wire _0509_;
  wire _0510_;
  wire _0511_;
  wire _0512_;
  wire _0513_;
  wire _0514_;
  wire _0515_;
  wire _0516_;
  wire _0517_;
  wire _0518_;
  wire _0519_;
  wire _0520_;
  wire _0521_;
  wire _0522_;
  wire _0523_;
  wire _0524_;
  wire _0525_;
  wire _0526_;
  wire _0527_;
  wire _0528_;
  wire _0529_;
  wire _0530_;
  wire _0531_;
  wire _0532_;
  wire _0533_;
  wire _0534_;
  wire _0535_;
  
  input clk_i;
  wire clk_i;
  
  input [15:0] data_i;
  wire [15:0] data_i;
  
  (* unused_bits = "32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95" *)
  wire [95:0] data_n;
  
  wire [47:0] data_nn;
  
  output [31:0] data_o;
  wire [31:0] data_o;
  
  reg [47:0] data_r;
  
  wire [1:0] num_els_n;
  
  reg [1:0] num_els_r;
  
  output ready_o;
  wire ready_o;
  
  input reset_i;
  wire reset_i;
  
  input valid_i;
  wire valid_i;
  
  (* unused_bits = "2 3 4 5" *)
  wire [5:0] valid_n;
  
  wire [2:0] valid_nn;
  
  output [1:0] valid_o;
  wire [1:0] valid_o;
  
  reg [2:0] valid_r;
  
  input [1:0] yumi_cnt_i;
  wire [1:0] yumi_cnt_i;
  assign _0000_ = ~(num_els_r[1] | num_els_r[0]);
  assign _0001_ = data_r[0] & ~(_0000_);
  assign _0002_ = ~(num_els_r[1] ^ num_els_r[0]);
  assign _0003_ = ~_0002_;
  assign _0004_ = ~data_i[0];
  assign _0005_ = num_els_r[1] | num_els_r[0];
  assign _0006_ = _0005_ | _0004_;
  assign _0007_ = _0006_ | num_els_r[0];
  assign _0008_ = _0007_ | _0003_;
  assign _0009_ = _0000_ & ~(_0008_);
  assign data_o[0] = _0009_ | _0001_;
  assign _0010_ = num_els_r[0] & ~(num_els_r[1]);
  assign _0011_ = data_r[16] & ~(_0010_);
  assign _0012_ = ~(data_i[0] & num_els_r[0]);
  assign _0013_ = _0012_ | _0002_;
  assign _0014_ = _0005_ & ~(_0013_);
  assign data_o[16] = _0014_ | _0011_;
  assign _0015_ = data_r[1] & ~(_0000_);
  assign _0016_ = ~data_i[1];
  assign _0017_ = _0005_ | _0016_;
  assign _0018_ = _0017_ | num_els_r[0];
  assign _0019_ = _0018_ | _0003_;
  assign _0020_ = _0000_ & ~(_0019_);
  assign data_o[1] = _0020_ | _0015_;
  assign _0021_ = data_r[17] & ~(_0010_);
  assign _0022_ = ~(data_i[1] & num_els_r[0]);
  assign _0023_ = _0022_ | _0002_;
  assign _0024_ = _0005_ & ~(_0023_);
  assign data_o[17] = _0024_ | _0021_;
  assign _0025_ = data_r[4] & ~(_0000_);
  assign _0026_ = ~data_i[4];
  assign _0027_ = _0005_ | _0026_;
  assign _0028_ = _0027_ | num_els_r[0];
  assign _0029_ = _0028_ | _0003_;
  assign _0030_ = _0000_ & ~(_0029_);
  assign data_o[4] = _0030_ | _0025_;
  assign _0031_ = data_r[20] & ~(_0010_);
  assign _0032_ = ~(data_i[4] & num_els_r[0]);
  assign _0033_ = _0032_ | _0002_;
  assign _0034_ = _0005_ & ~(_0033_);
  assign data_o[20] = _0034_ | _0031_;
  assign _0035_ = data_r[6] & ~(_0000_);
  assign _0036_ = ~data_i[6];
  assign _0037_ = _0005_ | _0036_;
  assign _0038_ = _0037_ | num_els_r[0];
  assign _0039_ = _0038_ | _0003_;
  assign _0040_ = _0000_ & ~(_0039_);
  assign data_o[6] = _0040_ | _0035_;
  assign _0041_ = data_r[22] & ~(_0010_);
  assign _0042_ = ~(data_i[6] & num_els_r[0]);
  assign _0043_ = _0042_ | _0002_;
  assign _0044_ = _0005_ & ~(_0043_);
  assign data_o[22] = _0044_ | _0041_;
  assign _0045_ = data_r[7] & ~(_0000_);
  assign _0046_ = ~data_i[7];
  assign _0047_ = _0005_ | _0046_;
  assign _0048_ = _0047_ | num_els_r[0];
  assign _0049_ = _0048_ | _0003_;
  assign _0050_ = _0000_ & ~(_0049_);
  assign data_o[7] = _0050_ | _0045_;
  assign _0051_ = data_r[23] & ~(_0010_);
  assign _0052_ = ~(data_i[7] & num_els_r[0]);
  assign _0053_ = _0052_ | _0002_;
  assign _0054_ = _0005_ & ~(_0053_);
  assign data_o[23] = _0054_ | _0051_;
  assign _0055_ = data_r[12] & ~(_0000_);
  assign _0056_ = ~data_i[12];
  assign _0057_ = _0005_ | _0056_;
  assign _0058_ = _0057_ | num_els_r[0];
  assign _0059_ = _0058_ | _0003_;
  assign _0060_ = _0000_ & ~(_0059_);
  assign data_o[12] = _0060_ | _0055_;
  assign _0061_ = data_r[28] & ~(_0010_);
  assign _0062_ = ~(data_i[12] & num_els_r[0]);
  assign _0063_ = _0062_ | _0002_;
  assign _0064_ = _0005_ & ~(_0063_);
  assign data_o[28] = _0064_ | _0061_;
  assign _0065_ = yumi_cnt_i[0] ? data_o[16] : data_o[0];
  assign _0066_ = num_els_r[1] & ~(num_els_r[0]);
  assign _0067_ = data_r[32] & ~(_0066_);
  assign _0068_ = _0000_ | _0004_;
  assign _0069_ = _0068_ | num_els_r[0];
  assign _0070_ = _0069_ | _0002_;
  assign _0071_ = _0005_ & ~(_0070_);
  assign _0072_ = _0071_ | _0067_;
  assign _0073_ = _0012_ | ~(_0002_);
  assign _0074_ = _0005_ & ~(_0073_);
  assign _0075_ = yumi_cnt_i[0] ? _0074_ : _0072_;
  assign data_nn[0] = yumi_cnt_i[1] ? _0075_ : _0065_;
  assign _0076_ = yumi_cnt_i[0] ? data_o[17] : data_o[1];
  assign _0077_ = data_r[33] & ~(_0066_);
  assign _0078_ = _0000_ | _0016_;
  assign _0079_ = _0078_ | num_els_r[0];
  assign _0080_ = _0079_ | _0002_;
  assign _0081_ = _0005_ & ~(_0080_);
  assign _0082_ = _0081_ | _0077_;
  assign _0083_ = _0022_ | ~(_0002_);
  assign _0084_ = _0005_ & ~(_0083_);
  assign _0085_ = yumi_cnt_i[0] ? _0084_ : _0082_;
  assign data_nn[1] = yumi_cnt_i[1] ? _0085_ : _0076_;
  assign _0086_ = data_r[2] & ~(_0000_);
  assign _0087_ = ~data_i[2];
  assign _0088_ = _0005_ | _0087_;
  assign _0089_ = _0088_ | num_els_r[0];
  assign _0090_ = _0089_ | _0003_;
  assign _0091_ = _0000_ & ~(_0090_);
  assign data_o[2] = _0091_ | _0086_;
  assign _0092_ = data_r[18] & ~(_0010_);
  assign _0093_ = ~(data_i[2] & num_els_r[0]);
  assign _0094_ = _0093_ | _0002_;
  assign _0095_ = _0005_ & ~(_0094_);
  assign data_o[18] = _0095_ | _0092_;
  assign _0096_ = yumi_cnt_i[0] ? data_o[18] : data_o[2];
  assign _0097_ = data_r[34] & ~(_0066_);
  assign _0098_ = _0000_ | _0087_;
  assign _0099_ = _0098_ | num_els_r[0];
  assign _0100_ = _0099_ | _0002_;
  assign _0101_ = _0005_ & ~(_0100_);
  assign _0102_ = _0101_ | _0097_;
  assign _0103_ = _0093_ | ~(_0002_);
  assign _0104_ = _0005_ & ~(_0103_);
  assign _0105_ = yumi_cnt_i[0] ? _0104_ : _0102_;
  assign data_nn[2] = yumi_cnt_i[1] ? _0105_ : _0096_;
  assign _0106_ = data_r[3] & ~(_0000_);
  assign _0107_ = ~data_i[3];
  assign _0108_ = _0005_ | _0107_;
  assign _0109_ = _0108_ | num_els_r[0];
  assign _0110_ = _0109_ | _0003_;
  assign _0111_ = _0000_ & ~(_0110_);
  assign data_o[3] = _0111_ | _0106_;
  assign _0112_ = data_r[19] & ~(_0010_);
  assign _0113_ = ~(data_i[3] & num_els_r[0]);
  assign _0114_ = _0113_ | _0002_;
  assign _0115_ = _0005_ & ~(_0114_);
  assign data_o[19] = _0115_ | _0112_;
  assign _0116_ = yumi_cnt_i[0] ? data_o[19] : data_o[3];
  assign _0117_ = data_r[35] & ~(_0066_);
  assign _0118_ = _0000_ | _0107_;
  assign _0119_ = _0118_ | num_els_r[0];
  assign _0120_ = _0119_ | _0002_;
  assign _0121_ = _0005_ & ~(_0120_);
  assign _0122_ = _0121_ | _0117_;
  assign _0123_ = _0113_ | ~(_0002_);
  assign _0124_ = _0005_ & ~(_0123_);
  assign _0125_ = yumi_cnt_i[0] ? _0124_ : _0122_;
  assign data_nn[3] = yumi_cnt_i[1] ? _0125_ : _0116_;
  assign _0126_ = yumi_cnt_i[0] ? data_o[20] : data_o[4];
  assign _0127_ = data_r[36] & ~(_0066_);
  assign _0128_ = _0000_ | _0026_;
  assign _0129_ = _0128_ | num_els_r[0];
  assign _0130_ = _0129_ | _0002_;
  assign _0131_ = _0005_ & ~(_0130_);
  assign _0132_ = _0131_ | _0127_;
  assign _0133_ = _0032_ | ~(_0002_);
  assign _0134_ = _0005_ & ~(_0133_);
  assign _0135_ = yumi_cnt_i[0] ? _0134_ : _0132_;
  assign data_nn[4] = yumi_cnt_i[1] ? _0135_ : _0126_;
  assign _0136_ = data_r[5] & ~(_0000_);
  assign _0137_ = ~data_i[5];
  assign _0138_ = _0005_ | _0137_;
  assign _0139_ = _0138_ | num_els_r[0];
  assign _0140_ = _0139_ | _0003_;
  assign _0141_ = _0000_ & ~(_0140_);
  assign data_o[5] = _0141_ | _0136_;
  assign _0142_ = data_r[21] & ~(_0010_);
  assign _0143_ = ~(data_i[5] & num_els_r[0]);
  assign _0144_ = _0143_ | _0002_;
  assign _0145_ = _0005_ & ~(_0144_);
  assign data_o[21] = _0145_ | _0142_;
  assign _0146_ = yumi_cnt_i[0] ? data_o[21] : data_o[5];
  assign _0147_ = data_r[37] & ~(_0066_);
  assign _0148_ = _0000_ | _0137_;
  assign _0149_ = _0148_ | num_els_r[0];
  assign _0150_ = _0149_ | _0002_;
  assign _0151_ = _0005_ & ~(_0150_);
  assign _0152_ = _0151_ | _0147_;
  assign _0153_ = _0143_ | ~(_0002_);
  assign _0154_ = _0005_ & ~(_0153_);
  assign _0155_ = yumi_cnt_i[0] ? _0154_ : _0152_;
  assign data_nn[5] = yumi_cnt_i[1] ? _0155_ : _0146_;
  assign _0156_ = yumi_cnt_i[0] ? data_o[22] : data_o[6];
  assign _0157_ = data_r[38] & ~(_0066_);
  assign _0158_ = _0000_ | _0036_;
  assign _0159_ = _0158_ | num_els_r[0];
  assign _0160_ = _0159_ | _0002_;
  assign _0161_ = _0005_ & ~(_0160_);
  assign _0162_ = _0161_ | _0157_;
  assign _0163_ = _0042_ | ~(_0002_);
  assign _0164_ = _0005_ & ~(_0163_);
  assign _0165_ = yumi_cnt_i[0] ? _0164_ : _0162_;
  assign data_nn[6] = yumi_cnt_i[1] ? _0165_ : _0156_;
  assign _0166_ = yumi_cnt_i[0] ? data_o[23] : data_o[7];
  assign _0167_ = data_r[39] & ~(_0066_);
  assign _0168_ = _0000_ | _0046_;
  assign _0169_ = _0168_ | num_els_r[0];
  assign _0170_ = _0169_ | _0002_;
  assign _0171_ = _0005_ & ~(_0170_);
  assign _0172_ = _0171_ | _0167_;
  assign _0173_ = _0052_ | ~(_0002_);
  assign _0174_ = _0005_ & ~(_0173_);
  assign _0175_ = yumi_cnt_i[0] ? _0174_ : _0172_;
  assign data_nn[7] = yumi_cnt_i[1] ? _0175_ : _0166_;
  assign _0176_ = data_r[8] & ~(_0000_);
  assign _0177_ = ~data_i[8];
  assign _0178_ = _0005_ | _0177_;
  assign _0179_ = _0178_ | num_els_r[0];
  assign _0180_ = _0179_ | _0003_;
  assign _0181_ = _0000_ & ~(_0180_);
  assign data_o[8] = _0181_ | _0176_;
  assign _0182_ = data_r[24] & ~(_0010_);
  assign _0183_ = ~(data_i[8] & num_els_r[0]);
  assign _0184_ = _0183_ | _0002_;
  assign _0185_ = _0005_ & ~(_0184_);
  assign data_o[24] = _0185_ | _0182_;
  assign _0186_ = yumi_cnt_i[0] ? data_o[24] : data_o[8];
  assign _0187_ = data_r[40] & ~(_0066_);
  assign _0188_ = _0000_ | _0177_;
  assign _0189_ = _0188_ | num_els_r[0];
  assign _0190_ = _0189_ | _0002_;
  assign _0191_ = _0005_ & ~(_0190_);
  assign _0192_ = _0191_ | _0187_;
  assign _0193_ = _0183_ | ~(_0002_);
  assign _0194_ = _0005_ & ~(_0193_);
  assign _0195_ = yumi_cnt_i[0] ? _0194_ : _0192_;
  assign data_nn[8] = yumi_cnt_i[1] ? _0195_ : _0186_;
  assign _0196_ = data_r[9] & ~(_0000_);
  assign _0197_ = ~data_i[9];
  assign _0198_ = _0005_ | _0197_;
  assign _0199_ = _0198_ | num_els_r[0];
  assign _0200_ = _0199_ | _0003_;
  assign _0201_ = _0000_ & ~(_0200_);
  assign data_o[9] = _0201_ | _0196_;
  assign _0202_ = data_r[25] & ~(_0010_);
  assign _0203_ = ~(data_i[9] & num_els_r[0]);
  assign _0204_ = _0203_ | _0002_;
  assign _0205_ = _0005_ & ~(_0204_);
  assign data_o[25] = _0205_ | _0202_;
  assign _0206_ = yumi_cnt_i[0] ? data_o[25] : data_o[9];
  assign _0207_ = data_r[41] & ~(_0066_);
  assign _0208_ = _0000_ | _0197_;
  assign _0209_ = _0208_ | num_els_r[0];
  assign _0210_ = _0209_ | _0002_;
  assign _0211_ = _0005_ & ~(_0210_);
  assign _0212_ = _0211_ | _0207_;
  assign _0213_ = _0203_ | ~(_0002_);
  assign _0214_ = _0005_ & ~(_0213_);
  assign _0215_ = yumi_cnt_i[0] ? _0214_ : _0212_;
  assign data_nn[9] = yumi_cnt_i[1] ? _0215_ : _0206_;
  assign _0216_ = data_r[10] & ~(_0000_);
  assign _0217_ = ~data_i[10];
  assign _0218_ = _0005_ | _0217_;
  assign _0219_ = _0218_ | num_els_r[0];
  assign _0220_ = _0219_ | _0003_;
  assign _0221_ = _0000_ & ~(_0220_);
  assign data_o[10] = _0221_ | _0216_;
  assign _0222_ = data_r[26] & ~(_0010_);
  assign _0223_ = ~(data_i[10] & num_els_r[0]);
  assign _0224_ = _0223_ | _0002_;
  assign _0225_ = _0005_ & ~(_0224_);
  assign data_o[26] = _0225_ | _0222_;
  assign _0226_ = yumi_cnt_i[0] ? data_o[26] : data_o[10];
  assign _0227_ = data_r[42] & ~(_0066_);
  assign _0228_ = _0000_ | _0217_;
  assign _0229_ = _0228_ | num_els_r[0];
  assign _0230_ = _0229_ | _0002_;
  assign _0231_ = _0005_ & ~(_0230_);
  assign _0232_ = _0231_ | _0227_;
  assign _0233_ = _0223_ | ~(_0002_);
  assign _0234_ = _0005_ & ~(_0233_);
  assign _0235_ = yumi_cnt_i[0] ? _0234_ : _0232_;
  assign data_nn[10] = yumi_cnt_i[1] ? _0235_ : _0226_;
  assign _0236_ = data_r[11] & ~(_0000_);
  assign _0237_ = ~data_i[11];
  assign _0238_ = _0005_ | _0237_;
  assign _0239_ = _0238_ | num_els_r[0];
  assign _0240_ = _0239_ | _0003_;
  assign _0241_ = _0000_ & ~(_0240_);
  assign data_o[11] = _0241_ | _0236_;
  assign _0242_ = data_r[27] & ~(_0010_);
  assign _0243_ = ~(data_i[11] & num_els_r[0]);
  assign _0244_ = _0243_ | _0002_;
  assign _0245_ = _0005_ & ~(_0244_);
  assign data_o[27] = _0245_ | _0242_;
  assign _0246_ = yumi_cnt_i[0] ? data_o[27] : data_o[11];
  assign _0247_ = data_r[43] & ~(_0066_);
  assign _0248_ = _0000_ | _0237_;
  assign _0249_ = _0248_ | num_els_r[0];
  assign _0250_ = _0249_ | _0002_;
  assign _0251_ = _0005_ & ~(_0250_);
  assign _0252_ = _0251_ | _0247_;
  assign _0253_ = _0243_ | ~(_0002_);
  assign _0254_ = _0005_ & ~(_0253_);
  assign _0255_ = yumi_cnt_i[0] ? _0254_ : _0252_;
  assign data_nn[11] = yumi_cnt_i[1] ? _0255_ : _0246_;
  assign _0256_ = yumi_cnt_i[0] ? data_o[28] : data_o[12];
  assign _0257_ = data_r[44] & ~(_0066_);
  assign _0258_ = _0000_ | _0056_;
  assign _0259_ = _0258_ | num_els_r[0];
  assign _0260_ = _0259_ | _0002_;
  assign _0261_ = _0005_ & ~(_0260_);
  assign _0262_ = _0261_ | _0257_;
  assign _0263_ = _0062_ | ~(_0002_);
  assign _0264_ = _0005_ & ~(_0263_);
  assign _0265_ = yumi_cnt_i[0] ? _0264_ : _0262_;
  assign data_nn[12] = yumi_cnt_i[1] ? _0265_ : _0256_;
  assign _0266_ = data_r[13] & ~(_0000_);
  assign _0267_ = ~data_i[13];
  assign _0268_ = _0005_ | _0267_;
  assign _0269_ = _0268_ | num_els_r[0];
  assign _0270_ = _0269_ | _0003_;
  assign _0271_ = _0000_ & ~(_0270_);
  assign data_o[13] = _0271_ | _0266_;
  assign _0272_ = data_r[29] & ~(_0010_);
  assign _0273_ = ~(data_i[13] & num_els_r[0]);
  assign _0274_ = _0273_ | _0002_;
  assign _0275_ = _0005_ & ~(_0274_);
  assign data_o[29] = _0275_ | _0272_;
  assign _0276_ = yumi_cnt_i[0] ? data_o[29] : data_o[13];
  assign _0277_ = data_r[45] & ~(_0066_);
  assign _0278_ = _0000_ | _0267_;
  assign _0279_ = _0278_ | num_els_r[0];
  assign _0280_ = _0279_ | _0002_;
  assign _0281_ = _0005_ & ~(_0280_);
  assign _0282_ = _0281_ | _0277_;
  assign _0283_ = _0273_ | ~(_0002_);
  assign _0284_ = _0005_ & ~(_0283_);
  assign _0285_ = yumi_cnt_i[0] ? _0284_ : _0282_;
  assign data_nn[13] = yumi_cnt_i[1] ? _0285_ : _0276_;
  assign _0286_ = data_r[14] & ~(_0000_);
  assign _0287_ = ~data_i[14];
  assign _0288_ = _0005_ | _0287_;
  assign _0289_ = _0288_ | num_els_r[0];
  assign _0290_ = _0289_ | _0003_;
  assign _0291_ = _0000_ & ~(_0290_);
  assign data_o[14] = _0291_ | _0286_;
  assign _0292_ = data_r[30] & ~(_0010_);
  assign _0293_ = ~(data_i[14] & num_els_r[0]);
  assign _0294_ = _0293_ | _0002_;
  assign _0295_ = _0005_ & ~(_0294_);
  assign data_o[30] = _0295_ | _0292_;
  assign _0296_ = yumi_cnt_i[0] ? data_o[30] : data_o[14];
  assign _0297_ = data_r[46] & ~(_0066_);
  assign _0298_ = _0000_ | _0287_;
  assign _0299_ = _0298_ | num_els_r[0];
  assign _0300_ = _0299_ | _0002_;
  assign _0301_ = _0005_ & ~(_0300_);
  assign _0302_ = _0301_ | _0297_;
  assign _0303_ = _0293_ | ~(_0002_);
  assign _0304_ = _0005_ & ~(_0303_);
  assign _0305_ = yumi_cnt_i[0] ? _0304_ : _0302_;
  assign data_nn[14] = yumi_cnt_i[1] ? _0305_ : _0296_;
  assign _0306_ = data_r[15] & ~(_0000_);
  assign _0307_ = ~data_i[15];
  assign _0308_ = _0005_ | _0307_;
  assign _0309_ = _0308_ | num_els_r[0];
  assign _0310_ = _0309_ | _0003_;
  assign _0311_ = _0000_ & ~(_0310_);
  assign data_o[15] = _0311_ | _0306_;
  assign _0312_ = data_r[31] & ~(_0010_);
  assign _0313_ = ~(data_i[15] & num_els_r[0]);
  assign _0314_ = _0313_ | _0002_;
  assign _0315_ = _0005_ & ~(_0314_);
  assign data_o[31] = _0315_ | _0312_;
  assign _0316_ = yumi_cnt_i[0] ? data_o[31] : data_o[15];
  assign _0317_ = data_r[47] & ~(_0066_);
  assign _0318_ = _0000_ | _0307_;
  assign _0319_ = _0318_ | num_els_r[0];
  assign _0320_ = _0319_ | _0002_;
  assign _0321_ = _0005_ & ~(_0320_);
  assign _0322_ = _0321_ | _0317_;
  assign _0323_ = _0313_ | ~(_0002_);
  assign _0324_ = _0005_ & ~(_0323_);
  assign _0325_ = yumi_cnt_i[0] ? _0324_ : _0322_;
  assign data_nn[15] = yumi_cnt_i[1] ? _0325_ : _0316_;
  assign _0326_ = yumi_cnt_i[0] ? data_o[0] : data_o[16];
  assign _0327_ = ~(yumi_cnt_i[0] ^ yumi_cnt_i[1]);
  assign _0328_ = yumi_cnt_i[0] ? _0072_ : _0074_;
  assign _0329_ = _0327_ ? _0326_ : _0328_;
  assign _0330_ = ~(yumi_cnt_i[0] & yumi_cnt_i[1]);
  assign _0331_ = _0013_ | _0005_;
  assign _0332_ = _0005_ & ~(_0331_);
  assign _0333_ = _0069_ | _0003_;
  assign _0334_ = _0005_ & ~(_0333_);
  assign _0335_ = yumi_cnt_i[0] ? _0334_ : _0332_;
  assign _0336_ = _0335_ & _0327_;
  assign data_nn[16] = _0330_ ? _0329_ : _0336_;
  assign _0337_ = yumi_cnt_i[0] ? data_o[1] : data_o[17];
  assign _0338_ = yumi_cnt_i[0] ? _0082_ : _0084_;
  assign _0339_ = _0327_ ? _0337_ : _0338_;
  assign _0340_ = _0023_ | _0005_;
  assign _0341_ = _0005_ & ~(_0340_);
  assign _0342_ = _0079_ | _0003_;
  assign _0343_ = _0005_ & ~(_0342_);
  assign _0344_ = yumi_cnt_i[0] ? _0343_ : _0341_;
  assign _0345_ = _0344_ & _0327_;
  assign data_nn[17] = _0330_ ? _0339_ : _0345_;
  assign _0346_ = yumi_cnt_i[0] ? data_o[2] : data_o[18];
  assign _0347_ = yumi_cnt_i[0] ? _0102_ : _0104_;
  assign _0348_ = _0327_ ? _0346_ : _0347_;
  assign _0349_ = _0094_ | _0005_;
  assign _0350_ = _0005_ & ~(_0349_);
  assign _0351_ = _0099_ | _0003_;
  assign _0352_ = _0005_ & ~(_0351_);
  assign _0353_ = yumi_cnt_i[0] ? _0352_ : _0350_;
  assign _0354_ = _0353_ & _0327_;
  assign data_nn[18] = _0330_ ? _0348_ : _0354_;
  assign _0355_ = yumi_cnt_i[0] ? data_o[3] : data_o[19];
  assign _0356_ = yumi_cnt_i[0] ? _0122_ : _0124_;
  assign _0357_ = _0327_ ? _0355_ : _0356_;
  assign _0358_ = _0114_ | _0005_;
  assign _0359_ = _0005_ & ~(_0358_);
  assign _0360_ = _0119_ | _0003_;
  assign _0361_ = _0005_ & ~(_0360_);
  assign _0362_ = yumi_cnt_i[0] ? _0361_ : _0359_;
  assign _0363_ = _0362_ & _0327_;
  assign data_nn[19] = _0330_ ? _0357_ : _0363_;
  assign _0364_ = yumi_cnt_i[0] ? data_o[4] : data_o[20];
  assign _0365_ = yumi_cnt_i[0] ? _0132_ : _0134_;
  assign _0366_ = _0327_ ? _0364_ : _0365_;
  assign _0367_ = _0033_ | _0005_;
  assign _0368_ = _0005_ & ~(_0367_);
  assign _0369_ = _0129_ | _0003_;
  assign _0370_ = _0005_ & ~(_0369_);
  assign _0371_ = yumi_cnt_i[0] ? _0370_ : _0368_;
  assign _0372_ = _0371_ & _0327_;
  assign data_nn[20] = _0330_ ? _0366_ : _0372_;
  assign _0373_ = yumi_cnt_i[0] ? data_o[5] : data_o[21];
  assign _0374_ = yumi_cnt_i[0] ? _0152_ : _0154_;
  assign _0375_ = _0327_ ? _0373_ : _0374_;
  assign _0376_ = _0144_ | _0005_;
  assign _0377_ = _0005_ & ~(_0376_);
  assign _0378_ = _0149_ | _0003_;
  assign _0379_ = _0005_ & ~(_0378_);
  assign _0380_ = yumi_cnt_i[0] ? _0379_ : _0377_;
  assign _0381_ = _0380_ & _0327_;
  assign data_nn[21] = _0330_ ? _0375_ : _0381_;
  assign _0382_ = yumi_cnt_i[0] ? data_o[6] : data_o[22];
  assign _0383_ = yumi_cnt_i[0] ? _0162_ : _0164_;
  assign _0384_ = _0327_ ? _0382_ : _0383_;
  assign _0385_ = _0043_ | _0005_;
  assign _0386_ = _0005_ & ~(_0385_);
  assign _0387_ = _0159_ | _0003_;
  assign _0388_ = _0005_ & ~(_0387_);
  assign _0389_ = yumi_cnt_i[0] ? _0388_ : _0386_;
  assign _0390_ = _0389_ & _0327_;
  assign data_nn[22] = _0330_ ? _0384_ : _0390_;
  assign _0391_ = yumi_cnt_i[0] ? data_o[7] : data_o[23];
  assign _0392_ = yumi_cnt_i[0] ? _0172_ : _0174_;
  assign _0393_ = _0327_ ? _0391_ : _0392_;
  assign _0394_ = _0053_ | _0005_;
  assign _0395_ = _0005_ & ~(_0394_);
  assign _0396_ = _0169_ | _0003_;
  assign _0397_ = _0005_ & ~(_0396_);
  assign _0398_ = yumi_cnt_i[0] ? _0397_ : _0395_;
  assign _0399_ = _0398_ & _0327_;
  assign data_nn[23] = _0330_ ? _0393_ : _0399_;
  assign _0400_ = yumi_cnt_i[0] ? data_o[8] : data_o[24];
  assign _0401_ = yumi_cnt_i[0] ? _0192_ : _0194_;
  assign _0402_ = _0327_ ? _0400_ : _0401_;
  assign _0403_ = _0184_ | _0005_;
  assign _0404_ = _0005_ & ~(_0403_);
  assign _0405_ = _0189_ | _0003_;
  assign _0406_ = _0005_ & ~(_0405_);
  assign _0407_ = yumi_cnt_i[0] ? _0406_ : _0404_;
  assign _0408_ = _0407_ & _0327_;
  assign data_nn[24] = _0330_ ? _0402_ : _0408_;
  assign _0409_ = yumi_cnt_i[0] ? data_o[9] : data_o[25];
  assign _0410_ = yumi_cnt_i[0] ? _0212_ : _0214_;
  assign _0411_ = _0327_ ? _0409_ : _0410_;
  assign _0412_ = _0204_ | _0005_;
  assign _0413_ = _0005_ & ~(_0412_);
  assign _0414_ = _0209_ | _0003_;
  assign _0415_ = _0005_ & ~(_0414_);
  assign _0416_ = yumi_cnt_i[0] ? _0415_ : _0413_;
  assign _0417_ = _0416_ & _0327_;
  assign data_nn[25] = _0330_ ? _0411_ : _0417_;
  assign _0418_ = yumi_cnt_i[0] ? data_o[10] : data_o[26];
  assign _0419_ = yumi_cnt_i[0] ? _0232_ : _0234_;
  assign _0420_ = _0327_ ? _0418_ : _0419_;
  assign _0421_ = _0224_ | _0005_;
  assign _0422_ = _0005_ & ~(_0421_);
  assign _0423_ = _0229_ | _0003_;
  assign _0424_ = _0005_ & ~(_0423_);
  assign _0425_ = yumi_cnt_i[0] ? _0424_ : _0422_;
  assign _0426_ = _0425_ & _0327_;
  assign data_nn[26] = _0330_ ? _0420_ : _0426_;
  assign _0427_ = yumi_cnt_i[0] ? data_o[11] : data_o[27];
  assign _0428_ = yumi_cnt_i[0] ? _0252_ : _0254_;
  assign _0429_ = _0327_ ? _0427_ : _0428_;
  assign _0430_ = _0244_ | _0005_;
  assign _0431_ = _0005_ & ~(_0430_);
  assign _0432_ = _0249_ | _0003_;
  assign _0433_ = _0005_ & ~(_0432_);
  assign _0434_ = yumi_cnt_i[0] ? _0433_ : _0431_;
  assign _0435_ = _0434_ & _0327_;
  assign data_nn[27] = _0330_ ? _0429_ : _0435_;
  assign _0436_ = yumi_cnt_i[0] ? data_o[12] : data_o[28];
  assign _0437_ = yumi_cnt_i[0] ? _0262_ : _0264_;
  assign _0438_ = _0327_ ? _0436_ : _0437_;
  assign _0439_ = _0063_ | _0005_;
  assign _0440_ = _0005_ & ~(_0439_);
  assign _0441_ = _0259_ | _0003_;
  assign _0442_ = _0005_ & ~(_0441_);
  assign _0443_ = yumi_cnt_i[0] ? _0442_ : _0440_;
  assign _0444_ = _0443_ & _0327_;
  assign data_nn[28] = _0330_ ? _0438_ : _0444_;
  assign _0445_ = yumi_cnt_i[0] ? data_o[13] : data_o[29];
  assign _0446_ = yumi_cnt_i[0] ? _0282_ : _0284_;
  assign _0447_ = _0327_ ? _0445_ : _0446_;
  assign _0448_ = _0274_ | _0005_;
  assign _0449_ = _0005_ & ~(_0448_);
  assign _0450_ = _0279_ | _0003_;
  assign _0451_ = _0005_ & ~(_0450_);
  assign _0452_ = yumi_cnt_i[0] ? _0451_ : _0449_;
  assign _0453_ = _0452_ & _0327_;
  assign data_nn[29] = _0330_ ? _0447_ : _0453_;
  assign _0454_ = yumi_cnt_i[0] ? data_o[14] : data_o[30];
  assign _0455_ = yumi_cnt_i[0] ? _0302_ : _0304_;
  assign _0456_ = _0327_ ? _0454_ : _0455_;
  assign _0457_ = _0294_ | _0005_;
  assign _0458_ = _0005_ & ~(_0457_);
  assign _0459_ = _0299_ | _0003_;
  assign _0460_ = _0005_ & ~(_0459_);
  assign _0461_ = yumi_cnt_i[0] ? _0460_ : _0458_;
  assign _0462_ = _0461_ & _0327_;
  assign data_nn[30] = _0330_ ? _0456_ : _0462_;
  assign _0463_ = yumi_cnt_i[0] ? data_o[15] : data_o[31];
  assign _0464_ = yumi_cnt_i[0] ? _0322_ : _0324_;
  assign _0465_ = _0327_ ? _0463_ : _0464_;
  assign _0466_ = _0314_ | _0005_;
  assign _0467_ = _0005_ & ~(_0466_);
  assign _0468_ = _0319_ | _0003_;
  assign _0469_ = _0005_ & ~(_0468_);
  assign _0470_ = yumi_cnt_i[0] ? _0469_ : _0467_;
  assign _0471_ = _0470_ & _0327_;
  assign data_nn[31] = _0330_ ? _0465_ : _0471_;
  assign _0472_ = valid_r[0] & ~(_0000_);
  assign _0473_ = valid_r[2] | ~(valid_i);
  assign _0474_ = _0473_ | _0005_;
  assign _0475_ = _0474_ | num_els_r[0];
  assign _0476_ = _0475_ | _0003_;
  assign _0477_ = _0000_ & ~(_0476_);
  assign valid_o[0] = _0477_ | _0472_;
  assign _0478_ = valid_r[1] & ~(_0010_);
  assign _0479_ = _0473_ | _0000_;
  assign _0480_ = _0479_ | ~(num_els_r[0]);
  assign _0481_ = _0480_ | _0002_;
  assign _0482_ = _0005_ & ~(_0481_);
  assign valid_o[1] = _0482_ | _0478_;
  assign _0483_ = yumi_cnt_i[0] ? valid_o[1] : valid_o[0];
  assign _0484_ = valid_r[2] & ~(_0066_);
  assign _0485_ = _0479_ | num_els_r[0];
  assign _0486_ = _0485_ | _0002_;
  assign _0487_ = _0005_ & ~(_0486_);
  assign _0488_ = _0487_ | _0484_;
  assign _0489_ = _0480_ | _0003_;
  assign _0490_ = _0005_ & ~(_0489_);
  assign _0491_ = yumi_cnt_i[0] ? _0490_ : _0488_;
  assign valid_nn[0] = yumi_cnt_i[1] ? _0491_ : _0483_;
  assign _0492_ = yumi_cnt_i[0] ? _0488_ : valid_o[1];
  assign _0493_ = _0485_ | _0003_;
  assign _0494_ = _0005_ & ~(_0493_);
  assign _0495_ = yumi_cnt_i[0] ? _0494_ : _0490_;
  assign valid_nn[1] = yumi_cnt_i[1] ? _0495_ : _0492_;
  assign _0496_ = _0481_ | _0005_;
  assign _0497_ = _0005_ & ~(_0496_);
  assign _0498_ = yumi_cnt_i[0] ? _0497_ : _0494_;
  assign valid_nn[2] = yumi_cnt_i[1] ? _0498_ : _0491_;
  assign _0499_ = yumi_cnt_i[1] ? _0065_ : _0075_;
  assign _0500_ = yumi_cnt_i[0] ? _0332_ : _0334_;
  assign data_nn[32] = yumi_cnt_i[1] ? _0500_ : _0499_;
  assign _0501_ = yumi_cnt_i[1] ? _0076_ : _0085_;
  assign _0502_ = yumi_cnt_i[0] ? _0341_ : _0343_;
  assign data_nn[33] = yumi_cnt_i[1] ? _0502_ : _0501_;
  assign _0503_ = yumi_cnt_i[1] ? _0096_ : _0105_;
  assign _0504_ = yumi_cnt_i[0] ? _0350_ : _0352_;
  assign data_nn[34] = yumi_cnt_i[1] ? _0504_ : _0503_;
  assign _0505_ = yumi_cnt_i[1] ? _0116_ : _0125_;
  assign _0506_ = yumi_cnt_i[0] ? _0359_ : _0361_;
  assign data_nn[35] = yumi_cnt_i[1] ? _0506_ : _0505_;
  assign _0507_ = yumi_cnt_i[1] ? _0126_ : _0135_;
  assign _0508_ = yumi_cnt_i[0] ? _0368_ : _0370_;
  assign data_nn[36] = yumi_cnt_i[1] ? _0508_ : _0507_;
  assign _0509_ = yumi_cnt_i[1] ? _0146_ : _0155_;
  assign _0510_ = yumi_cnt_i[0] ? _0377_ : _0379_;
  assign data_nn[37] = yumi_cnt_i[1] ? _0510_ : _0509_;
  assign _0511_ = yumi_cnt_i[1] ? _0156_ : _0165_;
  assign _0512_ = yumi_cnt_i[0] ? _0386_ : _0388_;
  assign data_nn[38] = yumi_cnt_i[1] ? _0512_ : _0511_;
  assign _0513_ = yumi_cnt_i[1] ? _0166_ : _0175_;
  assign _0514_ = yumi_cnt_i[0] ? _0395_ : _0397_;
  assign data_nn[39] = yumi_cnt_i[1] ? _0514_ : _0513_;
  assign _0515_ = yumi_cnt_i[1] ? _0186_ : _0195_;
  assign _0516_ = yumi_cnt_i[0] ? _0404_ : _0406_;
  assign data_nn[40] = yumi_cnt_i[1] ? _0516_ : _0515_;
  assign _0517_ = yumi_cnt_i[1] ? _0206_ : _0215_;
  assign _0518_ = yumi_cnt_i[0] ? _0413_ : _0415_;
  assign data_nn[41] = yumi_cnt_i[1] ? _0518_ : _0517_;
  assign _0519_ = yumi_cnt_i[1] ? _0226_ : _0235_;
  assign _0520_ = yumi_cnt_i[0] ? _0422_ : _0424_;
  assign data_nn[42] = yumi_cnt_i[1] ? _0520_ : _0519_;
  assign _0521_ = yumi_cnt_i[1] ? _0246_ : _0255_;
  assign _0522_ = yumi_cnt_i[0] ? _0431_ : _0433_;
  assign data_nn[43] = yumi_cnt_i[1] ? _0522_ : _0521_;
  assign _0523_ = yumi_cnt_i[1] ? _0256_ : _0265_;
  assign _0524_ = yumi_cnt_i[0] ? _0440_ : _0442_;
  assign data_nn[44] = yumi_cnt_i[1] ? _0524_ : _0523_;
  assign _0525_ = yumi_cnt_i[1] ? _0276_ : _0285_;
  assign _0526_ = yumi_cnt_i[0] ? _0449_ : _0451_;
  assign data_nn[45] = yumi_cnt_i[1] ? _0526_ : _0525_;
  assign _0527_ = yumi_cnt_i[1] ? _0296_ : _0305_;
  assign _0528_ = yumi_cnt_i[0] ? _0458_ : _0460_;
  assign data_nn[46] = yumi_cnt_i[1] ? _0528_ : _0527_;
  assign _0529_ = yumi_cnt_i[1] ? _0316_ : _0325_;
  assign _0530_ = yumi_cnt_i[0] ? _0467_ : _0469_;
  assign data_nn[47] = yumi_cnt_i[1] ? _0530_ : _0529_;
  assign ready_o = ~valid_r[2];
  assign _0531_ = num_els_r[1] ^ yumi_cnt_i[1];
  assign _0532_ = yumi_cnt_i[0] & ~(num_els_r[0]);
  assign _0533_ = _0532_ ^ _0531_;
  assign _0534_ = ~(yumi_cnt_i[0] ^ num_els_r[0]);
  assign _0535_ = ~(_0534_ | _0473_);
  assign num_els_n[1] = _0535_ ^ _0533_;
  assign num_els_n[0] = _0534_ ^ _0473_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[0] <= data_nn[0];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[1] <= data_nn[1];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[2] <= data_nn[2];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[3] <= data_nn[3];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[4] <= data_nn[4];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[5] <= data_nn[5];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[6] <= data_nn[6];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[7] <= data_nn[7];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[8] <= data_nn[8];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[9] <= data_nn[9];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[10] <= data_nn[10];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[11] <= data_nn[11];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[12] <= data_nn[12];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[13] <= data_nn[13];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[14] <= data_nn[14];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[15] <= data_nn[15];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[16] <= data_nn[16];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[17] <= data_nn[17];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[18] <= data_nn[18];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[19] <= data_nn[19];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[20] <= data_nn[20];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[21] <= data_nn[21];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[22] <= data_nn[22];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[23] <= data_nn[23];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[24] <= data_nn[24];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[25] <= data_nn[25];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[26] <= data_nn[26];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[27] <= data_nn[27];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[28] <= data_nn[28];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[29] <= data_nn[29];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[30] <= data_nn[30];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[31] <= data_nn[31];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[32] <= data_nn[32];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[33] <= data_nn[33];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[34] <= data_nn[34];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[35] <= data_nn[35];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[36] <= data_nn[36];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[37] <= data_nn[37];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[38] <= data_nn[38];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[39] <= data_nn[39];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[40] <= data_nn[40];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[41] <= data_nn[41];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[42] <= data_nn[42];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[43] <= data_nn[43];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[44] <= data_nn[44];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[45] <= data_nn[45];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[46] <= data_nn[46];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    data_r[47] <= data_nn[47];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) valid_r[0] <= 1'h0;
    else valid_r[0] <= valid_nn[0];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) valid_r[1] <= 1'h0;
    else valid_r[1] <= valid_nn[1];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) valid_r[2] <= 1'h0;
    else valid_r[2] <= valid_nn[2];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) num_els_r[0] <= 1'h0;
    else num_els_r[0] <= num_els_n[0];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) num_els_r[1] <= 1'h0;
    else num_els_r[1] <= num_els_n[1];
  assign data_n[31:0] = data_o;
  assign valid_n[1:0] = valid_o;
endmodule


module \$paramod$7eb7e08a4595ca65956880ee9c69888df11371b4\bsg_mem_1rw_sync_synth (clk_i, v_i, reset_i, data_i, addr_i, w_i, data_o);
  reg _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  
  input addr_i;
  wire addr_i;
  
  input clk_i;
  wire clk_i;
  
  input [31:0] data_i;
  wire [31:0] data_i;
  
  output [31:0] data_o;
  wire [31:0] data_o;
  
  wire [31:0] \nz.data_out ;
  reg [31:0] \nz.mem[0] ;
  reg [31:0] \nz.mem[1] ;
  
  input reset_i;
  wire reset_i;
  
  (* unused_bits = "0" *)
  wire unused;
  
  input v_i;
  wire v_i;
  
  input w_i;
  wire w_i;
  assign data_o[0] = _000_ ? \nz.mem[1] [0] : \nz.mem[0] [0];
  assign data_o[1] = _000_ ? \nz.mem[1] [1] : \nz.mem[0] [1];
  assign data_o[2] = _000_ ? \nz.mem[1] [2] : \nz.mem[0] [2];
  assign data_o[3] = _000_ ? \nz.mem[1] [3] : \nz.mem[0] [3];
  assign data_o[4] = _000_ ? \nz.mem[1] [4] : \nz.mem[0] [4];
  assign data_o[5] = _000_ ? \nz.mem[1] [5] : \nz.mem[0] [5];
  assign data_o[6] = _000_ ? \nz.mem[1] [6] : \nz.mem[0] [6];
  assign data_o[7] = _000_ ? \nz.mem[1] [7] : \nz.mem[0] [7];
  assign data_o[8] = _000_ ? \nz.mem[1] [8] : \nz.mem[0] [8];
  assign data_o[9] = _000_ ? \nz.mem[1] [9] : \nz.mem[0] [9];
  assign data_o[10] = _000_ ? \nz.mem[1] [10] : \nz.mem[0] [10];
  assign data_o[11] = _000_ ? \nz.mem[1] [11] : \nz.mem[0] [11];
  assign data_o[12] = _000_ ? \nz.mem[1] [12] : \nz.mem[0] [12];
  assign data_o[13] = _000_ ? \nz.mem[1] [13] : \nz.mem[0] [13];
  assign data_o[14] = _000_ ? \nz.mem[1] [14] : \nz.mem[0] [14];
  assign data_o[15] = _000_ ? \nz.mem[1] [15] : \nz.mem[0] [15];
  assign data_o[16] = _000_ ? \nz.mem[1] [16] : \nz.mem[0] [16];
  assign data_o[17] = _000_ ? \nz.mem[1] [17] : \nz.mem[0] [17];
  assign data_o[18] = _000_ ? \nz.mem[1] [18] : \nz.mem[0] [18];
  assign data_o[19] = _000_ ? \nz.mem[1] [19] : \nz.mem[0] [19];
  assign data_o[20] = _000_ ? \nz.mem[1] [20] : \nz.mem[0] [20];
  assign data_o[21] = _000_ ? \nz.mem[1] [21] : \nz.mem[0] [21];
  assign data_o[22] = _000_ ? \nz.mem[1] [22] : \nz.mem[0] [22];
  assign data_o[23] = _000_ ? \nz.mem[1] [23] : \nz.mem[0] [23];
  assign data_o[24] = _000_ ? \nz.mem[1] [24] : \nz.mem[0] [24];
  assign data_o[25] = _000_ ? \nz.mem[1] [25] : \nz.mem[0] [25];
  assign data_o[26] = _000_ ? \nz.mem[1] [26] : \nz.mem[0] [26];
  assign data_o[27] = _000_ ? \nz.mem[1] [27] : \nz.mem[0] [27];
  assign data_o[28] = _000_ ? \nz.mem[1] [28] : \nz.mem[0] [28];
  assign data_o[29] = _000_ ? \nz.mem[1] [29] : \nz.mem[0] [29];
  assign data_o[30] = _000_ ? \nz.mem[1] [30] : \nz.mem[0] [30];
  assign data_o[31] = _000_ ? \nz.mem[1] [31] : \nz.mem[0] [31];
  assign _003_ = ~(w_i & v_i);
  assign _001_ = ~(_003_ | addr_i);
  assign _002_ = addr_i & ~(_003_);
  always @(posedge clk_i)
    _000_ <= addr_i;
  always @(posedge clk_i)
    if (_001_) \nz.mem[0] [0] <= data_i[0];
  always @(posedge clk_i)
    if (_001_) \nz.mem[0] [1] <= data_i[1];
  always @(posedge clk_i)
    if (_001_) \nz.mem[0] [2] <= data_i[2];
  always @(posedge clk_i)
    if (_001_) \nz.mem[0] [3] <= data_i[3];
  always @(posedge clk_i)
    if (_001_) \nz.mem[0] [4] <= data_i[4];
  always @(posedge clk_i)
    if (_001_) \nz.mem[0] [5] <= data_i[5];
  always @(posedge clk_i)
    if (_001_) \nz.mem[0] [6] <= data_i[6];
  always @(posedge clk_i)
    if (_001_) \nz.mem[0] [7] <= data_i[7];
  always @(posedge clk_i)
    if (_001_) \nz.mem[0] [8] <= data_i[8];
  always @(posedge clk_i)
    if (_001_) \nz.mem[0] [9] <= data_i[9];
  always @(posedge clk_i)
    if (_001_) \nz.mem[0] [10] <= data_i[10];
  always @(posedge clk_i)
    if (_001_) \nz.mem[0] [11] <= data_i[11];
  always @(posedge clk_i)
    if (_001_) \nz.mem[0] [12] <= data_i[12];
  always @(posedge clk_i)
    if (_001_) \nz.mem[0] [13] <= data_i[13];
  always @(posedge clk_i)
    if (_001_) \nz.mem[0] [14] <= data_i[14];
  always @(posedge clk_i)
    if (_001_) \nz.mem[0] [15] <= data_i[15];
  always @(posedge clk_i)
    if (_001_) \nz.mem[0] [16] <= data_i[16];
  always @(posedge clk_i)
    if (_001_) \nz.mem[0] [17] <= data_i[17];
  always @(posedge clk_i)
    if (_001_) \nz.mem[0] [18] <= data_i[18];
  always @(posedge clk_i)
    if (_001_) \nz.mem[0] [19] <= data_i[19];
  always @(posedge clk_i)
    if (_001_) \nz.mem[0] [20] <= data_i[20];
  always @(posedge clk_i)
    if (_001_) \nz.mem[0] [21] <= data_i[21];
  always @(posedge clk_i)
    if (_001_) \nz.mem[0] [22] <= data_i[22];
  always @(posedge clk_i)
    if (_001_) \nz.mem[0] [23] <= data_i[23];
  always @(posedge clk_i)
    if (_001_) \nz.mem[0] [24] <= data_i[24];
  always @(posedge clk_i)
    if (_001_) \nz.mem[0] [25] <= data_i[25];
  always @(posedge clk_i)
    if (_001_) \nz.mem[0] [26] <= data_i[26];
  always @(posedge clk_i)
    if (_001_) \nz.mem[0] [27] <= data_i[27];
  always @(posedge clk_i)
    if (_001_) \nz.mem[0] [28] <= data_i[28];
  always @(posedge clk_i)
    if (_001_) \nz.mem[0] [29] <= data_i[29];
  always @(posedge clk_i)
    if (_001_) \nz.mem[0] [30] <= data_i[30];
  always @(posedge clk_i)
    if (_001_) \nz.mem[0] [31] <= data_i[31];
  always @(posedge clk_i)
    if (_002_) \nz.mem[1] [0] <= data_i[0];
  always @(posedge clk_i)
    if (_002_) \nz.mem[1] [1] <= data_i[1];
  always @(posedge clk_i)
    if (_002_) \nz.mem[1] [2] <= data_i[2];
  always @(posedge clk_i)
    if (_002_) \nz.mem[1] [3] <= data_i[3];
  always @(posedge clk_i)
    if (_002_) \nz.mem[1] [4] <= data_i[4];
  always @(posedge clk_i)
    if (_002_) \nz.mem[1] [5] <= data_i[5];
  always @(posedge clk_i)
    if (_002_) \nz.mem[1] [6] <= data_i[6];
  always @(posedge clk_i)
    if (_002_) \nz.mem[1] [7] <= data_i[7];
  always @(posedge clk_i)
    if (_002_) \nz.mem[1] [8] <= data_i[8];
  always @(posedge clk_i)
    if (_002_) \nz.mem[1] [9] <= data_i[9];
  always @(posedge clk_i)
    if (_002_) \nz.mem[1] [10] <= data_i[10];
  always @(posedge clk_i)
    if (_002_) \nz.mem[1] [11] <= data_i[11];
  always @(posedge clk_i)
    if (_002_) \nz.mem[1] [12] <= data_i[12];
  always @(posedge clk_i)
    if (_002_) \nz.mem[1] [13] <= data_i[13];
  always @(posedge clk_i)
    if (_002_) \nz.mem[1] [14] <= data_i[14];
  always @(posedge clk_i)
    if (_002_) \nz.mem[1] [15] <= data_i[15];
  always @(posedge clk_i)
    if (_002_) \nz.mem[1] [16] <= data_i[16];
  always @(posedge clk_i)
    if (_002_) \nz.mem[1] [17] <= data_i[17];
  always @(posedge clk_i)
    if (_002_) \nz.mem[1] [18] <= data_i[18];
  always @(posedge clk_i)
    if (_002_) \nz.mem[1] [19] <= data_i[19];
  always @(posedge clk_i)
    if (_002_) \nz.mem[1] [20] <= data_i[20];
  always @(posedge clk_i)
    if (_002_) \nz.mem[1] [21] <= data_i[21];
  always @(posedge clk_i)
    if (_002_) \nz.mem[1] [22] <= data_i[22];
  always @(posedge clk_i)
    if (_002_) \nz.mem[1] [23] <= data_i[23];
  always @(posedge clk_i)
    if (_002_) \nz.mem[1] [24] <= data_i[24];
  always @(posedge clk_i)
    if (_002_) \nz.mem[1] [25] <= data_i[25];
  always @(posedge clk_i)
    if (_002_) \nz.mem[1] [26] <= data_i[26];
  always @(posedge clk_i)
    if (_002_) \nz.mem[1] [27] <= data_i[27];
  always @(posedge clk_i)
    if (_002_) \nz.mem[1] [28] <= data_i[28];
  always @(posedge clk_i)
    if (_002_) \nz.mem[1] [29] <= data_i[29];
  always @(posedge clk_i)
    if (_002_) \nz.mem[1] [30] <= data_i[30];
  always @(posedge clk_i)
    if (_002_) \nz.mem[1] [31] <= data_i[31];
  assign \nz.data_out  = data_o;
  assign unused = reset_i;
endmodule


module \$paramod$946b50bdd70c17de2cb82958a5c75f0417627398\bsg_circular_ptr (clk, reset_i, add_i, o, n_o);
  
  input add_i;
  wire add_i;
  
  input clk;
  wire clk;
  
  output n_o;
  wire n_o;
  
  output o;
  wire o;
  
  wire ptr_n;
  
  reg ptr_r;
  
  input reset_i;
  wire reset_i;
  assign n_o = add_i ^ ptr_r;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk)
    if (reset_i) ptr_r <= 1'h0;
    else ptr_r <= n_o;
  assign o = ptr_r;
  assign ptr_n = n_o;
endmodule


module \$paramod$a656a8a44409be96e20c3b35480a0dc9d8df0ed4\bsg_round_robin_n_to_1 (clk_i, reset_i, data_i, v_i, yumi_o, v_o, data_o, tag_o, yumi_i);
  
  input clk_i;
  wire clk_i;
  
  input [31:0] data_i;
  wire [31:0] data_i;
  
  output [15:0] data_o;
  wire [15:0] data_o;
  
  input reset_i;
  wire reset_i;
  
  wire \strict.ptr_r ;
  
  output tag_o;
  wire tag_o;
  
  input [1:0] v_i;
  wire [1:0] v_i;
  
  output v_o;
  wire v_o;
  
  input yumi_i;
  wire yumi_i;
  
  output [1:0] yumi_o;
  wire [1:0] yumi_o;
  assign v_o = tag_o ? v_i[1] : v_i[0];
  assign data_o[0] = tag_o ? data_i[16] : data_i[0];
  assign data_o[1] = tag_o ? data_i[17] : data_i[1];
  assign data_o[2] = tag_o ? data_i[18] : data_i[2];
  assign data_o[3] = tag_o ? data_i[19] : data_i[3];
  assign data_o[4] = tag_o ? data_i[20] : data_i[4];
  assign data_o[5] = tag_o ? data_i[21] : data_i[5];
  assign data_o[6] = tag_o ? data_i[22] : data_i[6];
  assign data_o[7] = tag_o ? data_i[23] : data_i[7];
  assign data_o[8] = tag_o ? data_i[24] : data_i[8];
  assign data_o[9] = tag_o ? data_i[25] : data_i[9];
  assign data_o[10] = tag_o ? data_i[26] : data_i[10];
  assign data_o[11] = tag_o ? data_i[27] : data_i[11];
  assign data_o[12] = tag_o ? data_i[28] : data_i[12];
  assign data_o[13] = tag_o ? data_i[29] : data_i[13];
  assign data_o[14] = tag_o ? data_i[30] : data_i[14];
  assign data_o[15] = tag_o ? data_i[31] : data_i[15];
  assign yumi_o[0] = yumi_i & ~(tag_o);
  assign yumi_o[1] = yumi_i & tag_o;
  (* module_not_derived = 32'd1 *)
  
  \$paramod$946b50bdd70c17de2cb82958a5c75f0417627398\bsg_circular_ptr  \strict.circular_ptr  (
    .add_i(yumi_i),
    .clk(clk_i),
    .o(tag_o),
    .reset_i(reset_i)
  );
  assign \strict.ptr_r  = tag_o;
endmodule


module \$paramod$bb218e9ef27777de7986fc089d2f0baa300f69b5\bsg_fifo_1rw_large (clk_i, reset_i, data_i, v_i, enq_not_deq_i, full_o, empty_o, data_o);
  wire _0_;
  
  wire _1_;
  
  input clk_i;
  wire clk_i;
  
  input [31:0] data_i;
  wire [31:0] data_i;
  
  output [31:0] data_o;
  wire [31:0] data_o;
  
  output empty_o;
  wire empty_o;
  
  input enq_not_deq_i;
  wire enq_not_deq_i;
  
  wire fifo_empty;
  
  wire fifo_full;
  
  output full_o;
  wire full_o;
  
  reg last_op_is_read_r;
  
  wire mem_re;
  
  wire mem_we;
  
  wire rd_ptr;
  
  input reset_i;
  wire reset_i;
  
  input v_i;
  wire v_i;
  
  wire wr_ptr;
  assign mem_we = v_i & enq_not_deq_i;
  assign _1_ = mem_we ? wr_ptr : rd_ptr;
  assign mem_re = v_i & ~(enq_not_deq_i);
  assign _0_ = wr_ptr ^ rd_ptr;
  assign empty_o = last_op_is_read_r & ~(_0_);
  assign full_o = ~(_0_ | last_op_is_read_r);
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) last_op_is_read_r <= 1'h1;
    else if (v_i) last_op_is_read_r <= mem_re;
  (* module_not_derived = 32'd1 *)
  
  \$paramod$321667aebe91027dd7e4249271052f747f2f7973\bsg_mem_1rw_sync  mem_1srw (
    .addr_i(_1_),
    .clk_i(clk_i),
    .data_i(data_i),
    .data_o(data_o),
    .reset_i(reset_i),
    .v_i(v_i),
    .w_i(mem_we)
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod$946b50bdd70c17de2cb82958a5c75f0417627398\bsg_circular_ptr  rd_circ_ptr (
    .add_i(mem_re),
    .clk(clk_i),
    .o(rd_ptr),
    .reset_i(reset_i)
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod$946b50bdd70c17de2cb82958a5c75f0417627398\bsg_circular_ptr  wr_circ_ptr (
    .add_i(mem_we),
    .clk(clk_i),
    .o(wr_ptr),
    .reset_i(reset_i)
  );
  assign fifo_empty = empty_o;
  assign fifo_full = full_o;
endmodule


module \$paramod$d6f758b430610802713302507c08ff4b7c60a1d3\bsg_fifo_1r1w_large (clk_i, reset_i, data_i, v_i, ready_o, v_o, data_o, yumi_i);
  
  wire _00_;
  
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  
  wire [31:0] big_data_lo;
  
  wire big_deq;
  
  reg big_deq_r;
  
  wire big_empty_lo;
  
  wire big_enq;
  
  wire big_full_lo;
  
  wire big_valid;
  
  input clk_i;
  wire clk_i;
  
  wire [1:0] cnt;
  
  input [15:0] data_i;
  wire [15:0] data_i;
  
  wire [31:0] data_int;
  
  output [15:0] data_o;
  wire [15:0] data_o;
  
  wire [31:0] data_sipo;
  
  wire [31:0] little_data;
  
  wire [31:0] little_data_rot;
  
  wire [1:0] little_ready;
  
  wire [1:0] little_ready_rot;
  
  wire [1:0] little_valid;
  
  wire [1:0] little_valid_rot;
  
  output ready_o;
  wire ready_o;
  
  input reset_i;
  wire reset_i;
  
  input v_i;
  wire v_i;
  
  output v_o;
  wire v_o;
  
  wire [1:0] valid_int;
  
  wire [1:0] valid_sipo;
  
  wire will_spill;
  
  wire [1:0] yumi_cnt_sipo;
  
  input yumi_i;
  wire yumi_i;
  
  wire [1:0] yumi_int;
  assign little_data[0] = big_deq_r ? big_data_lo[0] : data_sipo[0];
  assign little_data[1] = big_deq_r ? big_data_lo[1] : data_sipo[1];
  assign little_data[2] = big_deq_r ? big_data_lo[2] : data_sipo[2];
  assign little_data[3] = big_deq_r ? big_data_lo[3] : data_sipo[3];
  assign little_data[4] = big_deq_r ? big_data_lo[4] : data_sipo[4];
  assign little_data[5] = big_deq_r ? big_data_lo[5] : data_sipo[5];
  assign little_data[6] = big_deq_r ? big_data_lo[6] : data_sipo[6];
  assign little_data[7] = big_deq_r ? big_data_lo[7] : data_sipo[7];
  assign little_data[8] = big_deq_r ? big_data_lo[8] : data_sipo[8];
  assign little_data[9] = big_deq_r ? big_data_lo[9] : data_sipo[9];
  assign little_data[10] = big_deq_r ? big_data_lo[10] : data_sipo[10];
  assign little_data[11] = big_deq_r ? big_data_lo[11] : data_sipo[11];
  assign little_data[12] = big_deq_r ? big_data_lo[12] : data_sipo[12];
  assign little_data[13] = big_deq_r ? big_data_lo[13] : data_sipo[13];
  assign little_data[14] = big_deq_r ? big_data_lo[14] : data_sipo[14];
  assign little_data[15] = big_deq_r ? big_data_lo[15] : data_sipo[15];
  assign little_data[16] = big_deq_r ? big_data_lo[16] : data_sipo[16];
  assign little_data[17] = big_deq_r ? big_data_lo[17] : data_sipo[17];
  assign little_data[18] = big_deq_r ? big_data_lo[18] : data_sipo[18];
  assign little_data[19] = big_deq_r ? big_data_lo[19] : data_sipo[19];
  assign little_data[20] = big_deq_r ? big_data_lo[20] : data_sipo[20];
  assign little_data[21] = big_deq_r ? big_data_lo[21] : data_sipo[21];
  assign little_data[22] = big_deq_r ? big_data_lo[22] : data_sipo[22];
  assign little_data[23] = big_deq_r ? big_data_lo[23] : data_sipo[23];
  assign little_data[24] = big_deq_r ? big_data_lo[24] : data_sipo[24];
  assign little_data[25] = big_deq_r ? big_data_lo[25] : data_sipo[25];
  assign little_data[26] = big_deq_r ? big_data_lo[26] : data_sipo[26];
  assign little_data[27] = big_deq_r ? big_data_lo[27] : data_sipo[27];
  assign little_data[28] = big_deq_r ? big_data_lo[28] : data_sipo[28];
  assign little_data[29] = big_deq_r ? big_data_lo[29] : data_sipo[29];
  assign little_data[30] = big_deq_r ? big_data_lo[30] : data_sipo[30];
  assign little_data[31] = big_deq_r ? big_data_lo[31] : data_sipo[31];
  assign _02_ = ~big_deq_r;
  assign _03_ = ~big_empty_lo;
  assign _04_ = big_deq_r | ~(little_ready[0]);
  assign _05_ = _04_ | _03_;
  assign _06_ = _05_ | ~(valid_sipo[0]);
  assign little_valid[0] = ~(_06_ & _02_);
  assign _07_ = _05_ | ~(valid_sipo[1]);
  assign little_valid[1] = ~(_07_ & _02_);
  assign _08_ = _05_ & ~(big_full_lo);
  assign _09_ = ~(valid_sipo[1] & valid_sipo[0]);
  assign _10_ = _08_ & ~(_09_);
  assign _11_ = ~(little_ready_rot[1] & little_ready_rot[0]);
  assign _12_ = _11_ | big_empty_lo;
  assign _13_ = _02_ & ~(_12_);
  assign big_enq = _10_ & ~(_13_);
  assign yumi_cnt_sipo[0] = cnt[0] & ~(big_enq);
  assign yumi_cnt_sipo[1] = big_enq | cnt[1];
  assign _00_ = little_ready[0] & ~(_06_);
  assign _01_ = little_ready[1] & ~(_07_);
  assign _14_ = _03_ & ~(big_enq);
  assign _15_ = valid_int[1] | valid_int[0];
  assign _16_ = big_deq_r ? _15_ : _11_;
  assign big_deq = _14_ & ~(_16_);
  assign big_valid = big_deq | big_enq;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    big_deq_r <= big_deq;
  (* module_not_derived = 32'd1 *)
  
  \$paramod$bb218e9ef27777de7986fc089d2f0baa300f69b5\bsg_fifo_1rw_large  big1p (
    .clk_i(clk_i),
    .data_i(data_sipo),
    .data_o(big_data_lo),
    .empty_o(big_empty_lo),
    .enq_not_deq_i(big_enq),
    .full_o(big_full_lo),
    .reset_i(reset_i),
    .v_i(big_valid)
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod$a656a8a44409be96e20c3b35480a0dc9d8df0ed4\bsg_round_robin_n_to_1  round_robin_n_to_1 (
    .clk_i(clk_i),
    .data_i(data_int),
    .data_o(data_o),
    .reset_i(reset_i),
    .v_i(valid_int),
    .v_o(v_o),
    .yumi_i(yumi_i),
    .yumi_o(yumi_int)
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod\bsg_round_robin_2_to_2\width_p=s32'00000000000000000000000000010000  rr222 (
    .clk_i(clk_i),
    .data_i(little_data),
    .data_o(little_data_rot),
    .ready_i(little_ready_rot),
    .ready_o(little_ready),
    .reset_i(reset_i),
    .v_i(little_valid),
    .v_o(little_valid_rot)
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod$4b22cfe78632843a35ebdb06e358bb592d8ef843\bsg_serial_in_parallel_out  sipo (
    .clk_i(clk_i),
    .data_i(data_i),
    .data_o(data_sipo),
    .ready_o(ready_o),
    .reset_i(reset_i),
    .valid_i(v_i),
    .valid_o(valid_sipo),
    .yumi_cnt_i(yumi_cnt_sipo)
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod\bsg_thermometer_count\width_p=s32'00000000000000000000000000000010  thermo (
    .i({ _01_, _00_ }),
    .o(cnt)
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod$178264a5165c1cd104ffa6bfd64842c34001f91b\bsg_two_fifo  \twofer[0].little  (
    .clk_i(clk_i),
    .data_i(little_data_rot[15:0]),
    .data_o(data_int[15:0]),
    .ready_o(little_ready_rot[0]),
    .reset_i(reset_i),
    .v_i(little_valid_rot[0]),
    .v_o(valid_int[0]),
    .yumi_i(yumi_int[0])
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod$178264a5165c1cd104ffa6bfd64842c34001f91b\bsg_two_fifo  \twofer[1].little  (
    .clk_i(clk_i),
    .data_i(little_data_rot[31:16]),
    .data_o(data_int[31:16]),
    .ready_o(little_ready_rot[1]),
    .reset_i(reset_i),
    .v_i(little_valid_rot[1]),
    .v_o(valid_int[1]),
    .yumi_i(yumi_int[1])
  );
  assign will_spill = big_enq;
endmodule


module \$paramod$e79b8c4e6409b809f38f3196ee2cb80d3fcb268c\bsg_mem_1r1w_synth (w_clk_i, w_reset_i, w_v_i, w_addr_i, w_data_i, r_v_i, r_addr_i, r_data_o);
  wire _00_;
  wire _01_;
  reg [15:0] \nz.mem[0] ;
  reg [15:0] \nz.mem[1] ;
  
  input r_addr_i;
  wire r_addr_i;
  
  output [15:0] r_data_o;
  wire [15:0] r_data_o;
  
  input r_v_i;
  wire r_v_i;
  
  (* unused_bits = "0" *)
  wire unused0;
  
  (* unused_bits = "0" *)
  wire unused1;
  
  input w_addr_i;
  wire w_addr_i;
  
  input w_clk_i;
  wire w_clk_i;
  
  input [15:0] w_data_i;
  wire [15:0] w_data_i;
  
  input w_reset_i;
  wire w_reset_i;
  
  input w_v_i;
  wire w_v_i;
  assign r_data_o[0] = r_addr_i ? \nz.mem[1] [0] : \nz.mem[0] [0];
  assign r_data_o[1] = r_addr_i ? \nz.mem[1] [1] : \nz.mem[0] [1];
  assign r_data_o[2] = r_addr_i ? \nz.mem[1] [2] : \nz.mem[0] [2];
  assign r_data_o[3] = r_addr_i ? \nz.mem[1] [3] : \nz.mem[0] [3];
  assign r_data_o[4] = r_addr_i ? \nz.mem[1] [4] : \nz.mem[0] [4];
  assign r_data_o[5] = r_addr_i ? \nz.mem[1] [5] : \nz.mem[0] [5];
  assign r_data_o[6] = r_addr_i ? \nz.mem[1] [6] : \nz.mem[0] [6];
  assign r_data_o[7] = r_addr_i ? \nz.mem[1] [7] : \nz.mem[0] [7];
  assign r_data_o[8] = r_addr_i ? \nz.mem[1] [8] : \nz.mem[0] [8];
  assign r_data_o[9] = r_addr_i ? \nz.mem[1] [9] : \nz.mem[0] [9];
  assign r_data_o[10] = r_addr_i ? \nz.mem[1] [10] : \nz.mem[0] [10];
  assign r_data_o[11] = r_addr_i ? \nz.mem[1] [11] : \nz.mem[0] [11];
  assign r_data_o[12] = r_addr_i ? \nz.mem[1] [12] : \nz.mem[0] [12];
  assign r_data_o[13] = r_addr_i ? \nz.mem[1] [13] : \nz.mem[0] [13];
  assign r_data_o[14] = r_addr_i ? \nz.mem[1] [14] : \nz.mem[0] [14];
  assign r_data_o[15] = r_addr_i ? \nz.mem[1] [15] : \nz.mem[0] [15];
  assign _00_ = w_v_i & ~(w_addr_i);
  assign _01_ = w_v_i & w_addr_i;
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [0] <= w_data_i[0];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [1] <= w_data_i[1];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [2] <= w_data_i[2];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [3] <= w_data_i[3];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [4] <= w_data_i[4];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [5] <= w_data_i[5];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [6] <= w_data_i[6];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [7] <= w_data_i[7];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [8] <= w_data_i[8];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [9] <= w_data_i[9];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [10] <= w_data_i[10];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [11] <= w_data_i[11];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [12] <= w_data_i[12];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [13] <= w_data_i[13];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [14] <= w_data_i[14];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [15] <= w_data_i[15];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [0] <= w_data_i[0];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [1] <= w_data_i[1];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [2] <= w_data_i[2];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [3] <= w_data_i[3];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [4] <= w_data_i[4];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [5] <= w_data_i[5];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [6] <= w_data_i[6];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [7] <= w_data_i[7];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [8] <= w_data_i[8];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [9] <= w_data_i[9];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [10] <= w_data_i[10];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [11] <= w_data_i[11];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [12] <= w_data_i[12];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [13] <= w_data_i[13];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [14] <= w_data_i[14];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [15] <= w_data_i[15];
  assign unused0 = w_reset_i;
  assign unused1 = r_v_i;
endmodule


module \$paramod\bsg_round_robin_2_to_2\width_p=s32'00000000000000000000000000010000 (clk_i, reset_i, data_i, v_i, ready_o, data_o, v_o, ready_i);
  wire _00_;
  wire _01_;
  wire _02_;
  
  wire _03_;
  
  input clk_i;
  wire clk_i;
  
  input [31:0] data_i;
  wire [31:0] data_i;
  
  output [31:0] data_o;
  wire [31:0] data_o;
  
  reg head_r;
  
  input [1:0] ready_i;
  wire [1:0] ready_i;
  
  output [1:0] ready_o;
  wire [1:0] ready_o;
  
  input reset_i;
  wire reset_i;
  
  input [1:0] v_i;
  wire [1:0] v_i;
  
  output [1:0] v_o;
  wire [1:0] v_o;
  assign ready_o[0] = head_r ? ready_i[1] : ready_i[0];
  assign _00_ = ~(ready_o[0] & v_i[0]);
  assign ready_o[1] = head_r ? ready_i[0] : ready_i[1];
  assign _01_ = ready_o[1] & v_i[1];
  assign _02_ = ~(_01_ ^ _00_);
  assign _03_ = _02_ ^ head_r;
  assign data_o[0] = head_r ? data_i[16] : data_i[0];
  assign data_o[1] = head_r ? data_i[17] : data_i[1];
  assign data_o[2] = head_r ? data_i[18] : data_i[2];
  assign data_o[3] = head_r ? data_i[19] : data_i[3];
  assign data_o[4] = head_r ? data_i[20] : data_i[4];
  assign data_o[5] = head_r ? data_i[21] : data_i[5];
  assign data_o[6] = head_r ? data_i[22] : data_i[6];
  assign data_o[7] = head_r ? data_i[23] : data_i[7];
  assign data_o[8] = head_r ? data_i[24] : data_i[8];
  assign data_o[9] = head_r ? data_i[25] : data_i[9];
  assign data_o[10] = head_r ? data_i[26] : data_i[10];
  assign data_o[11] = head_r ? data_i[27] : data_i[11];
  assign data_o[12] = head_r ? data_i[28] : data_i[12];
  assign data_o[13] = head_r ? data_i[29] : data_i[13];
  assign data_o[14] = head_r ? data_i[30] : data_i[14];
  assign data_o[15] = head_r ? data_i[31] : data_i[15];
  assign data_o[16] = head_r ? data_i[0] : data_i[16];
  assign data_o[17] = head_r ? data_i[1] : data_i[17];
  assign data_o[18] = head_r ? data_i[2] : data_i[18];
  assign data_o[19] = head_r ? data_i[3] : data_i[19];
  assign data_o[20] = head_r ? data_i[4] : data_i[20];
  assign data_o[21] = head_r ? data_i[5] : data_i[21];
  assign data_o[22] = head_r ? data_i[6] : data_i[22];
  assign data_o[23] = head_r ? data_i[7] : data_i[23];
  assign data_o[24] = head_r ? data_i[8] : data_i[24];
  assign data_o[25] = head_r ? data_i[9] : data_i[25];
  assign data_o[26] = head_r ? data_i[10] : data_i[26];
  assign data_o[27] = head_r ? data_i[11] : data_i[27];
  assign data_o[28] = head_r ? data_i[12] : data_i[28];
  assign data_o[29] = head_r ? data_i[13] : data_i[29];
  assign data_o[30] = head_r ? data_i[14] : data_i[30];
  assign data_o[31] = head_r ? data_i[15] : data_i[31];
  assign v_o[0] = head_r ? v_i[1] : v_i[0];
  assign v_o[1] = head_r ? v_i[0] : v_i[1];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) head_r <= 1'h0;
    else head_r <= _03_;
endmodule


module \$paramod\bsg_thermometer_count\width_p=s32'00000000000000000000000000000010 (i, o);
  
  input [1:0] i;
  wire [1:0] i;
  
  output [1:0] o;
  wire [1:0] o;
  assign o[0] = i[0] & ~(i[1]);
  assign o[1] = i[1];
endmodule

(* top =  1  *)

module bsg_cache_to_dram_ctrl_rx(clk_i, reset_i, dma_data_o, dma_data_v_o, dma_data_ready_i, app_rd_data_valid_i, app_rd_data_end_i, app_rd_data_i);
  
  input app_rd_data_end_i;
  wire app_rd_data_end_i;
  
  input [15:0] app_rd_data_i;
  wire [15:0] app_rd_data_i;
  
  input app_rd_data_valid_i;
  wire app_rd_data_valid_i;
  
  input clk_i;
  wire clk_i;
  
  output [15:0] dma_data_o;
  wire [15:0] dma_data_o;
  
  input dma_data_ready_i;
  wire dma_data_ready_i;
  
  output dma_data_v_o;
  wire dma_data_v_o;
  
  wire [15:0] fifo_data_lo;
  
  wire fifo_v_lo;
  
  wire fifo_yumi_li;
  
  input reset_i;
  wire reset_i;
  
  (* unused_bits = "0" *)
  wire unused;
  assign fifo_yumi_li = dma_data_ready_i & fifo_v_lo;
  (* module_not_derived = 32'd1 *)
  
  \$paramod$d6f758b430610802713302507c08ff4b7c60a1d3\bsg_fifo_1r1w_large  fifo (
    .clk_i(clk_i),
    .data_i(app_rd_data_i),
    .data_o(fifo_data_lo),
    .reset_i(reset_i),
    .v_i(app_rd_data_valid_i),
    .v_o(fifo_v_lo),
    .yumi_i(fifo_yumi_li)
  );
  assign dma_data_o = fifo_data_lo;
  assign dma_data_v_o = fifo_v_lo;
  assign unused = app_rd_data_end_i;
endmodule

