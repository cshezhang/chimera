/* Generated by Yosys 0.27+9 (git sha1 101d19bb6, gcc 11.2.0-7ubuntu2 -fPIC -Os) */


module \$paramod$c865a8748c0479d3746d3cdad398445be6d0c80c\bsg_dff_en (clk_i, data_i, en_i, data_o);
  
  input clk_i;
  wire clk_i;
  
  input [15:0] data_i;
  wire [15:0] data_i;
  
  output [15:0] data_o;
  wire [15:0] data_o;
  
  reg [15:0] data_r;
  
  input en_i;
  wire en_i;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (en_i) data_r[0] <= data_i[0];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (en_i) data_r[1] <= data_i[1];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (en_i) data_r[2] <= data_i[2];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (en_i) data_r[3] <= data_i[3];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (en_i) data_r[4] <= data_i[4];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (en_i) data_r[5] <= data_i[5];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (en_i) data_r[6] <= data_i[6];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (en_i) data_r[7] <= data_i[7];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (en_i) data_r[8] <= data_i[8];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (en_i) data_r[9] <= data_i[9];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (en_i) data_r[10] <= data_i[10];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (en_i) data_r[11] <= data_i[11];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (en_i) data_r[12] <= data_i[12];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (en_i) data_r[13] <= data_i[13];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (en_i) data_r[14] <= data_i[14];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (en_i) data_r[15] <= data_i[15];
  assign data_o = data_r;
endmodule

(* top =  1  *)

module bsg_dff_en_bypass(clk_i, en_i, data_i, data_o);
  
  input clk_i;
  wire clk_i;
  
  input [15:0] data_i;
  wire [15:0] data_i;
  
  output [15:0] data_o;
  wire [15:0] data_o;
  
  wire [15:0] data_r;
  
  input en_i;
  wire en_i;
  assign data_o[0] = en_i ? data_i[0] : data_r[0];
  assign data_o[1] = en_i ? data_i[1] : data_r[1];
  assign data_o[2] = en_i ? data_i[2] : data_r[2];
  assign data_o[3] = en_i ? data_i[3] : data_r[3];
  assign data_o[4] = en_i ? data_i[4] : data_r[4];
  assign data_o[5] = en_i ? data_i[5] : data_r[5];
  assign data_o[6] = en_i ? data_i[6] : data_r[6];
  assign data_o[7] = en_i ? data_i[7] : data_r[7];
  assign data_o[8] = en_i ? data_i[8] : data_r[8];
  assign data_o[9] = en_i ? data_i[9] : data_r[9];
  assign data_o[10] = en_i ? data_i[10] : data_r[10];
  assign data_o[11] = en_i ? data_i[11] : data_r[11];
  assign data_o[12] = en_i ? data_i[12] : data_r[12];
  assign data_o[13] = en_i ? data_i[13] : data_r[13];
  assign data_o[14] = en_i ? data_i[14] : data_r[14];
  assign data_o[15] = en_i ? data_i[15] : data_r[15];
  (* module_not_derived = 32'd1 *)
  
  \$paramod$c865a8748c0479d3746d3cdad398445be6d0c80c\bsg_dff_en  dff (
    .clk_i(clk_i),
    .data_i(data_i),
    .data_o(data_r),
    .en_i(en_i)
  );
endmodule

