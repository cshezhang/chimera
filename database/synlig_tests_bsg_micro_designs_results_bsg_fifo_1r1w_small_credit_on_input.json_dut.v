/* Generated by Yosys 0.27+9 (git sha1 101d19bb6, gcc 11.2.0-7ubuntu2 -fPIC -Os) */


module \$paramod$16fe552a740d0761b1dc42d8b9c8041662581bd5\bsg_fifo_1r1w_small (clk_i, reset_i, v_i, ready_o, data_i, v_o, data_o, yumi_i);
  
  input clk_i;
  wire clk_i;
  
  input [15:0] data_i;
  wire [15:0] data_i;
  
  output [15:0] data_o;
  wire [15:0] data_o;
  
  output ready_o;
  wire ready_o;
  
  input reset_i;
  wire reset_i;
  
  input v_i;
  wire v_i;
  
  output v_o;
  wire v_o;
  
  input yumi_i;
  wire yumi_i;
  (* module_not_derived = 32'd1 *)
  
  \$paramod$4ac5e84878d12f87d7ecc56a10f916af56ecd675\bsg_fifo_1r1w_small_unhardened  \unhardened.un.fifo  (
    .clk_i(clk_i),
    .data_i(data_i),
    .data_o(data_o),
    .ready_o(ready_o),
    .reset_i(reset_i),
    .v_i(v_i),
    .v_o(v_o),
    .yumi_i(yumi_i)
  );
endmodule


module \$paramod$1bb9c067544ec8c0b39a98bcd5709e1cf00fea35\bsg_mem_1r1w (w_clk_i, w_reset_i, w_v_i, w_addr_i, w_data_i, r_v_i, r_addr_i, r_data_o);
  
  input [2:0] r_addr_i;
  wire [2:0] r_addr_i;
  
  output [15:0] r_data_o;
  wire [15:0] r_data_o;
  
  input r_v_i;
  wire r_v_i;
  
  input [2:0] w_addr_i;
  wire [2:0] w_addr_i;
  
  input w_clk_i;
  wire w_clk_i;
  
  input [15:0] w_data_i;
  wire [15:0] w_data_i;
  
  input w_reset_i;
  wire w_reset_i;
  
  input w_v_i;
  wire w_v_i;
  (* module_not_derived = 32'd1 *)
  
  \$paramod$9f2f432b8f026999603a77e753598fcae7910f54\bsg_mem_1r1w_synth  synth (
    .r_addr_i(r_addr_i),
    .r_data_o(r_data_o),
    .r_v_i(r_v_i),
    .w_addr_i(w_addr_i),
    .w_clk_i(w_clk_i),
    .w_data_i(w_data_i),
    .w_reset_i(w_reset_i),
    .w_v_i(w_v_i)
  );
endmodule


module \$paramod$390d00d447ff1ef7560f0b879c305a2abdc7f035\bsg_circular_ptr (clk, reset_i, add_i, o, n_o);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  
  input add_i;
  wire add_i;
  
  input clk;
  wire clk;
  
  output [2:0] n_o;
  wire [2:0] n_o;
  
  output [2:0] o;
  wire [2:0] o;
  
  wire [2:0] ptr_n;
  
  reg [2:0] ptr_r;
  
  input reset_i;
  wire reset_i;
  assign _10_ = ptr_r[0] ^ add_i;
  assign _11_ = ~ptr_r[2];
  assign _00_ = ~(ptr_r[0] | add_i);
  assign _01_ = _00_ & ~(ptr_r[1]);
  assign _02_ = _01_ | _11_;
  assign _03_ = ~(ptr_r[0] ^ add_i);
  assign n_o[0] = _02_ ? _10_ : _03_;
  assign _04_ = ~(ptr_r[0] & add_i);
  assign _05_ = ~(_04_ ^ ptr_r[1]);
  assign _06_ = _00_ ^ ptr_r[1];
  assign n_o[1] = _02_ ? _05_ : _06_;
  assign _07_ = ptr_r[1] & ~(_04_);
  assign _08_ = _07_ ^ ptr_r[2];
  assign _09_ = _01_ ^ _11_;
  assign n_o[2] = _02_ ? _08_ : _09_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk)
    if (reset_i) ptr_r[0] <= 1'h0;
    else ptr_r[0] <= n_o[0];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk)
    if (reset_i) ptr_r[1] <= 1'h0;
    else ptr_r[1] <= n_o[1];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk)
    if (reset_i) ptr_r[2] <= 1'h0;
    else ptr_r[2] <= n_o[2];
  assign o = ptr_r;
  assign ptr_n = n_o;
endmodule


module \$paramod$4ac5e84878d12f87d7ecc56a10f916af56ecd675\bsg_fifo_1r1w_small_unhardened (clk_i, reset_i, v_i, ready_o, data_i, v_o, data_o, yumi_i);
  
  input clk_i;
  wire clk_i;
  
  input [15:0] data_i;
  wire [15:0] data_i;
  
  output [15:0] data_o;
  wire [15:0] data_o;
  
  wire deque;
  
  wire empty;
  
  wire enque;
  
  wire full;
  
  wire ready_lo;
  
  output ready_o;
  wire ready_o;
  
  input reset_i;
  wire reset_i;
  
  wire [2:0] rptr_r;
  
  input v_i;
  wire v_i;
  
  output v_o;
  wire v_o;
  
  wire v_o_tmp;
  
  wire [2:0] wptr_r;
  
  input yumi_i;
  wire yumi_i;
  assign ready_o = ~full;
  assign v_o_tmp = ~empty;
  (* module_not_derived = 32'd1 *)
  
  \$paramod$ca6b7bac468b18999d42d6fd3fbcdba927422191\bsg_fifo_tracker  ft (
    .clk_i(clk_i),
    .deq_i(yumi_i),
    .empty_o(empty),
    .enq_i(v_i),
    .full_o(full),
    .reset_i(reset_i),
    .rptr_r_o(rptr_r),
    .wptr_r_o(wptr_r)
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod$1bb9c067544ec8c0b39a98bcd5709e1cf00fea35\bsg_mem_1r1w  mem_1r1w (
    .r_addr_i(rptr_r),
    .r_data_o(data_o),
    .r_v_i(v_o_tmp),
    .w_addr_i(wptr_r),
    .w_clk_i(clk_i),
    .w_data_i(data_i),
    .w_reset_i(reset_i),
    .w_v_i(v_i)
  );
  assign deque = yumi_i;
  assign enque = v_i;
  assign ready_lo = ready_o;
  assign v_o = v_o_tmp;
endmodule


module \$paramod$9f2f432b8f026999603a77e753598fcae7910f54\bsg_mem_1r1w_synth (w_clk_i, w_reset_i, w_v_i, w_addr_i, w_data_i, r_v_i, r_addr_i, r_data_o);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  reg [15:0] \nz.mem[0] ;
  reg [15:0] \nz.mem[1] ;
  reg [15:0] \nz.mem[2] ;
  reg [15:0] \nz.mem[3] ;
  reg [15:0] \nz.mem[4] ;
  
  input [2:0] r_addr_i;
  wire [2:0] r_addr_i;
  
  output [15:0] r_data_o;
  wire [15:0] r_data_o;
  
  input r_v_i;
  wire r_v_i;
  
  (* unused_bits = "0" *)
  wire unused0;
  
  (* unused_bits = "0" *)
  wire unused1;
  
  input [2:0] w_addr_i;
  wire [2:0] w_addr_i;
  
  input w_clk_i;
  wire w_clk_i;
  
  input [15:0] w_data_i;
  wire [15:0] w_data_i;
  
  input w_reset_i;
  wire w_reset_i;
  
  input w_v_i;
  wire w_v_i;
  assign _005_ = r_addr_i[0] ? \nz.mem[1] [0] : \nz.mem[0] [0];
  assign _006_ = r_addr_i[0] ? \nz.mem[3] [0] : \nz.mem[2] [0];
  assign _007_ = r_addr_i[1] ? _006_ : _005_;
  assign r_data_o[0] = r_addr_i[2] ? \nz.mem[4] [0] : _007_;
  assign _008_ = r_addr_i[0] ? \nz.mem[1] [1] : \nz.mem[0] [1];
  assign _009_ = r_addr_i[0] ? \nz.mem[3] [1] : \nz.mem[2] [1];
  assign _010_ = r_addr_i[1] ? _009_ : _008_;
  assign r_data_o[1] = r_addr_i[2] ? \nz.mem[4] [1] : _010_;
  assign _011_ = r_addr_i[0] ? \nz.mem[1] [2] : \nz.mem[0] [2];
  assign _012_ = r_addr_i[0] ? \nz.mem[3] [2] : \nz.mem[2] [2];
  assign _013_ = r_addr_i[1] ? _012_ : _011_;
  assign r_data_o[2] = r_addr_i[2] ? \nz.mem[4] [2] : _013_;
  assign _014_ = r_addr_i[0] ? \nz.mem[1] [3] : \nz.mem[0] [3];
  assign _015_ = r_addr_i[0] ? \nz.mem[3] [3] : \nz.mem[2] [3];
  assign _016_ = r_addr_i[1] ? _015_ : _014_;
  assign r_data_o[3] = r_addr_i[2] ? \nz.mem[4] [3] : _016_;
  assign _017_ = r_addr_i[0] ? \nz.mem[1] [4] : \nz.mem[0] [4];
  assign _018_ = r_addr_i[0] ? \nz.mem[3] [4] : \nz.mem[2] [4];
  assign _019_ = r_addr_i[1] ? _018_ : _017_;
  assign r_data_o[4] = r_addr_i[2] ? \nz.mem[4] [4] : _019_;
  assign _020_ = r_addr_i[0] ? \nz.mem[1] [5] : \nz.mem[0] [5];
  assign _021_ = r_addr_i[0] ? \nz.mem[3] [5] : \nz.mem[2] [5];
  assign _022_ = r_addr_i[1] ? _021_ : _020_;
  assign r_data_o[5] = r_addr_i[2] ? \nz.mem[4] [5] : _022_;
  assign _023_ = r_addr_i[0] ? \nz.mem[1] [6] : \nz.mem[0] [6];
  assign _024_ = r_addr_i[0] ? \nz.mem[3] [6] : \nz.mem[2] [6];
  assign _025_ = r_addr_i[1] ? _024_ : _023_;
  assign r_data_o[6] = r_addr_i[2] ? \nz.mem[4] [6] : _025_;
  assign _026_ = r_addr_i[0] ? \nz.mem[1] [7] : \nz.mem[0] [7];
  assign _027_ = r_addr_i[0] ? \nz.mem[3] [7] : \nz.mem[2] [7];
  assign _028_ = r_addr_i[1] ? _027_ : _026_;
  assign r_data_o[7] = r_addr_i[2] ? \nz.mem[4] [7] : _028_;
  assign _029_ = r_addr_i[0] ? \nz.mem[1] [8] : \nz.mem[0] [8];
  assign _030_ = r_addr_i[0] ? \nz.mem[3] [8] : \nz.mem[2] [8];
  assign _031_ = r_addr_i[1] ? _030_ : _029_;
  assign r_data_o[8] = r_addr_i[2] ? \nz.mem[4] [8] : _031_;
  assign _032_ = r_addr_i[0] ? \nz.mem[1] [9] : \nz.mem[0] [9];
  assign _033_ = r_addr_i[0] ? \nz.mem[3] [9] : \nz.mem[2] [9];
  assign _034_ = r_addr_i[1] ? _033_ : _032_;
  assign r_data_o[9] = r_addr_i[2] ? \nz.mem[4] [9] : _034_;
  assign _035_ = r_addr_i[0] ? \nz.mem[1] [10] : \nz.mem[0] [10];
  assign _036_ = r_addr_i[0] ? \nz.mem[3] [10] : \nz.mem[2] [10];
  assign _037_ = r_addr_i[1] ? _036_ : _035_;
  assign r_data_o[10] = r_addr_i[2] ? \nz.mem[4] [10] : _037_;
  assign _038_ = r_addr_i[0] ? \nz.mem[1] [11] : \nz.mem[0] [11];
  assign _039_ = r_addr_i[0] ? \nz.mem[3] [11] : \nz.mem[2] [11];
  assign _040_ = r_addr_i[1] ? _039_ : _038_;
  assign r_data_o[11] = r_addr_i[2] ? \nz.mem[4] [11] : _040_;
  assign _041_ = r_addr_i[0] ? \nz.mem[1] [12] : \nz.mem[0] [12];
  assign _042_ = r_addr_i[0] ? \nz.mem[3] [12] : \nz.mem[2] [12];
  assign _043_ = r_addr_i[1] ? _042_ : _041_;
  assign r_data_o[12] = r_addr_i[2] ? \nz.mem[4] [12] : _043_;
  assign _044_ = r_addr_i[0] ? \nz.mem[1] [13] : \nz.mem[0] [13];
  assign _045_ = r_addr_i[0] ? \nz.mem[3] [13] : \nz.mem[2] [13];
  assign _046_ = r_addr_i[1] ? _045_ : _044_;
  assign r_data_o[13] = r_addr_i[2] ? \nz.mem[4] [13] : _046_;
  assign _047_ = r_addr_i[0] ? \nz.mem[1] [14] : \nz.mem[0] [14];
  assign _048_ = r_addr_i[0] ? \nz.mem[3] [14] : \nz.mem[2] [14];
  assign _049_ = r_addr_i[1] ? _048_ : _047_;
  assign r_data_o[14] = r_addr_i[2] ? \nz.mem[4] [14] : _049_;
  assign _050_ = r_addr_i[0] ? \nz.mem[1] [15] : \nz.mem[0] [15];
  assign _051_ = r_addr_i[0] ? \nz.mem[3] [15] : \nz.mem[2] [15];
  assign _052_ = r_addr_i[1] ? _051_ : _050_;
  assign r_data_o[15] = r_addr_i[2] ? \nz.mem[4] [15] : _052_;
  assign _053_ = w_addr_i[1] | w_addr_i[2];
  assign _054_ = _053_ | w_addr_i[0];
  assign _000_ = w_v_i & ~(_054_);
  assign _055_ = ~w_addr_i[0];
  assign _056_ = _053_ | _055_;
  assign _001_ = w_v_i & ~(_056_);
  assign _057_ = w_addr_i[2] | ~(w_addr_i[1]);
  assign _058_ = _057_ | w_addr_i[0];
  assign _002_ = w_v_i & ~(_058_);
  assign _059_ = _057_ | _055_;
  assign _003_ = w_v_i & ~(_059_);
  assign _060_ = w_addr_i[1] | ~(w_addr_i[2]);
  assign _061_ = _060_ | w_addr_i[0];
  assign _004_ = w_v_i & ~(_061_);
  always @(posedge w_clk_i)
    if (_003_) \nz.mem[3] [0] <= w_data_i[0];
  always @(posedge w_clk_i)
    if (_003_) \nz.mem[3] [1] <= w_data_i[1];
  always @(posedge w_clk_i)
    if (_003_) \nz.mem[3] [2] <= w_data_i[2];
  always @(posedge w_clk_i)
    if (_003_) \nz.mem[3] [3] <= w_data_i[3];
  always @(posedge w_clk_i)
    if (_003_) \nz.mem[3] [4] <= w_data_i[4];
  always @(posedge w_clk_i)
    if (_003_) \nz.mem[3] [5] <= w_data_i[5];
  always @(posedge w_clk_i)
    if (_003_) \nz.mem[3] [6] <= w_data_i[6];
  always @(posedge w_clk_i)
    if (_003_) \nz.mem[3] [7] <= w_data_i[7];
  always @(posedge w_clk_i)
    if (_003_) \nz.mem[3] [8] <= w_data_i[8];
  always @(posedge w_clk_i)
    if (_003_) \nz.mem[3] [9] <= w_data_i[9];
  always @(posedge w_clk_i)
    if (_003_) \nz.mem[3] [10] <= w_data_i[10];
  always @(posedge w_clk_i)
    if (_003_) \nz.mem[3] [11] <= w_data_i[11];
  always @(posedge w_clk_i)
    if (_003_) \nz.mem[3] [12] <= w_data_i[12];
  always @(posedge w_clk_i)
    if (_003_) \nz.mem[3] [13] <= w_data_i[13];
  always @(posedge w_clk_i)
    if (_003_) \nz.mem[3] [14] <= w_data_i[14];
  always @(posedge w_clk_i)
    if (_003_) \nz.mem[3] [15] <= w_data_i[15];
  always @(posedge w_clk_i)
    if (_002_) \nz.mem[2] [0] <= w_data_i[0];
  always @(posedge w_clk_i)
    if (_002_) \nz.mem[2] [1] <= w_data_i[1];
  always @(posedge w_clk_i)
    if (_002_) \nz.mem[2] [2] <= w_data_i[2];
  always @(posedge w_clk_i)
    if (_002_) \nz.mem[2] [3] <= w_data_i[3];
  always @(posedge w_clk_i)
    if (_002_) \nz.mem[2] [4] <= w_data_i[4];
  always @(posedge w_clk_i)
    if (_002_) \nz.mem[2] [5] <= w_data_i[5];
  always @(posedge w_clk_i)
    if (_002_) \nz.mem[2] [6] <= w_data_i[6];
  always @(posedge w_clk_i)
    if (_002_) \nz.mem[2] [7] <= w_data_i[7];
  always @(posedge w_clk_i)
    if (_002_) \nz.mem[2] [8] <= w_data_i[8];
  always @(posedge w_clk_i)
    if (_002_) \nz.mem[2] [9] <= w_data_i[9];
  always @(posedge w_clk_i)
    if (_002_) \nz.mem[2] [10] <= w_data_i[10];
  always @(posedge w_clk_i)
    if (_002_) \nz.mem[2] [11] <= w_data_i[11];
  always @(posedge w_clk_i)
    if (_002_) \nz.mem[2] [12] <= w_data_i[12];
  always @(posedge w_clk_i)
    if (_002_) \nz.mem[2] [13] <= w_data_i[13];
  always @(posedge w_clk_i)
    if (_002_) \nz.mem[2] [14] <= w_data_i[14];
  always @(posedge w_clk_i)
    if (_002_) \nz.mem[2] [15] <= w_data_i[15];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [0] <= w_data_i[0];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [1] <= w_data_i[1];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [2] <= w_data_i[2];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [3] <= w_data_i[3];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [4] <= w_data_i[4];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [5] <= w_data_i[5];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [6] <= w_data_i[6];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [7] <= w_data_i[7];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [8] <= w_data_i[8];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [9] <= w_data_i[9];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [10] <= w_data_i[10];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [11] <= w_data_i[11];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [12] <= w_data_i[12];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [13] <= w_data_i[13];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [14] <= w_data_i[14];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [15] <= w_data_i[15];
  always @(posedge w_clk_i)
    if (_004_) \nz.mem[4] [0] <= w_data_i[0];
  always @(posedge w_clk_i)
    if (_004_) \nz.mem[4] [1] <= w_data_i[1];
  always @(posedge w_clk_i)
    if (_004_) \nz.mem[4] [2] <= w_data_i[2];
  always @(posedge w_clk_i)
    if (_004_) \nz.mem[4] [3] <= w_data_i[3];
  always @(posedge w_clk_i)
    if (_004_) \nz.mem[4] [4] <= w_data_i[4];
  always @(posedge w_clk_i)
    if (_004_) \nz.mem[4] [5] <= w_data_i[5];
  always @(posedge w_clk_i)
    if (_004_) \nz.mem[4] [6] <= w_data_i[6];
  always @(posedge w_clk_i)
    if (_004_) \nz.mem[4] [7] <= w_data_i[7];
  always @(posedge w_clk_i)
    if (_004_) \nz.mem[4] [8] <= w_data_i[8];
  always @(posedge w_clk_i)
    if (_004_) \nz.mem[4] [9] <= w_data_i[9];
  always @(posedge w_clk_i)
    if (_004_) \nz.mem[4] [10] <= w_data_i[10];
  always @(posedge w_clk_i)
    if (_004_) \nz.mem[4] [11] <= w_data_i[11];
  always @(posedge w_clk_i)
    if (_004_) \nz.mem[4] [12] <= w_data_i[12];
  always @(posedge w_clk_i)
    if (_004_) \nz.mem[4] [13] <= w_data_i[13];
  always @(posedge w_clk_i)
    if (_004_) \nz.mem[4] [14] <= w_data_i[14];
  always @(posedge w_clk_i)
    if (_004_) \nz.mem[4] [15] <= w_data_i[15];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [0] <= w_data_i[0];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [1] <= w_data_i[1];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [2] <= w_data_i[2];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [3] <= w_data_i[3];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [4] <= w_data_i[4];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [5] <= w_data_i[5];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [6] <= w_data_i[6];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [7] <= w_data_i[7];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [8] <= w_data_i[8];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [9] <= w_data_i[9];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [10] <= w_data_i[10];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [11] <= w_data_i[11];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [12] <= w_data_i[12];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [13] <= w_data_i[13];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [14] <= w_data_i[14];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [15] <= w_data_i[15];
  assign unused0 = w_reset_i;
  assign unused1 = r_v_i;
endmodule


module \$paramod$ca6b7bac468b18999d42d6fd3fbcdba927422191\bsg_fifo_tracker (clk_i, reset_i, enq_i, deq_i, wptr_r_o, rptr_r_o, rptr_n_o, full_o, empty_o);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  
  wire _05_;
  
  input clk_i;
  wire clk_i;
  
  input deq_i;
  wire deq_i;
  
  reg deq_r;
  
  wire empty;
  
  output empty_o;
  wire empty_o;
  
  input enq_i;
  wire enq_i;
  
  reg enq_r;
  
  wire full;
  
  output full_o;
  wire full_o;
  
  input reset_i;
  wire reset_i;
  
  wire [2:0] rptr_n;
  
  output [2:0] rptr_n_o;
  wire [2:0] rptr_n_o;
  
  wire [2:0] rptr_r;
  
  output [2:0] rptr_r_o;
  wire [2:0] rptr_r_o;
  
  wire [2:0] wptr_r;
  
  output [2:0] wptr_r_o;
  wire [2:0] wptr_r_o;
  assign _05_ = deq_i | enq_i;
  assign _00_ = wptr_r[0] ^ rptr_r[0];
  assign _01_ = wptr_r[1] ^ rptr_r[1];
  assign _02_ = _01_ | _00_;
  assign _03_ = wptr_r[2] ^ rptr_r[2];
  assign _04_ = _03_ | _02_;
  assign empty_o = deq_r & ~(_04_);
  assign full_o = enq_r & ~(_04_);
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) enq_r <= 1'h0;
    else if (_05_) enq_r <= enq_i;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) deq_r <= 1'h1;
    else if (_05_) deq_r <= deq_i;
  (* module_not_derived = 32'd1 *)
  
  \$paramod$390d00d447ff1ef7560f0b879c305a2abdc7f035\bsg_circular_ptr  rptr (
    .add_i(deq_i),
    .clk(clk_i),
    .n_o(rptr_n),
    .o(rptr_r),
    .reset_i(reset_i)
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod$390d00d447ff1ef7560f0b879c305a2abdc7f035\bsg_circular_ptr  wptr (
    .add_i(enq_i),
    .clk(clk_i),
    .o(wptr_r),
    .reset_i(reset_i)
  );
  assign empty = empty_o;
  assign full = full_o;
  assign rptr_n_o = rptr_n;
  assign rptr_r_o = rptr_r;
  assign wptr_r_o = wptr_r;
endmodule

(* top =  1  *)

module bsg_fifo_1r1w_small_credit_on_input(clk_i, reset_i, data_i, v_i, credit_o, v_o, data_o, yumi_i);
  
  input clk_i;
  wire clk_i;
  
  output credit_o;
  reg credit_o;
  
  input [15:0] data_i;
  wire [15:0] data_i;
  
  output [15:0] data_o;
  wire [15:0] data_o;
  
  (* unused_bits = "0" *)
  wire ready;
  
  input reset_i;
  wire reset_i;
  
  input v_i;
  wire v_i;
  
  output v_o;
  wire v_o;
  
  input yumi_i;
  wire yumi_i;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) credit_o <= 1'h0;
    else credit_o <= yumi_i;
  (* module_not_derived = 32'd1 *)
  
  \$paramod$16fe552a740d0761b1dc42d8b9c8041662581bd5\bsg_fifo_1r1w_small  fifo (
    .clk_i(clk_i),
    .data_i(data_i),
    .data_o(data_o),
    .ready_o(ready),
    .reset_i(reset_i),
    .v_i(v_i),
    .v_o(v_o),
    .yumi_i(yumi_i)
  );
endmodule

