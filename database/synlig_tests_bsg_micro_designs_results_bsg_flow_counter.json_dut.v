/* Generated by Yosys 0.27+9 (git sha1 101d19bb6, gcc 11.2.0-7ubuntu2 -fPIC -Os) */


module \$paramod$83e4d961211ed0ccf71001c6287a075d79dc360b\bsg_counter_up_down (clk_i, reset_i, up_i, down_i, count_o);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  (* force_downto = 32'd1 *)
  
  (* unused_bits = "1 2 3 4 5 6" *)
  wire [6:0] _31_;
  (* force_downto = 32'd1 *)
  
  wire [6:0] _32_;
  
  input clk_i;
  wire clk_i;
  
  output [6:0] count_o;
  reg [6:0] count_o;
  
  input down_i;
  wire down_i;
  
  input reset_i;
  wire reset_i;
  
  input up_i;
  wire up_i;
  assign _00_ = down_i & ~(count_o[0]);
  assign _01_ = _00_ ^ count_o[1];
  assign _02_ = ~up_i;
  assign _03_ = ~(down_i ^ count_o[0]);
  assign _04_ = _03_ | _02_;
  assign _32_[1] = ~(_04_ ^ _01_);
  assign _05_ = count_o[2] ^ count_o[1];
  assign _06_ = _00_ | count_o[1];
  assign _07_ = _01_ & ~(_04_);
  assign _08_ = _07_ | ~(_06_);
  assign _32_[2] = ~(_08_ ^ _05_);
  assign _09_ = count_o[2] ^ count_o[3];
  assign _10_ = count_o[2] | ~(count_o[1]);
  assign _11_ = _08_ & ~(_05_);
  assign _12_ = _10_ & ~(_11_);
  assign _32_[3] = _12_ ^ _09_;
  assign _13_ = count_o[3] ^ count_o[4];
  assign _14_ = count_o[3] | ~(count_o[2]);
  assign _15_ = ~(_10_ | _09_);
  assign _16_ = _14_ & ~(_15_);
  assign _17_ = _09_ | _05_;
  assign _18_ = _08_ & ~(_17_);
  assign _19_ = _16_ & ~(_18_);
  assign _32_[4] = _19_ ^ _13_;
  assign _20_ = count_o[4] ^ count_o[5];
  assign _21_ = count_o[4] | ~(count_o[3]);
  assign _22_ = ~(_19_ | _13_);
  assign _23_ = _21_ & ~(_22_);
  assign _32_[5] = _23_ ^ _20_;
  assign _24_ = count_o[5] ^ count_o[6];
  assign _25_ = count_o[5] | ~(count_o[4]);
  assign _26_ = ~(_21_ | _20_);
  assign _27_ = _25_ & ~(_26_);
  assign _28_ = _20_ | _13_;
  assign _29_ = ~(_28_ | _19_);
  assign _30_ = _27_ & ~(_29_);
  assign _32_[6] = _30_ ^ _24_;
  assign _31_[0] = _03_ ^ _02_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) count_o[0] <= 1'h0;
    else count_o[0] <= _31_[0];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) count_o[1] <= 1'h0;
    else count_o[1] <= _32_[1];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) count_o[2] <= 1'h0;
    else count_o[2] <= _32_[2];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) count_o[3] <= 1'h0;
    else count_o[3] <= _32_[3];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) count_o[4] <= 1'h0;
    else count_o[4] <= _32_[4];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) count_o[5] <= 1'h0;
    else count_o[5] <= _32_[5];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) count_o[6] <= 1'h0;
    else count_o[6] <= _32_[6];
  assign _32_[0] = _31_[0];
endmodule

(* top =  1  *)

module bsg_flow_counter(clk_i, reset_i, v_i, ready_i, yumi_i, count_o);
  
  input clk_i;
  wire clk_i;
  
  output [6:0] count_o;
  wire [6:0] count_o;
  
  wire enque;
  
  input ready_i;
  wire ready_i;
  
  input reset_i;
  wire reset_i;
  
  input v_i;
  wire v_i;
  
  input yumi_i;
  wire yumi_i;
  assign enque = ready_i & v_i;
  (* module_not_derived = 32'd1 *)
  
  \$paramod$83e4d961211ed0ccf71001c6287a075d79dc360b\bsg_counter_up_down  \gen_blk_0.counter  (
    .clk_i(clk_i),
    .count_o(count_o),
    .down_i(yumi_i),
    .reset_i(reset_i),
    .up_i(enque)
  );
endmodule

