/* Generated by Yosys 0.27+9 (git sha1 101d19bb6, gcc 11.2.0-7ubuntu2 -fPIC -Os) */


module \$paramod$178264a5165c1cd104ffa6bfd64842c34001f91b\bsg_two_fifo (clk_i, reset_i, ready_o, data_i, v_i, v_o, data_o, yumi_i);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  
  wire _07_;
  
  wire _08_;
  
  wire _09_;
  
  wire _10_;
  
  input clk_i;
  wire clk_i;
  
  input [15:0] data_i;
  wire [15:0] data_i;
  
  output [15:0] data_o;
  wire [15:0] data_o;
  
  wire deq_i;
  
  reg empty_r;
  
  wire enq_i;
  
  reg full_r;
  
  reg head_r;
  
  output ready_o;
  wire ready_o;
  
  input reset_i;
  wire reset_i;
  
  reg tail_r;
  
  input v_i;
  wire v_i;
  
  output v_o;
  wire v_o;
  
  input yumi_i;
  wire yumi_i;
  assign _07_ = ~tail_r;
  assign _08_ = ~head_r;
  assign enq_i = v_i & ~(full_r);
  assign v_o = ~empty_r;
  assign ready_o = ~full_r;
  assign _00_ = empty_r & ~(enq_i);
  assign _01_ = full_r | ~(v_i);
  assign _02_ = full_r | ~(yumi_i);
  assign _03_ = _01_ & ~(_02_);
  assign _10_ = _03_ | _00_;
  assign _04_ = v_o & ~(_01_);
  assign _05_ = _04_ & ~(yumi_i);
  assign _06_ = full_r & ~(yumi_i);
  assign _09_ = _06_ | _05_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) full_r <= 1'h0;
    else full_r <= _09_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) head_r <= 1'h0;
    else if (yumi_i) head_r <= _08_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) tail_r <= 1'h0;
    else if (enq_i) tail_r <= _07_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) empty_r <= 1'h1;
    else empty_r <= _10_;
  (* module_not_derived = 32'd1 *)
  
  \$paramod$3a18e26df69586b9660058508f39e2fbcd072454\bsg_mem_1r1w  mem_1r1w (
    .r_addr_i(head_r),
    .r_data_o(data_o),
    .r_v_i(v_o),
    .w_addr_i(tail_r),
    .w_clk_i(clk_i),
    .w_data_i(data_i),
    .w_reset_i(reset_i),
    .w_v_i(enq_i)
  );
  assign deq_i = yumi_i;
endmodule


module \$paramod$3a18e26df69586b9660058508f39e2fbcd072454\bsg_mem_1r1w (w_clk_i, w_reset_i, w_v_i, w_addr_i, w_data_i, r_v_i, r_addr_i, r_data_o);
  
  input r_addr_i;
  wire r_addr_i;
  
  output [15:0] r_data_o;
  wire [15:0] r_data_o;
  
  input r_v_i;
  wire r_v_i;
  
  input w_addr_i;
  wire w_addr_i;
  
  input w_clk_i;
  wire w_clk_i;
  
  input [15:0] w_data_i;
  wire [15:0] w_data_i;
  
  input w_reset_i;
  wire w_reset_i;
  
  input w_v_i;
  wire w_v_i;
  (* module_not_derived = 32'd1 *)
  
  \$paramod$e79b8c4e6409b809f38f3196ee2cb80d3fcb268c\bsg_mem_1r1w_synth  synth (
    .r_addr_i(r_addr_i),
    .r_data_o(r_data_o),
    .r_v_i(r_v_i),
    .w_addr_i(w_addr_i),
    .w_clk_i(w_clk_i),
    .w_data_i(w_data_i),
    .w_reset_i(w_reset_i),
    .w_v_i(w_v_i)
  );
endmodule


module \$paramod$e79b8c4e6409b809f38f3196ee2cb80d3fcb268c\bsg_mem_1r1w_synth (w_clk_i, w_reset_i, w_v_i, w_addr_i, w_data_i, r_v_i, r_addr_i, r_data_o);
  wire _00_;
  wire _01_;
  reg [15:0] \nz.mem[0] ;
  reg [15:0] \nz.mem[1] ;
  
  input r_addr_i;
  wire r_addr_i;
  
  output [15:0] r_data_o;
  wire [15:0] r_data_o;
  
  input r_v_i;
  wire r_v_i;
  
  (* unused_bits = "0" *)
  wire unused0;
  
  (* unused_bits = "0" *)
  wire unused1;
  
  input w_addr_i;
  wire w_addr_i;
  
  input w_clk_i;
  wire w_clk_i;
  
  input [15:0] w_data_i;
  wire [15:0] w_data_i;
  
  input w_reset_i;
  wire w_reset_i;
  
  input w_v_i;
  wire w_v_i;
  assign r_data_o[0] = r_addr_i ? \nz.mem[1] [0] : \nz.mem[0] [0];
  assign r_data_o[1] = r_addr_i ? \nz.mem[1] [1] : \nz.mem[0] [1];
  assign r_data_o[2] = r_addr_i ? \nz.mem[1] [2] : \nz.mem[0] [2];
  assign r_data_o[3] = r_addr_i ? \nz.mem[1] [3] : \nz.mem[0] [3];
  assign r_data_o[4] = r_addr_i ? \nz.mem[1] [4] : \nz.mem[0] [4];
  assign r_data_o[5] = r_addr_i ? \nz.mem[1] [5] : \nz.mem[0] [5];
  assign r_data_o[6] = r_addr_i ? \nz.mem[1] [6] : \nz.mem[0] [6];
  assign r_data_o[7] = r_addr_i ? \nz.mem[1] [7] : \nz.mem[0] [7];
  assign r_data_o[8] = r_addr_i ? \nz.mem[1] [8] : \nz.mem[0] [8];
  assign r_data_o[9] = r_addr_i ? \nz.mem[1] [9] : \nz.mem[0] [9];
  assign r_data_o[10] = r_addr_i ? \nz.mem[1] [10] : \nz.mem[0] [10];
  assign r_data_o[11] = r_addr_i ? \nz.mem[1] [11] : \nz.mem[0] [11];
  assign r_data_o[12] = r_addr_i ? \nz.mem[1] [12] : \nz.mem[0] [12];
  assign r_data_o[13] = r_addr_i ? \nz.mem[1] [13] : \nz.mem[0] [13];
  assign r_data_o[14] = r_addr_i ? \nz.mem[1] [14] : \nz.mem[0] [14];
  assign r_data_o[15] = r_addr_i ? \nz.mem[1] [15] : \nz.mem[0] [15];
  assign _00_ = w_v_i & ~(w_addr_i);
  assign _01_ = w_v_i & w_addr_i;
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [0] <= w_data_i[0];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [1] <= w_data_i[1];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [2] <= w_data_i[2];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [3] <= w_data_i[3];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [4] <= w_data_i[4];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [5] <= w_data_i[5];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [6] <= w_data_i[6];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [7] <= w_data_i[7];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [8] <= w_data_i[8];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [9] <= w_data_i[9];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [10] <= w_data_i[10];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [11] <= w_data_i[11];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [12] <= w_data_i[12];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [13] <= w_data_i[13];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [14] <= w_data_i[14];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [15] <= w_data_i[15];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [0] <= w_data_i[0];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [1] <= w_data_i[1];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [2] <= w_data_i[2];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [3] <= w_data_i[3];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [4] <= w_data_i[4];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [5] <= w_data_i[5];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [6] <= w_data_i[6];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [7] <= w_data_i[7];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [8] <= w_data_i[8];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [9] <= w_data_i[9];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [10] <= w_data_i[10];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [11] <= w_data_i[11];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [12] <= w_data_i[12];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [13] <= w_data_i[13];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [14] <= w_data_i[14];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [15] <= w_data_i[15];
  assign unused0 = w_reset_i;
  assign unused1 = r_v_i;
endmodule

(* top =  1  *)

module bsg_front_side_bus_hop_out(clk_i, reset_i, v_i, data_i, ready_o, yumi_o, v_o, data_o, ready_i);
  
  wire _00_;
  
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  
  wire _05_;
  (* force_downto = 32'd1 *)
  
  wire [15:0] _06_;
  
  input clk_i;
  wire clk_i;
  
  input [31:0] data_i;
  wire [31:0] data_i;
  
  output [15:0] data_o;
  wire [15:0] data_o;
  
  wire fifo_ready;
  
  wire fifo_v;
  
  input ready_i;
  wire ready_i;
  
  output ready_o;
  wire ready_o;
  
  input reset_i;
  wire reset_i;
  
  reg v1_blocked_r;
  
  input [1:0] v_i;
  wire [1:0] v_i;
  
  output v_o;
  wire v_o;
  
  output yumi_o;
  wire yumi_o;
  
  wire yumi_o_tmp;
  assign _05_ = v_i[1] | v_i[0];
  assign _02_ = v_i[0] & ~(v1_blocked_r);
  assign _06_[0] = _02_ ? data_i[0] : data_i[16];
  assign _06_[1] = _02_ ? data_i[1] : data_i[17];
  assign _06_[2] = _02_ ? data_i[2] : data_i[18];
  assign _06_[3] = _02_ ? data_i[3] : data_i[19];
  assign _06_[4] = _02_ ? data_i[4] : data_i[20];
  assign _06_[5] = _02_ ? data_i[5] : data_i[21];
  assign _06_[6] = _02_ ? data_i[6] : data_i[22];
  assign _06_[7] = _02_ ? data_i[7] : data_i[23];
  assign _06_[8] = _02_ ? data_i[8] : data_i[24];
  assign _06_[9] = _02_ ? data_i[9] : data_i[25];
  assign _06_[10] = _02_ ? data_i[10] : data_i[26];
  assign _06_[11] = _02_ ? data_i[11] : data_i[27];
  assign _06_[12] = _02_ ? data_i[12] : data_i[28];
  assign _06_[13] = _02_ ? data_i[13] : data_i[29];
  assign _06_[14] = _02_ ? data_i[14] : data_i[30];
  assign _06_[15] = _02_ ? data_i[15] : data_i[31];
  assign _01_ = ready_i & fifo_v;
  assign _03_ = v1_blocked_r | ~(v_i[0]);
  assign _04_ = ~(fifo_ready & v_i[1]);
  assign yumi_o = _03_ & ~(_04_);
  assign ready_o = fifo_ready & ~(v1_blocked_r);
  assign _00_ = v_i[1] & ~(_03_);
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) v1_blocked_r <= 1'h0;
    else if (fifo_ready) v1_blocked_r <= _00_;
  (* module_not_derived = 32'd1 *)
  
  \$paramod$178264a5165c1cd104ffa6bfd64842c34001f91b\bsg_two_fifo  fifo (
    .clk_i(clk_i),
    .data_i(_06_),
    .data_o(data_o),
    .ready_o(fifo_ready),
    .reset_i(reset_i),
    .v_i(_05_),
    .v_o(fifo_v),
    .yumi_i(_01_)
  );
  assign v_o = fifo_v;
  assign yumi_o_tmp = yumi_o;
endmodule

