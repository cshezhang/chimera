/* Generated by Yosys 0.27+9 (git sha1 101d19bb6, gcc 11.2.0-7ubuntu2 -fPIC -Os) */


module \$paramod$178264a5165c1cd104ffa6bfd64842c34001f91b\bsg_two_fifo (clk_i, reset_i, ready_o, data_i, v_i, v_o, data_o, yumi_i);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  
  wire _07_;
  
  wire _08_;
  
  wire _09_;
  
  wire _10_;
  
  input clk_i;
  wire clk_i;
  
  input [15:0] data_i;
  wire [15:0] data_i;
  
  output [15:0] data_o;
  wire [15:0] data_o;
  
  wire deq_i;
  
  reg empty_r;
  
  wire enq_i;
  
  reg full_r;
  
  reg head_r;
  
  output ready_o;
  wire ready_o;
  
  input reset_i;
  wire reset_i;
  
  reg tail_r;
  
  input v_i;
  wire v_i;
  
  output v_o;
  wire v_o;
  
  input yumi_i;
  wire yumi_i;
  assign _07_ = ~tail_r;
  assign _08_ = ~head_r;
  assign enq_i = v_i & ~(full_r);
  assign v_o = ~empty_r;
  assign ready_o = ~full_r;
  assign _00_ = empty_r & ~(enq_i);
  assign _01_ = full_r | ~(v_i);
  assign _02_ = full_r | ~(yumi_i);
  assign _03_ = _01_ & ~(_02_);
  assign _10_ = _03_ | _00_;
  assign _04_ = v_o & ~(_01_);
  assign _05_ = _04_ & ~(yumi_i);
  assign _06_ = full_r & ~(yumi_i);
  assign _09_ = _06_ | _05_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) full_r <= 1'h0;
    else full_r <= _09_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) head_r <= 1'h0;
    else if (yumi_i) head_r <= _08_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) tail_r <= 1'h0;
    else if (enq_i) tail_r <= _07_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) empty_r <= 1'h1;
    else empty_r <= _10_;
  (* module_not_derived = 32'd1 *)
  
  \$paramod$3a18e26df69586b9660058508f39e2fbcd072454\bsg_mem_1r1w  mem_1r1w (
    .r_addr_i(head_r),
    .r_data_o(data_o),
    .r_v_i(v_o),
    .w_addr_i(tail_r),
    .w_clk_i(clk_i),
    .w_data_i(data_i),
    .w_reset_i(reset_i),
    .w_v_i(enq_i)
  );
  assign deq_i = yumi_i;
endmodule


module \$paramod$3a18e26df69586b9660058508f39e2fbcd072454\bsg_mem_1r1w (w_clk_i, w_reset_i, w_v_i, w_addr_i, w_data_i, r_v_i, r_addr_i, r_data_o);
  
  input r_addr_i;
  wire r_addr_i;
  
  output [15:0] r_data_o;
  wire [15:0] r_data_o;
  
  input r_v_i;
  wire r_v_i;
  
  input w_addr_i;
  wire w_addr_i;
  
  input w_clk_i;
  wire w_clk_i;
  
  input [15:0] w_data_i;
  wire [15:0] w_data_i;
  
  input w_reset_i;
  wire w_reset_i;
  
  input w_v_i;
  wire w_v_i;
  (* module_not_derived = 32'd1 *)
  
  \$paramod$e79b8c4e6409b809f38f3196ee2cb80d3fcb268c\bsg_mem_1r1w_synth  synth (
    .r_addr_i(r_addr_i),
    .r_data_o(r_data_o),
    .r_v_i(r_v_i),
    .w_addr_i(w_addr_i),
    .w_clk_i(w_clk_i),
    .w_data_i(w_data_i),
    .w_reset_i(w_reset_i),
    .w_v_i(w_v_i)
  );
endmodule


module \$paramod$5e3b6b930a4c239efd2933105bf0b0ce107a0de4\bsg_fsb_murn_gateway (clk_i, reset_i, v_i, data_i, ready_o, v_o, ready_i, node_en_r_o, node_reset_r_o);
  
  wire _00_;
  
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  
  input clk_i;
  wire clk_i;
  
  input [15:0] data_i;
  wire [15:0] data_i;
  
  (* unused_bits = "0 1 2 3 4" *)
  (* wiretype = "\\bsg_fsb_pkt_s" *)
  wire [15:0] \genblk1.data_RPT ;
  
  reg \genblk1.node_en_r ;
  
  reg \genblk1.node_reset_r ;
  
  output node_en_r_o;
  wire node_en_r_o;
  
  output node_reset_r_o;
  wire node_reset_r_o;
  
  input ready_i;
  wire ready_i;
  
  output ready_o;
  wire ready_o;
  
  input reset_i;
  wire reset_i;
  
  input v_i;
  wire v_i;
  
  output v_o;
  wire v_o;
  assign _04_ = data_i[14] | ~(data_i[13]);
  assign _05_ = ~(_04_ | data_i[15]);
  assign _06_ = ~(_05_ & v_i);
  assign _07_ = data_i[12] & ~(_06_);
  assign _08_ = data_i[6] | ~(data_i[5]);
  assign _09_ = data_i[8] | data_i[7];
  assign _10_ = ~(_09_ | _08_);
  assign _11_ = data_i[10] | data_i[9];
  assign _12_ = ~(_11_ | data_i[11]);
  assign _00_ = ~(_12_ & _10_);
  assign _13_ = data_i[5] | ~(data_i[6]);
  assign _14_ = _13_ | _09_;
  assign _15_ = _12_ & ~(_14_);
  assign _16_ = _00_ & ~(_15_);
  assign _02_ = _07_ & ~(_16_);
  assign _17_ = data_i[8] | ~(data_i[7]);
  assign _18_ = ~(_17_ | _13_);
  assign _01_ = ~(_18_ & _12_);
  assign _19_ = _17_ | _08_;
  assign _20_ = _12_ & ~(_19_);
  assign _21_ = _01_ & ~(_20_);
  assign _03_ = _07_ & ~(_21_);
  assign _22_ = _06_ | ~(\genblk1.node_en_r );
  assign v_o = ~(_22_ | _07_);
  assign _23_ = ready_i | ~(\genblk1.node_en_r );
  assign _24_ = _23_ | _07_;
  assign _25_ = ~(_24_ | _06_);
  assign ready_o = v_i & ~(_25_);
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) \genblk1.node_reset_r  <= 1'h1;
    else if (_03_) \genblk1.node_reset_r  <= _01_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) \genblk1.node_en_r  <= 1'h0;
    else if (_02_) \genblk1.node_en_r  <= _00_;
  assign \genblk1.data_RPT  = data_i;
  assign node_en_r_o = \genblk1.node_en_r ;
  assign node_reset_r_o = \genblk1.node_reset_r ;
endmodule


module \$paramod$658aaac34f99529332d962d60914cd52b27809eb\bsg_fsb_murn_gateway (clk_i, reset_i, v_i, data_i, ready_o, v_o, ready_i, node_en_r_o, node_reset_r_o);
  
  wire _00_;
  
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  
  input clk_i;
  wire clk_i;
  
  input [15:0] data_i;
  wire [15:0] data_i;
  
  (* unused_bits = "0 1 2 3 4" *)
  (* wiretype = "\\bsg_fsb_pkt_s" *)
  wire [15:0] \genblk1.data_RPT ;
  
  reg \genblk1.node_en_r ;
  
  reg \genblk1.node_reset_r ;
  
  output node_en_r_o;
  wire node_en_r_o;
  
  output node_reset_r_o;
  wire node_reset_r_o;
  
  input ready_i;
  wire ready_i;
  
  output ready_o;
  wire ready_o;
  
  input reset_i;
  wire reset_i;
  
  input v_i;
  wire v_i;
  
  output v_o;
  wire v_o;
  assign _04_ = data_i[13] | ~(data_i[14]);
  assign _05_ = ~(_04_ | data_i[15]);
  assign _06_ = ~(_05_ & v_i);
  assign _07_ = data_i[12] & ~(_06_);
  assign _08_ = data_i[6] | ~(data_i[5]);
  assign _09_ = data_i[8] | data_i[7];
  assign _10_ = ~(_09_ | _08_);
  assign _11_ = data_i[10] | data_i[9];
  assign _12_ = ~(_11_ | data_i[11]);
  assign _00_ = ~(_12_ & _10_);
  assign _13_ = data_i[5] | ~(data_i[6]);
  assign _14_ = _13_ | _09_;
  assign _15_ = _12_ & ~(_14_);
  assign _16_ = _00_ & ~(_15_);
  assign _02_ = _07_ & ~(_16_);
  assign _17_ = data_i[8] | ~(data_i[7]);
  assign _18_ = ~(_17_ | _13_);
  assign _01_ = ~(_18_ & _12_);
  assign _19_ = _17_ | _08_;
  assign _20_ = _12_ & ~(_19_);
  assign _21_ = _01_ & ~(_20_);
  assign _03_ = _07_ & ~(_21_);
  assign _22_ = _06_ | ~(\genblk1.node_en_r );
  assign v_o = ~(_22_ | _07_);
  assign _23_ = ready_i | ~(\genblk1.node_en_r );
  assign _24_ = _23_ | _07_;
  assign _25_ = ~(_24_ | _06_);
  assign ready_o = v_i & ~(_25_);
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) \genblk1.node_reset_r  <= 1'h1;
    else if (_03_) \genblk1.node_reset_r  <= _01_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) \genblk1.node_en_r  <= 1'h0;
    else if (_02_) \genblk1.node_en_r  <= _00_;
  assign \genblk1.data_RPT  = data_i;
  assign node_en_r_o = \genblk1.node_en_r ;
  assign node_reset_r_o = \genblk1.node_reset_r ;
endmodule


module \$paramod$75994d82c3f9cb6aebaa638ad397ecf933b5e08b\bsg_fsb_murn_gateway (clk_i, reset_i, v_i, data_i, ready_o, v_o, ready_i, node_en_r_o, node_reset_r_o);
  
  wire _00_;
  
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  
  input clk_i;
  wire clk_i;
  
  input [15:0] data_i;
  wire [15:0] data_i;
  
  (* unused_bits = "0 1 2 3 4" *)
  (* wiretype = "\\bsg_fsb_pkt_s" *)
  wire [15:0] \genblk1.data_RPT ;
  
  reg \genblk1.node_en_r ;
  
  reg \genblk1.node_reset_r ;
  
  output node_en_r_o;
  wire node_en_r_o;
  
  output node_reset_r_o;
  wire node_reset_r_o;
  
  input ready_i;
  wire ready_i;
  
  output ready_o;
  wire ready_o;
  
  input reset_i;
  wire reset_i;
  
  input v_i;
  wire v_i;
  
  output v_o;
  wire v_o;
  assign _04_ = ~(data_i[14] & data_i[13]);
  assign _05_ = ~(_04_ | data_i[15]);
  assign _06_ = ~(_05_ & v_i);
  assign _07_ = data_i[12] & ~(_06_);
  assign _08_ = data_i[5] | ~(data_i[6]);
  assign _09_ = data_i[8] | ~(data_i[7]);
  assign _10_ = ~(_09_ | _08_);
  assign _11_ = data_i[10] | data_i[9];
  assign _12_ = ~(_11_ | data_i[11]);
  assign _01_ = ~(_12_ & _10_);
  assign _13_ = data_i[6] | ~(data_i[5]);
  assign _14_ = _13_ | _09_;
  assign _15_ = _12_ & ~(_14_);
  assign _16_ = _01_ & ~(_15_);
  assign _03_ = _07_ & ~(_16_);
  assign _17_ = data_i[8] | data_i[7];
  assign _18_ = ~(_17_ | _13_);
  assign _00_ = ~(_18_ & _12_);
  assign _19_ = _17_ | _08_;
  assign _20_ = _12_ & ~(_19_);
  assign _21_ = _00_ & ~(_20_);
  assign _02_ = _07_ & ~(_21_);
  assign _22_ = _06_ | ~(\genblk1.node_en_r );
  assign v_o = ~(_22_ | _07_);
  assign _23_ = ready_i | ~(\genblk1.node_en_r );
  assign _24_ = _23_ | _07_;
  assign _25_ = ~(_24_ | _06_);
  assign ready_o = v_i & ~(_25_);
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) \genblk1.node_reset_r  <= 1'h1;
    else if (_03_) \genblk1.node_reset_r  <= _01_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) \genblk1.node_en_r  <= 1'h0;
    else if (_02_) \genblk1.node_en_r  <= _00_;
  assign \genblk1.data_RPT  = data_i;
  assign node_en_r_o = \genblk1.node_en_r ;
  assign node_reset_r_o = \genblk1.node_reset_r ;
endmodule


module \$paramod$7808f95e1e5760275829fb317f2e198ef1eab1ca\bsg_fsb_murn_gateway (clk_i, reset_i, v_i, data_i, ready_o, v_o, ready_i, node_en_r_o, node_reset_r_o);
  
  wire _00_;
  
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  
  input clk_i;
  wire clk_i;
  
  input [15:0] data_i;
  wire [15:0] data_i;
  
  (* unused_bits = "0 1 2 3 4" *)
  (* wiretype = "\\bsg_fsb_pkt_s" *)
  wire [15:0] \genblk1.data_RPT ;
  
  reg \genblk1.node_en_r ;
  
  reg \genblk1.node_reset_r ;
  
  output node_en_r_o;
  wire node_en_r_o;
  
  output node_reset_r_o;
  wire node_reset_r_o;
  
  input ready_i;
  wire ready_i;
  
  output ready_o;
  wire ready_o;
  
  input reset_i;
  wire reset_i;
  
  input v_i;
  wire v_i;
  
  output v_o;
  wire v_o;
  assign _04_ = ~(data_i[14] | data_i[13]);
  assign _05_ = _04_ & data_i[15];
  assign _06_ = ~(_05_ & v_i);
  assign _07_ = data_i[12] & ~(_06_);
  assign _08_ = data_i[6] | ~(data_i[5]);
  assign _09_ = data_i[8] | data_i[7];
  assign _10_ = ~(_09_ | _08_);
  assign _11_ = data_i[10] | data_i[9];
  assign _12_ = ~(_11_ | data_i[11]);
  assign _00_ = ~(_12_ & _10_);
  assign _13_ = data_i[5] | ~(data_i[6]);
  assign _14_ = _13_ | _09_;
  assign _15_ = _12_ & ~(_14_);
  assign _16_ = _00_ & ~(_15_);
  assign _02_ = _07_ & ~(_16_);
  assign _17_ = data_i[8] | ~(data_i[7]);
  assign _18_ = ~(_17_ | _13_);
  assign _01_ = ~(_18_ & _12_);
  assign _19_ = _17_ | _08_;
  assign _20_ = _12_ & ~(_19_);
  assign _21_ = _01_ & ~(_20_);
  assign _03_ = _07_ & ~(_21_);
  assign _22_ = _06_ | ~(\genblk1.node_en_r );
  assign v_o = ~(_22_ | _07_);
  assign _23_ = ready_i | ~(\genblk1.node_en_r );
  assign _24_ = _23_ | _07_;
  assign _25_ = ~(_24_ | _06_);
  assign ready_o = v_i & ~(_25_);
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) \genblk1.node_reset_r  <= 1'h1;
    else if (_03_) \genblk1.node_reset_r  <= _01_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) \genblk1.node_en_r  <= 1'h0;
    else if (_02_) \genblk1.node_en_r  <= _00_;
  assign \genblk1.data_RPT  = data_i;
  assign node_en_r_o = \genblk1.node_en_r ;
  assign node_reset_r_o = \genblk1.node_reset_r ;
endmodule


module \$paramod$e79b8c4e6409b809f38f3196ee2cb80d3fcb268c\bsg_mem_1r1w_synth (w_clk_i, w_reset_i, w_v_i, w_addr_i, w_data_i, r_v_i, r_addr_i, r_data_o);
  wire _00_;
  wire _01_;
  reg [15:0] \nz.mem[0] ;
  reg [15:0] \nz.mem[1] ;
  
  input r_addr_i;
  wire r_addr_i;
  
  output [15:0] r_data_o;
  wire [15:0] r_data_o;
  
  input r_v_i;
  wire r_v_i;
  
  (* unused_bits = "0" *)
  wire unused0;
  
  (* unused_bits = "0" *)
  wire unused1;
  
  input w_addr_i;
  wire w_addr_i;
  
  input w_clk_i;
  wire w_clk_i;
  
  input [15:0] w_data_i;
  wire [15:0] w_data_i;
  
  input w_reset_i;
  wire w_reset_i;
  
  input w_v_i;
  wire w_v_i;
  assign r_data_o[0] = r_addr_i ? \nz.mem[1] [0] : \nz.mem[0] [0];
  assign r_data_o[1] = r_addr_i ? \nz.mem[1] [1] : \nz.mem[0] [1];
  assign r_data_o[2] = r_addr_i ? \nz.mem[1] [2] : \nz.mem[0] [2];
  assign r_data_o[3] = r_addr_i ? \nz.mem[1] [3] : \nz.mem[0] [3];
  assign r_data_o[4] = r_addr_i ? \nz.mem[1] [4] : \nz.mem[0] [4];
  assign r_data_o[5] = r_addr_i ? \nz.mem[1] [5] : \nz.mem[0] [5];
  assign r_data_o[6] = r_addr_i ? \nz.mem[1] [6] : \nz.mem[0] [6];
  assign r_data_o[7] = r_addr_i ? \nz.mem[1] [7] : \nz.mem[0] [7];
  assign r_data_o[8] = r_addr_i ? \nz.mem[1] [8] : \nz.mem[0] [8];
  assign r_data_o[9] = r_addr_i ? \nz.mem[1] [9] : \nz.mem[0] [9];
  assign r_data_o[10] = r_addr_i ? \nz.mem[1] [10] : \nz.mem[0] [10];
  assign r_data_o[11] = r_addr_i ? \nz.mem[1] [11] : \nz.mem[0] [11];
  assign r_data_o[12] = r_addr_i ? \nz.mem[1] [12] : \nz.mem[0] [12];
  assign r_data_o[13] = r_addr_i ? \nz.mem[1] [13] : \nz.mem[0] [13];
  assign r_data_o[14] = r_addr_i ? \nz.mem[1] [14] : \nz.mem[0] [14];
  assign r_data_o[15] = r_addr_i ? \nz.mem[1] [15] : \nz.mem[0] [15];
  assign _01_ = w_v_i & w_addr_i;
  assign _00_ = w_v_i & ~(w_addr_i);
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [0] <= w_data_i[0];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [1] <= w_data_i[1];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [2] <= w_data_i[2];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [3] <= w_data_i[3];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [4] <= w_data_i[4];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [5] <= w_data_i[5];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [6] <= w_data_i[6];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [7] <= w_data_i[7];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [8] <= w_data_i[8];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [9] <= w_data_i[9];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [10] <= w_data_i[10];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [11] <= w_data_i[11];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [12] <= w_data_i[12];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [13] <= w_data_i[13];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [14] <= w_data_i[14];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [15] <= w_data_i[15];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [0] <= w_data_i[0];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [1] <= w_data_i[1];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [2] <= w_data_i[2];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [3] <= w_data_i[3];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [4] <= w_data_i[4];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [5] <= w_data_i[5];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [6] <= w_data_i[6];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [7] <= w_data_i[7];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [8] <= w_data_i[8];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [9] <= w_data_i[9];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [10] <= w_data_i[10];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [11] <= w_data_i[11];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [12] <= w_data_i[12];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [13] <= w_data_i[13];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [14] <= w_data_i[14];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [15] <= w_data_i[15];
  assign unused0 = w_reset_i;
  assign unused1 = r_v_i;
endmodule


module \$paramod$ece035e37d659a27b3ae92c00d990dce7e0a44d1\bsg_fsb_murn_gateway (clk_i, reset_i, v_i, data_i, ready_o, v_o, ready_i, node_en_r_o, node_reset_r_o);
  
  wire _00_;
  
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  
  input clk_i;
  wire clk_i;
  
  input [15:0] data_i;
  wire [15:0] data_i;
  
  (* unused_bits = "0 1 2 3 4" *)
  (* wiretype = "\\bsg_fsb_pkt_s" *)
  wire [15:0] \genblk1.data_RPT ;
  
  reg \genblk1.node_en_r ;
  
  reg \genblk1.node_reset_r ;
  
  output node_en_r_o;
  wire node_en_r_o;
  
  output node_reset_r_o;
  wire node_reset_r_o;
  
  input ready_i;
  wire ready_i;
  
  output ready_o;
  wire ready_o;
  
  input reset_i;
  wire reset_i;
  
  input v_i;
  wire v_i;
  
  output v_o;
  wire v_o;
  assign _04_ = data_i[14] | data_i[13];
  assign _05_ = ~(_04_ | data_i[15]);
  assign _06_ = ~(_05_ & v_i);
  assign _07_ = data_i[12] & ~(_06_);
  assign _08_ = data_i[5] | ~(data_i[6]);
  assign _09_ = data_i[8] | ~(data_i[7]);
  assign _10_ = ~(_09_ | _08_);
  assign _11_ = data_i[10] | data_i[9];
  assign _12_ = ~(_11_ | data_i[11]);
  assign _01_ = ~(_12_ & _10_);
  assign _13_ = data_i[6] | ~(data_i[5]);
  assign _14_ = _13_ | _09_;
  assign _15_ = _12_ & ~(_14_);
  assign _16_ = _01_ & ~(_15_);
  assign _03_ = _07_ & ~(_16_);
  assign _17_ = data_i[8] | data_i[7];
  assign _18_ = ~(_17_ | _13_);
  assign _00_ = ~(_18_ & _12_);
  assign _19_ = _17_ | _08_;
  assign _20_ = _12_ & ~(_19_);
  assign _21_ = _00_ & ~(_20_);
  assign _02_ = _07_ & ~(_21_);
  assign _22_ = _06_ | ~(\genblk1.node_en_r );
  assign v_o = ~(_22_ | _07_);
  assign _23_ = ready_i | ~(\genblk1.node_en_r );
  assign _24_ = _23_ | _07_;
  assign _25_ = ~(_24_ | _06_);
  assign ready_o = v_i & ~(_25_);
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) \genblk1.node_reset_r  <= 1'h1;
    else if (_03_) \genblk1.node_reset_r  <= _01_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) \genblk1.node_en_r  <= 1'h0;
    else if (_02_) \genblk1.node_en_r  <= _00_;
  assign \genblk1.data_RPT  = data_i;
  assign node_en_r_o = \genblk1.node_en_r ;
  assign node_reset_r_o = \genblk1.node_reset_r ;
endmodule


module \$paramod$f5e36c6752400e36adc9c665db601cb525a1a030\bsg_front_side_bus_hop_in (clk_i, reset_i, ready_o, v_i, data_i, v_o, data_o, ready_i);
  
  wire _00_;
  
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  
  input clk_i;
  wire clk_i;
  
  input [15:0] data_i;
  wire [15:0] data_i;
  
  output [31:0] data_o;
  wire [31:0] data_o;
  
  wire [15:0] data_o_tmp;
  
  wire fifo_v;
  
  wire fifo_yumi;
  
  input [1:0] ready_i;
  wire [1:0] ready_i;
  
  output ready_o;
  wire ready_o;
  
  input reset_i;
  wire reset_i;
  
  reg [1:0] sent_r;
  
  input v_i;
  wire v_i;
  
  output [1:0] v_o;
  wire [1:0] v_o;
  
  wire [1:0] v_o_tmp;
  assign v_o[0] = fifo_v & ~(sent_r[0]);
  assign _02_ = v_o[0] & ready_i[0];
  assign _03_ = _02_ | sent_r[0];
  assign v_o[1] = fifo_v & ~(sent_r[1]);
  assign _04_ = ~(v_o[1] & ready_i[1]);
  assign _05_ = _04_ & ~(sent_r[1]);
  assign fifo_yumi = _03_ & ~(_05_);
  assign _00_ = _05_ & _03_;
  assign _01_ = ~(_05_ | _03_);
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) sent_r[1] <= 1'h0;
    else sent_r[1] <= _01_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) sent_r[0] <= 1'h0;
    else sent_r[0] <= _00_;
  (* module_not_derived = 32'd1 *)
  
  \$paramod$178264a5165c1cd104ffa6bfd64842c34001f91b\bsg_two_fifo  fifo (
    .clk_i(clk_i),
    .data_i(data_i),
    .data_o(data_o_tmp),
    .ready_o(ready_o),
    .reset_i(reset_i),
    .v_i(v_i),
    .v_o(fifo_v),
    .yumi_i(fifo_yumi)
  );
  assign data_o = { data_o_tmp, data_o_tmp };
  assign v_o_tmp = v_o;
endmodule


module \$paramod\bsg_front_side_bus_hop_out\width_p=s32'00000000000000000000000000010000 (clk_i, reset_i, v_i, data_i, ready_o, yumi_o, v_o, data_o, ready_i);
  
  wire _00_;
  
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  
  wire _05_;
  (* force_downto = 32'd1 *)
  
  wire [15:0] _06_;
  
  input clk_i;
  wire clk_i;
  
  input [31:0] data_i;
  wire [31:0] data_i;
  
  output [15:0] data_o;
  wire [15:0] data_o;
  
  wire fifo_ready;
  
  wire fifo_v;
  
  input ready_i;
  wire ready_i;
  
  output ready_o;
  wire ready_o;
  
  input reset_i;
  wire reset_i;
  
  reg v1_blocked_r;
  
  input [1:0] v_i;
  wire [1:0] v_i;
  
  output v_o;
  wire v_o;
  
  output yumi_o;
  wire yumi_o;
  
  wire yumi_o_tmp;
  assign _05_ = v_i[1] | v_i[0];
  assign _02_ = v_i[0] & ~(v1_blocked_r);
  assign _06_[0] = _02_ ? data_i[0] : data_i[16];
  assign _06_[1] = _02_ ? data_i[1] : data_i[17];
  assign _06_[2] = _02_ ? data_i[2] : data_i[18];
  assign _06_[3] = _02_ ? data_i[3] : data_i[19];
  assign _06_[4] = _02_ ? data_i[4] : data_i[20];
  assign _06_[5] = _02_ ? data_i[5] : data_i[21];
  assign _06_[6] = _02_ ? data_i[6] : data_i[22];
  assign _06_[7] = _02_ ? data_i[7] : data_i[23];
  assign _06_[8] = _02_ ? data_i[8] : data_i[24];
  assign _06_[9] = _02_ ? data_i[9] : data_i[25];
  assign _06_[10] = _02_ ? data_i[10] : data_i[26];
  assign _06_[11] = _02_ ? data_i[11] : data_i[27];
  assign _06_[12] = _02_ ? data_i[12] : data_i[28];
  assign _06_[13] = _02_ ? data_i[13] : data_i[29];
  assign _06_[14] = _02_ ? data_i[14] : data_i[30];
  assign _06_[15] = _02_ ? data_i[15] : data_i[31];
  assign _03_ = v1_blocked_r | ~(v_i[0]);
  assign _00_ = v_i[1] & ~(_03_);
  assign _01_ = ready_i & fifo_v;
  assign _04_ = ~(fifo_ready & v_i[1]);
  assign yumi_o = _03_ & ~(_04_);
  assign ready_o = fifo_ready & ~(v1_blocked_r);
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) v1_blocked_r <= 1'h0;
    else if (fifo_ready) v1_blocked_r <= _00_;
  (* module_not_derived = 32'd1 *)
  
  \$paramod$178264a5165c1cd104ffa6bfd64842c34001f91b\bsg_two_fifo  fifo (
    .clk_i(clk_i),
    .data_i(_06_),
    .data_o(data_o),
    .ready_o(fifo_ready),
    .reset_i(reset_i),
    .v_i(_05_),
    .v_o(fifo_v),
    .yumi_i(_01_)
  );
  assign v_o = fifo_v;
  assign yumi_o_tmp = yumi_o;
endmodule

(* top =  1  *)

module bsg_fsb(clk_i, reset_i, asm_v_i, asm_data_i, asm_yumi_o, asm_v_o, asm_data_o, asm_ready_i, node_v_o, node_data_o, node_ready_i, node_en_r_o, node_reset_r_o, node_v_i, node_data_i, node_yumi_o);
  
  wire _00_;
  
  wire _01_;
  
  wire _02_;
  
  wire _03_;
  
  wire _04_;
  
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15" *)
  wire [15:0] _05_;
  
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15" *)
  wire [15:0] _06_;
  
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15" *)
  wire [15:0] _07_;
  
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15" *)
  wire [15:0] _08_;
  
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15" *)
  wire [15:0] _09_;
  
  input [15:0] asm_data_i;
  wire [15:0] asm_data_i;
  
  output [15:0] asm_data_o;
  wire [15:0] asm_data_o;
  
  input asm_ready_i;
  wire asm_ready_i;
  
  input asm_v_i;
  wire asm_v_i;
  
  output asm_v_o;
  wire asm_v_o;
  
  output asm_yumi_o;
  wire asm_yumi_o;
  
  input clk_i;
  wire clk_i;
  
  wire \fsb_node[0].in_hop_ready_m1 ;
  
  wire [15:0] \fsb_node[0].node_data_o_int ;
  
  wire \fsb_node[0].node_en_r_int ;
  
  wire \fsb_node[0].node_ready_int ;
  
  wire \fsb_node[0].node_v_int ;
  
  wire [15:0] \fsb_node[0].out_hop_data_m1 ;
  
  wire \fsb_node[0].out_hop_v_m1 ;
  
  wire \fsb_node[1].in_hop_ready_m1 ;
  
  wire [15:0] \fsb_node[1].node_data_o_int ;
  
  wire \fsb_node[1].node_en_r_int ;
  
  wire \fsb_node[1].node_ready_int ;
  
  wire \fsb_node[1].node_v_int ;
  
  wire [15:0] \fsb_node[1].out_hop_data_m1 ;
  
  wire \fsb_node[1].out_hop_v_m1 ;
  
  wire \fsb_node[2].in_hop_ready_m1 ;
  
  wire [15:0] \fsb_node[2].node_data_o_int ;
  
  wire \fsb_node[2].node_en_r_int ;
  
  wire \fsb_node[2].node_ready_int ;
  
  wire \fsb_node[2].node_v_int ;
  
  wire [15:0] \fsb_node[2].out_hop_data_m1 ;
  
  wire \fsb_node[2].out_hop_v_m1 ;
  
  wire \fsb_node[3].in_hop_ready_m1 ;
  
  wire [15:0] \fsb_node[3].node_data_o_int ;
  
  wire \fsb_node[3].node_en_r_int ;
  
  wire \fsb_node[3].node_ready_int ;
  
  wire \fsb_node[3].node_v_int ;
  
  wire [15:0] \fsb_node[3].out_hop_data_m1 ;
  
  wire \fsb_node[3].out_hop_v_m1 ;
  
  wire \fsb_node[4].in_hop_ready_m1 ;
  
  wire [15:0] \fsb_node[4].node_data_o_int ;
  
  wire \fsb_node[4].node_en_r_int ;
  
  wire \fsb_node[4].node_ready_int ;
  
  wire \fsb_node[4].node_v_int ;
  
  wire [15:0] \fsb_node[4].out_hop_data_m1 ;
  
  wire \fsb_node[4].out_hop_v_m1 ;
  wire [3:0] in_hop_ready;
  
  (* unused_bits = "4" *)
  wire [4:0] in_hop_v;
  
  input [79:0] node_data_i;
  wire [79:0] node_data_i;
  
  output [79:0] node_data_o;
  wire [79:0] node_data_o;
  
  output [4:0] node_en_r_o;
  wire [4:0] node_en_r_o;
  
  input [4:0] node_ready_i;
  wire [4:0] node_ready_i;
  
  output [4:0] node_reset_r_o;
  wire [4:0] node_reset_r_o;
  
  input [4:0] node_v_i;
  wire [4:0] node_v_i;
  
  output [4:0] node_v_o;
  wire [4:0] node_v_o;
  
  output [4:0] node_yumi_o;
  wire [4:0] node_yumi_o;
  
  wire [15:0] \out_hop_data[0] ;
  
  wire [15:0] \out_hop_data[1] ;
  
  wire [15:0] \out_hop_data[2] ;
  
  wire [15:0] \out_hop_data[3] ;
  
  wire [15:0] \out_hop_data[4] ;
  
  (* unused_bits = "4" *)
  wire [4:0] out_hop_ready;
  wire [3:0] out_hop_v;
  
  input reset_i;
  wire reset_i;
  
  wire to_asm_ready;
  assign asm_yumi_o = asm_v_i & \fsb_node[0].in_hop_ready_m1 ;
  assign _00_ = node_v_i[0] & \fsb_node[0].node_en_r_int ;
  assign _01_ = node_v_i[1] & \fsb_node[1].node_en_r_int ;
  assign _02_ = node_v_i[2] & \fsb_node[2].node_en_r_int ;
  assign _03_ = node_v_i[3] & \fsb_node[3].node_en_r_int ;
  assign _04_ = node_v_i[4] & \fsb_node[4].node_en_r_int ;
  (* module_not_derived = 32'd1 *)
  
  \$paramod$f5e36c6752400e36adc9c665db601cb525a1a030\bsg_front_side_bus_hop_in  \fsb_node[0].hopin  (
    .clk_i(clk_i),
    .data_i(asm_data_i),
    .data_o({ \fsb_node[0].node_data_o_int , _05_ }),
    .ready_i({ \fsb_node[0].node_ready_int , \fsb_node[1].in_hop_ready_m1  }),
    .ready_o(\fsb_node[0].in_hop_ready_m1 ),
    .reset_i(reset_i),
    .v_i(asm_v_i),
    .v_o({ \fsb_node[0].node_v_int , in_hop_v[0] })
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod\bsg_front_side_bus_hop_out\width_p=s32'00000000000000000000000000010000  \fsb_node[0].hopout  (
    .clk_i(clk_i),
    .data_i({ node_data_i[15:0], \fsb_node[1].out_hop_data_m1  }),
    .data_o(\fsb_node[0].out_hop_data_m1 ),
    .ready_i(asm_ready_i),
    .ready_o(out_hop_ready[0]),
    .reset_i(reset_i),
    .v_i({ _00_, \fsb_node[1].out_hop_v_m1  }),
    .v_o(\fsb_node[0].out_hop_v_m1 ),
    .yumi_o(node_yumi_o[0])
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod$ece035e37d659a27b3ae92c00d990dce7e0a44d1\bsg_fsb_murn_gateway  \fsb_node[0].murn_gateway  (
    .clk_i(clk_i),
    .data_i(\fsb_node[0].node_data_o_int ),
    .node_en_r_o(\fsb_node[0].node_en_r_int ),
    .node_reset_r_o(node_reset_r_o[0]),
    .ready_i(node_ready_i[0]),
    .ready_o(\fsb_node[0].node_ready_int ),
    .reset_i(reset_i),
    .v_i(\fsb_node[0].node_v_int ),
    .v_o(node_v_o[0])
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod$f5e36c6752400e36adc9c665db601cb525a1a030\bsg_front_side_bus_hop_in  \fsb_node[1].hopin  (
    .clk_i(clk_i),
    .data_i(16'hxxxx),
    .data_o({ \fsb_node[1].node_data_o_int , _06_ }),
    .ready_i({ \fsb_node[1].node_ready_int , \fsb_node[2].in_hop_ready_m1  }),
    .ready_o(\fsb_node[1].in_hop_ready_m1 ),
    .reset_i(reset_i),
    .v_i(in_hop_v[0]),
    .v_o({ \fsb_node[1].node_v_int , in_hop_v[1] })
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod\bsg_front_side_bus_hop_out\width_p=s32'00000000000000000000000000010000  \fsb_node[1].hopout  (
    .clk_i(clk_i),
    .data_i({ node_data_i[31:16], \fsb_node[2].out_hop_data_m1  }),
    .data_o(\fsb_node[1].out_hop_data_m1 ),
    .ready_i(out_hop_ready[0]),
    .ready_o(out_hop_ready[1]),
    .reset_i(reset_i),
    .v_i({ _01_, \fsb_node[2].out_hop_v_m1  }),
    .v_o(\fsb_node[1].out_hop_v_m1 ),
    .yumi_o(node_yumi_o[1])
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod$5e3b6b930a4c239efd2933105bf0b0ce107a0de4\bsg_fsb_murn_gateway  \fsb_node[1].murn_gateway  (
    .clk_i(clk_i),
    .data_i(\fsb_node[1].node_data_o_int ),
    .node_en_r_o(\fsb_node[1].node_en_r_int ),
    .node_reset_r_o(node_reset_r_o[1]),
    .ready_i(node_ready_i[1]),
    .ready_o(\fsb_node[1].node_ready_int ),
    .reset_i(reset_i),
    .v_i(\fsb_node[1].node_v_int ),
    .v_o(node_v_o[1])
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod$f5e36c6752400e36adc9c665db601cb525a1a030\bsg_front_side_bus_hop_in  \fsb_node[2].hopin  (
    .clk_i(clk_i),
    .data_i(16'hxxxx),
    .data_o({ \fsb_node[2].node_data_o_int , _07_ }),
    .ready_i({ \fsb_node[2].node_ready_int , \fsb_node[3].in_hop_ready_m1  }),
    .ready_o(\fsb_node[2].in_hop_ready_m1 ),
    .reset_i(reset_i),
    .v_i(in_hop_v[1]),
    .v_o({ \fsb_node[2].node_v_int , in_hop_v[2] })
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod\bsg_front_side_bus_hop_out\width_p=s32'00000000000000000000000000010000  \fsb_node[2].hopout  (
    .clk_i(clk_i),
    .data_i({ node_data_i[47:32], \fsb_node[3].out_hop_data_m1  }),
    .data_o(\fsb_node[2].out_hop_data_m1 ),
    .ready_i(out_hop_ready[1]),
    .ready_o(out_hop_ready[2]),
    .reset_i(reset_i),
    .v_i({ _02_, \fsb_node[3].out_hop_v_m1  }),
    .v_o(\fsb_node[2].out_hop_v_m1 ),
    .yumi_o(node_yumi_o[2])
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod$658aaac34f99529332d962d60914cd52b27809eb\bsg_fsb_murn_gateway  \fsb_node[2].murn_gateway  (
    .clk_i(clk_i),
    .data_i(\fsb_node[2].node_data_o_int ),
    .node_en_r_o(\fsb_node[2].node_en_r_int ),
    .node_reset_r_o(node_reset_r_o[2]),
    .ready_i(node_ready_i[2]),
    .ready_o(\fsb_node[2].node_ready_int ),
    .reset_i(reset_i),
    .v_i(\fsb_node[2].node_v_int ),
    .v_o(node_v_o[2])
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod$f5e36c6752400e36adc9c665db601cb525a1a030\bsg_front_side_bus_hop_in  \fsb_node[3].hopin  (
    .clk_i(clk_i),
    .data_i(16'hxxxx),
    .data_o({ \fsb_node[3].node_data_o_int , _08_ }),
    .ready_i({ \fsb_node[3].node_ready_int , \fsb_node[4].in_hop_ready_m1  }),
    .ready_o(\fsb_node[3].in_hop_ready_m1 ),
    .reset_i(reset_i),
    .v_i(in_hop_v[2]),
    .v_o({ \fsb_node[3].node_v_int , in_hop_v[3] })
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod\bsg_front_side_bus_hop_out\width_p=s32'00000000000000000000000000010000  \fsb_node[3].hopout  (
    .clk_i(clk_i),
    .data_i({ node_data_i[63:48], \fsb_node[4].out_hop_data_m1  }),
    .data_o(\fsb_node[3].out_hop_data_m1 ),
    .ready_i(out_hop_ready[2]),
    .ready_o(out_hop_ready[3]),
    .reset_i(reset_i),
    .v_i({ _03_, \fsb_node[4].out_hop_v_m1  }),
    .v_o(\fsb_node[3].out_hop_v_m1 ),
    .yumi_o(node_yumi_o[3])
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod$75994d82c3f9cb6aebaa638ad397ecf933b5e08b\bsg_fsb_murn_gateway  \fsb_node[3].murn_gateway  (
    .clk_i(clk_i),
    .data_i(\fsb_node[3].node_data_o_int ),
    .node_en_r_o(\fsb_node[3].node_en_r_int ),
    .node_reset_r_o(node_reset_r_o[3]),
    .ready_i(node_ready_i[3]),
    .ready_o(\fsb_node[3].node_ready_int ),
    .reset_i(reset_i),
    .v_i(\fsb_node[3].node_v_int ),
    .v_o(node_v_o[3])
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod$f5e36c6752400e36adc9c665db601cb525a1a030\bsg_front_side_bus_hop_in  \fsb_node[4].hopin  (
    .clk_i(clk_i),
    .data_i(16'hxxxx),
    .data_o({ \fsb_node[4].node_data_o_int , _09_ }),
    .ready_i({ \fsb_node[4].node_ready_int , 1'h1 }),
    .ready_o(\fsb_node[4].in_hop_ready_m1 ),
    .reset_i(reset_i),
    .v_i(in_hop_v[3]),
    .v_o({ \fsb_node[4].node_v_int , in_hop_v[4] })
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod\bsg_front_side_bus_hop_out\width_p=s32'00000000000000000000000000010000  \fsb_node[4].hopout  (
    .clk_i(clk_i),
    .data_i({ node_data_i[79:64], 16'h0000 }),
    .data_o(\fsb_node[4].out_hop_data_m1 ),
    .ready_i(out_hop_ready[3]),
    .ready_o(out_hop_ready[4]),
    .reset_i(reset_i),
    .v_i({ _04_, 1'h0 }),
    .v_o(\fsb_node[4].out_hop_v_m1 ),
    .yumi_o(node_yumi_o[4])
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod$7808f95e1e5760275829fb317f2e198ef1eab1ca\bsg_fsb_murn_gateway  \fsb_node[4].murn_gateway  (
    .clk_i(clk_i),
    .data_i(\fsb_node[4].node_data_o_int ),
    .node_en_r_o(\fsb_node[4].node_en_r_int ),
    .node_reset_r_o(node_reset_r_o[4]),
    .ready_i(node_ready_i[4]),
    .ready_o(\fsb_node[4].node_ready_int ),
    .reset_i(reset_i),
    .v_i(\fsb_node[4].node_v_int ),
    .v_o(node_v_o[4])
  );
  assign asm_data_o = \fsb_node[0].out_hop_data_m1 ;
  assign asm_v_o = \fsb_node[0].out_hop_v_m1 ;
  assign in_hop_ready = { \fsb_node[4].in_hop_ready_m1 , \fsb_node[3].in_hop_ready_m1 , \fsb_node[2].in_hop_ready_m1 , \fsb_node[1].in_hop_ready_m1  };
  assign node_data_o = { \fsb_node[4].node_data_o_int , \fsb_node[3].node_data_o_int , \fsb_node[2].node_data_o_int , \fsb_node[1].node_data_o_int , \fsb_node[0].node_data_o_int  };
  assign node_en_r_o = { \fsb_node[4].node_en_r_int , \fsb_node[3].node_en_r_int , \fsb_node[2].node_en_r_int , \fsb_node[1].node_en_r_int , \fsb_node[0].node_en_r_int  };
  assign \out_hop_data[0]  = \fsb_node[1].out_hop_data_m1 ;
  assign \out_hop_data[1]  = \fsb_node[2].out_hop_data_m1 ;
  assign \out_hop_data[2]  = \fsb_node[3].out_hop_data_m1 ;
  assign \out_hop_data[3]  = \fsb_node[4].out_hop_data_m1 ;
  assign \out_hop_data[4]  = 16'h0000;
  assign out_hop_v = { \fsb_node[4].out_hop_v_m1 , \fsb_node[3].out_hop_v_m1 , \fsb_node[2].out_hop_v_m1 , \fsb_node[1].out_hop_v_m1  };
  assign to_asm_ready = \fsb_node[0].in_hop_ready_m1 ;
endmodule

