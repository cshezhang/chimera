/* Generated by Yosys 0.27+9 (git sha1 101d19bb6, gcc 11.2.0-7ubuntu2 -fPIC -Os) */


module \$paramod$66c2914fc6ed8727a3b6fb2062fc3e9775d7f978\bsg_mem_1r1w_synth (w_clk_i, w_reset_i, w_v_i, w_addr_i, w_data_i, r_v_i, r_addr_i, r_data_o);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  reg [4:0] \nz.mem[0] ;
  reg [4:0] \nz.mem[10] ;
  reg [4:0] \nz.mem[11] ;
  reg [4:0] \nz.mem[12] ;
  reg [4:0] \nz.mem[13] ;
  reg [4:0] \nz.mem[14] ;
  reg [4:0] \nz.mem[15] ;
  reg [4:0] \nz.mem[1] ;
  reg [4:0] \nz.mem[2] ;
  reg [4:0] \nz.mem[3] ;
  reg [4:0] \nz.mem[4] ;
  reg [4:0] \nz.mem[5] ;
  reg [4:0] \nz.mem[6] ;
  reg [4:0] \nz.mem[7] ;
  reg [4:0] \nz.mem[8] ;
  reg [4:0] \nz.mem[9] ;
  
  input [3:0] r_addr_i;
  wire [3:0] r_addr_i;
  
  output [4:0] r_data_o;
  wire [4:0] r_data_o;
  
  input r_v_i;
  wire r_v_i;
  
  (* unused_bits = "0" *)
  wire unused0;
  
  (* unused_bits = "0" *)
  wire unused1;
  
  input [3:0] w_addr_i;
  wire [3:0] w_addr_i;
  
  input w_clk_i;
  wire w_clk_i;
  
  input [4:0] w_data_i;
  wire [4:0] w_data_i;
  
  input w_reset_i;
  wire w_reset_i;
  
  input w_v_i;
  wire w_v_i;
  assign _016_ = r_addr_i[0] ? \nz.mem[1] [0] : \nz.mem[0] [0];
  assign _017_ = r_addr_i[0] ? \nz.mem[3] [0] : \nz.mem[2] [0];
  assign _018_ = r_addr_i[1] ? _017_ : _016_;
  assign _019_ = r_addr_i[0] ? \nz.mem[5] [0] : \nz.mem[4] [0];
  assign _020_ = r_addr_i[0] ? \nz.mem[7] [0] : \nz.mem[6] [0];
  assign _021_ = r_addr_i[1] ? _020_ : _019_;
  assign _022_ = r_addr_i[2] ? _021_ : _018_;
  assign _023_ = r_addr_i[0] ? \nz.mem[9] [0] : \nz.mem[8] [0];
  assign _024_ = r_addr_i[0] ? \nz.mem[11] [0] : \nz.mem[10] [0];
  assign _025_ = r_addr_i[1] ? _024_ : _023_;
  assign _026_ = r_addr_i[0] ? \nz.mem[13] [0] : \nz.mem[12] [0];
  assign _027_ = r_addr_i[0] ? \nz.mem[15] [0] : \nz.mem[14] [0];
  assign _028_ = r_addr_i[1] ? _027_ : _026_;
  assign _029_ = r_addr_i[2] ? _028_ : _025_;
  assign r_data_o[0] = r_addr_i[3] ? _029_ : _022_;
  assign _030_ = r_addr_i[0] ? \nz.mem[1] [1] : \nz.mem[0] [1];
  assign _031_ = r_addr_i[0] ? \nz.mem[3] [1] : \nz.mem[2] [1];
  assign _032_ = r_addr_i[1] ? _031_ : _030_;
  assign _033_ = r_addr_i[0] ? \nz.mem[5] [1] : \nz.mem[4] [1];
  assign _034_ = r_addr_i[0] ? \nz.mem[7] [1] : \nz.mem[6] [1];
  assign _035_ = r_addr_i[1] ? _034_ : _033_;
  assign _036_ = r_addr_i[2] ? _035_ : _032_;
  assign _037_ = r_addr_i[0] ? \nz.mem[9] [1] : \nz.mem[8] [1];
  assign _038_ = r_addr_i[0] ? \nz.mem[11] [1] : \nz.mem[10] [1];
  assign _039_ = r_addr_i[1] ? _038_ : _037_;
  assign _040_ = r_addr_i[0] ? \nz.mem[13] [1] : \nz.mem[12] [1];
  assign _041_ = r_addr_i[0] ? \nz.mem[15] [1] : \nz.mem[14] [1];
  assign _042_ = r_addr_i[1] ? _041_ : _040_;
  assign _043_ = r_addr_i[2] ? _042_ : _039_;
  assign r_data_o[1] = r_addr_i[3] ? _043_ : _036_;
  assign _044_ = r_addr_i[0] ? \nz.mem[1] [2] : \nz.mem[0] [2];
  assign _045_ = r_addr_i[0] ? \nz.mem[3] [2] : \nz.mem[2] [2];
  assign _046_ = r_addr_i[1] ? _045_ : _044_;
  assign _047_ = r_addr_i[0] ? \nz.mem[5] [2] : \nz.mem[4] [2];
  assign _048_ = r_addr_i[0] ? \nz.mem[7] [2] : \nz.mem[6] [2];
  assign _049_ = r_addr_i[1] ? _048_ : _047_;
  assign _050_ = r_addr_i[2] ? _049_ : _046_;
  assign _051_ = r_addr_i[0] ? \nz.mem[9] [2] : \nz.mem[8] [2];
  assign _052_ = r_addr_i[0] ? \nz.mem[11] [2] : \nz.mem[10] [2];
  assign _053_ = r_addr_i[1] ? _052_ : _051_;
  assign _054_ = r_addr_i[0] ? \nz.mem[13] [2] : \nz.mem[12] [2];
  assign _055_ = r_addr_i[0] ? \nz.mem[15] [2] : \nz.mem[14] [2];
  assign _056_ = r_addr_i[1] ? _055_ : _054_;
  assign _057_ = r_addr_i[2] ? _056_ : _053_;
  assign r_data_o[2] = r_addr_i[3] ? _057_ : _050_;
  assign _058_ = r_addr_i[0] ? \nz.mem[1] [3] : \nz.mem[0] [3];
  assign _059_ = r_addr_i[0] ? \nz.mem[3] [3] : \nz.mem[2] [3];
  assign _060_ = r_addr_i[1] ? _059_ : _058_;
  assign _061_ = r_addr_i[0] ? \nz.mem[5] [3] : \nz.mem[4] [3];
  assign _062_ = r_addr_i[0] ? \nz.mem[7] [3] : \nz.mem[6] [3];
  assign _063_ = r_addr_i[1] ? _062_ : _061_;
  assign _064_ = r_addr_i[2] ? _063_ : _060_;
  assign _065_ = r_addr_i[0] ? \nz.mem[9] [3] : \nz.mem[8] [3];
  assign _066_ = r_addr_i[0] ? \nz.mem[11] [3] : \nz.mem[10] [3];
  assign _067_ = r_addr_i[1] ? _066_ : _065_;
  assign _068_ = r_addr_i[0] ? \nz.mem[13] [3] : \nz.mem[12] [3];
  assign _069_ = r_addr_i[0] ? \nz.mem[15] [3] : \nz.mem[14] [3];
  assign _070_ = r_addr_i[1] ? _069_ : _068_;
  assign _071_ = r_addr_i[2] ? _070_ : _067_;
  assign r_data_o[3] = r_addr_i[3] ? _071_ : _064_;
  assign _072_ = r_addr_i[0] ? \nz.mem[1] [4] : \nz.mem[0] [4];
  assign _073_ = r_addr_i[0] ? \nz.mem[3] [4] : \nz.mem[2] [4];
  assign _074_ = r_addr_i[1] ? _073_ : _072_;
  assign _075_ = r_addr_i[0] ? \nz.mem[5] [4] : \nz.mem[4] [4];
  assign _076_ = r_addr_i[0] ? \nz.mem[7] [4] : \nz.mem[6] [4];
  assign _077_ = r_addr_i[1] ? _076_ : _075_;
  assign _078_ = r_addr_i[2] ? _077_ : _074_;
  assign _079_ = r_addr_i[0] ? \nz.mem[9] [4] : \nz.mem[8] [4];
  assign _080_ = r_addr_i[0] ? \nz.mem[11] [4] : \nz.mem[10] [4];
  assign _081_ = r_addr_i[1] ? _080_ : _079_;
  assign _082_ = r_addr_i[0] ? \nz.mem[13] [4] : \nz.mem[12] [4];
  assign _083_ = r_addr_i[0] ? \nz.mem[15] [4] : \nz.mem[14] [4];
  assign _084_ = r_addr_i[1] ? _083_ : _082_;
  assign _085_ = r_addr_i[2] ? _084_ : _081_;
  assign r_data_o[4] = r_addr_i[3] ? _085_ : _078_;
  assign _086_ = w_addr_i[0] | w_addr_i[1];
  assign _087_ = w_addr_i[3] | w_addr_i[2];
  assign _088_ = _087_ | _086_;
  assign _000_ = w_v_i & ~(_088_);
  assign _089_ = w_addr_i[1] | ~(w_addr_i[0]);
  assign _090_ = _089_ | _087_;
  assign _007_ = w_v_i & ~(_090_);
  assign _091_ = w_addr_i[0] | ~(w_addr_i[1]);
  assign _092_ = _091_ | _087_;
  assign _008_ = w_v_i & ~(_092_);
  assign _093_ = ~(w_addr_i[0] & w_addr_i[1]);
  assign _094_ = _093_ | _087_;
  assign _009_ = w_v_i & ~(_094_);
  assign _095_ = w_addr_i[3] | ~(w_addr_i[2]);
  assign _096_ = _095_ | _086_;
  assign _010_ = w_v_i & ~(_096_);
  assign _097_ = _095_ | _089_;
  assign _011_ = w_v_i & ~(_097_);
  assign _098_ = _095_ | _091_;
  assign _012_ = w_v_i & ~(_098_);
  assign _099_ = _095_ | _093_;
  assign _013_ = w_v_i & ~(_099_);
  assign _100_ = w_addr_i[2] | ~(w_addr_i[3]);
  assign _101_ = _100_ | _086_;
  assign _014_ = w_v_i & ~(_101_);
  assign _102_ = _100_ | _089_;
  assign _015_ = w_v_i & ~(_102_);
  assign _103_ = _100_ | _091_;
  assign _001_ = w_v_i & ~(_103_);
  assign _104_ = _100_ | _093_;
  assign _002_ = w_v_i & ~(_104_);
  assign _105_ = ~(w_addr_i[3] & w_addr_i[2]);
  assign _106_ = _105_ | _086_;
  assign _003_ = w_v_i & ~(_106_);
  assign _107_ = _105_ | _089_;
  assign _004_ = w_v_i & ~(_107_);
  assign _108_ = _105_ | _091_;
  assign _005_ = w_v_i & ~(_108_);
  assign _109_ = _105_ | _093_;
  assign _006_ = w_v_i & ~(_109_);
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [0] <= w_data_i[0];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [1] <= w_data_i[1];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [2] <= w_data_i[2];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [3] <= w_data_i[3];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [4] <= w_data_i[4];
  always @(posedge w_clk_i)
    if (_004_) \nz.mem[13] [0] <= w_data_i[0];
  always @(posedge w_clk_i)
    if (_004_) \nz.mem[13] [1] <= w_data_i[1];
  always @(posedge w_clk_i)
    if (_004_) \nz.mem[13] [2] <= w_data_i[2];
  always @(posedge w_clk_i)
    if (_004_) \nz.mem[13] [3] <= w_data_i[3];
  always @(posedge w_clk_i)
    if (_004_) \nz.mem[13] [4] <= w_data_i[4];
  always @(posedge w_clk_i)
    if (_006_) \nz.mem[15] [0] <= w_data_i[0];
  always @(posedge w_clk_i)
    if (_006_) \nz.mem[15] [1] <= w_data_i[1];
  always @(posedge w_clk_i)
    if (_006_) \nz.mem[15] [2] <= w_data_i[2];
  always @(posedge w_clk_i)
    if (_006_) \nz.mem[15] [3] <= w_data_i[3];
  always @(posedge w_clk_i)
    if (_006_) \nz.mem[15] [4] <= w_data_i[4];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[10] [0] <= w_data_i[0];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[10] [1] <= w_data_i[1];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[10] [2] <= w_data_i[2];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[10] [3] <= w_data_i[3];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[10] [4] <= w_data_i[4];
  always @(posedge w_clk_i)
    if (_010_) \nz.mem[4] [0] <= w_data_i[0];
  always @(posedge w_clk_i)
    if (_010_) \nz.mem[4] [1] <= w_data_i[1];
  always @(posedge w_clk_i)
    if (_010_) \nz.mem[4] [2] <= w_data_i[2];
  always @(posedge w_clk_i)
    if (_010_) \nz.mem[4] [3] <= w_data_i[3];
  always @(posedge w_clk_i)
    if (_010_) \nz.mem[4] [4] <= w_data_i[4];
  always @(posedge w_clk_i)
    if (_003_) \nz.mem[12] [0] <= w_data_i[0];
  always @(posedge w_clk_i)
    if (_003_) \nz.mem[12] [1] <= w_data_i[1];
  always @(posedge w_clk_i)
    if (_003_) \nz.mem[12] [2] <= w_data_i[2];
  always @(posedge w_clk_i)
    if (_003_) \nz.mem[12] [3] <= w_data_i[3];
  always @(posedge w_clk_i)
    if (_003_) \nz.mem[12] [4] <= w_data_i[4];
  always @(posedge w_clk_i)
    if (_002_) \nz.mem[11] [0] <= w_data_i[0];
  always @(posedge w_clk_i)
    if (_002_) \nz.mem[11] [1] <= w_data_i[1];
  always @(posedge w_clk_i)
    if (_002_) \nz.mem[11] [2] <= w_data_i[2];
  always @(posedge w_clk_i)
    if (_002_) \nz.mem[11] [3] <= w_data_i[3];
  always @(posedge w_clk_i)
    if (_002_) \nz.mem[11] [4] <= w_data_i[4];
  always @(posedge w_clk_i)
    if (_011_) \nz.mem[5] [0] <= w_data_i[0];
  always @(posedge w_clk_i)
    if (_011_) \nz.mem[5] [1] <= w_data_i[1];
  always @(posedge w_clk_i)
    if (_011_) \nz.mem[5] [2] <= w_data_i[2];
  always @(posedge w_clk_i)
    if (_011_) \nz.mem[5] [3] <= w_data_i[3];
  always @(posedge w_clk_i)
    if (_011_) \nz.mem[5] [4] <= w_data_i[4];
  always @(posedge w_clk_i)
    if (_014_) \nz.mem[8] [0] <= w_data_i[0];
  always @(posedge w_clk_i)
    if (_014_) \nz.mem[8] [1] <= w_data_i[1];
  always @(posedge w_clk_i)
    if (_014_) \nz.mem[8] [2] <= w_data_i[2];
  always @(posedge w_clk_i)
    if (_014_) \nz.mem[8] [3] <= w_data_i[3];
  always @(posedge w_clk_i)
    if (_014_) \nz.mem[8] [4] <= w_data_i[4];
  always @(posedge w_clk_i)
    if (_013_) \nz.mem[7] [0] <= w_data_i[0];
  always @(posedge w_clk_i)
    if (_013_) \nz.mem[7] [1] <= w_data_i[1];
  always @(posedge w_clk_i)
    if (_013_) \nz.mem[7] [2] <= w_data_i[2];
  always @(posedge w_clk_i)
    if (_013_) \nz.mem[7] [3] <= w_data_i[3];
  always @(posedge w_clk_i)
    if (_013_) \nz.mem[7] [4] <= w_data_i[4];
  always @(posedge w_clk_i)
    if (_012_) \nz.mem[6] [0] <= w_data_i[0];
  always @(posedge w_clk_i)
    if (_012_) \nz.mem[6] [1] <= w_data_i[1];
  always @(posedge w_clk_i)
    if (_012_) \nz.mem[6] [2] <= w_data_i[2];
  always @(posedge w_clk_i)
    if (_012_) \nz.mem[6] [3] <= w_data_i[3];
  always @(posedge w_clk_i)
    if (_012_) \nz.mem[6] [4] <= w_data_i[4];
  always @(posedge w_clk_i)
    if (_008_) \nz.mem[2] [0] <= w_data_i[0];
  always @(posedge w_clk_i)
    if (_008_) \nz.mem[2] [1] <= w_data_i[1];
  always @(posedge w_clk_i)
    if (_008_) \nz.mem[2] [2] <= w_data_i[2];
  always @(posedge w_clk_i)
    if (_008_) \nz.mem[2] [3] <= w_data_i[3];
  always @(posedge w_clk_i)
    if (_008_) \nz.mem[2] [4] <= w_data_i[4];
  always @(posedge w_clk_i)
    if (_009_) \nz.mem[3] [0] <= w_data_i[0];
  always @(posedge w_clk_i)
    if (_009_) \nz.mem[3] [1] <= w_data_i[1];
  always @(posedge w_clk_i)
    if (_009_) \nz.mem[3] [2] <= w_data_i[2];
  always @(posedge w_clk_i)
    if (_009_) \nz.mem[3] [3] <= w_data_i[3];
  always @(posedge w_clk_i)
    if (_009_) \nz.mem[3] [4] <= w_data_i[4];
  always @(posedge w_clk_i)
    if (_005_) \nz.mem[14] [0] <= w_data_i[0];
  always @(posedge w_clk_i)
    if (_005_) \nz.mem[14] [1] <= w_data_i[1];
  always @(posedge w_clk_i)
    if (_005_) \nz.mem[14] [2] <= w_data_i[2];
  always @(posedge w_clk_i)
    if (_005_) \nz.mem[14] [3] <= w_data_i[3];
  always @(posedge w_clk_i)
    if (_005_) \nz.mem[14] [4] <= w_data_i[4];
  always @(posedge w_clk_i)
    if (_007_) \nz.mem[1] [0] <= w_data_i[0];
  always @(posedge w_clk_i)
    if (_007_) \nz.mem[1] [1] <= w_data_i[1];
  always @(posedge w_clk_i)
    if (_007_) \nz.mem[1] [2] <= w_data_i[2];
  always @(posedge w_clk_i)
    if (_007_) \nz.mem[1] [3] <= w_data_i[3];
  always @(posedge w_clk_i)
    if (_007_) \nz.mem[1] [4] <= w_data_i[4];
  always @(posedge w_clk_i)
    if (_015_) \nz.mem[9] [0] <= w_data_i[0];
  always @(posedge w_clk_i)
    if (_015_) \nz.mem[9] [1] <= w_data_i[1];
  always @(posedge w_clk_i)
    if (_015_) \nz.mem[9] [2] <= w_data_i[2];
  always @(posedge w_clk_i)
    if (_015_) \nz.mem[9] [3] <= w_data_i[3];
  always @(posedge w_clk_i)
    if (_015_) \nz.mem[9] [4] <= w_data_i[4];
  assign unused0 = w_reset_i;
  assign unused1 = r_v_i;
endmodule


module \$paramod$683c22efd5d3cb60d2cde43d79fcb9cc6f5269b6\bsg_mem_1r1w (w_clk_i, w_reset_i, w_v_i, w_addr_i, w_data_i, r_v_i, r_addr_i, r_data_o);
  
  input [3:0] r_addr_i;
  wire [3:0] r_addr_i;
  
  output [4:0] r_data_o;
  wire [4:0] r_data_o;
  
  input r_v_i;
  wire r_v_i;
  
  input [3:0] w_addr_i;
  wire [3:0] w_addr_i;
  
  input w_clk_i;
  wire w_clk_i;
  
  input [4:0] w_data_i;
  wire [4:0] w_data_i;
  
  input w_reset_i;
  wire w_reset_i;
  
  input w_v_i;
  wire w_v_i;
  (* module_not_derived = 32'd1 *)
  
  \$paramod$66c2914fc6ed8727a3b6fb2062fc3e9775d7f978\bsg_mem_1r1w_synth  synth (
    .r_addr_i(r_addr_i),
    .r_data_o(r_data_o),
    .r_v_i(r_v_i),
    .w_addr_i(w_addr_i),
    .w_clk_i(w_clk_i),
    .w_data_i(w_data_i),
    .w_reset_i(w_reset_i),
    .w_v_i(w_v_i)
  );
endmodule


module \$paramod$81d71a67a6c3ec5810ccd7d39edc413b905567d8\bsg_launch_sync_sync (iclk_i, iclk_reset_i, oclk_i, iclk_data_i, iclk_data_o, oclk_data_o);
  
  input [4:0] iclk_data_i;
  wire [4:0] iclk_data_i;
  
  output [4:0] iclk_data_o;
  wire [4:0] iclk_data_o;
  
  input iclk_i;
  wire iclk_i;
  
  input iclk_reset_i;
  wire iclk_reset_i;
  
  output [4:0] oclk_data_o;
  wire [4:0] oclk_data_o;
  
  input oclk_i;
  wire oclk_i;
  (* module_not_derived = 32'd1 *)
  
  bsg_launch_sync_sync_posedge_5_unit \sync.p.z.blss  (
    .iclk_data_i(iclk_data_i),
    .iclk_data_o(iclk_data_o),
    .iclk_i(iclk_i),
    .iclk_reset_i(iclk_reset_i),
    .oclk_data_o(oclk_data_o),
    .oclk_i(oclk_i)
  );
endmodule


module \$paramod$c6c3b0121cfc4a8cc5fab80a505acd5f6782fcb0\bsg_async_ptr_gray (w_clk_i, w_reset_i, w_inc_i, r_clk_i, w_ptr_binary_r_o, w_ptr_gray_r_o, w_ptr_gray_r_rsync_o);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  
  input r_clk_i;
  wire r_clk_i;
  
  input w_clk_i;
  wire w_clk_i;
  
  input w_inc_i;
  wire w_inc_i;
  
  output [4:0] w_ptr_binary_r_o;
  wire [4:0] w_ptr_binary_r_o;
  
  wire [4:0] w_ptr_gray_n;
  
  wire [4:0] w_ptr_gray_r;
  
  output [4:0] w_ptr_gray_r_o;
  wire [4:0] w_ptr_gray_r_o;
  
  wire [4:0] w_ptr_gray_r_rsync;
  
  output [4:0] w_ptr_gray_r_rsync_o;
  wire [4:0] w_ptr_gray_r_rsync_o;
  
  reg [4:0] w_ptr_p1_r;
  
  wire [4:0] w_ptr_p2;
  
  reg [4:0] w_ptr_r;
  
  input w_reset_i;
  wire w_reset_i;
  assign w_ptr_p2[0] = ~w_ptr_p1_r[0];
  assign w_ptr_p2[1] = w_ptr_p1_r[1] ^ w_ptr_p1_r[0];
  assign w_ptr_gray_n[0] = w_inc_i ? w_ptr_p2[1] : w_ptr_gray_r[0];
  assign _00_ = w_ptr_p1_r[1] ^ w_ptr_p1_r[2];
  assign w_ptr_gray_n[1] = w_inc_i ? _00_ : w_ptr_gray_r[1];
  assign _01_ = w_ptr_p1_r[3] ^ w_ptr_p1_r[2];
  assign w_ptr_gray_n[2] = w_inc_i ? _01_ : w_ptr_gray_r[2];
  assign _02_ = w_ptr_p1_r[3] ^ w_ptr_p1_r[4];
  assign w_ptr_gray_n[3] = w_inc_i ? _02_ : w_ptr_gray_r[3];
  assign w_ptr_gray_n[4] = w_inc_i ? w_ptr_p1_r[4] : w_ptr_gray_r[4];
  assign _03_ = w_ptr_p1_r[1] & w_ptr_p1_r[0];
  assign w_ptr_p2[2] = _03_ ^ w_ptr_p1_r[2];
  assign _04_ = _03_ & w_ptr_p1_r[2];
  assign w_ptr_p2[3] = _04_ ^ w_ptr_p1_r[3];
  assign _05_ = ~(w_ptr_p1_r[3] & w_ptr_p1_r[2]);
  assign _06_ = _03_ & ~(_05_);
  assign w_ptr_p2[4] = _06_ ^ w_ptr_p1_r[4];
  
  always @(posedge w_clk_i)
    if (w_reset_i) w_ptr_r[0] <= 1'h0;
    else if (w_inc_i) w_ptr_r[0] <= w_ptr_p1_r[0];
  
  always @(posedge w_clk_i)
    if (w_reset_i) w_ptr_r[1] <= 1'h0;
    else if (w_inc_i) w_ptr_r[1] <= w_ptr_p1_r[1];
  
  always @(posedge w_clk_i)
    if (w_reset_i) w_ptr_r[2] <= 1'h0;
    else if (w_inc_i) w_ptr_r[2] <= w_ptr_p1_r[2];
  
  always @(posedge w_clk_i)
    if (w_reset_i) w_ptr_r[3] <= 1'h0;
    else if (w_inc_i) w_ptr_r[3] <= w_ptr_p1_r[3];
  
  always @(posedge w_clk_i)
    if (w_reset_i) w_ptr_r[4] <= 1'h0;
    else if (w_inc_i) w_ptr_r[4] <= w_ptr_p1_r[4];
  
  always @(posedge w_clk_i)
    if (w_reset_i) w_ptr_p1_r[0] <= 1'h1;
    else if (w_inc_i) w_ptr_p1_r[0] <= w_ptr_p2[0];
  
  always @(posedge w_clk_i)
    if (w_reset_i) w_ptr_p1_r[1] <= 1'h0;
    else if (w_inc_i) w_ptr_p1_r[1] <= w_ptr_p2[1];
  
  always @(posedge w_clk_i)
    if (w_reset_i) w_ptr_p1_r[2] <= 1'h0;
    else if (w_inc_i) w_ptr_p1_r[2] <= w_ptr_p2[2];
  
  always @(posedge w_clk_i)
    if (w_reset_i) w_ptr_p1_r[3] <= 1'h0;
    else if (w_inc_i) w_ptr_p1_r[3] <= w_ptr_p2[3];
  
  always @(posedge w_clk_i)
    if (w_reset_i) w_ptr_p1_r[4] <= 1'h0;
    else if (w_inc_i) w_ptr_p1_r[4] <= w_ptr_p2[4];
  (* module_not_derived = 32'd1 *)
  
  \$paramod$81d71a67a6c3ec5810ccd7d39edc413b905567d8\bsg_launch_sync_sync  ptr_sync (
    .iclk_data_i(w_ptr_gray_n),
    .iclk_data_o(w_ptr_gray_r),
    .iclk_i(w_clk_i),
    .iclk_reset_i(w_reset_i),
    .oclk_data_o(w_ptr_gray_r_rsync),
    .oclk_i(r_clk_i)
  );
  assign w_ptr_binary_r_o = w_ptr_r;
  assign w_ptr_gray_r_o = w_ptr_gray_r;
  assign w_ptr_gray_r_rsync_o = w_ptr_gray_r_rsync;
endmodule


module \$paramod$ebd14dd8a268c021911238da3b34c20e80d9de77\bsg_async_fifo (w_clk_i, w_reset_i, w_enq_i, w_data_i, w_full_o, r_clk_i, r_reset_i, r_deq_i, r_data_o, r_valid_o);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  
  input r_clk_i;
  wire r_clk_i;
  
  output [4:0] r_data_o;
  wire [4:0] r_data_o;
  
  wire [4:0] r_data_o_tmp;
  
  input r_deq_i;
  wire r_deq_i;
  
  (* unused_bits = "4" *)
  wire [4:0] r_ptr_binary_r;
  
  wire [4:0] r_ptr_gray_r;
  
  wire [4:0] r_ptr_gray_r_wsync;
  
  input r_reset_i;
  wire r_reset_i;
  
  output r_valid_o;
  wire r_valid_o;
  
  wire r_valid_o_tmp;
  
  input w_clk_i;
  wire w_clk_i;
  
  input [4:0] w_data_i;
  wire [4:0] w_data_i;
  
  input w_enq_i;
  wire w_enq_i;
  
  output w_full_o;
  wire w_full_o;
  
  (* unused_bits = "4" *)
  wire [4:0] w_ptr_binary_r;
  
  wire [4:0] w_ptr_gray_r;
  
  wire [4:0] w_ptr_gray_r_rsync;
  
  input w_reset_i;
  wire w_reset_i;
  assign _00_ = w_ptr_gray_r_rsync[0] ^ r_ptr_gray_r[0];
  assign _01_ = w_ptr_gray_r_rsync[1] ^ r_ptr_gray_r[1];
  assign _02_ = _01_ | _00_;
  assign _03_ = w_ptr_gray_r_rsync[2] ^ r_ptr_gray_r[2];
  assign _04_ = w_ptr_gray_r_rsync[3] ^ r_ptr_gray_r[3];
  assign _05_ = _04_ | _03_;
  assign _06_ = _05_ | _02_;
  assign _07_ = w_ptr_gray_r_rsync[4] ^ r_ptr_gray_r[4];
  assign r_valid_o_tmp = _07_ | _06_;
  assign _08_ = ~(r_ptr_gray_r_wsync[0] ^ w_ptr_gray_r[0]);
  assign _09_ = r_ptr_gray_r_wsync[1] ^ w_ptr_gray_r[1];
  assign _10_ = _08_ & ~(_09_);
  assign _11_ = r_ptr_gray_r_wsync[2] ^ w_ptr_gray_r[2];
  assign _12_ = ~(w_ptr_gray_r[3] ^ r_ptr_gray_r_wsync[3]);
  assign _13_ = _12_ | _11_;
  assign _14_ = _10_ & ~(_13_);
  assign _15_ = ~(w_ptr_gray_r[4] ^ r_ptr_gray_r_wsync[4]);
  assign w_full_o = _14_ & ~(_15_);
  (* module_not_derived = 32'd1 *)
  
  \$paramod$683c22efd5d3cb60d2cde43d79fcb9cc6f5269b6\bsg_mem_1r1w  MSYNC_1r1w (
    .r_addr_i(r_ptr_binary_r[3:0]),
    .r_data_o(r_data_o_tmp),
    .r_v_i(r_valid_o_tmp),
    .w_addr_i(w_ptr_binary_r[3:0]),
    .w_clk_i(w_clk_i),
    .w_data_i(w_data_i),
    .w_reset_i(w_reset_i),
    .w_v_i(w_enq_i)
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod$c6c3b0121cfc4a8cc5fab80a505acd5f6782fcb0\bsg_async_ptr_gray  bapg_rd (
    .r_clk_i(w_clk_i),
    .w_clk_i(r_clk_i),
    .w_inc_i(r_deq_i),
    .w_ptr_binary_r_o(r_ptr_binary_r),
    .w_ptr_gray_r_o(r_ptr_gray_r),
    .w_ptr_gray_r_rsync_o(r_ptr_gray_r_wsync),
    .w_reset_i(r_reset_i)
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod$c6c3b0121cfc4a8cc5fab80a505acd5f6782fcb0\bsg_async_ptr_gray  bapg_wr (
    .r_clk_i(r_clk_i),
    .w_clk_i(w_clk_i),
    .w_inc_i(w_enq_i),
    .w_ptr_binary_r_o(w_ptr_binary_r),
    .w_ptr_gray_r_o(w_ptr_gray_r),
    .w_ptr_gray_r_rsync_o(w_ptr_gray_r_rsync),
    .w_reset_i(w_reset_i)
  );
  assign r_data_o = r_data_o_tmp;
  assign r_valid_o = r_valid_o_tmp;
endmodule


module \$paramod\bsg_sync_sync\width_p=s32'00000000000000000000000000000001 (oclk_i, iclk_data_i, oclk_data_o);
  
  input iclk_data_i;
  wire iclk_data_i;
  
  output oclk_data_o;
  wire oclk_data_o;
  
  input oclk_i;
  wire oclk_i;
  (* module_not_derived = 32'd1 *)
  
  bsg_sync_sync_1_unit \z.bss  (
    .iclk_data_i(iclk_data_i),
    .oclk_data_o(oclk_data_o),
    .oclk_i(oclk_i)
  );
endmodule

(* top =  1  *)

module bsg_fsb_node_async_buffer(L_clk_i, L_reset_i, L_en_o, L_v_o, L_data_o, L_ready_i, L_v_i, L_data_i, L_yumi_o, R_clk_i, R_reset_i, R_en_i, R_v_i, R_data_i, R_ready_o, R_v_o, R_data_o, R_yumi_i);
  
  wire _0_;
  
  wire _1_;
  
  input L_clk_i;
  wire L_clk_i;
  
  input [4:0] L_data_i;
  wire [4:0] L_data_i;
  
  output [4:0] L_data_o;
  wire [4:0] L_data_o;
  
  output L_en_o;
  wire L_en_o;
  
  input L_ready_i;
  wire L_ready_i;
  
  input L_reset_i;
  wire L_reset_i;
  
  input L_v_i;
  wire L_v_i;
  
  output L_v_o;
  wire L_v_o;
  
  wire L_w_full_lo;
  
  output L_yumi_o;
  wire L_yumi_o;
  
  input R_clk_i;
  wire R_clk_i;
  
  input [4:0] R_data_i;
  wire [4:0] R_data_i;
  
  output [4:0] R_data_o;
  wire [4:0] R_data_o;
  
  input R_en_i;
  wire R_en_i;
  
  output R_ready_o;
  wire R_ready_o;
  
  input R_reset_i;
  wire R_reset_i;
  
  input R_v_i;
  wire R_v_i;
  
  output R_v_o;
  wire R_v_o;
  
  wire R_w_full_lo;
  
  input R_yumi_i;
  wire R_yumi_i;
  assign R_ready_o = ~R_w_full_lo;
  assign _0_ = R_v_i & ~(R_w_full_lo);
  assign _1_ = L_ready_i & L_v_o;
  assign L_yumi_o = L_v_i & ~(L_w_full_lo);
  (* module_not_derived = 32'd1 *)
  
  \$paramod\bsg_sync_sync\width_p=s32'00000000000000000000000000000001  fsb_en_sync (
    .iclk_data_i(R_en_i),
    .oclk_data_o(L_en_o),
    .oclk_i(L_clk_i)
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod$ebd14dd8a268c021911238da3b34c20e80d9de77\bsg_async_fifo  l2r_fifo (
    .r_clk_i(R_clk_i),
    .r_data_o(R_data_o),
    .r_deq_i(R_yumi_i),
    .r_reset_i(R_reset_i),
    .r_valid_o(R_v_o),
    .w_clk_i(L_clk_i),
    .w_data_i(L_data_i),
    .w_enq_i(L_yumi_o),
    .w_full_o(L_w_full_lo),
    .w_reset_i(L_reset_i)
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod$ebd14dd8a268c021911238da3b34c20e80d9de77\bsg_async_fifo  r2l_fifo (
    .r_clk_i(L_clk_i),
    .r_data_o(L_data_o),
    .r_deq_i(_1_),
    .r_reset_i(L_reset_i),
    .r_valid_o(L_v_o),
    .w_clk_i(R_clk_i),
    .w_data_i(R_data_i),
    .w_enq_i(_0_),
    .w_full_o(R_w_full_lo),
    .w_reset_i(R_reset_i)
  );
endmodule


module bsg_launch_sync_sync_posedge_5_unit(iclk_i, iclk_reset_i, oclk_i, iclk_data_i, iclk_data_o, oclk_data_o);
  
  reg [4:0] bsg_SYNC_1_r;
  
  reg [4:0] bsg_SYNC_2_r;
  
  reg [4:0] bsg_SYNC_LNCH_r;
  
  input [4:0] iclk_data_i;
  wire [4:0] iclk_data_i;
  
  output [4:0] iclk_data_o;
  wire [4:0] iclk_data_o;
  
  input iclk_i;
  wire iclk_i;
  
  input iclk_reset_i;
  wire iclk_reset_i;
  
  output [4:0] oclk_data_o;
  wire [4:0] oclk_data_o;
  
  input oclk_i;
  wire oclk_i;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge iclk_i)
    if (iclk_reset_i) bsg_SYNC_LNCH_r[0] <= 1'h0;
    else bsg_SYNC_LNCH_r[0] <= iclk_data_i[0];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge iclk_i)
    if (iclk_reset_i) bsg_SYNC_LNCH_r[1] <= 1'h0;
    else bsg_SYNC_LNCH_r[1] <= iclk_data_i[1];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge iclk_i)
    if (iclk_reset_i) bsg_SYNC_LNCH_r[2] <= 1'h0;
    else bsg_SYNC_LNCH_r[2] <= iclk_data_i[2];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge iclk_i)
    if (iclk_reset_i) bsg_SYNC_LNCH_r[3] <= 1'h0;
    else bsg_SYNC_LNCH_r[3] <= iclk_data_i[3];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge iclk_i)
    if (iclk_reset_i) bsg_SYNC_LNCH_r[4] <= 1'h0;
    else bsg_SYNC_LNCH_r[4] <= iclk_data_i[4];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge oclk_i)
    bsg_SYNC_2_r[0] <= bsg_SYNC_1_r[0];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge oclk_i)
    bsg_SYNC_2_r[1] <= bsg_SYNC_1_r[1];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge oclk_i)
    bsg_SYNC_2_r[2] <= bsg_SYNC_1_r[2];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge oclk_i)
    bsg_SYNC_2_r[3] <= bsg_SYNC_1_r[3];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge oclk_i)
    bsg_SYNC_2_r[4] <= bsg_SYNC_1_r[4];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge oclk_i)
    bsg_SYNC_1_r[0] <= bsg_SYNC_LNCH_r[0];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge oclk_i)
    bsg_SYNC_1_r[1] <= bsg_SYNC_LNCH_r[1];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge oclk_i)
    bsg_SYNC_1_r[2] <= bsg_SYNC_LNCH_r[2];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge oclk_i)
    bsg_SYNC_1_r[3] <= bsg_SYNC_LNCH_r[3];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge oclk_i)
    bsg_SYNC_1_r[4] <= bsg_SYNC_LNCH_r[4];
  assign iclk_data_o = bsg_SYNC_LNCH_r;
  assign oclk_data_o = bsg_SYNC_2_r;
endmodule


module bsg_sync_sync_1_unit(oclk_i, iclk_data_i, oclk_data_o);
  
  reg bsg_SYNC_1_r;
  
  reg bsg_SYNC_2_r;
  
  input iclk_data_i;
  wire iclk_data_i;
  
  output oclk_data_o;
  wire oclk_data_o;
  
  input oclk_i;
  wire oclk_i;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge oclk_i)
    bsg_SYNC_2_r <= bsg_SYNC_1_r;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge oclk_i)
    bsg_SYNC_1_r <= iclk_data_i;
  assign oclk_data_o = bsg_SYNC_2_r;
endmodule

