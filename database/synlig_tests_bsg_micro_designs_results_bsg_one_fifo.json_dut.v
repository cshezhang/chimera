/* Generated by Yosys 0.27+9 (git sha1 101d19bb6, gcc 11.2.0-7ubuntu2 -fPIC -Os) */


module \$paramod$8493069299d0d9ea553217db6f8d58197887aa91\bsg_dff_reset (clk_i, reset_i, data_i, data_o);
  
  input clk_i;
  wire clk_i;
  
  input data_i;
  wire data_i;
  
  output data_o;
  wire data_o;
  
  reg data_r;
  
  input reset_i;
  wire reset_i;
  
  always @(posedge clk_i)
    if (reset_i) data_r <= 1'h0;
    else data_r <= data_i;
  assign data_o = data_r;
endmodule


module \$paramod$f62e689d9819b845a780cd61c3e17919285caf1d\bsg_dff_en (clk_i, data_i, en_i, data_o);
  
  input clk_i;
  wire clk_i;
  
  input [15:0] data_i;
  wire [15:0] data_i;
  
  output [15:0] data_o;
  wire [15:0] data_o;
  
  reg [15:0] data_r;
  
  input en_i;
  wire en_i;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (en_i) data_r[3] <= data_i[3];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (en_i) data_r[4] <= data_i[4];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (en_i) data_r[5] <= data_i[5];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (en_i) data_r[6] <= data_i[6];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (en_i) data_r[7] <= data_i[7];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (en_i) data_r[8] <= data_i[8];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (en_i) data_r[9] <= data_i[9];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (en_i) data_r[10] <= data_i[10];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (en_i) data_r[11] <= data_i[11];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (en_i) data_r[12] <= data_i[12];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (en_i) data_r[13] <= data_i[13];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (en_i) data_r[14] <= data_i[14];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (en_i) data_r[15] <= data_i[15];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (en_i) data_r[0] <= data_i[0];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (en_i) data_r[1] <= data_i[1];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (en_i) data_r[2] <= data_i[2];
  assign data_o = data_r;
endmodule

(* top =  1  *)

module bsg_one_fifo(clk_i, reset_i, ready_o, data_i, v_i, v_o, data_o, yumi_i);
  
  wire _0_;
  wire _1_;
  
  wire _2_;
  
  input clk_i;
  wire clk_i;
  
  input [15:0] data_i;
  wire [15:0] data_i;
  
  output [15:0] data_o;
  wire [15:0] data_o;
  
  wire full_r;
  
  output ready_o;
  wire ready_o;
  
  input reset_i;
  wire reset_i;
  
  input v_i;
  wire v_i;
  
  output v_o;
  wire v_o;
  
  input yumi_i;
  wire yumi_i;
  assign ready_o = ~full_r;
  assign _1_ = ~yumi_i;
  assign _2_ = full_r ? _1_ : v_i;
  assign _0_ = v_i & ~(full_r);
  (* module_not_derived = 32'd1 *)
  
  \$paramod$f62e689d9819b845a780cd61c3e17919285caf1d\bsg_dff_en  dff (
    .clk_i(clk_i),
    .data_i(data_i),
    .data_o(data_o),
    .en_i(_0_)
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod$8493069299d0d9ea553217db6f8d58197887aa91\bsg_dff_reset  dff_full (
    .clk_i(clk_i),
    .data_i(_2_),
    .data_o(full_r),
    .reset_i(reset_i)
  );
  assign v_o = full_r;
endmodule

