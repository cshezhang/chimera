/* Generated by Yosys 0.27+9 (git sha1 101d19bb6, gcc 11.2.0-7ubuntu2 -fPIC -Os) */


module \$paramod$11bda2f50becc97825caa8f7acc17eee84fdde05\bsg_two_fifo (clk_i, reset_i, ready_o, data_i, v_i, v_o, data_o, yumi_i);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  
  wire _07_;
  
  wire _08_;
  
  wire _09_;
  
  wire _10_;
  
  input clk_i;
  wire clk_i;
  
  input [79:0] data_i;
  wire [79:0] data_i;
  
  output [79:0] data_o;
  wire [79:0] data_o;
  
  wire deq_i;
  
  reg empty_r;
  
  wire enq_i;
  
  reg full_r;
  
  reg head_r;
  
  output ready_o;
  wire ready_o;
  
  input reset_i;
  wire reset_i;
  
  reg tail_r;
  
  input v_i;
  wire v_i;
  
  output v_o;
  wire v_o;
  
  input yumi_i;
  wire yumi_i;
  assign _07_ = ~tail_r;
  assign _08_ = ~head_r;
  assign enq_i = v_i & ~(full_r);
  assign v_o = ~empty_r;
  assign ready_o = ~full_r;
  assign _00_ = empty_r & ~(enq_i);
  assign _01_ = full_r | ~(v_i);
  assign _02_ = full_r | ~(yumi_i);
  assign _03_ = _01_ & ~(_02_);
  assign _10_ = _03_ | _00_;
  assign _04_ = v_o & ~(_01_);
  assign _05_ = _04_ & ~(yumi_i);
  assign _06_ = full_r & ~(yumi_i);
  assign _09_ = _06_ | _05_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) full_r <= 1'h0;
    else full_r <= _09_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) head_r <= 1'h0;
    else if (yumi_i) head_r <= _08_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) tail_r <= 1'h0;
    else if (enq_i) tail_r <= _07_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) empty_r <= 1'h1;
    else empty_r <= _10_;
  (* module_not_derived = 32'd1 *)
  
  \$paramod$3ddbc0edc777767a2e14c0f71c03d62586df9af5\bsg_mem_1r1w  mem_1r1w (
    .r_addr_i(head_r),
    .r_data_o(data_o),
    .r_v_i(v_o),
    .w_addr_i(tail_r),
    .w_clk_i(clk_i),
    .w_data_i(data_i),
    .w_reset_i(reset_i),
    .w_v_i(enq_i)
  );
  assign deq_i = yumi_i;
endmodule


module \$paramod$3c757897249ebee399f60f505d9997dfa98ce400\bsg_mem_1r1w_synth (w_clk_i, w_reset_i, w_v_i, w_addr_i, w_data_i, r_v_i, r_addr_i, r_data_o);
  wire _000_;
  wire _001_;
  reg [79:0] \nz.mem[0] ;
  reg [79:0] \nz.mem[1] ;
  
  input r_addr_i;
  wire r_addr_i;
  
  output [79:0] r_data_o;
  wire [79:0] r_data_o;
  
  input r_v_i;
  wire r_v_i;
  
  (* unused_bits = "0" *)
  wire unused0;
  
  (* unused_bits = "0" *)
  wire unused1;
  
  input w_addr_i;
  wire w_addr_i;
  
  input w_clk_i;
  wire w_clk_i;
  
  input [79:0] w_data_i;
  wire [79:0] w_data_i;
  
  input w_reset_i;
  wire w_reset_i;
  
  input w_v_i;
  wire w_v_i;
  assign r_data_o[0] = r_addr_i ? \nz.mem[1] [0] : \nz.mem[0] [0];
  assign r_data_o[1] = r_addr_i ? \nz.mem[1] [1] : \nz.mem[0] [1];
  assign r_data_o[2] = r_addr_i ? \nz.mem[1] [2] : \nz.mem[0] [2];
  assign r_data_o[3] = r_addr_i ? \nz.mem[1] [3] : \nz.mem[0] [3];
  assign r_data_o[4] = r_addr_i ? \nz.mem[1] [4] : \nz.mem[0] [4];
  assign r_data_o[5] = r_addr_i ? \nz.mem[1] [5] : \nz.mem[0] [5];
  assign r_data_o[6] = r_addr_i ? \nz.mem[1] [6] : \nz.mem[0] [6];
  assign r_data_o[7] = r_addr_i ? \nz.mem[1] [7] : \nz.mem[0] [7];
  assign r_data_o[8] = r_addr_i ? \nz.mem[1] [8] : \nz.mem[0] [8];
  assign r_data_o[9] = r_addr_i ? \nz.mem[1] [9] : \nz.mem[0] [9];
  assign r_data_o[10] = r_addr_i ? \nz.mem[1] [10] : \nz.mem[0] [10];
  assign r_data_o[11] = r_addr_i ? \nz.mem[1] [11] : \nz.mem[0] [11];
  assign r_data_o[12] = r_addr_i ? \nz.mem[1] [12] : \nz.mem[0] [12];
  assign r_data_o[13] = r_addr_i ? \nz.mem[1] [13] : \nz.mem[0] [13];
  assign r_data_o[14] = r_addr_i ? \nz.mem[1] [14] : \nz.mem[0] [14];
  assign r_data_o[15] = r_addr_i ? \nz.mem[1] [15] : \nz.mem[0] [15];
  assign r_data_o[16] = r_addr_i ? \nz.mem[1] [16] : \nz.mem[0] [16];
  assign r_data_o[17] = r_addr_i ? \nz.mem[1] [17] : \nz.mem[0] [17];
  assign r_data_o[18] = r_addr_i ? \nz.mem[1] [18] : \nz.mem[0] [18];
  assign r_data_o[19] = r_addr_i ? \nz.mem[1] [19] : \nz.mem[0] [19];
  assign r_data_o[20] = r_addr_i ? \nz.mem[1] [20] : \nz.mem[0] [20];
  assign r_data_o[21] = r_addr_i ? \nz.mem[1] [21] : \nz.mem[0] [21];
  assign r_data_o[22] = r_addr_i ? \nz.mem[1] [22] : \nz.mem[0] [22];
  assign r_data_o[23] = r_addr_i ? \nz.mem[1] [23] : \nz.mem[0] [23];
  assign r_data_o[24] = r_addr_i ? \nz.mem[1] [24] : \nz.mem[0] [24];
  assign r_data_o[25] = r_addr_i ? \nz.mem[1] [25] : \nz.mem[0] [25];
  assign r_data_o[26] = r_addr_i ? \nz.mem[1] [26] : \nz.mem[0] [26];
  assign r_data_o[27] = r_addr_i ? \nz.mem[1] [27] : \nz.mem[0] [27];
  assign r_data_o[28] = r_addr_i ? \nz.mem[1] [28] : \nz.mem[0] [28];
  assign r_data_o[29] = r_addr_i ? \nz.mem[1] [29] : \nz.mem[0] [29];
  assign r_data_o[30] = r_addr_i ? \nz.mem[1] [30] : \nz.mem[0] [30];
  assign r_data_o[31] = r_addr_i ? \nz.mem[1] [31] : \nz.mem[0] [31];
  assign r_data_o[32] = r_addr_i ? \nz.mem[1] [32] : \nz.mem[0] [32];
  assign r_data_o[33] = r_addr_i ? \nz.mem[1] [33] : \nz.mem[0] [33];
  assign r_data_o[34] = r_addr_i ? \nz.mem[1] [34] : \nz.mem[0] [34];
  assign r_data_o[35] = r_addr_i ? \nz.mem[1] [35] : \nz.mem[0] [35];
  assign r_data_o[36] = r_addr_i ? \nz.mem[1] [36] : \nz.mem[0] [36];
  assign r_data_o[37] = r_addr_i ? \nz.mem[1] [37] : \nz.mem[0] [37];
  assign r_data_o[38] = r_addr_i ? \nz.mem[1] [38] : \nz.mem[0] [38];
  assign r_data_o[39] = r_addr_i ? \nz.mem[1] [39] : \nz.mem[0] [39];
  assign r_data_o[40] = r_addr_i ? \nz.mem[1] [40] : \nz.mem[0] [40];
  assign r_data_o[41] = r_addr_i ? \nz.mem[1] [41] : \nz.mem[0] [41];
  assign r_data_o[42] = r_addr_i ? \nz.mem[1] [42] : \nz.mem[0] [42];
  assign r_data_o[43] = r_addr_i ? \nz.mem[1] [43] : \nz.mem[0] [43];
  assign r_data_o[44] = r_addr_i ? \nz.mem[1] [44] : \nz.mem[0] [44];
  assign r_data_o[45] = r_addr_i ? \nz.mem[1] [45] : \nz.mem[0] [45];
  assign r_data_o[46] = r_addr_i ? \nz.mem[1] [46] : \nz.mem[0] [46];
  assign r_data_o[47] = r_addr_i ? \nz.mem[1] [47] : \nz.mem[0] [47];
  assign r_data_o[48] = r_addr_i ? \nz.mem[1] [48] : \nz.mem[0] [48];
  assign r_data_o[49] = r_addr_i ? \nz.mem[1] [49] : \nz.mem[0] [49];
  assign r_data_o[50] = r_addr_i ? \nz.mem[1] [50] : \nz.mem[0] [50];
  assign r_data_o[51] = r_addr_i ? \nz.mem[1] [51] : \nz.mem[0] [51];
  assign r_data_o[52] = r_addr_i ? \nz.mem[1] [52] : \nz.mem[0] [52];
  assign r_data_o[53] = r_addr_i ? \nz.mem[1] [53] : \nz.mem[0] [53];
  assign r_data_o[54] = r_addr_i ? \nz.mem[1] [54] : \nz.mem[0] [54];
  assign r_data_o[55] = r_addr_i ? \nz.mem[1] [55] : \nz.mem[0] [55];
  assign r_data_o[56] = r_addr_i ? \nz.mem[1] [56] : \nz.mem[0] [56];
  assign r_data_o[57] = r_addr_i ? \nz.mem[1] [57] : \nz.mem[0] [57];
  assign r_data_o[58] = r_addr_i ? \nz.mem[1] [58] : \nz.mem[0] [58];
  assign r_data_o[59] = r_addr_i ? \nz.mem[1] [59] : \nz.mem[0] [59];
  assign r_data_o[60] = r_addr_i ? \nz.mem[1] [60] : \nz.mem[0] [60];
  assign r_data_o[61] = r_addr_i ? \nz.mem[1] [61] : \nz.mem[0] [61];
  assign r_data_o[62] = r_addr_i ? \nz.mem[1] [62] : \nz.mem[0] [62];
  assign r_data_o[63] = r_addr_i ? \nz.mem[1] [63] : \nz.mem[0] [63];
  assign r_data_o[64] = r_addr_i ? \nz.mem[1] [64] : \nz.mem[0] [64];
  assign r_data_o[65] = r_addr_i ? \nz.mem[1] [65] : \nz.mem[0] [65];
  assign r_data_o[66] = r_addr_i ? \nz.mem[1] [66] : \nz.mem[0] [66];
  assign r_data_o[67] = r_addr_i ? \nz.mem[1] [67] : \nz.mem[0] [67];
  assign r_data_o[68] = r_addr_i ? \nz.mem[1] [68] : \nz.mem[0] [68];
  assign r_data_o[69] = r_addr_i ? \nz.mem[1] [69] : \nz.mem[0] [69];
  assign r_data_o[70] = r_addr_i ? \nz.mem[1] [70] : \nz.mem[0] [70];
  assign r_data_o[71] = r_addr_i ? \nz.mem[1] [71] : \nz.mem[0] [71];
  assign r_data_o[72] = r_addr_i ? \nz.mem[1] [72] : \nz.mem[0] [72];
  assign r_data_o[73] = r_addr_i ? \nz.mem[1] [73] : \nz.mem[0] [73];
  assign r_data_o[74] = r_addr_i ? \nz.mem[1] [74] : \nz.mem[0] [74];
  assign r_data_o[75] = r_addr_i ? \nz.mem[1] [75] : \nz.mem[0] [75];
  assign r_data_o[76] = r_addr_i ? \nz.mem[1] [76] : \nz.mem[0] [76];
  assign r_data_o[77] = r_addr_i ? \nz.mem[1] [77] : \nz.mem[0] [77];
  assign r_data_o[78] = r_addr_i ? \nz.mem[1] [78] : \nz.mem[0] [78];
  assign r_data_o[79] = r_addr_i ? \nz.mem[1] [79] : \nz.mem[0] [79];
  assign _001_ = w_v_i & w_addr_i;
  assign _000_ = w_v_i & ~(w_addr_i);
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [0] <= w_data_i[0];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [1] <= w_data_i[1];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [2] <= w_data_i[2];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [3] <= w_data_i[3];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [4] <= w_data_i[4];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [5] <= w_data_i[5];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [6] <= w_data_i[6];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [7] <= w_data_i[7];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [8] <= w_data_i[8];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [9] <= w_data_i[9];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [10] <= w_data_i[10];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [11] <= w_data_i[11];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [12] <= w_data_i[12];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [13] <= w_data_i[13];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [14] <= w_data_i[14];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [15] <= w_data_i[15];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [16] <= w_data_i[16];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [17] <= w_data_i[17];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [18] <= w_data_i[18];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [19] <= w_data_i[19];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [20] <= w_data_i[20];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [21] <= w_data_i[21];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [22] <= w_data_i[22];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [23] <= w_data_i[23];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [24] <= w_data_i[24];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [25] <= w_data_i[25];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [26] <= w_data_i[26];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [27] <= w_data_i[27];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [28] <= w_data_i[28];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [29] <= w_data_i[29];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [30] <= w_data_i[30];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [31] <= w_data_i[31];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [32] <= w_data_i[32];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [33] <= w_data_i[33];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [34] <= w_data_i[34];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [35] <= w_data_i[35];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [36] <= w_data_i[36];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [37] <= w_data_i[37];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [38] <= w_data_i[38];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [39] <= w_data_i[39];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [40] <= w_data_i[40];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [41] <= w_data_i[41];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [42] <= w_data_i[42];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [43] <= w_data_i[43];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [44] <= w_data_i[44];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [45] <= w_data_i[45];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [46] <= w_data_i[46];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [47] <= w_data_i[47];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [48] <= w_data_i[48];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [49] <= w_data_i[49];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [50] <= w_data_i[50];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [51] <= w_data_i[51];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [52] <= w_data_i[52];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [53] <= w_data_i[53];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [54] <= w_data_i[54];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [55] <= w_data_i[55];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [56] <= w_data_i[56];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [57] <= w_data_i[57];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [58] <= w_data_i[58];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [59] <= w_data_i[59];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [60] <= w_data_i[60];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [61] <= w_data_i[61];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [62] <= w_data_i[62];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [63] <= w_data_i[63];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [64] <= w_data_i[64];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [65] <= w_data_i[65];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [66] <= w_data_i[66];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [67] <= w_data_i[67];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [68] <= w_data_i[68];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [69] <= w_data_i[69];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [70] <= w_data_i[70];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [71] <= w_data_i[71];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [72] <= w_data_i[72];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [73] <= w_data_i[73];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [74] <= w_data_i[74];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [75] <= w_data_i[75];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [76] <= w_data_i[76];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [77] <= w_data_i[77];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [78] <= w_data_i[78];
  always @(posedge w_clk_i)
    if (_000_) \nz.mem[0] [79] <= w_data_i[79];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [0] <= w_data_i[0];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [1] <= w_data_i[1];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [2] <= w_data_i[2];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [3] <= w_data_i[3];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [4] <= w_data_i[4];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [5] <= w_data_i[5];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [6] <= w_data_i[6];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [7] <= w_data_i[7];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [8] <= w_data_i[8];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [9] <= w_data_i[9];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [10] <= w_data_i[10];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [11] <= w_data_i[11];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [12] <= w_data_i[12];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [13] <= w_data_i[13];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [14] <= w_data_i[14];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [15] <= w_data_i[15];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [16] <= w_data_i[16];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [17] <= w_data_i[17];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [18] <= w_data_i[18];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [19] <= w_data_i[19];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [20] <= w_data_i[20];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [21] <= w_data_i[21];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [22] <= w_data_i[22];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [23] <= w_data_i[23];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [24] <= w_data_i[24];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [25] <= w_data_i[25];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [26] <= w_data_i[26];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [27] <= w_data_i[27];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [28] <= w_data_i[28];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [29] <= w_data_i[29];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [30] <= w_data_i[30];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [31] <= w_data_i[31];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [32] <= w_data_i[32];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [33] <= w_data_i[33];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [34] <= w_data_i[34];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [35] <= w_data_i[35];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [36] <= w_data_i[36];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [37] <= w_data_i[37];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [38] <= w_data_i[38];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [39] <= w_data_i[39];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [40] <= w_data_i[40];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [41] <= w_data_i[41];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [42] <= w_data_i[42];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [43] <= w_data_i[43];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [44] <= w_data_i[44];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [45] <= w_data_i[45];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [46] <= w_data_i[46];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [47] <= w_data_i[47];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [48] <= w_data_i[48];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [49] <= w_data_i[49];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [50] <= w_data_i[50];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [51] <= w_data_i[51];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [52] <= w_data_i[52];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [53] <= w_data_i[53];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [54] <= w_data_i[54];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [55] <= w_data_i[55];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [56] <= w_data_i[56];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [57] <= w_data_i[57];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [58] <= w_data_i[58];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [59] <= w_data_i[59];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [60] <= w_data_i[60];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [61] <= w_data_i[61];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [62] <= w_data_i[62];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [63] <= w_data_i[63];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [64] <= w_data_i[64];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [65] <= w_data_i[65];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [66] <= w_data_i[66];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [67] <= w_data_i[67];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [68] <= w_data_i[68];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [69] <= w_data_i[69];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [70] <= w_data_i[70];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [71] <= w_data_i[71];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [72] <= w_data_i[72];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [73] <= w_data_i[73];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [74] <= w_data_i[74];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [75] <= w_data_i[75];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [76] <= w_data_i[76];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [77] <= w_data_i[77];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [78] <= w_data_i[78];
  always @(posedge w_clk_i)
    if (_001_) \nz.mem[1] [79] <= w_data_i[79];
  assign unused0 = w_reset_i;
  assign unused1 = r_v_i;
endmodule


module \$paramod$3ddbc0edc777767a2e14c0f71c03d62586df9af5\bsg_mem_1r1w (w_clk_i, w_reset_i, w_v_i, w_addr_i, w_data_i, r_v_i, r_addr_i, r_data_o);
  
  input r_addr_i;
  wire r_addr_i;
  
  output [79:0] r_data_o;
  wire [79:0] r_data_o;
  
  input r_v_i;
  wire r_v_i;
  
  input w_addr_i;
  wire w_addr_i;
  
  input w_clk_i;
  wire w_clk_i;
  
  input [79:0] w_data_i;
  wire [79:0] w_data_i;
  
  input w_reset_i;
  wire w_reset_i;
  
  input w_v_i;
  wire w_v_i;
  (* module_not_derived = 32'd1 *)
  
  \$paramod$3c757897249ebee399f60f505d9997dfa98ce400\bsg_mem_1r1w_synth  synth (
    .r_addr_i(r_addr_i),
    .r_data_o(r_data_o),
    .r_v_i(r_v_i),
    .w_addr_i(w_addr_i),
    .w_clk_i(w_clk_i),
    .w_data_i(w_data_i),
    .w_reset_i(w_reset_i),
    .w_v_i(w_v_i)
  );
endmodule


module \$paramod$704ca864e9dc4593e4dfd43b6d506dcb82b78ebf\bsg_mem_1r1w_synth (w_clk_i, w_reset_i, w_v_i, w_addr_i, w_data_i, r_v_i, r_addr_i, r_data_o);
  wire _00_;
  wire _01_;
  reg [2:0] \nz.mem[0] ;
  reg [2:0] \nz.mem[1] ;
  
  input r_addr_i;
  wire r_addr_i;
  
  output [2:0] r_data_o;
  wire [2:0] r_data_o;
  
  input r_v_i;
  wire r_v_i;
  
  (* unused_bits = "0" *)
  wire unused0;
  
  (* unused_bits = "0" *)
  wire unused1;
  
  input w_addr_i;
  wire w_addr_i;
  
  input w_clk_i;
  wire w_clk_i;
  
  input [2:0] w_data_i;
  wire [2:0] w_data_i;
  
  input w_reset_i;
  wire w_reset_i;
  
  input w_v_i;
  wire w_v_i;
  assign r_data_o[0] = r_addr_i ? \nz.mem[1] [0] : \nz.mem[0] [0];
  assign r_data_o[1] = r_addr_i ? \nz.mem[1] [1] : \nz.mem[0] [1];
  assign r_data_o[2] = r_addr_i ? \nz.mem[1] [2] : \nz.mem[0] [2];
  assign _01_ = w_v_i & w_addr_i;
  assign _00_ = w_v_i & ~(w_addr_i);
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [0] <= w_data_i[0];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [1] <= w_data_i[1];
  always @(posedge w_clk_i)
    if (_01_) \nz.mem[1] [2] <= w_data_i[2];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [0] <= w_data_i[0];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [1] <= w_data_i[1];
  always @(posedge w_clk_i)
    if (_00_) \nz.mem[0] [2] <= w_data_i[2];
  assign unused0 = w_reset_i;
  assign unused1 = r_v_i;
endmodule


module \$paramod$bbcc51185904e1ce22f559cfe4f30480b8517a01\bsg_counter_clear_up (clk_i, reset_i, clear_i, up_i, count_o);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  (* force_downto = 32'd1 *)
  
  (* unused_bits = "0" *)
  wire [2:0] _05_;
  
  input clear_i;
  wire clear_i;
  
  input clk_i;
  wire clk_i;
  
  output [2:0] count_o;
  reg [2:0] count_o;
  
  input reset_i;
  wire reset_i;
  
  input up_i;
  wire up_i;
  assign _00_ = up_i | clear_i;
  assign _01_ = reset_i | clear_i;
  assign _03_ = ~count_o[0];
  assign _02_ = clear_i ? up_i : _03_;
  assign _05_[1] = count_o[1] ^ count_o[0];
  assign _04_ = count_o[1] & count_o[0];
  assign _05_[2] = _04_ ^ count_o[2];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) count_o[0] <= 1'h0;
    else if (_00_) count_o[0] <= _02_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (_01_) count_o[1] <= 1'h0;
    else if (up_i) count_o[1] <= _05_[1];
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (_01_) count_o[2] <= 1'h0;
    else if (up_i) count_o[2] <= _05_[2];
endmodule


module \$paramod$d7d12879cee7959016ede920ee9046d5074dbb20\bsg_two_fifo (clk_i, reset_i, ready_o, data_i, v_i, v_o, data_o, yumi_i);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  
  wire _07_;
  
  wire _08_;
  
  wire _09_;
  
  wire _10_;
  
  input clk_i;
  wire clk_i;
  
  input [2:0] data_i;
  wire [2:0] data_i;
  
  output [2:0] data_o;
  wire [2:0] data_o;
  
  wire deq_i;
  
  reg empty_r;
  
  wire enq_i;
  
  reg full_r;
  
  reg head_r;
  
  output ready_o;
  wire ready_o;
  
  input reset_i;
  wire reset_i;
  
  reg tail_r;
  
  input v_i;
  wire v_i;
  
  output v_o;
  wire v_o;
  
  input yumi_i;
  wire yumi_i;
  assign ready_o = ~full_r;
  assign _07_ = ~tail_r;
  assign _08_ = ~head_r;
  assign enq_i = v_i & ~(full_r);
  assign v_o = ~empty_r;
  assign _00_ = full_r | ~(v_i);
  assign _01_ = v_o & ~(_00_);
  assign _02_ = _01_ & ~(yumi_i);
  assign _03_ = full_r & ~(yumi_i);
  assign _09_ = _03_ | _02_;
  assign _04_ = empty_r & ~(enq_i);
  assign _05_ = full_r | ~(yumi_i);
  assign _06_ = _00_ & ~(_05_);
  assign _10_ = _06_ | _04_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) full_r <= 1'h0;
    else full_r <= _09_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) head_r <= 1'h0;
    else if (yumi_i) head_r <= _08_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) tail_r <= 1'h0;
    else if (enq_i) tail_r <= _07_;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    if (reset_i) empty_r <= 1'h1;
    else empty_r <= _10_;
  (* module_not_derived = 32'd1 *)
  
  \$paramod$db70e96aa6d1d12979cf281734e295ddfb32ec81\bsg_mem_1r1w  mem_1r1w (
    .r_addr_i(head_r),
    .r_data_o(data_o),
    .r_v_i(v_o),
    .w_addr_i(tail_r),
    .w_clk_i(clk_i),
    .w_data_i(data_i),
    .w_reset_i(reset_i),
    .w_v_i(enq_i)
  );
  assign deq_i = yumi_i;
endmodule


module \$paramod$db67a245a3ad97a08d96fb23a56df8343c208dce\bsg_mux (data_i, sel_i, data_o);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  
  input [79:0] data_i;
  wire [79:0] data_i;
  
  output [15:0] data_o;
  wire [15:0] data_o;
  
  input [2:0] sel_i;
  wire [2:0] sel_i;
  assign _000_ = ~sel_i[1];
  assign _001_ = sel_i[0] ? data_i[16] : data_i[0];
  assign _002_ = sel_i[0] ? data_i[48] : data_i[32];
  assign _003_ = sel_i[1] ? _002_ : _001_;
  assign _004_ = sel_i[0] | ~(data_i[64]);
  assign _005_ = _000_ & ~(_004_);
  assign data_o[0] = sel_i[2] ? _005_ : _003_;
  assign _006_ = sel_i[0] ? data_i[17] : data_i[1];
  assign _007_ = sel_i[0] ? data_i[49] : data_i[33];
  assign _008_ = sel_i[1] ? _007_ : _006_;
  assign _009_ = sel_i[0] | ~(data_i[65]);
  assign _010_ = _000_ & ~(_009_);
  assign data_o[1] = sel_i[2] ? _010_ : _008_;
  assign _011_ = sel_i[0] ? data_i[18] : data_i[2];
  assign _012_ = sel_i[0] ? data_i[50] : data_i[34];
  assign _013_ = sel_i[1] ? _012_ : _011_;
  assign _014_ = sel_i[0] | ~(data_i[66]);
  assign _015_ = _000_ & ~(_014_);
  assign data_o[2] = sel_i[2] ? _015_ : _013_;
  assign _016_ = sel_i[0] ? data_i[19] : data_i[3];
  assign _017_ = sel_i[0] ? data_i[51] : data_i[35];
  assign _018_ = sel_i[1] ? _017_ : _016_;
  assign _019_ = sel_i[0] | ~(data_i[67]);
  assign _020_ = _000_ & ~(_019_);
  assign data_o[3] = sel_i[2] ? _020_ : _018_;
  assign _021_ = sel_i[0] ? data_i[20] : data_i[4];
  assign _022_ = sel_i[0] ? data_i[52] : data_i[36];
  assign _023_ = sel_i[1] ? _022_ : _021_;
  assign _024_ = sel_i[0] | ~(data_i[68]);
  assign _025_ = _000_ & ~(_024_);
  assign data_o[4] = sel_i[2] ? _025_ : _023_;
  assign _026_ = sel_i[0] ? data_i[21] : data_i[5];
  assign _027_ = sel_i[0] ? data_i[53] : data_i[37];
  assign _028_ = sel_i[1] ? _027_ : _026_;
  assign _029_ = sel_i[0] | ~(data_i[69]);
  assign _030_ = _000_ & ~(_029_);
  assign data_o[5] = sel_i[2] ? _030_ : _028_;
  assign _031_ = sel_i[0] ? data_i[22] : data_i[6];
  assign _032_ = sel_i[0] ? data_i[54] : data_i[38];
  assign _033_ = sel_i[1] ? _032_ : _031_;
  assign _034_ = sel_i[0] | ~(data_i[70]);
  assign _035_ = _000_ & ~(_034_);
  assign data_o[6] = sel_i[2] ? _035_ : _033_;
  assign _036_ = sel_i[0] ? data_i[23] : data_i[7];
  assign _037_ = sel_i[0] ? data_i[55] : data_i[39];
  assign _038_ = sel_i[1] ? _037_ : _036_;
  assign _039_ = sel_i[0] | ~(data_i[71]);
  assign _040_ = _000_ & ~(_039_);
  assign data_o[7] = sel_i[2] ? _040_ : _038_;
  assign _041_ = sel_i[0] ? data_i[24] : data_i[8];
  assign _042_ = sel_i[0] ? data_i[56] : data_i[40];
  assign _043_ = sel_i[1] ? _042_ : _041_;
  assign _044_ = sel_i[0] | ~(data_i[72]);
  assign _045_ = _000_ & ~(_044_);
  assign data_o[8] = sel_i[2] ? _045_ : _043_;
  assign _046_ = sel_i[0] ? data_i[25] : data_i[9];
  assign _047_ = sel_i[0] ? data_i[57] : data_i[41];
  assign _048_ = sel_i[1] ? _047_ : _046_;
  assign _049_ = sel_i[0] | ~(data_i[73]);
  assign _050_ = _000_ & ~(_049_);
  assign data_o[9] = sel_i[2] ? _050_ : _048_;
  assign _051_ = sel_i[0] ? data_i[26] : data_i[10];
  assign _052_ = sel_i[0] ? data_i[58] : data_i[42];
  assign _053_ = sel_i[1] ? _052_ : _051_;
  assign _054_ = sel_i[0] | ~(data_i[74]);
  assign _055_ = _000_ & ~(_054_);
  assign data_o[10] = sel_i[2] ? _055_ : _053_;
  assign _056_ = sel_i[0] ? data_i[27] : data_i[11];
  assign _057_ = sel_i[0] ? data_i[59] : data_i[43];
  assign _058_ = sel_i[1] ? _057_ : _056_;
  assign _059_ = sel_i[0] | ~(data_i[75]);
  assign _060_ = _000_ & ~(_059_);
  assign data_o[11] = sel_i[2] ? _060_ : _058_;
  assign _061_ = sel_i[0] ? data_i[28] : data_i[12];
  assign _062_ = sel_i[0] ? data_i[60] : data_i[44];
  assign _063_ = sel_i[1] ? _062_ : _061_;
  assign _064_ = sel_i[0] | ~(data_i[76]);
  assign _065_ = _000_ & ~(_064_);
  assign data_o[12] = sel_i[2] ? _065_ : _063_;
  assign _066_ = sel_i[0] ? data_i[29] : data_i[13];
  assign _067_ = sel_i[0] ? data_i[61] : data_i[45];
  assign _068_ = sel_i[1] ? _067_ : _066_;
  assign _069_ = sel_i[0] | ~(data_i[77]);
  assign _070_ = _000_ & ~(_069_);
  assign data_o[13] = sel_i[2] ? _070_ : _068_;
  assign _071_ = sel_i[0] ? data_i[30] : data_i[14];
  assign _072_ = sel_i[0] ? data_i[62] : data_i[46];
  assign _073_ = sel_i[1] ? _072_ : _071_;
  assign _074_ = sel_i[0] | ~(data_i[78]);
  assign _075_ = _000_ & ~(_074_);
  assign data_o[14] = sel_i[2] ? _075_ : _073_;
  assign _076_ = sel_i[0] ? data_i[31] : data_i[15];
  assign _077_ = sel_i[0] ? data_i[63] : data_i[47];
  assign _078_ = sel_i[1] ? _077_ : _076_;
  assign _079_ = sel_i[0] | ~(data_i[79]);
  assign _080_ = _000_ & ~(_079_);
  assign data_o[15] = sel_i[2] ? _080_ : _078_;
endmodule


module \$paramod$db70e96aa6d1d12979cf281734e295ddfb32ec81\bsg_mem_1r1w (w_clk_i, w_reset_i, w_v_i, w_addr_i, w_data_i, r_v_i, r_addr_i, r_data_o);
  
  input r_addr_i;
  wire r_addr_i;
  
  output [2:0] r_data_o;
  wire [2:0] r_data_o;
  
  input r_v_i;
  wire r_v_i;
  
  input w_addr_i;
  wire w_addr_i;
  
  input w_clk_i;
  wire w_clk_i;
  
  input [2:0] w_data_i;
  wire [2:0] w_data_i;
  
  input w_reset_i;
  wire w_reset_i;
  
  input w_v_i;
  wire w_v_i;
  (* module_not_derived = 32'd1 *)
  
  \$paramod$704ca864e9dc4593e4dfd43b6d506dcb82b78ebf\bsg_mem_1r1w_synth  synth (
    .r_addr_i(r_addr_i),
    .r_data_o(r_data_o),
    .r_v_i(r_v_i),
    .w_addr_i(w_addr_i),
    .w_clk_i(w_clk_i),
    .w_data_i(w_data_i),
    .w_reset_i(w_reset_i),
    .w_v_i(w_v_i)
  );
endmodule

(* top =  1  *)

module bsg_parallel_in_serial_out_dynamic(clk_i, reset_i, v_i, len_i, data_i, ready_o, v_o, len_v_o, data_o, yumi_i);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  
  wire clear_li;
  
  input clk_i;
  wire clk_i;
  
  wire [2:0] count_lo;
  
  wire [2:0] count_r;
  
  wire count_r_is_zero;
  
  input [79:0] data_i;
  wire [79:0] data_i;
  
  output [15:0] data_o;
  wire [15:0] data_o;
  
  wire [79:0] fifo_data_lo;
  
  wire go_fifo_yumi_li;
  
  input [2:0] len_i;
  wire [2:0] len_i;
  
  wire [2:0] len_lo;
  
  output len_v_o;
  wire len_v_o;
  
  output ready_o;
  wire ready_o;
  
  input reset_i;
  wire reset_i;
  
  wire up_li;
  
  input v_i;
  wire v_i;
  
  output v_o;
  wire v_o;
  
  input yumi_i;
  wire yumi_i;
  assign _00_ = ~(count_lo[1] | count_lo[0]);
  assign len_v_o = _00_ & ~(count_lo[2]);
  assign _01_ = ~(len_lo[0] ^ count_lo[0]);
  assign _02_ = len_lo[1] ^ count_lo[1];
  assign _03_ = _01_ & ~(_02_);
  assign _04_ = len_lo[2] ^ count_lo[2];
  assign _05_ = _04_ | ~(_03_);
  assign up_li = _05_ & yumi_i;
  assign clear_li = yumi_i & ~(_05_);
  (* module_not_derived = 32'd1 *)
  
  \$paramod$bbcc51185904e1ce22f559cfe4f30480b8517a01\bsg_counter_clear_up  ctr (
    .clear_i(clear_li),
    .clk_i(clk_i),
    .count_o(count_lo),
    .reset_i(reset_i),
    .up_i(up_li)
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod$11bda2f50becc97825caa8f7acc17eee84fdde05\bsg_two_fifo  data_fifo (
    .clk_i(clk_i),
    .data_i(data_i),
    .data_o(fifo_data_lo),
    .reset_i(reset_i),
    .v_i(v_i),
    .yumi_i(clear_li)
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod$db67a245a3ad97a08d96fb23a56df8343c208dce\bsg_mux  data_mux (
    .data_i(fifo_data_lo),
    .data_o(data_o),
    .sel_i(count_lo)
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod$d7d12879cee7959016ede920ee9046d5074dbb20\bsg_two_fifo  go_fifo (
    .clk_i(clk_i),
    .data_i(len_i),
    .data_o(len_lo),
    .ready_o(ready_o),
    .reset_i(reset_i),
    .v_i(v_i),
    .v_o(v_o),
    .yumi_i(clear_li)
  );
  assign count_r = count_lo;
  assign count_r_is_zero = len_v_o;
  assign go_fifo_yumi_li = clear_li;
endmodule

