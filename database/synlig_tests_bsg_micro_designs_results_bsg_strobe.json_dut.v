/* Generated by Yosys 0.27+9 (git sha1 101d19bb6, gcc 11.2.0-7ubuntu2 -fPIC -Os) */


module \$paramod$0e0517b65236a6823f143bc21a6345324ebccf3e\bsg_dff (clk_i, data_i, data_o);
  
  input clk_i;
  wire clk_i;
  
  input [15:0] data_i;
  wire [15:0] data_i;
  
  output [15:0] data_o;
  wire [15:0] data_o;
  
  reg [15:0] data_r;
  
  always @(posedge clk_i)
    data_r[0] <= data_i[0];
  
  always @(posedge clk_i)
    data_r[1] <= data_i[1];
  
  always @(posedge clk_i)
    data_r[2] <= data_i[2];
  
  always @(posedge clk_i)
    data_r[3] <= data_i[3];
  
  always @(posedge clk_i)
    data_r[4] <= data_i[4];
  
  always @(posedge clk_i)
    data_r[5] <= data_i[5];
  
  always @(posedge clk_i)
    data_r[6] <= data_i[6];
  
  always @(posedge clk_i)
    data_r[7] <= data_i[7];
  
  always @(posedge clk_i)
    data_r[8] <= data_i[8];
  
  always @(posedge clk_i)
    data_r[9] <= data_i[9];
  
  always @(posedge clk_i)
    data_r[10] <= data_i[10];
  
  always @(posedge clk_i)
    data_r[11] <= data_i[11];
  
  always @(posedge clk_i)
    data_r[12] <= data_i[12];
  
  always @(posedge clk_i)
    data_r[13] <= data_i[13];
  
  always @(posedge clk_i)
    data_r[14] <= data_i[14];
  
  always @(posedge clk_i)
    data_r[15] <= data_i[15];
  assign data_o = data_r;
endmodule


module \$paramod$43f0e49a5e1b017711ee7edab36666dc4ec5e86b\bsg_buf (i, o);
  
  input i;
  wire i;
  
  output o;
  wire o;
  assign o = i;
endmodule


module \$paramod$45358d7e6e5f49be8c613b75ca94b10930bd5f7f\bsg_muxi2_gatestack (i0, i1, i2, o);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  
  input [15:0] i0;
  wire [15:0] i0;
  
  input [15:0] i1;
  wire [15:0] i1;
  
  input [15:0] i2;
  wire [15:0] i2;
  
  output [15:0] o;
  wire [15:0] o;
  assign _08_ = ~i0[0];
  assign _09_ = ~i1[0];
  assign o[0] = i2[0] ? _09_ : _08_;
  assign _10_ = ~i0[1];
  assign _11_ = ~i1[1];
  assign o[1] = i2[1] ? _11_ : _10_;
  assign _12_ = ~i0[2];
  assign _13_ = ~i1[2];
  assign o[2] = i2[2] ? _13_ : _12_;
  assign _14_ = ~i0[3];
  assign _15_ = ~i1[3];
  assign o[3] = i2[3] ? _15_ : _14_;
  assign _16_ = ~i0[4];
  assign _17_ = ~i1[4];
  assign o[4] = i2[4] ? _17_ : _16_;
  assign _18_ = ~i0[5];
  assign _19_ = ~i1[5];
  assign o[5] = i2[5] ? _19_ : _18_;
  assign _20_ = ~i0[6];
  assign _21_ = ~i1[6];
  assign o[6] = i2[6] ? _21_ : _20_;
  assign _22_ = ~i0[7];
  assign _23_ = ~i1[7];
  assign o[7] = i2[7] ? _23_ : _22_;
  assign _24_ = ~i0[8];
  assign _25_ = ~i1[8];
  assign o[8] = i2[8] ? _25_ : _24_;
  assign _26_ = ~i0[9];
  assign _27_ = ~i1[9];
  assign o[9] = i2[9] ? _27_ : _26_;
  assign _28_ = ~i0[10];
  assign _29_ = ~i1[10];
  assign o[10] = i2[10] ? _29_ : _28_;
  assign _30_ = ~i0[11];
  assign _31_ = ~i1[11];
  assign o[11] = i2[11] ? _31_ : _30_;
  assign _00_ = ~i0[12];
  assign _01_ = ~i1[12];
  assign o[12] = i2[12] ? _01_ : _00_;
  assign _02_ = ~i0[13];
  assign _03_ = ~i1[13];
  assign o[13] = i2[13] ? _03_ : _02_;
  assign _04_ = ~i0[14];
  assign _05_ = ~i1[14];
  assign o[14] = i2[14] ? _05_ : _04_;
  assign _06_ = ~i0[15];
  assign _07_ = ~i1[15];
  assign o[15] = i2[15] ? _07_ : _06_;
endmodule


module \$paramod$45358d7e6e5f49be8c613b75ca94b10930bd5f7f\bsg_nand (a_i, b_i, o);
  
  input [15:0] a_i;
  wire [15:0] a_i;
  
  input [15:0] b_i;
  wire [15:0] b_i;
  
  output [15:0] o;
  wire [15:0] o;
  assign o[0] = ~(b_i[0] & a_i[0]);
  assign o[1] = ~(b_i[1] & a_i[1]);
  assign o[2] = ~(b_i[2] & a_i[2]);
  assign o[3] = ~(b_i[3] & a_i[3]);
  assign o[4] = ~(b_i[4] & a_i[4]);
  assign o[5] = ~(b_i[5] & a_i[5]);
  assign o[6] = ~(b_i[6] & a_i[6]);
  assign o[7] = ~(b_i[7] & a_i[7]);
  assign o[8] = ~(b_i[8] & a_i[8]);
  assign o[9] = ~(b_i[9] & a_i[9]);
  assign o[10] = ~(b_i[10] & a_i[10]);
  assign o[11] = ~(b_i[11] & a_i[11]);
  assign o[12] = ~(b_i[12] & a_i[12]);
  assign o[13] = ~(b_i[13] & a_i[13]);
  assign o[14] = ~(b_i[14] & a_i[14]);
  assign o[15] = ~(b_i[15] & a_i[15]);
endmodule


module \$paramod$45358d7e6e5f49be8c613b75ca94b10930bd5f7f\bsg_xnor (a_i, b_i, o);
  
  input [15:0] a_i;
  wire [15:0] a_i;
  
  input [15:0] b_i;
  wire [15:0] b_i;
  
  output [15:0] o;
  wire [15:0] o;
  assign o[0] = ~(b_i[0] ^ a_i[0]);
  assign o[1] = ~(b_i[1] ^ a_i[1]);
  assign o[2] = ~(b_i[2] ^ a_i[2]);
  assign o[3] = ~(b_i[3] ^ a_i[3]);
  assign o[4] = ~(b_i[4] ^ a_i[4]);
  assign o[5] = ~(b_i[5] ^ a_i[5]);
  assign o[6] = ~(b_i[6] ^ a_i[6]);
  assign o[7] = ~(b_i[7] ^ a_i[7]);
  assign o[8] = ~(b_i[8] ^ a_i[8]);
  assign o[9] = ~(b_i[9] ^ a_i[9]);
  assign o[10] = ~(b_i[10] ^ a_i[10]);
  assign o[11] = ~(b_i[11] ^ a_i[11]);
  assign o[12] = ~(b_i[12] ^ a_i[12]);
  assign o[13] = ~(b_i[13] ^ a_i[13]);
  assign o[14] = ~(b_i[14] ^ a_i[14]);
  assign o[15] = ~(b_i[15] ^ a_i[15]);
endmodule


module \$paramod$7e1456a20b4312856b6803aa0c327fd7ec9187e8\bsg_dff (clk_i, data_i, data_o);
  
  input clk_i;
  wire clk_i;
  
  input [14:0] data_i;
  wire [14:0] data_i;
  
  output [14:0] data_o;
  wire [14:0] data_o;
  
  reg [14:0] data_r;
  
  always @(posedge clk_i)
    data_r[0] <= data_i[0];
  
  always @(posedge clk_i)
    data_r[1] <= data_i[1];
  
  always @(posedge clk_i)
    data_r[2] <= data_i[2];
  
  always @(posedge clk_i)
    data_r[3] <= data_i[3];
  
  always @(posedge clk_i)
    data_r[4] <= data_i[4];
  
  always @(posedge clk_i)
    data_r[5] <= data_i[5];
  
  always @(posedge clk_i)
    data_r[6] <= data_i[6];
  
  always @(posedge clk_i)
    data_r[7] <= data_i[7];
  
  always @(posedge clk_i)
    data_r[8] <= data_i[8];
  
  always @(posedge clk_i)
    data_r[9] <= data_i[9];
  
  always @(posedge clk_i)
    data_r[10] <= data_i[10];
  
  always @(posedge clk_i)
    data_r[11] <= data_i[11];
  
  always @(posedge clk_i)
    data_r[12] <= data_i[12];
  
  always @(posedge clk_i)
    data_r[13] <= data_i[13];
  
  always @(posedge clk_i)
    data_r[14] <= data_i[14];
  assign data_o = data_r;
endmodule


module \$paramod$86de2d8900c3e7989c687fc57a97c66415f58ff4\bsg_nor3 (a_i, b_i, c_i, o);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  
  input [14:0] a_i;
  wire [14:0] a_i;
  
  input [14:0] b_i;
  wire [14:0] b_i;
  
  input [14:0] c_i;
  wire [14:0] c_i;
  
  output [14:0] o;
  wire [14:0] o;
  assign _00_ = ~(b_i[0] | a_i[0]);
  assign o[0] = _00_ & ~(c_i[0]);
  assign _01_ = ~(b_i[1] | a_i[1]);
  assign o[1] = _01_ & ~(c_i[1]);
  assign _02_ = ~(b_i[2] | a_i[2]);
  assign o[2] = _02_ & ~(c_i[2]);
  assign _03_ = ~(b_i[3] | a_i[3]);
  assign o[3] = _03_ & ~(c_i[3]);
  assign _04_ = ~(b_i[4] | a_i[4]);
  assign o[4] = _04_ & ~(c_i[4]);
  assign _05_ = ~(b_i[5] | a_i[5]);
  assign o[5] = _05_ & ~(c_i[5]);
  assign _06_ = ~(b_i[6] | a_i[6]);
  assign o[6] = _06_ & ~(c_i[6]);
  assign _07_ = ~(b_i[7] | a_i[7]);
  assign o[7] = _07_ & ~(c_i[7]);
  assign _08_ = ~(b_i[8] | a_i[8]);
  assign o[8] = _08_ & ~(c_i[8]);
  assign _09_ = ~(b_i[9] | a_i[9]);
  assign o[9] = _09_ & ~(c_i[9]);
  assign _10_ = ~(b_i[10] | a_i[10]);
  assign o[10] = _10_ & ~(c_i[10]);
  assign _11_ = ~(b_i[11] | a_i[11]);
  assign o[11] = _11_ & ~(c_i[11]);
  assign _12_ = ~(b_i[12] | a_i[12]);
  assign o[12] = _12_ & ~(c_i[12]);
  assign _13_ = ~(b_i[13] | a_i[13]);
  assign o[13] = _13_ & ~(c_i[13]);
  assign _14_ = ~(b_i[14] | a_i[14]);
  assign o[14] = _14_ & ~(c_i[14]);
endmodule


module \$paramod$a93730897edd170d7b0f8fa83a16f5b9fdff7114\bsg_reduce (i, o);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  
  input [15:0] i;
  wire [15:0] i;
  
  output o;
  wire o;
  assign _00_ = i[1] & i[0];
  assign _01_ = ~(i[3] & i[2]);
  assign _02_ = _00_ & ~(_01_);
  assign _03_ = ~(i[5] & i[4]);
  assign _04_ = ~(i[7] & i[6]);
  assign _05_ = _04_ | _03_;
  assign _06_ = _02_ & ~(_05_);
  assign _07_ = ~(i[9] & i[8]);
  assign _08_ = ~(i[11] & i[10]);
  assign _09_ = _08_ | _07_;
  assign _10_ = ~(i[13] & i[12]);
  assign _11_ = ~(i[15] & i[14]);
  assign _12_ = _11_ | _10_;
  assign _13_ = _12_ | _09_;
  assign o = _06_ & ~(_13_);
endmodule

(* top =  1  *)

module bsg_strobe(clk_i, reset_r_i, init_val_r_i, strobe_r_o);
  
  wire [14:0] C_n;
  
  (* unused_bits = "15" *)
  wire [15:0] C_n_prereset;
  
  wire [14:0] C_r;
  
  wire [15:0] S_n;
  
  wire [15:0] S_n_n;
  
  wire [15:0] S_r;
  
  input clk_i;
  wire clk_i;
  
  input [15:0] init_val_r_i;
  wire [15:0] init_val_r_i;
  
  wire new_val;
  
  input reset_r_i;
  wire reset_r_i;
  
  wire strobe_n;
  
  wire strobe_n_buf;
  
  output strobe_r_o;
  reg strobe_r_o;
  assign new_val = strobe_n | reset_r_i;
  (* \always_ff  = 32'd1 *)
  
  always @(posedge clk_i)
    strobe_r_o <= strobe_n_buf;
  (* module_not_derived = 32'd1 *)
  
  \$paramod$7e1456a20b4312856b6803aa0c327fd7ec9187e8\bsg_dff  C_reg (
    .clk_i(clk_i),
    .data_i(C_n),
    .data_o(C_r)
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod$0e0517b65236a6823f143bc21a6345324ebccf3e\bsg_dff  S_reg (
    .clk_i(clk_i),
    .data_i(S_n_n),
    .data_o(S_r)
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod$a93730897edd170d7b0f8fa83a16f5b9fdff7114\bsg_reduce  andr (
    .i(S_r),
    .o(strobe_n)
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod$45358d7e6e5f49be8c613b75ca94b10930bd5f7f\bsg_muxi2_gatestack  muxi2_S_n (
    .i0(S_n),
    .i1(init_val_r_i),
    .i2({ new_val, new_val, new_val, new_val, new_val, new_val, new_val, new_val, new_val, new_val, new_val, new_val, new_val, new_val, new_val, new_val }),
    .o(S_n_n)
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod$45358d7e6e5f49be8c613b75ca94b10930bd5f7f\bsg_nand  nand_C_n (
    .a_i(S_r),
    .b_i({ C_r, 1'h1 }),
    .o(C_n_prereset)
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod$86de2d8900c3e7989c687fc57a97c66415f58ff4\bsg_nor3  nor3_C_n (
    .a_i({ strobe_n_buf, strobe_n_buf, strobe_n_buf, strobe_n_buf, strobe_n_buf, strobe_n_buf, strobe_n_buf, strobe_n_buf, strobe_n_buf, strobe_n_buf, strobe_n_buf, strobe_n_buf, strobe_n_buf, strobe_n_buf, strobe_n_buf }),
    .b_i(C_n_prereset[14:0]),
    .c_i({ reset_r_i, reset_r_i, reset_r_i, reset_r_i, reset_r_i, reset_r_i, reset_r_i, reset_r_i, reset_r_i, reset_r_i, reset_r_i, reset_r_i, reset_r_i, reset_r_i, reset_r_i }),
    .o(C_n)
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod$43f0e49a5e1b017711ee7edab36666dc4ec5e86b\bsg_buf  strobe_buf_gate (
    .i(strobe_n),
    .o(strobe_n_buf)
  );
  (* module_not_derived = 32'd1 *)
  
  \$paramod$45358d7e6e5f49be8c613b75ca94b10930bd5f7f\bsg_xnor  xnor_S_n (
    .a_i(S_r),
    .b_i({ C_r, 1'h1 }),
    .o(S_n)
  );
endmodule

