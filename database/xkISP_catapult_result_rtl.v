// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    10.5/861329 Production Release
//  HLS Date:       Wed Mar  4 15:45:36 PST 2020
// 
//  Generated by:   yanheng.lu@alish-rs-cs08.eng.t-head.cn
//  Generated date: Fri Jul 15 17:06:23 2022
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    tpg_core_staller
// ------------------------------------------------------------------


module tpg_core_staller (
  core_wen, src_rsci_wen_comp, dst_rsci_wen_comp
);
  output core_wen;
  input src_rsci_wen_comp;
  input dst_rsci_wen_comp;



  // Interconnect Declarations for Component Instantiations 
  assign core_wen = src_rsci_wen_comp & dst_rsci_wen_comp;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    tpg_core_dst_rsci_dst_wait_dp
// ------------------------------------------------------------------


module tpg_core_dst_rsci_dst_wait_dp (
  clk, arst_n, dst_rsci_oswt, dst_rsci_wen_comp, dst_rsci_biwt, dst_rsci_bdwt, dst_rsci_bcwt
);
  input clk;
  input arst_n;
  input dst_rsci_oswt;
  output dst_rsci_wen_comp;
  input dst_rsci_biwt;
  input dst_rsci_bdwt;
  output dst_rsci_bcwt;
  reg dst_rsci_bcwt;



  // Interconnect Declarations for Component Instantiations 
  assign dst_rsci_wen_comp = (~ dst_rsci_oswt) | dst_rsci_biwt | dst_rsci_bcwt;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dst_rsci_bcwt <= 1'b0;
    end
    else begin
      dst_rsci_bcwt <= ~((~(dst_rsci_bcwt | dst_rsci_biwt)) | dst_rsci_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    tpg_core_dst_rsci_dst_wait_ctrl
// ------------------------------------------------------------------


module tpg_core_dst_rsci_dst_wait_ctrl (
  core_wen, dst_rsci_oswt, dst_rsci_irdy, dst_rsci_biwt, dst_rsci_bdwt, dst_rsci_bcwt,
      dst_rsci_ivld_core_sct
);
  input core_wen;
  input dst_rsci_oswt;
  input dst_rsci_irdy;
  output dst_rsci_biwt;
  output dst_rsci_bdwt;
  input dst_rsci_bcwt;
  output dst_rsci_ivld_core_sct;


  // Interconnect Declarations
  wire dst_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign dst_rsci_bdwt = dst_rsci_oswt & core_wen;
  assign dst_rsci_biwt = dst_rsci_ogwt & dst_rsci_irdy;
  assign dst_rsci_ogwt = dst_rsci_oswt & (~ dst_rsci_bcwt);
  assign dst_rsci_ivld_core_sct = dst_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    tpg_core_src_rsci_src_wait_dp
// ------------------------------------------------------------------


module tpg_core_src_rsci_src_wait_dp (
  clk, arst_n, src_rsci_oswt, src_rsci_wen_comp, src_rsci_idat_mxwt, src_rsci_biwt,
      src_rsci_bdwt, src_rsci_bcwt, src_rsci_idat
);
  input clk;
  input arst_n;
  input src_rsci_oswt;
  output src_rsci_wen_comp;
  output [11:0] src_rsci_idat_mxwt;
  input src_rsci_biwt;
  input src_rsci_bdwt;
  output src_rsci_bcwt;
  reg src_rsci_bcwt;
  input [11:0] src_rsci_idat;


  // Interconnect Declarations
  reg [11:0] src_rsci_idat_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign src_rsci_wen_comp = (~ src_rsci_oswt) | src_rsci_biwt | src_rsci_bcwt;
  assign src_rsci_idat_mxwt = MUX_v_12_2_2(src_rsci_idat, src_rsci_idat_bfwt, src_rsci_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      src_rsci_bcwt <= 1'b0;
    end
    else begin
      src_rsci_bcwt <= ~((~(src_rsci_bcwt | src_rsci_biwt)) | src_rsci_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      src_rsci_idat_bfwt <= 12'b000000000000;
    end
    else if ( src_rsci_biwt ) begin
      src_rsci_idat_bfwt <= src_rsci_idat;
    end
  end

  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [0:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    tpg_core_src_rsci_src_wait_ctrl
// ------------------------------------------------------------------


module tpg_core_src_rsci_src_wait_ctrl (
  core_wen, src_rsci_oswt, src_rsci_biwt, src_rsci_bdwt, src_rsci_bcwt, src_rsci_irdy_core_sct,
      src_rsci_ivld
);
  input core_wen;
  input src_rsci_oswt;
  output src_rsci_biwt;
  output src_rsci_bdwt;
  input src_rsci_bcwt;
  output src_rsci_irdy_core_sct;
  input src_rsci_ivld;


  // Interconnect Declarations
  wire src_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign src_rsci_bdwt = src_rsci_oswt & core_wen;
  assign src_rsci_biwt = src_rsci_ogwt & src_rsci_ivld;
  assign src_rsci_ogwt = src_rsci_oswt & (~ src_rsci_bcwt);
  assign src_rsci_irdy_core_sct = src_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dgain_core_staller
// ------------------------------------------------------------------


module dgain_core_staller (
  core_wen, src_rsci_wen_comp, dst_rsci_wen_comp
);
  output core_wen;
  input src_rsci_wen_comp;
  input dst_rsci_wen_comp;



  // Interconnect Declarations for Component Instantiations 
  assign core_wen = src_rsci_wen_comp & dst_rsci_wen_comp;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dgain_core_dst_rsci_dst_wait_dp
// ------------------------------------------------------------------


module dgain_core_dst_rsci_dst_wait_dp (
  clk, arst_n, dst_rsci_oswt, dst_rsci_wen_comp, dst_rsci_biwt, dst_rsci_bdwt, dst_rsci_bcwt
);
  input clk;
  input arst_n;
  input dst_rsci_oswt;
  output dst_rsci_wen_comp;
  input dst_rsci_biwt;
  input dst_rsci_bdwt;
  output dst_rsci_bcwt;
  reg dst_rsci_bcwt;



  // Interconnect Declarations for Component Instantiations 
  assign dst_rsci_wen_comp = (~ dst_rsci_oswt) | dst_rsci_biwt | dst_rsci_bcwt;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dst_rsci_bcwt <= 1'b0;
    end
    else begin
      dst_rsci_bcwt <= ~((~(dst_rsci_bcwt | dst_rsci_biwt)) | dst_rsci_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dgain_core_dst_rsci_dst_wait_ctrl
// ------------------------------------------------------------------


module dgain_core_dst_rsci_dst_wait_ctrl (
  core_wen, dst_rsci_oswt, dst_rsci_irdy, dst_rsci_biwt, dst_rsci_bdwt, dst_rsci_bcwt,
      dst_rsci_ivld_core_sct
);
  input core_wen;
  input dst_rsci_oswt;
  input dst_rsci_irdy;
  output dst_rsci_biwt;
  output dst_rsci_bdwt;
  input dst_rsci_bcwt;
  output dst_rsci_ivld_core_sct;


  // Interconnect Declarations
  wire dst_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign dst_rsci_bdwt = dst_rsci_oswt & core_wen;
  assign dst_rsci_biwt = dst_rsci_ogwt & dst_rsci_irdy;
  assign dst_rsci_ogwt = dst_rsci_oswt & (~ dst_rsci_bcwt);
  assign dst_rsci_ivld_core_sct = dst_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dgain_core_src_rsci_src_wait_dp
// ------------------------------------------------------------------


module dgain_core_src_rsci_src_wait_dp (
  clk, arst_n, src_rsci_oswt, src_rsci_wen_comp, src_rsci_idat_mxwt, src_rsci_biwt,
      src_rsci_bdwt, src_rsci_bcwt, src_rsci_idat
);
  input clk;
  input arst_n;
  input src_rsci_oswt;
  output src_rsci_wen_comp;
  output [11:0] src_rsci_idat_mxwt;
  input src_rsci_biwt;
  input src_rsci_bdwt;
  output src_rsci_bcwt;
  reg src_rsci_bcwt;
  input [11:0] src_rsci_idat;


  // Interconnect Declarations
  reg [11:0] src_rsci_idat_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign src_rsci_wen_comp = (~ src_rsci_oswt) | src_rsci_biwt | src_rsci_bcwt;
  assign src_rsci_idat_mxwt = MUX_v_12_2_2(src_rsci_idat, src_rsci_idat_bfwt, src_rsci_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      src_rsci_bcwt <= 1'b0;
    end
    else begin
      src_rsci_bcwt <= ~((~(src_rsci_bcwt | src_rsci_biwt)) | src_rsci_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      src_rsci_idat_bfwt <= 12'b000000000000;
    end
    else if ( src_rsci_biwt ) begin
      src_rsci_idat_bfwt <= src_rsci_idat;
    end
  end

  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [0:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    dgain_core_src_rsci_src_wait_ctrl
// ------------------------------------------------------------------


module dgain_core_src_rsci_src_wait_ctrl (
  core_wen, src_rsci_oswt, src_rsci_biwt, src_rsci_bdwt, src_rsci_bcwt, src_rsci_irdy_core_sct,
      src_rsci_ivld
);
  input core_wen;
  input src_rsci_oswt;
  output src_rsci_biwt;
  output src_rsci_bdwt;
  input src_rsci_bcwt;
  output src_rsci_irdy_core_sct;
  input src_rsci_ivld;


  // Interconnect Declarations
  wire src_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign src_rsci_bdwt = src_rsci_oswt & core_wen;
  assign src_rsci_biwt = src_rsci_ogwt & src_rsci_ivld;
  assign src_rsci_ogwt = src_rsci_oswt & (~ src_rsci_bcwt);
  assign src_rsci_irdy_core_sct = src_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    lsc_core_staller
// ------------------------------------------------------------------


module lsc_core_staller (
  core_wen, src_rsci_wen_comp, dst_rsci_wen_comp
);
  output core_wen;
  input src_rsci_wen_comp;
  input dst_rsci_wen_comp;



  // Interconnect Declarations for Component Instantiations 
  assign core_wen = src_rsci_wen_comp & dst_rsci_wen_comp;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    lsc_core_dst_rsci_dst_wait_dp
// ------------------------------------------------------------------


module lsc_core_dst_rsci_dst_wait_dp (
  clk, arst_n, dst_rsci_oswt, dst_rsci_wen_comp, dst_rsci_biwt, dst_rsci_bdwt, dst_rsci_bcwt
);
  input clk;
  input arst_n;
  input dst_rsci_oswt;
  output dst_rsci_wen_comp;
  input dst_rsci_biwt;
  input dst_rsci_bdwt;
  output dst_rsci_bcwt;
  reg dst_rsci_bcwt;



  // Interconnect Declarations for Component Instantiations 
  assign dst_rsci_wen_comp = (~ dst_rsci_oswt) | dst_rsci_biwt | dst_rsci_bcwt;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dst_rsci_bcwt <= 1'b0;
    end
    else begin
      dst_rsci_bcwt <= ~((~(dst_rsci_bcwt | dst_rsci_biwt)) | dst_rsci_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    lsc_core_dst_rsci_dst_wait_ctrl
// ------------------------------------------------------------------


module lsc_core_dst_rsci_dst_wait_ctrl (
  core_wen, dst_rsci_oswt, dst_rsci_irdy, dst_rsci_biwt, dst_rsci_bdwt, dst_rsci_bcwt,
      dst_rsci_ivld_core_sct
);
  input core_wen;
  input dst_rsci_oswt;
  input dst_rsci_irdy;
  output dst_rsci_biwt;
  output dst_rsci_bdwt;
  input dst_rsci_bcwt;
  output dst_rsci_ivld_core_sct;


  // Interconnect Declarations
  wire dst_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign dst_rsci_bdwt = dst_rsci_oswt & core_wen;
  assign dst_rsci_biwt = dst_rsci_ogwt & dst_rsci_irdy;
  assign dst_rsci_ogwt = dst_rsci_oswt & (~ dst_rsci_bcwt);
  assign dst_rsci_ivld_core_sct = dst_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    lsc_core_src_rsci_src_wait_dp
// ------------------------------------------------------------------


module lsc_core_src_rsci_src_wait_dp (
  clk, arst_n, src_rsci_oswt, src_rsci_wen_comp, src_rsci_idat_mxwt, src_rsci_biwt,
      src_rsci_bdwt, src_rsci_bcwt, src_rsci_idat
);
  input clk;
  input arst_n;
  input src_rsci_oswt;
  output src_rsci_wen_comp;
  output [11:0] src_rsci_idat_mxwt;
  input src_rsci_biwt;
  input src_rsci_bdwt;
  output src_rsci_bcwt;
  reg src_rsci_bcwt;
  input [11:0] src_rsci_idat;


  // Interconnect Declarations
  reg [11:0] src_rsci_idat_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign src_rsci_wen_comp = (~ src_rsci_oswt) | src_rsci_biwt | src_rsci_bcwt;
  assign src_rsci_idat_mxwt = MUX_v_12_2_2(src_rsci_idat, src_rsci_idat_bfwt, src_rsci_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      src_rsci_bcwt <= 1'b0;
    end
    else begin
      src_rsci_bcwt <= ~((~(src_rsci_bcwt | src_rsci_biwt)) | src_rsci_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      src_rsci_idat_bfwt <= 12'b000000000000;
    end
    else if ( src_rsci_biwt ) begin
      src_rsci_idat_bfwt <= src_rsci_idat;
    end
  end

  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [0:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    lsc_core_src_rsci_src_wait_ctrl
// ------------------------------------------------------------------


module lsc_core_src_rsci_src_wait_ctrl (
  core_wen, src_rsci_oswt, src_rsci_biwt, src_rsci_bdwt, src_rsci_bcwt, src_rsci_irdy_core_sct,
      src_rsci_ivld
);
  input core_wen;
  input src_rsci_oswt;
  output src_rsci_biwt;
  output src_rsci_bdwt;
  input src_rsci_bcwt;
  output src_rsci_irdy_core_sct;
  input src_rsci_ivld;


  // Interconnect Declarations
  wire src_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign src_rsci_bdwt = src_rsci_oswt & core_wen;
  assign src_rsci_biwt = src_rsci_ogwt & src_rsci_ivld;
  assign src_rsci_ogwt = src_rsci_oswt & (~ src_rsci_bcwt);
  assign src_rsci_irdy_core_sct = src_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dpc_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_87_12_14_16384_16384_12_5_gen
// ------------------------------------------------------------------


module dpc_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_87_12_14_16384_16384_12_5_gen
    (
  we, d, wadr, q, re, radr, radr_d, wadr_d, d_d, we_d, re_d, q_d, port_0_r_ram_ir_internal_RMASK_B_d,
      port_1_w_ram_ir_internal_WMASK_B_d
);
  output we;
  output [11:0] d;
  output [13:0] wadr;
  input [11:0] q;
  output re;
  output [13:0] radr;
  input [13:0] radr_d;
  input [13:0] wadr_d;
  input [11:0] d_d;
  input we_d;
  input re_d;
  output [11:0] q_d;
  input port_0_r_ram_ir_internal_RMASK_B_d;
  input port_1_w_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign we = (port_1_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
  assign q_d = q;
  assign re = (port_0_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dpc_core_staller
// ------------------------------------------------------------------


module dpc_core_staller (
  clk, arst_n, core_wen, core_wten, src_rsci_wen_comp, dst_rsci_wen_comp
);
  input clk;
  input arst_n;
  output core_wen;
  output core_wten;
  input src_rsci_wen_comp;
  input dst_rsci_wen_comp;


  // Interconnect Declarations
  reg core_wten_reg;


  // Interconnect Declarations for Component Instantiations 
  assign core_wen = src_rsci_wen_comp & dst_rsci_wen_comp;
  assign core_wten = core_wten_reg;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      core_wten_reg <= 1'b0;
    end
    else begin
      core_wten_reg <= ~ core_wen;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dpc_core_lineBuffer_rsci_1_lineBuffer_rsc_wait_dp
// ------------------------------------------------------------------


module dpc_core_lineBuffer_rsci_1_lineBuffer_rsc_wait_dp (
  clk, arst_n, lineBuffer_rsci_q_d, lineBuffer_rsci_q_d_mxwt, lineBuffer_rsci_biwt,
      lineBuffer_rsci_bdwt
);
  input clk;
  input arst_n;
  input [11:0] lineBuffer_rsci_q_d;
  output [11:0] lineBuffer_rsci_q_d_mxwt;
  input lineBuffer_rsci_biwt;
  input lineBuffer_rsci_bdwt;


  // Interconnect Declarations
  reg lineBuffer_rsci_bcwt;
  reg [11:0] lineBuffer_rsci_q_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign lineBuffer_rsci_q_d_mxwt = MUX_v_12_2_2(lineBuffer_rsci_q_d, lineBuffer_rsci_q_d_bfwt,
      lineBuffer_rsci_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lineBuffer_rsci_bcwt <= 1'b0;
    end
    else begin
      lineBuffer_rsci_bcwt <= ~((~(lineBuffer_rsci_bcwt | lineBuffer_rsci_biwt))
          | lineBuffer_rsci_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lineBuffer_rsci_q_d_bfwt <= 12'b000000000000;
    end
    else if ( lineBuffer_rsci_biwt ) begin
      lineBuffer_rsci_q_d_bfwt <= lineBuffer_rsci_q_d;
    end
  end

  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [0:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    dpc_core_lineBuffer_rsci_1_lineBuffer_rsc_wait_ctrl
// ------------------------------------------------------------------


module dpc_core_lineBuffer_rsci_1_lineBuffer_rsc_wait_ctrl (
  core_wen, core_wten, lineBuffer_rsci_oswt, lineBuffer_rsci_biwt, lineBuffer_rsci_bdwt,
      lineBuffer_rsci_we_d_core_sct_pff, lineBuffer_rsci_iswt0_1_pff, lineBuffer_rsci_re_d_core_sct_pff,
      lineBuffer_rsci_oswt_pff
);
  input core_wen;
  input core_wten;
  input lineBuffer_rsci_oswt;
  output lineBuffer_rsci_biwt;
  output lineBuffer_rsci_bdwt;
  output lineBuffer_rsci_we_d_core_sct_pff;
  input lineBuffer_rsci_iswt0_1_pff;
  output lineBuffer_rsci_re_d_core_sct_pff;
  input lineBuffer_rsci_oswt_pff;



  // Interconnect Declarations for Component Instantiations 
  assign lineBuffer_rsci_bdwt = lineBuffer_rsci_oswt & core_wen;
  assign lineBuffer_rsci_biwt = (~ core_wten) & lineBuffer_rsci_oswt;
  assign lineBuffer_rsci_we_d_core_sct_pff = lineBuffer_rsci_iswt0_1_pff & core_wen;
  assign lineBuffer_rsci_re_d_core_sct_pff = lineBuffer_rsci_oswt_pff & core_wen;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dpc_core_dst_rsci_dst_wait_dp
// ------------------------------------------------------------------


module dpc_core_dst_rsci_dst_wait_dp (
  clk, arst_n, dst_rsci_oswt, dst_rsci_wen_comp, dst_rsci_biwt, dst_rsci_bdwt, dst_rsci_bcwt
);
  input clk;
  input arst_n;
  input dst_rsci_oswt;
  output dst_rsci_wen_comp;
  input dst_rsci_biwt;
  input dst_rsci_bdwt;
  output dst_rsci_bcwt;
  reg dst_rsci_bcwt;



  // Interconnect Declarations for Component Instantiations 
  assign dst_rsci_wen_comp = (~ dst_rsci_oswt) | dst_rsci_biwt | dst_rsci_bcwt;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dst_rsci_bcwt <= 1'b0;
    end
    else begin
      dst_rsci_bcwt <= ~((~(dst_rsci_bcwt | dst_rsci_biwt)) | dst_rsci_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dpc_core_dst_rsci_dst_wait_ctrl
// ------------------------------------------------------------------


module dpc_core_dst_rsci_dst_wait_ctrl (
  core_wen, dst_rsci_oswt, dst_rsci_irdy, dst_rsci_biwt, dst_rsci_bdwt, dst_rsci_bcwt,
      dst_rsci_ivld_core_sct
);
  input core_wen;
  input dst_rsci_oswt;
  input dst_rsci_irdy;
  output dst_rsci_biwt;
  output dst_rsci_bdwt;
  input dst_rsci_bcwt;
  output dst_rsci_ivld_core_sct;


  // Interconnect Declarations
  wire dst_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign dst_rsci_bdwt = dst_rsci_oswt & core_wen;
  assign dst_rsci_biwt = dst_rsci_ogwt & dst_rsci_irdy;
  assign dst_rsci_ogwt = dst_rsci_oswt & (~ dst_rsci_bcwt);
  assign dst_rsci_ivld_core_sct = dst_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dpc_core_src_rsci_src_wait_dp
// ------------------------------------------------------------------


module dpc_core_src_rsci_src_wait_dp (
  clk, arst_n, src_rsci_oswt, src_rsci_wen_comp, src_rsci_idat_mxwt, src_rsci_biwt,
      src_rsci_bdwt, src_rsci_bcwt, src_rsci_idat
);
  input clk;
  input arst_n;
  input src_rsci_oswt;
  output src_rsci_wen_comp;
  output [11:0] src_rsci_idat_mxwt;
  input src_rsci_biwt;
  input src_rsci_bdwt;
  output src_rsci_bcwt;
  reg src_rsci_bcwt;
  input [11:0] src_rsci_idat;


  // Interconnect Declarations
  reg [11:0] src_rsci_idat_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign src_rsci_wen_comp = (~ src_rsci_oswt) | src_rsci_biwt | src_rsci_bcwt;
  assign src_rsci_idat_mxwt = MUX_v_12_2_2(src_rsci_idat, src_rsci_idat_bfwt, src_rsci_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      src_rsci_bcwt <= 1'b0;
    end
    else begin
      src_rsci_bcwt <= ~((~(src_rsci_bcwt | src_rsci_biwt)) | src_rsci_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      src_rsci_idat_bfwt <= 12'b000000000000;
    end
    else if ( src_rsci_biwt ) begin
      src_rsci_idat_bfwt <= src_rsci_idat;
    end
  end

  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [0:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    dpc_core_src_rsci_src_wait_ctrl
// ------------------------------------------------------------------


module dpc_core_src_rsci_src_wait_ctrl (
  core_wen, src_rsci_oswt, src_rsci_biwt, src_rsci_bdwt, src_rsci_bcwt, src_rsci_irdy_core_sct,
      src_rsci_ivld
);
  input core_wen;
  input src_rsci_oswt;
  output src_rsci_biwt;
  output src_rsci_bdwt;
  input src_rsci_bcwt;
  output src_rsci_irdy_core_sct;
  input src_rsci_ivld;


  // Interconnect Declarations
  wire src_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign src_rsci_bdwt = src_rsci_oswt & core_wen;
  assign src_rsci_biwt = src_rsci_ogwt & src_rsci_ivld;
  assign src_rsci_ogwt = src_rsci_oswt & (~ src_rsci_bcwt);
  assign src_rsci_irdy_core_sct = src_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_553_12_12_4096_4096_12_5_gen
// ------------------------------------------------------------------


module isp_rawdns_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_553_12_12_4096_4096_12_5_gen
    (
  we, d, wadr, q, re, radr, radr_d, wadr_d, d_d, we_d, re_d, q_d, port_0_r_ram_ir_internal_RMASK_B_d,
      port_1_w_ram_ir_internal_WMASK_B_d
);
  output we;
  output [11:0] d;
  output [11:0] wadr;
  input [11:0] q;
  output re;
  output [11:0] radr;
  input [11:0] radr_d;
  input [11:0] wadr_d;
  input [11:0] d_d;
  input we_d;
  input re_d;
  output [11:0] q_d;
  input port_0_r_ram_ir_internal_RMASK_B_d;
  input port_1_w_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign we = (port_1_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
  assign q_d = q;
  assign re = (port_0_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_552_12_12_4096_4096_12_5_gen
// ------------------------------------------------------------------


module isp_rawdns_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_552_12_12_4096_4096_12_5_gen
    (
  we, d, wadr, q, re, radr, radr_d, wadr_d, d_d, we_d, re_d, q_d, port_0_r_ram_ir_internal_RMASK_B_d,
      port_1_w_ram_ir_internal_WMASK_B_d
);
  output we;
  output [11:0] d;
  output [11:0] wadr;
  input [11:0] q;
  output re;
  output [11:0] radr;
  input [11:0] radr_d;
  input [11:0] wadr_d;
  input [11:0] d_d;
  input we_d;
  input re_d;
  output [11:0] q_d;
  input port_0_r_ram_ir_internal_RMASK_B_d;
  input port_1_w_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign we = (port_1_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
  assign q_d = q;
  assign re = (port_0_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_551_12_12_4096_4096_12_5_gen
// ------------------------------------------------------------------


module isp_rawdns_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_551_12_12_4096_4096_12_5_gen
    (
  we, d, wadr, q, re, radr, radr_d, wadr_d, d_d, we_d, re_d, q_d, port_0_r_ram_ir_internal_RMASK_B_d,
      port_1_w_ram_ir_internal_WMASK_B_d
);
  output we;
  output [11:0] d;
  output [11:0] wadr;
  input [11:0] q;
  output re;
  output [11:0] radr;
  input [11:0] radr_d;
  input [11:0] wadr_d;
  input [11:0] d_d;
  input we_d;
  input re_d;
  output [11:0] q_d;
  input port_0_r_ram_ir_internal_RMASK_B_d;
  input port_1_w_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign we = (port_1_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
  assign q_d = q;
  assign re = (port_0_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_550_12_12_4096_4096_12_5_gen
// ------------------------------------------------------------------


module isp_rawdns_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_550_12_12_4096_4096_12_5_gen
    (
  we, d, wadr, q, re, radr, radr_d, wadr_d, d_d, we_d, re_d, q_d, port_0_r_ram_ir_internal_RMASK_B_d,
      port_1_w_ram_ir_internal_WMASK_B_d
);
  output we;
  output [11:0] d;
  output [11:0] wadr;
  input [11:0] q;
  output re;
  output [11:0] radr;
  input [11:0] radr_d;
  input [11:0] wadr_d;
  input [11:0] d_d;
  input we_d;
  input re_d;
  output [11:0] q_d;
  input port_0_r_ram_ir_internal_RMASK_B_d;
  input port_1_w_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign we = (port_1_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
  assign q_d = q;
  assign re = (port_0_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_549_12_12_4096_4096_12_5_gen
// ------------------------------------------------------------------


module isp_rawdns_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_549_12_12_4096_4096_12_5_gen
    (
  we, d, wadr, q, re, radr, radr_d, wadr_d, d_d, we_d, re_d, q_d, port_0_r_ram_ir_internal_RMASK_B_d,
      port_1_w_ram_ir_internal_WMASK_B_d
);
  output we;
  output [11:0] d;
  output [11:0] wadr;
  input [11:0] q;
  output re;
  output [11:0] radr;
  input [11:0] radr_d;
  input [11:0] wadr_d;
  input [11:0] d_d;
  input we_d;
  input re_d;
  output [11:0] q_d;
  input port_0_r_ram_ir_internal_RMASK_B_d;
  input port_1_w_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign we = (port_1_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
  assign q_d = q;
  assign re = (port_0_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_548_12_12_4096_4096_12_5_gen
// ------------------------------------------------------------------


module isp_rawdns_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_548_12_12_4096_4096_12_5_gen
    (
  we, d, wadr, q, re, radr, radr_d, wadr_d, d_d, we_d, re_d, q_d, port_0_r_ram_ir_internal_RMASK_B_d,
      port_1_w_ram_ir_internal_WMASK_B_d
);
  output we;
  output [11:0] d;
  output [11:0] wadr;
  input [11:0] q;
  output re;
  output [11:0] radr;
  input [11:0] radr_d;
  input [11:0] wadr_d;
  input [11:0] d_d;
  input we_d;
  input re_d;
  output [11:0] q_d;
  input port_0_r_ram_ir_internal_RMASK_B_d;
  input port_1_w_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign we = (port_1_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
  assign q_d = q;
  assign re = (port_0_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_547_12_12_4096_4096_12_5_gen
// ------------------------------------------------------------------


module isp_rawdns_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_547_12_12_4096_4096_12_5_gen
    (
  we, d, wadr, q, re, radr, radr_d, wadr_d, d_d, we_d, re_d, q_d, port_0_r_ram_ir_internal_RMASK_B_d,
      port_1_w_ram_ir_internal_WMASK_B_d
);
  output we;
  output [11:0] d;
  output [11:0] wadr;
  input [11:0] q;
  output re;
  output [11:0] radr;
  input [11:0] radr_d;
  input [11:0] wadr_d;
  input [11:0] d_d;
  input we_d;
  input re_d;
  output [11:0] q_d;
  input port_0_r_ram_ir_internal_RMASK_B_d;
  input port_1_w_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign we = (port_1_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
  assign q_d = q;
  assign re = (port_0_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_546_12_12_4096_4096_12_5_gen
// ------------------------------------------------------------------


module isp_rawdns_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_546_12_12_4096_4096_12_5_gen
    (
  we, d, wadr, q, re, radr, radr_d, wadr_d, d_d, we_d, re_d, q_d, port_0_r_ram_ir_internal_RMASK_B_d,
      port_1_w_ram_ir_internal_WMASK_B_d
);
  output we;
  output [11:0] d;
  output [11:0] wadr;
  input [11:0] q;
  output re;
  output [11:0] radr;
  input [11:0] radr_d;
  input [11:0] wadr_d;
  input [11:0] d_d;
  input we_d;
  input re_d;
  output [11:0] q_d;
  input port_0_r_ram_ir_internal_RMASK_B_d;
  input port_1_w_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign we = (port_1_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
  assign q_d = q;
  assign re = (port_0_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_545_12_12_4096_4096_12_5_gen
// ------------------------------------------------------------------


module isp_rawdns_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_545_12_12_4096_4096_12_5_gen
    (
  we, d, wadr, q, re, radr, radr_d, wadr_d, d_d, we_d, re_d, q_d, port_0_r_ram_ir_internal_RMASK_B_d,
      port_1_w_ram_ir_internal_WMASK_B_d
);
  output we;
  output [11:0] d;
  output [11:0] wadr;
  input [11:0] q;
  output re;
  output [11:0] radr;
  input [11:0] radr_d;
  input [11:0] wadr_d;
  input [11:0] d_d;
  input we_d;
  input re_d;
  output [11:0] q_d;
  input port_0_r_ram_ir_internal_RMASK_B_d;
  input port_1_w_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign we = (port_1_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
  assign q_d = q;
  assign re = (port_0_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_544_12_12_4096_4096_12_5_gen
// ------------------------------------------------------------------


module isp_rawdns_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_544_12_12_4096_4096_12_5_gen
    (
  we, d, wadr, q, re, radr, radr_d, wadr_d, d_d, we_d, re_d, q_d, port_0_r_ram_ir_internal_RMASK_B_d,
      port_1_w_ram_ir_internal_WMASK_B_d
);
  output we;
  output [11:0] d;
  output [11:0] wadr;
  input [11:0] q;
  output re;
  output [11:0] radr;
  input [11:0] radr_d;
  input [11:0] wadr_d;
  input [11:0] d_d;
  input we_d;
  input re_d;
  output [11:0] q_d;
  input port_0_r_ram_ir_internal_RMASK_B_d;
  input port_1_w_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign we = (port_1_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
  assign q_d = q;
  assign re = (port_0_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_core_staller
// ------------------------------------------------------------------


module isp_rawdns_core_staller (
  clk, arst_n, core_wen, core_wten, src_rsci_wen_comp, dst_rsci_wen_comp
);
  input clk;
  input arst_n;
  output core_wen;
  output core_wten;
  input src_rsci_wen_comp;
  input dst_rsci_wen_comp;


  // Interconnect Declarations
  reg core_wten_reg;


  // Interconnect Declarations for Component Instantiations 
  assign core_wen = src_rsci_wen_comp & dst_rsci_wen_comp;
  assign core_wten = core_wten_reg;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      core_wten_reg <= 1'b0;
    end
    else begin
      core_wten_reg <= ~ core_wen;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_core_rawdns_lines_rsc_0_9_i_1_rawdns_lines_rsc_0_9_wait_dp
// ------------------------------------------------------------------


module isp_rawdns_core_rawdns_lines_rsc_0_9_i_1_rawdns_lines_rsc_0_9_wait_dp (
  clk, arst_n, rawdns_lines_rsc_0_9_i_q_d, rawdns_lines_rsc_0_9_i_q_d_mxwt, rawdns_lines_rsc_0_9_i_biwt,
      rawdns_lines_rsc_0_9_i_bdwt
);
  input clk;
  input arst_n;
  input [11:0] rawdns_lines_rsc_0_9_i_q_d;
  output [11:0] rawdns_lines_rsc_0_9_i_q_d_mxwt;
  input rawdns_lines_rsc_0_9_i_biwt;
  input rawdns_lines_rsc_0_9_i_bdwt;


  // Interconnect Declarations
  reg rawdns_lines_rsc_0_9_i_bcwt;
  reg [11:0] rawdns_lines_rsc_0_9_i_q_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign rawdns_lines_rsc_0_9_i_q_d_mxwt = MUX_v_12_2_2(rawdns_lines_rsc_0_9_i_q_d,
      rawdns_lines_rsc_0_9_i_q_d_bfwt, rawdns_lines_rsc_0_9_i_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_lines_rsc_0_9_i_bcwt <= 1'b0;
    end
    else begin
      rawdns_lines_rsc_0_9_i_bcwt <= ~((~(rawdns_lines_rsc_0_9_i_bcwt | rawdns_lines_rsc_0_9_i_biwt))
          | rawdns_lines_rsc_0_9_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_lines_rsc_0_9_i_q_d_bfwt <= 12'b000000000000;
    end
    else if ( rawdns_lines_rsc_0_9_i_biwt ) begin
      rawdns_lines_rsc_0_9_i_q_d_bfwt <= rawdns_lines_rsc_0_9_i_q_d;
    end
  end

  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [0:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_core_rawdns_lines_rsc_0_9_i_1_rawdns_lines_rsc_0_9_wait_ctrl
// ------------------------------------------------------------------


module isp_rawdns_core_rawdns_lines_rsc_0_9_i_1_rawdns_lines_rsc_0_9_wait_ctrl (
  core_wen, core_wten, rawdns_lines_rsc_0_9_i_oswt, rawdns_lines_rsc_0_9_i_biwt,
      rawdns_lines_rsc_0_9_i_bdwt, rawdns_lines_rsc_0_9_i_we_d_core_sct_pff, rawdns_lines_rsc_0_9_i_iswt0_1_pff,
      rawdns_lines_rsc_0_9_i_re_d_core_sct_pff, rawdns_lines_rsc_0_9_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input rawdns_lines_rsc_0_9_i_oswt;
  output rawdns_lines_rsc_0_9_i_biwt;
  output rawdns_lines_rsc_0_9_i_bdwt;
  output rawdns_lines_rsc_0_9_i_we_d_core_sct_pff;
  input rawdns_lines_rsc_0_9_i_iswt0_1_pff;
  output rawdns_lines_rsc_0_9_i_re_d_core_sct_pff;
  input rawdns_lines_rsc_0_9_i_oswt_pff;



  // Interconnect Declarations for Component Instantiations 
  assign rawdns_lines_rsc_0_9_i_bdwt = rawdns_lines_rsc_0_9_i_oswt & core_wen;
  assign rawdns_lines_rsc_0_9_i_biwt = (~ core_wten) & rawdns_lines_rsc_0_9_i_oswt;
  assign rawdns_lines_rsc_0_9_i_we_d_core_sct_pff = rawdns_lines_rsc_0_9_i_iswt0_1_pff
      & core_wen;
  assign rawdns_lines_rsc_0_9_i_re_d_core_sct_pff = rawdns_lines_rsc_0_9_i_oswt_pff
      & core_wen;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_core_rawdns_lines_rsc_0_8_i_1_rawdns_lines_rsc_0_8_wait_dp
// ------------------------------------------------------------------


module isp_rawdns_core_rawdns_lines_rsc_0_8_i_1_rawdns_lines_rsc_0_8_wait_dp (
  clk, arst_n, rawdns_lines_rsc_0_8_i_q_d, rawdns_lines_rsc_0_8_i_q_d_mxwt, rawdns_lines_rsc_0_8_i_biwt,
      rawdns_lines_rsc_0_8_i_bdwt
);
  input clk;
  input arst_n;
  input [11:0] rawdns_lines_rsc_0_8_i_q_d;
  output [11:0] rawdns_lines_rsc_0_8_i_q_d_mxwt;
  input rawdns_lines_rsc_0_8_i_biwt;
  input rawdns_lines_rsc_0_8_i_bdwt;


  // Interconnect Declarations
  reg rawdns_lines_rsc_0_8_i_bcwt;
  reg [11:0] rawdns_lines_rsc_0_8_i_q_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign rawdns_lines_rsc_0_8_i_q_d_mxwt = MUX_v_12_2_2(rawdns_lines_rsc_0_8_i_q_d,
      rawdns_lines_rsc_0_8_i_q_d_bfwt, rawdns_lines_rsc_0_8_i_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_lines_rsc_0_8_i_bcwt <= 1'b0;
    end
    else begin
      rawdns_lines_rsc_0_8_i_bcwt <= ~((~(rawdns_lines_rsc_0_8_i_bcwt | rawdns_lines_rsc_0_8_i_biwt))
          | rawdns_lines_rsc_0_8_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_lines_rsc_0_8_i_q_d_bfwt <= 12'b000000000000;
    end
    else if ( rawdns_lines_rsc_0_8_i_biwt ) begin
      rawdns_lines_rsc_0_8_i_q_d_bfwt <= rawdns_lines_rsc_0_8_i_q_d;
    end
  end

  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [0:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_core_rawdns_lines_rsc_0_8_i_1_rawdns_lines_rsc_0_8_wait_ctrl
// ------------------------------------------------------------------


module isp_rawdns_core_rawdns_lines_rsc_0_8_i_1_rawdns_lines_rsc_0_8_wait_ctrl (
  core_wen, core_wten, rawdns_lines_rsc_0_8_i_oswt, rawdns_lines_rsc_0_8_i_biwt,
      rawdns_lines_rsc_0_8_i_bdwt, rawdns_lines_rsc_0_8_i_we_d_core_sct_pff, rawdns_lines_rsc_0_8_i_iswt0_1_pff,
      rawdns_lines_rsc_0_8_i_re_d_core_sct_pff, rawdns_lines_rsc_0_8_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input rawdns_lines_rsc_0_8_i_oswt;
  output rawdns_lines_rsc_0_8_i_biwt;
  output rawdns_lines_rsc_0_8_i_bdwt;
  output rawdns_lines_rsc_0_8_i_we_d_core_sct_pff;
  input rawdns_lines_rsc_0_8_i_iswt0_1_pff;
  output rawdns_lines_rsc_0_8_i_re_d_core_sct_pff;
  input rawdns_lines_rsc_0_8_i_oswt_pff;



  // Interconnect Declarations for Component Instantiations 
  assign rawdns_lines_rsc_0_8_i_bdwt = rawdns_lines_rsc_0_8_i_oswt & core_wen;
  assign rawdns_lines_rsc_0_8_i_biwt = (~ core_wten) & rawdns_lines_rsc_0_8_i_oswt;
  assign rawdns_lines_rsc_0_8_i_we_d_core_sct_pff = rawdns_lines_rsc_0_8_i_iswt0_1_pff
      & core_wen;
  assign rawdns_lines_rsc_0_8_i_re_d_core_sct_pff = rawdns_lines_rsc_0_8_i_oswt_pff
      & core_wen;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_core_rawdns_lines_rsc_0_7_i_1_rawdns_lines_rsc_0_7_wait_dp
// ------------------------------------------------------------------


module isp_rawdns_core_rawdns_lines_rsc_0_7_i_1_rawdns_lines_rsc_0_7_wait_dp (
  clk, arst_n, rawdns_lines_rsc_0_7_i_q_d, rawdns_lines_rsc_0_7_i_q_d_mxwt, rawdns_lines_rsc_0_7_i_biwt,
      rawdns_lines_rsc_0_7_i_bdwt
);
  input clk;
  input arst_n;
  input [11:0] rawdns_lines_rsc_0_7_i_q_d;
  output [11:0] rawdns_lines_rsc_0_7_i_q_d_mxwt;
  input rawdns_lines_rsc_0_7_i_biwt;
  input rawdns_lines_rsc_0_7_i_bdwt;


  // Interconnect Declarations
  reg rawdns_lines_rsc_0_7_i_bcwt;
  reg [11:0] rawdns_lines_rsc_0_7_i_q_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign rawdns_lines_rsc_0_7_i_q_d_mxwt = MUX_v_12_2_2(rawdns_lines_rsc_0_7_i_q_d,
      rawdns_lines_rsc_0_7_i_q_d_bfwt, rawdns_lines_rsc_0_7_i_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_lines_rsc_0_7_i_bcwt <= 1'b0;
    end
    else begin
      rawdns_lines_rsc_0_7_i_bcwt <= ~((~(rawdns_lines_rsc_0_7_i_bcwt | rawdns_lines_rsc_0_7_i_biwt))
          | rawdns_lines_rsc_0_7_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_lines_rsc_0_7_i_q_d_bfwt <= 12'b000000000000;
    end
    else if ( rawdns_lines_rsc_0_7_i_biwt ) begin
      rawdns_lines_rsc_0_7_i_q_d_bfwt <= rawdns_lines_rsc_0_7_i_q_d;
    end
  end

  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [0:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_core_rawdns_lines_rsc_0_7_i_1_rawdns_lines_rsc_0_7_wait_ctrl
// ------------------------------------------------------------------


module isp_rawdns_core_rawdns_lines_rsc_0_7_i_1_rawdns_lines_rsc_0_7_wait_ctrl (
  core_wen, core_wten, rawdns_lines_rsc_0_7_i_oswt, rawdns_lines_rsc_0_7_i_biwt,
      rawdns_lines_rsc_0_7_i_bdwt, rawdns_lines_rsc_0_7_i_we_d_core_sct_pff, rawdns_lines_rsc_0_7_i_iswt0_1_pff,
      rawdns_lines_rsc_0_7_i_re_d_core_sct_pff, rawdns_lines_rsc_0_7_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input rawdns_lines_rsc_0_7_i_oswt;
  output rawdns_lines_rsc_0_7_i_biwt;
  output rawdns_lines_rsc_0_7_i_bdwt;
  output rawdns_lines_rsc_0_7_i_we_d_core_sct_pff;
  input rawdns_lines_rsc_0_7_i_iswt0_1_pff;
  output rawdns_lines_rsc_0_7_i_re_d_core_sct_pff;
  input rawdns_lines_rsc_0_7_i_oswt_pff;



  // Interconnect Declarations for Component Instantiations 
  assign rawdns_lines_rsc_0_7_i_bdwt = rawdns_lines_rsc_0_7_i_oswt & core_wen;
  assign rawdns_lines_rsc_0_7_i_biwt = (~ core_wten) & rawdns_lines_rsc_0_7_i_oswt;
  assign rawdns_lines_rsc_0_7_i_we_d_core_sct_pff = rawdns_lines_rsc_0_7_i_iswt0_1_pff
      & core_wen;
  assign rawdns_lines_rsc_0_7_i_re_d_core_sct_pff = rawdns_lines_rsc_0_7_i_oswt_pff
      & core_wen;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_core_rawdns_lines_rsc_0_6_i_1_rawdns_lines_rsc_0_6_wait_dp
// ------------------------------------------------------------------


module isp_rawdns_core_rawdns_lines_rsc_0_6_i_1_rawdns_lines_rsc_0_6_wait_dp (
  clk, arst_n, rawdns_lines_rsc_0_6_i_q_d, rawdns_lines_rsc_0_6_i_q_d_mxwt, rawdns_lines_rsc_0_6_i_biwt,
      rawdns_lines_rsc_0_6_i_bdwt
);
  input clk;
  input arst_n;
  input [11:0] rawdns_lines_rsc_0_6_i_q_d;
  output [11:0] rawdns_lines_rsc_0_6_i_q_d_mxwt;
  input rawdns_lines_rsc_0_6_i_biwt;
  input rawdns_lines_rsc_0_6_i_bdwt;


  // Interconnect Declarations
  reg rawdns_lines_rsc_0_6_i_bcwt;
  reg [11:0] rawdns_lines_rsc_0_6_i_q_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign rawdns_lines_rsc_0_6_i_q_d_mxwt = MUX_v_12_2_2(rawdns_lines_rsc_0_6_i_q_d,
      rawdns_lines_rsc_0_6_i_q_d_bfwt, rawdns_lines_rsc_0_6_i_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_lines_rsc_0_6_i_bcwt <= 1'b0;
    end
    else begin
      rawdns_lines_rsc_0_6_i_bcwt <= ~((~(rawdns_lines_rsc_0_6_i_bcwt | rawdns_lines_rsc_0_6_i_biwt))
          | rawdns_lines_rsc_0_6_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_lines_rsc_0_6_i_q_d_bfwt <= 12'b000000000000;
    end
    else if ( rawdns_lines_rsc_0_6_i_biwt ) begin
      rawdns_lines_rsc_0_6_i_q_d_bfwt <= rawdns_lines_rsc_0_6_i_q_d;
    end
  end

  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [0:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_core_rawdns_lines_rsc_0_6_i_1_rawdns_lines_rsc_0_6_wait_ctrl
// ------------------------------------------------------------------


module isp_rawdns_core_rawdns_lines_rsc_0_6_i_1_rawdns_lines_rsc_0_6_wait_ctrl (
  core_wen, core_wten, rawdns_lines_rsc_0_6_i_oswt, rawdns_lines_rsc_0_6_i_biwt,
      rawdns_lines_rsc_0_6_i_bdwt, rawdns_lines_rsc_0_6_i_we_d_core_sct_pff, rawdns_lines_rsc_0_6_i_iswt0_1_pff,
      rawdns_lines_rsc_0_6_i_re_d_core_sct_pff, rawdns_lines_rsc_0_6_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input rawdns_lines_rsc_0_6_i_oswt;
  output rawdns_lines_rsc_0_6_i_biwt;
  output rawdns_lines_rsc_0_6_i_bdwt;
  output rawdns_lines_rsc_0_6_i_we_d_core_sct_pff;
  input rawdns_lines_rsc_0_6_i_iswt0_1_pff;
  output rawdns_lines_rsc_0_6_i_re_d_core_sct_pff;
  input rawdns_lines_rsc_0_6_i_oswt_pff;



  // Interconnect Declarations for Component Instantiations 
  assign rawdns_lines_rsc_0_6_i_bdwt = rawdns_lines_rsc_0_6_i_oswt & core_wen;
  assign rawdns_lines_rsc_0_6_i_biwt = (~ core_wten) & rawdns_lines_rsc_0_6_i_oswt;
  assign rawdns_lines_rsc_0_6_i_we_d_core_sct_pff = rawdns_lines_rsc_0_6_i_iswt0_1_pff
      & core_wen;
  assign rawdns_lines_rsc_0_6_i_re_d_core_sct_pff = rawdns_lines_rsc_0_6_i_oswt_pff
      & core_wen;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_core_rawdns_lines_rsc_0_5_i_1_rawdns_lines_rsc_0_5_wait_dp
// ------------------------------------------------------------------


module isp_rawdns_core_rawdns_lines_rsc_0_5_i_1_rawdns_lines_rsc_0_5_wait_dp (
  clk, arst_n, rawdns_lines_rsc_0_5_i_q_d, rawdns_lines_rsc_0_5_i_q_d_mxwt, rawdns_lines_rsc_0_5_i_biwt,
      rawdns_lines_rsc_0_5_i_bdwt
);
  input clk;
  input arst_n;
  input [11:0] rawdns_lines_rsc_0_5_i_q_d;
  output [11:0] rawdns_lines_rsc_0_5_i_q_d_mxwt;
  input rawdns_lines_rsc_0_5_i_biwt;
  input rawdns_lines_rsc_0_5_i_bdwt;


  // Interconnect Declarations
  reg rawdns_lines_rsc_0_5_i_bcwt;
  reg [11:0] rawdns_lines_rsc_0_5_i_q_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign rawdns_lines_rsc_0_5_i_q_d_mxwt = MUX_v_12_2_2(rawdns_lines_rsc_0_5_i_q_d,
      rawdns_lines_rsc_0_5_i_q_d_bfwt, rawdns_lines_rsc_0_5_i_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_lines_rsc_0_5_i_bcwt <= 1'b0;
    end
    else begin
      rawdns_lines_rsc_0_5_i_bcwt <= ~((~(rawdns_lines_rsc_0_5_i_bcwt | rawdns_lines_rsc_0_5_i_biwt))
          | rawdns_lines_rsc_0_5_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_lines_rsc_0_5_i_q_d_bfwt <= 12'b000000000000;
    end
    else if ( rawdns_lines_rsc_0_5_i_biwt ) begin
      rawdns_lines_rsc_0_5_i_q_d_bfwt <= rawdns_lines_rsc_0_5_i_q_d;
    end
  end

  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [0:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_core_rawdns_lines_rsc_0_5_i_1_rawdns_lines_rsc_0_5_wait_ctrl
// ------------------------------------------------------------------


module isp_rawdns_core_rawdns_lines_rsc_0_5_i_1_rawdns_lines_rsc_0_5_wait_ctrl (
  core_wen, core_wten, rawdns_lines_rsc_0_5_i_oswt, rawdns_lines_rsc_0_5_i_biwt,
      rawdns_lines_rsc_0_5_i_bdwt, rawdns_lines_rsc_0_5_i_we_d_core_sct_pff, rawdns_lines_rsc_0_5_i_iswt0_1_pff,
      rawdns_lines_rsc_0_5_i_re_d_core_sct_pff, rawdns_lines_rsc_0_5_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input rawdns_lines_rsc_0_5_i_oswt;
  output rawdns_lines_rsc_0_5_i_biwt;
  output rawdns_lines_rsc_0_5_i_bdwt;
  output rawdns_lines_rsc_0_5_i_we_d_core_sct_pff;
  input rawdns_lines_rsc_0_5_i_iswt0_1_pff;
  output rawdns_lines_rsc_0_5_i_re_d_core_sct_pff;
  input rawdns_lines_rsc_0_5_i_oswt_pff;



  // Interconnect Declarations for Component Instantiations 
  assign rawdns_lines_rsc_0_5_i_bdwt = rawdns_lines_rsc_0_5_i_oswt & core_wen;
  assign rawdns_lines_rsc_0_5_i_biwt = (~ core_wten) & rawdns_lines_rsc_0_5_i_oswt;
  assign rawdns_lines_rsc_0_5_i_we_d_core_sct_pff = rawdns_lines_rsc_0_5_i_iswt0_1_pff
      & core_wen;
  assign rawdns_lines_rsc_0_5_i_re_d_core_sct_pff = rawdns_lines_rsc_0_5_i_oswt_pff
      & core_wen;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_core_rawdns_lines_rsc_0_4_i_1_rawdns_lines_rsc_0_4_wait_dp
// ------------------------------------------------------------------


module isp_rawdns_core_rawdns_lines_rsc_0_4_i_1_rawdns_lines_rsc_0_4_wait_dp (
  clk, arst_n, rawdns_lines_rsc_0_4_i_q_d, rawdns_lines_rsc_0_4_i_q_d_mxwt, rawdns_lines_rsc_0_4_i_biwt,
      rawdns_lines_rsc_0_4_i_bdwt
);
  input clk;
  input arst_n;
  input [11:0] rawdns_lines_rsc_0_4_i_q_d;
  output [11:0] rawdns_lines_rsc_0_4_i_q_d_mxwt;
  input rawdns_lines_rsc_0_4_i_biwt;
  input rawdns_lines_rsc_0_4_i_bdwt;


  // Interconnect Declarations
  reg rawdns_lines_rsc_0_4_i_bcwt;
  reg [11:0] rawdns_lines_rsc_0_4_i_q_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign rawdns_lines_rsc_0_4_i_q_d_mxwt = MUX_v_12_2_2(rawdns_lines_rsc_0_4_i_q_d,
      rawdns_lines_rsc_0_4_i_q_d_bfwt, rawdns_lines_rsc_0_4_i_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_lines_rsc_0_4_i_bcwt <= 1'b0;
    end
    else begin
      rawdns_lines_rsc_0_4_i_bcwt <= ~((~(rawdns_lines_rsc_0_4_i_bcwt | rawdns_lines_rsc_0_4_i_biwt))
          | rawdns_lines_rsc_0_4_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_lines_rsc_0_4_i_q_d_bfwt <= 12'b000000000000;
    end
    else if ( rawdns_lines_rsc_0_4_i_biwt ) begin
      rawdns_lines_rsc_0_4_i_q_d_bfwt <= rawdns_lines_rsc_0_4_i_q_d;
    end
  end

  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [0:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_core_rawdns_lines_rsc_0_4_i_1_rawdns_lines_rsc_0_4_wait_ctrl
// ------------------------------------------------------------------


module isp_rawdns_core_rawdns_lines_rsc_0_4_i_1_rawdns_lines_rsc_0_4_wait_ctrl (
  core_wen, core_wten, rawdns_lines_rsc_0_4_i_oswt, rawdns_lines_rsc_0_4_i_biwt,
      rawdns_lines_rsc_0_4_i_bdwt, rawdns_lines_rsc_0_4_i_we_d_core_sct_pff, rawdns_lines_rsc_0_4_i_iswt0_1_pff,
      rawdns_lines_rsc_0_4_i_re_d_core_sct_pff, rawdns_lines_rsc_0_4_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input rawdns_lines_rsc_0_4_i_oswt;
  output rawdns_lines_rsc_0_4_i_biwt;
  output rawdns_lines_rsc_0_4_i_bdwt;
  output rawdns_lines_rsc_0_4_i_we_d_core_sct_pff;
  input rawdns_lines_rsc_0_4_i_iswt0_1_pff;
  output rawdns_lines_rsc_0_4_i_re_d_core_sct_pff;
  input rawdns_lines_rsc_0_4_i_oswt_pff;



  // Interconnect Declarations for Component Instantiations 
  assign rawdns_lines_rsc_0_4_i_bdwt = rawdns_lines_rsc_0_4_i_oswt & core_wen;
  assign rawdns_lines_rsc_0_4_i_biwt = (~ core_wten) & rawdns_lines_rsc_0_4_i_oswt;
  assign rawdns_lines_rsc_0_4_i_we_d_core_sct_pff = rawdns_lines_rsc_0_4_i_iswt0_1_pff
      & core_wen;
  assign rawdns_lines_rsc_0_4_i_re_d_core_sct_pff = rawdns_lines_rsc_0_4_i_oswt_pff
      & core_wen;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_core_rawdns_lines_rsc_0_3_i_1_rawdns_lines_rsc_0_3_wait_dp
// ------------------------------------------------------------------


module isp_rawdns_core_rawdns_lines_rsc_0_3_i_1_rawdns_lines_rsc_0_3_wait_dp (
  clk, arst_n, rawdns_lines_rsc_0_3_i_q_d, rawdns_lines_rsc_0_3_i_q_d_mxwt, rawdns_lines_rsc_0_3_i_biwt,
      rawdns_lines_rsc_0_3_i_bdwt
);
  input clk;
  input arst_n;
  input [11:0] rawdns_lines_rsc_0_3_i_q_d;
  output [11:0] rawdns_lines_rsc_0_3_i_q_d_mxwt;
  input rawdns_lines_rsc_0_3_i_biwt;
  input rawdns_lines_rsc_0_3_i_bdwt;


  // Interconnect Declarations
  reg rawdns_lines_rsc_0_3_i_bcwt;
  reg [11:0] rawdns_lines_rsc_0_3_i_q_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign rawdns_lines_rsc_0_3_i_q_d_mxwt = MUX_v_12_2_2(rawdns_lines_rsc_0_3_i_q_d,
      rawdns_lines_rsc_0_3_i_q_d_bfwt, rawdns_lines_rsc_0_3_i_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_lines_rsc_0_3_i_bcwt <= 1'b0;
    end
    else begin
      rawdns_lines_rsc_0_3_i_bcwt <= ~((~(rawdns_lines_rsc_0_3_i_bcwt | rawdns_lines_rsc_0_3_i_biwt))
          | rawdns_lines_rsc_0_3_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_lines_rsc_0_3_i_q_d_bfwt <= 12'b000000000000;
    end
    else if ( rawdns_lines_rsc_0_3_i_biwt ) begin
      rawdns_lines_rsc_0_3_i_q_d_bfwt <= rawdns_lines_rsc_0_3_i_q_d;
    end
  end

  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [0:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_core_rawdns_lines_rsc_0_3_i_1_rawdns_lines_rsc_0_3_wait_ctrl
// ------------------------------------------------------------------


module isp_rawdns_core_rawdns_lines_rsc_0_3_i_1_rawdns_lines_rsc_0_3_wait_ctrl (
  core_wen, core_wten, rawdns_lines_rsc_0_3_i_oswt, rawdns_lines_rsc_0_3_i_biwt,
      rawdns_lines_rsc_0_3_i_bdwt, rawdns_lines_rsc_0_3_i_we_d_core_sct_pff, rawdns_lines_rsc_0_3_i_iswt0_1_pff,
      rawdns_lines_rsc_0_3_i_re_d_core_sct_pff, rawdns_lines_rsc_0_3_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input rawdns_lines_rsc_0_3_i_oswt;
  output rawdns_lines_rsc_0_3_i_biwt;
  output rawdns_lines_rsc_0_3_i_bdwt;
  output rawdns_lines_rsc_0_3_i_we_d_core_sct_pff;
  input rawdns_lines_rsc_0_3_i_iswt0_1_pff;
  output rawdns_lines_rsc_0_3_i_re_d_core_sct_pff;
  input rawdns_lines_rsc_0_3_i_oswt_pff;



  // Interconnect Declarations for Component Instantiations 
  assign rawdns_lines_rsc_0_3_i_bdwt = rawdns_lines_rsc_0_3_i_oswt & core_wen;
  assign rawdns_lines_rsc_0_3_i_biwt = (~ core_wten) & rawdns_lines_rsc_0_3_i_oswt;
  assign rawdns_lines_rsc_0_3_i_we_d_core_sct_pff = rawdns_lines_rsc_0_3_i_iswt0_1_pff
      & core_wen;
  assign rawdns_lines_rsc_0_3_i_re_d_core_sct_pff = rawdns_lines_rsc_0_3_i_oswt_pff
      & core_wen;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_core_rawdns_lines_rsc_0_2_i_1_rawdns_lines_rsc_0_2_wait_dp
// ------------------------------------------------------------------


module isp_rawdns_core_rawdns_lines_rsc_0_2_i_1_rawdns_lines_rsc_0_2_wait_dp (
  clk, arst_n, rawdns_lines_rsc_0_2_i_q_d, rawdns_lines_rsc_0_2_i_q_d_mxwt, rawdns_lines_rsc_0_2_i_biwt,
      rawdns_lines_rsc_0_2_i_bdwt
);
  input clk;
  input arst_n;
  input [11:0] rawdns_lines_rsc_0_2_i_q_d;
  output [11:0] rawdns_lines_rsc_0_2_i_q_d_mxwt;
  input rawdns_lines_rsc_0_2_i_biwt;
  input rawdns_lines_rsc_0_2_i_bdwt;


  // Interconnect Declarations
  reg rawdns_lines_rsc_0_2_i_bcwt;
  reg [11:0] rawdns_lines_rsc_0_2_i_q_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign rawdns_lines_rsc_0_2_i_q_d_mxwt = MUX_v_12_2_2(rawdns_lines_rsc_0_2_i_q_d,
      rawdns_lines_rsc_0_2_i_q_d_bfwt, rawdns_lines_rsc_0_2_i_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_lines_rsc_0_2_i_bcwt <= 1'b0;
    end
    else begin
      rawdns_lines_rsc_0_2_i_bcwt <= ~((~(rawdns_lines_rsc_0_2_i_bcwt | rawdns_lines_rsc_0_2_i_biwt))
          | rawdns_lines_rsc_0_2_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_lines_rsc_0_2_i_q_d_bfwt <= 12'b000000000000;
    end
    else if ( rawdns_lines_rsc_0_2_i_biwt ) begin
      rawdns_lines_rsc_0_2_i_q_d_bfwt <= rawdns_lines_rsc_0_2_i_q_d;
    end
  end

  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [0:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_core_rawdns_lines_rsc_0_2_i_1_rawdns_lines_rsc_0_2_wait_ctrl
// ------------------------------------------------------------------


module isp_rawdns_core_rawdns_lines_rsc_0_2_i_1_rawdns_lines_rsc_0_2_wait_ctrl (
  core_wen, core_wten, rawdns_lines_rsc_0_2_i_oswt, rawdns_lines_rsc_0_2_i_biwt,
      rawdns_lines_rsc_0_2_i_bdwt, rawdns_lines_rsc_0_2_i_we_d_core_sct_pff, rawdns_lines_rsc_0_2_i_iswt0_1_pff,
      rawdns_lines_rsc_0_2_i_re_d_core_sct_pff, rawdns_lines_rsc_0_2_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input rawdns_lines_rsc_0_2_i_oswt;
  output rawdns_lines_rsc_0_2_i_biwt;
  output rawdns_lines_rsc_0_2_i_bdwt;
  output rawdns_lines_rsc_0_2_i_we_d_core_sct_pff;
  input rawdns_lines_rsc_0_2_i_iswt0_1_pff;
  output rawdns_lines_rsc_0_2_i_re_d_core_sct_pff;
  input rawdns_lines_rsc_0_2_i_oswt_pff;



  // Interconnect Declarations for Component Instantiations 
  assign rawdns_lines_rsc_0_2_i_bdwt = rawdns_lines_rsc_0_2_i_oswt & core_wen;
  assign rawdns_lines_rsc_0_2_i_biwt = (~ core_wten) & rawdns_lines_rsc_0_2_i_oswt;
  assign rawdns_lines_rsc_0_2_i_we_d_core_sct_pff = rawdns_lines_rsc_0_2_i_iswt0_1_pff
      & core_wen;
  assign rawdns_lines_rsc_0_2_i_re_d_core_sct_pff = rawdns_lines_rsc_0_2_i_oswt_pff
      & core_wen;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_core_rawdns_lines_rsc_0_1_i_1_rawdns_lines_rsc_0_1_wait_dp
// ------------------------------------------------------------------


module isp_rawdns_core_rawdns_lines_rsc_0_1_i_1_rawdns_lines_rsc_0_1_wait_dp (
  clk, arst_n, rawdns_lines_rsc_0_1_i_q_d, rawdns_lines_rsc_0_1_i_q_d_mxwt, rawdns_lines_rsc_0_1_i_biwt,
      rawdns_lines_rsc_0_1_i_bdwt
);
  input clk;
  input arst_n;
  input [11:0] rawdns_lines_rsc_0_1_i_q_d;
  output [11:0] rawdns_lines_rsc_0_1_i_q_d_mxwt;
  input rawdns_lines_rsc_0_1_i_biwt;
  input rawdns_lines_rsc_0_1_i_bdwt;


  // Interconnect Declarations
  reg rawdns_lines_rsc_0_1_i_bcwt;
  reg [11:0] rawdns_lines_rsc_0_1_i_q_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign rawdns_lines_rsc_0_1_i_q_d_mxwt = MUX_v_12_2_2(rawdns_lines_rsc_0_1_i_q_d,
      rawdns_lines_rsc_0_1_i_q_d_bfwt, rawdns_lines_rsc_0_1_i_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_lines_rsc_0_1_i_bcwt <= 1'b0;
    end
    else begin
      rawdns_lines_rsc_0_1_i_bcwt <= ~((~(rawdns_lines_rsc_0_1_i_bcwt | rawdns_lines_rsc_0_1_i_biwt))
          | rawdns_lines_rsc_0_1_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_lines_rsc_0_1_i_q_d_bfwt <= 12'b000000000000;
    end
    else if ( rawdns_lines_rsc_0_1_i_biwt ) begin
      rawdns_lines_rsc_0_1_i_q_d_bfwt <= rawdns_lines_rsc_0_1_i_q_d;
    end
  end

  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [0:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_core_rawdns_lines_rsc_0_1_i_1_rawdns_lines_rsc_0_1_wait_ctrl
// ------------------------------------------------------------------


module isp_rawdns_core_rawdns_lines_rsc_0_1_i_1_rawdns_lines_rsc_0_1_wait_ctrl (
  core_wen, core_wten, rawdns_lines_rsc_0_1_i_oswt, rawdns_lines_rsc_0_1_i_biwt,
      rawdns_lines_rsc_0_1_i_bdwt, rawdns_lines_rsc_0_1_i_we_d_core_sct_pff, rawdns_lines_rsc_0_1_i_iswt0_1_pff,
      rawdns_lines_rsc_0_1_i_re_d_core_sct_pff, rawdns_lines_rsc_0_1_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input rawdns_lines_rsc_0_1_i_oswt;
  output rawdns_lines_rsc_0_1_i_biwt;
  output rawdns_lines_rsc_0_1_i_bdwt;
  output rawdns_lines_rsc_0_1_i_we_d_core_sct_pff;
  input rawdns_lines_rsc_0_1_i_iswt0_1_pff;
  output rawdns_lines_rsc_0_1_i_re_d_core_sct_pff;
  input rawdns_lines_rsc_0_1_i_oswt_pff;



  // Interconnect Declarations for Component Instantiations 
  assign rawdns_lines_rsc_0_1_i_bdwt = rawdns_lines_rsc_0_1_i_oswt & core_wen;
  assign rawdns_lines_rsc_0_1_i_biwt = (~ core_wten) & rawdns_lines_rsc_0_1_i_oswt;
  assign rawdns_lines_rsc_0_1_i_we_d_core_sct_pff = rawdns_lines_rsc_0_1_i_iswt0_1_pff
      & core_wen;
  assign rawdns_lines_rsc_0_1_i_re_d_core_sct_pff = rawdns_lines_rsc_0_1_i_oswt_pff
      & core_wen;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_core_rawdns_lines_rsc_0_0_i_1_rawdns_lines_rsc_0_0_wait_dp
// ------------------------------------------------------------------


module isp_rawdns_core_rawdns_lines_rsc_0_0_i_1_rawdns_lines_rsc_0_0_wait_dp (
  clk, arst_n, rawdns_lines_rsc_0_0_i_q_d, rawdns_lines_rsc_0_0_i_q_d_mxwt, rawdns_lines_rsc_0_0_i_biwt,
      rawdns_lines_rsc_0_0_i_bdwt
);
  input clk;
  input arst_n;
  input [11:0] rawdns_lines_rsc_0_0_i_q_d;
  output [11:0] rawdns_lines_rsc_0_0_i_q_d_mxwt;
  input rawdns_lines_rsc_0_0_i_biwt;
  input rawdns_lines_rsc_0_0_i_bdwt;


  // Interconnect Declarations
  reg rawdns_lines_rsc_0_0_i_bcwt;
  reg [11:0] rawdns_lines_rsc_0_0_i_q_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign rawdns_lines_rsc_0_0_i_q_d_mxwt = MUX_v_12_2_2(rawdns_lines_rsc_0_0_i_q_d,
      rawdns_lines_rsc_0_0_i_q_d_bfwt, rawdns_lines_rsc_0_0_i_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_lines_rsc_0_0_i_bcwt <= 1'b0;
    end
    else begin
      rawdns_lines_rsc_0_0_i_bcwt <= ~((~(rawdns_lines_rsc_0_0_i_bcwt | rawdns_lines_rsc_0_0_i_biwt))
          | rawdns_lines_rsc_0_0_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_lines_rsc_0_0_i_q_d_bfwt <= 12'b000000000000;
    end
    else if ( rawdns_lines_rsc_0_0_i_biwt ) begin
      rawdns_lines_rsc_0_0_i_q_d_bfwt <= rawdns_lines_rsc_0_0_i_q_d;
    end
  end

  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [0:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_core_rawdns_lines_rsc_0_0_i_1_rawdns_lines_rsc_0_0_wait_ctrl
// ------------------------------------------------------------------


module isp_rawdns_core_rawdns_lines_rsc_0_0_i_1_rawdns_lines_rsc_0_0_wait_ctrl (
  core_wen, core_wten, rawdns_lines_rsc_0_0_i_oswt, rawdns_lines_rsc_0_0_i_biwt,
      rawdns_lines_rsc_0_0_i_bdwt, rawdns_lines_rsc_0_0_i_we_d_core_sct_pff, rawdns_lines_rsc_0_0_i_iswt0_1_pff,
      rawdns_lines_rsc_0_0_i_re_d_core_sct_pff, rawdns_lines_rsc_0_0_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input rawdns_lines_rsc_0_0_i_oswt;
  output rawdns_lines_rsc_0_0_i_biwt;
  output rawdns_lines_rsc_0_0_i_bdwt;
  output rawdns_lines_rsc_0_0_i_we_d_core_sct_pff;
  input rawdns_lines_rsc_0_0_i_iswt0_1_pff;
  output rawdns_lines_rsc_0_0_i_re_d_core_sct_pff;
  input rawdns_lines_rsc_0_0_i_oswt_pff;



  // Interconnect Declarations for Component Instantiations 
  assign rawdns_lines_rsc_0_0_i_bdwt = rawdns_lines_rsc_0_0_i_oswt & core_wen;
  assign rawdns_lines_rsc_0_0_i_biwt = (~ core_wten) & rawdns_lines_rsc_0_0_i_oswt;
  assign rawdns_lines_rsc_0_0_i_we_d_core_sct_pff = rawdns_lines_rsc_0_0_i_iswt0_1_pff
      & core_wen;
  assign rawdns_lines_rsc_0_0_i_re_d_core_sct_pff = rawdns_lines_rsc_0_0_i_oswt_pff
      & core_wen;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_core_dst_rsci_dst_wait_dp
// ------------------------------------------------------------------


module isp_rawdns_core_dst_rsci_dst_wait_dp (
  clk, arst_n, dst_rsci_oswt, dst_rsci_wen_comp, dst_rsci_biwt, dst_rsci_bdwt, dst_rsci_bcwt
);
  input clk;
  input arst_n;
  input dst_rsci_oswt;
  output dst_rsci_wen_comp;
  input dst_rsci_biwt;
  input dst_rsci_bdwt;
  output dst_rsci_bcwt;
  reg dst_rsci_bcwt;



  // Interconnect Declarations for Component Instantiations 
  assign dst_rsci_wen_comp = (~ dst_rsci_oswt) | dst_rsci_biwt | dst_rsci_bcwt;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dst_rsci_bcwt <= 1'b0;
    end
    else begin
      dst_rsci_bcwt <= ~((~(dst_rsci_bcwt | dst_rsci_biwt)) | dst_rsci_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_core_dst_rsci_dst_wait_ctrl
// ------------------------------------------------------------------


module isp_rawdns_core_dst_rsci_dst_wait_ctrl (
  core_wen, dst_rsci_oswt, dst_rsci_irdy, dst_rsci_biwt, dst_rsci_bdwt, dst_rsci_bcwt,
      dst_rsci_ivld_core_sct
);
  input core_wen;
  input dst_rsci_oswt;
  input dst_rsci_irdy;
  output dst_rsci_biwt;
  output dst_rsci_bdwt;
  input dst_rsci_bcwt;
  output dst_rsci_ivld_core_sct;


  // Interconnect Declarations
  wire dst_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign dst_rsci_bdwt = dst_rsci_oswt & core_wen;
  assign dst_rsci_biwt = dst_rsci_ogwt & dst_rsci_irdy;
  assign dst_rsci_ogwt = dst_rsci_oswt & (~ dst_rsci_bcwt);
  assign dst_rsci_ivld_core_sct = dst_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_core_src_rsci_src_wait_dp
// ------------------------------------------------------------------


module isp_rawdns_core_src_rsci_src_wait_dp (
  clk, arst_n, src_rsci_oswt, src_rsci_wen_comp, src_rsci_idat_mxwt, src_rsci_biwt,
      src_rsci_bdwt, src_rsci_bcwt, src_rsci_idat
);
  input clk;
  input arst_n;
  input src_rsci_oswt;
  output src_rsci_wen_comp;
  output [11:0] src_rsci_idat_mxwt;
  input src_rsci_biwt;
  input src_rsci_bdwt;
  output src_rsci_bcwt;
  reg src_rsci_bcwt;
  input [11:0] src_rsci_idat;


  // Interconnect Declarations
  reg [11:0] src_rsci_idat_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign src_rsci_wen_comp = (~ src_rsci_oswt) | src_rsci_biwt | src_rsci_bcwt;
  assign src_rsci_idat_mxwt = MUX_v_12_2_2(src_rsci_idat, src_rsci_idat_bfwt, src_rsci_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      src_rsci_bcwt <= 1'b0;
    end
    else begin
      src_rsci_bcwt <= ~((~(src_rsci_bcwt | src_rsci_biwt)) | src_rsci_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      src_rsci_idat_bfwt <= 12'b000000000000;
    end
    else if ( src_rsci_biwt ) begin
      src_rsci_idat_bfwt <= src_rsci_idat;
    end
  end

  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [0:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_core_src_rsci_src_wait_ctrl
// ------------------------------------------------------------------


module isp_rawdns_core_src_rsci_src_wait_ctrl (
  core_wen, src_rsci_oswt, src_rsci_biwt, src_rsci_bdwt, src_rsci_bcwt, src_rsci_irdy_core_sct,
      src_rsci_ivld
);
  input core_wen;
  input src_rsci_oswt;
  output src_rsci_biwt;
  output src_rsci_bdwt;
  input src_rsci_bcwt;
  output src_rsci_irdy_core_sct;
  input src_rsci_ivld;


  // Interconnect Declarations
  wire src_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign src_rsci_bdwt = src_rsci_oswt & core_wen;
  assign src_rsci_biwt = src_rsci_ogwt & src_rsci_ivld;
  assign src_rsci_ogwt = src_rsci_oswt & (~ src_rsci_bcwt);
  assign src_rsci_irdy_core_sct = src_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    awb_core_staller
// ------------------------------------------------------------------


module awb_core_staller (
  clk, arst_n, core_wen, core_wten, src_rsci_wen_comp, dst_rsci_wen_comp
);
  input clk;
  input arst_n;
  output core_wen;
  output core_wten;
  reg core_wten;
  input src_rsci_wen_comp;
  input dst_rsci_wen_comp;



  // Interconnect Declarations for Component Instantiations 
  assign core_wen = src_rsci_wen_comp & dst_rsci_wen_comp;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      core_wten <= 1'b0;
    end
    else begin
      core_wten <= ~ core_wen;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    awb_core_awb_reg_b_gain_rsc_triosy_obj_awb_reg_b_gain_rsc_triosy_wait_ctrl
// ------------------------------------------------------------------


module awb_core_awb_reg_b_gain_rsc_triosy_obj_awb_reg_b_gain_rsc_triosy_wait_ctrl
    (
  core_wten, awb_reg_b_gain_rsc_triosy_obj_iswt0, awb_reg_b_gain_rsc_triosy_obj_ld_core_sct
);
  input core_wten;
  input awb_reg_b_gain_rsc_triosy_obj_iswt0;
  output awb_reg_b_gain_rsc_triosy_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign awb_reg_b_gain_rsc_triosy_obj_ld_core_sct = awb_reg_b_gain_rsc_triosy_obj_iswt0
      & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    awb_core_awb_reg_g_gain_rsc_triosy_obj_awb_reg_g_gain_rsc_triosy_wait_ctrl
// ------------------------------------------------------------------


module awb_core_awb_reg_g_gain_rsc_triosy_obj_awb_reg_g_gain_rsc_triosy_wait_ctrl
    (
  core_wten, awb_reg_g_gain_rsc_triosy_obj_iswt0, awb_reg_g_gain_rsc_triosy_obj_ld_core_sct
);
  input core_wten;
  input awb_reg_g_gain_rsc_triosy_obj_iswt0;
  output awb_reg_g_gain_rsc_triosy_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign awb_reg_g_gain_rsc_triosy_obj_ld_core_sct = awb_reg_g_gain_rsc_triosy_obj_iswt0
      & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    awb_core_awb_reg_r_gain_rsc_triosy_obj_awb_reg_r_gain_rsc_triosy_wait_ctrl
// ------------------------------------------------------------------


module awb_core_awb_reg_r_gain_rsc_triosy_obj_awb_reg_r_gain_rsc_triosy_wait_ctrl
    (
  core_wten, awb_reg_r_gain_rsc_triosy_obj_iswt0, awb_reg_r_gain_rsc_triosy_obj_ld_core_sct
);
  input core_wten;
  input awb_reg_r_gain_rsc_triosy_obj_iswt0;
  output awb_reg_r_gain_rsc_triosy_obj_ld_core_sct;



  // Interconnect Declarations for Component Instantiations 
  assign awb_reg_r_gain_rsc_triosy_obj_ld_core_sct = awb_reg_r_gain_rsc_triosy_obj_iswt0
      & (~ core_wten);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    awb_core_dst_rsci_dst_wait_dp
// ------------------------------------------------------------------


module awb_core_dst_rsci_dst_wait_dp (
  clk, arst_n, dst_rsci_oswt, dst_rsci_wen_comp, dst_rsci_biwt, dst_rsci_bdwt, dst_rsci_bcwt
);
  input clk;
  input arst_n;
  input dst_rsci_oswt;
  output dst_rsci_wen_comp;
  input dst_rsci_biwt;
  input dst_rsci_bdwt;
  output dst_rsci_bcwt;
  reg dst_rsci_bcwt;



  // Interconnect Declarations for Component Instantiations 
  assign dst_rsci_wen_comp = (~ dst_rsci_oswt) | dst_rsci_biwt | dst_rsci_bcwt;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dst_rsci_bcwt <= 1'b0;
    end
    else begin
      dst_rsci_bcwt <= ~((~(dst_rsci_bcwt | dst_rsci_biwt)) | dst_rsci_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    awb_core_dst_rsci_dst_wait_ctrl
// ------------------------------------------------------------------


module awb_core_dst_rsci_dst_wait_ctrl (
  core_wen, dst_rsci_oswt, dst_rsci_irdy, dst_rsci_biwt, dst_rsci_bdwt, dst_rsci_bcwt,
      dst_rsci_ivld_core_sct
);
  input core_wen;
  input dst_rsci_oswt;
  input dst_rsci_irdy;
  output dst_rsci_biwt;
  output dst_rsci_bdwt;
  input dst_rsci_bcwt;
  output dst_rsci_ivld_core_sct;


  // Interconnect Declarations
  wire dst_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign dst_rsci_bdwt = dst_rsci_oswt & core_wen;
  assign dst_rsci_biwt = dst_rsci_ogwt & dst_rsci_irdy;
  assign dst_rsci_ogwt = dst_rsci_oswt & (~ dst_rsci_bcwt);
  assign dst_rsci_ivld_core_sct = dst_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    awb_core_src_rsci_src_wait_dp
// ------------------------------------------------------------------


module awb_core_src_rsci_src_wait_dp (
  clk, arst_n, src_rsci_oswt, src_rsci_wen_comp, src_rsci_idat_mxwt, src_rsci_biwt,
      src_rsci_bdwt, src_rsci_bcwt, src_rsci_idat
);
  input clk;
  input arst_n;
  input src_rsci_oswt;
  output src_rsci_wen_comp;
  output [11:0] src_rsci_idat_mxwt;
  input src_rsci_biwt;
  input src_rsci_bdwt;
  output src_rsci_bcwt;
  reg src_rsci_bcwt;
  input [11:0] src_rsci_idat;


  // Interconnect Declarations
  reg [11:0] src_rsci_idat_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign src_rsci_wen_comp = (~ src_rsci_oswt) | src_rsci_biwt | src_rsci_bcwt;
  assign src_rsci_idat_mxwt = MUX_v_12_2_2(src_rsci_idat, src_rsci_idat_bfwt, src_rsci_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      src_rsci_bcwt <= 1'b0;
    end
    else begin
      src_rsci_bcwt <= ~((~(src_rsci_bcwt | src_rsci_biwt)) | src_rsci_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      src_rsci_idat_bfwt <= 12'b000000000000;
    end
    else if ( src_rsci_biwt ) begin
      src_rsci_idat_bfwt <= src_rsci_idat;
    end
  end

  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [0:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    awb_core_src_rsci_src_wait_ctrl
// ------------------------------------------------------------------


module awb_core_src_rsci_src_wait_ctrl (
  core_wen, src_rsci_oswt, src_rsci_biwt, src_rsci_bdwt, src_rsci_bcwt, src_rsci_irdy_core_sct,
      src_rsci_ivld
);
  input core_wen;
  input src_rsci_oswt;
  output src_rsci_biwt;
  output src_rsci_bdwt;
  input src_rsci_bcwt;
  output src_rsci_irdy_core_sct;
  input src_rsci_ivld;


  // Interconnect Declarations
  wire src_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign src_rsci_bdwt = src_rsci_oswt & core_wen;
  assign src_rsci_biwt = src_rsci_ogwt & src_rsci_ivld;
  assign src_rsci_ogwt = src_rsci_oswt & (~ src_rsci_bcwt);
  assign src_rsci_irdy_core_sct = src_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    wbc_core_staller
// ------------------------------------------------------------------


module wbc_core_staller (
  core_wen, src_rsci_wen_comp, dst_rsci_wen_comp
);
  output core_wen;
  input src_rsci_wen_comp;
  input dst_rsci_wen_comp;



  // Interconnect Declarations for Component Instantiations 
  assign core_wen = src_rsci_wen_comp & dst_rsci_wen_comp;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    wbc_core_dst_rsci_dst_wait_dp
// ------------------------------------------------------------------


module wbc_core_dst_rsci_dst_wait_dp (
  clk, arst_n, dst_rsci_oswt, dst_rsci_wen_comp, dst_rsci_biwt, dst_rsci_bdwt, dst_rsci_bcwt
);
  input clk;
  input arst_n;
  input dst_rsci_oswt;
  output dst_rsci_wen_comp;
  input dst_rsci_biwt;
  input dst_rsci_bdwt;
  output dst_rsci_bcwt;
  reg dst_rsci_bcwt;



  // Interconnect Declarations for Component Instantiations 
  assign dst_rsci_wen_comp = (~ dst_rsci_oswt) | dst_rsci_biwt | dst_rsci_bcwt;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dst_rsci_bcwt <= 1'b0;
    end
    else begin
      dst_rsci_bcwt <= ~((~(dst_rsci_bcwt | dst_rsci_biwt)) | dst_rsci_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    wbc_core_dst_rsci_dst_wait_ctrl
// ------------------------------------------------------------------


module wbc_core_dst_rsci_dst_wait_ctrl (
  core_wen, dst_rsci_oswt, dst_rsci_irdy, dst_rsci_biwt, dst_rsci_bdwt, dst_rsci_bcwt,
      dst_rsci_ivld_core_sct
);
  input core_wen;
  input dst_rsci_oswt;
  input dst_rsci_irdy;
  output dst_rsci_biwt;
  output dst_rsci_bdwt;
  input dst_rsci_bcwt;
  output dst_rsci_ivld_core_sct;


  // Interconnect Declarations
  wire dst_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign dst_rsci_bdwt = dst_rsci_oswt & core_wen;
  assign dst_rsci_biwt = dst_rsci_ogwt & dst_rsci_irdy;
  assign dst_rsci_ogwt = dst_rsci_oswt & (~ dst_rsci_bcwt);
  assign dst_rsci_ivld_core_sct = dst_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    wbc_core_src_rsci_src_wait_dp
// ------------------------------------------------------------------


module wbc_core_src_rsci_src_wait_dp (
  clk, arst_n, src_rsci_oswt, src_rsci_wen_comp, src_rsci_idat_mxwt, src_rsci_biwt,
      src_rsci_bdwt, src_rsci_bcwt, src_rsci_idat
);
  input clk;
  input arst_n;
  input src_rsci_oswt;
  output src_rsci_wen_comp;
  output [11:0] src_rsci_idat_mxwt;
  input src_rsci_biwt;
  input src_rsci_bdwt;
  output src_rsci_bcwt;
  reg src_rsci_bcwt;
  input [11:0] src_rsci_idat;


  // Interconnect Declarations
  reg [11:0] src_rsci_idat_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign src_rsci_wen_comp = (~ src_rsci_oswt) | src_rsci_biwt | src_rsci_bcwt;
  assign src_rsci_idat_mxwt = MUX_v_12_2_2(src_rsci_idat, src_rsci_idat_bfwt, src_rsci_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      src_rsci_bcwt <= 1'b0;
    end
    else begin
      src_rsci_bcwt <= ~((~(src_rsci_bcwt | src_rsci_biwt)) | src_rsci_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      src_rsci_idat_bfwt <= 12'b000000000000;
    end
    else if ( src_rsci_biwt ) begin
      src_rsci_idat_bfwt <= src_rsci_idat;
    end
  end

  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [0:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    wbc_core_src_rsci_src_wait_ctrl
// ------------------------------------------------------------------


module wbc_core_src_rsci_src_wait_ctrl (
  core_wen, src_rsci_oswt, src_rsci_biwt, src_rsci_bdwt, src_rsci_bcwt, src_rsci_irdy_core_sct,
      src_rsci_ivld
);
  input core_wen;
  input src_rsci_oswt;
  output src_rsci_biwt;
  output src_rsci_bdwt;
  input src_rsci_bcwt;
  output src_rsci_irdy_core_sct;
  input src_rsci_ivld;


  // Interconnect Declarations
  wire src_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign src_rsci_bdwt = src_rsci_oswt & core_wen;
  assign src_rsci_biwt = src_rsci_ogwt & src_rsci_ivld;
  assign src_rsci_ogwt = src_rsci_oswt & (~ src_rsci_bcwt);
  assign src_rsci_irdy_core_sct = src_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    greenbalance2_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_559_12_12_4096_4096_12_5_gen
// ------------------------------------------------------------------


module greenbalance2_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_559_12_12_4096_4096_12_5_gen
    (
  we, d, wadr, q, re, radr, radr_d, wadr_d, d_d, we_d, re_d, q_d, port_0_r_ram_ir_internal_RMASK_B_d,
      port_1_w_ram_ir_internal_WMASK_B_d
);
  output we;
  output [11:0] d;
  output [11:0] wadr;
  input [11:0] q;
  output re;
  output [11:0] radr;
  input [11:0] radr_d;
  input [11:0] wadr_d;
  input [11:0] d_d;
  input we_d;
  input re_d;
  output [11:0] q_d;
  input port_0_r_ram_ir_internal_RMASK_B_d;
  input port_1_w_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign we = (port_1_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
  assign q_d = q;
  assign re = (port_0_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    greenbalance2_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_558_12_12_4096_4096_12_5_gen
// ------------------------------------------------------------------


module greenbalance2_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_558_12_12_4096_4096_12_5_gen
    (
  we, d, wadr, q, re, radr, radr_d, wadr_d, d_d, we_d, re_d, q_d, port_0_r_ram_ir_internal_RMASK_B_d,
      port_1_w_ram_ir_internal_WMASK_B_d
);
  output we;
  output [11:0] d;
  output [11:0] wadr;
  input [11:0] q;
  output re;
  output [11:0] radr;
  input [11:0] radr_d;
  input [11:0] wadr_d;
  input [11:0] d_d;
  input we_d;
  input re_d;
  output [11:0] q_d;
  input port_0_r_ram_ir_internal_RMASK_B_d;
  input port_1_w_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign we = (port_1_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
  assign q_d = q;
  assign re = (port_0_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    greenbalance2_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_557_12_12_4096_4096_12_5_gen
// ------------------------------------------------------------------


module greenbalance2_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_557_12_12_4096_4096_12_5_gen
    (
  we, d, wadr, q, re, radr, radr_d, wadr_d, d_d, we_d, re_d, q_d, port_0_r_ram_ir_internal_RMASK_B_d,
      port_1_w_ram_ir_internal_WMASK_B_d
);
  output we;
  output [11:0] d;
  output [11:0] wadr;
  input [11:0] q;
  output re;
  output [11:0] radr;
  input [11:0] radr_d;
  input [11:0] wadr_d;
  input [11:0] d_d;
  input we_d;
  input re_d;
  output [11:0] q_d;
  input port_0_r_ram_ir_internal_RMASK_B_d;
  input port_1_w_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign we = (port_1_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
  assign q_d = q;
  assign re = (port_0_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    greenbalance2_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_556_12_12_4096_4096_12_5_gen
// ------------------------------------------------------------------


module greenbalance2_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_556_12_12_4096_4096_12_5_gen
    (
  we, d, wadr, q, re, radr, radr_d, wadr_d, d_d, we_d, re_d, q_d, port_0_r_ram_ir_internal_RMASK_B_d,
      port_1_w_ram_ir_internal_WMASK_B_d
);
  output we;
  output [11:0] d;
  output [11:0] wadr;
  input [11:0] q;
  output re;
  output [11:0] radr;
  input [11:0] radr_d;
  input [11:0] wadr_d;
  input [11:0] d_d;
  input we_d;
  input re_d;
  output [11:0] q_d;
  input port_0_r_ram_ir_internal_RMASK_B_d;
  input port_1_w_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign we = (port_1_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
  assign q_d = q;
  assign re = (port_0_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    greenbalance2_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_555_12_12_4096_4096_12_5_gen
// ------------------------------------------------------------------


module greenbalance2_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_555_12_12_4096_4096_12_5_gen
    (
  we, d, wadr, q, re, radr, radr_d, wadr_d, d_d, we_d, re_d, q_d, port_0_r_ram_ir_internal_RMASK_B_d,
      port_1_w_ram_ir_internal_WMASK_B_d
);
  output we;
  output [11:0] d;
  output [11:0] wadr;
  input [11:0] q;
  output re;
  output [11:0] radr;
  input [11:0] radr_d;
  input [11:0] wadr_d;
  input [11:0] d_d;
  input we_d;
  input re_d;
  output [11:0] q_d;
  input port_0_r_ram_ir_internal_RMASK_B_d;
  input port_1_w_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign we = (port_1_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
  assign q_d = q;
  assign re = (port_0_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    greenbalance2_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_554_12_12_4096_4096_12_5_gen
// ------------------------------------------------------------------


module greenbalance2_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_554_12_12_4096_4096_12_5_gen
    (
  we, d, wadr, q, re, radr, radr_d, wadr_d, d_d, we_d, re_d, q_d, port_0_r_ram_ir_internal_RMASK_B_d,
      port_1_w_ram_ir_internal_WMASK_B_d
);
  output we;
  output [11:0] d;
  output [11:0] wadr;
  input [11:0] q;
  output re;
  output [11:0] radr;
  input [11:0] radr_d;
  input [11:0] wadr_d;
  input [11:0] d_d;
  input we_d;
  input re_d;
  output [11:0] q_d;
  input port_0_r_ram_ir_internal_RMASK_B_d;
  input port_1_w_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign we = (port_1_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
  assign q_d = q;
  assign re = (port_0_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    greenbalance2_core_staller
// ------------------------------------------------------------------


module greenbalance2_core_staller (
  clk, arst_n, core_wen, core_wten, src_rsci_wen_comp, dst_rsci_wen_comp
);
  input clk;
  input arst_n;
  output core_wen;
  output core_wten;
  input src_rsci_wen_comp;
  input dst_rsci_wen_comp;


  // Interconnect Declarations
  reg core_wten_reg;


  // Interconnect Declarations for Component Instantiations 
  assign core_wen = src_rsci_wen_comp & dst_rsci_wen_comp;
  assign core_wten = core_wten_reg;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      core_wten_reg <= 1'b0;
    end
    else begin
      core_wten_reg <= ~ core_wen;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    greenbalance2_core_gb_lines_rsc_0_5_i_1_gb_lines_rsc_0_5_wait_dp
// ------------------------------------------------------------------


module greenbalance2_core_gb_lines_rsc_0_5_i_1_gb_lines_rsc_0_5_wait_dp (
  clk, arst_n, gb_lines_rsc_0_5_i_q_d, gb_lines_rsc_0_5_i_q_d_mxwt, gb_lines_rsc_0_5_i_biwt,
      gb_lines_rsc_0_5_i_bdwt
);
  input clk;
  input arst_n;
  input [11:0] gb_lines_rsc_0_5_i_q_d;
  output [11:0] gb_lines_rsc_0_5_i_q_d_mxwt;
  input gb_lines_rsc_0_5_i_biwt;
  input gb_lines_rsc_0_5_i_bdwt;


  // Interconnect Declarations
  reg gb_lines_rsc_0_5_i_bcwt;
  reg [11:0] gb_lines_rsc_0_5_i_q_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign gb_lines_rsc_0_5_i_q_d_mxwt = MUX_v_12_2_2(gb_lines_rsc_0_5_i_q_d, gb_lines_rsc_0_5_i_q_d_bfwt,
      gb_lines_rsc_0_5_i_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      gb_lines_rsc_0_5_i_bcwt <= 1'b0;
    end
    else begin
      gb_lines_rsc_0_5_i_bcwt <= ~((~(gb_lines_rsc_0_5_i_bcwt | gb_lines_rsc_0_5_i_biwt))
          | gb_lines_rsc_0_5_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      gb_lines_rsc_0_5_i_q_d_bfwt <= 12'b000000000000;
    end
    else if ( gb_lines_rsc_0_5_i_biwt ) begin
      gb_lines_rsc_0_5_i_q_d_bfwt <= gb_lines_rsc_0_5_i_q_d;
    end
  end

  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [0:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    greenbalance2_core_gb_lines_rsc_0_5_i_1_gb_lines_rsc_0_5_wait_ctrl
// ------------------------------------------------------------------


module greenbalance2_core_gb_lines_rsc_0_5_i_1_gb_lines_rsc_0_5_wait_ctrl (
  core_wen, core_wten, gb_lines_rsc_0_5_i_oswt, gb_lines_rsc_0_5_i_biwt, gb_lines_rsc_0_5_i_bdwt,
      gb_lines_rsc_0_5_i_we_d_core_sct_pff, gb_lines_rsc_0_5_i_iswt0_1_pff, gb_lines_rsc_0_5_i_re_d_core_sct_pff,
      gb_lines_rsc_0_5_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input gb_lines_rsc_0_5_i_oswt;
  output gb_lines_rsc_0_5_i_biwt;
  output gb_lines_rsc_0_5_i_bdwt;
  output gb_lines_rsc_0_5_i_we_d_core_sct_pff;
  input gb_lines_rsc_0_5_i_iswt0_1_pff;
  output gb_lines_rsc_0_5_i_re_d_core_sct_pff;
  input gb_lines_rsc_0_5_i_oswt_pff;



  // Interconnect Declarations for Component Instantiations 
  assign gb_lines_rsc_0_5_i_bdwt = gb_lines_rsc_0_5_i_oswt & core_wen;
  assign gb_lines_rsc_0_5_i_biwt = (~ core_wten) & gb_lines_rsc_0_5_i_oswt;
  assign gb_lines_rsc_0_5_i_we_d_core_sct_pff = gb_lines_rsc_0_5_i_iswt0_1_pff &
      core_wen;
  assign gb_lines_rsc_0_5_i_re_d_core_sct_pff = gb_lines_rsc_0_5_i_oswt_pff & core_wen;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    greenbalance2_core_gb_lines_rsc_0_4_i_1_gb_lines_rsc_0_4_wait_dp
// ------------------------------------------------------------------


module greenbalance2_core_gb_lines_rsc_0_4_i_1_gb_lines_rsc_0_4_wait_dp (
  clk, arst_n, gb_lines_rsc_0_4_i_q_d, gb_lines_rsc_0_4_i_q_d_mxwt, gb_lines_rsc_0_4_i_biwt,
      gb_lines_rsc_0_4_i_bdwt
);
  input clk;
  input arst_n;
  input [11:0] gb_lines_rsc_0_4_i_q_d;
  output [11:0] gb_lines_rsc_0_4_i_q_d_mxwt;
  input gb_lines_rsc_0_4_i_biwt;
  input gb_lines_rsc_0_4_i_bdwt;


  // Interconnect Declarations
  reg gb_lines_rsc_0_4_i_bcwt;
  reg [11:0] gb_lines_rsc_0_4_i_q_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign gb_lines_rsc_0_4_i_q_d_mxwt = MUX_v_12_2_2(gb_lines_rsc_0_4_i_q_d, gb_lines_rsc_0_4_i_q_d_bfwt,
      gb_lines_rsc_0_4_i_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      gb_lines_rsc_0_4_i_bcwt <= 1'b0;
    end
    else begin
      gb_lines_rsc_0_4_i_bcwt <= ~((~(gb_lines_rsc_0_4_i_bcwt | gb_lines_rsc_0_4_i_biwt))
          | gb_lines_rsc_0_4_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      gb_lines_rsc_0_4_i_q_d_bfwt <= 12'b000000000000;
    end
    else if ( gb_lines_rsc_0_4_i_biwt ) begin
      gb_lines_rsc_0_4_i_q_d_bfwt <= gb_lines_rsc_0_4_i_q_d;
    end
  end

  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [0:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    greenbalance2_core_gb_lines_rsc_0_4_i_1_gb_lines_rsc_0_4_wait_ctrl
// ------------------------------------------------------------------


module greenbalance2_core_gb_lines_rsc_0_4_i_1_gb_lines_rsc_0_4_wait_ctrl (
  core_wen, core_wten, gb_lines_rsc_0_4_i_oswt, gb_lines_rsc_0_4_i_biwt, gb_lines_rsc_0_4_i_bdwt,
      gb_lines_rsc_0_4_i_we_d_core_sct_pff, gb_lines_rsc_0_4_i_iswt0_1_pff, gb_lines_rsc_0_4_i_re_d_core_sct_pff,
      gb_lines_rsc_0_4_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input gb_lines_rsc_0_4_i_oswt;
  output gb_lines_rsc_0_4_i_biwt;
  output gb_lines_rsc_0_4_i_bdwt;
  output gb_lines_rsc_0_4_i_we_d_core_sct_pff;
  input gb_lines_rsc_0_4_i_iswt0_1_pff;
  output gb_lines_rsc_0_4_i_re_d_core_sct_pff;
  input gb_lines_rsc_0_4_i_oswt_pff;



  // Interconnect Declarations for Component Instantiations 
  assign gb_lines_rsc_0_4_i_bdwt = gb_lines_rsc_0_4_i_oswt & core_wen;
  assign gb_lines_rsc_0_4_i_biwt = (~ core_wten) & gb_lines_rsc_0_4_i_oswt;
  assign gb_lines_rsc_0_4_i_we_d_core_sct_pff = gb_lines_rsc_0_4_i_iswt0_1_pff &
      core_wen;
  assign gb_lines_rsc_0_4_i_re_d_core_sct_pff = gb_lines_rsc_0_4_i_oswt_pff & core_wen;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    greenbalance2_core_gb_lines_rsc_0_3_i_1_gb_lines_rsc_0_3_wait_dp
// ------------------------------------------------------------------


module greenbalance2_core_gb_lines_rsc_0_3_i_1_gb_lines_rsc_0_3_wait_dp (
  clk, arst_n, gb_lines_rsc_0_3_i_q_d, gb_lines_rsc_0_3_i_q_d_mxwt, gb_lines_rsc_0_3_i_biwt,
      gb_lines_rsc_0_3_i_bdwt
);
  input clk;
  input arst_n;
  input [11:0] gb_lines_rsc_0_3_i_q_d;
  output [11:0] gb_lines_rsc_0_3_i_q_d_mxwt;
  input gb_lines_rsc_0_3_i_biwt;
  input gb_lines_rsc_0_3_i_bdwt;


  // Interconnect Declarations
  reg gb_lines_rsc_0_3_i_bcwt;
  reg [11:0] gb_lines_rsc_0_3_i_q_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign gb_lines_rsc_0_3_i_q_d_mxwt = MUX_v_12_2_2(gb_lines_rsc_0_3_i_q_d, gb_lines_rsc_0_3_i_q_d_bfwt,
      gb_lines_rsc_0_3_i_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      gb_lines_rsc_0_3_i_bcwt <= 1'b0;
    end
    else begin
      gb_lines_rsc_0_3_i_bcwt <= ~((~(gb_lines_rsc_0_3_i_bcwt | gb_lines_rsc_0_3_i_biwt))
          | gb_lines_rsc_0_3_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      gb_lines_rsc_0_3_i_q_d_bfwt <= 12'b000000000000;
    end
    else if ( gb_lines_rsc_0_3_i_biwt ) begin
      gb_lines_rsc_0_3_i_q_d_bfwt <= gb_lines_rsc_0_3_i_q_d;
    end
  end

  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [0:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    greenbalance2_core_gb_lines_rsc_0_3_i_1_gb_lines_rsc_0_3_wait_ctrl
// ------------------------------------------------------------------


module greenbalance2_core_gb_lines_rsc_0_3_i_1_gb_lines_rsc_0_3_wait_ctrl (
  core_wen, core_wten, gb_lines_rsc_0_3_i_oswt, gb_lines_rsc_0_3_i_biwt, gb_lines_rsc_0_3_i_bdwt,
      gb_lines_rsc_0_3_i_we_d_core_sct_pff, gb_lines_rsc_0_3_i_iswt0_1_pff, gb_lines_rsc_0_3_i_re_d_core_sct_pff,
      gb_lines_rsc_0_3_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input gb_lines_rsc_0_3_i_oswt;
  output gb_lines_rsc_0_3_i_biwt;
  output gb_lines_rsc_0_3_i_bdwt;
  output gb_lines_rsc_0_3_i_we_d_core_sct_pff;
  input gb_lines_rsc_0_3_i_iswt0_1_pff;
  output gb_lines_rsc_0_3_i_re_d_core_sct_pff;
  input gb_lines_rsc_0_3_i_oswt_pff;



  // Interconnect Declarations for Component Instantiations 
  assign gb_lines_rsc_0_3_i_bdwt = gb_lines_rsc_0_3_i_oswt & core_wen;
  assign gb_lines_rsc_0_3_i_biwt = (~ core_wten) & gb_lines_rsc_0_3_i_oswt;
  assign gb_lines_rsc_0_3_i_we_d_core_sct_pff = gb_lines_rsc_0_3_i_iswt0_1_pff &
      core_wen;
  assign gb_lines_rsc_0_3_i_re_d_core_sct_pff = gb_lines_rsc_0_3_i_oswt_pff & core_wen;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    greenbalance2_core_gb_lines_rsc_0_2_i_1_gb_lines_rsc_0_2_wait_dp
// ------------------------------------------------------------------


module greenbalance2_core_gb_lines_rsc_0_2_i_1_gb_lines_rsc_0_2_wait_dp (
  clk, arst_n, gb_lines_rsc_0_2_i_q_d, gb_lines_rsc_0_2_i_q_d_mxwt, gb_lines_rsc_0_2_i_biwt,
      gb_lines_rsc_0_2_i_bdwt
);
  input clk;
  input arst_n;
  input [11:0] gb_lines_rsc_0_2_i_q_d;
  output [11:0] gb_lines_rsc_0_2_i_q_d_mxwt;
  input gb_lines_rsc_0_2_i_biwt;
  input gb_lines_rsc_0_2_i_bdwt;


  // Interconnect Declarations
  reg gb_lines_rsc_0_2_i_bcwt;
  reg [11:0] gb_lines_rsc_0_2_i_q_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign gb_lines_rsc_0_2_i_q_d_mxwt = MUX_v_12_2_2(gb_lines_rsc_0_2_i_q_d, gb_lines_rsc_0_2_i_q_d_bfwt,
      gb_lines_rsc_0_2_i_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      gb_lines_rsc_0_2_i_bcwt <= 1'b0;
    end
    else begin
      gb_lines_rsc_0_2_i_bcwt <= ~((~(gb_lines_rsc_0_2_i_bcwt | gb_lines_rsc_0_2_i_biwt))
          | gb_lines_rsc_0_2_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      gb_lines_rsc_0_2_i_q_d_bfwt <= 12'b000000000000;
    end
    else if ( gb_lines_rsc_0_2_i_biwt ) begin
      gb_lines_rsc_0_2_i_q_d_bfwt <= gb_lines_rsc_0_2_i_q_d;
    end
  end

  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [0:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    greenbalance2_core_gb_lines_rsc_0_2_i_1_gb_lines_rsc_0_2_wait_ctrl
// ------------------------------------------------------------------


module greenbalance2_core_gb_lines_rsc_0_2_i_1_gb_lines_rsc_0_2_wait_ctrl (
  core_wen, core_wten, gb_lines_rsc_0_2_i_oswt, gb_lines_rsc_0_2_i_biwt, gb_lines_rsc_0_2_i_bdwt,
      gb_lines_rsc_0_2_i_we_d_core_sct_pff, gb_lines_rsc_0_2_i_iswt0_1_pff, gb_lines_rsc_0_2_i_re_d_core_sct_pff,
      gb_lines_rsc_0_2_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input gb_lines_rsc_0_2_i_oswt;
  output gb_lines_rsc_0_2_i_biwt;
  output gb_lines_rsc_0_2_i_bdwt;
  output gb_lines_rsc_0_2_i_we_d_core_sct_pff;
  input gb_lines_rsc_0_2_i_iswt0_1_pff;
  output gb_lines_rsc_0_2_i_re_d_core_sct_pff;
  input gb_lines_rsc_0_2_i_oswt_pff;



  // Interconnect Declarations for Component Instantiations 
  assign gb_lines_rsc_0_2_i_bdwt = gb_lines_rsc_0_2_i_oswt & core_wen;
  assign gb_lines_rsc_0_2_i_biwt = (~ core_wten) & gb_lines_rsc_0_2_i_oswt;
  assign gb_lines_rsc_0_2_i_we_d_core_sct_pff = gb_lines_rsc_0_2_i_iswt0_1_pff &
      core_wen;
  assign gb_lines_rsc_0_2_i_re_d_core_sct_pff = gb_lines_rsc_0_2_i_oswt_pff & core_wen;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    greenbalance2_core_gb_lines_rsc_0_1_i_1_gb_lines_rsc_0_1_wait_dp
// ------------------------------------------------------------------


module greenbalance2_core_gb_lines_rsc_0_1_i_1_gb_lines_rsc_0_1_wait_dp (
  clk, arst_n, gb_lines_rsc_0_1_i_q_d, gb_lines_rsc_0_1_i_q_d_mxwt, gb_lines_rsc_0_1_i_biwt,
      gb_lines_rsc_0_1_i_bdwt
);
  input clk;
  input arst_n;
  input [11:0] gb_lines_rsc_0_1_i_q_d;
  output [11:0] gb_lines_rsc_0_1_i_q_d_mxwt;
  input gb_lines_rsc_0_1_i_biwt;
  input gb_lines_rsc_0_1_i_bdwt;


  // Interconnect Declarations
  reg gb_lines_rsc_0_1_i_bcwt;
  reg [11:0] gb_lines_rsc_0_1_i_q_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign gb_lines_rsc_0_1_i_q_d_mxwt = MUX_v_12_2_2(gb_lines_rsc_0_1_i_q_d, gb_lines_rsc_0_1_i_q_d_bfwt,
      gb_lines_rsc_0_1_i_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      gb_lines_rsc_0_1_i_bcwt <= 1'b0;
    end
    else begin
      gb_lines_rsc_0_1_i_bcwt <= ~((~(gb_lines_rsc_0_1_i_bcwt | gb_lines_rsc_0_1_i_biwt))
          | gb_lines_rsc_0_1_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      gb_lines_rsc_0_1_i_q_d_bfwt <= 12'b000000000000;
    end
    else if ( gb_lines_rsc_0_1_i_biwt ) begin
      gb_lines_rsc_0_1_i_q_d_bfwt <= gb_lines_rsc_0_1_i_q_d;
    end
  end

  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [0:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    greenbalance2_core_gb_lines_rsc_0_1_i_1_gb_lines_rsc_0_1_wait_ctrl
// ------------------------------------------------------------------


module greenbalance2_core_gb_lines_rsc_0_1_i_1_gb_lines_rsc_0_1_wait_ctrl (
  core_wen, core_wten, gb_lines_rsc_0_1_i_oswt, gb_lines_rsc_0_1_i_biwt, gb_lines_rsc_0_1_i_bdwt,
      gb_lines_rsc_0_1_i_we_d_core_sct_pff, gb_lines_rsc_0_1_i_iswt0_1_pff, gb_lines_rsc_0_1_i_re_d_core_sct_pff,
      gb_lines_rsc_0_1_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input gb_lines_rsc_0_1_i_oswt;
  output gb_lines_rsc_0_1_i_biwt;
  output gb_lines_rsc_0_1_i_bdwt;
  output gb_lines_rsc_0_1_i_we_d_core_sct_pff;
  input gb_lines_rsc_0_1_i_iswt0_1_pff;
  output gb_lines_rsc_0_1_i_re_d_core_sct_pff;
  input gb_lines_rsc_0_1_i_oswt_pff;



  // Interconnect Declarations for Component Instantiations 
  assign gb_lines_rsc_0_1_i_bdwt = gb_lines_rsc_0_1_i_oswt & core_wen;
  assign gb_lines_rsc_0_1_i_biwt = (~ core_wten) & gb_lines_rsc_0_1_i_oswt;
  assign gb_lines_rsc_0_1_i_we_d_core_sct_pff = gb_lines_rsc_0_1_i_iswt0_1_pff &
      core_wen;
  assign gb_lines_rsc_0_1_i_re_d_core_sct_pff = gb_lines_rsc_0_1_i_oswt_pff & core_wen;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    greenbalance2_core_gb_lines_rsc_0_0_i_1_gb_lines_rsc_0_0_wait_dp
// ------------------------------------------------------------------


module greenbalance2_core_gb_lines_rsc_0_0_i_1_gb_lines_rsc_0_0_wait_dp (
  clk, arst_n, gb_lines_rsc_0_0_i_q_d, gb_lines_rsc_0_0_i_q_d_mxwt, gb_lines_rsc_0_0_i_biwt,
      gb_lines_rsc_0_0_i_bdwt
);
  input clk;
  input arst_n;
  input [11:0] gb_lines_rsc_0_0_i_q_d;
  output [11:0] gb_lines_rsc_0_0_i_q_d_mxwt;
  input gb_lines_rsc_0_0_i_biwt;
  input gb_lines_rsc_0_0_i_bdwt;


  // Interconnect Declarations
  reg gb_lines_rsc_0_0_i_bcwt;
  reg [11:0] gb_lines_rsc_0_0_i_q_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign gb_lines_rsc_0_0_i_q_d_mxwt = MUX_v_12_2_2(gb_lines_rsc_0_0_i_q_d, gb_lines_rsc_0_0_i_q_d_bfwt,
      gb_lines_rsc_0_0_i_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      gb_lines_rsc_0_0_i_bcwt <= 1'b0;
    end
    else begin
      gb_lines_rsc_0_0_i_bcwt <= ~((~(gb_lines_rsc_0_0_i_bcwt | gb_lines_rsc_0_0_i_biwt))
          | gb_lines_rsc_0_0_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      gb_lines_rsc_0_0_i_q_d_bfwt <= 12'b000000000000;
    end
    else if ( gb_lines_rsc_0_0_i_biwt ) begin
      gb_lines_rsc_0_0_i_q_d_bfwt <= gb_lines_rsc_0_0_i_q_d;
    end
  end

  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [0:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    greenbalance2_core_gb_lines_rsc_0_0_i_1_gb_lines_rsc_0_0_wait_ctrl
// ------------------------------------------------------------------


module greenbalance2_core_gb_lines_rsc_0_0_i_1_gb_lines_rsc_0_0_wait_ctrl (
  core_wen, core_wten, gb_lines_rsc_0_0_i_oswt, gb_lines_rsc_0_0_i_biwt, gb_lines_rsc_0_0_i_bdwt,
      gb_lines_rsc_0_0_i_we_d_core_sct_pff, gb_lines_rsc_0_0_i_iswt0_1_pff, gb_lines_rsc_0_0_i_re_d_core_sct_pff,
      gb_lines_rsc_0_0_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input gb_lines_rsc_0_0_i_oswt;
  output gb_lines_rsc_0_0_i_biwt;
  output gb_lines_rsc_0_0_i_bdwt;
  output gb_lines_rsc_0_0_i_we_d_core_sct_pff;
  input gb_lines_rsc_0_0_i_iswt0_1_pff;
  output gb_lines_rsc_0_0_i_re_d_core_sct_pff;
  input gb_lines_rsc_0_0_i_oswt_pff;



  // Interconnect Declarations for Component Instantiations 
  assign gb_lines_rsc_0_0_i_bdwt = gb_lines_rsc_0_0_i_oswt & core_wen;
  assign gb_lines_rsc_0_0_i_biwt = (~ core_wten) & gb_lines_rsc_0_0_i_oswt;
  assign gb_lines_rsc_0_0_i_we_d_core_sct_pff = gb_lines_rsc_0_0_i_iswt0_1_pff &
      core_wen;
  assign gb_lines_rsc_0_0_i_re_d_core_sct_pff = gb_lines_rsc_0_0_i_oswt_pff & core_wen;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    greenbalance2_core_dst_rsci_dst_wait_dp
// ------------------------------------------------------------------


module greenbalance2_core_dst_rsci_dst_wait_dp (
  clk, arst_n, dst_rsci_oswt, dst_rsci_wen_comp, dst_rsci_biwt, dst_rsci_bdwt, dst_rsci_bcwt
);
  input clk;
  input arst_n;
  input dst_rsci_oswt;
  output dst_rsci_wen_comp;
  input dst_rsci_biwt;
  input dst_rsci_bdwt;
  output dst_rsci_bcwt;
  reg dst_rsci_bcwt;



  // Interconnect Declarations for Component Instantiations 
  assign dst_rsci_wen_comp = (~ dst_rsci_oswt) | dst_rsci_biwt | dst_rsci_bcwt;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dst_rsci_bcwt <= 1'b0;
    end
    else begin
      dst_rsci_bcwt <= ~((~(dst_rsci_bcwt | dst_rsci_biwt)) | dst_rsci_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    greenbalance2_core_dst_rsci_dst_wait_ctrl
// ------------------------------------------------------------------


module greenbalance2_core_dst_rsci_dst_wait_ctrl (
  core_wen, dst_rsci_oswt, dst_rsci_irdy, dst_rsci_biwt, dst_rsci_bdwt, dst_rsci_bcwt,
      dst_rsci_ivld_core_sct
);
  input core_wen;
  input dst_rsci_oswt;
  input dst_rsci_irdy;
  output dst_rsci_biwt;
  output dst_rsci_bdwt;
  input dst_rsci_bcwt;
  output dst_rsci_ivld_core_sct;


  // Interconnect Declarations
  wire dst_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign dst_rsci_bdwt = dst_rsci_oswt & core_wen;
  assign dst_rsci_biwt = dst_rsci_ogwt & dst_rsci_irdy;
  assign dst_rsci_ogwt = dst_rsci_oswt & (~ dst_rsci_bcwt);
  assign dst_rsci_ivld_core_sct = dst_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    greenbalance2_core_src_rsci_src_wait_dp
// ------------------------------------------------------------------


module greenbalance2_core_src_rsci_src_wait_dp (
  clk, arst_n, src_rsci_oswt, src_rsci_wen_comp, src_rsci_idat_mxwt, src_rsci_biwt,
      src_rsci_bdwt, src_rsci_bcwt, src_rsci_idat
);
  input clk;
  input arst_n;
  input src_rsci_oswt;
  output src_rsci_wen_comp;
  output [11:0] src_rsci_idat_mxwt;
  input src_rsci_biwt;
  input src_rsci_bdwt;
  output src_rsci_bcwt;
  reg src_rsci_bcwt;
  input [11:0] src_rsci_idat;


  // Interconnect Declarations
  reg [11:0] src_rsci_idat_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign src_rsci_wen_comp = (~ src_rsci_oswt) | src_rsci_biwt | src_rsci_bcwt;
  assign src_rsci_idat_mxwt = MUX_v_12_2_2(src_rsci_idat, src_rsci_idat_bfwt, src_rsci_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      src_rsci_bcwt <= 1'b0;
    end
    else begin
      src_rsci_bcwt <= ~((~(src_rsci_bcwt | src_rsci_biwt)) | src_rsci_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      src_rsci_idat_bfwt <= 12'b000000000000;
    end
    else if ( src_rsci_biwt ) begin
      src_rsci_idat_bfwt <= src_rsci_idat;
    end
  end

  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [0:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    greenbalance2_core_src_rsci_src_wait_ctrl
// ------------------------------------------------------------------


module greenbalance2_core_src_rsci_src_wait_ctrl (
  core_wen, src_rsci_oswt, src_rsci_biwt, src_rsci_bdwt, src_rsci_bcwt, src_rsci_irdy_core_sct,
      src_rsci_ivld
);
  input core_wen;
  input src_rsci_oswt;
  output src_rsci_biwt;
  output src_rsci_bdwt;
  input src_rsci_bcwt;
  output src_rsci_irdy_core_sct;
  input src_rsci_ivld;


  // Interconnect Declarations
  wire src_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign src_rsci_bdwt = src_rsci_oswt & core_wen;
  assign src_rsci_biwt = src_rsci_ogwt & src_rsci_ivld;
  assign src_rsci_ogwt = src_rsci_oswt & (~ src_rsci_bcwt);
  assign src_rsci_irdy_core_sct = src_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    demosaic_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_563_12_12_4096_4096_12_5_gen
// ------------------------------------------------------------------


module demosaic_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_563_12_12_4096_4096_12_5_gen
    (
  we, d, wadr, q, re, radr, radr_d, wadr_d, d_d, we_d, re_d, q_d, port_0_r_ram_ir_internal_RMASK_B_d,
      port_1_w_ram_ir_internal_WMASK_B_d
);
  output we;
  output [11:0] d;
  output [11:0] wadr;
  input [11:0] q;
  output re;
  output [11:0] radr;
  input [11:0] radr_d;
  input [11:0] wadr_d;
  input [11:0] d_d;
  input we_d;
  input re_d;
  output [11:0] q_d;
  input port_0_r_ram_ir_internal_RMASK_B_d;
  input port_1_w_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign we = (port_1_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
  assign q_d = q;
  assign re = (port_0_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    demosaic_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_562_12_12_4096_4096_12_5_gen
// ------------------------------------------------------------------


module demosaic_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_562_12_12_4096_4096_12_5_gen
    (
  we, d, wadr, q, re, radr, radr_d, wadr_d, d_d, we_d, re_d, q_d, port_0_r_ram_ir_internal_RMASK_B_d,
      port_1_w_ram_ir_internal_WMASK_B_d
);
  output we;
  output [11:0] d;
  output [11:0] wadr;
  input [11:0] q;
  output re;
  output [11:0] radr;
  input [11:0] radr_d;
  input [11:0] wadr_d;
  input [11:0] d_d;
  input we_d;
  input re_d;
  output [11:0] q_d;
  input port_0_r_ram_ir_internal_RMASK_B_d;
  input port_1_w_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign we = (port_1_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
  assign q_d = q;
  assign re = (port_0_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    demosaic_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_561_12_12_4096_4096_12_5_gen
// ------------------------------------------------------------------


module demosaic_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_561_12_12_4096_4096_12_5_gen
    (
  we, d, wadr, q, re, radr, radr_d, wadr_d, d_d, we_d, re_d, q_d, port_0_r_ram_ir_internal_RMASK_B_d,
      port_1_w_ram_ir_internal_WMASK_B_d
);
  output we;
  output [11:0] d;
  output [11:0] wadr;
  input [11:0] q;
  output re;
  output [11:0] radr;
  input [11:0] radr_d;
  input [11:0] wadr_d;
  input [11:0] d_d;
  input we_d;
  input re_d;
  output [11:0] q_d;
  input port_0_r_ram_ir_internal_RMASK_B_d;
  input port_1_w_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign we = (port_1_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
  assign q_d = q;
  assign re = (port_0_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    demosaic_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_560_12_12_4096_4096_12_5_gen
// ------------------------------------------------------------------


module demosaic_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_560_12_12_4096_4096_12_5_gen
    (
  we, d, wadr, q, re, radr, radr_d, wadr_d, d_d, we_d, re_d, q_d, port_0_r_ram_ir_internal_RMASK_B_d,
      port_1_w_ram_ir_internal_WMASK_B_d
);
  output we;
  output [11:0] d;
  output [11:0] wadr;
  input [11:0] q;
  output re;
  output [11:0] radr;
  input [11:0] radr_d;
  input [11:0] wadr_d;
  input [11:0] d_d;
  input we_d;
  input re_d;
  output [11:0] q_d;
  input port_0_r_ram_ir_internal_RMASK_B_d;
  input port_1_w_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign we = (port_1_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
  assign q_d = q;
  assign re = (port_0_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    demosaic_core_staller
// ------------------------------------------------------------------


module demosaic_core_staller (
  clk, arst_n, core_wen, core_wten, src_rsci_wen_comp, dst_rsci_wen_comp
);
  input clk;
  input arst_n;
  output core_wen;
  output core_wten;
  input src_rsci_wen_comp;
  input dst_rsci_wen_comp;


  // Interconnect Declarations
  reg core_wten_reg;


  // Interconnect Declarations for Component Instantiations 
  assign core_wen = src_rsci_wen_comp & dst_rsci_wen_comp;
  assign core_wten = core_wten_reg;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      core_wten_reg <= 1'b0;
    end
    else begin
      core_wten_reg <= ~ core_wen;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    demosaic_core_lineBuf_rsc_0_3_i_1_lineBuf_rsc_0_3_wait_dp
// ------------------------------------------------------------------


module demosaic_core_lineBuf_rsc_0_3_i_1_lineBuf_rsc_0_3_wait_dp (
  clk, arst_n, lineBuf_rsc_0_3_i_q_d, lineBuf_rsc_0_3_i_q_d_mxwt, lineBuf_rsc_0_3_i_biwt,
      lineBuf_rsc_0_3_i_bdwt
);
  input clk;
  input arst_n;
  input [11:0] lineBuf_rsc_0_3_i_q_d;
  output [11:0] lineBuf_rsc_0_3_i_q_d_mxwt;
  input lineBuf_rsc_0_3_i_biwt;
  input lineBuf_rsc_0_3_i_bdwt;


  // Interconnect Declarations
  reg lineBuf_rsc_0_3_i_bcwt;
  reg [11:0] lineBuf_rsc_0_3_i_q_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign lineBuf_rsc_0_3_i_q_d_mxwt = MUX_v_12_2_2(lineBuf_rsc_0_3_i_q_d, lineBuf_rsc_0_3_i_q_d_bfwt,
      lineBuf_rsc_0_3_i_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lineBuf_rsc_0_3_i_bcwt <= 1'b0;
    end
    else begin
      lineBuf_rsc_0_3_i_bcwt <= ~((~(lineBuf_rsc_0_3_i_bcwt | lineBuf_rsc_0_3_i_biwt))
          | lineBuf_rsc_0_3_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lineBuf_rsc_0_3_i_q_d_bfwt <= 12'b000000000000;
    end
    else if ( lineBuf_rsc_0_3_i_biwt ) begin
      lineBuf_rsc_0_3_i_q_d_bfwt <= lineBuf_rsc_0_3_i_q_d;
    end
  end

  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [0:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    demosaic_core_lineBuf_rsc_0_3_i_1_lineBuf_rsc_0_3_wait_ctrl
// ------------------------------------------------------------------


module demosaic_core_lineBuf_rsc_0_3_i_1_lineBuf_rsc_0_3_wait_ctrl (
  core_wen, core_wten, lineBuf_rsc_0_3_i_oswt, lineBuf_rsc_0_3_i_biwt, lineBuf_rsc_0_3_i_bdwt,
      lineBuf_rsc_0_3_i_we_d_core_sct_pff, lineBuf_rsc_0_3_i_iswt0_1_pff, lineBuf_rsc_0_3_i_re_d_core_sct_pff,
      lineBuf_rsc_0_3_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input lineBuf_rsc_0_3_i_oswt;
  output lineBuf_rsc_0_3_i_biwt;
  output lineBuf_rsc_0_3_i_bdwt;
  output lineBuf_rsc_0_3_i_we_d_core_sct_pff;
  input lineBuf_rsc_0_3_i_iswt0_1_pff;
  output lineBuf_rsc_0_3_i_re_d_core_sct_pff;
  input lineBuf_rsc_0_3_i_oswt_pff;



  // Interconnect Declarations for Component Instantiations 
  assign lineBuf_rsc_0_3_i_bdwt = lineBuf_rsc_0_3_i_oswt & core_wen;
  assign lineBuf_rsc_0_3_i_biwt = (~ core_wten) & lineBuf_rsc_0_3_i_oswt;
  assign lineBuf_rsc_0_3_i_we_d_core_sct_pff = lineBuf_rsc_0_3_i_iswt0_1_pff & core_wen;
  assign lineBuf_rsc_0_3_i_re_d_core_sct_pff = lineBuf_rsc_0_3_i_oswt_pff & core_wen;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    demosaic_core_lineBuf_rsc_0_2_i_1_lineBuf_rsc_0_2_wait_dp
// ------------------------------------------------------------------


module demosaic_core_lineBuf_rsc_0_2_i_1_lineBuf_rsc_0_2_wait_dp (
  clk, arst_n, lineBuf_rsc_0_2_i_q_d, lineBuf_rsc_0_2_i_q_d_mxwt, lineBuf_rsc_0_2_i_biwt,
      lineBuf_rsc_0_2_i_bdwt
);
  input clk;
  input arst_n;
  input [11:0] lineBuf_rsc_0_2_i_q_d;
  output [11:0] lineBuf_rsc_0_2_i_q_d_mxwt;
  input lineBuf_rsc_0_2_i_biwt;
  input lineBuf_rsc_0_2_i_bdwt;


  // Interconnect Declarations
  reg lineBuf_rsc_0_2_i_bcwt;
  reg [11:0] lineBuf_rsc_0_2_i_q_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign lineBuf_rsc_0_2_i_q_d_mxwt = MUX_v_12_2_2(lineBuf_rsc_0_2_i_q_d, lineBuf_rsc_0_2_i_q_d_bfwt,
      lineBuf_rsc_0_2_i_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lineBuf_rsc_0_2_i_bcwt <= 1'b0;
    end
    else begin
      lineBuf_rsc_0_2_i_bcwt <= ~((~(lineBuf_rsc_0_2_i_bcwt | lineBuf_rsc_0_2_i_biwt))
          | lineBuf_rsc_0_2_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lineBuf_rsc_0_2_i_q_d_bfwt <= 12'b000000000000;
    end
    else if ( lineBuf_rsc_0_2_i_biwt ) begin
      lineBuf_rsc_0_2_i_q_d_bfwt <= lineBuf_rsc_0_2_i_q_d;
    end
  end

  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [0:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    demosaic_core_lineBuf_rsc_0_2_i_1_lineBuf_rsc_0_2_wait_ctrl
// ------------------------------------------------------------------


module demosaic_core_lineBuf_rsc_0_2_i_1_lineBuf_rsc_0_2_wait_ctrl (
  core_wen, core_wten, lineBuf_rsc_0_2_i_oswt, lineBuf_rsc_0_2_i_biwt, lineBuf_rsc_0_2_i_bdwt,
      lineBuf_rsc_0_2_i_we_d_core_sct_pff, lineBuf_rsc_0_2_i_iswt0_1_pff, lineBuf_rsc_0_2_i_re_d_core_sct_pff,
      lineBuf_rsc_0_2_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input lineBuf_rsc_0_2_i_oswt;
  output lineBuf_rsc_0_2_i_biwt;
  output lineBuf_rsc_0_2_i_bdwt;
  output lineBuf_rsc_0_2_i_we_d_core_sct_pff;
  input lineBuf_rsc_0_2_i_iswt0_1_pff;
  output lineBuf_rsc_0_2_i_re_d_core_sct_pff;
  input lineBuf_rsc_0_2_i_oswt_pff;



  // Interconnect Declarations for Component Instantiations 
  assign lineBuf_rsc_0_2_i_bdwt = lineBuf_rsc_0_2_i_oswt & core_wen;
  assign lineBuf_rsc_0_2_i_biwt = (~ core_wten) & lineBuf_rsc_0_2_i_oswt;
  assign lineBuf_rsc_0_2_i_we_d_core_sct_pff = lineBuf_rsc_0_2_i_iswt0_1_pff & core_wen;
  assign lineBuf_rsc_0_2_i_re_d_core_sct_pff = lineBuf_rsc_0_2_i_oswt_pff & core_wen;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    demosaic_core_lineBuf_rsc_0_1_i_1_lineBuf_rsc_0_1_wait_dp
// ------------------------------------------------------------------


module demosaic_core_lineBuf_rsc_0_1_i_1_lineBuf_rsc_0_1_wait_dp (
  clk, arst_n, lineBuf_rsc_0_1_i_q_d, lineBuf_rsc_0_1_i_q_d_mxwt, lineBuf_rsc_0_1_i_biwt,
      lineBuf_rsc_0_1_i_bdwt
);
  input clk;
  input arst_n;
  input [11:0] lineBuf_rsc_0_1_i_q_d;
  output [11:0] lineBuf_rsc_0_1_i_q_d_mxwt;
  input lineBuf_rsc_0_1_i_biwt;
  input lineBuf_rsc_0_1_i_bdwt;


  // Interconnect Declarations
  reg lineBuf_rsc_0_1_i_bcwt;
  reg [11:0] lineBuf_rsc_0_1_i_q_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign lineBuf_rsc_0_1_i_q_d_mxwt = MUX_v_12_2_2(lineBuf_rsc_0_1_i_q_d, lineBuf_rsc_0_1_i_q_d_bfwt,
      lineBuf_rsc_0_1_i_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lineBuf_rsc_0_1_i_bcwt <= 1'b0;
    end
    else begin
      lineBuf_rsc_0_1_i_bcwt <= ~((~(lineBuf_rsc_0_1_i_bcwt | lineBuf_rsc_0_1_i_biwt))
          | lineBuf_rsc_0_1_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lineBuf_rsc_0_1_i_q_d_bfwt <= 12'b000000000000;
    end
    else if ( lineBuf_rsc_0_1_i_biwt ) begin
      lineBuf_rsc_0_1_i_q_d_bfwt <= lineBuf_rsc_0_1_i_q_d;
    end
  end

  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [0:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    demosaic_core_lineBuf_rsc_0_1_i_1_lineBuf_rsc_0_1_wait_ctrl
// ------------------------------------------------------------------


module demosaic_core_lineBuf_rsc_0_1_i_1_lineBuf_rsc_0_1_wait_ctrl (
  core_wen, core_wten, lineBuf_rsc_0_1_i_oswt, lineBuf_rsc_0_1_i_biwt, lineBuf_rsc_0_1_i_bdwt,
      lineBuf_rsc_0_1_i_we_d_core_sct_pff, lineBuf_rsc_0_1_i_iswt0_1_pff, lineBuf_rsc_0_1_i_re_d_core_sct_pff,
      lineBuf_rsc_0_1_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input lineBuf_rsc_0_1_i_oswt;
  output lineBuf_rsc_0_1_i_biwt;
  output lineBuf_rsc_0_1_i_bdwt;
  output lineBuf_rsc_0_1_i_we_d_core_sct_pff;
  input lineBuf_rsc_0_1_i_iswt0_1_pff;
  output lineBuf_rsc_0_1_i_re_d_core_sct_pff;
  input lineBuf_rsc_0_1_i_oswt_pff;



  // Interconnect Declarations for Component Instantiations 
  assign lineBuf_rsc_0_1_i_bdwt = lineBuf_rsc_0_1_i_oswt & core_wen;
  assign lineBuf_rsc_0_1_i_biwt = (~ core_wten) & lineBuf_rsc_0_1_i_oswt;
  assign lineBuf_rsc_0_1_i_we_d_core_sct_pff = lineBuf_rsc_0_1_i_iswt0_1_pff & core_wen;
  assign lineBuf_rsc_0_1_i_re_d_core_sct_pff = lineBuf_rsc_0_1_i_oswt_pff & core_wen;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    demosaic_core_lineBuf_rsc_0_0_i_1_lineBuf_rsc_0_0_wait_dp
// ------------------------------------------------------------------


module demosaic_core_lineBuf_rsc_0_0_i_1_lineBuf_rsc_0_0_wait_dp (
  clk, arst_n, lineBuf_rsc_0_0_i_q_d, lineBuf_rsc_0_0_i_q_d_mxwt, lineBuf_rsc_0_0_i_biwt,
      lineBuf_rsc_0_0_i_bdwt
);
  input clk;
  input arst_n;
  input [11:0] lineBuf_rsc_0_0_i_q_d;
  output [11:0] lineBuf_rsc_0_0_i_q_d_mxwt;
  input lineBuf_rsc_0_0_i_biwt;
  input lineBuf_rsc_0_0_i_bdwt;


  // Interconnect Declarations
  reg lineBuf_rsc_0_0_i_bcwt;
  reg [11:0] lineBuf_rsc_0_0_i_q_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign lineBuf_rsc_0_0_i_q_d_mxwt = MUX_v_12_2_2(lineBuf_rsc_0_0_i_q_d, lineBuf_rsc_0_0_i_q_d_bfwt,
      lineBuf_rsc_0_0_i_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lineBuf_rsc_0_0_i_bcwt <= 1'b0;
    end
    else begin
      lineBuf_rsc_0_0_i_bcwt <= ~((~(lineBuf_rsc_0_0_i_bcwt | lineBuf_rsc_0_0_i_biwt))
          | lineBuf_rsc_0_0_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lineBuf_rsc_0_0_i_q_d_bfwt <= 12'b000000000000;
    end
    else if ( lineBuf_rsc_0_0_i_biwt ) begin
      lineBuf_rsc_0_0_i_q_d_bfwt <= lineBuf_rsc_0_0_i_q_d;
    end
  end

  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [0:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    demosaic_core_lineBuf_rsc_0_0_i_1_lineBuf_rsc_0_0_wait_ctrl
// ------------------------------------------------------------------


module demosaic_core_lineBuf_rsc_0_0_i_1_lineBuf_rsc_0_0_wait_ctrl (
  core_wen, core_wten, lineBuf_rsc_0_0_i_oswt, lineBuf_rsc_0_0_i_biwt, lineBuf_rsc_0_0_i_bdwt,
      lineBuf_rsc_0_0_i_we_d_core_sct_pff, lineBuf_rsc_0_0_i_iswt0_1_pff, lineBuf_rsc_0_0_i_re_d_core_sct_pff,
      lineBuf_rsc_0_0_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input lineBuf_rsc_0_0_i_oswt;
  output lineBuf_rsc_0_0_i_biwt;
  output lineBuf_rsc_0_0_i_bdwt;
  output lineBuf_rsc_0_0_i_we_d_core_sct_pff;
  input lineBuf_rsc_0_0_i_iswt0_1_pff;
  output lineBuf_rsc_0_0_i_re_d_core_sct_pff;
  input lineBuf_rsc_0_0_i_oswt_pff;



  // Interconnect Declarations for Component Instantiations 
  assign lineBuf_rsc_0_0_i_bdwt = lineBuf_rsc_0_0_i_oswt & core_wen;
  assign lineBuf_rsc_0_0_i_biwt = (~ core_wten) & lineBuf_rsc_0_0_i_oswt;
  assign lineBuf_rsc_0_0_i_we_d_core_sct_pff = lineBuf_rsc_0_0_i_iswt0_1_pff & core_wen;
  assign lineBuf_rsc_0_0_i_re_d_core_sct_pff = lineBuf_rsc_0_0_i_oswt_pff & core_wen;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    demosaic_core_dst_rsci_dst_wait_dp
// ------------------------------------------------------------------


module demosaic_core_dst_rsci_dst_wait_dp (
  clk, arst_n, dst_rsci_oswt, dst_rsci_wen_comp, dst_rsci_biwt, dst_rsci_bdwt, dst_rsci_bcwt
);
  input clk;
  input arst_n;
  input dst_rsci_oswt;
  output dst_rsci_wen_comp;
  input dst_rsci_biwt;
  input dst_rsci_bdwt;
  output dst_rsci_bcwt;
  reg dst_rsci_bcwt;



  // Interconnect Declarations for Component Instantiations 
  assign dst_rsci_wen_comp = (~ dst_rsci_oswt) | dst_rsci_biwt | dst_rsci_bcwt;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dst_rsci_bcwt <= 1'b0;
    end
    else begin
      dst_rsci_bcwt <= ~((~(dst_rsci_bcwt | dst_rsci_biwt)) | dst_rsci_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    demosaic_core_dst_rsci_dst_wait_ctrl
// ------------------------------------------------------------------


module demosaic_core_dst_rsci_dst_wait_ctrl (
  core_wen, dst_rsci_oswt, dst_rsci_irdy, dst_rsci_biwt, dst_rsci_bdwt, dst_rsci_bcwt,
      dst_rsci_ivld_core_sct
);
  input core_wen;
  input dst_rsci_oswt;
  input dst_rsci_irdy;
  output dst_rsci_biwt;
  output dst_rsci_bdwt;
  input dst_rsci_bcwt;
  output dst_rsci_ivld_core_sct;


  // Interconnect Declarations
  wire dst_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign dst_rsci_bdwt = dst_rsci_oswt & core_wen;
  assign dst_rsci_biwt = dst_rsci_ogwt & dst_rsci_irdy;
  assign dst_rsci_ogwt = dst_rsci_oswt & (~ dst_rsci_bcwt);
  assign dst_rsci_ivld_core_sct = dst_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    demosaic_core_src_rsci_src_wait_dp
// ------------------------------------------------------------------


module demosaic_core_src_rsci_src_wait_dp (
  clk, arst_n, src_rsci_oswt, src_rsci_wen_comp, src_rsci_idat_mxwt, src_rsci_biwt,
      src_rsci_bdwt, src_rsci_bcwt, src_rsci_idat
);
  input clk;
  input arst_n;
  input src_rsci_oswt;
  output src_rsci_wen_comp;
  output [11:0] src_rsci_idat_mxwt;
  input src_rsci_biwt;
  input src_rsci_bdwt;
  output src_rsci_bcwt;
  reg src_rsci_bcwt;
  input [11:0] src_rsci_idat;


  // Interconnect Declarations
  reg [11:0] src_rsci_idat_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign src_rsci_wen_comp = (~ src_rsci_oswt) | src_rsci_biwt | src_rsci_bcwt;
  assign src_rsci_idat_mxwt = MUX_v_12_2_2(src_rsci_idat, src_rsci_idat_bfwt, src_rsci_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      src_rsci_bcwt <= 1'b0;
    end
    else begin
      src_rsci_bcwt <= ~((~(src_rsci_bcwt | src_rsci_biwt)) | src_rsci_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      src_rsci_idat_bfwt <= 12'b000000000000;
    end
    else if ( src_rsci_biwt ) begin
      src_rsci_idat_bfwt <= src_rsci_idat;
    end
  end

  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [0:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    demosaic_core_src_rsci_src_wait_ctrl
// ------------------------------------------------------------------


module demosaic_core_src_rsci_src_wait_ctrl (
  core_wen, src_rsci_oswt, src_rsci_biwt, src_rsci_bdwt, src_rsci_bcwt, src_rsci_irdy_core_sct,
      src_rsci_ivld
);
  input core_wen;
  input src_rsci_oswt;
  output src_rsci_biwt;
  output src_rsci_bdwt;
  input src_rsci_bcwt;
  output src_rsci_irdy_core_sct;
  input src_rsci_ivld;


  // Interconnect Declarations
  wire src_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign src_rsci_bdwt = src_rsci_oswt & core_wen;
  assign src_rsci_biwt = src_rsci_ogwt & src_rsci_ivld;
  assign src_rsci_ogwt = src_rsci_oswt & (~ src_rsci_bcwt);
  assign src_rsci_irdy_core_sct = src_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    edgeenhancement_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_567_36_12_4096_4096_36_5_gen
// ------------------------------------------------------------------


module edgeenhancement_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_567_36_12_4096_4096_36_5_gen
    (
  we, d, wadr, q, re, radr, radr_d, wadr_d, d_d, we_d, re_d, q_d, port_0_r_ram_ir_internal_RMASK_B_d,
      port_1_w_ram_ir_internal_WMASK_B_d
);
  output we;
  output [35:0] d;
  output [11:0] wadr;
  input [35:0] q;
  output re;
  output [11:0] radr;
  input [11:0] radr_d;
  input [11:0] wadr_d;
  input [35:0] d_d;
  input we_d;
  input re_d;
  output [35:0] q_d;
  input port_0_r_ram_ir_internal_RMASK_B_d;
  input port_1_w_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign we = (port_1_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
  assign q_d = q;
  assign re = (port_0_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    edgeenhancement_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_566_36_12_4096_4096_36_5_gen
// ------------------------------------------------------------------


module edgeenhancement_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_566_36_12_4096_4096_36_5_gen
    (
  we, d, wadr, q, re, radr, radr_d, wadr_d, d_d, we_d, re_d, q_d, port_0_r_ram_ir_internal_RMASK_B_d,
      port_1_w_ram_ir_internal_WMASK_B_d
);
  output we;
  output [35:0] d;
  output [11:0] wadr;
  input [35:0] q;
  output re;
  output [11:0] radr;
  input [11:0] radr_d;
  input [11:0] wadr_d;
  input [35:0] d_d;
  input we_d;
  input re_d;
  output [35:0] q_d;
  input port_0_r_ram_ir_internal_RMASK_B_d;
  input port_1_w_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign we = (port_1_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
  assign q_d = q;
  assign re = (port_0_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    edgeenhancement_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_565_36_12_4096_4096_36_5_gen
// ------------------------------------------------------------------


module edgeenhancement_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_565_36_12_4096_4096_36_5_gen
    (
  we, d, wadr, q, re, radr, radr_d, wadr_d, d_d, we_d, re_d, q_d, port_0_r_ram_ir_internal_RMASK_B_d,
      port_1_w_ram_ir_internal_WMASK_B_d
);
  output we;
  output [35:0] d;
  output [11:0] wadr;
  input [35:0] q;
  output re;
  output [11:0] radr;
  input [11:0] radr_d;
  input [11:0] wadr_d;
  input [35:0] d_d;
  input we_d;
  input re_d;
  output [35:0] q_d;
  input port_0_r_ram_ir_internal_RMASK_B_d;
  input port_1_w_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign we = (port_1_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
  assign q_d = q;
  assign re = (port_0_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    edgeenhancement_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_564_36_12_4096_4096_36_5_gen
// ------------------------------------------------------------------


module edgeenhancement_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_564_36_12_4096_4096_36_5_gen
    (
  we, d, wadr, q, re, radr, radr_d, wadr_d, d_d, we_d, re_d, q_d, port_0_r_ram_ir_internal_RMASK_B_d,
      port_1_w_ram_ir_internal_WMASK_B_d
);
  output we;
  output [35:0] d;
  output [11:0] wadr;
  input [35:0] q;
  output re;
  output [11:0] radr;
  input [11:0] radr_d;
  input [11:0] wadr_d;
  input [35:0] d_d;
  input we_d;
  input re_d;
  output [35:0] q_d;
  input port_0_r_ram_ir_internal_RMASK_B_d;
  input port_1_w_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign we = (port_1_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
  assign q_d = q;
  assign re = (port_0_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    edgeenhancement_core_staller
// ------------------------------------------------------------------


module edgeenhancement_core_staller (
  clk, arst_n, core_wen, core_wten, src_rsci_wen_comp, dst_rsci_wen_comp
);
  input clk;
  input arst_n;
  output core_wen;
  output core_wten;
  input src_rsci_wen_comp;
  input dst_rsci_wen_comp;


  // Interconnect Declarations
  reg core_wten_reg;


  // Interconnect Declarations for Component Instantiations 
  assign core_wen = src_rsci_wen_comp & dst_rsci_wen_comp;
  assign core_wten = core_wten_reg;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      core_wten_reg <= 1'b0;
    end
    else begin
      core_wten_reg <= ~ core_wen;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    edgeenhancement_core_ee_lines_rsc_0_3_i_1_ee_lines_rsc_0_3_wait_dp
// ------------------------------------------------------------------


module edgeenhancement_core_ee_lines_rsc_0_3_i_1_ee_lines_rsc_0_3_wait_dp (
  clk, arst_n, ee_lines_rsc_0_3_i_q_d, ee_lines_rsc_0_3_i_q_d_mxwt, ee_lines_rsc_0_3_i_biwt,
      ee_lines_rsc_0_3_i_bdwt
);
  input clk;
  input arst_n;
  input [35:0] ee_lines_rsc_0_3_i_q_d;
  output [35:0] ee_lines_rsc_0_3_i_q_d_mxwt;
  input ee_lines_rsc_0_3_i_biwt;
  input ee_lines_rsc_0_3_i_bdwt;


  // Interconnect Declarations
  reg ee_lines_rsc_0_3_i_bcwt;
  reg [35:0] ee_lines_rsc_0_3_i_q_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign ee_lines_rsc_0_3_i_q_d_mxwt = MUX_v_36_2_2(ee_lines_rsc_0_3_i_q_d, ee_lines_rsc_0_3_i_q_d_bfwt,
      ee_lines_rsc_0_3_i_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ee_lines_rsc_0_3_i_bcwt <= 1'b0;
    end
    else begin
      ee_lines_rsc_0_3_i_bcwt <= ~((~(ee_lines_rsc_0_3_i_bcwt | ee_lines_rsc_0_3_i_biwt))
          | ee_lines_rsc_0_3_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ee_lines_rsc_0_3_i_q_d_bfwt <= 36'b000000000000000000000000000000000000;
    end
    else if ( ee_lines_rsc_0_3_i_biwt ) begin
      ee_lines_rsc_0_3_i_q_d_bfwt <= ee_lines_rsc_0_3_i_q_d;
    end
  end

  function automatic [35:0] MUX_v_36_2_2;
    input [35:0] input_0;
    input [35:0] input_1;
    input [0:0] sel;
    reg [35:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_36_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    edgeenhancement_core_ee_lines_rsc_0_3_i_1_ee_lines_rsc_0_3_wait_ctrl
// ------------------------------------------------------------------


module edgeenhancement_core_ee_lines_rsc_0_3_i_1_ee_lines_rsc_0_3_wait_ctrl (
  core_wen, core_wten, ee_lines_rsc_0_3_i_oswt, ee_lines_rsc_0_3_i_biwt, ee_lines_rsc_0_3_i_bdwt,
      ee_lines_rsc_0_3_i_we_d_core_sct_pff, ee_lines_rsc_0_3_i_iswt0_1_pff, ee_lines_rsc_0_3_i_re_d_core_sct_pff,
      ee_lines_rsc_0_3_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input ee_lines_rsc_0_3_i_oswt;
  output ee_lines_rsc_0_3_i_biwt;
  output ee_lines_rsc_0_3_i_bdwt;
  output ee_lines_rsc_0_3_i_we_d_core_sct_pff;
  input ee_lines_rsc_0_3_i_iswt0_1_pff;
  output ee_lines_rsc_0_3_i_re_d_core_sct_pff;
  input ee_lines_rsc_0_3_i_oswt_pff;



  // Interconnect Declarations for Component Instantiations 
  assign ee_lines_rsc_0_3_i_bdwt = ee_lines_rsc_0_3_i_oswt & core_wen;
  assign ee_lines_rsc_0_3_i_biwt = (~ core_wten) & ee_lines_rsc_0_3_i_oswt;
  assign ee_lines_rsc_0_3_i_we_d_core_sct_pff = ee_lines_rsc_0_3_i_iswt0_1_pff &
      core_wen;
  assign ee_lines_rsc_0_3_i_re_d_core_sct_pff = ee_lines_rsc_0_3_i_oswt_pff & core_wen;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    edgeenhancement_core_ee_lines_rsc_0_2_i_1_ee_lines_rsc_0_2_wait_dp
// ------------------------------------------------------------------


module edgeenhancement_core_ee_lines_rsc_0_2_i_1_ee_lines_rsc_0_2_wait_dp (
  clk, arst_n, ee_lines_rsc_0_2_i_q_d, ee_lines_rsc_0_2_i_q_d_mxwt, ee_lines_rsc_0_2_i_biwt,
      ee_lines_rsc_0_2_i_bdwt
);
  input clk;
  input arst_n;
  input [35:0] ee_lines_rsc_0_2_i_q_d;
  output [35:0] ee_lines_rsc_0_2_i_q_d_mxwt;
  input ee_lines_rsc_0_2_i_biwt;
  input ee_lines_rsc_0_2_i_bdwt;


  // Interconnect Declarations
  reg ee_lines_rsc_0_2_i_bcwt;
  reg [35:0] ee_lines_rsc_0_2_i_q_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign ee_lines_rsc_0_2_i_q_d_mxwt = MUX_v_36_2_2(ee_lines_rsc_0_2_i_q_d, ee_lines_rsc_0_2_i_q_d_bfwt,
      ee_lines_rsc_0_2_i_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ee_lines_rsc_0_2_i_bcwt <= 1'b0;
    end
    else begin
      ee_lines_rsc_0_2_i_bcwt <= ~((~(ee_lines_rsc_0_2_i_bcwt | ee_lines_rsc_0_2_i_biwt))
          | ee_lines_rsc_0_2_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ee_lines_rsc_0_2_i_q_d_bfwt <= 36'b000000000000000000000000000000000000;
    end
    else if ( ee_lines_rsc_0_2_i_biwt ) begin
      ee_lines_rsc_0_2_i_q_d_bfwt <= ee_lines_rsc_0_2_i_q_d;
    end
  end

  function automatic [35:0] MUX_v_36_2_2;
    input [35:0] input_0;
    input [35:0] input_1;
    input [0:0] sel;
    reg [35:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_36_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    edgeenhancement_core_ee_lines_rsc_0_2_i_1_ee_lines_rsc_0_2_wait_ctrl
// ------------------------------------------------------------------


module edgeenhancement_core_ee_lines_rsc_0_2_i_1_ee_lines_rsc_0_2_wait_ctrl (
  core_wen, core_wten, ee_lines_rsc_0_2_i_oswt, ee_lines_rsc_0_2_i_biwt, ee_lines_rsc_0_2_i_bdwt,
      ee_lines_rsc_0_2_i_we_d_core_sct_pff, ee_lines_rsc_0_2_i_iswt0_1_pff, ee_lines_rsc_0_2_i_re_d_core_sct_pff,
      ee_lines_rsc_0_2_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input ee_lines_rsc_0_2_i_oswt;
  output ee_lines_rsc_0_2_i_biwt;
  output ee_lines_rsc_0_2_i_bdwt;
  output ee_lines_rsc_0_2_i_we_d_core_sct_pff;
  input ee_lines_rsc_0_2_i_iswt0_1_pff;
  output ee_lines_rsc_0_2_i_re_d_core_sct_pff;
  input ee_lines_rsc_0_2_i_oswt_pff;



  // Interconnect Declarations for Component Instantiations 
  assign ee_lines_rsc_0_2_i_bdwt = ee_lines_rsc_0_2_i_oswt & core_wen;
  assign ee_lines_rsc_0_2_i_biwt = (~ core_wten) & ee_lines_rsc_0_2_i_oswt;
  assign ee_lines_rsc_0_2_i_we_d_core_sct_pff = ee_lines_rsc_0_2_i_iswt0_1_pff &
      core_wen;
  assign ee_lines_rsc_0_2_i_re_d_core_sct_pff = ee_lines_rsc_0_2_i_oswt_pff & core_wen;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    edgeenhancement_core_ee_lines_rsc_0_1_i_1_ee_lines_rsc_0_1_wait_dp
// ------------------------------------------------------------------


module edgeenhancement_core_ee_lines_rsc_0_1_i_1_ee_lines_rsc_0_1_wait_dp (
  clk, arst_n, ee_lines_rsc_0_1_i_q_d, ee_lines_rsc_0_1_i_q_d_mxwt, ee_lines_rsc_0_1_i_biwt,
      ee_lines_rsc_0_1_i_bdwt
);
  input clk;
  input arst_n;
  input [35:0] ee_lines_rsc_0_1_i_q_d;
  output [35:0] ee_lines_rsc_0_1_i_q_d_mxwt;
  input ee_lines_rsc_0_1_i_biwt;
  input ee_lines_rsc_0_1_i_bdwt;


  // Interconnect Declarations
  reg ee_lines_rsc_0_1_i_bcwt;
  reg [35:0] ee_lines_rsc_0_1_i_q_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign ee_lines_rsc_0_1_i_q_d_mxwt = MUX_v_36_2_2(ee_lines_rsc_0_1_i_q_d, ee_lines_rsc_0_1_i_q_d_bfwt,
      ee_lines_rsc_0_1_i_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ee_lines_rsc_0_1_i_bcwt <= 1'b0;
    end
    else begin
      ee_lines_rsc_0_1_i_bcwt <= ~((~(ee_lines_rsc_0_1_i_bcwt | ee_lines_rsc_0_1_i_biwt))
          | ee_lines_rsc_0_1_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ee_lines_rsc_0_1_i_q_d_bfwt <= 36'b000000000000000000000000000000000000;
    end
    else if ( ee_lines_rsc_0_1_i_biwt ) begin
      ee_lines_rsc_0_1_i_q_d_bfwt <= ee_lines_rsc_0_1_i_q_d;
    end
  end

  function automatic [35:0] MUX_v_36_2_2;
    input [35:0] input_0;
    input [35:0] input_1;
    input [0:0] sel;
    reg [35:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_36_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    edgeenhancement_core_ee_lines_rsc_0_1_i_1_ee_lines_rsc_0_1_wait_ctrl
// ------------------------------------------------------------------


module edgeenhancement_core_ee_lines_rsc_0_1_i_1_ee_lines_rsc_0_1_wait_ctrl (
  core_wen, core_wten, ee_lines_rsc_0_1_i_oswt, ee_lines_rsc_0_1_i_biwt, ee_lines_rsc_0_1_i_bdwt,
      ee_lines_rsc_0_1_i_we_d_core_sct_pff, ee_lines_rsc_0_1_i_iswt0_1_pff, ee_lines_rsc_0_1_i_re_d_core_sct_pff,
      ee_lines_rsc_0_1_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input ee_lines_rsc_0_1_i_oswt;
  output ee_lines_rsc_0_1_i_biwt;
  output ee_lines_rsc_0_1_i_bdwt;
  output ee_lines_rsc_0_1_i_we_d_core_sct_pff;
  input ee_lines_rsc_0_1_i_iswt0_1_pff;
  output ee_lines_rsc_0_1_i_re_d_core_sct_pff;
  input ee_lines_rsc_0_1_i_oswt_pff;



  // Interconnect Declarations for Component Instantiations 
  assign ee_lines_rsc_0_1_i_bdwt = ee_lines_rsc_0_1_i_oswt & core_wen;
  assign ee_lines_rsc_0_1_i_biwt = (~ core_wten) & ee_lines_rsc_0_1_i_oswt;
  assign ee_lines_rsc_0_1_i_we_d_core_sct_pff = ee_lines_rsc_0_1_i_iswt0_1_pff &
      core_wen;
  assign ee_lines_rsc_0_1_i_re_d_core_sct_pff = ee_lines_rsc_0_1_i_oswt_pff & core_wen;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    edgeenhancement_core_ee_lines_rsc_0_0_i_1_ee_lines_rsc_0_0_wait_dp
// ------------------------------------------------------------------


module edgeenhancement_core_ee_lines_rsc_0_0_i_1_ee_lines_rsc_0_0_wait_dp (
  clk, arst_n, ee_lines_rsc_0_0_i_q_d, ee_lines_rsc_0_0_i_q_d_mxwt, ee_lines_rsc_0_0_i_biwt,
      ee_lines_rsc_0_0_i_bdwt
);
  input clk;
  input arst_n;
  input [35:0] ee_lines_rsc_0_0_i_q_d;
  output [35:0] ee_lines_rsc_0_0_i_q_d_mxwt;
  input ee_lines_rsc_0_0_i_biwt;
  input ee_lines_rsc_0_0_i_bdwt;


  // Interconnect Declarations
  reg ee_lines_rsc_0_0_i_bcwt;
  reg [35:0] ee_lines_rsc_0_0_i_q_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign ee_lines_rsc_0_0_i_q_d_mxwt = MUX_v_36_2_2(ee_lines_rsc_0_0_i_q_d, ee_lines_rsc_0_0_i_q_d_bfwt,
      ee_lines_rsc_0_0_i_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ee_lines_rsc_0_0_i_bcwt <= 1'b0;
    end
    else begin
      ee_lines_rsc_0_0_i_bcwt <= ~((~(ee_lines_rsc_0_0_i_bcwt | ee_lines_rsc_0_0_i_biwt))
          | ee_lines_rsc_0_0_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ee_lines_rsc_0_0_i_q_d_bfwt <= 36'b000000000000000000000000000000000000;
    end
    else if ( ee_lines_rsc_0_0_i_biwt ) begin
      ee_lines_rsc_0_0_i_q_d_bfwt <= ee_lines_rsc_0_0_i_q_d;
    end
  end

  function automatic [35:0] MUX_v_36_2_2;
    input [35:0] input_0;
    input [35:0] input_1;
    input [0:0] sel;
    reg [35:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_36_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    edgeenhancement_core_ee_lines_rsc_0_0_i_1_ee_lines_rsc_0_0_wait_ctrl
// ------------------------------------------------------------------


module edgeenhancement_core_ee_lines_rsc_0_0_i_1_ee_lines_rsc_0_0_wait_ctrl (
  core_wen, core_wten, ee_lines_rsc_0_0_i_oswt, ee_lines_rsc_0_0_i_biwt, ee_lines_rsc_0_0_i_bdwt,
      ee_lines_rsc_0_0_i_we_d_core_sct_pff, ee_lines_rsc_0_0_i_iswt0_1_pff, ee_lines_rsc_0_0_i_re_d_core_sct_pff,
      ee_lines_rsc_0_0_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input ee_lines_rsc_0_0_i_oswt;
  output ee_lines_rsc_0_0_i_biwt;
  output ee_lines_rsc_0_0_i_bdwt;
  output ee_lines_rsc_0_0_i_we_d_core_sct_pff;
  input ee_lines_rsc_0_0_i_iswt0_1_pff;
  output ee_lines_rsc_0_0_i_re_d_core_sct_pff;
  input ee_lines_rsc_0_0_i_oswt_pff;



  // Interconnect Declarations for Component Instantiations 
  assign ee_lines_rsc_0_0_i_bdwt = ee_lines_rsc_0_0_i_oswt & core_wen;
  assign ee_lines_rsc_0_0_i_biwt = (~ core_wten) & ee_lines_rsc_0_0_i_oswt;
  assign ee_lines_rsc_0_0_i_we_d_core_sct_pff = ee_lines_rsc_0_0_i_iswt0_1_pff &
      core_wen;
  assign ee_lines_rsc_0_0_i_re_d_core_sct_pff = ee_lines_rsc_0_0_i_oswt_pff & core_wen;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    edgeenhancement_core_dst_rsci_dst_wait_dp
// ------------------------------------------------------------------


module edgeenhancement_core_dst_rsci_dst_wait_dp (
  clk, arst_n, dst_rsci_oswt, dst_rsci_wen_comp, dst_rsci_biwt, dst_rsci_bdwt, dst_rsci_bcwt
);
  input clk;
  input arst_n;
  input dst_rsci_oswt;
  output dst_rsci_wen_comp;
  input dst_rsci_biwt;
  input dst_rsci_bdwt;
  output dst_rsci_bcwt;
  reg dst_rsci_bcwt;



  // Interconnect Declarations for Component Instantiations 
  assign dst_rsci_wen_comp = (~ dst_rsci_oswt) | dst_rsci_biwt | dst_rsci_bcwt;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dst_rsci_bcwt <= 1'b0;
    end
    else begin
      dst_rsci_bcwt <= ~((~(dst_rsci_bcwt | dst_rsci_biwt)) | dst_rsci_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    edgeenhancement_core_dst_rsci_dst_wait_ctrl
// ------------------------------------------------------------------


module edgeenhancement_core_dst_rsci_dst_wait_ctrl (
  core_wen, dst_rsci_oswt, dst_rsci_irdy, dst_rsci_biwt, dst_rsci_bdwt, dst_rsci_bcwt,
      dst_rsci_ivld_core_sct
);
  input core_wen;
  input dst_rsci_oswt;
  input dst_rsci_irdy;
  output dst_rsci_biwt;
  output dst_rsci_bdwt;
  input dst_rsci_bcwt;
  output dst_rsci_ivld_core_sct;


  // Interconnect Declarations
  wire dst_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign dst_rsci_bdwt = dst_rsci_oswt & core_wen;
  assign dst_rsci_biwt = dst_rsci_ogwt & dst_rsci_irdy;
  assign dst_rsci_ogwt = dst_rsci_oswt & (~ dst_rsci_bcwt);
  assign dst_rsci_ivld_core_sct = dst_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    edgeenhancement_core_src_rsci_src_wait_dp
// ------------------------------------------------------------------


module edgeenhancement_core_src_rsci_src_wait_dp (
  clk, arst_n, src_rsci_oswt, src_rsci_wen_comp, src_rsci_idat_mxwt, src_rsci_biwt,
      src_rsci_bdwt, src_rsci_bcwt, src_rsci_idat
);
  input clk;
  input arst_n;
  input src_rsci_oswt;
  output src_rsci_wen_comp;
  output [35:0] src_rsci_idat_mxwt;
  input src_rsci_biwt;
  input src_rsci_bdwt;
  output src_rsci_bcwt;
  reg src_rsci_bcwt;
  input [35:0] src_rsci_idat;


  // Interconnect Declarations
  reg [35:0] src_rsci_idat_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign src_rsci_wen_comp = (~ src_rsci_oswt) | src_rsci_biwt | src_rsci_bcwt;
  assign src_rsci_idat_mxwt = MUX_v_36_2_2(src_rsci_idat, src_rsci_idat_bfwt, src_rsci_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      src_rsci_bcwt <= 1'b0;
    end
    else begin
      src_rsci_bcwt <= ~((~(src_rsci_bcwt | src_rsci_biwt)) | src_rsci_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      src_rsci_idat_bfwt <= 36'b000000000000000000000000000000000000;
    end
    else if ( src_rsci_biwt ) begin
      src_rsci_idat_bfwt <= src_rsci_idat;
    end
  end

  function automatic [35:0] MUX_v_36_2_2;
    input [35:0] input_0;
    input [35:0] input_1;
    input [0:0] sel;
    reg [35:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_36_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    edgeenhancement_core_src_rsci_src_wait_ctrl
// ------------------------------------------------------------------


module edgeenhancement_core_src_rsci_src_wait_ctrl (
  core_wen, src_rsci_oswt, src_rsci_biwt, src_rsci_bdwt, src_rsci_bcwt, src_rsci_irdy_core_sct,
      src_rsci_ivld
);
  input core_wen;
  input src_rsci_oswt;
  output src_rsci_biwt;
  output src_rsci_bdwt;
  input src_rsci_bcwt;
  output src_rsci_irdy_core_sct;
  input src_rsci_ivld;


  // Interconnect Declarations
  wire src_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign src_rsci_bdwt = src_rsci_oswt & core_wen;
  assign src_rsci_biwt = src_rsci_ogwt & src_rsci_ivld;
  assign src_rsci_ogwt = src_rsci_oswt & (~ src_rsci_bcwt);
  assign src_rsci_irdy_core_sct = src_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    cmc_core_staller
// ------------------------------------------------------------------


module cmc_core_staller (
  core_wen, src_rsci_wen_comp, dst_rsci_wen_comp
);
  output core_wen;
  input src_rsci_wen_comp;
  input dst_rsci_wen_comp;



  // Interconnect Declarations for Component Instantiations 
  assign core_wen = src_rsci_wen_comp & dst_rsci_wen_comp;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    cmc_core_dst_rsci_dst_wait_dp
// ------------------------------------------------------------------


module cmc_core_dst_rsci_dst_wait_dp (
  clk, arst_n, dst_rsci_oswt, dst_rsci_wen_comp, dst_rsci_biwt, dst_rsci_bdwt, dst_rsci_bcwt
);
  input clk;
  input arst_n;
  input dst_rsci_oswt;
  output dst_rsci_wen_comp;
  input dst_rsci_biwt;
  input dst_rsci_bdwt;
  output dst_rsci_bcwt;
  reg dst_rsci_bcwt;



  // Interconnect Declarations for Component Instantiations 
  assign dst_rsci_wen_comp = (~ dst_rsci_oswt) | dst_rsci_biwt | dst_rsci_bcwt;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dst_rsci_bcwt <= 1'b0;
    end
    else begin
      dst_rsci_bcwt <= ~((~(dst_rsci_bcwt | dst_rsci_biwt)) | dst_rsci_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    cmc_core_dst_rsci_dst_wait_ctrl
// ------------------------------------------------------------------


module cmc_core_dst_rsci_dst_wait_ctrl (
  core_wen, dst_rsci_oswt, dst_rsci_irdy, dst_rsci_biwt, dst_rsci_bdwt, dst_rsci_bcwt,
      dst_rsci_ivld_core_sct
);
  input core_wen;
  input dst_rsci_oswt;
  input dst_rsci_irdy;
  output dst_rsci_biwt;
  output dst_rsci_bdwt;
  input dst_rsci_bcwt;
  output dst_rsci_ivld_core_sct;


  // Interconnect Declarations
  wire dst_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign dst_rsci_bdwt = dst_rsci_oswt & core_wen;
  assign dst_rsci_biwt = dst_rsci_ogwt & dst_rsci_irdy;
  assign dst_rsci_ogwt = dst_rsci_oswt & (~ dst_rsci_bcwt);
  assign dst_rsci_ivld_core_sct = dst_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    cmc_core_src_rsci_src_wait_dp
// ------------------------------------------------------------------


module cmc_core_src_rsci_src_wait_dp (
  clk, arst_n, src_rsci_oswt, src_rsci_wen_comp, src_rsci_idat_mxwt, src_rsci_biwt,
      src_rsci_bdwt, src_rsci_bcwt, src_rsci_idat
);
  input clk;
  input arst_n;
  input src_rsci_oswt;
  output src_rsci_wen_comp;
  output [35:0] src_rsci_idat_mxwt;
  input src_rsci_biwt;
  input src_rsci_bdwt;
  output src_rsci_bcwt;
  reg src_rsci_bcwt;
  input [35:0] src_rsci_idat;


  // Interconnect Declarations
  reg [35:0] src_rsci_idat_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign src_rsci_wen_comp = (~ src_rsci_oswt) | src_rsci_biwt | src_rsci_bcwt;
  assign src_rsci_idat_mxwt = MUX_v_36_2_2(src_rsci_idat, src_rsci_idat_bfwt, src_rsci_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      src_rsci_bcwt <= 1'b0;
    end
    else begin
      src_rsci_bcwt <= ~((~(src_rsci_bcwt | src_rsci_biwt)) | src_rsci_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      src_rsci_idat_bfwt <= 36'b000000000000000000000000000000000000;
    end
    else if ( src_rsci_biwt ) begin
      src_rsci_idat_bfwt <= src_rsci_idat;
    end
  end

  function automatic [35:0] MUX_v_36_2_2;
    input [35:0] input_0;
    input [35:0] input_1;
    input [0:0] sel;
    reg [35:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_36_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    cmc_core_src_rsci_src_wait_ctrl
// ------------------------------------------------------------------


module cmc_core_src_rsci_src_wait_ctrl (
  core_wen, src_rsci_oswt, src_rsci_biwt, src_rsci_bdwt, src_rsci_bcwt, src_rsci_irdy_core_sct,
      src_rsci_ivld
);
  input core_wen;
  input src_rsci_oswt;
  output src_rsci_biwt;
  output src_rsci_bdwt;
  input src_rsci_bcwt;
  output src_rsci_irdy_core_sct;
  input src_rsci_ivld;


  // Interconnect Declarations
  wire src_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign src_rsci_bdwt = src_rsci_oswt & core_wen;
  assign src_rsci_biwt = src_rsci_ogwt & src_rsci_ivld;
  assign src_rsci_ogwt = src_rsci_oswt & (~ src_rsci_bcwt);
  assign src_rsci_irdy_core_sct = src_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    gtm_core_staller
// ------------------------------------------------------------------


module gtm_core_staller (
  core_wen, src_rsci_wen_comp, dst_rsci_wen_comp
);
  output core_wen;
  input src_rsci_wen_comp;
  input dst_rsci_wen_comp;



  // Interconnect Declarations for Component Instantiations 
  assign core_wen = src_rsci_wen_comp & dst_rsci_wen_comp;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    gtm_core_dst_rsci_dst_wait_dp
// ------------------------------------------------------------------


module gtm_core_dst_rsci_dst_wait_dp (
  clk, arst_n, dst_rsci_oswt, dst_rsci_wen_comp, dst_rsci_biwt, dst_rsci_bdwt, dst_rsci_bcwt
);
  input clk;
  input arst_n;
  input dst_rsci_oswt;
  output dst_rsci_wen_comp;
  input dst_rsci_biwt;
  input dst_rsci_bdwt;
  output dst_rsci_bcwt;
  reg dst_rsci_bcwt;



  // Interconnect Declarations for Component Instantiations 
  assign dst_rsci_wen_comp = (~ dst_rsci_oswt) | dst_rsci_biwt | dst_rsci_bcwt;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dst_rsci_bcwt <= 1'b0;
    end
    else begin
      dst_rsci_bcwt <= ~((~(dst_rsci_bcwt | dst_rsci_biwt)) | dst_rsci_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    gtm_core_dst_rsci_dst_wait_ctrl
// ------------------------------------------------------------------


module gtm_core_dst_rsci_dst_wait_ctrl (
  core_wen, dst_rsci_oswt, dst_rsci_irdy, dst_rsci_biwt, dst_rsci_bdwt, dst_rsci_bcwt,
      dst_rsci_ivld_core_sct
);
  input core_wen;
  input dst_rsci_oswt;
  input dst_rsci_irdy;
  output dst_rsci_biwt;
  output dst_rsci_bdwt;
  input dst_rsci_bcwt;
  output dst_rsci_ivld_core_sct;


  // Interconnect Declarations
  wire dst_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign dst_rsci_bdwt = dst_rsci_oswt & core_wen;
  assign dst_rsci_biwt = dst_rsci_ogwt & dst_rsci_irdy;
  assign dst_rsci_ogwt = dst_rsci_oswt & (~ dst_rsci_bcwt);
  assign dst_rsci_ivld_core_sct = dst_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    gtm_core_src_rsci_src_wait_dp
// ------------------------------------------------------------------


module gtm_core_src_rsci_src_wait_dp (
  clk, arst_n, src_rsci_oswt, src_rsci_wen_comp, src_rsci_idat_mxwt, src_rsci_biwt,
      src_rsci_bdwt, src_rsci_bcwt, src_rsci_idat
);
  input clk;
  input arst_n;
  input src_rsci_oswt;
  output src_rsci_wen_comp;
  output [41:0] src_rsci_idat_mxwt;
  input src_rsci_biwt;
  input src_rsci_bdwt;
  output src_rsci_bcwt;
  reg src_rsci_bcwt;
  input [41:0] src_rsci_idat;


  // Interconnect Declarations
  reg [41:0] src_rsci_idat_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign src_rsci_wen_comp = (~ src_rsci_oswt) | src_rsci_biwt | src_rsci_bcwt;
  assign src_rsci_idat_mxwt = MUX_v_42_2_2(src_rsci_idat, src_rsci_idat_bfwt, src_rsci_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      src_rsci_bcwt <= 1'b0;
    end
    else begin
      src_rsci_bcwt <= ~((~(src_rsci_bcwt | src_rsci_biwt)) | src_rsci_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      src_rsci_idat_bfwt <= 42'b000000000000000000000000000000000000000000;
    end
    else if ( src_rsci_biwt ) begin
      src_rsci_idat_bfwt <= src_rsci_idat;
    end
  end

  function automatic [41:0] MUX_v_42_2_2;
    input [41:0] input_0;
    input [41:0] input_1;
    input [0:0] sel;
    reg [41:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_42_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    gtm_core_src_rsci_src_wait_ctrl
// ------------------------------------------------------------------


module gtm_core_src_rsci_src_wait_ctrl (
  core_wen, src_rsci_oswt, src_rsci_biwt, src_rsci_bdwt, src_rsci_bcwt, src_rsci_irdy_core_sct,
      src_rsci_ivld
);
  input core_wen;
  input src_rsci_oswt;
  output src_rsci_biwt;
  output src_rsci_bdwt;
  input src_rsci_bcwt;
  output src_rsci_irdy_core_sct;
  input src_rsci_ivld;


  // Interconnect Declarations
  wire src_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign src_rsci_bdwt = src_rsci_oswt & core_wen;
  assign src_rsci_biwt = src_rsci_ogwt & src_rsci_ivld;
  assign src_rsci_ogwt = src_rsci_oswt & (~ src_rsci_bcwt);
  assign src_rsci_irdy_core_sct = src_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    csc_core_staller
// ------------------------------------------------------------------


module csc_core_staller (
  core_wen, src_rsci_wen_comp, dst_rsci_wen_comp
);
  output core_wen;
  input src_rsci_wen_comp;
  input dst_rsci_wen_comp;



  // Interconnect Declarations for Component Instantiations 
  assign core_wen = src_rsci_wen_comp & dst_rsci_wen_comp;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    csc_core_dst_rsci_dst_wait_dp
// ------------------------------------------------------------------


module csc_core_dst_rsci_dst_wait_dp (
  clk, arst_n, dst_rsci_oswt, dst_rsci_wen_comp, dst_rsci_biwt, dst_rsci_bdwt, dst_rsci_bcwt
);
  input clk;
  input arst_n;
  input dst_rsci_oswt;
  output dst_rsci_wen_comp;
  input dst_rsci_biwt;
  input dst_rsci_bdwt;
  output dst_rsci_bcwt;
  reg dst_rsci_bcwt;



  // Interconnect Declarations for Component Instantiations 
  assign dst_rsci_wen_comp = (~ dst_rsci_oswt) | dst_rsci_biwt | dst_rsci_bcwt;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dst_rsci_bcwt <= 1'b0;
    end
    else begin
      dst_rsci_bcwt <= ~((~(dst_rsci_bcwt | dst_rsci_biwt)) | dst_rsci_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    csc_core_dst_rsci_dst_wait_ctrl
// ------------------------------------------------------------------


module csc_core_dst_rsci_dst_wait_ctrl (
  core_wen, dst_rsci_oswt, dst_rsci_irdy, dst_rsci_biwt, dst_rsci_bdwt, dst_rsci_bcwt,
      dst_rsci_ivld_core_sct
);
  input core_wen;
  input dst_rsci_oswt;
  input dst_rsci_irdy;
  output dst_rsci_biwt;
  output dst_rsci_bdwt;
  input dst_rsci_bcwt;
  output dst_rsci_ivld_core_sct;


  // Interconnect Declarations
  wire dst_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign dst_rsci_bdwt = dst_rsci_oswt & core_wen;
  assign dst_rsci_biwt = dst_rsci_ogwt & dst_rsci_irdy;
  assign dst_rsci_ogwt = dst_rsci_oswt & (~ dst_rsci_bcwt);
  assign dst_rsci_ivld_core_sct = dst_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    csc_core_src_rsci_src_wait_dp
// ------------------------------------------------------------------


module csc_core_src_rsci_src_wait_dp (
  clk, arst_n, src_rsci_oswt, src_rsci_wen_comp, src_rsci_idat_mxwt, src_rsci_biwt,
      src_rsci_bdwt, src_rsci_bcwt, src_rsci_idat
);
  input clk;
  input arst_n;
  input src_rsci_oswt;
  output src_rsci_wen_comp;
  output [35:0] src_rsci_idat_mxwt;
  input src_rsci_biwt;
  input src_rsci_bdwt;
  output src_rsci_bcwt;
  reg src_rsci_bcwt;
  input [41:0] src_rsci_idat;


  // Interconnect Declarations
  wire [39:0] src_rsci_idat_mxwt_pconst;
  reg [39:0] src_rsci_idat_bfwt_41_2;


  // Interconnect Declarations for Component Instantiations 
  assign src_rsci_wen_comp = (~ src_rsci_oswt) | src_rsci_biwt | src_rsci_bcwt;
  assign src_rsci_idat_mxwt_pconst = MUX_v_40_2_2((src_rsci_idat[41:2]), src_rsci_idat_bfwt_41_2,
      src_rsci_bcwt);
  assign src_rsci_idat_mxwt = {(src_rsci_idat_mxwt_pconst[39:28]) , (src_rsci_idat_mxwt_pconst[25:14])
      , (src_rsci_idat_mxwt_pconst[11:0])};
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      src_rsci_bcwt <= 1'b0;
    end
    else begin
      src_rsci_bcwt <= ~((~(src_rsci_bcwt | src_rsci_biwt)) | src_rsci_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      src_rsci_idat_bfwt_41_2 <= 40'b0000000000000000000000000000000000000000;
    end
    else if ( src_rsci_biwt ) begin
      src_rsci_idat_bfwt_41_2 <= src_rsci_idat[41:2];
    end
  end

  function automatic [39:0] MUX_v_40_2_2;
    input [39:0] input_0;
    input [39:0] input_1;
    input [0:0] sel;
    reg [39:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_40_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    csc_core_src_rsci_src_wait_ctrl
// ------------------------------------------------------------------


module csc_core_src_rsci_src_wait_ctrl (
  core_wen, src_rsci_oswt, src_rsci_biwt, src_rsci_bdwt, src_rsci_bcwt, src_rsci_irdy_core_sct,
      src_rsci_ivld
);
  input core_wen;
  input src_rsci_oswt;
  output src_rsci_biwt;
  output src_rsci_bdwt;
  input src_rsci_bcwt;
  output src_rsci_irdy_core_sct;
  input src_rsci_ivld;


  // Interconnect Declarations
  wire src_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign src_rsci_bdwt = src_rsci_oswt & core_wen;
  assign src_rsci_biwt = src_rsci_ogwt & src_rsci_ivld;
  assign src_rsci_ogwt = src_rsci_oswt & (~ src_rsci_bcwt);
  assign src_rsci_irdy_core_sct = src_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yfc_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_295_10_12_4096_4096_10_5_gen
// ------------------------------------------------------------------


module yfc_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_295_10_12_4096_4096_10_5_gen (
  we, d, wadr, q, re, radr, radr_d, wadr_d, d_d, we_d, re_d, q_d, port_0_r_ram_ir_internal_RMASK_B_d,
      port_1_w_ram_ir_internal_WMASK_B_d
);
  output we;
  output [9:0] d;
  output [11:0] wadr;
  input [9:0] q;
  output re;
  output [11:0] radr;
  input [11:0] radr_d;
  input [11:0] wadr_d;
  input [9:0] d_d;
  input we_d;
  input re_d;
  output [9:0] q_d;
  input port_0_r_ram_ir_internal_RMASK_B_d;
  input port_1_w_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign we = (port_1_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
  assign q_d = q;
  assign re = (port_0_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yfc_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_294_10_12_4096_4096_10_5_gen
// ------------------------------------------------------------------


module yfc_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_294_10_12_4096_4096_10_5_gen (
  we, d, wadr, q, re, radr, radr_d, wadr_d, d_d, we_d, re_d, q_d, port_0_r_ram_ir_internal_RMASK_B_d,
      port_1_w_ram_ir_internal_WMASK_B_d
);
  output we;
  output [9:0] d;
  output [11:0] wadr;
  input [9:0] q;
  output re;
  output [11:0] radr;
  input [11:0] radr_d;
  input [11:0] wadr_d;
  input [9:0] d_d;
  input we_d;
  input re_d;
  output [9:0] q_d;
  input port_0_r_ram_ir_internal_RMASK_B_d;
  input port_1_w_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign we = (port_1_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
  assign q_d = q;
  assign re = (port_0_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yfc_core_staller
// ------------------------------------------------------------------


module yfc_core_staller (
  clk, arst_n, core_wen, core_wten, src_rsci_wen_comp, y_dst_rsci_wen_comp, u_dst_rsci_wen_comp,
      v_dst_rsci_wen_comp
);
  input clk;
  input arst_n;
  output core_wen;
  output core_wten;
  input src_rsci_wen_comp;
  input y_dst_rsci_wen_comp;
  input u_dst_rsci_wen_comp;
  input v_dst_rsci_wen_comp;


  // Interconnect Declarations
  reg core_wten_reg;


  // Interconnect Declarations for Component Instantiations 
  assign core_wen = src_rsci_wen_comp & y_dst_rsci_wen_comp & u_dst_rsci_wen_comp
      & v_dst_rsci_wen_comp;
  assign core_wten = core_wten_reg;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      core_wten_reg <= 1'b0;
    end
    else begin
      core_wten_reg <= ~ core_wen;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yfc_core_v_linebuffer_rsci_1_v_linebuffer_rsc_wait_dp
// ------------------------------------------------------------------


module yfc_core_v_linebuffer_rsci_1_v_linebuffer_rsc_wait_dp (
  clk, arst_n, v_linebuffer_rsci_q_d, v_linebuffer_rsci_q_d_mxwt, v_linebuffer_rsci_biwt,
      v_linebuffer_rsci_bdwt
);
  input clk;
  input arst_n;
  input [9:0] v_linebuffer_rsci_q_d;
  output [9:0] v_linebuffer_rsci_q_d_mxwt;
  input v_linebuffer_rsci_biwt;
  input v_linebuffer_rsci_bdwt;


  // Interconnect Declarations
  reg v_linebuffer_rsci_bcwt;
  reg [9:0] v_linebuffer_rsci_q_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign v_linebuffer_rsci_q_d_mxwt = MUX_v_10_2_2(v_linebuffer_rsci_q_d, v_linebuffer_rsci_q_d_bfwt,
      v_linebuffer_rsci_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      v_linebuffer_rsci_bcwt <= 1'b0;
    end
    else begin
      v_linebuffer_rsci_bcwt <= ~((~(v_linebuffer_rsci_bcwt | v_linebuffer_rsci_biwt))
          | v_linebuffer_rsci_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      v_linebuffer_rsci_q_d_bfwt <= 10'b0000000000;
    end
    else if ( v_linebuffer_rsci_biwt ) begin
      v_linebuffer_rsci_q_d_bfwt <= v_linebuffer_rsci_q_d;
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    yfc_core_v_linebuffer_rsci_1_v_linebuffer_rsc_wait_ctrl
// ------------------------------------------------------------------


module yfc_core_v_linebuffer_rsci_1_v_linebuffer_rsc_wait_ctrl (
  core_wen, core_wten, v_linebuffer_rsci_oswt, v_linebuffer_rsci_biwt, v_linebuffer_rsci_bdwt,
      v_linebuffer_rsci_we_d_core_sct_pff, v_linebuffer_rsci_iswt0_1_pff, v_linebuffer_rsci_re_d_core_sct_pff,
      v_linebuffer_rsci_oswt_pff
);
  input core_wen;
  input core_wten;
  input v_linebuffer_rsci_oswt;
  output v_linebuffer_rsci_biwt;
  output v_linebuffer_rsci_bdwt;
  output v_linebuffer_rsci_we_d_core_sct_pff;
  input v_linebuffer_rsci_iswt0_1_pff;
  output v_linebuffer_rsci_re_d_core_sct_pff;
  input v_linebuffer_rsci_oswt_pff;



  // Interconnect Declarations for Component Instantiations 
  assign v_linebuffer_rsci_bdwt = v_linebuffer_rsci_oswt & core_wen;
  assign v_linebuffer_rsci_biwt = (~ core_wten) & v_linebuffer_rsci_oswt;
  assign v_linebuffer_rsci_we_d_core_sct_pff = v_linebuffer_rsci_iswt0_1_pff & core_wen;
  assign v_linebuffer_rsci_re_d_core_sct_pff = v_linebuffer_rsci_oswt_pff & core_wen;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yfc_core_u_linebuffer_rsci_1_u_linebuffer_rsc_wait_dp
// ------------------------------------------------------------------


module yfc_core_u_linebuffer_rsci_1_u_linebuffer_rsc_wait_dp (
  clk, arst_n, u_linebuffer_rsci_q_d, u_linebuffer_rsci_q_d_mxwt, u_linebuffer_rsci_biwt,
      u_linebuffer_rsci_bdwt
);
  input clk;
  input arst_n;
  input [9:0] u_linebuffer_rsci_q_d;
  output [9:0] u_linebuffer_rsci_q_d_mxwt;
  input u_linebuffer_rsci_biwt;
  input u_linebuffer_rsci_bdwt;


  // Interconnect Declarations
  reg u_linebuffer_rsci_bcwt;
  reg [9:0] u_linebuffer_rsci_q_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign u_linebuffer_rsci_q_d_mxwt = MUX_v_10_2_2(u_linebuffer_rsci_q_d, u_linebuffer_rsci_q_d_bfwt,
      u_linebuffer_rsci_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      u_linebuffer_rsci_bcwt <= 1'b0;
    end
    else begin
      u_linebuffer_rsci_bcwt <= ~((~(u_linebuffer_rsci_bcwt | u_linebuffer_rsci_biwt))
          | u_linebuffer_rsci_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      u_linebuffer_rsci_q_d_bfwt <= 10'b0000000000;
    end
    else if ( u_linebuffer_rsci_biwt ) begin
      u_linebuffer_rsci_q_d_bfwt <= u_linebuffer_rsci_q_d;
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    yfc_core_u_linebuffer_rsci_1_u_linebuffer_rsc_wait_ctrl
// ------------------------------------------------------------------


module yfc_core_u_linebuffer_rsci_1_u_linebuffer_rsc_wait_ctrl (
  core_wen, core_wten, u_linebuffer_rsci_oswt, u_linebuffer_rsci_biwt, u_linebuffer_rsci_bdwt,
      u_linebuffer_rsci_we_d_core_sct_pff, u_linebuffer_rsci_iswt0_1_pff, u_linebuffer_rsci_re_d_core_sct_pff,
      u_linebuffer_rsci_oswt_pff
);
  input core_wen;
  input core_wten;
  input u_linebuffer_rsci_oswt;
  output u_linebuffer_rsci_biwt;
  output u_linebuffer_rsci_bdwt;
  output u_linebuffer_rsci_we_d_core_sct_pff;
  input u_linebuffer_rsci_iswt0_1_pff;
  output u_linebuffer_rsci_re_d_core_sct_pff;
  input u_linebuffer_rsci_oswt_pff;



  // Interconnect Declarations for Component Instantiations 
  assign u_linebuffer_rsci_bdwt = u_linebuffer_rsci_oswt & core_wen;
  assign u_linebuffer_rsci_biwt = (~ core_wten) & u_linebuffer_rsci_oswt;
  assign u_linebuffer_rsci_we_d_core_sct_pff = u_linebuffer_rsci_iswt0_1_pff & core_wen;
  assign u_linebuffer_rsci_re_d_core_sct_pff = u_linebuffer_rsci_oswt_pff & core_wen;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yfc_core_v_dst_rsci_v_dst_wait_dp
// ------------------------------------------------------------------


module yfc_core_v_dst_rsci_v_dst_wait_dp (
  clk, arst_n, v_dst_rsci_oswt, v_dst_rsci_wen_comp, v_dst_rsci_biwt, v_dst_rsci_bdwt,
      v_dst_rsci_bcwt
);
  input clk;
  input arst_n;
  input v_dst_rsci_oswt;
  output v_dst_rsci_wen_comp;
  input v_dst_rsci_biwt;
  input v_dst_rsci_bdwt;
  output v_dst_rsci_bcwt;
  reg v_dst_rsci_bcwt;



  // Interconnect Declarations for Component Instantiations 
  assign v_dst_rsci_wen_comp = (~ v_dst_rsci_oswt) | v_dst_rsci_biwt | v_dst_rsci_bcwt;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      v_dst_rsci_bcwt <= 1'b0;
    end
    else begin
      v_dst_rsci_bcwt <= ~((~(v_dst_rsci_bcwt | v_dst_rsci_biwt)) | v_dst_rsci_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yfc_core_v_dst_rsci_v_dst_wait_ctrl
// ------------------------------------------------------------------


module yfc_core_v_dst_rsci_v_dst_wait_ctrl (
  core_wen, v_dst_rsci_oswt, v_dst_rsci_irdy, v_dst_rsci_biwt, v_dst_rsci_bdwt, v_dst_rsci_bcwt,
      v_dst_rsci_ivld_core_sct
);
  input core_wen;
  input v_dst_rsci_oswt;
  input v_dst_rsci_irdy;
  output v_dst_rsci_biwt;
  output v_dst_rsci_bdwt;
  input v_dst_rsci_bcwt;
  output v_dst_rsci_ivld_core_sct;


  // Interconnect Declarations
  wire v_dst_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign v_dst_rsci_bdwt = v_dst_rsci_oswt & core_wen;
  assign v_dst_rsci_biwt = v_dst_rsci_ogwt & v_dst_rsci_irdy;
  assign v_dst_rsci_ogwt = v_dst_rsci_oswt & (~ v_dst_rsci_bcwt);
  assign v_dst_rsci_ivld_core_sct = v_dst_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yfc_core_u_dst_rsci_u_dst_wait_dp
// ------------------------------------------------------------------


module yfc_core_u_dst_rsci_u_dst_wait_dp (
  clk, arst_n, u_dst_rsci_oswt, u_dst_rsci_wen_comp, u_dst_rsci_biwt, u_dst_rsci_bdwt,
      u_dst_rsci_bcwt
);
  input clk;
  input arst_n;
  input u_dst_rsci_oswt;
  output u_dst_rsci_wen_comp;
  input u_dst_rsci_biwt;
  input u_dst_rsci_bdwt;
  output u_dst_rsci_bcwt;
  reg u_dst_rsci_bcwt;



  // Interconnect Declarations for Component Instantiations 
  assign u_dst_rsci_wen_comp = (~ u_dst_rsci_oswt) | u_dst_rsci_biwt | u_dst_rsci_bcwt;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      u_dst_rsci_bcwt <= 1'b0;
    end
    else begin
      u_dst_rsci_bcwt <= ~((~(u_dst_rsci_bcwt | u_dst_rsci_biwt)) | u_dst_rsci_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yfc_core_u_dst_rsci_u_dst_wait_ctrl
// ------------------------------------------------------------------


module yfc_core_u_dst_rsci_u_dst_wait_ctrl (
  core_wen, u_dst_rsci_oswt, u_dst_rsci_irdy, u_dst_rsci_biwt, u_dst_rsci_bdwt, u_dst_rsci_bcwt,
      u_dst_rsci_ivld_core_sct
);
  input core_wen;
  input u_dst_rsci_oswt;
  input u_dst_rsci_irdy;
  output u_dst_rsci_biwt;
  output u_dst_rsci_bdwt;
  input u_dst_rsci_bcwt;
  output u_dst_rsci_ivld_core_sct;


  // Interconnect Declarations
  wire u_dst_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign u_dst_rsci_bdwt = u_dst_rsci_oswt & core_wen;
  assign u_dst_rsci_biwt = u_dst_rsci_ogwt & u_dst_rsci_irdy;
  assign u_dst_rsci_ogwt = u_dst_rsci_oswt & (~ u_dst_rsci_bcwt);
  assign u_dst_rsci_ivld_core_sct = u_dst_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yfc_core_y_dst_rsci_y_dst_wait_dp
// ------------------------------------------------------------------


module yfc_core_y_dst_rsci_y_dst_wait_dp (
  clk, arst_n, y_dst_rsci_oswt, y_dst_rsci_wen_comp, y_dst_rsci_biwt, y_dst_rsci_bdwt,
      y_dst_rsci_bcwt
);
  input clk;
  input arst_n;
  input y_dst_rsci_oswt;
  output y_dst_rsci_wen_comp;
  input y_dst_rsci_biwt;
  input y_dst_rsci_bdwt;
  output y_dst_rsci_bcwt;
  reg y_dst_rsci_bcwt;



  // Interconnect Declarations for Component Instantiations 
  assign y_dst_rsci_wen_comp = (~ y_dst_rsci_oswt) | y_dst_rsci_biwt | y_dst_rsci_bcwt;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      y_dst_rsci_bcwt <= 1'b0;
    end
    else begin
      y_dst_rsci_bcwt <= ~((~(y_dst_rsci_bcwt | y_dst_rsci_biwt)) | y_dst_rsci_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yfc_core_y_dst_rsci_y_dst_wait_ctrl
// ------------------------------------------------------------------


module yfc_core_y_dst_rsci_y_dst_wait_ctrl (
  core_wen, y_dst_rsci_oswt, y_dst_rsci_irdy, y_dst_rsci_biwt, y_dst_rsci_bdwt, y_dst_rsci_bcwt,
      y_dst_rsci_ivld_core_sct
);
  input core_wen;
  input y_dst_rsci_oswt;
  input y_dst_rsci_irdy;
  output y_dst_rsci_biwt;
  output y_dst_rsci_bdwt;
  input y_dst_rsci_bcwt;
  output y_dst_rsci_ivld_core_sct;


  // Interconnect Declarations
  wire y_dst_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign y_dst_rsci_bdwt = y_dst_rsci_oswt & core_wen;
  assign y_dst_rsci_biwt = y_dst_rsci_ogwt & y_dst_rsci_irdy;
  assign y_dst_rsci_ogwt = y_dst_rsci_oswt & (~ y_dst_rsci_bcwt);
  assign y_dst_rsci_ivld_core_sct = y_dst_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yfc_core_src_rsci_src_wait_dp
// ------------------------------------------------------------------


module yfc_core_src_rsci_src_wait_dp (
  clk, arst_n, src_rsci_oswt, src_rsci_wen_comp, src_rsci_idat_mxwt, src_rsci_biwt,
      src_rsci_bdwt, src_rsci_bcwt, src_rsci_idat
);
  input clk;
  input arst_n;
  input src_rsci_oswt;
  output src_rsci_wen_comp;
  output [29:0] src_rsci_idat_mxwt;
  input src_rsci_biwt;
  input src_rsci_bdwt;
  output src_rsci_bcwt;
  reg src_rsci_bcwt;
  input [29:0] src_rsci_idat;


  // Interconnect Declarations
  reg [29:0] src_rsci_idat_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign src_rsci_wen_comp = (~ src_rsci_oswt) | src_rsci_biwt | src_rsci_bcwt;
  assign src_rsci_idat_mxwt = MUX_v_30_2_2(src_rsci_idat, src_rsci_idat_bfwt, src_rsci_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      src_rsci_bcwt <= 1'b0;
    end
    else begin
      src_rsci_bcwt <= ~((~(src_rsci_bcwt | src_rsci_biwt)) | src_rsci_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      src_rsci_idat_bfwt <= 30'b000000000000000000000000000000;
    end
    else if ( src_rsci_biwt ) begin
      src_rsci_idat_bfwt <= src_rsci_idat;
    end
  end

  function automatic [29:0] MUX_v_30_2_2;
    input [29:0] input_0;
    input [29:0] input_1;
    input [0:0] sel;
    reg [29:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_30_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    yfc_core_src_rsci_src_wait_ctrl
// ------------------------------------------------------------------


module yfc_core_src_rsci_src_wait_ctrl (
  core_wen, src_rsci_oswt, src_rsci_biwt, src_rsci_bdwt, src_rsci_bcwt, src_rsci_irdy_core_sct,
      src_rsci_ivld
);
  input core_wen;
  input src_rsci_oswt;
  output src_rsci_biwt;
  output src_rsci_bdwt;
  input src_rsci_bcwt;
  output src_rsci_irdy_core_sct;
  input src_rsci_ivld;


  // Interconnect Declarations
  wire src_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign src_rsci_bdwt = src_rsci_oswt & core_wen;
  assign src_rsci_biwt = src_rsci_ogwt & src_rsci_ivld;
  assign src_rsci_ogwt = src_rsci_oswt & (~ src_rsci_bcwt);
  assign src_rsci_irdy_core_sct = src_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_591_10_12_4096_4096_10_5_gen
// ------------------------------------------------------------------


module yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_591_10_12_4096_4096_10_5_gen
    (
  qb, web, enb, db, adrb, qa, wea, ena, da, adra, adra_d, da_d, ena_d, wea_d, qa_d,
      port_0_rw_ram_ir_internal_RMASK_B_d, port_0_rw_ram_ir_internal_WMASK_B_d
);
  input [9:0] qb;
  output web;
  output enb;
  output [9:0] db;
  output [11:0] adrb;
  input [9:0] qa;
  output wea;
  output ena;
  output [9:0] da;
  output [11:0] adra;
  input [23:0] adra_d;
  input [19:0] da_d;
  input [1:0] ena_d;
  input [1:0] wea_d;
  output [19:0] qa_d;
  input [1:0] port_0_rw_ram_ir_internal_RMASK_B_d;
  input [1:0] port_0_rw_ram_ir_internal_WMASK_B_d;


  wire window_read_or_nl;
  wire window_read_or_1_nl;

  // Interconnect Declarations for Component Instantiations 
  assign qa_d[19:10] = qb;
  assign web = (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign window_read_or_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[1]) | (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign enb = window_read_or_nl;
  assign db = (da_d[19:10]);
  assign adrb = (adra_d[23:12]);
  assign qa_d[9:0] = qa;
  assign wea = (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign window_read_or_1_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[0]) | (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign ena = window_read_or_1_nl;
  assign da = (da_d[9:0]);
  assign adra = (adra_d[11:0]);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_590_10_12_4096_4096_10_5_gen
// ------------------------------------------------------------------


module yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_590_10_12_4096_4096_10_5_gen
    (
  qb, web, enb, db, adrb, qa, wea, ena, da, adra, adra_d, da_d, ena_d, wea_d, qa_d,
      port_0_rw_ram_ir_internal_RMASK_B_d, port_0_rw_ram_ir_internal_WMASK_B_d
);
  input [9:0] qb;
  output web;
  output enb;
  output [9:0] db;
  output [11:0] adrb;
  input [9:0] qa;
  output wea;
  output ena;
  output [9:0] da;
  output [11:0] adra;
  input [23:0] adra_d;
  input [19:0] da_d;
  input [1:0] ena_d;
  input [1:0] wea_d;
  output [19:0] qa_d;
  input [1:0] port_0_rw_ram_ir_internal_RMASK_B_d;
  input [1:0] port_0_rw_ram_ir_internal_WMASK_B_d;


  wire window_read_or_nl;
  wire window_read_or_1_nl;

  // Interconnect Declarations for Component Instantiations 
  assign qa_d[19:10] = qb;
  assign web = (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign window_read_or_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[1]) | (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign enb = window_read_or_nl;
  assign db = (da_d[19:10]);
  assign adrb = (adra_d[23:12]);
  assign qa_d[9:0] = qa;
  assign wea = (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign window_read_or_1_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[0]) | (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign ena = window_read_or_1_nl;
  assign da = (da_d[9:0]);
  assign adra = (adra_d[11:0]);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_589_10_12_4096_4096_10_5_gen
// ------------------------------------------------------------------


module yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_589_10_12_4096_4096_10_5_gen
    (
  qb, web, enb, db, adrb, qa, wea, ena, da, adra, adra_d, da_d, ena_d, wea_d, qa_d,
      port_0_rw_ram_ir_internal_RMASK_B_d, port_0_rw_ram_ir_internal_WMASK_B_d
);
  input [9:0] qb;
  output web;
  output enb;
  output [9:0] db;
  output [11:0] adrb;
  input [9:0] qa;
  output wea;
  output ena;
  output [9:0] da;
  output [11:0] adra;
  input [23:0] adra_d;
  input [19:0] da_d;
  input [1:0] ena_d;
  input [1:0] wea_d;
  output [19:0] qa_d;
  input [1:0] port_0_rw_ram_ir_internal_RMASK_B_d;
  input [1:0] port_0_rw_ram_ir_internal_WMASK_B_d;


  wire window_read_or_nl;
  wire window_read_or_1_nl;

  // Interconnect Declarations for Component Instantiations 
  assign qa_d[19:10] = qb;
  assign web = (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign window_read_or_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[1]) | (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign enb = window_read_or_nl;
  assign db = (da_d[19:10]);
  assign adrb = (adra_d[23:12]);
  assign qa_d[9:0] = qa;
  assign wea = (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign window_read_or_1_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[0]) | (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign ena = window_read_or_1_nl;
  assign da = (da_d[9:0]);
  assign adra = (adra_d[11:0]);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_588_10_12_4096_4096_10_5_gen
// ------------------------------------------------------------------


module yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_588_10_12_4096_4096_10_5_gen
    (
  qb, web, enb, db, adrb, qa, wea, ena, da, adra, adra_d, da_d, ena_d, wea_d, qa_d,
      port_0_rw_ram_ir_internal_RMASK_B_d, port_0_rw_ram_ir_internal_WMASK_B_d
);
  input [9:0] qb;
  output web;
  output enb;
  output [9:0] db;
  output [11:0] adrb;
  input [9:0] qa;
  output wea;
  output ena;
  output [9:0] da;
  output [11:0] adra;
  input [23:0] adra_d;
  input [19:0] da_d;
  input [1:0] ena_d;
  input [1:0] wea_d;
  output [19:0] qa_d;
  input [1:0] port_0_rw_ram_ir_internal_RMASK_B_d;
  input [1:0] port_0_rw_ram_ir_internal_WMASK_B_d;


  wire window_read_or_nl;
  wire window_read_or_1_nl;

  // Interconnect Declarations for Component Instantiations 
  assign qa_d[19:10] = qb;
  assign web = (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign window_read_or_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[1]) | (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign enb = window_read_or_nl;
  assign db = (da_d[19:10]);
  assign adrb = (adra_d[23:12]);
  assign qa_d[9:0] = qa;
  assign wea = (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign window_read_or_1_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[0]) | (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign ena = window_read_or_1_nl;
  assign da = (da_d[9:0]);
  assign adra = (adra_d[11:0]);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_587_10_12_4096_4096_10_5_gen
// ------------------------------------------------------------------


module yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_587_10_12_4096_4096_10_5_gen
    (
  qb, web, enb, db, adrb, qa, wea, ena, da, adra, adra_d, da_d, ena_d, wea_d, qa_d,
      port_0_rw_ram_ir_internal_RMASK_B_d, port_0_rw_ram_ir_internal_WMASK_B_d
);
  input [9:0] qb;
  output web;
  output enb;
  output [9:0] db;
  output [11:0] adrb;
  input [9:0] qa;
  output wea;
  output ena;
  output [9:0] da;
  output [11:0] adra;
  input [23:0] adra_d;
  input [19:0] da_d;
  input [1:0] ena_d;
  input [1:0] wea_d;
  output [19:0] qa_d;
  input [1:0] port_0_rw_ram_ir_internal_RMASK_B_d;
  input [1:0] port_0_rw_ram_ir_internal_WMASK_B_d;


  wire window_read_or_nl;
  wire window_read_or_1_nl;

  // Interconnect Declarations for Component Instantiations 
  assign qa_d[19:10] = qb;
  assign web = (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign window_read_or_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[1]) | (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign enb = window_read_or_nl;
  assign db = (da_d[19:10]);
  assign adrb = (adra_d[23:12]);
  assign qa_d[9:0] = qa;
  assign wea = (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign window_read_or_1_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[0]) | (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign ena = window_read_or_1_nl;
  assign da = (da_d[9:0]);
  assign adra = (adra_d[11:0]);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_586_10_12_4096_4096_10_5_gen
// ------------------------------------------------------------------


module yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_586_10_12_4096_4096_10_5_gen
    (
  qb, web, enb, db, adrb, qa, wea, ena, da, adra, adra_d, da_d, ena_d, wea_d, qa_d,
      port_0_rw_ram_ir_internal_RMASK_B_d, port_0_rw_ram_ir_internal_WMASK_B_d
);
  input [9:0] qb;
  output web;
  output enb;
  output [9:0] db;
  output [11:0] adrb;
  input [9:0] qa;
  output wea;
  output ena;
  output [9:0] da;
  output [11:0] adra;
  input [23:0] adra_d;
  input [19:0] da_d;
  input [1:0] ena_d;
  input [1:0] wea_d;
  output [19:0] qa_d;
  input [1:0] port_0_rw_ram_ir_internal_RMASK_B_d;
  input [1:0] port_0_rw_ram_ir_internal_WMASK_B_d;


  wire window_read_or_nl;
  wire window_read_or_1_nl;

  // Interconnect Declarations for Component Instantiations 
  assign qa_d[19:10] = qb;
  assign web = (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign window_read_or_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[1]) | (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign enb = window_read_or_nl;
  assign db = (da_d[19:10]);
  assign adrb = (adra_d[23:12]);
  assign qa_d[9:0] = qa;
  assign wea = (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign window_read_or_1_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[0]) | (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign ena = window_read_or_1_nl;
  assign da = (da_d[9:0]);
  assign adra = (adra_d[11:0]);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_585_10_12_4096_4096_10_5_gen
// ------------------------------------------------------------------


module yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_585_10_12_4096_4096_10_5_gen
    (
  qb, web, enb, db, adrb, qa, wea, ena, da, adra, adra_d, da_d, ena_d, wea_d, qa_d,
      port_0_rw_ram_ir_internal_RMASK_B_d, port_0_rw_ram_ir_internal_WMASK_B_d
);
  input [9:0] qb;
  output web;
  output enb;
  output [9:0] db;
  output [11:0] adrb;
  input [9:0] qa;
  output wea;
  output ena;
  output [9:0] da;
  output [11:0] adra;
  input [23:0] adra_d;
  input [19:0] da_d;
  input [1:0] ena_d;
  input [1:0] wea_d;
  output [19:0] qa_d;
  input [1:0] port_0_rw_ram_ir_internal_RMASK_B_d;
  input [1:0] port_0_rw_ram_ir_internal_WMASK_B_d;


  wire window_read_or_nl;
  wire window_read_or_1_nl;

  // Interconnect Declarations for Component Instantiations 
  assign qa_d[19:10] = qb;
  assign web = (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign window_read_or_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[1]) | (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign enb = window_read_or_nl;
  assign db = (da_d[19:10]);
  assign adrb = (adra_d[23:12]);
  assign qa_d[9:0] = qa;
  assign wea = (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign window_read_or_1_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[0]) | (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign ena = window_read_or_1_nl;
  assign da = (da_d[9:0]);
  assign adra = (adra_d[11:0]);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_584_10_12_4096_4096_10_5_gen
// ------------------------------------------------------------------


module yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_584_10_12_4096_4096_10_5_gen
    (
  qb, web, enb, db, adrb, qa, wea, ena, da, adra, adra_d, da_d, ena_d, wea_d, qa_d,
      port_0_rw_ram_ir_internal_RMASK_B_d, port_0_rw_ram_ir_internal_WMASK_B_d
);
  input [9:0] qb;
  output web;
  output enb;
  output [9:0] db;
  output [11:0] adrb;
  input [9:0] qa;
  output wea;
  output ena;
  output [9:0] da;
  output [11:0] adra;
  input [23:0] adra_d;
  input [19:0] da_d;
  input [1:0] ena_d;
  input [1:0] wea_d;
  output [19:0] qa_d;
  input [1:0] port_0_rw_ram_ir_internal_RMASK_B_d;
  input [1:0] port_0_rw_ram_ir_internal_WMASK_B_d;


  wire window_read_or_nl;
  wire window_read_or_1_nl;

  // Interconnect Declarations for Component Instantiations 
  assign qa_d[19:10] = qb;
  assign web = (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign window_read_or_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[1]) | (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign enb = window_read_or_nl;
  assign db = (da_d[19:10]);
  assign adrb = (adra_d[23:12]);
  assign qa_d[9:0] = qa;
  assign wea = (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign window_read_or_1_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[0]) | (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign ena = window_read_or_1_nl;
  assign da = (da_d[9:0]);
  assign adra = (adra_d[11:0]);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_583_10_12_4096_4096_10_5_gen
// ------------------------------------------------------------------


module yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_583_10_12_4096_4096_10_5_gen
    (
  qb, web, enb, db, adrb, qa, wea, ena, da, adra, adra_d, da_d, ena_d, wea_d, qa_d,
      port_0_rw_ram_ir_internal_RMASK_B_d, port_0_rw_ram_ir_internal_WMASK_B_d
);
  input [9:0] qb;
  output web;
  output enb;
  output [9:0] db;
  output [11:0] adrb;
  input [9:0] qa;
  output wea;
  output ena;
  output [9:0] da;
  output [11:0] adra;
  input [23:0] adra_d;
  input [19:0] da_d;
  input [1:0] ena_d;
  input [1:0] wea_d;
  output [19:0] qa_d;
  input [1:0] port_0_rw_ram_ir_internal_RMASK_B_d;
  input [1:0] port_0_rw_ram_ir_internal_WMASK_B_d;


  wire window_read_or_nl;
  wire window_read_or_1_nl;

  // Interconnect Declarations for Component Instantiations 
  assign qa_d[19:10] = qb;
  assign web = (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign window_read_or_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[1]) | (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign enb = window_read_or_nl;
  assign db = (da_d[19:10]);
  assign adrb = (adra_d[23:12]);
  assign qa_d[9:0] = qa;
  assign wea = (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign window_read_or_1_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[0]) | (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign ena = window_read_or_1_nl;
  assign da = (da_d[9:0]);
  assign adra = (adra_d[11:0]);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_582_10_12_4096_4096_10_5_gen
// ------------------------------------------------------------------


module yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_582_10_12_4096_4096_10_5_gen
    (
  qb, web, enb, db, adrb, qa, wea, ena, da, adra, adra_d, da_d, ena_d, wea_d, qa_d,
      port_0_rw_ram_ir_internal_RMASK_B_d, port_0_rw_ram_ir_internal_WMASK_B_d
);
  input [9:0] qb;
  output web;
  output enb;
  output [9:0] db;
  output [11:0] adrb;
  input [9:0] qa;
  output wea;
  output ena;
  output [9:0] da;
  output [11:0] adra;
  input [23:0] adra_d;
  input [19:0] da_d;
  input [1:0] ena_d;
  input [1:0] wea_d;
  output [19:0] qa_d;
  input [1:0] port_0_rw_ram_ir_internal_RMASK_B_d;
  input [1:0] port_0_rw_ram_ir_internal_WMASK_B_d;


  wire window_read_or_nl;
  wire window_read_or_1_nl;

  // Interconnect Declarations for Component Instantiations 
  assign qa_d[19:10] = qb;
  assign web = (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign window_read_or_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[1]) | (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign enb = window_read_or_nl;
  assign db = (da_d[19:10]);
  assign adrb = (adra_d[23:12]);
  assign qa_d[9:0] = qa;
  assign wea = (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign window_read_or_1_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[0]) | (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign ena = window_read_or_1_nl;
  assign da = (da_d[9:0]);
  assign adra = (adra_d[11:0]);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_581_10_12_4096_4096_10_5_gen
// ------------------------------------------------------------------


module yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_581_10_12_4096_4096_10_5_gen
    (
  qb, web, enb, db, adrb, qa, wea, ena, da, adra, adra_d, da_d, ena_d, wea_d, qa_d,
      port_0_rw_ram_ir_internal_RMASK_B_d, port_0_rw_ram_ir_internal_WMASK_B_d
);
  input [9:0] qb;
  output web;
  output enb;
  output [9:0] db;
  output [11:0] adrb;
  input [9:0] qa;
  output wea;
  output ena;
  output [9:0] da;
  output [11:0] adra;
  input [23:0] adra_d;
  input [19:0] da_d;
  input [1:0] ena_d;
  input [1:0] wea_d;
  output [19:0] qa_d;
  input [1:0] port_0_rw_ram_ir_internal_RMASK_B_d;
  input [1:0] port_0_rw_ram_ir_internal_WMASK_B_d;


  wire window_read_or_nl;
  wire window_read_or_1_nl;

  // Interconnect Declarations for Component Instantiations 
  assign qa_d[19:10] = qb;
  assign web = (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign window_read_or_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[1]) | (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign enb = window_read_or_nl;
  assign db = (da_d[19:10]);
  assign adrb = (adra_d[23:12]);
  assign qa_d[9:0] = qa;
  assign wea = (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign window_read_or_1_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[0]) | (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign ena = window_read_or_1_nl;
  assign da = (da_d[9:0]);
  assign adra = (adra_d[11:0]);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_580_10_12_4096_4096_10_5_gen
// ------------------------------------------------------------------


module yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_580_10_12_4096_4096_10_5_gen
    (
  qb, web, enb, db, adrb, qa, wea, ena, da, adra, adra_d, da_d, ena_d, wea_d, qa_d,
      port_0_rw_ram_ir_internal_RMASK_B_d, port_0_rw_ram_ir_internal_WMASK_B_d
);
  input [9:0] qb;
  output web;
  output enb;
  output [9:0] db;
  output [11:0] adrb;
  input [9:0] qa;
  output wea;
  output ena;
  output [9:0] da;
  output [11:0] adra;
  input [23:0] adra_d;
  input [19:0] da_d;
  input [1:0] ena_d;
  input [1:0] wea_d;
  output [19:0] qa_d;
  input [1:0] port_0_rw_ram_ir_internal_RMASK_B_d;
  input [1:0] port_0_rw_ram_ir_internal_WMASK_B_d;


  wire window_read_or_nl;
  wire window_read_or_1_nl;

  // Interconnect Declarations for Component Instantiations 
  assign qa_d[19:10] = qb;
  assign web = (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign window_read_or_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[1]) | (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign enb = window_read_or_nl;
  assign db = (da_d[19:10]);
  assign adrb = (adra_d[23:12]);
  assign qa_d[9:0] = qa;
  assign wea = (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign window_read_or_1_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[0]) | (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign ena = window_read_or_1_nl;
  assign da = (da_d[9:0]);
  assign adra = (adra_d[11:0]);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_579_10_12_4096_4096_10_5_gen
// ------------------------------------------------------------------


module yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_579_10_12_4096_4096_10_5_gen
    (
  qb, web, enb, db, adrb, qa, wea, ena, da, adra, adra_d, da_d, ena_d, wea_d, qa_d,
      port_0_rw_ram_ir_internal_RMASK_B_d, port_0_rw_ram_ir_internal_WMASK_B_d
);
  input [9:0] qb;
  output web;
  output enb;
  output [9:0] db;
  output [11:0] adrb;
  input [9:0] qa;
  output wea;
  output ena;
  output [9:0] da;
  output [11:0] adra;
  input [23:0] adra_d;
  input [19:0] da_d;
  input [1:0] ena_d;
  input [1:0] wea_d;
  output [19:0] qa_d;
  input [1:0] port_0_rw_ram_ir_internal_RMASK_B_d;
  input [1:0] port_0_rw_ram_ir_internal_WMASK_B_d;


  wire window_read_or_nl;
  wire window_read_or_1_nl;

  // Interconnect Declarations for Component Instantiations 
  assign qa_d[19:10] = qb;
  assign web = (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign window_read_or_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[1]) | (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign enb = window_read_or_nl;
  assign db = (da_d[19:10]);
  assign adrb = (adra_d[23:12]);
  assign qa_d[9:0] = qa;
  assign wea = (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign window_read_or_1_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[0]) | (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign ena = window_read_or_1_nl;
  assign da = (da_d[9:0]);
  assign adra = (adra_d[11:0]);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_578_10_12_4096_4096_10_5_gen
// ------------------------------------------------------------------


module yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_578_10_12_4096_4096_10_5_gen
    (
  qb, web, enb, db, adrb, qa, wea, ena, da, adra, adra_d, da_d, ena_d, wea_d, qa_d,
      port_0_rw_ram_ir_internal_RMASK_B_d, port_0_rw_ram_ir_internal_WMASK_B_d
);
  input [9:0] qb;
  output web;
  output enb;
  output [9:0] db;
  output [11:0] adrb;
  input [9:0] qa;
  output wea;
  output ena;
  output [9:0] da;
  output [11:0] adra;
  input [23:0] adra_d;
  input [19:0] da_d;
  input [1:0] ena_d;
  input [1:0] wea_d;
  output [19:0] qa_d;
  input [1:0] port_0_rw_ram_ir_internal_RMASK_B_d;
  input [1:0] port_0_rw_ram_ir_internal_WMASK_B_d;


  wire window_read_or_nl;
  wire window_read_or_1_nl;

  // Interconnect Declarations for Component Instantiations 
  assign qa_d[19:10] = qb;
  assign web = (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign window_read_or_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[1]) | (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign enb = window_read_or_nl;
  assign db = (da_d[19:10]);
  assign adrb = (adra_d[23:12]);
  assign qa_d[9:0] = qa;
  assign wea = (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign window_read_or_1_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[0]) | (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign ena = window_read_or_1_nl;
  assign da = (da_d[9:0]);
  assign adra = (adra_d[11:0]);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_577_10_12_4096_4096_10_5_gen
// ------------------------------------------------------------------


module yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_577_10_12_4096_4096_10_5_gen
    (
  qb, web, enb, db, adrb, qa, wea, ena, da, adra, adra_d, da_d, ena_d, wea_d, qa_d,
      port_0_rw_ram_ir_internal_RMASK_B_d, port_0_rw_ram_ir_internal_WMASK_B_d
);
  input [9:0] qb;
  output web;
  output enb;
  output [9:0] db;
  output [11:0] adrb;
  input [9:0] qa;
  output wea;
  output ena;
  output [9:0] da;
  output [11:0] adra;
  input [23:0] adra_d;
  input [19:0] da_d;
  input [1:0] ena_d;
  input [1:0] wea_d;
  output [19:0] qa_d;
  input [1:0] port_0_rw_ram_ir_internal_RMASK_B_d;
  input [1:0] port_0_rw_ram_ir_internal_WMASK_B_d;


  wire window_read_or_nl;
  wire window_read_or_1_nl;

  // Interconnect Declarations for Component Instantiations 
  assign qa_d[19:10] = qb;
  assign web = (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign window_read_or_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[1]) | (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign enb = window_read_or_nl;
  assign db = (da_d[19:10]);
  assign adrb = (adra_d[23:12]);
  assign qa_d[9:0] = qa;
  assign wea = (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign window_read_or_1_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[0]) | (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign ena = window_read_or_1_nl;
  assign da = (da_d[9:0]);
  assign adra = (adra_d[11:0]);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_576_10_12_4096_4096_10_5_gen
// ------------------------------------------------------------------


module yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_576_10_12_4096_4096_10_5_gen
    (
  qb, web, enb, db, adrb, qa, wea, ena, da, adra, adra_d, da_d, ena_d, wea_d, qa_d,
      port_0_rw_ram_ir_internal_RMASK_B_d, port_0_rw_ram_ir_internal_WMASK_B_d
);
  input [9:0] qb;
  output web;
  output enb;
  output [9:0] db;
  output [11:0] adrb;
  input [9:0] qa;
  output wea;
  output ena;
  output [9:0] da;
  output [11:0] adra;
  input [23:0] adra_d;
  input [19:0] da_d;
  input [1:0] ena_d;
  input [1:0] wea_d;
  output [19:0] qa_d;
  input [1:0] port_0_rw_ram_ir_internal_RMASK_B_d;
  input [1:0] port_0_rw_ram_ir_internal_WMASK_B_d;


  wire window_read_or_nl;
  wire window_read_or_1_nl;

  // Interconnect Declarations for Component Instantiations 
  assign qa_d[19:10] = qb;
  assign web = (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign window_read_or_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[1]) | (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign enb = window_read_or_nl;
  assign db = (da_d[19:10]);
  assign adrb = (adra_d[23:12]);
  assign qa_d[9:0] = qa;
  assign wea = (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign window_read_or_1_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[0]) | (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign ena = window_read_or_1_nl;
  assign da = (da_d[9:0]);
  assign adra = (adra_d[11:0]);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_575_10_12_4096_4096_10_5_gen
// ------------------------------------------------------------------


module yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_575_10_12_4096_4096_10_5_gen
    (
  qb, web, enb, db, adrb, qa, wea, ena, da, adra, adra_d, da_d, ena_d, wea_d, qa_d,
      port_0_rw_ram_ir_internal_RMASK_B_d, port_0_rw_ram_ir_internal_WMASK_B_d
);
  input [9:0] qb;
  output web;
  output enb;
  output [9:0] db;
  output [11:0] adrb;
  input [9:0] qa;
  output wea;
  output ena;
  output [9:0] da;
  output [11:0] adra;
  input [23:0] adra_d;
  input [19:0] da_d;
  input [1:0] ena_d;
  input [1:0] wea_d;
  output [19:0] qa_d;
  input [1:0] port_0_rw_ram_ir_internal_RMASK_B_d;
  input [1:0] port_0_rw_ram_ir_internal_WMASK_B_d;


  wire window_read_or_nl;
  wire window_read_or_1_nl;

  // Interconnect Declarations for Component Instantiations 
  assign qa_d[19:10] = qb;
  assign web = (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign window_read_or_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[1]) | (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign enb = window_read_or_nl;
  assign db = (da_d[19:10]);
  assign adrb = (adra_d[23:12]);
  assign qa_d[9:0] = qa;
  assign wea = (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign window_read_or_1_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[0]) | (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign ena = window_read_or_1_nl;
  assign da = (da_d[9:0]);
  assign adra = (adra_d[11:0]);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_574_10_12_4096_4096_10_5_gen
// ------------------------------------------------------------------


module yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_574_10_12_4096_4096_10_5_gen
    (
  qb, web, enb, db, adrb, qa, wea, ena, da, adra, adra_d, da_d, ena_d, wea_d, qa_d,
      port_0_rw_ram_ir_internal_RMASK_B_d, port_0_rw_ram_ir_internal_WMASK_B_d
);
  input [9:0] qb;
  output web;
  output enb;
  output [9:0] db;
  output [11:0] adrb;
  input [9:0] qa;
  output wea;
  output ena;
  output [9:0] da;
  output [11:0] adra;
  input [23:0] adra_d;
  input [19:0] da_d;
  input [1:0] ena_d;
  input [1:0] wea_d;
  output [19:0] qa_d;
  input [1:0] port_0_rw_ram_ir_internal_RMASK_B_d;
  input [1:0] port_0_rw_ram_ir_internal_WMASK_B_d;


  wire window_read_or_nl;
  wire window_read_or_1_nl;

  // Interconnect Declarations for Component Instantiations 
  assign qa_d[19:10] = qb;
  assign web = (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign window_read_or_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[1]) | (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign enb = window_read_or_nl;
  assign db = (da_d[19:10]);
  assign adrb = (adra_d[23:12]);
  assign qa_d[9:0] = qa;
  assign wea = (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign window_read_or_1_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[0]) | (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign ena = window_read_or_1_nl;
  assign da = (da_d[9:0]);
  assign adra = (adra_d[11:0]);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_573_10_12_4096_4096_10_5_gen
// ------------------------------------------------------------------


module yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_573_10_12_4096_4096_10_5_gen
    (
  qb, web, enb, db, adrb, qa, wea, ena, da, adra, adra_d, da_d, ena_d, wea_d, qa_d,
      port_0_rw_ram_ir_internal_RMASK_B_d, port_0_rw_ram_ir_internal_WMASK_B_d
);
  input [9:0] qb;
  output web;
  output enb;
  output [9:0] db;
  output [11:0] adrb;
  input [9:0] qa;
  output wea;
  output ena;
  output [9:0] da;
  output [11:0] adra;
  input [23:0] adra_d;
  input [19:0] da_d;
  input [1:0] ena_d;
  input [1:0] wea_d;
  output [19:0] qa_d;
  input [1:0] port_0_rw_ram_ir_internal_RMASK_B_d;
  input [1:0] port_0_rw_ram_ir_internal_WMASK_B_d;


  wire window_read_or_nl;
  wire window_read_or_1_nl;

  // Interconnect Declarations for Component Instantiations 
  assign qa_d[19:10] = qb;
  assign web = (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign window_read_or_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[1]) | (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign enb = window_read_or_nl;
  assign db = (da_d[19:10]);
  assign adrb = (adra_d[23:12]);
  assign qa_d[9:0] = qa;
  assign wea = (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign window_read_or_1_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[0]) | (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign ena = window_read_or_1_nl;
  assign da = (da_d[9:0]);
  assign adra = (adra_d[11:0]);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_572_10_12_4096_4096_10_5_gen
// ------------------------------------------------------------------


module yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_572_10_12_4096_4096_10_5_gen
    (
  qb, web, enb, db, adrb, qa, wea, ena, da, adra, adra_d, da_d, ena_d, wea_d, qa_d,
      port_0_rw_ram_ir_internal_RMASK_B_d, port_0_rw_ram_ir_internal_WMASK_B_d
);
  input [9:0] qb;
  output web;
  output enb;
  output [9:0] db;
  output [11:0] adrb;
  input [9:0] qa;
  output wea;
  output ena;
  output [9:0] da;
  output [11:0] adra;
  input [23:0] adra_d;
  input [19:0] da_d;
  input [1:0] ena_d;
  input [1:0] wea_d;
  output [19:0] qa_d;
  input [1:0] port_0_rw_ram_ir_internal_RMASK_B_d;
  input [1:0] port_0_rw_ram_ir_internal_WMASK_B_d;


  wire window_read_or_nl;
  wire window_read_or_1_nl;

  // Interconnect Declarations for Component Instantiations 
  assign qa_d[19:10] = qb;
  assign web = (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign window_read_or_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[1]) | (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign enb = window_read_or_nl;
  assign db = (da_d[19:10]);
  assign adrb = (adra_d[23:12]);
  assign qa_d[9:0] = qa;
  assign wea = (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign window_read_or_1_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[0]) | (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign ena = window_read_or_1_nl;
  assign da = (da_d[9:0]);
  assign adra = (adra_d[11:0]);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_571_10_12_4096_4096_10_5_gen
// ------------------------------------------------------------------


module yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_571_10_12_4096_4096_10_5_gen
    (
  qb, web, enb, db, adrb, qa, wea, ena, da, adra, adra_d, da_d, ena_d, wea_d, qa_d,
      port_0_rw_ram_ir_internal_RMASK_B_d, port_0_rw_ram_ir_internal_WMASK_B_d
);
  input [9:0] qb;
  output web;
  output enb;
  output [9:0] db;
  output [11:0] adrb;
  input [9:0] qa;
  output wea;
  output ena;
  output [9:0] da;
  output [11:0] adra;
  input [23:0] adra_d;
  input [19:0] da_d;
  input [1:0] ena_d;
  input [1:0] wea_d;
  output [19:0] qa_d;
  input [1:0] port_0_rw_ram_ir_internal_RMASK_B_d;
  input [1:0] port_0_rw_ram_ir_internal_WMASK_B_d;


  wire window_read_or_nl;
  wire window_read_or_1_nl;

  // Interconnect Declarations for Component Instantiations 
  assign qa_d[19:10] = qb;
  assign web = (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign window_read_or_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[1]) | (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign enb = window_read_or_nl;
  assign db = (da_d[19:10]);
  assign adrb = (adra_d[23:12]);
  assign qa_d[9:0] = qa;
  assign wea = (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign window_read_or_1_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[0]) | (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign ena = window_read_or_1_nl;
  assign da = (da_d[9:0]);
  assign adra = (adra_d[11:0]);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_570_10_12_4096_4096_10_5_gen
// ------------------------------------------------------------------


module yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_570_10_12_4096_4096_10_5_gen
    (
  qb, web, enb, db, adrb, qa, wea, ena, da, adra, adra_d, da_d, ena_d, wea_d, qa_d,
      port_0_rw_ram_ir_internal_RMASK_B_d, port_0_rw_ram_ir_internal_WMASK_B_d
);
  input [9:0] qb;
  output web;
  output enb;
  output [9:0] db;
  output [11:0] adrb;
  input [9:0] qa;
  output wea;
  output ena;
  output [9:0] da;
  output [11:0] adra;
  input [23:0] adra_d;
  input [19:0] da_d;
  input [1:0] ena_d;
  input [1:0] wea_d;
  output [19:0] qa_d;
  input [1:0] port_0_rw_ram_ir_internal_RMASK_B_d;
  input [1:0] port_0_rw_ram_ir_internal_WMASK_B_d;


  wire window_read_or_nl;
  wire window_read_or_1_nl;

  // Interconnect Declarations for Component Instantiations 
  assign qa_d[19:10] = qb;
  assign web = (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign window_read_or_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[1]) | (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign enb = window_read_or_nl;
  assign db = (da_d[19:10]);
  assign adrb = (adra_d[23:12]);
  assign qa_d[9:0] = qa;
  assign wea = (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign window_read_or_1_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[0]) | (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign ena = window_read_or_1_nl;
  assign da = (da_d[9:0]);
  assign adra = (adra_d[11:0]);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_569_10_12_4096_4096_10_5_gen
// ------------------------------------------------------------------


module yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_569_10_12_4096_4096_10_5_gen
    (
  qb, web, enb, db, adrb, qa, wea, ena, da, adra, adra_d, da_d, ena_d, wea_d, qa_d,
      port_0_rw_ram_ir_internal_RMASK_B_d, port_0_rw_ram_ir_internal_WMASK_B_d
);
  input [9:0] qb;
  output web;
  output enb;
  output [9:0] db;
  output [11:0] adrb;
  input [9:0] qa;
  output wea;
  output ena;
  output [9:0] da;
  output [11:0] adra;
  input [23:0] adra_d;
  input [19:0] da_d;
  input [1:0] ena_d;
  input [1:0] wea_d;
  output [19:0] qa_d;
  input [1:0] port_0_rw_ram_ir_internal_RMASK_B_d;
  input [1:0] port_0_rw_ram_ir_internal_WMASK_B_d;


  wire window_read_or_nl;
  wire window_read_or_1_nl;

  // Interconnect Declarations for Component Instantiations 
  assign qa_d[19:10] = qb;
  assign web = (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign window_read_or_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[1]) | (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign enb = window_read_or_nl;
  assign db = (da_d[19:10]);
  assign adrb = (adra_d[23:12]);
  assign qa_d[9:0] = qa;
  assign wea = (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign window_read_or_1_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[0]) | (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign ena = window_read_or_1_nl;
  assign da = (da_d[9:0]);
  assign adra = (adra_d[11:0]);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_568_10_12_4096_4096_10_5_gen
// ------------------------------------------------------------------


module yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_568_10_12_4096_4096_10_5_gen
    (
  qb, web, enb, db, adrb, qa, wea, ena, da, adra, adra_d, da_d, ena_d, wea_d, qa_d,
      port_0_rw_ram_ir_internal_RMASK_B_d, port_0_rw_ram_ir_internal_WMASK_B_d
);
  input [9:0] qb;
  output web;
  output enb;
  output [9:0] db;
  output [11:0] adrb;
  input [9:0] qa;
  output wea;
  output ena;
  output [9:0] da;
  output [11:0] adra;
  input [23:0] adra_d;
  input [19:0] da_d;
  input [1:0] ena_d;
  input [1:0] wea_d;
  output [19:0] qa_d;
  input [1:0] port_0_rw_ram_ir_internal_RMASK_B_d;
  input [1:0] port_0_rw_ram_ir_internal_WMASK_B_d;


  wire window_read_or_nl;
  wire window_read_or_1_nl;

  // Interconnect Declarations for Component Instantiations 
  assign qa_d[19:10] = qb;
  assign web = (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign window_read_or_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[1]) | (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign enb = window_read_or_nl;
  assign db = (da_d[19:10]);
  assign adrb = (adra_d[23:12]);
  assign qa_d[9:0] = qa;
  assign wea = (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign window_read_or_1_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[0]) | (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign ena = window_read_or_1_nl;
  assign da = (da_d[9:0]);
  assign adra = (adra_d[11:0]);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_staller
// ------------------------------------------------------------------


module yuv444dns_core_staller (
  clk, arst_n, core_wen, core_wten, src_y_rsci_wen_comp, src_u_rsci_wen_comp, src_v_rsci_wen_comp,
      dst_y_rsci_wen_comp, dst_u_rsci_wen_comp, dst_v_rsci_wen_comp
);
  input clk;
  input arst_n;
  output core_wen;
  output core_wten;
  input src_y_rsci_wen_comp;
  input src_u_rsci_wen_comp;
  input src_v_rsci_wen_comp;
  input dst_y_rsci_wen_comp;
  input dst_u_rsci_wen_comp;
  input dst_v_rsci_wen_comp;


  // Interconnect Declarations
  reg core_wten_reg;


  // Interconnect Declarations for Component Instantiations 
  assign core_wen = src_y_rsci_wen_comp & src_u_rsci_wen_comp & src_v_rsci_wen_comp
      & dst_y_rsci_wen_comp & dst_u_rsci_wen_comp & dst_v_rsci_wen_comp;
  assign core_wten = core_wten_reg;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      core_wten_reg <= 1'b0;
    end
    else begin
      core_wten_reg <= ~ core_wen;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_vlineBuf_rsc_7_0_i_1_vlineBuf_rsc_7_0_wait_dp
// ------------------------------------------------------------------


module yuv444dns_core_vlineBuf_rsc_7_0_i_1_vlineBuf_rsc_7_0_wait_dp (
  clk, arst_n, vlineBuf_rsc_7_0_i_adra_d, vlineBuf_rsc_7_0_i_da_d, vlineBuf_rsc_7_0_i_qa_d,
      vlineBuf_rsc_7_0_i_adra_d_core, vlineBuf_rsc_7_0_i_da_d_core, vlineBuf_rsc_7_0_i_qa_d_mxwt,
      vlineBuf_rsc_7_0_i_biwt, vlineBuf_rsc_7_0_i_bdwt
);
  input clk;
  input arst_n;
  output [11:0] vlineBuf_rsc_7_0_i_adra_d;
  output [9:0] vlineBuf_rsc_7_0_i_da_d;
  input [19:0] vlineBuf_rsc_7_0_i_qa_d;
  input [23:0] vlineBuf_rsc_7_0_i_adra_d_core;
  input [19:0] vlineBuf_rsc_7_0_i_da_d_core;
  output [9:0] vlineBuf_rsc_7_0_i_qa_d_mxwt;
  input vlineBuf_rsc_7_0_i_biwt;
  input vlineBuf_rsc_7_0_i_bdwt;


  // Interconnect Declarations
  reg vlineBuf_rsc_7_0_i_bcwt;
  reg [9:0] vlineBuf_rsc_7_0_i_qa_d_bfwt_9_0;


  // Interconnect Declarations for Component Instantiations 
  assign vlineBuf_rsc_7_0_i_qa_d_mxwt = MUX_v_10_2_2((vlineBuf_rsc_7_0_i_qa_d[9:0]),
      vlineBuf_rsc_7_0_i_qa_d_bfwt_9_0, vlineBuf_rsc_7_0_i_bcwt);
  assign vlineBuf_rsc_7_0_i_adra_d = vlineBuf_rsc_7_0_i_adra_d_core[11:0];
  assign vlineBuf_rsc_7_0_i_da_d = vlineBuf_rsc_7_0_i_da_d_core[9:0];
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vlineBuf_rsc_7_0_i_bcwt <= 1'b0;
    end
    else begin
      vlineBuf_rsc_7_0_i_bcwt <= ~((~(vlineBuf_rsc_7_0_i_bcwt | vlineBuf_rsc_7_0_i_biwt))
          | vlineBuf_rsc_7_0_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vlineBuf_rsc_7_0_i_qa_d_bfwt_9_0 <= 10'b0000000000;
    end
    else if ( vlineBuf_rsc_7_0_i_biwt ) begin
      vlineBuf_rsc_7_0_i_qa_d_bfwt_9_0 <= vlineBuf_rsc_7_0_i_qa_d[9:0];
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_vlineBuf_rsc_7_0_i_1_vlineBuf_rsc_7_0_wait_ctrl
// ------------------------------------------------------------------


module yuv444dns_core_vlineBuf_rsc_7_0_i_1_vlineBuf_rsc_7_0_wait_ctrl (
  core_wen, core_wten, vlineBuf_rsc_7_0_i_oswt, vlineBuf_rsc_7_0_i_ena_d_core_psct,
      vlineBuf_rsc_7_0_i_wea_d_core_psct, vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct,
      vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct, vlineBuf_rsc_7_0_i_biwt,
      vlineBuf_rsc_7_0_i_bdwt, vlineBuf_rsc_7_0_i_ena_d_core_sct, vlineBuf_rsc_7_0_i_wea_d_core_sct,
      vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct, vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct,
      vlineBuf_rsc_7_0_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input vlineBuf_rsc_7_0_i_oswt;
  input [1:0] vlineBuf_rsc_7_0_i_ena_d_core_psct;
  input [1:0] vlineBuf_rsc_7_0_i_wea_d_core_psct;
  input [1:0] vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  output vlineBuf_rsc_7_0_i_biwt;
  output vlineBuf_rsc_7_0_i_bdwt;
  output [1:0] vlineBuf_rsc_7_0_i_ena_d_core_sct;
  output [1:0] vlineBuf_rsc_7_0_i_wea_d_core_sct;
  output [1:0] vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output [1:0] vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  input vlineBuf_rsc_7_0_i_oswt_pff;


  // Interconnect Declarations
  wire vlineBuf_rsc_7_0_i_dswt_pff;

  wire[0:0] window_read_and_284_nl;
  wire[0:0] window_read_and_285_nl;
  wire[0:0] window_read_and_286_nl;
  wire[0:0] window_read_and_287_nl;

  // Interconnect Declarations for Component Instantiations 
  assign vlineBuf_rsc_7_0_i_bdwt = vlineBuf_rsc_7_0_i_oswt & core_wen;
  assign vlineBuf_rsc_7_0_i_biwt = (~ core_wten) & vlineBuf_rsc_7_0_i_oswt;
  assign window_read_and_284_nl = (vlineBuf_rsc_7_0_i_ena_d_core_psct[0]) & vlineBuf_rsc_7_0_i_dswt_pff;
  assign vlineBuf_rsc_7_0_i_ena_d_core_sct = {1'b0 , window_read_and_284_nl};
  assign vlineBuf_rsc_7_0_i_dswt_pff = core_wen & vlineBuf_rsc_7_0_i_oswt_pff;
  assign window_read_and_285_nl = (vlineBuf_rsc_7_0_i_wea_d_core_psct[0]) & vlineBuf_rsc_7_0_i_dswt_pff;
  assign vlineBuf_rsc_7_0_i_wea_d_core_sct = {1'b0 , window_read_and_285_nl};
  assign window_read_and_286_nl = (vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])
      & vlineBuf_rsc_7_0_i_dswt_pff;
  assign vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct = {1'b0
      , window_read_and_286_nl};
  assign window_read_and_287_nl = (vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])
      & vlineBuf_rsc_7_0_i_dswt_pff;
  assign vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct = {1'b0
      , window_read_and_287_nl};
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_vlineBuf_rsc_6_0_i_1_vlineBuf_rsc_6_0_wait_dp
// ------------------------------------------------------------------


module yuv444dns_core_vlineBuf_rsc_6_0_i_1_vlineBuf_rsc_6_0_wait_dp (
  clk, arst_n, vlineBuf_rsc_6_0_i_adra_d, vlineBuf_rsc_6_0_i_da_d, vlineBuf_rsc_6_0_i_qa_d,
      vlineBuf_rsc_6_0_i_adra_d_core, vlineBuf_rsc_6_0_i_da_d_core, vlineBuf_rsc_6_0_i_qa_d_mxwt,
      vlineBuf_rsc_6_0_i_biwt, vlineBuf_rsc_6_0_i_bdwt
);
  input clk;
  input arst_n;
  output [11:0] vlineBuf_rsc_6_0_i_adra_d;
  output [9:0] vlineBuf_rsc_6_0_i_da_d;
  input [19:0] vlineBuf_rsc_6_0_i_qa_d;
  input [23:0] vlineBuf_rsc_6_0_i_adra_d_core;
  input [19:0] vlineBuf_rsc_6_0_i_da_d_core;
  output [9:0] vlineBuf_rsc_6_0_i_qa_d_mxwt;
  input vlineBuf_rsc_6_0_i_biwt;
  input vlineBuf_rsc_6_0_i_bdwt;


  // Interconnect Declarations
  reg vlineBuf_rsc_6_0_i_bcwt;
  reg [9:0] vlineBuf_rsc_6_0_i_qa_d_bfwt_9_0;


  // Interconnect Declarations for Component Instantiations 
  assign vlineBuf_rsc_6_0_i_qa_d_mxwt = MUX_v_10_2_2((vlineBuf_rsc_6_0_i_qa_d[9:0]),
      vlineBuf_rsc_6_0_i_qa_d_bfwt_9_0, vlineBuf_rsc_6_0_i_bcwt);
  assign vlineBuf_rsc_6_0_i_adra_d = vlineBuf_rsc_6_0_i_adra_d_core[11:0];
  assign vlineBuf_rsc_6_0_i_da_d = vlineBuf_rsc_6_0_i_da_d_core[9:0];
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vlineBuf_rsc_6_0_i_bcwt <= 1'b0;
    end
    else begin
      vlineBuf_rsc_6_0_i_bcwt <= ~((~(vlineBuf_rsc_6_0_i_bcwt | vlineBuf_rsc_6_0_i_biwt))
          | vlineBuf_rsc_6_0_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vlineBuf_rsc_6_0_i_qa_d_bfwt_9_0 <= 10'b0000000000;
    end
    else if ( vlineBuf_rsc_6_0_i_biwt ) begin
      vlineBuf_rsc_6_0_i_qa_d_bfwt_9_0 <= vlineBuf_rsc_6_0_i_qa_d[9:0];
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_vlineBuf_rsc_6_0_i_1_vlineBuf_rsc_6_0_wait_ctrl
// ------------------------------------------------------------------


module yuv444dns_core_vlineBuf_rsc_6_0_i_1_vlineBuf_rsc_6_0_wait_ctrl (
  core_wen, core_wten, vlineBuf_rsc_6_0_i_oswt, vlineBuf_rsc_6_0_i_ena_d_core_psct,
      vlineBuf_rsc_6_0_i_wea_d_core_psct, vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct,
      vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct, vlineBuf_rsc_6_0_i_biwt,
      vlineBuf_rsc_6_0_i_bdwt, vlineBuf_rsc_6_0_i_ena_d_core_sct, vlineBuf_rsc_6_0_i_wea_d_core_sct,
      vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct, vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct,
      vlineBuf_rsc_6_0_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input vlineBuf_rsc_6_0_i_oswt;
  input [1:0] vlineBuf_rsc_6_0_i_ena_d_core_psct;
  input [1:0] vlineBuf_rsc_6_0_i_wea_d_core_psct;
  input [1:0] vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  output vlineBuf_rsc_6_0_i_biwt;
  output vlineBuf_rsc_6_0_i_bdwt;
  output [1:0] vlineBuf_rsc_6_0_i_ena_d_core_sct;
  output [1:0] vlineBuf_rsc_6_0_i_wea_d_core_sct;
  output [1:0] vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output [1:0] vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  input vlineBuf_rsc_6_0_i_oswt_pff;


  // Interconnect Declarations
  wire vlineBuf_rsc_6_0_i_dswt_pff;

  wire[0:0] window_read_and_272_nl;
  wire[0:0] window_read_and_273_nl;
  wire[0:0] window_read_and_274_nl;
  wire[0:0] window_read_and_275_nl;

  // Interconnect Declarations for Component Instantiations 
  assign vlineBuf_rsc_6_0_i_bdwt = vlineBuf_rsc_6_0_i_oswt & core_wen;
  assign vlineBuf_rsc_6_0_i_biwt = (~ core_wten) & vlineBuf_rsc_6_0_i_oswt;
  assign window_read_and_272_nl = (vlineBuf_rsc_6_0_i_ena_d_core_psct[0]) & vlineBuf_rsc_6_0_i_dswt_pff;
  assign vlineBuf_rsc_6_0_i_ena_d_core_sct = {1'b0 , window_read_and_272_nl};
  assign vlineBuf_rsc_6_0_i_dswt_pff = core_wen & vlineBuf_rsc_6_0_i_oswt_pff;
  assign window_read_and_273_nl = (vlineBuf_rsc_6_0_i_wea_d_core_psct[0]) & vlineBuf_rsc_6_0_i_dswt_pff;
  assign vlineBuf_rsc_6_0_i_wea_d_core_sct = {1'b0 , window_read_and_273_nl};
  assign window_read_and_274_nl = (vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])
      & vlineBuf_rsc_6_0_i_dswt_pff;
  assign vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct = {1'b0
      , window_read_and_274_nl};
  assign window_read_and_275_nl = (vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])
      & vlineBuf_rsc_6_0_i_dswt_pff;
  assign vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct = {1'b0
      , window_read_and_275_nl};
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_vlineBuf_rsc_5_0_i_1_vlineBuf_rsc_5_0_wait_dp
// ------------------------------------------------------------------


module yuv444dns_core_vlineBuf_rsc_5_0_i_1_vlineBuf_rsc_5_0_wait_dp (
  clk, arst_n, vlineBuf_rsc_5_0_i_adra_d, vlineBuf_rsc_5_0_i_da_d, vlineBuf_rsc_5_0_i_qa_d,
      vlineBuf_rsc_5_0_i_adra_d_core, vlineBuf_rsc_5_0_i_da_d_core, vlineBuf_rsc_5_0_i_qa_d_mxwt,
      vlineBuf_rsc_5_0_i_biwt, vlineBuf_rsc_5_0_i_bdwt
);
  input clk;
  input arst_n;
  output [11:0] vlineBuf_rsc_5_0_i_adra_d;
  output [9:0] vlineBuf_rsc_5_0_i_da_d;
  input [19:0] vlineBuf_rsc_5_0_i_qa_d;
  input [23:0] vlineBuf_rsc_5_0_i_adra_d_core;
  input [19:0] vlineBuf_rsc_5_0_i_da_d_core;
  output [9:0] vlineBuf_rsc_5_0_i_qa_d_mxwt;
  input vlineBuf_rsc_5_0_i_biwt;
  input vlineBuf_rsc_5_0_i_bdwt;


  // Interconnect Declarations
  reg vlineBuf_rsc_5_0_i_bcwt;
  reg [9:0] vlineBuf_rsc_5_0_i_qa_d_bfwt_9_0;


  // Interconnect Declarations for Component Instantiations 
  assign vlineBuf_rsc_5_0_i_qa_d_mxwt = MUX_v_10_2_2((vlineBuf_rsc_5_0_i_qa_d[9:0]),
      vlineBuf_rsc_5_0_i_qa_d_bfwt_9_0, vlineBuf_rsc_5_0_i_bcwt);
  assign vlineBuf_rsc_5_0_i_adra_d = vlineBuf_rsc_5_0_i_adra_d_core[11:0];
  assign vlineBuf_rsc_5_0_i_da_d = vlineBuf_rsc_5_0_i_da_d_core[9:0];
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vlineBuf_rsc_5_0_i_bcwt <= 1'b0;
    end
    else begin
      vlineBuf_rsc_5_0_i_bcwt <= ~((~(vlineBuf_rsc_5_0_i_bcwt | vlineBuf_rsc_5_0_i_biwt))
          | vlineBuf_rsc_5_0_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vlineBuf_rsc_5_0_i_qa_d_bfwt_9_0 <= 10'b0000000000;
    end
    else if ( vlineBuf_rsc_5_0_i_biwt ) begin
      vlineBuf_rsc_5_0_i_qa_d_bfwt_9_0 <= vlineBuf_rsc_5_0_i_qa_d[9:0];
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_vlineBuf_rsc_5_0_i_1_vlineBuf_rsc_5_0_wait_ctrl
// ------------------------------------------------------------------


module yuv444dns_core_vlineBuf_rsc_5_0_i_1_vlineBuf_rsc_5_0_wait_ctrl (
  core_wen, core_wten, vlineBuf_rsc_5_0_i_oswt, vlineBuf_rsc_5_0_i_ena_d_core_psct,
      vlineBuf_rsc_5_0_i_wea_d_core_psct, vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct,
      vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct, vlineBuf_rsc_5_0_i_biwt,
      vlineBuf_rsc_5_0_i_bdwt, vlineBuf_rsc_5_0_i_ena_d_core_sct, vlineBuf_rsc_5_0_i_wea_d_core_sct,
      vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct, vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct,
      vlineBuf_rsc_5_0_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input vlineBuf_rsc_5_0_i_oswt;
  input [1:0] vlineBuf_rsc_5_0_i_ena_d_core_psct;
  input [1:0] vlineBuf_rsc_5_0_i_wea_d_core_psct;
  input [1:0] vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  output vlineBuf_rsc_5_0_i_biwt;
  output vlineBuf_rsc_5_0_i_bdwt;
  output [1:0] vlineBuf_rsc_5_0_i_ena_d_core_sct;
  output [1:0] vlineBuf_rsc_5_0_i_wea_d_core_sct;
  output [1:0] vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output [1:0] vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  input vlineBuf_rsc_5_0_i_oswt_pff;


  // Interconnect Declarations
  wire vlineBuf_rsc_5_0_i_dswt_pff;

  wire[0:0] window_read_and_260_nl;
  wire[0:0] window_read_and_261_nl;
  wire[0:0] window_read_and_262_nl;
  wire[0:0] window_read_and_263_nl;

  // Interconnect Declarations for Component Instantiations 
  assign vlineBuf_rsc_5_0_i_bdwt = vlineBuf_rsc_5_0_i_oswt & core_wen;
  assign vlineBuf_rsc_5_0_i_biwt = (~ core_wten) & vlineBuf_rsc_5_0_i_oswt;
  assign window_read_and_260_nl = (vlineBuf_rsc_5_0_i_ena_d_core_psct[0]) & vlineBuf_rsc_5_0_i_dswt_pff;
  assign vlineBuf_rsc_5_0_i_ena_d_core_sct = {1'b0 , window_read_and_260_nl};
  assign vlineBuf_rsc_5_0_i_dswt_pff = core_wen & vlineBuf_rsc_5_0_i_oswt_pff;
  assign window_read_and_261_nl = (vlineBuf_rsc_5_0_i_wea_d_core_psct[0]) & vlineBuf_rsc_5_0_i_dswt_pff;
  assign vlineBuf_rsc_5_0_i_wea_d_core_sct = {1'b0 , window_read_and_261_nl};
  assign window_read_and_262_nl = (vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])
      & vlineBuf_rsc_5_0_i_dswt_pff;
  assign vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct = {1'b0
      , window_read_and_262_nl};
  assign window_read_and_263_nl = (vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])
      & vlineBuf_rsc_5_0_i_dswt_pff;
  assign vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct = {1'b0
      , window_read_and_263_nl};
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_vlineBuf_rsc_4_0_i_1_vlineBuf_rsc_4_0_wait_dp
// ------------------------------------------------------------------


module yuv444dns_core_vlineBuf_rsc_4_0_i_1_vlineBuf_rsc_4_0_wait_dp (
  clk, arst_n, vlineBuf_rsc_4_0_i_adra_d, vlineBuf_rsc_4_0_i_da_d, vlineBuf_rsc_4_0_i_qa_d,
      vlineBuf_rsc_4_0_i_adra_d_core, vlineBuf_rsc_4_0_i_da_d_core, vlineBuf_rsc_4_0_i_qa_d_mxwt,
      vlineBuf_rsc_4_0_i_biwt, vlineBuf_rsc_4_0_i_bdwt
);
  input clk;
  input arst_n;
  output [11:0] vlineBuf_rsc_4_0_i_adra_d;
  output [9:0] vlineBuf_rsc_4_0_i_da_d;
  input [19:0] vlineBuf_rsc_4_0_i_qa_d;
  input [23:0] vlineBuf_rsc_4_0_i_adra_d_core;
  input [19:0] vlineBuf_rsc_4_0_i_da_d_core;
  output [9:0] vlineBuf_rsc_4_0_i_qa_d_mxwt;
  input vlineBuf_rsc_4_0_i_biwt;
  input vlineBuf_rsc_4_0_i_bdwt;


  // Interconnect Declarations
  reg vlineBuf_rsc_4_0_i_bcwt;
  reg [9:0] vlineBuf_rsc_4_0_i_qa_d_bfwt_9_0;


  // Interconnect Declarations for Component Instantiations 
  assign vlineBuf_rsc_4_0_i_qa_d_mxwt = MUX_v_10_2_2((vlineBuf_rsc_4_0_i_qa_d[9:0]),
      vlineBuf_rsc_4_0_i_qa_d_bfwt_9_0, vlineBuf_rsc_4_0_i_bcwt);
  assign vlineBuf_rsc_4_0_i_adra_d = vlineBuf_rsc_4_0_i_adra_d_core[11:0];
  assign vlineBuf_rsc_4_0_i_da_d = vlineBuf_rsc_4_0_i_da_d_core[9:0];
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vlineBuf_rsc_4_0_i_bcwt <= 1'b0;
    end
    else begin
      vlineBuf_rsc_4_0_i_bcwt <= ~((~(vlineBuf_rsc_4_0_i_bcwt | vlineBuf_rsc_4_0_i_biwt))
          | vlineBuf_rsc_4_0_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vlineBuf_rsc_4_0_i_qa_d_bfwt_9_0 <= 10'b0000000000;
    end
    else if ( vlineBuf_rsc_4_0_i_biwt ) begin
      vlineBuf_rsc_4_0_i_qa_d_bfwt_9_0 <= vlineBuf_rsc_4_0_i_qa_d[9:0];
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_vlineBuf_rsc_4_0_i_1_vlineBuf_rsc_4_0_wait_ctrl
// ------------------------------------------------------------------


module yuv444dns_core_vlineBuf_rsc_4_0_i_1_vlineBuf_rsc_4_0_wait_ctrl (
  core_wen, core_wten, vlineBuf_rsc_4_0_i_oswt, vlineBuf_rsc_4_0_i_ena_d_core_psct,
      vlineBuf_rsc_4_0_i_wea_d_core_psct, vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct,
      vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct, vlineBuf_rsc_4_0_i_biwt,
      vlineBuf_rsc_4_0_i_bdwt, vlineBuf_rsc_4_0_i_ena_d_core_sct, vlineBuf_rsc_4_0_i_wea_d_core_sct,
      vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct, vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct,
      vlineBuf_rsc_4_0_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input vlineBuf_rsc_4_0_i_oswt;
  input [1:0] vlineBuf_rsc_4_0_i_ena_d_core_psct;
  input [1:0] vlineBuf_rsc_4_0_i_wea_d_core_psct;
  input [1:0] vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  output vlineBuf_rsc_4_0_i_biwt;
  output vlineBuf_rsc_4_0_i_bdwt;
  output [1:0] vlineBuf_rsc_4_0_i_ena_d_core_sct;
  output [1:0] vlineBuf_rsc_4_0_i_wea_d_core_sct;
  output [1:0] vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output [1:0] vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  input vlineBuf_rsc_4_0_i_oswt_pff;


  // Interconnect Declarations
  wire vlineBuf_rsc_4_0_i_dswt_pff;

  wire[0:0] window_read_and_248_nl;
  wire[0:0] window_read_and_249_nl;
  wire[0:0] window_read_and_250_nl;
  wire[0:0] window_read_and_251_nl;

  // Interconnect Declarations for Component Instantiations 
  assign vlineBuf_rsc_4_0_i_bdwt = vlineBuf_rsc_4_0_i_oswt & core_wen;
  assign vlineBuf_rsc_4_0_i_biwt = (~ core_wten) & vlineBuf_rsc_4_0_i_oswt;
  assign window_read_and_248_nl = (vlineBuf_rsc_4_0_i_ena_d_core_psct[0]) & vlineBuf_rsc_4_0_i_dswt_pff;
  assign vlineBuf_rsc_4_0_i_ena_d_core_sct = {1'b0 , window_read_and_248_nl};
  assign vlineBuf_rsc_4_0_i_dswt_pff = core_wen & vlineBuf_rsc_4_0_i_oswt_pff;
  assign window_read_and_249_nl = (vlineBuf_rsc_4_0_i_wea_d_core_psct[0]) & vlineBuf_rsc_4_0_i_dswt_pff;
  assign vlineBuf_rsc_4_0_i_wea_d_core_sct = {1'b0 , window_read_and_249_nl};
  assign window_read_and_250_nl = (vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])
      & vlineBuf_rsc_4_0_i_dswt_pff;
  assign vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct = {1'b0
      , window_read_and_250_nl};
  assign window_read_and_251_nl = (vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])
      & vlineBuf_rsc_4_0_i_dswt_pff;
  assign vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct = {1'b0
      , window_read_and_251_nl};
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_vlineBuf_rsc_3_0_i_1_vlineBuf_rsc_3_0_wait_dp
// ------------------------------------------------------------------


module yuv444dns_core_vlineBuf_rsc_3_0_i_1_vlineBuf_rsc_3_0_wait_dp (
  clk, arst_n, vlineBuf_rsc_3_0_i_adra_d, vlineBuf_rsc_3_0_i_da_d, vlineBuf_rsc_3_0_i_qa_d,
      vlineBuf_rsc_3_0_i_adra_d_core, vlineBuf_rsc_3_0_i_da_d_core, vlineBuf_rsc_3_0_i_qa_d_mxwt,
      vlineBuf_rsc_3_0_i_biwt, vlineBuf_rsc_3_0_i_bdwt
);
  input clk;
  input arst_n;
  output [11:0] vlineBuf_rsc_3_0_i_adra_d;
  output [9:0] vlineBuf_rsc_3_0_i_da_d;
  input [19:0] vlineBuf_rsc_3_0_i_qa_d;
  input [23:0] vlineBuf_rsc_3_0_i_adra_d_core;
  input [19:0] vlineBuf_rsc_3_0_i_da_d_core;
  output [9:0] vlineBuf_rsc_3_0_i_qa_d_mxwt;
  input vlineBuf_rsc_3_0_i_biwt;
  input vlineBuf_rsc_3_0_i_bdwt;


  // Interconnect Declarations
  reg vlineBuf_rsc_3_0_i_bcwt;
  reg [9:0] vlineBuf_rsc_3_0_i_qa_d_bfwt_9_0;


  // Interconnect Declarations for Component Instantiations 
  assign vlineBuf_rsc_3_0_i_qa_d_mxwt = MUX_v_10_2_2((vlineBuf_rsc_3_0_i_qa_d[9:0]),
      vlineBuf_rsc_3_0_i_qa_d_bfwt_9_0, vlineBuf_rsc_3_0_i_bcwt);
  assign vlineBuf_rsc_3_0_i_adra_d = vlineBuf_rsc_3_0_i_adra_d_core[11:0];
  assign vlineBuf_rsc_3_0_i_da_d = vlineBuf_rsc_3_0_i_da_d_core[9:0];
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vlineBuf_rsc_3_0_i_bcwt <= 1'b0;
    end
    else begin
      vlineBuf_rsc_3_0_i_bcwt <= ~((~(vlineBuf_rsc_3_0_i_bcwt | vlineBuf_rsc_3_0_i_biwt))
          | vlineBuf_rsc_3_0_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vlineBuf_rsc_3_0_i_qa_d_bfwt_9_0 <= 10'b0000000000;
    end
    else if ( vlineBuf_rsc_3_0_i_biwt ) begin
      vlineBuf_rsc_3_0_i_qa_d_bfwt_9_0 <= vlineBuf_rsc_3_0_i_qa_d[9:0];
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_vlineBuf_rsc_3_0_i_1_vlineBuf_rsc_3_0_wait_ctrl
// ------------------------------------------------------------------


module yuv444dns_core_vlineBuf_rsc_3_0_i_1_vlineBuf_rsc_3_0_wait_ctrl (
  core_wen, core_wten, vlineBuf_rsc_3_0_i_oswt, vlineBuf_rsc_3_0_i_ena_d_core_psct,
      vlineBuf_rsc_3_0_i_wea_d_core_psct, vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct,
      vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct, vlineBuf_rsc_3_0_i_biwt,
      vlineBuf_rsc_3_0_i_bdwt, vlineBuf_rsc_3_0_i_ena_d_core_sct, vlineBuf_rsc_3_0_i_wea_d_core_sct,
      vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct, vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct,
      vlineBuf_rsc_3_0_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input vlineBuf_rsc_3_0_i_oswt;
  input [1:0] vlineBuf_rsc_3_0_i_ena_d_core_psct;
  input [1:0] vlineBuf_rsc_3_0_i_wea_d_core_psct;
  input [1:0] vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  output vlineBuf_rsc_3_0_i_biwt;
  output vlineBuf_rsc_3_0_i_bdwt;
  output [1:0] vlineBuf_rsc_3_0_i_ena_d_core_sct;
  output [1:0] vlineBuf_rsc_3_0_i_wea_d_core_sct;
  output [1:0] vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output [1:0] vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  input vlineBuf_rsc_3_0_i_oswt_pff;


  // Interconnect Declarations
  wire vlineBuf_rsc_3_0_i_dswt_pff;

  wire[0:0] window_read_and_236_nl;
  wire[0:0] window_read_and_237_nl;
  wire[0:0] window_read_and_238_nl;
  wire[0:0] window_read_and_239_nl;

  // Interconnect Declarations for Component Instantiations 
  assign vlineBuf_rsc_3_0_i_bdwt = vlineBuf_rsc_3_0_i_oswt & core_wen;
  assign vlineBuf_rsc_3_0_i_biwt = (~ core_wten) & vlineBuf_rsc_3_0_i_oswt;
  assign window_read_and_236_nl = (vlineBuf_rsc_3_0_i_ena_d_core_psct[0]) & vlineBuf_rsc_3_0_i_dswt_pff;
  assign vlineBuf_rsc_3_0_i_ena_d_core_sct = {1'b0 , window_read_and_236_nl};
  assign vlineBuf_rsc_3_0_i_dswt_pff = core_wen & vlineBuf_rsc_3_0_i_oswt_pff;
  assign window_read_and_237_nl = (vlineBuf_rsc_3_0_i_wea_d_core_psct[0]) & vlineBuf_rsc_3_0_i_dswt_pff;
  assign vlineBuf_rsc_3_0_i_wea_d_core_sct = {1'b0 , window_read_and_237_nl};
  assign window_read_and_238_nl = (vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])
      & vlineBuf_rsc_3_0_i_dswt_pff;
  assign vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct = {1'b0
      , window_read_and_238_nl};
  assign window_read_and_239_nl = (vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])
      & vlineBuf_rsc_3_0_i_dswt_pff;
  assign vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct = {1'b0
      , window_read_and_239_nl};
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_vlineBuf_rsc_2_0_i_1_vlineBuf_rsc_2_0_wait_dp
// ------------------------------------------------------------------


module yuv444dns_core_vlineBuf_rsc_2_0_i_1_vlineBuf_rsc_2_0_wait_dp (
  clk, arst_n, vlineBuf_rsc_2_0_i_adra_d, vlineBuf_rsc_2_0_i_da_d, vlineBuf_rsc_2_0_i_qa_d,
      vlineBuf_rsc_2_0_i_adra_d_core, vlineBuf_rsc_2_0_i_da_d_core, vlineBuf_rsc_2_0_i_qa_d_mxwt,
      vlineBuf_rsc_2_0_i_biwt, vlineBuf_rsc_2_0_i_bdwt
);
  input clk;
  input arst_n;
  output [11:0] vlineBuf_rsc_2_0_i_adra_d;
  output [9:0] vlineBuf_rsc_2_0_i_da_d;
  input [19:0] vlineBuf_rsc_2_0_i_qa_d;
  input [23:0] vlineBuf_rsc_2_0_i_adra_d_core;
  input [19:0] vlineBuf_rsc_2_0_i_da_d_core;
  output [9:0] vlineBuf_rsc_2_0_i_qa_d_mxwt;
  input vlineBuf_rsc_2_0_i_biwt;
  input vlineBuf_rsc_2_0_i_bdwt;


  // Interconnect Declarations
  reg vlineBuf_rsc_2_0_i_bcwt;
  reg [9:0] vlineBuf_rsc_2_0_i_qa_d_bfwt_9_0;


  // Interconnect Declarations for Component Instantiations 
  assign vlineBuf_rsc_2_0_i_qa_d_mxwt = MUX_v_10_2_2((vlineBuf_rsc_2_0_i_qa_d[9:0]),
      vlineBuf_rsc_2_0_i_qa_d_bfwt_9_0, vlineBuf_rsc_2_0_i_bcwt);
  assign vlineBuf_rsc_2_0_i_adra_d = vlineBuf_rsc_2_0_i_adra_d_core[11:0];
  assign vlineBuf_rsc_2_0_i_da_d = vlineBuf_rsc_2_0_i_da_d_core[9:0];
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vlineBuf_rsc_2_0_i_bcwt <= 1'b0;
    end
    else begin
      vlineBuf_rsc_2_0_i_bcwt <= ~((~(vlineBuf_rsc_2_0_i_bcwt | vlineBuf_rsc_2_0_i_biwt))
          | vlineBuf_rsc_2_0_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vlineBuf_rsc_2_0_i_qa_d_bfwt_9_0 <= 10'b0000000000;
    end
    else if ( vlineBuf_rsc_2_0_i_biwt ) begin
      vlineBuf_rsc_2_0_i_qa_d_bfwt_9_0 <= vlineBuf_rsc_2_0_i_qa_d[9:0];
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_vlineBuf_rsc_2_0_i_1_vlineBuf_rsc_2_0_wait_ctrl
// ------------------------------------------------------------------


module yuv444dns_core_vlineBuf_rsc_2_0_i_1_vlineBuf_rsc_2_0_wait_ctrl (
  core_wen, core_wten, vlineBuf_rsc_2_0_i_oswt, vlineBuf_rsc_2_0_i_ena_d_core_psct,
      vlineBuf_rsc_2_0_i_wea_d_core_psct, vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct,
      vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct, vlineBuf_rsc_2_0_i_biwt,
      vlineBuf_rsc_2_0_i_bdwt, vlineBuf_rsc_2_0_i_ena_d_core_sct, vlineBuf_rsc_2_0_i_wea_d_core_sct,
      vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct, vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct,
      vlineBuf_rsc_2_0_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input vlineBuf_rsc_2_0_i_oswt;
  input [1:0] vlineBuf_rsc_2_0_i_ena_d_core_psct;
  input [1:0] vlineBuf_rsc_2_0_i_wea_d_core_psct;
  input [1:0] vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  output vlineBuf_rsc_2_0_i_biwt;
  output vlineBuf_rsc_2_0_i_bdwt;
  output [1:0] vlineBuf_rsc_2_0_i_ena_d_core_sct;
  output [1:0] vlineBuf_rsc_2_0_i_wea_d_core_sct;
  output [1:0] vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output [1:0] vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  input vlineBuf_rsc_2_0_i_oswt_pff;


  // Interconnect Declarations
  wire vlineBuf_rsc_2_0_i_dswt_pff;

  wire[0:0] window_read_and_224_nl;
  wire[0:0] window_read_and_225_nl;
  wire[0:0] window_read_and_226_nl;
  wire[0:0] window_read_and_227_nl;

  // Interconnect Declarations for Component Instantiations 
  assign vlineBuf_rsc_2_0_i_bdwt = vlineBuf_rsc_2_0_i_oswt & core_wen;
  assign vlineBuf_rsc_2_0_i_biwt = (~ core_wten) & vlineBuf_rsc_2_0_i_oswt;
  assign window_read_and_224_nl = (vlineBuf_rsc_2_0_i_ena_d_core_psct[0]) & vlineBuf_rsc_2_0_i_dswt_pff;
  assign vlineBuf_rsc_2_0_i_ena_d_core_sct = {1'b0 , window_read_and_224_nl};
  assign vlineBuf_rsc_2_0_i_dswt_pff = core_wen & vlineBuf_rsc_2_0_i_oswt_pff;
  assign window_read_and_225_nl = (vlineBuf_rsc_2_0_i_wea_d_core_psct[0]) & vlineBuf_rsc_2_0_i_dswt_pff;
  assign vlineBuf_rsc_2_0_i_wea_d_core_sct = {1'b0 , window_read_and_225_nl};
  assign window_read_and_226_nl = (vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])
      & vlineBuf_rsc_2_0_i_dswt_pff;
  assign vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct = {1'b0
      , window_read_and_226_nl};
  assign window_read_and_227_nl = (vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])
      & vlineBuf_rsc_2_0_i_dswt_pff;
  assign vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct = {1'b0
      , window_read_and_227_nl};
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_vlineBuf_rsc_1_0_i_1_vlineBuf_rsc_1_0_wait_dp
// ------------------------------------------------------------------


module yuv444dns_core_vlineBuf_rsc_1_0_i_1_vlineBuf_rsc_1_0_wait_dp (
  clk, arst_n, vlineBuf_rsc_1_0_i_adra_d, vlineBuf_rsc_1_0_i_da_d, vlineBuf_rsc_1_0_i_qa_d,
      vlineBuf_rsc_1_0_i_adra_d_core, vlineBuf_rsc_1_0_i_da_d_core, vlineBuf_rsc_1_0_i_qa_d_mxwt,
      vlineBuf_rsc_1_0_i_biwt, vlineBuf_rsc_1_0_i_bdwt
);
  input clk;
  input arst_n;
  output [11:0] vlineBuf_rsc_1_0_i_adra_d;
  output [9:0] vlineBuf_rsc_1_0_i_da_d;
  input [19:0] vlineBuf_rsc_1_0_i_qa_d;
  input [23:0] vlineBuf_rsc_1_0_i_adra_d_core;
  input [19:0] vlineBuf_rsc_1_0_i_da_d_core;
  output [9:0] vlineBuf_rsc_1_0_i_qa_d_mxwt;
  input vlineBuf_rsc_1_0_i_biwt;
  input vlineBuf_rsc_1_0_i_bdwt;


  // Interconnect Declarations
  reg vlineBuf_rsc_1_0_i_bcwt;
  reg [9:0] vlineBuf_rsc_1_0_i_qa_d_bfwt_9_0;


  // Interconnect Declarations for Component Instantiations 
  assign vlineBuf_rsc_1_0_i_qa_d_mxwt = MUX_v_10_2_2((vlineBuf_rsc_1_0_i_qa_d[9:0]),
      vlineBuf_rsc_1_0_i_qa_d_bfwt_9_0, vlineBuf_rsc_1_0_i_bcwt);
  assign vlineBuf_rsc_1_0_i_adra_d = vlineBuf_rsc_1_0_i_adra_d_core[11:0];
  assign vlineBuf_rsc_1_0_i_da_d = vlineBuf_rsc_1_0_i_da_d_core[9:0];
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vlineBuf_rsc_1_0_i_bcwt <= 1'b0;
    end
    else begin
      vlineBuf_rsc_1_0_i_bcwt <= ~((~(vlineBuf_rsc_1_0_i_bcwt | vlineBuf_rsc_1_0_i_biwt))
          | vlineBuf_rsc_1_0_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vlineBuf_rsc_1_0_i_qa_d_bfwt_9_0 <= 10'b0000000000;
    end
    else if ( vlineBuf_rsc_1_0_i_biwt ) begin
      vlineBuf_rsc_1_0_i_qa_d_bfwt_9_0 <= vlineBuf_rsc_1_0_i_qa_d[9:0];
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_vlineBuf_rsc_1_0_i_1_vlineBuf_rsc_1_0_wait_ctrl
// ------------------------------------------------------------------


module yuv444dns_core_vlineBuf_rsc_1_0_i_1_vlineBuf_rsc_1_0_wait_ctrl (
  core_wen, core_wten, vlineBuf_rsc_1_0_i_oswt, vlineBuf_rsc_1_0_i_ena_d_core_psct,
      vlineBuf_rsc_1_0_i_wea_d_core_psct, vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct,
      vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct, vlineBuf_rsc_1_0_i_biwt,
      vlineBuf_rsc_1_0_i_bdwt, vlineBuf_rsc_1_0_i_ena_d_core_sct, vlineBuf_rsc_1_0_i_wea_d_core_sct,
      vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct, vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct,
      vlineBuf_rsc_1_0_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input vlineBuf_rsc_1_0_i_oswt;
  input [1:0] vlineBuf_rsc_1_0_i_ena_d_core_psct;
  input [1:0] vlineBuf_rsc_1_0_i_wea_d_core_psct;
  input [1:0] vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  output vlineBuf_rsc_1_0_i_biwt;
  output vlineBuf_rsc_1_0_i_bdwt;
  output [1:0] vlineBuf_rsc_1_0_i_ena_d_core_sct;
  output [1:0] vlineBuf_rsc_1_0_i_wea_d_core_sct;
  output [1:0] vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output [1:0] vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  input vlineBuf_rsc_1_0_i_oswt_pff;


  // Interconnect Declarations
  wire vlineBuf_rsc_1_0_i_dswt_pff;

  wire[0:0] window_read_and_212_nl;
  wire[0:0] window_read_and_213_nl;
  wire[0:0] window_read_and_214_nl;
  wire[0:0] window_read_and_215_nl;

  // Interconnect Declarations for Component Instantiations 
  assign vlineBuf_rsc_1_0_i_bdwt = vlineBuf_rsc_1_0_i_oswt & core_wen;
  assign vlineBuf_rsc_1_0_i_biwt = (~ core_wten) & vlineBuf_rsc_1_0_i_oswt;
  assign window_read_and_212_nl = (vlineBuf_rsc_1_0_i_ena_d_core_psct[0]) & vlineBuf_rsc_1_0_i_dswt_pff;
  assign vlineBuf_rsc_1_0_i_ena_d_core_sct = {1'b0 , window_read_and_212_nl};
  assign vlineBuf_rsc_1_0_i_dswt_pff = core_wen & vlineBuf_rsc_1_0_i_oswt_pff;
  assign window_read_and_213_nl = (vlineBuf_rsc_1_0_i_wea_d_core_psct[0]) & vlineBuf_rsc_1_0_i_dswt_pff;
  assign vlineBuf_rsc_1_0_i_wea_d_core_sct = {1'b0 , window_read_and_213_nl};
  assign window_read_and_214_nl = (vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])
      & vlineBuf_rsc_1_0_i_dswt_pff;
  assign vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct = {1'b0
      , window_read_and_214_nl};
  assign window_read_and_215_nl = (vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])
      & vlineBuf_rsc_1_0_i_dswt_pff;
  assign vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct = {1'b0
      , window_read_and_215_nl};
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_vlineBuf_rsc_0_0_i_1_vlineBuf_rsc_0_0_wait_dp
// ------------------------------------------------------------------


module yuv444dns_core_vlineBuf_rsc_0_0_i_1_vlineBuf_rsc_0_0_wait_dp (
  clk, arst_n, vlineBuf_rsc_0_0_i_adra_d, vlineBuf_rsc_0_0_i_da_d, vlineBuf_rsc_0_0_i_qa_d,
      vlineBuf_rsc_0_0_i_adra_d_core, vlineBuf_rsc_0_0_i_da_d_core, vlineBuf_rsc_0_0_i_qa_d_mxwt,
      vlineBuf_rsc_0_0_i_biwt, vlineBuf_rsc_0_0_i_bdwt
);
  input clk;
  input arst_n;
  output [11:0] vlineBuf_rsc_0_0_i_adra_d;
  output [9:0] vlineBuf_rsc_0_0_i_da_d;
  input [19:0] vlineBuf_rsc_0_0_i_qa_d;
  input [23:0] vlineBuf_rsc_0_0_i_adra_d_core;
  input [19:0] vlineBuf_rsc_0_0_i_da_d_core;
  output [9:0] vlineBuf_rsc_0_0_i_qa_d_mxwt;
  input vlineBuf_rsc_0_0_i_biwt;
  input vlineBuf_rsc_0_0_i_bdwt;


  // Interconnect Declarations
  reg vlineBuf_rsc_0_0_i_bcwt;
  reg [9:0] vlineBuf_rsc_0_0_i_qa_d_bfwt_9_0;


  // Interconnect Declarations for Component Instantiations 
  assign vlineBuf_rsc_0_0_i_qa_d_mxwt = MUX_v_10_2_2((vlineBuf_rsc_0_0_i_qa_d[9:0]),
      vlineBuf_rsc_0_0_i_qa_d_bfwt_9_0, vlineBuf_rsc_0_0_i_bcwt);
  assign vlineBuf_rsc_0_0_i_adra_d = vlineBuf_rsc_0_0_i_adra_d_core[11:0];
  assign vlineBuf_rsc_0_0_i_da_d = vlineBuf_rsc_0_0_i_da_d_core[9:0];
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vlineBuf_rsc_0_0_i_bcwt <= 1'b0;
    end
    else begin
      vlineBuf_rsc_0_0_i_bcwt <= ~((~(vlineBuf_rsc_0_0_i_bcwt | vlineBuf_rsc_0_0_i_biwt))
          | vlineBuf_rsc_0_0_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vlineBuf_rsc_0_0_i_qa_d_bfwt_9_0 <= 10'b0000000000;
    end
    else if ( vlineBuf_rsc_0_0_i_biwt ) begin
      vlineBuf_rsc_0_0_i_qa_d_bfwt_9_0 <= vlineBuf_rsc_0_0_i_qa_d[9:0];
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_vlineBuf_rsc_0_0_i_1_vlineBuf_rsc_0_0_wait_ctrl
// ------------------------------------------------------------------


module yuv444dns_core_vlineBuf_rsc_0_0_i_1_vlineBuf_rsc_0_0_wait_ctrl (
  core_wen, core_wten, vlineBuf_rsc_0_0_i_oswt, vlineBuf_rsc_0_0_i_ena_d_core_psct,
      vlineBuf_rsc_0_0_i_wea_d_core_psct, vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct,
      vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct, vlineBuf_rsc_0_0_i_biwt,
      vlineBuf_rsc_0_0_i_bdwt, vlineBuf_rsc_0_0_i_ena_d_core_sct, vlineBuf_rsc_0_0_i_wea_d_core_sct,
      vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct, vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct,
      vlineBuf_rsc_0_0_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input vlineBuf_rsc_0_0_i_oswt;
  input [1:0] vlineBuf_rsc_0_0_i_ena_d_core_psct;
  input [1:0] vlineBuf_rsc_0_0_i_wea_d_core_psct;
  input [1:0] vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  output vlineBuf_rsc_0_0_i_biwt;
  output vlineBuf_rsc_0_0_i_bdwt;
  output [1:0] vlineBuf_rsc_0_0_i_ena_d_core_sct;
  output [1:0] vlineBuf_rsc_0_0_i_wea_d_core_sct;
  output [1:0] vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output [1:0] vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  input vlineBuf_rsc_0_0_i_oswt_pff;


  // Interconnect Declarations
  wire vlineBuf_rsc_0_0_i_dswt_pff;

  wire[0:0] window_read_and_200_nl;
  wire[0:0] window_read_and_201_nl;
  wire[0:0] window_read_and_202_nl;
  wire[0:0] window_read_and_203_nl;

  // Interconnect Declarations for Component Instantiations 
  assign vlineBuf_rsc_0_0_i_bdwt = vlineBuf_rsc_0_0_i_oswt & core_wen;
  assign vlineBuf_rsc_0_0_i_biwt = (~ core_wten) & vlineBuf_rsc_0_0_i_oswt;
  assign window_read_and_200_nl = (vlineBuf_rsc_0_0_i_ena_d_core_psct[0]) & vlineBuf_rsc_0_0_i_dswt_pff;
  assign vlineBuf_rsc_0_0_i_ena_d_core_sct = {1'b0 , window_read_and_200_nl};
  assign vlineBuf_rsc_0_0_i_dswt_pff = core_wen & vlineBuf_rsc_0_0_i_oswt_pff;
  assign window_read_and_201_nl = (vlineBuf_rsc_0_0_i_wea_d_core_psct[0]) & vlineBuf_rsc_0_0_i_dswt_pff;
  assign vlineBuf_rsc_0_0_i_wea_d_core_sct = {1'b0 , window_read_and_201_nl};
  assign window_read_and_202_nl = (vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])
      & vlineBuf_rsc_0_0_i_dswt_pff;
  assign vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct = {1'b0
      , window_read_and_202_nl};
  assign window_read_and_203_nl = (vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])
      & vlineBuf_rsc_0_0_i_dswt_pff;
  assign vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct = {1'b0
      , window_read_and_203_nl};
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ulineBuf_rsc_7_0_i_1_ulineBuf_rsc_7_0_wait_dp
// ------------------------------------------------------------------


module yuv444dns_core_ulineBuf_rsc_7_0_i_1_ulineBuf_rsc_7_0_wait_dp (
  clk, arst_n, ulineBuf_rsc_7_0_i_adra_d, ulineBuf_rsc_7_0_i_da_d, ulineBuf_rsc_7_0_i_qa_d,
      ulineBuf_rsc_7_0_i_adra_d_core, ulineBuf_rsc_7_0_i_da_d_core, ulineBuf_rsc_7_0_i_qa_d_mxwt,
      ulineBuf_rsc_7_0_i_biwt, ulineBuf_rsc_7_0_i_bdwt
);
  input clk;
  input arst_n;
  output [11:0] ulineBuf_rsc_7_0_i_adra_d;
  output [9:0] ulineBuf_rsc_7_0_i_da_d;
  input [19:0] ulineBuf_rsc_7_0_i_qa_d;
  input [23:0] ulineBuf_rsc_7_0_i_adra_d_core;
  input [19:0] ulineBuf_rsc_7_0_i_da_d_core;
  output [9:0] ulineBuf_rsc_7_0_i_qa_d_mxwt;
  input ulineBuf_rsc_7_0_i_biwt;
  input ulineBuf_rsc_7_0_i_bdwt;


  // Interconnect Declarations
  reg ulineBuf_rsc_7_0_i_bcwt;
  reg [9:0] ulineBuf_rsc_7_0_i_qa_d_bfwt_9_0;


  // Interconnect Declarations for Component Instantiations 
  assign ulineBuf_rsc_7_0_i_qa_d_mxwt = MUX_v_10_2_2((ulineBuf_rsc_7_0_i_qa_d[9:0]),
      ulineBuf_rsc_7_0_i_qa_d_bfwt_9_0, ulineBuf_rsc_7_0_i_bcwt);
  assign ulineBuf_rsc_7_0_i_adra_d = ulineBuf_rsc_7_0_i_adra_d_core[11:0];
  assign ulineBuf_rsc_7_0_i_da_d = ulineBuf_rsc_7_0_i_da_d_core[9:0];
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ulineBuf_rsc_7_0_i_bcwt <= 1'b0;
    end
    else begin
      ulineBuf_rsc_7_0_i_bcwt <= ~((~(ulineBuf_rsc_7_0_i_bcwt | ulineBuf_rsc_7_0_i_biwt))
          | ulineBuf_rsc_7_0_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ulineBuf_rsc_7_0_i_qa_d_bfwt_9_0 <= 10'b0000000000;
    end
    else if ( ulineBuf_rsc_7_0_i_biwt ) begin
      ulineBuf_rsc_7_0_i_qa_d_bfwt_9_0 <= ulineBuf_rsc_7_0_i_qa_d[9:0];
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ulineBuf_rsc_7_0_i_1_ulineBuf_rsc_7_0_wait_ctrl
// ------------------------------------------------------------------


module yuv444dns_core_ulineBuf_rsc_7_0_i_1_ulineBuf_rsc_7_0_wait_ctrl (
  core_wen, core_wten, ulineBuf_rsc_7_0_i_oswt, ulineBuf_rsc_7_0_i_ena_d_core_psct,
      ulineBuf_rsc_7_0_i_wea_d_core_psct, ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct,
      ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct, ulineBuf_rsc_7_0_i_biwt,
      ulineBuf_rsc_7_0_i_bdwt, ulineBuf_rsc_7_0_i_ena_d_core_sct, ulineBuf_rsc_7_0_i_wea_d_core_sct,
      ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct, ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct,
      ulineBuf_rsc_7_0_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input ulineBuf_rsc_7_0_i_oswt;
  input [1:0] ulineBuf_rsc_7_0_i_ena_d_core_psct;
  input [1:0] ulineBuf_rsc_7_0_i_wea_d_core_psct;
  input [1:0] ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  output ulineBuf_rsc_7_0_i_biwt;
  output ulineBuf_rsc_7_0_i_bdwt;
  output [1:0] ulineBuf_rsc_7_0_i_ena_d_core_sct;
  output [1:0] ulineBuf_rsc_7_0_i_wea_d_core_sct;
  output [1:0] ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output [1:0] ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  input ulineBuf_rsc_7_0_i_oswt_pff;


  // Interconnect Declarations
  wire ulineBuf_rsc_7_0_i_dswt_pff;

  wire[0:0] window_read_and_188_nl;
  wire[0:0] window_read_and_189_nl;
  wire[0:0] window_read_and_190_nl;
  wire[0:0] window_read_and_191_nl;

  // Interconnect Declarations for Component Instantiations 
  assign ulineBuf_rsc_7_0_i_bdwt = ulineBuf_rsc_7_0_i_oswt & core_wen;
  assign ulineBuf_rsc_7_0_i_biwt = (~ core_wten) & ulineBuf_rsc_7_0_i_oswt;
  assign window_read_and_188_nl = (ulineBuf_rsc_7_0_i_ena_d_core_psct[0]) & ulineBuf_rsc_7_0_i_dswt_pff;
  assign ulineBuf_rsc_7_0_i_ena_d_core_sct = {1'b0 , window_read_and_188_nl};
  assign ulineBuf_rsc_7_0_i_dswt_pff = core_wen & ulineBuf_rsc_7_0_i_oswt_pff;
  assign window_read_and_189_nl = (ulineBuf_rsc_7_0_i_wea_d_core_psct[0]) & ulineBuf_rsc_7_0_i_dswt_pff;
  assign ulineBuf_rsc_7_0_i_wea_d_core_sct = {1'b0 , window_read_and_189_nl};
  assign window_read_and_190_nl = (ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])
      & ulineBuf_rsc_7_0_i_dswt_pff;
  assign ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct = {1'b0
      , window_read_and_190_nl};
  assign window_read_and_191_nl = (ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])
      & ulineBuf_rsc_7_0_i_dswt_pff;
  assign ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct = {1'b0
      , window_read_and_191_nl};
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ulineBuf_rsc_6_0_i_1_ulineBuf_rsc_6_0_wait_dp
// ------------------------------------------------------------------


module yuv444dns_core_ulineBuf_rsc_6_0_i_1_ulineBuf_rsc_6_0_wait_dp (
  clk, arst_n, ulineBuf_rsc_6_0_i_adra_d, ulineBuf_rsc_6_0_i_da_d, ulineBuf_rsc_6_0_i_qa_d,
      ulineBuf_rsc_6_0_i_adra_d_core, ulineBuf_rsc_6_0_i_da_d_core, ulineBuf_rsc_6_0_i_qa_d_mxwt,
      ulineBuf_rsc_6_0_i_biwt, ulineBuf_rsc_6_0_i_bdwt
);
  input clk;
  input arst_n;
  output [11:0] ulineBuf_rsc_6_0_i_adra_d;
  output [9:0] ulineBuf_rsc_6_0_i_da_d;
  input [19:0] ulineBuf_rsc_6_0_i_qa_d;
  input [23:0] ulineBuf_rsc_6_0_i_adra_d_core;
  input [19:0] ulineBuf_rsc_6_0_i_da_d_core;
  output [9:0] ulineBuf_rsc_6_0_i_qa_d_mxwt;
  input ulineBuf_rsc_6_0_i_biwt;
  input ulineBuf_rsc_6_0_i_bdwt;


  // Interconnect Declarations
  reg ulineBuf_rsc_6_0_i_bcwt;
  reg [9:0] ulineBuf_rsc_6_0_i_qa_d_bfwt_9_0;


  // Interconnect Declarations for Component Instantiations 
  assign ulineBuf_rsc_6_0_i_qa_d_mxwt = MUX_v_10_2_2((ulineBuf_rsc_6_0_i_qa_d[9:0]),
      ulineBuf_rsc_6_0_i_qa_d_bfwt_9_0, ulineBuf_rsc_6_0_i_bcwt);
  assign ulineBuf_rsc_6_0_i_adra_d = ulineBuf_rsc_6_0_i_adra_d_core[11:0];
  assign ulineBuf_rsc_6_0_i_da_d = ulineBuf_rsc_6_0_i_da_d_core[9:0];
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ulineBuf_rsc_6_0_i_bcwt <= 1'b0;
    end
    else begin
      ulineBuf_rsc_6_0_i_bcwt <= ~((~(ulineBuf_rsc_6_0_i_bcwt | ulineBuf_rsc_6_0_i_biwt))
          | ulineBuf_rsc_6_0_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ulineBuf_rsc_6_0_i_qa_d_bfwt_9_0 <= 10'b0000000000;
    end
    else if ( ulineBuf_rsc_6_0_i_biwt ) begin
      ulineBuf_rsc_6_0_i_qa_d_bfwt_9_0 <= ulineBuf_rsc_6_0_i_qa_d[9:0];
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ulineBuf_rsc_6_0_i_1_ulineBuf_rsc_6_0_wait_ctrl
// ------------------------------------------------------------------


module yuv444dns_core_ulineBuf_rsc_6_0_i_1_ulineBuf_rsc_6_0_wait_ctrl (
  core_wen, core_wten, ulineBuf_rsc_6_0_i_oswt, ulineBuf_rsc_6_0_i_ena_d_core_psct,
      ulineBuf_rsc_6_0_i_wea_d_core_psct, ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct,
      ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct, ulineBuf_rsc_6_0_i_biwt,
      ulineBuf_rsc_6_0_i_bdwt, ulineBuf_rsc_6_0_i_ena_d_core_sct, ulineBuf_rsc_6_0_i_wea_d_core_sct,
      ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct, ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct,
      ulineBuf_rsc_6_0_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input ulineBuf_rsc_6_0_i_oswt;
  input [1:0] ulineBuf_rsc_6_0_i_ena_d_core_psct;
  input [1:0] ulineBuf_rsc_6_0_i_wea_d_core_psct;
  input [1:0] ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  output ulineBuf_rsc_6_0_i_biwt;
  output ulineBuf_rsc_6_0_i_bdwt;
  output [1:0] ulineBuf_rsc_6_0_i_ena_d_core_sct;
  output [1:0] ulineBuf_rsc_6_0_i_wea_d_core_sct;
  output [1:0] ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output [1:0] ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  input ulineBuf_rsc_6_0_i_oswt_pff;


  // Interconnect Declarations
  wire ulineBuf_rsc_6_0_i_dswt_pff;

  wire[0:0] window_read_and_176_nl;
  wire[0:0] window_read_and_177_nl;
  wire[0:0] window_read_and_178_nl;
  wire[0:0] window_read_and_179_nl;

  // Interconnect Declarations for Component Instantiations 
  assign ulineBuf_rsc_6_0_i_bdwt = ulineBuf_rsc_6_0_i_oswt & core_wen;
  assign ulineBuf_rsc_6_0_i_biwt = (~ core_wten) & ulineBuf_rsc_6_0_i_oswt;
  assign window_read_and_176_nl = (ulineBuf_rsc_6_0_i_ena_d_core_psct[0]) & ulineBuf_rsc_6_0_i_dswt_pff;
  assign ulineBuf_rsc_6_0_i_ena_d_core_sct = {1'b0 , window_read_and_176_nl};
  assign ulineBuf_rsc_6_0_i_dswt_pff = core_wen & ulineBuf_rsc_6_0_i_oswt_pff;
  assign window_read_and_177_nl = (ulineBuf_rsc_6_0_i_wea_d_core_psct[0]) & ulineBuf_rsc_6_0_i_dswt_pff;
  assign ulineBuf_rsc_6_0_i_wea_d_core_sct = {1'b0 , window_read_and_177_nl};
  assign window_read_and_178_nl = (ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])
      & ulineBuf_rsc_6_0_i_dswt_pff;
  assign ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct = {1'b0
      , window_read_and_178_nl};
  assign window_read_and_179_nl = (ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])
      & ulineBuf_rsc_6_0_i_dswt_pff;
  assign ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct = {1'b0
      , window_read_and_179_nl};
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ulineBuf_rsc_5_0_i_1_ulineBuf_rsc_5_0_wait_dp
// ------------------------------------------------------------------


module yuv444dns_core_ulineBuf_rsc_5_0_i_1_ulineBuf_rsc_5_0_wait_dp (
  clk, arst_n, ulineBuf_rsc_5_0_i_adra_d, ulineBuf_rsc_5_0_i_da_d, ulineBuf_rsc_5_0_i_qa_d,
      ulineBuf_rsc_5_0_i_adra_d_core, ulineBuf_rsc_5_0_i_da_d_core, ulineBuf_rsc_5_0_i_qa_d_mxwt,
      ulineBuf_rsc_5_0_i_biwt, ulineBuf_rsc_5_0_i_bdwt
);
  input clk;
  input arst_n;
  output [11:0] ulineBuf_rsc_5_0_i_adra_d;
  output [9:0] ulineBuf_rsc_5_0_i_da_d;
  input [19:0] ulineBuf_rsc_5_0_i_qa_d;
  input [23:0] ulineBuf_rsc_5_0_i_adra_d_core;
  input [19:0] ulineBuf_rsc_5_0_i_da_d_core;
  output [9:0] ulineBuf_rsc_5_0_i_qa_d_mxwt;
  input ulineBuf_rsc_5_0_i_biwt;
  input ulineBuf_rsc_5_0_i_bdwt;


  // Interconnect Declarations
  reg ulineBuf_rsc_5_0_i_bcwt;
  reg [9:0] ulineBuf_rsc_5_0_i_qa_d_bfwt_9_0;


  // Interconnect Declarations for Component Instantiations 
  assign ulineBuf_rsc_5_0_i_qa_d_mxwt = MUX_v_10_2_2((ulineBuf_rsc_5_0_i_qa_d[9:0]),
      ulineBuf_rsc_5_0_i_qa_d_bfwt_9_0, ulineBuf_rsc_5_0_i_bcwt);
  assign ulineBuf_rsc_5_0_i_adra_d = ulineBuf_rsc_5_0_i_adra_d_core[11:0];
  assign ulineBuf_rsc_5_0_i_da_d = ulineBuf_rsc_5_0_i_da_d_core[9:0];
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ulineBuf_rsc_5_0_i_bcwt <= 1'b0;
    end
    else begin
      ulineBuf_rsc_5_0_i_bcwt <= ~((~(ulineBuf_rsc_5_0_i_bcwt | ulineBuf_rsc_5_0_i_biwt))
          | ulineBuf_rsc_5_0_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ulineBuf_rsc_5_0_i_qa_d_bfwt_9_0 <= 10'b0000000000;
    end
    else if ( ulineBuf_rsc_5_0_i_biwt ) begin
      ulineBuf_rsc_5_0_i_qa_d_bfwt_9_0 <= ulineBuf_rsc_5_0_i_qa_d[9:0];
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ulineBuf_rsc_5_0_i_1_ulineBuf_rsc_5_0_wait_ctrl
// ------------------------------------------------------------------


module yuv444dns_core_ulineBuf_rsc_5_0_i_1_ulineBuf_rsc_5_0_wait_ctrl (
  core_wen, core_wten, ulineBuf_rsc_5_0_i_oswt, ulineBuf_rsc_5_0_i_ena_d_core_psct,
      ulineBuf_rsc_5_0_i_wea_d_core_psct, ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct,
      ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct, ulineBuf_rsc_5_0_i_biwt,
      ulineBuf_rsc_5_0_i_bdwt, ulineBuf_rsc_5_0_i_ena_d_core_sct, ulineBuf_rsc_5_0_i_wea_d_core_sct,
      ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct, ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct,
      ulineBuf_rsc_5_0_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input ulineBuf_rsc_5_0_i_oswt;
  input [1:0] ulineBuf_rsc_5_0_i_ena_d_core_psct;
  input [1:0] ulineBuf_rsc_5_0_i_wea_d_core_psct;
  input [1:0] ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  output ulineBuf_rsc_5_0_i_biwt;
  output ulineBuf_rsc_5_0_i_bdwt;
  output [1:0] ulineBuf_rsc_5_0_i_ena_d_core_sct;
  output [1:0] ulineBuf_rsc_5_0_i_wea_d_core_sct;
  output [1:0] ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output [1:0] ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  input ulineBuf_rsc_5_0_i_oswt_pff;


  // Interconnect Declarations
  wire ulineBuf_rsc_5_0_i_dswt_pff;

  wire[0:0] window_read_and_164_nl;
  wire[0:0] window_read_and_165_nl;
  wire[0:0] window_read_and_166_nl;
  wire[0:0] window_read_and_167_nl;

  // Interconnect Declarations for Component Instantiations 
  assign ulineBuf_rsc_5_0_i_bdwt = ulineBuf_rsc_5_0_i_oswt & core_wen;
  assign ulineBuf_rsc_5_0_i_biwt = (~ core_wten) & ulineBuf_rsc_5_0_i_oswt;
  assign window_read_and_164_nl = (ulineBuf_rsc_5_0_i_ena_d_core_psct[0]) & ulineBuf_rsc_5_0_i_dswt_pff;
  assign ulineBuf_rsc_5_0_i_ena_d_core_sct = {1'b0 , window_read_and_164_nl};
  assign ulineBuf_rsc_5_0_i_dswt_pff = core_wen & ulineBuf_rsc_5_0_i_oswt_pff;
  assign window_read_and_165_nl = (ulineBuf_rsc_5_0_i_wea_d_core_psct[0]) & ulineBuf_rsc_5_0_i_dswt_pff;
  assign ulineBuf_rsc_5_0_i_wea_d_core_sct = {1'b0 , window_read_and_165_nl};
  assign window_read_and_166_nl = (ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])
      & ulineBuf_rsc_5_0_i_dswt_pff;
  assign ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct = {1'b0
      , window_read_and_166_nl};
  assign window_read_and_167_nl = (ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])
      & ulineBuf_rsc_5_0_i_dswt_pff;
  assign ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct = {1'b0
      , window_read_and_167_nl};
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ulineBuf_rsc_4_0_i_1_ulineBuf_rsc_4_0_wait_dp
// ------------------------------------------------------------------


module yuv444dns_core_ulineBuf_rsc_4_0_i_1_ulineBuf_rsc_4_0_wait_dp (
  clk, arst_n, ulineBuf_rsc_4_0_i_adra_d, ulineBuf_rsc_4_0_i_da_d, ulineBuf_rsc_4_0_i_qa_d,
      ulineBuf_rsc_4_0_i_adra_d_core, ulineBuf_rsc_4_0_i_da_d_core, ulineBuf_rsc_4_0_i_qa_d_mxwt,
      ulineBuf_rsc_4_0_i_biwt, ulineBuf_rsc_4_0_i_bdwt
);
  input clk;
  input arst_n;
  output [11:0] ulineBuf_rsc_4_0_i_adra_d;
  output [9:0] ulineBuf_rsc_4_0_i_da_d;
  input [19:0] ulineBuf_rsc_4_0_i_qa_d;
  input [23:0] ulineBuf_rsc_4_0_i_adra_d_core;
  input [19:0] ulineBuf_rsc_4_0_i_da_d_core;
  output [9:0] ulineBuf_rsc_4_0_i_qa_d_mxwt;
  input ulineBuf_rsc_4_0_i_biwt;
  input ulineBuf_rsc_4_0_i_bdwt;


  // Interconnect Declarations
  reg ulineBuf_rsc_4_0_i_bcwt;
  reg [9:0] ulineBuf_rsc_4_0_i_qa_d_bfwt_9_0;


  // Interconnect Declarations for Component Instantiations 
  assign ulineBuf_rsc_4_0_i_qa_d_mxwt = MUX_v_10_2_2((ulineBuf_rsc_4_0_i_qa_d[9:0]),
      ulineBuf_rsc_4_0_i_qa_d_bfwt_9_0, ulineBuf_rsc_4_0_i_bcwt);
  assign ulineBuf_rsc_4_0_i_adra_d = ulineBuf_rsc_4_0_i_adra_d_core[11:0];
  assign ulineBuf_rsc_4_0_i_da_d = ulineBuf_rsc_4_0_i_da_d_core[9:0];
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ulineBuf_rsc_4_0_i_bcwt <= 1'b0;
    end
    else begin
      ulineBuf_rsc_4_0_i_bcwt <= ~((~(ulineBuf_rsc_4_0_i_bcwt | ulineBuf_rsc_4_0_i_biwt))
          | ulineBuf_rsc_4_0_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ulineBuf_rsc_4_0_i_qa_d_bfwt_9_0 <= 10'b0000000000;
    end
    else if ( ulineBuf_rsc_4_0_i_biwt ) begin
      ulineBuf_rsc_4_0_i_qa_d_bfwt_9_0 <= ulineBuf_rsc_4_0_i_qa_d[9:0];
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ulineBuf_rsc_4_0_i_1_ulineBuf_rsc_4_0_wait_ctrl
// ------------------------------------------------------------------


module yuv444dns_core_ulineBuf_rsc_4_0_i_1_ulineBuf_rsc_4_0_wait_ctrl (
  core_wen, core_wten, ulineBuf_rsc_4_0_i_oswt, ulineBuf_rsc_4_0_i_ena_d_core_psct,
      ulineBuf_rsc_4_0_i_wea_d_core_psct, ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct,
      ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct, ulineBuf_rsc_4_0_i_biwt,
      ulineBuf_rsc_4_0_i_bdwt, ulineBuf_rsc_4_0_i_ena_d_core_sct, ulineBuf_rsc_4_0_i_wea_d_core_sct,
      ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct, ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct,
      ulineBuf_rsc_4_0_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input ulineBuf_rsc_4_0_i_oswt;
  input [1:0] ulineBuf_rsc_4_0_i_ena_d_core_psct;
  input [1:0] ulineBuf_rsc_4_0_i_wea_d_core_psct;
  input [1:0] ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  output ulineBuf_rsc_4_0_i_biwt;
  output ulineBuf_rsc_4_0_i_bdwt;
  output [1:0] ulineBuf_rsc_4_0_i_ena_d_core_sct;
  output [1:0] ulineBuf_rsc_4_0_i_wea_d_core_sct;
  output [1:0] ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output [1:0] ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  input ulineBuf_rsc_4_0_i_oswt_pff;


  // Interconnect Declarations
  wire ulineBuf_rsc_4_0_i_dswt_pff;

  wire[0:0] window_read_and_152_nl;
  wire[0:0] window_read_and_153_nl;
  wire[0:0] window_read_and_154_nl;
  wire[0:0] window_read_and_155_nl;

  // Interconnect Declarations for Component Instantiations 
  assign ulineBuf_rsc_4_0_i_bdwt = ulineBuf_rsc_4_0_i_oswt & core_wen;
  assign ulineBuf_rsc_4_0_i_biwt = (~ core_wten) & ulineBuf_rsc_4_0_i_oswt;
  assign window_read_and_152_nl = (ulineBuf_rsc_4_0_i_ena_d_core_psct[0]) & ulineBuf_rsc_4_0_i_dswt_pff;
  assign ulineBuf_rsc_4_0_i_ena_d_core_sct = {1'b0 , window_read_and_152_nl};
  assign ulineBuf_rsc_4_0_i_dswt_pff = core_wen & ulineBuf_rsc_4_0_i_oswt_pff;
  assign window_read_and_153_nl = (ulineBuf_rsc_4_0_i_wea_d_core_psct[0]) & ulineBuf_rsc_4_0_i_dswt_pff;
  assign ulineBuf_rsc_4_0_i_wea_d_core_sct = {1'b0 , window_read_and_153_nl};
  assign window_read_and_154_nl = (ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])
      & ulineBuf_rsc_4_0_i_dswt_pff;
  assign ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct = {1'b0
      , window_read_and_154_nl};
  assign window_read_and_155_nl = (ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])
      & ulineBuf_rsc_4_0_i_dswt_pff;
  assign ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct = {1'b0
      , window_read_and_155_nl};
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ulineBuf_rsc_3_0_i_1_ulineBuf_rsc_3_0_wait_dp
// ------------------------------------------------------------------


module yuv444dns_core_ulineBuf_rsc_3_0_i_1_ulineBuf_rsc_3_0_wait_dp (
  clk, arst_n, ulineBuf_rsc_3_0_i_adra_d, ulineBuf_rsc_3_0_i_da_d, ulineBuf_rsc_3_0_i_qa_d,
      ulineBuf_rsc_3_0_i_adra_d_core, ulineBuf_rsc_3_0_i_da_d_core, ulineBuf_rsc_3_0_i_qa_d_mxwt,
      ulineBuf_rsc_3_0_i_biwt, ulineBuf_rsc_3_0_i_bdwt
);
  input clk;
  input arst_n;
  output [11:0] ulineBuf_rsc_3_0_i_adra_d;
  output [9:0] ulineBuf_rsc_3_0_i_da_d;
  input [19:0] ulineBuf_rsc_3_0_i_qa_d;
  input [23:0] ulineBuf_rsc_3_0_i_adra_d_core;
  input [19:0] ulineBuf_rsc_3_0_i_da_d_core;
  output [9:0] ulineBuf_rsc_3_0_i_qa_d_mxwt;
  input ulineBuf_rsc_3_0_i_biwt;
  input ulineBuf_rsc_3_0_i_bdwt;


  // Interconnect Declarations
  reg ulineBuf_rsc_3_0_i_bcwt;
  reg [9:0] ulineBuf_rsc_3_0_i_qa_d_bfwt_9_0;


  // Interconnect Declarations for Component Instantiations 
  assign ulineBuf_rsc_3_0_i_qa_d_mxwt = MUX_v_10_2_2((ulineBuf_rsc_3_0_i_qa_d[9:0]),
      ulineBuf_rsc_3_0_i_qa_d_bfwt_9_0, ulineBuf_rsc_3_0_i_bcwt);
  assign ulineBuf_rsc_3_0_i_adra_d = ulineBuf_rsc_3_0_i_adra_d_core[11:0];
  assign ulineBuf_rsc_3_0_i_da_d = ulineBuf_rsc_3_0_i_da_d_core[9:0];
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ulineBuf_rsc_3_0_i_bcwt <= 1'b0;
    end
    else begin
      ulineBuf_rsc_3_0_i_bcwt <= ~((~(ulineBuf_rsc_3_0_i_bcwt | ulineBuf_rsc_3_0_i_biwt))
          | ulineBuf_rsc_3_0_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ulineBuf_rsc_3_0_i_qa_d_bfwt_9_0 <= 10'b0000000000;
    end
    else if ( ulineBuf_rsc_3_0_i_biwt ) begin
      ulineBuf_rsc_3_0_i_qa_d_bfwt_9_0 <= ulineBuf_rsc_3_0_i_qa_d[9:0];
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ulineBuf_rsc_3_0_i_1_ulineBuf_rsc_3_0_wait_ctrl
// ------------------------------------------------------------------


module yuv444dns_core_ulineBuf_rsc_3_0_i_1_ulineBuf_rsc_3_0_wait_ctrl (
  core_wen, core_wten, ulineBuf_rsc_3_0_i_oswt, ulineBuf_rsc_3_0_i_ena_d_core_psct,
      ulineBuf_rsc_3_0_i_wea_d_core_psct, ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct,
      ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct, ulineBuf_rsc_3_0_i_biwt,
      ulineBuf_rsc_3_0_i_bdwt, ulineBuf_rsc_3_0_i_ena_d_core_sct, ulineBuf_rsc_3_0_i_wea_d_core_sct,
      ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct, ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct,
      ulineBuf_rsc_3_0_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input ulineBuf_rsc_3_0_i_oswt;
  input [1:0] ulineBuf_rsc_3_0_i_ena_d_core_psct;
  input [1:0] ulineBuf_rsc_3_0_i_wea_d_core_psct;
  input [1:0] ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  output ulineBuf_rsc_3_0_i_biwt;
  output ulineBuf_rsc_3_0_i_bdwt;
  output [1:0] ulineBuf_rsc_3_0_i_ena_d_core_sct;
  output [1:0] ulineBuf_rsc_3_0_i_wea_d_core_sct;
  output [1:0] ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output [1:0] ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  input ulineBuf_rsc_3_0_i_oswt_pff;


  // Interconnect Declarations
  wire ulineBuf_rsc_3_0_i_dswt_pff;

  wire[0:0] window_read_and_140_nl;
  wire[0:0] window_read_and_141_nl;
  wire[0:0] window_read_and_142_nl;
  wire[0:0] window_read_and_143_nl;

  // Interconnect Declarations for Component Instantiations 
  assign ulineBuf_rsc_3_0_i_bdwt = ulineBuf_rsc_3_0_i_oswt & core_wen;
  assign ulineBuf_rsc_3_0_i_biwt = (~ core_wten) & ulineBuf_rsc_3_0_i_oswt;
  assign window_read_and_140_nl = (ulineBuf_rsc_3_0_i_ena_d_core_psct[0]) & ulineBuf_rsc_3_0_i_dswt_pff;
  assign ulineBuf_rsc_3_0_i_ena_d_core_sct = {1'b0 , window_read_and_140_nl};
  assign ulineBuf_rsc_3_0_i_dswt_pff = core_wen & ulineBuf_rsc_3_0_i_oswt_pff;
  assign window_read_and_141_nl = (ulineBuf_rsc_3_0_i_wea_d_core_psct[0]) & ulineBuf_rsc_3_0_i_dswt_pff;
  assign ulineBuf_rsc_3_0_i_wea_d_core_sct = {1'b0 , window_read_and_141_nl};
  assign window_read_and_142_nl = (ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])
      & ulineBuf_rsc_3_0_i_dswt_pff;
  assign ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct = {1'b0
      , window_read_and_142_nl};
  assign window_read_and_143_nl = (ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])
      & ulineBuf_rsc_3_0_i_dswt_pff;
  assign ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct = {1'b0
      , window_read_and_143_nl};
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ulineBuf_rsc_2_0_i_1_ulineBuf_rsc_2_0_wait_dp
// ------------------------------------------------------------------


module yuv444dns_core_ulineBuf_rsc_2_0_i_1_ulineBuf_rsc_2_0_wait_dp (
  clk, arst_n, ulineBuf_rsc_2_0_i_adra_d, ulineBuf_rsc_2_0_i_da_d, ulineBuf_rsc_2_0_i_qa_d,
      ulineBuf_rsc_2_0_i_adra_d_core, ulineBuf_rsc_2_0_i_da_d_core, ulineBuf_rsc_2_0_i_qa_d_mxwt,
      ulineBuf_rsc_2_0_i_biwt, ulineBuf_rsc_2_0_i_bdwt
);
  input clk;
  input arst_n;
  output [11:0] ulineBuf_rsc_2_0_i_adra_d;
  output [9:0] ulineBuf_rsc_2_0_i_da_d;
  input [19:0] ulineBuf_rsc_2_0_i_qa_d;
  input [23:0] ulineBuf_rsc_2_0_i_adra_d_core;
  input [19:0] ulineBuf_rsc_2_0_i_da_d_core;
  output [9:0] ulineBuf_rsc_2_0_i_qa_d_mxwt;
  input ulineBuf_rsc_2_0_i_biwt;
  input ulineBuf_rsc_2_0_i_bdwt;


  // Interconnect Declarations
  reg ulineBuf_rsc_2_0_i_bcwt;
  reg [9:0] ulineBuf_rsc_2_0_i_qa_d_bfwt_9_0;


  // Interconnect Declarations for Component Instantiations 
  assign ulineBuf_rsc_2_0_i_qa_d_mxwt = MUX_v_10_2_2((ulineBuf_rsc_2_0_i_qa_d[9:0]),
      ulineBuf_rsc_2_0_i_qa_d_bfwt_9_0, ulineBuf_rsc_2_0_i_bcwt);
  assign ulineBuf_rsc_2_0_i_adra_d = ulineBuf_rsc_2_0_i_adra_d_core[11:0];
  assign ulineBuf_rsc_2_0_i_da_d = ulineBuf_rsc_2_0_i_da_d_core[9:0];
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ulineBuf_rsc_2_0_i_bcwt <= 1'b0;
    end
    else begin
      ulineBuf_rsc_2_0_i_bcwt <= ~((~(ulineBuf_rsc_2_0_i_bcwt | ulineBuf_rsc_2_0_i_biwt))
          | ulineBuf_rsc_2_0_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ulineBuf_rsc_2_0_i_qa_d_bfwt_9_0 <= 10'b0000000000;
    end
    else if ( ulineBuf_rsc_2_0_i_biwt ) begin
      ulineBuf_rsc_2_0_i_qa_d_bfwt_9_0 <= ulineBuf_rsc_2_0_i_qa_d[9:0];
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ulineBuf_rsc_2_0_i_1_ulineBuf_rsc_2_0_wait_ctrl
// ------------------------------------------------------------------


module yuv444dns_core_ulineBuf_rsc_2_0_i_1_ulineBuf_rsc_2_0_wait_ctrl (
  core_wen, core_wten, ulineBuf_rsc_2_0_i_oswt, ulineBuf_rsc_2_0_i_ena_d_core_psct,
      ulineBuf_rsc_2_0_i_wea_d_core_psct, ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct,
      ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct, ulineBuf_rsc_2_0_i_biwt,
      ulineBuf_rsc_2_0_i_bdwt, ulineBuf_rsc_2_0_i_ena_d_core_sct, ulineBuf_rsc_2_0_i_wea_d_core_sct,
      ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct, ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct,
      ulineBuf_rsc_2_0_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input ulineBuf_rsc_2_0_i_oswt;
  input [1:0] ulineBuf_rsc_2_0_i_ena_d_core_psct;
  input [1:0] ulineBuf_rsc_2_0_i_wea_d_core_psct;
  input [1:0] ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  output ulineBuf_rsc_2_0_i_biwt;
  output ulineBuf_rsc_2_0_i_bdwt;
  output [1:0] ulineBuf_rsc_2_0_i_ena_d_core_sct;
  output [1:0] ulineBuf_rsc_2_0_i_wea_d_core_sct;
  output [1:0] ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output [1:0] ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  input ulineBuf_rsc_2_0_i_oswt_pff;


  // Interconnect Declarations
  wire ulineBuf_rsc_2_0_i_dswt_pff;

  wire[0:0] window_read_and_128_nl;
  wire[0:0] window_read_and_129_nl;
  wire[0:0] window_read_and_130_nl;
  wire[0:0] window_read_and_131_nl;

  // Interconnect Declarations for Component Instantiations 
  assign ulineBuf_rsc_2_0_i_bdwt = ulineBuf_rsc_2_0_i_oswt & core_wen;
  assign ulineBuf_rsc_2_0_i_biwt = (~ core_wten) & ulineBuf_rsc_2_0_i_oswt;
  assign window_read_and_128_nl = (ulineBuf_rsc_2_0_i_ena_d_core_psct[0]) & ulineBuf_rsc_2_0_i_dswt_pff;
  assign ulineBuf_rsc_2_0_i_ena_d_core_sct = {1'b0 , window_read_and_128_nl};
  assign ulineBuf_rsc_2_0_i_dswt_pff = core_wen & ulineBuf_rsc_2_0_i_oswt_pff;
  assign window_read_and_129_nl = (ulineBuf_rsc_2_0_i_wea_d_core_psct[0]) & ulineBuf_rsc_2_0_i_dswt_pff;
  assign ulineBuf_rsc_2_0_i_wea_d_core_sct = {1'b0 , window_read_and_129_nl};
  assign window_read_and_130_nl = (ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])
      & ulineBuf_rsc_2_0_i_dswt_pff;
  assign ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct = {1'b0
      , window_read_and_130_nl};
  assign window_read_and_131_nl = (ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])
      & ulineBuf_rsc_2_0_i_dswt_pff;
  assign ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct = {1'b0
      , window_read_and_131_nl};
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ulineBuf_rsc_1_0_i_1_ulineBuf_rsc_1_0_wait_dp
// ------------------------------------------------------------------


module yuv444dns_core_ulineBuf_rsc_1_0_i_1_ulineBuf_rsc_1_0_wait_dp (
  clk, arst_n, ulineBuf_rsc_1_0_i_adra_d, ulineBuf_rsc_1_0_i_da_d, ulineBuf_rsc_1_0_i_qa_d,
      ulineBuf_rsc_1_0_i_adra_d_core, ulineBuf_rsc_1_0_i_da_d_core, ulineBuf_rsc_1_0_i_qa_d_mxwt,
      ulineBuf_rsc_1_0_i_biwt, ulineBuf_rsc_1_0_i_bdwt
);
  input clk;
  input arst_n;
  output [11:0] ulineBuf_rsc_1_0_i_adra_d;
  output [9:0] ulineBuf_rsc_1_0_i_da_d;
  input [19:0] ulineBuf_rsc_1_0_i_qa_d;
  input [23:0] ulineBuf_rsc_1_0_i_adra_d_core;
  input [19:0] ulineBuf_rsc_1_0_i_da_d_core;
  output [9:0] ulineBuf_rsc_1_0_i_qa_d_mxwt;
  input ulineBuf_rsc_1_0_i_biwt;
  input ulineBuf_rsc_1_0_i_bdwt;


  // Interconnect Declarations
  reg ulineBuf_rsc_1_0_i_bcwt;
  reg [9:0] ulineBuf_rsc_1_0_i_qa_d_bfwt_9_0;


  // Interconnect Declarations for Component Instantiations 
  assign ulineBuf_rsc_1_0_i_qa_d_mxwt = MUX_v_10_2_2((ulineBuf_rsc_1_0_i_qa_d[9:0]),
      ulineBuf_rsc_1_0_i_qa_d_bfwt_9_0, ulineBuf_rsc_1_0_i_bcwt);
  assign ulineBuf_rsc_1_0_i_adra_d = ulineBuf_rsc_1_0_i_adra_d_core[11:0];
  assign ulineBuf_rsc_1_0_i_da_d = ulineBuf_rsc_1_0_i_da_d_core[9:0];
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ulineBuf_rsc_1_0_i_bcwt <= 1'b0;
    end
    else begin
      ulineBuf_rsc_1_0_i_bcwt <= ~((~(ulineBuf_rsc_1_0_i_bcwt | ulineBuf_rsc_1_0_i_biwt))
          | ulineBuf_rsc_1_0_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ulineBuf_rsc_1_0_i_qa_d_bfwt_9_0 <= 10'b0000000000;
    end
    else if ( ulineBuf_rsc_1_0_i_biwt ) begin
      ulineBuf_rsc_1_0_i_qa_d_bfwt_9_0 <= ulineBuf_rsc_1_0_i_qa_d[9:0];
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ulineBuf_rsc_1_0_i_1_ulineBuf_rsc_1_0_wait_ctrl
// ------------------------------------------------------------------


module yuv444dns_core_ulineBuf_rsc_1_0_i_1_ulineBuf_rsc_1_0_wait_ctrl (
  core_wen, core_wten, ulineBuf_rsc_1_0_i_oswt, ulineBuf_rsc_1_0_i_ena_d_core_psct,
      ulineBuf_rsc_1_0_i_wea_d_core_psct, ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct,
      ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct, ulineBuf_rsc_1_0_i_biwt,
      ulineBuf_rsc_1_0_i_bdwt, ulineBuf_rsc_1_0_i_ena_d_core_sct, ulineBuf_rsc_1_0_i_wea_d_core_sct,
      ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct, ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct,
      ulineBuf_rsc_1_0_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input ulineBuf_rsc_1_0_i_oswt;
  input [1:0] ulineBuf_rsc_1_0_i_ena_d_core_psct;
  input [1:0] ulineBuf_rsc_1_0_i_wea_d_core_psct;
  input [1:0] ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  output ulineBuf_rsc_1_0_i_biwt;
  output ulineBuf_rsc_1_0_i_bdwt;
  output [1:0] ulineBuf_rsc_1_0_i_ena_d_core_sct;
  output [1:0] ulineBuf_rsc_1_0_i_wea_d_core_sct;
  output [1:0] ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output [1:0] ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  input ulineBuf_rsc_1_0_i_oswt_pff;


  // Interconnect Declarations
  wire ulineBuf_rsc_1_0_i_dswt_pff;

  wire[0:0] window_read_and_116_nl;
  wire[0:0] window_read_and_117_nl;
  wire[0:0] window_read_and_118_nl;
  wire[0:0] window_read_and_119_nl;

  // Interconnect Declarations for Component Instantiations 
  assign ulineBuf_rsc_1_0_i_bdwt = ulineBuf_rsc_1_0_i_oswt & core_wen;
  assign ulineBuf_rsc_1_0_i_biwt = (~ core_wten) & ulineBuf_rsc_1_0_i_oswt;
  assign window_read_and_116_nl = (ulineBuf_rsc_1_0_i_ena_d_core_psct[0]) & ulineBuf_rsc_1_0_i_dswt_pff;
  assign ulineBuf_rsc_1_0_i_ena_d_core_sct = {1'b0 , window_read_and_116_nl};
  assign ulineBuf_rsc_1_0_i_dswt_pff = core_wen & ulineBuf_rsc_1_0_i_oswt_pff;
  assign window_read_and_117_nl = (ulineBuf_rsc_1_0_i_wea_d_core_psct[0]) & ulineBuf_rsc_1_0_i_dswt_pff;
  assign ulineBuf_rsc_1_0_i_wea_d_core_sct = {1'b0 , window_read_and_117_nl};
  assign window_read_and_118_nl = (ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])
      & ulineBuf_rsc_1_0_i_dswt_pff;
  assign ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct = {1'b0
      , window_read_and_118_nl};
  assign window_read_and_119_nl = (ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])
      & ulineBuf_rsc_1_0_i_dswt_pff;
  assign ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct = {1'b0
      , window_read_and_119_nl};
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ulineBuf_rsc_0_0_i_1_ulineBuf_rsc_0_0_wait_dp
// ------------------------------------------------------------------


module yuv444dns_core_ulineBuf_rsc_0_0_i_1_ulineBuf_rsc_0_0_wait_dp (
  clk, arst_n, ulineBuf_rsc_0_0_i_adra_d, ulineBuf_rsc_0_0_i_da_d, ulineBuf_rsc_0_0_i_qa_d,
      ulineBuf_rsc_0_0_i_adra_d_core, ulineBuf_rsc_0_0_i_da_d_core, ulineBuf_rsc_0_0_i_qa_d_mxwt,
      ulineBuf_rsc_0_0_i_biwt, ulineBuf_rsc_0_0_i_bdwt
);
  input clk;
  input arst_n;
  output [11:0] ulineBuf_rsc_0_0_i_adra_d;
  output [9:0] ulineBuf_rsc_0_0_i_da_d;
  input [19:0] ulineBuf_rsc_0_0_i_qa_d;
  input [23:0] ulineBuf_rsc_0_0_i_adra_d_core;
  input [19:0] ulineBuf_rsc_0_0_i_da_d_core;
  output [9:0] ulineBuf_rsc_0_0_i_qa_d_mxwt;
  input ulineBuf_rsc_0_0_i_biwt;
  input ulineBuf_rsc_0_0_i_bdwt;


  // Interconnect Declarations
  reg ulineBuf_rsc_0_0_i_bcwt;
  reg [9:0] ulineBuf_rsc_0_0_i_qa_d_bfwt_9_0;


  // Interconnect Declarations for Component Instantiations 
  assign ulineBuf_rsc_0_0_i_qa_d_mxwt = MUX_v_10_2_2((ulineBuf_rsc_0_0_i_qa_d[9:0]),
      ulineBuf_rsc_0_0_i_qa_d_bfwt_9_0, ulineBuf_rsc_0_0_i_bcwt);
  assign ulineBuf_rsc_0_0_i_adra_d = ulineBuf_rsc_0_0_i_adra_d_core[11:0];
  assign ulineBuf_rsc_0_0_i_da_d = ulineBuf_rsc_0_0_i_da_d_core[9:0];
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ulineBuf_rsc_0_0_i_bcwt <= 1'b0;
    end
    else begin
      ulineBuf_rsc_0_0_i_bcwt <= ~((~(ulineBuf_rsc_0_0_i_bcwt | ulineBuf_rsc_0_0_i_biwt))
          | ulineBuf_rsc_0_0_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ulineBuf_rsc_0_0_i_qa_d_bfwt_9_0 <= 10'b0000000000;
    end
    else if ( ulineBuf_rsc_0_0_i_biwt ) begin
      ulineBuf_rsc_0_0_i_qa_d_bfwt_9_0 <= ulineBuf_rsc_0_0_i_qa_d[9:0];
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ulineBuf_rsc_0_0_i_1_ulineBuf_rsc_0_0_wait_ctrl
// ------------------------------------------------------------------


module yuv444dns_core_ulineBuf_rsc_0_0_i_1_ulineBuf_rsc_0_0_wait_ctrl (
  core_wen, core_wten, ulineBuf_rsc_0_0_i_oswt, ulineBuf_rsc_0_0_i_ena_d_core_psct,
      ulineBuf_rsc_0_0_i_wea_d_core_psct, ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct,
      ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct, ulineBuf_rsc_0_0_i_biwt,
      ulineBuf_rsc_0_0_i_bdwt, ulineBuf_rsc_0_0_i_ena_d_core_sct, ulineBuf_rsc_0_0_i_wea_d_core_sct,
      ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct, ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct,
      ulineBuf_rsc_0_0_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input ulineBuf_rsc_0_0_i_oswt;
  input [1:0] ulineBuf_rsc_0_0_i_ena_d_core_psct;
  input [1:0] ulineBuf_rsc_0_0_i_wea_d_core_psct;
  input [1:0] ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  output ulineBuf_rsc_0_0_i_biwt;
  output ulineBuf_rsc_0_0_i_bdwt;
  output [1:0] ulineBuf_rsc_0_0_i_ena_d_core_sct;
  output [1:0] ulineBuf_rsc_0_0_i_wea_d_core_sct;
  output [1:0] ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output [1:0] ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  input ulineBuf_rsc_0_0_i_oswt_pff;


  // Interconnect Declarations
  wire ulineBuf_rsc_0_0_i_dswt_pff;

  wire[0:0] window_read_and_104_nl;
  wire[0:0] window_read_and_105_nl;
  wire[0:0] window_read_and_106_nl;
  wire[0:0] window_read_and_107_nl;

  // Interconnect Declarations for Component Instantiations 
  assign ulineBuf_rsc_0_0_i_bdwt = ulineBuf_rsc_0_0_i_oswt & core_wen;
  assign ulineBuf_rsc_0_0_i_biwt = (~ core_wten) & ulineBuf_rsc_0_0_i_oswt;
  assign window_read_and_104_nl = (ulineBuf_rsc_0_0_i_ena_d_core_psct[0]) & ulineBuf_rsc_0_0_i_dswt_pff;
  assign ulineBuf_rsc_0_0_i_ena_d_core_sct = {1'b0 , window_read_and_104_nl};
  assign ulineBuf_rsc_0_0_i_dswt_pff = core_wen & ulineBuf_rsc_0_0_i_oswt_pff;
  assign window_read_and_105_nl = (ulineBuf_rsc_0_0_i_wea_d_core_psct[0]) & ulineBuf_rsc_0_0_i_dswt_pff;
  assign ulineBuf_rsc_0_0_i_wea_d_core_sct = {1'b0 , window_read_and_105_nl};
  assign window_read_and_106_nl = (ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])
      & ulineBuf_rsc_0_0_i_dswt_pff;
  assign ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct = {1'b0
      , window_read_and_106_nl};
  assign window_read_and_107_nl = (ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])
      & ulineBuf_rsc_0_0_i_dswt_pff;
  assign ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct = {1'b0
      , window_read_and_107_nl};
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ylineBuf_rsc_7_0_i_1_ylineBuf_rsc_7_0_wait_dp
// ------------------------------------------------------------------


module yuv444dns_core_ylineBuf_rsc_7_0_i_1_ylineBuf_rsc_7_0_wait_dp (
  clk, arst_n, ylineBuf_rsc_7_0_i_adra_d, ylineBuf_rsc_7_0_i_da_d, ylineBuf_rsc_7_0_i_qa_d,
      ylineBuf_rsc_7_0_i_adra_d_core, ylineBuf_rsc_7_0_i_da_d_core, ylineBuf_rsc_7_0_i_qa_d_mxwt,
      ylineBuf_rsc_7_0_i_biwt, ylineBuf_rsc_7_0_i_bdwt
);
  input clk;
  input arst_n;
  output [11:0] ylineBuf_rsc_7_0_i_adra_d;
  output [9:0] ylineBuf_rsc_7_0_i_da_d;
  input [19:0] ylineBuf_rsc_7_0_i_qa_d;
  input [23:0] ylineBuf_rsc_7_0_i_adra_d_core;
  input [19:0] ylineBuf_rsc_7_0_i_da_d_core;
  output [9:0] ylineBuf_rsc_7_0_i_qa_d_mxwt;
  input ylineBuf_rsc_7_0_i_biwt;
  input ylineBuf_rsc_7_0_i_bdwt;


  // Interconnect Declarations
  reg ylineBuf_rsc_7_0_i_bcwt;
  reg [9:0] ylineBuf_rsc_7_0_i_qa_d_bfwt_9_0;


  // Interconnect Declarations for Component Instantiations 
  assign ylineBuf_rsc_7_0_i_qa_d_mxwt = MUX_v_10_2_2((ylineBuf_rsc_7_0_i_qa_d[9:0]),
      ylineBuf_rsc_7_0_i_qa_d_bfwt_9_0, ylineBuf_rsc_7_0_i_bcwt);
  assign ylineBuf_rsc_7_0_i_adra_d = ylineBuf_rsc_7_0_i_adra_d_core[11:0];
  assign ylineBuf_rsc_7_0_i_da_d = ylineBuf_rsc_7_0_i_da_d_core[9:0];
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ylineBuf_rsc_7_0_i_bcwt <= 1'b0;
    end
    else begin
      ylineBuf_rsc_7_0_i_bcwt <= ~((~(ylineBuf_rsc_7_0_i_bcwt | ylineBuf_rsc_7_0_i_biwt))
          | ylineBuf_rsc_7_0_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ylineBuf_rsc_7_0_i_qa_d_bfwt_9_0 <= 10'b0000000000;
    end
    else if ( ylineBuf_rsc_7_0_i_biwt ) begin
      ylineBuf_rsc_7_0_i_qa_d_bfwt_9_0 <= ylineBuf_rsc_7_0_i_qa_d[9:0];
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ylineBuf_rsc_7_0_i_1_ylineBuf_rsc_7_0_wait_ctrl
// ------------------------------------------------------------------


module yuv444dns_core_ylineBuf_rsc_7_0_i_1_ylineBuf_rsc_7_0_wait_ctrl (
  core_wen, core_wten, ylineBuf_rsc_7_0_i_oswt, ylineBuf_rsc_7_0_i_ena_d_core_psct,
      ylineBuf_rsc_7_0_i_wea_d_core_psct, ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct,
      ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct, ylineBuf_rsc_7_0_i_biwt,
      ylineBuf_rsc_7_0_i_bdwt, ylineBuf_rsc_7_0_i_ena_d_core_sct, ylineBuf_rsc_7_0_i_wea_d_core_sct,
      ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct, ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct,
      ylineBuf_rsc_7_0_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input ylineBuf_rsc_7_0_i_oswt;
  input [1:0] ylineBuf_rsc_7_0_i_ena_d_core_psct;
  input [1:0] ylineBuf_rsc_7_0_i_wea_d_core_psct;
  input [1:0] ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  output ylineBuf_rsc_7_0_i_biwt;
  output ylineBuf_rsc_7_0_i_bdwt;
  output [1:0] ylineBuf_rsc_7_0_i_ena_d_core_sct;
  output [1:0] ylineBuf_rsc_7_0_i_wea_d_core_sct;
  output [1:0] ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output [1:0] ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  input ylineBuf_rsc_7_0_i_oswt_pff;


  // Interconnect Declarations
  wire ylineBuf_rsc_7_0_i_dswt_pff;

  wire[0:0] window_read_and_92_nl;
  wire[0:0] window_read_and_93_nl;
  wire[0:0] window_read_and_94_nl;
  wire[0:0] window_read_and_95_nl;

  // Interconnect Declarations for Component Instantiations 
  assign ylineBuf_rsc_7_0_i_bdwt = ylineBuf_rsc_7_0_i_oswt & core_wen;
  assign ylineBuf_rsc_7_0_i_biwt = (~ core_wten) & ylineBuf_rsc_7_0_i_oswt;
  assign window_read_and_92_nl = (ylineBuf_rsc_7_0_i_ena_d_core_psct[0]) & ylineBuf_rsc_7_0_i_dswt_pff;
  assign ylineBuf_rsc_7_0_i_ena_d_core_sct = {1'b0 , window_read_and_92_nl};
  assign ylineBuf_rsc_7_0_i_dswt_pff = core_wen & ylineBuf_rsc_7_0_i_oswt_pff;
  assign window_read_and_93_nl = (ylineBuf_rsc_7_0_i_wea_d_core_psct[0]) & ylineBuf_rsc_7_0_i_dswt_pff;
  assign ylineBuf_rsc_7_0_i_wea_d_core_sct = {1'b0 , window_read_and_93_nl};
  assign window_read_and_94_nl = (ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])
      & ylineBuf_rsc_7_0_i_dswt_pff;
  assign ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct = {1'b0
      , window_read_and_94_nl};
  assign window_read_and_95_nl = (ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])
      & ylineBuf_rsc_7_0_i_dswt_pff;
  assign ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct = {1'b0
      , window_read_and_95_nl};
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ylineBuf_rsc_6_0_i_1_ylineBuf_rsc_6_0_wait_dp
// ------------------------------------------------------------------


module yuv444dns_core_ylineBuf_rsc_6_0_i_1_ylineBuf_rsc_6_0_wait_dp (
  clk, arst_n, ylineBuf_rsc_6_0_i_adra_d, ylineBuf_rsc_6_0_i_da_d, ylineBuf_rsc_6_0_i_qa_d,
      ylineBuf_rsc_6_0_i_adra_d_core, ylineBuf_rsc_6_0_i_da_d_core, ylineBuf_rsc_6_0_i_qa_d_mxwt,
      ylineBuf_rsc_6_0_i_biwt, ylineBuf_rsc_6_0_i_bdwt
);
  input clk;
  input arst_n;
  output [11:0] ylineBuf_rsc_6_0_i_adra_d;
  output [9:0] ylineBuf_rsc_6_0_i_da_d;
  input [19:0] ylineBuf_rsc_6_0_i_qa_d;
  input [23:0] ylineBuf_rsc_6_0_i_adra_d_core;
  input [19:0] ylineBuf_rsc_6_0_i_da_d_core;
  output [9:0] ylineBuf_rsc_6_0_i_qa_d_mxwt;
  input ylineBuf_rsc_6_0_i_biwt;
  input ylineBuf_rsc_6_0_i_bdwt;


  // Interconnect Declarations
  reg ylineBuf_rsc_6_0_i_bcwt;
  reg [9:0] ylineBuf_rsc_6_0_i_qa_d_bfwt_9_0;


  // Interconnect Declarations for Component Instantiations 
  assign ylineBuf_rsc_6_0_i_qa_d_mxwt = MUX_v_10_2_2((ylineBuf_rsc_6_0_i_qa_d[9:0]),
      ylineBuf_rsc_6_0_i_qa_d_bfwt_9_0, ylineBuf_rsc_6_0_i_bcwt);
  assign ylineBuf_rsc_6_0_i_adra_d = ylineBuf_rsc_6_0_i_adra_d_core[11:0];
  assign ylineBuf_rsc_6_0_i_da_d = ylineBuf_rsc_6_0_i_da_d_core[9:0];
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ylineBuf_rsc_6_0_i_bcwt <= 1'b0;
    end
    else begin
      ylineBuf_rsc_6_0_i_bcwt <= ~((~(ylineBuf_rsc_6_0_i_bcwt | ylineBuf_rsc_6_0_i_biwt))
          | ylineBuf_rsc_6_0_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ylineBuf_rsc_6_0_i_qa_d_bfwt_9_0 <= 10'b0000000000;
    end
    else if ( ylineBuf_rsc_6_0_i_biwt ) begin
      ylineBuf_rsc_6_0_i_qa_d_bfwt_9_0 <= ylineBuf_rsc_6_0_i_qa_d[9:0];
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ylineBuf_rsc_6_0_i_1_ylineBuf_rsc_6_0_wait_ctrl
// ------------------------------------------------------------------


module yuv444dns_core_ylineBuf_rsc_6_0_i_1_ylineBuf_rsc_6_0_wait_ctrl (
  core_wen, core_wten, ylineBuf_rsc_6_0_i_oswt, ylineBuf_rsc_6_0_i_ena_d_core_psct,
      ylineBuf_rsc_6_0_i_wea_d_core_psct, ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct,
      ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct, ylineBuf_rsc_6_0_i_biwt,
      ylineBuf_rsc_6_0_i_bdwt, ylineBuf_rsc_6_0_i_ena_d_core_sct, ylineBuf_rsc_6_0_i_wea_d_core_sct,
      ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct, ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct,
      ylineBuf_rsc_6_0_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input ylineBuf_rsc_6_0_i_oswt;
  input [1:0] ylineBuf_rsc_6_0_i_ena_d_core_psct;
  input [1:0] ylineBuf_rsc_6_0_i_wea_d_core_psct;
  input [1:0] ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  output ylineBuf_rsc_6_0_i_biwt;
  output ylineBuf_rsc_6_0_i_bdwt;
  output [1:0] ylineBuf_rsc_6_0_i_ena_d_core_sct;
  output [1:0] ylineBuf_rsc_6_0_i_wea_d_core_sct;
  output [1:0] ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output [1:0] ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  input ylineBuf_rsc_6_0_i_oswt_pff;


  // Interconnect Declarations
  wire ylineBuf_rsc_6_0_i_dswt_pff;

  wire[0:0] window_read_and_80_nl;
  wire[0:0] window_read_and_81_nl;
  wire[0:0] window_read_and_82_nl;
  wire[0:0] window_read_and_83_nl;

  // Interconnect Declarations for Component Instantiations 
  assign ylineBuf_rsc_6_0_i_bdwt = ylineBuf_rsc_6_0_i_oswt & core_wen;
  assign ylineBuf_rsc_6_0_i_biwt = (~ core_wten) & ylineBuf_rsc_6_0_i_oswt;
  assign window_read_and_80_nl = (ylineBuf_rsc_6_0_i_ena_d_core_psct[0]) & ylineBuf_rsc_6_0_i_dswt_pff;
  assign ylineBuf_rsc_6_0_i_ena_d_core_sct = {1'b0 , window_read_and_80_nl};
  assign ylineBuf_rsc_6_0_i_dswt_pff = core_wen & ylineBuf_rsc_6_0_i_oswt_pff;
  assign window_read_and_81_nl = (ylineBuf_rsc_6_0_i_wea_d_core_psct[0]) & ylineBuf_rsc_6_0_i_dswt_pff;
  assign ylineBuf_rsc_6_0_i_wea_d_core_sct = {1'b0 , window_read_and_81_nl};
  assign window_read_and_82_nl = (ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])
      & ylineBuf_rsc_6_0_i_dswt_pff;
  assign ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct = {1'b0
      , window_read_and_82_nl};
  assign window_read_and_83_nl = (ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])
      & ylineBuf_rsc_6_0_i_dswt_pff;
  assign ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct = {1'b0
      , window_read_and_83_nl};
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ylineBuf_rsc_5_0_i_1_ylineBuf_rsc_5_0_wait_dp
// ------------------------------------------------------------------


module yuv444dns_core_ylineBuf_rsc_5_0_i_1_ylineBuf_rsc_5_0_wait_dp (
  clk, arst_n, ylineBuf_rsc_5_0_i_adra_d, ylineBuf_rsc_5_0_i_da_d, ylineBuf_rsc_5_0_i_qa_d,
      ylineBuf_rsc_5_0_i_adra_d_core, ylineBuf_rsc_5_0_i_da_d_core, ylineBuf_rsc_5_0_i_qa_d_mxwt,
      ylineBuf_rsc_5_0_i_biwt, ylineBuf_rsc_5_0_i_bdwt
);
  input clk;
  input arst_n;
  output [11:0] ylineBuf_rsc_5_0_i_adra_d;
  output [9:0] ylineBuf_rsc_5_0_i_da_d;
  input [19:0] ylineBuf_rsc_5_0_i_qa_d;
  input [23:0] ylineBuf_rsc_5_0_i_adra_d_core;
  input [19:0] ylineBuf_rsc_5_0_i_da_d_core;
  output [9:0] ylineBuf_rsc_5_0_i_qa_d_mxwt;
  input ylineBuf_rsc_5_0_i_biwt;
  input ylineBuf_rsc_5_0_i_bdwt;


  // Interconnect Declarations
  reg ylineBuf_rsc_5_0_i_bcwt;
  reg [9:0] ylineBuf_rsc_5_0_i_qa_d_bfwt_9_0;


  // Interconnect Declarations for Component Instantiations 
  assign ylineBuf_rsc_5_0_i_qa_d_mxwt = MUX_v_10_2_2((ylineBuf_rsc_5_0_i_qa_d[9:0]),
      ylineBuf_rsc_5_0_i_qa_d_bfwt_9_0, ylineBuf_rsc_5_0_i_bcwt);
  assign ylineBuf_rsc_5_0_i_adra_d = ylineBuf_rsc_5_0_i_adra_d_core[11:0];
  assign ylineBuf_rsc_5_0_i_da_d = ylineBuf_rsc_5_0_i_da_d_core[9:0];
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ylineBuf_rsc_5_0_i_bcwt <= 1'b0;
    end
    else begin
      ylineBuf_rsc_5_0_i_bcwt <= ~((~(ylineBuf_rsc_5_0_i_bcwt | ylineBuf_rsc_5_0_i_biwt))
          | ylineBuf_rsc_5_0_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ylineBuf_rsc_5_0_i_qa_d_bfwt_9_0 <= 10'b0000000000;
    end
    else if ( ylineBuf_rsc_5_0_i_biwt ) begin
      ylineBuf_rsc_5_0_i_qa_d_bfwt_9_0 <= ylineBuf_rsc_5_0_i_qa_d[9:0];
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ylineBuf_rsc_5_0_i_1_ylineBuf_rsc_5_0_wait_ctrl
// ------------------------------------------------------------------


module yuv444dns_core_ylineBuf_rsc_5_0_i_1_ylineBuf_rsc_5_0_wait_ctrl (
  core_wen, core_wten, ylineBuf_rsc_5_0_i_oswt, ylineBuf_rsc_5_0_i_ena_d_core_psct,
      ylineBuf_rsc_5_0_i_wea_d_core_psct, ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct,
      ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct, ylineBuf_rsc_5_0_i_biwt,
      ylineBuf_rsc_5_0_i_bdwt, ylineBuf_rsc_5_0_i_ena_d_core_sct, ylineBuf_rsc_5_0_i_wea_d_core_sct,
      ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct, ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct,
      ylineBuf_rsc_5_0_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input ylineBuf_rsc_5_0_i_oswt;
  input [1:0] ylineBuf_rsc_5_0_i_ena_d_core_psct;
  input [1:0] ylineBuf_rsc_5_0_i_wea_d_core_psct;
  input [1:0] ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  output ylineBuf_rsc_5_0_i_biwt;
  output ylineBuf_rsc_5_0_i_bdwt;
  output [1:0] ylineBuf_rsc_5_0_i_ena_d_core_sct;
  output [1:0] ylineBuf_rsc_5_0_i_wea_d_core_sct;
  output [1:0] ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output [1:0] ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  input ylineBuf_rsc_5_0_i_oswt_pff;


  // Interconnect Declarations
  wire ylineBuf_rsc_5_0_i_dswt_pff;

  wire[0:0] window_read_and_68_nl;
  wire[0:0] window_read_and_69_nl;
  wire[0:0] window_read_and_70_nl;
  wire[0:0] window_read_and_71_nl;

  // Interconnect Declarations for Component Instantiations 
  assign ylineBuf_rsc_5_0_i_bdwt = ylineBuf_rsc_5_0_i_oswt & core_wen;
  assign ylineBuf_rsc_5_0_i_biwt = (~ core_wten) & ylineBuf_rsc_5_0_i_oswt;
  assign window_read_and_68_nl = (ylineBuf_rsc_5_0_i_ena_d_core_psct[0]) & ylineBuf_rsc_5_0_i_dswt_pff;
  assign ylineBuf_rsc_5_0_i_ena_d_core_sct = {1'b0 , window_read_and_68_nl};
  assign ylineBuf_rsc_5_0_i_dswt_pff = core_wen & ylineBuf_rsc_5_0_i_oswt_pff;
  assign window_read_and_69_nl = (ylineBuf_rsc_5_0_i_wea_d_core_psct[0]) & ylineBuf_rsc_5_0_i_dswt_pff;
  assign ylineBuf_rsc_5_0_i_wea_d_core_sct = {1'b0 , window_read_and_69_nl};
  assign window_read_and_70_nl = (ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])
      & ylineBuf_rsc_5_0_i_dswt_pff;
  assign ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct = {1'b0
      , window_read_and_70_nl};
  assign window_read_and_71_nl = (ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])
      & ylineBuf_rsc_5_0_i_dswt_pff;
  assign ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct = {1'b0
      , window_read_and_71_nl};
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ylineBuf_rsc_4_0_i_1_ylineBuf_rsc_4_0_wait_dp
// ------------------------------------------------------------------


module yuv444dns_core_ylineBuf_rsc_4_0_i_1_ylineBuf_rsc_4_0_wait_dp (
  clk, arst_n, ylineBuf_rsc_4_0_i_adra_d, ylineBuf_rsc_4_0_i_da_d, ylineBuf_rsc_4_0_i_qa_d,
      ylineBuf_rsc_4_0_i_adra_d_core, ylineBuf_rsc_4_0_i_da_d_core, ylineBuf_rsc_4_0_i_qa_d_mxwt,
      ylineBuf_rsc_4_0_i_biwt, ylineBuf_rsc_4_0_i_bdwt
);
  input clk;
  input arst_n;
  output [11:0] ylineBuf_rsc_4_0_i_adra_d;
  output [9:0] ylineBuf_rsc_4_0_i_da_d;
  input [19:0] ylineBuf_rsc_4_0_i_qa_d;
  input [23:0] ylineBuf_rsc_4_0_i_adra_d_core;
  input [19:0] ylineBuf_rsc_4_0_i_da_d_core;
  output [9:0] ylineBuf_rsc_4_0_i_qa_d_mxwt;
  input ylineBuf_rsc_4_0_i_biwt;
  input ylineBuf_rsc_4_0_i_bdwt;


  // Interconnect Declarations
  reg ylineBuf_rsc_4_0_i_bcwt;
  reg [9:0] ylineBuf_rsc_4_0_i_qa_d_bfwt_9_0;


  // Interconnect Declarations for Component Instantiations 
  assign ylineBuf_rsc_4_0_i_qa_d_mxwt = MUX_v_10_2_2((ylineBuf_rsc_4_0_i_qa_d[9:0]),
      ylineBuf_rsc_4_0_i_qa_d_bfwt_9_0, ylineBuf_rsc_4_0_i_bcwt);
  assign ylineBuf_rsc_4_0_i_adra_d = ylineBuf_rsc_4_0_i_adra_d_core[11:0];
  assign ylineBuf_rsc_4_0_i_da_d = ylineBuf_rsc_4_0_i_da_d_core[9:0];
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ylineBuf_rsc_4_0_i_bcwt <= 1'b0;
    end
    else begin
      ylineBuf_rsc_4_0_i_bcwt <= ~((~(ylineBuf_rsc_4_0_i_bcwt | ylineBuf_rsc_4_0_i_biwt))
          | ylineBuf_rsc_4_0_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ylineBuf_rsc_4_0_i_qa_d_bfwt_9_0 <= 10'b0000000000;
    end
    else if ( ylineBuf_rsc_4_0_i_biwt ) begin
      ylineBuf_rsc_4_0_i_qa_d_bfwt_9_0 <= ylineBuf_rsc_4_0_i_qa_d[9:0];
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ylineBuf_rsc_4_0_i_1_ylineBuf_rsc_4_0_wait_ctrl
// ------------------------------------------------------------------


module yuv444dns_core_ylineBuf_rsc_4_0_i_1_ylineBuf_rsc_4_0_wait_ctrl (
  core_wen, core_wten, ylineBuf_rsc_4_0_i_oswt, ylineBuf_rsc_4_0_i_ena_d_core_psct,
      ylineBuf_rsc_4_0_i_wea_d_core_psct, ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct,
      ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct, ylineBuf_rsc_4_0_i_biwt,
      ylineBuf_rsc_4_0_i_bdwt, ylineBuf_rsc_4_0_i_ena_d_core_sct, ylineBuf_rsc_4_0_i_wea_d_core_sct,
      ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct, ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct,
      ylineBuf_rsc_4_0_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input ylineBuf_rsc_4_0_i_oswt;
  input [1:0] ylineBuf_rsc_4_0_i_ena_d_core_psct;
  input [1:0] ylineBuf_rsc_4_0_i_wea_d_core_psct;
  input [1:0] ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  output ylineBuf_rsc_4_0_i_biwt;
  output ylineBuf_rsc_4_0_i_bdwt;
  output [1:0] ylineBuf_rsc_4_0_i_ena_d_core_sct;
  output [1:0] ylineBuf_rsc_4_0_i_wea_d_core_sct;
  output [1:0] ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output [1:0] ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  input ylineBuf_rsc_4_0_i_oswt_pff;


  // Interconnect Declarations
  wire ylineBuf_rsc_4_0_i_dswt_pff;

  wire[0:0] window_read_and_56_nl;
  wire[0:0] window_read_and_57_nl;
  wire[0:0] window_read_and_58_nl;
  wire[0:0] window_read_and_59_nl;

  // Interconnect Declarations for Component Instantiations 
  assign ylineBuf_rsc_4_0_i_bdwt = ylineBuf_rsc_4_0_i_oswt & core_wen;
  assign ylineBuf_rsc_4_0_i_biwt = (~ core_wten) & ylineBuf_rsc_4_0_i_oswt;
  assign window_read_and_56_nl = (ylineBuf_rsc_4_0_i_ena_d_core_psct[0]) & ylineBuf_rsc_4_0_i_dswt_pff;
  assign ylineBuf_rsc_4_0_i_ena_d_core_sct = {1'b0 , window_read_and_56_nl};
  assign ylineBuf_rsc_4_0_i_dswt_pff = core_wen & ylineBuf_rsc_4_0_i_oswt_pff;
  assign window_read_and_57_nl = (ylineBuf_rsc_4_0_i_wea_d_core_psct[0]) & ylineBuf_rsc_4_0_i_dswt_pff;
  assign ylineBuf_rsc_4_0_i_wea_d_core_sct = {1'b0 , window_read_and_57_nl};
  assign window_read_and_58_nl = (ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])
      & ylineBuf_rsc_4_0_i_dswt_pff;
  assign ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct = {1'b0
      , window_read_and_58_nl};
  assign window_read_and_59_nl = (ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])
      & ylineBuf_rsc_4_0_i_dswt_pff;
  assign ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct = {1'b0
      , window_read_and_59_nl};
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ylineBuf_rsc_3_0_i_1_ylineBuf_rsc_3_0_wait_dp
// ------------------------------------------------------------------


module yuv444dns_core_ylineBuf_rsc_3_0_i_1_ylineBuf_rsc_3_0_wait_dp (
  clk, arst_n, ylineBuf_rsc_3_0_i_adra_d, ylineBuf_rsc_3_0_i_da_d, ylineBuf_rsc_3_0_i_qa_d,
      ylineBuf_rsc_3_0_i_adra_d_core, ylineBuf_rsc_3_0_i_da_d_core, ylineBuf_rsc_3_0_i_qa_d_mxwt,
      ylineBuf_rsc_3_0_i_biwt, ylineBuf_rsc_3_0_i_bdwt
);
  input clk;
  input arst_n;
  output [11:0] ylineBuf_rsc_3_0_i_adra_d;
  output [9:0] ylineBuf_rsc_3_0_i_da_d;
  input [19:0] ylineBuf_rsc_3_0_i_qa_d;
  input [23:0] ylineBuf_rsc_3_0_i_adra_d_core;
  input [19:0] ylineBuf_rsc_3_0_i_da_d_core;
  output [9:0] ylineBuf_rsc_3_0_i_qa_d_mxwt;
  input ylineBuf_rsc_3_0_i_biwt;
  input ylineBuf_rsc_3_0_i_bdwt;


  // Interconnect Declarations
  reg ylineBuf_rsc_3_0_i_bcwt;
  reg [9:0] ylineBuf_rsc_3_0_i_qa_d_bfwt_9_0;


  // Interconnect Declarations for Component Instantiations 
  assign ylineBuf_rsc_3_0_i_qa_d_mxwt = MUX_v_10_2_2((ylineBuf_rsc_3_0_i_qa_d[9:0]),
      ylineBuf_rsc_3_0_i_qa_d_bfwt_9_0, ylineBuf_rsc_3_0_i_bcwt);
  assign ylineBuf_rsc_3_0_i_adra_d = ylineBuf_rsc_3_0_i_adra_d_core[11:0];
  assign ylineBuf_rsc_3_0_i_da_d = ylineBuf_rsc_3_0_i_da_d_core[9:0];
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ylineBuf_rsc_3_0_i_bcwt <= 1'b0;
    end
    else begin
      ylineBuf_rsc_3_0_i_bcwt <= ~((~(ylineBuf_rsc_3_0_i_bcwt | ylineBuf_rsc_3_0_i_biwt))
          | ylineBuf_rsc_3_0_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ylineBuf_rsc_3_0_i_qa_d_bfwt_9_0 <= 10'b0000000000;
    end
    else if ( ylineBuf_rsc_3_0_i_biwt ) begin
      ylineBuf_rsc_3_0_i_qa_d_bfwt_9_0 <= ylineBuf_rsc_3_0_i_qa_d[9:0];
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ylineBuf_rsc_3_0_i_1_ylineBuf_rsc_3_0_wait_ctrl
// ------------------------------------------------------------------


module yuv444dns_core_ylineBuf_rsc_3_0_i_1_ylineBuf_rsc_3_0_wait_ctrl (
  core_wen, core_wten, ylineBuf_rsc_3_0_i_oswt, ylineBuf_rsc_3_0_i_ena_d_core_psct,
      ylineBuf_rsc_3_0_i_wea_d_core_psct, ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct,
      ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct, ylineBuf_rsc_3_0_i_biwt,
      ylineBuf_rsc_3_0_i_bdwt, ylineBuf_rsc_3_0_i_ena_d_core_sct, ylineBuf_rsc_3_0_i_wea_d_core_sct,
      ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct, ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct,
      ylineBuf_rsc_3_0_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input ylineBuf_rsc_3_0_i_oswt;
  input [1:0] ylineBuf_rsc_3_0_i_ena_d_core_psct;
  input [1:0] ylineBuf_rsc_3_0_i_wea_d_core_psct;
  input [1:0] ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  output ylineBuf_rsc_3_0_i_biwt;
  output ylineBuf_rsc_3_0_i_bdwt;
  output [1:0] ylineBuf_rsc_3_0_i_ena_d_core_sct;
  output [1:0] ylineBuf_rsc_3_0_i_wea_d_core_sct;
  output [1:0] ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output [1:0] ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  input ylineBuf_rsc_3_0_i_oswt_pff;


  // Interconnect Declarations
  wire ylineBuf_rsc_3_0_i_dswt_pff;

  wire[0:0] window_read_and_44_nl;
  wire[0:0] window_read_and_45_nl;
  wire[0:0] window_read_and_46_nl;
  wire[0:0] window_read_and_47_nl;

  // Interconnect Declarations for Component Instantiations 
  assign ylineBuf_rsc_3_0_i_bdwt = ylineBuf_rsc_3_0_i_oswt & core_wen;
  assign ylineBuf_rsc_3_0_i_biwt = (~ core_wten) & ylineBuf_rsc_3_0_i_oswt;
  assign window_read_and_44_nl = (ylineBuf_rsc_3_0_i_ena_d_core_psct[0]) & ylineBuf_rsc_3_0_i_dswt_pff;
  assign ylineBuf_rsc_3_0_i_ena_d_core_sct = {1'b0 , window_read_and_44_nl};
  assign ylineBuf_rsc_3_0_i_dswt_pff = core_wen & ylineBuf_rsc_3_0_i_oswt_pff;
  assign window_read_and_45_nl = (ylineBuf_rsc_3_0_i_wea_d_core_psct[0]) & ylineBuf_rsc_3_0_i_dswt_pff;
  assign ylineBuf_rsc_3_0_i_wea_d_core_sct = {1'b0 , window_read_and_45_nl};
  assign window_read_and_46_nl = (ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])
      & ylineBuf_rsc_3_0_i_dswt_pff;
  assign ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct = {1'b0
      , window_read_and_46_nl};
  assign window_read_and_47_nl = (ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])
      & ylineBuf_rsc_3_0_i_dswt_pff;
  assign ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct = {1'b0
      , window_read_and_47_nl};
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ylineBuf_rsc_2_0_i_1_ylineBuf_rsc_2_0_wait_dp
// ------------------------------------------------------------------


module yuv444dns_core_ylineBuf_rsc_2_0_i_1_ylineBuf_rsc_2_0_wait_dp (
  clk, arst_n, ylineBuf_rsc_2_0_i_adra_d, ylineBuf_rsc_2_0_i_da_d, ylineBuf_rsc_2_0_i_qa_d,
      ylineBuf_rsc_2_0_i_adra_d_core, ylineBuf_rsc_2_0_i_da_d_core, ylineBuf_rsc_2_0_i_qa_d_mxwt,
      ylineBuf_rsc_2_0_i_biwt, ylineBuf_rsc_2_0_i_bdwt
);
  input clk;
  input arst_n;
  output [11:0] ylineBuf_rsc_2_0_i_adra_d;
  output [9:0] ylineBuf_rsc_2_0_i_da_d;
  input [19:0] ylineBuf_rsc_2_0_i_qa_d;
  input [23:0] ylineBuf_rsc_2_0_i_adra_d_core;
  input [19:0] ylineBuf_rsc_2_0_i_da_d_core;
  output [9:0] ylineBuf_rsc_2_0_i_qa_d_mxwt;
  input ylineBuf_rsc_2_0_i_biwt;
  input ylineBuf_rsc_2_0_i_bdwt;


  // Interconnect Declarations
  reg ylineBuf_rsc_2_0_i_bcwt;
  reg [9:0] ylineBuf_rsc_2_0_i_qa_d_bfwt_9_0;


  // Interconnect Declarations for Component Instantiations 
  assign ylineBuf_rsc_2_0_i_qa_d_mxwt = MUX_v_10_2_2((ylineBuf_rsc_2_0_i_qa_d[9:0]),
      ylineBuf_rsc_2_0_i_qa_d_bfwt_9_0, ylineBuf_rsc_2_0_i_bcwt);
  assign ylineBuf_rsc_2_0_i_adra_d = ylineBuf_rsc_2_0_i_adra_d_core[11:0];
  assign ylineBuf_rsc_2_0_i_da_d = ylineBuf_rsc_2_0_i_da_d_core[9:0];
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ylineBuf_rsc_2_0_i_bcwt <= 1'b0;
    end
    else begin
      ylineBuf_rsc_2_0_i_bcwt <= ~((~(ylineBuf_rsc_2_0_i_bcwt | ylineBuf_rsc_2_0_i_biwt))
          | ylineBuf_rsc_2_0_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ylineBuf_rsc_2_0_i_qa_d_bfwt_9_0 <= 10'b0000000000;
    end
    else if ( ylineBuf_rsc_2_0_i_biwt ) begin
      ylineBuf_rsc_2_0_i_qa_d_bfwt_9_0 <= ylineBuf_rsc_2_0_i_qa_d[9:0];
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ylineBuf_rsc_2_0_i_1_ylineBuf_rsc_2_0_wait_ctrl
// ------------------------------------------------------------------


module yuv444dns_core_ylineBuf_rsc_2_0_i_1_ylineBuf_rsc_2_0_wait_ctrl (
  core_wen, core_wten, ylineBuf_rsc_2_0_i_oswt, ylineBuf_rsc_2_0_i_ena_d_core_psct,
      ylineBuf_rsc_2_0_i_wea_d_core_psct, ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct,
      ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct, ylineBuf_rsc_2_0_i_biwt,
      ylineBuf_rsc_2_0_i_bdwt, ylineBuf_rsc_2_0_i_ena_d_core_sct, ylineBuf_rsc_2_0_i_wea_d_core_sct,
      ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct, ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct,
      ylineBuf_rsc_2_0_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input ylineBuf_rsc_2_0_i_oswt;
  input [1:0] ylineBuf_rsc_2_0_i_ena_d_core_psct;
  input [1:0] ylineBuf_rsc_2_0_i_wea_d_core_psct;
  input [1:0] ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  output ylineBuf_rsc_2_0_i_biwt;
  output ylineBuf_rsc_2_0_i_bdwt;
  output [1:0] ylineBuf_rsc_2_0_i_ena_d_core_sct;
  output [1:0] ylineBuf_rsc_2_0_i_wea_d_core_sct;
  output [1:0] ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output [1:0] ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  input ylineBuf_rsc_2_0_i_oswt_pff;


  // Interconnect Declarations
  wire ylineBuf_rsc_2_0_i_dswt_pff;

  wire[0:0] window_read_and_32_nl;
  wire[0:0] window_read_and_33_nl;
  wire[0:0] window_read_and_34_nl;
  wire[0:0] window_read_and_35_nl;

  // Interconnect Declarations for Component Instantiations 
  assign ylineBuf_rsc_2_0_i_bdwt = ylineBuf_rsc_2_0_i_oswt & core_wen;
  assign ylineBuf_rsc_2_0_i_biwt = (~ core_wten) & ylineBuf_rsc_2_0_i_oswt;
  assign window_read_and_32_nl = (ylineBuf_rsc_2_0_i_ena_d_core_psct[0]) & ylineBuf_rsc_2_0_i_dswt_pff;
  assign ylineBuf_rsc_2_0_i_ena_d_core_sct = {1'b0 , window_read_and_32_nl};
  assign ylineBuf_rsc_2_0_i_dswt_pff = core_wen & ylineBuf_rsc_2_0_i_oswt_pff;
  assign window_read_and_33_nl = (ylineBuf_rsc_2_0_i_wea_d_core_psct[0]) & ylineBuf_rsc_2_0_i_dswt_pff;
  assign ylineBuf_rsc_2_0_i_wea_d_core_sct = {1'b0 , window_read_and_33_nl};
  assign window_read_and_34_nl = (ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])
      & ylineBuf_rsc_2_0_i_dswt_pff;
  assign ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct = {1'b0
      , window_read_and_34_nl};
  assign window_read_and_35_nl = (ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])
      & ylineBuf_rsc_2_0_i_dswt_pff;
  assign ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct = {1'b0
      , window_read_and_35_nl};
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ylineBuf_rsc_1_0_i_1_ylineBuf_rsc_1_0_wait_dp
// ------------------------------------------------------------------


module yuv444dns_core_ylineBuf_rsc_1_0_i_1_ylineBuf_rsc_1_0_wait_dp (
  clk, arst_n, ylineBuf_rsc_1_0_i_adra_d, ylineBuf_rsc_1_0_i_da_d, ylineBuf_rsc_1_0_i_qa_d,
      ylineBuf_rsc_1_0_i_adra_d_core, ylineBuf_rsc_1_0_i_da_d_core, ylineBuf_rsc_1_0_i_qa_d_mxwt,
      ylineBuf_rsc_1_0_i_biwt, ylineBuf_rsc_1_0_i_bdwt
);
  input clk;
  input arst_n;
  output [11:0] ylineBuf_rsc_1_0_i_adra_d;
  output [9:0] ylineBuf_rsc_1_0_i_da_d;
  input [19:0] ylineBuf_rsc_1_0_i_qa_d;
  input [23:0] ylineBuf_rsc_1_0_i_adra_d_core;
  input [19:0] ylineBuf_rsc_1_0_i_da_d_core;
  output [9:0] ylineBuf_rsc_1_0_i_qa_d_mxwt;
  input ylineBuf_rsc_1_0_i_biwt;
  input ylineBuf_rsc_1_0_i_bdwt;


  // Interconnect Declarations
  reg ylineBuf_rsc_1_0_i_bcwt;
  reg [9:0] ylineBuf_rsc_1_0_i_qa_d_bfwt_9_0;


  // Interconnect Declarations for Component Instantiations 
  assign ylineBuf_rsc_1_0_i_qa_d_mxwt = MUX_v_10_2_2((ylineBuf_rsc_1_0_i_qa_d[9:0]),
      ylineBuf_rsc_1_0_i_qa_d_bfwt_9_0, ylineBuf_rsc_1_0_i_bcwt);
  assign ylineBuf_rsc_1_0_i_adra_d = ylineBuf_rsc_1_0_i_adra_d_core[11:0];
  assign ylineBuf_rsc_1_0_i_da_d = ylineBuf_rsc_1_0_i_da_d_core[9:0];
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ylineBuf_rsc_1_0_i_bcwt <= 1'b0;
    end
    else begin
      ylineBuf_rsc_1_0_i_bcwt <= ~((~(ylineBuf_rsc_1_0_i_bcwt | ylineBuf_rsc_1_0_i_biwt))
          | ylineBuf_rsc_1_0_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ylineBuf_rsc_1_0_i_qa_d_bfwt_9_0 <= 10'b0000000000;
    end
    else if ( ylineBuf_rsc_1_0_i_biwt ) begin
      ylineBuf_rsc_1_0_i_qa_d_bfwt_9_0 <= ylineBuf_rsc_1_0_i_qa_d[9:0];
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ylineBuf_rsc_1_0_i_1_ylineBuf_rsc_1_0_wait_ctrl
// ------------------------------------------------------------------


module yuv444dns_core_ylineBuf_rsc_1_0_i_1_ylineBuf_rsc_1_0_wait_ctrl (
  core_wen, core_wten, ylineBuf_rsc_1_0_i_oswt, ylineBuf_rsc_1_0_i_ena_d_core_psct,
      ylineBuf_rsc_1_0_i_wea_d_core_psct, ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct,
      ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct, ylineBuf_rsc_1_0_i_biwt,
      ylineBuf_rsc_1_0_i_bdwt, ylineBuf_rsc_1_0_i_ena_d_core_sct, ylineBuf_rsc_1_0_i_wea_d_core_sct,
      ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct, ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct,
      ylineBuf_rsc_1_0_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input ylineBuf_rsc_1_0_i_oswt;
  input [1:0] ylineBuf_rsc_1_0_i_ena_d_core_psct;
  input [1:0] ylineBuf_rsc_1_0_i_wea_d_core_psct;
  input [1:0] ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  output ylineBuf_rsc_1_0_i_biwt;
  output ylineBuf_rsc_1_0_i_bdwt;
  output [1:0] ylineBuf_rsc_1_0_i_ena_d_core_sct;
  output [1:0] ylineBuf_rsc_1_0_i_wea_d_core_sct;
  output [1:0] ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output [1:0] ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  input ylineBuf_rsc_1_0_i_oswt_pff;


  // Interconnect Declarations
  wire ylineBuf_rsc_1_0_i_dswt_pff;

  wire[0:0] window_read_and_20_nl;
  wire[0:0] window_read_and_21_nl;
  wire[0:0] window_read_and_22_nl;
  wire[0:0] window_read_and_23_nl;

  // Interconnect Declarations for Component Instantiations 
  assign ylineBuf_rsc_1_0_i_bdwt = ylineBuf_rsc_1_0_i_oswt & core_wen;
  assign ylineBuf_rsc_1_0_i_biwt = (~ core_wten) & ylineBuf_rsc_1_0_i_oswt;
  assign window_read_and_20_nl = (ylineBuf_rsc_1_0_i_ena_d_core_psct[0]) & ylineBuf_rsc_1_0_i_dswt_pff;
  assign ylineBuf_rsc_1_0_i_ena_d_core_sct = {1'b0 , window_read_and_20_nl};
  assign ylineBuf_rsc_1_0_i_dswt_pff = core_wen & ylineBuf_rsc_1_0_i_oswt_pff;
  assign window_read_and_21_nl = (ylineBuf_rsc_1_0_i_wea_d_core_psct[0]) & ylineBuf_rsc_1_0_i_dswt_pff;
  assign ylineBuf_rsc_1_0_i_wea_d_core_sct = {1'b0 , window_read_and_21_nl};
  assign window_read_and_22_nl = (ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])
      & ylineBuf_rsc_1_0_i_dswt_pff;
  assign ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct = {1'b0
      , window_read_and_22_nl};
  assign window_read_and_23_nl = (ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])
      & ylineBuf_rsc_1_0_i_dswt_pff;
  assign ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct = {1'b0
      , window_read_and_23_nl};
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ylineBuf_rsc_0_0_i_1_ylineBuf_rsc_0_0_wait_dp
// ------------------------------------------------------------------


module yuv444dns_core_ylineBuf_rsc_0_0_i_1_ylineBuf_rsc_0_0_wait_dp (
  clk, arst_n, ylineBuf_rsc_0_0_i_adra_d, ylineBuf_rsc_0_0_i_da_d, ylineBuf_rsc_0_0_i_qa_d,
      ylineBuf_rsc_0_0_i_adra_d_core, ylineBuf_rsc_0_0_i_da_d_core, ylineBuf_rsc_0_0_i_qa_d_mxwt,
      ylineBuf_rsc_0_0_i_biwt, ylineBuf_rsc_0_0_i_bdwt
);
  input clk;
  input arst_n;
  output [11:0] ylineBuf_rsc_0_0_i_adra_d;
  output [9:0] ylineBuf_rsc_0_0_i_da_d;
  input [19:0] ylineBuf_rsc_0_0_i_qa_d;
  input [23:0] ylineBuf_rsc_0_0_i_adra_d_core;
  input [19:0] ylineBuf_rsc_0_0_i_da_d_core;
  output [9:0] ylineBuf_rsc_0_0_i_qa_d_mxwt;
  input ylineBuf_rsc_0_0_i_biwt;
  input ylineBuf_rsc_0_0_i_bdwt;


  // Interconnect Declarations
  reg ylineBuf_rsc_0_0_i_bcwt;
  reg [9:0] ylineBuf_rsc_0_0_i_qa_d_bfwt_9_0;


  // Interconnect Declarations for Component Instantiations 
  assign ylineBuf_rsc_0_0_i_qa_d_mxwt = MUX_v_10_2_2((ylineBuf_rsc_0_0_i_qa_d[9:0]),
      ylineBuf_rsc_0_0_i_qa_d_bfwt_9_0, ylineBuf_rsc_0_0_i_bcwt);
  assign ylineBuf_rsc_0_0_i_adra_d = ylineBuf_rsc_0_0_i_adra_d_core[11:0];
  assign ylineBuf_rsc_0_0_i_da_d = ylineBuf_rsc_0_0_i_da_d_core[9:0];
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ylineBuf_rsc_0_0_i_bcwt <= 1'b0;
    end
    else begin
      ylineBuf_rsc_0_0_i_bcwt <= ~((~(ylineBuf_rsc_0_0_i_bcwt | ylineBuf_rsc_0_0_i_biwt))
          | ylineBuf_rsc_0_0_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ylineBuf_rsc_0_0_i_qa_d_bfwt_9_0 <= 10'b0000000000;
    end
    else if ( ylineBuf_rsc_0_0_i_biwt ) begin
      ylineBuf_rsc_0_0_i_qa_d_bfwt_9_0 <= ylineBuf_rsc_0_0_i_qa_d[9:0];
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ylineBuf_rsc_0_0_i_1_ylineBuf_rsc_0_0_wait_ctrl
// ------------------------------------------------------------------


module yuv444dns_core_ylineBuf_rsc_0_0_i_1_ylineBuf_rsc_0_0_wait_ctrl (
  core_wen, core_wten, ylineBuf_rsc_0_0_i_oswt, ylineBuf_rsc_0_0_i_ena_d_core_psct,
      ylineBuf_rsc_0_0_i_wea_d_core_psct, ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct,
      ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct, ylineBuf_rsc_0_0_i_biwt,
      ylineBuf_rsc_0_0_i_bdwt, ylineBuf_rsc_0_0_i_ena_d_core_sct, ylineBuf_rsc_0_0_i_wea_d_core_sct,
      ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct, ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct,
      ylineBuf_rsc_0_0_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input ylineBuf_rsc_0_0_i_oswt;
  input [1:0] ylineBuf_rsc_0_0_i_ena_d_core_psct;
  input [1:0] ylineBuf_rsc_0_0_i_wea_d_core_psct;
  input [1:0] ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  output ylineBuf_rsc_0_0_i_biwt;
  output ylineBuf_rsc_0_0_i_bdwt;
  output [1:0] ylineBuf_rsc_0_0_i_ena_d_core_sct;
  output [1:0] ylineBuf_rsc_0_0_i_wea_d_core_sct;
  output [1:0] ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output [1:0] ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  input ylineBuf_rsc_0_0_i_oswt_pff;


  // Interconnect Declarations
  wire ylineBuf_rsc_0_0_i_dswt_pff;

  wire[0:0] window_read_and_8_nl;
  wire[0:0] window_read_and_9_nl;
  wire[0:0] window_read_and_10_nl;
  wire[0:0] window_read_and_11_nl;

  // Interconnect Declarations for Component Instantiations 
  assign ylineBuf_rsc_0_0_i_bdwt = ylineBuf_rsc_0_0_i_oswt & core_wen;
  assign ylineBuf_rsc_0_0_i_biwt = (~ core_wten) & ylineBuf_rsc_0_0_i_oswt;
  assign window_read_and_8_nl = (ylineBuf_rsc_0_0_i_ena_d_core_psct[0]) & ylineBuf_rsc_0_0_i_dswt_pff;
  assign ylineBuf_rsc_0_0_i_ena_d_core_sct = {1'b0 , window_read_and_8_nl};
  assign ylineBuf_rsc_0_0_i_dswt_pff = core_wen & ylineBuf_rsc_0_0_i_oswt_pff;
  assign window_read_and_9_nl = (ylineBuf_rsc_0_0_i_wea_d_core_psct[0]) & ylineBuf_rsc_0_0_i_dswt_pff;
  assign ylineBuf_rsc_0_0_i_wea_d_core_sct = {1'b0 , window_read_and_9_nl};
  assign window_read_and_10_nl = (ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])
      & ylineBuf_rsc_0_0_i_dswt_pff;
  assign ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct = {1'b0
      , window_read_and_10_nl};
  assign window_read_and_11_nl = (ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])
      & ylineBuf_rsc_0_0_i_dswt_pff;
  assign ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct = {1'b0
      , window_read_and_11_nl};
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_dst_v_rsci_dst_v_wait_dp
// ------------------------------------------------------------------


module yuv444dns_core_dst_v_rsci_dst_v_wait_dp (
  clk, arst_n, dst_v_rsci_oswt, dst_v_rsci_wen_comp, dst_v_rsci_biwt, dst_v_rsci_bdwt,
      dst_v_rsci_bcwt
);
  input clk;
  input arst_n;
  input dst_v_rsci_oswt;
  output dst_v_rsci_wen_comp;
  input dst_v_rsci_biwt;
  input dst_v_rsci_bdwt;
  output dst_v_rsci_bcwt;
  reg dst_v_rsci_bcwt;



  // Interconnect Declarations for Component Instantiations 
  assign dst_v_rsci_wen_comp = (~ dst_v_rsci_oswt) | dst_v_rsci_biwt | dst_v_rsci_bcwt;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dst_v_rsci_bcwt <= 1'b0;
    end
    else begin
      dst_v_rsci_bcwt <= ~((~(dst_v_rsci_bcwt | dst_v_rsci_biwt)) | dst_v_rsci_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_dst_v_rsci_dst_v_wait_ctrl
// ------------------------------------------------------------------


module yuv444dns_core_dst_v_rsci_dst_v_wait_ctrl (
  core_wen, dst_v_rsci_oswt, dst_v_rsci_irdy, dst_v_rsci_biwt, dst_v_rsci_bdwt, dst_v_rsci_bcwt,
      dst_v_rsci_ivld_core_sct
);
  input core_wen;
  input dst_v_rsci_oswt;
  input dst_v_rsci_irdy;
  output dst_v_rsci_biwt;
  output dst_v_rsci_bdwt;
  input dst_v_rsci_bcwt;
  output dst_v_rsci_ivld_core_sct;


  // Interconnect Declarations
  wire dst_v_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign dst_v_rsci_bdwt = dst_v_rsci_oswt & core_wen;
  assign dst_v_rsci_biwt = dst_v_rsci_ogwt & dst_v_rsci_irdy;
  assign dst_v_rsci_ogwt = dst_v_rsci_oswt & (~ dst_v_rsci_bcwt);
  assign dst_v_rsci_ivld_core_sct = dst_v_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_dst_u_rsci_dst_u_wait_dp
// ------------------------------------------------------------------


module yuv444dns_core_dst_u_rsci_dst_u_wait_dp (
  clk, arst_n, dst_u_rsci_oswt, dst_u_rsci_wen_comp, dst_u_rsci_biwt, dst_u_rsci_bdwt,
      dst_u_rsci_bcwt
);
  input clk;
  input arst_n;
  input dst_u_rsci_oswt;
  output dst_u_rsci_wen_comp;
  input dst_u_rsci_biwt;
  input dst_u_rsci_bdwt;
  output dst_u_rsci_bcwt;
  reg dst_u_rsci_bcwt;



  // Interconnect Declarations for Component Instantiations 
  assign dst_u_rsci_wen_comp = (~ dst_u_rsci_oswt) | dst_u_rsci_biwt | dst_u_rsci_bcwt;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dst_u_rsci_bcwt <= 1'b0;
    end
    else begin
      dst_u_rsci_bcwt <= ~((~(dst_u_rsci_bcwt | dst_u_rsci_biwt)) | dst_u_rsci_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_dst_u_rsci_dst_u_wait_ctrl
// ------------------------------------------------------------------


module yuv444dns_core_dst_u_rsci_dst_u_wait_ctrl (
  core_wen, dst_u_rsci_oswt, dst_u_rsci_irdy, dst_u_rsci_biwt, dst_u_rsci_bdwt, dst_u_rsci_bcwt,
      dst_u_rsci_ivld_core_sct
);
  input core_wen;
  input dst_u_rsci_oswt;
  input dst_u_rsci_irdy;
  output dst_u_rsci_biwt;
  output dst_u_rsci_bdwt;
  input dst_u_rsci_bcwt;
  output dst_u_rsci_ivld_core_sct;


  // Interconnect Declarations
  wire dst_u_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign dst_u_rsci_bdwt = dst_u_rsci_oswt & core_wen;
  assign dst_u_rsci_biwt = dst_u_rsci_ogwt & dst_u_rsci_irdy;
  assign dst_u_rsci_ogwt = dst_u_rsci_oswt & (~ dst_u_rsci_bcwt);
  assign dst_u_rsci_ivld_core_sct = dst_u_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_dst_y_rsci_dst_y_wait_dp
// ------------------------------------------------------------------


module yuv444dns_core_dst_y_rsci_dst_y_wait_dp (
  clk, arst_n, dst_y_rsci_oswt, dst_y_rsci_wen_comp, dst_y_rsci_biwt, dst_y_rsci_bdwt,
      dst_y_rsci_bcwt
);
  input clk;
  input arst_n;
  input dst_y_rsci_oswt;
  output dst_y_rsci_wen_comp;
  input dst_y_rsci_biwt;
  input dst_y_rsci_bdwt;
  output dst_y_rsci_bcwt;
  reg dst_y_rsci_bcwt;



  // Interconnect Declarations for Component Instantiations 
  assign dst_y_rsci_wen_comp = (~ dst_y_rsci_oswt) | dst_y_rsci_biwt | dst_y_rsci_bcwt;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dst_y_rsci_bcwt <= 1'b0;
    end
    else begin
      dst_y_rsci_bcwt <= ~((~(dst_y_rsci_bcwt | dst_y_rsci_biwt)) | dst_y_rsci_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_dst_y_rsci_dst_y_wait_ctrl
// ------------------------------------------------------------------


module yuv444dns_core_dst_y_rsci_dst_y_wait_ctrl (
  core_wen, dst_y_rsci_oswt, dst_y_rsci_irdy, dst_y_rsci_biwt, dst_y_rsci_bdwt, dst_y_rsci_bcwt,
      dst_y_rsci_ivld_core_sct
);
  input core_wen;
  input dst_y_rsci_oswt;
  input dst_y_rsci_irdy;
  output dst_y_rsci_biwt;
  output dst_y_rsci_bdwt;
  input dst_y_rsci_bcwt;
  output dst_y_rsci_ivld_core_sct;


  // Interconnect Declarations
  wire dst_y_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign dst_y_rsci_bdwt = dst_y_rsci_oswt & core_wen;
  assign dst_y_rsci_biwt = dst_y_rsci_ogwt & dst_y_rsci_irdy;
  assign dst_y_rsci_ogwt = dst_y_rsci_oswt & (~ dst_y_rsci_bcwt);
  assign dst_y_rsci_ivld_core_sct = dst_y_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_src_v_rsci_src_v_wait_dp
// ------------------------------------------------------------------


module yuv444dns_core_src_v_rsci_src_v_wait_dp (
  clk, arst_n, src_v_rsci_oswt, src_v_rsci_wen_comp, src_v_rsci_idat_mxwt, src_v_rsci_biwt,
      src_v_rsci_bdwt, src_v_rsci_bcwt, src_v_rsci_idat
);
  input clk;
  input arst_n;
  input src_v_rsci_oswt;
  output src_v_rsci_wen_comp;
  output [9:0] src_v_rsci_idat_mxwt;
  input src_v_rsci_biwt;
  input src_v_rsci_bdwt;
  output src_v_rsci_bcwt;
  reg src_v_rsci_bcwt;
  input [9:0] src_v_rsci_idat;


  // Interconnect Declarations
  reg [9:0] src_v_rsci_idat_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign src_v_rsci_wen_comp = (~ src_v_rsci_oswt) | src_v_rsci_biwt | src_v_rsci_bcwt;
  assign src_v_rsci_idat_mxwt = MUX_v_10_2_2(src_v_rsci_idat, src_v_rsci_idat_bfwt,
      src_v_rsci_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      src_v_rsci_bcwt <= 1'b0;
    end
    else begin
      src_v_rsci_bcwt <= ~((~(src_v_rsci_bcwt | src_v_rsci_biwt)) | src_v_rsci_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      src_v_rsci_idat_bfwt <= 10'b0000000000;
    end
    else if ( src_v_rsci_biwt ) begin
      src_v_rsci_idat_bfwt <= src_v_rsci_idat;
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_src_v_rsci_src_v_wait_ctrl
// ------------------------------------------------------------------


module yuv444dns_core_src_v_rsci_src_v_wait_ctrl (
  core_wen, src_v_rsci_oswt, src_v_rsci_biwt, src_v_rsci_bdwt, src_v_rsci_bcwt, src_v_rsci_irdy_core_sct,
      src_v_rsci_ivld
);
  input core_wen;
  input src_v_rsci_oswt;
  output src_v_rsci_biwt;
  output src_v_rsci_bdwt;
  input src_v_rsci_bcwt;
  output src_v_rsci_irdy_core_sct;
  input src_v_rsci_ivld;


  // Interconnect Declarations
  wire src_v_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign src_v_rsci_bdwt = src_v_rsci_oswt & core_wen;
  assign src_v_rsci_biwt = src_v_rsci_ogwt & src_v_rsci_ivld;
  assign src_v_rsci_ogwt = src_v_rsci_oswt & (~ src_v_rsci_bcwt);
  assign src_v_rsci_irdy_core_sct = src_v_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_src_u_rsci_src_u_wait_dp
// ------------------------------------------------------------------


module yuv444dns_core_src_u_rsci_src_u_wait_dp (
  clk, arst_n, src_u_rsci_oswt, src_u_rsci_wen_comp, src_u_rsci_idat_mxwt, src_u_rsci_biwt,
      src_u_rsci_bdwt, src_u_rsci_bcwt, src_u_rsci_idat
);
  input clk;
  input arst_n;
  input src_u_rsci_oswt;
  output src_u_rsci_wen_comp;
  output [9:0] src_u_rsci_idat_mxwt;
  input src_u_rsci_biwt;
  input src_u_rsci_bdwt;
  output src_u_rsci_bcwt;
  reg src_u_rsci_bcwt;
  input [9:0] src_u_rsci_idat;


  // Interconnect Declarations
  reg [9:0] src_u_rsci_idat_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign src_u_rsci_wen_comp = (~ src_u_rsci_oswt) | src_u_rsci_biwt | src_u_rsci_bcwt;
  assign src_u_rsci_idat_mxwt = MUX_v_10_2_2(src_u_rsci_idat, src_u_rsci_idat_bfwt,
      src_u_rsci_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      src_u_rsci_bcwt <= 1'b0;
    end
    else begin
      src_u_rsci_bcwt <= ~((~(src_u_rsci_bcwt | src_u_rsci_biwt)) | src_u_rsci_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      src_u_rsci_idat_bfwt <= 10'b0000000000;
    end
    else if ( src_u_rsci_biwt ) begin
      src_u_rsci_idat_bfwt <= src_u_rsci_idat;
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_src_u_rsci_src_u_wait_ctrl
// ------------------------------------------------------------------


module yuv444dns_core_src_u_rsci_src_u_wait_ctrl (
  core_wen, src_u_rsci_oswt, src_u_rsci_biwt, src_u_rsci_bdwt, src_u_rsci_bcwt, src_u_rsci_irdy_core_sct,
      src_u_rsci_ivld
);
  input core_wen;
  input src_u_rsci_oswt;
  output src_u_rsci_biwt;
  output src_u_rsci_bdwt;
  input src_u_rsci_bcwt;
  output src_u_rsci_irdy_core_sct;
  input src_u_rsci_ivld;


  // Interconnect Declarations
  wire src_u_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign src_u_rsci_bdwt = src_u_rsci_oswt & core_wen;
  assign src_u_rsci_biwt = src_u_rsci_ogwt & src_u_rsci_ivld;
  assign src_u_rsci_ogwt = src_u_rsci_oswt & (~ src_u_rsci_bcwt);
  assign src_u_rsci_irdy_core_sct = src_u_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_src_y_rsci_src_y_wait_dp
// ------------------------------------------------------------------


module yuv444dns_core_src_y_rsci_src_y_wait_dp (
  clk, arst_n, src_y_rsci_oswt, src_y_rsci_wen_comp, src_y_rsci_idat_mxwt, src_y_rsci_biwt,
      src_y_rsci_bdwt, src_y_rsci_bcwt, src_y_rsci_idat
);
  input clk;
  input arst_n;
  input src_y_rsci_oswt;
  output src_y_rsci_wen_comp;
  output [9:0] src_y_rsci_idat_mxwt;
  input src_y_rsci_biwt;
  input src_y_rsci_bdwt;
  output src_y_rsci_bcwt;
  reg src_y_rsci_bcwt;
  input [9:0] src_y_rsci_idat;


  // Interconnect Declarations
  reg [9:0] src_y_rsci_idat_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign src_y_rsci_wen_comp = (~ src_y_rsci_oswt) | src_y_rsci_biwt | src_y_rsci_bcwt;
  assign src_y_rsci_idat_mxwt = MUX_v_10_2_2(src_y_rsci_idat, src_y_rsci_idat_bfwt,
      src_y_rsci_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      src_y_rsci_bcwt <= 1'b0;
    end
    else begin
      src_y_rsci_bcwt <= ~((~(src_y_rsci_bcwt | src_y_rsci_biwt)) | src_y_rsci_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      src_y_rsci_idat_bfwt <= 10'b0000000000;
    end
    else if ( src_y_rsci_biwt ) begin
      src_y_rsci_idat_bfwt <= src_y_rsci_idat;
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_src_y_rsci_src_y_wait_ctrl
// ------------------------------------------------------------------


module yuv444dns_core_src_y_rsci_src_y_wait_ctrl (
  core_wen, src_y_rsci_oswt, src_y_rsci_biwt, src_y_rsci_bdwt, src_y_rsci_bcwt, src_y_rsci_irdy_core_sct,
      src_y_rsci_ivld
);
  input core_wen;
  input src_y_rsci_oswt;
  output src_y_rsci_biwt;
  output src_y_rsci_bdwt;
  input src_y_rsci_bcwt;
  output src_y_rsci_irdy_core_sct;
  input src_y_rsci_ivld;


  // Interconnect Declarations
  wire src_y_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign src_y_rsci_bdwt = src_y_rsci_oswt & core_wen;
  assign src_y_rsci_biwt = src_y_rsci_ogwt & src_y_rsci_ivld;
  assign src_y_rsci_ogwt = src_y_rsci_oswt & (~ src_y_rsci_bcwt);
  assign src_y_rsci_irdy_core_sct = src_y_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_ccs_sample_mem_ccs_ram_sync_dualport_rwport_600_10_12_4096_4096_10_5_gen
// ------------------------------------------------------------------


module scaledown_ccs_sample_mem_ccs_ram_sync_dualport_rwport_600_10_12_4096_4096_10_5_gen
    (
  qb, web, enb, db, adrb, qa, wea, ena, da, adra, adra_d, da_d, ena_d, wea_d, qa_d,
      port_0_rw_ram_ir_internal_RMASK_B_d, port_0_rw_ram_ir_internal_WMASK_B_d
);
  input [9:0] qb;
  output web;
  output enb;
  output [9:0] db;
  output [11:0] adrb;
  input [9:0] qa;
  output wea;
  output ena;
  output [9:0] da;
  output [11:0] adra;
  input [23:0] adra_d;
  input [19:0] da_d;
  input [1:0] ena_d;
  input [1:0] wea_d;
  output [19:0] qa_d;
  input [1:0] port_0_rw_ram_ir_internal_RMASK_B_d;
  input [1:0] port_0_rw_ram_ir_internal_WMASK_B_d;


  wire scaledown_col_if_if_else_if_else_if_or_nl;
  wire scaledown_col_if_if_else_if_else_if_or_1_nl;

  // Interconnect Declarations for Component Instantiations 
  assign qa_d[19:10] = qb;
  assign web = (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign scaledown_col_if_if_else_if_else_if_or_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[1])
      | (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign enb = scaledown_col_if_if_else_if_else_if_or_nl;
  assign db = (da_d[19:10]);
  assign adrb = (adra_d[23:12]);
  assign qa_d[9:0] = qa;
  assign wea = (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign scaledown_col_if_if_else_if_else_if_or_1_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[0])
      | (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign ena = scaledown_col_if_if_else_if_else_if_or_1_nl;
  assign da = (da_d[9:0]);
  assign adra = (adra_d[11:0]);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_ccs_sample_mem_ccs_ram_sync_dualport_rwport_599_10_12_4096_4096_10_5_gen
// ------------------------------------------------------------------


module scaledown_ccs_sample_mem_ccs_ram_sync_dualport_rwport_599_10_12_4096_4096_10_5_gen
    (
  qb, web, enb, db, adrb, qa, wea, ena, da, adra, adra_d, da_d, ena_d, wea_d, qa_d,
      port_0_rw_ram_ir_internal_RMASK_B_d, port_0_rw_ram_ir_internal_WMASK_B_d
);
  input [9:0] qb;
  output web;
  output enb;
  output [9:0] db;
  output [11:0] adrb;
  input [9:0] qa;
  output wea;
  output ena;
  output [9:0] da;
  output [11:0] adra;
  input [23:0] adra_d;
  input [19:0] da_d;
  input [1:0] ena_d;
  input [1:0] wea_d;
  output [19:0] qa_d;
  input [1:0] port_0_rw_ram_ir_internal_RMASK_B_d;
  input [1:0] port_0_rw_ram_ir_internal_WMASK_B_d;


  wire scaledown_col_if_if_if_if_or_nl;
  wire scaledown_col_if_if_if_if_or_1_nl;

  // Interconnect Declarations for Component Instantiations 
  assign qa_d[19:10] = qb;
  assign web = (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign scaledown_col_if_if_if_if_or_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[1])
      | (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign enb = scaledown_col_if_if_if_if_or_nl;
  assign db = (da_d[19:10]);
  assign adrb = (adra_d[23:12]);
  assign qa_d[9:0] = qa;
  assign wea = (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign scaledown_col_if_if_if_if_or_1_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[0])
      | (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign ena = scaledown_col_if_if_if_if_or_1_nl;
  assign da = (da_d[9:0]);
  assign adra = (adra_d[11:0]);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_ccs_sample_mem_ccs_ram_sync_dualport_rwport_598_10_12_4096_4096_10_5_gen
// ------------------------------------------------------------------


module scaledown_ccs_sample_mem_ccs_ram_sync_dualport_rwport_598_10_12_4096_4096_10_5_gen
    (
  qb, web, enb, db, adrb, qa, wea, ena, da, adra, adra_d, da_d, ena_d, wea_d, qa_d,
      port_0_rw_ram_ir_internal_RMASK_B_d, port_0_rw_ram_ir_internal_WMASK_B_d
);
  input [9:0] qb;
  output web;
  output enb;
  output [9:0] db;
  output [11:0] adrb;
  input [9:0] qa;
  output wea;
  output ena;
  output [9:0] da;
  output [11:0] adra;
  input [23:0] adra_d;
  input [19:0] da_d;
  input [1:0] ena_d;
  input [1:0] wea_d;
  output [19:0] qa_d;
  input [1:0] port_0_rw_ram_ir_internal_RMASK_B_d;
  input [1:0] port_0_rw_ram_ir_internal_WMASK_B_d;


  wire scaledown_col_if_if_if_if_or_nl;
  wire scaledown_col_if_if_if_if_or_1_nl;

  // Interconnect Declarations for Component Instantiations 
  assign qa_d[19:10] = qb;
  assign web = (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign scaledown_col_if_if_if_if_or_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[1])
      | (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign enb = scaledown_col_if_if_if_if_or_nl;
  assign db = (da_d[19:10]);
  assign adrb = (adra_d[23:12]);
  assign qa_d[9:0] = qa;
  assign wea = (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign scaledown_col_if_if_if_if_or_1_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[0])
      | (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign ena = scaledown_col_if_if_if_if_or_1_nl;
  assign da = (da_d[9:0]);
  assign adra = (adra_d[11:0]);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_ccs_sample_mem_ccs_ram_sync_dualport_rwport_597_10_12_4096_4096_10_5_gen
// ------------------------------------------------------------------


module scaledown_ccs_sample_mem_ccs_ram_sync_dualport_rwport_597_10_12_4096_4096_10_5_gen
    (
  qb, web, enb, db, adrb, qa, wea, ena, da, adra, adra_d, da_d, ena_d, wea_d, qa_d,
      port_0_rw_ram_ir_internal_RMASK_B_d, port_0_rw_ram_ir_internal_WMASK_B_d
);
  input [9:0] qb;
  output web;
  output enb;
  output [9:0] db;
  output [11:0] adrb;
  input [9:0] qa;
  output wea;
  output ena;
  output [9:0] da;
  output [11:0] adra;
  input [23:0] adra_d;
  input [19:0] da_d;
  input [1:0] ena_d;
  input [1:0] wea_d;
  output [19:0] qa_d;
  input [1:0] port_0_rw_ram_ir_internal_RMASK_B_d;
  input [1:0] port_0_rw_ram_ir_internal_WMASK_B_d;


  wire scaledown_col_if_if_else_if_else_if_or_nl;
  wire scaledown_col_if_if_else_if_else_if_or_1_nl;

  // Interconnect Declarations for Component Instantiations 
  assign qa_d[19:10] = qb;
  assign web = (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign scaledown_col_if_if_else_if_else_if_or_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[1])
      | (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign enb = scaledown_col_if_if_else_if_else_if_or_nl;
  assign db = (da_d[19:10]);
  assign adrb = (adra_d[23:12]);
  assign qa_d[9:0] = qa;
  assign wea = (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign scaledown_col_if_if_else_if_else_if_or_1_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[0])
      | (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign ena = scaledown_col_if_if_else_if_else_if_or_1_nl;
  assign da = (da_d[9:0]);
  assign adra = (adra_d[11:0]);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_ccs_sample_mem_ccs_ram_sync_dualport_rwport_596_10_12_4096_4096_10_5_gen
// ------------------------------------------------------------------


module scaledown_ccs_sample_mem_ccs_ram_sync_dualport_rwport_596_10_12_4096_4096_10_5_gen
    (
  qb, web, enb, db, adrb, qa, wea, ena, da, adra, adra_d, da_d, ena_d, wea_d, qa_d,
      port_0_rw_ram_ir_internal_RMASK_B_d, port_0_rw_ram_ir_internal_WMASK_B_d
);
  input [9:0] qb;
  output web;
  output enb;
  output [9:0] db;
  output [11:0] adrb;
  input [9:0] qa;
  output wea;
  output ena;
  output [9:0] da;
  output [11:0] adra;
  input [23:0] adra_d;
  input [19:0] da_d;
  input [1:0] ena_d;
  input [1:0] wea_d;
  output [19:0] qa_d;
  input [1:0] port_0_rw_ram_ir_internal_RMASK_B_d;
  input [1:0] port_0_rw_ram_ir_internal_WMASK_B_d;


  wire scaledown_col_if_if_if_if_or_nl;
  wire scaledown_col_if_if_if_if_or_1_nl;

  // Interconnect Declarations for Component Instantiations 
  assign qa_d[19:10] = qb;
  assign web = (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign scaledown_col_if_if_if_if_or_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[1])
      | (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign enb = scaledown_col_if_if_if_if_or_nl;
  assign db = (da_d[19:10]);
  assign adrb = (adra_d[23:12]);
  assign qa_d[9:0] = qa;
  assign wea = (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign scaledown_col_if_if_if_if_or_1_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[0])
      | (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign ena = scaledown_col_if_if_if_if_or_1_nl;
  assign da = (da_d[9:0]);
  assign adra = (adra_d[11:0]);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_ccs_sample_mem_ccs_ram_sync_dualport_rwport_595_10_12_4096_4096_10_5_gen
// ------------------------------------------------------------------


module scaledown_ccs_sample_mem_ccs_ram_sync_dualport_rwport_595_10_12_4096_4096_10_5_gen
    (
  qb, web, enb, db, adrb, qa, wea, ena, da, adra, adra_d, da_d, ena_d, wea_d, qa_d,
      port_0_rw_ram_ir_internal_RMASK_B_d, port_0_rw_ram_ir_internal_WMASK_B_d
);
  input [9:0] qb;
  output web;
  output enb;
  output [9:0] db;
  output [11:0] adrb;
  input [9:0] qa;
  output wea;
  output ena;
  output [9:0] da;
  output [11:0] adra;
  input [23:0] adra_d;
  input [19:0] da_d;
  input [1:0] ena_d;
  input [1:0] wea_d;
  output [19:0] qa_d;
  input [1:0] port_0_rw_ram_ir_internal_RMASK_B_d;
  input [1:0] port_0_rw_ram_ir_internal_WMASK_B_d;


  wire scaledown_col_if_if_if_if_or_nl;
  wire scaledown_col_if_if_if_if_or_1_nl;

  // Interconnect Declarations for Component Instantiations 
  assign qa_d[19:10] = qb;
  assign web = (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign scaledown_col_if_if_if_if_or_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[1])
      | (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign enb = scaledown_col_if_if_if_if_or_nl;
  assign db = (da_d[19:10]);
  assign adrb = (adra_d[23:12]);
  assign qa_d[9:0] = qa;
  assign wea = (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign scaledown_col_if_if_if_if_or_1_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[0])
      | (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign ena = scaledown_col_if_if_if_if_or_1_nl;
  assign da = (da_d[9:0]);
  assign adra = (adra_d[11:0]);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_ccs_sample_mem_ccs_ram_sync_dualport_rwport_594_10_12_4096_4096_10_5_gen
// ------------------------------------------------------------------


module scaledown_ccs_sample_mem_ccs_ram_sync_dualport_rwport_594_10_12_4096_4096_10_5_gen
    (
  qb, web, enb, db, adrb, qa, wea, ena, da, adra, adra_d, da_d, ena_d, wea_d, qa_d,
      port_0_rw_ram_ir_internal_RMASK_B_d, port_0_rw_ram_ir_internal_WMASK_B_d
);
  input [9:0] qb;
  output web;
  output enb;
  output [9:0] db;
  output [11:0] adrb;
  input [9:0] qa;
  output wea;
  output ena;
  output [9:0] da;
  output [11:0] adra;
  input [23:0] adra_d;
  input [19:0] da_d;
  input [1:0] ena_d;
  input [1:0] wea_d;
  output [19:0] qa_d;
  input [1:0] port_0_rw_ram_ir_internal_RMASK_B_d;
  input [1:0] port_0_rw_ram_ir_internal_WMASK_B_d;


  wire scaledown_col_if_if_else_if_else_if_or_nl;
  wire scaledown_col_if_if_else_if_else_if_or_1_nl;

  // Interconnect Declarations for Component Instantiations 
  assign qa_d[19:10] = qb;
  assign web = (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign scaledown_col_if_if_else_if_else_if_or_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[1])
      | (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign enb = scaledown_col_if_if_else_if_else_if_or_nl;
  assign db = (da_d[19:10]);
  assign adrb = (adra_d[23:12]);
  assign qa_d[9:0] = qa;
  assign wea = (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign scaledown_col_if_if_else_if_else_if_or_1_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[0])
      | (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign ena = scaledown_col_if_if_else_if_else_if_or_1_nl;
  assign da = (da_d[9:0]);
  assign adra = (adra_d[11:0]);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_ccs_sample_mem_ccs_ram_sync_dualport_rwport_593_10_12_4096_4096_10_5_gen
// ------------------------------------------------------------------


module scaledown_ccs_sample_mem_ccs_ram_sync_dualport_rwport_593_10_12_4096_4096_10_5_gen
    (
  qb, web, enb, db, adrb, qa, wea, ena, da, adra, adra_d, da_d, ena_d, wea_d, qa_d,
      port_0_rw_ram_ir_internal_RMASK_B_d, port_0_rw_ram_ir_internal_WMASK_B_d
);
  input [9:0] qb;
  output web;
  output enb;
  output [9:0] db;
  output [11:0] adrb;
  input [9:0] qa;
  output wea;
  output ena;
  output [9:0] da;
  output [11:0] adra;
  input [23:0] adra_d;
  input [19:0] da_d;
  input [1:0] ena_d;
  input [1:0] wea_d;
  output [19:0] qa_d;
  input [1:0] port_0_rw_ram_ir_internal_RMASK_B_d;
  input [1:0] port_0_rw_ram_ir_internal_WMASK_B_d;


  wire scaledown_col_if_if_if_if_or_nl;
  wire scaledown_col_if_if_if_if_or_1_nl;

  // Interconnect Declarations for Component Instantiations 
  assign qa_d[19:10] = qb;
  assign web = (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign scaledown_col_if_if_if_if_or_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[1])
      | (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign enb = scaledown_col_if_if_if_if_or_nl;
  assign db = (da_d[19:10]);
  assign adrb = (adra_d[23:12]);
  assign qa_d[9:0] = qa;
  assign wea = (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign scaledown_col_if_if_if_if_or_1_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[0])
      | (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign ena = scaledown_col_if_if_if_if_or_1_nl;
  assign da = (da_d[9:0]);
  assign adra = (adra_d[11:0]);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_ccs_sample_mem_ccs_ram_sync_dualport_rwport_592_10_12_4096_4096_10_5_gen
// ------------------------------------------------------------------


module scaledown_ccs_sample_mem_ccs_ram_sync_dualport_rwport_592_10_12_4096_4096_10_5_gen
    (
  qb, web, enb, db, adrb, qa, wea, ena, da, adra, adra_d, da_d, ena_d, wea_d, qa_d,
      port_0_rw_ram_ir_internal_RMASK_B_d, port_0_rw_ram_ir_internal_WMASK_B_d
);
  input [9:0] qb;
  output web;
  output enb;
  output [9:0] db;
  output [11:0] adrb;
  input [9:0] qa;
  output wea;
  output ena;
  output [9:0] da;
  output [11:0] adra;
  input [23:0] adra_d;
  input [19:0] da_d;
  input [1:0] ena_d;
  input [1:0] wea_d;
  output [19:0] qa_d;
  input [1:0] port_0_rw_ram_ir_internal_RMASK_B_d;
  input [1:0] port_0_rw_ram_ir_internal_WMASK_B_d;


  wire scaledown_col_if_if_if_if_or_nl;
  wire scaledown_col_if_if_if_if_or_1_nl;

  // Interconnect Declarations for Component Instantiations 
  assign qa_d[19:10] = qb;
  assign web = (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign scaledown_col_if_if_if_if_or_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[1])
      | (port_0_rw_ram_ir_internal_WMASK_B_d[1]);
  assign enb = scaledown_col_if_if_if_if_or_nl;
  assign db = (da_d[19:10]);
  assign adrb = (adra_d[23:12]);
  assign qa_d[9:0] = qa;
  assign wea = (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign scaledown_col_if_if_if_if_or_1_nl = (port_0_rw_ram_ir_internal_RMASK_B_d[0])
      | (port_0_rw_ram_ir_internal_WMASK_B_d[0]);
  assign ena = scaledown_col_if_if_if_if_or_1_nl;
  assign da = (da_d[9:0]);
  assign adra = (adra_d[11:0]);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_staller
// ------------------------------------------------------------------


module scaledown_core_staller (
  clk, arst_n, core_wen, core_wten, y_src_rsci_wen_comp, u_src_rsci_wen_comp, v_src_rsci_wen_comp,
      y_dst_rsci_wen_comp, u_dst_rsci_wen_comp, v_dst_rsci_wen_comp
);
  input clk;
  input arst_n;
  output core_wen;
  output core_wten;
  input y_src_rsci_wen_comp;
  input u_src_rsci_wen_comp;
  input v_src_rsci_wen_comp;
  input y_dst_rsci_wen_comp;
  input u_dst_rsci_wen_comp;
  input v_dst_rsci_wen_comp;


  // Interconnect Declarations
  reg core_wten_reg;


  // Interconnect Declarations for Component Instantiations 
  assign core_wen = y_src_rsci_wen_comp & u_src_rsci_wen_comp & v_src_rsci_wen_comp
      & y_dst_rsci_wen_comp & u_dst_rsci_wen_comp & v_dst_rsci_wen_comp;
  assign core_wten = core_wten_reg;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      core_wten_reg <= 1'b0;
    end
    else begin
      core_wten_reg <= ~ core_wen;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_v_linebuffer_rsc_2_0_i_1_v_linebuffer_rsc_2_0_wait_dp
// ------------------------------------------------------------------


module scaledown_core_v_linebuffer_rsc_2_0_i_1_v_linebuffer_rsc_2_0_wait_dp (
  clk, arst_n, v_linebuffer_rsc_2_0_i_da_d, v_linebuffer_rsc_2_0_i_qa_d, v_linebuffer_rsc_2_0_i_da_d_core,
      v_linebuffer_rsc_2_0_i_qa_d_mxwt, v_linebuffer_rsc_2_0_i_biwt, v_linebuffer_rsc_2_0_i_bdwt,
      v_linebuffer_rsc_2_0_i_biwt_1, v_linebuffer_rsc_2_0_i_bdwt_2
);
  input clk;
  input arst_n;
  output [9:0] v_linebuffer_rsc_2_0_i_da_d;
  input [19:0] v_linebuffer_rsc_2_0_i_qa_d;
  input [19:0] v_linebuffer_rsc_2_0_i_da_d_core;
  output [19:0] v_linebuffer_rsc_2_0_i_qa_d_mxwt;
  input v_linebuffer_rsc_2_0_i_biwt;
  input v_linebuffer_rsc_2_0_i_bdwt;
  input v_linebuffer_rsc_2_0_i_biwt_1;
  input v_linebuffer_rsc_2_0_i_bdwt_2;


  // Interconnect Declarations
  reg v_linebuffer_rsc_2_0_i_bcwt;
  reg v_linebuffer_rsc_2_0_i_bcwt_1;
  reg [9:0] v_linebuffer_rsc_2_0_i_qa_d_bfwt_19_10;
  reg [9:0] v_linebuffer_rsc_2_0_i_qa_d_bfwt_9_0;

  wire[9:0] scaledown_col_if_if_else_if_else_if_mux_10_nl;
  wire[9:0] scaledown_col_if_if_else_if_else_if_mux_11_nl;

  // Interconnect Declarations for Component Instantiations 
  assign scaledown_col_if_if_else_if_else_if_mux_10_nl = MUX_v_10_2_2((v_linebuffer_rsc_2_0_i_qa_d[19:10]),
      v_linebuffer_rsc_2_0_i_qa_d_bfwt_19_10, v_linebuffer_rsc_2_0_i_bcwt_1);
  assign scaledown_col_if_if_else_if_else_if_mux_11_nl = MUX_v_10_2_2((v_linebuffer_rsc_2_0_i_qa_d[9:0]),
      v_linebuffer_rsc_2_0_i_qa_d_bfwt_9_0, v_linebuffer_rsc_2_0_i_bcwt);
  assign v_linebuffer_rsc_2_0_i_qa_d_mxwt = {scaledown_col_if_if_else_if_else_if_mux_10_nl
      , scaledown_col_if_if_else_if_else_if_mux_11_nl};
  assign v_linebuffer_rsc_2_0_i_da_d = v_linebuffer_rsc_2_0_i_da_d_core[9:0];
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      v_linebuffer_rsc_2_0_i_bcwt <= 1'b0;
      v_linebuffer_rsc_2_0_i_bcwt_1 <= 1'b0;
    end
    else begin
      v_linebuffer_rsc_2_0_i_bcwt <= ~((~(v_linebuffer_rsc_2_0_i_bcwt | v_linebuffer_rsc_2_0_i_biwt))
          | v_linebuffer_rsc_2_0_i_bdwt);
      v_linebuffer_rsc_2_0_i_bcwt_1 <= ~((~(v_linebuffer_rsc_2_0_i_bcwt_1 | v_linebuffer_rsc_2_0_i_biwt_1))
          | v_linebuffer_rsc_2_0_i_bdwt_2);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      v_linebuffer_rsc_2_0_i_qa_d_bfwt_19_10 <= 10'b0000000000;
    end
    else if ( v_linebuffer_rsc_2_0_i_biwt_1 ) begin
      v_linebuffer_rsc_2_0_i_qa_d_bfwt_19_10 <= v_linebuffer_rsc_2_0_i_qa_d[19:10];
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      v_linebuffer_rsc_2_0_i_qa_d_bfwt_9_0 <= 10'b0000000000;
    end
    else if ( v_linebuffer_rsc_2_0_i_biwt ) begin
      v_linebuffer_rsc_2_0_i_qa_d_bfwt_9_0 <= v_linebuffer_rsc_2_0_i_qa_d[9:0];
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_v_linebuffer_rsc_2_0_i_1_v_linebuffer_rsc_2_0_wait_ctrl
// ------------------------------------------------------------------


module scaledown_core_v_linebuffer_rsc_2_0_i_1_v_linebuffer_rsc_2_0_wait_ctrl (
  core_wen, core_wten, v_linebuffer_rsc_2_0_i_oswt, v_linebuffer_rsc_2_0_i_oswt_1,
      v_linebuffer_rsc_2_0_i_ena_d_core_psct, v_linebuffer_rsc_2_0_i_wea_d_core_psct,
      v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct, v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct,
      v_linebuffer_rsc_2_0_i_biwt, v_linebuffer_rsc_2_0_i_bdwt, v_linebuffer_rsc_2_0_i_biwt_1,
      v_linebuffer_rsc_2_0_i_bdwt_2, v_linebuffer_rsc_2_0_i_ena_d_core_sct, v_linebuffer_rsc_2_0_i_wea_d_core_sct,
      v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct, v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct,
      v_linebuffer_rsc_2_0_i_oswt_1_pff, v_linebuffer_rsc_2_0_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input v_linebuffer_rsc_2_0_i_oswt;
  input v_linebuffer_rsc_2_0_i_oswt_1;
  input [1:0] v_linebuffer_rsc_2_0_i_ena_d_core_psct;
  input [1:0] v_linebuffer_rsc_2_0_i_wea_d_core_psct;
  input [1:0] v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  output v_linebuffer_rsc_2_0_i_biwt;
  output v_linebuffer_rsc_2_0_i_bdwt;
  output v_linebuffer_rsc_2_0_i_biwt_1;
  output v_linebuffer_rsc_2_0_i_bdwt_2;
  output [1:0] v_linebuffer_rsc_2_0_i_ena_d_core_sct;
  output [1:0] v_linebuffer_rsc_2_0_i_wea_d_core_sct;
  output [1:0] v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output [1:0] v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  input v_linebuffer_rsc_2_0_i_oswt_1_pff;
  input v_linebuffer_rsc_2_0_i_oswt_pff;


  // Interconnect Declarations
  wire v_linebuffer_rsc_2_0_i_dswt_1_pff;
  wire v_linebuffer_rsc_2_0_i_dswt_pff;

  wire[0:0] scaledown_col_if_if_else_if_else_if_and_33_nl;
  wire[0:0] scaledown_col_if_if_else_if_else_if_and_35_nl;

  // Interconnect Declarations for Component Instantiations 
  assign v_linebuffer_rsc_2_0_i_bdwt = v_linebuffer_rsc_2_0_i_oswt & core_wen;
  assign v_linebuffer_rsc_2_0_i_biwt = (~ core_wten) & v_linebuffer_rsc_2_0_i_oswt;
  assign v_linebuffer_rsc_2_0_i_bdwt_2 = v_linebuffer_rsc_2_0_i_oswt_1 & core_wen;
  assign v_linebuffer_rsc_2_0_i_biwt_1 = (~ core_wten) & v_linebuffer_rsc_2_0_i_oswt_1;
  assign v_linebuffer_rsc_2_0_i_ena_d_core_sct = v_linebuffer_rsc_2_0_i_ena_d_core_psct
      & ({v_linebuffer_rsc_2_0_i_dswt_1_pff , v_linebuffer_rsc_2_0_i_dswt_pff});
  assign v_linebuffer_rsc_2_0_i_dswt_1_pff = core_wen & v_linebuffer_rsc_2_0_i_oswt_1_pff;
  assign v_linebuffer_rsc_2_0_i_dswt_pff = core_wen & v_linebuffer_rsc_2_0_i_oswt_pff;
  assign scaledown_col_if_if_else_if_else_if_and_33_nl = (v_linebuffer_rsc_2_0_i_wea_d_core_psct[0])
      & v_linebuffer_rsc_2_0_i_dswt_pff;
  assign v_linebuffer_rsc_2_0_i_wea_d_core_sct = {1'b0 , scaledown_col_if_if_else_if_else_if_and_33_nl};
  assign v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct = v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      & ({v_linebuffer_rsc_2_0_i_dswt_1_pff , v_linebuffer_rsc_2_0_i_dswt_pff});
  assign scaledown_col_if_if_else_if_else_if_and_35_nl = (v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])
      & v_linebuffer_rsc_2_0_i_dswt_pff;
  assign v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct = {1'b0
      , scaledown_col_if_if_else_if_else_if_and_35_nl};
endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_v_linebuffer_rsc_1_0_i_1_v_linebuffer_rsc_1_0_wait_dp
// ------------------------------------------------------------------


module scaledown_core_v_linebuffer_rsc_1_0_i_1_v_linebuffer_rsc_1_0_wait_dp (
  clk, arst_n, v_linebuffer_rsc_1_0_i_da_d, v_linebuffer_rsc_1_0_i_qa_d, v_linebuffer_rsc_1_0_i_da_d_core,
      v_linebuffer_rsc_1_0_i_qa_d_mxwt, v_linebuffer_rsc_1_0_i_biwt, v_linebuffer_rsc_1_0_i_bdwt,
      v_linebuffer_rsc_1_0_i_biwt_1, v_linebuffer_rsc_1_0_i_bdwt_2
);
  input clk;
  input arst_n;
  output [9:0] v_linebuffer_rsc_1_0_i_da_d;
  input [19:0] v_linebuffer_rsc_1_0_i_qa_d;
  input [19:0] v_linebuffer_rsc_1_0_i_da_d_core;
  output [19:0] v_linebuffer_rsc_1_0_i_qa_d_mxwt;
  input v_linebuffer_rsc_1_0_i_biwt;
  input v_linebuffer_rsc_1_0_i_bdwt;
  input v_linebuffer_rsc_1_0_i_biwt_1;
  input v_linebuffer_rsc_1_0_i_bdwt_2;


  // Interconnect Declarations
  reg v_linebuffer_rsc_1_0_i_bcwt;
  reg v_linebuffer_rsc_1_0_i_bcwt_1;
  reg [9:0] v_linebuffer_rsc_1_0_i_qa_d_bfwt_19_10;
  reg [9:0] v_linebuffer_rsc_1_0_i_qa_d_bfwt_9_0;

  wire[9:0] scaledown_col_if_if_if_if_mux_22_nl;
  wire[9:0] scaledown_col_if_if_if_if_mux_23_nl;

  // Interconnect Declarations for Component Instantiations 
  assign scaledown_col_if_if_if_if_mux_22_nl = MUX_v_10_2_2((v_linebuffer_rsc_1_0_i_qa_d[19:10]),
      v_linebuffer_rsc_1_0_i_qa_d_bfwt_19_10, v_linebuffer_rsc_1_0_i_bcwt_1);
  assign scaledown_col_if_if_if_if_mux_23_nl = MUX_v_10_2_2((v_linebuffer_rsc_1_0_i_qa_d[9:0]),
      v_linebuffer_rsc_1_0_i_qa_d_bfwt_9_0, v_linebuffer_rsc_1_0_i_bcwt);
  assign v_linebuffer_rsc_1_0_i_qa_d_mxwt = {scaledown_col_if_if_if_if_mux_22_nl
      , scaledown_col_if_if_if_if_mux_23_nl};
  assign v_linebuffer_rsc_1_0_i_da_d = v_linebuffer_rsc_1_0_i_da_d_core[9:0];
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      v_linebuffer_rsc_1_0_i_bcwt <= 1'b0;
      v_linebuffer_rsc_1_0_i_bcwt_1 <= 1'b0;
    end
    else begin
      v_linebuffer_rsc_1_0_i_bcwt <= ~((~(v_linebuffer_rsc_1_0_i_bcwt | v_linebuffer_rsc_1_0_i_biwt))
          | v_linebuffer_rsc_1_0_i_bdwt);
      v_linebuffer_rsc_1_0_i_bcwt_1 <= ~((~(v_linebuffer_rsc_1_0_i_bcwt_1 | v_linebuffer_rsc_1_0_i_biwt_1))
          | v_linebuffer_rsc_1_0_i_bdwt_2);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      v_linebuffer_rsc_1_0_i_qa_d_bfwt_19_10 <= 10'b0000000000;
    end
    else if ( v_linebuffer_rsc_1_0_i_biwt_1 ) begin
      v_linebuffer_rsc_1_0_i_qa_d_bfwt_19_10 <= v_linebuffer_rsc_1_0_i_qa_d[19:10];
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      v_linebuffer_rsc_1_0_i_qa_d_bfwt_9_0 <= 10'b0000000000;
    end
    else if ( v_linebuffer_rsc_1_0_i_biwt ) begin
      v_linebuffer_rsc_1_0_i_qa_d_bfwt_9_0 <= v_linebuffer_rsc_1_0_i_qa_d[9:0];
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_v_linebuffer_rsc_1_0_i_1_v_linebuffer_rsc_1_0_wait_ctrl
// ------------------------------------------------------------------


module scaledown_core_v_linebuffer_rsc_1_0_i_1_v_linebuffer_rsc_1_0_wait_ctrl (
  core_wen, core_wten, v_linebuffer_rsc_1_0_i_oswt, v_linebuffer_rsc_1_0_i_oswt_1,
      v_linebuffer_rsc_1_0_i_ena_d_core_psct, v_linebuffer_rsc_1_0_i_wea_d_core_psct,
      v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct, v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct,
      v_linebuffer_rsc_1_0_i_biwt, v_linebuffer_rsc_1_0_i_bdwt, v_linebuffer_rsc_1_0_i_biwt_1,
      v_linebuffer_rsc_1_0_i_bdwt_2, v_linebuffer_rsc_1_0_i_ena_d_core_sct, v_linebuffer_rsc_1_0_i_wea_d_core_sct,
      v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct, v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct,
      v_linebuffer_rsc_1_0_i_oswt_1_pff, v_linebuffer_rsc_1_0_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input v_linebuffer_rsc_1_0_i_oswt;
  input v_linebuffer_rsc_1_0_i_oswt_1;
  input [1:0] v_linebuffer_rsc_1_0_i_ena_d_core_psct;
  input [1:0] v_linebuffer_rsc_1_0_i_wea_d_core_psct;
  input [1:0] v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  output v_linebuffer_rsc_1_0_i_biwt;
  output v_linebuffer_rsc_1_0_i_bdwt;
  output v_linebuffer_rsc_1_0_i_biwt_1;
  output v_linebuffer_rsc_1_0_i_bdwt_2;
  output [1:0] v_linebuffer_rsc_1_0_i_ena_d_core_sct;
  output [1:0] v_linebuffer_rsc_1_0_i_wea_d_core_sct;
  output [1:0] v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output [1:0] v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  input v_linebuffer_rsc_1_0_i_oswt_1_pff;
  input v_linebuffer_rsc_1_0_i_oswt_pff;


  // Interconnect Declarations
  wire v_linebuffer_rsc_1_0_i_dswt_1_pff;
  wire v_linebuffer_rsc_1_0_i_dswt_pff;

  wire[0:0] scaledown_col_if_if_if_if_and_69_nl;
  wire[0:0] scaledown_col_if_if_if_if_and_71_nl;

  // Interconnect Declarations for Component Instantiations 
  assign v_linebuffer_rsc_1_0_i_bdwt = v_linebuffer_rsc_1_0_i_oswt & core_wen;
  assign v_linebuffer_rsc_1_0_i_biwt = (~ core_wten) & v_linebuffer_rsc_1_0_i_oswt;
  assign v_linebuffer_rsc_1_0_i_bdwt_2 = v_linebuffer_rsc_1_0_i_oswt_1 & core_wen;
  assign v_linebuffer_rsc_1_0_i_biwt_1 = (~ core_wten) & v_linebuffer_rsc_1_0_i_oswt_1;
  assign v_linebuffer_rsc_1_0_i_ena_d_core_sct = v_linebuffer_rsc_1_0_i_ena_d_core_psct
      & ({v_linebuffer_rsc_1_0_i_dswt_1_pff , v_linebuffer_rsc_1_0_i_dswt_pff});
  assign v_linebuffer_rsc_1_0_i_dswt_1_pff = core_wen & v_linebuffer_rsc_1_0_i_oswt_1_pff;
  assign v_linebuffer_rsc_1_0_i_dswt_pff = core_wen & v_linebuffer_rsc_1_0_i_oswt_pff;
  assign scaledown_col_if_if_if_if_and_69_nl = (v_linebuffer_rsc_1_0_i_wea_d_core_psct[0])
      & v_linebuffer_rsc_1_0_i_dswt_pff;
  assign v_linebuffer_rsc_1_0_i_wea_d_core_sct = {1'b0 , scaledown_col_if_if_if_if_and_69_nl};
  assign v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct = v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      & ({v_linebuffer_rsc_1_0_i_dswt_1_pff , v_linebuffer_rsc_1_0_i_dswt_pff});
  assign scaledown_col_if_if_if_if_and_71_nl = (v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])
      & v_linebuffer_rsc_1_0_i_dswt_pff;
  assign v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct = {1'b0
      , scaledown_col_if_if_if_if_and_71_nl};
endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_v_linebuffer_rsc_0_0_i_1_v_linebuffer_rsc_0_0_wait_dp
// ------------------------------------------------------------------


module scaledown_core_v_linebuffer_rsc_0_0_i_1_v_linebuffer_rsc_0_0_wait_dp (
  clk, arst_n, v_linebuffer_rsc_0_0_i_adra_d, v_linebuffer_rsc_0_0_i_da_d, v_linebuffer_rsc_0_0_i_qa_d,
      v_linebuffer_rsc_0_0_i_adra_d_core, v_linebuffer_rsc_0_0_i_da_d_core, v_linebuffer_rsc_0_0_i_qa_d_mxwt,
      v_linebuffer_rsc_0_0_i_biwt, v_linebuffer_rsc_0_0_i_bdwt
);
  input clk;
  input arst_n;
  output [11:0] v_linebuffer_rsc_0_0_i_adra_d;
  output [9:0] v_linebuffer_rsc_0_0_i_da_d;
  input [19:0] v_linebuffer_rsc_0_0_i_qa_d;
  input [23:0] v_linebuffer_rsc_0_0_i_adra_d_core;
  input [19:0] v_linebuffer_rsc_0_0_i_da_d_core;
  output [9:0] v_linebuffer_rsc_0_0_i_qa_d_mxwt;
  input v_linebuffer_rsc_0_0_i_biwt;
  input v_linebuffer_rsc_0_0_i_bdwt;


  // Interconnect Declarations
  reg v_linebuffer_rsc_0_0_i_bcwt;
  reg [9:0] v_linebuffer_rsc_0_0_i_qa_d_bfwt_9_0;


  // Interconnect Declarations for Component Instantiations 
  assign v_linebuffer_rsc_0_0_i_qa_d_mxwt = MUX_v_10_2_2((v_linebuffer_rsc_0_0_i_qa_d[9:0]),
      v_linebuffer_rsc_0_0_i_qa_d_bfwt_9_0, v_linebuffer_rsc_0_0_i_bcwt);
  assign v_linebuffer_rsc_0_0_i_adra_d = v_linebuffer_rsc_0_0_i_adra_d_core[11:0];
  assign v_linebuffer_rsc_0_0_i_da_d = v_linebuffer_rsc_0_0_i_da_d_core[9:0];
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      v_linebuffer_rsc_0_0_i_bcwt <= 1'b0;
    end
    else begin
      v_linebuffer_rsc_0_0_i_bcwt <= ~((~(v_linebuffer_rsc_0_0_i_bcwt | v_linebuffer_rsc_0_0_i_biwt))
          | v_linebuffer_rsc_0_0_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      v_linebuffer_rsc_0_0_i_qa_d_bfwt_9_0 <= 10'b0000000000;
    end
    else if ( v_linebuffer_rsc_0_0_i_biwt ) begin
      v_linebuffer_rsc_0_0_i_qa_d_bfwt_9_0 <= v_linebuffer_rsc_0_0_i_qa_d[9:0];
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_v_linebuffer_rsc_0_0_i_1_v_linebuffer_rsc_0_0_wait_ctrl
// ------------------------------------------------------------------


module scaledown_core_v_linebuffer_rsc_0_0_i_1_v_linebuffer_rsc_0_0_wait_ctrl (
  core_wen, core_wten, v_linebuffer_rsc_0_0_i_oswt, v_linebuffer_rsc_0_0_i_ena_d_core_psct,
      v_linebuffer_rsc_0_0_i_wea_d_core_psct, v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct,
      v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct, v_linebuffer_rsc_0_0_i_biwt,
      v_linebuffer_rsc_0_0_i_bdwt, v_linebuffer_rsc_0_0_i_ena_d_core_sct, v_linebuffer_rsc_0_0_i_wea_d_core_sct,
      v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct, v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct,
      v_linebuffer_rsc_0_0_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input v_linebuffer_rsc_0_0_i_oswt;
  input [1:0] v_linebuffer_rsc_0_0_i_ena_d_core_psct;
  input [1:0] v_linebuffer_rsc_0_0_i_wea_d_core_psct;
  input [1:0] v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  output v_linebuffer_rsc_0_0_i_biwt;
  output v_linebuffer_rsc_0_0_i_bdwt;
  output [1:0] v_linebuffer_rsc_0_0_i_ena_d_core_sct;
  output [1:0] v_linebuffer_rsc_0_0_i_wea_d_core_sct;
  output [1:0] v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output [1:0] v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  input v_linebuffer_rsc_0_0_i_oswt_pff;


  // Interconnect Declarations
  wire v_linebuffer_rsc_0_0_i_dswt_pff;

  wire[0:0] scaledown_col_if_if_if_if_and_56_nl;
  wire[0:0] scaledown_col_if_if_if_if_and_57_nl;
  wire[0:0] scaledown_col_if_if_if_if_and_58_nl;
  wire[0:0] scaledown_col_if_if_if_if_and_59_nl;

  // Interconnect Declarations for Component Instantiations 
  assign v_linebuffer_rsc_0_0_i_bdwt = v_linebuffer_rsc_0_0_i_oswt & core_wen;
  assign v_linebuffer_rsc_0_0_i_biwt = (~ core_wten) & v_linebuffer_rsc_0_0_i_oswt;
  assign scaledown_col_if_if_if_if_and_56_nl = (v_linebuffer_rsc_0_0_i_ena_d_core_psct[0])
      & v_linebuffer_rsc_0_0_i_dswt_pff;
  assign v_linebuffer_rsc_0_0_i_ena_d_core_sct = {1'b0 , scaledown_col_if_if_if_if_and_56_nl};
  assign v_linebuffer_rsc_0_0_i_dswt_pff = core_wen & v_linebuffer_rsc_0_0_i_oswt_pff;
  assign scaledown_col_if_if_if_if_and_57_nl = (v_linebuffer_rsc_0_0_i_wea_d_core_psct[0])
      & v_linebuffer_rsc_0_0_i_dswt_pff;
  assign v_linebuffer_rsc_0_0_i_wea_d_core_sct = {1'b0 , scaledown_col_if_if_if_if_and_57_nl};
  assign scaledown_col_if_if_if_if_and_58_nl = (v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])
      & v_linebuffer_rsc_0_0_i_dswt_pff;
  assign v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct = {1'b0
      , scaledown_col_if_if_if_if_and_58_nl};
  assign scaledown_col_if_if_if_if_and_59_nl = (v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])
      & v_linebuffer_rsc_0_0_i_dswt_pff;
  assign v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct = {1'b0
      , scaledown_col_if_if_if_if_and_59_nl};
endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_u_linebuffer_rsc_2_0_i_1_u_linebuffer_rsc_2_0_wait_dp
// ------------------------------------------------------------------


module scaledown_core_u_linebuffer_rsc_2_0_i_1_u_linebuffer_rsc_2_0_wait_dp (
  clk, arst_n, u_linebuffer_rsc_2_0_i_da_d, u_linebuffer_rsc_2_0_i_qa_d, u_linebuffer_rsc_2_0_i_da_d_core,
      u_linebuffer_rsc_2_0_i_qa_d_mxwt, u_linebuffer_rsc_2_0_i_biwt, u_linebuffer_rsc_2_0_i_bdwt,
      u_linebuffer_rsc_2_0_i_biwt_1, u_linebuffer_rsc_2_0_i_bdwt_2
);
  input clk;
  input arst_n;
  output [9:0] u_linebuffer_rsc_2_0_i_da_d;
  input [19:0] u_linebuffer_rsc_2_0_i_qa_d;
  input [19:0] u_linebuffer_rsc_2_0_i_da_d_core;
  output [19:0] u_linebuffer_rsc_2_0_i_qa_d_mxwt;
  input u_linebuffer_rsc_2_0_i_biwt;
  input u_linebuffer_rsc_2_0_i_bdwt;
  input u_linebuffer_rsc_2_0_i_biwt_1;
  input u_linebuffer_rsc_2_0_i_bdwt_2;


  // Interconnect Declarations
  reg u_linebuffer_rsc_2_0_i_bcwt;
  reg u_linebuffer_rsc_2_0_i_bcwt_1;
  reg [9:0] u_linebuffer_rsc_2_0_i_qa_d_bfwt_19_10;
  reg [9:0] u_linebuffer_rsc_2_0_i_qa_d_bfwt_9_0;

  wire[9:0] scaledown_col_if_if_else_if_else_if_mux_6_nl;
  wire[9:0] scaledown_col_if_if_else_if_else_if_mux_7_nl;

  // Interconnect Declarations for Component Instantiations 
  assign scaledown_col_if_if_else_if_else_if_mux_6_nl = MUX_v_10_2_2((u_linebuffer_rsc_2_0_i_qa_d[19:10]),
      u_linebuffer_rsc_2_0_i_qa_d_bfwt_19_10, u_linebuffer_rsc_2_0_i_bcwt_1);
  assign scaledown_col_if_if_else_if_else_if_mux_7_nl = MUX_v_10_2_2((u_linebuffer_rsc_2_0_i_qa_d[9:0]),
      u_linebuffer_rsc_2_0_i_qa_d_bfwt_9_0, u_linebuffer_rsc_2_0_i_bcwt);
  assign u_linebuffer_rsc_2_0_i_qa_d_mxwt = {scaledown_col_if_if_else_if_else_if_mux_6_nl
      , scaledown_col_if_if_else_if_else_if_mux_7_nl};
  assign u_linebuffer_rsc_2_0_i_da_d = u_linebuffer_rsc_2_0_i_da_d_core[9:0];
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      u_linebuffer_rsc_2_0_i_bcwt <= 1'b0;
      u_linebuffer_rsc_2_0_i_bcwt_1 <= 1'b0;
    end
    else begin
      u_linebuffer_rsc_2_0_i_bcwt <= ~((~(u_linebuffer_rsc_2_0_i_bcwt | u_linebuffer_rsc_2_0_i_biwt))
          | u_linebuffer_rsc_2_0_i_bdwt);
      u_linebuffer_rsc_2_0_i_bcwt_1 <= ~((~(u_linebuffer_rsc_2_0_i_bcwt_1 | u_linebuffer_rsc_2_0_i_biwt_1))
          | u_linebuffer_rsc_2_0_i_bdwt_2);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      u_linebuffer_rsc_2_0_i_qa_d_bfwt_19_10 <= 10'b0000000000;
    end
    else if ( u_linebuffer_rsc_2_0_i_biwt_1 ) begin
      u_linebuffer_rsc_2_0_i_qa_d_bfwt_19_10 <= u_linebuffer_rsc_2_0_i_qa_d[19:10];
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      u_linebuffer_rsc_2_0_i_qa_d_bfwt_9_0 <= 10'b0000000000;
    end
    else if ( u_linebuffer_rsc_2_0_i_biwt ) begin
      u_linebuffer_rsc_2_0_i_qa_d_bfwt_9_0 <= u_linebuffer_rsc_2_0_i_qa_d[9:0];
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_u_linebuffer_rsc_2_0_i_1_u_linebuffer_rsc_2_0_wait_ctrl
// ------------------------------------------------------------------


module scaledown_core_u_linebuffer_rsc_2_0_i_1_u_linebuffer_rsc_2_0_wait_ctrl (
  core_wen, core_wten, u_linebuffer_rsc_2_0_i_oswt, u_linebuffer_rsc_2_0_i_oswt_1,
      u_linebuffer_rsc_2_0_i_ena_d_core_psct, u_linebuffer_rsc_2_0_i_wea_d_core_psct,
      u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct, u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct,
      u_linebuffer_rsc_2_0_i_biwt, u_linebuffer_rsc_2_0_i_bdwt, u_linebuffer_rsc_2_0_i_biwt_1,
      u_linebuffer_rsc_2_0_i_bdwt_2, u_linebuffer_rsc_2_0_i_ena_d_core_sct, u_linebuffer_rsc_2_0_i_wea_d_core_sct,
      u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct, u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct,
      u_linebuffer_rsc_2_0_i_oswt_1_pff, u_linebuffer_rsc_2_0_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input u_linebuffer_rsc_2_0_i_oswt;
  input u_linebuffer_rsc_2_0_i_oswt_1;
  input [1:0] u_linebuffer_rsc_2_0_i_ena_d_core_psct;
  input [1:0] u_linebuffer_rsc_2_0_i_wea_d_core_psct;
  input [1:0] u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  output u_linebuffer_rsc_2_0_i_biwt;
  output u_linebuffer_rsc_2_0_i_bdwt;
  output u_linebuffer_rsc_2_0_i_biwt_1;
  output u_linebuffer_rsc_2_0_i_bdwt_2;
  output [1:0] u_linebuffer_rsc_2_0_i_ena_d_core_sct;
  output [1:0] u_linebuffer_rsc_2_0_i_wea_d_core_sct;
  output [1:0] u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output [1:0] u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  input u_linebuffer_rsc_2_0_i_oswt_1_pff;
  input u_linebuffer_rsc_2_0_i_oswt_pff;


  // Interconnect Declarations
  wire u_linebuffer_rsc_2_0_i_dswt_1_pff;
  wire u_linebuffer_rsc_2_0_i_dswt_pff;

  wire[0:0] scaledown_col_if_if_else_if_else_if_and_21_nl;
  wire[0:0] scaledown_col_if_if_else_if_else_if_and_23_nl;

  // Interconnect Declarations for Component Instantiations 
  assign u_linebuffer_rsc_2_0_i_bdwt = u_linebuffer_rsc_2_0_i_oswt & core_wen;
  assign u_linebuffer_rsc_2_0_i_biwt = (~ core_wten) & u_linebuffer_rsc_2_0_i_oswt;
  assign u_linebuffer_rsc_2_0_i_bdwt_2 = u_linebuffer_rsc_2_0_i_oswt_1 & core_wen;
  assign u_linebuffer_rsc_2_0_i_biwt_1 = (~ core_wten) & u_linebuffer_rsc_2_0_i_oswt_1;
  assign u_linebuffer_rsc_2_0_i_ena_d_core_sct = u_linebuffer_rsc_2_0_i_ena_d_core_psct
      & ({u_linebuffer_rsc_2_0_i_dswt_1_pff , u_linebuffer_rsc_2_0_i_dswt_pff});
  assign u_linebuffer_rsc_2_0_i_dswt_1_pff = core_wen & u_linebuffer_rsc_2_0_i_oswt_1_pff;
  assign u_linebuffer_rsc_2_0_i_dswt_pff = core_wen & u_linebuffer_rsc_2_0_i_oswt_pff;
  assign scaledown_col_if_if_else_if_else_if_and_21_nl = (u_linebuffer_rsc_2_0_i_wea_d_core_psct[0])
      & u_linebuffer_rsc_2_0_i_dswt_pff;
  assign u_linebuffer_rsc_2_0_i_wea_d_core_sct = {1'b0 , scaledown_col_if_if_else_if_else_if_and_21_nl};
  assign u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct = u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      & ({u_linebuffer_rsc_2_0_i_dswt_1_pff , u_linebuffer_rsc_2_0_i_dswt_pff});
  assign scaledown_col_if_if_else_if_else_if_and_23_nl = (u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])
      & u_linebuffer_rsc_2_0_i_dswt_pff;
  assign u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct = {1'b0
      , scaledown_col_if_if_else_if_else_if_and_23_nl};
endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_u_linebuffer_rsc_1_0_i_1_u_linebuffer_rsc_1_0_wait_dp
// ------------------------------------------------------------------


module scaledown_core_u_linebuffer_rsc_1_0_i_1_u_linebuffer_rsc_1_0_wait_dp (
  clk, arst_n, u_linebuffer_rsc_1_0_i_da_d, u_linebuffer_rsc_1_0_i_qa_d, u_linebuffer_rsc_1_0_i_da_d_core,
      u_linebuffer_rsc_1_0_i_qa_d_mxwt, u_linebuffer_rsc_1_0_i_biwt, u_linebuffer_rsc_1_0_i_bdwt,
      u_linebuffer_rsc_1_0_i_biwt_1, u_linebuffer_rsc_1_0_i_bdwt_2
);
  input clk;
  input arst_n;
  output [9:0] u_linebuffer_rsc_1_0_i_da_d;
  input [19:0] u_linebuffer_rsc_1_0_i_qa_d;
  input [19:0] u_linebuffer_rsc_1_0_i_da_d_core;
  output [19:0] u_linebuffer_rsc_1_0_i_qa_d_mxwt;
  input u_linebuffer_rsc_1_0_i_biwt;
  input u_linebuffer_rsc_1_0_i_bdwt;
  input u_linebuffer_rsc_1_0_i_biwt_1;
  input u_linebuffer_rsc_1_0_i_bdwt_2;


  // Interconnect Declarations
  reg u_linebuffer_rsc_1_0_i_bcwt;
  reg u_linebuffer_rsc_1_0_i_bcwt_1;
  reg [9:0] u_linebuffer_rsc_1_0_i_qa_d_bfwt_19_10;
  reg [9:0] u_linebuffer_rsc_1_0_i_qa_d_bfwt_9_0;

  wire[9:0] scaledown_col_if_if_if_if_mux_14_nl;
  wire[9:0] scaledown_col_if_if_if_if_mux_15_nl;

  // Interconnect Declarations for Component Instantiations 
  assign scaledown_col_if_if_if_if_mux_14_nl = MUX_v_10_2_2((u_linebuffer_rsc_1_0_i_qa_d[19:10]),
      u_linebuffer_rsc_1_0_i_qa_d_bfwt_19_10, u_linebuffer_rsc_1_0_i_bcwt_1);
  assign scaledown_col_if_if_if_if_mux_15_nl = MUX_v_10_2_2((u_linebuffer_rsc_1_0_i_qa_d[9:0]),
      u_linebuffer_rsc_1_0_i_qa_d_bfwt_9_0, u_linebuffer_rsc_1_0_i_bcwt);
  assign u_linebuffer_rsc_1_0_i_qa_d_mxwt = {scaledown_col_if_if_if_if_mux_14_nl
      , scaledown_col_if_if_if_if_mux_15_nl};
  assign u_linebuffer_rsc_1_0_i_da_d = u_linebuffer_rsc_1_0_i_da_d_core[9:0];
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      u_linebuffer_rsc_1_0_i_bcwt <= 1'b0;
      u_linebuffer_rsc_1_0_i_bcwt_1 <= 1'b0;
    end
    else begin
      u_linebuffer_rsc_1_0_i_bcwt <= ~((~(u_linebuffer_rsc_1_0_i_bcwt | u_linebuffer_rsc_1_0_i_biwt))
          | u_linebuffer_rsc_1_0_i_bdwt);
      u_linebuffer_rsc_1_0_i_bcwt_1 <= ~((~(u_linebuffer_rsc_1_0_i_bcwt_1 | u_linebuffer_rsc_1_0_i_biwt_1))
          | u_linebuffer_rsc_1_0_i_bdwt_2);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      u_linebuffer_rsc_1_0_i_qa_d_bfwt_19_10 <= 10'b0000000000;
    end
    else if ( u_linebuffer_rsc_1_0_i_biwt_1 ) begin
      u_linebuffer_rsc_1_0_i_qa_d_bfwt_19_10 <= u_linebuffer_rsc_1_0_i_qa_d[19:10];
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      u_linebuffer_rsc_1_0_i_qa_d_bfwt_9_0 <= 10'b0000000000;
    end
    else if ( u_linebuffer_rsc_1_0_i_biwt ) begin
      u_linebuffer_rsc_1_0_i_qa_d_bfwt_9_0 <= u_linebuffer_rsc_1_0_i_qa_d[9:0];
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_u_linebuffer_rsc_1_0_i_1_u_linebuffer_rsc_1_0_wait_ctrl
// ------------------------------------------------------------------


module scaledown_core_u_linebuffer_rsc_1_0_i_1_u_linebuffer_rsc_1_0_wait_ctrl (
  core_wen, core_wten, u_linebuffer_rsc_1_0_i_oswt, u_linebuffer_rsc_1_0_i_oswt_1,
      u_linebuffer_rsc_1_0_i_ena_d_core_psct, u_linebuffer_rsc_1_0_i_wea_d_core_psct,
      u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct, u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct,
      u_linebuffer_rsc_1_0_i_biwt, u_linebuffer_rsc_1_0_i_bdwt, u_linebuffer_rsc_1_0_i_biwt_1,
      u_linebuffer_rsc_1_0_i_bdwt_2, u_linebuffer_rsc_1_0_i_ena_d_core_sct, u_linebuffer_rsc_1_0_i_wea_d_core_sct,
      u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct, u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct,
      u_linebuffer_rsc_1_0_i_oswt_1_pff, u_linebuffer_rsc_1_0_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input u_linebuffer_rsc_1_0_i_oswt;
  input u_linebuffer_rsc_1_0_i_oswt_1;
  input [1:0] u_linebuffer_rsc_1_0_i_ena_d_core_psct;
  input [1:0] u_linebuffer_rsc_1_0_i_wea_d_core_psct;
  input [1:0] u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  output u_linebuffer_rsc_1_0_i_biwt;
  output u_linebuffer_rsc_1_0_i_bdwt;
  output u_linebuffer_rsc_1_0_i_biwt_1;
  output u_linebuffer_rsc_1_0_i_bdwt_2;
  output [1:0] u_linebuffer_rsc_1_0_i_ena_d_core_sct;
  output [1:0] u_linebuffer_rsc_1_0_i_wea_d_core_sct;
  output [1:0] u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output [1:0] u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  input u_linebuffer_rsc_1_0_i_oswt_1_pff;
  input u_linebuffer_rsc_1_0_i_oswt_pff;


  // Interconnect Declarations
  wire u_linebuffer_rsc_1_0_i_dswt_1_pff;
  wire u_linebuffer_rsc_1_0_i_dswt_pff;

  wire[0:0] scaledown_col_if_if_if_if_and_45_nl;
  wire[0:0] scaledown_col_if_if_if_if_and_47_nl;

  // Interconnect Declarations for Component Instantiations 
  assign u_linebuffer_rsc_1_0_i_bdwt = u_linebuffer_rsc_1_0_i_oswt & core_wen;
  assign u_linebuffer_rsc_1_0_i_biwt = (~ core_wten) & u_linebuffer_rsc_1_0_i_oswt;
  assign u_linebuffer_rsc_1_0_i_bdwt_2 = u_linebuffer_rsc_1_0_i_oswt_1 & core_wen;
  assign u_linebuffer_rsc_1_0_i_biwt_1 = (~ core_wten) & u_linebuffer_rsc_1_0_i_oswt_1;
  assign u_linebuffer_rsc_1_0_i_ena_d_core_sct = u_linebuffer_rsc_1_0_i_ena_d_core_psct
      & ({u_linebuffer_rsc_1_0_i_dswt_1_pff , u_linebuffer_rsc_1_0_i_dswt_pff});
  assign u_linebuffer_rsc_1_0_i_dswt_1_pff = core_wen & u_linebuffer_rsc_1_0_i_oswt_1_pff;
  assign u_linebuffer_rsc_1_0_i_dswt_pff = core_wen & u_linebuffer_rsc_1_0_i_oswt_pff;
  assign scaledown_col_if_if_if_if_and_45_nl = (u_linebuffer_rsc_1_0_i_wea_d_core_psct[0])
      & u_linebuffer_rsc_1_0_i_dswt_pff;
  assign u_linebuffer_rsc_1_0_i_wea_d_core_sct = {1'b0 , scaledown_col_if_if_if_if_and_45_nl};
  assign u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct = u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      & ({u_linebuffer_rsc_1_0_i_dswt_1_pff , u_linebuffer_rsc_1_0_i_dswt_pff});
  assign scaledown_col_if_if_if_if_and_47_nl = (u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])
      & u_linebuffer_rsc_1_0_i_dswt_pff;
  assign u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct = {1'b0
      , scaledown_col_if_if_if_if_and_47_nl};
endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_u_linebuffer_rsc_0_0_i_1_u_linebuffer_rsc_0_0_wait_dp
// ------------------------------------------------------------------


module scaledown_core_u_linebuffer_rsc_0_0_i_1_u_linebuffer_rsc_0_0_wait_dp (
  clk, arst_n, u_linebuffer_rsc_0_0_i_adra_d, u_linebuffer_rsc_0_0_i_da_d, u_linebuffer_rsc_0_0_i_qa_d,
      u_linebuffer_rsc_0_0_i_adra_d_core, u_linebuffer_rsc_0_0_i_da_d_core, u_linebuffer_rsc_0_0_i_qa_d_mxwt,
      u_linebuffer_rsc_0_0_i_biwt, u_linebuffer_rsc_0_0_i_bdwt
);
  input clk;
  input arst_n;
  output [11:0] u_linebuffer_rsc_0_0_i_adra_d;
  output [9:0] u_linebuffer_rsc_0_0_i_da_d;
  input [19:0] u_linebuffer_rsc_0_0_i_qa_d;
  input [23:0] u_linebuffer_rsc_0_0_i_adra_d_core;
  input [19:0] u_linebuffer_rsc_0_0_i_da_d_core;
  output [9:0] u_linebuffer_rsc_0_0_i_qa_d_mxwt;
  input u_linebuffer_rsc_0_0_i_biwt;
  input u_linebuffer_rsc_0_0_i_bdwt;


  // Interconnect Declarations
  reg u_linebuffer_rsc_0_0_i_bcwt;
  reg [9:0] u_linebuffer_rsc_0_0_i_qa_d_bfwt_9_0;


  // Interconnect Declarations for Component Instantiations 
  assign u_linebuffer_rsc_0_0_i_qa_d_mxwt = MUX_v_10_2_2((u_linebuffer_rsc_0_0_i_qa_d[9:0]),
      u_linebuffer_rsc_0_0_i_qa_d_bfwt_9_0, u_linebuffer_rsc_0_0_i_bcwt);
  assign u_linebuffer_rsc_0_0_i_adra_d = u_linebuffer_rsc_0_0_i_adra_d_core[11:0];
  assign u_linebuffer_rsc_0_0_i_da_d = u_linebuffer_rsc_0_0_i_da_d_core[9:0];
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      u_linebuffer_rsc_0_0_i_bcwt <= 1'b0;
    end
    else begin
      u_linebuffer_rsc_0_0_i_bcwt <= ~((~(u_linebuffer_rsc_0_0_i_bcwt | u_linebuffer_rsc_0_0_i_biwt))
          | u_linebuffer_rsc_0_0_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      u_linebuffer_rsc_0_0_i_qa_d_bfwt_9_0 <= 10'b0000000000;
    end
    else if ( u_linebuffer_rsc_0_0_i_biwt ) begin
      u_linebuffer_rsc_0_0_i_qa_d_bfwt_9_0 <= u_linebuffer_rsc_0_0_i_qa_d[9:0];
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_u_linebuffer_rsc_0_0_i_1_u_linebuffer_rsc_0_0_wait_ctrl
// ------------------------------------------------------------------


module scaledown_core_u_linebuffer_rsc_0_0_i_1_u_linebuffer_rsc_0_0_wait_ctrl (
  core_wen, core_wten, u_linebuffer_rsc_0_0_i_oswt, u_linebuffer_rsc_0_0_i_ena_d_core_psct,
      u_linebuffer_rsc_0_0_i_wea_d_core_psct, u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct,
      u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct, u_linebuffer_rsc_0_0_i_biwt,
      u_linebuffer_rsc_0_0_i_bdwt, u_linebuffer_rsc_0_0_i_ena_d_core_sct, u_linebuffer_rsc_0_0_i_wea_d_core_sct,
      u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct, u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct,
      u_linebuffer_rsc_0_0_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input u_linebuffer_rsc_0_0_i_oswt;
  input [1:0] u_linebuffer_rsc_0_0_i_ena_d_core_psct;
  input [1:0] u_linebuffer_rsc_0_0_i_wea_d_core_psct;
  input [1:0] u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  output u_linebuffer_rsc_0_0_i_biwt;
  output u_linebuffer_rsc_0_0_i_bdwt;
  output [1:0] u_linebuffer_rsc_0_0_i_ena_d_core_sct;
  output [1:0] u_linebuffer_rsc_0_0_i_wea_d_core_sct;
  output [1:0] u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output [1:0] u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  input u_linebuffer_rsc_0_0_i_oswt_pff;


  // Interconnect Declarations
  wire u_linebuffer_rsc_0_0_i_dswt_pff;

  wire[0:0] scaledown_col_if_if_if_if_and_32_nl;
  wire[0:0] scaledown_col_if_if_if_if_and_33_nl;
  wire[0:0] scaledown_col_if_if_if_if_and_34_nl;
  wire[0:0] scaledown_col_if_if_if_if_and_35_nl;

  // Interconnect Declarations for Component Instantiations 
  assign u_linebuffer_rsc_0_0_i_bdwt = u_linebuffer_rsc_0_0_i_oswt & core_wen;
  assign u_linebuffer_rsc_0_0_i_biwt = (~ core_wten) & u_linebuffer_rsc_0_0_i_oswt;
  assign scaledown_col_if_if_if_if_and_32_nl = (u_linebuffer_rsc_0_0_i_ena_d_core_psct[0])
      & u_linebuffer_rsc_0_0_i_dswt_pff;
  assign u_linebuffer_rsc_0_0_i_ena_d_core_sct = {1'b0 , scaledown_col_if_if_if_if_and_32_nl};
  assign u_linebuffer_rsc_0_0_i_dswt_pff = core_wen & u_linebuffer_rsc_0_0_i_oswt_pff;
  assign scaledown_col_if_if_if_if_and_33_nl = (u_linebuffer_rsc_0_0_i_wea_d_core_psct[0])
      & u_linebuffer_rsc_0_0_i_dswt_pff;
  assign u_linebuffer_rsc_0_0_i_wea_d_core_sct = {1'b0 , scaledown_col_if_if_if_if_and_33_nl};
  assign scaledown_col_if_if_if_if_and_34_nl = (u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])
      & u_linebuffer_rsc_0_0_i_dswt_pff;
  assign u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct = {1'b0
      , scaledown_col_if_if_if_if_and_34_nl};
  assign scaledown_col_if_if_if_if_and_35_nl = (u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])
      & u_linebuffer_rsc_0_0_i_dswt_pff;
  assign u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct = {1'b0
      , scaledown_col_if_if_if_if_and_35_nl};
endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_y_linebuffer_rsc_2_0_i_1_y_linebuffer_rsc_2_0_wait_dp
// ------------------------------------------------------------------


module scaledown_core_y_linebuffer_rsc_2_0_i_1_y_linebuffer_rsc_2_0_wait_dp (
  clk, arst_n, y_linebuffer_rsc_2_0_i_da_d, y_linebuffer_rsc_2_0_i_qa_d, y_linebuffer_rsc_2_0_i_da_d_core,
      y_linebuffer_rsc_2_0_i_qa_d_mxwt, y_linebuffer_rsc_2_0_i_biwt, y_linebuffer_rsc_2_0_i_bdwt,
      y_linebuffer_rsc_2_0_i_biwt_1, y_linebuffer_rsc_2_0_i_bdwt_2
);
  input clk;
  input arst_n;
  output [9:0] y_linebuffer_rsc_2_0_i_da_d;
  input [19:0] y_linebuffer_rsc_2_0_i_qa_d;
  input [19:0] y_linebuffer_rsc_2_0_i_da_d_core;
  output [19:0] y_linebuffer_rsc_2_0_i_qa_d_mxwt;
  input y_linebuffer_rsc_2_0_i_biwt;
  input y_linebuffer_rsc_2_0_i_bdwt;
  input y_linebuffer_rsc_2_0_i_biwt_1;
  input y_linebuffer_rsc_2_0_i_bdwt_2;


  // Interconnect Declarations
  reg y_linebuffer_rsc_2_0_i_bcwt;
  reg y_linebuffer_rsc_2_0_i_bcwt_1;
  reg [9:0] y_linebuffer_rsc_2_0_i_qa_d_bfwt_19_10;
  reg [9:0] y_linebuffer_rsc_2_0_i_qa_d_bfwt_9_0;

  wire[9:0] scaledown_col_if_if_else_if_else_if_mux_2_nl;
  wire[9:0] scaledown_col_if_if_else_if_else_if_mux_3_nl;

  // Interconnect Declarations for Component Instantiations 
  assign scaledown_col_if_if_else_if_else_if_mux_2_nl = MUX_v_10_2_2((y_linebuffer_rsc_2_0_i_qa_d[19:10]),
      y_linebuffer_rsc_2_0_i_qa_d_bfwt_19_10, y_linebuffer_rsc_2_0_i_bcwt_1);
  assign scaledown_col_if_if_else_if_else_if_mux_3_nl = MUX_v_10_2_2((y_linebuffer_rsc_2_0_i_qa_d[9:0]),
      y_linebuffer_rsc_2_0_i_qa_d_bfwt_9_0, y_linebuffer_rsc_2_0_i_bcwt);
  assign y_linebuffer_rsc_2_0_i_qa_d_mxwt = {scaledown_col_if_if_else_if_else_if_mux_2_nl
      , scaledown_col_if_if_else_if_else_if_mux_3_nl};
  assign y_linebuffer_rsc_2_0_i_da_d = y_linebuffer_rsc_2_0_i_da_d_core[9:0];
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      y_linebuffer_rsc_2_0_i_bcwt <= 1'b0;
      y_linebuffer_rsc_2_0_i_bcwt_1 <= 1'b0;
    end
    else begin
      y_linebuffer_rsc_2_0_i_bcwt <= ~((~(y_linebuffer_rsc_2_0_i_bcwt | y_linebuffer_rsc_2_0_i_biwt))
          | y_linebuffer_rsc_2_0_i_bdwt);
      y_linebuffer_rsc_2_0_i_bcwt_1 <= ~((~(y_linebuffer_rsc_2_0_i_bcwt_1 | y_linebuffer_rsc_2_0_i_biwt_1))
          | y_linebuffer_rsc_2_0_i_bdwt_2);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      y_linebuffer_rsc_2_0_i_qa_d_bfwt_19_10 <= 10'b0000000000;
    end
    else if ( y_linebuffer_rsc_2_0_i_biwt_1 ) begin
      y_linebuffer_rsc_2_0_i_qa_d_bfwt_19_10 <= y_linebuffer_rsc_2_0_i_qa_d[19:10];
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      y_linebuffer_rsc_2_0_i_qa_d_bfwt_9_0 <= 10'b0000000000;
    end
    else if ( y_linebuffer_rsc_2_0_i_biwt ) begin
      y_linebuffer_rsc_2_0_i_qa_d_bfwt_9_0 <= y_linebuffer_rsc_2_0_i_qa_d[9:0];
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_y_linebuffer_rsc_2_0_i_1_y_linebuffer_rsc_2_0_wait_ctrl
// ------------------------------------------------------------------


module scaledown_core_y_linebuffer_rsc_2_0_i_1_y_linebuffer_rsc_2_0_wait_ctrl (
  core_wen, core_wten, y_linebuffer_rsc_2_0_i_oswt, y_linebuffer_rsc_2_0_i_oswt_1,
      y_linebuffer_rsc_2_0_i_ena_d_core_psct, y_linebuffer_rsc_2_0_i_wea_d_core_psct,
      y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct, y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct,
      y_linebuffer_rsc_2_0_i_biwt, y_linebuffer_rsc_2_0_i_bdwt, y_linebuffer_rsc_2_0_i_biwt_1,
      y_linebuffer_rsc_2_0_i_bdwt_2, y_linebuffer_rsc_2_0_i_ena_d_core_sct, y_linebuffer_rsc_2_0_i_wea_d_core_sct,
      y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct, y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct,
      y_linebuffer_rsc_2_0_i_oswt_1_pff, y_linebuffer_rsc_2_0_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input y_linebuffer_rsc_2_0_i_oswt;
  input y_linebuffer_rsc_2_0_i_oswt_1;
  input [1:0] y_linebuffer_rsc_2_0_i_ena_d_core_psct;
  input [1:0] y_linebuffer_rsc_2_0_i_wea_d_core_psct;
  input [1:0] y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  output y_linebuffer_rsc_2_0_i_biwt;
  output y_linebuffer_rsc_2_0_i_bdwt;
  output y_linebuffer_rsc_2_0_i_biwt_1;
  output y_linebuffer_rsc_2_0_i_bdwt_2;
  output [1:0] y_linebuffer_rsc_2_0_i_ena_d_core_sct;
  output [1:0] y_linebuffer_rsc_2_0_i_wea_d_core_sct;
  output [1:0] y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output [1:0] y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  input y_linebuffer_rsc_2_0_i_oswt_1_pff;
  input y_linebuffer_rsc_2_0_i_oswt_pff;


  // Interconnect Declarations
  wire y_linebuffer_rsc_2_0_i_dswt_1_pff;
  wire y_linebuffer_rsc_2_0_i_dswt_pff;

  wire[0:0] scaledown_col_if_if_else_if_else_if_and_9_nl;
  wire[0:0] scaledown_col_if_if_else_if_else_if_and_11_nl;

  // Interconnect Declarations for Component Instantiations 
  assign y_linebuffer_rsc_2_0_i_bdwt = y_linebuffer_rsc_2_0_i_oswt & core_wen;
  assign y_linebuffer_rsc_2_0_i_biwt = (~ core_wten) & y_linebuffer_rsc_2_0_i_oswt;
  assign y_linebuffer_rsc_2_0_i_bdwt_2 = y_linebuffer_rsc_2_0_i_oswt_1 & core_wen;
  assign y_linebuffer_rsc_2_0_i_biwt_1 = (~ core_wten) & y_linebuffer_rsc_2_0_i_oswt_1;
  assign y_linebuffer_rsc_2_0_i_ena_d_core_sct = y_linebuffer_rsc_2_0_i_ena_d_core_psct
      & ({y_linebuffer_rsc_2_0_i_dswt_1_pff , y_linebuffer_rsc_2_0_i_dswt_pff});
  assign y_linebuffer_rsc_2_0_i_dswt_1_pff = core_wen & y_linebuffer_rsc_2_0_i_oswt_1_pff;
  assign y_linebuffer_rsc_2_0_i_dswt_pff = core_wen & y_linebuffer_rsc_2_0_i_oswt_pff;
  assign scaledown_col_if_if_else_if_else_if_and_9_nl = (y_linebuffer_rsc_2_0_i_wea_d_core_psct[0])
      & y_linebuffer_rsc_2_0_i_dswt_pff;
  assign y_linebuffer_rsc_2_0_i_wea_d_core_sct = {1'b0 , scaledown_col_if_if_else_if_else_if_and_9_nl};
  assign y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct = y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      & ({y_linebuffer_rsc_2_0_i_dswt_1_pff , y_linebuffer_rsc_2_0_i_dswt_pff});
  assign scaledown_col_if_if_else_if_else_if_and_11_nl = (y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])
      & y_linebuffer_rsc_2_0_i_dswt_pff;
  assign y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct = {1'b0
      , scaledown_col_if_if_else_if_else_if_and_11_nl};
endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_y_linebuffer_rsc_1_0_i_1_y_linebuffer_rsc_1_0_wait_dp
// ------------------------------------------------------------------


module scaledown_core_y_linebuffer_rsc_1_0_i_1_y_linebuffer_rsc_1_0_wait_dp (
  clk, arst_n, y_linebuffer_rsc_1_0_i_da_d, y_linebuffer_rsc_1_0_i_qa_d, y_linebuffer_rsc_1_0_i_da_d_core,
      y_linebuffer_rsc_1_0_i_qa_d_mxwt, y_linebuffer_rsc_1_0_i_biwt, y_linebuffer_rsc_1_0_i_bdwt,
      y_linebuffer_rsc_1_0_i_biwt_1, y_linebuffer_rsc_1_0_i_bdwt_2
);
  input clk;
  input arst_n;
  output [9:0] y_linebuffer_rsc_1_0_i_da_d;
  input [19:0] y_linebuffer_rsc_1_0_i_qa_d;
  input [19:0] y_linebuffer_rsc_1_0_i_da_d_core;
  output [19:0] y_linebuffer_rsc_1_0_i_qa_d_mxwt;
  input y_linebuffer_rsc_1_0_i_biwt;
  input y_linebuffer_rsc_1_0_i_bdwt;
  input y_linebuffer_rsc_1_0_i_biwt_1;
  input y_linebuffer_rsc_1_0_i_bdwt_2;


  // Interconnect Declarations
  reg y_linebuffer_rsc_1_0_i_bcwt;
  reg y_linebuffer_rsc_1_0_i_bcwt_1;
  reg [9:0] y_linebuffer_rsc_1_0_i_qa_d_bfwt_19_10;
  reg [9:0] y_linebuffer_rsc_1_0_i_qa_d_bfwt_9_0;

  wire[9:0] scaledown_col_if_if_if_if_mux_6_nl;
  wire[9:0] scaledown_col_if_if_if_if_mux_7_nl;

  // Interconnect Declarations for Component Instantiations 
  assign scaledown_col_if_if_if_if_mux_6_nl = MUX_v_10_2_2((y_linebuffer_rsc_1_0_i_qa_d[19:10]),
      y_linebuffer_rsc_1_0_i_qa_d_bfwt_19_10, y_linebuffer_rsc_1_0_i_bcwt_1);
  assign scaledown_col_if_if_if_if_mux_7_nl = MUX_v_10_2_2((y_linebuffer_rsc_1_0_i_qa_d[9:0]),
      y_linebuffer_rsc_1_0_i_qa_d_bfwt_9_0, y_linebuffer_rsc_1_0_i_bcwt);
  assign y_linebuffer_rsc_1_0_i_qa_d_mxwt = {scaledown_col_if_if_if_if_mux_6_nl ,
      scaledown_col_if_if_if_if_mux_7_nl};
  assign y_linebuffer_rsc_1_0_i_da_d = y_linebuffer_rsc_1_0_i_da_d_core[9:0];
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      y_linebuffer_rsc_1_0_i_bcwt <= 1'b0;
      y_linebuffer_rsc_1_0_i_bcwt_1 <= 1'b0;
    end
    else begin
      y_linebuffer_rsc_1_0_i_bcwt <= ~((~(y_linebuffer_rsc_1_0_i_bcwt | y_linebuffer_rsc_1_0_i_biwt))
          | y_linebuffer_rsc_1_0_i_bdwt);
      y_linebuffer_rsc_1_0_i_bcwt_1 <= ~((~(y_linebuffer_rsc_1_0_i_bcwt_1 | y_linebuffer_rsc_1_0_i_biwt_1))
          | y_linebuffer_rsc_1_0_i_bdwt_2);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      y_linebuffer_rsc_1_0_i_qa_d_bfwt_19_10 <= 10'b0000000000;
    end
    else if ( y_linebuffer_rsc_1_0_i_biwt_1 ) begin
      y_linebuffer_rsc_1_0_i_qa_d_bfwt_19_10 <= y_linebuffer_rsc_1_0_i_qa_d[19:10];
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      y_linebuffer_rsc_1_0_i_qa_d_bfwt_9_0 <= 10'b0000000000;
    end
    else if ( y_linebuffer_rsc_1_0_i_biwt ) begin
      y_linebuffer_rsc_1_0_i_qa_d_bfwt_9_0 <= y_linebuffer_rsc_1_0_i_qa_d[9:0];
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_y_linebuffer_rsc_1_0_i_1_y_linebuffer_rsc_1_0_wait_ctrl
// ------------------------------------------------------------------


module scaledown_core_y_linebuffer_rsc_1_0_i_1_y_linebuffer_rsc_1_0_wait_ctrl (
  core_wen, core_wten, y_linebuffer_rsc_1_0_i_oswt, y_linebuffer_rsc_1_0_i_oswt_1,
      y_linebuffer_rsc_1_0_i_ena_d_core_psct, y_linebuffer_rsc_1_0_i_wea_d_core_psct,
      y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct, y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct,
      y_linebuffer_rsc_1_0_i_biwt, y_linebuffer_rsc_1_0_i_bdwt, y_linebuffer_rsc_1_0_i_biwt_1,
      y_linebuffer_rsc_1_0_i_bdwt_2, y_linebuffer_rsc_1_0_i_ena_d_core_sct, y_linebuffer_rsc_1_0_i_wea_d_core_sct,
      y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct, y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct,
      y_linebuffer_rsc_1_0_i_oswt_1_pff, y_linebuffer_rsc_1_0_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input y_linebuffer_rsc_1_0_i_oswt;
  input y_linebuffer_rsc_1_0_i_oswt_1;
  input [1:0] y_linebuffer_rsc_1_0_i_ena_d_core_psct;
  input [1:0] y_linebuffer_rsc_1_0_i_wea_d_core_psct;
  input [1:0] y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  output y_linebuffer_rsc_1_0_i_biwt;
  output y_linebuffer_rsc_1_0_i_bdwt;
  output y_linebuffer_rsc_1_0_i_biwt_1;
  output y_linebuffer_rsc_1_0_i_bdwt_2;
  output [1:0] y_linebuffer_rsc_1_0_i_ena_d_core_sct;
  output [1:0] y_linebuffer_rsc_1_0_i_wea_d_core_sct;
  output [1:0] y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output [1:0] y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  input y_linebuffer_rsc_1_0_i_oswt_1_pff;
  input y_linebuffer_rsc_1_0_i_oswt_pff;


  // Interconnect Declarations
  wire y_linebuffer_rsc_1_0_i_dswt_1_pff;
  wire y_linebuffer_rsc_1_0_i_dswt_pff;

  wire[0:0] scaledown_col_if_if_if_if_and_21_nl;
  wire[0:0] scaledown_col_if_if_if_if_and_23_nl;

  // Interconnect Declarations for Component Instantiations 
  assign y_linebuffer_rsc_1_0_i_bdwt = y_linebuffer_rsc_1_0_i_oswt & core_wen;
  assign y_linebuffer_rsc_1_0_i_biwt = (~ core_wten) & y_linebuffer_rsc_1_0_i_oswt;
  assign y_linebuffer_rsc_1_0_i_bdwt_2 = y_linebuffer_rsc_1_0_i_oswt_1 & core_wen;
  assign y_linebuffer_rsc_1_0_i_biwt_1 = (~ core_wten) & y_linebuffer_rsc_1_0_i_oswt_1;
  assign y_linebuffer_rsc_1_0_i_ena_d_core_sct = y_linebuffer_rsc_1_0_i_ena_d_core_psct
      & ({y_linebuffer_rsc_1_0_i_dswt_1_pff , y_linebuffer_rsc_1_0_i_dswt_pff});
  assign y_linebuffer_rsc_1_0_i_dswt_1_pff = core_wen & y_linebuffer_rsc_1_0_i_oswt_1_pff;
  assign y_linebuffer_rsc_1_0_i_dswt_pff = core_wen & y_linebuffer_rsc_1_0_i_oswt_pff;
  assign scaledown_col_if_if_if_if_and_21_nl = (y_linebuffer_rsc_1_0_i_wea_d_core_psct[0])
      & y_linebuffer_rsc_1_0_i_dswt_pff;
  assign y_linebuffer_rsc_1_0_i_wea_d_core_sct = {1'b0 , scaledown_col_if_if_if_if_and_21_nl};
  assign y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct = y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      & ({y_linebuffer_rsc_1_0_i_dswt_1_pff , y_linebuffer_rsc_1_0_i_dswt_pff});
  assign scaledown_col_if_if_if_if_and_23_nl = (y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])
      & y_linebuffer_rsc_1_0_i_dswt_pff;
  assign y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct = {1'b0
      , scaledown_col_if_if_if_if_and_23_nl};
endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_y_linebuffer_rsc_0_0_i_1_y_linebuffer_rsc_0_0_wait_dp
// ------------------------------------------------------------------


module scaledown_core_y_linebuffer_rsc_0_0_i_1_y_linebuffer_rsc_0_0_wait_dp (
  clk, arst_n, y_linebuffer_rsc_0_0_i_adra_d, y_linebuffer_rsc_0_0_i_da_d, y_linebuffer_rsc_0_0_i_qa_d,
      y_linebuffer_rsc_0_0_i_adra_d_core, y_linebuffer_rsc_0_0_i_da_d_core, y_linebuffer_rsc_0_0_i_qa_d_mxwt,
      y_linebuffer_rsc_0_0_i_biwt, y_linebuffer_rsc_0_0_i_bdwt
);
  input clk;
  input arst_n;
  output [11:0] y_linebuffer_rsc_0_0_i_adra_d;
  output [9:0] y_linebuffer_rsc_0_0_i_da_d;
  input [19:0] y_linebuffer_rsc_0_0_i_qa_d;
  input [23:0] y_linebuffer_rsc_0_0_i_adra_d_core;
  input [19:0] y_linebuffer_rsc_0_0_i_da_d_core;
  output [9:0] y_linebuffer_rsc_0_0_i_qa_d_mxwt;
  input y_linebuffer_rsc_0_0_i_biwt;
  input y_linebuffer_rsc_0_0_i_bdwt;


  // Interconnect Declarations
  reg y_linebuffer_rsc_0_0_i_bcwt;
  reg [9:0] y_linebuffer_rsc_0_0_i_qa_d_bfwt_9_0;


  // Interconnect Declarations for Component Instantiations 
  assign y_linebuffer_rsc_0_0_i_qa_d_mxwt = MUX_v_10_2_2((y_linebuffer_rsc_0_0_i_qa_d[9:0]),
      y_linebuffer_rsc_0_0_i_qa_d_bfwt_9_0, y_linebuffer_rsc_0_0_i_bcwt);
  assign y_linebuffer_rsc_0_0_i_adra_d = y_linebuffer_rsc_0_0_i_adra_d_core[11:0];
  assign y_linebuffer_rsc_0_0_i_da_d = y_linebuffer_rsc_0_0_i_da_d_core[9:0];
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      y_linebuffer_rsc_0_0_i_bcwt <= 1'b0;
    end
    else begin
      y_linebuffer_rsc_0_0_i_bcwt <= ~((~(y_linebuffer_rsc_0_0_i_bcwt | y_linebuffer_rsc_0_0_i_biwt))
          | y_linebuffer_rsc_0_0_i_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      y_linebuffer_rsc_0_0_i_qa_d_bfwt_9_0 <= 10'b0000000000;
    end
    else if ( y_linebuffer_rsc_0_0_i_biwt ) begin
      y_linebuffer_rsc_0_0_i_qa_d_bfwt_9_0 <= y_linebuffer_rsc_0_0_i_qa_d[9:0];
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_y_linebuffer_rsc_0_0_i_1_y_linebuffer_rsc_0_0_wait_ctrl
// ------------------------------------------------------------------


module scaledown_core_y_linebuffer_rsc_0_0_i_1_y_linebuffer_rsc_0_0_wait_ctrl (
  core_wen, core_wten, y_linebuffer_rsc_0_0_i_oswt, y_linebuffer_rsc_0_0_i_ena_d_core_psct,
      y_linebuffer_rsc_0_0_i_wea_d_core_psct, y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct,
      y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct, y_linebuffer_rsc_0_0_i_biwt,
      y_linebuffer_rsc_0_0_i_bdwt, y_linebuffer_rsc_0_0_i_ena_d_core_sct, y_linebuffer_rsc_0_0_i_wea_d_core_sct,
      y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct, y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct,
      y_linebuffer_rsc_0_0_i_oswt_pff
);
  input core_wen;
  input core_wten;
  input y_linebuffer_rsc_0_0_i_oswt;
  input [1:0] y_linebuffer_rsc_0_0_i_ena_d_core_psct;
  input [1:0] y_linebuffer_rsc_0_0_i_wea_d_core_psct;
  input [1:0] y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  output y_linebuffer_rsc_0_0_i_biwt;
  output y_linebuffer_rsc_0_0_i_bdwt;
  output [1:0] y_linebuffer_rsc_0_0_i_ena_d_core_sct;
  output [1:0] y_linebuffer_rsc_0_0_i_wea_d_core_sct;
  output [1:0] y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  output [1:0] y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  input y_linebuffer_rsc_0_0_i_oswt_pff;


  // Interconnect Declarations
  wire y_linebuffer_rsc_0_0_i_dswt_pff;

  wire[0:0] scaledown_col_if_if_if_if_and_8_nl;
  wire[0:0] scaledown_col_if_if_if_if_and_9_nl;
  wire[0:0] scaledown_col_if_if_if_if_and_10_nl;
  wire[0:0] scaledown_col_if_if_if_if_and_11_nl;

  // Interconnect Declarations for Component Instantiations 
  assign y_linebuffer_rsc_0_0_i_bdwt = y_linebuffer_rsc_0_0_i_oswt & core_wen;
  assign y_linebuffer_rsc_0_0_i_biwt = (~ core_wten) & y_linebuffer_rsc_0_0_i_oswt;
  assign scaledown_col_if_if_if_if_and_8_nl = (y_linebuffer_rsc_0_0_i_ena_d_core_psct[0])
      & y_linebuffer_rsc_0_0_i_dswt_pff;
  assign y_linebuffer_rsc_0_0_i_ena_d_core_sct = {1'b0 , scaledown_col_if_if_if_if_and_8_nl};
  assign y_linebuffer_rsc_0_0_i_dswt_pff = core_wen & y_linebuffer_rsc_0_0_i_oswt_pff;
  assign scaledown_col_if_if_if_if_and_9_nl = (y_linebuffer_rsc_0_0_i_wea_d_core_psct[0])
      & y_linebuffer_rsc_0_0_i_dswt_pff;
  assign y_linebuffer_rsc_0_0_i_wea_d_core_sct = {1'b0 , scaledown_col_if_if_if_if_and_9_nl};
  assign scaledown_col_if_if_if_if_and_10_nl = (y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])
      & y_linebuffer_rsc_0_0_i_dswt_pff;
  assign y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct = {1'b0
      , scaledown_col_if_if_if_if_and_10_nl};
  assign scaledown_col_if_if_if_if_and_11_nl = (y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])
      & y_linebuffer_rsc_0_0_i_dswt_pff;
  assign y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct = {1'b0
      , scaledown_col_if_if_if_if_and_11_nl};
endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_v_dst_rsci_v_dst_wait_dp
// ------------------------------------------------------------------


module scaledown_core_v_dst_rsci_v_dst_wait_dp (
  clk, arst_n, v_dst_rsci_oswt, v_dst_rsci_wen_comp, v_dst_rsci_biwt, v_dst_rsci_bdwt,
      v_dst_rsci_bcwt
);
  input clk;
  input arst_n;
  input v_dst_rsci_oswt;
  output v_dst_rsci_wen_comp;
  input v_dst_rsci_biwt;
  input v_dst_rsci_bdwt;
  output v_dst_rsci_bcwt;
  reg v_dst_rsci_bcwt;



  // Interconnect Declarations for Component Instantiations 
  assign v_dst_rsci_wen_comp = (~ v_dst_rsci_oswt) | v_dst_rsci_biwt | v_dst_rsci_bcwt;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      v_dst_rsci_bcwt <= 1'b0;
    end
    else begin
      v_dst_rsci_bcwt <= ~((~(v_dst_rsci_bcwt | v_dst_rsci_biwt)) | v_dst_rsci_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_v_dst_rsci_v_dst_wait_ctrl
// ------------------------------------------------------------------


module scaledown_core_v_dst_rsci_v_dst_wait_ctrl (
  core_wen, v_dst_rsci_oswt, v_dst_rsci_irdy, v_dst_rsci_biwt, v_dst_rsci_bdwt, v_dst_rsci_bcwt,
      v_dst_rsci_ivld_core_sct
);
  input core_wen;
  input v_dst_rsci_oswt;
  input v_dst_rsci_irdy;
  output v_dst_rsci_biwt;
  output v_dst_rsci_bdwt;
  input v_dst_rsci_bcwt;
  output v_dst_rsci_ivld_core_sct;


  // Interconnect Declarations
  wire v_dst_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign v_dst_rsci_bdwt = v_dst_rsci_oswt & core_wen;
  assign v_dst_rsci_biwt = v_dst_rsci_ogwt & v_dst_rsci_irdy;
  assign v_dst_rsci_ogwt = v_dst_rsci_oswt & (~ v_dst_rsci_bcwt);
  assign v_dst_rsci_ivld_core_sct = v_dst_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_u_dst_rsci_u_dst_wait_dp
// ------------------------------------------------------------------


module scaledown_core_u_dst_rsci_u_dst_wait_dp (
  clk, arst_n, u_dst_rsci_oswt, u_dst_rsci_wen_comp, u_dst_rsci_biwt, u_dst_rsci_bdwt,
      u_dst_rsci_bcwt
);
  input clk;
  input arst_n;
  input u_dst_rsci_oswt;
  output u_dst_rsci_wen_comp;
  input u_dst_rsci_biwt;
  input u_dst_rsci_bdwt;
  output u_dst_rsci_bcwt;
  reg u_dst_rsci_bcwt;



  // Interconnect Declarations for Component Instantiations 
  assign u_dst_rsci_wen_comp = (~ u_dst_rsci_oswt) | u_dst_rsci_biwt | u_dst_rsci_bcwt;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      u_dst_rsci_bcwt <= 1'b0;
    end
    else begin
      u_dst_rsci_bcwt <= ~((~(u_dst_rsci_bcwt | u_dst_rsci_biwt)) | u_dst_rsci_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_u_dst_rsci_u_dst_wait_ctrl
// ------------------------------------------------------------------


module scaledown_core_u_dst_rsci_u_dst_wait_ctrl (
  core_wen, u_dst_rsci_oswt, u_dst_rsci_irdy, u_dst_rsci_biwt, u_dst_rsci_bdwt, u_dst_rsci_bcwt,
      u_dst_rsci_ivld_core_sct
);
  input core_wen;
  input u_dst_rsci_oswt;
  input u_dst_rsci_irdy;
  output u_dst_rsci_biwt;
  output u_dst_rsci_bdwt;
  input u_dst_rsci_bcwt;
  output u_dst_rsci_ivld_core_sct;


  // Interconnect Declarations
  wire u_dst_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign u_dst_rsci_bdwt = u_dst_rsci_oswt & core_wen;
  assign u_dst_rsci_biwt = u_dst_rsci_ogwt & u_dst_rsci_irdy;
  assign u_dst_rsci_ogwt = u_dst_rsci_oswt & (~ u_dst_rsci_bcwt);
  assign u_dst_rsci_ivld_core_sct = u_dst_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_y_dst_rsci_y_dst_wait_dp
// ------------------------------------------------------------------


module scaledown_core_y_dst_rsci_y_dst_wait_dp (
  clk, arst_n, y_dst_rsci_oswt, y_dst_rsci_wen_comp, y_dst_rsci_biwt, y_dst_rsci_bdwt,
      y_dst_rsci_bcwt
);
  input clk;
  input arst_n;
  input y_dst_rsci_oswt;
  output y_dst_rsci_wen_comp;
  input y_dst_rsci_biwt;
  input y_dst_rsci_bdwt;
  output y_dst_rsci_bcwt;
  reg y_dst_rsci_bcwt;



  // Interconnect Declarations for Component Instantiations 
  assign y_dst_rsci_wen_comp = (~ y_dst_rsci_oswt) | y_dst_rsci_biwt | y_dst_rsci_bcwt;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      y_dst_rsci_bcwt <= 1'b0;
    end
    else begin
      y_dst_rsci_bcwt <= ~((~(y_dst_rsci_bcwt | y_dst_rsci_biwt)) | y_dst_rsci_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_y_dst_rsci_y_dst_wait_ctrl
// ------------------------------------------------------------------


module scaledown_core_y_dst_rsci_y_dst_wait_ctrl (
  core_wen, y_dst_rsci_oswt, y_dst_rsci_irdy, y_dst_rsci_biwt, y_dst_rsci_bdwt, y_dst_rsci_bcwt,
      y_dst_rsci_ivld_core_sct
);
  input core_wen;
  input y_dst_rsci_oswt;
  input y_dst_rsci_irdy;
  output y_dst_rsci_biwt;
  output y_dst_rsci_bdwt;
  input y_dst_rsci_bcwt;
  output y_dst_rsci_ivld_core_sct;


  // Interconnect Declarations
  wire y_dst_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign y_dst_rsci_bdwt = y_dst_rsci_oswt & core_wen;
  assign y_dst_rsci_biwt = y_dst_rsci_ogwt & y_dst_rsci_irdy;
  assign y_dst_rsci_ogwt = y_dst_rsci_oswt & (~ y_dst_rsci_bcwt);
  assign y_dst_rsci_ivld_core_sct = y_dst_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_v_src_rsci_v_src_wait_dp
// ------------------------------------------------------------------


module scaledown_core_v_src_rsci_v_src_wait_dp (
  clk, arst_n, v_src_rsci_oswt, v_src_rsci_wen_comp, v_src_rsci_idat_mxwt, v_src_rsci_biwt,
      v_src_rsci_bdwt, v_src_rsci_bcwt, v_src_rsci_idat
);
  input clk;
  input arst_n;
  input v_src_rsci_oswt;
  output v_src_rsci_wen_comp;
  output [9:0] v_src_rsci_idat_mxwt;
  input v_src_rsci_biwt;
  input v_src_rsci_bdwt;
  output v_src_rsci_bcwt;
  reg v_src_rsci_bcwt;
  input [9:0] v_src_rsci_idat;


  // Interconnect Declarations
  reg [9:0] v_src_rsci_idat_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign v_src_rsci_wen_comp = (~ v_src_rsci_oswt) | v_src_rsci_biwt | v_src_rsci_bcwt;
  assign v_src_rsci_idat_mxwt = MUX_v_10_2_2(v_src_rsci_idat, v_src_rsci_idat_bfwt,
      v_src_rsci_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      v_src_rsci_bcwt <= 1'b0;
    end
    else begin
      v_src_rsci_bcwt <= ~((~(v_src_rsci_bcwt | v_src_rsci_biwt)) | v_src_rsci_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      v_src_rsci_idat_bfwt <= 10'b0000000000;
    end
    else if ( v_src_rsci_biwt ) begin
      v_src_rsci_idat_bfwt <= v_src_rsci_idat;
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_v_src_rsci_v_src_wait_ctrl
// ------------------------------------------------------------------


module scaledown_core_v_src_rsci_v_src_wait_ctrl (
  core_wen, v_src_rsci_oswt, v_src_rsci_biwt, v_src_rsci_bdwt, v_src_rsci_bcwt, v_src_rsci_irdy_core_sct,
      v_src_rsci_ivld
);
  input core_wen;
  input v_src_rsci_oswt;
  output v_src_rsci_biwt;
  output v_src_rsci_bdwt;
  input v_src_rsci_bcwt;
  output v_src_rsci_irdy_core_sct;
  input v_src_rsci_ivld;


  // Interconnect Declarations
  wire v_src_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign v_src_rsci_bdwt = v_src_rsci_oswt & core_wen;
  assign v_src_rsci_biwt = v_src_rsci_ogwt & v_src_rsci_ivld;
  assign v_src_rsci_ogwt = v_src_rsci_oswt & (~ v_src_rsci_bcwt);
  assign v_src_rsci_irdy_core_sct = v_src_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_u_src_rsci_u_src_wait_dp
// ------------------------------------------------------------------


module scaledown_core_u_src_rsci_u_src_wait_dp (
  clk, arst_n, u_src_rsci_oswt, u_src_rsci_wen_comp, u_src_rsci_idat_mxwt, u_src_rsci_biwt,
      u_src_rsci_bdwt, u_src_rsci_bcwt, u_src_rsci_idat
);
  input clk;
  input arst_n;
  input u_src_rsci_oswt;
  output u_src_rsci_wen_comp;
  output [9:0] u_src_rsci_idat_mxwt;
  input u_src_rsci_biwt;
  input u_src_rsci_bdwt;
  output u_src_rsci_bcwt;
  reg u_src_rsci_bcwt;
  input [9:0] u_src_rsci_idat;


  // Interconnect Declarations
  reg [9:0] u_src_rsci_idat_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign u_src_rsci_wen_comp = (~ u_src_rsci_oswt) | u_src_rsci_biwt | u_src_rsci_bcwt;
  assign u_src_rsci_idat_mxwt = MUX_v_10_2_2(u_src_rsci_idat, u_src_rsci_idat_bfwt,
      u_src_rsci_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      u_src_rsci_bcwt <= 1'b0;
    end
    else begin
      u_src_rsci_bcwt <= ~((~(u_src_rsci_bcwt | u_src_rsci_biwt)) | u_src_rsci_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      u_src_rsci_idat_bfwt <= 10'b0000000000;
    end
    else if ( u_src_rsci_biwt ) begin
      u_src_rsci_idat_bfwt <= u_src_rsci_idat;
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_u_src_rsci_u_src_wait_ctrl
// ------------------------------------------------------------------


module scaledown_core_u_src_rsci_u_src_wait_ctrl (
  core_wen, u_src_rsci_oswt, u_src_rsci_biwt, u_src_rsci_bdwt, u_src_rsci_bcwt, u_src_rsci_irdy_core_sct,
      u_src_rsci_ivld
);
  input core_wen;
  input u_src_rsci_oswt;
  output u_src_rsci_biwt;
  output u_src_rsci_bdwt;
  input u_src_rsci_bcwt;
  output u_src_rsci_irdy_core_sct;
  input u_src_rsci_ivld;


  // Interconnect Declarations
  wire u_src_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign u_src_rsci_bdwt = u_src_rsci_oswt & core_wen;
  assign u_src_rsci_biwt = u_src_rsci_ogwt & u_src_rsci_ivld;
  assign u_src_rsci_ogwt = u_src_rsci_oswt & (~ u_src_rsci_bcwt);
  assign u_src_rsci_irdy_core_sct = u_src_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_y_src_rsci_y_src_wait_dp
// ------------------------------------------------------------------


module scaledown_core_y_src_rsci_y_src_wait_dp (
  clk, arst_n, y_src_rsci_oswt, y_src_rsci_wen_comp, y_src_rsci_idat_mxwt, y_src_rsci_biwt,
      y_src_rsci_bdwt, y_src_rsci_bcwt, y_src_rsci_idat
);
  input clk;
  input arst_n;
  input y_src_rsci_oswt;
  output y_src_rsci_wen_comp;
  output [9:0] y_src_rsci_idat_mxwt;
  input y_src_rsci_biwt;
  input y_src_rsci_bdwt;
  output y_src_rsci_bcwt;
  reg y_src_rsci_bcwt;
  input [9:0] y_src_rsci_idat;


  // Interconnect Declarations
  reg [9:0] y_src_rsci_idat_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign y_src_rsci_wen_comp = (~ y_src_rsci_oswt) | y_src_rsci_biwt | y_src_rsci_bcwt;
  assign y_src_rsci_idat_mxwt = MUX_v_10_2_2(y_src_rsci_idat, y_src_rsci_idat_bfwt,
      y_src_rsci_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      y_src_rsci_bcwt <= 1'b0;
    end
    else begin
      y_src_rsci_bcwt <= ~((~(y_src_rsci_bcwt | y_src_rsci_biwt)) | y_src_rsci_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      y_src_rsci_idat_bfwt <= 10'b0000000000;
    end
    else if ( y_src_rsci_biwt ) begin
      y_src_rsci_idat_bfwt <= y_src_rsci_idat;
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_y_src_rsci_y_src_wait_ctrl
// ------------------------------------------------------------------


module scaledown_core_y_src_rsci_y_src_wait_ctrl (
  core_wen, y_src_rsci_oswt, y_src_rsci_biwt, y_src_rsci_bdwt, y_src_rsci_bcwt, y_src_rsci_irdy_core_sct,
      y_src_rsci_ivld
);
  input core_wen;
  input y_src_rsci_oswt;
  output y_src_rsci_biwt;
  output y_src_rsci_bdwt;
  input y_src_rsci_bcwt;
  output y_src_rsci_irdy_core_sct;
  input y_src_rsci_ivld;


  // Interconnect Declarations
  wire y_src_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign y_src_rsci_bdwt = y_src_rsci_oswt & core_wen;
  assign y_src_rsci_biwt = y_src_rsci_ogwt & y_src_rsci_ivld;
  assign y_src_rsci_ogwt = y_src_rsci_oswt & (~ y_src_rsci_bcwt);
  assign y_src_rsci_irdy_core_sct = y_src_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    crop_core_staller
// ------------------------------------------------------------------


module crop_core_staller (
  core_wen, y_src_rsci_wen_comp, u_src_rsci_wen_comp, v_src_rsci_wen_comp, y_dst_rsci_wen_comp,
      u_dst_rsci_wen_comp, v_dst_rsci_wen_comp
);
  output core_wen;
  input y_src_rsci_wen_comp;
  input u_src_rsci_wen_comp;
  input v_src_rsci_wen_comp;
  input y_dst_rsci_wen_comp;
  input u_dst_rsci_wen_comp;
  input v_dst_rsci_wen_comp;



  // Interconnect Declarations for Component Instantiations 
  assign core_wen = y_src_rsci_wen_comp & u_src_rsci_wen_comp & v_src_rsci_wen_comp
      & y_dst_rsci_wen_comp & u_dst_rsci_wen_comp & v_dst_rsci_wen_comp;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    crop_core_v_dst_rsci_v_dst_wait_dp
// ------------------------------------------------------------------


module crop_core_v_dst_rsci_v_dst_wait_dp (
  clk, arst_n, v_dst_rsci_oswt, v_dst_rsci_wen_comp, v_dst_rsci_biwt, v_dst_rsci_bdwt,
      v_dst_rsci_bcwt
);
  input clk;
  input arst_n;
  input v_dst_rsci_oswt;
  output v_dst_rsci_wen_comp;
  input v_dst_rsci_biwt;
  input v_dst_rsci_bdwt;
  output v_dst_rsci_bcwt;
  reg v_dst_rsci_bcwt;



  // Interconnect Declarations for Component Instantiations 
  assign v_dst_rsci_wen_comp = (~ v_dst_rsci_oswt) | v_dst_rsci_biwt | v_dst_rsci_bcwt;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      v_dst_rsci_bcwt <= 1'b0;
    end
    else begin
      v_dst_rsci_bcwt <= ~((~(v_dst_rsci_bcwt | v_dst_rsci_biwt)) | v_dst_rsci_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    crop_core_v_dst_rsci_v_dst_wait_ctrl
// ------------------------------------------------------------------


module crop_core_v_dst_rsci_v_dst_wait_ctrl (
  core_wen, v_dst_rsci_oswt, v_dst_rsci_irdy, v_dst_rsci_biwt, v_dst_rsci_bdwt, v_dst_rsci_bcwt,
      v_dst_rsci_ivld_core_sct
);
  input core_wen;
  input v_dst_rsci_oswt;
  input v_dst_rsci_irdy;
  output v_dst_rsci_biwt;
  output v_dst_rsci_bdwt;
  input v_dst_rsci_bcwt;
  output v_dst_rsci_ivld_core_sct;


  // Interconnect Declarations
  wire v_dst_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign v_dst_rsci_bdwt = v_dst_rsci_oswt & core_wen;
  assign v_dst_rsci_biwt = v_dst_rsci_ogwt & v_dst_rsci_irdy;
  assign v_dst_rsci_ogwt = v_dst_rsci_oswt & (~ v_dst_rsci_bcwt);
  assign v_dst_rsci_ivld_core_sct = v_dst_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    crop_core_u_dst_rsci_u_dst_wait_dp
// ------------------------------------------------------------------


module crop_core_u_dst_rsci_u_dst_wait_dp (
  clk, arst_n, u_dst_rsci_oswt, u_dst_rsci_wen_comp, u_dst_rsci_biwt, u_dst_rsci_bdwt,
      u_dst_rsci_bcwt
);
  input clk;
  input arst_n;
  input u_dst_rsci_oswt;
  output u_dst_rsci_wen_comp;
  input u_dst_rsci_biwt;
  input u_dst_rsci_bdwt;
  output u_dst_rsci_bcwt;
  reg u_dst_rsci_bcwt;



  // Interconnect Declarations for Component Instantiations 
  assign u_dst_rsci_wen_comp = (~ u_dst_rsci_oswt) | u_dst_rsci_biwt | u_dst_rsci_bcwt;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      u_dst_rsci_bcwt <= 1'b0;
    end
    else begin
      u_dst_rsci_bcwt <= ~((~(u_dst_rsci_bcwt | u_dst_rsci_biwt)) | u_dst_rsci_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    crop_core_u_dst_rsci_u_dst_wait_ctrl
// ------------------------------------------------------------------


module crop_core_u_dst_rsci_u_dst_wait_ctrl (
  core_wen, u_dst_rsci_oswt, u_dst_rsci_irdy, u_dst_rsci_biwt, u_dst_rsci_bdwt, u_dst_rsci_bcwt,
      u_dst_rsci_ivld_core_sct
);
  input core_wen;
  input u_dst_rsci_oswt;
  input u_dst_rsci_irdy;
  output u_dst_rsci_biwt;
  output u_dst_rsci_bdwt;
  input u_dst_rsci_bcwt;
  output u_dst_rsci_ivld_core_sct;


  // Interconnect Declarations
  wire u_dst_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign u_dst_rsci_bdwt = u_dst_rsci_oswt & core_wen;
  assign u_dst_rsci_biwt = u_dst_rsci_ogwt & u_dst_rsci_irdy;
  assign u_dst_rsci_ogwt = u_dst_rsci_oswt & (~ u_dst_rsci_bcwt);
  assign u_dst_rsci_ivld_core_sct = u_dst_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    crop_core_y_dst_rsci_y_dst_wait_dp
// ------------------------------------------------------------------


module crop_core_y_dst_rsci_y_dst_wait_dp (
  clk, arst_n, y_dst_rsci_oswt, y_dst_rsci_wen_comp, y_dst_rsci_biwt, y_dst_rsci_bdwt,
      y_dst_rsci_bcwt
);
  input clk;
  input arst_n;
  input y_dst_rsci_oswt;
  output y_dst_rsci_wen_comp;
  input y_dst_rsci_biwt;
  input y_dst_rsci_bdwt;
  output y_dst_rsci_bcwt;
  reg y_dst_rsci_bcwt;



  // Interconnect Declarations for Component Instantiations 
  assign y_dst_rsci_wen_comp = (~ y_dst_rsci_oswt) | y_dst_rsci_biwt | y_dst_rsci_bcwt;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      y_dst_rsci_bcwt <= 1'b0;
    end
    else begin
      y_dst_rsci_bcwt <= ~((~(y_dst_rsci_bcwt | y_dst_rsci_biwt)) | y_dst_rsci_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    crop_core_y_dst_rsci_y_dst_wait_ctrl
// ------------------------------------------------------------------


module crop_core_y_dst_rsci_y_dst_wait_ctrl (
  core_wen, y_dst_rsci_oswt, y_dst_rsci_irdy, y_dst_rsci_biwt, y_dst_rsci_bdwt, y_dst_rsci_bcwt,
      y_dst_rsci_ivld_core_sct
);
  input core_wen;
  input y_dst_rsci_oswt;
  input y_dst_rsci_irdy;
  output y_dst_rsci_biwt;
  output y_dst_rsci_bdwt;
  input y_dst_rsci_bcwt;
  output y_dst_rsci_ivld_core_sct;


  // Interconnect Declarations
  wire y_dst_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign y_dst_rsci_bdwt = y_dst_rsci_oswt & core_wen;
  assign y_dst_rsci_biwt = y_dst_rsci_ogwt & y_dst_rsci_irdy;
  assign y_dst_rsci_ogwt = y_dst_rsci_oswt & (~ y_dst_rsci_bcwt);
  assign y_dst_rsci_ivld_core_sct = y_dst_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    crop_core_v_src_rsci_v_src_wait_dp
// ------------------------------------------------------------------


module crop_core_v_src_rsci_v_src_wait_dp (
  clk, arst_n, v_src_rsci_oswt, v_src_rsci_wen_comp, v_src_rsci_idat_mxwt, v_src_rsci_biwt,
      v_src_rsci_bdwt, v_src_rsci_bcwt, v_src_rsci_idat
);
  input clk;
  input arst_n;
  input v_src_rsci_oswt;
  output v_src_rsci_wen_comp;
  output [9:0] v_src_rsci_idat_mxwt;
  input v_src_rsci_biwt;
  input v_src_rsci_bdwt;
  output v_src_rsci_bcwt;
  reg v_src_rsci_bcwt;
  input [9:0] v_src_rsci_idat;


  // Interconnect Declarations
  reg [9:0] v_src_rsci_idat_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign v_src_rsci_wen_comp = (~ v_src_rsci_oswt) | v_src_rsci_biwt | v_src_rsci_bcwt;
  assign v_src_rsci_idat_mxwt = MUX_v_10_2_2(v_src_rsci_idat, v_src_rsci_idat_bfwt,
      v_src_rsci_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      v_src_rsci_bcwt <= 1'b0;
    end
    else begin
      v_src_rsci_bcwt <= ~((~(v_src_rsci_bcwt | v_src_rsci_biwt)) | v_src_rsci_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      v_src_rsci_idat_bfwt <= 10'b0000000000;
    end
    else if ( v_src_rsci_biwt ) begin
      v_src_rsci_idat_bfwt <= v_src_rsci_idat;
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    crop_core_v_src_rsci_v_src_wait_ctrl
// ------------------------------------------------------------------


module crop_core_v_src_rsci_v_src_wait_ctrl (
  core_wen, v_src_rsci_oswt, v_src_rsci_biwt, v_src_rsci_bdwt, v_src_rsci_bcwt, v_src_rsci_irdy_core_sct,
      v_src_rsci_ivld
);
  input core_wen;
  input v_src_rsci_oswt;
  output v_src_rsci_biwt;
  output v_src_rsci_bdwt;
  input v_src_rsci_bcwt;
  output v_src_rsci_irdy_core_sct;
  input v_src_rsci_ivld;


  // Interconnect Declarations
  wire v_src_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign v_src_rsci_bdwt = v_src_rsci_oswt & core_wen;
  assign v_src_rsci_biwt = v_src_rsci_ogwt & v_src_rsci_ivld;
  assign v_src_rsci_ogwt = v_src_rsci_oswt & (~ v_src_rsci_bcwt);
  assign v_src_rsci_irdy_core_sct = v_src_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    crop_core_u_src_rsci_u_src_wait_dp
// ------------------------------------------------------------------


module crop_core_u_src_rsci_u_src_wait_dp (
  clk, arst_n, u_src_rsci_oswt, u_src_rsci_wen_comp, u_src_rsci_idat_mxwt, u_src_rsci_biwt,
      u_src_rsci_bdwt, u_src_rsci_bcwt, u_src_rsci_idat
);
  input clk;
  input arst_n;
  input u_src_rsci_oswt;
  output u_src_rsci_wen_comp;
  output [9:0] u_src_rsci_idat_mxwt;
  input u_src_rsci_biwt;
  input u_src_rsci_bdwt;
  output u_src_rsci_bcwt;
  reg u_src_rsci_bcwt;
  input [9:0] u_src_rsci_idat;


  // Interconnect Declarations
  reg [9:0] u_src_rsci_idat_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign u_src_rsci_wen_comp = (~ u_src_rsci_oswt) | u_src_rsci_biwt | u_src_rsci_bcwt;
  assign u_src_rsci_idat_mxwt = MUX_v_10_2_2(u_src_rsci_idat, u_src_rsci_idat_bfwt,
      u_src_rsci_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      u_src_rsci_bcwt <= 1'b0;
    end
    else begin
      u_src_rsci_bcwt <= ~((~(u_src_rsci_bcwt | u_src_rsci_biwt)) | u_src_rsci_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      u_src_rsci_idat_bfwt <= 10'b0000000000;
    end
    else if ( u_src_rsci_biwt ) begin
      u_src_rsci_idat_bfwt <= u_src_rsci_idat;
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    crop_core_u_src_rsci_u_src_wait_ctrl
// ------------------------------------------------------------------


module crop_core_u_src_rsci_u_src_wait_ctrl (
  core_wen, u_src_rsci_oswt, u_src_rsci_biwt, u_src_rsci_bdwt, u_src_rsci_bcwt, u_src_rsci_irdy_core_sct,
      u_src_rsci_ivld
);
  input core_wen;
  input u_src_rsci_oswt;
  output u_src_rsci_biwt;
  output u_src_rsci_bdwt;
  input u_src_rsci_bcwt;
  output u_src_rsci_irdy_core_sct;
  input u_src_rsci_ivld;


  // Interconnect Declarations
  wire u_src_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign u_src_rsci_bdwt = u_src_rsci_oswt & core_wen;
  assign u_src_rsci_biwt = u_src_rsci_ogwt & u_src_rsci_ivld;
  assign u_src_rsci_ogwt = u_src_rsci_oswt & (~ u_src_rsci_bcwt);
  assign u_src_rsci_irdy_core_sct = u_src_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    crop_core_y_src_rsci_y_src_wait_dp
// ------------------------------------------------------------------


module crop_core_y_src_rsci_y_src_wait_dp (
  clk, arst_n, y_src_rsci_oswt, y_src_rsci_wen_comp, y_src_rsci_idat_mxwt, y_src_rsci_biwt,
      y_src_rsci_bdwt, y_src_rsci_bcwt, y_src_rsci_idat
);
  input clk;
  input arst_n;
  input y_src_rsci_oswt;
  output y_src_rsci_wen_comp;
  output [9:0] y_src_rsci_idat_mxwt;
  input y_src_rsci_biwt;
  input y_src_rsci_bdwt;
  output y_src_rsci_bcwt;
  reg y_src_rsci_bcwt;
  input [9:0] y_src_rsci_idat;


  // Interconnect Declarations
  reg [9:0] y_src_rsci_idat_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign y_src_rsci_wen_comp = (~ y_src_rsci_oswt) | y_src_rsci_biwt | y_src_rsci_bcwt;
  assign y_src_rsci_idat_mxwt = MUX_v_10_2_2(y_src_rsci_idat, y_src_rsci_idat_bfwt,
      y_src_rsci_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      y_src_rsci_bcwt <= 1'b0;
    end
    else begin
      y_src_rsci_bcwt <= ~((~(y_src_rsci_bcwt | y_src_rsci_biwt)) | y_src_rsci_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      y_src_rsci_idat_bfwt <= 10'b0000000000;
    end
    else if ( y_src_rsci_biwt ) begin
      y_src_rsci_idat_bfwt <= y_src_rsci_idat;
    end
  end

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    crop_core_y_src_rsci_y_src_wait_ctrl
// ------------------------------------------------------------------


module crop_core_y_src_rsci_y_src_wait_ctrl (
  core_wen, y_src_rsci_oswt, y_src_rsci_biwt, y_src_rsci_bdwt, y_src_rsci_bcwt, y_src_rsci_irdy_core_sct,
      y_src_rsci_ivld
);
  input core_wen;
  input y_src_rsci_oswt;
  output y_src_rsci_biwt;
  output y_src_rsci_bdwt;
  input y_src_rsci_bcwt;
  output y_src_rsci_irdy_core_sct;
  input y_src_rsci_ivld;


  // Interconnect Declarations
  wire y_src_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign y_src_rsci_bdwt = y_src_rsci_oswt & core_wen;
  assign y_src_rsci_biwt = y_src_rsci_ogwt & y_src_rsci_ivld;
  assign y_src_rsci_ogwt = y_src_rsci_oswt & (~ y_src_rsci_bcwt);
  assign y_src_rsci_irdy_core_sct = y_src_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    tpg_core_dst_rsci
// ------------------------------------------------------------------


module tpg_core_dst_rsci (
  clk, arst_n, dst_rsc_dat, dst_rsc_vld, dst_rsc_rdy, core_wen, dst_rsci_oswt, dst_rsci_wen_comp,
      dst_rsci_idat
);
  input clk;
  input arst_n;
  output [11:0] dst_rsc_dat;
  output dst_rsc_vld;
  input dst_rsc_rdy;
  input core_wen;
  input dst_rsci_oswt;
  output dst_rsci_wen_comp;
  input [11:0] dst_rsci_idat;


  // Interconnect Declarations
  wire dst_rsci_irdy;
  wire dst_rsci_biwt;
  wire dst_rsci_bdwt;
  wire dst_rsci_bcwt;
  wire dst_rsci_ivld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_wait_v1 #(.rscid(32'sd23),
  .width(32'sd12)) dst_rsci (
      .irdy(dst_rsci_irdy),
      .ivld(dst_rsci_ivld_core_sct),
      .idat(dst_rsci_idat),
      .rdy(dst_rsc_rdy),
      .vld(dst_rsc_vld),
      .dat(dst_rsc_dat)
    );
  tpg_core_dst_rsci_dst_wait_ctrl tpg_core_dst_rsci_dst_wait_ctrl_inst (
      .core_wen(core_wen),
      .dst_rsci_oswt(dst_rsci_oswt),
      .dst_rsci_irdy(dst_rsci_irdy),
      .dst_rsci_biwt(dst_rsci_biwt),
      .dst_rsci_bdwt(dst_rsci_bdwt),
      .dst_rsci_bcwt(dst_rsci_bcwt),
      .dst_rsci_ivld_core_sct(dst_rsci_ivld_core_sct)
    );
  tpg_core_dst_rsci_dst_wait_dp tpg_core_dst_rsci_dst_wait_dp_inst (
      .clk(clk),
      .arst_n(arst_n),
      .dst_rsci_oswt(dst_rsci_oswt),
      .dst_rsci_wen_comp(dst_rsci_wen_comp),
      .dst_rsci_biwt(dst_rsci_biwt),
      .dst_rsci_bdwt(dst_rsci_bdwt),
      .dst_rsci_bcwt(dst_rsci_bcwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    tpg_core_src_rsci
// ------------------------------------------------------------------


module tpg_core_src_rsci (
  clk, arst_n, src_rsc_dat, src_rsc_vld, src_rsc_rdy, core_wen, src_rsci_oswt, src_rsci_wen_comp,
      src_rsci_idat_mxwt
);
  input clk;
  input arst_n;
  input [11:0] src_rsc_dat;
  input src_rsc_vld;
  output src_rsc_rdy;
  input core_wen;
  input src_rsci_oswt;
  output src_rsci_wen_comp;
  output [11:0] src_rsci_idat_mxwt;


  // Interconnect Declarations
  wire src_rsci_biwt;
  wire src_rsci_bdwt;
  wire src_rsci_bcwt;
  wire src_rsci_irdy_core_sct;
  wire src_rsci_ivld;
  wire [11:0] src_rsci_idat;


  // Interconnect Declarations for Component Instantiations 
  ccs_in_wait_v1 #(.rscid(32'sd22),
  .width(32'sd12)) src_rsci (
      .rdy(src_rsc_rdy),
      .vld(src_rsc_vld),
      .dat(src_rsc_dat),
      .irdy(src_rsci_irdy_core_sct),
      .ivld(src_rsci_ivld),
      .idat(src_rsci_idat)
    );
  tpg_core_src_rsci_src_wait_ctrl tpg_core_src_rsci_src_wait_ctrl_inst (
      .core_wen(core_wen),
      .src_rsci_oswt(src_rsci_oswt),
      .src_rsci_biwt(src_rsci_biwt),
      .src_rsci_bdwt(src_rsci_bdwt),
      .src_rsci_bcwt(src_rsci_bcwt),
      .src_rsci_irdy_core_sct(src_rsci_irdy_core_sct),
      .src_rsci_ivld(src_rsci_ivld)
    );
  tpg_core_src_rsci_src_wait_dp tpg_core_src_rsci_src_wait_dp_inst (
      .clk(clk),
      .arst_n(arst_n),
      .src_rsci_oswt(src_rsci_oswt),
      .src_rsci_wen_comp(src_rsci_wen_comp),
      .src_rsci_idat_mxwt(src_rsci_idat_mxwt),
      .src_rsci_biwt(src_rsci_biwt),
      .src_rsci_bdwt(src_rsci_bdwt),
      .src_rsci_bcwt(src_rsci_bcwt),
      .src_rsci_idat(src_rsci_idat)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dgain_core_dst_rsci
// ------------------------------------------------------------------


module dgain_core_dst_rsci (
  clk, arst_n, dst_rsc_dat, dst_rsc_vld, dst_rsc_rdy, core_wen, dst_rsci_oswt, dst_rsci_wen_comp,
      dst_rsci_idat
);
  input clk;
  input arst_n;
  output [11:0] dst_rsc_dat;
  output dst_rsc_vld;
  input dst_rsc_rdy;
  input core_wen;
  input dst_rsci_oswt;
  output dst_rsci_wen_comp;
  input [11:0] dst_rsci_idat;


  // Interconnect Declarations
  wire dst_rsci_irdy;
  wire dst_rsci_biwt;
  wire dst_rsci_bdwt;
  wire dst_rsci_bcwt;
  wire dst_rsci_ivld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_wait_v1 #(.rscid(32'sd45),
  .width(32'sd12)) dst_rsci (
      .irdy(dst_rsci_irdy),
      .ivld(dst_rsci_ivld_core_sct),
      .idat(dst_rsci_idat),
      .rdy(dst_rsc_rdy),
      .vld(dst_rsc_vld),
      .dat(dst_rsc_dat)
    );
  dgain_core_dst_rsci_dst_wait_ctrl dgain_core_dst_rsci_dst_wait_ctrl_inst (
      .core_wen(core_wen),
      .dst_rsci_oswt(dst_rsci_oswt),
      .dst_rsci_irdy(dst_rsci_irdy),
      .dst_rsci_biwt(dst_rsci_biwt),
      .dst_rsci_bdwt(dst_rsci_bdwt),
      .dst_rsci_bcwt(dst_rsci_bcwt),
      .dst_rsci_ivld_core_sct(dst_rsci_ivld_core_sct)
    );
  dgain_core_dst_rsci_dst_wait_dp dgain_core_dst_rsci_dst_wait_dp_inst (
      .clk(clk),
      .arst_n(arst_n),
      .dst_rsci_oswt(dst_rsci_oswt),
      .dst_rsci_wen_comp(dst_rsci_wen_comp),
      .dst_rsci_biwt(dst_rsci_biwt),
      .dst_rsci_bdwt(dst_rsci_bdwt),
      .dst_rsci_bcwt(dst_rsci_bcwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dgain_core_src_rsci
// ------------------------------------------------------------------


module dgain_core_src_rsci (
  clk, arst_n, src_rsc_dat, src_rsc_vld, src_rsc_rdy, core_wen, src_rsci_oswt, src_rsci_wen_comp,
      src_rsci_idat_mxwt
);
  input clk;
  input arst_n;
  input [11:0] src_rsc_dat;
  input src_rsc_vld;
  output src_rsc_rdy;
  input core_wen;
  input src_rsci_oswt;
  output src_rsci_wen_comp;
  output [11:0] src_rsci_idat_mxwt;


  // Interconnect Declarations
  wire src_rsci_biwt;
  wire src_rsci_bdwt;
  wire src_rsci_bcwt;
  wire src_rsci_irdy_core_sct;
  wire src_rsci_ivld;
  wire [11:0] src_rsci_idat;


  // Interconnect Declarations for Component Instantiations 
  ccs_in_wait_v1 #(.rscid(32'sd44),
  .width(32'sd12)) src_rsci (
      .rdy(src_rsc_rdy),
      .vld(src_rsc_vld),
      .dat(src_rsc_dat),
      .irdy(src_rsci_irdy_core_sct),
      .ivld(src_rsci_ivld),
      .idat(src_rsci_idat)
    );
  dgain_core_src_rsci_src_wait_ctrl dgain_core_src_rsci_src_wait_ctrl_inst (
      .core_wen(core_wen),
      .src_rsci_oswt(src_rsci_oswt),
      .src_rsci_biwt(src_rsci_biwt),
      .src_rsci_bdwt(src_rsci_bdwt),
      .src_rsci_bcwt(src_rsci_bcwt),
      .src_rsci_irdy_core_sct(src_rsci_irdy_core_sct),
      .src_rsci_ivld(src_rsci_ivld)
    );
  dgain_core_src_rsci_src_wait_dp dgain_core_src_rsci_src_wait_dp_inst (
      .clk(clk),
      .arst_n(arst_n),
      .src_rsci_oswt(src_rsci_oswt),
      .src_rsci_wen_comp(src_rsci_wen_comp),
      .src_rsci_idat_mxwt(src_rsci_idat_mxwt),
      .src_rsci_biwt(src_rsci_biwt),
      .src_rsci_bdwt(src_rsci_bdwt),
      .src_rsci_bcwt(src_rsci_bcwt),
      .src_rsci_idat(src_rsci_idat)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    lsc_core_dst_rsci
// ------------------------------------------------------------------


module lsc_core_dst_rsci (
  clk, arst_n, dst_rsc_dat, dst_rsc_vld, dst_rsc_rdy, core_wen, dst_rsci_oswt, dst_rsci_wen_comp,
      dst_rsci_idat
);
  input clk;
  input arst_n;
  output [11:0] dst_rsc_dat;
  output dst_rsc_vld;
  input dst_rsc_rdy;
  input core_wen;
  input dst_rsci_oswt;
  output dst_rsci_wen_comp;
  input [11:0] dst_rsci_idat;


  // Interconnect Declarations
  wire dst_rsci_irdy;
  wire dst_rsci_biwt;
  wire dst_rsci_bdwt;
  wire dst_rsci_bcwt;
  wire dst_rsci_ivld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_wait_v1 #(.rscid(32'sd67),
  .width(32'sd12)) dst_rsci (
      .irdy(dst_rsci_irdy),
      .ivld(dst_rsci_ivld_core_sct),
      .idat(dst_rsci_idat),
      .rdy(dst_rsc_rdy),
      .vld(dst_rsc_vld),
      .dat(dst_rsc_dat)
    );
  lsc_core_dst_rsci_dst_wait_ctrl lsc_core_dst_rsci_dst_wait_ctrl_inst (
      .core_wen(core_wen),
      .dst_rsci_oswt(dst_rsci_oswt),
      .dst_rsci_irdy(dst_rsci_irdy),
      .dst_rsci_biwt(dst_rsci_biwt),
      .dst_rsci_bdwt(dst_rsci_bdwt),
      .dst_rsci_bcwt(dst_rsci_bcwt),
      .dst_rsci_ivld_core_sct(dst_rsci_ivld_core_sct)
    );
  lsc_core_dst_rsci_dst_wait_dp lsc_core_dst_rsci_dst_wait_dp_inst (
      .clk(clk),
      .arst_n(arst_n),
      .dst_rsci_oswt(dst_rsci_oswt),
      .dst_rsci_wen_comp(dst_rsci_wen_comp),
      .dst_rsci_biwt(dst_rsci_biwt),
      .dst_rsci_bdwt(dst_rsci_bdwt),
      .dst_rsci_bcwt(dst_rsci_bcwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    lsc_core_src_rsci
// ------------------------------------------------------------------


module lsc_core_src_rsci (
  clk, arst_n, src_rsc_dat, src_rsc_vld, src_rsc_rdy, core_wen, src_rsci_oswt, src_rsci_wen_comp,
      src_rsci_idat_mxwt
);
  input clk;
  input arst_n;
  input [11:0] src_rsc_dat;
  input src_rsc_vld;
  output src_rsc_rdy;
  input core_wen;
  input src_rsci_oswt;
  output src_rsci_wen_comp;
  output [11:0] src_rsci_idat_mxwt;


  // Interconnect Declarations
  wire src_rsci_biwt;
  wire src_rsci_bdwt;
  wire src_rsci_bcwt;
  wire src_rsci_irdy_core_sct;
  wire src_rsci_ivld;
  wire [11:0] src_rsci_idat;


  // Interconnect Declarations for Component Instantiations 
  ccs_in_wait_v1 #(.rscid(32'sd66),
  .width(32'sd12)) src_rsci (
      .rdy(src_rsc_rdy),
      .vld(src_rsc_vld),
      .dat(src_rsc_dat),
      .irdy(src_rsci_irdy_core_sct),
      .ivld(src_rsci_ivld),
      .idat(src_rsci_idat)
    );
  lsc_core_src_rsci_src_wait_ctrl lsc_core_src_rsci_src_wait_ctrl_inst (
      .core_wen(core_wen),
      .src_rsci_oswt(src_rsci_oswt),
      .src_rsci_biwt(src_rsci_biwt),
      .src_rsci_bdwt(src_rsci_bdwt),
      .src_rsci_bcwt(src_rsci_bcwt),
      .src_rsci_irdy_core_sct(src_rsci_irdy_core_sct),
      .src_rsci_ivld(src_rsci_ivld)
    );
  lsc_core_src_rsci_src_wait_dp lsc_core_src_rsci_src_wait_dp_inst (
      .clk(clk),
      .arst_n(arst_n),
      .src_rsci_oswt(src_rsci_oswt),
      .src_rsci_wen_comp(src_rsci_wen_comp),
      .src_rsci_idat_mxwt(src_rsci_idat_mxwt),
      .src_rsci_biwt(src_rsci_biwt),
      .src_rsci_bdwt(src_rsci_bdwt),
      .src_rsci_bcwt(src_rsci_bcwt),
      .src_rsci_idat(src_rsci_idat)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dpc_core_lineBuffer_rsci_1
// ------------------------------------------------------------------


module dpc_core_lineBuffer_rsci_1 (
  clk, arst_n, lineBuffer_rsci_q_d, core_wen, core_wten, lineBuffer_rsci_oswt, lineBuffer_rsci_q_d_mxwt,
      lineBuffer_rsci_we_d_pff, lineBuffer_rsci_iswt0_1_pff, lineBuffer_rsci_re_d_pff,
      lineBuffer_rsci_oswt_pff
);
  input clk;
  input arst_n;
  input [11:0] lineBuffer_rsci_q_d;
  input core_wen;
  input core_wten;
  input lineBuffer_rsci_oswt;
  output [11:0] lineBuffer_rsci_q_d_mxwt;
  output lineBuffer_rsci_we_d_pff;
  input lineBuffer_rsci_iswt0_1_pff;
  output lineBuffer_rsci_re_d_pff;
  input lineBuffer_rsci_oswt_pff;


  // Interconnect Declarations
  wire lineBuffer_rsci_biwt;
  wire lineBuffer_rsci_bdwt;
  wire lineBuffer_rsci_we_d_core_sct_iff;
  wire lineBuffer_rsci_re_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  dpc_core_lineBuffer_rsci_1_lineBuffer_rsc_wait_ctrl dpc_core_lineBuffer_rsci_1_lineBuffer_rsc_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .lineBuffer_rsci_oswt(lineBuffer_rsci_oswt),
      .lineBuffer_rsci_biwt(lineBuffer_rsci_biwt),
      .lineBuffer_rsci_bdwt(lineBuffer_rsci_bdwt),
      .lineBuffer_rsci_we_d_core_sct_pff(lineBuffer_rsci_we_d_core_sct_iff),
      .lineBuffer_rsci_iswt0_1_pff(lineBuffer_rsci_iswt0_1_pff),
      .lineBuffer_rsci_re_d_core_sct_pff(lineBuffer_rsci_re_d_core_sct_iff),
      .lineBuffer_rsci_oswt_pff(lineBuffer_rsci_oswt_pff)
    );
  dpc_core_lineBuffer_rsci_1_lineBuffer_rsc_wait_dp dpc_core_lineBuffer_rsci_1_lineBuffer_rsc_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .lineBuffer_rsci_q_d(lineBuffer_rsci_q_d),
      .lineBuffer_rsci_q_d_mxwt(lineBuffer_rsci_q_d_mxwt),
      .lineBuffer_rsci_biwt(lineBuffer_rsci_biwt),
      .lineBuffer_rsci_bdwt(lineBuffer_rsci_bdwt)
    );
  assign lineBuffer_rsci_we_d_pff = lineBuffer_rsci_we_d_core_sct_iff;
  assign lineBuffer_rsci_re_d_pff = lineBuffer_rsci_re_d_core_sct_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dpc_core_dst_rsci
// ------------------------------------------------------------------


module dpc_core_dst_rsci (
  clk, arst_n, dst_rsc_dat, dst_rsc_vld, dst_rsc_rdy, core_wen, dst_rsci_oswt, dst_rsci_wen_comp,
      dst_rsci_idat
);
  input clk;
  input arst_n;
  output [11:0] dst_rsc_dat;
  output dst_rsc_vld;
  input dst_rsc_rdy;
  input core_wen;
  input dst_rsci_oswt;
  output dst_rsci_wen_comp;
  input [11:0] dst_rsci_idat;


  // Interconnect Declarations
  wire dst_rsci_irdy;
  wire dst_rsci_biwt;
  wire dst_rsci_bdwt;
  wire dst_rsci_bcwt;
  wire dst_rsci_ivld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_wait_v1 #(.rscid(32'sd83),
  .width(32'sd12)) dst_rsci (
      .irdy(dst_rsci_irdy),
      .ivld(dst_rsci_ivld_core_sct),
      .idat(dst_rsci_idat),
      .rdy(dst_rsc_rdy),
      .vld(dst_rsc_vld),
      .dat(dst_rsc_dat)
    );
  dpc_core_dst_rsci_dst_wait_ctrl dpc_core_dst_rsci_dst_wait_ctrl_inst (
      .core_wen(core_wen),
      .dst_rsci_oswt(dst_rsci_oswt),
      .dst_rsci_irdy(dst_rsci_irdy),
      .dst_rsci_biwt(dst_rsci_biwt),
      .dst_rsci_bdwt(dst_rsci_bdwt),
      .dst_rsci_bcwt(dst_rsci_bcwt),
      .dst_rsci_ivld_core_sct(dst_rsci_ivld_core_sct)
    );
  dpc_core_dst_rsci_dst_wait_dp dpc_core_dst_rsci_dst_wait_dp_inst (
      .clk(clk),
      .arst_n(arst_n),
      .dst_rsci_oswt(dst_rsci_oswt),
      .dst_rsci_wen_comp(dst_rsci_wen_comp),
      .dst_rsci_biwt(dst_rsci_biwt),
      .dst_rsci_bdwt(dst_rsci_bdwt),
      .dst_rsci_bcwt(dst_rsci_bcwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dpc_core_src_rsci
// ------------------------------------------------------------------


module dpc_core_src_rsci (
  clk, arst_n, src_rsc_dat, src_rsc_vld, src_rsc_rdy, core_wen, src_rsci_oswt, src_rsci_wen_comp,
      src_rsci_idat_mxwt
);
  input clk;
  input arst_n;
  input [11:0] src_rsc_dat;
  input src_rsc_vld;
  output src_rsc_rdy;
  input core_wen;
  input src_rsci_oswt;
  output src_rsci_wen_comp;
  output [11:0] src_rsci_idat_mxwt;


  // Interconnect Declarations
  wire src_rsci_biwt;
  wire src_rsci_bdwt;
  wire src_rsci_bcwt;
  wire src_rsci_irdy_core_sct;
  wire src_rsci_ivld;
  wire [11:0] src_rsci_idat;


  // Interconnect Declarations for Component Instantiations 
  ccs_in_wait_v1 #(.rscid(32'sd82),
  .width(32'sd12)) src_rsci (
      .rdy(src_rsc_rdy),
      .vld(src_rsc_vld),
      .dat(src_rsc_dat),
      .irdy(src_rsci_irdy_core_sct),
      .ivld(src_rsci_ivld),
      .idat(src_rsci_idat)
    );
  dpc_core_src_rsci_src_wait_ctrl dpc_core_src_rsci_src_wait_ctrl_inst (
      .core_wen(core_wen),
      .src_rsci_oswt(src_rsci_oswt),
      .src_rsci_biwt(src_rsci_biwt),
      .src_rsci_bdwt(src_rsci_bdwt),
      .src_rsci_bcwt(src_rsci_bcwt),
      .src_rsci_irdy_core_sct(src_rsci_irdy_core_sct),
      .src_rsci_ivld(src_rsci_ivld)
    );
  dpc_core_src_rsci_src_wait_dp dpc_core_src_rsci_src_wait_dp_inst (
      .clk(clk),
      .arst_n(arst_n),
      .src_rsci_oswt(src_rsci_oswt),
      .src_rsci_wen_comp(src_rsci_wen_comp),
      .src_rsci_idat_mxwt(src_rsci_idat_mxwt),
      .src_rsci_biwt(src_rsci_biwt),
      .src_rsci_bdwt(src_rsci_bdwt),
      .src_rsci_bcwt(src_rsci_bcwt),
      .src_rsci_idat(src_rsci_idat)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_core_rawdns_lines_rsc_0_9_i_1
// ------------------------------------------------------------------


module isp_rawdns_core_rawdns_lines_rsc_0_9_i_1 (
  clk, arst_n, rawdns_lines_rsc_0_9_i_q_d, core_wen, core_wten, rawdns_lines_rsc_0_9_i_oswt,
      rawdns_lines_rsc_0_9_i_q_d_mxwt, rawdns_lines_rsc_0_9_i_we_d_pff, rawdns_lines_rsc_0_9_i_iswt0_1_pff,
      rawdns_lines_rsc_0_9_i_re_d_pff, rawdns_lines_rsc_0_9_i_oswt_pff
);
  input clk;
  input arst_n;
  input [11:0] rawdns_lines_rsc_0_9_i_q_d;
  input core_wen;
  input core_wten;
  input rawdns_lines_rsc_0_9_i_oswt;
  output [11:0] rawdns_lines_rsc_0_9_i_q_d_mxwt;
  output rawdns_lines_rsc_0_9_i_we_d_pff;
  input rawdns_lines_rsc_0_9_i_iswt0_1_pff;
  output rawdns_lines_rsc_0_9_i_re_d_pff;
  input rawdns_lines_rsc_0_9_i_oswt_pff;


  // Interconnect Declarations
  wire rawdns_lines_rsc_0_9_i_biwt;
  wire rawdns_lines_rsc_0_9_i_bdwt;
  wire rawdns_lines_rsc_0_9_i_we_d_core_sct_iff;
  wire rawdns_lines_rsc_0_9_i_re_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  isp_rawdns_core_rawdns_lines_rsc_0_9_i_1_rawdns_lines_rsc_0_9_wait_ctrl isp_rawdns_core_rawdns_lines_rsc_0_9_i_1_rawdns_lines_rsc_0_9_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .rawdns_lines_rsc_0_9_i_oswt(rawdns_lines_rsc_0_9_i_oswt),
      .rawdns_lines_rsc_0_9_i_biwt(rawdns_lines_rsc_0_9_i_biwt),
      .rawdns_lines_rsc_0_9_i_bdwt(rawdns_lines_rsc_0_9_i_bdwt),
      .rawdns_lines_rsc_0_9_i_we_d_core_sct_pff(rawdns_lines_rsc_0_9_i_we_d_core_sct_iff),
      .rawdns_lines_rsc_0_9_i_iswt0_1_pff(rawdns_lines_rsc_0_9_i_iswt0_1_pff),
      .rawdns_lines_rsc_0_9_i_re_d_core_sct_pff(rawdns_lines_rsc_0_9_i_re_d_core_sct_iff),
      .rawdns_lines_rsc_0_9_i_oswt_pff(rawdns_lines_rsc_0_9_i_oswt_pff)
    );
  isp_rawdns_core_rawdns_lines_rsc_0_9_i_1_rawdns_lines_rsc_0_9_wait_dp isp_rawdns_core_rawdns_lines_rsc_0_9_i_1_rawdns_lines_rsc_0_9_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .rawdns_lines_rsc_0_9_i_q_d(rawdns_lines_rsc_0_9_i_q_d),
      .rawdns_lines_rsc_0_9_i_q_d_mxwt(rawdns_lines_rsc_0_9_i_q_d_mxwt),
      .rawdns_lines_rsc_0_9_i_biwt(rawdns_lines_rsc_0_9_i_biwt),
      .rawdns_lines_rsc_0_9_i_bdwt(rawdns_lines_rsc_0_9_i_bdwt)
    );
  assign rawdns_lines_rsc_0_9_i_we_d_pff = rawdns_lines_rsc_0_9_i_we_d_core_sct_iff;
  assign rawdns_lines_rsc_0_9_i_re_d_pff = rawdns_lines_rsc_0_9_i_re_d_core_sct_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_core_rawdns_lines_rsc_0_8_i_1
// ------------------------------------------------------------------


module isp_rawdns_core_rawdns_lines_rsc_0_8_i_1 (
  clk, arst_n, rawdns_lines_rsc_0_8_i_q_d, core_wen, core_wten, rawdns_lines_rsc_0_8_i_oswt,
      rawdns_lines_rsc_0_8_i_q_d_mxwt, rawdns_lines_rsc_0_8_i_we_d_pff, rawdns_lines_rsc_0_8_i_iswt0_1_pff,
      rawdns_lines_rsc_0_8_i_re_d_pff, rawdns_lines_rsc_0_8_i_oswt_pff
);
  input clk;
  input arst_n;
  input [11:0] rawdns_lines_rsc_0_8_i_q_d;
  input core_wen;
  input core_wten;
  input rawdns_lines_rsc_0_8_i_oswt;
  output [11:0] rawdns_lines_rsc_0_8_i_q_d_mxwt;
  output rawdns_lines_rsc_0_8_i_we_d_pff;
  input rawdns_lines_rsc_0_8_i_iswt0_1_pff;
  output rawdns_lines_rsc_0_8_i_re_d_pff;
  input rawdns_lines_rsc_0_8_i_oswt_pff;


  // Interconnect Declarations
  wire rawdns_lines_rsc_0_8_i_biwt;
  wire rawdns_lines_rsc_0_8_i_bdwt;
  wire rawdns_lines_rsc_0_8_i_we_d_core_sct_iff;
  wire rawdns_lines_rsc_0_8_i_re_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  isp_rawdns_core_rawdns_lines_rsc_0_8_i_1_rawdns_lines_rsc_0_8_wait_ctrl isp_rawdns_core_rawdns_lines_rsc_0_8_i_1_rawdns_lines_rsc_0_8_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .rawdns_lines_rsc_0_8_i_oswt(rawdns_lines_rsc_0_8_i_oswt),
      .rawdns_lines_rsc_0_8_i_biwt(rawdns_lines_rsc_0_8_i_biwt),
      .rawdns_lines_rsc_0_8_i_bdwt(rawdns_lines_rsc_0_8_i_bdwt),
      .rawdns_lines_rsc_0_8_i_we_d_core_sct_pff(rawdns_lines_rsc_0_8_i_we_d_core_sct_iff),
      .rawdns_lines_rsc_0_8_i_iswt0_1_pff(rawdns_lines_rsc_0_8_i_iswt0_1_pff),
      .rawdns_lines_rsc_0_8_i_re_d_core_sct_pff(rawdns_lines_rsc_0_8_i_re_d_core_sct_iff),
      .rawdns_lines_rsc_0_8_i_oswt_pff(rawdns_lines_rsc_0_8_i_oswt_pff)
    );
  isp_rawdns_core_rawdns_lines_rsc_0_8_i_1_rawdns_lines_rsc_0_8_wait_dp isp_rawdns_core_rawdns_lines_rsc_0_8_i_1_rawdns_lines_rsc_0_8_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .rawdns_lines_rsc_0_8_i_q_d(rawdns_lines_rsc_0_8_i_q_d),
      .rawdns_lines_rsc_0_8_i_q_d_mxwt(rawdns_lines_rsc_0_8_i_q_d_mxwt),
      .rawdns_lines_rsc_0_8_i_biwt(rawdns_lines_rsc_0_8_i_biwt),
      .rawdns_lines_rsc_0_8_i_bdwt(rawdns_lines_rsc_0_8_i_bdwt)
    );
  assign rawdns_lines_rsc_0_8_i_we_d_pff = rawdns_lines_rsc_0_8_i_we_d_core_sct_iff;
  assign rawdns_lines_rsc_0_8_i_re_d_pff = rawdns_lines_rsc_0_8_i_re_d_core_sct_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_core_rawdns_lines_rsc_0_7_i_1
// ------------------------------------------------------------------


module isp_rawdns_core_rawdns_lines_rsc_0_7_i_1 (
  clk, arst_n, rawdns_lines_rsc_0_7_i_q_d, core_wen, core_wten, rawdns_lines_rsc_0_7_i_oswt,
      rawdns_lines_rsc_0_7_i_q_d_mxwt, rawdns_lines_rsc_0_7_i_we_d_pff, rawdns_lines_rsc_0_7_i_iswt0_1_pff,
      rawdns_lines_rsc_0_7_i_re_d_pff, rawdns_lines_rsc_0_7_i_oswt_pff
);
  input clk;
  input arst_n;
  input [11:0] rawdns_lines_rsc_0_7_i_q_d;
  input core_wen;
  input core_wten;
  input rawdns_lines_rsc_0_7_i_oswt;
  output [11:0] rawdns_lines_rsc_0_7_i_q_d_mxwt;
  output rawdns_lines_rsc_0_7_i_we_d_pff;
  input rawdns_lines_rsc_0_7_i_iswt0_1_pff;
  output rawdns_lines_rsc_0_7_i_re_d_pff;
  input rawdns_lines_rsc_0_7_i_oswt_pff;


  // Interconnect Declarations
  wire rawdns_lines_rsc_0_7_i_biwt;
  wire rawdns_lines_rsc_0_7_i_bdwt;
  wire rawdns_lines_rsc_0_7_i_we_d_core_sct_iff;
  wire rawdns_lines_rsc_0_7_i_re_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  isp_rawdns_core_rawdns_lines_rsc_0_7_i_1_rawdns_lines_rsc_0_7_wait_ctrl isp_rawdns_core_rawdns_lines_rsc_0_7_i_1_rawdns_lines_rsc_0_7_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .rawdns_lines_rsc_0_7_i_oswt(rawdns_lines_rsc_0_7_i_oswt),
      .rawdns_lines_rsc_0_7_i_biwt(rawdns_lines_rsc_0_7_i_biwt),
      .rawdns_lines_rsc_0_7_i_bdwt(rawdns_lines_rsc_0_7_i_bdwt),
      .rawdns_lines_rsc_0_7_i_we_d_core_sct_pff(rawdns_lines_rsc_0_7_i_we_d_core_sct_iff),
      .rawdns_lines_rsc_0_7_i_iswt0_1_pff(rawdns_lines_rsc_0_7_i_iswt0_1_pff),
      .rawdns_lines_rsc_0_7_i_re_d_core_sct_pff(rawdns_lines_rsc_0_7_i_re_d_core_sct_iff),
      .rawdns_lines_rsc_0_7_i_oswt_pff(rawdns_lines_rsc_0_7_i_oswt_pff)
    );
  isp_rawdns_core_rawdns_lines_rsc_0_7_i_1_rawdns_lines_rsc_0_7_wait_dp isp_rawdns_core_rawdns_lines_rsc_0_7_i_1_rawdns_lines_rsc_0_7_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .rawdns_lines_rsc_0_7_i_q_d(rawdns_lines_rsc_0_7_i_q_d),
      .rawdns_lines_rsc_0_7_i_q_d_mxwt(rawdns_lines_rsc_0_7_i_q_d_mxwt),
      .rawdns_lines_rsc_0_7_i_biwt(rawdns_lines_rsc_0_7_i_biwt),
      .rawdns_lines_rsc_0_7_i_bdwt(rawdns_lines_rsc_0_7_i_bdwt)
    );
  assign rawdns_lines_rsc_0_7_i_we_d_pff = rawdns_lines_rsc_0_7_i_we_d_core_sct_iff;
  assign rawdns_lines_rsc_0_7_i_re_d_pff = rawdns_lines_rsc_0_7_i_re_d_core_sct_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_core_rawdns_lines_rsc_0_6_i_1
// ------------------------------------------------------------------


module isp_rawdns_core_rawdns_lines_rsc_0_6_i_1 (
  clk, arst_n, rawdns_lines_rsc_0_6_i_q_d, core_wen, core_wten, rawdns_lines_rsc_0_6_i_oswt,
      rawdns_lines_rsc_0_6_i_q_d_mxwt, rawdns_lines_rsc_0_6_i_we_d_pff, rawdns_lines_rsc_0_6_i_iswt0_1_pff,
      rawdns_lines_rsc_0_6_i_re_d_pff, rawdns_lines_rsc_0_6_i_oswt_pff
);
  input clk;
  input arst_n;
  input [11:0] rawdns_lines_rsc_0_6_i_q_d;
  input core_wen;
  input core_wten;
  input rawdns_lines_rsc_0_6_i_oswt;
  output [11:0] rawdns_lines_rsc_0_6_i_q_d_mxwt;
  output rawdns_lines_rsc_0_6_i_we_d_pff;
  input rawdns_lines_rsc_0_6_i_iswt0_1_pff;
  output rawdns_lines_rsc_0_6_i_re_d_pff;
  input rawdns_lines_rsc_0_6_i_oswt_pff;


  // Interconnect Declarations
  wire rawdns_lines_rsc_0_6_i_biwt;
  wire rawdns_lines_rsc_0_6_i_bdwt;
  wire rawdns_lines_rsc_0_6_i_we_d_core_sct_iff;
  wire rawdns_lines_rsc_0_6_i_re_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  isp_rawdns_core_rawdns_lines_rsc_0_6_i_1_rawdns_lines_rsc_0_6_wait_ctrl isp_rawdns_core_rawdns_lines_rsc_0_6_i_1_rawdns_lines_rsc_0_6_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .rawdns_lines_rsc_0_6_i_oswt(rawdns_lines_rsc_0_6_i_oswt),
      .rawdns_lines_rsc_0_6_i_biwt(rawdns_lines_rsc_0_6_i_biwt),
      .rawdns_lines_rsc_0_6_i_bdwt(rawdns_lines_rsc_0_6_i_bdwt),
      .rawdns_lines_rsc_0_6_i_we_d_core_sct_pff(rawdns_lines_rsc_0_6_i_we_d_core_sct_iff),
      .rawdns_lines_rsc_0_6_i_iswt0_1_pff(rawdns_lines_rsc_0_6_i_iswt0_1_pff),
      .rawdns_lines_rsc_0_6_i_re_d_core_sct_pff(rawdns_lines_rsc_0_6_i_re_d_core_sct_iff),
      .rawdns_lines_rsc_0_6_i_oswt_pff(rawdns_lines_rsc_0_6_i_oswt_pff)
    );
  isp_rawdns_core_rawdns_lines_rsc_0_6_i_1_rawdns_lines_rsc_0_6_wait_dp isp_rawdns_core_rawdns_lines_rsc_0_6_i_1_rawdns_lines_rsc_0_6_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .rawdns_lines_rsc_0_6_i_q_d(rawdns_lines_rsc_0_6_i_q_d),
      .rawdns_lines_rsc_0_6_i_q_d_mxwt(rawdns_lines_rsc_0_6_i_q_d_mxwt),
      .rawdns_lines_rsc_0_6_i_biwt(rawdns_lines_rsc_0_6_i_biwt),
      .rawdns_lines_rsc_0_6_i_bdwt(rawdns_lines_rsc_0_6_i_bdwt)
    );
  assign rawdns_lines_rsc_0_6_i_we_d_pff = rawdns_lines_rsc_0_6_i_we_d_core_sct_iff;
  assign rawdns_lines_rsc_0_6_i_re_d_pff = rawdns_lines_rsc_0_6_i_re_d_core_sct_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_core_rawdns_lines_rsc_0_5_i_1
// ------------------------------------------------------------------


module isp_rawdns_core_rawdns_lines_rsc_0_5_i_1 (
  clk, arst_n, rawdns_lines_rsc_0_5_i_q_d, core_wen, core_wten, rawdns_lines_rsc_0_5_i_oswt,
      rawdns_lines_rsc_0_5_i_q_d_mxwt, rawdns_lines_rsc_0_5_i_we_d_pff, rawdns_lines_rsc_0_5_i_iswt0_1_pff,
      rawdns_lines_rsc_0_5_i_re_d_pff, rawdns_lines_rsc_0_5_i_oswt_pff
);
  input clk;
  input arst_n;
  input [11:0] rawdns_lines_rsc_0_5_i_q_d;
  input core_wen;
  input core_wten;
  input rawdns_lines_rsc_0_5_i_oswt;
  output [11:0] rawdns_lines_rsc_0_5_i_q_d_mxwt;
  output rawdns_lines_rsc_0_5_i_we_d_pff;
  input rawdns_lines_rsc_0_5_i_iswt0_1_pff;
  output rawdns_lines_rsc_0_5_i_re_d_pff;
  input rawdns_lines_rsc_0_5_i_oswt_pff;


  // Interconnect Declarations
  wire rawdns_lines_rsc_0_5_i_biwt;
  wire rawdns_lines_rsc_0_5_i_bdwt;
  wire rawdns_lines_rsc_0_5_i_we_d_core_sct_iff;
  wire rawdns_lines_rsc_0_5_i_re_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  isp_rawdns_core_rawdns_lines_rsc_0_5_i_1_rawdns_lines_rsc_0_5_wait_ctrl isp_rawdns_core_rawdns_lines_rsc_0_5_i_1_rawdns_lines_rsc_0_5_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .rawdns_lines_rsc_0_5_i_oswt(rawdns_lines_rsc_0_5_i_oswt),
      .rawdns_lines_rsc_0_5_i_biwt(rawdns_lines_rsc_0_5_i_biwt),
      .rawdns_lines_rsc_0_5_i_bdwt(rawdns_lines_rsc_0_5_i_bdwt),
      .rawdns_lines_rsc_0_5_i_we_d_core_sct_pff(rawdns_lines_rsc_0_5_i_we_d_core_sct_iff),
      .rawdns_lines_rsc_0_5_i_iswt0_1_pff(rawdns_lines_rsc_0_5_i_iswt0_1_pff),
      .rawdns_lines_rsc_0_5_i_re_d_core_sct_pff(rawdns_lines_rsc_0_5_i_re_d_core_sct_iff),
      .rawdns_lines_rsc_0_5_i_oswt_pff(rawdns_lines_rsc_0_5_i_oswt_pff)
    );
  isp_rawdns_core_rawdns_lines_rsc_0_5_i_1_rawdns_lines_rsc_0_5_wait_dp isp_rawdns_core_rawdns_lines_rsc_0_5_i_1_rawdns_lines_rsc_0_5_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .rawdns_lines_rsc_0_5_i_q_d(rawdns_lines_rsc_0_5_i_q_d),
      .rawdns_lines_rsc_0_5_i_q_d_mxwt(rawdns_lines_rsc_0_5_i_q_d_mxwt),
      .rawdns_lines_rsc_0_5_i_biwt(rawdns_lines_rsc_0_5_i_biwt),
      .rawdns_lines_rsc_0_5_i_bdwt(rawdns_lines_rsc_0_5_i_bdwt)
    );
  assign rawdns_lines_rsc_0_5_i_we_d_pff = rawdns_lines_rsc_0_5_i_we_d_core_sct_iff;
  assign rawdns_lines_rsc_0_5_i_re_d_pff = rawdns_lines_rsc_0_5_i_re_d_core_sct_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_core_rawdns_lines_rsc_0_4_i_1
// ------------------------------------------------------------------


module isp_rawdns_core_rawdns_lines_rsc_0_4_i_1 (
  clk, arst_n, rawdns_lines_rsc_0_4_i_q_d, core_wen, core_wten, rawdns_lines_rsc_0_4_i_oswt,
      rawdns_lines_rsc_0_4_i_q_d_mxwt, rawdns_lines_rsc_0_4_i_we_d_pff, rawdns_lines_rsc_0_4_i_iswt0_1_pff,
      rawdns_lines_rsc_0_4_i_re_d_pff, rawdns_lines_rsc_0_4_i_oswt_pff
);
  input clk;
  input arst_n;
  input [11:0] rawdns_lines_rsc_0_4_i_q_d;
  input core_wen;
  input core_wten;
  input rawdns_lines_rsc_0_4_i_oswt;
  output [11:0] rawdns_lines_rsc_0_4_i_q_d_mxwt;
  output rawdns_lines_rsc_0_4_i_we_d_pff;
  input rawdns_lines_rsc_0_4_i_iswt0_1_pff;
  output rawdns_lines_rsc_0_4_i_re_d_pff;
  input rawdns_lines_rsc_0_4_i_oswt_pff;


  // Interconnect Declarations
  wire rawdns_lines_rsc_0_4_i_biwt;
  wire rawdns_lines_rsc_0_4_i_bdwt;
  wire rawdns_lines_rsc_0_4_i_we_d_core_sct_iff;
  wire rawdns_lines_rsc_0_4_i_re_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  isp_rawdns_core_rawdns_lines_rsc_0_4_i_1_rawdns_lines_rsc_0_4_wait_ctrl isp_rawdns_core_rawdns_lines_rsc_0_4_i_1_rawdns_lines_rsc_0_4_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .rawdns_lines_rsc_0_4_i_oswt(rawdns_lines_rsc_0_4_i_oswt),
      .rawdns_lines_rsc_0_4_i_biwt(rawdns_lines_rsc_0_4_i_biwt),
      .rawdns_lines_rsc_0_4_i_bdwt(rawdns_lines_rsc_0_4_i_bdwt),
      .rawdns_lines_rsc_0_4_i_we_d_core_sct_pff(rawdns_lines_rsc_0_4_i_we_d_core_sct_iff),
      .rawdns_lines_rsc_0_4_i_iswt0_1_pff(rawdns_lines_rsc_0_4_i_iswt0_1_pff),
      .rawdns_lines_rsc_0_4_i_re_d_core_sct_pff(rawdns_lines_rsc_0_4_i_re_d_core_sct_iff),
      .rawdns_lines_rsc_0_4_i_oswt_pff(rawdns_lines_rsc_0_4_i_oswt_pff)
    );
  isp_rawdns_core_rawdns_lines_rsc_0_4_i_1_rawdns_lines_rsc_0_4_wait_dp isp_rawdns_core_rawdns_lines_rsc_0_4_i_1_rawdns_lines_rsc_0_4_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .rawdns_lines_rsc_0_4_i_q_d(rawdns_lines_rsc_0_4_i_q_d),
      .rawdns_lines_rsc_0_4_i_q_d_mxwt(rawdns_lines_rsc_0_4_i_q_d_mxwt),
      .rawdns_lines_rsc_0_4_i_biwt(rawdns_lines_rsc_0_4_i_biwt),
      .rawdns_lines_rsc_0_4_i_bdwt(rawdns_lines_rsc_0_4_i_bdwt)
    );
  assign rawdns_lines_rsc_0_4_i_we_d_pff = rawdns_lines_rsc_0_4_i_we_d_core_sct_iff;
  assign rawdns_lines_rsc_0_4_i_re_d_pff = rawdns_lines_rsc_0_4_i_re_d_core_sct_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_core_rawdns_lines_rsc_0_3_i_1
// ------------------------------------------------------------------


module isp_rawdns_core_rawdns_lines_rsc_0_3_i_1 (
  clk, arst_n, rawdns_lines_rsc_0_3_i_q_d, core_wen, core_wten, rawdns_lines_rsc_0_3_i_oswt,
      rawdns_lines_rsc_0_3_i_q_d_mxwt, rawdns_lines_rsc_0_3_i_we_d_pff, rawdns_lines_rsc_0_3_i_iswt0_1_pff,
      rawdns_lines_rsc_0_3_i_re_d_pff, rawdns_lines_rsc_0_3_i_oswt_pff
);
  input clk;
  input arst_n;
  input [11:0] rawdns_lines_rsc_0_3_i_q_d;
  input core_wen;
  input core_wten;
  input rawdns_lines_rsc_0_3_i_oswt;
  output [11:0] rawdns_lines_rsc_0_3_i_q_d_mxwt;
  output rawdns_lines_rsc_0_3_i_we_d_pff;
  input rawdns_lines_rsc_0_3_i_iswt0_1_pff;
  output rawdns_lines_rsc_0_3_i_re_d_pff;
  input rawdns_lines_rsc_0_3_i_oswt_pff;


  // Interconnect Declarations
  wire rawdns_lines_rsc_0_3_i_biwt;
  wire rawdns_lines_rsc_0_3_i_bdwt;
  wire rawdns_lines_rsc_0_3_i_we_d_core_sct_iff;
  wire rawdns_lines_rsc_0_3_i_re_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  isp_rawdns_core_rawdns_lines_rsc_0_3_i_1_rawdns_lines_rsc_0_3_wait_ctrl isp_rawdns_core_rawdns_lines_rsc_0_3_i_1_rawdns_lines_rsc_0_3_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .rawdns_lines_rsc_0_3_i_oswt(rawdns_lines_rsc_0_3_i_oswt),
      .rawdns_lines_rsc_0_3_i_biwt(rawdns_lines_rsc_0_3_i_biwt),
      .rawdns_lines_rsc_0_3_i_bdwt(rawdns_lines_rsc_0_3_i_bdwt),
      .rawdns_lines_rsc_0_3_i_we_d_core_sct_pff(rawdns_lines_rsc_0_3_i_we_d_core_sct_iff),
      .rawdns_lines_rsc_0_3_i_iswt0_1_pff(rawdns_lines_rsc_0_3_i_iswt0_1_pff),
      .rawdns_lines_rsc_0_3_i_re_d_core_sct_pff(rawdns_lines_rsc_0_3_i_re_d_core_sct_iff),
      .rawdns_lines_rsc_0_3_i_oswt_pff(rawdns_lines_rsc_0_3_i_oswt_pff)
    );
  isp_rawdns_core_rawdns_lines_rsc_0_3_i_1_rawdns_lines_rsc_0_3_wait_dp isp_rawdns_core_rawdns_lines_rsc_0_3_i_1_rawdns_lines_rsc_0_3_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .rawdns_lines_rsc_0_3_i_q_d(rawdns_lines_rsc_0_3_i_q_d),
      .rawdns_lines_rsc_0_3_i_q_d_mxwt(rawdns_lines_rsc_0_3_i_q_d_mxwt),
      .rawdns_lines_rsc_0_3_i_biwt(rawdns_lines_rsc_0_3_i_biwt),
      .rawdns_lines_rsc_0_3_i_bdwt(rawdns_lines_rsc_0_3_i_bdwt)
    );
  assign rawdns_lines_rsc_0_3_i_we_d_pff = rawdns_lines_rsc_0_3_i_we_d_core_sct_iff;
  assign rawdns_lines_rsc_0_3_i_re_d_pff = rawdns_lines_rsc_0_3_i_re_d_core_sct_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_core_rawdns_lines_rsc_0_2_i_1
// ------------------------------------------------------------------


module isp_rawdns_core_rawdns_lines_rsc_0_2_i_1 (
  clk, arst_n, rawdns_lines_rsc_0_2_i_q_d, core_wen, core_wten, rawdns_lines_rsc_0_2_i_oswt,
      rawdns_lines_rsc_0_2_i_q_d_mxwt, rawdns_lines_rsc_0_2_i_we_d_pff, rawdns_lines_rsc_0_2_i_iswt0_1_pff,
      rawdns_lines_rsc_0_2_i_re_d_pff, rawdns_lines_rsc_0_2_i_oswt_pff
);
  input clk;
  input arst_n;
  input [11:0] rawdns_lines_rsc_0_2_i_q_d;
  input core_wen;
  input core_wten;
  input rawdns_lines_rsc_0_2_i_oswt;
  output [11:0] rawdns_lines_rsc_0_2_i_q_d_mxwt;
  output rawdns_lines_rsc_0_2_i_we_d_pff;
  input rawdns_lines_rsc_0_2_i_iswt0_1_pff;
  output rawdns_lines_rsc_0_2_i_re_d_pff;
  input rawdns_lines_rsc_0_2_i_oswt_pff;


  // Interconnect Declarations
  wire rawdns_lines_rsc_0_2_i_biwt;
  wire rawdns_lines_rsc_0_2_i_bdwt;
  wire rawdns_lines_rsc_0_2_i_we_d_core_sct_iff;
  wire rawdns_lines_rsc_0_2_i_re_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  isp_rawdns_core_rawdns_lines_rsc_0_2_i_1_rawdns_lines_rsc_0_2_wait_ctrl isp_rawdns_core_rawdns_lines_rsc_0_2_i_1_rawdns_lines_rsc_0_2_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .rawdns_lines_rsc_0_2_i_oswt(rawdns_lines_rsc_0_2_i_oswt),
      .rawdns_lines_rsc_0_2_i_biwt(rawdns_lines_rsc_0_2_i_biwt),
      .rawdns_lines_rsc_0_2_i_bdwt(rawdns_lines_rsc_0_2_i_bdwt),
      .rawdns_lines_rsc_0_2_i_we_d_core_sct_pff(rawdns_lines_rsc_0_2_i_we_d_core_sct_iff),
      .rawdns_lines_rsc_0_2_i_iswt0_1_pff(rawdns_lines_rsc_0_2_i_iswt0_1_pff),
      .rawdns_lines_rsc_0_2_i_re_d_core_sct_pff(rawdns_lines_rsc_0_2_i_re_d_core_sct_iff),
      .rawdns_lines_rsc_0_2_i_oswt_pff(rawdns_lines_rsc_0_2_i_oswt_pff)
    );
  isp_rawdns_core_rawdns_lines_rsc_0_2_i_1_rawdns_lines_rsc_0_2_wait_dp isp_rawdns_core_rawdns_lines_rsc_0_2_i_1_rawdns_lines_rsc_0_2_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .rawdns_lines_rsc_0_2_i_q_d(rawdns_lines_rsc_0_2_i_q_d),
      .rawdns_lines_rsc_0_2_i_q_d_mxwt(rawdns_lines_rsc_0_2_i_q_d_mxwt),
      .rawdns_lines_rsc_0_2_i_biwt(rawdns_lines_rsc_0_2_i_biwt),
      .rawdns_lines_rsc_0_2_i_bdwt(rawdns_lines_rsc_0_2_i_bdwt)
    );
  assign rawdns_lines_rsc_0_2_i_we_d_pff = rawdns_lines_rsc_0_2_i_we_d_core_sct_iff;
  assign rawdns_lines_rsc_0_2_i_re_d_pff = rawdns_lines_rsc_0_2_i_re_d_core_sct_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_core_rawdns_lines_rsc_0_1_i_1
// ------------------------------------------------------------------


module isp_rawdns_core_rawdns_lines_rsc_0_1_i_1 (
  clk, arst_n, rawdns_lines_rsc_0_1_i_q_d, core_wen, core_wten, rawdns_lines_rsc_0_1_i_oswt,
      rawdns_lines_rsc_0_1_i_q_d_mxwt, rawdns_lines_rsc_0_1_i_we_d_pff, rawdns_lines_rsc_0_1_i_iswt0_1_pff,
      rawdns_lines_rsc_0_1_i_re_d_pff, rawdns_lines_rsc_0_1_i_oswt_pff
);
  input clk;
  input arst_n;
  input [11:0] rawdns_lines_rsc_0_1_i_q_d;
  input core_wen;
  input core_wten;
  input rawdns_lines_rsc_0_1_i_oswt;
  output [11:0] rawdns_lines_rsc_0_1_i_q_d_mxwt;
  output rawdns_lines_rsc_0_1_i_we_d_pff;
  input rawdns_lines_rsc_0_1_i_iswt0_1_pff;
  output rawdns_lines_rsc_0_1_i_re_d_pff;
  input rawdns_lines_rsc_0_1_i_oswt_pff;


  // Interconnect Declarations
  wire rawdns_lines_rsc_0_1_i_biwt;
  wire rawdns_lines_rsc_0_1_i_bdwt;
  wire rawdns_lines_rsc_0_1_i_we_d_core_sct_iff;
  wire rawdns_lines_rsc_0_1_i_re_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  isp_rawdns_core_rawdns_lines_rsc_0_1_i_1_rawdns_lines_rsc_0_1_wait_ctrl isp_rawdns_core_rawdns_lines_rsc_0_1_i_1_rawdns_lines_rsc_0_1_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .rawdns_lines_rsc_0_1_i_oswt(rawdns_lines_rsc_0_1_i_oswt),
      .rawdns_lines_rsc_0_1_i_biwt(rawdns_lines_rsc_0_1_i_biwt),
      .rawdns_lines_rsc_0_1_i_bdwt(rawdns_lines_rsc_0_1_i_bdwt),
      .rawdns_lines_rsc_0_1_i_we_d_core_sct_pff(rawdns_lines_rsc_0_1_i_we_d_core_sct_iff),
      .rawdns_lines_rsc_0_1_i_iswt0_1_pff(rawdns_lines_rsc_0_1_i_iswt0_1_pff),
      .rawdns_lines_rsc_0_1_i_re_d_core_sct_pff(rawdns_lines_rsc_0_1_i_re_d_core_sct_iff),
      .rawdns_lines_rsc_0_1_i_oswt_pff(rawdns_lines_rsc_0_1_i_oswt_pff)
    );
  isp_rawdns_core_rawdns_lines_rsc_0_1_i_1_rawdns_lines_rsc_0_1_wait_dp isp_rawdns_core_rawdns_lines_rsc_0_1_i_1_rawdns_lines_rsc_0_1_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .rawdns_lines_rsc_0_1_i_q_d(rawdns_lines_rsc_0_1_i_q_d),
      .rawdns_lines_rsc_0_1_i_q_d_mxwt(rawdns_lines_rsc_0_1_i_q_d_mxwt),
      .rawdns_lines_rsc_0_1_i_biwt(rawdns_lines_rsc_0_1_i_biwt),
      .rawdns_lines_rsc_0_1_i_bdwt(rawdns_lines_rsc_0_1_i_bdwt)
    );
  assign rawdns_lines_rsc_0_1_i_we_d_pff = rawdns_lines_rsc_0_1_i_we_d_core_sct_iff;
  assign rawdns_lines_rsc_0_1_i_re_d_pff = rawdns_lines_rsc_0_1_i_re_d_core_sct_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_core_rawdns_lines_rsc_0_0_i_1
// ------------------------------------------------------------------


module isp_rawdns_core_rawdns_lines_rsc_0_0_i_1 (
  clk, arst_n, rawdns_lines_rsc_0_0_i_q_d, core_wen, core_wten, rawdns_lines_rsc_0_0_i_oswt,
      rawdns_lines_rsc_0_0_i_q_d_mxwt, rawdns_lines_rsc_0_0_i_we_d_pff, rawdns_lines_rsc_0_0_i_iswt0_1_pff,
      rawdns_lines_rsc_0_0_i_re_d_pff, rawdns_lines_rsc_0_0_i_oswt_pff
);
  input clk;
  input arst_n;
  input [11:0] rawdns_lines_rsc_0_0_i_q_d;
  input core_wen;
  input core_wten;
  input rawdns_lines_rsc_0_0_i_oswt;
  output [11:0] rawdns_lines_rsc_0_0_i_q_d_mxwt;
  output rawdns_lines_rsc_0_0_i_we_d_pff;
  input rawdns_lines_rsc_0_0_i_iswt0_1_pff;
  output rawdns_lines_rsc_0_0_i_re_d_pff;
  input rawdns_lines_rsc_0_0_i_oswt_pff;


  // Interconnect Declarations
  wire rawdns_lines_rsc_0_0_i_biwt;
  wire rawdns_lines_rsc_0_0_i_bdwt;
  wire rawdns_lines_rsc_0_0_i_we_d_core_sct_iff;
  wire rawdns_lines_rsc_0_0_i_re_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  isp_rawdns_core_rawdns_lines_rsc_0_0_i_1_rawdns_lines_rsc_0_0_wait_ctrl isp_rawdns_core_rawdns_lines_rsc_0_0_i_1_rawdns_lines_rsc_0_0_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .rawdns_lines_rsc_0_0_i_oswt(rawdns_lines_rsc_0_0_i_oswt),
      .rawdns_lines_rsc_0_0_i_biwt(rawdns_lines_rsc_0_0_i_biwt),
      .rawdns_lines_rsc_0_0_i_bdwt(rawdns_lines_rsc_0_0_i_bdwt),
      .rawdns_lines_rsc_0_0_i_we_d_core_sct_pff(rawdns_lines_rsc_0_0_i_we_d_core_sct_iff),
      .rawdns_lines_rsc_0_0_i_iswt0_1_pff(rawdns_lines_rsc_0_0_i_iswt0_1_pff),
      .rawdns_lines_rsc_0_0_i_re_d_core_sct_pff(rawdns_lines_rsc_0_0_i_re_d_core_sct_iff),
      .rawdns_lines_rsc_0_0_i_oswt_pff(rawdns_lines_rsc_0_0_i_oswt_pff)
    );
  isp_rawdns_core_rawdns_lines_rsc_0_0_i_1_rawdns_lines_rsc_0_0_wait_dp isp_rawdns_core_rawdns_lines_rsc_0_0_i_1_rawdns_lines_rsc_0_0_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .rawdns_lines_rsc_0_0_i_q_d(rawdns_lines_rsc_0_0_i_q_d),
      .rawdns_lines_rsc_0_0_i_q_d_mxwt(rawdns_lines_rsc_0_0_i_q_d_mxwt),
      .rawdns_lines_rsc_0_0_i_biwt(rawdns_lines_rsc_0_0_i_biwt),
      .rawdns_lines_rsc_0_0_i_bdwt(rawdns_lines_rsc_0_0_i_bdwt)
    );
  assign rawdns_lines_rsc_0_0_i_we_d_pff = rawdns_lines_rsc_0_0_i_we_d_core_sct_iff;
  assign rawdns_lines_rsc_0_0_i_re_d_pff = rawdns_lines_rsc_0_0_i_re_d_core_sct_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_core_dst_rsci
// ------------------------------------------------------------------


module isp_rawdns_core_dst_rsci (
  clk, arst_n, dst_rsc_dat, dst_rsc_vld, dst_rsc_rdy, core_wen, dst_rsci_oswt, dst_rsci_wen_comp,
      dst_rsci_idat
);
  input clk;
  input arst_n;
  output [11:0] dst_rsc_dat;
  output dst_rsc_vld;
  input dst_rsc_rdy;
  input core_wen;
  input dst_rsci_oswt;
  output dst_rsci_wen_comp;
  input [11:0] dst_rsci_idat;


  // Interconnect Declarations
  wire dst_rsci_irdy;
  wire dst_rsci_biwt;
  wire dst_rsci_bdwt;
  wire dst_rsci_bcwt;
  wire dst_rsci_ivld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_wait_v1 #(.rscid(32'sd104),
  .width(32'sd12)) dst_rsci (
      .irdy(dst_rsci_irdy),
      .ivld(dst_rsci_ivld_core_sct),
      .idat(dst_rsci_idat),
      .rdy(dst_rsc_rdy),
      .vld(dst_rsc_vld),
      .dat(dst_rsc_dat)
    );
  isp_rawdns_core_dst_rsci_dst_wait_ctrl isp_rawdns_core_dst_rsci_dst_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .dst_rsci_oswt(dst_rsci_oswt),
      .dst_rsci_irdy(dst_rsci_irdy),
      .dst_rsci_biwt(dst_rsci_biwt),
      .dst_rsci_bdwt(dst_rsci_bdwt),
      .dst_rsci_bcwt(dst_rsci_bcwt),
      .dst_rsci_ivld_core_sct(dst_rsci_ivld_core_sct)
    );
  isp_rawdns_core_dst_rsci_dst_wait_dp isp_rawdns_core_dst_rsci_dst_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .dst_rsci_oswt(dst_rsci_oswt),
      .dst_rsci_wen_comp(dst_rsci_wen_comp),
      .dst_rsci_biwt(dst_rsci_biwt),
      .dst_rsci_bdwt(dst_rsci_bdwt),
      .dst_rsci_bcwt(dst_rsci_bcwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_core_src_rsci
// ------------------------------------------------------------------


module isp_rawdns_core_src_rsci (
  clk, arst_n, src_rsc_dat, src_rsc_vld, src_rsc_rdy, core_wen, src_rsci_oswt, src_rsci_wen_comp,
      src_rsci_idat_mxwt
);
  input clk;
  input arst_n;
  input [11:0] src_rsc_dat;
  input src_rsc_vld;
  output src_rsc_rdy;
  input core_wen;
  input src_rsci_oswt;
  output src_rsci_wen_comp;
  output [11:0] src_rsci_idat_mxwt;


  // Interconnect Declarations
  wire src_rsci_biwt;
  wire src_rsci_bdwt;
  wire src_rsci_bcwt;
  wire src_rsci_irdy_core_sct;
  wire src_rsci_ivld;
  wire [11:0] src_rsci_idat;


  // Interconnect Declarations for Component Instantiations 
  ccs_in_wait_v1 #(.rscid(32'sd103),
  .width(32'sd12)) src_rsci (
      .rdy(src_rsc_rdy),
      .vld(src_rsc_vld),
      .dat(src_rsc_dat),
      .irdy(src_rsci_irdy_core_sct),
      .ivld(src_rsci_ivld),
      .idat(src_rsci_idat)
    );
  isp_rawdns_core_src_rsci_src_wait_ctrl isp_rawdns_core_src_rsci_src_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .src_rsci_oswt(src_rsci_oswt),
      .src_rsci_biwt(src_rsci_biwt),
      .src_rsci_bdwt(src_rsci_bdwt),
      .src_rsci_bcwt(src_rsci_bcwt),
      .src_rsci_irdy_core_sct(src_rsci_irdy_core_sct),
      .src_rsci_ivld(src_rsci_ivld)
    );
  isp_rawdns_core_src_rsci_src_wait_dp isp_rawdns_core_src_rsci_src_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .src_rsci_oswt(src_rsci_oswt),
      .src_rsci_wen_comp(src_rsci_wen_comp),
      .src_rsci_idat_mxwt(src_rsci_idat_mxwt),
      .src_rsci_biwt(src_rsci_biwt),
      .src_rsci_bdwt(src_rsci_bdwt),
      .src_rsci_bcwt(src_rsci_bcwt),
      .src_rsci_idat(src_rsci_idat)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    awb_core_awb_reg_b_gain_rsc_triosy_obj
// ------------------------------------------------------------------


module awb_core_awb_reg_b_gain_rsc_triosy_obj (
  awb_reg_b_gain_rsc_triosy_lz, core_wten, awb_reg_b_gain_rsc_triosy_obj_iswt0
);
  output awb_reg_b_gain_rsc_triosy_lz;
  input core_wten;
  input awb_reg_b_gain_rsc_triosy_obj_iswt0;


  // Interconnect Declarations
  wire awb_reg_b_gain_rsc_triosy_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) awb_reg_b_gain_rsc_triosy_obj (
      .ld(awb_reg_b_gain_rsc_triosy_obj_ld_core_sct),
      .lz(awb_reg_b_gain_rsc_triosy_lz)
    );
  awb_core_awb_reg_b_gain_rsc_triosy_obj_awb_reg_b_gain_rsc_triosy_wait_ctrl awb_core_awb_reg_b_gain_rsc_triosy_obj_awb_reg_b_gain_rsc_triosy_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .awb_reg_b_gain_rsc_triosy_obj_iswt0(awb_reg_b_gain_rsc_triosy_obj_iswt0),
      .awb_reg_b_gain_rsc_triosy_obj_ld_core_sct(awb_reg_b_gain_rsc_triosy_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    awb_core_awb_reg_g_gain_rsc_triosy_obj
// ------------------------------------------------------------------


module awb_core_awb_reg_g_gain_rsc_triosy_obj (
  awb_reg_g_gain_rsc_triosy_lz, core_wten, awb_reg_g_gain_rsc_triosy_obj_iswt0
);
  output awb_reg_g_gain_rsc_triosy_lz;
  input core_wten;
  input awb_reg_g_gain_rsc_triosy_obj_iswt0;


  // Interconnect Declarations
  wire awb_reg_g_gain_rsc_triosy_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) awb_reg_g_gain_rsc_triosy_obj (
      .ld(awb_reg_g_gain_rsc_triosy_obj_ld_core_sct),
      .lz(awb_reg_g_gain_rsc_triosy_lz)
    );
  awb_core_awb_reg_g_gain_rsc_triosy_obj_awb_reg_g_gain_rsc_triosy_wait_ctrl awb_core_awb_reg_g_gain_rsc_triosy_obj_awb_reg_g_gain_rsc_triosy_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .awb_reg_g_gain_rsc_triosy_obj_iswt0(awb_reg_g_gain_rsc_triosy_obj_iswt0),
      .awb_reg_g_gain_rsc_triosy_obj_ld_core_sct(awb_reg_g_gain_rsc_triosy_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    awb_core_awb_reg_r_gain_rsc_triosy_obj
// ------------------------------------------------------------------


module awb_core_awb_reg_r_gain_rsc_triosy_obj (
  awb_reg_r_gain_rsc_triosy_lz, core_wten, awb_reg_r_gain_rsc_triosy_obj_iswt0
);
  output awb_reg_r_gain_rsc_triosy_lz;
  input core_wten;
  input awb_reg_r_gain_rsc_triosy_obj_iswt0;


  // Interconnect Declarations
  wire awb_reg_r_gain_rsc_triosy_obj_ld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) awb_reg_r_gain_rsc_triosy_obj (
      .ld(awb_reg_r_gain_rsc_triosy_obj_ld_core_sct),
      .lz(awb_reg_r_gain_rsc_triosy_lz)
    );
  awb_core_awb_reg_r_gain_rsc_triosy_obj_awb_reg_r_gain_rsc_triosy_wait_ctrl awb_core_awb_reg_r_gain_rsc_triosy_obj_awb_reg_r_gain_rsc_triosy_wait_ctrl_inst
      (
      .core_wten(core_wten),
      .awb_reg_r_gain_rsc_triosy_obj_iswt0(awb_reg_r_gain_rsc_triosy_obj_iswt0),
      .awb_reg_r_gain_rsc_triosy_obj_ld_core_sct(awb_reg_r_gain_rsc_triosy_obj_ld_core_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    awb_core_dst_rsci
// ------------------------------------------------------------------


module awb_core_dst_rsci (
  clk, arst_n, dst_rsc_dat, dst_rsc_vld, dst_rsc_rdy, core_wen, dst_rsci_oswt, dst_rsci_wen_comp,
      dst_rsci_idat
);
  input clk;
  input arst_n;
  output [11:0] dst_rsc_dat;
  output dst_rsc_vld;
  input dst_rsc_rdy;
  input core_wen;
  input dst_rsci_oswt;
  output dst_rsci_wen_comp;
  input [11:0] dst_rsci_idat;


  // Interconnect Declarations
  wire dst_rsci_irdy;
  wire dst_rsci_biwt;
  wire dst_rsci_bdwt;
  wire dst_rsci_bcwt;
  wire dst_rsci_ivld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_wait_v1 #(.rscid(32'sd127),
  .width(32'sd12)) dst_rsci (
      .irdy(dst_rsci_irdy),
      .ivld(dst_rsci_ivld_core_sct),
      .idat(dst_rsci_idat),
      .rdy(dst_rsc_rdy),
      .vld(dst_rsc_vld),
      .dat(dst_rsc_dat)
    );
  awb_core_dst_rsci_dst_wait_ctrl awb_core_dst_rsci_dst_wait_ctrl_inst (
      .core_wen(core_wen),
      .dst_rsci_oswt(dst_rsci_oswt),
      .dst_rsci_irdy(dst_rsci_irdy),
      .dst_rsci_biwt(dst_rsci_biwt),
      .dst_rsci_bdwt(dst_rsci_bdwt),
      .dst_rsci_bcwt(dst_rsci_bcwt),
      .dst_rsci_ivld_core_sct(dst_rsci_ivld_core_sct)
    );
  awb_core_dst_rsci_dst_wait_dp awb_core_dst_rsci_dst_wait_dp_inst (
      .clk(clk),
      .arst_n(arst_n),
      .dst_rsci_oswt(dst_rsci_oswt),
      .dst_rsci_wen_comp(dst_rsci_wen_comp),
      .dst_rsci_biwt(dst_rsci_biwt),
      .dst_rsci_bdwt(dst_rsci_bdwt),
      .dst_rsci_bcwt(dst_rsci_bcwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    awb_core_src_rsci
// ------------------------------------------------------------------


module awb_core_src_rsci (
  clk, arst_n, src_rsc_dat, src_rsc_vld, src_rsc_rdy, core_wen, src_rsci_oswt, src_rsci_wen_comp,
      src_rsci_idat_mxwt
);
  input clk;
  input arst_n;
  input [11:0] src_rsc_dat;
  input src_rsc_vld;
  output src_rsc_rdy;
  input core_wen;
  input src_rsci_oswt;
  output src_rsci_wen_comp;
  output [11:0] src_rsci_idat_mxwt;


  // Interconnect Declarations
  wire src_rsci_biwt;
  wire src_rsci_bdwt;
  wire src_rsci_bcwt;
  wire src_rsci_irdy_core_sct;
  wire src_rsci_ivld;
  wire [11:0] src_rsci_idat;


  // Interconnect Declarations for Component Instantiations 
  ccs_in_wait_v1 #(.rscid(32'sd126),
  .width(32'sd12)) src_rsci (
      .rdy(src_rsc_rdy),
      .vld(src_rsc_vld),
      .dat(src_rsc_dat),
      .irdy(src_rsci_irdy_core_sct),
      .ivld(src_rsci_ivld),
      .idat(src_rsci_idat)
    );
  awb_core_src_rsci_src_wait_ctrl awb_core_src_rsci_src_wait_ctrl_inst (
      .core_wen(core_wen),
      .src_rsci_oswt(src_rsci_oswt),
      .src_rsci_biwt(src_rsci_biwt),
      .src_rsci_bdwt(src_rsci_bdwt),
      .src_rsci_bcwt(src_rsci_bcwt),
      .src_rsci_irdy_core_sct(src_rsci_irdy_core_sct),
      .src_rsci_ivld(src_rsci_ivld)
    );
  awb_core_src_rsci_src_wait_dp awb_core_src_rsci_src_wait_dp_inst (
      .clk(clk),
      .arst_n(arst_n),
      .src_rsci_oswt(src_rsci_oswt),
      .src_rsci_wen_comp(src_rsci_wen_comp),
      .src_rsci_idat_mxwt(src_rsci_idat_mxwt),
      .src_rsci_biwt(src_rsci_biwt),
      .src_rsci_bdwt(src_rsci_bdwt),
      .src_rsci_bcwt(src_rsci_bcwt),
      .src_rsci_idat(src_rsci_idat)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    wbc_core_dst_rsci
// ------------------------------------------------------------------


module wbc_core_dst_rsci (
  clk, arst_n, dst_rsc_dat, dst_rsc_vld, dst_rsc_rdy, core_wen, dst_rsci_oswt, dst_rsci_wen_comp,
      dst_rsci_idat
);
  input clk;
  input arst_n;
  output [11:0] dst_rsc_dat;
  output dst_rsc_vld;
  input dst_rsc_rdy;
  input core_wen;
  input dst_rsci_oswt;
  output dst_rsci_wen_comp;
  input [11:0] dst_rsci_idat;


  // Interconnect Declarations
  wire dst_rsci_irdy;
  wire dst_rsci_biwt;
  wire dst_rsci_bdwt;
  wire dst_rsci_bcwt;
  wire dst_rsci_ivld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_wait_v1 #(.rscid(32'sd145),
  .width(32'sd12)) dst_rsci (
      .irdy(dst_rsci_irdy),
      .ivld(dst_rsci_ivld_core_sct),
      .idat(dst_rsci_idat),
      .rdy(dst_rsc_rdy),
      .vld(dst_rsc_vld),
      .dat(dst_rsc_dat)
    );
  wbc_core_dst_rsci_dst_wait_ctrl wbc_core_dst_rsci_dst_wait_ctrl_inst (
      .core_wen(core_wen),
      .dst_rsci_oswt(dst_rsci_oswt),
      .dst_rsci_irdy(dst_rsci_irdy),
      .dst_rsci_biwt(dst_rsci_biwt),
      .dst_rsci_bdwt(dst_rsci_bdwt),
      .dst_rsci_bcwt(dst_rsci_bcwt),
      .dst_rsci_ivld_core_sct(dst_rsci_ivld_core_sct)
    );
  wbc_core_dst_rsci_dst_wait_dp wbc_core_dst_rsci_dst_wait_dp_inst (
      .clk(clk),
      .arst_n(arst_n),
      .dst_rsci_oswt(dst_rsci_oswt),
      .dst_rsci_wen_comp(dst_rsci_wen_comp),
      .dst_rsci_biwt(dst_rsci_biwt),
      .dst_rsci_bdwt(dst_rsci_bdwt),
      .dst_rsci_bcwt(dst_rsci_bcwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    wbc_core_src_rsci
// ------------------------------------------------------------------


module wbc_core_src_rsci (
  clk, arst_n, src_rsc_dat, src_rsc_vld, src_rsc_rdy, core_wen, src_rsci_oswt, src_rsci_wen_comp,
      src_rsci_idat_mxwt
);
  input clk;
  input arst_n;
  input [11:0] src_rsc_dat;
  input src_rsc_vld;
  output src_rsc_rdy;
  input core_wen;
  input src_rsci_oswt;
  output src_rsci_wen_comp;
  output [11:0] src_rsci_idat_mxwt;


  // Interconnect Declarations
  wire src_rsci_biwt;
  wire src_rsci_bdwt;
  wire src_rsci_bcwt;
  wire src_rsci_irdy_core_sct;
  wire src_rsci_ivld;
  wire [11:0] src_rsci_idat;


  // Interconnect Declarations for Component Instantiations 
  ccs_in_wait_v1 #(.rscid(32'sd144),
  .width(32'sd12)) src_rsci (
      .rdy(src_rsc_rdy),
      .vld(src_rsc_vld),
      .dat(src_rsc_dat),
      .irdy(src_rsci_irdy_core_sct),
      .ivld(src_rsci_ivld),
      .idat(src_rsci_idat)
    );
  wbc_core_src_rsci_src_wait_ctrl wbc_core_src_rsci_src_wait_ctrl_inst (
      .core_wen(core_wen),
      .src_rsci_oswt(src_rsci_oswt),
      .src_rsci_biwt(src_rsci_biwt),
      .src_rsci_bdwt(src_rsci_bdwt),
      .src_rsci_bcwt(src_rsci_bcwt),
      .src_rsci_irdy_core_sct(src_rsci_irdy_core_sct),
      .src_rsci_ivld(src_rsci_ivld)
    );
  wbc_core_src_rsci_src_wait_dp wbc_core_src_rsci_src_wait_dp_inst (
      .clk(clk),
      .arst_n(arst_n),
      .src_rsci_oswt(src_rsci_oswt),
      .src_rsci_wen_comp(src_rsci_wen_comp),
      .src_rsci_idat_mxwt(src_rsci_idat_mxwt),
      .src_rsci_biwt(src_rsci_biwt),
      .src_rsci_bdwt(src_rsci_bdwt),
      .src_rsci_bcwt(src_rsci_bcwt),
      .src_rsci_idat(src_rsci_idat)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    greenbalance2_core_gb_lines_rsc_0_5_i_1
// ------------------------------------------------------------------


module greenbalance2_core_gb_lines_rsc_0_5_i_1 (
  clk, arst_n, gb_lines_rsc_0_5_i_q_d, core_wen, core_wten, gb_lines_rsc_0_5_i_oswt,
      gb_lines_rsc_0_5_i_q_d_mxwt, gb_lines_rsc_0_5_i_we_d_pff, gb_lines_rsc_0_5_i_iswt0_1_pff,
      gb_lines_rsc_0_5_i_re_d_pff, gb_lines_rsc_0_5_i_oswt_pff
);
  input clk;
  input arst_n;
  input [11:0] gb_lines_rsc_0_5_i_q_d;
  input core_wen;
  input core_wten;
  input gb_lines_rsc_0_5_i_oswt;
  output [11:0] gb_lines_rsc_0_5_i_q_d_mxwt;
  output gb_lines_rsc_0_5_i_we_d_pff;
  input gb_lines_rsc_0_5_i_iswt0_1_pff;
  output gb_lines_rsc_0_5_i_re_d_pff;
  input gb_lines_rsc_0_5_i_oswt_pff;


  // Interconnect Declarations
  wire gb_lines_rsc_0_5_i_biwt;
  wire gb_lines_rsc_0_5_i_bdwt;
  wire gb_lines_rsc_0_5_i_we_d_core_sct_iff;
  wire gb_lines_rsc_0_5_i_re_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  greenbalance2_core_gb_lines_rsc_0_5_i_1_gb_lines_rsc_0_5_wait_ctrl greenbalance2_core_gb_lines_rsc_0_5_i_1_gb_lines_rsc_0_5_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .gb_lines_rsc_0_5_i_oswt(gb_lines_rsc_0_5_i_oswt),
      .gb_lines_rsc_0_5_i_biwt(gb_lines_rsc_0_5_i_biwt),
      .gb_lines_rsc_0_5_i_bdwt(gb_lines_rsc_0_5_i_bdwt),
      .gb_lines_rsc_0_5_i_we_d_core_sct_pff(gb_lines_rsc_0_5_i_we_d_core_sct_iff),
      .gb_lines_rsc_0_5_i_iswt0_1_pff(gb_lines_rsc_0_5_i_iswt0_1_pff),
      .gb_lines_rsc_0_5_i_re_d_core_sct_pff(gb_lines_rsc_0_5_i_re_d_core_sct_iff),
      .gb_lines_rsc_0_5_i_oswt_pff(gb_lines_rsc_0_5_i_oswt_pff)
    );
  greenbalance2_core_gb_lines_rsc_0_5_i_1_gb_lines_rsc_0_5_wait_dp greenbalance2_core_gb_lines_rsc_0_5_i_1_gb_lines_rsc_0_5_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .gb_lines_rsc_0_5_i_q_d(gb_lines_rsc_0_5_i_q_d),
      .gb_lines_rsc_0_5_i_q_d_mxwt(gb_lines_rsc_0_5_i_q_d_mxwt),
      .gb_lines_rsc_0_5_i_biwt(gb_lines_rsc_0_5_i_biwt),
      .gb_lines_rsc_0_5_i_bdwt(gb_lines_rsc_0_5_i_bdwt)
    );
  assign gb_lines_rsc_0_5_i_we_d_pff = gb_lines_rsc_0_5_i_we_d_core_sct_iff;
  assign gb_lines_rsc_0_5_i_re_d_pff = gb_lines_rsc_0_5_i_re_d_core_sct_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    greenbalance2_core_gb_lines_rsc_0_4_i_1
// ------------------------------------------------------------------


module greenbalance2_core_gb_lines_rsc_0_4_i_1 (
  clk, arst_n, gb_lines_rsc_0_4_i_q_d, core_wen, core_wten, gb_lines_rsc_0_4_i_oswt,
      gb_lines_rsc_0_4_i_q_d_mxwt, gb_lines_rsc_0_4_i_we_d_pff, gb_lines_rsc_0_4_i_iswt0_1_pff,
      gb_lines_rsc_0_4_i_re_d_pff, gb_lines_rsc_0_4_i_oswt_pff
);
  input clk;
  input arst_n;
  input [11:0] gb_lines_rsc_0_4_i_q_d;
  input core_wen;
  input core_wten;
  input gb_lines_rsc_0_4_i_oswt;
  output [11:0] gb_lines_rsc_0_4_i_q_d_mxwt;
  output gb_lines_rsc_0_4_i_we_d_pff;
  input gb_lines_rsc_0_4_i_iswt0_1_pff;
  output gb_lines_rsc_0_4_i_re_d_pff;
  input gb_lines_rsc_0_4_i_oswt_pff;


  // Interconnect Declarations
  wire gb_lines_rsc_0_4_i_biwt;
  wire gb_lines_rsc_0_4_i_bdwt;
  wire gb_lines_rsc_0_4_i_we_d_core_sct_iff;
  wire gb_lines_rsc_0_4_i_re_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  greenbalance2_core_gb_lines_rsc_0_4_i_1_gb_lines_rsc_0_4_wait_ctrl greenbalance2_core_gb_lines_rsc_0_4_i_1_gb_lines_rsc_0_4_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .gb_lines_rsc_0_4_i_oswt(gb_lines_rsc_0_4_i_oswt),
      .gb_lines_rsc_0_4_i_biwt(gb_lines_rsc_0_4_i_biwt),
      .gb_lines_rsc_0_4_i_bdwt(gb_lines_rsc_0_4_i_bdwt),
      .gb_lines_rsc_0_4_i_we_d_core_sct_pff(gb_lines_rsc_0_4_i_we_d_core_sct_iff),
      .gb_lines_rsc_0_4_i_iswt0_1_pff(gb_lines_rsc_0_4_i_iswt0_1_pff),
      .gb_lines_rsc_0_4_i_re_d_core_sct_pff(gb_lines_rsc_0_4_i_re_d_core_sct_iff),
      .gb_lines_rsc_0_4_i_oswt_pff(gb_lines_rsc_0_4_i_oswt_pff)
    );
  greenbalance2_core_gb_lines_rsc_0_4_i_1_gb_lines_rsc_0_4_wait_dp greenbalance2_core_gb_lines_rsc_0_4_i_1_gb_lines_rsc_0_4_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .gb_lines_rsc_0_4_i_q_d(gb_lines_rsc_0_4_i_q_d),
      .gb_lines_rsc_0_4_i_q_d_mxwt(gb_lines_rsc_0_4_i_q_d_mxwt),
      .gb_lines_rsc_0_4_i_biwt(gb_lines_rsc_0_4_i_biwt),
      .gb_lines_rsc_0_4_i_bdwt(gb_lines_rsc_0_4_i_bdwt)
    );
  assign gb_lines_rsc_0_4_i_we_d_pff = gb_lines_rsc_0_4_i_we_d_core_sct_iff;
  assign gb_lines_rsc_0_4_i_re_d_pff = gb_lines_rsc_0_4_i_re_d_core_sct_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    greenbalance2_core_gb_lines_rsc_0_3_i_1
// ------------------------------------------------------------------


module greenbalance2_core_gb_lines_rsc_0_3_i_1 (
  clk, arst_n, gb_lines_rsc_0_3_i_q_d, core_wen, core_wten, gb_lines_rsc_0_3_i_oswt,
      gb_lines_rsc_0_3_i_q_d_mxwt, gb_lines_rsc_0_3_i_we_d_pff, gb_lines_rsc_0_3_i_iswt0_1_pff,
      gb_lines_rsc_0_3_i_re_d_pff, gb_lines_rsc_0_3_i_oswt_pff
);
  input clk;
  input arst_n;
  input [11:0] gb_lines_rsc_0_3_i_q_d;
  input core_wen;
  input core_wten;
  input gb_lines_rsc_0_3_i_oswt;
  output [11:0] gb_lines_rsc_0_3_i_q_d_mxwt;
  output gb_lines_rsc_0_3_i_we_d_pff;
  input gb_lines_rsc_0_3_i_iswt0_1_pff;
  output gb_lines_rsc_0_3_i_re_d_pff;
  input gb_lines_rsc_0_3_i_oswt_pff;


  // Interconnect Declarations
  wire gb_lines_rsc_0_3_i_biwt;
  wire gb_lines_rsc_0_3_i_bdwt;
  wire gb_lines_rsc_0_3_i_we_d_core_sct_iff;
  wire gb_lines_rsc_0_3_i_re_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  greenbalance2_core_gb_lines_rsc_0_3_i_1_gb_lines_rsc_0_3_wait_ctrl greenbalance2_core_gb_lines_rsc_0_3_i_1_gb_lines_rsc_0_3_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .gb_lines_rsc_0_3_i_oswt(gb_lines_rsc_0_3_i_oswt),
      .gb_lines_rsc_0_3_i_biwt(gb_lines_rsc_0_3_i_biwt),
      .gb_lines_rsc_0_3_i_bdwt(gb_lines_rsc_0_3_i_bdwt),
      .gb_lines_rsc_0_3_i_we_d_core_sct_pff(gb_lines_rsc_0_3_i_we_d_core_sct_iff),
      .gb_lines_rsc_0_3_i_iswt0_1_pff(gb_lines_rsc_0_3_i_iswt0_1_pff),
      .gb_lines_rsc_0_3_i_re_d_core_sct_pff(gb_lines_rsc_0_3_i_re_d_core_sct_iff),
      .gb_lines_rsc_0_3_i_oswt_pff(gb_lines_rsc_0_3_i_oswt_pff)
    );
  greenbalance2_core_gb_lines_rsc_0_3_i_1_gb_lines_rsc_0_3_wait_dp greenbalance2_core_gb_lines_rsc_0_3_i_1_gb_lines_rsc_0_3_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .gb_lines_rsc_0_3_i_q_d(gb_lines_rsc_0_3_i_q_d),
      .gb_lines_rsc_0_3_i_q_d_mxwt(gb_lines_rsc_0_3_i_q_d_mxwt),
      .gb_lines_rsc_0_3_i_biwt(gb_lines_rsc_0_3_i_biwt),
      .gb_lines_rsc_0_3_i_bdwt(gb_lines_rsc_0_3_i_bdwt)
    );
  assign gb_lines_rsc_0_3_i_we_d_pff = gb_lines_rsc_0_3_i_we_d_core_sct_iff;
  assign gb_lines_rsc_0_3_i_re_d_pff = gb_lines_rsc_0_3_i_re_d_core_sct_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    greenbalance2_core_gb_lines_rsc_0_2_i_1
// ------------------------------------------------------------------


module greenbalance2_core_gb_lines_rsc_0_2_i_1 (
  clk, arst_n, gb_lines_rsc_0_2_i_q_d, core_wen, core_wten, gb_lines_rsc_0_2_i_oswt,
      gb_lines_rsc_0_2_i_q_d_mxwt, gb_lines_rsc_0_2_i_we_d_pff, gb_lines_rsc_0_2_i_iswt0_1_pff,
      gb_lines_rsc_0_2_i_re_d_pff, gb_lines_rsc_0_2_i_oswt_pff
);
  input clk;
  input arst_n;
  input [11:0] gb_lines_rsc_0_2_i_q_d;
  input core_wen;
  input core_wten;
  input gb_lines_rsc_0_2_i_oswt;
  output [11:0] gb_lines_rsc_0_2_i_q_d_mxwt;
  output gb_lines_rsc_0_2_i_we_d_pff;
  input gb_lines_rsc_0_2_i_iswt0_1_pff;
  output gb_lines_rsc_0_2_i_re_d_pff;
  input gb_lines_rsc_0_2_i_oswt_pff;


  // Interconnect Declarations
  wire gb_lines_rsc_0_2_i_biwt;
  wire gb_lines_rsc_0_2_i_bdwt;
  wire gb_lines_rsc_0_2_i_we_d_core_sct_iff;
  wire gb_lines_rsc_0_2_i_re_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  greenbalance2_core_gb_lines_rsc_0_2_i_1_gb_lines_rsc_0_2_wait_ctrl greenbalance2_core_gb_lines_rsc_0_2_i_1_gb_lines_rsc_0_2_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .gb_lines_rsc_0_2_i_oswt(gb_lines_rsc_0_2_i_oswt),
      .gb_lines_rsc_0_2_i_biwt(gb_lines_rsc_0_2_i_biwt),
      .gb_lines_rsc_0_2_i_bdwt(gb_lines_rsc_0_2_i_bdwt),
      .gb_lines_rsc_0_2_i_we_d_core_sct_pff(gb_lines_rsc_0_2_i_we_d_core_sct_iff),
      .gb_lines_rsc_0_2_i_iswt0_1_pff(gb_lines_rsc_0_2_i_iswt0_1_pff),
      .gb_lines_rsc_0_2_i_re_d_core_sct_pff(gb_lines_rsc_0_2_i_re_d_core_sct_iff),
      .gb_lines_rsc_0_2_i_oswt_pff(gb_lines_rsc_0_2_i_oswt_pff)
    );
  greenbalance2_core_gb_lines_rsc_0_2_i_1_gb_lines_rsc_0_2_wait_dp greenbalance2_core_gb_lines_rsc_0_2_i_1_gb_lines_rsc_0_2_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .gb_lines_rsc_0_2_i_q_d(gb_lines_rsc_0_2_i_q_d),
      .gb_lines_rsc_0_2_i_q_d_mxwt(gb_lines_rsc_0_2_i_q_d_mxwt),
      .gb_lines_rsc_0_2_i_biwt(gb_lines_rsc_0_2_i_biwt),
      .gb_lines_rsc_0_2_i_bdwt(gb_lines_rsc_0_2_i_bdwt)
    );
  assign gb_lines_rsc_0_2_i_we_d_pff = gb_lines_rsc_0_2_i_we_d_core_sct_iff;
  assign gb_lines_rsc_0_2_i_re_d_pff = gb_lines_rsc_0_2_i_re_d_core_sct_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    greenbalance2_core_gb_lines_rsc_0_1_i_1
// ------------------------------------------------------------------


module greenbalance2_core_gb_lines_rsc_0_1_i_1 (
  clk, arst_n, gb_lines_rsc_0_1_i_q_d, core_wen, core_wten, gb_lines_rsc_0_1_i_oswt,
      gb_lines_rsc_0_1_i_q_d_mxwt, gb_lines_rsc_0_1_i_we_d_pff, gb_lines_rsc_0_1_i_iswt0_1_pff,
      gb_lines_rsc_0_1_i_re_d_pff, gb_lines_rsc_0_1_i_oswt_pff
);
  input clk;
  input arst_n;
  input [11:0] gb_lines_rsc_0_1_i_q_d;
  input core_wen;
  input core_wten;
  input gb_lines_rsc_0_1_i_oswt;
  output [11:0] gb_lines_rsc_0_1_i_q_d_mxwt;
  output gb_lines_rsc_0_1_i_we_d_pff;
  input gb_lines_rsc_0_1_i_iswt0_1_pff;
  output gb_lines_rsc_0_1_i_re_d_pff;
  input gb_lines_rsc_0_1_i_oswt_pff;


  // Interconnect Declarations
  wire gb_lines_rsc_0_1_i_biwt;
  wire gb_lines_rsc_0_1_i_bdwt;
  wire gb_lines_rsc_0_1_i_we_d_core_sct_iff;
  wire gb_lines_rsc_0_1_i_re_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  greenbalance2_core_gb_lines_rsc_0_1_i_1_gb_lines_rsc_0_1_wait_ctrl greenbalance2_core_gb_lines_rsc_0_1_i_1_gb_lines_rsc_0_1_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .gb_lines_rsc_0_1_i_oswt(gb_lines_rsc_0_1_i_oswt),
      .gb_lines_rsc_0_1_i_biwt(gb_lines_rsc_0_1_i_biwt),
      .gb_lines_rsc_0_1_i_bdwt(gb_lines_rsc_0_1_i_bdwt),
      .gb_lines_rsc_0_1_i_we_d_core_sct_pff(gb_lines_rsc_0_1_i_we_d_core_sct_iff),
      .gb_lines_rsc_0_1_i_iswt0_1_pff(gb_lines_rsc_0_1_i_iswt0_1_pff),
      .gb_lines_rsc_0_1_i_re_d_core_sct_pff(gb_lines_rsc_0_1_i_re_d_core_sct_iff),
      .gb_lines_rsc_0_1_i_oswt_pff(gb_lines_rsc_0_1_i_oswt_pff)
    );
  greenbalance2_core_gb_lines_rsc_0_1_i_1_gb_lines_rsc_0_1_wait_dp greenbalance2_core_gb_lines_rsc_0_1_i_1_gb_lines_rsc_0_1_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .gb_lines_rsc_0_1_i_q_d(gb_lines_rsc_0_1_i_q_d),
      .gb_lines_rsc_0_1_i_q_d_mxwt(gb_lines_rsc_0_1_i_q_d_mxwt),
      .gb_lines_rsc_0_1_i_biwt(gb_lines_rsc_0_1_i_biwt),
      .gb_lines_rsc_0_1_i_bdwt(gb_lines_rsc_0_1_i_bdwt)
    );
  assign gb_lines_rsc_0_1_i_we_d_pff = gb_lines_rsc_0_1_i_we_d_core_sct_iff;
  assign gb_lines_rsc_0_1_i_re_d_pff = gb_lines_rsc_0_1_i_re_d_core_sct_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    greenbalance2_core_gb_lines_rsc_0_0_i_1
// ------------------------------------------------------------------


module greenbalance2_core_gb_lines_rsc_0_0_i_1 (
  clk, arst_n, gb_lines_rsc_0_0_i_q_d, core_wen, core_wten, gb_lines_rsc_0_0_i_oswt,
      gb_lines_rsc_0_0_i_q_d_mxwt, gb_lines_rsc_0_0_i_we_d_pff, gb_lines_rsc_0_0_i_iswt0_1_pff,
      gb_lines_rsc_0_0_i_re_d_pff, gb_lines_rsc_0_0_i_oswt_pff
);
  input clk;
  input arst_n;
  input [11:0] gb_lines_rsc_0_0_i_q_d;
  input core_wen;
  input core_wten;
  input gb_lines_rsc_0_0_i_oswt;
  output [11:0] gb_lines_rsc_0_0_i_q_d_mxwt;
  output gb_lines_rsc_0_0_i_we_d_pff;
  input gb_lines_rsc_0_0_i_iswt0_1_pff;
  output gb_lines_rsc_0_0_i_re_d_pff;
  input gb_lines_rsc_0_0_i_oswt_pff;


  // Interconnect Declarations
  wire gb_lines_rsc_0_0_i_biwt;
  wire gb_lines_rsc_0_0_i_bdwt;
  wire gb_lines_rsc_0_0_i_we_d_core_sct_iff;
  wire gb_lines_rsc_0_0_i_re_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  greenbalance2_core_gb_lines_rsc_0_0_i_1_gb_lines_rsc_0_0_wait_ctrl greenbalance2_core_gb_lines_rsc_0_0_i_1_gb_lines_rsc_0_0_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .gb_lines_rsc_0_0_i_oswt(gb_lines_rsc_0_0_i_oswt),
      .gb_lines_rsc_0_0_i_biwt(gb_lines_rsc_0_0_i_biwt),
      .gb_lines_rsc_0_0_i_bdwt(gb_lines_rsc_0_0_i_bdwt),
      .gb_lines_rsc_0_0_i_we_d_core_sct_pff(gb_lines_rsc_0_0_i_we_d_core_sct_iff),
      .gb_lines_rsc_0_0_i_iswt0_1_pff(gb_lines_rsc_0_0_i_iswt0_1_pff),
      .gb_lines_rsc_0_0_i_re_d_core_sct_pff(gb_lines_rsc_0_0_i_re_d_core_sct_iff),
      .gb_lines_rsc_0_0_i_oswt_pff(gb_lines_rsc_0_0_i_oswt_pff)
    );
  greenbalance2_core_gb_lines_rsc_0_0_i_1_gb_lines_rsc_0_0_wait_dp greenbalance2_core_gb_lines_rsc_0_0_i_1_gb_lines_rsc_0_0_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .gb_lines_rsc_0_0_i_q_d(gb_lines_rsc_0_0_i_q_d),
      .gb_lines_rsc_0_0_i_q_d_mxwt(gb_lines_rsc_0_0_i_q_d_mxwt),
      .gb_lines_rsc_0_0_i_biwt(gb_lines_rsc_0_0_i_biwt),
      .gb_lines_rsc_0_0_i_bdwt(gb_lines_rsc_0_0_i_bdwt)
    );
  assign gb_lines_rsc_0_0_i_we_d_pff = gb_lines_rsc_0_0_i_we_d_core_sct_iff;
  assign gb_lines_rsc_0_0_i_re_d_pff = gb_lines_rsc_0_0_i_re_d_core_sct_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    greenbalance2_core_dst_rsci
// ------------------------------------------------------------------


module greenbalance2_core_dst_rsci (
  clk, arst_n, dst_rsc_dat, dst_rsc_vld, dst_rsc_rdy, core_wen, dst_rsci_oswt, dst_rsci_wen_comp,
      dst_rsci_idat
);
  input clk;
  input arst_n;
  output [11:0] dst_rsc_dat;
  output dst_rsc_vld;
  input dst_rsc_rdy;
  input core_wen;
  input dst_rsci_oswt;
  output dst_rsci_wen_comp;
  input [11:0] dst_rsci_idat;


  // Interconnect Declarations
  wire dst_rsci_irdy;
  wire dst_rsci_biwt;
  wire dst_rsci_bdwt;
  wire dst_rsci_bcwt;
  wire dst_rsci_ivld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_wait_v1 #(.rscid(32'sd163),
  .width(32'sd12)) dst_rsci (
      .irdy(dst_rsci_irdy),
      .ivld(dst_rsci_ivld_core_sct),
      .idat(dst_rsci_idat),
      .rdy(dst_rsc_rdy),
      .vld(dst_rsc_vld),
      .dat(dst_rsc_dat)
    );
  greenbalance2_core_dst_rsci_dst_wait_ctrl greenbalance2_core_dst_rsci_dst_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .dst_rsci_oswt(dst_rsci_oswt),
      .dst_rsci_irdy(dst_rsci_irdy),
      .dst_rsci_biwt(dst_rsci_biwt),
      .dst_rsci_bdwt(dst_rsci_bdwt),
      .dst_rsci_bcwt(dst_rsci_bcwt),
      .dst_rsci_ivld_core_sct(dst_rsci_ivld_core_sct)
    );
  greenbalance2_core_dst_rsci_dst_wait_dp greenbalance2_core_dst_rsci_dst_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .dst_rsci_oswt(dst_rsci_oswt),
      .dst_rsci_wen_comp(dst_rsci_wen_comp),
      .dst_rsci_biwt(dst_rsci_biwt),
      .dst_rsci_bdwt(dst_rsci_bdwt),
      .dst_rsci_bcwt(dst_rsci_bcwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    greenbalance2_core_src_rsci
// ------------------------------------------------------------------


module greenbalance2_core_src_rsci (
  clk, arst_n, src_rsc_dat, src_rsc_vld, src_rsc_rdy, core_wen, src_rsci_oswt, src_rsci_wen_comp,
      src_rsci_idat_mxwt
);
  input clk;
  input arst_n;
  input [11:0] src_rsc_dat;
  input src_rsc_vld;
  output src_rsc_rdy;
  input core_wen;
  input src_rsci_oswt;
  output src_rsci_wen_comp;
  output [11:0] src_rsci_idat_mxwt;


  // Interconnect Declarations
  wire src_rsci_biwt;
  wire src_rsci_bdwt;
  wire src_rsci_bcwt;
  wire src_rsci_irdy_core_sct;
  wire src_rsci_ivld;
  wire [11:0] src_rsci_idat;


  // Interconnect Declarations for Component Instantiations 
  ccs_in_wait_v1 #(.rscid(32'sd162),
  .width(32'sd12)) src_rsci (
      .rdy(src_rsc_rdy),
      .vld(src_rsc_vld),
      .dat(src_rsc_dat),
      .irdy(src_rsci_irdy_core_sct),
      .ivld(src_rsci_ivld),
      .idat(src_rsci_idat)
    );
  greenbalance2_core_src_rsci_src_wait_ctrl greenbalance2_core_src_rsci_src_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .src_rsci_oswt(src_rsci_oswt),
      .src_rsci_biwt(src_rsci_biwt),
      .src_rsci_bdwt(src_rsci_bdwt),
      .src_rsci_bcwt(src_rsci_bcwt),
      .src_rsci_irdy_core_sct(src_rsci_irdy_core_sct),
      .src_rsci_ivld(src_rsci_ivld)
    );
  greenbalance2_core_src_rsci_src_wait_dp greenbalance2_core_src_rsci_src_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .src_rsci_oswt(src_rsci_oswt),
      .src_rsci_wen_comp(src_rsci_wen_comp),
      .src_rsci_idat_mxwt(src_rsci_idat_mxwt),
      .src_rsci_biwt(src_rsci_biwt),
      .src_rsci_bdwt(src_rsci_bdwt),
      .src_rsci_bcwt(src_rsci_bcwt),
      .src_rsci_idat(src_rsci_idat)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    demosaic_core_lineBuf_rsc_0_3_i_1
// ------------------------------------------------------------------


module demosaic_core_lineBuf_rsc_0_3_i_1 (
  clk, arst_n, lineBuf_rsc_0_3_i_q_d, core_wen, core_wten, lineBuf_rsc_0_3_i_oswt,
      lineBuf_rsc_0_3_i_q_d_mxwt, lineBuf_rsc_0_3_i_we_d_pff, lineBuf_rsc_0_3_i_iswt0_1_pff,
      lineBuf_rsc_0_3_i_re_d_pff, lineBuf_rsc_0_3_i_oswt_pff
);
  input clk;
  input arst_n;
  input [11:0] lineBuf_rsc_0_3_i_q_d;
  input core_wen;
  input core_wten;
  input lineBuf_rsc_0_3_i_oswt;
  output [11:0] lineBuf_rsc_0_3_i_q_d_mxwt;
  output lineBuf_rsc_0_3_i_we_d_pff;
  input lineBuf_rsc_0_3_i_iswt0_1_pff;
  output lineBuf_rsc_0_3_i_re_d_pff;
  input lineBuf_rsc_0_3_i_oswt_pff;


  // Interconnect Declarations
  wire lineBuf_rsc_0_3_i_biwt;
  wire lineBuf_rsc_0_3_i_bdwt;
  wire lineBuf_rsc_0_3_i_we_d_core_sct_iff;
  wire lineBuf_rsc_0_3_i_re_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  demosaic_core_lineBuf_rsc_0_3_i_1_lineBuf_rsc_0_3_wait_ctrl demosaic_core_lineBuf_rsc_0_3_i_1_lineBuf_rsc_0_3_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .lineBuf_rsc_0_3_i_oswt(lineBuf_rsc_0_3_i_oswt),
      .lineBuf_rsc_0_3_i_biwt(lineBuf_rsc_0_3_i_biwt),
      .lineBuf_rsc_0_3_i_bdwt(lineBuf_rsc_0_3_i_bdwt),
      .lineBuf_rsc_0_3_i_we_d_core_sct_pff(lineBuf_rsc_0_3_i_we_d_core_sct_iff),
      .lineBuf_rsc_0_3_i_iswt0_1_pff(lineBuf_rsc_0_3_i_iswt0_1_pff),
      .lineBuf_rsc_0_3_i_re_d_core_sct_pff(lineBuf_rsc_0_3_i_re_d_core_sct_iff),
      .lineBuf_rsc_0_3_i_oswt_pff(lineBuf_rsc_0_3_i_oswt_pff)
    );
  demosaic_core_lineBuf_rsc_0_3_i_1_lineBuf_rsc_0_3_wait_dp demosaic_core_lineBuf_rsc_0_3_i_1_lineBuf_rsc_0_3_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .lineBuf_rsc_0_3_i_q_d(lineBuf_rsc_0_3_i_q_d),
      .lineBuf_rsc_0_3_i_q_d_mxwt(lineBuf_rsc_0_3_i_q_d_mxwt),
      .lineBuf_rsc_0_3_i_biwt(lineBuf_rsc_0_3_i_biwt),
      .lineBuf_rsc_0_3_i_bdwt(lineBuf_rsc_0_3_i_bdwt)
    );
  assign lineBuf_rsc_0_3_i_we_d_pff = lineBuf_rsc_0_3_i_we_d_core_sct_iff;
  assign lineBuf_rsc_0_3_i_re_d_pff = lineBuf_rsc_0_3_i_re_d_core_sct_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    demosaic_core_lineBuf_rsc_0_2_i_1
// ------------------------------------------------------------------


module demosaic_core_lineBuf_rsc_0_2_i_1 (
  clk, arst_n, lineBuf_rsc_0_2_i_q_d, core_wen, core_wten, lineBuf_rsc_0_2_i_oswt,
      lineBuf_rsc_0_2_i_q_d_mxwt, lineBuf_rsc_0_2_i_we_d_pff, lineBuf_rsc_0_2_i_iswt0_1_pff,
      lineBuf_rsc_0_2_i_re_d_pff, lineBuf_rsc_0_2_i_oswt_pff
);
  input clk;
  input arst_n;
  input [11:0] lineBuf_rsc_0_2_i_q_d;
  input core_wen;
  input core_wten;
  input lineBuf_rsc_0_2_i_oswt;
  output [11:0] lineBuf_rsc_0_2_i_q_d_mxwt;
  output lineBuf_rsc_0_2_i_we_d_pff;
  input lineBuf_rsc_0_2_i_iswt0_1_pff;
  output lineBuf_rsc_0_2_i_re_d_pff;
  input lineBuf_rsc_0_2_i_oswt_pff;


  // Interconnect Declarations
  wire lineBuf_rsc_0_2_i_biwt;
  wire lineBuf_rsc_0_2_i_bdwt;
  wire lineBuf_rsc_0_2_i_we_d_core_sct_iff;
  wire lineBuf_rsc_0_2_i_re_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  demosaic_core_lineBuf_rsc_0_2_i_1_lineBuf_rsc_0_2_wait_ctrl demosaic_core_lineBuf_rsc_0_2_i_1_lineBuf_rsc_0_2_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .lineBuf_rsc_0_2_i_oswt(lineBuf_rsc_0_2_i_oswt),
      .lineBuf_rsc_0_2_i_biwt(lineBuf_rsc_0_2_i_biwt),
      .lineBuf_rsc_0_2_i_bdwt(lineBuf_rsc_0_2_i_bdwt),
      .lineBuf_rsc_0_2_i_we_d_core_sct_pff(lineBuf_rsc_0_2_i_we_d_core_sct_iff),
      .lineBuf_rsc_0_2_i_iswt0_1_pff(lineBuf_rsc_0_2_i_iswt0_1_pff),
      .lineBuf_rsc_0_2_i_re_d_core_sct_pff(lineBuf_rsc_0_2_i_re_d_core_sct_iff),
      .lineBuf_rsc_0_2_i_oswt_pff(lineBuf_rsc_0_2_i_oswt_pff)
    );
  demosaic_core_lineBuf_rsc_0_2_i_1_lineBuf_rsc_0_2_wait_dp demosaic_core_lineBuf_rsc_0_2_i_1_lineBuf_rsc_0_2_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .lineBuf_rsc_0_2_i_q_d(lineBuf_rsc_0_2_i_q_d),
      .lineBuf_rsc_0_2_i_q_d_mxwt(lineBuf_rsc_0_2_i_q_d_mxwt),
      .lineBuf_rsc_0_2_i_biwt(lineBuf_rsc_0_2_i_biwt),
      .lineBuf_rsc_0_2_i_bdwt(lineBuf_rsc_0_2_i_bdwt)
    );
  assign lineBuf_rsc_0_2_i_we_d_pff = lineBuf_rsc_0_2_i_we_d_core_sct_iff;
  assign lineBuf_rsc_0_2_i_re_d_pff = lineBuf_rsc_0_2_i_re_d_core_sct_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    demosaic_core_lineBuf_rsc_0_1_i_1
// ------------------------------------------------------------------


module demosaic_core_lineBuf_rsc_0_1_i_1 (
  clk, arst_n, lineBuf_rsc_0_1_i_q_d, core_wen, core_wten, lineBuf_rsc_0_1_i_oswt,
      lineBuf_rsc_0_1_i_q_d_mxwt, lineBuf_rsc_0_1_i_we_d_pff, lineBuf_rsc_0_1_i_iswt0_1_pff,
      lineBuf_rsc_0_1_i_re_d_pff, lineBuf_rsc_0_1_i_oswt_pff
);
  input clk;
  input arst_n;
  input [11:0] lineBuf_rsc_0_1_i_q_d;
  input core_wen;
  input core_wten;
  input lineBuf_rsc_0_1_i_oswt;
  output [11:0] lineBuf_rsc_0_1_i_q_d_mxwt;
  output lineBuf_rsc_0_1_i_we_d_pff;
  input lineBuf_rsc_0_1_i_iswt0_1_pff;
  output lineBuf_rsc_0_1_i_re_d_pff;
  input lineBuf_rsc_0_1_i_oswt_pff;


  // Interconnect Declarations
  wire lineBuf_rsc_0_1_i_biwt;
  wire lineBuf_rsc_0_1_i_bdwt;
  wire lineBuf_rsc_0_1_i_we_d_core_sct_iff;
  wire lineBuf_rsc_0_1_i_re_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  demosaic_core_lineBuf_rsc_0_1_i_1_lineBuf_rsc_0_1_wait_ctrl demosaic_core_lineBuf_rsc_0_1_i_1_lineBuf_rsc_0_1_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .lineBuf_rsc_0_1_i_oswt(lineBuf_rsc_0_1_i_oswt),
      .lineBuf_rsc_0_1_i_biwt(lineBuf_rsc_0_1_i_biwt),
      .lineBuf_rsc_0_1_i_bdwt(lineBuf_rsc_0_1_i_bdwt),
      .lineBuf_rsc_0_1_i_we_d_core_sct_pff(lineBuf_rsc_0_1_i_we_d_core_sct_iff),
      .lineBuf_rsc_0_1_i_iswt0_1_pff(lineBuf_rsc_0_1_i_iswt0_1_pff),
      .lineBuf_rsc_0_1_i_re_d_core_sct_pff(lineBuf_rsc_0_1_i_re_d_core_sct_iff),
      .lineBuf_rsc_0_1_i_oswt_pff(lineBuf_rsc_0_1_i_oswt_pff)
    );
  demosaic_core_lineBuf_rsc_0_1_i_1_lineBuf_rsc_0_1_wait_dp demosaic_core_lineBuf_rsc_0_1_i_1_lineBuf_rsc_0_1_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .lineBuf_rsc_0_1_i_q_d(lineBuf_rsc_0_1_i_q_d),
      .lineBuf_rsc_0_1_i_q_d_mxwt(lineBuf_rsc_0_1_i_q_d_mxwt),
      .lineBuf_rsc_0_1_i_biwt(lineBuf_rsc_0_1_i_biwt),
      .lineBuf_rsc_0_1_i_bdwt(lineBuf_rsc_0_1_i_bdwt)
    );
  assign lineBuf_rsc_0_1_i_we_d_pff = lineBuf_rsc_0_1_i_we_d_core_sct_iff;
  assign lineBuf_rsc_0_1_i_re_d_pff = lineBuf_rsc_0_1_i_re_d_core_sct_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    demosaic_core_lineBuf_rsc_0_0_i_1
// ------------------------------------------------------------------


module demosaic_core_lineBuf_rsc_0_0_i_1 (
  clk, arst_n, lineBuf_rsc_0_0_i_q_d, core_wen, core_wten, lineBuf_rsc_0_0_i_oswt,
      lineBuf_rsc_0_0_i_q_d_mxwt, lineBuf_rsc_0_0_i_we_d_pff, lineBuf_rsc_0_0_i_iswt0_1_pff,
      lineBuf_rsc_0_0_i_re_d_pff, lineBuf_rsc_0_0_i_oswt_pff
);
  input clk;
  input arst_n;
  input [11:0] lineBuf_rsc_0_0_i_q_d;
  input core_wen;
  input core_wten;
  input lineBuf_rsc_0_0_i_oswt;
  output [11:0] lineBuf_rsc_0_0_i_q_d_mxwt;
  output lineBuf_rsc_0_0_i_we_d_pff;
  input lineBuf_rsc_0_0_i_iswt0_1_pff;
  output lineBuf_rsc_0_0_i_re_d_pff;
  input lineBuf_rsc_0_0_i_oswt_pff;


  // Interconnect Declarations
  wire lineBuf_rsc_0_0_i_biwt;
  wire lineBuf_rsc_0_0_i_bdwt;
  wire lineBuf_rsc_0_0_i_we_d_core_sct_iff;
  wire lineBuf_rsc_0_0_i_re_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  demosaic_core_lineBuf_rsc_0_0_i_1_lineBuf_rsc_0_0_wait_ctrl demosaic_core_lineBuf_rsc_0_0_i_1_lineBuf_rsc_0_0_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .lineBuf_rsc_0_0_i_oswt(lineBuf_rsc_0_0_i_oswt),
      .lineBuf_rsc_0_0_i_biwt(lineBuf_rsc_0_0_i_biwt),
      .lineBuf_rsc_0_0_i_bdwt(lineBuf_rsc_0_0_i_bdwt),
      .lineBuf_rsc_0_0_i_we_d_core_sct_pff(lineBuf_rsc_0_0_i_we_d_core_sct_iff),
      .lineBuf_rsc_0_0_i_iswt0_1_pff(lineBuf_rsc_0_0_i_iswt0_1_pff),
      .lineBuf_rsc_0_0_i_re_d_core_sct_pff(lineBuf_rsc_0_0_i_re_d_core_sct_iff),
      .lineBuf_rsc_0_0_i_oswt_pff(lineBuf_rsc_0_0_i_oswt_pff)
    );
  demosaic_core_lineBuf_rsc_0_0_i_1_lineBuf_rsc_0_0_wait_dp demosaic_core_lineBuf_rsc_0_0_i_1_lineBuf_rsc_0_0_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .lineBuf_rsc_0_0_i_q_d(lineBuf_rsc_0_0_i_q_d),
      .lineBuf_rsc_0_0_i_q_d_mxwt(lineBuf_rsc_0_0_i_q_d_mxwt),
      .lineBuf_rsc_0_0_i_biwt(lineBuf_rsc_0_0_i_biwt),
      .lineBuf_rsc_0_0_i_bdwt(lineBuf_rsc_0_0_i_bdwt)
    );
  assign lineBuf_rsc_0_0_i_we_d_pff = lineBuf_rsc_0_0_i_we_d_core_sct_iff;
  assign lineBuf_rsc_0_0_i_re_d_pff = lineBuf_rsc_0_0_i_re_d_core_sct_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    demosaic_core_dst_rsci
// ------------------------------------------------------------------


module demosaic_core_dst_rsci (
  clk, arst_n, dst_rsc_dat, dst_rsc_vld, dst_rsc_rdy, core_wen, dst_rsci_oswt, dst_rsci_wen_comp,
      dst_rsci_idat
);
  input clk;
  input arst_n;
  output [35:0] dst_rsc_dat;
  output dst_rsc_vld;
  input dst_rsc_rdy;
  input core_wen;
  input dst_rsci_oswt;
  output dst_rsci_wen_comp;
  input [35:0] dst_rsci_idat;


  // Interconnect Declarations
  wire dst_rsci_irdy;
  wire dst_rsci_biwt;
  wire dst_rsci_bdwt;
  wire dst_rsci_bcwt;
  wire dst_rsci_ivld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_wait_v1 #(.rscid(32'sd180),
  .width(32'sd36)) dst_rsci (
      .irdy(dst_rsci_irdy),
      .ivld(dst_rsci_ivld_core_sct),
      .idat(dst_rsci_idat),
      .rdy(dst_rsc_rdy),
      .vld(dst_rsc_vld),
      .dat(dst_rsc_dat)
    );
  demosaic_core_dst_rsci_dst_wait_ctrl demosaic_core_dst_rsci_dst_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .dst_rsci_oswt(dst_rsci_oswt),
      .dst_rsci_irdy(dst_rsci_irdy),
      .dst_rsci_biwt(dst_rsci_biwt),
      .dst_rsci_bdwt(dst_rsci_bdwt),
      .dst_rsci_bcwt(dst_rsci_bcwt),
      .dst_rsci_ivld_core_sct(dst_rsci_ivld_core_sct)
    );
  demosaic_core_dst_rsci_dst_wait_dp demosaic_core_dst_rsci_dst_wait_dp_inst (
      .clk(clk),
      .arst_n(arst_n),
      .dst_rsci_oswt(dst_rsci_oswt),
      .dst_rsci_wen_comp(dst_rsci_wen_comp),
      .dst_rsci_biwt(dst_rsci_biwt),
      .dst_rsci_bdwt(dst_rsci_bdwt),
      .dst_rsci_bcwt(dst_rsci_bcwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    demosaic_core_src_rsci
// ------------------------------------------------------------------


module demosaic_core_src_rsci (
  clk, arst_n, src_rsc_dat, src_rsc_vld, src_rsc_rdy, core_wen, src_rsci_oswt, src_rsci_wen_comp,
      src_rsci_idat_mxwt
);
  input clk;
  input arst_n;
  input [11:0] src_rsc_dat;
  input src_rsc_vld;
  output src_rsc_rdy;
  input core_wen;
  input src_rsci_oswt;
  output src_rsci_wen_comp;
  output [11:0] src_rsci_idat_mxwt;


  // Interconnect Declarations
  wire src_rsci_biwt;
  wire src_rsci_bdwt;
  wire src_rsci_bcwt;
  wire src_rsci_irdy_core_sct;
  wire src_rsci_ivld;
  wire [11:0] src_rsci_idat;


  // Interconnect Declarations for Component Instantiations 
  ccs_in_wait_v1 #(.rscid(32'sd179),
  .width(32'sd12)) src_rsci (
      .rdy(src_rsc_rdy),
      .vld(src_rsc_vld),
      .dat(src_rsc_dat),
      .irdy(src_rsci_irdy_core_sct),
      .ivld(src_rsci_ivld),
      .idat(src_rsci_idat)
    );
  demosaic_core_src_rsci_src_wait_ctrl demosaic_core_src_rsci_src_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .src_rsci_oswt(src_rsci_oswt),
      .src_rsci_biwt(src_rsci_biwt),
      .src_rsci_bdwt(src_rsci_bdwt),
      .src_rsci_bcwt(src_rsci_bcwt),
      .src_rsci_irdy_core_sct(src_rsci_irdy_core_sct),
      .src_rsci_ivld(src_rsci_ivld)
    );
  demosaic_core_src_rsci_src_wait_dp demosaic_core_src_rsci_src_wait_dp_inst (
      .clk(clk),
      .arst_n(arst_n),
      .src_rsci_oswt(src_rsci_oswt),
      .src_rsci_wen_comp(src_rsci_wen_comp),
      .src_rsci_idat_mxwt(src_rsci_idat_mxwt),
      .src_rsci_biwt(src_rsci_biwt),
      .src_rsci_bdwt(src_rsci_bdwt),
      .src_rsci_bcwt(src_rsci_bcwt),
      .src_rsci_idat(src_rsci_idat)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    edgeenhancement_core_ee_lines_rsc_0_3_i_1
// ------------------------------------------------------------------


module edgeenhancement_core_ee_lines_rsc_0_3_i_1 (
  clk, arst_n, ee_lines_rsc_0_3_i_q_d, core_wen, core_wten, ee_lines_rsc_0_3_i_oswt,
      ee_lines_rsc_0_3_i_q_d_mxwt, ee_lines_rsc_0_3_i_we_d_pff, ee_lines_rsc_0_3_i_iswt0_1_pff,
      ee_lines_rsc_0_3_i_re_d_pff, ee_lines_rsc_0_3_i_oswt_pff
);
  input clk;
  input arst_n;
  input [35:0] ee_lines_rsc_0_3_i_q_d;
  input core_wen;
  input core_wten;
  input ee_lines_rsc_0_3_i_oswt;
  output [35:0] ee_lines_rsc_0_3_i_q_d_mxwt;
  output ee_lines_rsc_0_3_i_we_d_pff;
  input ee_lines_rsc_0_3_i_iswt0_1_pff;
  output ee_lines_rsc_0_3_i_re_d_pff;
  input ee_lines_rsc_0_3_i_oswt_pff;


  // Interconnect Declarations
  wire ee_lines_rsc_0_3_i_biwt;
  wire ee_lines_rsc_0_3_i_bdwt;
  wire ee_lines_rsc_0_3_i_we_d_core_sct_iff;
  wire ee_lines_rsc_0_3_i_re_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  edgeenhancement_core_ee_lines_rsc_0_3_i_1_ee_lines_rsc_0_3_wait_ctrl edgeenhancement_core_ee_lines_rsc_0_3_i_1_ee_lines_rsc_0_3_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .ee_lines_rsc_0_3_i_oswt(ee_lines_rsc_0_3_i_oswt),
      .ee_lines_rsc_0_3_i_biwt(ee_lines_rsc_0_3_i_biwt),
      .ee_lines_rsc_0_3_i_bdwt(ee_lines_rsc_0_3_i_bdwt),
      .ee_lines_rsc_0_3_i_we_d_core_sct_pff(ee_lines_rsc_0_3_i_we_d_core_sct_iff),
      .ee_lines_rsc_0_3_i_iswt0_1_pff(ee_lines_rsc_0_3_i_iswt0_1_pff),
      .ee_lines_rsc_0_3_i_re_d_core_sct_pff(ee_lines_rsc_0_3_i_re_d_core_sct_iff),
      .ee_lines_rsc_0_3_i_oswt_pff(ee_lines_rsc_0_3_i_oswt_pff)
    );
  edgeenhancement_core_ee_lines_rsc_0_3_i_1_ee_lines_rsc_0_3_wait_dp edgeenhancement_core_ee_lines_rsc_0_3_i_1_ee_lines_rsc_0_3_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .ee_lines_rsc_0_3_i_q_d(ee_lines_rsc_0_3_i_q_d),
      .ee_lines_rsc_0_3_i_q_d_mxwt(ee_lines_rsc_0_3_i_q_d_mxwt),
      .ee_lines_rsc_0_3_i_biwt(ee_lines_rsc_0_3_i_biwt),
      .ee_lines_rsc_0_3_i_bdwt(ee_lines_rsc_0_3_i_bdwt)
    );
  assign ee_lines_rsc_0_3_i_we_d_pff = ee_lines_rsc_0_3_i_we_d_core_sct_iff;
  assign ee_lines_rsc_0_3_i_re_d_pff = ee_lines_rsc_0_3_i_re_d_core_sct_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    edgeenhancement_core_ee_lines_rsc_0_2_i_1
// ------------------------------------------------------------------


module edgeenhancement_core_ee_lines_rsc_0_2_i_1 (
  clk, arst_n, ee_lines_rsc_0_2_i_q_d, core_wen, core_wten, ee_lines_rsc_0_2_i_oswt,
      ee_lines_rsc_0_2_i_q_d_mxwt, ee_lines_rsc_0_2_i_we_d_pff, ee_lines_rsc_0_2_i_iswt0_1_pff,
      ee_lines_rsc_0_2_i_re_d_pff, ee_lines_rsc_0_2_i_oswt_pff
);
  input clk;
  input arst_n;
  input [35:0] ee_lines_rsc_0_2_i_q_d;
  input core_wen;
  input core_wten;
  input ee_lines_rsc_0_2_i_oswt;
  output [35:0] ee_lines_rsc_0_2_i_q_d_mxwt;
  output ee_lines_rsc_0_2_i_we_d_pff;
  input ee_lines_rsc_0_2_i_iswt0_1_pff;
  output ee_lines_rsc_0_2_i_re_d_pff;
  input ee_lines_rsc_0_2_i_oswt_pff;


  // Interconnect Declarations
  wire ee_lines_rsc_0_2_i_biwt;
  wire ee_lines_rsc_0_2_i_bdwt;
  wire ee_lines_rsc_0_2_i_we_d_core_sct_iff;
  wire ee_lines_rsc_0_2_i_re_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  edgeenhancement_core_ee_lines_rsc_0_2_i_1_ee_lines_rsc_0_2_wait_ctrl edgeenhancement_core_ee_lines_rsc_0_2_i_1_ee_lines_rsc_0_2_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .ee_lines_rsc_0_2_i_oswt(ee_lines_rsc_0_2_i_oswt),
      .ee_lines_rsc_0_2_i_biwt(ee_lines_rsc_0_2_i_biwt),
      .ee_lines_rsc_0_2_i_bdwt(ee_lines_rsc_0_2_i_bdwt),
      .ee_lines_rsc_0_2_i_we_d_core_sct_pff(ee_lines_rsc_0_2_i_we_d_core_sct_iff),
      .ee_lines_rsc_0_2_i_iswt0_1_pff(ee_lines_rsc_0_2_i_iswt0_1_pff),
      .ee_lines_rsc_0_2_i_re_d_core_sct_pff(ee_lines_rsc_0_2_i_re_d_core_sct_iff),
      .ee_lines_rsc_0_2_i_oswt_pff(ee_lines_rsc_0_2_i_oswt_pff)
    );
  edgeenhancement_core_ee_lines_rsc_0_2_i_1_ee_lines_rsc_0_2_wait_dp edgeenhancement_core_ee_lines_rsc_0_2_i_1_ee_lines_rsc_0_2_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .ee_lines_rsc_0_2_i_q_d(ee_lines_rsc_0_2_i_q_d),
      .ee_lines_rsc_0_2_i_q_d_mxwt(ee_lines_rsc_0_2_i_q_d_mxwt),
      .ee_lines_rsc_0_2_i_biwt(ee_lines_rsc_0_2_i_biwt),
      .ee_lines_rsc_0_2_i_bdwt(ee_lines_rsc_0_2_i_bdwt)
    );
  assign ee_lines_rsc_0_2_i_we_d_pff = ee_lines_rsc_0_2_i_we_d_core_sct_iff;
  assign ee_lines_rsc_0_2_i_re_d_pff = ee_lines_rsc_0_2_i_re_d_core_sct_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    edgeenhancement_core_ee_lines_rsc_0_1_i_1
// ------------------------------------------------------------------


module edgeenhancement_core_ee_lines_rsc_0_1_i_1 (
  clk, arst_n, ee_lines_rsc_0_1_i_q_d, core_wen, core_wten, ee_lines_rsc_0_1_i_oswt,
      ee_lines_rsc_0_1_i_q_d_mxwt, ee_lines_rsc_0_1_i_we_d_pff, ee_lines_rsc_0_1_i_iswt0_1_pff,
      ee_lines_rsc_0_1_i_re_d_pff, ee_lines_rsc_0_1_i_oswt_pff
);
  input clk;
  input arst_n;
  input [35:0] ee_lines_rsc_0_1_i_q_d;
  input core_wen;
  input core_wten;
  input ee_lines_rsc_0_1_i_oswt;
  output [35:0] ee_lines_rsc_0_1_i_q_d_mxwt;
  output ee_lines_rsc_0_1_i_we_d_pff;
  input ee_lines_rsc_0_1_i_iswt0_1_pff;
  output ee_lines_rsc_0_1_i_re_d_pff;
  input ee_lines_rsc_0_1_i_oswt_pff;


  // Interconnect Declarations
  wire ee_lines_rsc_0_1_i_biwt;
  wire ee_lines_rsc_0_1_i_bdwt;
  wire ee_lines_rsc_0_1_i_we_d_core_sct_iff;
  wire ee_lines_rsc_0_1_i_re_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  edgeenhancement_core_ee_lines_rsc_0_1_i_1_ee_lines_rsc_0_1_wait_ctrl edgeenhancement_core_ee_lines_rsc_0_1_i_1_ee_lines_rsc_0_1_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .ee_lines_rsc_0_1_i_oswt(ee_lines_rsc_0_1_i_oswt),
      .ee_lines_rsc_0_1_i_biwt(ee_lines_rsc_0_1_i_biwt),
      .ee_lines_rsc_0_1_i_bdwt(ee_lines_rsc_0_1_i_bdwt),
      .ee_lines_rsc_0_1_i_we_d_core_sct_pff(ee_lines_rsc_0_1_i_we_d_core_sct_iff),
      .ee_lines_rsc_0_1_i_iswt0_1_pff(ee_lines_rsc_0_1_i_iswt0_1_pff),
      .ee_lines_rsc_0_1_i_re_d_core_sct_pff(ee_lines_rsc_0_1_i_re_d_core_sct_iff),
      .ee_lines_rsc_0_1_i_oswt_pff(ee_lines_rsc_0_1_i_oswt_pff)
    );
  edgeenhancement_core_ee_lines_rsc_0_1_i_1_ee_lines_rsc_0_1_wait_dp edgeenhancement_core_ee_lines_rsc_0_1_i_1_ee_lines_rsc_0_1_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .ee_lines_rsc_0_1_i_q_d(ee_lines_rsc_0_1_i_q_d),
      .ee_lines_rsc_0_1_i_q_d_mxwt(ee_lines_rsc_0_1_i_q_d_mxwt),
      .ee_lines_rsc_0_1_i_biwt(ee_lines_rsc_0_1_i_biwt),
      .ee_lines_rsc_0_1_i_bdwt(ee_lines_rsc_0_1_i_bdwt)
    );
  assign ee_lines_rsc_0_1_i_we_d_pff = ee_lines_rsc_0_1_i_we_d_core_sct_iff;
  assign ee_lines_rsc_0_1_i_re_d_pff = ee_lines_rsc_0_1_i_re_d_core_sct_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    edgeenhancement_core_ee_lines_rsc_0_0_i_1
// ------------------------------------------------------------------


module edgeenhancement_core_ee_lines_rsc_0_0_i_1 (
  clk, arst_n, ee_lines_rsc_0_0_i_q_d, core_wen, core_wten, ee_lines_rsc_0_0_i_oswt,
      ee_lines_rsc_0_0_i_q_d_mxwt, ee_lines_rsc_0_0_i_we_d_pff, ee_lines_rsc_0_0_i_iswt0_1_pff,
      ee_lines_rsc_0_0_i_re_d_pff, ee_lines_rsc_0_0_i_oswt_pff
);
  input clk;
  input arst_n;
  input [35:0] ee_lines_rsc_0_0_i_q_d;
  input core_wen;
  input core_wten;
  input ee_lines_rsc_0_0_i_oswt;
  output [35:0] ee_lines_rsc_0_0_i_q_d_mxwt;
  output ee_lines_rsc_0_0_i_we_d_pff;
  input ee_lines_rsc_0_0_i_iswt0_1_pff;
  output ee_lines_rsc_0_0_i_re_d_pff;
  input ee_lines_rsc_0_0_i_oswt_pff;


  // Interconnect Declarations
  wire ee_lines_rsc_0_0_i_biwt;
  wire ee_lines_rsc_0_0_i_bdwt;
  wire ee_lines_rsc_0_0_i_we_d_core_sct_iff;
  wire ee_lines_rsc_0_0_i_re_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  edgeenhancement_core_ee_lines_rsc_0_0_i_1_ee_lines_rsc_0_0_wait_ctrl edgeenhancement_core_ee_lines_rsc_0_0_i_1_ee_lines_rsc_0_0_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .ee_lines_rsc_0_0_i_oswt(ee_lines_rsc_0_0_i_oswt),
      .ee_lines_rsc_0_0_i_biwt(ee_lines_rsc_0_0_i_biwt),
      .ee_lines_rsc_0_0_i_bdwt(ee_lines_rsc_0_0_i_bdwt),
      .ee_lines_rsc_0_0_i_we_d_core_sct_pff(ee_lines_rsc_0_0_i_we_d_core_sct_iff),
      .ee_lines_rsc_0_0_i_iswt0_1_pff(ee_lines_rsc_0_0_i_iswt0_1_pff),
      .ee_lines_rsc_0_0_i_re_d_core_sct_pff(ee_lines_rsc_0_0_i_re_d_core_sct_iff),
      .ee_lines_rsc_0_0_i_oswt_pff(ee_lines_rsc_0_0_i_oswt_pff)
    );
  edgeenhancement_core_ee_lines_rsc_0_0_i_1_ee_lines_rsc_0_0_wait_dp edgeenhancement_core_ee_lines_rsc_0_0_i_1_ee_lines_rsc_0_0_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .ee_lines_rsc_0_0_i_q_d(ee_lines_rsc_0_0_i_q_d),
      .ee_lines_rsc_0_0_i_q_d_mxwt(ee_lines_rsc_0_0_i_q_d_mxwt),
      .ee_lines_rsc_0_0_i_biwt(ee_lines_rsc_0_0_i_biwt),
      .ee_lines_rsc_0_0_i_bdwt(ee_lines_rsc_0_0_i_bdwt)
    );
  assign ee_lines_rsc_0_0_i_we_d_pff = ee_lines_rsc_0_0_i_we_d_core_sct_iff;
  assign ee_lines_rsc_0_0_i_re_d_pff = ee_lines_rsc_0_0_i_re_d_core_sct_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    edgeenhancement_core_dst_rsci
// ------------------------------------------------------------------


module edgeenhancement_core_dst_rsci (
  clk, arst_n, dst_rsc_dat, dst_rsc_vld, dst_rsc_rdy, core_wen, dst_rsci_oswt, dst_rsci_wen_comp,
      dst_rsci_idat
);
  input clk;
  input arst_n;
  output [35:0] dst_rsc_dat;
  output dst_rsc_vld;
  input dst_rsc_rdy;
  input core_wen;
  input dst_rsci_oswt;
  output dst_rsci_wen_comp;
  input [35:0] dst_rsci_idat;


  // Interconnect Declarations
  wire dst_rsci_irdy;
  wire dst_rsci_biwt;
  wire dst_rsci_bdwt;
  wire dst_rsci_bcwt;
  wire dst_rsci_ivld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_wait_v1 #(.rscid(32'sd197),
  .width(32'sd36)) dst_rsci (
      .irdy(dst_rsci_irdy),
      .ivld(dst_rsci_ivld_core_sct),
      .idat(dst_rsci_idat),
      .rdy(dst_rsc_rdy),
      .vld(dst_rsc_vld),
      .dat(dst_rsc_dat)
    );
  edgeenhancement_core_dst_rsci_dst_wait_ctrl edgeenhancement_core_dst_rsci_dst_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .dst_rsci_oswt(dst_rsci_oswt),
      .dst_rsci_irdy(dst_rsci_irdy),
      .dst_rsci_biwt(dst_rsci_biwt),
      .dst_rsci_bdwt(dst_rsci_bdwt),
      .dst_rsci_bcwt(dst_rsci_bcwt),
      .dst_rsci_ivld_core_sct(dst_rsci_ivld_core_sct)
    );
  edgeenhancement_core_dst_rsci_dst_wait_dp edgeenhancement_core_dst_rsci_dst_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .dst_rsci_oswt(dst_rsci_oswt),
      .dst_rsci_wen_comp(dst_rsci_wen_comp),
      .dst_rsci_biwt(dst_rsci_biwt),
      .dst_rsci_bdwt(dst_rsci_bdwt),
      .dst_rsci_bcwt(dst_rsci_bcwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    edgeenhancement_core_src_rsci
// ------------------------------------------------------------------


module edgeenhancement_core_src_rsci (
  clk, arst_n, src_rsc_dat, src_rsc_vld, src_rsc_rdy, core_wen, src_rsci_oswt, src_rsci_wen_comp,
      src_rsci_idat_mxwt
);
  input clk;
  input arst_n;
  input [35:0] src_rsc_dat;
  input src_rsc_vld;
  output src_rsc_rdy;
  input core_wen;
  input src_rsci_oswt;
  output src_rsci_wen_comp;
  output [35:0] src_rsci_idat_mxwt;


  // Interconnect Declarations
  wire src_rsci_biwt;
  wire src_rsci_bdwt;
  wire src_rsci_bcwt;
  wire src_rsci_irdy_core_sct;
  wire src_rsci_ivld;
  wire [35:0] src_rsci_idat;


  // Interconnect Declarations for Component Instantiations 
  ccs_in_wait_v1 #(.rscid(32'sd196),
  .width(32'sd36)) src_rsci (
      .rdy(src_rsc_rdy),
      .vld(src_rsc_vld),
      .dat(src_rsc_dat),
      .irdy(src_rsci_irdy_core_sct),
      .ivld(src_rsci_ivld),
      .idat(src_rsci_idat)
    );
  edgeenhancement_core_src_rsci_src_wait_ctrl edgeenhancement_core_src_rsci_src_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .src_rsci_oswt(src_rsci_oswt),
      .src_rsci_biwt(src_rsci_biwt),
      .src_rsci_bdwt(src_rsci_bdwt),
      .src_rsci_bcwt(src_rsci_bcwt),
      .src_rsci_irdy_core_sct(src_rsci_irdy_core_sct),
      .src_rsci_ivld(src_rsci_ivld)
    );
  edgeenhancement_core_src_rsci_src_wait_dp edgeenhancement_core_src_rsci_src_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .src_rsci_oswt(src_rsci_oswt),
      .src_rsci_wen_comp(src_rsci_wen_comp),
      .src_rsci_idat_mxwt(src_rsci_idat_mxwt),
      .src_rsci_biwt(src_rsci_biwt),
      .src_rsci_bdwt(src_rsci_bdwt),
      .src_rsci_bcwt(src_rsci_bcwt),
      .src_rsci_idat(src_rsci_idat)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    cmc_core_dst_rsci
// ------------------------------------------------------------------


module cmc_core_dst_rsci (
  clk, arst_n, dst_rsc_dat, dst_rsc_vld, dst_rsc_rdy, core_wen, dst_rsci_oswt, dst_rsci_wen_comp,
      dst_rsci_idat
);
  input clk;
  input arst_n;
  output [41:0] dst_rsc_dat;
  output dst_rsc_vld;
  input dst_rsc_rdy;
  input core_wen;
  input dst_rsci_oswt;
  output dst_rsci_wen_comp;
  input [41:0] dst_rsci_idat;


  // Interconnect Declarations
  wire dst_rsci_irdy;
  wire dst_rsci_biwt;
  wire dst_rsci_bdwt;
  wire dst_rsci_bcwt;
  wire dst_rsci_ivld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_wait_v1 #(.rscid(32'sd228),
  .width(32'sd42)) dst_rsci (
      .irdy(dst_rsci_irdy),
      .ivld(dst_rsci_ivld_core_sct),
      .idat(dst_rsci_idat),
      .rdy(dst_rsc_rdy),
      .vld(dst_rsc_vld),
      .dat(dst_rsc_dat)
    );
  cmc_core_dst_rsci_dst_wait_ctrl cmc_core_dst_rsci_dst_wait_ctrl_inst (
      .core_wen(core_wen),
      .dst_rsci_oswt(dst_rsci_oswt),
      .dst_rsci_irdy(dst_rsci_irdy),
      .dst_rsci_biwt(dst_rsci_biwt),
      .dst_rsci_bdwt(dst_rsci_bdwt),
      .dst_rsci_bcwt(dst_rsci_bcwt),
      .dst_rsci_ivld_core_sct(dst_rsci_ivld_core_sct)
    );
  cmc_core_dst_rsci_dst_wait_dp cmc_core_dst_rsci_dst_wait_dp_inst (
      .clk(clk),
      .arst_n(arst_n),
      .dst_rsci_oswt(dst_rsci_oswt),
      .dst_rsci_wen_comp(dst_rsci_wen_comp),
      .dst_rsci_biwt(dst_rsci_biwt),
      .dst_rsci_bdwt(dst_rsci_bdwt),
      .dst_rsci_bcwt(dst_rsci_bcwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    cmc_core_src_rsci
// ------------------------------------------------------------------


module cmc_core_src_rsci (
  clk, arst_n, src_rsc_dat, src_rsc_vld, src_rsc_rdy, core_wen, src_rsci_oswt, src_rsci_wen_comp,
      src_rsci_idat_mxwt
);
  input clk;
  input arst_n;
  input [35:0] src_rsc_dat;
  input src_rsc_vld;
  output src_rsc_rdy;
  input core_wen;
  input src_rsci_oswt;
  output src_rsci_wen_comp;
  output [35:0] src_rsci_idat_mxwt;


  // Interconnect Declarations
  wire src_rsci_biwt;
  wire src_rsci_bdwt;
  wire src_rsci_bcwt;
  wire src_rsci_irdy_core_sct;
  wire src_rsci_ivld;
  wire [35:0] src_rsci_idat;


  // Interconnect Declarations for Component Instantiations 
  ccs_in_wait_v1 #(.rscid(32'sd227),
  .width(32'sd36)) src_rsci (
      .rdy(src_rsc_rdy),
      .vld(src_rsc_vld),
      .dat(src_rsc_dat),
      .irdy(src_rsci_irdy_core_sct),
      .ivld(src_rsci_ivld),
      .idat(src_rsci_idat)
    );
  cmc_core_src_rsci_src_wait_ctrl cmc_core_src_rsci_src_wait_ctrl_inst (
      .core_wen(core_wen),
      .src_rsci_oswt(src_rsci_oswt),
      .src_rsci_biwt(src_rsci_biwt),
      .src_rsci_bdwt(src_rsci_bdwt),
      .src_rsci_bcwt(src_rsci_bcwt),
      .src_rsci_irdy_core_sct(src_rsci_irdy_core_sct),
      .src_rsci_ivld(src_rsci_ivld)
    );
  cmc_core_src_rsci_src_wait_dp cmc_core_src_rsci_src_wait_dp_inst (
      .clk(clk),
      .arst_n(arst_n),
      .src_rsci_oswt(src_rsci_oswt),
      .src_rsci_wen_comp(src_rsci_wen_comp),
      .src_rsci_idat_mxwt(src_rsci_idat_mxwt),
      .src_rsci_biwt(src_rsci_biwt),
      .src_rsci_bdwt(src_rsci_bdwt),
      .src_rsci_bcwt(src_rsci_bcwt),
      .src_rsci_idat(src_rsci_idat)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    gtm_core_dst_rsci
// ------------------------------------------------------------------


module gtm_core_dst_rsci (
  clk, arst_n, dst_rsc_dat, dst_rsc_vld, dst_rsc_rdy, core_wen, dst_rsci_oswt, dst_rsci_wen_comp,
      dst_rsci_idat
);
  input clk;
  input arst_n;
  output [41:0] dst_rsc_dat;
  output dst_rsc_vld;
  input dst_rsc_rdy;
  input core_wen;
  input dst_rsci_oswt;
  output dst_rsci_wen_comp;
  input [41:0] dst_rsci_idat;


  // Interconnect Declarations
  wire dst_rsci_irdy;
  wire dst_rsci_biwt;
  wire dst_rsci_bdwt;
  wire dst_rsci_bcwt;
  wire dst_rsci_ivld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_wait_v1 #(.rscid(32'sd249),
  .width(32'sd42)) dst_rsci (
      .irdy(dst_rsci_irdy),
      .ivld(dst_rsci_ivld_core_sct),
      .idat(dst_rsci_idat),
      .rdy(dst_rsc_rdy),
      .vld(dst_rsc_vld),
      .dat(dst_rsc_dat)
    );
  gtm_core_dst_rsci_dst_wait_ctrl gtm_core_dst_rsci_dst_wait_ctrl_inst (
      .core_wen(core_wen),
      .dst_rsci_oswt(dst_rsci_oswt),
      .dst_rsci_irdy(dst_rsci_irdy),
      .dst_rsci_biwt(dst_rsci_biwt),
      .dst_rsci_bdwt(dst_rsci_bdwt),
      .dst_rsci_bcwt(dst_rsci_bcwt),
      .dst_rsci_ivld_core_sct(dst_rsci_ivld_core_sct)
    );
  gtm_core_dst_rsci_dst_wait_dp gtm_core_dst_rsci_dst_wait_dp_inst (
      .clk(clk),
      .arst_n(arst_n),
      .dst_rsci_oswt(dst_rsci_oswt),
      .dst_rsci_wen_comp(dst_rsci_wen_comp),
      .dst_rsci_biwt(dst_rsci_biwt),
      .dst_rsci_bdwt(dst_rsci_bdwt),
      .dst_rsci_bcwt(dst_rsci_bcwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    gtm_core_src_rsci
// ------------------------------------------------------------------


module gtm_core_src_rsci (
  clk, arst_n, src_rsc_dat, src_rsc_vld, src_rsc_rdy, core_wen, src_rsci_oswt, src_rsci_wen_comp,
      src_rsci_idat_mxwt
);
  input clk;
  input arst_n;
  input [41:0] src_rsc_dat;
  input src_rsc_vld;
  output src_rsc_rdy;
  input core_wen;
  input src_rsci_oswt;
  output src_rsci_wen_comp;
  output [41:0] src_rsci_idat_mxwt;


  // Interconnect Declarations
  wire src_rsci_biwt;
  wire src_rsci_bdwt;
  wire src_rsci_bcwt;
  wire src_rsci_irdy_core_sct;
  wire src_rsci_ivld;
  wire [41:0] src_rsci_idat;


  // Interconnect Declarations for Component Instantiations 
  ccs_in_wait_v1 #(.rscid(32'sd248),
  .width(32'sd42)) src_rsci (
      .rdy(src_rsc_rdy),
      .vld(src_rsc_vld),
      .dat(src_rsc_dat),
      .irdy(src_rsci_irdy_core_sct),
      .ivld(src_rsci_ivld),
      .idat(src_rsci_idat)
    );
  gtm_core_src_rsci_src_wait_ctrl gtm_core_src_rsci_src_wait_ctrl_inst (
      .core_wen(core_wen),
      .src_rsci_oswt(src_rsci_oswt),
      .src_rsci_biwt(src_rsci_biwt),
      .src_rsci_bdwt(src_rsci_bdwt),
      .src_rsci_bcwt(src_rsci_bcwt),
      .src_rsci_irdy_core_sct(src_rsci_irdy_core_sct),
      .src_rsci_ivld(src_rsci_ivld)
    );
  gtm_core_src_rsci_src_wait_dp gtm_core_src_rsci_src_wait_dp_inst (
      .clk(clk),
      .arst_n(arst_n),
      .src_rsci_oswt(src_rsci_oswt),
      .src_rsci_wen_comp(src_rsci_wen_comp),
      .src_rsci_idat_mxwt(src_rsci_idat_mxwt),
      .src_rsci_biwt(src_rsci_biwt),
      .src_rsci_bdwt(src_rsci_bdwt),
      .src_rsci_bcwt(src_rsci_bcwt),
      .src_rsci_idat(src_rsci_idat)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    csc_core_dst_rsci
// ------------------------------------------------------------------


module csc_core_dst_rsci (
  clk, arst_n, dst_rsc_dat, dst_rsc_vld, dst_rsc_rdy, core_wen, dst_rsci_oswt, dst_rsci_wen_comp,
      dst_rsci_idat
);
  input clk;
  input arst_n;
  output [29:0] dst_rsc_dat;
  output dst_rsc_vld;
  input dst_rsc_rdy;
  input core_wen;
  input dst_rsci_oswt;
  output dst_rsci_wen_comp;
  input [29:0] dst_rsci_idat;


  // Interconnect Declarations
  wire dst_rsci_irdy;
  wire dst_rsci_biwt;
  wire dst_rsci_bdwt;
  wire dst_rsci_bcwt;
  wire dst_rsci_ivld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_wait_v1 #(.rscid(32'sd269),
  .width(32'sd30)) dst_rsci (
      .irdy(dst_rsci_irdy),
      .ivld(dst_rsci_ivld_core_sct),
      .idat(dst_rsci_idat),
      .rdy(dst_rsc_rdy),
      .vld(dst_rsc_vld),
      .dat(dst_rsc_dat)
    );
  csc_core_dst_rsci_dst_wait_ctrl csc_core_dst_rsci_dst_wait_ctrl_inst (
      .core_wen(core_wen),
      .dst_rsci_oswt(dst_rsci_oswt),
      .dst_rsci_irdy(dst_rsci_irdy),
      .dst_rsci_biwt(dst_rsci_biwt),
      .dst_rsci_bdwt(dst_rsci_bdwt),
      .dst_rsci_bcwt(dst_rsci_bcwt),
      .dst_rsci_ivld_core_sct(dst_rsci_ivld_core_sct)
    );
  csc_core_dst_rsci_dst_wait_dp csc_core_dst_rsci_dst_wait_dp_inst (
      .clk(clk),
      .arst_n(arst_n),
      .dst_rsci_oswt(dst_rsci_oswt),
      .dst_rsci_wen_comp(dst_rsci_wen_comp),
      .dst_rsci_biwt(dst_rsci_biwt),
      .dst_rsci_bdwt(dst_rsci_bdwt),
      .dst_rsci_bcwt(dst_rsci_bcwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    csc_core_src_rsci
// ------------------------------------------------------------------


module csc_core_src_rsci (
  clk, arst_n, src_rsc_dat, src_rsc_vld, src_rsc_rdy, core_wen, src_rsci_oswt, src_rsci_wen_comp,
      src_rsci_idat_mxwt
);
  input clk;
  input arst_n;
  input [41:0] src_rsc_dat;
  input src_rsc_vld;
  output src_rsc_rdy;
  input core_wen;
  input src_rsci_oswt;
  output src_rsci_wen_comp;
  output [35:0] src_rsci_idat_mxwt;


  // Interconnect Declarations
  wire src_rsci_biwt;
  wire src_rsci_bdwt;
  wire src_rsci_bcwt;
  wire src_rsci_irdy_core_sct;
  wire src_rsci_ivld;
  wire [41:0] src_rsci_idat;
  wire [35:0] src_rsci_idat_mxwt_pconst;


  // Interconnect Declarations for Component Instantiations 
  ccs_in_wait_v1 #(.rscid(32'sd268),
  .width(32'sd42)) src_rsci (
      .rdy(src_rsc_rdy),
      .vld(src_rsc_vld),
      .dat(src_rsc_dat),
      .irdy(src_rsci_irdy_core_sct),
      .ivld(src_rsci_ivld),
      .idat(src_rsci_idat)
    );
  csc_core_src_rsci_src_wait_ctrl csc_core_src_rsci_src_wait_ctrl_inst (
      .core_wen(core_wen),
      .src_rsci_oswt(src_rsci_oswt),
      .src_rsci_biwt(src_rsci_biwt),
      .src_rsci_bdwt(src_rsci_bdwt),
      .src_rsci_bcwt(src_rsci_bcwt),
      .src_rsci_irdy_core_sct(src_rsci_irdy_core_sct),
      .src_rsci_ivld(src_rsci_ivld)
    );
  csc_core_src_rsci_src_wait_dp csc_core_src_rsci_src_wait_dp_inst (
      .clk(clk),
      .arst_n(arst_n),
      .src_rsci_oswt(src_rsci_oswt),
      .src_rsci_wen_comp(src_rsci_wen_comp),
      .src_rsci_idat_mxwt(src_rsci_idat_mxwt_pconst),
      .src_rsci_biwt(src_rsci_biwt),
      .src_rsci_bdwt(src_rsci_bdwt),
      .src_rsci_bcwt(src_rsci_bcwt),
      .src_rsci_idat(src_rsci_idat)
    );
  assign src_rsci_idat_mxwt = src_rsci_idat_mxwt_pconst;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yfc_core_v_linebuffer_rsci_1
// ------------------------------------------------------------------


module yfc_core_v_linebuffer_rsci_1 (
  clk, arst_n, v_linebuffer_rsci_q_d, core_wen, core_wten, v_linebuffer_rsci_oswt,
      v_linebuffer_rsci_q_d_mxwt, v_linebuffer_rsci_we_d_pff, v_linebuffer_rsci_iswt0_1_pff,
      v_linebuffer_rsci_re_d_pff, v_linebuffer_rsci_oswt_pff
);
  input clk;
  input arst_n;
  input [9:0] v_linebuffer_rsci_q_d;
  input core_wen;
  input core_wten;
  input v_linebuffer_rsci_oswt;
  output [9:0] v_linebuffer_rsci_q_d_mxwt;
  output v_linebuffer_rsci_we_d_pff;
  input v_linebuffer_rsci_iswt0_1_pff;
  output v_linebuffer_rsci_re_d_pff;
  input v_linebuffer_rsci_oswt_pff;


  // Interconnect Declarations
  wire v_linebuffer_rsci_biwt;
  wire v_linebuffer_rsci_bdwt;
  wire v_linebuffer_rsci_we_d_core_sct_iff;
  wire v_linebuffer_rsci_re_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  yfc_core_v_linebuffer_rsci_1_v_linebuffer_rsc_wait_ctrl yfc_core_v_linebuffer_rsci_1_v_linebuffer_rsc_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .v_linebuffer_rsci_oswt(v_linebuffer_rsci_oswt),
      .v_linebuffer_rsci_biwt(v_linebuffer_rsci_biwt),
      .v_linebuffer_rsci_bdwt(v_linebuffer_rsci_bdwt),
      .v_linebuffer_rsci_we_d_core_sct_pff(v_linebuffer_rsci_we_d_core_sct_iff),
      .v_linebuffer_rsci_iswt0_1_pff(v_linebuffer_rsci_iswt0_1_pff),
      .v_linebuffer_rsci_re_d_core_sct_pff(v_linebuffer_rsci_re_d_core_sct_iff),
      .v_linebuffer_rsci_oswt_pff(v_linebuffer_rsci_oswt_pff)
    );
  yfc_core_v_linebuffer_rsci_1_v_linebuffer_rsc_wait_dp yfc_core_v_linebuffer_rsci_1_v_linebuffer_rsc_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .v_linebuffer_rsci_q_d(v_linebuffer_rsci_q_d),
      .v_linebuffer_rsci_q_d_mxwt(v_linebuffer_rsci_q_d_mxwt),
      .v_linebuffer_rsci_biwt(v_linebuffer_rsci_biwt),
      .v_linebuffer_rsci_bdwt(v_linebuffer_rsci_bdwt)
    );
  assign v_linebuffer_rsci_we_d_pff = v_linebuffer_rsci_we_d_core_sct_iff;
  assign v_linebuffer_rsci_re_d_pff = v_linebuffer_rsci_re_d_core_sct_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yfc_core_u_linebuffer_rsci_1
// ------------------------------------------------------------------


module yfc_core_u_linebuffer_rsci_1 (
  clk, arst_n, u_linebuffer_rsci_q_d, core_wen, core_wten, u_linebuffer_rsci_oswt,
      u_linebuffer_rsci_q_d_mxwt, u_linebuffer_rsci_we_d_pff, u_linebuffer_rsci_iswt0_1_pff,
      u_linebuffer_rsci_re_d_pff, u_linebuffer_rsci_oswt_pff
);
  input clk;
  input arst_n;
  input [9:0] u_linebuffer_rsci_q_d;
  input core_wen;
  input core_wten;
  input u_linebuffer_rsci_oswt;
  output [9:0] u_linebuffer_rsci_q_d_mxwt;
  output u_linebuffer_rsci_we_d_pff;
  input u_linebuffer_rsci_iswt0_1_pff;
  output u_linebuffer_rsci_re_d_pff;
  input u_linebuffer_rsci_oswt_pff;


  // Interconnect Declarations
  wire u_linebuffer_rsci_biwt;
  wire u_linebuffer_rsci_bdwt;
  wire u_linebuffer_rsci_we_d_core_sct_iff;
  wire u_linebuffer_rsci_re_d_core_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  yfc_core_u_linebuffer_rsci_1_u_linebuffer_rsc_wait_ctrl yfc_core_u_linebuffer_rsci_1_u_linebuffer_rsc_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .u_linebuffer_rsci_oswt(u_linebuffer_rsci_oswt),
      .u_linebuffer_rsci_biwt(u_linebuffer_rsci_biwt),
      .u_linebuffer_rsci_bdwt(u_linebuffer_rsci_bdwt),
      .u_linebuffer_rsci_we_d_core_sct_pff(u_linebuffer_rsci_we_d_core_sct_iff),
      .u_linebuffer_rsci_iswt0_1_pff(u_linebuffer_rsci_iswt0_1_pff),
      .u_linebuffer_rsci_re_d_core_sct_pff(u_linebuffer_rsci_re_d_core_sct_iff),
      .u_linebuffer_rsci_oswt_pff(u_linebuffer_rsci_oswt_pff)
    );
  yfc_core_u_linebuffer_rsci_1_u_linebuffer_rsc_wait_dp yfc_core_u_linebuffer_rsci_1_u_linebuffer_rsc_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .u_linebuffer_rsci_q_d(u_linebuffer_rsci_q_d),
      .u_linebuffer_rsci_q_d_mxwt(u_linebuffer_rsci_q_d_mxwt),
      .u_linebuffer_rsci_biwt(u_linebuffer_rsci_biwt),
      .u_linebuffer_rsci_bdwt(u_linebuffer_rsci_bdwt)
    );
  assign u_linebuffer_rsci_we_d_pff = u_linebuffer_rsci_we_d_core_sct_iff;
  assign u_linebuffer_rsci_re_d_pff = u_linebuffer_rsci_re_d_core_sct_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yfc_core_v_dst_rsci
// ------------------------------------------------------------------


module yfc_core_v_dst_rsci (
  clk, arst_n, v_dst_rsc_dat, v_dst_rsc_vld, v_dst_rsc_rdy, core_wen, v_dst_rsci_oswt,
      v_dst_rsci_wen_comp, v_dst_rsci_idat
);
  input clk;
  input arst_n;
  output [9:0] v_dst_rsc_dat;
  output v_dst_rsc_vld;
  input v_dst_rsc_rdy;
  input core_wen;
  input v_dst_rsci_oswt;
  output v_dst_rsci_wen_comp;
  input [9:0] v_dst_rsci_idat;


  // Interconnect Declarations
  wire v_dst_rsci_irdy;
  wire v_dst_rsci_biwt;
  wire v_dst_rsci_bdwt;
  wire v_dst_rsci_bcwt;
  wire v_dst_rsci_ivld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_wait_v1 #(.rscid(32'sd293),
  .width(32'sd10)) v_dst_rsci (
      .irdy(v_dst_rsci_irdy),
      .ivld(v_dst_rsci_ivld_core_sct),
      .idat(v_dst_rsci_idat),
      .rdy(v_dst_rsc_rdy),
      .vld(v_dst_rsc_vld),
      .dat(v_dst_rsc_dat)
    );
  yfc_core_v_dst_rsci_v_dst_wait_ctrl yfc_core_v_dst_rsci_v_dst_wait_ctrl_inst (
      .core_wen(core_wen),
      .v_dst_rsci_oswt(v_dst_rsci_oswt),
      .v_dst_rsci_irdy(v_dst_rsci_irdy),
      .v_dst_rsci_biwt(v_dst_rsci_biwt),
      .v_dst_rsci_bdwt(v_dst_rsci_bdwt),
      .v_dst_rsci_bcwt(v_dst_rsci_bcwt),
      .v_dst_rsci_ivld_core_sct(v_dst_rsci_ivld_core_sct)
    );
  yfc_core_v_dst_rsci_v_dst_wait_dp yfc_core_v_dst_rsci_v_dst_wait_dp_inst (
      .clk(clk),
      .arst_n(arst_n),
      .v_dst_rsci_oswt(v_dst_rsci_oswt),
      .v_dst_rsci_wen_comp(v_dst_rsci_wen_comp),
      .v_dst_rsci_biwt(v_dst_rsci_biwt),
      .v_dst_rsci_bdwt(v_dst_rsci_bdwt),
      .v_dst_rsci_bcwt(v_dst_rsci_bcwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yfc_core_u_dst_rsci
// ------------------------------------------------------------------


module yfc_core_u_dst_rsci (
  clk, arst_n, u_dst_rsc_dat, u_dst_rsc_vld, u_dst_rsc_rdy, core_wen, u_dst_rsci_oswt,
      u_dst_rsci_wen_comp, u_dst_rsci_idat
);
  input clk;
  input arst_n;
  output [9:0] u_dst_rsc_dat;
  output u_dst_rsc_vld;
  input u_dst_rsc_rdy;
  input core_wen;
  input u_dst_rsci_oswt;
  output u_dst_rsci_wen_comp;
  input [9:0] u_dst_rsci_idat;


  // Interconnect Declarations
  wire u_dst_rsci_irdy;
  wire u_dst_rsci_biwt;
  wire u_dst_rsci_bdwt;
  wire u_dst_rsci_bcwt;
  wire u_dst_rsci_ivld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_wait_v1 #(.rscid(32'sd292),
  .width(32'sd10)) u_dst_rsci (
      .irdy(u_dst_rsci_irdy),
      .ivld(u_dst_rsci_ivld_core_sct),
      .idat(u_dst_rsci_idat),
      .rdy(u_dst_rsc_rdy),
      .vld(u_dst_rsc_vld),
      .dat(u_dst_rsc_dat)
    );
  yfc_core_u_dst_rsci_u_dst_wait_ctrl yfc_core_u_dst_rsci_u_dst_wait_ctrl_inst (
      .core_wen(core_wen),
      .u_dst_rsci_oswt(u_dst_rsci_oswt),
      .u_dst_rsci_irdy(u_dst_rsci_irdy),
      .u_dst_rsci_biwt(u_dst_rsci_biwt),
      .u_dst_rsci_bdwt(u_dst_rsci_bdwt),
      .u_dst_rsci_bcwt(u_dst_rsci_bcwt),
      .u_dst_rsci_ivld_core_sct(u_dst_rsci_ivld_core_sct)
    );
  yfc_core_u_dst_rsci_u_dst_wait_dp yfc_core_u_dst_rsci_u_dst_wait_dp_inst (
      .clk(clk),
      .arst_n(arst_n),
      .u_dst_rsci_oswt(u_dst_rsci_oswt),
      .u_dst_rsci_wen_comp(u_dst_rsci_wen_comp),
      .u_dst_rsci_biwt(u_dst_rsci_biwt),
      .u_dst_rsci_bdwt(u_dst_rsci_bdwt),
      .u_dst_rsci_bcwt(u_dst_rsci_bcwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yfc_core_y_dst_rsci
// ------------------------------------------------------------------


module yfc_core_y_dst_rsci (
  clk, arst_n, y_dst_rsc_dat, y_dst_rsc_vld, y_dst_rsc_rdy, core_wen, y_dst_rsci_oswt,
      y_dst_rsci_wen_comp, y_dst_rsci_idat
);
  input clk;
  input arst_n;
  output [9:0] y_dst_rsc_dat;
  output y_dst_rsc_vld;
  input y_dst_rsc_rdy;
  input core_wen;
  input y_dst_rsci_oswt;
  output y_dst_rsci_wen_comp;
  input [9:0] y_dst_rsci_idat;


  // Interconnect Declarations
  wire y_dst_rsci_irdy;
  wire y_dst_rsci_biwt;
  wire y_dst_rsci_bdwt;
  wire y_dst_rsci_bcwt;
  wire y_dst_rsci_ivld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_wait_v1 #(.rscid(32'sd291),
  .width(32'sd10)) y_dst_rsci (
      .irdy(y_dst_rsci_irdy),
      .ivld(y_dst_rsci_ivld_core_sct),
      .idat(y_dst_rsci_idat),
      .rdy(y_dst_rsc_rdy),
      .vld(y_dst_rsc_vld),
      .dat(y_dst_rsc_dat)
    );
  yfc_core_y_dst_rsci_y_dst_wait_ctrl yfc_core_y_dst_rsci_y_dst_wait_ctrl_inst (
      .core_wen(core_wen),
      .y_dst_rsci_oswt(y_dst_rsci_oswt),
      .y_dst_rsci_irdy(y_dst_rsci_irdy),
      .y_dst_rsci_biwt(y_dst_rsci_biwt),
      .y_dst_rsci_bdwt(y_dst_rsci_bdwt),
      .y_dst_rsci_bcwt(y_dst_rsci_bcwt),
      .y_dst_rsci_ivld_core_sct(y_dst_rsci_ivld_core_sct)
    );
  yfc_core_y_dst_rsci_y_dst_wait_dp yfc_core_y_dst_rsci_y_dst_wait_dp_inst (
      .clk(clk),
      .arst_n(arst_n),
      .y_dst_rsci_oswt(y_dst_rsci_oswt),
      .y_dst_rsci_wen_comp(y_dst_rsci_wen_comp),
      .y_dst_rsci_biwt(y_dst_rsci_biwt),
      .y_dst_rsci_bdwt(y_dst_rsci_bdwt),
      .y_dst_rsci_bcwt(y_dst_rsci_bcwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yfc_core_src_rsci
// ------------------------------------------------------------------


module yfc_core_src_rsci (
  clk, arst_n, src_rsc_dat, src_rsc_vld, src_rsc_rdy, core_wen, src_rsci_oswt, src_rsci_wen_comp,
      src_rsci_idat_mxwt
);
  input clk;
  input arst_n;
  input [29:0] src_rsc_dat;
  input src_rsc_vld;
  output src_rsc_rdy;
  input core_wen;
  input src_rsci_oswt;
  output src_rsci_wen_comp;
  output [29:0] src_rsci_idat_mxwt;


  // Interconnect Declarations
  wire src_rsci_biwt;
  wire src_rsci_bdwt;
  wire src_rsci_bcwt;
  wire src_rsci_irdy_core_sct;
  wire src_rsci_ivld;
  wire [29:0] src_rsci_idat;


  // Interconnect Declarations for Component Instantiations 
  ccs_in_wait_v1 #(.rscid(32'sd290),
  .width(32'sd30)) src_rsci (
      .rdy(src_rsc_rdy),
      .vld(src_rsc_vld),
      .dat(src_rsc_dat),
      .irdy(src_rsci_irdy_core_sct),
      .ivld(src_rsci_ivld),
      .idat(src_rsci_idat)
    );
  yfc_core_src_rsci_src_wait_ctrl yfc_core_src_rsci_src_wait_ctrl_inst (
      .core_wen(core_wen),
      .src_rsci_oswt(src_rsci_oswt),
      .src_rsci_biwt(src_rsci_biwt),
      .src_rsci_bdwt(src_rsci_bdwt),
      .src_rsci_bcwt(src_rsci_bcwt),
      .src_rsci_irdy_core_sct(src_rsci_irdy_core_sct),
      .src_rsci_ivld(src_rsci_ivld)
    );
  yfc_core_src_rsci_src_wait_dp yfc_core_src_rsci_src_wait_dp_inst (
      .clk(clk),
      .arst_n(arst_n),
      .src_rsci_oswt(src_rsci_oswt),
      .src_rsci_wen_comp(src_rsci_wen_comp),
      .src_rsci_idat_mxwt(src_rsci_idat_mxwt),
      .src_rsci_biwt(src_rsci_biwt),
      .src_rsci_bdwt(src_rsci_bdwt),
      .src_rsci_bcwt(src_rsci_bcwt),
      .src_rsci_idat(src_rsci_idat)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_vlineBuf_rsc_7_0_i_1
// ------------------------------------------------------------------


module yuv444dns_core_vlineBuf_rsc_7_0_i_1 (
  clk, arst_n, vlineBuf_rsc_7_0_i_adra_d, vlineBuf_rsc_7_0_i_da_d, vlineBuf_rsc_7_0_i_ena_d,
      vlineBuf_rsc_7_0_i_wea_d, vlineBuf_rsc_7_0_i_qa_d, vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, core_wen, core_wten,
      vlineBuf_rsc_7_0_i_oswt, vlineBuf_rsc_7_0_i_adra_d_core, vlineBuf_rsc_7_0_i_da_d_core,
      vlineBuf_rsc_7_0_i_ena_d_core_psct, vlineBuf_rsc_7_0_i_wea_d_core_psct, vlineBuf_rsc_7_0_i_qa_d_mxwt,
      vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct, vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct,
      vlineBuf_rsc_7_0_i_oswt_pff
);
  input clk;
  input arst_n;
  output [11:0] vlineBuf_rsc_7_0_i_adra_d;
  output [9:0] vlineBuf_rsc_7_0_i_da_d;
  output [1:0] vlineBuf_rsc_7_0_i_ena_d;
  output [1:0] vlineBuf_rsc_7_0_i_wea_d;
  input [19:0] vlineBuf_rsc_7_0_i_qa_d;
  output [1:0] vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  input core_wen;
  input core_wten;
  input vlineBuf_rsc_7_0_i_oswt;
  input [23:0] vlineBuf_rsc_7_0_i_adra_d_core;
  input [19:0] vlineBuf_rsc_7_0_i_da_d_core;
  input [1:0] vlineBuf_rsc_7_0_i_ena_d_core_psct;
  input [1:0] vlineBuf_rsc_7_0_i_wea_d_core_psct;
  output [9:0] vlineBuf_rsc_7_0_i_qa_d_mxwt;
  input [1:0] vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  input vlineBuf_rsc_7_0_i_oswt_pff;


  // Interconnect Declarations
  wire vlineBuf_rsc_7_0_i_biwt;
  wire vlineBuf_rsc_7_0_i_bdwt;
  wire [1:0] vlineBuf_rsc_7_0_i_ena_d_core_sct;
  wire [1:0] vlineBuf_rsc_7_0_i_wea_d_core_sct;
  wire [1:0] vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire [1:0] vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  wire [9:0] vlineBuf_rsc_7_0_i_qa_d_mxwt_pconst;
  wire [11:0] vlineBuf_rsc_7_0_i_adra_d_reg;
  wire [9:0] vlineBuf_rsc_7_0_i_da_d_reg;


  // Interconnect Declarations for Component Instantiations 
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_7_0_i_1_vlineBuf_rsc_7_0_wait_ctrl_inst_vlineBuf_rsc_7_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_7_0_i_1_vlineBuf_rsc_7_0_wait_ctrl_inst_vlineBuf_rsc_7_0_i_ena_d_core_psct
      = {1'b0 , (vlineBuf_rsc_7_0_i_ena_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_7_0_i_1_vlineBuf_rsc_7_0_wait_ctrl_inst_vlineBuf_rsc_7_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_7_0_i_1_vlineBuf_rsc_7_0_wait_ctrl_inst_vlineBuf_rsc_7_0_i_wea_d_core_psct
      = {1'b0 , (vlineBuf_rsc_7_0_i_wea_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_7_0_i_1_vlineBuf_rsc_7_0_wait_ctrl_inst_vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_7_0_i_1_vlineBuf_rsc_7_0_wait_ctrl_inst_vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , (vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_7_0_i_1_vlineBuf_rsc_7_0_wait_ctrl_inst_vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_7_0_i_1_vlineBuf_rsc_7_0_wait_ctrl_inst_vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , (vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])};
  wire [23:0] nl_yuv444dns_core_vlineBuf_rsc_7_0_i_1_vlineBuf_rsc_7_0_wait_dp_inst_vlineBuf_rsc_7_0_i_adra_d_core;
  assign nl_yuv444dns_core_vlineBuf_rsc_7_0_i_1_vlineBuf_rsc_7_0_wait_dp_inst_vlineBuf_rsc_7_0_i_adra_d_core
      = {12'b000000000000 , (vlineBuf_rsc_7_0_i_adra_d_core[11:0])};
  wire [19:0] nl_yuv444dns_core_vlineBuf_rsc_7_0_i_1_vlineBuf_rsc_7_0_wait_dp_inst_vlineBuf_rsc_7_0_i_da_d_core;
  assign nl_yuv444dns_core_vlineBuf_rsc_7_0_i_1_vlineBuf_rsc_7_0_wait_dp_inst_vlineBuf_rsc_7_0_i_da_d_core
      = {10'b0000000000 , (vlineBuf_rsc_7_0_i_da_d_core[9:0])};
  yuv444dns_core_vlineBuf_rsc_7_0_i_1_vlineBuf_rsc_7_0_wait_ctrl yuv444dns_core_vlineBuf_rsc_7_0_i_1_vlineBuf_rsc_7_0_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .vlineBuf_rsc_7_0_i_oswt(vlineBuf_rsc_7_0_i_oswt),
      .vlineBuf_rsc_7_0_i_ena_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_7_0_i_1_vlineBuf_rsc_7_0_wait_ctrl_inst_vlineBuf_rsc_7_0_i_ena_d_core_psct[1:0]),
      .vlineBuf_rsc_7_0_i_wea_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_7_0_i_1_vlineBuf_rsc_7_0_wait_ctrl_inst_vlineBuf_rsc_7_0_i_wea_d_core_psct[1:0]),
      .vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_7_0_i_1_vlineBuf_rsc_7_0_wait_ctrl_inst_vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_7_0_i_1_vlineBuf_rsc_7_0_wait_ctrl_inst_vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .vlineBuf_rsc_7_0_i_biwt(vlineBuf_rsc_7_0_i_biwt),
      .vlineBuf_rsc_7_0_i_bdwt(vlineBuf_rsc_7_0_i_bdwt),
      .vlineBuf_rsc_7_0_i_ena_d_core_sct(vlineBuf_rsc_7_0_i_ena_d_core_sct),
      .vlineBuf_rsc_7_0_i_wea_d_core_sct(vlineBuf_rsc_7_0_i_wea_d_core_sct),
      .vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct(vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct(vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct),
      .vlineBuf_rsc_7_0_i_oswt_pff(vlineBuf_rsc_7_0_i_oswt_pff)
    );
  yuv444dns_core_vlineBuf_rsc_7_0_i_1_vlineBuf_rsc_7_0_wait_dp yuv444dns_core_vlineBuf_rsc_7_0_i_1_vlineBuf_rsc_7_0_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .vlineBuf_rsc_7_0_i_adra_d(vlineBuf_rsc_7_0_i_adra_d_reg),
      .vlineBuf_rsc_7_0_i_da_d(vlineBuf_rsc_7_0_i_da_d_reg),
      .vlineBuf_rsc_7_0_i_qa_d(vlineBuf_rsc_7_0_i_qa_d),
      .vlineBuf_rsc_7_0_i_adra_d_core(nl_yuv444dns_core_vlineBuf_rsc_7_0_i_1_vlineBuf_rsc_7_0_wait_dp_inst_vlineBuf_rsc_7_0_i_adra_d_core[23:0]),
      .vlineBuf_rsc_7_0_i_da_d_core(nl_yuv444dns_core_vlineBuf_rsc_7_0_i_1_vlineBuf_rsc_7_0_wait_dp_inst_vlineBuf_rsc_7_0_i_da_d_core[19:0]),
      .vlineBuf_rsc_7_0_i_qa_d_mxwt(vlineBuf_rsc_7_0_i_qa_d_mxwt_pconst),
      .vlineBuf_rsc_7_0_i_biwt(vlineBuf_rsc_7_0_i_biwt),
      .vlineBuf_rsc_7_0_i_bdwt(vlineBuf_rsc_7_0_i_bdwt)
    );
  assign vlineBuf_rsc_7_0_i_qa_d_mxwt = vlineBuf_rsc_7_0_i_qa_d_mxwt_pconst;
  assign vlineBuf_rsc_7_0_i_ena_d = vlineBuf_rsc_7_0_i_ena_d_core_sct;
  assign vlineBuf_rsc_7_0_i_wea_d = vlineBuf_rsc_7_0_i_wea_d_core_sct;
  assign vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  assign vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  assign vlineBuf_rsc_7_0_i_adra_d = vlineBuf_rsc_7_0_i_adra_d_reg;
  assign vlineBuf_rsc_7_0_i_da_d = vlineBuf_rsc_7_0_i_da_d_reg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_vlineBuf_rsc_6_0_i_1
// ------------------------------------------------------------------


module yuv444dns_core_vlineBuf_rsc_6_0_i_1 (
  clk, arst_n, vlineBuf_rsc_6_0_i_adra_d, vlineBuf_rsc_6_0_i_da_d, vlineBuf_rsc_6_0_i_ena_d,
      vlineBuf_rsc_6_0_i_wea_d, vlineBuf_rsc_6_0_i_qa_d, vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, core_wen, core_wten,
      vlineBuf_rsc_6_0_i_oswt, vlineBuf_rsc_6_0_i_adra_d_core, vlineBuf_rsc_6_0_i_da_d_core,
      vlineBuf_rsc_6_0_i_ena_d_core_psct, vlineBuf_rsc_6_0_i_wea_d_core_psct, vlineBuf_rsc_6_0_i_qa_d_mxwt,
      vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct, vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct,
      vlineBuf_rsc_6_0_i_oswt_pff
);
  input clk;
  input arst_n;
  output [11:0] vlineBuf_rsc_6_0_i_adra_d;
  output [9:0] vlineBuf_rsc_6_0_i_da_d;
  output [1:0] vlineBuf_rsc_6_0_i_ena_d;
  output [1:0] vlineBuf_rsc_6_0_i_wea_d;
  input [19:0] vlineBuf_rsc_6_0_i_qa_d;
  output [1:0] vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  input core_wen;
  input core_wten;
  input vlineBuf_rsc_6_0_i_oswt;
  input [23:0] vlineBuf_rsc_6_0_i_adra_d_core;
  input [19:0] vlineBuf_rsc_6_0_i_da_d_core;
  input [1:0] vlineBuf_rsc_6_0_i_ena_d_core_psct;
  input [1:0] vlineBuf_rsc_6_0_i_wea_d_core_psct;
  output [9:0] vlineBuf_rsc_6_0_i_qa_d_mxwt;
  input [1:0] vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  input vlineBuf_rsc_6_0_i_oswt_pff;


  // Interconnect Declarations
  wire vlineBuf_rsc_6_0_i_biwt;
  wire vlineBuf_rsc_6_0_i_bdwt;
  wire [1:0] vlineBuf_rsc_6_0_i_ena_d_core_sct;
  wire [1:0] vlineBuf_rsc_6_0_i_wea_d_core_sct;
  wire [1:0] vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire [1:0] vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  wire [9:0] vlineBuf_rsc_6_0_i_qa_d_mxwt_pconst;
  wire [11:0] vlineBuf_rsc_6_0_i_adra_d_reg;
  wire [9:0] vlineBuf_rsc_6_0_i_da_d_reg;


  // Interconnect Declarations for Component Instantiations 
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_6_0_i_1_vlineBuf_rsc_6_0_wait_ctrl_inst_vlineBuf_rsc_6_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_6_0_i_1_vlineBuf_rsc_6_0_wait_ctrl_inst_vlineBuf_rsc_6_0_i_ena_d_core_psct
      = {1'b0 , (vlineBuf_rsc_6_0_i_ena_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_6_0_i_1_vlineBuf_rsc_6_0_wait_ctrl_inst_vlineBuf_rsc_6_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_6_0_i_1_vlineBuf_rsc_6_0_wait_ctrl_inst_vlineBuf_rsc_6_0_i_wea_d_core_psct
      = {1'b0 , (vlineBuf_rsc_6_0_i_wea_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_6_0_i_1_vlineBuf_rsc_6_0_wait_ctrl_inst_vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_6_0_i_1_vlineBuf_rsc_6_0_wait_ctrl_inst_vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , (vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_6_0_i_1_vlineBuf_rsc_6_0_wait_ctrl_inst_vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_6_0_i_1_vlineBuf_rsc_6_0_wait_ctrl_inst_vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , (vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])};
  wire [23:0] nl_yuv444dns_core_vlineBuf_rsc_6_0_i_1_vlineBuf_rsc_6_0_wait_dp_inst_vlineBuf_rsc_6_0_i_adra_d_core;
  assign nl_yuv444dns_core_vlineBuf_rsc_6_0_i_1_vlineBuf_rsc_6_0_wait_dp_inst_vlineBuf_rsc_6_0_i_adra_d_core
      = {12'b000000000000 , (vlineBuf_rsc_6_0_i_adra_d_core[11:0])};
  wire [19:0] nl_yuv444dns_core_vlineBuf_rsc_6_0_i_1_vlineBuf_rsc_6_0_wait_dp_inst_vlineBuf_rsc_6_0_i_da_d_core;
  assign nl_yuv444dns_core_vlineBuf_rsc_6_0_i_1_vlineBuf_rsc_6_0_wait_dp_inst_vlineBuf_rsc_6_0_i_da_d_core
      = {10'b0000000000 , (vlineBuf_rsc_6_0_i_da_d_core[9:0])};
  yuv444dns_core_vlineBuf_rsc_6_0_i_1_vlineBuf_rsc_6_0_wait_ctrl yuv444dns_core_vlineBuf_rsc_6_0_i_1_vlineBuf_rsc_6_0_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .vlineBuf_rsc_6_0_i_oswt(vlineBuf_rsc_6_0_i_oswt),
      .vlineBuf_rsc_6_0_i_ena_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_6_0_i_1_vlineBuf_rsc_6_0_wait_ctrl_inst_vlineBuf_rsc_6_0_i_ena_d_core_psct[1:0]),
      .vlineBuf_rsc_6_0_i_wea_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_6_0_i_1_vlineBuf_rsc_6_0_wait_ctrl_inst_vlineBuf_rsc_6_0_i_wea_d_core_psct[1:0]),
      .vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_6_0_i_1_vlineBuf_rsc_6_0_wait_ctrl_inst_vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_6_0_i_1_vlineBuf_rsc_6_0_wait_ctrl_inst_vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .vlineBuf_rsc_6_0_i_biwt(vlineBuf_rsc_6_0_i_biwt),
      .vlineBuf_rsc_6_0_i_bdwt(vlineBuf_rsc_6_0_i_bdwt),
      .vlineBuf_rsc_6_0_i_ena_d_core_sct(vlineBuf_rsc_6_0_i_ena_d_core_sct),
      .vlineBuf_rsc_6_0_i_wea_d_core_sct(vlineBuf_rsc_6_0_i_wea_d_core_sct),
      .vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct(vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct(vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct),
      .vlineBuf_rsc_6_0_i_oswt_pff(vlineBuf_rsc_6_0_i_oswt_pff)
    );
  yuv444dns_core_vlineBuf_rsc_6_0_i_1_vlineBuf_rsc_6_0_wait_dp yuv444dns_core_vlineBuf_rsc_6_0_i_1_vlineBuf_rsc_6_0_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .vlineBuf_rsc_6_0_i_adra_d(vlineBuf_rsc_6_0_i_adra_d_reg),
      .vlineBuf_rsc_6_0_i_da_d(vlineBuf_rsc_6_0_i_da_d_reg),
      .vlineBuf_rsc_6_0_i_qa_d(vlineBuf_rsc_6_0_i_qa_d),
      .vlineBuf_rsc_6_0_i_adra_d_core(nl_yuv444dns_core_vlineBuf_rsc_6_0_i_1_vlineBuf_rsc_6_0_wait_dp_inst_vlineBuf_rsc_6_0_i_adra_d_core[23:0]),
      .vlineBuf_rsc_6_0_i_da_d_core(nl_yuv444dns_core_vlineBuf_rsc_6_0_i_1_vlineBuf_rsc_6_0_wait_dp_inst_vlineBuf_rsc_6_0_i_da_d_core[19:0]),
      .vlineBuf_rsc_6_0_i_qa_d_mxwt(vlineBuf_rsc_6_0_i_qa_d_mxwt_pconst),
      .vlineBuf_rsc_6_0_i_biwt(vlineBuf_rsc_6_0_i_biwt),
      .vlineBuf_rsc_6_0_i_bdwt(vlineBuf_rsc_6_0_i_bdwt)
    );
  assign vlineBuf_rsc_6_0_i_qa_d_mxwt = vlineBuf_rsc_6_0_i_qa_d_mxwt_pconst;
  assign vlineBuf_rsc_6_0_i_ena_d = vlineBuf_rsc_6_0_i_ena_d_core_sct;
  assign vlineBuf_rsc_6_0_i_wea_d = vlineBuf_rsc_6_0_i_wea_d_core_sct;
  assign vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  assign vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  assign vlineBuf_rsc_6_0_i_adra_d = vlineBuf_rsc_6_0_i_adra_d_reg;
  assign vlineBuf_rsc_6_0_i_da_d = vlineBuf_rsc_6_0_i_da_d_reg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_vlineBuf_rsc_5_0_i_1
// ------------------------------------------------------------------


module yuv444dns_core_vlineBuf_rsc_5_0_i_1 (
  clk, arst_n, vlineBuf_rsc_5_0_i_adra_d, vlineBuf_rsc_5_0_i_da_d, vlineBuf_rsc_5_0_i_ena_d,
      vlineBuf_rsc_5_0_i_wea_d, vlineBuf_rsc_5_0_i_qa_d, vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, core_wen, core_wten,
      vlineBuf_rsc_5_0_i_oswt, vlineBuf_rsc_5_0_i_adra_d_core, vlineBuf_rsc_5_0_i_da_d_core,
      vlineBuf_rsc_5_0_i_ena_d_core_psct, vlineBuf_rsc_5_0_i_wea_d_core_psct, vlineBuf_rsc_5_0_i_qa_d_mxwt,
      vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct, vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct,
      vlineBuf_rsc_5_0_i_oswt_pff
);
  input clk;
  input arst_n;
  output [11:0] vlineBuf_rsc_5_0_i_adra_d;
  output [9:0] vlineBuf_rsc_5_0_i_da_d;
  output [1:0] vlineBuf_rsc_5_0_i_ena_d;
  output [1:0] vlineBuf_rsc_5_0_i_wea_d;
  input [19:0] vlineBuf_rsc_5_0_i_qa_d;
  output [1:0] vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  input core_wen;
  input core_wten;
  input vlineBuf_rsc_5_0_i_oswt;
  input [23:0] vlineBuf_rsc_5_0_i_adra_d_core;
  input [19:0] vlineBuf_rsc_5_0_i_da_d_core;
  input [1:0] vlineBuf_rsc_5_0_i_ena_d_core_psct;
  input [1:0] vlineBuf_rsc_5_0_i_wea_d_core_psct;
  output [9:0] vlineBuf_rsc_5_0_i_qa_d_mxwt;
  input [1:0] vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  input vlineBuf_rsc_5_0_i_oswt_pff;


  // Interconnect Declarations
  wire vlineBuf_rsc_5_0_i_biwt;
  wire vlineBuf_rsc_5_0_i_bdwt;
  wire [1:0] vlineBuf_rsc_5_0_i_ena_d_core_sct;
  wire [1:0] vlineBuf_rsc_5_0_i_wea_d_core_sct;
  wire [1:0] vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire [1:0] vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  wire [9:0] vlineBuf_rsc_5_0_i_qa_d_mxwt_pconst;
  wire [11:0] vlineBuf_rsc_5_0_i_adra_d_reg;
  wire [9:0] vlineBuf_rsc_5_0_i_da_d_reg;


  // Interconnect Declarations for Component Instantiations 
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_5_0_i_1_vlineBuf_rsc_5_0_wait_ctrl_inst_vlineBuf_rsc_5_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_5_0_i_1_vlineBuf_rsc_5_0_wait_ctrl_inst_vlineBuf_rsc_5_0_i_ena_d_core_psct
      = {1'b0 , (vlineBuf_rsc_5_0_i_ena_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_5_0_i_1_vlineBuf_rsc_5_0_wait_ctrl_inst_vlineBuf_rsc_5_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_5_0_i_1_vlineBuf_rsc_5_0_wait_ctrl_inst_vlineBuf_rsc_5_0_i_wea_d_core_psct
      = {1'b0 , (vlineBuf_rsc_5_0_i_wea_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_5_0_i_1_vlineBuf_rsc_5_0_wait_ctrl_inst_vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_5_0_i_1_vlineBuf_rsc_5_0_wait_ctrl_inst_vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , (vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_5_0_i_1_vlineBuf_rsc_5_0_wait_ctrl_inst_vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_5_0_i_1_vlineBuf_rsc_5_0_wait_ctrl_inst_vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , (vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])};
  wire [23:0] nl_yuv444dns_core_vlineBuf_rsc_5_0_i_1_vlineBuf_rsc_5_0_wait_dp_inst_vlineBuf_rsc_5_0_i_adra_d_core;
  assign nl_yuv444dns_core_vlineBuf_rsc_5_0_i_1_vlineBuf_rsc_5_0_wait_dp_inst_vlineBuf_rsc_5_0_i_adra_d_core
      = {12'b000000000000 , (vlineBuf_rsc_5_0_i_adra_d_core[11:0])};
  wire [19:0] nl_yuv444dns_core_vlineBuf_rsc_5_0_i_1_vlineBuf_rsc_5_0_wait_dp_inst_vlineBuf_rsc_5_0_i_da_d_core;
  assign nl_yuv444dns_core_vlineBuf_rsc_5_0_i_1_vlineBuf_rsc_5_0_wait_dp_inst_vlineBuf_rsc_5_0_i_da_d_core
      = {10'b0000000000 , (vlineBuf_rsc_5_0_i_da_d_core[9:0])};
  yuv444dns_core_vlineBuf_rsc_5_0_i_1_vlineBuf_rsc_5_0_wait_ctrl yuv444dns_core_vlineBuf_rsc_5_0_i_1_vlineBuf_rsc_5_0_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .vlineBuf_rsc_5_0_i_oswt(vlineBuf_rsc_5_0_i_oswt),
      .vlineBuf_rsc_5_0_i_ena_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_5_0_i_1_vlineBuf_rsc_5_0_wait_ctrl_inst_vlineBuf_rsc_5_0_i_ena_d_core_psct[1:0]),
      .vlineBuf_rsc_5_0_i_wea_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_5_0_i_1_vlineBuf_rsc_5_0_wait_ctrl_inst_vlineBuf_rsc_5_0_i_wea_d_core_psct[1:0]),
      .vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_5_0_i_1_vlineBuf_rsc_5_0_wait_ctrl_inst_vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_5_0_i_1_vlineBuf_rsc_5_0_wait_ctrl_inst_vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .vlineBuf_rsc_5_0_i_biwt(vlineBuf_rsc_5_0_i_biwt),
      .vlineBuf_rsc_5_0_i_bdwt(vlineBuf_rsc_5_0_i_bdwt),
      .vlineBuf_rsc_5_0_i_ena_d_core_sct(vlineBuf_rsc_5_0_i_ena_d_core_sct),
      .vlineBuf_rsc_5_0_i_wea_d_core_sct(vlineBuf_rsc_5_0_i_wea_d_core_sct),
      .vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct(vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct(vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct),
      .vlineBuf_rsc_5_0_i_oswt_pff(vlineBuf_rsc_5_0_i_oswt_pff)
    );
  yuv444dns_core_vlineBuf_rsc_5_0_i_1_vlineBuf_rsc_5_0_wait_dp yuv444dns_core_vlineBuf_rsc_5_0_i_1_vlineBuf_rsc_5_0_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .vlineBuf_rsc_5_0_i_adra_d(vlineBuf_rsc_5_0_i_adra_d_reg),
      .vlineBuf_rsc_5_0_i_da_d(vlineBuf_rsc_5_0_i_da_d_reg),
      .vlineBuf_rsc_5_0_i_qa_d(vlineBuf_rsc_5_0_i_qa_d),
      .vlineBuf_rsc_5_0_i_adra_d_core(nl_yuv444dns_core_vlineBuf_rsc_5_0_i_1_vlineBuf_rsc_5_0_wait_dp_inst_vlineBuf_rsc_5_0_i_adra_d_core[23:0]),
      .vlineBuf_rsc_5_0_i_da_d_core(nl_yuv444dns_core_vlineBuf_rsc_5_0_i_1_vlineBuf_rsc_5_0_wait_dp_inst_vlineBuf_rsc_5_0_i_da_d_core[19:0]),
      .vlineBuf_rsc_5_0_i_qa_d_mxwt(vlineBuf_rsc_5_0_i_qa_d_mxwt_pconst),
      .vlineBuf_rsc_5_0_i_biwt(vlineBuf_rsc_5_0_i_biwt),
      .vlineBuf_rsc_5_0_i_bdwt(vlineBuf_rsc_5_0_i_bdwt)
    );
  assign vlineBuf_rsc_5_0_i_qa_d_mxwt = vlineBuf_rsc_5_0_i_qa_d_mxwt_pconst;
  assign vlineBuf_rsc_5_0_i_ena_d = vlineBuf_rsc_5_0_i_ena_d_core_sct;
  assign vlineBuf_rsc_5_0_i_wea_d = vlineBuf_rsc_5_0_i_wea_d_core_sct;
  assign vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  assign vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  assign vlineBuf_rsc_5_0_i_adra_d = vlineBuf_rsc_5_0_i_adra_d_reg;
  assign vlineBuf_rsc_5_0_i_da_d = vlineBuf_rsc_5_0_i_da_d_reg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_vlineBuf_rsc_4_0_i_1
// ------------------------------------------------------------------


module yuv444dns_core_vlineBuf_rsc_4_0_i_1 (
  clk, arst_n, vlineBuf_rsc_4_0_i_adra_d, vlineBuf_rsc_4_0_i_da_d, vlineBuf_rsc_4_0_i_ena_d,
      vlineBuf_rsc_4_0_i_wea_d, vlineBuf_rsc_4_0_i_qa_d, vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, core_wen, core_wten,
      vlineBuf_rsc_4_0_i_oswt, vlineBuf_rsc_4_0_i_adra_d_core, vlineBuf_rsc_4_0_i_da_d_core,
      vlineBuf_rsc_4_0_i_ena_d_core_psct, vlineBuf_rsc_4_0_i_wea_d_core_psct, vlineBuf_rsc_4_0_i_qa_d_mxwt,
      vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct, vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct,
      vlineBuf_rsc_4_0_i_oswt_pff
);
  input clk;
  input arst_n;
  output [11:0] vlineBuf_rsc_4_0_i_adra_d;
  output [9:0] vlineBuf_rsc_4_0_i_da_d;
  output [1:0] vlineBuf_rsc_4_0_i_ena_d;
  output [1:0] vlineBuf_rsc_4_0_i_wea_d;
  input [19:0] vlineBuf_rsc_4_0_i_qa_d;
  output [1:0] vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  input core_wen;
  input core_wten;
  input vlineBuf_rsc_4_0_i_oswt;
  input [23:0] vlineBuf_rsc_4_0_i_adra_d_core;
  input [19:0] vlineBuf_rsc_4_0_i_da_d_core;
  input [1:0] vlineBuf_rsc_4_0_i_ena_d_core_psct;
  input [1:0] vlineBuf_rsc_4_0_i_wea_d_core_psct;
  output [9:0] vlineBuf_rsc_4_0_i_qa_d_mxwt;
  input [1:0] vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  input vlineBuf_rsc_4_0_i_oswt_pff;


  // Interconnect Declarations
  wire vlineBuf_rsc_4_0_i_biwt;
  wire vlineBuf_rsc_4_0_i_bdwt;
  wire [1:0] vlineBuf_rsc_4_0_i_ena_d_core_sct;
  wire [1:0] vlineBuf_rsc_4_0_i_wea_d_core_sct;
  wire [1:0] vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire [1:0] vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  wire [9:0] vlineBuf_rsc_4_0_i_qa_d_mxwt_pconst;
  wire [11:0] vlineBuf_rsc_4_0_i_adra_d_reg;
  wire [9:0] vlineBuf_rsc_4_0_i_da_d_reg;


  // Interconnect Declarations for Component Instantiations 
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_4_0_i_1_vlineBuf_rsc_4_0_wait_ctrl_inst_vlineBuf_rsc_4_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_4_0_i_1_vlineBuf_rsc_4_0_wait_ctrl_inst_vlineBuf_rsc_4_0_i_ena_d_core_psct
      = {1'b0 , (vlineBuf_rsc_4_0_i_ena_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_4_0_i_1_vlineBuf_rsc_4_0_wait_ctrl_inst_vlineBuf_rsc_4_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_4_0_i_1_vlineBuf_rsc_4_0_wait_ctrl_inst_vlineBuf_rsc_4_0_i_wea_d_core_psct
      = {1'b0 , (vlineBuf_rsc_4_0_i_wea_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_4_0_i_1_vlineBuf_rsc_4_0_wait_ctrl_inst_vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_4_0_i_1_vlineBuf_rsc_4_0_wait_ctrl_inst_vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , (vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_4_0_i_1_vlineBuf_rsc_4_0_wait_ctrl_inst_vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_4_0_i_1_vlineBuf_rsc_4_0_wait_ctrl_inst_vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , (vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])};
  wire [23:0] nl_yuv444dns_core_vlineBuf_rsc_4_0_i_1_vlineBuf_rsc_4_0_wait_dp_inst_vlineBuf_rsc_4_0_i_adra_d_core;
  assign nl_yuv444dns_core_vlineBuf_rsc_4_0_i_1_vlineBuf_rsc_4_0_wait_dp_inst_vlineBuf_rsc_4_0_i_adra_d_core
      = {12'b000000000000 , (vlineBuf_rsc_4_0_i_adra_d_core[11:0])};
  wire [19:0] nl_yuv444dns_core_vlineBuf_rsc_4_0_i_1_vlineBuf_rsc_4_0_wait_dp_inst_vlineBuf_rsc_4_0_i_da_d_core;
  assign nl_yuv444dns_core_vlineBuf_rsc_4_0_i_1_vlineBuf_rsc_4_0_wait_dp_inst_vlineBuf_rsc_4_0_i_da_d_core
      = {10'b0000000000 , (vlineBuf_rsc_4_0_i_da_d_core[9:0])};
  yuv444dns_core_vlineBuf_rsc_4_0_i_1_vlineBuf_rsc_4_0_wait_ctrl yuv444dns_core_vlineBuf_rsc_4_0_i_1_vlineBuf_rsc_4_0_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .vlineBuf_rsc_4_0_i_oswt(vlineBuf_rsc_4_0_i_oswt),
      .vlineBuf_rsc_4_0_i_ena_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_4_0_i_1_vlineBuf_rsc_4_0_wait_ctrl_inst_vlineBuf_rsc_4_0_i_ena_d_core_psct[1:0]),
      .vlineBuf_rsc_4_0_i_wea_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_4_0_i_1_vlineBuf_rsc_4_0_wait_ctrl_inst_vlineBuf_rsc_4_0_i_wea_d_core_psct[1:0]),
      .vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_4_0_i_1_vlineBuf_rsc_4_0_wait_ctrl_inst_vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_4_0_i_1_vlineBuf_rsc_4_0_wait_ctrl_inst_vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .vlineBuf_rsc_4_0_i_biwt(vlineBuf_rsc_4_0_i_biwt),
      .vlineBuf_rsc_4_0_i_bdwt(vlineBuf_rsc_4_0_i_bdwt),
      .vlineBuf_rsc_4_0_i_ena_d_core_sct(vlineBuf_rsc_4_0_i_ena_d_core_sct),
      .vlineBuf_rsc_4_0_i_wea_d_core_sct(vlineBuf_rsc_4_0_i_wea_d_core_sct),
      .vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct(vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct(vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct),
      .vlineBuf_rsc_4_0_i_oswt_pff(vlineBuf_rsc_4_0_i_oswt_pff)
    );
  yuv444dns_core_vlineBuf_rsc_4_0_i_1_vlineBuf_rsc_4_0_wait_dp yuv444dns_core_vlineBuf_rsc_4_0_i_1_vlineBuf_rsc_4_0_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .vlineBuf_rsc_4_0_i_adra_d(vlineBuf_rsc_4_0_i_adra_d_reg),
      .vlineBuf_rsc_4_0_i_da_d(vlineBuf_rsc_4_0_i_da_d_reg),
      .vlineBuf_rsc_4_0_i_qa_d(vlineBuf_rsc_4_0_i_qa_d),
      .vlineBuf_rsc_4_0_i_adra_d_core(nl_yuv444dns_core_vlineBuf_rsc_4_0_i_1_vlineBuf_rsc_4_0_wait_dp_inst_vlineBuf_rsc_4_0_i_adra_d_core[23:0]),
      .vlineBuf_rsc_4_0_i_da_d_core(nl_yuv444dns_core_vlineBuf_rsc_4_0_i_1_vlineBuf_rsc_4_0_wait_dp_inst_vlineBuf_rsc_4_0_i_da_d_core[19:0]),
      .vlineBuf_rsc_4_0_i_qa_d_mxwt(vlineBuf_rsc_4_0_i_qa_d_mxwt_pconst),
      .vlineBuf_rsc_4_0_i_biwt(vlineBuf_rsc_4_0_i_biwt),
      .vlineBuf_rsc_4_0_i_bdwt(vlineBuf_rsc_4_0_i_bdwt)
    );
  assign vlineBuf_rsc_4_0_i_qa_d_mxwt = vlineBuf_rsc_4_0_i_qa_d_mxwt_pconst;
  assign vlineBuf_rsc_4_0_i_ena_d = vlineBuf_rsc_4_0_i_ena_d_core_sct;
  assign vlineBuf_rsc_4_0_i_wea_d = vlineBuf_rsc_4_0_i_wea_d_core_sct;
  assign vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  assign vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  assign vlineBuf_rsc_4_0_i_adra_d = vlineBuf_rsc_4_0_i_adra_d_reg;
  assign vlineBuf_rsc_4_0_i_da_d = vlineBuf_rsc_4_0_i_da_d_reg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_vlineBuf_rsc_3_0_i_1
// ------------------------------------------------------------------


module yuv444dns_core_vlineBuf_rsc_3_0_i_1 (
  clk, arst_n, vlineBuf_rsc_3_0_i_adra_d, vlineBuf_rsc_3_0_i_da_d, vlineBuf_rsc_3_0_i_ena_d,
      vlineBuf_rsc_3_0_i_wea_d, vlineBuf_rsc_3_0_i_qa_d, vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, core_wen, core_wten,
      vlineBuf_rsc_3_0_i_oswt, vlineBuf_rsc_3_0_i_adra_d_core, vlineBuf_rsc_3_0_i_da_d_core,
      vlineBuf_rsc_3_0_i_ena_d_core_psct, vlineBuf_rsc_3_0_i_wea_d_core_psct, vlineBuf_rsc_3_0_i_qa_d_mxwt,
      vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct, vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct,
      vlineBuf_rsc_3_0_i_oswt_pff
);
  input clk;
  input arst_n;
  output [11:0] vlineBuf_rsc_3_0_i_adra_d;
  output [9:0] vlineBuf_rsc_3_0_i_da_d;
  output [1:0] vlineBuf_rsc_3_0_i_ena_d;
  output [1:0] vlineBuf_rsc_3_0_i_wea_d;
  input [19:0] vlineBuf_rsc_3_0_i_qa_d;
  output [1:0] vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  input core_wen;
  input core_wten;
  input vlineBuf_rsc_3_0_i_oswt;
  input [23:0] vlineBuf_rsc_3_0_i_adra_d_core;
  input [19:0] vlineBuf_rsc_3_0_i_da_d_core;
  input [1:0] vlineBuf_rsc_3_0_i_ena_d_core_psct;
  input [1:0] vlineBuf_rsc_3_0_i_wea_d_core_psct;
  output [9:0] vlineBuf_rsc_3_0_i_qa_d_mxwt;
  input [1:0] vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  input vlineBuf_rsc_3_0_i_oswt_pff;


  // Interconnect Declarations
  wire vlineBuf_rsc_3_0_i_biwt;
  wire vlineBuf_rsc_3_0_i_bdwt;
  wire [1:0] vlineBuf_rsc_3_0_i_ena_d_core_sct;
  wire [1:0] vlineBuf_rsc_3_0_i_wea_d_core_sct;
  wire [1:0] vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire [1:0] vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  wire [9:0] vlineBuf_rsc_3_0_i_qa_d_mxwt_pconst;
  wire [11:0] vlineBuf_rsc_3_0_i_adra_d_reg;
  wire [9:0] vlineBuf_rsc_3_0_i_da_d_reg;


  // Interconnect Declarations for Component Instantiations 
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_3_0_i_1_vlineBuf_rsc_3_0_wait_ctrl_inst_vlineBuf_rsc_3_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_3_0_i_1_vlineBuf_rsc_3_0_wait_ctrl_inst_vlineBuf_rsc_3_0_i_ena_d_core_psct
      = {1'b0 , (vlineBuf_rsc_3_0_i_ena_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_3_0_i_1_vlineBuf_rsc_3_0_wait_ctrl_inst_vlineBuf_rsc_3_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_3_0_i_1_vlineBuf_rsc_3_0_wait_ctrl_inst_vlineBuf_rsc_3_0_i_wea_d_core_psct
      = {1'b0 , (vlineBuf_rsc_3_0_i_wea_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_3_0_i_1_vlineBuf_rsc_3_0_wait_ctrl_inst_vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_3_0_i_1_vlineBuf_rsc_3_0_wait_ctrl_inst_vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , (vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_3_0_i_1_vlineBuf_rsc_3_0_wait_ctrl_inst_vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_3_0_i_1_vlineBuf_rsc_3_0_wait_ctrl_inst_vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , (vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])};
  wire [23:0] nl_yuv444dns_core_vlineBuf_rsc_3_0_i_1_vlineBuf_rsc_3_0_wait_dp_inst_vlineBuf_rsc_3_0_i_adra_d_core;
  assign nl_yuv444dns_core_vlineBuf_rsc_3_0_i_1_vlineBuf_rsc_3_0_wait_dp_inst_vlineBuf_rsc_3_0_i_adra_d_core
      = {12'b000000000000 , (vlineBuf_rsc_3_0_i_adra_d_core[11:0])};
  wire [19:0] nl_yuv444dns_core_vlineBuf_rsc_3_0_i_1_vlineBuf_rsc_3_0_wait_dp_inst_vlineBuf_rsc_3_0_i_da_d_core;
  assign nl_yuv444dns_core_vlineBuf_rsc_3_0_i_1_vlineBuf_rsc_3_0_wait_dp_inst_vlineBuf_rsc_3_0_i_da_d_core
      = {10'b0000000000 , (vlineBuf_rsc_3_0_i_da_d_core[9:0])};
  yuv444dns_core_vlineBuf_rsc_3_0_i_1_vlineBuf_rsc_3_0_wait_ctrl yuv444dns_core_vlineBuf_rsc_3_0_i_1_vlineBuf_rsc_3_0_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .vlineBuf_rsc_3_0_i_oswt(vlineBuf_rsc_3_0_i_oswt),
      .vlineBuf_rsc_3_0_i_ena_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_3_0_i_1_vlineBuf_rsc_3_0_wait_ctrl_inst_vlineBuf_rsc_3_0_i_ena_d_core_psct[1:0]),
      .vlineBuf_rsc_3_0_i_wea_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_3_0_i_1_vlineBuf_rsc_3_0_wait_ctrl_inst_vlineBuf_rsc_3_0_i_wea_d_core_psct[1:0]),
      .vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_3_0_i_1_vlineBuf_rsc_3_0_wait_ctrl_inst_vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_3_0_i_1_vlineBuf_rsc_3_0_wait_ctrl_inst_vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .vlineBuf_rsc_3_0_i_biwt(vlineBuf_rsc_3_0_i_biwt),
      .vlineBuf_rsc_3_0_i_bdwt(vlineBuf_rsc_3_0_i_bdwt),
      .vlineBuf_rsc_3_0_i_ena_d_core_sct(vlineBuf_rsc_3_0_i_ena_d_core_sct),
      .vlineBuf_rsc_3_0_i_wea_d_core_sct(vlineBuf_rsc_3_0_i_wea_d_core_sct),
      .vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct(vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct(vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct),
      .vlineBuf_rsc_3_0_i_oswt_pff(vlineBuf_rsc_3_0_i_oswt_pff)
    );
  yuv444dns_core_vlineBuf_rsc_3_0_i_1_vlineBuf_rsc_3_0_wait_dp yuv444dns_core_vlineBuf_rsc_3_0_i_1_vlineBuf_rsc_3_0_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .vlineBuf_rsc_3_0_i_adra_d(vlineBuf_rsc_3_0_i_adra_d_reg),
      .vlineBuf_rsc_3_0_i_da_d(vlineBuf_rsc_3_0_i_da_d_reg),
      .vlineBuf_rsc_3_0_i_qa_d(vlineBuf_rsc_3_0_i_qa_d),
      .vlineBuf_rsc_3_0_i_adra_d_core(nl_yuv444dns_core_vlineBuf_rsc_3_0_i_1_vlineBuf_rsc_3_0_wait_dp_inst_vlineBuf_rsc_3_0_i_adra_d_core[23:0]),
      .vlineBuf_rsc_3_0_i_da_d_core(nl_yuv444dns_core_vlineBuf_rsc_3_0_i_1_vlineBuf_rsc_3_0_wait_dp_inst_vlineBuf_rsc_3_0_i_da_d_core[19:0]),
      .vlineBuf_rsc_3_0_i_qa_d_mxwt(vlineBuf_rsc_3_0_i_qa_d_mxwt_pconst),
      .vlineBuf_rsc_3_0_i_biwt(vlineBuf_rsc_3_0_i_biwt),
      .vlineBuf_rsc_3_0_i_bdwt(vlineBuf_rsc_3_0_i_bdwt)
    );
  assign vlineBuf_rsc_3_0_i_qa_d_mxwt = vlineBuf_rsc_3_0_i_qa_d_mxwt_pconst;
  assign vlineBuf_rsc_3_0_i_ena_d = vlineBuf_rsc_3_0_i_ena_d_core_sct;
  assign vlineBuf_rsc_3_0_i_wea_d = vlineBuf_rsc_3_0_i_wea_d_core_sct;
  assign vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  assign vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  assign vlineBuf_rsc_3_0_i_adra_d = vlineBuf_rsc_3_0_i_adra_d_reg;
  assign vlineBuf_rsc_3_0_i_da_d = vlineBuf_rsc_3_0_i_da_d_reg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_vlineBuf_rsc_2_0_i_1
// ------------------------------------------------------------------


module yuv444dns_core_vlineBuf_rsc_2_0_i_1 (
  clk, arst_n, vlineBuf_rsc_2_0_i_adra_d, vlineBuf_rsc_2_0_i_da_d, vlineBuf_rsc_2_0_i_ena_d,
      vlineBuf_rsc_2_0_i_wea_d, vlineBuf_rsc_2_0_i_qa_d, vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, core_wen, core_wten,
      vlineBuf_rsc_2_0_i_oswt, vlineBuf_rsc_2_0_i_adra_d_core, vlineBuf_rsc_2_0_i_da_d_core,
      vlineBuf_rsc_2_0_i_ena_d_core_psct, vlineBuf_rsc_2_0_i_wea_d_core_psct, vlineBuf_rsc_2_0_i_qa_d_mxwt,
      vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct, vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct,
      vlineBuf_rsc_2_0_i_oswt_pff
);
  input clk;
  input arst_n;
  output [11:0] vlineBuf_rsc_2_0_i_adra_d;
  output [9:0] vlineBuf_rsc_2_0_i_da_d;
  output [1:0] vlineBuf_rsc_2_0_i_ena_d;
  output [1:0] vlineBuf_rsc_2_0_i_wea_d;
  input [19:0] vlineBuf_rsc_2_0_i_qa_d;
  output [1:0] vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  input core_wen;
  input core_wten;
  input vlineBuf_rsc_2_0_i_oswt;
  input [23:0] vlineBuf_rsc_2_0_i_adra_d_core;
  input [19:0] vlineBuf_rsc_2_0_i_da_d_core;
  input [1:0] vlineBuf_rsc_2_0_i_ena_d_core_psct;
  input [1:0] vlineBuf_rsc_2_0_i_wea_d_core_psct;
  output [9:0] vlineBuf_rsc_2_0_i_qa_d_mxwt;
  input [1:0] vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  input vlineBuf_rsc_2_0_i_oswt_pff;


  // Interconnect Declarations
  wire vlineBuf_rsc_2_0_i_biwt;
  wire vlineBuf_rsc_2_0_i_bdwt;
  wire [1:0] vlineBuf_rsc_2_0_i_ena_d_core_sct;
  wire [1:0] vlineBuf_rsc_2_0_i_wea_d_core_sct;
  wire [1:0] vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire [1:0] vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  wire [9:0] vlineBuf_rsc_2_0_i_qa_d_mxwt_pconst;
  wire [11:0] vlineBuf_rsc_2_0_i_adra_d_reg;
  wire [9:0] vlineBuf_rsc_2_0_i_da_d_reg;


  // Interconnect Declarations for Component Instantiations 
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_2_0_i_1_vlineBuf_rsc_2_0_wait_ctrl_inst_vlineBuf_rsc_2_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_2_0_i_1_vlineBuf_rsc_2_0_wait_ctrl_inst_vlineBuf_rsc_2_0_i_ena_d_core_psct
      = {1'b0 , (vlineBuf_rsc_2_0_i_ena_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_2_0_i_1_vlineBuf_rsc_2_0_wait_ctrl_inst_vlineBuf_rsc_2_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_2_0_i_1_vlineBuf_rsc_2_0_wait_ctrl_inst_vlineBuf_rsc_2_0_i_wea_d_core_psct
      = {1'b0 , (vlineBuf_rsc_2_0_i_wea_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_2_0_i_1_vlineBuf_rsc_2_0_wait_ctrl_inst_vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_2_0_i_1_vlineBuf_rsc_2_0_wait_ctrl_inst_vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , (vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_2_0_i_1_vlineBuf_rsc_2_0_wait_ctrl_inst_vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_2_0_i_1_vlineBuf_rsc_2_0_wait_ctrl_inst_vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , (vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])};
  wire [23:0] nl_yuv444dns_core_vlineBuf_rsc_2_0_i_1_vlineBuf_rsc_2_0_wait_dp_inst_vlineBuf_rsc_2_0_i_adra_d_core;
  assign nl_yuv444dns_core_vlineBuf_rsc_2_0_i_1_vlineBuf_rsc_2_0_wait_dp_inst_vlineBuf_rsc_2_0_i_adra_d_core
      = {12'b000000000000 , (vlineBuf_rsc_2_0_i_adra_d_core[11:0])};
  wire [19:0] nl_yuv444dns_core_vlineBuf_rsc_2_0_i_1_vlineBuf_rsc_2_0_wait_dp_inst_vlineBuf_rsc_2_0_i_da_d_core;
  assign nl_yuv444dns_core_vlineBuf_rsc_2_0_i_1_vlineBuf_rsc_2_0_wait_dp_inst_vlineBuf_rsc_2_0_i_da_d_core
      = {10'b0000000000 , (vlineBuf_rsc_2_0_i_da_d_core[9:0])};
  yuv444dns_core_vlineBuf_rsc_2_0_i_1_vlineBuf_rsc_2_0_wait_ctrl yuv444dns_core_vlineBuf_rsc_2_0_i_1_vlineBuf_rsc_2_0_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .vlineBuf_rsc_2_0_i_oswt(vlineBuf_rsc_2_0_i_oswt),
      .vlineBuf_rsc_2_0_i_ena_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_2_0_i_1_vlineBuf_rsc_2_0_wait_ctrl_inst_vlineBuf_rsc_2_0_i_ena_d_core_psct[1:0]),
      .vlineBuf_rsc_2_0_i_wea_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_2_0_i_1_vlineBuf_rsc_2_0_wait_ctrl_inst_vlineBuf_rsc_2_0_i_wea_d_core_psct[1:0]),
      .vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_2_0_i_1_vlineBuf_rsc_2_0_wait_ctrl_inst_vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_2_0_i_1_vlineBuf_rsc_2_0_wait_ctrl_inst_vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .vlineBuf_rsc_2_0_i_biwt(vlineBuf_rsc_2_0_i_biwt),
      .vlineBuf_rsc_2_0_i_bdwt(vlineBuf_rsc_2_0_i_bdwt),
      .vlineBuf_rsc_2_0_i_ena_d_core_sct(vlineBuf_rsc_2_0_i_ena_d_core_sct),
      .vlineBuf_rsc_2_0_i_wea_d_core_sct(vlineBuf_rsc_2_0_i_wea_d_core_sct),
      .vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct(vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct(vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct),
      .vlineBuf_rsc_2_0_i_oswt_pff(vlineBuf_rsc_2_0_i_oswt_pff)
    );
  yuv444dns_core_vlineBuf_rsc_2_0_i_1_vlineBuf_rsc_2_0_wait_dp yuv444dns_core_vlineBuf_rsc_2_0_i_1_vlineBuf_rsc_2_0_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .vlineBuf_rsc_2_0_i_adra_d(vlineBuf_rsc_2_0_i_adra_d_reg),
      .vlineBuf_rsc_2_0_i_da_d(vlineBuf_rsc_2_0_i_da_d_reg),
      .vlineBuf_rsc_2_0_i_qa_d(vlineBuf_rsc_2_0_i_qa_d),
      .vlineBuf_rsc_2_0_i_adra_d_core(nl_yuv444dns_core_vlineBuf_rsc_2_0_i_1_vlineBuf_rsc_2_0_wait_dp_inst_vlineBuf_rsc_2_0_i_adra_d_core[23:0]),
      .vlineBuf_rsc_2_0_i_da_d_core(nl_yuv444dns_core_vlineBuf_rsc_2_0_i_1_vlineBuf_rsc_2_0_wait_dp_inst_vlineBuf_rsc_2_0_i_da_d_core[19:0]),
      .vlineBuf_rsc_2_0_i_qa_d_mxwt(vlineBuf_rsc_2_0_i_qa_d_mxwt_pconst),
      .vlineBuf_rsc_2_0_i_biwt(vlineBuf_rsc_2_0_i_biwt),
      .vlineBuf_rsc_2_0_i_bdwt(vlineBuf_rsc_2_0_i_bdwt)
    );
  assign vlineBuf_rsc_2_0_i_qa_d_mxwt = vlineBuf_rsc_2_0_i_qa_d_mxwt_pconst;
  assign vlineBuf_rsc_2_0_i_ena_d = vlineBuf_rsc_2_0_i_ena_d_core_sct;
  assign vlineBuf_rsc_2_0_i_wea_d = vlineBuf_rsc_2_0_i_wea_d_core_sct;
  assign vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  assign vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  assign vlineBuf_rsc_2_0_i_adra_d = vlineBuf_rsc_2_0_i_adra_d_reg;
  assign vlineBuf_rsc_2_0_i_da_d = vlineBuf_rsc_2_0_i_da_d_reg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_vlineBuf_rsc_1_0_i_1
// ------------------------------------------------------------------


module yuv444dns_core_vlineBuf_rsc_1_0_i_1 (
  clk, arst_n, vlineBuf_rsc_1_0_i_adra_d, vlineBuf_rsc_1_0_i_da_d, vlineBuf_rsc_1_0_i_ena_d,
      vlineBuf_rsc_1_0_i_wea_d, vlineBuf_rsc_1_0_i_qa_d, vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, core_wen, core_wten,
      vlineBuf_rsc_1_0_i_oswt, vlineBuf_rsc_1_0_i_adra_d_core, vlineBuf_rsc_1_0_i_da_d_core,
      vlineBuf_rsc_1_0_i_ena_d_core_psct, vlineBuf_rsc_1_0_i_wea_d_core_psct, vlineBuf_rsc_1_0_i_qa_d_mxwt,
      vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct, vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct,
      vlineBuf_rsc_1_0_i_oswt_pff
);
  input clk;
  input arst_n;
  output [11:0] vlineBuf_rsc_1_0_i_adra_d;
  output [9:0] vlineBuf_rsc_1_0_i_da_d;
  output [1:0] vlineBuf_rsc_1_0_i_ena_d;
  output [1:0] vlineBuf_rsc_1_0_i_wea_d;
  input [19:0] vlineBuf_rsc_1_0_i_qa_d;
  output [1:0] vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  input core_wen;
  input core_wten;
  input vlineBuf_rsc_1_0_i_oswt;
  input [23:0] vlineBuf_rsc_1_0_i_adra_d_core;
  input [19:0] vlineBuf_rsc_1_0_i_da_d_core;
  input [1:0] vlineBuf_rsc_1_0_i_ena_d_core_psct;
  input [1:0] vlineBuf_rsc_1_0_i_wea_d_core_psct;
  output [9:0] vlineBuf_rsc_1_0_i_qa_d_mxwt;
  input [1:0] vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  input vlineBuf_rsc_1_0_i_oswt_pff;


  // Interconnect Declarations
  wire vlineBuf_rsc_1_0_i_biwt;
  wire vlineBuf_rsc_1_0_i_bdwt;
  wire [1:0] vlineBuf_rsc_1_0_i_ena_d_core_sct;
  wire [1:0] vlineBuf_rsc_1_0_i_wea_d_core_sct;
  wire [1:0] vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire [1:0] vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  wire [9:0] vlineBuf_rsc_1_0_i_qa_d_mxwt_pconst;
  wire [11:0] vlineBuf_rsc_1_0_i_adra_d_reg;
  wire [9:0] vlineBuf_rsc_1_0_i_da_d_reg;


  // Interconnect Declarations for Component Instantiations 
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_1_0_i_1_vlineBuf_rsc_1_0_wait_ctrl_inst_vlineBuf_rsc_1_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_1_0_i_1_vlineBuf_rsc_1_0_wait_ctrl_inst_vlineBuf_rsc_1_0_i_ena_d_core_psct
      = {1'b0 , (vlineBuf_rsc_1_0_i_ena_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_1_0_i_1_vlineBuf_rsc_1_0_wait_ctrl_inst_vlineBuf_rsc_1_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_1_0_i_1_vlineBuf_rsc_1_0_wait_ctrl_inst_vlineBuf_rsc_1_0_i_wea_d_core_psct
      = {1'b0 , (vlineBuf_rsc_1_0_i_wea_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_1_0_i_1_vlineBuf_rsc_1_0_wait_ctrl_inst_vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_1_0_i_1_vlineBuf_rsc_1_0_wait_ctrl_inst_vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , (vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_1_0_i_1_vlineBuf_rsc_1_0_wait_ctrl_inst_vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_1_0_i_1_vlineBuf_rsc_1_0_wait_ctrl_inst_vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , (vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])};
  wire [23:0] nl_yuv444dns_core_vlineBuf_rsc_1_0_i_1_vlineBuf_rsc_1_0_wait_dp_inst_vlineBuf_rsc_1_0_i_adra_d_core;
  assign nl_yuv444dns_core_vlineBuf_rsc_1_0_i_1_vlineBuf_rsc_1_0_wait_dp_inst_vlineBuf_rsc_1_0_i_adra_d_core
      = {12'b000000000000 , (vlineBuf_rsc_1_0_i_adra_d_core[11:0])};
  wire [19:0] nl_yuv444dns_core_vlineBuf_rsc_1_0_i_1_vlineBuf_rsc_1_0_wait_dp_inst_vlineBuf_rsc_1_0_i_da_d_core;
  assign nl_yuv444dns_core_vlineBuf_rsc_1_0_i_1_vlineBuf_rsc_1_0_wait_dp_inst_vlineBuf_rsc_1_0_i_da_d_core
      = {10'b0000000000 , (vlineBuf_rsc_1_0_i_da_d_core[9:0])};
  yuv444dns_core_vlineBuf_rsc_1_0_i_1_vlineBuf_rsc_1_0_wait_ctrl yuv444dns_core_vlineBuf_rsc_1_0_i_1_vlineBuf_rsc_1_0_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .vlineBuf_rsc_1_0_i_oswt(vlineBuf_rsc_1_0_i_oswt),
      .vlineBuf_rsc_1_0_i_ena_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_1_0_i_1_vlineBuf_rsc_1_0_wait_ctrl_inst_vlineBuf_rsc_1_0_i_ena_d_core_psct[1:0]),
      .vlineBuf_rsc_1_0_i_wea_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_1_0_i_1_vlineBuf_rsc_1_0_wait_ctrl_inst_vlineBuf_rsc_1_0_i_wea_d_core_psct[1:0]),
      .vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_1_0_i_1_vlineBuf_rsc_1_0_wait_ctrl_inst_vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_1_0_i_1_vlineBuf_rsc_1_0_wait_ctrl_inst_vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .vlineBuf_rsc_1_0_i_biwt(vlineBuf_rsc_1_0_i_biwt),
      .vlineBuf_rsc_1_0_i_bdwt(vlineBuf_rsc_1_0_i_bdwt),
      .vlineBuf_rsc_1_0_i_ena_d_core_sct(vlineBuf_rsc_1_0_i_ena_d_core_sct),
      .vlineBuf_rsc_1_0_i_wea_d_core_sct(vlineBuf_rsc_1_0_i_wea_d_core_sct),
      .vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct(vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct(vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct),
      .vlineBuf_rsc_1_0_i_oswt_pff(vlineBuf_rsc_1_0_i_oswt_pff)
    );
  yuv444dns_core_vlineBuf_rsc_1_0_i_1_vlineBuf_rsc_1_0_wait_dp yuv444dns_core_vlineBuf_rsc_1_0_i_1_vlineBuf_rsc_1_0_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .vlineBuf_rsc_1_0_i_adra_d(vlineBuf_rsc_1_0_i_adra_d_reg),
      .vlineBuf_rsc_1_0_i_da_d(vlineBuf_rsc_1_0_i_da_d_reg),
      .vlineBuf_rsc_1_0_i_qa_d(vlineBuf_rsc_1_0_i_qa_d),
      .vlineBuf_rsc_1_0_i_adra_d_core(nl_yuv444dns_core_vlineBuf_rsc_1_0_i_1_vlineBuf_rsc_1_0_wait_dp_inst_vlineBuf_rsc_1_0_i_adra_d_core[23:0]),
      .vlineBuf_rsc_1_0_i_da_d_core(nl_yuv444dns_core_vlineBuf_rsc_1_0_i_1_vlineBuf_rsc_1_0_wait_dp_inst_vlineBuf_rsc_1_0_i_da_d_core[19:0]),
      .vlineBuf_rsc_1_0_i_qa_d_mxwt(vlineBuf_rsc_1_0_i_qa_d_mxwt_pconst),
      .vlineBuf_rsc_1_0_i_biwt(vlineBuf_rsc_1_0_i_biwt),
      .vlineBuf_rsc_1_0_i_bdwt(vlineBuf_rsc_1_0_i_bdwt)
    );
  assign vlineBuf_rsc_1_0_i_qa_d_mxwt = vlineBuf_rsc_1_0_i_qa_d_mxwt_pconst;
  assign vlineBuf_rsc_1_0_i_ena_d = vlineBuf_rsc_1_0_i_ena_d_core_sct;
  assign vlineBuf_rsc_1_0_i_wea_d = vlineBuf_rsc_1_0_i_wea_d_core_sct;
  assign vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  assign vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  assign vlineBuf_rsc_1_0_i_adra_d = vlineBuf_rsc_1_0_i_adra_d_reg;
  assign vlineBuf_rsc_1_0_i_da_d = vlineBuf_rsc_1_0_i_da_d_reg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_vlineBuf_rsc_0_0_i_1
// ------------------------------------------------------------------


module yuv444dns_core_vlineBuf_rsc_0_0_i_1 (
  clk, arst_n, vlineBuf_rsc_0_0_i_adra_d, vlineBuf_rsc_0_0_i_da_d, vlineBuf_rsc_0_0_i_ena_d,
      vlineBuf_rsc_0_0_i_wea_d, vlineBuf_rsc_0_0_i_qa_d, vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, core_wen, core_wten,
      vlineBuf_rsc_0_0_i_oswt, vlineBuf_rsc_0_0_i_adra_d_core, vlineBuf_rsc_0_0_i_da_d_core,
      vlineBuf_rsc_0_0_i_ena_d_core_psct, vlineBuf_rsc_0_0_i_wea_d_core_psct, vlineBuf_rsc_0_0_i_qa_d_mxwt,
      vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct, vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct,
      vlineBuf_rsc_0_0_i_oswt_pff
);
  input clk;
  input arst_n;
  output [11:0] vlineBuf_rsc_0_0_i_adra_d;
  output [9:0] vlineBuf_rsc_0_0_i_da_d;
  output [1:0] vlineBuf_rsc_0_0_i_ena_d;
  output [1:0] vlineBuf_rsc_0_0_i_wea_d;
  input [19:0] vlineBuf_rsc_0_0_i_qa_d;
  output [1:0] vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  input core_wen;
  input core_wten;
  input vlineBuf_rsc_0_0_i_oswt;
  input [23:0] vlineBuf_rsc_0_0_i_adra_d_core;
  input [19:0] vlineBuf_rsc_0_0_i_da_d_core;
  input [1:0] vlineBuf_rsc_0_0_i_ena_d_core_psct;
  input [1:0] vlineBuf_rsc_0_0_i_wea_d_core_psct;
  output [9:0] vlineBuf_rsc_0_0_i_qa_d_mxwt;
  input [1:0] vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  input vlineBuf_rsc_0_0_i_oswt_pff;


  // Interconnect Declarations
  wire vlineBuf_rsc_0_0_i_biwt;
  wire vlineBuf_rsc_0_0_i_bdwt;
  wire [1:0] vlineBuf_rsc_0_0_i_ena_d_core_sct;
  wire [1:0] vlineBuf_rsc_0_0_i_wea_d_core_sct;
  wire [1:0] vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire [1:0] vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  wire [9:0] vlineBuf_rsc_0_0_i_qa_d_mxwt_pconst;
  wire [11:0] vlineBuf_rsc_0_0_i_adra_d_reg;
  wire [9:0] vlineBuf_rsc_0_0_i_da_d_reg;


  // Interconnect Declarations for Component Instantiations 
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_0_0_i_1_vlineBuf_rsc_0_0_wait_ctrl_inst_vlineBuf_rsc_0_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_0_0_i_1_vlineBuf_rsc_0_0_wait_ctrl_inst_vlineBuf_rsc_0_0_i_ena_d_core_psct
      = {1'b0 , (vlineBuf_rsc_0_0_i_ena_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_0_0_i_1_vlineBuf_rsc_0_0_wait_ctrl_inst_vlineBuf_rsc_0_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_0_0_i_1_vlineBuf_rsc_0_0_wait_ctrl_inst_vlineBuf_rsc_0_0_i_wea_d_core_psct
      = {1'b0 , (vlineBuf_rsc_0_0_i_wea_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_0_0_i_1_vlineBuf_rsc_0_0_wait_ctrl_inst_vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_0_0_i_1_vlineBuf_rsc_0_0_wait_ctrl_inst_vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , (vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_0_0_i_1_vlineBuf_rsc_0_0_wait_ctrl_inst_vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_0_0_i_1_vlineBuf_rsc_0_0_wait_ctrl_inst_vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , (vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])};
  wire [23:0] nl_yuv444dns_core_vlineBuf_rsc_0_0_i_1_vlineBuf_rsc_0_0_wait_dp_inst_vlineBuf_rsc_0_0_i_adra_d_core;
  assign nl_yuv444dns_core_vlineBuf_rsc_0_0_i_1_vlineBuf_rsc_0_0_wait_dp_inst_vlineBuf_rsc_0_0_i_adra_d_core
      = {12'b000000000000 , (vlineBuf_rsc_0_0_i_adra_d_core[11:0])};
  wire [19:0] nl_yuv444dns_core_vlineBuf_rsc_0_0_i_1_vlineBuf_rsc_0_0_wait_dp_inst_vlineBuf_rsc_0_0_i_da_d_core;
  assign nl_yuv444dns_core_vlineBuf_rsc_0_0_i_1_vlineBuf_rsc_0_0_wait_dp_inst_vlineBuf_rsc_0_0_i_da_d_core
      = {10'b0000000000 , (vlineBuf_rsc_0_0_i_da_d_core[9:0])};
  yuv444dns_core_vlineBuf_rsc_0_0_i_1_vlineBuf_rsc_0_0_wait_ctrl yuv444dns_core_vlineBuf_rsc_0_0_i_1_vlineBuf_rsc_0_0_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .vlineBuf_rsc_0_0_i_oswt(vlineBuf_rsc_0_0_i_oswt),
      .vlineBuf_rsc_0_0_i_ena_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_0_0_i_1_vlineBuf_rsc_0_0_wait_ctrl_inst_vlineBuf_rsc_0_0_i_ena_d_core_psct[1:0]),
      .vlineBuf_rsc_0_0_i_wea_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_0_0_i_1_vlineBuf_rsc_0_0_wait_ctrl_inst_vlineBuf_rsc_0_0_i_wea_d_core_psct[1:0]),
      .vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_0_0_i_1_vlineBuf_rsc_0_0_wait_ctrl_inst_vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_0_0_i_1_vlineBuf_rsc_0_0_wait_ctrl_inst_vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .vlineBuf_rsc_0_0_i_biwt(vlineBuf_rsc_0_0_i_biwt),
      .vlineBuf_rsc_0_0_i_bdwt(vlineBuf_rsc_0_0_i_bdwt),
      .vlineBuf_rsc_0_0_i_ena_d_core_sct(vlineBuf_rsc_0_0_i_ena_d_core_sct),
      .vlineBuf_rsc_0_0_i_wea_d_core_sct(vlineBuf_rsc_0_0_i_wea_d_core_sct),
      .vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct(vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct(vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct),
      .vlineBuf_rsc_0_0_i_oswt_pff(vlineBuf_rsc_0_0_i_oswt_pff)
    );
  yuv444dns_core_vlineBuf_rsc_0_0_i_1_vlineBuf_rsc_0_0_wait_dp yuv444dns_core_vlineBuf_rsc_0_0_i_1_vlineBuf_rsc_0_0_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .vlineBuf_rsc_0_0_i_adra_d(vlineBuf_rsc_0_0_i_adra_d_reg),
      .vlineBuf_rsc_0_0_i_da_d(vlineBuf_rsc_0_0_i_da_d_reg),
      .vlineBuf_rsc_0_0_i_qa_d(vlineBuf_rsc_0_0_i_qa_d),
      .vlineBuf_rsc_0_0_i_adra_d_core(nl_yuv444dns_core_vlineBuf_rsc_0_0_i_1_vlineBuf_rsc_0_0_wait_dp_inst_vlineBuf_rsc_0_0_i_adra_d_core[23:0]),
      .vlineBuf_rsc_0_0_i_da_d_core(nl_yuv444dns_core_vlineBuf_rsc_0_0_i_1_vlineBuf_rsc_0_0_wait_dp_inst_vlineBuf_rsc_0_0_i_da_d_core[19:0]),
      .vlineBuf_rsc_0_0_i_qa_d_mxwt(vlineBuf_rsc_0_0_i_qa_d_mxwt_pconst),
      .vlineBuf_rsc_0_0_i_biwt(vlineBuf_rsc_0_0_i_biwt),
      .vlineBuf_rsc_0_0_i_bdwt(vlineBuf_rsc_0_0_i_bdwt)
    );
  assign vlineBuf_rsc_0_0_i_qa_d_mxwt = vlineBuf_rsc_0_0_i_qa_d_mxwt_pconst;
  assign vlineBuf_rsc_0_0_i_ena_d = vlineBuf_rsc_0_0_i_ena_d_core_sct;
  assign vlineBuf_rsc_0_0_i_wea_d = vlineBuf_rsc_0_0_i_wea_d_core_sct;
  assign vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  assign vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  assign vlineBuf_rsc_0_0_i_adra_d = vlineBuf_rsc_0_0_i_adra_d_reg;
  assign vlineBuf_rsc_0_0_i_da_d = vlineBuf_rsc_0_0_i_da_d_reg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ulineBuf_rsc_7_0_i_1
// ------------------------------------------------------------------


module yuv444dns_core_ulineBuf_rsc_7_0_i_1 (
  clk, arst_n, ulineBuf_rsc_7_0_i_adra_d, ulineBuf_rsc_7_0_i_da_d, ulineBuf_rsc_7_0_i_ena_d,
      ulineBuf_rsc_7_0_i_wea_d, ulineBuf_rsc_7_0_i_qa_d, ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, core_wen, core_wten,
      ulineBuf_rsc_7_0_i_oswt, ulineBuf_rsc_7_0_i_adra_d_core, ulineBuf_rsc_7_0_i_da_d_core,
      ulineBuf_rsc_7_0_i_ena_d_core_psct, ulineBuf_rsc_7_0_i_wea_d_core_psct, ulineBuf_rsc_7_0_i_qa_d_mxwt,
      ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct, ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct,
      ulineBuf_rsc_7_0_i_oswt_pff
);
  input clk;
  input arst_n;
  output [11:0] ulineBuf_rsc_7_0_i_adra_d;
  output [9:0] ulineBuf_rsc_7_0_i_da_d;
  output [1:0] ulineBuf_rsc_7_0_i_ena_d;
  output [1:0] ulineBuf_rsc_7_0_i_wea_d;
  input [19:0] ulineBuf_rsc_7_0_i_qa_d;
  output [1:0] ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  input core_wen;
  input core_wten;
  input ulineBuf_rsc_7_0_i_oswt;
  input [23:0] ulineBuf_rsc_7_0_i_adra_d_core;
  input [19:0] ulineBuf_rsc_7_0_i_da_d_core;
  input [1:0] ulineBuf_rsc_7_0_i_ena_d_core_psct;
  input [1:0] ulineBuf_rsc_7_0_i_wea_d_core_psct;
  output [9:0] ulineBuf_rsc_7_0_i_qa_d_mxwt;
  input [1:0] ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  input ulineBuf_rsc_7_0_i_oswt_pff;


  // Interconnect Declarations
  wire ulineBuf_rsc_7_0_i_biwt;
  wire ulineBuf_rsc_7_0_i_bdwt;
  wire [1:0] ulineBuf_rsc_7_0_i_ena_d_core_sct;
  wire [1:0] ulineBuf_rsc_7_0_i_wea_d_core_sct;
  wire [1:0] ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire [1:0] ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  wire [9:0] ulineBuf_rsc_7_0_i_qa_d_mxwt_pconst;
  wire [11:0] ulineBuf_rsc_7_0_i_adra_d_reg;
  wire [9:0] ulineBuf_rsc_7_0_i_da_d_reg;


  // Interconnect Declarations for Component Instantiations 
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_7_0_i_1_ulineBuf_rsc_7_0_wait_ctrl_inst_ulineBuf_rsc_7_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_7_0_i_1_ulineBuf_rsc_7_0_wait_ctrl_inst_ulineBuf_rsc_7_0_i_ena_d_core_psct
      = {1'b0 , (ulineBuf_rsc_7_0_i_ena_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_7_0_i_1_ulineBuf_rsc_7_0_wait_ctrl_inst_ulineBuf_rsc_7_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_7_0_i_1_ulineBuf_rsc_7_0_wait_ctrl_inst_ulineBuf_rsc_7_0_i_wea_d_core_psct
      = {1'b0 , (ulineBuf_rsc_7_0_i_wea_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_7_0_i_1_ulineBuf_rsc_7_0_wait_ctrl_inst_ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_7_0_i_1_ulineBuf_rsc_7_0_wait_ctrl_inst_ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , (ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_7_0_i_1_ulineBuf_rsc_7_0_wait_ctrl_inst_ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_7_0_i_1_ulineBuf_rsc_7_0_wait_ctrl_inst_ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , (ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])};
  wire [23:0] nl_yuv444dns_core_ulineBuf_rsc_7_0_i_1_ulineBuf_rsc_7_0_wait_dp_inst_ulineBuf_rsc_7_0_i_adra_d_core;
  assign nl_yuv444dns_core_ulineBuf_rsc_7_0_i_1_ulineBuf_rsc_7_0_wait_dp_inst_ulineBuf_rsc_7_0_i_adra_d_core
      = {12'b000000000000 , (ulineBuf_rsc_7_0_i_adra_d_core[11:0])};
  wire [19:0] nl_yuv444dns_core_ulineBuf_rsc_7_0_i_1_ulineBuf_rsc_7_0_wait_dp_inst_ulineBuf_rsc_7_0_i_da_d_core;
  assign nl_yuv444dns_core_ulineBuf_rsc_7_0_i_1_ulineBuf_rsc_7_0_wait_dp_inst_ulineBuf_rsc_7_0_i_da_d_core
      = {10'b0000000000 , (ulineBuf_rsc_7_0_i_da_d_core[9:0])};
  yuv444dns_core_ulineBuf_rsc_7_0_i_1_ulineBuf_rsc_7_0_wait_ctrl yuv444dns_core_ulineBuf_rsc_7_0_i_1_ulineBuf_rsc_7_0_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .ulineBuf_rsc_7_0_i_oswt(ulineBuf_rsc_7_0_i_oswt),
      .ulineBuf_rsc_7_0_i_ena_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_7_0_i_1_ulineBuf_rsc_7_0_wait_ctrl_inst_ulineBuf_rsc_7_0_i_ena_d_core_psct[1:0]),
      .ulineBuf_rsc_7_0_i_wea_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_7_0_i_1_ulineBuf_rsc_7_0_wait_ctrl_inst_ulineBuf_rsc_7_0_i_wea_d_core_psct[1:0]),
      .ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_7_0_i_1_ulineBuf_rsc_7_0_wait_ctrl_inst_ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_7_0_i_1_ulineBuf_rsc_7_0_wait_ctrl_inst_ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .ulineBuf_rsc_7_0_i_biwt(ulineBuf_rsc_7_0_i_biwt),
      .ulineBuf_rsc_7_0_i_bdwt(ulineBuf_rsc_7_0_i_bdwt),
      .ulineBuf_rsc_7_0_i_ena_d_core_sct(ulineBuf_rsc_7_0_i_ena_d_core_sct),
      .ulineBuf_rsc_7_0_i_wea_d_core_sct(ulineBuf_rsc_7_0_i_wea_d_core_sct),
      .ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct(ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct(ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct),
      .ulineBuf_rsc_7_0_i_oswt_pff(ulineBuf_rsc_7_0_i_oswt_pff)
    );
  yuv444dns_core_ulineBuf_rsc_7_0_i_1_ulineBuf_rsc_7_0_wait_dp yuv444dns_core_ulineBuf_rsc_7_0_i_1_ulineBuf_rsc_7_0_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .ulineBuf_rsc_7_0_i_adra_d(ulineBuf_rsc_7_0_i_adra_d_reg),
      .ulineBuf_rsc_7_0_i_da_d(ulineBuf_rsc_7_0_i_da_d_reg),
      .ulineBuf_rsc_7_0_i_qa_d(ulineBuf_rsc_7_0_i_qa_d),
      .ulineBuf_rsc_7_0_i_adra_d_core(nl_yuv444dns_core_ulineBuf_rsc_7_0_i_1_ulineBuf_rsc_7_0_wait_dp_inst_ulineBuf_rsc_7_0_i_adra_d_core[23:0]),
      .ulineBuf_rsc_7_0_i_da_d_core(nl_yuv444dns_core_ulineBuf_rsc_7_0_i_1_ulineBuf_rsc_7_0_wait_dp_inst_ulineBuf_rsc_7_0_i_da_d_core[19:0]),
      .ulineBuf_rsc_7_0_i_qa_d_mxwt(ulineBuf_rsc_7_0_i_qa_d_mxwt_pconst),
      .ulineBuf_rsc_7_0_i_biwt(ulineBuf_rsc_7_0_i_biwt),
      .ulineBuf_rsc_7_0_i_bdwt(ulineBuf_rsc_7_0_i_bdwt)
    );
  assign ulineBuf_rsc_7_0_i_qa_d_mxwt = ulineBuf_rsc_7_0_i_qa_d_mxwt_pconst;
  assign ulineBuf_rsc_7_0_i_ena_d = ulineBuf_rsc_7_0_i_ena_d_core_sct;
  assign ulineBuf_rsc_7_0_i_wea_d = ulineBuf_rsc_7_0_i_wea_d_core_sct;
  assign ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  assign ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  assign ulineBuf_rsc_7_0_i_adra_d = ulineBuf_rsc_7_0_i_adra_d_reg;
  assign ulineBuf_rsc_7_0_i_da_d = ulineBuf_rsc_7_0_i_da_d_reg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ulineBuf_rsc_6_0_i_1
// ------------------------------------------------------------------


module yuv444dns_core_ulineBuf_rsc_6_0_i_1 (
  clk, arst_n, ulineBuf_rsc_6_0_i_adra_d, ulineBuf_rsc_6_0_i_da_d, ulineBuf_rsc_6_0_i_ena_d,
      ulineBuf_rsc_6_0_i_wea_d, ulineBuf_rsc_6_0_i_qa_d, ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, core_wen, core_wten,
      ulineBuf_rsc_6_0_i_oswt, ulineBuf_rsc_6_0_i_adra_d_core, ulineBuf_rsc_6_0_i_da_d_core,
      ulineBuf_rsc_6_0_i_ena_d_core_psct, ulineBuf_rsc_6_0_i_wea_d_core_psct, ulineBuf_rsc_6_0_i_qa_d_mxwt,
      ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct, ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct,
      ulineBuf_rsc_6_0_i_oswt_pff
);
  input clk;
  input arst_n;
  output [11:0] ulineBuf_rsc_6_0_i_adra_d;
  output [9:0] ulineBuf_rsc_6_0_i_da_d;
  output [1:0] ulineBuf_rsc_6_0_i_ena_d;
  output [1:0] ulineBuf_rsc_6_0_i_wea_d;
  input [19:0] ulineBuf_rsc_6_0_i_qa_d;
  output [1:0] ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  input core_wen;
  input core_wten;
  input ulineBuf_rsc_6_0_i_oswt;
  input [23:0] ulineBuf_rsc_6_0_i_adra_d_core;
  input [19:0] ulineBuf_rsc_6_0_i_da_d_core;
  input [1:0] ulineBuf_rsc_6_0_i_ena_d_core_psct;
  input [1:0] ulineBuf_rsc_6_0_i_wea_d_core_psct;
  output [9:0] ulineBuf_rsc_6_0_i_qa_d_mxwt;
  input [1:0] ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  input ulineBuf_rsc_6_0_i_oswt_pff;


  // Interconnect Declarations
  wire ulineBuf_rsc_6_0_i_biwt;
  wire ulineBuf_rsc_6_0_i_bdwt;
  wire [1:0] ulineBuf_rsc_6_0_i_ena_d_core_sct;
  wire [1:0] ulineBuf_rsc_6_0_i_wea_d_core_sct;
  wire [1:0] ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire [1:0] ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  wire [9:0] ulineBuf_rsc_6_0_i_qa_d_mxwt_pconst;
  wire [11:0] ulineBuf_rsc_6_0_i_adra_d_reg;
  wire [9:0] ulineBuf_rsc_6_0_i_da_d_reg;


  // Interconnect Declarations for Component Instantiations 
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_6_0_i_1_ulineBuf_rsc_6_0_wait_ctrl_inst_ulineBuf_rsc_6_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_6_0_i_1_ulineBuf_rsc_6_0_wait_ctrl_inst_ulineBuf_rsc_6_0_i_ena_d_core_psct
      = {1'b0 , (ulineBuf_rsc_6_0_i_ena_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_6_0_i_1_ulineBuf_rsc_6_0_wait_ctrl_inst_ulineBuf_rsc_6_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_6_0_i_1_ulineBuf_rsc_6_0_wait_ctrl_inst_ulineBuf_rsc_6_0_i_wea_d_core_psct
      = {1'b0 , (ulineBuf_rsc_6_0_i_wea_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_6_0_i_1_ulineBuf_rsc_6_0_wait_ctrl_inst_ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_6_0_i_1_ulineBuf_rsc_6_0_wait_ctrl_inst_ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , (ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_6_0_i_1_ulineBuf_rsc_6_0_wait_ctrl_inst_ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_6_0_i_1_ulineBuf_rsc_6_0_wait_ctrl_inst_ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , (ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])};
  wire [23:0] nl_yuv444dns_core_ulineBuf_rsc_6_0_i_1_ulineBuf_rsc_6_0_wait_dp_inst_ulineBuf_rsc_6_0_i_adra_d_core;
  assign nl_yuv444dns_core_ulineBuf_rsc_6_0_i_1_ulineBuf_rsc_6_0_wait_dp_inst_ulineBuf_rsc_6_0_i_adra_d_core
      = {12'b000000000000 , (ulineBuf_rsc_6_0_i_adra_d_core[11:0])};
  wire [19:0] nl_yuv444dns_core_ulineBuf_rsc_6_0_i_1_ulineBuf_rsc_6_0_wait_dp_inst_ulineBuf_rsc_6_0_i_da_d_core;
  assign nl_yuv444dns_core_ulineBuf_rsc_6_0_i_1_ulineBuf_rsc_6_0_wait_dp_inst_ulineBuf_rsc_6_0_i_da_d_core
      = {10'b0000000000 , (ulineBuf_rsc_6_0_i_da_d_core[9:0])};
  yuv444dns_core_ulineBuf_rsc_6_0_i_1_ulineBuf_rsc_6_0_wait_ctrl yuv444dns_core_ulineBuf_rsc_6_0_i_1_ulineBuf_rsc_6_0_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .ulineBuf_rsc_6_0_i_oswt(ulineBuf_rsc_6_0_i_oswt),
      .ulineBuf_rsc_6_0_i_ena_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_6_0_i_1_ulineBuf_rsc_6_0_wait_ctrl_inst_ulineBuf_rsc_6_0_i_ena_d_core_psct[1:0]),
      .ulineBuf_rsc_6_0_i_wea_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_6_0_i_1_ulineBuf_rsc_6_0_wait_ctrl_inst_ulineBuf_rsc_6_0_i_wea_d_core_psct[1:0]),
      .ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_6_0_i_1_ulineBuf_rsc_6_0_wait_ctrl_inst_ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_6_0_i_1_ulineBuf_rsc_6_0_wait_ctrl_inst_ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .ulineBuf_rsc_6_0_i_biwt(ulineBuf_rsc_6_0_i_biwt),
      .ulineBuf_rsc_6_0_i_bdwt(ulineBuf_rsc_6_0_i_bdwt),
      .ulineBuf_rsc_6_0_i_ena_d_core_sct(ulineBuf_rsc_6_0_i_ena_d_core_sct),
      .ulineBuf_rsc_6_0_i_wea_d_core_sct(ulineBuf_rsc_6_0_i_wea_d_core_sct),
      .ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct(ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct(ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct),
      .ulineBuf_rsc_6_0_i_oswt_pff(ulineBuf_rsc_6_0_i_oswt_pff)
    );
  yuv444dns_core_ulineBuf_rsc_6_0_i_1_ulineBuf_rsc_6_0_wait_dp yuv444dns_core_ulineBuf_rsc_6_0_i_1_ulineBuf_rsc_6_0_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .ulineBuf_rsc_6_0_i_adra_d(ulineBuf_rsc_6_0_i_adra_d_reg),
      .ulineBuf_rsc_6_0_i_da_d(ulineBuf_rsc_6_0_i_da_d_reg),
      .ulineBuf_rsc_6_0_i_qa_d(ulineBuf_rsc_6_0_i_qa_d),
      .ulineBuf_rsc_6_0_i_adra_d_core(nl_yuv444dns_core_ulineBuf_rsc_6_0_i_1_ulineBuf_rsc_6_0_wait_dp_inst_ulineBuf_rsc_6_0_i_adra_d_core[23:0]),
      .ulineBuf_rsc_6_0_i_da_d_core(nl_yuv444dns_core_ulineBuf_rsc_6_0_i_1_ulineBuf_rsc_6_0_wait_dp_inst_ulineBuf_rsc_6_0_i_da_d_core[19:0]),
      .ulineBuf_rsc_6_0_i_qa_d_mxwt(ulineBuf_rsc_6_0_i_qa_d_mxwt_pconst),
      .ulineBuf_rsc_6_0_i_biwt(ulineBuf_rsc_6_0_i_biwt),
      .ulineBuf_rsc_6_0_i_bdwt(ulineBuf_rsc_6_0_i_bdwt)
    );
  assign ulineBuf_rsc_6_0_i_qa_d_mxwt = ulineBuf_rsc_6_0_i_qa_d_mxwt_pconst;
  assign ulineBuf_rsc_6_0_i_ena_d = ulineBuf_rsc_6_0_i_ena_d_core_sct;
  assign ulineBuf_rsc_6_0_i_wea_d = ulineBuf_rsc_6_0_i_wea_d_core_sct;
  assign ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  assign ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  assign ulineBuf_rsc_6_0_i_adra_d = ulineBuf_rsc_6_0_i_adra_d_reg;
  assign ulineBuf_rsc_6_0_i_da_d = ulineBuf_rsc_6_0_i_da_d_reg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ulineBuf_rsc_5_0_i_1
// ------------------------------------------------------------------


module yuv444dns_core_ulineBuf_rsc_5_0_i_1 (
  clk, arst_n, ulineBuf_rsc_5_0_i_adra_d, ulineBuf_rsc_5_0_i_da_d, ulineBuf_rsc_5_0_i_ena_d,
      ulineBuf_rsc_5_0_i_wea_d, ulineBuf_rsc_5_0_i_qa_d, ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, core_wen, core_wten,
      ulineBuf_rsc_5_0_i_oswt, ulineBuf_rsc_5_0_i_adra_d_core, ulineBuf_rsc_5_0_i_da_d_core,
      ulineBuf_rsc_5_0_i_ena_d_core_psct, ulineBuf_rsc_5_0_i_wea_d_core_psct, ulineBuf_rsc_5_0_i_qa_d_mxwt,
      ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct, ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct,
      ulineBuf_rsc_5_0_i_oswt_pff
);
  input clk;
  input arst_n;
  output [11:0] ulineBuf_rsc_5_0_i_adra_d;
  output [9:0] ulineBuf_rsc_5_0_i_da_d;
  output [1:0] ulineBuf_rsc_5_0_i_ena_d;
  output [1:0] ulineBuf_rsc_5_0_i_wea_d;
  input [19:0] ulineBuf_rsc_5_0_i_qa_d;
  output [1:0] ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  input core_wen;
  input core_wten;
  input ulineBuf_rsc_5_0_i_oswt;
  input [23:0] ulineBuf_rsc_5_0_i_adra_d_core;
  input [19:0] ulineBuf_rsc_5_0_i_da_d_core;
  input [1:0] ulineBuf_rsc_5_0_i_ena_d_core_psct;
  input [1:0] ulineBuf_rsc_5_0_i_wea_d_core_psct;
  output [9:0] ulineBuf_rsc_5_0_i_qa_d_mxwt;
  input [1:0] ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  input ulineBuf_rsc_5_0_i_oswt_pff;


  // Interconnect Declarations
  wire ulineBuf_rsc_5_0_i_biwt;
  wire ulineBuf_rsc_5_0_i_bdwt;
  wire [1:0] ulineBuf_rsc_5_0_i_ena_d_core_sct;
  wire [1:0] ulineBuf_rsc_5_0_i_wea_d_core_sct;
  wire [1:0] ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire [1:0] ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  wire [9:0] ulineBuf_rsc_5_0_i_qa_d_mxwt_pconst;
  wire [11:0] ulineBuf_rsc_5_0_i_adra_d_reg;
  wire [9:0] ulineBuf_rsc_5_0_i_da_d_reg;


  // Interconnect Declarations for Component Instantiations 
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_5_0_i_1_ulineBuf_rsc_5_0_wait_ctrl_inst_ulineBuf_rsc_5_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_5_0_i_1_ulineBuf_rsc_5_0_wait_ctrl_inst_ulineBuf_rsc_5_0_i_ena_d_core_psct
      = {1'b0 , (ulineBuf_rsc_5_0_i_ena_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_5_0_i_1_ulineBuf_rsc_5_0_wait_ctrl_inst_ulineBuf_rsc_5_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_5_0_i_1_ulineBuf_rsc_5_0_wait_ctrl_inst_ulineBuf_rsc_5_0_i_wea_d_core_psct
      = {1'b0 , (ulineBuf_rsc_5_0_i_wea_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_5_0_i_1_ulineBuf_rsc_5_0_wait_ctrl_inst_ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_5_0_i_1_ulineBuf_rsc_5_0_wait_ctrl_inst_ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , (ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_5_0_i_1_ulineBuf_rsc_5_0_wait_ctrl_inst_ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_5_0_i_1_ulineBuf_rsc_5_0_wait_ctrl_inst_ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , (ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])};
  wire [23:0] nl_yuv444dns_core_ulineBuf_rsc_5_0_i_1_ulineBuf_rsc_5_0_wait_dp_inst_ulineBuf_rsc_5_0_i_adra_d_core;
  assign nl_yuv444dns_core_ulineBuf_rsc_5_0_i_1_ulineBuf_rsc_5_0_wait_dp_inst_ulineBuf_rsc_5_0_i_adra_d_core
      = {12'b000000000000 , (ulineBuf_rsc_5_0_i_adra_d_core[11:0])};
  wire [19:0] nl_yuv444dns_core_ulineBuf_rsc_5_0_i_1_ulineBuf_rsc_5_0_wait_dp_inst_ulineBuf_rsc_5_0_i_da_d_core;
  assign nl_yuv444dns_core_ulineBuf_rsc_5_0_i_1_ulineBuf_rsc_5_0_wait_dp_inst_ulineBuf_rsc_5_0_i_da_d_core
      = {10'b0000000000 , (ulineBuf_rsc_5_0_i_da_d_core[9:0])};
  yuv444dns_core_ulineBuf_rsc_5_0_i_1_ulineBuf_rsc_5_0_wait_ctrl yuv444dns_core_ulineBuf_rsc_5_0_i_1_ulineBuf_rsc_5_0_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .ulineBuf_rsc_5_0_i_oswt(ulineBuf_rsc_5_0_i_oswt),
      .ulineBuf_rsc_5_0_i_ena_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_5_0_i_1_ulineBuf_rsc_5_0_wait_ctrl_inst_ulineBuf_rsc_5_0_i_ena_d_core_psct[1:0]),
      .ulineBuf_rsc_5_0_i_wea_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_5_0_i_1_ulineBuf_rsc_5_0_wait_ctrl_inst_ulineBuf_rsc_5_0_i_wea_d_core_psct[1:0]),
      .ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_5_0_i_1_ulineBuf_rsc_5_0_wait_ctrl_inst_ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_5_0_i_1_ulineBuf_rsc_5_0_wait_ctrl_inst_ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .ulineBuf_rsc_5_0_i_biwt(ulineBuf_rsc_5_0_i_biwt),
      .ulineBuf_rsc_5_0_i_bdwt(ulineBuf_rsc_5_0_i_bdwt),
      .ulineBuf_rsc_5_0_i_ena_d_core_sct(ulineBuf_rsc_5_0_i_ena_d_core_sct),
      .ulineBuf_rsc_5_0_i_wea_d_core_sct(ulineBuf_rsc_5_0_i_wea_d_core_sct),
      .ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct(ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct(ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct),
      .ulineBuf_rsc_5_0_i_oswt_pff(ulineBuf_rsc_5_0_i_oswt_pff)
    );
  yuv444dns_core_ulineBuf_rsc_5_0_i_1_ulineBuf_rsc_5_0_wait_dp yuv444dns_core_ulineBuf_rsc_5_0_i_1_ulineBuf_rsc_5_0_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .ulineBuf_rsc_5_0_i_adra_d(ulineBuf_rsc_5_0_i_adra_d_reg),
      .ulineBuf_rsc_5_0_i_da_d(ulineBuf_rsc_5_0_i_da_d_reg),
      .ulineBuf_rsc_5_0_i_qa_d(ulineBuf_rsc_5_0_i_qa_d),
      .ulineBuf_rsc_5_0_i_adra_d_core(nl_yuv444dns_core_ulineBuf_rsc_5_0_i_1_ulineBuf_rsc_5_0_wait_dp_inst_ulineBuf_rsc_5_0_i_adra_d_core[23:0]),
      .ulineBuf_rsc_5_0_i_da_d_core(nl_yuv444dns_core_ulineBuf_rsc_5_0_i_1_ulineBuf_rsc_5_0_wait_dp_inst_ulineBuf_rsc_5_0_i_da_d_core[19:0]),
      .ulineBuf_rsc_5_0_i_qa_d_mxwt(ulineBuf_rsc_5_0_i_qa_d_mxwt_pconst),
      .ulineBuf_rsc_5_0_i_biwt(ulineBuf_rsc_5_0_i_biwt),
      .ulineBuf_rsc_5_0_i_bdwt(ulineBuf_rsc_5_0_i_bdwt)
    );
  assign ulineBuf_rsc_5_0_i_qa_d_mxwt = ulineBuf_rsc_5_0_i_qa_d_mxwt_pconst;
  assign ulineBuf_rsc_5_0_i_ena_d = ulineBuf_rsc_5_0_i_ena_d_core_sct;
  assign ulineBuf_rsc_5_0_i_wea_d = ulineBuf_rsc_5_0_i_wea_d_core_sct;
  assign ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  assign ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  assign ulineBuf_rsc_5_0_i_adra_d = ulineBuf_rsc_5_0_i_adra_d_reg;
  assign ulineBuf_rsc_5_0_i_da_d = ulineBuf_rsc_5_0_i_da_d_reg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ulineBuf_rsc_4_0_i_1
// ------------------------------------------------------------------


module yuv444dns_core_ulineBuf_rsc_4_0_i_1 (
  clk, arst_n, ulineBuf_rsc_4_0_i_adra_d, ulineBuf_rsc_4_0_i_da_d, ulineBuf_rsc_4_0_i_ena_d,
      ulineBuf_rsc_4_0_i_wea_d, ulineBuf_rsc_4_0_i_qa_d, ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, core_wen, core_wten,
      ulineBuf_rsc_4_0_i_oswt, ulineBuf_rsc_4_0_i_adra_d_core, ulineBuf_rsc_4_0_i_da_d_core,
      ulineBuf_rsc_4_0_i_ena_d_core_psct, ulineBuf_rsc_4_0_i_wea_d_core_psct, ulineBuf_rsc_4_0_i_qa_d_mxwt,
      ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct, ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct,
      ulineBuf_rsc_4_0_i_oswt_pff
);
  input clk;
  input arst_n;
  output [11:0] ulineBuf_rsc_4_0_i_adra_d;
  output [9:0] ulineBuf_rsc_4_0_i_da_d;
  output [1:0] ulineBuf_rsc_4_0_i_ena_d;
  output [1:0] ulineBuf_rsc_4_0_i_wea_d;
  input [19:0] ulineBuf_rsc_4_0_i_qa_d;
  output [1:0] ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  input core_wen;
  input core_wten;
  input ulineBuf_rsc_4_0_i_oswt;
  input [23:0] ulineBuf_rsc_4_0_i_adra_d_core;
  input [19:0] ulineBuf_rsc_4_0_i_da_d_core;
  input [1:0] ulineBuf_rsc_4_0_i_ena_d_core_psct;
  input [1:0] ulineBuf_rsc_4_0_i_wea_d_core_psct;
  output [9:0] ulineBuf_rsc_4_0_i_qa_d_mxwt;
  input [1:0] ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  input ulineBuf_rsc_4_0_i_oswt_pff;


  // Interconnect Declarations
  wire ulineBuf_rsc_4_0_i_biwt;
  wire ulineBuf_rsc_4_0_i_bdwt;
  wire [1:0] ulineBuf_rsc_4_0_i_ena_d_core_sct;
  wire [1:0] ulineBuf_rsc_4_0_i_wea_d_core_sct;
  wire [1:0] ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire [1:0] ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  wire [9:0] ulineBuf_rsc_4_0_i_qa_d_mxwt_pconst;
  wire [11:0] ulineBuf_rsc_4_0_i_adra_d_reg;
  wire [9:0] ulineBuf_rsc_4_0_i_da_d_reg;


  // Interconnect Declarations for Component Instantiations 
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_4_0_i_1_ulineBuf_rsc_4_0_wait_ctrl_inst_ulineBuf_rsc_4_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_4_0_i_1_ulineBuf_rsc_4_0_wait_ctrl_inst_ulineBuf_rsc_4_0_i_ena_d_core_psct
      = {1'b0 , (ulineBuf_rsc_4_0_i_ena_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_4_0_i_1_ulineBuf_rsc_4_0_wait_ctrl_inst_ulineBuf_rsc_4_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_4_0_i_1_ulineBuf_rsc_4_0_wait_ctrl_inst_ulineBuf_rsc_4_0_i_wea_d_core_psct
      = {1'b0 , (ulineBuf_rsc_4_0_i_wea_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_4_0_i_1_ulineBuf_rsc_4_0_wait_ctrl_inst_ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_4_0_i_1_ulineBuf_rsc_4_0_wait_ctrl_inst_ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , (ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_4_0_i_1_ulineBuf_rsc_4_0_wait_ctrl_inst_ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_4_0_i_1_ulineBuf_rsc_4_0_wait_ctrl_inst_ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , (ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])};
  wire [23:0] nl_yuv444dns_core_ulineBuf_rsc_4_0_i_1_ulineBuf_rsc_4_0_wait_dp_inst_ulineBuf_rsc_4_0_i_adra_d_core;
  assign nl_yuv444dns_core_ulineBuf_rsc_4_0_i_1_ulineBuf_rsc_4_0_wait_dp_inst_ulineBuf_rsc_4_0_i_adra_d_core
      = {12'b000000000000 , (ulineBuf_rsc_4_0_i_adra_d_core[11:0])};
  wire [19:0] nl_yuv444dns_core_ulineBuf_rsc_4_0_i_1_ulineBuf_rsc_4_0_wait_dp_inst_ulineBuf_rsc_4_0_i_da_d_core;
  assign nl_yuv444dns_core_ulineBuf_rsc_4_0_i_1_ulineBuf_rsc_4_0_wait_dp_inst_ulineBuf_rsc_4_0_i_da_d_core
      = {10'b0000000000 , (ulineBuf_rsc_4_0_i_da_d_core[9:0])};
  yuv444dns_core_ulineBuf_rsc_4_0_i_1_ulineBuf_rsc_4_0_wait_ctrl yuv444dns_core_ulineBuf_rsc_4_0_i_1_ulineBuf_rsc_4_0_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .ulineBuf_rsc_4_0_i_oswt(ulineBuf_rsc_4_0_i_oswt),
      .ulineBuf_rsc_4_0_i_ena_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_4_0_i_1_ulineBuf_rsc_4_0_wait_ctrl_inst_ulineBuf_rsc_4_0_i_ena_d_core_psct[1:0]),
      .ulineBuf_rsc_4_0_i_wea_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_4_0_i_1_ulineBuf_rsc_4_0_wait_ctrl_inst_ulineBuf_rsc_4_0_i_wea_d_core_psct[1:0]),
      .ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_4_0_i_1_ulineBuf_rsc_4_0_wait_ctrl_inst_ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_4_0_i_1_ulineBuf_rsc_4_0_wait_ctrl_inst_ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .ulineBuf_rsc_4_0_i_biwt(ulineBuf_rsc_4_0_i_biwt),
      .ulineBuf_rsc_4_0_i_bdwt(ulineBuf_rsc_4_0_i_bdwt),
      .ulineBuf_rsc_4_0_i_ena_d_core_sct(ulineBuf_rsc_4_0_i_ena_d_core_sct),
      .ulineBuf_rsc_4_0_i_wea_d_core_sct(ulineBuf_rsc_4_0_i_wea_d_core_sct),
      .ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct(ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct(ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct),
      .ulineBuf_rsc_4_0_i_oswt_pff(ulineBuf_rsc_4_0_i_oswt_pff)
    );
  yuv444dns_core_ulineBuf_rsc_4_0_i_1_ulineBuf_rsc_4_0_wait_dp yuv444dns_core_ulineBuf_rsc_4_0_i_1_ulineBuf_rsc_4_0_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .ulineBuf_rsc_4_0_i_adra_d(ulineBuf_rsc_4_0_i_adra_d_reg),
      .ulineBuf_rsc_4_0_i_da_d(ulineBuf_rsc_4_0_i_da_d_reg),
      .ulineBuf_rsc_4_0_i_qa_d(ulineBuf_rsc_4_0_i_qa_d),
      .ulineBuf_rsc_4_0_i_adra_d_core(nl_yuv444dns_core_ulineBuf_rsc_4_0_i_1_ulineBuf_rsc_4_0_wait_dp_inst_ulineBuf_rsc_4_0_i_adra_d_core[23:0]),
      .ulineBuf_rsc_4_0_i_da_d_core(nl_yuv444dns_core_ulineBuf_rsc_4_0_i_1_ulineBuf_rsc_4_0_wait_dp_inst_ulineBuf_rsc_4_0_i_da_d_core[19:0]),
      .ulineBuf_rsc_4_0_i_qa_d_mxwt(ulineBuf_rsc_4_0_i_qa_d_mxwt_pconst),
      .ulineBuf_rsc_4_0_i_biwt(ulineBuf_rsc_4_0_i_biwt),
      .ulineBuf_rsc_4_0_i_bdwt(ulineBuf_rsc_4_0_i_bdwt)
    );
  assign ulineBuf_rsc_4_0_i_qa_d_mxwt = ulineBuf_rsc_4_0_i_qa_d_mxwt_pconst;
  assign ulineBuf_rsc_4_0_i_ena_d = ulineBuf_rsc_4_0_i_ena_d_core_sct;
  assign ulineBuf_rsc_4_0_i_wea_d = ulineBuf_rsc_4_0_i_wea_d_core_sct;
  assign ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  assign ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  assign ulineBuf_rsc_4_0_i_adra_d = ulineBuf_rsc_4_0_i_adra_d_reg;
  assign ulineBuf_rsc_4_0_i_da_d = ulineBuf_rsc_4_0_i_da_d_reg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ulineBuf_rsc_3_0_i_1
// ------------------------------------------------------------------


module yuv444dns_core_ulineBuf_rsc_3_0_i_1 (
  clk, arst_n, ulineBuf_rsc_3_0_i_adra_d, ulineBuf_rsc_3_0_i_da_d, ulineBuf_rsc_3_0_i_ena_d,
      ulineBuf_rsc_3_0_i_wea_d, ulineBuf_rsc_3_0_i_qa_d, ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, core_wen, core_wten,
      ulineBuf_rsc_3_0_i_oswt, ulineBuf_rsc_3_0_i_adra_d_core, ulineBuf_rsc_3_0_i_da_d_core,
      ulineBuf_rsc_3_0_i_ena_d_core_psct, ulineBuf_rsc_3_0_i_wea_d_core_psct, ulineBuf_rsc_3_0_i_qa_d_mxwt,
      ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct, ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct,
      ulineBuf_rsc_3_0_i_oswt_pff
);
  input clk;
  input arst_n;
  output [11:0] ulineBuf_rsc_3_0_i_adra_d;
  output [9:0] ulineBuf_rsc_3_0_i_da_d;
  output [1:0] ulineBuf_rsc_3_0_i_ena_d;
  output [1:0] ulineBuf_rsc_3_0_i_wea_d;
  input [19:0] ulineBuf_rsc_3_0_i_qa_d;
  output [1:0] ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  input core_wen;
  input core_wten;
  input ulineBuf_rsc_3_0_i_oswt;
  input [23:0] ulineBuf_rsc_3_0_i_adra_d_core;
  input [19:0] ulineBuf_rsc_3_0_i_da_d_core;
  input [1:0] ulineBuf_rsc_3_0_i_ena_d_core_psct;
  input [1:0] ulineBuf_rsc_3_0_i_wea_d_core_psct;
  output [9:0] ulineBuf_rsc_3_0_i_qa_d_mxwt;
  input [1:0] ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  input ulineBuf_rsc_3_0_i_oswt_pff;


  // Interconnect Declarations
  wire ulineBuf_rsc_3_0_i_biwt;
  wire ulineBuf_rsc_3_0_i_bdwt;
  wire [1:0] ulineBuf_rsc_3_0_i_ena_d_core_sct;
  wire [1:0] ulineBuf_rsc_3_0_i_wea_d_core_sct;
  wire [1:0] ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire [1:0] ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  wire [9:0] ulineBuf_rsc_3_0_i_qa_d_mxwt_pconst;
  wire [11:0] ulineBuf_rsc_3_0_i_adra_d_reg;
  wire [9:0] ulineBuf_rsc_3_0_i_da_d_reg;


  // Interconnect Declarations for Component Instantiations 
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_3_0_i_1_ulineBuf_rsc_3_0_wait_ctrl_inst_ulineBuf_rsc_3_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_3_0_i_1_ulineBuf_rsc_3_0_wait_ctrl_inst_ulineBuf_rsc_3_0_i_ena_d_core_psct
      = {1'b0 , (ulineBuf_rsc_3_0_i_ena_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_3_0_i_1_ulineBuf_rsc_3_0_wait_ctrl_inst_ulineBuf_rsc_3_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_3_0_i_1_ulineBuf_rsc_3_0_wait_ctrl_inst_ulineBuf_rsc_3_0_i_wea_d_core_psct
      = {1'b0 , (ulineBuf_rsc_3_0_i_wea_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_3_0_i_1_ulineBuf_rsc_3_0_wait_ctrl_inst_ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_3_0_i_1_ulineBuf_rsc_3_0_wait_ctrl_inst_ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , (ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_3_0_i_1_ulineBuf_rsc_3_0_wait_ctrl_inst_ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_3_0_i_1_ulineBuf_rsc_3_0_wait_ctrl_inst_ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , (ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])};
  wire [23:0] nl_yuv444dns_core_ulineBuf_rsc_3_0_i_1_ulineBuf_rsc_3_0_wait_dp_inst_ulineBuf_rsc_3_0_i_adra_d_core;
  assign nl_yuv444dns_core_ulineBuf_rsc_3_0_i_1_ulineBuf_rsc_3_0_wait_dp_inst_ulineBuf_rsc_3_0_i_adra_d_core
      = {12'b000000000000 , (ulineBuf_rsc_3_0_i_adra_d_core[11:0])};
  wire [19:0] nl_yuv444dns_core_ulineBuf_rsc_3_0_i_1_ulineBuf_rsc_3_0_wait_dp_inst_ulineBuf_rsc_3_0_i_da_d_core;
  assign nl_yuv444dns_core_ulineBuf_rsc_3_0_i_1_ulineBuf_rsc_3_0_wait_dp_inst_ulineBuf_rsc_3_0_i_da_d_core
      = {10'b0000000000 , (ulineBuf_rsc_3_0_i_da_d_core[9:0])};
  yuv444dns_core_ulineBuf_rsc_3_0_i_1_ulineBuf_rsc_3_0_wait_ctrl yuv444dns_core_ulineBuf_rsc_3_0_i_1_ulineBuf_rsc_3_0_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .ulineBuf_rsc_3_0_i_oswt(ulineBuf_rsc_3_0_i_oswt),
      .ulineBuf_rsc_3_0_i_ena_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_3_0_i_1_ulineBuf_rsc_3_0_wait_ctrl_inst_ulineBuf_rsc_3_0_i_ena_d_core_psct[1:0]),
      .ulineBuf_rsc_3_0_i_wea_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_3_0_i_1_ulineBuf_rsc_3_0_wait_ctrl_inst_ulineBuf_rsc_3_0_i_wea_d_core_psct[1:0]),
      .ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_3_0_i_1_ulineBuf_rsc_3_0_wait_ctrl_inst_ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_3_0_i_1_ulineBuf_rsc_3_0_wait_ctrl_inst_ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .ulineBuf_rsc_3_0_i_biwt(ulineBuf_rsc_3_0_i_biwt),
      .ulineBuf_rsc_3_0_i_bdwt(ulineBuf_rsc_3_0_i_bdwt),
      .ulineBuf_rsc_3_0_i_ena_d_core_sct(ulineBuf_rsc_3_0_i_ena_d_core_sct),
      .ulineBuf_rsc_3_0_i_wea_d_core_sct(ulineBuf_rsc_3_0_i_wea_d_core_sct),
      .ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct(ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct(ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct),
      .ulineBuf_rsc_3_0_i_oswt_pff(ulineBuf_rsc_3_0_i_oswt_pff)
    );
  yuv444dns_core_ulineBuf_rsc_3_0_i_1_ulineBuf_rsc_3_0_wait_dp yuv444dns_core_ulineBuf_rsc_3_0_i_1_ulineBuf_rsc_3_0_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .ulineBuf_rsc_3_0_i_adra_d(ulineBuf_rsc_3_0_i_adra_d_reg),
      .ulineBuf_rsc_3_0_i_da_d(ulineBuf_rsc_3_0_i_da_d_reg),
      .ulineBuf_rsc_3_0_i_qa_d(ulineBuf_rsc_3_0_i_qa_d),
      .ulineBuf_rsc_3_0_i_adra_d_core(nl_yuv444dns_core_ulineBuf_rsc_3_0_i_1_ulineBuf_rsc_3_0_wait_dp_inst_ulineBuf_rsc_3_0_i_adra_d_core[23:0]),
      .ulineBuf_rsc_3_0_i_da_d_core(nl_yuv444dns_core_ulineBuf_rsc_3_0_i_1_ulineBuf_rsc_3_0_wait_dp_inst_ulineBuf_rsc_3_0_i_da_d_core[19:0]),
      .ulineBuf_rsc_3_0_i_qa_d_mxwt(ulineBuf_rsc_3_0_i_qa_d_mxwt_pconst),
      .ulineBuf_rsc_3_0_i_biwt(ulineBuf_rsc_3_0_i_biwt),
      .ulineBuf_rsc_3_0_i_bdwt(ulineBuf_rsc_3_0_i_bdwt)
    );
  assign ulineBuf_rsc_3_0_i_qa_d_mxwt = ulineBuf_rsc_3_0_i_qa_d_mxwt_pconst;
  assign ulineBuf_rsc_3_0_i_ena_d = ulineBuf_rsc_3_0_i_ena_d_core_sct;
  assign ulineBuf_rsc_3_0_i_wea_d = ulineBuf_rsc_3_0_i_wea_d_core_sct;
  assign ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  assign ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  assign ulineBuf_rsc_3_0_i_adra_d = ulineBuf_rsc_3_0_i_adra_d_reg;
  assign ulineBuf_rsc_3_0_i_da_d = ulineBuf_rsc_3_0_i_da_d_reg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ulineBuf_rsc_2_0_i_1
// ------------------------------------------------------------------


module yuv444dns_core_ulineBuf_rsc_2_0_i_1 (
  clk, arst_n, ulineBuf_rsc_2_0_i_adra_d, ulineBuf_rsc_2_0_i_da_d, ulineBuf_rsc_2_0_i_ena_d,
      ulineBuf_rsc_2_0_i_wea_d, ulineBuf_rsc_2_0_i_qa_d, ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, core_wen, core_wten,
      ulineBuf_rsc_2_0_i_oswt, ulineBuf_rsc_2_0_i_adra_d_core, ulineBuf_rsc_2_0_i_da_d_core,
      ulineBuf_rsc_2_0_i_ena_d_core_psct, ulineBuf_rsc_2_0_i_wea_d_core_psct, ulineBuf_rsc_2_0_i_qa_d_mxwt,
      ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct, ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct,
      ulineBuf_rsc_2_0_i_oswt_pff
);
  input clk;
  input arst_n;
  output [11:0] ulineBuf_rsc_2_0_i_adra_d;
  output [9:0] ulineBuf_rsc_2_0_i_da_d;
  output [1:0] ulineBuf_rsc_2_0_i_ena_d;
  output [1:0] ulineBuf_rsc_2_0_i_wea_d;
  input [19:0] ulineBuf_rsc_2_0_i_qa_d;
  output [1:0] ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  input core_wen;
  input core_wten;
  input ulineBuf_rsc_2_0_i_oswt;
  input [23:0] ulineBuf_rsc_2_0_i_adra_d_core;
  input [19:0] ulineBuf_rsc_2_0_i_da_d_core;
  input [1:0] ulineBuf_rsc_2_0_i_ena_d_core_psct;
  input [1:0] ulineBuf_rsc_2_0_i_wea_d_core_psct;
  output [9:0] ulineBuf_rsc_2_0_i_qa_d_mxwt;
  input [1:0] ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  input ulineBuf_rsc_2_0_i_oswt_pff;


  // Interconnect Declarations
  wire ulineBuf_rsc_2_0_i_biwt;
  wire ulineBuf_rsc_2_0_i_bdwt;
  wire [1:0] ulineBuf_rsc_2_0_i_ena_d_core_sct;
  wire [1:0] ulineBuf_rsc_2_0_i_wea_d_core_sct;
  wire [1:0] ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire [1:0] ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  wire [9:0] ulineBuf_rsc_2_0_i_qa_d_mxwt_pconst;
  wire [11:0] ulineBuf_rsc_2_0_i_adra_d_reg;
  wire [9:0] ulineBuf_rsc_2_0_i_da_d_reg;


  // Interconnect Declarations for Component Instantiations 
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_2_0_i_1_ulineBuf_rsc_2_0_wait_ctrl_inst_ulineBuf_rsc_2_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_2_0_i_1_ulineBuf_rsc_2_0_wait_ctrl_inst_ulineBuf_rsc_2_0_i_ena_d_core_psct
      = {1'b0 , (ulineBuf_rsc_2_0_i_ena_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_2_0_i_1_ulineBuf_rsc_2_0_wait_ctrl_inst_ulineBuf_rsc_2_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_2_0_i_1_ulineBuf_rsc_2_0_wait_ctrl_inst_ulineBuf_rsc_2_0_i_wea_d_core_psct
      = {1'b0 , (ulineBuf_rsc_2_0_i_wea_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_2_0_i_1_ulineBuf_rsc_2_0_wait_ctrl_inst_ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_2_0_i_1_ulineBuf_rsc_2_0_wait_ctrl_inst_ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , (ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_2_0_i_1_ulineBuf_rsc_2_0_wait_ctrl_inst_ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_2_0_i_1_ulineBuf_rsc_2_0_wait_ctrl_inst_ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , (ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])};
  wire [23:0] nl_yuv444dns_core_ulineBuf_rsc_2_0_i_1_ulineBuf_rsc_2_0_wait_dp_inst_ulineBuf_rsc_2_0_i_adra_d_core;
  assign nl_yuv444dns_core_ulineBuf_rsc_2_0_i_1_ulineBuf_rsc_2_0_wait_dp_inst_ulineBuf_rsc_2_0_i_adra_d_core
      = {12'b000000000000 , (ulineBuf_rsc_2_0_i_adra_d_core[11:0])};
  wire [19:0] nl_yuv444dns_core_ulineBuf_rsc_2_0_i_1_ulineBuf_rsc_2_0_wait_dp_inst_ulineBuf_rsc_2_0_i_da_d_core;
  assign nl_yuv444dns_core_ulineBuf_rsc_2_0_i_1_ulineBuf_rsc_2_0_wait_dp_inst_ulineBuf_rsc_2_0_i_da_d_core
      = {10'b0000000000 , (ulineBuf_rsc_2_0_i_da_d_core[9:0])};
  yuv444dns_core_ulineBuf_rsc_2_0_i_1_ulineBuf_rsc_2_0_wait_ctrl yuv444dns_core_ulineBuf_rsc_2_0_i_1_ulineBuf_rsc_2_0_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .ulineBuf_rsc_2_0_i_oswt(ulineBuf_rsc_2_0_i_oswt),
      .ulineBuf_rsc_2_0_i_ena_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_2_0_i_1_ulineBuf_rsc_2_0_wait_ctrl_inst_ulineBuf_rsc_2_0_i_ena_d_core_psct[1:0]),
      .ulineBuf_rsc_2_0_i_wea_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_2_0_i_1_ulineBuf_rsc_2_0_wait_ctrl_inst_ulineBuf_rsc_2_0_i_wea_d_core_psct[1:0]),
      .ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_2_0_i_1_ulineBuf_rsc_2_0_wait_ctrl_inst_ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_2_0_i_1_ulineBuf_rsc_2_0_wait_ctrl_inst_ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .ulineBuf_rsc_2_0_i_biwt(ulineBuf_rsc_2_0_i_biwt),
      .ulineBuf_rsc_2_0_i_bdwt(ulineBuf_rsc_2_0_i_bdwt),
      .ulineBuf_rsc_2_0_i_ena_d_core_sct(ulineBuf_rsc_2_0_i_ena_d_core_sct),
      .ulineBuf_rsc_2_0_i_wea_d_core_sct(ulineBuf_rsc_2_0_i_wea_d_core_sct),
      .ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct(ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct(ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct),
      .ulineBuf_rsc_2_0_i_oswt_pff(ulineBuf_rsc_2_0_i_oswt_pff)
    );
  yuv444dns_core_ulineBuf_rsc_2_0_i_1_ulineBuf_rsc_2_0_wait_dp yuv444dns_core_ulineBuf_rsc_2_0_i_1_ulineBuf_rsc_2_0_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .ulineBuf_rsc_2_0_i_adra_d(ulineBuf_rsc_2_0_i_adra_d_reg),
      .ulineBuf_rsc_2_0_i_da_d(ulineBuf_rsc_2_0_i_da_d_reg),
      .ulineBuf_rsc_2_0_i_qa_d(ulineBuf_rsc_2_0_i_qa_d),
      .ulineBuf_rsc_2_0_i_adra_d_core(nl_yuv444dns_core_ulineBuf_rsc_2_0_i_1_ulineBuf_rsc_2_0_wait_dp_inst_ulineBuf_rsc_2_0_i_adra_d_core[23:0]),
      .ulineBuf_rsc_2_0_i_da_d_core(nl_yuv444dns_core_ulineBuf_rsc_2_0_i_1_ulineBuf_rsc_2_0_wait_dp_inst_ulineBuf_rsc_2_0_i_da_d_core[19:0]),
      .ulineBuf_rsc_2_0_i_qa_d_mxwt(ulineBuf_rsc_2_0_i_qa_d_mxwt_pconst),
      .ulineBuf_rsc_2_0_i_biwt(ulineBuf_rsc_2_0_i_biwt),
      .ulineBuf_rsc_2_0_i_bdwt(ulineBuf_rsc_2_0_i_bdwt)
    );
  assign ulineBuf_rsc_2_0_i_qa_d_mxwt = ulineBuf_rsc_2_0_i_qa_d_mxwt_pconst;
  assign ulineBuf_rsc_2_0_i_ena_d = ulineBuf_rsc_2_0_i_ena_d_core_sct;
  assign ulineBuf_rsc_2_0_i_wea_d = ulineBuf_rsc_2_0_i_wea_d_core_sct;
  assign ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  assign ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  assign ulineBuf_rsc_2_0_i_adra_d = ulineBuf_rsc_2_0_i_adra_d_reg;
  assign ulineBuf_rsc_2_0_i_da_d = ulineBuf_rsc_2_0_i_da_d_reg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ulineBuf_rsc_1_0_i_1
// ------------------------------------------------------------------


module yuv444dns_core_ulineBuf_rsc_1_0_i_1 (
  clk, arst_n, ulineBuf_rsc_1_0_i_adra_d, ulineBuf_rsc_1_0_i_da_d, ulineBuf_rsc_1_0_i_ena_d,
      ulineBuf_rsc_1_0_i_wea_d, ulineBuf_rsc_1_0_i_qa_d, ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, core_wen, core_wten,
      ulineBuf_rsc_1_0_i_oswt, ulineBuf_rsc_1_0_i_adra_d_core, ulineBuf_rsc_1_0_i_da_d_core,
      ulineBuf_rsc_1_0_i_ena_d_core_psct, ulineBuf_rsc_1_0_i_wea_d_core_psct, ulineBuf_rsc_1_0_i_qa_d_mxwt,
      ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct, ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct,
      ulineBuf_rsc_1_0_i_oswt_pff
);
  input clk;
  input arst_n;
  output [11:0] ulineBuf_rsc_1_0_i_adra_d;
  output [9:0] ulineBuf_rsc_1_0_i_da_d;
  output [1:0] ulineBuf_rsc_1_0_i_ena_d;
  output [1:0] ulineBuf_rsc_1_0_i_wea_d;
  input [19:0] ulineBuf_rsc_1_0_i_qa_d;
  output [1:0] ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  input core_wen;
  input core_wten;
  input ulineBuf_rsc_1_0_i_oswt;
  input [23:0] ulineBuf_rsc_1_0_i_adra_d_core;
  input [19:0] ulineBuf_rsc_1_0_i_da_d_core;
  input [1:0] ulineBuf_rsc_1_0_i_ena_d_core_psct;
  input [1:0] ulineBuf_rsc_1_0_i_wea_d_core_psct;
  output [9:0] ulineBuf_rsc_1_0_i_qa_d_mxwt;
  input [1:0] ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  input ulineBuf_rsc_1_0_i_oswt_pff;


  // Interconnect Declarations
  wire ulineBuf_rsc_1_0_i_biwt;
  wire ulineBuf_rsc_1_0_i_bdwt;
  wire [1:0] ulineBuf_rsc_1_0_i_ena_d_core_sct;
  wire [1:0] ulineBuf_rsc_1_0_i_wea_d_core_sct;
  wire [1:0] ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire [1:0] ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  wire [9:0] ulineBuf_rsc_1_0_i_qa_d_mxwt_pconst;
  wire [11:0] ulineBuf_rsc_1_0_i_adra_d_reg;
  wire [9:0] ulineBuf_rsc_1_0_i_da_d_reg;


  // Interconnect Declarations for Component Instantiations 
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_1_0_i_1_ulineBuf_rsc_1_0_wait_ctrl_inst_ulineBuf_rsc_1_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_1_0_i_1_ulineBuf_rsc_1_0_wait_ctrl_inst_ulineBuf_rsc_1_0_i_ena_d_core_psct
      = {1'b0 , (ulineBuf_rsc_1_0_i_ena_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_1_0_i_1_ulineBuf_rsc_1_0_wait_ctrl_inst_ulineBuf_rsc_1_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_1_0_i_1_ulineBuf_rsc_1_0_wait_ctrl_inst_ulineBuf_rsc_1_0_i_wea_d_core_psct
      = {1'b0 , (ulineBuf_rsc_1_0_i_wea_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_1_0_i_1_ulineBuf_rsc_1_0_wait_ctrl_inst_ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_1_0_i_1_ulineBuf_rsc_1_0_wait_ctrl_inst_ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , (ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_1_0_i_1_ulineBuf_rsc_1_0_wait_ctrl_inst_ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_1_0_i_1_ulineBuf_rsc_1_0_wait_ctrl_inst_ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , (ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])};
  wire [23:0] nl_yuv444dns_core_ulineBuf_rsc_1_0_i_1_ulineBuf_rsc_1_0_wait_dp_inst_ulineBuf_rsc_1_0_i_adra_d_core;
  assign nl_yuv444dns_core_ulineBuf_rsc_1_0_i_1_ulineBuf_rsc_1_0_wait_dp_inst_ulineBuf_rsc_1_0_i_adra_d_core
      = {12'b000000000000 , (ulineBuf_rsc_1_0_i_adra_d_core[11:0])};
  wire [19:0] nl_yuv444dns_core_ulineBuf_rsc_1_0_i_1_ulineBuf_rsc_1_0_wait_dp_inst_ulineBuf_rsc_1_0_i_da_d_core;
  assign nl_yuv444dns_core_ulineBuf_rsc_1_0_i_1_ulineBuf_rsc_1_0_wait_dp_inst_ulineBuf_rsc_1_0_i_da_d_core
      = {10'b0000000000 , (ulineBuf_rsc_1_0_i_da_d_core[9:0])};
  yuv444dns_core_ulineBuf_rsc_1_0_i_1_ulineBuf_rsc_1_0_wait_ctrl yuv444dns_core_ulineBuf_rsc_1_0_i_1_ulineBuf_rsc_1_0_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .ulineBuf_rsc_1_0_i_oswt(ulineBuf_rsc_1_0_i_oswt),
      .ulineBuf_rsc_1_0_i_ena_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_1_0_i_1_ulineBuf_rsc_1_0_wait_ctrl_inst_ulineBuf_rsc_1_0_i_ena_d_core_psct[1:0]),
      .ulineBuf_rsc_1_0_i_wea_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_1_0_i_1_ulineBuf_rsc_1_0_wait_ctrl_inst_ulineBuf_rsc_1_0_i_wea_d_core_psct[1:0]),
      .ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_1_0_i_1_ulineBuf_rsc_1_0_wait_ctrl_inst_ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_1_0_i_1_ulineBuf_rsc_1_0_wait_ctrl_inst_ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .ulineBuf_rsc_1_0_i_biwt(ulineBuf_rsc_1_0_i_biwt),
      .ulineBuf_rsc_1_0_i_bdwt(ulineBuf_rsc_1_0_i_bdwt),
      .ulineBuf_rsc_1_0_i_ena_d_core_sct(ulineBuf_rsc_1_0_i_ena_d_core_sct),
      .ulineBuf_rsc_1_0_i_wea_d_core_sct(ulineBuf_rsc_1_0_i_wea_d_core_sct),
      .ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct(ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct(ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct),
      .ulineBuf_rsc_1_0_i_oswt_pff(ulineBuf_rsc_1_0_i_oswt_pff)
    );
  yuv444dns_core_ulineBuf_rsc_1_0_i_1_ulineBuf_rsc_1_0_wait_dp yuv444dns_core_ulineBuf_rsc_1_0_i_1_ulineBuf_rsc_1_0_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .ulineBuf_rsc_1_0_i_adra_d(ulineBuf_rsc_1_0_i_adra_d_reg),
      .ulineBuf_rsc_1_0_i_da_d(ulineBuf_rsc_1_0_i_da_d_reg),
      .ulineBuf_rsc_1_0_i_qa_d(ulineBuf_rsc_1_0_i_qa_d),
      .ulineBuf_rsc_1_0_i_adra_d_core(nl_yuv444dns_core_ulineBuf_rsc_1_0_i_1_ulineBuf_rsc_1_0_wait_dp_inst_ulineBuf_rsc_1_0_i_adra_d_core[23:0]),
      .ulineBuf_rsc_1_0_i_da_d_core(nl_yuv444dns_core_ulineBuf_rsc_1_0_i_1_ulineBuf_rsc_1_0_wait_dp_inst_ulineBuf_rsc_1_0_i_da_d_core[19:0]),
      .ulineBuf_rsc_1_0_i_qa_d_mxwt(ulineBuf_rsc_1_0_i_qa_d_mxwt_pconst),
      .ulineBuf_rsc_1_0_i_biwt(ulineBuf_rsc_1_0_i_biwt),
      .ulineBuf_rsc_1_0_i_bdwt(ulineBuf_rsc_1_0_i_bdwt)
    );
  assign ulineBuf_rsc_1_0_i_qa_d_mxwt = ulineBuf_rsc_1_0_i_qa_d_mxwt_pconst;
  assign ulineBuf_rsc_1_0_i_ena_d = ulineBuf_rsc_1_0_i_ena_d_core_sct;
  assign ulineBuf_rsc_1_0_i_wea_d = ulineBuf_rsc_1_0_i_wea_d_core_sct;
  assign ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  assign ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  assign ulineBuf_rsc_1_0_i_adra_d = ulineBuf_rsc_1_0_i_adra_d_reg;
  assign ulineBuf_rsc_1_0_i_da_d = ulineBuf_rsc_1_0_i_da_d_reg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ulineBuf_rsc_0_0_i_1
// ------------------------------------------------------------------


module yuv444dns_core_ulineBuf_rsc_0_0_i_1 (
  clk, arst_n, ulineBuf_rsc_0_0_i_adra_d, ulineBuf_rsc_0_0_i_da_d, ulineBuf_rsc_0_0_i_ena_d,
      ulineBuf_rsc_0_0_i_wea_d, ulineBuf_rsc_0_0_i_qa_d, ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, core_wen, core_wten,
      ulineBuf_rsc_0_0_i_oswt, ulineBuf_rsc_0_0_i_adra_d_core, ulineBuf_rsc_0_0_i_da_d_core,
      ulineBuf_rsc_0_0_i_ena_d_core_psct, ulineBuf_rsc_0_0_i_wea_d_core_psct, ulineBuf_rsc_0_0_i_qa_d_mxwt,
      ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct, ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct,
      ulineBuf_rsc_0_0_i_oswt_pff
);
  input clk;
  input arst_n;
  output [11:0] ulineBuf_rsc_0_0_i_adra_d;
  output [9:0] ulineBuf_rsc_0_0_i_da_d;
  output [1:0] ulineBuf_rsc_0_0_i_ena_d;
  output [1:0] ulineBuf_rsc_0_0_i_wea_d;
  input [19:0] ulineBuf_rsc_0_0_i_qa_d;
  output [1:0] ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  input core_wen;
  input core_wten;
  input ulineBuf_rsc_0_0_i_oswt;
  input [23:0] ulineBuf_rsc_0_0_i_adra_d_core;
  input [19:0] ulineBuf_rsc_0_0_i_da_d_core;
  input [1:0] ulineBuf_rsc_0_0_i_ena_d_core_psct;
  input [1:0] ulineBuf_rsc_0_0_i_wea_d_core_psct;
  output [9:0] ulineBuf_rsc_0_0_i_qa_d_mxwt;
  input [1:0] ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  input ulineBuf_rsc_0_0_i_oswt_pff;


  // Interconnect Declarations
  wire ulineBuf_rsc_0_0_i_biwt;
  wire ulineBuf_rsc_0_0_i_bdwt;
  wire [1:0] ulineBuf_rsc_0_0_i_ena_d_core_sct;
  wire [1:0] ulineBuf_rsc_0_0_i_wea_d_core_sct;
  wire [1:0] ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire [1:0] ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  wire [9:0] ulineBuf_rsc_0_0_i_qa_d_mxwt_pconst;
  wire [11:0] ulineBuf_rsc_0_0_i_adra_d_reg;
  wire [9:0] ulineBuf_rsc_0_0_i_da_d_reg;


  // Interconnect Declarations for Component Instantiations 
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_0_0_i_1_ulineBuf_rsc_0_0_wait_ctrl_inst_ulineBuf_rsc_0_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_0_0_i_1_ulineBuf_rsc_0_0_wait_ctrl_inst_ulineBuf_rsc_0_0_i_ena_d_core_psct
      = {1'b0 , (ulineBuf_rsc_0_0_i_ena_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_0_0_i_1_ulineBuf_rsc_0_0_wait_ctrl_inst_ulineBuf_rsc_0_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_0_0_i_1_ulineBuf_rsc_0_0_wait_ctrl_inst_ulineBuf_rsc_0_0_i_wea_d_core_psct
      = {1'b0 , (ulineBuf_rsc_0_0_i_wea_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_0_0_i_1_ulineBuf_rsc_0_0_wait_ctrl_inst_ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_0_0_i_1_ulineBuf_rsc_0_0_wait_ctrl_inst_ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , (ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_0_0_i_1_ulineBuf_rsc_0_0_wait_ctrl_inst_ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_0_0_i_1_ulineBuf_rsc_0_0_wait_ctrl_inst_ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , (ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])};
  wire [23:0] nl_yuv444dns_core_ulineBuf_rsc_0_0_i_1_ulineBuf_rsc_0_0_wait_dp_inst_ulineBuf_rsc_0_0_i_adra_d_core;
  assign nl_yuv444dns_core_ulineBuf_rsc_0_0_i_1_ulineBuf_rsc_0_0_wait_dp_inst_ulineBuf_rsc_0_0_i_adra_d_core
      = {12'b000000000000 , (ulineBuf_rsc_0_0_i_adra_d_core[11:0])};
  wire [19:0] nl_yuv444dns_core_ulineBuf_rsc_0_0_i_1_ulineBuf_rsc_0_0_wait_dp_inst_ulineBuf_rsc_0_0_i_da_d_core;
  assign nl_yuv444dns_core_ulineBuf_rsc_0_0_i_1_ulineBuf_rsc_0_0_wait_dp_inst_ulineBuf_rsc_0_0_i_da_d_core
      = {10'b0000000000 , (ulineBuf_rsc_0_0_i_da_d_core[9:0])};
  yuv444dns_core_ulineBuf_rsc_0_0_i_1_ulineBuf_rsc_0_0_wait_ctrl yuv444dns_core_ulineBuf_rsc_0_0_i_1_ulineBuf_rsc_0_0_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .ulineBuf_rsc_0_0_i_oswt(ulineBuf_rsc_0_0_i_oswt),
      .ulineBuf_rsc_0_0_i_ena_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_0_0_i_1_ulineBuf_rsc_0_0_wait_ctrl_inst_ulineBuf_rsc_0_0_i_ena_d_core_psct[1:0]),
      .ulineBuf_rsc_0_0_i_wea_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_0_0_i_1_ulineBuf_rsc_0_0_wait_ctrl_inst_ulineBuf_rsc_0_0_i_wea_d_core_psct[1:0]),
      .ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_0_0_i_1_ulineBuf_rsc_0_0_wait_ctrl_inst_ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_0_0_i_1_ulineBuf_rsc_0_0_wait_ctrl_inst_ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .ulineBuf_rsc_0_0_i_biwt(ulineBuf_rsc_0_0_i_biwt),
      .ulineBuf_rsc_0_0_i_bdwt(ulineBuf_rsc_0_0_i_bdwt),
      .ulineBuf_rsc_0_0_i_ena_d_core_sct(ulineBuf_rsc_0_0_i_ena_d_core_sct),
      .ulineBuf_rsc_0_0_i_wea_d_core_sct(ulineBuf_rsc_0_0_i_wea_d_core_sct),
      .ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct(ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct(ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct),
      .ulineBuf_rsc_0_0_i_oswt_pff(ulineBuf_rsc_0_0_i_oswt_pff)
    );
  yuv444dns_core_ulineBuf_rsc_0_0_i_1_ulineBuf_rsc_0_0_wait_dp yuv444dns_core_ulineBuf_rsc_0_0_i_1_ulineBuf_rsc_0_0_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .ulineBuf_rsc_0_0_i_adra_d(ulineBuf_rsc_0_0_i_adra_d_reg),
      .ulineBuf_rsc_0_0_i_da_d(ulineBuf_rsc_0_0_i_da_d_reg),
      .ulineBuf_rsc_0_0_i_qa_d(ulineBuf_rsc_0_0_i_qa_d),
      .ulineBuf_rsc_0_0_i_adra_d_core(nl_yuv444dns_core_ulineBuf_rsc_0_0_i_1_ulineBuf_rsc_0_0_wait_dp_inst_ulineBuf_rsc_0_0_i_adra_d_core[23:0]),
      .ulineBuf_rsc_0_0_i_da_d_core(nl_yuv444dns_core_ulineBuf_rsc_0_0_i_1_ulineBuf_rsc_0_0_wait_dp_inst_ulineBuf_rsc_0_0_i_da_d_core[19:0]),
      .ulineBuf_rsc_0_0_i_qa_d_mxwt(ulineBuf_rsc_0_0_i_qa_d_mxwt_pconst),
      .ulineBuf_rsc_0_0_i_biwt(ulineBuf_rsc_0_0_i_biwt),
      .ulineBuf_rsc_0_0_i_bdwt(ulineBuf_rsc_0_0_i_bdwt)
    );
  assign ulineBuf_rsc_0_0_i_qa_d_mxwt = ulineBuf_rsc_0_0_i_qa_d_mxwt_pconst;
  assign ulineBuf_rsc_0_0_i_ena_d = ulineBuf_rsc_0_0_i_ena_d_core_sct;
  assign ulineBuf_rsc_0_0_i_wea_d = ulineBuf_rsc_0_0_i_wea_d_core_sct;
  assign ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  assign ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  assign ulineBuf_rsc_0_0_i_adra_d = ulineBuf_rsc_0_0_i_adra_d_reg;
  assign ulineBuf_rsc_0_0_i_da_d = ulineBuf_rsc_0_0_i_da_d_reg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ylineBuf_rsc_7_0_i_1
// ------------------------------------------------------------------


module yuv444dns_core_ylineBuf_rsc_7_0_i_1 (
  clk, arst_n, ylineBuf_rsc_7_0_i_adra_d, ylineBuf_rsc_7_0_i_da_d, ylineBuf_rsc_7_0_i_ena_d,
      ylineBuf_rsc_7_0_i_wea_d, ylineBuf_rsc_7_0_i_qa_d, ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, core_wen, core_wten,
      ylineBuf_rsc_7_0_i_oswt, ylineBuf_rsc_7_0_i_adra_d_core, ylineBuf_rsc_7_0_i_da_d_core,
      ylineBuf_rsc_7_0_i_ena_d_core_psct, ylineBuf_rsc_7_0_i_wea_d_core_psct, ylineBuf_rsc_7_0_i_qa_d_mxwt,
      ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct, ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct,
      ylineBuf_rsc_7_0_i_oswt_pff
);
  input clk;
  input arst_n;
  output [11:0] ylineBuf_rsc_7_0_i_adra_d;
  output [9:0] ylineBuf_rsc_7_0_i_da_d;
  output [1:0] ylineBuf_rsc_7_0_i_ena_d;
  output [1:0] ylineBuf_rsc_7_0_i_wea_d;
  input [19:0] ylineBuf_rsc_7_0_i_qa_d;
  output [1:0] ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  input core_wen;
  input core_wten;
  input ylineBuf_rsc_7_0_i_oswt;
  input [23:0] ylineBuf_rsc_7_0_i_adra_d_core;
  input [19:0] ylineBuf_rsc_7_0_i_da_d_core;
  input [1:0] ylineBuf_rsc_7_0_i_ena_d_core_psct;
  input [1:0] ylineBuf_rsc_7_0_i_wea_d_core_psct;
  output [9:0] ylineBuf_rsc_7_0_i_qa_d_mxwt;
  input [1:0] ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  input ylineBuf_rsc_7_0_i_oswt_pff;


  // Interconnect Declarations
  wire ylineBuf_rsc_7_0_i_biwt;
  wire ylineBuf_rsc_7_0_i_bdwt;
  wire [1:0] ylineBuf_rsc_7_0_i_ena_d_core_sct;
  wire [1:0] ylineBuf_rsc_7_0_i_wea_d_core_sct;
  wire [1:0] ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire [1:0] ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  wire [9:0] ylineBuf_rsc_7_0_i_qa_d_mxwt_pconst;
  wire [11:0] ylineBuf_rsc_7_0_i_adra_d_reg;
  wire [9:0] ylineBuf_rsc_7_0_i_da_d_reg;


  // Interconnect Declarations for Component Instantiations 
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_7_0_i_1_ylineBuf_rsc_7_0_wait_ctrl_inst_ylineBuf_rsc_7_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_7_0_i_1_ylineBuf_rsc_7_0_wait_ctrl_inst_ylineBuf_rsc_7_0_i_ena_d_core_psct
      = {1'b0 , (ylineBuf_rsc_7_0_i_ena_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_7_0_i_1_ylineBuf_rsc_7_0_wait_ctrl_inst_ylineBuf_rsc_7_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_7_0_i_1_ylineBuf_rsc_7_0_wait_ctrl_inst_ylineBuf_rsc_7_0_i_wea_d_core_psct
      = {1'b0 , (ylineBuf_rsc_7_0_i_wea_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_7_0_i_1_ylineBuf_rsc_7_0_wait_ctrl_inst_ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_7_0_i_1_ylineBuf_rsc_7_0_wait_ctrl_inst_ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , (ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_7_0_i_1_ylineBuf_rsc_7_0_wait_ctrl_inst_ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_7_0_i_1_ylineBuf_rsc_7_0_wait_ctrl_inst_ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , (ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])};
  wire [23:0] nl_yuv444dns_core_ylineBuf_rsc_7_0_i_1_ylineBuf_rsc_7_0_wait_dp_inst_ylineBuf_rsc_7_0_i_adra_d_core;
  assign nl_yuv444dns_core_ylineBuf_rsc_7_0_i_1_ylineBuf_rsc_7_0_wait_dp_inst_ylineBuf_rsc_7_0_i_adra_d_core
      = {12'b000000000000 , (ylineBuf_rsc_7_0_i_adra_d_core[11:0])};
  wire [19:0] nl_yuv444dns_core_ylineBuf_rsc_7_0_i_1_ylineBuf_rsc_7_0_wait_dp_inst_ylineBuf_rsc_7_0_i_da_d_core;
  assign nl_yuv444dns_core_ylineBuf_rsc_7_0_i_1_ylineBuf_rsc_7_0_wait_dp_inst_ylineBuf_rsc_7_0_i_da_d_core
      = {10'b0000000000 , (ylineBuf_rsc_7_0_i_da_d_core[9:0])};
  yuv444dns_core_ylineBuf_rsc_7_0_i_1_ylineBuf_rsc_7_0_wait_ctrl yuv444dns_core_ylineBuf_rsc_7_0_i_1_ylineBuf_rsc_7_0_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .ylineBuf_rsc_7_0_i_oswt(ylineBuf_rsc_7_0_i_oswt),
      .ylineBuf_rsc_7_0_i_ena_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_7_0_i_1_ylineBuf_rsc_7_0_wait_ctrl_inst_ylineBuf_rsc_7_0_i_ena_d_core_psct[1:0]),
      .ylineBuf_rsc_7_0_i_wea_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_7_0_i_1_ylineBuf_rsc_7_0_wait_ctrl_inst_ylineBuf_rsc_7_0_i_wea_d_core_psct[1:0]),
      .ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_7_0_i_1_ylineBuf_rsc_7_0_wait_ctrl_inst_ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_7_0_i_1_ylineBuf_rsc_7_0_wait_ctrl_inst_ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .ylineBuf_rsc_7_0_i_biwt(ylineBuf_rsc_7_0_i_biwt),
      .ylineBuf_rsc_7_0_i_bdwt(ylineBuf_rsc_7_0_i_bdwt),
      .ylineBuf_rsc_7_0_i_ena_d_core_sct(ylineBuf_rsc_7_0_i_ena_d_core_sct),
      .ylineBuf_rsc_7_0_i_wea_d_core_sct(ylineBuf_rsc_7_0_i_wea_d_core_sct),
      .ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct(ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct(ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct),
      .ylineBuf_rsc_7_0_i_oswt_pff(ylineBuf_rsc_7_0_i_oswt_pff)
    );
  yuv444dns_core_ylineBuf_rsc_7_0_i_1_ylineBuf_rsc_7_0_wait_dp yuv444dns_core_ylineBuf_rsc_7_0_i_1_ylineBuf_rsc_7_0_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .ylineBuf_rsc_7_0_i_adra_d(ylineBuf_rsc_7_0_i_adra_d_reg),
      .ylineBuf_rsc_7_0_i_da_d(ylineBuf_rsc_7_0_i_da_d_reg),
      .ylineBuf_rsc_7_0_i_qa_d(ylineBuf_rsc_7_0_i_qa_d),
      .ylineBuf_rsc_7_0_i_adra_d_core(nl_yuv444dns_core_ylineBuf_rsc_7_0_i_1_ylineBuf_rsc_7_0_wait_dp_inst_ylineBuf_rsc_7_0_i_adra_d_core[23:0]),
      .ylineBuf_rsc_7_0_i_da_d_core(nl_yuv444dns_core_ylineBuf_rsc_7_0_i_1_ylineBuf_rsc_7_0_wait_dp_inst_ylineBuf_rsc_7_0_i_da_d_core[19:0]),
      .ylineBuf_rsc_7_0_i_qa_d_mxwt(ylineBuf_rsc_7_0_i_qa_d_mxwt_pconst),
      .ylineBuf_rsc_7_0_i_biwt(ylineBuf_rsc_7_0_i_biwt),
      .ylineBuf_rsc_7_0_i_bdwt(ylineBuf_rsc_7_0_i_bdwt)
    );
  assign ylineBuf_rsc_7_0_i_qa_d_mxwt = ylineBuf_rsc_7_0_i_qa_d_mxwt_pconst;
  assign ylineBuf_rsc_7_0_i_ena_d = ylineBuf_rsc_7_0_i_ena_d_core_sct;
  assign ylineBuf_rsc_7_0_i_wea_d = ylineBuf_rsc_7_0_i_wea_d_core_sct;
  assign ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  assign ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  assign ylineBuf_rsc_7_0_i_adra_d = ylineBuf_rsc_7_0_i_adra_d_reg;
  assign ylineBuf_rsc_7_0_i_da_d = ylineBuf_rsc_7_0_i_da_d_reg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ylineBuf_rsc_6_0_i_1
// ------------------------------------------------------------------


module yuv444dns_core_ylineBuf_rsc_6_0_i_1 (
  clk, arst_n, ylineBuf_rsc_6_0_i_adra_d, ylineBuf_rsc_6_0_i_da_d, ylineBuf_rsc_6_0_i_ena_d,
      ylineBuf_rsc_6_0_i_wea_d, ylineBuf_rsc_6_0_i_qa_d, ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, core_wen, core_wten,
      ylineBuf_rsc_6_0_i_oswt, ylineBuf_rsc_6_0_i_adra_d_core, ylineBuf_rsc_6_0_i_da_d_core,
      ylineBuf_rsc_6_0_i_ena_d_core_psct, ylineBuf_rsc_6_0_i_wea_d_core_psct, ylineBuf_rsc_6_0_i_qa_d_mxwt,
      ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct, ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct,
      ylineBuf_rsc_6_0_i_oswt_pff
);
  input clk;
  input arst_n;
  output [11:0] ylineBuf_rsc_6_0_i_adra_d;
  output [9:0] ylineBuf_rsc_6_0_i_da_d;
  output [1:0] ylineBuf_rsc_6_0_i_ena_d;
  output [1:0] ylineBuf_rsc_6_0_i_wea_d;
  input [19:0] ylineBuf_rsc_6_0_i_qa_d;
  output [1:0] ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  input core_wen;
  input core_wten;
  input ylineBuf_rsc_6_0_i_oswt;
  input [23:0] ylineBuf_rsc_6_0_i_adra_d_core;
  input [19:0] ylineBuf_rsc_6_0_i_da_d_core;
  input [1:0] ylineBuf_rsc_6_0_i_ena_d_core_psct;
  input [1:0] ylineBuf_rsc_6_0_i_wea_d_core_psct;
  output [9:0] ylineBuf_rsc_6_0_i_qa_d_mxwt;
  input [1:0] ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  input ylineBuf_rsc_6_0_i_oswt_pff;


  // Interconnect Declarations
  wire ylineBuf_rsc_6_0_i_biwt;
  wire ylineBuf_rsc_6_0_i_bdwt;
  wire [1:0] ylineBuf_rsc_6_0_i_ena_d_core_sct;
  wire [1:0] ylineBuf_rsc_6_0_i_wea_d_core_sct;
  wire [1:0] ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire [1:0] ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  wire [9:0] ylineBuf_rsc_6_0_i_qa_d_mxwt_pconst;
  wire [11:0] ylineBuf_rsc_6_0_i_adra_d_reg;
  wire [9:0] ylineBuf_rsc_6_0_i_da_d_reg;


  // Interconnect Declarations for Component Instantiations 
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_6_0_i_1_ylineBuf_rsc_6_0_wait_ctrl_inst_ylineBuf_rsc_6_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_6_0_i_1_ylineBuf_rsc_6_0_wait_ctrl_inst_ylineBuf_rsc_6_0_i_ena_d_core_psct
      = {1'b0 , (ylineBuf_rsc_6_0_i_ena_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_6_0_i_1_ylineBuf_rsc_6_0_wait_ctrl_inst_ylineBuf_rsc_6_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_6_0_i_1_ylineBuf_rsc_6_0_wait_ctrl_inst_ylineBuf_rsc_6_0_i_wea_d_core_psct
      = {1'b0 , (ylineBuf_rsc_6_0_i_wea_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_6_0_i_1_ylineBuf_rsc_6_0_wait_ctrl_inst_ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_6_0_i_1_ylineBuf_rsc_6_0_wait_ctrl_inst_ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , (ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_6_0_i_1_ylineBuf_rsc_6_0_wait_ctrl_inst_ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_6_0_i_1_ylineBuf_rsc_6_0_wait_ctrl_inst_ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , (ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])};
  wire [23:0] nl_yuv444dns_core_ylineBuf_rsc_6_0_i_1_ylineBuf_rsc_6_0_wait_dp_inst_ylineBuf_rsc_6_0_i_adra_d_core;
  assign nl_yuv444dns_core_ylineBuf_rsc_6_0_i_1_ylineBuf_rsc_6_0_wait_dp_inst_ylineBuf_rsc_6_0_i_adra_d_core
      = {12'b000000000000 , (ylineBuf_rsc_6_0_i_adra_d_core[11:0])};
  wire [19:0] nl_yuv444dns_core_ylineBuf_rsc_6_0_i_1_ylineBuf_rsc_6_0_wait_dp_inst_ylineBuf_rsc_6_0_i_da_d_core;
  assign nl_yuv444dns_core_ylineBuf_rsc_6_0_i_1_ylineBuf_rsc_6_0_wait_dp_inst_ylineBuf_rsc_6_0_i_da_d_core
      = {10'b0000000000 , (ylineBuf_rsc_6_0_i_da_d_core[9:0])};
  yuv444dns_core_ylineBuf_rsc_6_0_i_1_ylineBuf_rsc_6_0_wait_ctrl yuv444dns_core_ylineBuf_rsc_6_0_i_1_ylineBuf_rsc_6_0_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .ylineBuf_rsc_6_0_i_oswt(ylineBuf_rsc_6_0_i_oswt),
      .ylineBuf_rsc_6_0_i_ena_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_6_0_i_1_ylineBuf_rsc_6_0_wait_ctrl_inst_ylineBuf_rsc_6_0_i_ena_d_core_psct[1:0]),
      .ylineBuf_rsc_6_0_i_wea_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_6_0_i_1_ylineBuf_rsc_6_0_wait_ctrl_inst_ylineBuf_rsc_6_0_i_wea_d_core_psct[1:0]),
      .ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_6_0_i_1_ylineBuf_rsc_6_0_wait_ctrl_inst_ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_6_0_i_1_ylineBuf_rsc_6_0_wait_ctrl_inst_ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .ylineBuf_rsc_6_0_i_biwt(ylineBuf_rsc_6_0_i_biwt),
      .ylineBuf_rsc_6_0_i_bdwt(ylineBuf_rsc_6_0_i_bdwt),
      .ylineBuf_rsc_6_0_i_ena_d_core_sct(ylineBuf_rsc_6_0_i_ena_d_core_sct),
      .ylineBuf_rsc_6_0_i_wea_d_core_sct(ylineBuf_rsc_6_0_i_wea_d_core_sct),
      .ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct(ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct(ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct),
      .ylineBuf_rsc_6_0_i_oswt_pff(ylineBuf_rsc_6_0_i_oswt_pff)
    );
  yuv444dns_core_ylineBuf_rsc_6_0_i_1_ylineBuf_rsc_6_0_wait_dp yuv444dns_core_ylineBuf_rsc_6_0_i_1_ylineBuf_rsc_6_0_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .ylineBuf_rsc_6_0_i_adra_d(ylineBuf_rsc_6_0_i_adra_d_reg),
      .ylineBuf_rsc_6_0_i_da_d(ylineBuf_rsc_6_0_i_da_d_reg),
      .ylineBuf_rsc_6_0_i_qa_d(ylineBuf_rsc_6_0_i_qa_d),
      .ylineBuf_rsc_6_0_i_adra_d_core(nl_yuv444dns_core_ylineBuf_rsc_6_0_i_1_ylineBuf_rsc_6_0_wait_dp_inst_ylineBuf_rsc_6_0_i_adra_d_core[23:0]),
      .ylineBuf_rsc_6_0_i_da_d_core(nl_yuv444dns_core_ylineBuf_rsc_6_0_i_1_ylineBuf_rsc_6_0_wait_dp_inst_ylineBuf_rsc_6_0_i_da_d_core[19:0]),
      .ylineBuf_rsc_6_0_i_qa_d_mxwt(ylineBuf_rsc_6_0_i_qa_d_mxwt_pconst),
      .ylineBuf_rsc_6_0_i_biwt(ylineBuf_rsc_6_0_i_biwt),
      .ylineBuf_rsc_6_0_i_bdwt(ylineBuf_rsc_6_0_i_bdwt)
    );
  assign ylineBuf_rsc_6_0_i_qa_d_mxwt = ylineBuf_rsc_6_0_i_qa_d_mxwt_pconst;
  assign ylineBuf_rsc_6_0_i_ena_d = ylineBuf_rsc_6_0_i_ena_d_core_sct;
  assign ylineBuf_rsc_6_0_i_wea_d = ylineBuf_rsc_6_0_i_wea_d_core_sct;
  assign ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  assign ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  assign ylineBuf_rsc_6_0_i_adra_d = ylineBuf_rsc_6_0_i_adra_d_reg;
  assign ylineBuf_rsc_6_0_i_da_d = ylineBuf_rsc_6_0_i_da_d_reg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ylineBuf_rsc_5_0_i_1
// ------------------------------------------------------------------


module yuv444dns_core_ylineBuf_rsc_5_0_i_1 (
  clk, arst_n, ylineBuf_rsc_5_0_i_adra_d, ylineBuf_rsc_5_0_i_da_d, ylineBuf_rsc_5_0_i_ena_d,
      ylineBuf_rsc_5_0_i_wea_d, ylineBuf_rsc_5_0_i_qa_d, ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, core_wen, core_wten,
      ylineBuf_rsc_5_0_i_oswt, ylineBuf_rsc_5_0_i_adra_d_core, ylineBuf_rsc_5_0_i_da_d_core,
      ylineBuf_rsc_5_0_i_ena_d_core_psct, ylineBuf_rsc_5_0_i_wea_d_core_psct, ylineBuf_rsc_5_0_i_qa_d_mxwt,
      ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct, ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct,
      ylineBuf_rsc_5_0_i_oswt_pff
);
  input clk;
  input arst_n;
  output [11:0] ylineBuf_rsc_5_0_i_adra_d;
  output [9:0] ylineBuf_rsc_5_0_i_da_d;
  output [1:0] ylineBuf_rsc_5_0_i_ena_d;
  output [1:0] ylineBuf_rsc_5_0_i_wea_d;
  input [19:0] ylineBuf_rsc_5_0_i_qa_d;
  output [1:0] ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  input core_wen;
  input core_wten;
  input ylineBuf_rsc_5_0_i_oswt;
  input [23:0] ylineBuf_rsc_5_0_i_adra_d_core;
  input [19:0] ylineBuf_rsc_5_0_i_da_d_core;
  input [1:0] ylineBuf_rsc_5_0_i_ena_d_core_psct;
  input [1:0] ylineBuf_rsc_5_0_i_wea_d_core_psct;
  output [9:0] ylineBuf_rsc_5_0_i_qa_d_mxwt;
  input [1:0] ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  input ylineBuf_rsc_5_0_i_oswt_pff;


  // Interconnect Declarations
  wire ylineBuf_rsc_5_0_i_biwt;
  wire ylineBuf_rsc_5_0_i_bdwt;
  wire [1:0] ylineBuf_rsc_5_0_i_ena_d_core_sct;
  wire [1:0] ylineBuf_rsc_5_0_i_wea_d_core_sct;
  wire [1:0] ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire [1:0] ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  wire [9:0] ylineBuf_rsc_5_0_i_qa_d_mxwt_pconst;
  wire [11:0] ylineBuf_rsc_5_0_i_adra_d_reg;
  wire [9:0] ylineBuf_rsc_5_0_i_da_d_reg;


  // Interconnect Declarations for Component Instantiations 
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_5_0_i_1_ylineBuf_rsc_5_0_wait_ctrl_inst_ylineBuf_rsc_5_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_5_0_i_1_ylineBuf_rsc_5_0_wait_ctrl_inst_ylineBuf_rsc_5_0_i_ena_d_core_psct
      = {1'b0 , (ylineBuf_rsc_5_0_i_ena_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_5_0_i_1_ylineBuf_rsc_5_0_wait_ctrl_inst_ylineBuf_rsc_5_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_5_0_i_1_ylineBuf_rsc_5_0_wait_ctrl_inst_ylineBuf_rsc_5_0_i_wea_d_core_psct
      = {1'b0 , (ylineBuf_rsc_5_0_i_wea_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_5_0_i_1_ylineBuf_rsc_5_0_wait_ctrl_inst_ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_5_0_i_1_ylineBuf_rsc_5_0_wait_ctrl_inst_ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , (ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_5_0_i_1_ylineBuf_rsc_5_0_wait_ctrl_inst_ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_5_0_i_1_ylineBuf_rsc_5_0_wait_ctrl_inst_ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , (ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])};
  wire [23:0] nl_yuv444dns_core_ylineBuf_rsc_5_0_i_1_ylineBuf_rsc_5_0_wait_dp_inst_ylineBuf_rsc_5_0_i_adra_d_core;
  assign nl_yuv444dns_core_ylineBuf_rsc_5_0_i_1_ylineBuf_rsc_5_0_wait_dp_inst_ylineBuf_rsc_5_0_i_adra_d_core
      = {12'b000000000000 , (ylineBuf_rsc_5_0_i_adra_d_core[11:0])};
  wire [19:0] nl_yuv444dns_core_ylineBuf_rsc_5_0_i_1_ylineBuf_rsc_5_0_wait_dp_inst_ylineBuf_rsc_5_0_i_da_d_core;
  assign nl_yuv444dns_core_ylineBuf_rsc_5_0_i_1_ylineBuf_rsc_5_0_wait_dp_inst_ylineBuf_rsc_5_0_i_da_d_core
      = {10'b0000000000 , (ylineBuf_rsc_5_0_i_da_d_core[9:0])};
  yuv444dns_core_ylineBuf_rsc_5_0_i_1_ylineBuf_rsc_5_0_wait_ctrl yuv444dns_core_ylineBuf_rsc_5_0_i_1_ylineBuf_rsc_5_0_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .ylineBuf_rsc_5_0_i_oswt(ylineBuf_rsc_5_0_i_oswt),
      .ylineBuf_rsc_5_0_i_ena_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_5_0_i_1_ylineBuf_rsc_5_0_wait_ctrl_inst_ylineBuf_rsc_5_0_i_ena_d_core_psct[1:0]),
      .ylineBuf_rsc_5_0_i_wea_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_5_0_i_1_ylineBuf_rsc_5_0_wait_ctrl_inst_ylineBuf_rsc_5_0_i_wea_d_core_psct[1:0]),
      .ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_5_0_i_1_ylineBuf_rsc_5_0_wait_ctrl_inst_ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_5_0_i_1_ylineBuf_rsc_5_0_wait_ctrl_inst_ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .ylineBuf_rsc_5_0_i_biwt(ylineBuf_rsc_5_0_i_biwt),
      .ylineBuf_rsc_5_0_i_bdwt(ylineBuf_rsc_5_0_i_bdwt),
      .ylineBuf_rsc_5_0_i_ena_d_core_sct(ylineBuf_rsc_5_0_i_ena_d_core_sct),
      .ylineBuf_rsc_5_0_i_wea_d_core_sct(ylineBuf_rsc_5_0_i_wea_d_core_sct),
      .ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct(ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct(ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct),
      .ylineBuf_rsc_5_0_i_oswt_pff(ylineBuf_rsc_5_0_i_oswt_pff)
    );
  yuv444dns_core_ylineBuf_rsc_5_0_i_1_ylineBuf_rsc_5_0_wait_dp yuv444dns_core_ylineBuf_rsc_5_0_i_1_ylineBuf_rsc_5_0_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .ylineBuf_rsc_5_0_i_adra_d(ylineBuf_rsc_5_0_i_adra_d_reg),
      .ylineBuf_rsc_5_0_i_da_d(ylineBuf_rsc_5_0_i_da_d_reg),
      .ylineBuf_rsc_5_0_i_qa_d(ylineBuf_rsc_5_0_i_qa_d),
      .ylineBuf_rsc_5_0_i_adra_d_core(nl_yuv444dns_core_ylineBuf_rsc_5_0_i_1_ylineBuf_rsc_5_0_wait_dp_inst_ylineBuf_rsc_5_0_i_adra_d_core[23:0]),
      .ylineBuf_rsc_5_0_i_da_d_core(nl_yuv444dns_core_ylineBuf_rsc_5_0_i_1_ylineBuf_rsc_5_0_wait_dp_inst_ylineBuf_rsc_5_0_i_da_d_core[19:0]),
      .ylineBuf_rsc_5_0_i_qa_d_mxwt(ylineBuf_rsc_5_0_i_qa_d_mxwt_pconst),
      .ylineBuf_rsc_5_0_i_biwt(ylineBuf_rsc_5_0_i_biwt),
      .ylineBuf_rsc_5_0_i_bdwt(ylineBuf_rsc_5_0_i_bdwt)
    );
  assign ylineBuf_rsc_5_0_i_qa_d_mxwt = ylineBuf_rsc_5_0_i_qa_d_mxwt_pconst;
  assign ylineBuf_rsc_5_0_i_ena_d = ylineBuf_rsc_5_0_i_ena_d_core_sct;
  assign ylineBuf_rsc_5_0_i_wea_d = ylineBuf_rsc_5_0_i_wea_d_core_sct;
  assign ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  assign ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  assign ylineBuf_rsc_5_0_i_adra_d = ylineBuf_rsc_5_0_i_adra_d_reg;
  assign ylineBuf_rsc_5_0_i_da_d = ylineBuf_rsc_5_0_i_da_d_reg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ylineBuf_rsc_4_0_i_1
// ------------------------------------------------------------------


module yuv444dns_core_ylineBuf_rsc_4_0_i_1 (
  clk, arst_n, ylineBuf_rsc_4_0_i_adra_d, ylineBuf_rsc_4_0_i_da_d, ylineBuf_rsc_4_0_i_ena_d,
      ylineBuf_rsc_4_0_i_wea_d, ylineBuf_rsc_4_0_i_qa_d, ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, core_wen, core_wten,
      ylineBuf_rsc_4_0_i_oswt, ylineBuf_rsc_4_0_i_adra_d_core, ylineBuf_rsc_4_0_i_da_d_core,
      ylineBuf_rsc_4_0_i_ena_d_core_psct, ylineBuf_rsc_4_0_i_wea_d_core_psct, ylineBuf_rsc_4_0_i_qa_d_mxwt,
      ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct, ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct,
      ylineBuf_rsc_4_0_i_oswt_pff
);
  input clk;
  input arst_n;
  output [11:0] ylineBuf_rsc_4_0_i_adra_d;
  output [9:0] ylineBuf_rsc_4_0_i_da_d;
  output [1:0] ylineBuf_rsc_4_0_i_ena_d;
  output [1:0] ylineBuf_rsc_4_0_i_wea_d;
  input [19:0] ylineBuf_rsc_4_0_i_qa_d;
  output [1:0] ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  input core_wen;
  input core_wten;
  input ylineBuf_rsc_4_0_i_oswt;
  input [23:0] ylineBuf_rsc_4_0_i_adra_d_core;
  input [19:0] ylineBuf_rsc_4_0_i_da_d_core;
  input [1:0] ylineBuf_rsc_4_0_i_ena_d_core_psct;
  input [1:0] ylineBuf_rsc_4_0_i_wea_d_core_psct;
  output [9:0] ylineBuf_rsc_4_0_i_qa_d_mxwt;
  input [1:0] ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  input ylineBuf_rsc_4_0_i_oswt_pff;


  // Interconnect Declarations
  wire ylineBuf_rsc_4_0_i_biwt;
  wire ylineBuf_rsc_4_0_i_bdwt;
  wire [1:0] ylineBuf_rsc_4_0_i_ena_d_core_sct;
  wire [1:0] ylineBuf_rsc_4_0_i_wea_d_core_sct;
  wire [1:0] ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire [1:0] ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  wire [9:0] ylineBuf_rsc_4_0_i_qa_d_mxwt_pconst;
  wire [11:0] ylineBuf_rsc_4_0_i_adra_d_reg;
  wire [9:0] ylineBuf_rsc_4_0_i_da_d_reg;


  // Interconnect Declarations for Component Instantiations 
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_4_0_i_1_ylineBuf_rsc_4_0_wait_ctrl_inst_ylineBuf_rsc_4_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_4_0_i_1_ylineBuf_rsc_4_0_wait_ctrl_inst_ylineBuf_rsc_4_0_i_ena_d_core_psct
      = {1'b0 , (ylineBuf_rsc_4_0_i_ena_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_4_0_i_1_ylineBuf_rsc_4_0_wait_ctrl_inst_ylineBuf_rsc_4_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_4_0_i_1_ylineBuf_rsc_4_0_wait_ctrl_inst_ylineBuf_rsc_4_0_i_wea_d_core_psct
      = {1'b0 , (ylineBuf_rsc_4_0_i_wea_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_4_0_i_1_ylineBuf_rsc_4_0_wait_ctrl_inst_ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_4_0_i_1_ylineBuf_rsc_4_0_wait_ctrl_inst_ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , (ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_4_0_i_1_ylineBuf_rsc_4_0_wait_ctrl_inst_ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_4_0_i_1_ylineBuf_rsc_4_0_wait_ctrl_inst_ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , (ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])};
  wire [23:0] nl_yuv444dns_core_ylineBuf_rsc_4_0_i_1_ylineBuf_rsc_4_0_wait_dp_inst_ylineBuf_rsc_4_0_i_adra_d_core;
  assign nl_yuv444dns_core_ylineBuf_rsc_4_0_i_1_ylineBuf_rsc_4_0_wait_dp_inst_ylineBuf_rsc_4_0_i_adra_d_core
      = {12'b000000000000 , (ylineBuf_rsc_4_0_i_adra_d_core[11:0])};
  wire [19:0] nl_yuv444dns_core_ylineBuf_rsc_4_0_i_1_ylineBuf_rsc_4_0_wait_dp_inst_ylineBuf_rsc_4_0_i_da_d_core;
  assign nl_yuv444dns_core_ylineBuf_rsc_4_0_i_1_ylineBuf_rsc_4_0_wait_dp_inst_ylineBuf_rsc_4_0_i_da_d_core
      = {10'b0000000000 , (ylineBuf_rsc_4_0_i_da_d_core[9:0])};
  yuv444dns_core_ylineBuf_rsc_4_0_i_1_ylineBuf_rsc_4_0_wait_ctrl yuv444dns_core_ylineBuf_rsc_4_0_i_1_ylineBuf_rsc_4_0_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .ylineBuf_rsc_4_0_i_oswt(ylineBuf_rsc_4_0_i_oswt),
      .ylineBuf_rsc_4_0_i_ena_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_4_0_i_1_ylineBuf_rsc_4_0_wait_ctrl_inst_ylineBuf_rsc_4_0_i_ena_d_core_psct[1:0]),
      .ylineBuf_rsc_4_0_i_wea_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_4_0_i_1_ylineBuf_rsc_4_0_wait_ctrl_inst_ylineBuf_rsc_4_0_i_wea_d_core_psct[1:0]),
      .ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_4_0_i_1_ylineBuf_rsc_4_0_wait_ctrl_inst_ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_4_0_i_1_ylineBuf_rsc_4_0_wait_ctrl_inst_ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .ylineBuf_rsc_4_0_i_biwt(ylineBuf_rsc_4_0_i_biwt),
      .ylineBuf_rsc_4_0_i_bdwt(ylineBuf_rsc_4_0_i_bdwt),
      .ylineBuf_rsc_4_0_i_ena_d_core_sct(ylineBuf_rsc_4_0_i_ena_d_core_sct),
      .ylineBuf_rsc_4_0_i_wea_d_core_sct(ylineBuf_rsc_4_0_i_wea_d_core_sct),
      .ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct(ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct(ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct),
      .ylineBuf_rsc_4_0_i_oswt_pff(ylineBuf_rsc_4_0_i_oswt_pff)
    );
  yuv444dns_core_ylineBuf_rsc_4_0_i_1_ylineBuf_rsc_4_0_wait_dp yuv444dns_core_ylineBuf_rsc_4_0_i_1_ylineBuf_rsc_4_0_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .ylineBuf_rsc_4_0_i_adra_d(ylineBuf_rsc_4_0_i_adra_d_reg),
      .ylineBuf_rsc_4_0_i_da_d(ylineBuf_rsc_4_0_i_da_d_reg),
      .ylineBuf_rsc_4_0_i_qa_d(ylineBuf_rsc_4_0_i_qa_d),
      .ylineBuf_rsc_4_0_i_adra_d_core(nl_yuv444dns_core_ylineBuf_rsc_4_0_i_1_ylineBuf_rsc_4_0_wait_dp_inst_ylineBuf_rsc_4_0_i_adra_d_core[23:0]),
      .ylineBuf_rsc_4_0_i_da_d_core(nl_yuv444dns_core_ylineBuf_rsc_4_0_i_1_ylineBuf_rsc_4_0_wait_dp_inst_ylineBuf_rsc_4_0_i_da_d_core[19:0]),
      .ylineBuf_rsc_4_0_i_qa_d_mxwt(ylineBuf_rsc_4_0_i_qa_d_mxwt_pconst),
      .ylineBuf_rsc_4_0_i_biwt(ylineBuf_rsc_4_0_i_biwt),
      .ylineBuf_rsc_4_0_i_bdwt(ylineBuf_rsc_4_0_i_bdwt)
    );
  assign ylineBuf_rsc_4_0_i_qa_d_mxwt = ylineBuf_rsc_4_0_i_qa_d_mxwt_pconst;
  assign ylineBuf_rsc_4_0_i_ena_d = ylineBuf_rsc_4_0_i_ena_d_core_sct;
  assign ylineBuf_rsc_4_0_i_wea_d = ylineBuf_rsc_4_0_i_wea_d_core_sct;
  assign ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  assign ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  assign ylineBuf_rsc_4_0_i_adra_d = ylineBuf_rsc_4_0_i_adra_d_reg;
  assign ylineBuf_rsc_4_0_i_da_d = ylineBuf_rsc_4_0_i_da_d_reg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ylineBuf_rsc_3_0_i_1
// ------------------------------------------------------------------


module yuv444dns_core_ylineBuf_rsc_3_0_i_1 (
  clk, arst_n, ylineBuf_rsc_3_0_i_adra_d, ylineBuf_rsc_3_0_i_da_d, ylineBuf_rsc_3_0_i_ena_d,
      ylineBuf_rsc_3_0_i_wea_d, ylineBuf_rsc_3_0_i_qa_d, ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, core_wen, core_wten,
      ylineBuf_rsc_3_0_i_oswt, ylineBuf_rsc_3_0_i_adra_d_core, ylineBuf_rsc_3_0_i_da_d_core,
      ylineBuf_rsc_3_0_i_ena_d_core_psct, ylineBuf_rsc_3_0_i_wea_d_core_psct, ylineBuf_rsc_3_0_i_qa_d_mxwt,
      ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct, ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct,
      ylineBuf_rsc_3_0_i_oswt_pff
);
  input clk;
  input arst_n;
  output [11:0] ylineBuf_rsc_3_0_i_adra_d;
  output [9:0] ylineBuf_rsc_3_0_i_da_d;
  output [1:0] ylineBuf_rsc_3_0_i_ena_d;
  output [1:0] ylineBuf_rsc_3_0_i_wea_d;
  input [19:0] ylineBuf_rsc_3_0_i_qa_d;
  output [1:0] ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  input core_wen;
  input core_wten;
  input ylineBuf_rsc_3_0_i_oswt;
  input [23:0] ylineBuf_rsc_3_0_i_adra_d_core;
  input [19:0] ylineBuf_rsc_3_0_i_da_d_core;
  input [1:0] ylineBuf_rsc_3_0_i_ena_d_core_psct;
  input [1:0] ylineBuf_rsc_3_0_i_wea_d_core_psct;
  output [9:0] ylineBuf_rsc_3_0_i_qa_d_mxwt;
  input [1:0] ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  input ylineBuf_rsc_3_0_i_oswt_pff;


  // Interconnect Declarations
  wire ylineBuf_rsc_3_0_i_biwt;
  wire ylineBuf_rsc_3_0_i_bdwt;
  wire [1:0] ylineBuf_rsc_3_0_i_ena_d_core_sct;
  wire [1:0] ylineBuf_rsc_3_0_i_wea_d_core_sct;
  wire [1:0] ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire [1:0] ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  wire [9:0] ylineBuf_rsc_3_0_i_qa_d_mxwt_pconst;
  wire [11:0] ylineBuf_rsc_3_0_i_adra_d_reg;
  wire [9:0] ylineBuf_rsc_3_0_i_da_d_reg;


  // Interconnect Declarations for Component Instantiations 
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_3_0_i_1_ylineBuf_rsc_3_0_wait_ctrl_inst_ylineBuf_rsc_3_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_3_0_i_1_ylineBuf_rsc_3_0_wait_ctrl_inst_ylineBuf_rsc_3_0_i_ena_d_core_psct
      = {1'b0 , (ylineBuf_rsc_3_0_i_ena_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_3_0_i_1_ylineBuf_rsc_3_0_wait_ctrl_inst_ylineBuf_rsc_3_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_3_0_i_1_ylineBuf_rsc_3_0_wait_ctrl_inst_ylineBuf_rsc_3_0_i_wea_d_core_psct
      = {1'b0 , (ylineBuf_rsc_3_0_i_wea_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_3_0_i_1_ylineBuf_rsc_3_0_wait_ctrl_inst_ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_3_0_i_1_ylineBuf_rsc_3_0_wait_ctrl_inst_ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , (ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_3_0_i_1_ylineBuf_rsc_3_0_wait_ctrl_inst_ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_3_0_i_1_ylineBuf_rsc_3_0_wait_ctrl_inst_ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , (ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])};
  wire [23:0] nl_yuv444dns_core_ylineBuf_rsc_3_0_i_1_ylineBuf_rsc_3_0_wait_dp_inst_ylineBuf_rsc_3_0_i_adra_d_core;
  assign nl_yuv444dns_core_ylineBuf_rsc_3_0_i_1_ylineBuf_rsc_3_0_wait_dp_inst_ylineBuf_rsc_3_0_i_adra_d_core
      = {12'b000000000000 , (ylineBuf_rsc_3_0_i_adra_d_core[11:0])};
  wire [19:0] nl_yuv444dns_core_ylineBuf_rsc_3_0_i_1_ylineBuf_rsc_3_0_wait_dp_inst_ylineBuf_rsc_3_0_i_da_d_core;
  assign nl_yuv444dns_core_ylineBuf_rsc_3_0_i_1_ylineBuf_rsc_3_0_wait_dp_inst_ylineBuf_rsc_3_0_i_da_d_core
      = {10'b0000000000 , (ylineBuf_rsc_3_0_i_da_d_core[9:0])};
  yuv444dns_core_ylineBuf_rsc_3_0_i_1_ylineBuf_rsc_3_0_wait_ctrl yuv444dns_core_ylineBuf_rsc_3_0_i_1_ylineBuf_rsc_3_0_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .ylineBuf_rsc_3_0_i_oswt(ylineBuf_rsc_3_0_i_oswt),
      .ylineBuf_rsc_3_0_i_ena_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_3_0_i_1_ylineBuf_rsc_3_0_wait_ctrl_inst_ylineBuf_rsc_3_0_i_ena_d_core_psct[1:0]),
      .ylineBuf_rsc_3_0_i_wea_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_3_0_i_1_ylineBuf_rsc_3_0_wait_ctrl_inst_ylineBuf_rsc_3_0_i_wea_d_core_psct[1:0]),
      .ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_3_0_i_1_ylineBuf_rsc_3_0_wait_ctrl_inst_ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_3_0_i_1_ylineBuf_rsc_3_0_wait_ctrl_inst_ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .ylineBuf_rsc_3_0_i_biwt(ylineBuf_rsc_3_0_i_biwt),
      .ylineBuf_rsc_3_0_i_bdwt(ylineBuf_rsc_3_0_i_bdwt),
      .ylineBuf_rsc_3_0_i_ena_d_core_sct(ylineBuf_rsc_3_0_i_ena_d_core_sct),
      .ylineBuf_rsc_3_0_i_wea_d_core_sct(ylineBuf_rsc_3_0_i_wea_d_core_sct),
      .ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct(ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct(ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct),
      .ylineBuf_rsc_3_0_i_oswt_pff(ylineBuf_rsc_3_0_i_oswt_pff)
    );
  yuv444dns_core_ylineBuf_rsc_3_0_i_1_ylineBuf_rsc_3_0_wait_dp yuv444dns_core_ylineBuf_rsc_3_0_i_1_ylineBuf_rsc_3_0_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .ylineBuf_rsc_3_0_i_adra_d(ylineBuf_rsc_3_0_i_adra_d_reg),
      .ylineBuf_rsc_3_0_i_da_d(ylineBuf_rsc_3_0_i_da_d_reg),
      .ylineBuf_rsc_3_0_i_qa_d(ylineBuf_rsc_3_0_i_qa_d),
      .ylineBuf_rsc_3_0_i_adra_d_core(nl_yuv444dns_core_ylineBuf_rsc_3_0_i_1_ylineBuf_rsc_3_0_wait_dp_inst_ylineBuf_rsc_3_0_i_adra_d_core[23:0]),
      .ylineBuf_rsc_3_0_i_da_d_core(nl_yuv444dns_core_ylineBuf_rsc_3_0_i_1_ylineBuf_rsc_3_0_wait_dp_inst_ylineBuf_rsc_3_0_i_da_d_core[19:0]),
      .ylineBuf_rsc_3_0_i_qa_d_mxwt(ylineBuf_rsc_3_0_i_qa_d_mxwt_pconst),
      .ylineBuf_rsc_3_0_i_biwt(ylineBuf_rsc_3_0_i_biwt),
      .ylineBuf_rsc_3_0_i_bdwt(ylineBuf_rsc_3_0_i_bdwt)
    );
  assign ylineBuf_rsc_3_0_i_qa_d_mxwt = ylineBuf_rsc_3_0_i_qa_d_mxwt_pconst;
  assign ylineBuf_rsc_3_0_i_ena_d = ylineBuf_rsc_3_0_i_ena_d_core_sct;
  assign ylineBuf_rsc_3_0_i_wea_d = ylineBuf_rsc_3_0_i_wea_d_core_sct;
  assign ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  assign ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  assign ylineBuf_rsc_3_0_i_adra_d = ylineBuf_rsc_3_0_i_adra_d_reg;
  assign ylineBuf_rsc_3_0_i_da_d = ylineBuf_rsc_3_0_i_da_d_reg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ylineBuf_rsc_2_0_i_1
// ------------------------------------------------------------------


module yuv444dns_core_ylineBuf_rsc_2_0_i_1 (
  clk, arst_n, ylineBuf_rsc_2_0_i_adra_d, ylineBuf_rsc_2_0_i_da_d, ylineBuf_rsc_2_0_i_ena_d,
      ylineBuf_rsc_2_0_i_wea_d, ylineBuf_rsc_2_0_i_qa_d, ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, core_wen, core_wten,
      ylineBuf_rsc_2_0_i_oswt, ylineBuf_rsc_2_0_i_adra_d_core, ylineBuf_rsc_2_0_i_da_d_core,
      ylineBuf_rsc_2_0_i_ena_d_core_psct, ylineBuf_rsc_2_0_i_wea_d_core_psct, ylineBuf_rsc_2_0_i_qa_d_mxwt,
      ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct, ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct,
      ylineBuf_rsc_2_0_i_oswt_pff
);
  input clk;
  input arst_n;
  output [11:0] ylineBuf_rsc_2_0_i_adra_d;
  output [9:0] ylineBuf_rsc_2_0_i_da_d;
  output [1:0] ylineBuf_rsc_2_0_i_ena_d;
  output [1:0] ylineBuf_rsc_2_0_i_wea_d;
  input [19:0] ylineBuf_rsc_2_0_i_qa_d;
  output [1:0] ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  input core_wen;
  input core_wten;
  input ylineBuf_rsc_2_0_i_oswt;
  input [23:0] ylineBuf_rsc_2_0_i_adra_d_core;
  input [19:0] ylineBuf_rsc_2_0_i_da_d_core;
  input [1:0] ylineBuf_rsc_2_0_i_ena_d_core_psct;
  input [1:0] ylineBuf_rsc_2_0_i_wea_d_core_psct;
  output [9:0] ylineBuf_rsc_2_0_i_qa_d_mxwt;
  input [1:0] ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  input ylineBuf_rsc_2_0_i_oswt_pff;


  // Interconnect Declarations
  wire ylineBuf_rsc_2_0_i_biwt;
  wire ylineBuf_rsc_2_0_i_bdwt;
  wire [1:0] ylineBuf_rsc_2_0_i_ena_d_core_sct;
  wire [1:0] ylineBuf_rsc_2_0_i_wea_d_core_sct;
  wire [1:0] ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire [1:0] ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  wire [9:0] ylineBuf_rsc_2_0_i_qa_d_mxwt_pconst;
  wire [11:0] ylineBuf_rsc_2_0_i_adra_d_reg;
  wire [9:0] ylineBuf_rsc_2_0_i_da_d_reg;


  // Interconnect Declarations for Component Instantiations 
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_2_0_i_1_ylineBuf_rsc_2_0_wait_ctrl_inst_ylineBuf_rsc_2_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_2_0_i_1_ylineBuf_rsc_2_0_wait_ctrl_inst_ylineBuf_rsc_2_0_i_ena_d_core_psct
      = {1'b0 , (ylineBuf_rsc_2_0_i_ena_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_2_0_i_1_ylineBuf_rsc_2_0_wait_ctrl_inst_ylineBuf_rsc_2_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_2_0_i_1_ylineBuf_rsc_2_0_wait_ctrl_inst_ylineBuf_rsc_2_0_i_wea_d_core_psct
      = {1'b0 , (ylineBuf_rsc_2_0_i_wea_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_2_0_i_1_ylineBuf_rsc_2_0_wait_ctrl_inst_ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_2_0_i_1_ylineBuf_rsc_2_0_wait_ctrl_inst_ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , (ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_2_0_i_1_ylineBuf_rsc_2_0_wait_ctrl_inst_ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_2_0_i_1_ylineBuf_rsc_2_0_wait_ctrl_inst_ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , (ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])};
  wire [23:0] nl_yuv444dns_core_ylineBuf_rsc_2_0_i_1_ylineBuf_rsc_2_0_wait_dp_inst_ylineBuf_rsc_2_0_i_adra_d_core;
  assign nl_yuv444dns_core_ylineBuf_rsc_2_0_i_1_ylineBuf_rsc_2_0_wait_dp_inst_ylineBuf_rsc_2_0_i_adra_d_core
      = {12'b000000000000 , (ylineBuf_rsc_2_0_i_adra_d_core[11:0])};
  wire [19:0] nl_yuv444dns_core_ylineBuf_rsc_2_0_i_1_ylineBuf_rsc_2_0_wait_dp_inst_ylineBuf_rsc_2_0_i_da_d_core;
  assign nl_yuv444dns_core_ylineBuf_rsc_2_0_i_1_ylineBuf_rsc_2_0_wait_dp_inst_ylineBuf_rsc_2_0_i_da_d_core
      = {10'b0000000000 , (ylineBuf_rsc_2_0_i_da_d_core[9:0])};
  yuv444dns_core_ylineBuf_rsc_2_0_i_1_ylineBuf_rsc_2_0_wait_ctrl yuv444dns_core_ylineBuf_rsc_2_0_i_1_ylineBuf_rsc_2_0_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .ylineBuf_rsc_2_0_i_oswt(ylineBuf_rsc_2_0_i_oswt),
      .ylineBuf_rsc_2_0_i_ena_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_2_0_i_1_ylineBuf_rsc_2_0_wait_ctrl_inst_ylineBuf_rsc_2_0_i_ena_d_core_psct[1:0]),
      .ylineBuf_rsc_2_0_i_wea_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_2_0_i_1_ylineBuf_rsc_2_0_wait_ctrl_inst_ylineBuf_rsc_2_0_i_wea_d_core_psct[1:0]),
      .ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_2_0_i_1_ylineBuf_rsc_2_0_wait_ctrl_inst_ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_2_0_i_1_ylineBuf_rsc_2_0_wait_ctrl_inst_ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .ylineBuf_rsc_2_0_i_biwt(ylineBuf_rsc_2_0_i_biwt),
      .ylineBuf_rsc_2_0_i_bdwt(ylineBuf_rsc_2_0_i_bdwt),
      .ylineBuf_rsc_2_0_i_ena_d_core_sct(ylineBuf_rsc_2_0_i_ena_d_core_sct),
      .ylineBuf_rsc_2_0_i_wea_d_core_sct(ylineBuf_rsc_2_0_i_wea_d_core_sct),
      .ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct(ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct(ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct),
      .ylineBuf_rsc_2_0_i_oswt_pff(ylineBuf_rsc_2_0_i_oswt_pff)
    );
  yuv444dns_core_ylineBuf_rsc_2_0_i_1_ylineBuf_rsc_2_0_wait_dp yuv444dns_core_ylineBuf_rsc_2_0_i_1_ylineBuf_rsc_2_0_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .ylineBuf_rsc_2_0_i_adra_d(ylineBuf_rsc_2_0_i_adra_d_reg),
      .ylineBuf_rsc_2_0_i_da_d(ylineBuf_rsc_2_0_i_da_d_reg),
      .ylineBuf_rsc_2_0_i_qa_d(ylineBuf_rsc_2_0_i_qa_d),
      .ylineBuf_rsc_2_0_i_adra_d_core(nl_yuv444dns_core_ylineBuf_rsc_2_0_i_1_ylineBuf_rsc_2_0_wait_dp_inst_ylineBuf_rsc_2_0_i_adra_d_core[23:0]),
      .ylineBuf_rsc_2_0_i_da_d_core(nl_yuv444dns_core_ylineBuf_rsc_2_0_i_1_ylineBuf_rsc_2_0_wait_dp_inst_ylineBuf_rsc_2_0_i_da_d_core[19:0]),
      .ylineBuf_rsc_2_0_i_qa_d_mxwt(ylineBuf_rsc_2_0_i_qa_d_mxwt_pconst),
      .ylineBuf_rsc_2_0_i_biwt(ylineBuf_rsc_2_0_i_biwt),
      .ylineBuf_rsc_2_0_i_bdwt(ylineBuf_rsc_2_0_i_bdwt)
    );
  assign ylineBuf_rsc_2_0_i_qa_d_mxwt = ylineBuf_rsc_2_0_i_qa_d_mxwt_pconst;
  assign ylineBuf_rsc_2_0_i_ena_d = ylineBuf_rsc_2_0_i_ena_d_core_sct;
  assign ylineBuf_rsc_2_0_i_wea_d = ylineBuf_rsc_2_0_i_wea_d_core_sct;
  assign ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  assign ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  assign ylineBuf_rsc_2_0_i_adra_d = ylineBuf_rsc_2_0_i_adra_d_reg;
  assign ylineBuf_rsc_2_0_i_da_d = ylineBuf_rsc_2_0_i_da_d_reg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ylineBuf_rsc_1_0_i_1
// ------------------------------------------------------------------


module yuv444dns_core_ylineBuf_rsc_1_0_i_1 (
  clk, arst_n, ylineBuf_rsc_1_0_i_adra_d, ylineBuf_rsc_1_0_i_da_d, ylineBuf_rsc_1_0_i_ena_d,
      ylineBuf_rsc_1_0_i_wea_d, ylineBuf_rsc_1_0_i_qa_d, ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, core_wen, core_wten,
      ylineBuf_rsc_1_0_i_oswt, ylineBuf_rsc_1_0_i_adra_d_core, ylineBuf_rsc_1_0_i_da_d_core,
      ylineBuf_rsc_1_0_i_ena_d_core_psct, ylineBuf_rsc_1_0_i_wea_d_core_psct, ylineBuf_rsc_1_0_i_qa_d_mxwt,
      ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct, ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct,
      ylineBuf_rsc_1_0_i_oswt_pff
);
  input clk;
  input arst_n;
  output [11:0] ylineBuf_rsc_1_0_i_adra_d;
  output [9:0] ylineBuf_rsc_1_0_i_da_d;
  output [1:0] ylineBuf_rsc_1_0_i_ena_d;
  output [1:0] ylineBuf_rsc_1_0_i_wea_d;
  input [19:0] ylineBuf_rsc_1_0_i_qa_d;
  output [1:0] ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  input core_wen;
  input core_wten;
  input ylineBuf_rsc_1_0_i_oswt;
  input [23:0] ylineBuf_rsc_1_0_i_adra_d_core;
  input [19:0] ylineBuf_rsc_1_0_i_da_d_core;
  input [1:0] ylineBuf_rsc_1_0_i_ena_d_core_psct;
  input [1:0] ylineBuf_rsc_1_0_i_wea_d_core_psct;
  output [9:0] ylineBuf_rsc_1_0_i_qa_d_mxwt;
  input [1:0] ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  input ylineBuf_rsc_1_0_i_oswt_pff;


  // Interconnect Declarations
  wire ylineBuf_rsc_1_0_i_biwt;
  wire ylineBuf_rsc_1_0_i_bdwt;
  wire [1:0] ylineBuf_rsc_1_0_i_ena_d_core_sct;
  wire [1:0] ylineBuf_rsc_1_0_i_wea_d_core_sct;
  wire [1:0] ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire [1:0] ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  wire [9:0] ylineBuf_rsc_1_0_i_qa_d_mxwt_pconst;
  wire [11:0] ylineBuf_rsc_1_0_i_adra_d_reg;
  wire [9:0] ylineBuf_rsc_1_0_i_da_d_reg;


  // Interconnect Declarations for Component Instantiations 
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_1_0_i_1_ylineBuf_rsc_1_0_wait_ctrl_inst_ylineBuf_rsc_1_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_1_0_i_1_ylineBuf_rsc_1_0_wait_ctrl_inst_ylineBuf_rsc_1_0_i_ena_d_core_psct
      = {1'b0 , (ylineBuf_rsc_1_0_i_ena_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_1_0_i_1_ylineBuf_rsc_1_0_wait_ctrl_inst_ylineBuf_rsc_1_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_1_0_i_1_ylineBuf_rsc_1_0_wait_ctrl_inst_ylineBuf_rsc_1_0_i_wea_d_core_psct
      = {1'b0 , (ylineBuf_rsc_1_0_i_wea_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_1_0_i_1_ylineBuf_rsc_1_0_wait_ctrl_inst_ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_1_0_i_1_ylineBuf_rsc_1_0_wait_ctrl_inst_ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , (ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_1_0_i_1_ylineBuf_rsc_1_0_wait_ctrl_inst_ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_1_0_i_1_ylineBuf_rsc_1_0_wait_ctrl_inst_ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , (ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])};
  wire [23:0] nl_yuv444dns_core_ylineBuf_rsc_1_0_i_1_ylineBuf_rsc_1_0_wait_dp_inst_ylineBuf_rsc_1_0_i_adra_d_core;
  assign nl_yuv444dns_core_ylineBuf_rsc_1_0_i_1_ylineBuf_rsc_1_0_wait_dp_inst_ylineBuf_rsc_1_0_i_adra_d_core
      = {12'b000000000000 , (ylineBuf_rsc_1_0_i_adra_d_core[11:0])};
  wire [19:0] nl_yuv444dns_core_ylineBuf_rsc_1_0_i_1_ylineBuf_rsc_1_0_wait_dp_inst_ylineBuf_rsc_1_0_i_da_d_core;
  assign nl_yuv444dns_core_ylineBuf_rsc_1_0_i_1_ylineBuf_rsc_1_0_wait_dp_inst_ylineBuf_rsc_1_0_i_da_d_core
      = {10'b0000000000 , (ylineBuf_rsc_1_0_i_da_d_core[9:0])};
  yuv444dns_core_ylineBuf_rsc_1_0_i_1_ylineBuf_rsc_1_0_wait_ctrl yuv444dns_core_ylineBuf_rsc_1_0_i_1_ylineBuf_rsc_1_0_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .ylineBuf_rsc_1_0_i_oswt(ylineBuf_rsc_1_0_i_oswt),
      .ylineBuf_rsc_1_0_i_ena_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_1_0_i_1_ylineBuf_rsc_1_0_wait_ctrl_inst_ylineBuf_rsc_1_0_i_ena_d_core_psct[1:0]),
      .ylineBuf_rsc_1_0_i_wea_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_1_0_i_1_ylineBuf_rsc_1_0_wait_ctrl_inst_ylineBuf_rsc_1_0_i_wea_d_core_psct[1:0]),
      .ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_1_0_i_1_ylineBuf_rsc_1_0_wait_ctrl_inst_ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_1_0_i_1_ylineBuf_rsc_1_0_wait_ctrl_inst_ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .ylineBuf_rsc_1_0_i_biwt(ylineBuf_rsc_1_0_i_biwt),
      .ylineBuf_rsc_1_0_i_bdwt(ylineBuf_rsc_1_0_i_bdwt),
      .ylineBuf_rsc_1_0_i_ena_d_core_sct(ylineBuf_rsc_1_0_i_ena_d_core_sct),
      .ylineBuf_rsc_1_0_i_wea_d_core_sct(ylineBuf_rsc_1_0_i_wea_d_core_sct),
      .ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct(ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct(ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct),
      .ylineBuf_rsc_1_0_i_oswt_pff(ylineBuf_rsc_1_0_i_oswt_pff)
    );
  yuv444dns_core_ylineBuf_rsc_1_0_i_1_ylineBuf_rsc_1_0_wait_dp yuv444dns_core_ylineBuf_rsc_1_0_i_1_ylineBuf_rsc_1_0_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .ylineBuf_rsc_1_0_i_adra_d(ylineBuf_rsc_1_0_i_adra_d_reg),
      .ylineBuf_rsc_1_0_i_da_d(ylineBuf_rsc_1_0_i_da_d_reg),
      .ylineBuf_rsc_1_0_i_qa_d(ylineBuf_rsc_1_0_i_qa_d),
      .ylineBuf_rsc_1_0_i_adra_d_core(nl_yuv444dns_core_ylineBuf_rsc_1_0_i_1_ylineBuf_rsc_1_0_wait_dp_inst_ylineBuf_rsc_1_0_i_adra_d_core[23:0]),
      .ylineBuf_rsc_1_0_i_da_d_core(nl_yuv444dns_core_ylineBuf_rsc_1_0_i_1_ylineBuf_rsc_1_0_wait_dp_inst_ylineBuf_rsc_1_0_i_da_d_core[19:0]),
      .ylineBuf_rsc_1_0_i_qa_d_mxwt(ylineBuf_rsc_1_0_i_qa_d_mxwt_pconst),
      .ylineBuf_rsc_1_0_i_biwt(ylineBuf_rsc_1_0_i_biwt),
      .ylineBuf_rsc_1_0_i_bdwt(ylineBuf_rsc_1_0_i_bdwt)
    );
  assign ylineBuf_rsc_1_0_i_qa_d_mxwt = ylineBuf_rsc_1_0_i_qa_d_mxwt_pconst;
  assign ylineBuf_rsc_1_0_i_ena_d = ylineBuf_rsc_1_0_i_ena_d_core_sct;
  assign ylineBuf_rsc_1_0_i_wea_d = ylineBuf_rsc_1_0_i_wea_d_core_sct;
  assign ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  assign ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  assign ylineBuf_rsc_1_0_i_adra_d = ylineBuf_rsc_1_0_i_adra_d_reg;
  assign ylineBuf_rsc_1_0_i_da_d = ylineBuf_rsc_1_0_i_da_d_reg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_ylineBuf_rsc_0_0_i_1
// ------------------------------------------------------------------


module yuv444dns_core_ylineBuf_rsc_0_0_i_1 (
  clk, arst_n, ylineBuf_rsc_0_0_i_adra_d, ylineBuf_rsc_0_0_i_da_d, ylineBuf_rsc_0_0_i_ena_d,
      ylineBuf_rsc_0_0_i_wea_d, ylineBuf_rsc_0_0_i_qa_d, ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, core_wen, core_wten,
      ylineBuf_rsc_0_0_i_oswt, ylineBuf_rsc_0_0_i_adra_d_core, ylineBuf_rsc_0_0_i_da_d_core,
      ylineBuf_rsc_0_0_i_ena_d_core_psct, ylineBuf_rsc_0_0_i_wea_d_core_psct, ylineBuf_rsc_0_0_i_qa_d_mxwt,
      ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct, ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct,
      ylineBuf_rsc_0_0_i_oswt_pff
);
  input clk;
  input arst_n;
  output [11:0] ylineBuf_rsc_0_0_i_adra_d;
  output [9:0] ylineBuf_rsc_0_0_i_da_d;
  output [1:0] ylineBuf_rsc_0_0_i_ena_d;
  output [1:0] ylineBuf_rsc_0_0_i_wea_d;
  input [19:0] ylineBuf_rsc_0_0_i_qa_d;
  output [1:0] ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  input core_wen;
  input core_wten;
  input ylineBuf_rsc_0_0_i_oswt;
  input [23:0] ylineBuf_rsc_0_0_i_adra_d_core;
  input [19:0] ylineBuf_rsc_0_0_i_da_d_core;
  input [1:0] ylineBuf_rsc_0_0_i_ena_d_core_psct;
  input [1:0] ylineBuf_rsc_0_0_i_wea_d_core_psct;
  output [9:0] ylineBuf_rsc_0_0_i_qa_d_mxwt;
  input [1:0] ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  input ylineBuf_rsc_0_0_i_oswt_pff;


  // Interconnect Declarations
  wire ylineBuf_rsc_0_0_i_biwt;
  wire ylineBuf_rsc_0_0_i_bdwt;
  wire [1:0] ylineBuf_rsc_0_0_i_ena_d_core_sct;
  wire [1:0] ylineBuf_rsc_0_0_i_wea_d_core_sct;
  wire [1:0] ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire [1:0] ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  wire [9:0] ylineBuf_rsc_0_0_i_qa_d_mxwt_pconst;
  wire [11:0] ylineBuf_rsc_0_0_i_adra_d_reg;
  wire [9:0] ylineBuf_rsc_0_0_i_da_d_reg;


  // Interconnect Declarations for Component Instantiations 
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_0_0_i_1_ylineBuf_rsc_0_0_wait_ctrl_inst_ylineBuf_rsc_0_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_0_0_i_1_ylineBuf_rsc_0_0_wait_ctrl_inst_ylineBuf_rsc_0_0_i_ena_d_core_psct
      = {1'b0 , (ylineBuf_rsc_0_0_i_ena_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_0_0_i_1_ylineBuf_rsc_0_0_wait_ctrl_inst_ylineBuf_rsc_0_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_0_0_i_1_ylineBuf_rsc_0_0_wait_ctrl_inst_ylineBuf_rsc_0_0_i_wea_d_core_psct
      = {1'b0 , (ylineBuf_rsc_0_0_i_wea_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_0_0_i_1_ylineBuf_rsc_0_0_wait_ctrl_inst_ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_0_0_i_1_ylineBuf_rsc_0_0_wait_ctrl_inst_ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , (ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_0_0_i_1_ylineBuf_rsc_0_0_wait_ctrl_inst_ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_0_0_i_1_ylineBuf_rsc_0_0_wait_ctrl_inst_ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , (ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])};
  wire [23:0] nl_yuv444dns_core_ylineBuf_rsc_0_0_i_1_ylineBuf_rsc_0_0_wait_dp_inst_ylineBuf_rsc_0_0_i_adra_d_core;
  assign nl_yuv444dns_core_ylineBuf_rsc_0_0_i_1_ylineBuf_rsc_0_0_wait_dp_inst_ylineBuf_rsc_0_0_i_adra_d_core
      = {12'b000000000000 , (ylineBuf_rsc_0_0_i_adra_d_core[11:0])};
  wire [19:0] nl_yuv444dns_core_ylineBuf_rsc_0_0_i_1_ylineBuf_rsc_0_0_wait_dp_inst_ylineBuf_rsc_0_0_i_da_d_core;
  assign nl_yuv444dns_core_ylineBuf_rsc_0_0_i_1_ylineBuf_rsc_0_0_wait_dp_inst_ylineBuf_rsc_0_0_i_da_d_core
      = {10'b0000000000 , (ylineBuf_rsc_0_0_i_da_d_core[9:0])};
  yuv444dns_core_ylineBuf_rsc_0_0_i_1_ylineBuf_rsc_0_0_wait_ctrl yuv444dns_core_ylineBuf_rsc_0_0_i_1_ylineBuf_rsc_0_0_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .ylineBuf_rsc_0_0_i_oswt(ylineBuf_rsc_0_0_i_oswt),
      .ylineBuf_rsc_0_0_i_ena_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_0_0_i_1_ylineBuf_rsc_0_0_wait_ctrl_inst_ylineBuf_rsc_0_0_i_ena_d_core_psct[1:0]),
      .ylineBuf_rsc_0_0_i_wea_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_0_0_i_1_ylineBuf_rsc_0_0_wait_ctrl_inst_ylineBuf_rsc_0_0_i_wea_d_core_psct[1:0]),
      .ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_0_0_i_1_ylineBuf_rsc_0_0_wait_ctrl_inst_ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_0_0_i_1_ylineBuf_rsc_0_0_wait_ctrl_inst_ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .ylineBuf_rsc_0_0_i_biwt(ylineBuf_rsc_0_0_i_biwt),
      .ylineBuf_rsc_0_0_i_bdwt(ylineBuf_rsc_0_0_i_bdwt),
      .ylineBuf_rsc_0_0_i_ena_d_core_sct(ylineBuf_rsc_0_0_i_ena_d_core_sct),
      .ylineBuf_rsc_0_0_i_wea_d_core_sct(ylineBuf_rsc_0_0_i_wea_d_core_sct),
      .ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct(ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct(ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct),
      .ylineBuf_rsc_0_0_i_oswt_pff(ylineBuf_rsc_0_0_i_oswt_pff)
    );
  yuv444dns_core_ylineBuf_rsc_0_0_i_1_ylineBuf_rsc_0_0_wait_dp yuv444dns_core_ylineBuf_rsc_0_0_i_1_ylineBuf_rsc_0_0_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .ylineBuf_rsc_0_0_i_adra_d(ylineBuf_rsc_0_0_i_adra_d_reg),
      .ylineBuf_rsc_0_0_i_da_d(ylineBuf_rsc_0_0_i_da_d_reg),
      .ylineBuf_rsc_0_0_i_qa_d(ylineBuf_rsc_0_0_i_qa_d),
      .ylineBuf_rsc_0_0_i_adra_d_core(nl_yuv444dns_core_ylineBuf_rsc_0_0_i_1_ylineBuf_rsc_0_0_wait_dp_inst_ylineBuf_rsc_0_0_i_adra_d_core[23:0]),
      .ylineBuf_rsc_0_0_i_da_d_core(nl_yuv444dns_core_ylineBuf_rsc_0_0_i_1_ylineBuf_rsc_0_0_wait_dp_inst_ylineBuf_rsc_0_0_i_da_d_core[19:0]),
      .ylineBuf_rsc_0_0_i_qa_d_mxwt(ylineBuf_rsc_0_0_i_qa_d_mxwt_pconst),
      .ylineBuf_rsc_0_0_i_biwt(ylineBuf_rsc_0_0_i_biwt),
      .ylineBuf_rsc_0_0_i_bdwt(ylineBuf_rsc_0_0_i_bdwt)
    );
  assign ylineBuf_rsc_0_0_i_qa_d_mxwt = ylineBuf_rsc_0_0_i_qa_d_mxwt_pconst;
  assign ylineBuf_rsc_0_0_i_ena_d = ylineBuf_rsc_0_0_i_ena_d_core_sct;
  assign ylineBuf_rsc_0_0_i_wea_d = ylineBuf_rsc_0_0_i_wea_d_core_sct;
  assign ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  assign ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  assign ylineBuf_rsc_0_0_i_adra_d = ylineBuf_rsc_0_0_i_adra_d_reg;
  assign ylineBuf_rsc_0_0_i_da_d = ylineBuf_rsc_0_0_i_da_d_reg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_dst_v_rsci
// ------------------------------------------------------------------


module yuv444dns_core_dst_v_rsci (
  clk, arst_n, dst_v_rsc_dat, dst_v_rsc_vld, dst_v_rsc_rdy, core_wen, dst_v_rsci_oswt,
      dst_v_rsci_wen_comp, dst_v_rsci_idat
);
  input clk;
  input arst_n;
  output [9:0] dst_v_rsc_dat;
  output dst_v_rsc_vld;
  input dst_v_rsc_rdy;
  input core_wen;
  input dst_v_rsci_oswt;
  output dst_v_rsci_wen_comp;
  input [9:0] dst_v_rsci_idat;


  // Interconnect Declarations
  wire dst_v_rsci_irdy;
  wire dst_v_rsci_biwt;
  wire dst_v_rsci_bdwt;
  wire dst_v_rsci_bcwt;
  wire dst_v_rsci_ivld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_wait_v1 #(.rscid(32'sd325),
  .width(32'sd10)) dst_v_rsci (
      .irdy(dst_v_rsci_irdy),
      .ivld(dst_v_rsci_ivld_core_sct),
      .idat(dst_v_rsci_idat),
      .rdy(dst_v_rsc_rdy),
      .vld(dst_v_rsc_vld),
      .dat(dst_v_rsc_dat)
    );
  yuv444dns_core_dst_v_rsci_dst_v_wait_ctrl yuv444dns_core_dst_v_rsci_dst_v_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .dst_v_rsci_oswt(dst_v_rsci_oswt),
      .dst_v_rsci_irdy(dst_v_rsci_irdy),
      .dst_v_rsci_biwt(dst_v_rsci_biwt),
      .dst_v_rsci_bdwt(dst_v_rsci_bdwt),
      .dst_v_rsci_bcwt(dst_v_rsci_bcwt),
      .dst_v_rsci_ivld_core_sct(dst_v_rsci_ivld_core_sct)
    );
  yuv444dns_core_dst_v_rsci_dst_v_wait_dp yuv444dns_core_dst_v_rsci_dst_v_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .dst_v_rsci_oswt(dst_v_rsci_oswt),
      .dst_v_rsci_wen_comp(dst_v_rsci_wen_comp),
      .dst_v_rsci_biwt(dst_v_rsci_biwt),
      .dst_v_rsci_bdwt(dst_v_rsci_bdwt),
      .dst_v_rsci_bcwt(dst_v_rsci_bcwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_dst_u_rsci
// ------------------------------------------------------------------


module yuv444dns_core_dst_u_rsci (
  clk, arst_n, dst_u_rsc_dat, dst_u_rsc_vld, dst_u_rsc_rdy, core_wen, dst_u_rsci_oswt,
      dst_u_rsci_wen_comp, dst_u_rsci_idat
);
  input clk;
  input arst_n;
  output [9:0] dst_u_rsc_dat;
  output dst_u_rsc_vld;
  input dst_u_rsc_rdy;
  input core_wen;
  input dst_u_rsci_oswt;
  output dst_u_rsci_wen_comp;
  input [9:0] dst_u_rsci_idat;


  // Interconnect Declarations
  wire dst_u_rsci_irdy;
  wire dst_u_rsci_biwt;
  wire dst_u_rsci_bdwt;
  wire dst_u_rsci_bcwt;
  wire dst_u_rsci_ivld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_wait_v1 #(.rscid(32'sd324),
  .width(32'sd10)) dst_u_rsci (
      .irdy(dst_u_rsci_irdy),
      .ivld(dst_u_rsci_ivld_core_sct),
      .idat(dst_u_rsci_idat),
      .rdy(dst_u_rsc_rdy),
      .vld(dst_u_rsc_vld),
      .dat(dst_u_rsc_dat)
    );
  yuv444dns_core_dst_u_rsci_dst_u_wait_ctrl yuv444dns_core_dst_u_rsci_dst_u_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .dst_u_rsci_oswt(dst_u_rsci_oswt),
      .dst_u_rsci_irdy(dst_u_rsci_irdy),
      .dst_u_rsci_biwt(dst_u_rsci_biwt),
      .dst_u_rsci_bdwt(dst_u_rsci_bdwt),
      .dst_u_rsci_bcwt(dst_u_rsci_bcwt),
      .dst_u_rsci_ivld_core_sct(dst_u_rsci_ivld_core_sct)
    );
  yuv444dns_core_dst_u_rsci_dst_u_wait_dp yuv444dns_core_dst_u_rsci_dst_u_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .dst_u_rsci_oswt(dst_u_rsci_oswt),
      .dst_u_rsci_wen_comp(dst_u_rsci_wen_comp),
      .dst_u_rsci_biwt(dst_u_rsci_biwt),
      .dst_u_rsci_bdwt(dst_u_rsci_bdwt),
      .dst_u_rsci_bcwt(dst_u_rsci_bcwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_dst_y_rsci
// ------------------------------------------------------------------


module yuv444dns_core_dst_y_rsci (
  clk, arst_n, dst_y_rsc_dat, dst_y_rsc_vld, dst_y_rsc_rdy, core_wen, dst_y_rsci_oswt,
      dst_y_rsci_wen_comp, dst_y_rsci_idat
);
  input clk;
  input arst_n;
  output [9:0] dst_y_rsc_dat;
  output dst_y_rsc_vld;
  input dst_y_rsc_rdy;
  input core_wen;
  input dst_y_rsci_oswt;
  output dst_y_rsci_wen_comp;
  input [9:0] dst_y_rsci_idat;


  // Interconnect Declarations
  wire dst_y_rsci_irdy;
  wire dst_y_rsci_biwt;
  wire dst_y_rsci_bdwt;
  wire dst_y_rsci_bcwt;
  wire dst_y_rsci_ivld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_wait_v1 #(.rscid(32'sd323),
  .width(32'sd10)) dst_y_rsci (
      .irdy(dst_y_rsci_irdy),
      .ivld(dst_y_rsci_ivld_core_sct),
      .idat(dst_y_rsci_idat),
      .rdy(dst_y_rsc_rdy),
      .vld(dst_y_rsc_vld),
      .dat(dst_y_rsc_dat)
    );
  yuv444dns_core_dst_y_rsci_dst_y_wait_ctrl yuv444dns_core_dst_y_rsci_dst_y_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .dst_y_rsci_oswt(dst_y_rsci_oswt),
      .dst_y_rsci_irdy(dst_y_rsci_irdy),
      .dst_y_rsci_biwt(dst_y_rsci_biwt),
      .dst_y_rsci_bdwt(dst_y_rsci_bdwt),
      .dst_y_rsci_bcwt(dst_y_rsci_bcwt),
      .dst_y_rsci_ivld_core_sct(dst_y_rsci_ivld_core_sct)
    );
  yuv444dns_core_dst_y_rsci_dst_y_wait_dp yuv444dns_core_dst_y_rsci_dst_y_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .dst_y_rsci_oswt(dst_y_rsci_oswt),
      .dst_y_rsci_wen_comp(dst_y_rsci_wen_comp),
      .dst_y_rsci_biwt(dst_y_rsci_biwt),
      .dst_y_rsci_bdwt(dst_y_rsci_bdwt),
      .dst_y_rsci_bcwt(dst_y_rsci_bcwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_src_v_rsci
// ------------------------------------------------------------------


module yuv444dns_core_src_v_rsci (
  clk, arst_n, src_v_rsc_dat, src_v_rsc_vld, src_v_rsc_rdy, core_wen, src_v_rsci_oswt,
      src_v_rsci_wen_comp, src_v_rsci_idat_mxwt
);
  input clk;
  input arst_n;
  input [9:0] src_v_rsc_dat;
  input src_v_rsc_vld;
  output src_v_rsc_rdy;
  input core_wen;
  input src_v_rsci_oswt;
  output src_v_rsci_wen_comp;
  output [9:0] src_v_rsci_idat_mxwt;


  // Interconnect Declarations
  wire src_v_rsci_biwt;
  wire src_v_rsci_bdwt;
  wire src_v_rsci_bcwt;
  wire src_v_rsci_irdy_core_sct;
  wire src_v_rsci_ivld;
  wire [9:0] src_v_rsci_idat;


  // Interconnect Declarations for Component Instantiations 
  ccs_in_wait_v1 #(.rscid(32'sd322),
  .width(32'sd10)) src_v_rsci (
      .rdy(src_v_rsc_rdy),
      .vld(src_v_rsc_vld),
      .dat(src_v_rsc_dat),
      .irdy(src_v_rsci_irdy_core_sct),
      .ivld(src_v_rsci_ivld),
      .idat(src_v_rsci_idat)
    );
  yuv444dns_core_src_v_rsci_src_v_wait_ctrl yuv444dns_core_src_v_rsci_src_v_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .src_v_rsci_oswt(src_v_rsci_oswt),
      .src_v_rsci_biwt(src_v_rsci_biwt),
      .src_v_rsci_bdwt(src_v_rsci_bdwt),
      .src_v_rsci_bcwt(src_v_rsci_bcwt),
      .src_v_rsci_irdy_core_sct(src_v_rsci_irdy_core_sct),
      .src_v_rsci_ivld(src_v_rsci_ivld)
    );
  yuv444dns_core_src_v_rsci_src_v_wait_dp yuv444dns_core_src_v_rsci_src_v_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .src_v_rsci_oswt(src_v_rsci_oswt),
      .src_v_rsci_wen_comp(src_v_rsci_wen_comp),
      .src_v_rsci_idat_mxwt(src_v_rsci_idat_mxwt),
      .src_v_rsci_biwt(src_v_rsci_biwt),
      .src_v_rsci_bdwt(src_v_rsci_bdwt),
      .src_v_rsci_bcwt(src_v_rsci_bcwt),
      .src_v_rsci_idat(src_v_rsci_idat)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_src_u_rsci
// ------------------------------------------------------------------


module yuv444dns_core_src_u_rsci (
  clk, arst_n, src_u_rsc_dat, src_u_rsc_vld, src_u_rsc_rdy, core_wen, src_u_rsci_oswt,
      src_u_rsci_wen_comp, src_u_rsci_idat_mxwt
);
  input clk;
  input arst_n;
  input [9:0] src_u_rsc_dat;
  input src_u_rsc_vld;
  output src_u_rsc_rdy;
  input core_wen;
  input src_u_rsci_oswt;
  output src_u_rsci_wen_comp;
  output [9:0] src_u_rsci_idat_mxwt;


  // Interconnect Declarations
  wire src_u_rsci_biwt;
  wire src_u_rsci_bdwt;
  wire src_u_rsci_bcwt;
  wire src_u_rsci_irdy_core_sct;
  wire src_u_rsci_ivld;
  wire [9:0] src_u_rsci_idat;


  // Interconnect Declarations for Component Instantiations 
  ccs_in_wait_v1 #(.rscid(32'sd321),
  .width(32'sd10)) src_u_rsci (
      .rdy(src_u_rsc_rdy),
      .vld(src_u_rsc_vld),
      .dat(src_u_rsc_dat),
      .irdy(src_u_rsci_irdy_core_sct),
      .ivld(src_u_rsci_ivld),
      .idat(src_u_rsci_idat)
    );
  yuv444dns_core_src_u_rsci_src_u_wait_ctrl yuv444dns_core_src_u_rsci_src_u_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .src_u_rsci_oswt(src_u_rsci_oswt),
      .src_u_rsci_biwt(src_u_rsci_biwt),
      .src_u_rsci_bdwt(src_u_rsci_bdwt),
      .src_u_rsci_bcwt(src_u_rsci_bcwt),
      .src_u_rsci_irdy_core_sct(src_u_rsci_irdy_core_sct),
      .src_u_rsci_ivld(src_u_rsci_ivld)
    );
  yuv444dns_core_src_u_rsci_src_u_wait_dp yuv444dns_core_src_u_rsci_src_u_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .src_u_rsci_oswt(src_u_rsci_oswt),
      .src_u_rsci_wen_comp(src_u_rsci_wen_comp),
      .src_u_rsci_idat_mxwt(src_u_rsci_idat_mxwt),
      .src_u_rsci_biwt(src_u_rsci_biwt),
      .src_u_rsci_bdwt(src_u_rsci_bdwt),
      .src_u_rsci_bcwt(src_u_rsci_bcwt),
      .src_u_rsci_idat(src_u_rsci_idat)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core_src_y_rsci
// ------------------------------------------------------------------


module yuv444dns_core_src_y_rsci (
  clk, arst_n, src_y_rsc_dat, src_y_rsc_vld, src_y_rsc_rdy, core_wen, src_y_rsci_oswt,
      src_y_rsci_wen_comp, src_y_rsci_idat_mxwt
);
  input clk;
  input arst_n;
  input [9:0] src_y_rsc_dat;
  input src_y_rsc_vld;
  output src_y_rsc_rdy;
  input core_wen;
  input src_y_rsci_oswt;
  output src_y_rsci_wen_comp;
  output [9:0] src_y_rsci_idat_mxwt;


  // Interconnect Declarations
  wire src_y_rsci_biwt;
  wire src_y_rsci_bdwt;
  wire src_y_rsci_bcwt;
  wire src_y_rsci_irdy_core_sct;
  wire src_y_rsci_ivld;
  wire [9:0] src_y_rsci_idat;


  // Interconnect Declarations for Component Instantiations 
  ccs_in_wait_v1 #(.rscid(32'sd320),
  .width(32'sd10)) src_y_rsci (
      .rdy(src_y_rsc_rdy),
      .vld(src_y_rsc_vld),
      .dat(src_y_rsc_dat),
      .irdy(src_y_rsci_irdy_core_sct),
      .ivld(src_y_rsci_ivld),
      .idat(src_y_rsci_idat)
    );
  yuv444dns_core_src_y_rsci_src_y_wait_ctrl yuv444dns_core_src_y_rsci_src_y_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .src_y_rsci_oswt(src_y_rsci_oswt),
      .src_y_rsci_biwt(src_y_rsci_biwt),
      .src_y_rsci_bdwt(src_y_rsci_bdwt),
      .src_y_rsci_bcwt(src_y_rsci_bcwt),
      .src_y_rsci_irdy_core_sct(src_y_rsci_irdy_core_sct),
      .src_y_rsci_ivld(src_y_rsci_ivld)
    );
  yuv444dns_core_src_y_rsci_src_y_wait_dp yuv444dns_core_src_y_rsci_src_y_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .src_y_rsci_oswt(src_y_rsci_oswt),
      .src_y_rsci_wen_comp(src_y_rsci_wen_comp),
      .src_y_rsci_idat_mxwt(src_y_rsci_idat_mxwt),
      .src_y_rsci_biwt(src_y_rsci_biwt),
      .src_y_rsci_bdwt(src_y_rsci_bdwt),
      .src_y_rsci_bcwt(src_y_rsci_bcwt),
      .src_y_rsci_idat(src_y_rsci_idat)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_v_linebuffer_rsc_2_0_i_1
// ------------------------------------------------------------------


module scaledown_core_v_linebuffer_rsc_2_0_i_1 (
  clk, arst_n, v_linebuffer_rsc_2_0_i_da_d, v_linebuffer_rsc_2_0_i_ena_d, v_linebuffer_rsc_2_0_i_wea_d,
      v_linebuffer_rsc_2_0_i_qa_d, v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, core_wen, core_wten,
      v_linebuffer_rsc_2_0_i_oswt, v_linebuffer_rsc_2_0_i_oswt_1, v_linebuffer_rsc_2_0_i_da_d_core,
      v_linebuffer_rsc_2_0_i_ena_d_core_psct, v_linebuffer_rsc_2_0_i_wea_d_core_psct,
      v_linebuffer_rsc_2_0_i_qa_d_mxwt, v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct,
      v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct, v_linebuffer_rsc_2_0_i_oswt_1_pff,
      v_linebuffer_rsc_2_0_i_oswt_pff
);
  input clk;
  input arst_n;
  output [9:0] v_linebuffer_rsc_2_0_i_da_d;
  output [1:0] v_linebuffer_rsc_2_0_i_ena_d;
  output [1:0] v_linebuffer_rsc_2_0_i_wea_d;
  input [19:0] v_linebuffer_rsc_2_0_i_qa_d;
  output [1:0] v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  input core_wen;
  input core_wten;
  input v_linebuffer_rsc_2_0_i_oswt;
  input v_linebuffer_rsc_2_0_i_oswt_1;
  input [19:0] v_linebuffer_rsc_2_0_i_da_d_core;
  input [1:0] v_linebuffer_rsc_2_0_i_ena_d_core_psct;
  input [1:0] v_linebuffer_rsc_2_0_i_wea_d_core_psct;
  output [19:0] v_linebuffer_rsc_2_0_i_qa_d_mxwt;
  input [1:0] v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  input v_linebuffer_rsc_2_0_i_oswt_1_pff;
  input v_linebuffer_rsc_2_0_i_oswt_pff;


  // Interconnect Declarations
  wire v_linebuffer_rsc_2_0_i_biwt;
  wire v_linebuffer_rsc_2_0_i_bdwt;
  wire v_linebuffer_rsc_2_0_i_biwt_1;
  wire v_linebuffer_rsc_2_0_i_bdwt_2;
  wire [1:0] v_linebuffer_rsc_2_0_i_ena_d_core_sct;
  wire [1:0] v_linebuffer_rsc_2_0_i_wea_d_core_sct;
  wire [1:0] v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire [1:0] v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  wire [9:0] v_linebuffer_rsc_2_0_i_da_d_reg;


  // Interconnect Declarations for Component Instantiations 
  wire [1:0] nl_scaledown_core_v_linebuffer_rsc_2_0_i_1_v_linebuffer_rsc_2_0_wait_ctrl_inst_v_linebuffer_rsc_2_0_i_wea_d_core_psct;
  assign nl_scaledown_core_v_linebuffer_rsc_2_0_i_1_v_linebuffer_rsc_2_0_wait_ctrl_inst_v_linebuffer_rsc_2_0_i_wea_d_core_psct
      = {1'b0 , (v_linebuffer_rsc_2_0_i_wea_d_core_psct[0])};
  wire [1:0] nl_scaledown_core_v_linebuffer_rsc_2_0_i_1_v_linebuffer_rsc_2_0_wait_ctrl_inst_v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_scaledown_core_v_linebuffer_rsc_2_0_i_1_v_linebuffer_rsc_2_0_wait_ctrl_inst_v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , (v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])};
  wire [19:0] nl_scaledown_core_v_linebuffer_rsc_2_0_i_1_v_linebuffer_rsc_2_0_wait_dp_inst_v_linebuffer_rsc_2_0_i_da_d_core;
  assign nl_scaledown_core_v_linebuffer_rsc_2_0_i_1_v_linebuffer_rsc_2_0_wait_dp_inst_v_linebuffer_rsc_2_0_i_da_d_core
      = {10'b0000000000 , (v_linebuffer_rsc_2_0_i_da_d_core[9:0])};
  scaledown_core_v_linebuffer_rsc_2_0_i_1_v_linebuffer_rsc_2_0_wait_ctrl scaledown_core_v_linebuffer_rsc_2_0_i_1_v_linebuffer_rsc_2_0_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .v_linebuffer_rsc_2_0_i_oswt(v_linebuffer_rsc_2_0_i_oswt),
      .v_linebuffer_rsc_2_0_i_oswt_1(v_linebuffer_rsc_2_0_i_oswt_1),
      .v_linebuffer_rsc_2_0_i_ena_d_core_psct(v_linebuffer_rsc_2_0_i_ena_d_core_psct),
      .v_linebuffer_rsc_2_0_i_wea_d_core_psct(nl_scaledown_core_v_linebuffer_rsc_2_0_i_1_v_linebuffer_rsc_2_0_wait_ctrl_inst_v_linebuffer_rsc_2_0_i_wea_d_core_psct[1:0]),
      .v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_scaledown_core_v_linebuffer_rsc_2_0_i_1_v_linebuffer_rsc_2_0_wait_ctrl_inst_v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .v_linebuffer_rsc_2_0_i_biwt(v_linebuffer_rsc_2_0_i_biwt),
      .v_linebuffer_rsc_2_0_i_bdwt(v_linebuffer_rsc_2_0_i_bdwt),
      .v_linebuffer_rsc_2_0_i_biwt_1(v_linebuffer_rsc_2_0_i_biwt_1),
      .v_linebuffer_rsc_2_0_i_bdwt_2(v_linebuffer_rsc_2_0_i_bdwt_2),
      .v_linebuffer_rsc_2_0_i_ena_d_core_sct(v_linebuffer_rsc_2_0_i_ena_d_core_sct),
      .v_linebuffer_rsc_2_0_i_wea_d_core_sct(v_linebuffer_rsc_2_0_i_wea_d_core_sct),
      .v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct(v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct(v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct),
      .v_linebuffer_rsc_2_0_i_oswt_1_pff(v_linebuffer_rsc_2_0_i_oswt_1_pff),
      .v_linebuffer_rsc_2_0_i_oswt_pff(v_linebuffer_rsc_2_0_i_oswt_pff)
    );
  scaledown_core_v_linebuffer_rsc_2_0_i_1_v_linebuffer_rsc_2_0_wait_dp scaledown_core_v_linebuffer_rsc_2_0_i_1_v_linebuffer_rsc_2_0_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .v_linebuffer_rsc_2_0_i_da_d(v_linebuffer_rsc_2_0_i_da_d_reg),
      .v_linebuffer_rsc_2_0_i_qa_d(v_linebuffer_rsc_2_0_i_qa_d),
      .v_linebuffer_rsc_2_0_i_da_d_core(nl_scaledown_core_v_linebuffer_rsc_2_0_i_1_v_linebuffer_rsc_2_0_wait_dp_inst_v_linebuffer_rsc_2_0_i_da_d_core[19:0]),
      .v_linebuffer_rsc_2_0_i_qa_d_mxwt(v_linebuffer_rsc_2_0_i_qa_d_mxwt),
      .v_linebuffer_rsc_2_0_i_biwt(v_linebuffer_rsc_2_0_i_biwt),
      .v_linebuffer_rsc_2_0_i_bdwt(v_linebuffer_rsc_2_0_i_bdwt),
      .v_linebuffer_rsc_2_0_i_biwt_1(v_linebuffer_rsc_2_0_i_biwt_1),
      .v_linebuffer_rsc_2_0_i_bdwt_2(v_linebuffer_rsc_2_0_i_bdwt_2)
    );
  assign v_linebuffer_rsc_2_0_i_ena_d = v_linebuffer_rsc_2_0_i_ena_d_core_sct;
  assign v_linebuffer_rsc_2_0_i_wea_d = v_linebuffer_rsc_2_0_i_wea_d_core_sct;
  assign v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  assign v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  assign v_linebuffer_rsc_2_0_i_da_d = v_linebuffer_rsc_2_0_i_da_d_reg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_v_linebuffer_rsc_1_0_i_1
// ------------------------------------------------------------------


module scaledown_core_v_linebuffer_rsc_1_0_i_1 (
  clk, arst_n, v_linebuffer_rsc_1_0_i_da_d, v_linebuffer_rsc_1_0_i_ena_d, v_linebuffer_rsc_1_0_i_wea_d,
      v_linebuffer_rsc_1_0_i_qa_d, v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, core_wen, core_wten,
      v_linebuffer_rsc_1_0_i_oswt, v_linebuffer_rsc_1_0_i_oswt_1, v_linebuffer_rsc_1_0_i_da_d_core,
      v_linebuffer_rsc_1_0_i_ena_d_core_psct, v_linebuffer_rsc_1_0_i_wea_d_core_psct,
      v_linebuffer_rsc_1_0_i_qa_d_mxwt, v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct,
      v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct, v_linebuffer_rsc_1_0_i_oswt_1_pff,
      v_linebuffer_rsc_1_0_i_oswt_pff
);
  input clk;
  input arst_n;
  output [9:0] v_linebuffer_rsc_1_0_i_da_d;
  output [1:0] v_linebuffer_rsc_1_0_i_ena_d;
  output [1:0] v_linebuffer_rsc_1_0_i_wea_d;
  input [19:0] v_linebuffer_rsc_1_0_i_qa_d;
  output [1:0] v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  input core_wen;
  input core_wten;
  input v_linebuffer_rsc_1_0_i_oswt;
  input v_linebuffer_rsc_1_0_i_oswt_1;
  input [19:0] v_linebuffer_rsc_1_0_i_da_d_core;
  input [1:0] v_linebuffer_rsc_1_0_i_ena_d_core_psct;
  input [1:0] v_linebuffer_rsc_1_0_i_wea_d_core_psct;
  output [19:0] v_linebuffer_rsc_1_0_i_qa_d_mxwt;
  input [1:0] v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  input v_linebuffer_rsc_1_0_i_oswt_1_pff;
  input v_linebuffer_rsc_1_0_i_oswt_pff;


  // Interconnect Declarations
  wire v_linebuffer_rsc_1_0_i_biwt;
  wire v_linebuffer_rsc_1_0_i_bdwt;
  wire v_linebuffer_rsc_1_0_i_biwt_1;
  wire v_linebuffer_rsc_1_0_i_bdwt_2;
  wire [1:0] v_linebuffer_rsc_1_0_i_ena_d_core_sct;
  wire [1:0] v_linebuffer_rsc_1_0_i_wea_d_core_sct;
  wire [1:0] v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire [1:0] v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  wire [9:0] v_linebuffer_rsc_1_0_i_da_d_reg;


  // Interconnect Declarations for Component Instantiations 
  wire [1:0] nl_scaledown_core_v_linebuffer_rsc_1_0_i_1_v_linebuffer_rsc_1_0_wait_ctrl_inst_v_linebuffer_rsc_1_0_i_wea_d_core_psct;
  assign nl_scaledown_core_v_linebuffer_rsc_1_0_i_1_v_linebuffer_rsc_1_0_wait_ctrl_inst_v_linebuffer_rsc_1_0_i_wea_d_core_psct
      = {1'b0 , (v_linebuffer_rsc_1_0_i_wea_d_core_psct[0])};
  wire [1:0] nl_scaledown_core_v_linebuffer_rsc_1_0_i_1_v_linebuffer_rsc_1_0_wait_ctrl_inst_v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_scaledown_core_v_linebuffer_rsc_1_0_i_1_v_linebuffer_rsc_1_0_wait_ctrl_inst_v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , (v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])};
  wire [19:0] nl_scaledown_core_v_linebuffer_rsc_1_0_i_1_v_linebuffer_rsc_1_0_wait_dp_inst_v_linebuffer_rsc_1_0_i_da_d_core;
  assign nl_scaledown_core_v_linebuffer_rsc_1_0_i_1_v_linebuffer_rsc_1_0_wait_dp_inst_v_linebuffer_rsc_1_0_i_da_d_core
      = {10'b0000000000 , (v_linebuffer_rsc_1_0_i_da_d_core[9:0])};
  scaledown_core_v_linebuffer_rsc_1_0_i_1_v_linebuffer_rsc_1_0_wait_ctrl scaledown_core_v_linebuffer_rsc_1_0_i_1_v_linebuffer_rsc_1_0_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .v_linebuffer_rsc_1_0_i_oswt(v_linebuffer_rsc_1_0_i_oswt),
      .v_linebuffer_rsc_1_0_i_oswt_1(v_linebuffer_rsc_1_0_i_oswt_1),
      .v_linebuffer_rsc_1_0_i_ena_d_core_psct(v_linebuffer_rsc_1_0_i_ena_d_core_psct),
      .v_linebuffer_rsc_1_0_i_wea_d_core_psct(nl_scaledown_core_v_linebuffer_rsc_1_0_i_1_v_linebuffer_rsc_1_0_wait_ctrl_inst_v_linebuffer_rsc_1_0_i_wea_d_core_psct[1:0]),
      .v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_scaledown_core_v_linebuffer_rsc_1_0_i_1_v_linebuffer_rsc_1_0_wait_ctrl_inst_v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .v_linebuffer_rsc_1_0_i_biwt(v_linebuffer_rsc_1_0_i_biwt),
      .v_linebuffer_rsc_1_0_i_bdwt(v_linebuffer_rsc_1_0_i_bdwt),
      .v_linebuffer_rsc_1_0_i_biwt_1(v_linebuffer_rsc_1_0_i_biwt_1),
      .v_linebuffer_rsc_1_0_i_bdwt_2(v_linebuffer_rsc_1_0_i_bdwt_2),
      .v_linebuffer_rsc_1_0_i_ena_d_core_sct(v_linebuffer_rsc_1_0_i_ena_d_core_sct),
      .v_linebuffer_rsc_1_0_i_wea_d_core_sct(v_linebuffer_rsc_1_0_i_wea_d_core_sct),
      .v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct(v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct(v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct),
      .v_linebuffer_rsc_1_0_i_oswt_1_pff(v_linebuffer_rsc_1_0_i_oswt_1_pff),
      .v_linebuffer_rsc_1_0_i_oswt_pff(v_linebuffer_rsc_1_0_i_oswt_pff)
    );
  scaledown_core_v_linebuffer_rsc_1_0_i_1_v_linebuffer_rsc_1_0_wait_dp scaledown_core_v_linebuffer_rsc_1_0_i_1_v_linebuffer_rsc_1_0_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .v_linebuffer_rsc_1_0_i_da_d(v_linebuffer_rsc_1_0_i_da_d_reg),
      .v_linebuffer_rsc_1_0_i_qa_d(v_linebuffer_rsc_1_0_i_qa_d),
      .v_linebuffer_rsc_1_0_i_da_d_core(nl_scaledown_core_v_linebuffer_rsc_1_0_i_1_v_linebuffer_rsc_1_0_wait_dp_inst_v_linebuffer_rsc_1_0_i_da_d_core[19:0]),
      .v_linebuffer_rsc_1_0_i_qa_d_mxwt(v_linebuffer_rsc_1_0_i_qa_d_mxwt),
      .v_linebuffer_rsc_1_0_i_biwt(v_linebuffer_rsc_1_0_i_biwt),
      .v_linebuffer_rsc_1_0_i_bdwt(v_linebuffer_rsc_1_0_i_bdwt),
      .v_linebuffer_rsc_1_0_i_biwt_1(v_linebuffer_rsc_1_0_i_biwt_1),
      .v_linebuffer_rsc_1_0_i_bdwt_2(v_linebuffer_rsc_1_0_i_bdwt_2)
    );
  assign v_linebuffer_rsc_1_0_i_ena_d = v_linebuffer_rsc_1_0_i_ena_d_core_sct;
  assign v_linebuffer_rsc_1_0_i_wea_d = v_linebuffer_rsc_1_0_i_wea_d_core_sct;
  assign v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  assign v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  assign v_linebuffer_rsc_1_0_i_da_d = v_linebuffer_rsc_1_0_i_da_d_reg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_v_linebuffer_rsc_0_0_i_1
// ------------------------------------------------------------------


module scaledown_core_v_linebuffer_rsc_0_0_i_1 (
  clk, arst_n, v_linebuffer_rsc_0_0_i_adra_d, v_linebuffer_rsc_0_0_i_da_d, v_linebuffer_rsc_0_0_i_ena_d,
      v_linebuffer_rsc_0_0_i_wea_d, v_linebuffer_rsc_0_0_i_qa_d, v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, core_wen, core_wten,
      v_linebuffer_rsc_0_0_i_oswt, v_linebuffer_rsc_0_0_i_adra_d_core, v_linebuffer_rsc_0_0_i_da_d_core,
      v_linebuffer_rsc_0_0_i_ena_d_core_psct, v_linebuffer_rsc_0_0_i_wea_d_core_psct,
      v_linebuffer_rsc_0_0_i_qa_d_mxwt, v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct,
      v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct, v_linebuffer_rsc_0_0_i_oswt_pff
);
  input clk;
  input arst_n;
  output [11:0] v_linebuffer_rsc_0_0_i_adra_d;
  output [9:0] v_linebuffer_rsc_0_0_i_da_d;
  output [1:0] v_linebuffer_rsc_0_0_i_ena_d;
  output [1:0] v_linebuffer_rsc_0_0_i_wea_d;
  input [19:0] v_linebuffer_rsc_0_0_i_qa_d;
  output [1:0] v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  input core_wen;
  input core_wten;
  input v_linebuffer_rsc_0_0_i_oswt;
  input [23:0] v_linebuffer_rsc_0_0_i_adra_d_core;
  input [19:0] v_linebuffer_rsc_0_0_i_da_d_core;
  input [1:0] v_linebuffer_rsc_0_0_i_ena_d_core_psct;
  input [1:0] v_linebuffer_rsc_0_0_i_wea_d_core_psct;
  output [9:0] v_linebuffer_rsc_0_0_i_qa_d_mxwt;
  input [1:0] v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  input v_linebuffer_rsc_0_0_i_oswt_pff;


  // Interconnect Declarations
  wire v_linebuffer_rsc_0_0_i_biwt;
  wire v_linebuffer_rsc_0_0_i_bdwt;
  wire [1:0] v_linebuffer_rsc_0_0_i_ena_d_core_sct;
  wire [1:0] v_linebuffer_rsc_0_0_i_wea_d_core_sct;
  wire [1:0] v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire [1:0] v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  wire [9:0] v_linebuffer_rsc_0_0_i_qa_d_mxwt_pconst;
  wire [11:0] v_linebuffer_rsc_0_0_i_adra_d_reg;
  wire [9:0] v_linebuffer_rsc_0_0_i_da_d_reg;


  // Interconnect Declarations for Component Instantiations 
  wire [1:0] nl_scaledown_core_v_linebuffer_rsc_0_0_i_1_v_linebuffer_rsc_0_0_wait_ctrl_inst_v_linebuffer_rsc_0_0_i_ena_d_core_psct;
  assign nl_scaledown_core_v_linebuffer_rsc_0_0_i_1_v_linebuffer_rsc_0_0_wait_ctrl_inst_v_linebuffer_rsc_0_0_i_ena_d_core_psct
      = {1'b0 , (v_linebuffer_rsc_0_0_i_ena_d_core_psct[0])};
  wire [1:0] nl_scaledown_core_v_linebuffer_rsc_0_0_i_1_v_linebuffer_rsc_0_0_wait_ctrl_inst_v_linebuffer_rsc_0_0_i_wea_d_core_psct;
  assign nl_scaledown_core_v_linebuffer_rsc_0_0_i_1_v_linebuffer_rsc_0_0_wait_ctrl_inst_v_linebuffer_rsc_0_0_i_wea_d_core_psct
      = {1'b0 , (v_linebuffer_rsc_0_0_i_wea_d_core_psct[0])};
  wire [1:0] nl_scaledown_core_v_linebuffer_rsc_0_0_i_1_v_linebuffer_rsc_0_0_wait_ctrl_inst_v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_scaledown_core_v_linebuffer_rsc_0_0_i_1_v_linebuffer_rsc_0_0_wait_ctrl_inst_v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , (v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])};
  wire [1:0] nl_scaledown_core_v_linebuffer_rsc_0_0_i_1_v_linebuffer_rsc_0_0_wait_ctrl_inst_v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_scaledown_core_v_linebuffer_rsc_0_0_i_1_v_linebuffer_rsc_0_0_wait_ctrl_inst_v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , (v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])};
  wire [23:0] nl_scaledown_core_v_linebuffer_rsc_0_0_i_1_v_linebuffer_rsc_0_0_wait_dp_inst_v_linebuffer_rsc_0_0_i_adra_d_core;
  assign nl_scaledown_core_v_linebuffer_rsc_0_0_i_1_v_linebuffer_rsc_0_0_wait_dp_inst_v_linebuffer_rsc_0_0_i_adra_d_core
      = {12'b000000000000 , (v_linebuffer_rsc_0_0_i_adra_d_core[11:0])};
  wire [19:0] nl_scaledown_core_v_linebuffer_rsc_0_0_i_1_v_linebuffer_rsc_0_0_wait_dp_inst_v_linebuffer_rsc_0_0_i_da_d_core;
  assign nl_scaledown_core_v_linebuffer_rsc_0_0_i_1_v_linebuffer_rsc_0_0_wait_dp_inst_v_linebuffer_rsc_0_0_i_da_d_core
      = {10'b0000000000 , (v_linebuffer_rsc_0_0_i_da_d_core[9:0])};
  scaledown_core_v_linebuffer_rsc_0_0_i_1_v_linebuffer_rsc_0_0_wait_ctrl scaledown_core_v_linebuffer_rsc_0_0_i_1_v_linebuffer_rsc_0_0_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .v_linebuffer_rsc_0_0_i_oswt(v_linebuffer_rsc_0_0_i_oswt),
      .v_linebuffer_rsc_0_0_i_ena_d_core_psct(nl_scaledown_core_v_linebuffer_rsc_0_0_i_1_v_linebuffer_rsc_0_0_wait_ctrl_inst_v_linebuffer_rsc_0_0_i_ena_d_core_psct[1:0]),
      .v_linebuffer_rsc_0_0_i_wea_d_core_psct(nl_scaledown_core_v_linebuffer_rsc_0_0_i_1_v_linebuffer_rsc_0_0_wait_ctrl_inst_v_linebuffer_rsc_0_0_i_wea_d_core_psct[1:0]),
      .v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_scaledown_core_v_linebuffer_rsc_0_0_i_1_v_linebuffer_rsc_0_0_wait_ctrl_inst_v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_scaledown_core_v_linebuffer_rsc_0_0_i_1_v_linebuffer_rsc_0_0_wait_ctrl_inst_v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .v_linebuffer_rsc_0_0_i_biwt(v_linebuffer_rsc_0_0_i_biwt),
      .v_linebuffer_rsc_0_0_i_bdwt(v_linebuffer_rsc_0_0_i_bdwt),
      .v_linebuffer_rsc_0_0_i_ena_d_core_sct(v_linebuffer_rsc_0_0_i_ena_d_core_sct),
      .v_linebuffer_rsc_0_0_i_wea_d_core_sct(v_linebuffer_rsc_0_0_i_wea_d_core_sct),
      .v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct(v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct(v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct),
      .v_linebuffer_rsc_0_0_i_oswt_pff(v_linebuffer_rsc_0_0_i_oswt_pff)
    );
  scaledown_core_v_linebuffer_rsc_0_0_i_1_v_linebuffer_rsc_0_0_wait_dp scaledown_core_v_linebuffer_rsc_0_0_i_1_v_linebuffer_rsc_0_0_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .v_linebuffer_rsc_0_0_i_adra_d(v_linebuffer_rsc_0_0_i_adra_d_reg),
      .v_linebuffer_rsc_0_0_i_da_d(v_linebuffer_rsc_0_0_i_da_d_reg),
      .v_linebuffer_rsc_0_0_i_qa_d(v_linebuffer_rsc_0_0_i_qa_d),
      .v_linebuffer_rsc_0_0_i_adra_d_core(nl_scaledown_core_v_linebuffer_rsc_0_0_i_1_v_linebuffer_rsc_0_0_wait_dp_inst_v_linebuffer_rsc_0_0_i_adra_d_core[23:0]),
      .v_linebuffer_rsc_0_0_i_da_d_core(nl_scaledown_core_v_linebuffer_rsc_0_0_i_1_v_linebuffer_rsc_0_0_wait_dp_inst_v_linebuffer_rsc_0_0_i_da_d_core[19:0]),
      .v_linebuffer_rsc_0_0_i_qa_d_mxwt(v_linebuffer_rsc_0_0_i_qa_d_mxwt_pconst),
      .v_linebuffer_rsc_0_0_i_biwt(v_linebuffer_rsc_0_0_i_biwt),
      .v_linebuffer_rsc_0_0_i_bdwt(v_linebuffer_rsc_0_0_i_bdwt)
    );
  assign v_linebuffer_rsc_0_0_i_qa_d_mxwt = v_linebuffer_rsc_0_0_i_qa_d_mxwt_pconst;
  assign v_linebuffer_rsc_0_0_i_ena_d = v_linebuffer_rsc_0_0_i_ena_d_core_sct;
  assign v_linebuffer_rsc_0_0_i_wea_d = v_linebuffer_rsc_0_0_i_wea_d_core_sct;
  assign v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  assign v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  assign v_linebuffer_rsc_0_0_i_adra_d = v_linebuffer_rsc_0_0_i_adra_d_reg;
  assign v_linebuffer_rsc_0_0_i_da_d = v_linebuffer_rsc_0_0_i_da_d_reg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_u_linebuffer_rsc_2_0_i_1
// ------------------------------------------------------------------


module scaledown_core_u_linebuffer_rsc_2_0_i_1 (
  clk, arst_n, u_linebuffer_rsc_2_0_i_da_d, u_linebuffer_rsc_2_0_i_ena_d, u_linebuffer_rsc_2_0_i_wea_d,
      u_linebuffer_rsc_2_0_i_qa_d, u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, core_wen, core_wten,
      u_linebuffer_rsc_2_0_i_oswt, u_linebuffer_rsc_2_0_i_oswt_1, u_linebuffer_rsc_2_0_i_da_d_core,
      u_linebuffer_rsc_2_0_i_ena_d_core_psct, u_linebuffer_rsc_2_0_i_wea_d_core_psct,
      u_linebuffer_rsc_2_0_i_qa_d_mxwt, u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct,
      u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct, u_linebuffer_rsc_2_0_i_oswt_1_pff,
      u_linebuffer_rsc_2_0_i_oswt_pff
);
  input clk;
  input arst_n;
  output [9:0] u_linebuffer_rsc_2_0_i_da_d;
  output [1:0] u_linebuffer_rsc_2_0_i_ena_d;
  output [1:0] u_linebuffer_rsc_2_0_i_wea_d;
  input [19:0] u_linebuffer_rsc_2_0_i_qa_d;
  output [1:0] u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  input core_wen;
  input core_wten;
  input u_linebuffer_rsc_2_0_i_oswt;
  input u_linebuffer_rsc_2_0_i_oswt_1;
  input [19:0] u_linebuffer_rsc_2_0_i_da_d_core;
  input [1:0] u_linebuffer_rsc_2_0_i_ena_d_core_psct;
  input [1:0] u_linebuffer_rsc_2_0_i_wea_d_core_psct;
  output [19:0] u_linebuffer_rsc_2_0_i_qa_d_mxwt;
  input [1:0] u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  input u_linebuffer_rsc_2_0_i_oswt_1_pff;
  input u_linebuffer_rsc_2_0_i_oswt_pff;


  // Interconnect Declarations
  wire u_linebuffer_rsc_2_0_i_biwt;
  wire u_linebuffer_rsc_2_0_i_bdwt;
  wire u_linebuffer_rsc_2_0_i_biwt_1;
  wire u_linebuffer_rsc_2_0_i_bdwt_2;
  wire [1:0] u_linebuffer_rsc_2_0_i_ena_d_core_sct;
  wire [1:0] u_linebuffer_rsc_2_0_i_wea_d_core_sct;
  wire [1:0] u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire [1:0] u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  wire [9:0] u_linebuffer_rsc_2_0_i_da_d_reg;


  // Interconnect Declarations for Component Instantiations 
  wire [1:0] nl_scaledown_core_u_linebuffer_rsc_2_0_i_1_u_linebuffer_rsc_2_0_wait_ctrl_inst_u_linebuffer_rsc_2_0_i_wea_d_core_psct;
  assign nl_scaledown_core_u_linebuffer_rsc_2_0_i_1_u_linebuffer_rsc_2_0_wait_ctrl_inst_u_linebuffer_rsc_2_0_i_wea_d_core_psct
      = {1'b0 , (u_linebuffer_rsc_2_0_i_wea_d_core_psct[0])};
  wire [1:0] nl_scaledown_core_u_linebuffer_rsc_2_0_i_1_u_linebuffer_rsc_2_0_wait_ctrl_inst_u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_scaledown_core_u_linebuffer_rsc_2_0_i_1_u_linebuffer_rsc_2_0_wait_ctrl_inst_u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , (u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])};
  wire [19:0] nl_scaledown_core_u_linebuffer_rsc_2_0_i_1_u_linebuffer_rsc_2_0_wait_dp_inst_u_linebuffer_rsc_2_0_i_da_d_core;
  assign nl_scaledown_core_u_linebuffer_rsc_2_0_i_1_u_linebuffer_rsc_2_0_wait_dp_inst_u_linebuffer_rsc_2_0_i_da_d_core
      = {10'b0000000000 , (u_linebuffer_rsc_2_0_i_da_d_core[9:0])};
  scaledown_core_u_linebuffer_rsc_2_0_i_1_u_linebuffer_rsc_2_0_wait_ctrl scaledown_core_u_linebuffer_rsc_2_0_i_1_u_linebuffer_rsc_2_0_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .u_linebuffer_rsc_2_0_i_oswt(u_linebuffer_rsc_2_0_i_oswt),
      .u_linebuffer_rsc_2_0_i_oswt_1(u_linebuffer_rsc_2_0_i_oswt_1),
      .u_linebuffer_rsc_2_0_i_ena_d_core_psct(u_linebuffer_rsc_2_0_i_ena_d_core_psct),
      .u_linebuffer_rsc_2_0_i_wea_d_core_psct(nl_scaledown_core_u_linebuffer_rsc_2_0_i_1_u_linebuffer_rsc_2_0_wait_ctrl_inst_u_linebuffer_rsc_2_0_i_wea_d_core_psct[1:0]),
      .u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_scaledown_core_u_linebuffer_rsc_2_0_i_1_u_linebuffer_rsc_2_0_wait_ctrl_inst_u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .u_linebuffer_rsc_2_0_i_biwt(u_linebuffer_rsc_2_0_i_biwt),
      .u_linebuffer_rsc_2_0_i_bdwt(u_linebuffer_rsc_2_0_i_bdwt),
      .u_linebuffer_rsc_2_0_i_biwt_1(u_linebuffer_rsc_2_0_i_biwt_1),
      .u_linebuffer_rsc_2_0_i_bdwt_2(u_linebuffer_rsc_2_0_i_bdwt_2),
      .u_linebuffer_rsc_2_0_i_ena_d_core_sct(u_linebuffer_rsc_2_0_i_ena_d_core_sct),
      .u_linebuffer_rsc_2_0_i_wea_d_core_sct(u_linebuffer_rsc_2_0_i_wea_d_core_sct),
      .u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct(u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct(u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct),
      .u_linebuffer_rsc_2_0_i_oswt_1_pff(u_linebuffer_rsc_2_0_i_oswt_1_pff),
      .u_linebuffer_rsc_2_0_i_oswt_pff(u_linebuffer_rsc_2_0_i_oswt_pff)
    );
  scaledown_core_u_linebuffer_rsc_2_0_i_1_u_linebuffer_rsc_2_0_wait_dp scaledown_core_u_linebuffer_rsc_2_0_i_1_u_linebuffer_rsc_2_0_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .u_linebuffer_rsc_2_0_i_da_d(u_linebuffer_rsc_2_0_i_da_d_reg),
      .u_linebuffer_rsc_2_0_i_qa_d(u_linebuffer_rsc_2_0_i_qa_d),
      .u_linebuffer_rsc_2_0_i_da_d_core(nl_scaledown_core_u_linebuffer_rsc_2_0_i_1_u_linebuffer_rsc_2_0_wait_dp_inst_u_linebuffer_rsc_2_0_i_da_d_core[19:0]),
      .u_linebuffer_rsc_2_0_i_qa_d_mxwt(u_linebuffer_rsc_2_0_i_qa_d_mxwt),
      .u_linebuffer_rsc_2_0_i_biwt(u_linebuffer_rsc_2_0_i_biwt),
      .u_linebuffer_rsc_2_0_i_bdwt(u_linebuffer_rsc_2_0_i_bdwt),
      .u_linebuffer_rsc_2_0_i_biwt_1(u_linebuffer_rsc_2_0_i_biwt_1),
      .u_linebuffer_rsc_2_0_i_bdwt_2(u_linebuffer_rsc_2_0_i_bdwt_2)
    );
  assign u_linebuffer_rsc_2_0_i_ena_d = u_linebuffer_rsc_2_0_i_ena_d_core_sct;
  assign u_linebuffer_rsc_2_0_i_wea_d = u_linebuffer_rsc_2_0_i_wea_d_core_sct;
  assign u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  assign u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  assign u_linebuffer_rsc_2_0_i_da_d = u_linebuffer_rsc_2_0_i_da_d_reg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_u_linebuffer_rsc_1_0_i_1
// ------------------------------------------------------------------


module scaledown_core_u_linebuffer_rsc_1_0_i_1 (
  clk, arst_n, u_linebuffer_rsc_1_0_i_da_d, u_linebuffer_rsc_1_0_i_ena_d, u_linebuffer_rsc_1_0_i_wea_d,
      u_linebuffer_rsc_1_0_i_qa_d, u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, core_wen, core_wten,
      u_linebuffer_rsc_1_0_i_oswt, u_linebuffer_rsc_1_0_i_oswt_1, u_linebuffer_rsc_1_0_i_da_d_core,
      u_linebuffer_rsc_1_0_i_ena_d_core_psct, u_linebuffer_rsc_1_0_i_wea_d_core_psct,
      u_linebuffer_rsc_1_0_i_qa_d_mxwt, u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct,
      u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct, u_linebuffer_rsc_1_0_i_oswt_1_pff,
      u_linebuffer_rsc_1_0_i_oswt_pff
);
  input clk;
  input arst_n;
  output [9:0] u_linebuffer_rsc_1_0_i_da_d;
  output [1:0] u_linebuffer_rsc_1_0_i_ena_d;
  output [1:0] u_linebuffer_rsc_1_0_i_wea_d;
  input [19:0] u_linebuffer_rsc_1_0_i_qa_d;
  output [1:0] u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  input core_wen;
  input core_wten;
  input u_linebuffer_rsc_1_0_i_oswt;
  input u_linebuffer_rsc_1_0_i_oswt_1;
  input [19:0] u_linebuffer_rsc_1_0_i_da_d_core;
  input [1:0] u_linebuffer_rsc_1_0_i_ena_d_core_psct;
  input [1:0] u_linebuffer_rsc_1_0_i_wea_d_core_psct;
  output [19:0] u_linebuffer_rsc_1_0_i_qa_d_mxwt;
  input [1:0] u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  input u_linebuffer_rsc_1_0_i_oswt_1_pff;
  input u_linebuffer_rsc_1_0_i_oswt_pff;


  // Interconnect Declarations
  wire u_linebuffer_rsc_1_0_i_biwt;
  wire u_linebuffer_rsc_1_0_i_bdwt;
  wire u_linebuffer_rsc_1_0_i_biwt_1;
  wire u_linebuffer_rsc_1_0_i_bdwt_2;
  wire [1:0] u_linebuffer_rsc_1_0_i_ena_d_core_sct;
  wire [1:0] u_linebuffer_rsc_1_0_i_wea_d_core_sct;
  wire [1:0] u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire [1:0] u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  wire [9:0] u_linebuffer_rsc_1_0_i_da_d_reg;


  // Interconnect Declarations for Component Instantiations 
  wire [1:0] nl_scaledown_core_u_linebuffer_rsc_1_0_i_1_u_linebuffer_rsc_1_0_wait_ctrl_inst_u_linebuffer_rsc_1_0_i_wea_d_core_psct;
  assign nl_scaledown_core_u_linebuffer_rsc_1_0_i_1_u_linebuffer_rsc_1_0_wait_ctrl_inst_u_linebuffer_rsc_1_0_i_wea_d_core_psct
      = {1'b0 , (u_linebuffer_rsc_1_0_i_wea_d_core_psct[0])};
  wire [1:0] nl_scaledown_core_u_linebuffer_rsc_1_0_i_1_u_linebuffer_rsc_1_0_wait_ctrl_inst_u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_scaledown_core_u_linebuffer_rsc_1_0_i_1_u_linebuffer_rsc_1_0_wait_ctrl_inst_u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , (u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])};
  wire [19:0] nl_scaledown_core_u_linebuffer_rsc_1_0_i_1_u_linebuffer_rsc_1_0_wait_dp_inst_u_linebuffer_rsc_1_0_i_da_d_core;
  assign nl_scaledown_core_u_linebuffer_rsc_1_0_i_1_u_linebuffer_rsc_1_0_wait_dp_inst_u_linebuffer_rsc_1_0_i_da_d_core
      = {10'b0000000000 , (u_linebuffer_rsc_1_0_i_da_d_core[9:0])};
  scaledown_core_u_linebuffer_rsc_1_0_i_1_u_linebuffer_rsc_1_0_wait_ctrl scaledown_core_u_linebuffer_rsc_1_0_i_1_u_linebuffer_rsc_1_0_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .u_linebuffer_rsc_1_0_i_oswt(u_linebuffer_rsc_1_0_i_oswt),
      .u_linebuffer_rsc_1_0_i_oswt_1(u_linebuffer_rsc_1_0_i_oswt_1),
      .u_linebuffer_rsc_1_0_i_ena_d_core_psct(u_linebuffer_rsc_1_0_i_ena_d_core_psct),
      .u_linebuffer_rsc_1_0_i_wea_d_core_psct(nl_scaledown_core_u_linebuffer_rsc_1_0_i_1_u_linebuffer_rsc_1_0_wait_ctrl_inst_u_linebuffer_rsc_1_0_i_wea_d_core_psct[1:0]),
      .u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_scaledown_core_u_linebuffer_rsc_1_0_i_1_u_linebuffer_rsc_1_0_wait_ctrl_inst_u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .u_linebuffer_rsc_1_0_i_biwt(u_linebuffer_rsc_1_0_i_biwt),
      .u_linebuffer_rsc_1_0_i_bdwt(u_linebuffer_rsc_1_0_i_bdwt),
      .u_linebuffer_rsc_1_0_i_biwt_1(u_linebuffer_rsc_1_0_i_biwt_1),
      .u_linebuffer_rsc_1_0_i_bdwt_2(u_linebuffer_rsc_1_0_i_bdwt_2),
      .u_linebuffer_rsc_1_0_i_ena_d_core_sct(u_linebuffer_rsc_1_0_i_ena_d_core_sct),
      .u_linebuffer_rsc_1_0_i_wea_d_core_sct(u_linebuffer_rsc_1_0_i_wea_d_core_sct),
      .u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct(u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct(u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct),
      .u_linebuffer_rsc_1_0_i_oswt_1_pff(u_linebuffer_rsc_1_0_i_oswt_1_pff),
      .u_linebuffer_rsc_1_0_i_oswt_pff(u_linebuffer_rsc_1_0_i_oswt_pff)
    );
  scaledown_core_u_linebuffer_rsc_1_0_i_1_u_linebuffer_rsc_1_0_wait_dp scaledown_core_u_linebuffer_rsc_1_0_i_1_u_linebuffer_rsc_1_0_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .u_linebuffer_rsc_1_0_i_da_d(u_linebuffer_rsc_1_0_i_da_d_reg),
      .u_linebuffer_rsc_1_0_i_qa_d(u_linebuffer_rsc_1_0_i_qa_d),
      .u_linebuffer_rsc_1_0_i_da_d_core(nl_scaledown_core_u_linebuffer_rsc_1_0_i_1_u_linebuffer_rsc_1_0_wait_dp_inst_u_linebuffer_rsc_1_0_i_da_d_core[19:0]),
      .u_linebuffer_rsc_1_0_i_qa_d_mxwt(u_linebuffer_rsc_1_0_i_qa_d_mxwt),
      .u_linebuffer_rsc_1_0_i_biwt(u_linebuffer_rsc_1_0_i_biwt),
      .u_linebuffer_rsc_1_0_i_bdwt(u_linebuffer_rsc_1_0_i_bdwt),
      .u_linebuffer_rsc_1_0_i_biwt_1(u_linebuffer_rsc_1_0_i_biwt_1),
      .u_linebuffer_rsc_1_0_i_bdwt_2(u_linebuffer_rsc_1_0_i_bdwt_2)
    );
  assign u_linebuffer_rsc_1_0_i_ena_d = u_linebuffer_rsc_1_0_i_ena_d_core_sct;
  assign u_linebuffer_rsc_1_0_i_wea_d = u_linebuffer_rsc_1_0_i_wea_d_core_sct;
  assign u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  assign u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  assign u_linebuffer_rsc_1_0_i_da_d = u_linebuffer_rsc_1_0_i_da_d_reg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_u_linebuffer_rsc_0_0_i_1
// ------------------------------------------------------------------


module scaledown_core_u_linebuffer_rsc_0_0_i_1 (
  clk, arst_n, u_linebuffer_rsc_0_0_i_adra_d, u_linebuffer_rsc_0_0_i_da_d, u_linebuffer_rsc_0_0_i_ena_d,
      u_linebuffer_rsc_0_0_i_wea_d, u_linebuffer_rsc_0_0_i_qa_d, u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, core_wen, core_wten,
      u_linebuffer_rsc_0_0_i_oswt, u_linebuffer_rsc_0_0_i_adra_d_core, u_linebuffer_rsc_0_0_i_da_d_core,
      u_linebuffer_rsc_0_0_i_ena_d_core_psct, u_linebuffer_rsc_0_0_i_wea_d_core_psct,
      u_linebuffer_rsc_0_0_i_qa_d_mxwt, u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct,
      u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct, u_linebuffer_rsc_0_0_i_oswt_pff
);
  input clk;
  input arst_n;
  output [11:0] u_linebuffer_rsc_0_0_i_adra_d;
  output [9:0] u_linebuffer_rsc_0_0_i_da_d;
  output [1:0] u_linebuffer_rsc_0_0_i_ena_d;
  output [1:0] u_linebuffer_rsc_0_0_i_wea_d;
  input [19:0] u_linebuffer_rsc_0_0_i_qa_d;
  output [1:0] u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  input core_wen;
  input core_wten;
  input u_linebuffer_rsc_0_0_i_oswt;
  input [23:0] u_linebuffer_rsc_0_0_i_adra_d_core;
  input [19:0] u_linebuffer_rsc_0_0_i_da_d_core;
  input [1:0] u_linebuffer_rsc_0_0_i_ena_d_core_psct;
  input [1:0] u_linebuffer_rsc_0_0_i_wea_d_core_psct;
  output [9:0] u_linebuffer_rsc_0_0_i_qa_d_mxwt;
  input [1:0] u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  input u_linebuffer_rsc_0_0_i_oswt_pff;


  // Interconnect Declarations
  wire u_linebuffer_rsc_0_0_i_biwt;
  wire u_linebuffer_rsc_0_0_i_bdwt;
  wire [1:0] u_linebuffer_rsc_0_0_i_ena_d_core_sct;
  wire [1:0] u_linebuffer_rsc_0_0_i_wea_d_core_sct;
  wire [1:0] u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire [1:0] u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  wire [9:0] u_linebuffer_rsc_0_0_i_qa_d_mxwt_pconst;
  wire [11:0] u_linebuffer_rsc_0_0_i_adra_d_reg;
  wire [9:0] u_linebuffer_rsc_0_0_i_da_d_reg;


  // Interconnect Declarations for Component Instantiations 
  wire [1:0] nl_scaledown_core_u_linebuffer_rsc_0_0_i_1_u_linebuffer_rsc_0_0_wait_ctrl_inst_u_linebuffer_rsc_0_0_i_ena_d_core_psct;
  assign nl_scaledown_core_u_linebuffer_rsc_0_0_i_1_u_linebuffer_rsc_0_0_wait_ctrl_inst_u_linebuffer_rsc_0_0_i_ena_d_core_psct
      = {1'b0 , (u_linebuffer_rsc_0_0_i_ena_d_core_psct[0])};
  wire [1:0] nl_scaledown_core_u_linebuffer_rsc_0_0_i_1_u_linebuffer_rsc_0_0_wait_ctrl_inst_u_linebuffer_rsc_0_0_i_wea_d_core_psct;
  assign nl_scaledown_core_u_linebuffer_rsc_0_0_i_1_u_linebuffer_rsc_0_0_wait_ctrl_inst_u_linebuffer_rsc_0_0_i_wea_d_core_psct
      = {1'b0 , (u_linebuffer_rsc_0_0_i_wea_d_core_psct[0])};
  wire [1:0] nl_scaledown_core_u_linebuffer_rsc_0_0_i_1_u_linebuffer_rsc_0_0_wait_ctrl_inst_u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_scaledown_core_u_linebuffer_rsc_0_0_i_1_u_linebuffer_rsc_0_0_wait_ctrl_inst_u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , (u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])};
  wire [1:0] nl_scaledown_core_u_linebuffer_rsc_0_0_i_1_u_linebuffer_rsc_0_0_wait_ctrl_inst_u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_scaledown_core_u_linebuffer_rsc_0_0_i_1_u_linebuffer_rsc_0_0_wait_ctrl_inst_u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , (u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])};
  wire [23:0] nl_scaledown_core_u_linebuffer_rsc_0_0_i_1_u_linebuffer_rsc_0_0_wait_dp_inst_u_linebuffer_rsc_0_0_i_adra_d_core;
  assign nl_scaledown_core_u_linebuffer_rsc_0_0_i_1_u_linebuffer_rsc_0_0_wait_dp_inst_u_linebuffer_rsc_0_0_i_adra_d_core
      = {12'b000000000000 , (u_linebuffer_rsc_0_0_i_adra_d_core[11:0])};
  wire [19:0] nl_scaledown_core_u_linebuffer_rsc_0_0_i_1_u_linebuffer_rsc_0_0_wait_dp_inst_u_linebuffer_rsc_0_0_i_da_d_core;
  assign nl_scaledown_core_u_linebuffer_rsc_0_0_i_1_u_linebuffer_rsc_0_0_wait_dp_inst_u_linebuffer_rsc_0_0_i_da_d_core
      = {10'b0000000000 , (u_linebuffer_rsc_0_0_i_da_d_core[9:0])};
  scaledown_core_u_linebuffer_rsc_0_0_i_1_u_linebuffer_rsc_0_0_wait_ctrl scaledown_core_u_linebuffer_rsc_0_0_i_1_u_linebuffer_rsc_0_0_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .u_linebuffer_rsc_0_0_i_oswt(u_linebuffer_rsc_0_0_i_oswt),
      .u_linebuffer_rsc_0_0_i_ena_d_core_psct(nl_scaledown_core_u_linebuffer_rsc_0_0_i_1_u_linebuffer_rsc_0_0_wait_ctrl_inst_u_linebuffer_rsc_0_0_i_ena_d_core_psct[1:0]),
      .u_linebuffer_rsc_0_0_i_wea_d_core_psct(nl_scaledown_core_u_linebuffer_rsc_0_0_i_1_u_linebuffer_rsc_0_0_wait_ctrl_inst_u_linebuffer_rsc_0_0_i_wea_d_core_psct[1:0]),
      .u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_scaledown_core_u_linebuffer_rsc_0_0_i_1_u_linebuffer_rsc_0_0_wait_ctrl_inst_u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_scaledown_core_u_linebuffer_rsc_0_0_i_1_u_linebuffer_rsc_0_0_wait_ctrl_inst_u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .u_linebuffer_rsc_0_0_i_biwt(u_linebuffer_rsc_0_0_i_biwt),
      .u_linebuffer_rsc_0_0_i_bdwt(u_linebuffer_rsc_0_0_i_bdwt),
      .u_linebuffer_rsc_0_0_i_ena_d_core_sct(u_linebuffer_rsc_0_0_i_ena_d_core_sct),
      .u_linebuffer_rsc_0_0_i_wea_d_core_sct(u_linebuffer_rsc_0_0_i_wea_d_core_sct),
      .u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct(u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct(u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct),
      .u_linebuffer_rsc_0_0_i_oswt_pff(u_linebuffer_rsc_0_0_i_oswt_pff)
    );
  scaledown_core_u_linebuffer_rsc_0_0_i_1_u_linebuffer_rsc_0_0_wait_dp scaledown_core_u_linebuffer_rsc_0_0_i_1_u_linebuffer_rsc_0_0_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .u_linebuffer_rsc_0_0_i_adra_d(u_linebuffer_rsc_0_0_i_adra_d_reg),
      .u_linebuffer_rsc_0_0_i_da_d(u_linebuffer_rsc_0_0_i_da_d_reg),
      .u_linebuffer_rsc_0_0_i_qa_d(u_linebuffer_rsc_0_0_i_qa_d),
      .u_linebuffer_rsc_0_0_i_adra_d_core(nl_scaledown_core_u_linebuffer_rsc_0_0_i_1_u_linebuffer_rsc_0_0_wait_dp_inst_u_linebuffer_rsc_0_0_i_adra_d_core[23:0]),
      .u_linebuffer_rsc_0_0_i_da_d_core(nl_scaledown_core_u_linebuffer_rsc_0_0_i_1_u_linebuffer_rsc_0_0_wait_dp_inst_u_linebuffer_rsc_0_0_i_da_d_core[19:0]),
      .u_linebuffer_rsc_0_0_i_qa_d_mxwt(u_linebuffer_rsc_0_0_i_qa_d_mxwt_pconst),
      .u_linebuffer_rsc_0_0_i_biwt(u_linebuffer_rsc_0_0_i_biwt),
      .u_linebuffer_rsc_0_0_i_bdwt(u_linebuffer_rsc_0_0_i_bdwt)
    );
  assign u_linebuffer_rsc_0_0_i_qa_d_mxwt = u_linebuffer_rsc_0_0_i_qa_d_mxwt_pconst;
  assign u_linebuffer_rsc_0_0_i_ena_d = u_linebuffer_rsc_0_0_i_ena_d_core_sct;
  assign u_linebuffer_rsc_0_0_i_wea_d = u_linebuffer_rsc_0_0_i_wea_d_core_sct;
  assign u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  assign u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  assign u_linebuffer_rsc_0_0_i_adra_d = u_linebuffer_rsc_0_0_i_adra_d_reg;
  assign u_linebuffer_rsc_0_0_i_da_d = u_linebuffer_rsc_0_0_i_da_d_reg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_y_linebuffer_rsc_2_0_i_1
// ------------------------------------------------------------------


module scaledown_core_y_linebuffer_rsc_2_0_i_1 (
  clk, arst_n, y_linebuffer_rsc_2_0_i_da_d, y_linebuffer_rsc_2_0_i_ena_d, y_linebuffer_rsc_2_0_i_wea_d,
      y_linebuffer_rsc_2_0_i_qa_d, y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, core_wen, core_wten,
      y_linebuffer_rsc_2_0_i_oswt, y_linebuffer_rsc_2_0_i_oswt_1, y_linebuffer_rsc_2_0_i_da_d_core,
      y_linebuffer_rsc_2_0_i_ena_d_core_psct, y_linebuffer_rsc_2_0_i_wea_d_core_psct,
      y_linebuffer_rsc_2_0_i_qa_d_mxwt, y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct,
      y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct, y_linebuffer_rsc_2_0_i_oswt_1_pff,
      y_linebuffer_rsc_2_0_i_oswt_pff
);
  input clk;
  input arst_n;
  output [9:0] y_linebuffer_rsc_2_0_i_da_d;
  output [1:0] y_linebuffer_rsc_2_0_i_ena_d;
  output [1:0] y_linebuffer_rsc_2_0_i_wea_d;
  input [19:0] y_linebuffer_rsc_2_0_i_qa_d;
  output [1:0] y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  input core_wen;
  input core_wten;
  input y_linebuffer_rsc_2_0_i_oswt;
  input y_linebuffer_rsc_2_0_i_oswt_1;
  input [19:0] y_linebuffer_rsc_2_0_i_da_d_core;
  input [1:0] y_linebuffer_rsc_2_0_i_ena_d_core_psct;
  input [1:0] y_linebuffer_rsc_2_0_i_wea_d_core_psct;
  output [19:0] y_linebuffer_rsc_2_0_i_qa_d_mxwt;
  input [1:0] y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  input y_linebuffer_rsc_2_0_i_oswt_1_pff;
  input y_linebuffer_rsc_2_0_i_oswt_pff;


  // Interconnect Declarations
  wire y_linebuffer_rsc_2_0_i_biwt;
  wire y_linebuffer_rsc_2_0_i_bdwt;
  wire y_linebuffer_rsc_2_0_i_biwt_1;
  wire y_linebuffer_rsc_2_0_i_bdwt_2;
  wire [1:0] y_linebuffer_rsc_2_0_i_ena_d_core_sct;
  wire [1:0] y_linebuffer_rsc_2_0_i_wea_d_core_sct;
  wire [1:0] y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire [1:0] y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  wire [9:0] y_linebuffer_rsc_2_0_i_da_d_reg;


  // Interconnect Declarations for Component Instantiations 
  wire [1:0] nl_scaledown_core_y_linebuffer_rsc_2_0_i_1_y_linebuffer_rsc_2_0_wait_ctrl_inst_y_linebuffer_rsc_2_0_i_wea_d_core_psct;
  assign nl_scaledown_core_y_linebuffer_rsc_2_0_i_1_y_linebuffer_rsc_2_0_wait_ctrl_inst_y_linebuffer_rsc_2_0_i_wea_d_core_psct
      = {1'b0 , (y_linebuffer_rsc_2_0_i_wea_d_core_psct[0])};
  wire [1:0] nl_scaledown_core_y_linebuffer_rsc_2_0_i_1_y_linebuffer_rsc_2_0_wait_ctrl_inst_y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_scaledown_core_y_linebuffer_rsc_2_0_i_1_y_linebuffer_rsc_2_0_wait_ctrl_inst_y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , (y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])};
  wire [19:0] nl_scaledown_core_y_linebuffer_rsc_2_0_i_1_y_linebuffer_rsc_2_0_wait_dp_inst_y_linebuffer_rsc_2_0_i_da_d_core;
  assign nl_scaledown_core_y_linebuffer_rsc_2_0_i_1_y_linebuffer_rsc_2_0_wait_dp_inst_y_linebuffer_rsc_2_0_i_da_d_core
      = {10'b0000000000 , (y_linebuffer_rsc_2_0_i_da_d_core[9:0])};
  scaledown_core_y_linebuffer_rsc_2_0_i_1_y_linebuffer_rsc_2_0_wait_ctrl scaledown_core_y_linebuffer_rsc_2_0_i_1_y_linebuffer_rsc_2_0_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .y_linebuffer_rsc_2_0_i_oswt(y_linebuffer_rsc_2_0_i_oswt),
      .y_linebuffer_rsc_2_0_i_oswt_1(y_linebuffer_rsc_2_0_i_oswt_1),
      .y_linebuffer_rsc_2_0_i_ena_d_core_psct(y_linebuffer_rsc_2_0_i_ena_d_core_psct),
      .y_linebuffer_rsc_2_0_i_wea_d_core_psct(nl_scaledown_core_y_linebuffer_rsc_2_0_i_1_y_linebuffer_rsc_2_0_wait_ctrl_inst_y_linebuffer_rsc_2_0_i_wea_d_core_psct[1:0]),
      .y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_scaledown_core_y_linebuffer_rsc_2_0_i_1_y_linebuffer_rsc_2_0_wait_ctrl_inst_y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .y_linebuffer_rsc_2_0_i_biwt(y_linebuffer_rsc_2_0_i_biwt),
      .y_linebuffer_rsc_2_0_i_bdwt(y_linebuffer_rsc_2_0_i_bdwt),
      .y_linebuffer_rsc_2_0_i_biwt_1(y_linebuffer_rsc_2_0_i_biwt_1),
      .y_linebuffer_rsc_2_0_i_bdwt_2(y_linebuffer_rsc_2_0_i_bdwt_2),
      .y_linebuffer_rsc_2_0_i_ena_d_core_sct(y_linebuffer_rsc_2_0_i_ena_d_core_sct),
      .y_linebuffer_rsc_2_0_i_wea_d_core_sct(y_linebuffer_rsc_2_0_i_wea_d_core_sct),
      .y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct(y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct(y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct),
      .y_linebuffer_rsc_2_0_i_oswt_1_pff(y_linebuffer_rsc_2_0_i_oswt_1_pff),
      .y_linebuffer_rsc_2_0_i_oswt_pff(y_linebuffer_rsc_2_0_i_oswt_pff)
    );
  scaledown_core_y_linebuffer_rsc_2_0_i_1_y_linebuffer_rsc_2_0_wait_dp scaledown_core_y_linebuffer_rsc_2_0_i_1_y_linebuffer_rsc_2_0_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .y_linebuffer_rsc_2_0_i_da_d(y_linebuffer_rsc_2_0_i_da_d_reg),
      .y_linebuffer_rsc_2_0_i_qa_d(y_linebuffer_rsc_2_0_i_qa_d),
      .y_linebuffer_rsc_2_0_i_da_d_core(nl_scaledown_core_y_linebuffer_rsc_2_0_i_1_y_linebuffer_rsc_2_0_wait_dp_inst_y_linebuffer_rsc_2_0_i_da_d_core[19:0]),
      .y_linebuffer_rsc_2_0_i_qa_d_mxwt(y_linebuffer_rsc_2_0_i_qa_d_mxwt),
      .y_linebuffer_rsc_2_0_i_biwt(y_linebuffer_rsc_2_0_i_biwt),
      .y_linebuffer_rsc_2_0_i_bdwt(y_linebuffer_rsc_2_0_i_bdwt),
      .y_linebuffer_rsc_2_0_i_biwt_1(y_linebuffer_rsc_2_0_i_biwt_1),
      .y_linebuffer_rsc_2_0_i_bdwt_2(y_linebuffer_rsc_2_0_i_bdwt_2)
    );
  assign y_linebuffer_rsc_2_0_i_ena_d = y_linebuffer_rsc_2_0_i_ena_d_core_sct;
  assign y_linebuffer_rsc_2_0_i_wea_d = y_linebuffer_rsc_2_0_i_wea_d_core_sct;
  assign y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  assign y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  assign y_linebuffer_rsc_2_0_i_da_d = y_linebuffer_rsc_2_0_i_da_d_reg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_y_linebuffer_rsc_1_0_i_1
// ------------------------------------------------------------------


module scaledown_core_y_linebuffer_rsc_1_0_i_1 (
  clk, arst_n, y_linebuffer_rsc_1_0_i_da_d, y_linebuffer_rsc_1_0_i_ena_d, y_linebuffer_rsc_1_0_i_wea_d,
      y_linebuffer_rsc_1_0_i_qa_d, y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, core_wen, core_wten,
      y_linebuffer_rsc_1_0_i_oswt, y_linebuffer_rsc_1_0_i_oswt_1, y_linebuffer_rsc_1_0_i_da_d_core,
      y_linebuffer_rsc_1_0_i_ena_d_core_psct, y_linebuffer_rsc_1_0_i_wea_d_core_psct,
      y_linebuffer_rsc_1_0_i_qa_d_mxwt, y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct,
      y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct, y_linebuffer_rsc_1_0_i_oswt_1_pff,
      y_linebuffer_rsc_1_0_i_oswt_pff
);
  input clk;
  input arst_n;
  output [9:0] y_linebuffer_rsc_1_0_i_da_d;
  output [1:0] y_linebuffer_rsc_1_0_i_ena_d;
  output [1:0] y_linebuffer_rsc_1_0_i_wea_d;
  input [19:0] y_linebuffer_rsc_1_0_i_qa_d;
  output [1:0] y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  input core_wen;
  input core_wten;
  input y_linebuffer_rsc_1_0_i_oswt;
  input y_linebuffer_rsc_1_0_i_oswt_1;
  input [19:0] y_linebuffer_rsc_1_0_i_da_d_core;
  input [1:0] y_linebuffer_rsc_1_0_i_ena_d_core_psct;
  input [1:0] y_linebuffer_rsc_1_0_i_wea_d_core_psct;
  output [19:0] y_linebuffer_rsc_1_0_i_qa_d_mxwt;
  input [1:0] y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  input y_linebuffer_rsc_1_0_i_oswt_1_pff;
  input y_linebuffer_rsc_1_0_i_oswt_pff;


  // Interconnect Declarations
  wire y_linebuffer_rsc_1_0_i_biwt;
  wire y_linebuffer_rsc_1_0_i_bdwt;
  wire y_linebuffer_rsc_1_0_i_biwt_1;
  wire y_linebuffer_rsc_1_0_i_bdwt_2;
  wire [1:0] y_linebuffer_rsc_1_0_i_ena_d_core_sct;
  wire [1:0] y_linebuffer_rsc_1_0_i_wea_d_core_sct;
  wire [1:0] y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire [1:0] y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  wire [9:0] y_linebuffer_rsc_1_0_i_da_d_reg;


  // Interconnect Declarations for Component Instantiations 
  wire [1:0] nl_scaledown_core_y_linebuffer_rsc_1_0_i_1_y_linebuffer_rsc_1_0_wait_ctrl_inst_y_linebuffer_rsc_1_0_i_wea_d_core_psct;
  assign nl_scaledown_core_y_linebuffer_rsc_1_0_i_1_y_linebuffer_rsc_1_0_wait_ctrl_inst_y_linebuffer_rsc_1_0_i_wea_d_core_psct
      = {1'b0 , (y_linebuffer_rsc_1_0_i_wea_d_core_psct[0])};
  wire [1:0] nl_scaledown_core_y_linebuffer_rsc_1_0_i_1_y_linebuffer_rsc_1_0_wait_ctrl_inst_y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_scaledown_core_y_linebuffer_rsc_1_0_i_1_y_linebuffer_rsc_1_0_wait_ctrl_inst_y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , (y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])};
  wire [19:0] nl_scaledown_core_y_linebuffer_rsc_1_0_i_1_y_linebuffer_rsc_1_0_wait_dp_inst_y_linebuffer_rsc_1_0_i_da_d_core;
  assign nl_scaledown_core_y_linebuffer_rsc_1_0_i_1_y_linebuffer_rsc_1_0_wait_dp_inst_y_linebuffer_rsc_1_0_i_da_d_core
      = {10'b0000000000 , (y_linebuffer_rsc_1_0_i_da_d_core[9:0])};
  scaledown_core_y_linebuffer_rsc_1_0_i_1_y_linebuffer_rsc_1_0_wait_ctrl scaledown_core_y_linebuffer_rsc_1_0_i_1_y_linebuffer_rsc_1_0_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .y_linebuffer_rsc_1_0_i_oswt(y_linebuffer_rsc_1_0_i_oswt),
      .y_linebuffer_rsc_1_0_i_oswt_1(y_linebuffer_rsc_1_0_i_oswt_1),
      .y_linebuffer_rsc_1_0_i_ena_d_core_psct(y_linebuffer_rsc_1_0_i_ena_d_core_psct),
      .y_linebuffer_rsc_1_0_i_wea_d_core_psct(nl_scaledown_core_y_linebuffer_rsc_1_0_i_1_y_linebuffer_rsc_1_0_wait_ctrl_inst_y_linebuffer_rsc_1_0_i_wea_d_core_psct[1:0]),
      .y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct),
      .y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_scaledown_core_y_linebuffer_rsc_1_0_i_1_y_linebuffer_rsc_1_0_wait_ctrl_inst_y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .y_linebuffer_rsc_1_0_i_biwt(y_linebuffer_rsc_1_0_i_biwt),
      .y_linebuffer_rsc_1_0_i_bdwt(y_linebuffer_rsc_1_0_i_bdwt),
      .y_linebuffer_rsc_1_0_i_biwt_1(y_linebuffer_rsc_1_0_i_biwt_1),
      .y_linebuffer_rsc_1_0_i_bdwt_2(y_linebuffer_rsc_1_0_i_bdwt_2),
      .y_linebuffer_rsc_1_0_i_ena_d_core_sct(y_linebuffer_rsc_1_0_i_ena_d_core_sct),
      .y_linebuffer_rsc_1_0_i_wea_d_core_sct(y_linebuffer_rsc_1_0_i_wea_d_core_sct),
      .y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct(y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct(y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct),
      .y_linebuffer_rsc_1_0_i_oswt_1_pff(y_linebuffer_rsc_1_0_i_oswt_1_pff),
      .y_linebuffer_rsc_1_0_i_oswt_pff(y_linebuffer_rsc_1_0_i_oswt_pff)
    );
  scaledown_core_y_linebuffer_rsc_1_0_i_1_y_linebuffer_rsc_1_0_wait_dp scaledown_core_y_linebuffer_rsc_1_0_i_1_y_linebuffer_rsc_1_0_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .y_linebuffer_rsc_1_0_i_da_d(y_linebuffer_rsc_1_0_i_da_d_reg),
      .y_linebuffer_rsc_1_0_i_qa_d(y_linebuffer_rsc_1_0_i_qa_d),
      .y_linebuffer_rsc_1_0_i_da_d_core(nl_scaledown_core_y_linebuffer_rsc_1_0_i_1_y_linebuffer_rsc_1_0_wait_dp_inst_y_linebuffer_rsc_1_0_i_da_d_core[19:0]),
      .y_linebuffer_rsc_1_0_i_qa_d_mxwt(y_linebuffer_rsc_1_0_i_qa_d_mxwt),
      .y_linebuffer_rsc_1_0_i_biwt(y_linebuffer_rsc_1_0_i_biwt),
      .y_linebuffer_rsc_1_0_i_bdwt(y_linebuffer_rsc_1_0_i_bdwt),
      .y_linebuffer_rsc_1_0_i_biwt_1(y_linebuffer_rsc_1_0_i_biwt_1),
      .y_linebuffer_rsc_1_0_i_bdwt_2(y_linebuffer_rsc_1_0_i_bdwt_2)
    );
  assign y_linebuffer_rsc_1_0_i_ena_d = y_linebuffer_rsc_1_0_i_ena_d_core_sct;
  assign y_linebuffer_rsc_1_0_i_wea_d = y_linebuffer_rsc_1_0_i_wea_d_core_sct;
  assign y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  assign y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  assign y_linebuffer_rsc_1_0_i_da_d = y_linebuffer_rsc_1_0_i_da_d_reg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_y_linebuffer_rsc_0_0_i_1
// ------------------------------------------------------------------


module scaledown_core_y_linebuffer_rsc_0_0_i_1 (
  clk, arst_n, y_linebuffer_rsc_0_0_i_adra_d, y_linebuffer_rsc_0_0_i_da_d, y_linebuffer_rsc_0_0_i_ena_d,
      y_linebuffer_rsc_0_0_i_wea_d, y_linebuffer_rsc_0_0_i_qa_d, y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, core_wen, core_wten,
      y_linebuffer_rsc_0_0_i_oswt, y_linebuffer_rsc_0_0_i_adra_d_core, y_linebuffer_rsc_0_0_i_da_d_core,
      y_linebuffer_rsc_0_0_i_ena_d_core_psct, y_linebuffer_rsc_0_0_i_wea_d_core_psct,
      y_linebuffer_rsc_0_0_i_qa_d_mxwt, y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct,
      y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct, y_linebuffer_rsc_0_0_i_oswt_pff
);
  input clk;
  input arst_n;
  output [11:0] y_linebuffer_rsc_0_0_i_adra_d;
  output [9:0] y_linebuffer_rsc_0_0_i_da_d;
  output [1:0] y_linebuffer_rsc_0_0_i_ena_d;
  output [1:0] y_linebuffer_rsc_0_0_i_wea_d;
  input [19:0] y_linebuffer_rsc_0_0_i_qa_d;
  output [1:0] y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  input core_wen;
  input core_wten;
  input y_linebuffer_rsc_0_0_i_oswt;
  input [23:0] y_linebuffer_rsc_0_0_i_adra_d_core;
  input [19:0] y_linebuffer_rsc_0_0_i_da_d_core;
  input [1:0] y_linebuffer_rsc_0_0_i_ena_d_core_psct;
  input [1:0] y_linebuffer_rsc_0_0_i_wea_d_core_psct;
  output [9:0] y_linebuffer_rsc_0_0_i_qa_d_mxwt;
  input [1:0] y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  input [1:0] y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  input y_linebuffer_rsc_0_0_i_oswt_pff;


  // Interconnect Declarations
  wire y_linebuffer_rsc_0_0_i_biwt;
  wire y_linebuffer_rsc_0_0_i_bdwt;
  wire [1:0] y_linebuffer_rsc_0_0_i_ena_d_core_sct;
  wire [1:0] y_linebuffer_rsc_0_0_i_wea_d_core_sct;
  wire [1:0] y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  wire [1:0] y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  wire [9:0] y_linebuffer_rsc_0_0_i_qa_d_mxwt_pconst;
  wire [11:0] y_linebuffer_rsc_0_0_i_adra_d_reg;
  wire [9:0] y_linebuffer_rsc_0_0_i_da_d_reg;


  // Interconnect Declarations for Component Instantiations 
  wire [1:0] nl_scaledown_core_y_linebuffer_rsc_0_0_i_1_y_linebuffer_rsc_0_0_wait_ctrl_inst_y_linebuffer_rsc_0_0_i_ena_d_core_psct;
  assign nl_scaledown_core_y_linebuffer_rsc_0_0_i_1_y_linebuffer_rsc_0_0_wait_ctrl_inst_y_linebuffer_rsc_0_0_i_ena_d_core_psct
      = {1'b0 , (y_linebuffer_rsc_0_0_i_ena_d_core_psct[0])};
  wire [1:0] nl_scaledown_core_y_linebuffer_rsc_0_0_i_1_y_linebuffer_rsc_0_0_wait_ctrl_inst_y_linebuffer_rsc_0_0_i_wea_d_core_psct;
  assign nl_scaledown_core_y_linebuffer_rsc_0_0_i_1_y_linebuffer_rsc_0_0_wait_ctrl_inst_y_linebuffer_rsc_0_0_i_wea_d_core_psct
      = {1'b0 , (y_linebuffer_rsc_0_0_i_wea_d_core_psct[0])};
  wire [1:0] nl_scaledown_core_y_linebuffer_rsc_0_0_i_1_y_linebuffer_rsc_0_0_wait_ctrl_inst_y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_scaledown_core_y_linebuffer_rsc_0_0_i_1_y_linebuffer_rsc_0_0_wait_ctrl_inst_y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , (y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[0])};
  wire [1:0] nl_scaledown_core_y_linebuffer_rsc_0_0_i_1_y_linebuffer_rsc_0_0_wait_ctrl_inst_y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_scaledown_core_y_linebuffer_rsc_0_0_i_1_y_linebuffer_rsc_0_0_wait_ctrl_inst_y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , (y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[0])};
  wire [23:0] nl_scaledown_core_y_linebuffer_rsc_0_0_i_1_y_linebuffer_rsc_0_0_wait_dp_inst_y_linebuffer_rsc_0_0_i_adra_d_core;
  assign nl_scaledown_core_y_linebuffer_rsc_0_0_i_1_y_linebuffer_rsc_0_0_wait_dp_inst_y_linebuffer_rsc_0_0_i_adra_d_core
      = {12'b000000000000 , (y_linebuffer_rsc_0_0_i_adra_d_core[11:0])};
  wire [19:0] nl_scaledown_core_y_linebuffer_rsc_0_0_i_1_y_linebuffer_rsc_0_0_wait_dp_inst_y_linebuffer_rsc_0_0_i_da_d_core;
  assign nl_scaledown_core_y_linebuffer_rsc_0_0_i_1_y_linebuffer_rsc_0_0_wait_dp_inst_y_linebuffer_rsc_0_0_i_da_d_core
      = {10'b0000000000 , (y_linebuffer_rsc_0_0_i_da_d_core[9:0])};
  scaledown_core_y_linebuffer_rsc_0_0_i_1_y_linebuffer_rsc_0_0_wait_ctrl scaledown_core_y_linebuffer_rsc_0_0_i_1_y_linebuffer_rsc_0_0_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .core_wten(core_wten),
      .y_linebuffer_rsc_0_0_i_oswt(y_linebuffer_rsc_0_0_i_oswt),
      .y_linebuffer_rsc_0_0_i_ena_d_core_psct(nl_scaledown_core_y_linebuffer_rsc_0_0_i_1_y_linebuffer_rsc_0_0_wait_ctrl_inst_y_linebuffer_rsc_0_0_i_ena_d_core_psct[1:0]),
      .y_linebuffer_rsc_0_0_i_wea_d_core_psct(nl_scaledown_core_y_linebuffer_rsc_0_0_i_1_y_linebuffer_rsc_0_0_wait_ctrl_inst_y_linebuffer_rsc_0_0_i_wea_d_core_psct[1:0]),
      .y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_scaledown_core_y_linebuffer_rsc_0_0_i_1_y_linebuffer_rsc_0_0_wait_ctrl_inst_y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_scaledown_core_y_linebuffer_rsc_0_0_i_1_y_linebuffer_rsc_0_0_wait_ctrl_inst_y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .y_linebuffer_rsc_0_0_i_biwt(y_linebuffer_rsc_0_0_i_biwt),
      .y_linebuffer_rsc_0_0_i_bdwt(y_linebuffer_rsc_0_0_i_bdwt),
      .y_linebuffer_rsc_0_0_i_ena_d_core_sct(y_linebuffer_rsc_0_0_i_ena_d_core_sct),
      .y_linebuffer_rsc_0_0_i_wea_d_core_sct(y_linebuffer_rsc_0_0_i_wea_d_core_sct),
      .y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct(y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct),
      .y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct(y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct),
      .y_linebuffer_rsc_0_0_i_oswt_pff(y_linebuffer_rsc_0_0_i_oswt_pff)
    );
  scaledown_core_y_linebuffer_rsc_0_0_i_1_y_linebuffer_rsc_0_0_wait_dp scaledown_core_y_linebuffer_rsc_0_0_i_1_y_linebuffer_rsc_0_0_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .y_linebuffer_rsc_0_0_i_adra_d(y_linebuffer_rsc_0_0_i_adra_d_reg),
      .y_linebuffer_rsc_0_0_i_da_d(y_linebuffer_rsc_0_0_i_da_d_reg),
      .y_linebuffer_rsc_0_0_i_qa_d(y_linebuffer_rsc_0_0_i_qa_d),
      .y_linebuffer_rsc_0_0_i_adra_d_core(nl_scaledown_core_y_linebuffer_rsc_0_0_i_1_y_linebuffer_rsc_0_0_wait_dp_inst_y_linebuffer_rsc_0_0_i_adra_d_core[23:0]),
      .y_linebuffer_rsc_0_0_i_da_d_core(nl_scaledown_core_y_linebuffer_rsc_0_0_i_1_y_linebuffer_rsc_0_0_wait_dp_inst_y_linebuffer_rsc_0_0_i_da_d_core[19:0]),
      .y_linebuffer_rsc_0_0_i_qa_d_mxwt(y_linebuffer_rsc_0_0_i_qa_d_mxwt_pconst),
      .y_linebuffer_rsc_0_0_i_biwt(y_linebuffer_rsc_0_0_i_biwt),
      .y_linebuffer_rsc_0_0_i_bdwt(y_linebuffer_rsc_0_0_i_bdwt)
    );
  assign y_linebuffer_rsc_0_0_i_qa_d_mxwt = y_linebuffer_rsc_0_0_i_qa_d_mxwt_pconst;
  assign y_linebuffer_rsc_0_0_i_ena_d = y_linebuffer_rsc_0_0_i_ena_d_core_sct;
  assign y_linebuffer_rsc_0_0_i_wea_d = y_linebuffer_rsc_0_0_i_wea_d_core_sct;
  assign y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_sct;
  assign y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_sct;
  assign y_linebuffer_rsc_0_0_i_adra_d = y_linebuffer_rsc_0_0_i_adra_d_reg;
  assign y_linebuffer_rsc_0_0_i_da_d = y_linebuffer_rsc_0_0_i_da_d_reg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_v_dst_rsci
// ------------------------------------------------------------------


module scaledown_core_v_dst_rsci (
  clk, arst_n, v_dst_rsc_dat, v_dst_rsc_vld, v_dst_rsc_rdy, core_wen, v_dst_rsci_oswt,
      v_dst_rsci_wen_comp, v_dst_rsci_idat
);
  input clk;
  input arst_n;
  output [9:0] v_dst_rsc_dat;
  output v_dst_rsc_vld;
  input v_dst_rsc_rdy;
  input core_wen;
  input v_dst_rsci_oswt;
  output v_dst_rsci_wen_comp;
  input [9:0] v_dst_rsci_idat;


  // Interconnect Declarations
  wire v_dst_rsci_irdy;
  wire v_dst_rsci_biwt;
  wire v_dst_rsci_bdwt;
  wire v_dst_rsci_bcwt;
  wire v_dst_rsci_ivld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_wait_v1 #(.rscid(32'sd357),
  .width(32'sd10)) v_dst_rsci (
      .irdy(v_dst_rsci_irdy),
      .ivld(v_dst_rsci_ivld_core_sct),
      .idat(v_dst_rsci_idat),
      .rdy(v_dst_rsc_rdy),
      .vld(v_dst_rsc_vld),
      .dat(v_dst_rsc_dat)
    );
  scaledown_core_v_dst_rsci_v_dst_wait_ctrl scaledown_core_v_dst_rsci_v_dst_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .v_dst_rsci_oswt(v_dst_rsci_oswt),
      .v_dst_rsci_irdy(v_dst_rsci_irdy),
      .v_dst_rsci_biwt(v_dst_rsci_biwt),
      .v_dst_rsci_bdwt(v_dst_rsci_bdwt),
      .v_dst_rsci_bcwt(v_dst_rsci_bcwt),
      .v_dst_rsci_ivld_core_sct(v_dst_rsci_ivld_core_sct)
    );
  scaledown_core_v_dst_rsci_v_dst_wait_dp scaledown_core_v_dst_rsci_v_dst_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .v_dst_rsci_oswt(v_dst_rsci_oswt),
      .v_dst_rsci_wen_comp(v_dst_rsci_wen_comp),
      .v_dst_rsci_biwt(v_dst_rsci_biwt),
      .v_dst_rsci_bdwt(v_dst_rsci_bdwt),
      .v_dst_rsci_bcwt(v_dst_rsci_bcwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_u_dst_rsci
// ------------------------------------------------------------------


module scaledown_core_u_dst_rsci (
  clk, arst_n, u_dst_rsc_dat, u_dst_rsc_vld, u_dst_rsc_rdy, core_wen, u_dst_rsci_oswt,
      u_dst_rsci_wen_comp, u_dst_rsci_idat
);
  input clk;
  input arst_n;
  output [9:0] u_dst_rsc_dat;
  output u_dst_rsc_vld;
  input u_dst_rsc_rdy;
  input core_wen;
  input u_dst_rsci_oswt;
  output u_dst_rsci_wen_comp;
  input [9:0] u_dst_rsci_idat;


  // Interconnect Declarations
  wire u_dst_rsci_irdy;
  wire u_dst_rsci_biwt;
  wire u_dst_rsci_bdwt;
  wire u_dst_rsci_bcwt;
  wire u_dst_rsci_ivld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_wait_v1 #(.rscid(32'sd356),
  .width(32'sd10)) u_dst_rsci (
      .irdy(u_dst_rsci_irdy),
      .ivld(u_dst_rsci_ivld_core_sct),
      .idat(u_dst_rsci_idat),
      .rdy(u_dst_rsc_rdy),
      .vld(u_dst_rsc_vld),
      .dat(u_dst_rsc_dat)
    );
  scaledown_core_u_dst_rsci_u_dst_wait_ctrl scaledown_core_u_dst_rsci_u_dst_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .u_dst_rsci_oswt(u_dst_rsci_oswt),
      .u_dst_rsci_irdy(u_dst_rsci_irdy),
      .u_dst_rsci_biwt(u_dst_rsci_biwt),
      .u_dst_rsci_bdwt(u_dst_rsci_bdwt),
      .u_dst_rsci_bcwt(u_dst_rsci_bcwt),
      .u_dst_rsci_ivld_core_sct(u_dst_rsci_ivld_core_sct)
    );
  scaledown_core_u_dst_rsci_u_dst_wait_dp scaledown_core_u_dst_rsci_u_dst_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .u_dst_rsci_oswt(u_dst_rsci_oswt),
      .u_dst_rsci_wen_comp(u_dst_rsci_wen_comp),
      .u_dst_rsci_biwt(u_dst_rsci_biwt),
      .u_dst_rsci_bdwt(u_dst_rsci_bdwt),
      .u_dst_rsci_bcwt(u_dst_rsci_bcwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_y_dst_rsci
// ------------------------------------------------------------------


module scaledown_core_y_dst_rsci (
  clk, arst_n, y_dst_rsc_dat, y_dst_rsc_vld, y_dst_rsc_rdy, core_wen, y_dst_rsci_oswt,
      y_dst_rsci_wen_comp, y_dst_rsci_idat
);
  input clk;
  input arst_n;
  output [9:0] y_dst_rsc_dat;
  output y_dst_rsc_vld;
  input y_dst_rsc_rdy;
  input core_wen;
  input y_dst_rsci_oswt;
  output y_dst_rsci_wen_comp;
  input [9:0] y_dst_rsci_idat;


  // Interconnect Declarations
  wire y_dst_rsci_irdy;
  wire y_dst_rsci_biwt;
  wire y_dst_rsci_bdwt;
  wire y_dst_rsci_bcwt;
  wire y_dst_rsci_ivld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_wait_v1 #(.rscid(32'sd355),
  .width(32'sd10)) y_dst_rsci (
      .irdy(y_dst_rsci_irdy),
      .ivld(y_dst_rsci_ivld_core_sct),
      .idat(y_dst_rsci_idat),
      .rdy(y_dst_rsc_rdy),
      .vld(y_dst_rsc_vld),
      .dat(y_dst_rsc_dat)
    );
  scaledown_core_y_dst_rsci_y_dst_wait_ctrl scaledown_core_y_dst_rsci_y_dst_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .y_dst_rsci_oswt(y_dst_rsci_oswt),
      .y_dst_rsci_irdy(y_dst_rsci_irdy),
      .y_dst_rsci_biwt(y_dst_rsci_biwt),
      .y_dst_rsci_bdwt(y_dst_rsci_bdwt),
      .y_dst_rsci_bcwt(y_dst_rsci_bcwt),
      .y_dst_rsci_ivld_core_sct(y_dst_rsci_ivld_core_sct)
    );
  scaledown_core_y_dst_rsci_y_dst_wait_dp scaledown_core_y_dst_rsci_y_dst_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .y_dst_rsci_oswt(y_dst_rsci_oswt),
      .y_dst_rsci_wen_comp(y_dst_rsci_wen_comp),
      .y_dst_rsci_biwt(y_dst_rsci_biwt),
      .y_dst_rsci_bdwt(y_dst_rsci_bdwt),
      .y_dst_rsci_bcwt(y_dst_rsci_bcwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_v_src_rsci
// ------------------------------------------------------------------


module scaledown_core_v_src_rsci (
  clk, arst_n, v_src_rsc_dat, v_src_rsc_vld, v_src_rsc_rdy, core_wen, v_src_rsci_oswt,
      v_src_rsci_wen_comp, v_src_rsci_idat_mxwt
);
  input clk;
  input arst_n;
  input [9:0] v_src_rsc_dat;
  input v_src_rsc_vld;
  output v_src_rsc_rdy;
  input core_wen;
  input v_src_rsci_oswt;
  output v_src_rsci_wen_comp;
  output [9:0] v_src_rsci_idat_mxwt;


  // Interconnect Declarations
  wire v_src_rsci_biwt;
  wire v_src_rsci_bdwt;
  wire v_src_rsci_bcwt;
  wire v_src_rsci_irdy_core_sct;
  wire v_src_rsci_ivld;
  wire [9:0] v_src_rsci_idat;


  // Interconnect Declarations for Component Instantiations 
  ccs_in_wait_v1 #(.rscid(32'sd354),
  .width(32'sd10)) v_src_rsci (
      .rdy(v_src_rsc_rdy),
      .vld(v_src_rsc_vld),
      .dat(v_src_rsc_dat),
      .irdy(v_src_rsci_irdy_core_sct),
      .ivld(v_src_rsci_ivld),
      .idat(v_src_rsci_idat)
    );
  scaledown_core_v_src_rsci_v_src_wait_ctrl scaledown_core_v_src_rsci_v_src_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .v_src_rsci_oswt(v_src_rsci_oswt),
      .v_src_rsci_biwt(v_src_rsci_biwt),
      .v_src_rsci_bdwt(v_src_rsci_bdwt),
      .v_src_rsci_bcwt(v_src_rsci_bcwt),
      .v_src_rsci_irdy_core_sct(v_src_rsci_irdy_core_sct),
      .v_src_rsci_ivld(v_src_rsci_ivld)
    );
  scaledown_core_v_src_rsci_v_src_wait_dp scaledown_core_v_src_rsci_v_src_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .v_src_rsci_oswt(v_src_rsci_oswt),
      .v_src_rsci_wen_comp(v_src_rsci_wen_comp),
      .v_src_rsci_idat_mxwt(v_src_rsci_idat_mxwt),
      .v_src_rsci_biwt(v_src_rsci_biwt),
      .v_src_rsci_bdwt(v_src_rsci_bdwt),
      .v_src_rsci_bcwt(v_src_rsci_bcwt),
      .v_src_rsci_idat(v_src_rsci_idat)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_u_src_rsci
// ------------------------------------------------------------------


module scaledown_core_u_src_rsci (
  clk, arst_n, u_src_rsc_dat, u_src_rsc_vld, u_src_rsc_rdy, core_wen, u_src_rsci_oswt,
      u_src_rsci_wen_comp, u_src_rsci_idat_mxwt
);
  input clk;
  input arst_n;
  input [9:0] u_src_rsc_dat;
  input u_src_rsc_vld;
  output u_src_rsc_rdy;
  input core_wen;
  input u_src_rsci_oswt;
  output u_src_rsci_wen_comp;
  output [9:0] u_src_rsci_idat_mxwt;


  // Interconnect Declarations
  wire u_src_rsci_biwt;
  wire u_src_rsci_bdwt;
  wire u_src_rsci_bcwt;
  wire u_src_rsci_irdy_core_sct;
  wire u_src_rsci_ivld;
  wire [9:0] u_src_rsci_idat;


  // Interconnect Declarations for Component Instantiations 
  ccs_in_wait_v1 #(.rscid(32'sd353),
  .width(32'sd10)) u_src_rsci (
      .rdy(u_src_rsc_rdy),
      .vld(u_src_rsc_vld),
      .dat(u_src_rsc_dat),
      .irdy(u_src_rsci_irdy_core_sct),
      .ivld(u_src_rsci_ivld),
      .idat(u_src_rsci_idat)
    );
  scaledown_core_u_src_rsci_u_src_wait_ctrl scaledown_core_u_src_rsci_u_src_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .u_src_rsci_oswt(u_src_rsci_oswt),
      .u_src_rsci_biwt(u_src_rsci_biwt),
      .u_src_rsci_bdwt(u_src_rsci_bdwt),
      .u_src_rsci_bcwt(u_src_rsci_bcwt),
      .u_src_rsci_irdy_core_sct(u_src_rsci_irdy_core_sct),
      .u_src_rsci_ivld(u_src_rsci_ivld)
    );
  scaledown_core_u_src_rsci_u_src_wait_dp scaledown_core_u_src_rsci_u_src_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .u_src_rsci_oswt(u_src_rsci_oswt),
      .u_src_rsci_wen_comp(u_src_rsci_wen_comp),
      .u_src_rsci_idat_mxwt(u_src_rsci_idat_mxwt),
      .u_src_rsci_biwt(u_src_rsci_biwt),
      .u_src_rsci_bdwt(u_src_rsci_bdwt),
      .u_src_rsci_bcwt(u_src_rsci_bcwt),
      .u_src_rsci_idat(u_src_rsci_idat)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core_y_src_rsci
// ------------------------------------------------------------------


module scaledown_core_y_src_rsci (
  clk, arst_n, y_src_rsc_dat, y_src_rsc_vld, y_src_rsc_rdy, core_wen, y_src_rsci_oswt,
      y_src_rsci_wen_comp, y_src_rsci_idat_mxwt
);
  input clk;
  input arst_n;
  input [9:0] y_src_rsc_dat;
  input y_src_rsc_vld;
  output y_src_rsc_rdy;
  input core_wen;
  input y_src_rsci_oswt;
  output y_src_rsci_wen_comp;
  output [9:0] y_src_rsci_idat_mxwt;


  // Interconnect Declarations
  wire y_src_rsci_biwt;
  wire y_src_rsci_bdwt;
  wire y_src_rsci_bcwt;
  wire y_src_rsci_irdy_core_sct;
  wire y_src_rsci_ivld;
  wire [9:0] y_src_rsci_idat;


  // Interconnect Declarations for Component Instantiations 
  ccs_in_wait_v1 #(.rscid(32'sd352),
  .width(32'sd10)) y_src_rsci (
      .rdy(y_src_rsc_rdy),
      .vld(y_src_rsc_vld),
      .dat(y_src_rsc_dat),
      .irdy(y_src_rsci_irdy_core_sct),
      .ivld(y_src_rsci_ivld),
      .idat(y_src_rsci_idat)
    );
  scaledown_core_y_src_rsci_y_src_wait_ctrl scaledown_core_y_src_rsci_y_src_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .y_src_rsci_oswt(y_src_rsci_oswt),
      .y_src_rsci_biwt(y_src_rsci_biwt),
      .y_src_rsci_bdwt(y_src_rsci_bdwt),
      .y_src_rsci_bcwt(y_src_rsci_bcwt),
      .y_src_rsci_irdy_core_sct(y_src_rsci_irdy_core_sct),
      .y_src_rsci_ivld(y_src_rsci_ivld)
    );
  scaledown_core_y_src_rsci_y_src_wait_dp scaledown_core_y_src_rsci_y_src_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .y_src_rsci_oswt(y_src_rsci_oswt),
      .y_src_rsci_wen_comp(y_src_rsci_wen_comp),
      .y_src_rsci_idat_mxwt(y_src_rsci_idat_mxwt),
      .y_src_rsci_biwt(y_src_rsci_biwt),
      .y_src_rsci_bdwt(y_src_rsci_bdwt),
      .y_src_rsci_bcwt(y_src_rsci_bcwt),
      .y_src_rsci_idat(y_src_rsci_idat)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    crop_core_v_dst_rsci
// ------------------------------------------------------------------


module crop_core_v_dst_rsci (
  clk, arst_n, v_dst_rsc_dat, v_dst_rsc_vld, v_dst_rsc_rdy, core_wen, v_dst_rsci_oswt,
      v_dst_rsci_wen_comp, v_dst_rsci_idat
);
  input clk;
  input arst_n;
  output [9:0] v_dst_rsc_dat;
  output v_dst_rsc_vld;
  input v_dst_rsc_rdy;
  input core_wen;
  input v_dst_rsci_oswt;
  output v_dst_rsci_wen_comp;
  input [9:0] v_dst_rsci_idat;


  // Interconnect Declarations
  wire v_dst_rsci_irdy;
  wire v_dst_rsci_biwt;
  wire v_dst_rsci_bdwt;
  wire v_dst_rsci_bcwt;
  wire v_dst_rsci_ivld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_wait_v1 #(.rscid(32'sd383),
  .width(32'sd10)) v_dst_rsci (
      .irdy(v_dst_rsci_irdy),
      .ivld(v_dst_rsci_ivld_core_sct),
      .idat(v_dst_rsci_idat),
      .rdy(v_dst_rsc_rdy),
      .vld(v_dst_rsc_vld),
      .dat(v_dst_rsc_dat)
    );
  crop_core_v_dst_rsci_v_dst_wait_ctrl crop_core_v_dst_rsci_v_dst_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .v_dst_rsci_oswt(v_dst_rsci_oswt),
      .v_dst_rsci_irdy(v_dst_rsci_irdy),
      .v_dst_rsci_biwt(v_dst_rsci_biwt),
      .v_dst_rsci_bdwt(v_dst_rsci_bdwt),
      .v_dst_rsci_bcwt(v_dst_rsci_bcwt),
      .v_dst_rsci_ivld_core_sct(v_dst_rsci_ivld_core_sct)
    );
  crop_core_v_dst_rsci_v_dst_wait_dp crop_core_v_dst_rsci_v_dst_wait_dp_inst (
      .clk(clk),
      .arst_n(arst_n),
      .v_dst_rsci_oswt(v_dst_rsci_oswt),
      .v_dst_rsci_wen_comp(v_dst_rsci_wen_comp),
      .v_dst_rsci_biwt(v_dst_rsci_biwt),
      .v_dst_rsci_bdwt(v_dst_rsci_bdwt),
      .v_dst_rsci_bcwt(v_dst_rsci_bcwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    crop_core_u_dst_rsci
// ------------------------------------------------------------------


module crop_core_u_dst_rsci (
  clk, arst_n, u_dst_rsc_dat, u_dst_rsc_vld, u_dst_rsc_rdy, core_wen, u_dst_rsci_oswt,
      u_dst_rsci_wen_comp, u_dst_rsci_idat
);
  input clk;
  input arst_n;
  output [9:0] u_dst_rsc_dat;
  output u_dst_rsc_vld;
  input u_dst_rsc_rdy;
  input core_wen;
  input u_dst_rsci_oswt;
  output u_dst_rsci_wen_comp;
  input [9:0] u_dst_rsci_idat;


  // Interconnect Declarations
  wire u_dst_rsci_irdy;
  wire u_dst_rsci_biwt;
  wire u_dst_rsci_bdwt;
  wire u_dst_rsci_bcwt;
  wire u_dst_rsci_ivld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_wait_v1 #(.rscid(32'sd382),
  .width(32'sd10)) u_dst_rsci (
      .irdy(u_dst_rsci_irdy),
      .ivld(u_dst_rsci_ivld_core_sct),
      .idat(u_dst_rsci_idat),
      .rdy(u_dst_rsc_rdy),
      .vld(u_dst_rsc_vld),
      .dat(u_dst_rsc_dat)
    );
  crop_core_u_dst_rsci_u_dst_wait_ctrl crop_core_u_dst_rsci_u_dst_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .u_dst_rsci_oswt(u_dst_rsci_oswt),
      .u_dst_rsci_irdy(u_dst_rsci_irdy),
      .u_dst_rsci_biwt(u_dst_rsci_biwt),
      .u_dst_rsci_bdwt(u_dst_rsci_bdwt),
      .u_dst_rsci_bcwt(u_dst_rsci_bcwt),
      .u_dst_rsci_ivld_core_sct(u_dst_rsci_ivld_core_sct)
    );
  crop_core_u_dst_rsci_u_dst_wait_dp crop_core_u_dst_rsci_u_dst_wait_dp_inst (
      .clk(clk),
      .arst_n(arst_n),
      .u_dst_rsci_oswt(u_dst_rsci_oswt),
      .u_dst_rsci_wen_comp(u_dst_rsci_wen_comp),
      .u_dst_rsci_biwt(u_dst_rsci_biwt),
      .u_dst_rsci_bdwt(u_dst_rsci_bdwt),
      .u_dst_rsci_bcwt(u_dst_rsci_bcwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    crop_core_y_dst_rsci
// ------------------------------------------------------------------


module crop_core_y_dst_rsci (
  clk, arst_n, y_dst_rsc_dat, y_dst_rsc_vld, y_dst_rsc_rdy, core_wen, y_dst_rsci_oswt,
      y_dst_rsci_wen_comp, y_dst_rsci_idat
);
  input clk;
  input arst_n;
  output [9:0] y_dst_rsc_dat;
  output y_dst_rsc_vld;
  input y_dst_rsc_rdy;
  input core_wen;
  input y_dst_rsci_oswt;
  output y_dst_rsci_wen_comp;
  input [9:0] y_dst_rsci_idat;


  // Interconnect Declarations
  wire y_dst_rsci_irdy;
  wire y_dst_rsci_biwt;
  wire y_dst_rsci_bdwt;
  wire y_dst_rsci_bcwt;
  wire y_dst_rsci_ivld_core_sct;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_wait_v1 #(.rscid(32'sd381),
  .width(32'sd10)) y_dst_rsci (
      .irdy(y_dst_rsci_irdy),
      .ivld(y_dst_rsci_ivld_core_sct),
      .idat(y_dst_rsci_idat),
      .rdy(y_dst_rsc_rdy),
      .vld(y_dst_rsc_vld),
      .dat(y_dst_rsc_dat)
    );
  crop_core_y_dst_rsci_y_dst_wait_ctrl crop_core_y_dst_rsci_y_dst_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .y_dst_rsci_oswt(y_dst_rsci_oswt),
      .y_dst_rsci_irdy(y_dst_rsci_irdy),
      .y_dst_rsci_biwt(y_dst_rsci_biwt),
      .y_dst_rsci_bdwt(y_dst_rsci_bdwt),
      .y_dst_rsci_bcwt(y_dst_rsci_bcwt),
      .y_dst_rsci_ivld_core_sct(y_dst_rsci_ivld_core_sct)
    );
  crop_core_y_dst_rsci_y_dst_wait_dp crop_core_y_dst_rsci_y_dst_wait_dp_inst (
      .clk(clk),
      .arst_n(arst_n),
      .y_dst_rsci_oswt(y_dst_rsci_oswt),
      .y_dst_rsci_wen_comp(y_dst_rsci_wen_comp),
      .y_dst_rsci_biwt(y_dst_rsci_biwt),
      .y_dst_rsci_bdwt(y_dst_rsci_bdwt),
      .y_dst_rsci_bcwt(y_dst_rsci_bcwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    crop_core_v_src_rsci
// ------------------------------------------------------------------


module crop_core_v_src_rsci (
  clk, arst_n, v_src_rsc_dat, v_src_rsc_vld, v_src_rsc_rdy, core_wen, v_src_rsci_oswt,
      v_src_rsci_wen_comp, v_src_rsci_idat_mxwt
);
  input clk;
  input arst_n;
  input [9:0] v_src_rsc_dat;
  input v_src_rsc_vld;
  output v_src_rsc_rdy;
  input core_wen;
  input v_src_rsci_oswt;
  output v_src_rsci_wen_comp;
  output [9:0] v_src_rsci_idat_mxwt;


  // Interconnect Declarations
  wire v_src_rsci_biwt;
  wire v_src_rsci_bdwt;
  wire v_src_rsci_bcwt;
  wire v_src_rsci_irdy_core_sct;
  wire v_src_rsci_ivld;
  wire [9:0] v_src_rsci_idat;


  // Interconnect Declarations for Component Instantiations 
  ccs_in_wait_v1 #(.rscid(32'sd380),
  .width(32'sd10)) v_src_rsci (
      .rdy(v_src_rsc_rdy),
      .vld(v_src_rsc_vld),
      .dat(v_src_rsc_dat),
      .irdy(v_src_rsci_irdy_core_sct),
      .ivld(v_src_rsci_ivld),
      .idat(v_src_rsci_idat)
    );
  crop_core_v_src_rsci_v_src_wait_ctrl crop_core_v_src_rsci_v_src_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .v_src_rsci_oswt(v_src_rsci_oswt),
      .v_src_rsci_biwt(v_src_rsci_biwt),
      .v_src_rsci_bdwt(v_src_rsci_bdwt),
      .v_src_rsci_bcwt(v_src_rsci_bcwt),
      .v_src_rsci_irdy_core_sct(v_src_rsci_irdy_core_sct),
      .v_src_rsci_ivld(v_src_rsci_ivld)
    );
  crop_core_v_src_rsci_v_src_wait_dp crop_core_v_src_rsci_v_src_wait_dp_inst (
      .clk(clk),
      .arst_n(arst_n),
      .v_src_rsci_oswt(v_src_rsci_oswt),
      .v_src_rsci_wen_comp(v_src_rsci_wen_comp),
      .v_src_rsci_idat_mxwt(v_src_rsci_idat_mxwt),
      .v_src_rsci_biwt(v_src_rsci_biwt),
      .v_src_rsci_bdwt(v_src_rsci_bdwt),
      .v_src_rsci_bcwt(v_src_rsci_bcwt),
      .v_src_rsci_idat(v_src_rsci_idat)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    crop_core_u_src_rsci
// ------------------------------------------------------------------


module crop_core_u_src_rsci (
  clk, arst_n, u_src_rsc_dat, u_src_rsc_vld, u_src_rsc_rdy, core_wen, u_src_rsci_oswt,
      u_src_rsci_wen_comp, u_src_rsci_idat_mxwt
);
  input clk;
  input arst_n;
  input [9:0] u_src_rsc_dat;
  input u_src_rsc_vld;
  output u_src_rsc_rdy;
  input core_wen;
  input u_src_rsci_oswt;
  output u_src_rsci_wen_comp;
  output [9:0] u_src_rsci_idat_mxwt;


  // Interconnect Declarations
  wire u_src_rsci_biwt;
  wire u_src_rsci_bdwt;
  wire u_src_rsci_bcwt;
  wire u_src_rsci_irdy_core_sct;
  wire u_src_rsci_ivld;
  wire [9:0] u_src_rsci_idat;


  // Interconnect Declarations for Component Instantiations 
  ccs_in_wait_v1 #(.rscid(32'sd379),
  .width(32'sd10)) u_src_rsci (
      .rdy(u_src_rsc_rdy),
      .vld(u_src_rsc_vld),
      .dat(u_src_rsc_dat),
      .irdy(u_src_rsci_irdy_core_sct),
      .ivld(u_src_rsci_ivld),
      .idat(u_src_rsci_idat)
    );
  crop_core_u_src_rsci_u_src_wait_ctrl crop_core_u_src_rsci_u_src_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .u_src_rsci_oswt(u_src_rsci_oswt),
      .u_src_rsci_biwt(u_src_rsci_biwt),
      .u_src_rsci_bdwt(u_src_rsci_bdwt),
      .u_src_rsci_bcwt(u_src_rsci_bcwt),
      .u_src_rsci_irdy_core_sct(u_src_rsci_irdy_core_sct),
      .u_src_rsci_ivld(u_src_rsci_ivld)
    );
  crop_core_u_src_rsci_u_src_wait_dp crop_core_u_src_rsci_u_src_wait_dp_inst (
      .clk(clk),
      .arst_n(arst_n),
      .u_src_rsci_oswt(u_src_rsci_oswt),
      .u_src_rsci_wen_comp(u_src_rsci_wen_comp),
      .u_src_rsci_idat_mxwt(u_src_rsci_idat_mxwt),
      .u_src_rsci_biwt(u_src_rsci_biwt),
      .u_src_rsci_bdwt(u_src_rsci_bdwt),
      .u_src_rsci_bcwt(u_src_rsci_bcwt),
      .u_src_rsci_idat(u_src_rsci_idat)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    crop_core_y_src_rsci
// ------------------------------------------------------------------


module crop_core_y_src_rsci (
  clk, arst_n, y_src_rsc_dat, y_src_rsc_vld, y_src_rsc_rdy, core_wen, y_src_rsci_oswt,
      y_src_rsci_wen_comp, y_src_rsci_idat_mxwt
);
  input clk;
  input arst_n;
  input [9:0] y_src_rsc_dat;
  input y_src_rsc_vld;
  output y_src_rsc_rdy;
  input core_wen;
  input y_src_rsci_oswt;
  output y_src_rsci_wen_comp;
  output [9:0] y_src_rsci_idat_mxwt;


  // Interconnect Declarations
  wire y_src_rsci_biwt;
  wire y_src_rsci_bdwt;
  wire y_src_rsci_bcwt;
  wire y_src_rsci_irdy_core_sct;
  wire y_src_rsci_ivld;
  wire [9:0] y_src_rsci_idat;


  // Interconnect Declarations for Component Instantiations 
  ccs_in_wait_v1 #(.rscid(32'sd378),
  .width(32'sd10)) y_src_rsci (
      .rdy(y_src_rsc_rdy),
      .vld(y_src_rsc_vld),
      .dat(y_src_rsc_dat),
      .irdy(y_src_rsci_irdy_core_sct),
      .ivld(y_src_rsci_ivld),
      .idat(y_src_rsci_idat)
    );
  crop_core_y_src_rsci_y_src_wait_ctrl crop_core_y_src_rsci_y_src_wait_ctrl_inst
      (
      .core_wen(core_wen),
      .y_src_rsci_oswt(y_src_rsci_oswt),
      .y_src_rsci_biwt(y_src_rsci_biwt),
      .y_src_rsci_bdwt(y_src_rsci_bdwt),
      .y_src_rsci_bcwt(y_src_rsci_bcwt),
      .y_src_rsci_irdy_core_sct(y_src_rsci_irdy_core_sct),
      .y_src_rsci_ivld(y_src_rsci_ivld)
    );
  crop_core_y_src_rsci_y_src_wait_dp crop_core_y_src_rsci_y_src_wait_dp_inst (
      .clk(clk),
      .arst_n(arst_n),
      .y_src_rsci_oswt(y_src_rsci_oswt),
      .y_src_rsci_wen_comp(y_src_rsci_wen_comp),
      .y_src_rsci_idat_mxwt(y_src_rsci_idat_mxwt),
      .y_src_rsci_biwt(y_src_rsci_biwt),
      .y_src_rsci_bdwt(y_src_rsci_bdwt),
      .y_src_rsci_bcwt(y_src_rsci_bcwt),
      .y_src_rsci_idat(y_src_rsci_idat)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    tpg_core
// ------------------------------------------------------------------


module tpg_core (
  clk, arst_n, top_reg_frameWidth, top_reg_frameHeight, top_reg_imgPattern, tpg_reg_m_bTPG_en,
      src_rsc_dat, src_rsc_vld, src_rsc_rdy, dst_rsc_dat, dst_rsc_vld, dst_rsc_rdy
);
  input clk;
  input arst_n;
  input [12:0] top_reg_frameWidth;
  input [12:0] top_reg_frameHeight;
  input [1:0] top_reg_imgPattern;
  input tpg_reg_m_bTPG_en;
  input [11:0] src_rsc_dat;
  input src_rsc_vld;
  output src_rsc_rdy;
  output [11:0] dst_rsc_dat;
  output dst_rsc_vld;
  input dst_rsc_rdy;


  // Interconnect Declarations
  wire core_wen;
  wire src_rsci_wen_comp;
  wire [11:0] src_rsci_idat_mxwt;
  wire dst_rsci_wen_comp;
  reg [11:0] dst_rsci_idat;
  wire tpg_col_if_if_unequal_tmp;
  wire [3:0] tpg_col_if_if_acc_tmp;
  wire [4:0] nl_tpg_col_if_if_acc_tmp;
  wire and_dcpl_8;
  wire and_dcpl_12;
  wire [9:0] cnt_lpi_1_dfm_5;
  reg [9:0] cnt_lpi_1_dfm_4;
  reg exitL_exit_tpg_col_lpi_1_dfm;
  reg exit_tpg_row_lpi_1_dfm;
  reg exitL_exit_tpg_row_sva;
  wire tpg_row_asn_sft_lpi_1_dfm_st_1_mx0;
  reg [3:0] BlockID_lpi_1_dfm_5;
  wire [3:0] BlockID_lpi_1_dfm_2_mx0;
  reg tpg_row_asn_sft_lpi_1_dfm_st_1;
  reg main_stage_0_2;
  reg tpg_col_not_mdf_sva_st_1;
  reg reg_dst_rsci_oswt_cse;
  reg reg_src_rsci_oswt_cse;
  wire or_10_cse;
  wire nor_5_cse;
  wire exit_tpg_row_lpi_1_dfm_1;
  wire [12:0] z_out;
  wire [13:0] nl_z_out;
  reg [12:0] tpg_row_i_lpi_1_dfm_2;
  reg [12:0] tpg_col_j_lpi_1_dfm_2;
  reg operator_13_false_2_operator_13_false_2_slc_tpg_col_j_0_itm_1;
  reg operator_13_false_1_operator_13_false_1_slc_tpg_row_i_0_itm_1;
  reg ColorSelect_switch_lp_ColorSelect_switch_lp_and_1_itm_1;
  reg ColorSelect_switch_lp_ColorSelect_switch_lp_and_3_itm_1;
  reg ColorSelect_switch_lp_ColorSelect_switch_lp_and_4_itm_1;
  reg ColorSelect_switch_lp_ColorSelect_switch_lp_and_5_itm_1;
  reg ColorSelect_switch_lp_ColorSelect_switch_lp_nor_itm_1;
  wire dst_rsci_idat_mx0c1;
  wire tpg_col_if_ac_int_cctor_1_sva_1;
  wire tpg_col_if_ac_int_cctor_0_sva_1;
  wire operator_2_false_operator_2_false_operator_2_false_or_cse_1;
  wire ColorSelect_case_6_if_nand_cse_1;
  wire [12:0] tpg_col_j_lpi_1_dfm_3;
  wire [12:0] tpg_row_i_lpi_1_dfm_3;
  wire [3:0] BlockID_lpi_1_dfm_6;
  wire mux_3_tmp;
  wire or_15_tmp;
  wire tpg_col_acc_2_itm_13_1;
  wire tpg_row_acc_2_itm_13_1;

  wire[0:0] ColorSelect_switch_lp_or_nl;
  wire[0:0] ColorSelect_switch_lp_mux1h_2_nl;
  wire[0:0] operator_2_false_operator_2_false_nor_nl;
  wire[0:0] ColorSelect_case_3_if_ColorSelect_case_3_if_nand_nl;
  wire[0:0] operator_2_false_3_operator_2_false_3_and_nl;
  wire[0:0] ColorSelect_case_6_if_ColorSelect_case_6_if_nand_nl;
  wire[0:0] ColorSelect_switch_lp_ColorSelect_switch_lp_and_nl;
  wire[0:0] ColorSelect_switch_lp_ColorSelect_switch_lp_and_2_nl;
  wire[0:0] mux_1_nl;
  wire[0:0] or_nl;
  wire[9:0] tpg_col_if_else_acc_nl;
  wire[10:0] nl_tpg_col_if_else_acc_nl;
  wire[0:0] tpg_col_and_2_nl;
  wire[0:0] tpg_row_mux_nl;
  wire[0:0] or_11_nl;
  wire[13:0] tpg_col_acc_2_nl;
  wire[14:0] nl_tpg_col_acc_2_nl;
  wire[0:0] and_13_nl;
  wire[0:0] tpg_col_tpg_col_tpg_col_tpg_row_not_1_nl;
  wire[0:0] tpg_col_tpg_col_tpg_col_tpg_row_not_2_nl;
  wire[0:0] tpg_row_not_12_nl;
  wire[0:0] mux_2_nl;
  wire[0:0] or_16_nl;
  wire[0:0] nor_nl;
  wire[0:0] or_12_nl;
  wire[0:0] tpg_col_if_if_1_and_nl;
  wire[0:0] tpg_col_if_if_1_and_1_nl;
  wire[0:0] tpg_col_tpg_col_tpg_col_tpg_row_not_nl;
  wire[13:0] tpg_row_acc_2_nl;
  wire[14:0] nl_tpg_row_acc_2_nl;
  wire[12:0] tpg_col_mux_4_nl;

  // Interconnect Declarations for Component Instantiations 
  tpg_core_src_rsci tpg_core_src_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .src_rsc_dat(src_rsc_dat),
      .src_rsc_vld(src_rsc_vld),
      .src_rsc_rdy(src_rsc_rdy),
      .core_wen(core_wen),
      .src_rsci_oswt(reg_src_rsci_oswt_cse),
      .src_rsci_wen_comp(src_rsci_wen_comp),
      .src_rsci_idat_mxwt(src_rsci_idat_mxwt)
    );
  tpg_core_dst_rsci tpg_core_dst_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .dst_rsc_dat(dst_rsc_dat),
      .dst_rsc_vld(dst_rsc_vld),
      .dst_rsc_rdy(dst_rsc_rdy),
      .core_wen(core_wen),
      .dst_rsci_oswt(reg_dst_rsci_oswt_cse),
      .dst_rsci_wen_comp(dst_rsci_wen_comp),
      .dst_rsci_idat(dst_rsci_idat)
    );
  tpg_core_staller tpg_core_staller_inst (
      .core_wen(core_wen),
      .src_rsci_wen_comp(src_rsci_wen_comp),
      .dst_rsci_wen_comp(dst_rsci_wen_comp)
    );
  assign tpg_col_if_ac_int_cctor_1_sva_1 = operator_13_false_1_operator_13_false_1_slc_tpg_row_i_0_itm_1
      ^ (top_reg_imgPattern[1]);
  assign tpg_col_if_ac_int_cctor_0_sva_1 = operator_13_false_2_operator_13_false_2_slc_tpg_col_j_0_itm_1
      ^ (top_reg_imgPattern[0]);
  assign operator_2_false_operator_2_false_operator_2_false_or_cse_1 = tpg_col_if_ac_int_cctor_1_sva_1
      | tpg_col_if_ac_int_cctor_0_sva_1;
  assign ColorSelect_case_6_if_nand_cse_1 = ~(tpg_col_if_ac_int_cctor_1_sva_1 & tpg_col_if_ac_int_cctor_0_sva_1);
  assign nl_tpg_col_acc_2_nl = ({1'b1 , tpg_col_j_lpi_1_dfm_3}) + conv_u2u_13_14(~
      top_reg_frameWidth) + 14'b00000000000001;
  assign tpg_col_acc_2_nl = nl_tpg_col_acc_2_nl[13:0];
  assign tpg_col_acc_2_itm_13_1 = readslicef_14_1_13(tpg_col_acc_2_nl);
  assign and_13_nl = and_dcpl_12 & (~ exit_tpg_row_lpi_1_dfm);
  assign tpg_row_asn_sft_lpi_1_dfm_st_1_mx0 = MUX_s_1_2_2(exit_tpg_row_lpi_1_dfm_1,
      tpg_row_asn_sft_lpi_1_dfm_st_1, and_13_nl);
  assign tpg_col_if_if_unequal_tmp = (cnt_lpi_1_dfm_5[9:1]) != (top_reg_frameWidth[12:4]);
  assign tpg_col_tpg_col_tpg_col_tpg_row_not_1_nl = ~ or_10_cse;
  assign cnt_lpi_1_dfm_5 = MUX_v_10_2_2(10'b0000000000, cnt_lpi_1_dfm_4, tpg_col_tpg_col_tpg_col_tpg_row_not_1_nl);
  assign tpg_col_tpg_col_tpg_col_tpg_row_not_2_nl = ~ or_10_cse;
  assign tpg_col_j_lpi_1_dfm_3 = MUX_v_13_2_2(13'b0000000000000, tpg_col_j_lpi_1_dfm_2,
      tpg_col_tpg_col_tpg_col_tpg_row_not_2_nl);
  assign tpg_row_not_12_nl = ~ exitL_exit_tpg_row_sva;
  assign tpg_row_i_lpi_1_dfm_3 = MUX_v_13_2_2(13'b0000000000000, tpg_row_i_lpi_1_dfm_2,
      tpg_row_not_12_nl);
  assign or_10_cse = exitL_exit_tpg_row_sva | exitL_exit_tpg_col_lpi_1_dfm | exit_tpg_row_lpi_1_dfm;
  assign exit_tpg_row_lpi_1_dfm_1 = (~ tpg_row_acc_2_itm_13_1) & or_10_cse;
  assign or_16_nl = (~ (BlockID_lpi_1_dfm_5[3])) | (~ (cnt_lpi_1_dfm_4[0])) | exit_tpg_row_lpi_1_dfm
      | exitL_exit_tpg_col_lpi_1_dfm | exitL_exit_tpg_row_sva;
  assign nor_nl = ~((BlockID_lpi_1_dfm_5[3]) | (~ (cnt_lpi_1_dfm_4[0])) | exit_tpg_row_lpi_1_dfm
      | exitL_exit_tpg_col_lpi_1_dfm | exitL_exit_tpg_row_sva);
  assign mux_2_nl = MUX_s_1_2_2(or_16_nl, nor_nl, tpg_col_if_if_acc_tmp[3]);
  assign or_12_nl = (~ (BlockID_lpi_1_dfm_5[3])) | exit_tpg_row_lpi_1_dfm | exitL_exit_tpg_col_lpi_1_dfm
      | exitL_exit_tpg_row_sva;
  assign mux_3_tmp = MUX_s_1_2_2(mux_2_nl, or_12_nl, tpg_col_if_if_unequal_tmp);
  assign or_15_tmp = (and_dcpl_12 & (~ exit_tpg_row_lpi_1_dfm) & (cnt_lpi_1_dfm_4[0]))
      | tpg_col_if_if_unequal_tmp;
  assign tpg_col_if_if_1_and_nl = (~ or_15_tmp) & mux_3_tmp;
  assign tpg_col_if_if_1_and_1_nl = or_15_tmp & mux_3_tmp;
  assign BlockID_lpi_1_dfm_2_mx0 = MUX1HOT_v_4_3_2(4'b0111, tpg_col_if_if_acc_tmp,
      BlockID_lpi_1_dfm_6, {(~ mux_3_tmp) , tpg_col_if_if_1_and_nl , tpg_col_if_if_1_and_1_nl});
  assign nl_tpg_col_if_if_acc_tmp = conv_u2u_3_4(BlockID_lpi_1_dfm_6[2:0]) + 4'b0001;
  assign tpg_col_if_if_acc_tmp = nl_tpg_col_if_if_acc_tmp[3:0];
  assign tpg_col_tpg_col_tpg_col_tpg_row_not_nl = ~ or_10_cse;
  assign BlockID_lpi_1_dfm_6 = MUX_v_4_2_2(4'b0000, BlockID_lpi_1_dfm_5, tpg_col_tpg_col_tpg_col_tpg_row_not_nl);
  assign nor_5_cse = ~((~ tpg_row_asn_sft_lpi_1_dfm_st_1) | exit_tpg_row_lpi_1_dfm
      | exitL_exit_tpg_col_lpi_1_dfm | exitL_exit_tpg_row_sva);
  assign and_dcpl_8 = ~(tpg_row_asn_sft_lpi_1_dfm_st_1 | tpg_col_not_mdf_sva_st_1);
  assign and_dcpl_12 = ~(exitL_exit_tpg_row_sva | exitL_exit_tpg_col_lpi_1_dfm);
  assign dst_rsci_idat_mx0c1 = and_dcpl_8 & main_stage_0_2 & (~ tpg_reg_m_bTPG_en);
  assign nl_tpg_row_acc_2_nl = ({1'b1 , tpg_row_i_lpi_1_dfm_3}) + conv_u2u_13_14(~
      top_reg_frameHeight) + 14'b00000000000001;
  assign tpg_row_acc_2_nl = nl_tpg_row_acc_2_nl[13:0];
  assign tpg_row_acc_2_itm_13_1 = readslicef_14_1_13(tpg_row_acc_2_nl);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dst_rsci_idat <= 12'b000000000000;
    end
    else if ( core_wen & ((and_dcpl_8 & main_stage_0_2 & tpg_reg_m_bTPG_en) | dst_rsci_idat_mx0c1)
        ) begin
      dst_rsci_idat <= MUX_v_12_2_2((signext_12_1(ColorSelect_switch_lp_or_nl)),
          src_rsci_idat_mxwt, dst_rsci_idat_mx0c1);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      reg_dst_rsci_oswt_cse <= 1'b0;
      ColorSelect_switch_lp_ColorSelect_switch_lp_and_1_itm_1 <= 1'b0;
      ColorSelect_switch_lp_ColorSelect_switch_lp_and_3_itm_1 <= 1'b0;
      ColorSelect_switch_lp_ColorSelect_switch_lp_and_4_itm_1 <= 1'b0;
      ColorSelect_switch_lp_ColorSelect_switch_lp_and_5_itm_1 <= 1'b0;
      ColorSelect_switch_lp_ColorSelect_switch_lp_nor_itm_1 <= 1'b0;
      operator_13_false_1_operator_13_false_1_slc_tpg_row_i_0_itm_1 <= 1'b0;
      operator_13_false_2_operator_13_false_2_slc_tpg_col_j_0_itm_1 <= 1'b0;
      tpg_col_not_mdf_sva_st_1 <= 1'b0;
      tpg_row_asn_sft_lpi_1_dfm_st_1 <= 1'b0;
      reg_src_rsci_oswt_cse <= 1'b0;
      tpg_col_j_lpi_1_dfm_2 <= 13'b0000000000000;
      cnt_lpi_1_dfm_4 <= 10'b0000000000;
      exit_tpg_row_lpi_1_dfm <= 1'b0;
      exitL_exit_tpg_col_lpi_1_dfm <= 1'b0;
      exitL_exit_tpg_row_sva <= 1'b1;
      tpg_row_i_lpi_1_dfm_2 <= 13'b0000000000000;
      main_stage_0_2 <= 1'b0;
      BlockID_lpi_1_dfm_5 <= 4'b0000;
    end
    else if ( core_wen ) begin
      reg_dst_rsci_oswt_cse <= ~(tpg_row_asn_sft_lpi_1_dfm_st_1 | tpg_col_not_mdf_sva_st_1
          | (~ main_stage_0_2));
      ColorSelect_switch_lp_ColorSelect_switch_lp_and_1_itm_1 <= (BlockID_lpi_1_dfm_2_mx0[2:0]==3'b011);
      ColorSelect_switch_lp_ColorSelect_switch_lp_and_3_itm_1 <= (BlockID_lpi_1_dfm_2_mx0[2:0]==3'b101);
      ColorSelect_switch_lp_ColorSelect_switch_lp_and_4_itm_1 <= (BlockID_lpi_1_dfm_2_mx0[2:0]==3'b110);
      ColorSelect_switch_lp_ColorSelect_switch_lp_and_5_itm_1 <= (BlockID_lpi_1_dfm_2_mx0[2:0]==3'b111);
      ColorSelect_switch_lp_ColorSelect_switch_lp_nor_itm_1 <= ~((BlockID_lpi_1_dfm_2_mx0[2:0]!=3'b000));
      operator_13_false_1_operator_13_false_1_slc_tpg_row_i_0_itm_1 <= tpg_row_i_lpi_1_dfm_3[0];
      operator_13_false_2_operator_13_false_2_slc_tpg_col_j_0_itm_1 <= tpg_col_j_lpi_1_dfm_3[0];
      tpg_col_not_mdf_sva_st_1 <= ~ tpg_col_acc_2_itm_13_1;
      tpg_row_asn_sft_lpi_1_dfm_st_1 <= tpg_row_asn_sft_lpi_1_dfm_st_1_mx0;
      reg_src_rsci_oswt_cse <= ~(mux_1_nl | (~ tpg_col_acc_2_itm_13_1));
      tpg_col_j_lpi_1_dfm_2 <= z_out;
      cnt_lpi_1_dfm_4 <= MUX_v_10_2_2(tpg_col_if_else_acc_nl, 10'b0000000001, tpg_col_and_2_nl);
      exit_tpg_row_lpi_1_dfm <= exit_tpg_row_lpi_1_dfm_1;
      exitL_exit_tpg_col_lpi_1_dfm <= (~ tpg_col_acc_2_itm_13_1) | tpg_row_asn_sft_lpi_1_dfm_st_1_mx0;
      exitL_exit_tpg_row_sva <= exit_tpg_row_lpi_1_dfm_1;
      tpg_row_i_lpi_1_dfm_2 <= MUX_v_13_2_2(z_out, tpg_row_i_lpi_1_dfm_3, or_11_nl);
      main_stage_0_2 <= 1'b1;
      BlockID_lpi_1_dfm_5 <= BlockID_lpi_1_dfm_2_mx0;
    end
  end
  assign operator_2_false_operator_2_false_nor_nl = ~(tpg_col_if_ac_int_cctor_1_sva_1
      | tpg_col_if_ac_int_cctor_0_sva_1);
  assign ColorSelect_case_3_if_ColorSelect_case_3_if_nand_nl = ~((~(tpg_col_if_ac_int_cctor_1_sva_1
      & (~(operator_13_false_2_operator_13_false_2_slc_tpg_col_j_0_itm_1 ^ (top_reg_imgPattern[0])))))
      & (~(tpg_col_if_ac_int_cctor_0_sva_1 & (~(operator_13_false_1_operator_13_false_1_slc_tpg_row_i_0_itm_1
      ^ (top_reg_imgPattern[1]))))));
  assign operator_2_false_3_operator_2_false_3_and_nl = tpg_col_if_ac_int_cctor_1_sva_1
      & tpg_col_if_ac_int_cctor_0_sva_1;
  assign ColorSelect_case_6_if_ColorSelect_case_6_if_nand_nl = ~(ColorSelect_case_6_if_nand_cse_1
      & operator_2_false_operator_2_false_operator_2_false_or_cse_1);
  assign ColorSelect_switch_lp_ColorSelect_switch_lp_and_nl = (BlockID_lpi_1_dfm_5[2:0]==3'b010);
  assign ColorSelect_switch_lp_ColorSelect_switch_lp_and_2_nl = (BlockID_lpi_1_dfm_5[2:0]==3'b100);
  assign ColorSelect_switch_lp_mux1h_2_nl = MUX1HOT_s_1_6_2(operator_2_false_operator_2_false_nor_nl,
      ColorSelect_case_3_if_ColorSelect_case_3_if_nand_nl, operator_2_false_3_operator_2_false_3_and_nl,
      operator_2_false_operator_2_false_operator_2_false_or_cse_1, ColorSelect_case_6_if_ColorSelect_case_6_if_nand_nl,
      ColorSelect_case_6_if_nand_cse_1, {ColorSelect_switch_lp_ColorSelect_switch_lp_and_nl
      , ColorSelect_switch_lp_ColorSelect_switch_lp_and_1_itm_1 , ColorSelect_switch_lp_ColorSelect_switch_lp_and_2_nl
      , ColorSelect_switch_lp_ColorSelect_switch_lp_and_3_itm_1 , ColorSelect_switch_lp_ColorSelect_switch_lp_and_4_itm_1
      , ColorSelect_switch_lp_ColorSelect_switch_lp_and_5_itm_1});
  assign ColorSelect_switch_lp_or_nl = (ColorSelect_switch_lp_mux1h_2_nl & (~((BlockID_lpi_1_dfm_5[2:0]==3'b001))))
      | ColorSelect_switch_lp_ColorSelect_switch_lp_nor_itm_1;
  assign or_nl = tpg_row_asn_sft_lpi_1_dfm_st_1 | exit_tpg_row_lpi_1_dfm | exitL_exit_tpg_col_lpi_1_dfm
      | exitL_exit_tpg_row_sva;
  assign mux_1_nl = MUX_s_1_2_2(or_nl, nor_5_cse, tpg_row_acc_2_itm_13_1);
  assign nl_tpg_col_if_else_acc_nl = cnt_lpi_1_dfm_5 + 10'b0000000001;
  assign tpg_col_if_else_acc_nl = nl_tpg_col_if_else_acc_nl[9:0];
  assign tpg_row_mux_nl = MUX_s_1_2_2(tpg_row_asn_sft_lpi_1_dfm_st_1, exit_tpg_row_lpi_1_dfm_1,
      or_10_cse);
  assign tpg_col_and_2_nl = (~(tpg_col_if_if_unequal_tmp | (cnt_lpi_1_dfm_5[0])))
      & tpg_reg_m_bTPG_en & tpg_col_acc_2_itm_13_1 & (~ tpg_row_mux_nl);
  assign or_11_nl = nor_5_cse | tpg_col_acc_2_itm_13_1;
  assign tpg_col_mux_4_nl = MUX_v_13_2_2(tpg_row_i_lpi_1_dfm_3, tpg_col_j_lpi_1_dfm_3,
      tpg_col_acc_2_itm_13_1);
  assign nl_z_out = tpg_col_mux_4_nl + 13'b0000000000001;
  assign z_out = nl_z_out[12:0];

  function automatic [0:0] MUX1HOT_s_1_6_2;
    input [0:0] input_5;
    input [0:0] input_4;
    input [0:0] input_3;
    input [0:0] input_2;
    input [0:0] input_1;
    input [0:0] input_0;
    input [5:0] sel;
    reg [0:0] result;
  begin
    result = input_0 & {1{sel[0]}};
    result = result | ( input_1 & {1{sel[1]}});
    result = result | ( input_2 & {1{sel[2]}});
    result = result | ( input_3 & {1{sel[3]}});
    result = result | ( input_4 & {1{sel[4]}});
    result = result | ( input_5 & {1{sel[5]}});
    MUX1HOT_s_1_6_2 = result;
  end
  endfunction


  function automatic [3:0] MUX1HOT_v_4_3_2;
    input [3:0] input_2;
    input [3:0] input_1;
    input [3:0] input_0;
    input [2:0] sel;
    reg [3:0] result;
  begin
    result = input_0 & {4{sel[0]}};
    result = result | ( input_1 & {4{sel[1]}});
    result = result | ( input_2 & {4{sel[2]}});
    MUX1HOT_v_4_3_2 = result;
  end
  endfunction


  function automatic [0:0] MUX_s_1_2_2;
    input [0:0] input_0;
    input [0:0] input_1;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [0:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction


  function automatic [12:0] MUX_v_13_2_2;
    input [12:0] input_0;
    input [12:0] input_1;
    input [0:0] sel;
    reg [12:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_13_2_2 = result;
  end
  endfunction


  function automatic [3:0] MUX_v_4_2_2;
    input [3:0] input_0;
    input [3:0] input_1;
    input [0:0] sel;
    reg [3:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_4_2_2 = result;
  end
  endfunction


  function automatic [0:0] readslicef_14_1_13;
    input [13:0] vector;
    reg [13:0] tmp;
  begin
    tmp = vector >> 13;
    readslicef_14_1_13 = tmp[0:0];
  end
  endfunction


  function automatic [11:0] signext_12_1;
    input [0:0] vector;
  begin
    signext_12_1= {{11{vector[0]}}, vector};
  end
  endfunction


  function automatic [3:0] conv_u2u_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_4 = {1'b0, vector};
  end
  endfunction


  function automatic [13:0] conv_u2u_13_14 ;
    input [12:0]  vector ;
  begin
    conv_u2u_13_14 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    dgain_core
// ------------------------------------------------------------------


module dgain_core (
  clk, arst_n, top_reg_frameWidth, top_reg_frameHeight, top_reg_imgPattern, top_reg_blc,
      dgain_reg_m_nEb, dgain_reg_m_nBlcR, dgain_reg_m_nBlcGr, dgain_reg_m_nBlcGb,
      dgain_reg_m_nBlcB, dgain_reg_m_nR, dgain_reg_m_nGr, dgain_reg_m_nGb, dgain_reg_m_nB,
      src_rsc_dat, src_rsc_vld, src_rsc_rdy, dst_rsc_dat, dst_rsc_vld, dst_rsc_rdy
);
  input clk;
  input arst_n;
  input [12:0] top_reg_frameWidth;
  input [12:0] top_reg_frameHeight;
  input [1:0] top_reg_imgPattern;
  input [8:0] top_reg_blc;
  input dgain_reg_m_nEb;
  input [8:0] dgain_reg_m_nBlcR;
  input [8:0] dgain_reg_m_nBlcGr;
  input [8:0] dgain_reg_m_nBlcGb;
  input [8:0] dgain_reg_m_nBlcB;
  input [19:0] dgain_reg_m_nR;
  input [19:0] dgain_reg_m_nGr;
  input [19:0] dgain_reg_m_nGb;
  input [19:0] dgain_reg_m_nB;
  input [11:0] src_rsc_dat;
  input src_rsc_vld;
  output src_rsc_rdy;
  output [11:0] dst_rsc_dat;
  output dst_rsc_vld;
  input dst_rsc_rdy;


  // Interconnect Declarations
  wire core_wen;
  wire src_rsci_wen_comp;
  wire [11:0] src_rsci_idat_mxwt;
  wire dst_rsci_wen_comp;
  reg [11:0] dst_rsci_idat;
  wire and_dcpl_6;
  reg exitL_exit_dgain_col_lpi_1_dfm;
  reg exit_dgain_row_lpi_1_dfm;
  reg exitL_exit_dgain_row_sva;
  wire operator_2_false_1_operator_2_false_1_and_svs_1;
  wire operator_2_false_2_operator_2_false_2_and_svs_1;
  wire operator_2_false_operator_2_false_nor_svs_1;
  wire dgain_col_if_bayerPattern_1_sva_1;
  wire dgain_col_if_bayerPattern_0_sva_1;
  reg dgain_row_y_lpi_1_dfm_1_0;
  reg dgain_col_x_lpi_1_dfm_1_0;
  wire dgain_row_asn_sft_lpi_1_dfm_st_1_mx0;
  reg dgain_row_asn_sft_lpi_1_dfm_st_1;
  reg main_stage_0_2;
  reg dgain_col_not_mdf_sva_st_1;
  wire [21:0] dgain_col_if_ac_int_cctor_sva_1;
  wire [23:0] nl_dgain_col_if_ac_int_cctor_sva_1;
  reg reg_dst_rsci_oswt_cse;
  reg reg_src_rsci_oswt_cse;
  wire or_9_cse;
  wire nor_2_cse;
  wire [12:0] z_out;
  wire [13:0] nl_z_out;
  reg [12:0] dgain_row_y_lpi_1_dfm_2;
  reg [12:0] dgain_col_x_lpi_1_dfm_2;
  wire dst_rsci_idat_mx0c1;
  wire dgain_col_if_dgain_col_if_nor_cse_1;
  wire [12:0] dgain_col_x_lpi_1_dfm_3;
  wire [12:0] dgain_row_y_lpi_1_dfm_3;
  wire exit_dgain_row_lpi_1_dfm_1;
  wire [21:0] dgain_col_if_mul_itm_32_11_1;
  wire dgain_col_acc_2_itm_13_1;
  wire dgain_row_acc_2_itm_13;

  wire[11:0] dgain_clip_dgain_clip_dgain_clip_nor_nl;
  wire[11:0] dgain_clip_nor_nl;
  wire[8:0] operator_22_true_acc_nl;
  wire[9:0] nl_operator_22_true_acc_nl;
  wire[0:0] mux_3_nl;
  wire[0:0] or_nl;
  wire[0:0] or_8_nl;
  wire[32:0] dgain_col_if_mul_nl;
  wire signed [33:0] nl_dgain_col_if_mul_nl;
  wire[12:0] dgain_col_if_acc_2_nl;
  wire[13:0] nl_dgain_col_if_acc_2_nl;
  wire[8:0] dgain_col_if_dgain_col_if_mux1h_nl;
  wire[19:0] dgain_col_if_dgain_col_if_mux1h_1_nl;
  wire[13:0] dgain_col_acc_2_nl;
  wire[14:0] nl_dgain_col_acc_2_nl;
  wire[0:0] asn_dgain_row_asn_sft_lpi_1_dfm_st_1_nor_nl;
  wire[0:0] dgain_col_dgain_col_dgain_col_dgain_row_not_nl;
  wire[13:0] dgain_row_acc_2_nl;
  wire[14:0] nl_dgain_row_acc_2_nl;
  wire[0:0] dgain_row_not_12_nl;
  wire[12:0] dgain_col_mux_4_nl;

  // Interconnect Declarations for Component Instantiations 
  dgain_core_src_rsci dgain_core_src_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .src_rsc_dat(src_rsc_dat),
      .src_rsc_vld(src_rsc_vld),
      .src_rsc_rdy(src_rsc_rdy),
      .core_wen(core_wen),
      .src_rsci_oswt(reg_src_rsci_oswt_cse),
      .src_rsci_wen_comp(src_rsci_wen_comp),
      .src_rsci_idat_mxwt(src_rsci_idat_mxwt)
    );
  dgain_core_dst_rsci dgain_core_dst_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .dst_rsc_dat(dst_rsc_dat),
      .dst_rsc_vld(dst_rsc_vld),
      .dst_rsc_rdy(dst_rsc_rdy),
      .core_wen(core_wen),
      .dst_rsci_oswt(reg_dst_rsci_oswt_cse),
      .dst_rsci_wen_comp(dst_rsci_wen_comp),
      .dst_rsci_idat(dst_rsci_idat)
    );
  dgain_core_staller dgain_core_staller_inst (
      .core_wen(core_wen),
      .src_rsci_wen_comp(src_rsci_wen_comp),
      .dst_rsci_wen_comp(dst_rsci_wen_comp)
    );
  assign or_9_cse = exitL_exit_dgain_row_sva | exitL_exit_dgain_col_lpi_1_dfm | exit_dgain_row_lpi_1_dfm;
  assign operator_2_false_2_operator_2_false_2_and_svs_1 = dgain_col_if_bayerPattern_1_sva_1
      & (~ dgain_col_if_bayerPattern_0_sva_1);
  assign operator_2_false_1_operator_2_false_1_and_svs_1 = dgain_col_if_bayerPattern_0_sva_1
      & (~ dgain_col_if_bayerPattern_1_sva_1);
  assign dgain_col_if_bayerPattern_1_sva_1 = dgain_row_y_lpi_1_dfm_1_0 ^ (top_reg_imgPattern[1]);
  assign dgain_col_if_bayerPattern_0_sva_1 = dgain_col_x_lpi_1_dfm_1_0 ^ (top_reg_imgPattern[0]);
  assign nl_dgain_col_if_ac_int_cctor_sva_1 = conv_s2s_21_22(dgain_col_if_mul_itm_32_11_1[21:1])
      + conv_u2s_9_22(top_reg_blc) + conv_u2s_1_22(dgain_col_if_mul_itm_32_11_1[0]);
  assign dgain_col_if_ac_int_cctor_sva_1 = nl_dgain_col_if_ac_int_cctor_sva_1[21:0];
  assign dgain_col_if_dgain_col_if_mux1h_nl = MUX1HOT_v_9_4_2(dgain_reg_m_nBlcB,
      dgain_reg_m_nBlcGb, dgain_reg_m_nBlcGr, dgain_reg_m_nBlcR, {dgain_col_if_dgain_col_if_nor_cse_1
      , operator_2_false_2_operator_2_false_2_and_svs_1 , operator_2_false_1_operator_2_false_1_and_svs_1
      , operator_2_false_operator_2_false_nor_svs_1});
  assign nl_dgain_col_if_acc_2_nl = ({1'b1 , src_rsci_idat_mxwt}) + conv_u2s_12_13({3'b111
      , (~ dgain_col_if_dgain_col_if_mux1h_nl)}) + 13'b0000000000001;
  assign dgain_col_if_acc_2_nl = nl_dgain_col_if_acc_2_nl[12:0];
  assign dgain_col_if_dgain_col_if_mux1h_1_nl = MUX1HOT_v_20_4_2(dgain_reg_m_nB,
      dgain_reg_m_nGb, dgain_reg_m_nGr, dgain_reg_m_nR, {dgain_col_if_dgain_col_if_nor_cse_1
      , operator_2_false_2_operator_2_false_2_and_svs_1 , operator_2_false_1_operator_2_false_1_and_svs_1
      , operator_2_false_operator_2_false_nor_svs_1});
  assign nl_dgain_col_if_mul_nl = $signed(dgain_col_if_acc_2_nl) * $signed(conv_u2s_20_21(dgain_col_if_dgain_col_if_mux1h_1_nl));
  assign dgain_col_if_mul_nl = nl_dgain_col_if_mul_nl[32:0];
  assign dgain_col_if_mul_itm_32_11_1 = readslicef_33_22_11(dgain_col_if_mul_nl);
  assign dgain_col_if_dgain_col_if_nor_cse_1 = ~(operator_2_false_2_operator_2_false_2_and_svs_1
      | operator_2_false_1_operator_2_false_1_and_svs_1 | operator_2_false_operator_2_false_nor_svs_1);
  assign operator_2_false_operator_2_false_nor_svs_1 = ~(dgain_col_if_bayerPattern_1_sva_1
      | dgain_col_if_bayerPattern_0_sva_1);
  assign nl_dgain_col_acc_2_nl = ({1'b1 , dgain_col_x_lpi_1_dfm_3}) + conv_u2u_13_14(~
      top_reg_frameWidth) + 14'b00000000000001;
  assign dgain_col_acc_2_nl = nl_dgain_col_acc_2_nl[13:0];
  assign dgain_col_acc_2_itm_13_1 = readslicef_14_1_13(dgain_col_acc_2_nl);
  assign asn_dgain_row_asn_sft_lpi_1_dfm_st_1_nor_nl = ~(exitL_exit_dgain_row_sva
      | exitL_exit_dgain_col_lpi_1_dfm | exit_dgain_row_lpi_1_dfm);
  assign dgain_row_asn_sft_lpi_1_dfm_st_1_mx0 = MUX_s_1_2_2(exit_dgain_row_lpi_1_dfm_1,
      dgain_row_asn_sft_lpi_1_dfm_st_1, asn_dgain_row_asn_sft_lpi_1_dfm_st_1_nor_nl);
  assign dgain_col_dgain_col_dgain_col_dgain_row_not_nl = ~ or_9_cse;
  assign dgain_col_x_lpi_1_dfm_3 = MUX_v_13_2_2(13'b0000000000000, dgain_col_x_lpi_1_dfm_2,
      dgain_col_dgain_col_dgain_col_dgain_row_not_nl);
  assign nl_dgain_row_acc_2_nl = ({1'b1 , dgain_row_y_lpi_1_dfm_3}) + conv_u2u_13_14(~
      top_reg_frameHeight) + 14'b00000000000001;
  assign dgain_row_acc_2_nl = nl_dgain_row_acc_2_nl[13:0];
  assign dgain_row_acc_2_itm_13 = readslicef_14_1_13(dgain_row_acc_2_nl);
  assign dgain_row_not_12_nl = ~ exitL_exit_dgain_row_sva;
  assign dgain_row_y_lpi_1_dfm_3 = MUX_v_13_2_2(13'b0000000000000, dgain_row_y_lpi_1_dfm_2,
      dgain_row_not_12_nl);
  assign exit_dgain_row_lpi_1_dfm_1 = (~ dgain_row_acc_2_itm_13) & or_9_cse;
  assign nor_2_cse = ~((~ dgain_row_asn_sft_lpi_1_dfm_st_1) | exit_dgain_row_lpi_1_dfm
      | exitL_exit_dgain_col_lpi_1_dfm | exitL_exit_dgain_row_sva);
  assign and_dcpl_6 = ~(dgain_row_asn_sft_lpi_1_dfm_st_1 | dgain_col_not_mdf_sva_st_1);
  assign dst_rsci_idat_mx0c1 = and_dcpl_6 & main_stage_0_2 & (~ dgain_reg_m_nEb);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      reg_dst_rsci_oswt_cse <= 1'b0;
      dgain_row_y_lpi_1_dfm_1_0 <= 1'b0;
      dgain_col_x_lpi_1_dfm_1_0 <= 1'b0;
      dgain_col_not_mdf_sva_st_1 <= 1'b0;
      dgain_row_asn_sft_lpi_1_dfm_st_1 <= 1'b0;
      reg_src_rsci_oswt_cse <= 1'b0;
      dgain_col_x_lpi_1_dfm_2 <= 13'b0000000000000;
      exit_dgain_row_lpi_1_dfm <= 1'b0;
      exitL_exit_dgain_col_lpi_1_dfm <= 1'b0;
      exitL_exit_dgain_row_sva <= 1'b1;
      dgain_row_y_lpi_1_dfm_2 <= 13'b0000000000000;
      main_stage_0_2 <= 1'b0;
    end
    else if ( core_wen ) begin
      reg_dst_rsci_oswt_cse <= ~(dgain_row_asn_sft_lpi_1_dfm_st_1 | dgain_col_not_mdf_sva_st_1
          | (~ main_stage_0_2));
      dgain_row_y_lpi_1_dfm_1_0 <= dgain_row_y_lpi_1_dfm_3[0];
      dgain_col_x_lpi_1_dfm_1_0 <= dgain_col_x_lpi_1_dfm_3[0];
      dgain_col_not_mdf_sva_st_1 <= ~ dgain_col_acc_2_itm_13_1;
      dgain_row_asn_sft_lpi_1_dfm_st_1 <= dgain_row_asn_sft_lpi_1_dfm_st_1_mx0;
      reg_src_rsci_oswt_cse <= ~(mux_3_nl | (~ dgain_col_acc_2_itm_13_1));
      dgain_col_x_lpi_1_dfm_2 <= z_out;
      exit_dgain_row_lpi_1_dfm <= exit_dgain_row_lpi_1_dfm_1;
      exitL_exit_dgain_col_lpi_1_dfm <= (~ dgain_col_acc_2_itm_13_1) | dgain_row_asn_sft_lpi_1_dfm_st_1_mx0;
      exitL_exit_dgain_row_sva <= exit_dgain_row_lpi_1_dfm_1;
      dgain_row_y_lpi_1_dfm_2 <= MUX_v_13_2_2(z_out, dgain_row_y_lpi_1_dfm_3, or_8_nl);
      main_stage_0_2 <= 1'b1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dst_rsci_idat <= 12'b000000000000;
    end
    else if ( core_wen & ((and_dcpl_6 & main_stage_0_2 & dgain_reg_m_nEb) | dst_rsci_idat_mx0c1)
        ) begin
      dst_rsci_idat <= MUX_v_12_2_2(dgain_clip_dgain_clip_dgain_clip_nor_nl, src_rsci_idat_mxwt,
          dst_rsci_idat_mx0c1);
    end
  end
  assign or_nl = dgain_row_asn_sft_lpi_1_dfm_st_1 | exit_dgain_row_lpi_1_dfm | exitL_exit_dgain_col_lpi_1_dfm
      | exitL_exit_dgain_row_sva;
  assign mux_3_nl = MUX_s_1_2_2(or_nl, nor_2_cse, dgain_row_acc_2_itm_13);
  assign or_8_nl = nor_2_cse | dgain_col_acc_2_itm_13_1;
  assign nl_operator_22_true_acc_nl =  -(dgain_col_if_ac_int_cctor_sva_1[20:12]);
  assign operator_22_true_acc_nl = nl_operator_22_true_acc_nl[8:0];
  assign dgain_clip_nor_nl = ~(MUX_v_12_2_2((dgain_col_if_ac_int_cctor_sva_1[11:0]),
      12'b111111111111, (readslicef_9_1_8(operator_22_true_acc_nl))));
  assign dgain_clip_dgain_clip_dgain_clip_nor_nl = ~(MUX_v_12_2_2(dgain_clip_nor_nl,
      12'b111111111111, (dgain_col_if_ac_int_cctor_sva_1[21])));
  assign dgain_col_mux_4_nl = MUX_v_13_2_2(dgain_row_y_lpi_1_dfm_3, dgain_col_x_lpi_1_dfm_3,
      dgain_col_acc_2_itm_13_1);
  assign nl_z_out = dgain_col_mux_4_nl + 13'b0000000000001;
  assign z_out = nl_z_out[12:0];

  function automatic [19:0] MUX1HOT_v_20_4_2;
    input [19:0] input_3;
    input [19:0] input_2;
    input [19:0] input_1;
    input [19:0] input_0;
    input [3:0] sel;
    reg [19:0] result;
  begin
    result = input_0 & {20{sel[0]}};
    result = result | ( input_1 & {20{sel[1]}});
    result = result | ( input_2 & {20{sel[2]}});
    result = result | ( input_3 & {20{sel[3]}});
    MUX1HOT_v_20_4_2 = result;
  end
  endfunction


  function automatic [8:0] MUX1HOT_v_9_4_2;
    input [8:0] input_3;
    input [8:0] input_2;
    input [8:0] input_1;
    input [8:0] input_0;
    input [3:0] sel;
    reg [8:0] result;
  begin
    result = input_0 & {9{sel[0]}};
    result = result | ( input_1 & {9{sel[1]}});
    result = result | ( input_2 & {9{sel[2]}});
    result = result | ( input_3 & {9{sel[3]}});
    MUX1HOT_v_9_4_2 = result;
  end
  endfunction


  function automatic [0:0] MUX_s_1_2_2;
    input [0:0] input_0;
    input [0:0] input_1;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [0:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction


  function automatic [12:0] MUX_v_13_2_2;
    input [12:0] input_0;
    input [12:0] input_1;
    input [0:0] sel;
    reg [12:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_13_2_2 = result;
  end
  endfunction


  function automatic [0:0] readslicef_14_1_13;
    input [13:0] vector;
    reg [13:0] tmp;
  begin
    tmp = vector >> 13;
    readslicef_14_1_13 = tmp[0:0];
  end
  endfunction


  function automatic [21:0] readslicef_33_22_11;
    input [32:0] vector;
    reg [32:0] tmp;
  begin
    tmp = vector >> 11;
    readslicef_33_22_11 = tmp[21:0];
  end
  endfunction


  function automatic [0:0] readslicef_9_1_8;
    input [8:0] vector;
    reg [8:0] tmp;
  begin
    tmp = vector >> 8;
    readslicef_9_1_8 = tmp[0:0];
  end
  endfunction


  function automatic [21:0] conv_s2s_21_22 ;
    input [20:0]  vector ;
  begin
    conv_s2s_21_22 = {vector[20], vector};
  end
  endfunction


  function automatic [21:0] conv_u2s_1_22 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_22 = {{21{1'b0}}, vector};
  end
  endfunction


  function automatic [21:0] conv_u2s_9_22 ;
    input [8:0]  vector ;
  begin
    conv_u2s_9_22 = {{13{1'b0}}, vector};
  end
  endfunction


  function automatic [12:0] conv_u2s_12_13 ;
    input [11:0]  vector ;
  begin
    conv_u2s_12_13 =  {1'b0, vector};
  end
  endfunction


  function automatic [20:0] conv_u2s_20_21 ;
    input [19:0]  vector ;
  begin
    conv_u2s_20_21 =  {1'b0, vector};
  end
  endfunction


  function automatic [13:0] conv_u2u_13_14 ;
    input [12:0]  vector ;
  begin
    conv_u2u_13_14 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    lsc_core
// ------------------------------------------------------------------


module lsc_core (
  clk, arst_n, topRegister_frameWidth, topRegister_frameHeight, topRegister_imgPattern,
      topRegister_blc, lscRegister_eb, lscRegister_rGain, lscRegister_GrGain, lscRegister_GbGain,
      lscRegister_bGain, lscRegister_blockHeight, lscRegister_blockWidth, lscRegister_blockWidth_1,
      lscRegister_blockHeight_1, src_rsc_dat, src_rsc_vld, src_rsc_rdy, dst_rsc_dat,
      dst_rsc_vld, dst_rsc_rdy
);
  input clk;
  input arst_n;
  input [12:0] topRegister_frameWidth;
  input [12:0] topRegister_frameHeight;
  input [1:0] topRegister_imgPattern;
  input [8:0] topRegister_blc;
  input lscRegister_eb;
  input [2872:0] lscRegister_rGain;
  input [2872:0] lscRegister_GrGain;
  input [2872:0] lscRegister_GbGain;
  input [2872:0] lscRegister_bGain;
  input [8:0] lscRegister_blockHeight;
  input [8:0] lscRegister_blockWidth;
  input [13:0] lscRegister_blockWidth_1;
  input [9:0] lscRegister_blockHeight_1;
  input [11:0] src_rsc_dat;
  input src_rsc_vld;
  output src_rsc_rdy;
  output [11:0] dst_rsc_dat;
  output dst_rsc_vld;
  input dst_rsc_rdy;


  // Interconnect Declarations
  wire core_wen;
  wire src_rsci_wen_comp;
  wire [11:0] src_rsci_idat_mxwt;
  wire dst_rsci_wen_comp;
  reg [11:0] dst_rsci_idat;
  wire operator_13_false_18_nor_1_tmp;
  wire operator_13_false_17_nor_1_tmp;
  wire operator_13_false_16_nor_1_tmp;
  wire operator_13_false_15_nor_1_tmp;
  wire operator_13_false_14_nor_1_tmp;
  wire operator_13_false_13_nor_1_tmp;
  wire operator_13_false_12_nor_1_tmp;
  wire lsc_col_if_if_4_else_if_or_tmp;
  wire lsc_col_if_else_2_else_if_unequal_1_tmp;
  wire lsc_col_if_else_2_if_unequal_1_tmp;
  wire [9:0] operator_9_false_2_acc_tmp;
  wire [10:0] nl_operator_9_false_2_acc_tmp;
  wire [13:0] operator_13_false_acc_tmp;
  wire [14:0] nl_operator_13_false_acc_tmp;
  wire lsc_col_if_if_1_lsc_col_if_if_1_nor_tmp;
  wire and_dcpl_7;
  wire or_dcpl_5;
  wire or_dcpl_7;
  wire or_dcpl_12;
  wire or_tmp_5;
  wire or_dcpl_16;
  wire or_tmp_9;
  wire mux_tmp_8;
  wire or_tmp_20;
  wire or_dcpl_18;
  wire or_tmp_25;
  wire nor_tmp_4;
  wire mux_tmp_23;
  wire mux_tmp_24;
  wire mux_tmp_28;
  wire or_tmp_37;
  wire or_tmp_38;
  wire or_tmp_41;
  wire mux_tmp_41;
  wire mux_tmp_46;
  wire nand_tmp_1;
  wire or_tmp_51;
  wire mux_tmp_63;
  wire mux_tmp_64;
  wire mux_tmp_68;
  wire mux_tmp_73;
  wire mux_tmp_85;
  wire or_tmp_72;
  wire mux_tmp_105;
  wire nor_tmp_26;
  wire mux_tmp_138;
  wire mux_tmp_139;
  wire mux_tmp_141;
  wire mux_tmp_142;
  wire or_tmp_133;
  wire mux_tmp_151;
  wire mux_tmp_152;
  wire mux_tmp_154;
  wire and_dcpl_14;
  wire mux_tmp_295;
  wire mux_tmp_296;
  wire mux_tmp_298;
  wire mux_tmp_299;
  wire mux_tmp_308;
  wire mux_tmp_309;
  wire mux_tmp_311;
  wire lsc_col_if_lsc_col_if_if_6_lsc_col_if_if_6_nor_cse_sva_1;
  wire operator_13_false_19_nor_2;
  wire line_is_blue_sva_dfm_mx0;
  wire lsc_col_if_ac_int_cctor_1_sva_1;
  wire lsc_col_if_ac_int_cctor_0_sva_1;
  reg [12:0] lsc_col_x_lpi_1_dfm_2;
  reg exitL_exit_lsc_col_lpi_1_dfm;
  wire exitL_exitL_exit_lsc_col_lpi_1_dfm_1;
  reg exit_lsc_row_lpi_1_dfm;
  reg exitL_exit_lsc_row_sva;
  wire lsc_row_asn_sft_lpi_1_dfm_st_1_mx0;
  wire operator_2_false_1_operator_2_false_1_and_svs_1;
  wire operator_2_false_2_operator_2_false_2_and_svs_1;
  wire lsc_col_and_tmp_1;
  wire lsc_col_if_if_4_else_else_else_else_else_land_1_lpi_1_dfm_mx0;
  wire lsc_col_if_if_4_else_else_else_else_land_1_lpi_1_dfm_mx0;
  wire lsc_col_if_if_4_else_else_else_land_1_lpi_1_dfm_mx0;
  wire lsc_col_if_if_4_else_else_land_1_lpi_1_dfm_mx0;
  wire lsc_col_if_if_4_else_land_1_lpi_1_dfm_mx0;
  wire lsc_col_if_if_4_land_lpi_1_dfm_1;
  wire lsc_row_and_21_tmp_1;
  wire lsc_col_if_if_3_else_else_else_else_else_land_1_lpi_1_dfm_mx0;
  wire lsc_col_if_if_3_else_else_else_else_land_1_lpi_1_dfm_mx0;
  wire lsc_col_if_if_3_else_else_else_land_1_lpi_1_dfm_mx0;
  wire lsc_col_if_if_3_else_else_land_1_lpi_1_dfm_mx0;
  wire lsc_col_if_if_3_else_land_1_lpi_1_dfm_mx0;
  wire lsc_col_if_if_3_land_lpi_1_dfm_1;
  wire lsc_col_lsc_col_nor_5_cse_1;
  wire lsc_col_if_if_4_else_else_lsc_col_if_if_4_else_else_nor_1_tmp_1;
  wire lsc_col_if_if_4_lsc_col_if_if_4_nor_1_m1c_1;
  wire lsc_col_if_if_4_else_else_else_else_else_else_land_1_lpi_1_dfm_mx1;
  wire lsc_col_if_if_4_else_else_else_else_else_land_1_lpi_1_dfm_mx1;
  wire lsc_col_if_if_4_else_else_else_else_land_1_lpi_1_dfm_mx2;
  wire lsc_col_if_if_4_else_else_else_land_1_lpi_1_dfm_mx2;
  wire lsc_col_if_if_4_else_else_land_1_lpi_1_dfm_mx2;
  wire lsc_col_if_if_4_else_lsc_col_if_if_4_else_nor_1_tmp_1;
  wire lsc_col_if_if_4_else_land_1_lpi_1_dfm_mx2;
  wire lsc_col_if_if_3_else_else_lsc_col_if_if_3_else_else_nor_1_tmp_1;
  wire lsc_col_if_if_3_lsc_col_if_if_3_nor_1_m1c_1;
  wire lsc_col_if_if_3_else_else_else_else_else_else_land_1_lpi_1_dfm_mx1;
  wire lsc_col_if_if_3_else_else_else_else_else_land_1_lpi_1_dfm_mx1;
  wire lsc_col_if_if_3_else_else_else_else_land_1_lpi_1_dfm_mx2;
  wire lsc_col_if_if_3_else_else_else_land_1_lpi_1_dfm_mx2;
  wire lsc_col_if_if_3_else_else_land_1_lpi_1_dfm_mx2;
  wire lsc_col_if_if_3_else_lsc_col_if_if_3_else_nor_1_tmp_1;
  wire lsc_col_if_if_3_else_land_1_lpi_1_dfm_mx2;
  wire lsc_col_if_else_2_land_lpi_1_dfm_1;
  wire lsc_col_if_else_2_if_lor_lpi_1_dfm_mx0;
  wire lsc_col_if_else_1_else_land_lpi_1_dfm_1;
  wire lsc_col_if_else_1_land_lpi_1_dfm_1;
  wire lsc_col_if_else_1_if_lor_lpi_1_dfm_mx0;
  reg line_is_blue_sva;
  reg lsc_row_asn_sft_lpi_1_dfm_st_1;
  reg main_stage_0_2;
  reg lsc_col_not_mdf_sva_st_1;
  wire [15:0] operator_33_true_acc_psp_sva_1;
  wire [17:0] nl_operator_33_true_acc_psp_sva_1;
  wire [12:0] lsc_col_x_lpi_1_dfm_3;
  reg [8:0] block_height_count_sva;
  wire [12:0] lsc_row_y_lpi_1_dfm_3;
  wire lsc_row_asn_sft_lpi_1_dfm_mx0;
  wire lsc_col_if_if_4_else_else_else_else_else_else_else_else_land_1_lpi_1_dfm_mx0w0;
  reg lsc_col_if_if_4_else_else_else_else_else_else_else_else_land_1_lpi_1_dfm;
  wire lsc_col_if_if_4_else_else_else_else_else_else_else_land_1_lpi_1_dfm_mx0w0;
  reg lsc_col_if_if_4_else_else_else_else_else_else_else_land_1_lpi_1_dfm;
  wire lsc_col_if_if_4_else_else_else_else_else_else_land_1_lpi_1_dfm_mx0w0;
  reg lsc_col_if_if_4_else_else_else_else_else_else_land_1_lpi_1_dfm;
  wire lsc_col_if_if_3_else_else_else_else_else_else_else_else_land_1_lpi_1_dfm_mx0w0;
  reg lsc_col_if_if_3_else_else_else_else_else_else_else_else_land_1_lpi_1_dfm;
  wire lsc_col_if_if_3_else_else_else_else_else_else_else_land_1_lpi_1_dfm_mx0w0;
  reg lsc_col_if_if_3_else_else_else_else_else_else_else_land_1_lpi_1_dfm;
  wire lsc_col_if_if_3_else_else_else_else_else_else_land_1_lpi_1_dfm_mx0w0;
  reg lsc_col_if_if_3_else_else_else_else_else_else_land_1_lpi_1_dfm;
  wire lsc_col_if_if_4_else_else_else_else_land_1_lpi_1_dfm_mx0w0;
  reg lsc_col_if_if_4_else_else_else_else_land_1_lpi_1_dfm;
  wire lsc_col_if_if_4_else_else_else_land_1_lpi_1_dfm_mx0w0;
  reg lsc_col_if_if_4_else_else_else_land_1_lpi_1_dfm;
  wire lsc_col_if_if_4_else_else_land_1_lpi_1_dfm_mx0w0;
  reg lsc_col_if_if_4_else_else_land_1_lpi_1_dfm;
  wire lsc_col_if_if_4_else_land_1_lpi_1_dfm_mx0w0;
  reg lsc_col_if_if_4_else_land_1_lpi_1_dfm;
  wire lsc_col_if_if_3_else_else_else_else_land_1_lpi_1_dfm_mx0w0;
  reg lsc_col_if_if_3_else_else_else_else_land_1_lpi_1_dfm;
  wire lsc_col_if_if_3_else_else_else_land_1_lpi_1_dfm_mx0w0;
  reg lsc_col_if_if_3_else_else_else_land_1_lpi_1_dfm;
  wire lsc_col_if_if_3_else_else_land_1_lpi_1_dfm_mx0w0;
  reg lsc_col_if_if_3_else_else_land_1_lpi_1_dfm;
  wire lsc_col_if_if_3_else_land_1_lpi_1_dfm_mx0w0;
  reg lsc_col_if_if_3_else_land_1_lpi_1_dfm;
  reg [8:0] block_width_count_sva;
  wire [9:0] operator_9_false_acc_psp_sva_1;
  wire [10:0] nl_operator_9_false_acc_psp_sva_1;
  wire operator_2_false_operator_2_false_nor_svs_1;
  reg reg_dst_rsci_oswt_cse;
  wire block_height_count_static_init_and_cse;
  wire nor_110_cse;
  wire and_103_cse;
  wire nand_cse;
  wire and_85_cse;
  wire and_86_cse;
  wire nand_33_cse;
  wire nand_26_cse;
  wire nand_22_cse;
  wire and_74_cse;
  wire and_72_cse;
  reg reg_src_rsci_oswt_cse;
  wire lsc_col_if_aif_2_lsc_col_if_aelse_2_lsc_col_if_aelse_2_nor_cse;
  wire and_92_cse;
  wire or_386_cse;
  wire or_101_cse;
  wire and_91_cse;
  wire or_371_cse;
  wire nand_7_cse;
  wire nor_115_cse;
  wire and_106_cse;
  wire or_379_cse;
  wire or_364_cse;
  wire and_80_cse;
  wire or_383_cse;
  wire mux_130_cse;
  wire and_19_cse;
  wire and_22_cse;
  wire mux_97_cse;
  wire mux_118_cse;
  wire and_17_cse;
  wire mux_123_cse;
  wire mux_136_cse;
  wire and_18_cse;
  wire mux_219_cse;
  wire or_79_cse;
  wire or_106_cse;
  wire mux_2_cse;
  wire mux_134_cse;
  wire mux_42_cse;
  wire mux_69_cse;
  wire or_385_cse;
  wire mux_37_cse;
  wire mux_79_cse;
  wire mux_110_cse;
  wire mux_176_cse;
  wire mux_209_cse;
  wire mux_247_cse;
  wire mux_147_itm;
  wire mux_158_itm;
  wire mux_304_itm;
  wire mux_315_itm;
  wire or_dcpl;
  wire [12:0] z_out;
  wire [12:0] z_out_1;
  wire [12:0] z_out_2;
  wire and_dcpl_53;
  wire [12:0] z_out_3;
  wire and_dcpl_62;
  wire and_dcpl_63;
  wire and_dcpl_64;
  wire and_dcpl_65;
  wire and_dcpl_66;
  wire and_dcpl_67;
  wire and_dcpl_68;
  wire and_dcpl_69;
  wire [7:0] z_out_4;
  wire [8:0] nl_z_out_4;
  wire [6:0] z_out_5;
  wire [7:0] nl_z_out_5;
  wire or_dcpl_64;
  wire [8:0] z_out_6;
  wire [9:0] nl_z_out_6;
  wire [12:0] z_out_7;
  wire [13:0] nl_z_out_7;
  wire [6:0] z_out_8;
  wire [7:0] nl_z_out_8;
  wire [8:0] z_out_9;
  wire [9:0] nl_z_out_9;
  wire [7:0] z_out_10;
  wire [8:0] nl_z_out_10;
  wire [7:0] z_out_11;
  wire [8:0] nl_z_out_11;
  reg lsc_col_if_else_1_if_lor_lpi_1_dfm;
  reg lsc_col_if_else_2_if_lor_lpi_1_dfm;
  reg lsc_col_if_if_3_else_else_else_else_else_land_1_lpi_1_dfm;
  reg lsc_col_if_if_4_else_else_else_else_else_land_1_lpi_1_dfm;
  reg [12:0] lsc_row_y_lpi_1_dfm_2;
  reg [12:0] gain_0_lt_lpi_1_dfm_6;
  reg [12:0] gain_0_rt_lpi_1_dfm_7;
  reg [12:0] gain_0_ld_lpi_1_dfm_8;
  reg [12:0] gain_0_rd_lpi_1_dfm_9;
  reg [12:0] gain_1_lt_lpi_1_dfm_10;
  reg [12:0] gain_1_rt_lpi_1_dfm_11;
  reg [12:0] gain_1_ld_lpi_1_dfm_12;
  reg [12:0] gain_1_rd_lpi_1_dfm_13;
  reg [12:0] gain_2_lt_lpi_1_dfm_6;
  reg [12:0] gain_2_rt_lpi_1_dfm_7;
  reg [12:0] gain_2_ld_lpi_1_dfm_8;
  reg [12:0] gain_2_rd_lpi_1_dfm_9;
  reg [12:0] gain_3_lt_lpi_1_dfm_10;
  reg [12:0] gain_3_rt_lpi_1_dfm_11;
  reg [12:0] gain_3_ld_lpi_1_dfm_12;
  reg [12:0] gain_3_rd_lpi_1_dfm_13;
  reg [12:0] gain_rGb_t_nxt_lpi_1_dfm_4;
  reg [12:0] gain_rGb_d_nxt_lpi_1_dfm_4;
  reg [12:0] gain_Grb_t_nxt_lpi_1_dfm_4;
  reg [12:0] gain_Grb_d_nxt_lpi_1_dfm_4;
  reg [13:0] BilinearInterpolation_tmp_t_sva_1;
  reg [14:0] BilinearInterpolation_acc_4_itm_1;
  reg [8:0] BilinearInterpolation_asn_4_itm_1;
  wire dst_rsci_idat_mx0c1;
  wire [13:0] BilinearInterpolation_tmp_t_sva_1_1;
  wire [16:0] nl_BilinearInterpolation_tmp_t_sva_1_1;
  wire lsc_col_if_else_2_if_lor_lpi_1_dfm_mx0w0;
  wire lsc_col_if_if_3_else_else_else_else_else_land_1_lpi_1_dfm_mx0w0;
  wire lsc_col_if_if_4_else_else_else_else_else_land_1_lpi_1_dfm_mx0w0;
  wire exit_lsc_row_lpi_1_dfm_1;
  wire [12:0] gain_3_rd_lpi_1_dfm_mx0;
  wire [12:0] gain_3_ld_lpi_1_dfm_mx0;
  wire [12:0] gain_3_rt_lpi_1_dfm_mx0;
  wire [12:0] gain_3_lt_lpi_1_dfm_mx0;
  wire [12:0] gain_2_rd_lpi_1_dfm_mx0;
  wire [12:0] gain_2_ld_lpi_1_dfm_mx0;
  wire [12:0] gain_2_rt_lpi_1_dfm_mx0;
  wire [12:0] gain_2_lt_lpi_1_dfm_mx0;
  wire [12:0] gain_1_rd_lpi_1_dfm_mx0;
  wire [12:0] gain_1_ld_lpi_1_dfm_mx0;
  wire [12:0] gain_1_rt_lpi_1_dfm_mx0;
  wire [12:0] gain_1_lt_lpi_1_dfm_mx0;
  wire [12:0] gain_ld_lpi_1_dfm_8;
  wire [12:0] gain_lt_lpi_1_dfm_8;
  wire [12:0] gain_0_rd_lpi_1_dfm_mx0;
  wire [12:0] gain_0_ld_lpi_1_dfm_mx0;
  wire [12:0] gain_0_rt_lpi_1_dfm_mx0;
  wire [12:0] gain_0_lt_lpi_1_dfm_mx0;
  wire [12:0] gain_Grb_d_nxt_lpi_1_dfm_5;
  wire [12:0] gain_rGb_d_nxt_lpi_1_dfm_5;
  wire [12:0] gain_Grb_t_nxt_lpi_1_dfm_5;
  wire [12:0] gain_rGb_t_nxt_lpi_1_dfm_5;
  wire lsc_col_if_if_4_and_15_m1c_1;
  wire lsc_col_if_if_4_else_else_else_else_and_2_tmp_1;
  wire lsc_col_if_if_4_and_13_m1c_1;
  wire lsc_col_if_if_4_else_else_else_and_3_tmp_1;
  wire lsc_col_if_if_4_else_else_and_tmp_1;
  wire lsc_col_if_if_4_else_and_tmp_1;
  wire lsc_col_if_if_3_and_15_m1c_1;
  wire lsc_col_if_if_3_else_else_else_else_and_2_tmp_1;
  wire lsc_col_if_if_3_and_13_m1c_1;
  wire lsc_col_if_if_3_else_else_else_and_3_tmp_1;
  wire lsc_col_if_if_3_else_else_and_tmp_1;
  wire lsc_col_if_if_3_else_and_tmp_1;
  wire lsc_col_and_52_m1c_1;
  wire lsc_col_if_if_4_else_and_4_tmp_1;
  wire lsc_col_and_45_m1c_1;
  wire lsc_col_if_if_3_else_and_4_tmp_1;
  wire lsc_col_if_if_4_else_and_6_tmp_1;
  wire lsc_col_and_56_m1c_1;
  wire lsc_col_if_if_4_and_2_cse_1;
  wire lsc_col_if_if_4_else_else_and_3_tmp_1;
  wire lsc_col_and_55_m1c_1;
  wire lsc_col_if_if_3_else_and_6_tmp_1;
  wire lsc_col_and_49_m1c_1;
  wire lsc_col_if_if_3_and_2_cse_1;
  wire lsc_col_if_if_3_else_else_and_3_tmp_1;
  wire lsc_col_and_48_m1c_1;
  wire lsc_col_if_else_2_and_ssc_1;
  wire lsc_col_if_else_2_and_1_ssc_1;
  wire lsc_col_if_lsc_col_if_nor_2_ssc_1;
  wire lsc_col_if_else_2_and_3_ssc_1;
  wire lsc_col_if_else_1_and_ssc_1;
  wire lsc_col_if_else_1_and_1_ssc_1;
  wire lsc_col_if_lsc_col_if_nor_ssc_1;
  wire lsc_col_if_else_1_and_3_ssc_1;
  wire lsc_col_and_43_tmp_1;
  wire lsc_col_and_42_tmp_1;
  wire lsc_col_and_41_tmp_1;
  wire lsc_col_lsc_col_nor_25_tmp_1;
  wire lsc_col_if_asn_94;
  wire lsc_row_asn_174;
  wire lsc_row_asn_176;
  wire lsc_row_asn_178;
  wire lsc_row_asn_180;
  wire lsc_row_asn_182;
  wire lsc_row_asn_184;
  wire operator_8_false_1_or_1_ssc;
  wire nor_126_cse;
  wire and_136_cse;
  wire and_135_cse;
  wire or_387_cse;
  wire and_124_ssc;
  wire lsc_col_if_if_4_else_else_else_else_else_else_else_else_if_or_ssc;
  wire and_130_ssc;
  wire and_134_ssc;
  wire lsc_col_if_if_3_else_else_else_else_if_or_ssc;
  wire and_142_ssc;
  wire and_146_ssc;
  wire lsc_col_if_if_4_else_else_else_else_if_or_ssc;
  wire and_154_ssc;
  wire and_158_ssc;
  wire lsc_col_if_if_3_else_else_else_else_else_else_else_else_if_or_ssc;
  wire and_166_ssc;
  wire and_131_cse;
  wire and_132_cse;
  wire and_143_cse;
  wire and_144_cse;
  wire [6:0] block_count_rGr_sva_dfm_5_7_1;
  wire block_count_rGr_sva_dfm_5_0;
  wire [6:0] block_count_Gbb_sva_dfm_5_7_1;
  wire block_count_Gbb_sva_dfm_5_0;
  reg [6:0] block_count_rGr_sva_7_1;
  reg block_count_rGr_sva_0;
  reg [6:0] block_count_Gbb_sva_7_1;
  reg block_count_Gbb_sva_0;
  wire and_178_ssc;
  wire and_179_ssc;
  wire mux_ssc;
  wire [15:0] lsc_col_if_mul_itm_25_10_1;
  wire [21:0] BilinearInterpolation_mul_4_itm_28_7;
  wire lsc_col_acc_2_itm_13_1;
  wire operator_9_false_acc_itm_9_1;
  wire [25:0] BilinearInterpolation_mul_2_itm_32_7;
  wire [25:0] BilinearInterpolation_mul_itm_32_7;
  wire lsc_row_acc_2_itm_13_1;
  wire [6:0] operator_8_false_mux_cse;
  wire operator_8_false_1_or_3_seb;

  wire[11:0] lsc_clip_lsc_clip_lsc_clip_nor_nl;
  wire[11:0] lsc_clip_nor_nl;
  wire[2:0] operator_16_true_acc_nl;
  wire[3:0] nl_operator_16_true_acc_nl;
  wire[14:0] BilinearInterpolation_acc_4_nl;
  wire[15:0] nl_BilinearInterpolation_acc_4_nl;
  wire[13:0] BilinearInterpolation_acc_3_nl;
  wire[16:0] nl_BilinearInterpolation_acc_3_nl;
  wire[0:0] operator_39_true_1_nand_nl;
  wire[8:0] lsc_col_if_else_6_mux_nl;
  wire[0:0] lsc_col_if_aelse_2_lsc_col_if_if_6_nand_nl;
  wire[0:0] mux_6_nl;
  wire[0:0] or_17_nl;
  wire[0:0] mux_5_nl;
  wire[0:0] or_19_nl;
  wire[0:0] lsc_col_if_oelse_lsc_col_if_if_7_nor_nl;
  wire[0:0] mux_8_nl;
  wire[0:0] or_22_nl;
  wire[0:0] mux_7_nl;
  wire[0:0] and_13_nl;
  wire[0:0] mux_36_nl;
  wire[0:0] mux_35_nl;
  wire[0:0] mux_34_nl;
  wire[0:0] mux_33_nl;
  wire[0:0] mux_32_nl;
  wire[0:0] mux_31_nl;
  wire[0:0] mux_29_nl;
  wire[0:0] or_50_nl;
  wire[0:0] mux_28_nl;
  wire[0:0] mux_27_nl;
  wire[0:0] mux_22_nl;
  wire[0:0] or_46_nl;
  wire[0:0] mux_39_nl;
  wire[0:0] mux_38_nl;
  wire[0:0] mux_78_nl;
  wire[0:0] mux_77_nl;
  wire[0:0] mux_76_nl;
  wire[0:0] mux_74_nl;
  wire[0:0] mux_73_nl;
  wire[0:0] mux_72_nl;
  wire[0:0] mux_71_nl;
  wire[0:0] mux_67_nl;
  wire[0:0] mux_81_nl;
  wire[0:0] mux_80_nl;
  wire[0:0] mux_109_nl;
  wire[0:0] mux_108_nl;
  wire[0:0] mux_102_nl;
  wire[0:0] mux_112_nl;
  wire[0:0] mux_111_nl;
  wire[0:0] mux_129_nl;
  wire[0:0] mux_128_nl;
  wire[0:0] mux_127_nl;
  wire[0:0] mux_126_nl;
  wire[0:0] mux_133_nl;
  wire[0:0] mux_132_nl;
  wire[0:0] or_133_nl;
  wire[0:0] mux_131_nl;
  wire[0:0] mux_148_nl;
  wire[0:0] or_157_nl;
  wire[0:0] mux_151_nl;
  wire[0:0] mux_150_nl;
  wire[0:0] or_159_nl;
  wire[0:0] mux_149_nl;
  wire[0:0] mux_161_nl;
  wire[0:0] mux_160_nl;
  wire[0:0] or_174_nl;
  wire[0:0] mux_159_nl;
  wire[0:0] mux_164_nl;
  wire[0:0] mux_163_nl;
  wire[0:0] or_184_nl;
  wire[0:0] mux_162_nl;
  wire[0:0] mux_165_nl;
  wire[0:0] or_190_nl;
  wire[0:0] mux_196_nl;
  wire[0:0] mux_195_nl;
  wire[0:0] mux_238_nl;
  wire[0:0] mux_237_nl;
  wire[0:0] mux_269_nl;
  wire[0:0] mux_268_nl;
  wire[0:0] mux_290_nl;
  wire[0:0] mux_289_nl;
  wire[0:0] or_299_nl;
  wire[0:0] mux_288_nl;
  wire[0:0] mux_308_nl;
  wire[0:0] mux_307_nl;
  wire[0:0] or_324_nl;
  wire[0:0] mux_306_nl;
  wire[0:0] mux_318_nl;
  wire[0:0] mux_317_nl;
  wire[0:0] or_336_nl;
  wire[0:0] mux_316_nl;
  wire[0:0] mux_321_nl;
  wire[0:0] mux_320_nl;
  wire[0:0] or_346_nl;
  wire[0:0] mux_319_nl;
  wire[0:0] mux_322_nl;
  wire[0:0] or_352_nl;
  wire[0:0] lsc_col_mux_164_nl;
  wire[0:0] lsc_col_mux_62_nl;
  wire[0:0] lsc_col_if_mux_69_nl;
  wire[0:0] or_356_nl;
  wire[0:0] lsc_row_or_11_nl;
  wire[0:0] lsc_row_and_59_nl;
  wire[0:0] lsc_row_nand_7_nl;
  wire[0:0] lsc_col_if_if_4_and_19_nl;
  wire[0:0] lsc_row_nand_6_nl;
  wire[0:0] lsc_col_if_if_4_and_17_nl;
  wire[0:0] lsc_row_or_7_nl;
  wire[0:0] lsc_row_and_44_nl;
  wire[0:0] lsc_row_or_17_nl;
  wire[0:0] lsc_col_and_69_nl;
  wire[0:0] lsc_row_nand_3_nl;
  wire[0:0] lsc_col_if_if_4_and_11_nl;
  wire[0:0] lsc_row_nand_2_nl;
  wire[0:0] lsc_col_if_if_4_and_9_nl;
  wire[0:0] lsc_row_or_6_nl;
  wire[0:0] lsc_col_if_if_4_and_nl;
  wire[0:0] lsc_row_or_9_nl;
  wire[0:0] lsc_row_and_54_nl;
  wire[0:0] lsc_row_nand_5_nl;
  wire[0:0] lsc_col_if_if_3_and_19_nl;
  wire[0:0] lsc_row_nand_4_nl;
  wire[0:0] lsc_col_if_if_3_and_17_nl;
  wire[0:0] lsc_row_or_5_nl;
  wire[0:0] lsc_row_and_37_nl;
  wire[0:0] lsc_row_or_16_nl;
  wire[0:0] lsc_col_and_67_nl;
  wire[0:0] lsc_row_nand_1_nl;
  wire[0:0] lsc_col_if_if_3_and_11_nl;
  wire[0:0] lsc_row_nand_nl;
  wire[0:0] lsc_col_if_if_3_and_9_nl;
  wire[0:0] lsc_row_or_4_nl;
  wire[0:0] lsc_col_if_if_3_and_nl;
  wire[0:0] lsc_row_or_15_nl;
  wire[0:0] lsc_col_and_64_nl;
  wire[0:0] lsc_col_and_65_nl;
  wire[0:0] lsc_row_or_14_nl;
  wire[0:0] lsc_col_and_62_nl;
  wire[0:0] lsc_col_and_63_nl;
  wire[0:0] lsc_row_or_13_nl;
  wire[0:0] lsc_col_and_60_nl;
  wire[0:0] lsc_col_and_61_nl;
  wire[0:0] lsc_row_or_12_nl;
  wire[0:0] lsc_col_and_58_nl;
  wire[0:0] lsc_col_and_59_nl;
  wire[25:0] lsc_col_if_mul_nl;
  wire signed [26:0] nl_lsc_col_if_mul_nl;
  wire[12:0] lsc_col_if_acc_2_nl;
  wire[13:0] nl_lsc_col_if_acc_2_nl;
  wire[13:0] BilinearInterpolation_acc_5_nl;
  wire[16:0] nl_BilinearInterpolation_acc_5_nl;
  wire[0:0] operator_35_true_nand_nl;
  wire[0:0] operator_39_true_nand_nl;
  wire[28:0] BilinearInterpolation_mul_4_nl;
  wire signed [34:0] nl_BilinearInterpolation_mul_4_nl;
  wire[23:0] BilinearInterpolation_mul_5_nl;
  wire signed [24:0] nl_BilinearInterpolation_mul_5_nl;
  wire[13:0] lsc_col_acc_2_nl;
  wire[14:0] nl_lsc_col_acc_2_nl;
  wire[0:0] asn_lsc_row_asn_sft_lpi_1_dfm_st_1_nor_nl;
  wire[0:0] or_12_nl;
  wire[0:0] lsc_col_lsc_col_lsc_col_lsc_col_not_nl;
  wire[0:0] or_21_nl;
  wire[0:0] mux_96_nl;
  wire[0:0] mux_95_nl;
  wire[0:0] or_97_nl;
  wire[0:0] mux_99_nl;
  wire[0:0] mux_98_nl;
  wire[0:0] mux_113_nl;
  wire[0:0] mux_117_nl;
  wire[0:0] mux_116_nl;
  wire[0:0] mux_329_nl;
  wire[0:0] mux_115_nl;
  wire[0:0] mux_114_nl;
  wire[0:0] mux_330_nl;
  wire[0:0] or_119_nl;
  wire[0:0] mux_120_nl;
  wire[0:0] mux_119_nl;
  wire[0:0] mux_122_nl;
  wire[0:0] or_124_nl;
  wire[0:0] mux_121_nl;
  wire[0:0] or_123_nl;
  wire[0:0] mux_125_nl;
  wire[0:0] mux_124_nl;
  wire[0:0] or_139_nl;
  wire[0:0] mux_135_nl;
  wire[0:0] or_141_nl;
  wire[0:0] and_84_nl;
  wire[0:0] or_144_nl;
  wire[0:0] mux_138_nl;
  wire[0:0] mux_137_nl;
  wire[0:0] or_165_nl;
  wire[0:0] mux_157_nl;
  wire[0:0] mux_155_nl;
  wire[0:0] or_176_nl;
  wire[0:0] or_186_nl;
  wire[0:0] lsc_row_not_193_nl;
  wire[0:0] mux_256_nl;
  wire[0:0] mux_255_nl;
  wire[0:0] or_285_nl;
  wire[0:0] mux_277_nl;
  wire[0:0] mux_276_nl;
  wire[0:0] mux_282_nl;
  wire[0:0] mux_281_nl;
  wire[0:0] or_310_nl;
  wire[0:0] mux_295_nl;
  wire[0:0] mux_294_nl;
  wire[0:0] or_327_nl;
  wire[0:0] mux_314_nl;
  wire[0:0] mux_312_nl;
  wire[0:0] or_338_nl;
  wire[0:0] or_348_nl;
  wire[9:0] operator_9_false_acc_nl;
  wire[10:0] nl_operator_9_false_acc_nl;
  wire[0:0] or_355_nl;
  wire[32:0] BilinearInterpolation_mul_2_nl;
  wire signed [37:0] nl_BilinearInterpolation_mul_2_nl;
  wire[22:0] BilinearInterpolation_mul_3_nl;
  wire signed [23:0] nl_BilinearInterpolation_mul_3_nl;
  wire[13:0] BilinearInterpolation_acc_2_nl;
  wire[14:0] nl_BilinearInterpolation_acc_2_nl;
  wire[12:0] lsc_col_if_lsc_col_if_mux1h_3_nl;
  wire[32:0] BilinearInterpolation_mul_nl;
  wire signed [37:0] nl_BilinearInterpolation_mul_nl;
  wire[22:0] BilinearInterpolation_mul_1_nl;
  wire signed [23:0] nl_BilinearInterpolation_mul_1_nl;
  wire[13:0] BilinearInterpolation_acc_nl;
  wire[14:0] nl_BilinearInterpolation_acc_nl;
  wire[12:0] lsc_col_if_lsc_col_if_mux1h_1_nl;
  wire[0:0] and_110_nl;
  wire[0:0] mux_218_nl;
  wire[0:0] and_111_nl;
  wire[0:0] mux_217_nl;
  wire[0:0] mux_216_nl;
  wire[0:0] mux_215_nl;
  wire[0:0] or_238_nl;
  wire[0:0] mux_214_nl;
  wire[0:0] mux_213_nl;
  wire[0:0] or_235_nl;
  wire[0:0] lsc_col_if_if_4_else_else_else_else_else_else_else_aelse_1_mux_1_nl;
  wire[0:0] mux_221_nl;
  wire[0:0] mux_220_nl;
  wire[0:0] nor_121_nl;
  wire[0:0] lsc_col_if_if_3_else_else_else_else_else_else_else_aelse_1_mux_1_nl;
  wire[0:0] mux_64_nl;
  wire[0:0] mux_63_nl;
  wire[0:0] nor_118_nl;
  wire[0:0] lsc_col_if_if_4_else_else_else_else_aelse_1_mux_1_nl;
  wire[0:0] or_315_nl;
  wire[0:0] lsc_col_if_if_4_else_else_else_aelse_1_mux_1_nl;
  wire[0:0] or_328_nl;
  wire[0:0] lsc_col_if_if_4_else_else_aelse_1_mux_1_nl;
  wire[0:0] or_339_nl;
  wire[0:0] lsc_col_if_if_4_else_aelse_1_mux_1_nl;
  wire[0:0] or_349_nl;
  wire[0:0] lsc_col_if_if_3_else_else_else_else_aelse_1_mux_1_nl;
  wire[0:0] or_150_nl;
  wire[0:0] lsc_col_if_if_3_else_else_else_aelse_1_mux_1_nl;
  wire[0:0] or_166_nl;
  wire[0:0] lsc_col_if_if_3_else_else_aelse_1_mux_1_nl;
  wire[0:0] or_177_nl;
  wire[0:0] lsc_col_if_if_3_else_aelse_1_mux_1_nl;
  wire[0:0] or_187_nl;
  wire[0:0] mux_175_nl;
  wire[0:0] mux_174_nl;
  wire[0:0] mux_173_nl;
  wire[0:0] mux_172_nl;
  wire[0:0] mux_171_nl;
  wire[0:0] mux_170_nl;
  wire[0:0] or_203_nl;
  wire[0:0] mux_169_nl;
  wire[0:0] mux_168_nl;
  wire[0:0] or_198_nl;
  wire[0:0] mux_208_nl;
  wire[0:0] mux_207_nl;
  wire[0:0] mux_206_nl;
  wire[0:0] mux_204_nl;
  wire[0:0] mux_203_nl;
  wire[0:0] mux_202_nl;
  wire[0:0] mux_201_nl;
  wire[0:0] mux_197_nl;
  wire[0:0] mux_246_nl;
  wire[0:0] mux_245_nl;
  wire[0:0] mux_239_nl;
  wire[0:0] lsc_col_if_if_4_else_else_else_else_else_else_else_else_aelse_1_mux_nl;
  wire[0:0] or_206_nl;
  wire[0:0] mux_178_nl;
  wire[0:0] mux_177_nl;
  wire[0:0] lsc_col_if_if_4_else_else_else_else_else_else_else_aelse_1_mux_nl;
  wire[0:0] or_230_nl;
  wire[0:0] mux_211_nl;
  wire[0:0] mux_210_nl;
  wire[0:0] lsc_col_if_if_4_else_else_else_else_else_else_aelse_1_mux_nl;
  wire[0:0] or_259_nl;
  wire[0:0] mux_249_nl;
  wire[0:0] mux_248_nl;
  wire[0:0] lsc_col_if_if_3_else_else_else_else_else_else_else_else_aelse_1_mux_nl;
  wire[0:0] or_39_nl;
  wire[0:0] mux_21_nl;
  wire[0:0] mux_20_nl;
  wire[0:0] lsc_col_if_if_3_else_else_else_else_else_else_else_aelse_1_mux_nl;
  wire[0:0] or_64_nl;
  wire[0:0] mux_54_nl;
  wire[0:0] mux_53_nl;
  wire[0:0] lsc_col_if_if_3_else_else_else_else_else_else_aelse_1_mux_nl;
  wire[0:0] or_93_nl;
  wire[0:0] mux_92_nl;
  wire[0:0] mux_91_nl;
  wire[0:0] lsc_col_if_lsc_col_if_mux1h_6_nl;
  wire[0:0] lsc_col_if_or_nl;
  wire[0:0] lsc_col_if_lsc_col_if_mux1h_7_nl;
  wire[0:0] lsc_col_if_or_8_nl;
  wire[0:0] or_nl;
  wire[0:0] mux_24_nl;
  wire[0:0] mux_23_nl;
  wire[0:0] or_49_nl;
  wire[0:0] or_51_nl;
  wire[0:0] mux_41_nl;
  wire[0:0] mux_55_nl;
  wire[0:0] or_70_nl;
  wire[0:0] mux_68_nl;
  wire[0:0] mux_86_nl;
  wire[0:0] mux_85_nl;
  wire[0:0] mux_106_nl;
  wire[0:0] mux_105_nl;
  wire[0:0] mux_139_nl;
  wire[0:0] mux_146_nl;
  wire[0:0] mux_145_nl;
  wire[0:0] mux_142_nl;
  wire[0:0] mux_152_nl;
  wire[0:0] and_21_nl;
  wire[0:0] mux_296_nl;
  wire[0:0] mux_303_nl;
  wire[0:0] mux_302_nl;
  wire[0:0] mux_299_nl;
  wire[0:0] mux_309_nl;
  wire[0:0] and_31_nl;
  wire[13:0] lsc_row_acc_2_nl;
  wire[14:0] nl_lsc_row_acc_2_nl;
  wire[0:0] and_181_nl;
  wire[0:0] or_392_nl;
  wire[3:0] operator_8_false_1_operator_8_false_1_and_1_nl;
  wire[3:0] operator_8_false_1_mux_1_nl;
  wire[0:0] operator_8_false_1_nor_1_nl;
  wire[3:0] operator_8_false_1_mux1h_2_nl;
  wire[0:0] operator_8_false_1_or_5_nl;
  wire[2:0] operator_8_false_1_operator_8_false_1_or_1_nl;
  wire[0:0] operator_8_false_1_or_6_nl;
  wire[6:0] operator_9_false_1_mux1h_3_nl;
  wire[0:0] operator_9_false_1_mux1h_4_nl;
  wire[12:0] lsc_col_mux_166_nl;
  wire[6:0] operator_8_false_mux_1_nl;
  wire[8:0] lsc_col_if_else_6_if_mux_1_nl;
  wire[0:0] operator_8_false_mux_2_nl;
  wire[6:0] operator_8_false_9_mux_2_nl;
  wire[0:0] operator_8_false_9_mux_3_nl;
  wire[3:0] lsc_col_if_if_4_else_else_else_else_else_else_else_else_if_mux1h_224_nl;
  wire[2:0] lsc_col_if_if_4_else_else_else_else_else_else_else_else_if_mux1h_225_nl;
  wire[0:0] lsc_col_if_if_4_else_else_else_else_else_else_else_else_if_or_3_nl;
  wire[0:0] lsc_col_if_if_4_else_else_else_else_else_else_else_else_if_mux1h_226_nl;
  wire[0:0] lsc_col_if_if_4_else_else_else_else_else_else_else_else_if_or_4_nl;
  wire[3:0] lsc_col_if_if_3_else_else_else_else_if_mux1h_224_nl;
  wire[2:0] lsc_col_if_if_3_else_else_else_else_if_mux1h_225_nl;
  wire[0:0] lsc_col_if_if_3_else_else_else_else_if_or_3_nl;
  wire[0:0] lsc_col_if_if_3_else_else_else_else_if_mux1h_226_nl;
  wire[0:0] lsc_col_if_if_3_else_else_else_else_if_or_4_nl;
  wire[3:0] lsc_col_if_if_4_else_else_else_else_if_mux1h_224_nl;
  wire[2:0] lsc_col_if_if_4_else_else_else_else_if_mux1h_225_nl;
  wire[0:0] lsc_col_if_if_4_else_else_else_else_if_or_3_nl;
  wire[0:0] lsc_col_if_if_4_else_else_else_else_if_mux1h_226_nl;
  wire[0:0] lsc_col_if_if_4_else_else_else_else_if_or_4_nl;
  wire[3:0] lsc_col_if_if_3_else_else_else_else_else_else_else_else_if_mux1h_224_nl;
  wire[2:0] lsc_col_if_if_3_else_else_else_else_else_else_else_else_if_mux1h_225_nl;
  wire[0:0] lsc_col_if_if_3_else_else_else_else_else_else_else_else_if_or_3_nl;
  wire[0:0] lsc_col_if_if_3_else_else_else_else_else_else_else_else_if_mux1h_226_nl;
  wire[0:0] lsc_col_if_if_3_else_else_else_else_else_else_else_else_if_or_4_nl;

  // Interconnect Declarations for Component Instantiations 
  lsc_core_src_rsci lsc_core_src_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .src_rsc_dat(src_rsc_dat),
      .src_rsc_vld(src_rsc_vld),
      .src_rsc_rdy(src_rsc_rdy),
      .core_wen(core_wen),
      .src_rsci_oswt(reg_src_rsci_oswt_cse),
      .src_rsci_wen_comp(src_rsci_wen_comp),
      .src_rsci_idat_mxwt(src_rsci_idat_mxwt)
    );
  lsc_core_dst_rsci lsc_core_dst_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .dst_rsc_dat(dst_rsc_dat),
      .dst_rsc_vld(dst_rsc_vld),
      .dst_rsc_rdy(dst_rsc_rdy),
      .core_wen(core_wen),
      .dst_rsci_oswt(reg_dst_rsci_oswt_cse),
      .dst_rsci_wen_comp(dst_rsci_wen_comp),
      .dst_rsci_idat(dst_rsci_idat)
    );
  lsc_core_staller lsc_core_staller_inst (
      .core_wen(core_wen),
      .src_rsci_wen_comp(src_rsci_wen_comp),
      .dst_rsci_wen_comp(dst_rsci_wen_comp)
    );
  assign block_height_count_static_init_and_cse = core_wen & (~((~ lscRegister_eb)
      | or_dcpl_5));
  assign lsc_col_if_aif_2_lsc_col_if_aelse_2_lsc_col_if_aelse_2_nor_cse = ~((block_height_count_sva
      != (operator_9_false_acc_psp_sva_1[8:0])) | (operator_9_false_acc_psp_sva_1[9]));
  assign nor_110_cse = ~(lsc_col_if_else_2_else_if_unequal_1_tmp | (operator_9_false_2_acc_tmp[9]));
  assign and_103_cse = (lsc_col_x_lpi_1_dfm_2[2]) & operator_13_false_13_nor_1_tmp;
  assign or_386_cse = (topRegister_imgPattern[1]) | lsc_col_if_else_2_else_if_unequal_1_tmp
      | (operator_9_false_2_acc_tmp[9]);
  assign nand_cse = ~(or_386_cse & lsc_row_acc_2_itm_13_1);
  assign or_385_cse = nor_110_cse | mux_tmp_23;
  assign mux_35_nl = MUX_s_1_2_2(mux_tmp_28, mux_tmp_24, lsc_col_x_lpi_1_dfm_2[1]);
  assign mux_36_nl = MUX_s_1_2_2(mux_tmp_23, mux_35_nl, lsc_col_if_if_4_else_if_or_tmp);
  assign or_50_nl = (lsc_col_x_lpi_1_dfm_2[0]) | lsc_row_asn_sft_lpi_1_dfm_st_1;
  assign mux_29_nl = MUX_s_1_2_2(nor_tmp_4, or_tmp_25, or_50_nl);
  assign mux_31_nl = MUX_s_1_2_2(mux_tmp_28, mux_29_nl, operator_13_false_16_nor_1_tmp);
  assign or_46_nl = and_103_cse | (lsc_col_x_lpi_1_dfm_2[0]) | lsc_row_asn_sft_lpi_1_dfm_st_1;
  assign mux_22_nl = MUX_s_1_2_2(nor_tmp_4, or_tmp_25, or_46_nl);
  assign mux_27_nl = MUX_s_1_2_2(mux_tmp_24, mux_22_nl, operator_13_false_18_nor_1_tmp);
  assign mux_28_nl = MUX_s_1_2_2(mux_27_nl, or_tmp_25, operator_13_false_17_nor_1_tmp);
  assign mux_32_nl = MUX_s_1_2_2(mux_31_nl, mux_28_nl, lsc_col_x_lpi_1_dfm_2[1]);
  assign mux_33_nl = MUX_s_1_2_2(mux_32_nl, or_tmp_25, operator_13_false_15_nor_1_tmp);
  assign mux_34_nl = MUX_s_1_2_2(mux_tmp_23, mux_33_nl, lsc_col_if_if_4_else_if_or_tmp);
  assign mux_37_cse = MUX_s_1_2_2(mux_36_nl, mux_34_nl, lsc_col_x_lpi_1_dfm_2[3]);
  assign or_383_cse = nor_110_cse | mux_tmp_64;
  assign or_79_cse = and_103_cse | (lsc_col_x_lpi_1_dfm_2[0]);
  assign mux_74_nl = MUX_s_1_2_2(mux_tmp_64, mux_tmp_63, lsc_col_x_lpi_1_dfm_2[0]);
  assign mux_76_nl = MUX_s_1_2_2(mux_tmp_73, mux_74_nl, operator_13_false_16_nor_1_tmp);
  assign mux_77_nl = MUX_s_1_2_2(mux_76_nl, mux_tmp_63, operator_13_false_15_nor_1_tmp);
  assign mux_78_nl = MUX_s_1_2_2(mux_tmp_73, mux_77_nl, lsc_col_x_lpi_1_dfm_2[3]);
  assign mux_67_nl = MUX_s_1_2_2(mux_tmp_64, mux_tmp_63, or_79_cse);
  assign mux_71_nl = MUX_s_1_2_2(mux_tmp_68, mux_67_nl, operator_13_false_16_nor_1_tmp);
  assign mux_72_nl = MUX_s_1_2_2(mux_71_nl, mux_tmp_63, operator_13_false_17_nor_1_tmp);
  assign mux_73_nl = MUX_s_1_2_2(mux_tmp_68, mux_72_nl, lsc_col_x_lpi_1_dfm_2[3]);
  assign mux_79_cse = MUX_s_1_2_2(mux_78_nl, mux_73_nl, lsc_col_x_lpi_1_dfm_2[1]);
  assign and_92_cse = (lsc_col_x_lpi_1_dfm_2[2:1]==2'b11) & operator_13_false_13_nor_1_tmp;
  assign or_106_cse = and_92_cse | (lsc_col_x_lpi_1_dfm_2[0]);
  assign mux_102_nl = MUX_s_1_2_2(mux_tmp_64, mux_tmp_63, or_106_cse);
  assign mux_108_nl = MUX_s_1_2_2(mux_tmp_105, mux_102_nl, operator_13_false_16_nor_1_tmp);
  assign mux_109_nl = MUX_s_1_2_2(mux_108_nl, mux_tmp_63, operator_13_false_15_nor_1_tmp);
  assign mux_110_cse = MUX_s_1_2_2(mux_tmp_105, mux_109_nl, lsc_col_x_lpi_1_dfm_2[3]);
  assign and_85_cse = operator_13_false_12_nor_1_tmp & (lsc_col_x_lpi_1_dfm_2[0]);
  assign and_86_cse = operator_13_false_14_nor_1_tmp & (lsc_col_x_lpi_1_dfm_2[0]);
  assign or_379_cse = line_is_blue_sva | lsc_col_if_else_2_else_if_unequal_1_tmp
      | (operator_9_false_2_acc_tmp[9]);
  assign nand_33_cse = ~(or_379_cse & lsc_row_acc_2_itm_13_1);
  assign mux_128_nl = MUX_s_1_2_2(nor_tmp_26, lsc_col_if_if_4_else_if_or_tmp, and_85_cse);
  assign mux_126_nl = MUX_s_1_2_2(nor_tmp_26, lsc_col_if_if_4_else_if_or_tmp, and_86_cse);
  assign mux_127_nl = MUX_s_1_2_2(mux_126_nl, lsc_col_if_if_4_else_if_or_tmp, operator_13_false_13_nor_1_tmp);
  assign mux_129_nl = MUX_s_1_2_2(mux_128_nl, mux_127_nl, lsc_col_x_lpi_1_dfm_2[1]);
  assign mux_130_cse = MUX_s_1_2_2(nor_tmp_26, mux_129_nl, lsc_col_x_lpi_1_dfm_2[2]);
  assign or_157_nl = operator_13_false_13_nor_1_tmp | and_86_cse;
  assign mux_148_nl = MUX_s_1_2_2(and_85_cse, or_157_nl, lsc_col_x_lpi_1_dfm_2[1]);
  assign and_19_cse = lsc_col_if_if_4_else_if_or_tmp & (lsc_col_x_lpi_1_dfm_2[2])
      & mux_148_nl;
  assign and_74_cse = operator_13_false_13_nor_1_tmp & (lsc_col_x_lpi_1_dfm_2[1]);
  assign and_22_cse = lsc_col_if_if_4_else_if_or_tmp & (lsc_col_x_lpi_1_dfm_2[2])
      & (and_85_cse | and_74_cse);
  assign and_72_cse = operator_13_false_12_nor_1_tmp & lsc_col_if_if_4_else_if_or_tmp
      & (lsc_col_x_lpi_1_dfm_2[2]) & (lsc_col_x_lpi_1_dfm_2[0]);
  assign or_371_cse = (~ (topRegister_imgPattern[1])) | lsc_col_if_else_2_else_if_unequal_1_tmp
      | (operator_9_false_2_acc_tmp[9]);
  assign nand_26_cse = ~(or_371_cse & lsc_row_acc_2_itm_13_1);
  assign or_364_cse = (~ line_is_blue_sva) | lsc_col_if_else_2_else_if_unequal_1_tmp
      | (operator_9_false_2_acc_tmp[9]);
  assign nand_22_cse = ~(or_364_cse & lsc_row_acc_2_itm_13_1);
  assign nl_operator_33_true_acc_psp_sva_1 = conv_s2s_15_16(lsc_col_if_mul_itm_25_10_1[15:1])
      + conv_u2s_9_16(topRegister_blc) + conv_u2s_1_16(lsc_col_if_mul_itm_25_10_1[0]);
  assign operator_33_true_acc_psp_sva_1 = nl_operator_33_true_acc_psp_sva_1[15:0];
  assign nl_lsc_col_if_acc_2_nl = ({1'b1 , src_rsci_idat_mxwt}) + conv_u2s_12_13({3'b111
      , (~ topRegister_blc)}) + 13'b0000000000001;
  assign lsc_col_if_acc_2_nl = nl_lsc_col_if_acc_2_nl[12:0];
  assign operator_35_true_nand_nl = ~((BilinearInterpolation_mul_4_itm_28_7[7:0]==8'b11111111));
  assign nl_BilinearInterpolation_acc_5_nl = BilinearInterpolation_tmp_t_sva_1 +
      (~ (BilinearInterpolation_mul_4_itm_28_7[21:8])) + conv_u2s_1_14(operator_35_true_nand_nl);
  assign BilinearInterpolation_acc_5_nl = nl_BilinearInterpolation_acc_5_nl[13:0];
  assign nl_lsc_col_if_mul_nl = $signed(lsc_col_if_acc_2_nl) * $signed(BilinearInterpolation_acc_5_nl);
  assign lsc_col_if_mul_nl = nl_lsc_col_if_mul_nl[25:0];
  assign lsc_col_if_mul_itm_25_10_1 = readslicef_26_16_10(lsc_col_if_mul_nl);
  assign operator_39_true_nand_nl = ~((BilinearInterpolation_mul_itm_32_7[11:0]==12'b111111111111));
  assign nl_BilinearInterpolation_tmp_t_sva_1_1 = (~ (BilinearInterpolation_mul_itm_32_7[25:12]))
      + conv_u2s_13_14(gain_lt_lpi_1_dfm_8) + conv_u2s_1_14(operator_39_true_nand_nl);
  assign BilinearInterpolation_tmp_t_sva_1_1 = nl_BilinearInterpolation_tmp_t_sva_1_1[13:0];
  assign nl_BilinearInterpolation_mul_5_nl = $signed(BilinearInterpolation_acc_4_itm_1)
      * $signed(conv_u2s_9_10(BilinearInterpolation_asn_4_itm_1));
  assign BilinearInterpolation_mul_5_nl = nl_BilinearInterpolation_mul_5_nl[23:0];
  assign nl_BilinearInterpolation_mul_4_nl = $signed(BilinearInterpolation_mul_5_nl)
      * $signed(conv_u2s_10_11(lscRegister_blockHeight_1));
  assign BilinearInterpolation_mul_4_nl = nl_BilinearInterpolation_mul_4_nl[28:0];
  assign BilinearInterpolation_mul_4_itm_28_7 = readslicef_29_22_7(BilinearInterpolation_mul_4_nl);
  assign nl_lsc_col_acc_2_nl = ({1'b1 , lsc_col_x_lpi_1_dfm_3}) + conv_u2u_13_14(~
      topRegister_frameWidth) + 14'b00000000000001;
  assign lsc_col_acc_2_nl = nl_lsc_col_acc_2_nl[13:0];
  assign lsc_col_acc_2_itm_13_1 = readslicef_14_1_13(lsc_col_acc_2_nl);
  assign asn_lsc_row_asn_sft_lpi_1_dfm_st_1_nor_nl = ~(exit_lsc_row_lpi_1_dfm | exitL_exit_lsc_col_lpi_1_dfm
      | exitL_exit_lsc_row_sva);
  assign lsc_row_asn_sft_lpi_1_dfm_st_1_mx0 = MUX_s_1_2_2(exit_lsc_row_lpi_1_dfm_1,
      lsc_row_asn_sft_lpi_1_dfm_st_1, asn_lsc_row_asn_sft_lpi_1_dfm_st_1_nor_nl);
  assign lsc_col_if_else_2_if_lor_lpi_1_dfm_mx0w0 = (~((block_height_count_sva !=
      ({(z_out_6[7:0]) , (lscRegister_blockHeight[0])})) | (z_out_6[8]))) | lsc_col_if_aif_2_lsc_col_if_aelse_2_lsc_col_if_aelse_2_nor_cse;
  assign or_12_nl = line_is_blue_sva_dfm_mx0 | or_dcpl_7;
  assign lsc_col_if_else_1_if_lor_lpi_1_dfm_mx0 = MUX_s_1_2_2(lsc_col_if_else_2_if_lor_lpi_1_dfm_mx0w0,
      lsc_col_if_else_1_if_lor_lpi_1_dfm, or_12_nl);
  assign nl_operator_9_false_acc_psp_sva_1 = conv_u2s_9_10(lscRegister_blockHeight)
      + 10'b1111111111;
  assign operator_9_false_acc_psp_sva_1 = nl_operator_9_false_acc_psp_sva_1[9:0];
  assign lsc_col_if_else_1_else_land_lpi_1_dfm_1 = ~(line_is_blue_sva_dfm_mx0 | lsc_col_if_else_2_else_if_unequal_1_tmp
      | (operator_9_false_2_acc_tmp[9]));
  assign line_is_blue_sva_dfm_mx0 = MUX_s_1_2_2(line_is_blue_sva, (topRegister_imgPattern[1]),
      exitL_exit_lsc_row_sva);
  assign nl_operator_9_false_2_acc_tmp = conv_u2s_9_10(lscRegister_blockWidth) +
      10'b1111111111;
  assign operator_9_false_2_acc_tmp = nl_operator_9_false_2_acc_tmp[9:0];
  assign lsc_col_lsc_col_lsc_col_lsc_col_not_nl = ~ exitL_exitL_exit_lsc_col_lpi_1_dfm_1;
  assign lsc_col_x_lpi_1_dfm_3 = MUX_v_13_2_2(13'b0000000000000, lsc_col_x_lpi_1_dfm_2,
      lsc_col_lsc_col_lsc_col_lsc_col_not_nl);
  assign or_21_nl = (~ line_is_blue_sva_dfm_mx0) | or_dcpl_7;
  assign lsc_col_if_else_2_if_lor_lpi_1_dfm_mx0 = MUX_s_1_2_2(lsc_col_if_else_2_if_lor_lpi_1_dfm_mx0w0,
      lsc_col_if_else_2_if_lor_lpi_1_dfm, or_21_nl);
  assign lsc_col_if_if_4_land_lpi_1_dfm_1 = line_is_blue_sva_dfm_mx0 & nor_110_cse;
  assign lsc_col_if_if_3_else_else_else_else_else_else_else_else_land_1_lpi_1_dfm_mx0w0
      = lsc_col_if_if_4_else_if_or_tmp & (lsc_col_x_lpi_1_dfm_3[3:2]==2'b11) & operator_13_false_19_nor_2
      & line_is_blue_sva_dfm_mx0;
  assign lsc_col_if_if_4_else_if_or_tmp = (lsc_row_y_lpi_1_dfm_3!=13'b0000000000000);
  assign lsc_col_if_if_3_else_else_else_else_else_else_else_land_1_lpi_1_dfm_mx0w0
      = lsc_col_if_if_4_else_if_or_tmp & (lsc_col_x_lpi_1_dfm_3[3]) & (lsc_col_x_lpi_1_dfm_3[1])
      & (lsc_col_x_lpi_1_dfm_3[0]) & operator_13_false_18_nor_1_tmp & line_is_blue_sva_dfm_mx0;
  assign lsc_col_if_if_3_else_else_else_else_else_else_land_1_lpi_1_dfm_mx0w0 = lsc_col_if_if_4_else_if_or_tmp
      & (lsc_col_x_lpi_1_dfm_3[3]) & (lsc_col_x_lpi_1_dfm_3[1]) & operator_13_false_17_nor_1_tmp
      & line_is_blue_sva_dfm_mx0;
  assign or_101_cse = lsc_col_if_else_2_else_if_unequal_1_tmp | (operator_9_false_2_acc_tmp[9]);
  assign or_97_nl = (~(and_92_cse | (lsc_col_x_lpi_1_dfm_2[0]))) | (~ lsc_col_if_if_4_else_if_or_tmp)
      | exit_lsc_row_lpi_1_dfm | exitL_exit_lsc_col_lpi_1_dfm;
  assign mux_95_nl = MUX_s_1_2_2(nand_7_cse, or_97_nl, operator_13_false_16_nor_1_tmp);
  assign mux_96_nl = MUX_s_1_2_2(mux_95_nl, or_tmp_72, operator_13_false_15_nor_1_tmp);
  assign mux_97_cse = MUX_s_1_2_2(nand_7_cse, mux_96_nl, lsc_col_x_lpi_1_dfm_2[3]);
  assign mux_98_nl = MUX_s_1_2_2(or_101_cse, mux_97_cse, line_is_blue_sva);
  assign mux_99_nl = MUX_s_1_2_2(mux_98_nl, or_386_cse, exitL_exit_lsc_row_sva);
  assign lsc_col_if_if_3_else_else_else_else_else_else_land_1_lpi_1_dfm_mx1 = MUX_s_1_2_2(lsc_col_if_if_3_else_else_else_else_else_else_land_1_lpi_1_dfm,
      lsc_col_if_if_3_else_else_else_else_else_else_land_1_lpi_1_dfm_mx0w0, mux_99_nl);
  assign lsc_col_if_if_3_else_else_else_else_else_land_1_lpi_1_dfm_mx0w0 = lsc_col_if_if_4_else_if_or_tmp
      & (lsc_col_x_lpi_1_dfm_3[3]) & (lsc_col_x_lpi_1_dfm_3[0]) & operator_13_false_16_nor_1_tmp
      & line_is_blue_sva_dfm_mx0;
  assign and_91_cse = operator_13_false_15_nor_1_tmp & (lsc_col_x_lpi_1_dfm_2[3]);
  assign mux_113_nl = MUX_s_1_2_2(or_tmp_41, or_tmp_38, and_91_cse);
  assign mux_329_nl = MUX_s_1_2_2(or_tmp_41, or_tmp_38, and_91_cse);
  assign mux_116_nl = MUX_s_1_2_2(mux_329_nl, or_tmp_38, and_85_cse);
  assign mux_330_nl = MUX_s_1_2_2(or_tmp_41, or_tmp_38, and_91_cse);
  assign mux_114_nl = MUX_s_1_2_2(mux_330_nl, or_tmp_38, and_86_cse);
  assign mux_115_nl = MUX_s_1_2_2(mux_114_nl, or_tmp_38, operator_13_false_13_nor_1_tmp);
  assign mux_117_nl = MUX_s_1_2_2(mux_116_nl, mux_115_nl, lsc_col_x_lpi_1_dfm_2[1]);
  assign mux_118_cse = MUX_s_1_2_2(mux_113_nl, mux_117_nl, lsc_col_x_lpi_1_dfm_2[2]);
  assign and_17_cse = or_101_cse & or_tmp_41;
  assign mux_119_nl = MUX_s_1_2_2(and_17_cse, mux_118_cse, line_is_blue_sva);
  assign mux_120_nl = MUX_s_1_2_2(mux_119_nl, or_386_cse, exitL_exit_lsc_row_sva);
  assign or_119_nl = (~ mux_120_nl) | or_dcpl_16;
  assign lsc_col_if_if_3_else_else_else_else_else_land_1_lpi_1_dfm_mx0 = MUX_s_1_2_2(lsc_col_if_if_3_else_else_else_else_else_land_1_lpi_1_dfm_mx0w0,
      lsc_col_if_if_3_else_else_else_else_else_land_1_lpi_1_dfm, or_119_nl);
  assign or_124_nl = (~ operator_13_false_12_nor_1_tmp) | (~ (lsc_col_x_lpi_1_dfm_2[0]))
      | (~ lsc_col_if_if_4_else_if_or_tmp) | exit_lsc_row_lpi_1_dfm | exitL_exit_lsc_col_lpi_1_dfm;
  assign or_123_nl = (~ operator_13_false_14_nor_1_tmp) | (~ (lsc_col_x_lpi_1_dfm_2[0]))
      | (~ lsc_col_if_if_4_else_if_or_tmp) | exit_lsc_row_lpi_1_dfm | exitL_exit_lsc_col_lpi_1_dfm;
  assign mux_121_nl = MUX_s_1_2_2(or_123_nl, or_tmp_72, operator_13_false_13_nor_1_tmp);
  assign mux_122_nl = MUX_s_1_2_2(or_124_nl, mux_121_nl, lsc_col_x_lpi_1_dfm_2[1]);
  assign nand_7_cse = ~((lsc_col_x_lpi_1_dfm_2[2]) & (~ mux_122_nl));
  assign mux_123_cse = MUX_s_1_2_2(nand_7_cse, or_tmp_72, and_91_cse);
  assign mux_124_nl = MUX_s_1_2_2(or_101_cse, mux_123_cse, line_is_blue_sva);
  assign mux_125_nl = MUX_s_1_2_2(mux_124_nl, or_386_cse, exitL_exit_lsc_row_sva);
  assign lsc_col_if_if_3_else_else_else_else_else_land_1_lpi_1_dfm_mx1 = MUX_s_1_2_2(lsc_col_if_if_3_else_else_else_else_else_land_1_lpi_1_dfm,
      lsc_col_if_if_3_else_else_else_else_else_land_1_lpi_1_dfm_mx0w0, mux_125_nl);
  assign lsc_col_if_if_3_else_else_else_else_land_1_lpi_1_dfm_mx0w0 = lsc_col_if_if_4_else_if_or_tmp
      & (lsc_col_x_lpi_1_dfm_3[3]) & operator_13_false_15_nor_1_tmp & line_is_blue_sva_dfm_mx0;
  assign or_139_nl = (~(and_86_cse | lsc_row_asn_sft_lpi_1_dfm_st_1)) | exit_lsc_row_lpi_1_dfm
      | exitL_exit_lsc_col_lpi_1_dfm;
  assign mux_134_cse = MUX_s_1_2_2(or_139_nl, or_tmp_9, operator_13_false_13_nor_1_tmp);
  assign or_141_nl = (~(and_85_cse | lsc_row_asn_sft_lpi_1_dfm_st_1)) | exit_lsc_row_lpi_1_dfm
      | exitL_exit_lsc_col_lpi_1_dfm;
  assign mux_135_nl = MUX_s_1_2_2(or_141_nl, mux_134_cse, lsc_col_x_lpi_1_dfm_2[1]);
  assign and_84_nl = lsc_col_if_if_4_else_if_or_tmp & (lsc_col_x_lpi_1_dfm_2[2]);
  assign mux_136_cse = MUX_s_1_2_2(or_tmp_5, mux_135_nl, and_84_nl);
  assign and_18_cse = or_101_cse & or_tmp_5;
  assign mux_137_nl = MUX_s_1_2_2(and_18_cse, mux_136_cse, line_is_blue_sva);
  assign mux_138_nl = MUX_s_1_2_2(mux_137_nl, or_386_cse, exitL_exit_lsc_row_sva);
  assign or_144_nl = (~ mux_138_nl) | or_dcpl_16;
  assign lsc_col_if_if_3_else_else_else_else_land_1_lpi_1_dfm_mx0 = MUX_s_1_2_2(lsc_col_if_if_3_else_else_else_else_land_1_lpi_1_dfm_mx0w0,
      lsc_col_if_if_3_else_else_else_else_land_1_lpi_1_dfm, or_144_nl);
  assign lsc_col_if_if_3_else_else_else_else_land_1_lpi_1_dfm_mx2 = MUX_s_1_2_2(lsc_col_if_if_3_else_else_else_else_land_1_lpi_1_dfm,
      lsc_col_if_if_3_else_else_else_else_land_1_lpi_1_dfm_mx0w0, mux_147_itm);
  assign lsc_col_if_if_3_else_else_else_land_1_lpi_1_dfm_mx0w0 = lsc_col_if_if_4_else_if_or_tmp
      & (lsc_col_x_lpi_1_dfm_3[2:0]==3'b111) & operator_13_false_14_nor_1_tmp & line_is_blue_sva_dfm_mx0;
  assign mux_155_nl = MUX_s_1_2_2(mux_tmp_152, mux_tmp_151, lsc_col_x_lpi_1_dfm_2[2]);
  assign mux_157_nl = MUX_s_1_2_2(mux_tmp_154, mux_155_nl, and_74_cse);
  assign or_165_nl = (~ mux_157_nl) | or_dcpl_16;
  assign lsc_col_if_if_3_else_else_else_land_1_lpi_1_dfm_mx0 = MUX_s_1_2_2(lsc_col_if_if_3_else_else_else_land_1_lpi_1_dfm_mx0w0,
      lsc_col_if_if_3_else_else_else_land_1_lpi_1_dfm, or_165_nl);
  assign lsc_col_if_if_3_else_else_else_land_1_lpi_1_dfm_mx2 = MUX_s_1_2_2(lsc_col_if_if_3_else_else_else_land_1_lpi_1_dfm,
      lsc_col_if_if_3_else_else_else_land_1_lpi_1_dfm_mx0w0, mux_158_itm);
  assign lsc_col_if_if_3_else_else_land_1_lpi_1_dfm_mx0w0 = lsc_col_if_if_4_else_if_or_tmp
      & (lsc_col_x_lpi_1_dfm_3[2:1]==2'b11) & operator_13_false_13_nor_1_tmp & line_is_blue_sva_dfm_mx0;
  assign or_176_nl = (~ mux_tmp_154) | or_dcpl_16;
  assign lsc_col_if_if_3_else_else_land_1_lpi_1_dfm_mx0 = MUX_s_1_2_2(lsc_col_if_if_3_else_else_land_1_lpi_1_dfm_mx0w0,
      lsc_col_if_if_3_else_else_land_1_lpi_1_dfm, or_176_nl);
  assign lsc_col_if_if_3_else_else_land_1_lpi_1_dfm_mx2 = MUX_s_1_2_2(lsc_col_if_if_3_else_else_land_1_lpi_1_dfm,
      lsc_col_if_if_3_else_else_land_1_lpi_1_dfm_mx0w0, mux_tmp_142);
  assign lsc_col_if_if_3_else_land_1_lpi_1_dfm_mx0w0 = lsc_col_if_if_4_else_if_or_tmp
      & (lsc_col_x_lpi_1_dfm_3[2]) & (lsc_col_x_lpi_1_dfm_3[0]) & operator_13_false_12_nor_1_tmp
      & line_is_blue_sva_dfm_mx0;
  assign or_186_nl = (~ mux_tmp_152) | or_dcpl_16;
  assign lsc_col_if_if_3_else_land_1_lpi_1_dfm_mx0 = MUX_s_1_2_2(lsc_col_if_if_3_else_land_1_lpi_1_dfm_mx0w0,
      lsc_col_if_if_3_else_land_1_lpi_1_dfm, or_186_nl);
  assign lsc_col_if_if_3_else_land_1_lpi_1_dfm_mx2 = MUX_s_1_2_2(lsc_col_if_if_3_else_land_1_lpi_1_dfm_mx0w0,
      lsc_col_if_if_3_else_land_1_lpi_1_dfm, and_dcpl_14);
  assign lsc_row_not_193_nl = ~ exitL_exit_lsc_row_sva;
  assign lsc_row_y_lpi_1_dfm_3 = MUX_v_13_2_2(13'b0000000000000, lsc_row_y_lpi_1_dfm_2,
      lsc_row_not_193_nl);
  assign lsc_col_if_if_4_else_else_else_else_else_else_else_else_land_1_lpi_1_dfm_mx0w0
      = lsc_col_if_if_4_else_if_or_tmp & (lsc_col_x_lpi_1_dfm_3[3:2]==2'b11) & operator_13_false_19_nor_2
      & (~ line_is_blue_sva_dfm_mx0);
  assign lsc_col_if_if_4_else_else_else_else_else_else_else_land_1_lpi_1_dfm_mx0w0
      = lsc_col_if_if_4_else_if_or_tmp & (lsc_col_x_lpi_1_dfm_3[3]) & (lsc_col_x_lpi_1_dfm_3[1])
      & (lsc_col_x_lpi_1_dfm_3[0]) & operator_13_false_18_nor_1_tmp & (~ line_is_blue_sva_dfm_mx0);
  assign lsc_col_if_if_4_else_else_else_else_else_else_land_1_lpi_1_dfm_mx0w0 = lsc_col_if_if_4_else_if_or_tmp
      & (lsc_col_x_lpi_1_dfm_3[3]) & (lsc_col_x_lpi_1_dfm_3[1]) & operator_13_false_17_nor_1_tmp
      & (~ line_is_blue_sva_dfm_mx0);
  assign mux_255_nl = MUX_s_1_2_2(mux_97_cse, or_101_cse, line_is_blue_sva);
  assign mux_256_nl = MUX_s_1_2_2(mux_255_nl, or_371_cse, exitL_exit_lsc_row_sva);
  assign lsc_col_if_if_4_else_else_else_else_else_else_land_1_lpi_1_dfm_mx1 = MUX_s_1_2_2(lsc_col_if_if_4_else_else_else_else_else_else_land_1_lpi_1_dfm,
      lsc_col_if_if_4_else_else_else_else_else_else_land_1_lpi_1_dfm_mx0w0, mux_256_nl);
  assign lsc_col_if_if_4_else_else_else_else_else_land_1_lpi_1_dfm_mx0w0 = lsc_col_if_if_4_else_if_or_tmp
      & (lsc_col_x_lpi_1_dfm_3[3]) & (lsc_col_x_lpi_1_dfm_3[0]) & operator_13_false_16_nor_1_tmp
      & (~ line_is_blue_sva_dfm_mx0);
  assign mux_276_nl = MUX_s_1_2_2(mux_118_cse, and_17_cse, line_is_blue_sva);
  assign mux_277_nl = MUX_s_1_2_2(mux_276_nl, or_371_cse, exitL_exit_lsc_row_sva);
  assign or_285_nl = (~ mux_277_nl) | or_dcpl_16;
  assign lsc_col_if_if_4_else_else_else_else_else_land_1_lpi_1_dfm_mx0 = MUX_s_1_2_2(lsc_col_if_if_4_else_else_else_else_else_land_1_lpi_1_dfm_mx0w0,
      lsc_col_if_if_4_else_else_else_else_else_land_1_lpi_1_dfm, or_285_nl);
  assign mux_281_nl = MUX_s_1_2_2(mux_123_cse, or_101_cse, line_is_blue_sva);
  assign mux_282_nl = MUX_s_1_2_2(mux_281_nl, or_371_cse, exitL_exit_lsc_row_sva);
  assign lsc_col_if_if_4_else_else_else_else_else_land_1_lpi_1_dfm_mx1 = MUX_s_1_2_2(lsc_col_if_if_4_else_else_else_else_else_land_1_lpi_1_dfm,
      lsc_col_if_if_4_else_else_else_else_else_land_1_lpi_1_dfm_mx0w0, mux_282_nl);
  assign lsc_col_if_if_4_else_else_else_else_land_1_lpi_1_dfm_mx0w0 = lsc_col_if_if_4_else_if_or_tmp
      & (lsc_col_x_lpi_1_dfm_3[3]) & operator_13_false_15_nor_1_tmp & (~ line_is_blue_sva_dfm_mx0);
  assign mux_294_nl = MUX_s_1_2_2(mux_136_cse, and_18_cse, line_is_blue_sva);
  assign mux_295_nl = MUX_s_1_2_2(mux_294_nl, or_371_cse, exitL_exit_lsc_row_sva);
  assign or_310_nl = (~ mux_295_nl) | or_dcpl_16;
  assign lsc_col_if_if_4_else_else_else_else_land_1_lpi_1_dfm_mx0 = MUX_s_1_2_2(lsc_col_if_if_4_else_else_else_else_land_1_lpi_1_dfm_mx0w0,
      lsc_col_if_if_4_else_else_else_else_land_1_lpi_1_dfm, or_310_nl);
  assign lsc_col_if_if_4_else_else_else_else_land_1_lpi_1_dfm_mx2 = MUX_s_1_2_2(lsc_col_if_if_4_else_else_else_else_land_1_lpi_1_dfm,
      lsc_col_if_if_4_else_else_else_else_land_1_lpi_1_dfm_mx0w0, mux_304_itm);
  assign lsc_col_if_if_4_else_else_else_land_1_lpi_1_dfm_mx0w0 = lsc_col_if_if_4_else_if_or_tmp
      & (lsc_col_x_lpi_1_dfm_3[2:0]==3'b111) & operator_13_false_14_nor_1_tmp & (~
      line_is_blue_sva_dfm_mx0);
  assign mux_312_nl = MUX_s_1_2_2(mux_tmp_309, mux_tmp_308, lsc_col_x_lpi_1_dfm_2[2]);
  assign mux_314_nl = MUX_s_1_2_2(mux_tmp_311, mux_312_nl, and_74_cse);
  assign or_327_nl = (~ mux_314_nl) | or_dcpl_16;
  assign lsc_col_if_if_4_else_else_else_land_1_lpi_1_dfm_mx0 = MUX_s_1_2_2(lsc_col_if_if_4_else_else_else_land_1_lpi_1_dfm_mx0w0,
      lsc_col_if_if_4_else_else_else_land_1_lpi_1_dfm, or_327_nl);
  assign lsc_col_if_if_4_else_else_else_land_1_lpi_1_dfm_mx2 = MUX_s_1_2_2(lsc_col_if_if_4_else_else_else_land_1_lpi_1_dfm,
      lsc_col_if_if_4_else_else_else_land_1_lpi_1_dfm_mx0w0, mux_315_itm);
  assign lsc_col_if_if_4_else_else_land_1_lpi_1_dfm_mx0w0 = lsc_col_if_if_4_else_if_or_tmp
      & (lsc_col_x_lpi_1_dfm_3[2:1]==2'b11) & operator_13_false_13_nor_1_tmp & (~
      line_is_blue_sva_dfm_mx0);
  assign or_338_nl = (~ mux_tmp_311) | or_dcpl_16;
  assign lsc_col_if_if_4_else_else_land_1_lpi_1_dfm_mx0 = MUX_s_1_2_2(lsc_col_if_if_4_else_else_land_1_lpi_1_dfm_mx0w0,
      lsc_col_if_if_4_else_else_land_1_lpi_1_dfm, or_338_nl);
  assign lsc_col_if_if_4_else_else_land_1_lpi_1_dfm_mx2 = MUX_s_1_2_2(lsc_col_if_if_4_else_else_land_1_lpi_1_dfm,
      lsc_col_if_if_4_else_else_land_1_lpi_1_dfm_mx0w0, mux_tmp_299);
  assign lsc_col_if_if_4_else_land_1_lpi_1_dfm_mx0w0 = lsc_col_if_if_4_else_if_or_tmp
      & (lsc_col_x_lpi_1_dfm_3[2]) & (lsc_col_x_lpi_1_dfm_3[0]) & operator_13_false_12_nor_1_tmp
      & (~ line_is_blue_sva_dfm_mx0);
  assign or_348_nl = (~ mux_tmp_309) | or_dcpl_16;
  assign lsc_col_if_if_4_else_land_1_lpi_1_dfm_mx0 = MUX_s_1_2_2(lsc_col_if_if_4_else_land_1_lpi_1_dfm_mx0w0,
      lsc_col_if_if_4_else_land_1_lpi_1_dfm, or_348_nl);
  assign lsc_col_if_if_4_else_land_1_lpi_1_dfm_mx2 = MUX_s_1_2_2(lsc_col_if_if_4_else_land_1_lpi_1_dfm_mx0w0,
      lsc_col_if_if_4_else_land_1_lpi_1_dfm, lsc_col_if_if_4_land_lpi_1_dfm_1);
  assign operator_2_false_2_operator_2_false_2_and_svs_1 = lsc_col_if_ac_int_cctor_1_sva_1
      & (~ lsc_col_if_ac_int_cctor_0_sva_1);
  assign lsc_col_if_ac_int_cctor_1_sva_1 = (lsc_row_y_lpi_1_dfm_3[0]) ^ (topRegister_imgPattern[1]);
  assign lsc_col_if_ac_int_cctor_0_sva_1 = (lsc_col_x_lpi_1_dfm_3[0]) ^ (topRegister_imgPattern[0]);
  assign operator_2_false_1_operator_2_false_1_and_svs_1 = lsc_col_if_ac_int_cctor_0_sva_1
      & (~ lsc_col_if_ac_int_cctor_1_sva_1);
  assign lsc_col_if_else_1_land_lpi_1_dfm_1 = ~(line_is_blue_sva_dfm_mx0 | lsc_col_if_else_2_if_unequal_1_tmp
      | (operator_13_false_acc_tmp[13]));
  assign nl_operator_13_false_acc_tmp = conv_u2s_13_14(topRegister_frameWidth) +
      14'b11111111111111;
  assign operator_13_false_acc_tmp = nl_operator_13_false_acc_tmp[13:0];
  assign lsc_col_if_else_2_land_lpi_1_dfm_1 = line_is_blue_sva_dfm_mx0 & lsc_col_if_lsc_col_if_if_6_lsc_col_if_if_6_nor_cse_sva_1;
  assign lsc_col_if_if_3_land_lpi_1_dfm_1 = ~(line_is_blue_sva_dfm_mx0 | (~ nor_110_cse));
  assign lsc_col_if_lsc_col_if_if_6_lsc_col_if_if_6_nor_cse_sva_1 = ~(lsc_col_if_else_2_if_unequal_1_tmp
      | (operator_13_false_acc_tmp[13]));
  assign nl_operator_9_false_acc_nl = ({1'b1 , (~ lscRegister_blockWidth)}) + 10'b0000001101;
  assign operator_9_false_acc_nl = nl_operator_9_false_acc_nl[9:0];
  assign operator_9_false_acc_itm_9_1 = readslicef_10_1_9(operator_9_false_acc_nl);
  assign lsc_col_if_if_1_lsc_col_if_if_1_nor_tmp = ~((lsc_row_y_lpi_1_dfm_3!=13'b0000000000000)
      | (lsc_col_x_lpi_1_dfm_3!=13'b0000000000000));
  assign operator_2_false_operator_2_false_nor_svs_1 = ~(lsc_col_if_ac_int_cctor_1_sva_1
      | lsc_col_if_ac_int_cctor_0_sva_1);
  assign or_355_nl = or_tmp_9 | exitL_exit_lsc_row_sva;
  assign lsc_row_asn_sft_lpi_1_dfm_mx0 = MUX_s_1_2_2(lsc_row_asn_sft_lpi_1_dfm_st_1,
      exit_lsc_row_lpi_1_dfm_1, or_355_nl);
  assign exit_lsc_row_lpi_1_dfm_1 = (~ lsc_row_acc_2_itm_13_1) & exitL_exitL_exit_lsc_col_lpi_1_dfm_1;
  assign exitL_exitL_exit_lsc_col_lpi_1_dfm_1 = exitL_exit_lsc_col_lpi_1_dfm | exit_lsc_row_lpi_1_dfm
      | exitL_exit_lsc_row_sva;
  assign gain_3_rd_lpi_1_dfm_mx0 = MUX_v_13_2_2(gain_3_rd_lpi_1_dfm_13, (lscRegister_bGain[246:234]),
      exitL_exit_lsc_row_sva);
  assign gain_3_ld_lpi_1_dfm_mx0 = MUX_v_13_2_2(gain_3_ld_lpi_1_dfm_12, (lscRegister_bGain[233:221]),
      exitL_exit_lsc_row_sva);
  assign gain_3_rt_lpi_1_dfm_mx0 = MUX_v_13_2_2(gain_3_rt_lpi_1_dfm_11, (lscRegister_bGain[25:13]),
      exitL_exit_lsc_row_sva);
  assign gain_3_lt_lpi_1_dfm_mx0 = MUX_v_13_2_2(gain_3_lt_lpi_1_dfm_10, (lscRegister_bGain[12:0]),
      exitL_exit_lsc_row_sva);
  assign gain_2_rd_lpi_1_dfm_mx0 = MUX_v_13_2_2(gain_2_rd_lpi_1_dfm_9, (lscRegister_GbGain[246:234]),
      exitL_exit_lsc_row_sva);
  assign gain_2_ld_lpi_1_dfm_mx0 = MUX_v_13_2_2(gain_2_ld_lpi_1_dfm_8, (lscRegister_GbGain[233:221]),
      exitL_exit_lsc_row_sva);
  assign gain_2_rt_lpi_1_dfm_mx0 = MUX_v_13_2_2(gain_2_rt_lpi_1_dfm_7, (lscRegister_GbGain[25:13]),
      exitL_exit_lsc_row_sva);
  assign gain_2_lt_lpi_1_dfm_mx0 = MUX_v_13_2_2(gain_2_lt_lpi_1_dfm_6, (lscRegister_GbGain[12:0]),
      exitL_exit_lsc_row_sva);
  assign gain_1_rd_lpi_1_dfm_mx0 = MUX_v_13_2_2(gain_1_rd_lpi_1_dfm_13, (lscRegister_GrGain[246:234]),
      exitL_exit_lsc_row_sva);
  assign gain_1_ld_lpi_1_dfm_mx0 = MUX_v_13_2_2(gain_1_ld_lpi_1_dfm_12, (lscRegister_GrGain[233:221]),
      exitL_exit_lsc_row_sva);
  assign gain_1_rt_lpi_1_dfm_mx0 = MUX_v_13_2_2(gain_1_rt_lpi_1_dfm_11, (lscRegister_GrGain[25:13]),
      exitL_exit_lsc_row_sva);
  assign gain_1_lt_lpi_1_dfm_mx0 = MUX_v_13_2_2(gain_1_lt_lpi_1_dfm_10, (lscRegister_GrGain[12:0]),
      exitL_exit_lsc_row_sva);
  assign lsc_col_if_lsc_col_if_mux1h_3_nl = MUX1HOT_v_13_4_2(gain_3_rd_lpi_1_dfm_mx0,
      gain_2_rd_lpi_1_dfm_mx0, gain_1_rd_lpi_1_dfm_mx0, gain_0_rd_lpi_1_dfm_mx0,
      {lsc_col_if_asn_94 , operator_2_false_2_operator_2_false_2_and_svs_1 , operator_2_false_1_operator_2_false_1_and_svs_1
      , operator_2_false_operator_2_false_nor_svs_1});
  assign nl_BilinearInterpolation_acc_2_nl = ({1'b1 , (~ lsc_col_if_lsc_col_if_mux1h_3_nl)})
      + conv_u2s_13_14(gain_ld_lpi_1_dfm_8) + 14'b00000000000001;
  assign BilinearInterpolation_acc_2_nl = nl_BilinearInterpolation_acc_2_nl[13:0];
  assign nl_BilinearInterpolation_mul_3_nl = $signed(BilinearInterpolation_acc_2_nl)
      * $signed(conv_u2s_9_10(block_width_count_sva));
  assign BilinearInterpolation_mul_3_nl = nl_BilinearInterpolation_mul_3_nl[22:0];
  assign nl_BilinearInterpolation_mul_2_nl = $signed(BilinearInterpolation_mul_3_nl)
      * $signed(conv_u2s_14_15(lscRegister_blockWidth_1));
  assign BilinearInterpolation_mul_2_nl = nl_BilinearInterpolation_mul_2_nl[32:0];
  assign BilinearInterpolation_mul_2_itm_32_7 = readslicef_33_26_7(BilinearInterpolation_mul_2_nl);
  assign gain_ld_lpi_1_dfm_8 = MUX1HOT_v_13_4_2(gain_3_ld_lpi_1_dfm_mx0, gain_2_ld_lpi_1_dfm_mx0,
      gain_1_ld_lpi_1_dfm_mx0, gain_0_ld_lpi_1_dfm_mx0, {lsc_col_if_asn_94 , operator_2_false_2_operator_2_false_2_and_svs_1
      , operator_2_false_1_operator_2_false_1_and_svs_1 , operator_2_false_operator_2_false_nor_svs_1});
  assign lsc_col_if_lsc_col_if_mux1h_1_nl = MUX1HOT_v_13_4_2(gain_3_rt_lpi_1_dfm_mx0,
      gain_2_rt_lpi_1_dfm_mx0, gain_1_rt_lpi_1_dfm_mx0, gain_0_rt_lpi_1_dfm_mx0,
      {lsc_col_if_asn_94 , operator_2_false_2_operator_2_false_2_and_svs_1 , operator_2_false_1_operator_2_false_1_and_svs_1
      , operator_2_false_operator_2_false_nor_svs_1});
  assign nl_BilinearInterpolation_acc_nl = ({1'b1 , (~ lsc_col_if_lsc_col_if_mux1h_1_nl)})
      + conv_u2s_13_14(gain_lt_lpi_1_dfm_8) + 14'b00000000000001;
  assign BilinearInterpolation_acc_nl = nl_BilinearInterpolation_acc_nl[13:0];
  assign nl_BilinearInterpolation_mul_1_nl = $signed(BilinearInterpolation_acc_nl)
      * $signed(conv_u2s_9_10(block_width_count_sva));
  assign BilinearInterpolation_mul_1_nl = nl_BilinearInterpolation_mul_1_nl[22:0];
  assign nl_BilinearInterpolation_mul_nl = $signed(BilinearInterpolation_mul_1_nl)
      * $signed(conv_u2s_14_15(lscRegister_blockWidth_1));
  assign BilinearInterpolation_mul_nl = nl_BilinearInterpolation_mul_nl[32:0];
  assign BilinearInterpolation_mul_itm_32_7 = readslicef_33_26_7(BilinearInterpolation_mul_nl);
  assign gain_lt_lpi_1_dfm_8 = MUX1HOT_v_13_4_2(gain_3_lt_lpi_1_dfm_mx0, gain_2_lt_lpi_1_dfm_mx0,
      gain_1_lt_lpi_1_dfm_mx0, gain_0_lt_lpi_1_dfm_mx0, {lsc_col_if_asn_94 , operator_2_false_2_operator_2_false_2_and_svs_1
      , operator_2_false_1_operator_2_false_1_and_svs_1 , operator_2_false_operator_2_false_nor_svs_1});
  assign gain_0_rd_lpi_1_dfm_mx0 = MUX_v_13_2_2(gain_0_rd_lpi_1_dfm_9, (lscRegister_rGain[246:234]),
      exitL_exit_lsc_row_sva);
  assign gain_0_ld_lpi_1_dfm_mx0 = MUX_v_13_2_2(gain_0_ld_lpi_1_dfm_8, (lscRegister_rGain[233:221]),
      exitL_exit_lsc_row_sva);
  assign gain_0_rt_lpi_1_dfm_mx0 = MUX_v_13_2_2(gain_0_rt_lpi_1_dfm_7, (lscRegister_rGain[25:13]),
      exitL_exit_lsc_row_sva);
  assign gain_0_lt_lpi_1_dfm_mx0 = MUX_v_13_2_2(gain_0_lt_lpi_1_dfm_6, (lscRegister_rGain[12:0]),
      exitL_exit_lsc_row_sva);
  assign gain_Grb_d_nxt_lpi_1_dfm_5 = MUX1HOT_v_13_3_2(gain_Grb_d_nxt_lpi_1_dfm_4,
      (lscRegister_GrGain[259:247]), (lscRegister_bGain[259:247]), {(~ exitL_exit_lsc_row_sva)
      , lsc_row_asn_182 , lsc_row_asn_184});
  assign gain_rGb_d_nxt_lpi_1_dfm_5 = MUX1HOT_v_13_3_2(gain_rGb_d_nxt_lpi_1_dfm_4,
      (lscRegister_rGain[259:247]), (lscRegister_GbGain[259:247]), {(~ exitL_exit_lsc_row_sva)
      , lsc_row_asn_182 , lsc_row_asn_184});
  assign gain_Grb_t_nxt_lpi_1_dfm_5 = MUX1HOT_v_13_3_2(gain_Grb_t_nxt_lpi_1_dfm_4,
      (lscRegister_GrGain[38:26]), (lscRegister_bGain[38:26]), {(~ exitL_exit_lsc_row_sva)
      , lsc_row_asn_182 , lsc_row_asn_184});
  assign gain_rGb_t_nxt_lpi_1_dfm_5 = MUX1HOT_v_13_3_2(gain_rGb_t_nxt_lpi_1_dfm_4,
      (lscRegister_rGain[38:26]), (lscRegister_GbGain[38:26]), {(~ exitL_exit_lsc_row_sva)
      , lsc_row_asn_182 , lsc_row_asn_184});
  assign lsc_col_if_if_4_and_15_m1c_1 = lsc_col_if_if_4_else_else_lsc_col_if_if_4_else_else_nor_1_tmp_1
      & lsc_col_if_if_4_lsc_col_if_if_4_nor_1_m1c_1;
  assign lsc_col_if_if_4_else_else_lsc_col_if_if_4_else_else_nor_1_tmp_1 = ~(lsc_col_if_if_4_else_else_else_land_1_lpi_1_dfm_mx2
      | lsc_col_if_if_4_else_else_land_1_lpi_1_dfm_mx2);
  assign lsc_col_if_if_4_lsc_col_if_if_4_nor_1_m1c_1 = ~(lsc_col_if_if_4_else_land_1_lpi_1_dfm_mx2
      | lsc_col_if_if_4_land_lpi_1_dfm_1);
  assign mux_218_nl = MUX_s_1_2_2(or_tmp_51, nand_tmp_1, lsc_col_x_lpi_1_dfm_2[1]);
  assign and_110_nl = lsc_col_if_if_4_else_if_or_tmp & (~ mux_218_nl);
  assign or_238_nl = (~ (lsc_col_x_lpi_1_dfm_2[0])) | exit_lsc_row_lpi_1_dfm | exitL_exit_lsc_col_lpi_1_dfm;
  assign mux_215_nl = MUX_s_1_2_2(or_tmp_51, or_238_nl, operator_13_false_16_nor_1_tmp);
  assign or_235_nl = (~(and_103_cse | (lsc_col_x_lpi_1_dfm_2[0]))) | exit_lsc_row_lpi_1_dfm
      | exitL_exit_lsc_col_lpi_1_dfm;
  assign mux_213_nl = MUX_s_1_2_2(nand_tmp_1, or_235_nl, operator_13_false_16_nor_1_tmp);
  assign mux_214_nl = MUX_s_1_2_2(mux_213_nl, or_tmp_9, operator_13_false_17_nor_1_tmp);
  assign mux_216_nl = MUX_s_1_2_2(mux_215_nl, mux_214_nl, lsc_col_x_lpi_1_dfm_2[1]);
  assign mux_217_nl = MUX_s_1_2_2(mux_216_nl, or_tmp_9, operator_13_false_15_nor_1_tmp);
  assign and_111_nl = lsc_col_if_if_4_else_if_or_tmp & (~ mux_217_nl);
  assign mux_219_cse = MUX_s_1_2_2(and_110_nl, and_111_nl, lsc_col_x_lpi_1_dfm_2[3]);
  assign mux_220_nl = MUX_s_1_2_2(mux_219_cse, nor_110_cse, line_is_blue_sva);
  assign nor_121_nl = ~((~ (topRegister_imgPattern[1])) | lsc_col_if_else_2_else_if_unequal_1_tmp
      | (operator_9_false_2_acc_tmp[9]));
  assign mux_221_nl = MUX_s_1_2_2(mux_220_nl, nor_121_nl, exitL_exit_lsc_row_sva);
  assign lsc_col_if_if_4_else_else_else_else_else_else_else_aelse_1_mux_1_nl = MUX_s_1_2_2(lsc_col_if_if_4_else_else_else_else_else_else_else_land_1_lpi_1_dfm_mx0w0,
      lsc_col_if_if_4_else_else_else_else_else_else_else_land_1_lpi_1_dfm, mux_221_nl);
  assign lsc_col_if_if_4_else_else_else_else_and_2_tmp_1 = lsc_col_if_if_4_else_else_else_else_else_else_else_aelse_1_mux_1_nl
      & (~ lsc_col_if_if_4_else_else_else_else_else_else_land_1_lpi_1_dfm_mx1) &
      (~(lsc_col_if_if_4_else_else_else_else_else_land_1_lpi_1_dfm_mx1 | lsc_col_if_if_4_else_else_else_else_land_1_lpi_1_dfm_mx2));
  assign lsc_col_if_if_4_and_13_m1c_1 = lsc_col_if_if_4_else_lsc_col_if_if_4_else_nor_1_tmp_1
      & (~ lsc_col_if_if_4_land_lpi_1_dfm_1);
  assign lsc_col_if_if_4_else_lsc_col_if_if_4_else_nor_1_tmp_1 = ~(lsc_col_if_if_4_else_else_land_1_lpi_1_dfm_mx2
      | lsc_col_if_if_4_else_land_1_lpi_1_dfm_mx2);
  assign lsc_col_if_if_4_else_else_else_and_3_tmp_1 = lsc_col_if_if_4_else_else_else_else_else_else_land_1_lpi_1_dfm_mx1
      & (~ lsc_col_if_if_4_else_else_else_else_else_land_1_lpi_1_dfm_mx1) & (~(lsc_col_if_if_4_else_else_else_else_land_1_lpi_1_dfm_mx2
      | lsc_col_if_if_4_else_else_else_land_1_lpi_1_dfm_mx2));
  assign lsc_col_if_if_4_else_else_and_tmp_1 = lsc_col_if_if_4_else_else_else_land_1_lpi_1_dfm_mx2
      & (~ lsc_col_if_if_4_else_else_land_1_lpi_1_dfm_mx2);
  assign lsc_col_if_if_4_else_and_tmp_1 = lsc_col_if_if_4_else_else_land_1_lpi_1_dfm_mx2
      & (~ lsc_col_if_if_4_else_land_1_lpi_1_dfm_mx2);
  assign lsc_col_if_if_3_and_15_m1c_1 = lsc_col_if_if_3_else_else_lsc_col_if_if_3_else_else_nor_1_tmp_1
      & lsc_col_if_if_3_lsc_col_if_if_3_nor_1_m1c_1;
  assign lsc_col_if_if_3_else_else_lsc_col_if_if_3_else_else_nor_1_tmp_1 = ~(lsc_col_if_if_3_else_else_else_land_1_lpi_1_dfm_mx2
      | lsc_col_if_if_3_else_else_land_1_lpi_1_dfm_mx2);
  assign lsc_col_if_if_3_lsc_col_if_if_3_nor_1_m1c_1 = ~(lsc_col_if_if_3_else_land_1_lpi_1_dfm_mx2
      | lsc_col_if_if_3_land_lpi_1_dfm_1);
  assign mux_63_nl = MUX_s_1_2_2(nor_110_cse, mux_219_cse, line_is_blue_sva);
  assign nor_118_nl = ~((topRegister_imgPattern[1]) | lsc_col_if_else_2_else_if_unequal_1_tmp
      | (operator_9_false_2_acc_tmp[9]));
  assign mux_64_nl = MUX_s_1_2_2(mux_63_nl, nor_118_nl, exitL_exit_lsc_row_sva);
  assign lsc_col_if_if_3_else_else_else_else_else_else_else_aelse_1_mux_1_nl = MUX_s_1_2_2(lsc_col_if_if_3_else_else_else_else_else_else_else_land_1_lpi_1_dfm_mx0w0,
      lsc_col_if_if_3_else_else_else_else_else_else_else_land_1_lpi_1_dfm, mux_64_nl);
  assign lsc_col_if_if_3_else_else_else_else_and_2_tmp_1 = lsc_col_if_if_3_else_else_else_else_else_else_else_aelse_1_mux_1_nl
      & (~ lsc_col_if_if_3_else_else_else_else_else_else_land_1_lpi_1_dfm_mx1) &
      (~(lsc_col_if_if_3_else_else_else_else_else_land_1_lpi_1_dfm_mx1 | lsc_col_if_if_3_else_else_else_else_land_1_lpi_1_dfm_mx2));
  assign lsc_col_if_if_3_and_13_m1c_1 = lsc_col_if_if_3_else_lsc_col_if_if_3_else_nor_1_tmp_1
      & (~ lsc_col_if_if_3_land_lpi_1_dfm_1);
  assign lsc_col_if_if_3_else_lsc_col_if_if_3_else_nor_1_tmp_1 = ~(lsc_col_if_if_3_else_else_land_1_lpi_1_dfm_mx2
      | lsc_col_if_if_3_else_land_1_lpi_1_dfm_mx2);
  assign lsc_col_if_if_3_else_else_else_and_3_tmp_1 = lsc_col_if_if_3_else_else_else_else_else_else_land_1_lpi_1_dfm_mx1
      & (~ lsc_col_if_if_3_else_else_else_else_else_land_1_lpi_1_dfm_mx1) & (~(lsc_col_if_if_3_else_else_else_else_land_1_lpi_1_dfm_mx2
      | lsc_col_if_if_3_else_else_else_land_1_lpi_1_dfm_mx2));
  assign lsc_col_if_if_3_else_else_and_tmp_1 = lsc_col_if_if_3_else_else_else_land_1_lpi_1_dfm_mx2
      & (~ lsc_col_if_if_3_else_else_land_1_lpi_1_dfm_mx2);
  assign lsc_col_if_if_3_else_and_tmp_1 = lsc_col_if_if_3_else_else_land_1_lpi_1_dfm_mx2
      & (~ lsc_col_if_if_3_else_land_1_lpi_1_dfm_mx2);
  assign lsc_col_and_52_m1c_1 = (~ lsc_col_if_if_4_land_lpi_1_dfm_1) & lsc_col_and_tmp_1;
  assign lsc_col_and_tmp_1 = operator_9_false_acc_itm_9_1 & lsc_col_lsc_col_nor_5_cse_1;
  assign or_315_nl = (~ mux_304_itm) | or_dcpl_16;
  assign lsc_col_if_if_4_else_else_else_else_aelse_1_mux_1_nl = MUX_s_1_2_2(lsc_col_if_if_4_else_else_else_else_land_1_lpi_1_dfm_mx0w0,
      lsc_col_if_if_4_else_else_else_else_land_1_lpi_1_dfm, or_315_nl);
  assign or_328_nl = (~ mux_315_itm) | or_dcpl_16;
  assign lsc_col_if_if_4_else_else_else_aelse_1_mux_1_nl = MUX_s_1_2_2(lsc_col_if_if_4_else_else_else_land_1_lpi_1_dfm_mx0w0,
      lsc_col_if_if_4_else_else_else_land_1_lpi_1_dfm, or_328_nl);
  assign or_339_nl = (~ mux_tmp_299) | or_dcpl_16;
  assign lsc_col_if_if_4_else_else_aelse_1_mux_1_nl = MUX_s_1_2_2(lsc_col_if_if_4_else_else_land_1_lpi_1_dfm_mx0w0,
      lsc_col_if_if_4_else_else_land_1_lpi_1_dfm, or_339_nl);
  assign or_349_nl = lsc_col_if_if_4_land_lpi_1_dfm_1 | or_dcpl_16;
  assign lsc_col_if_if_4_else_aelse_1_mux_1_nl = MUX_s_1_2_2(lsc_col_if_if_4_else_land_1_lpi_1_dfm_mx0w0,
      lsc_col_if_if_4_else_land_1_lpi_1_dfm, or_349_nl);
  assign lsc_col_if_if_4_else_and_4_tmp_1 = lsc_col_if_if_4_else_else_else_else_aelse_1_mux_1_nl
      & (~ lsc_col_if_if_4_else_else_else_aelse_1_mux_1_nl) & (~(lsc_col_if_if_4_else_else_aelse_1_mux_1_nl
      | lsc_col_if_if_4_else_aelse_1_mux_1_nl));
  assign lsc_col_and_45_m1c_1 = (~ lsc_col_if_if_3_land_lpi_1_dfm_1) & lsc_col_and_tmp_1;
  assign or_150_nl = (~ mux_147_itm) | or_dcpl_16;
  assign lsc_col_if_if_3_else_else_else_else_aelse_1_mux_1_nl = MUX_s_1_2_2(lsc_col_if_if_3_else_else_else_else_land_1_lpi_1_dfm_mx0w0,
      lsc_col_if_if_3_else_else_else_else_land_1_lpi_1_dfm, or_150_nl);
  assign or_166_nl = (~ mux_158_itm) | or_dcpl_16;
  assign lsc_col_if_if_3_else_else_else_aelse_1_mux_1_nl = MUX_s_1_2_2(lsc_col_if_if_3_else_else_else_land_1_lpi_1_dfm_mx0w0,
      lsc_col_if_if_3_else_else_else_land_1_lpi_1_dfm, or_166_nl);
  assign or_177_nl = (~ mux_tmp_142) | or_dcpl_16;
  assign lsc_col_if_if_3_else_else_aelse_1_mux_1_nl = MUX_s_1_2_2(lsc_col_if_if_3_else_else_land_1_lpi_1_dfm_mx0w0,
      lsc_col_if_if_3_else_else_land_1_lpi_1_dfm, or_177_nl);
  assign or_187_nl = and_dcpl_14 | or_dcpl_16;
  assign lsc_col_if_if_3_else_aelse_1_mux_1_nl = MUX_s_1_2_2(lsc_col_if_if_3_else_land_1_lpi_1_dfm_mx0w0,
      lsc_col_if_if_3_else_land_1_lpi_1_dfm, or_187_nl);
  assign lsc_col_if_if_3_else_and_4_tmp_1 = lsc_col_if_if_3_else_else_else_else_aelse_1_mux_1_nl
      & (~ lsc_col_if_if_3_else_else_else_aelse_1_mux_1_nl) & (~(lsc_col_if_if_3_else_else_aelse_1_mux_1_nl
      | lsc_col_if_if_3_else_aelse_1_mux_1_nl));
  assign lsc_col_lsc_col_nor_5_cse_1 = lscRegister_eb & lsc_col_acc_2_itm_13_1;
  assign mux_174_nl = MUX_s_1_2_2(or_tmp_20, mux_tmp_8, lsc_col_x_lpi_1_dfm_2[1]);
  assign mux_175_nl = MUX_s_1_2_2(or_tmp_5, mux_174_nl, lsc_col_if_if_4_else_if_or_tmp);
  assign or_203_nl = (~((lsc_col_x_lpi_1_dfm_2[0]) | lsc_row_asn_sft_lpi_1_dfm_st_1))
      | exit_lsc_row_lpi_1_dfm | exitL_exit_lsc_col_lpi_1_dfm;
  assign mux_170_nl = MUX_s_1_2_2(or_tmp_20, or_203_nl, operator_13_false_16_nor_1_tmp);
  assign or_198_nl = (~(and_103_cse | (lsc_col_x_lpi_1_dfm_2[0]) | lsc_row_asn_sft_lpi_1_dfm_st_1))
      | exit_lsc_row_lpi_1_dfm | exitL_exit_lsc_col_lpi_1_dfm;
  assign mux_168_nl = MUX_s_1_2_2(mux_tmp_8, or_198_nl, operator_13_false_18_nor_1_tmp);
  assign mux_169_nl = MUX_s_1_2_2(mux_168_nl, or_tmp_9, operator_13_false_17_nor_1_tmp);
  assign mux_171_nl = MUX_s_1_2_2(mux_170_nl, mux_169_nl, lsc_col_x_lpi_1_dfm_2[1]);
  assign mux_172_nl = MUX_s_1_2_2(mux_171_nl, or_tmp_9, operator_13_false_15_nor_1_tmp);
  assign mux_173_nl = MUX_s_1_2_2(or_tmp_5, mux_172_nl, lsc_col_if_if_4_else_if_or_tmp);
  assign mux_176_cse = MUX_s_1_2_2(mux_175_nl, mux_173_nl, lsc_col_x_lpi_1_dfm_2[3]);
  assign mux_204_nl = MUX_s_1_2_2(or_tmp_41, or_tmp_38, lsc_col_x_lpi_1_dfm_2[0]);
  assign mux_206_nl = MUX_s_1_2_2(mux_tmp_46, mux_204_nl, operator_13_false_16_nor_1_tmp);
  assign mux_207_nl = MUX_s_1_2_2(mux_206_nl, or_tmp_38, operator_13_false_15_nor_1_tmp);
  assign mux_208_nl = MUX_s_1_2_2(mux_tmp_46, mux_207_nl, lsc_col_x_lpi_1_dfm_2[3]);
  assign mux_197_nl = MUX_s_1_2_2(or_tmp_41, or_tmp_38, or_79_cse);
  assign mux_201_nl = MUX_s_1_2_2(mux_tmp_41, mux_197_nl, operator_13_false_16_nor_1_tmp);
  assign mux_202_nl = MUX_s_1_2_2(mux_201_nl, or_tmp_38, operator_13_false_17_nor_1_tmp);
  assign mux_203_nl = MUX_s_1_2_2(mux_tmp_41, mux_202_nl, lsc_col_x_lpi_1_dfm_2[3]);
  assign mux_209_cse = MUX_s_1_2_2(mux_208_nl, mux_203_nl, lsc_col_x_lpi_1_dfm_2[1]);
  assign mux_239_nl = MUX_s_1_2_2(or_tmp_41, or_tmp_38, or_106_cse);
  assign mux_245_nl = MUX_s_1_2_2(mux_tmp_85, mux_239_nl, operator_13_false_16_nor_1_tmp);
  assign mux_246_nl = MUX_s_1_2_2(mux_245_nl, or_tmp_38, operator_13_false_15_nor_1_tmp);
  assign mux_247_cse = MUX_s_1_2_2(mux_tmp_85, mux_246_nl, lsc_col_x_lpi_1_dfm_2[3]);
  assign mux_177_nl = MUX_s_1_2_2(mux_176_cse, and_18_cse, line_is_blue_sva);
  assign mux_178_nl = MUX_s_1_2_2(mux_177_nl, or_371_cse, exitL_exit_lsc_row_sva);
  assign or_206_nl = (~ mux_178_nl) | or_dcpl_16;
  assign lsc_col_if_if_4_else_else_else_else_else_else_else_else_aelse_1_mux_nl =
      MUX_s_1_2_2(lsc_col_if_if_4_else_else_else_else_else_else_else_else_land_1_lpi_1_dfm_mx0w0,
      lsc_col_if_if_4_else_else_else_else_else_else_else_else_land_1_lpi_1_dfm, or_206_nl);
  assign mux_210_nl = MUX_s_1_2_2(mux_209_cse, and_17_cse, line_is_blue_sva);
  assign mux_211_nl = MUX_s_1_2_2(mux_210_nl, or_371_cse, exitL_exit_lsc_row_sva);
  assign or_230_nl = (~ mux_211_nl) | or_dcpl_16;
  assign lsc_col_if_if_4_else_else_else_else_else_else_else_aelse_1_mux_nl = MUX_s_1_2_2(lsc_col_if_if_4_else_else_else_else_else_else_else_land_1_lpi_1_dfm_mx0w0,
      lsc_col_if_if_4_else_else_else_else_else_else_else_land_1_lpi_1_dfm, or_230_nl);
  assign mux_248_nl = MUX_s_1_2_2(mux_247_cse, and_17_cse, line_is_blue_sva);
  assign mux_249_nl = MUX_s_1_2_2(mux_248_nl, or_371_cse, exitL_exit_lsc_row_sva);
  assign or_259_nl = (~ mux_249_nl) | or_dcpl_16;
  assign lsc_col_if_if_4_else_else_else_else_else_else_aelse_1_mux_nl = MUX_s_1_2_2(lsc_col_if_if_4_else_else_else_else_else_else_land_1_lpi_1_dfm_mx0w0,
      lsc_col_if_if_4_else_else_else_else_else_else_land_1_lpi_1_dfm, or_259_nl);
  assign lsc_col_if_if_4_else_and_6_tmp_1 = lsc_col_if_if_4_else_else_else_else_else_else_else_else_aelse_1_mux_nl
      & (~ lsc_col_if_if_4_else_else_else_else_else_else_else_aelse_1_mux_nl) & (~(lsc_col_if_if_4_else_else_else_else_else_else_aelse_1_mux_nl
      | lsc_col_if_if_4_else_else_else_else_else_land_1_lpi_1_dfm_mx0)) & (~(lsc_col_if_if_4_else_else_else_else_land_1_lpi_1_dfm_mx0
      | lsc_col_if_if_4_else_else_else_land_1_lpi_1_dfm_mx0)) & (~(lsc_col_if_if_4_else_else_land_1_lpi_1_dfm_mx0
      | lsc_col_if_if_4_else_land_1_lpi_1_dfm_mx0));
  assign lsc_col_and_56_m1c_1 = (~ lsc_col_if_if_4_land_lpi_1_dfm_1) & lsc_col_and_tmp_1
      & (~ lsc_row_asn_sft_lpi_1_dfm_mx0);
  assign lsc_row_and_21_tmp_1 = operator_9_false_acc_itm_9_1 & lsc_col_lsc_col_nor_5_cse_1
      & (~ lsc_row_asn_sft_lpi_1_dfm_mx0);
  assign lsc_col_if_if_4_and_2_cse_1 = lsc_col_if_if_4_else_land_1_lpi_1_dfm_mx0
      & (~ lsc_col_if_if_4_land_lpi_1_dfm_1);
  assign lsc_col_if_if_4_else_else_and_3_tmp_1 = lsc_col_if_if_4_else_else_else_else_else_land_1_lpi_1_dfm_mx0
      & (~ lsc_col_if_if_4_else_else_else_else_land_1_lpi_1_dfm_mx0) & (~(lsc_col_if_if_4_else_else_else_land_1_lpi_1_dfm_mx0
      | lsc_col_if_if_4_else_else_land_1_lpi_1_dfm_mx0));
  assign lsc_col_and_55_m1c_1 = (~(lsc_col_if_if_4_else_land_1_lpi_1_dfm_mx0 | lsc_col_if_if_4_land_lpi_1_dfm_1))
      & lsc_col_and_tmp_1 & (~ lsc_row_asn_sft_lpi_1_dfm_mx0);
  assign mux_20_nl = MUX_s_1_2_2(and_18_cse, mux_176_cse, line_is_blue_sva);
  assign mux_21_nl = MUX_s_1_2_2(mux_20_nl, or_386_cse, exitL_exit_lsc_row_sva);
  assign or_39_nl = (~ mux_21_nl) | or_dcpl_16;
  assign lsc_col_if_if_3_else_else_else_else_else_else_else_else_aelse_1_mux_nl =
      MUX_s_1_2_2(lsc_col_if_if_3_else_else_else_else_else_else_else_else_land_1_lpi_1_dfm_mx0w0,
      lsc_col_if_if_3_else_else_else_else_else_else_else_else_land_1_lpi_1_dfm, or_39_nl);
  assign mux_53_nl = MUX_s_1_2_2(and_17_cse, mux_209_cse, line_is_blue_sva);
  assign mux_54_nl = MUX_s_1_2_2(mux_53_nl, or_386_cse, exitL_exit_lsc_row_sva);
  assign or_64_nl = (~ mux_54_nl) | or_dcpl_16;
  assign lsc_col_if_if_3_else_else_else_else_else_else_else_aelse_1_mux_nl = MUX_s_1_2_2(lsc_col_if_if_3_else_else_else_else_else_else_else_land_1_lpi_1_dfm_mx0w0,
      lsc_col_if_if_3_else_else_else_else_else_else_else_land_1_lpi_1_dfm, or_64_nl);
  assign mux_91_nl = MUX_s_1_2_2(and_17_cse, mux_247_cse, line_is_blue_sva);
  assign mux_92_nl = MUX_s_1_2_2(mux_91_nl, or_386_cse, exitL_exit_lsc_row_sva);
  assign or_93_nl = (~ mux_92_nl) | or_dcpl_16;
  assign lsc_col_if_if_3_else_else_else_else_else_else_aelse_1_mux_nl = MUX_s_1_2_2(lsc_col_if_if_3_else_else_else_else_else_else_land_1_lpi_1_dfm_mx0w0,
      lsc_col_if_if_3_else_else_else_else_else_else_land_1_lpi_1_dfm, or_93_nl);
  assign lsc_col_if_if_3_else_and_6_tmp_1 = lsc_col_if_if_3_else_else_else_else_else_else_else_else_aelse_1_mux_nl
      & (~ lsc_col_if_if_3_else_else_else_else_else_else_else_aelse_1_mux_nl) & (~(lsc_col_if_if_3_else_else_else_else_else_else_aelse_1_mux_nl
      | lsc_col_if_if_3_else_else_else_else_else_land_1_lpi_1_dfm_mx0)) & (~(lsc_col_if_if_3_else_else_else_else_land_1_lpi_1_dfm_mx0
      | lsc_col_if_if_3_else_else_else_land_1_lpi_1_dfm_mx0)) & (~(lsc_col_if_if_3_else_else_land_1_lpi_1_dfm_mx0
      | lsc_col_if_if_3_else_land_1_lpi_1_dfm_mx0));
  assign lsc_col_and_49_m1c_1 = (~ lsc_col_if_if_3_land_lpi_1_dfm_1) & lsc_col_and_tmp_1
      & (~ lsc_row_asn_sft_lpi_1_dfm_mx0);
  assign lsc_col_if_if_3_and_2_cse_1 = lsc_col_if_if_3_else_land_1_lpi_1_dfm_mx0
      & (~ lsc_col_if_if_3_land_lpi_1_dfm_1);
  assign lsc_col_if_if_3_else_else_and_3_tmp_1 = lsc_col_if_if_3_else_else_else_else_else_land_1_lpi_1_dfm_mx0
      & (~ lsc_col_if_if_3_else_else_else_else_land_1_lpi_1_dfm_mx0) & (~(lsc_col_if_if_3_else_else_else_land_1_lpi_1_dfm_mx0
      | lsc_col_if_if_3_else_else_land_1_lpi_1_dfm_mx0));
  assign lsc_col_and_48_m1c_1 = (~(lsc_col_if_if_3_else_land_1_lpi_1_dfm_mx0 | lsc_col_if_if_3_land_lpi_1_dfm_1))
      & lsc_col_and_tmp_1 & (~ lsc_row_asn_sft_lpi_1_dfm_mx0);
  assign block_count_rGr_sva_dfm_5_7_1 = MUX1HOT_v_7_5_2(z_out_5, (z_out_10[7:1]),
      block_count_rGr_sva_7_1, (z_out_6[7:1]), 7'b0000001, {lsc_col_if_else_1_and_ssc_1
      , lsc_col_if_else_1_and_1_ssc_1 , lsc_col_if_lsc_col_if_nor_ssc_1 , lsc_col_if_else_1_and_3_ssc_1
      , lsc_col_if_if_1_lsc_col_if_if_1_nor_tmp});
  assign lsc_col_if_or_nl = lsc_col_if_else_1_and_ssc_1 | lsc_col_if_lsc_col_if_nor_ssc_1;
  assign lsc_col_if_lsc_col_if_mux1h_6_nl = MUX1HOT_s_1_3_2(block_count_rGr_sva_0,
      (z_out_10[0]), (z_out_6[0]), {lsc_col_if_or_nl , lsc_col_if_else_1_and_1_ssc_1
      , lsc_col_if_else_1_and_3_ssc_1});
  assign block_count_rGr_sva_dfm_5_0 = lsc_col_if_lsc_col_if_mux1h_6_nl & (~ lsc_col_if_if_1_lsc_col_if_if_1_nor_tmp);
  assign block_count_Gbb_sva_dfm_5_7_1 = MUX1HOT_v_7_5_2(z_out_5, (z_out_10[7:1]),
      block_count_Gbb_sva_7_1, (z_out_6[7:1]), 7'b0000001, {lsc_col_if_else_2_and_ssc_1
      , lsc_col_if_else_2_and_1_ssc_1 , lsc_col_if_lsc_col_if_nor_2_ssc_1 , lsc_col_if_else_2_and_3_ssc_1
      , lsc_col_if_if_1_lsc_col_if_if_1_nor_tmp});
  assign lsc_col_if_or_8_nl = lsc_col_if_else_2_and_ssc_1 | lsc_col_if_lsc_col_if_nor_2_ssc_1;
  assign lsc_col_if_lsc_col_if_mux1h_7_nl = MUX1HOT_s_1_3_2(block_count_Gbb_sva_0,
      (z_out_10[0]), (z_out_6[0]), {lsc_col_if_or_8_nl , lsc_col_if_else_2_and_1_ssc_1
      , lsc_col_if_else_2_and_3_ssc_1});
  assign block_count_Gbb_sva_dfm_5_0 = lsc_col_if_lsc_col_if_mux1h_7_nl & (~ lsc_col_if_if_1_lsc_col_if_if_1_nor_tmp);
  assign lsc_col_if_else_2_and_ssc_1 = lsc_col_if_else_2_if_lor_lpi_1_dfm_mx0 & lsc_col_if_else_2_land_lpi_1_dfm_1
      & (~ lsc_col_if_if_1_lsc_col_if_if_1_nor_tmp);
  assign lsc_col_if_else_2_and_1_ssc_1 = (~ lsc_col_if_else_2_if_lor_lpi_1_dfm_mx0)
      & lsc_col_if_else_2_land_lpi_1_dfm_1 & (~ lsc_col_if_if_1_lsc_col_if_if_1_nor_tmp);
  assign lsc_col_if_lsc_col_if_nor_2_ssc_1 = ~(lsc_col_if_if_4_land_lpi_1_dfm_1 |
      lsc_col_if_else_2_land_lpi_1_dfm_1 | lsc_col_if_if_1_lsc_col_if_if_1_nor_tmp);
  assign lsc_col_if_else_2_and_3_ssc_1 = lsc_col_if_if_4_land_lpi_1_dfm_1 & (~ lsc_col_if_else_2_land_lpi_1_dfm_1)
      & (~ lsc_col_if_if_1_lsc_col_if_if_1_nor_tmp);
  assign lsc_col_if_else_1_and_ssc_1 = lsc_col_if_else_1_if_lor_lpi_1_dfm_mx0 & lsc_col_if_else_1_land_lpi_1_dfm_1
      & (~ lsc_col_if_if_1_lsc_col_if_if_1_nor_tmp);
  assign lsc_col_if_else_1_and_1_ssc_1 = (~ lsc_col_if_else_1_if_lor_lpi_1_dfm_mx0)
      & lsc_col_if_else_1_land_lpi_1_dfm_1 & (~ lsc_col_if_if_1_lsc_col_if_if_1_nor_tmp);
  assign lsc_col_if_lsc_col_if_nor_ssc_1 = ~(lsc_col_if_else_1_else_land_lpi_1_dfm_1
      | lsc_col_if_else_1_land_lpi_1_dfm_1 | lsc_col_if_if_1_lsc_col_if_if_1_nor_tmp);
  assign lsc_col_if_else_1_and_3_ssc_1 = lsc_col_if_else_1_else_land_lpi_1_dfm_1
      & (~ lsc_col_if_else_1_land_lpi_1_dfm_1) & (~ lsc_col_if_if_1_lsc_col_if_if_1_nor_tmp);
  assign lsc_col_and_43_tmp_1 = (block_width_count_sva==9'b000000011) & lsc_col_lsc_col_nor_5_cse_1;
  assign lsc_col_and_42_tmp_1 = (block_width_count_sva==9'b000000001) & lsc_col_lsc_col_nor_5_cse_1;
  assign lsc_col_and_41_tmp_1 = (block_width_count_sva==9'b000000010) & lsc_col_lsc_col_nor_5_cse_1;
  assign lsc_col_lsc_col_nor_25_tmp_1 = ~((block_width_count_sva!=9'b000000000) |
      (~ lscRegister_eb) | (~ lsc_col_acc_2_itm_13_1));
  assign lsc_col_if_else_2_if_unequal_1_tmp = lsc_col_x_lpi_1_dfm_3 != (operator_13_false_acc_tmp[12:0]);
  assign lsc_col_if_else_2_else_if_unequal_1_tmp = block_width_count_sva != (operator_9_false_2_acc_tmp[8:0]);
  assign operator_13_false_19_nor_2 = ~((lsc_col_x_lpi_1_dfm_3[12]) | (lsc_col_x_lpi_1_dfm_3[11])
      | (lsc_col_x_lpi_1_dfm_3[10]) | (lsc_col_x_lpi_1_dfm_3[9]) | (lsc_col_x_lpi_1_dfm_3[8])
      | (lsc_col_x_lpi_1_dfm_3[7]) | (lsc_col_x_lpi_1_dfm_3[6]) | (lsc_col_x_lpi_1_dfm_3[5])
      | (lsc_col_x_lpi_1_dfm_3[4]) | (lsc_col_x_lpi_1_dfm_3[1]) | (lsc_col_x_lpi_1_dfm_3[0]));
  assign operator_13_false_18_nor_1_tmp = ~((lsc_col_x_lpi_1_dfm_3[12]) | (lsc_col_x_lpi_1_dfm_3[11])
      | (lsc_col_x_lpi_1_dfm_3[10]) | (lsc_col_x_lpi_1_dfm_3[9]) | (lsc_col_x_lpi_1_dfm_3[8])
      | (lsc_col_x_lpi_1_dfm_3[7]) | (lsc_col_x_lpi_1_dfm_3[6]) | (lsc_col_x_lpi_1_dfm_3[5])
      | (lsc_col_x_lpi_1_dfm_3[4]) | (lsc_col_x_lpi_1_dfm_3[2]));
  assign operator_13_false_17_nor_1_tmp = ~((lsc_col_x_lpi_1_dfm_3[12]) | (lsc_col_x_lpi_1_dfm_3[11])
      | (lsc_col_x_lpi_1_dfm_3[10]) | (lsc_col_x_lpi_1_dfm_3[9]) | (lsc_col_x_lpi_1_dfm_3[8])
      | (lsc_col_x_lpi_1_dfm_3[7]) | (lsc_col_x_lpi_1_dfm_3[6]) | (lsc_col_x_lpi_1_dfm_3[5])
      | (lsc_col_x_lpi_1_dfm_3[4]) | (lsc_col_x_lpi_1_dfm_3[2]) | (lsc_col_x_lpi_1_dfm_3[0]));
  assign operator_13_false_16_nor_1_tmp = ~((lsc_col_x_lpi_1_dfm_3[12]) | (lsc_col_x_lpi_1_dfm_3[11])
      | (lsc_col_x_lpi_1_dfm_3[10]) | (lsc_col_x_lpi_1_dfm_3[9]) | (lsc_col_x_lpi_1_dfm_3[8])
      | (lsc_col_x_lpi_1_dfm_3[7]) | (lsc_col_x_lpi_1_dfm_3[6]) | (lsc_col_x_lpi_1_dfm_3[5])
      | (lsc_col_x_lpi_1_dfm_3[4]) | (lsc_col_x_lpi_1_dfm_3[2]) | (lsc_col_x_lpi_1_dfm_3[1]));
  assign operator_13_false_15_nor_1_tmp = ~((lsc_col_x_lpi_1_dfm_3[12]) | (lsc_col_x_lpi_1_dfm_3[11])
      | (lsc_col_x_lpi_1_dfm_3[10]) | (lsc_col_x_lpi_1_dfm_3[9]) | (lsc_col_x_lpi_1_dfm_3[8])
      | (lsc_col_x_lpi_1_dfm_3[7]) | (lsc_col_x_lpi_1_dfm_3[6]) | (lsc_col_x_lpi_1_dfm_3[5])
      | (lsc_col_x_lpi_1_dfm_3[4]) | (lsc_col_x_lpi_1_dfm_3[2]) | (lsc_col_x_lpi_1_dfm_3[1])
      | (lsc_col_x_lpi_1_dfm_3[0]));
  assign operator_13_false_14_nor_1_tmp = ~((lsc_col_x_lpi_1_dfm_3[12:3]!=10'b0000000000));
  assign operator_13_false_13_nor_1_tmp = ~((lsc_col_x_lpi_1_dfm_3[12]) | (lsc_col_x_lpi_1_dfm_3[11])
      | (lsc_col_x_lpi_1_dfm_3[10]) | (lsc_col_x_lpi_1_dfm_3[9]) | (lsc_col_x_lpi_1_dfm_3[8])
      | (lsc_col_x_lpi_1_dfm_3[7]) | (lsc_col_x_lpi_1_dfm_3[6]) | (lsc_col_x_lpi_1_dfm_3[5])
      | (lsc_col_x_lpi_1_dfm_3[4]) | (lsc_col_x_lpi_1_dfm_3[3]) | (lsc_col_x_lpi_1_dfm_3[0]));
  assign operator_13_false_12_nor_1_tmp = ~((lsc_col_x_lpi_1_dfm_3[12]) | (lsc_col_x_lpi_1_dfm_3[11])
      | (lsc_col_x_lpi_1_dfm_3[10]) | (lsc_col_x_lpi_1_dfm_3[9]) | (lsc_col_x_lpi_1_dfm_3[8])
      | (lsc_col_x_lpi_1_dfm_3[7]) | (lsc_col_x_lpi_1_dfm_3[6]) | (lsc_col_x_lpi_1_dfm_3[5])
      | (lsc_col_x_lpi_1_dfm_3[4]) | (lsc_col_x_lpi_1_dfm_3[3]) | (lsc_col_x_lpi_1_dfm_3[1]));
  assign lsc_col_if_asn_94 = ~(operator_2_false_2_operator_2_false_2_and_svs_1 |
      operator_2_false_1_operator_2_false_1_and_svs_1 | operator_2_false_operator_2_false_nor_svs_1);
  assign lsc_row_asn_174 = lsc_col_if_if_4_land_lpi_1_dfm_1 & lsc_col_and_tmp_1 &
      (~ lsc_row_asn_sft_lpi_1_dfm_mx0);
  assign lsc_row_asn_176 = lsc_col_if_if_4_land_lpi_1_dfm_1 & lsc_row_and_21_tmp_1;
  assign lsc_row_asn_178 = lsc_col_if_if_3_land_lpi_1_dfm_1 & lsc_col_and_tmp_1 &
      (~ lsc_row_asn_sft_lpi_1_dfm_mx0);
  assign lsc_row_asn_180 = lsc_col_if_if_3_land_lpi_1_dfm_1 & lsc_row_and_21_tmp_1;
  assign lsc_row_asn_182 = (~ line_is_blue_sva) & exitL_exit_lsc_row_sva;
  assign lsc_row_asn_184 = line_is_blue_sva & exitL_exit_lsc_row_sva;
  assign nor_115_cse = ~((~ lsc_row_asn_sft_lpi_1_dfm_st_1) | exitL_exit_lsc_col_lpi_1_dfm
      | exit_lsc_row_lpi_1_dfm | exitL_exit_lsc_row_sva);
  assign or_nl = lsc_row_asn_sft_lpi_1_dfm_st_1 | exitL_exit_lsc_col_lpi_1_dfm |
      exit_lsc_row_lpi_1_dfm | exitL_exit_lsc_row_sva;
  assign mux_2_cse = MUX_s_1_2_2(or_nl, nor_115_cse, lsc_row_acc_2_itm_13_1);
  assign and_dcpl_7 = (~ lsc_row_asn_sft_lpi_1_dfm_st_1) & main_stage_0_2;
  assign or_dcpl_5 = mux_2_cse | (~ lsc_col_acc_2_itm_13_1);
  assign or_dcpl_7 = lsc_col_if_else_2_if_unequal_1_tmp | (operator_13_false_acc_tmp[13])
      | lsc_col_if_if_1_lsc_col_if_if_1_nor_tmp;
  assign or_dcpl_12 = (~ lsc_col_acc_2_itm_13_1) | (~ lscRegister_eb) | lsc_col_if_else_2_if_unequal_1_tmp
      | (operator_13_false_acc_tmp[13]) | lsc_col_if_if_1_lsc_col_if_if_1_nor_tmp;
  assign or_tmp_5 = (~ lsc_row_asn_sft_lpi_1_dfm_st_1) | exitL_exit_lsc_col_lpi_1_dfm
      | exit_lsc_row_lpi_1_dfm;
  assign or_dcpl_16 = ~(operator_9_false_acc_itm_9_1 & lsc_col_acc_2_itm_13_1);
  assign or_tmp_9 = exit_lsc_row_lpi_1_dfm | exitL_exit_lsc_col_lpi_1_dfm;
  assign mux_tmp_8 = MUX_s_1_2_2(or_tmp_5, mux_134_cse, lsc_col_x_lpi_1_dfm_2[2]);
  assign and_106_cse = (lsc_col_x_lpi_1_dfm_2[2]) & operator_13_false_12_nor_1_tmp
      & (lsc_col_x_lpi_1_dfm_2[0]);
  assign or_tmp_20 = (~(and_106_cse | lsc_row_asn_sft_lpi_1_dfm_st_1)) | exit_lsc_row_lpi_1_dfm
      | exitL_exit_lsc_col_lpi_1_dfm;
  assign or_dcpl_18 = or_dcpl_16 | (~ lscRegister_eb);
  assign or_tmp_25 = ~(or_tmp_9 & lsc_row_acc_2_itm_13_1);
  assign nor_tmp_4 = ~((~ or_tmp_9) | lsc_row_acc_2_itm_13_1);
  assign mux_tmp_23 = MUX_s_1_2_2(nor_tmp_4, or_tmp_25, lsc_row_asn_sft_lpi_1_dfm_st_1);
  assign or_49_nl = and_86_cse | lsc_row_asn_sft_lpi_1_dfm_st_1;
  assign mux_23_nl = MUX_s_1_2_2(nor_tmp_4, or_tmp_25, or_49_nl);
  assign mux_24_nl = MUX_s_1_2_2(mux_23_nl, or_tmp_25, operator_13_false_13_nor_1_tmp);
  assign mux_tmp_24 = MUX_s_1_2_2(mux_tmp_23, mux_24_nl, lsc_col_x_lpi_1_dfm_2[2]);
  assign or_51_nl = and_106_cse | lsc_row_asn_sft_lpi_1_dfm_st_1;
  assign mux_tmp_28 = MUX_s_1_2_2(nor_tmp_4, or_tmp_25, or_51_nl);
  assign or_tmp_37 = lsc_col_if_if_4_else_if_or_tmp | lsc_row_asn_sft_lpi_1_dfm_st_1;
  assign or_tmp_38 = or_tmp_9 | (~ or_tmp_37);
  assign or_tmp_41 = or_tmp_9 | (~ lsc_row_asn_sft_lpi_1_dfm_st_1);
  assign mux_41_nl = MUX_s_1_2_2(or_tmp_41, or_tmp_38, and_86_cse);
  assign mux_42_cse = MUX_s_1_2_2(mux_41_nl, or_tmp_38, operator_13_false_13_nor_1_tmp);
  assign mux_tmp_41 = MUX_s_1_2_2(or_tmp_41, mux_42_cse, lsc_col_x_lpi_1_dfm_2[2]);
  assign mux_tmp_46 = MUX_s_1_2_2(or_tmp_41, or_tmp_38, and_106_cse);
  assign or_70_nl = (~ operator_13_false_14_nor_1_tmp) | (~ (lsc_col_x_lpi_1_dfm_2[0]))
      | exit_lsc_row_lpi_1_dfm | exitL_exit_lsc_col_lpi_1_dfm;
  assign mux_55_nl = MUX_s_1_2_2(or_70_nl, or_tmp_9, operator_13_false_13_nor_1_tmp);
  assign nand_tmp_1 = ~((lsc_col_x_lpi_1_dfm_2[2]) & (~ mux_55_nl));
  assign or_tmp_51 = (~ (lsc_col_x_lpi_1_dfm_2[2])) | (~ operator_13_false_12_nor_1_tmp)
      | (~ (lsc_col_x_lpi_1_dfm_2[0])) | exit_lsc_row_lpi_1_dfm | exitL_exit_lsc_col_lpi_1_dfm;
  assign mux_tmp_63 = MUX_s_1_2_2(or_tmp_37, (~ lsc_row_acc_2_itm_13_1), or_tmp_9);
  assign mux_tmp_64 = MUX_s_1_2_2(lsc_row_asn_sft_lpi_1_dfm_st_1, (~ lsc_row_acc_2_itm_13_1),
      or_tmp_9);
  assign mux_68_nl = MUX_s_1_2_2(mux_tmp_64, mux_tmp_63, and_86_cse);
  assign mux_69_cse = MUX_s_1_2_2(mux_68_nl, mux_tmp_63, operator_13_false_13_nor_1_tmp);
  assign mux_tmp_68 = MUX_s_1_2_2(mux_tmp_64, mux_69_cse, lsc_col_x_lpi_1_dfm_2[2]);
  assign mux_tmp_73 = MUX_s_1_2_2(mux_tmp_64, mux_tmp_63, and_106_cse);
  assign mux_85_nl = MUX_s_1_2_2(or_tmp_41, or_tmp_38, and_85_cse);
  assign mux_86_nl = MUX_s_1_2_2(mux_85_nl, mux_42_cse, lsc_col_x_lpi_1_dfm_2[1]);
  assign mux_tmp_85 = MUX_s_1_2_2(or_tmp_41, mux_86_nl, lsc_col_x_lpi_1_dfm_2[2]);
  assign or_tmp_72 = (~ lsc_col_if_if_4_else_if_or_tmp) | exit_lsc_row_lpi_1_dfm
      | exitL_exit_lsc_col_lpi_1_dfm;
  assign mux_105_nl = MUX_s_1_2_2(mux_tmp_64, mux_tmp_63, and_85_cse);
  assign mux_106_nl = MUX_s_1_2_2(mux_105_nl, mux_69_cse, lsc_col_x_lpi_1_dfm_2[1]);
  assign mux_tmp_105 = MUX_s_1_2_2(mux_tmp_64, mux_106_nl, lsc_col_x_lpi_1_dfm_2[2]);
  assign nor_tmp_26 = operator_13_false_15_nor_1_tmp & (lsc_col_x_lpi_1_dfm_2[3])
      & lsc_col_if_if_4_else_if_or_tmp;
  assign mux_139_nl = MUX_s_1_2_2(or_101_cse, or_tmp_72, line_is_blue_sva);
  assign mux_tmp_138 = MUX_s_1_2_2(mux_139_nl, or_386_cse, exitL_exit_lsc_row_sva);
  assign mux_tmp_139 = MUX_s_1_2_2(or_379_cse, or_386_cse, exitL_exit_lsc_row_sva);
  assign mux_tmp_141 = MUX_s_1_2_2(mux_tmp_139, mux_tmp_138, lsc_col_x_lpi_1_dfm_2[2]);
  assign mux_tmp_142 = MUX_s_1_2_2(mux_tmp_139, mux_tmp_138, and_106_cse);
  assign and_80_cse = (operator_13_false_13_nor_1_tmp | (lsc_col_x_lpi_1_dfm_2[0]))
      & (lsc_col_x_lpi_1_dfm_2[2]);
  assign mux_145_nl = MUX_s_1_2_2(mux_tmp_142, mux_tmp_141, operator_13_false_13_nor_1_tmp);
  assign mux_142_nl = MUX_s_1_2_2(mux_tmp_139, mux_tmp_138, and_80_cse);
  assign mux_146_nl = MUX_s_1_2_2(mux_145_nl, mux_142_nl, operator_13_false_14_nor_1_tmp);
  assign mux_147_itm = MUX_s_1_2_2(mux_tmp_142, mux_146_nl, lsc_col_x_lpi_1_dfm_2[1]);
  assign or_tmp_133 = (~ or_tmp_37) | exitL_exit_lsc_col_lpi_1_dfm | exit_lsc_row_lpi_1_dfm;
  assign mux_152_nl = MUX_s_1_2_2(and_18_cse, or_tmp_133, line_is_blue_sva);
  assign mux_tmp_151 = MUX_s_1_2_2(mux_152_nl, or_386_cse, exitL_exit_lsc_row_sva);
  assign and_21_nl = or_379_cse & or_tmp_5;
  assign mux_tmp_152 = MUX_s_1_2_2(and_21_nl, or_386_cse, exitL_exit_lsc_row_sva);
  assign mux_tmp_154 = MUX_s_1_2_2(mux_tmp_152, mux_tmp_151, and_106_cse);
  assign mux_158_itm = MUX_s_1_2_2(mux_tmp_142, mux_tmp_141, and_74_cse);
  assign and_dcpl_14 = (~ line_is_blue_sva_dfm_mx0) & nor_110_cse;
  assign mux_296_nl = MUX_s_1_2_2(or_tmp_72, or_101_cse, line_is_blue_sva);
  assign mux_tmp_295 = MUX_s_1_2_2(mux_296_nl, or_371_cse, exitL_exit_lsc_row_sva);
  assign mux_tmp_296 = MUX_s_1_2_2(or_364_cse, or_371_cse, exitL_exit_lsc_row_sva);
  assign mux_tmp_298 = MUX_s_1_2_2(mux_tmp_296, mux_tmp_295, lsc_col_x_lpi_1_dfm_2[2]);
  assign mux_tmp_299 = MUX_s_1_2_2(mux_tmp_296, mux_tmp_295, and_106_cse);
  assign mux_302_nl = MUX_s_1_2_2(mux_tmp_299, mux_tmp_298, operator_13_false_13_nor_1_tmp);
  assign mux_299_nl = MUX_s_1_2_2(mux_tmp_296, mux_tmp_295, and_80_cse);
  assign mux_303_nl = MUX_s_1_2_2(mux_302_nl, mux_299_nl, operator_13_false_14_nor_1_tmp);
  assign mux_304_itm = MUX_s_1_2_2(mux_tmp_299, mux_303_nl, lsc_col_x_lpi_1_dfm_2[1]);
  assign mux_309_nl = MUX_s_1_2_2(or_tmp_133, and_18_cse, line_is_blue_sva);
  assign mux_tmp_308 = MUX_s_1_2_2(mux_309_nl, or_371_cse, exitL_exit_lsc_row_sva);
  assign and_31_nl = or_364_cse & or_tmp_5;
  assign mux_tmp_309 = MUX_s_1_2_2(and_31_nl, or_371_cse, exitL_exit_lsc_row_sva);
  assign mux_tmp_311 = MUX_s_1_2_2(mux_tmp_309, mux_tmp_308, and_106_cse);
  assign mux_315_itm = MUX_s_1_2_2(mux_tmp_299, mux_tmp_298, and_74_cse);
  assign dst_rsci_idat_mx0c1 = and_dcpl_7 & (~ lsc_col_not_mdf_sva_st_1) & (~ lscRegister_eb);
  assign nl_lsc_row_acc_2_nl = ({1'b1 , lsc_row_y_lpi_1_dfm_3}) + conv_u2u_13_14(~
      topRegister_frameHeight) + 14'b00000000000001;
  assign lsc_row_acc_2_nl = nl_lsc_row_acc_2_nl[13:0];
  assign lsc_row_acc_2_itm_13_1 = readslicef_14_1_13(lsc_row_acc_2_nl);
  assign nor_126_cse = ~(exitL_exit_lsc_row_sva | line_is_blue_sva);
  assign or_dcpl = exitL_exit_lsc_row_sva | line_is_blue_sva;
  assign and_135_cse = (~ exitL_exit_lsc_row_sva) & line_is_blue_sva;
  assign and_136_cse = (~ (lsc_col_x_lpi_1_dfm_2[3])) & (lsc_col_x_lpi_1_dfm_2[0]);
  assign or_387_cse = exitL_exit_lsc_row_sva | (~ line_is_blue_sva);
  assign and_dcpl_53 = (~ (lsc_col_x_lpi_1_dfm_2[2])) & (lsc_col_x_lpi_1_dfm_2[0]);
  assign and_dcpl_62 = (~ (lsc_col_x_lpi_1_dfm_2[1])) & line_is_blue_sva;
  assign and_dcpl_63 = (lsc_col_x_lpi_1_dfm_2[1:0]==2'b10);
  assign and_dcpl_64 = and_dcpl_63 & line_is_blue_sva;
  assign and_dcpl_65 = (lsc_col_x_lpi_1_dfm_2[1:0]==2'b11);
  assign and_dcpl_66 = and_dcpl_65 & line_is_blue_sva;
  assign and_dcpl_67 = ~((lsc_col_x_lpi_1_dfm_2[1]) | line_is_blue_sva);
  assign and_dcpl_68 = and_dcpl_63 & (~ line_is_blue_sva);
  assign and_dcpl_69 = and_dcpl_65 & (~ line_is_blue_sva);
  assign or_dcpl_64 = (operator_13_false_acc_tmp[13]) | lsc_col_if_else_2_if_unequal_1_tmp;
  assign operator_8_false_1_or_1_ssc = and_dcpl_68 | and_dcpl_69;
  assign and_124_ssc = (lsc_col_x_lpi_1_dfm_2[1:0]==2'b00) & nor_126_cse;
  assign lsc_col_if_if_4_else_else_else_else_else_else_else_else_if_or_ssc = ((lsc_col_x_lpi_1_dfm_2[1:0]==2'b11)
      & nor_126_cse) | ((lsc_col_x_lpi_1_dfm_2[1:0]==2'b10) & nor_126_cse);
  assign and_130_ssc = (lsc_col_x_lpi_1_dfm_2[1:0]==2'b01) & nor_126_cse;
  assign and_131_cse = or_dcpl & (block_width_count_sva[1]);
  assign and_132_cse = or_dcpl & (~ (block_width_count_sva[1]));
  assign and_134_ssc = (lsc_col_x_lpi_1_dfm_2[3]) & (~ exitL_exit_lsc_row_sva) &
      line_is_blue_sva;
  assign lsc_col_if_if_3_else_else_else_else_if_or_ssc = (and_136_cse & (lsc_col_x_lpi_1_dfm_2[1])
      & and_135_cse) | ((~ (lsc_col_x_lpi_1_dfm_2[3])) & (~ (lsc_col_x_lpi_1_dfm_2[0]))
      & and_135_cse);
  assign and_142_ssc = and_136_cse & (~ (lsc_col_x_lpi_1_dfm_2[1])) & and_135_cse;
  assign and_143_cse = or_387_cse & (block_width_count_sva[1]);
  assign and_144_cse = or_387_cse & (~ (block_width_count_sva[1]));
  assign and_146_ssc = (lsc_col_x_lpi_1_dfm_2[3]) & (~ exitL_exit_lsc_row_sva) &
      (~ line_is_blue_sva);
  assign lsc_col_if_if_4_else_else_else_else_if_or_ssc = (and_136_cse & (lsc_col_x_lpi_1_dfm_2[1])
      & nor_126_cse) | ((~ (lsc_col_x_lpi_1_dfm_2[3])) & (~ (lsc_col_x_lpi_1_dfm_2[0]))
      & nor_126_cse);
  assign and_154_ssc = and_136_cse & (~ (lsc_col_x_lpi_1_dfm_2[1])) & nor_126_cse;
  assign and_158_ssc = (lsc_col_x_lpi_1_dfm_2[2]) & (~ exitL_exit_lsc_row_sva) &
      line_is_blue_sva;
  assign lsc_col_if_if_3_else_else_else_else_else_else_else_else_if_or_ssc = (and_dcpl_53
      & (lsc_col_x_lpi_1_dfm_2[1]) & and_135_cse) | ((~ (lsc_col_x_lpi_1_dfm_2[2]))
      & (~ (lsc_col_x_lpi_1_dfm_2[0])) & and_135_cse);
  assign and_166_ssc = and_dcpl_53 & (~ (lsc_col_x_lpi_1_dfm_2[1])) & and_135_cse;
  assign and_178_ssc = or_dcpl_64 & (~ line_is_blue_sva);
  assign and_179_ssc = or_dcpl_64 & line_is_blue_sva;
  assign and_181_nl = exitL_exit_lsc_row_sva & (topRegister_imgPattern[1]);
  assign or_392_nl = (~ exitL_exit_lsc_row_sva) | (topRegister_imgPattern[1]);
  assign mux_ssc = MUX_s_1_2_2(and_181_nl, or_392_nl, line_is_blue_sva);
  assign operator_8_false_1_or_3_seb = and_dcpl_64 | and_dcpl_68;
  assign operator_8_false_mux_cse = MUX_v_7_2_2(block_count_rGr_sva_7_1, block_count_Gbb_sva_7_1,
      line_is_blue_sva);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      reg_dst_rsci_oswt_cse <= 1'b0;
      BilinearInterpolation_tmp_t_sva_1 <= 14'b00000000000000;
      BilinearInterpolation_acc_4_itm_1 <= 15'b000000000000000;
      BilinearInterpolation_asn_4_itm_1 <= 9'b000000000;
      lsc_col_not_mdf_sva_st_1 <= 1'b0;
      lsc_row_asn_sft_lpi_1_dfm_st_1 <= 1'b0;
      line_is_blue_sva <= 1'b0;
      reg_src_rsci_oswt_cse <= 1'b0;
      lsc_col_x_lpi_1_dfm_2 <= 13'b0000000000000;
      exit_lsc_row_lpi_1_dfm <= 1'b0;
      exitL_exit_lsc_col_lpi_1_dfm <= 1'b0;
      exitL_exit_lsc_row_sva <= 1'b1;
      lsc_row_y_lpi_1_dfm_2 <= 13'b0000000000000;
      main_stage_0_2 <= 1'b0;
      gain_3_rd_lpi_1_dfm_13 <= 13'b0000000000000;
      gain_3_ld_lpi_1_dfm_12 <= 13'b0000000000000;
      gain_3_rt_lpi_1_dfm_11 <= 13'b0000000000000;
      gain_3_lt_lpi_1_dfm_10 <= 13'b0000000000000;
      gain_2_rd_lpi_1_dfm_9 <= 13'b0000000000000;
      gain_2_ld_lpi_1_dfm_8 <= 13'b0000000000000;
      gain_2_rt_lpi_1_dfm_7 <= 13'b0000000000000;
      gain_2_lt_lpi_1_dfm_6 <= 13'b0000000000000;
      gain_1_rd_lpi_1_dfm_13 <= 13'b0000000000000;
      gain_1_ld_lpi_1_dfm_12 <= 13'b0000000000000;
      gain_1_rt_lpi_1_dfm_11 <= 13'b0000000000000;
      gain_1_lt_lpi_1_dfm_10 <= 13'b0000000000000;
      gain_0_rd_lpi_1_dfm_9 <= 13'b0000000000000;
      gain_0_ld_lpi_1_dfm_8 <= 13'b0000000000000;
      gain_0_rt_lpi_1_dfm_7 <= 13'b0000000000000;
      gain_0_lt_lpi_1_dfm_6 <= 13'b0000000000000;
      gain_Grb_d_nxt_lpi_1_dfm_4 <= 13'b0000000000000;
      gain_Grb_t_nxt_lpi_1_dfm_4 <= 13'b0000000000000;
      gain_rGb_d_nxt_lpi_1_dfm_4 <= 13'b0000000000000;
      gain_rGb_t_nxt_lpi_1_dfm_4 <= 13'b0000000000000;
    end
    else if ( core_wen ) begin
      reg_dst_rsci_oswt_cse <= ~(lsc_row_asn_sft_lpi_1_dfm_st_1 | (~ main_stage_0_2)
          | lsc_col_not_mdf_sva_st_1);
      BilinearInterpolation_tmp_t_sva_1 <= BilinearInterpolation_tmp_t_sva_1_1;
      BilinearInterpolation_acc_4_itm_1 <= MUX_v_15_2_2(({3'b000 , (BilinearInterpolation_acc_4_itm_1[11:0])}),
          BilinearInterpolation_acc_4_nl, lscRegister_eb);
      BilinearInterpolation_asn_4_itm_1 <= block_height_count_sva;
      lsc_col_not_mdf_sva_st_1 <= ~ lsc_col_acc_2_itm_13_1;
      lsc_row_asn_sft_lpi_1_dfm_st_1 <= lsc_row_asn_sft_lpi_1_dfm_st_1_mx0;
      line_is_blue_sva <= MUX_s_1_2_2(lsc_col_mux_164_nl, line_is_blue_sva_dfm_mx0,
          mux_2_cse);
      reg_src_rsci_oswt_cse <= ~ or_dcpl_5;
      lsc_col_x_lpi_1_dfm_2 <= z_out_7;
      exit_lsc_row_lpi_1_dfm <= exit_lsc_row_lpi_1_dfm_1;
      exitL_exit_lsc_col_lpi_1_dfm <= (~ lsc_col_acc_2_itm_13_1) | lsc_row_asn_sft_lpi_1_dfm_st_1_mx0;
      exitL_exit_lsc_row_sva <= exit_lsc_row_lpi_1_dfm_1;
      lsc_row_y_lpi_1_dfm_2 <= MUX_v_13_2_2(z_out_7, lsc_row_y_lpi_1_dfm_3, or_356_nl);
      main_stage_0_2 <= 1'b1;
      gain_3_rd_lpi_1_dfm_13 <= MUX1HOT_v_13_3_2(gain_3_rd_lpi_1_dfm_mx0, z_out,
          gain_Grb_d_nxt_lpi_1_dfm_5, {lsc_row_or_11_nl , lsc_row_and_59_nl , lsc_row_asn_174});
      gain_3_ld_lpi_1_dfm_12 <= MUX1HOT_v_13_3_2(gain_3_ld_lpi_1_dfm_mx0, gain_3_rd_lpi_1_dfm_mx0,
          z_out, {lsc_row_nand_7_nl , lsc_row_asn_176 , lsc_col_if_if_4_and_19_nl});
      gain_3_rt_lpi_1_dfm_11 <= MUX1HOT_v_13_3_2(gain_3_rt_lpi_1_dfm_mx0, z_out,
          gain_Grb_t_nxt_lpi_1_dfm_5, {lsc_row_nand_6_nl , lsc_col_if_if_4_and_17_nl
          , lsc_row_asn_176});
      gain_3_lt_lpi_1_dfm_10 <= MUX1HOT_v_13_3_2(gain_3_lt_lpi_1_dfm_mx0, gain_3_rt_lpi_1_dfm_mx0,
          z_out, {lsc_row_or_7_nl , lsc_row_asn_174 , lsc_row_and_44_nl});
      gain_2_rd_lpi_1_dfm_9 <= MUX1HOT_v_13_3_2(gain_2_rd_lpi_1_dfm_mx0, z_out_2,
          gain_rGb_d_nxt_lpi_1_dfm_5, {lsc_row_or_17_nl , lsc_col_and_69_nl , lsc_row_asn_174});
      gain_2_ld_lpi_1_dfm_8 <= MUX1HOT_v_13_3_2(gain_2_ld_lpi_1_dfm_mx0, gain_2_rd_lpi_1_dfm_mx0,
          z_out_2, {lsc_row_nand_3_nl , lsc_row_asn_176 , lsc_col_if_if_4_and_11_nl});
      gain_2_rt_lpi_1_dfm_7 <= MUX1HOT_v_13_3_2(gain_2_rt_lpi_1_dfm_mx0, z_out_2,
          gain_rGb_t_nxt_lpi_1_dfm_5, {lsc_row_nand_2_nl , lsc_col_if_if_4_and_9_nl
          , lsc_row_asn_176});
      gain_2_lt_lpi_1_dfm_6 <= MUX1HOT_v_13_3_2(gain_2_lt_lpi_1_dfm_mx0, gain_2_rt_lpi_1_dfm_mx0,
          z_out_2, {lsc_row_or_6_nl , lsc_row_asn_174 , lsc_col_if_if_4_and_nl});
      gain_1_rd_lpi_1_dfm_13 <= MUX1HOT_v_13_3_2(gain_1_rd_lpi_1_dfm_mx0, z_out_3,
          gain_Grb_d_nxt_lpi_1_dfm_5, {lsc_row_or_9_nl , lsc_row_and_54_nl , lsc_row_asn_178});
      gain_1_ld_lpi_1_dfm_12 <= MUX1HOT_v_13_3_2(gain_1_ld_lpi_1_dfm_mx0, gain_1_rd_lpi_1_dfm_mx0,
          z_out_3, {lsc_row_nand_5_nl , lsc_row_asn_180 , lsc_col_if_if_3_and_19_nl});
      gain_1_rt_lpi_1_dfm_11 <= MUX1HOT_v_13_3_2(gain_1_rt_lpi_1_dfm_mx0, z_out_3,
          gain_Grb_t_nxt_lpi_1_dfm_5, {lsc_row_nand_4_nl , lsc_col_if_if_3_and_17_nl
          , lsc_row_asn_180});
      gain_1_lt_lpi_1_dfm_10 <= MUX1HOT_v_13_3_2(gain_1_lt_lpi_1_dfm_mx0, gain_1_rt_lpi_1_dfm_mx0,
          z_out_3, {lsc_row_or_5_nl , lsc_row_asn_178 , lsc_row_and_37_nl});
      gain_0_rd_lpi_1_dfm_9 <= MUX1HOT_v_13_3_2(gain_0_rd_lpi_1_dfm_mx0, z_out_1,
          gain_rGb_d_nxt_lpi_1_dfm_5, {lsc_row_or_16_nl , lsc_col_and_67_nl , lsc_row_asn_178});
      gain_0_ld_lpi_1_dfm_8 <= MUX1HOT_v_13_3_2(gain_0_ld_lpi_1_dfm_mx0, gain_0_rd_lpi_1_dfm_mx0,
          z_out_1, {lsc_row_nand_1_nl , lsc_row_asn_180 , lsc_col_if_if_3_and_11_nl});
      gain_0_rt_lpi_1_dfm_7 <= MUX1HOT_v_13_3_2(gain_0_rt_lpi_1_dfm_mx0, z_out_1,
          gain_rGb_t_nxt_lpi_1_dfm_5, {lsc_row_nand_nl , lsc_col_if_if_3_and_9_nl
          , lsc_row_asn_180});
      gain_0_lt_lpi_1_dfm_6 <= MUX1HOT_v_13_3_2(gain_0_lt_lpi_1_dfm_mx0, gain_0_rt_lpi_1_dfm_mx0,
          z_out_1, {lsc_row_or_4_nl , lsc_row_asn_178 , lsc_col_if_if_3_and_nl});
      gain_Grb_d_nxt_lpi_1_dfm_4 <= MUX1HOT_v_13_3_2(gain_Grb_d_nxt_lpi_1_dfm_5,
          z_out_3, z_out, {lsc_row_or_15_nl , lsc_col_and_64_nl , lsc_col_and_65_nl});
      gain_Grb_t_nxt_lpi_1_dfm_4 <= MUX1HOT_v_13_3_2(gain_Grb_t_nxt_lpi_1_dfm_5,
          z_out_3, z_out, {lsc_row_or_14_nl , lsc_col_and_62_nl , lsc_col_and_63_nl});
      gain_rGb_d_nxt_lpi_1_dfm_4 <= MUX1HOT_v_13_3_2(gain_rGb_d_nxt_lpi_1_dfm_5,
          z_out_1, z_out_2, {lsc_row_or_13_nl , lsc_col_and_60_nl , lsc_col_and_61_nl});
      gain_rGb_t_nxt_lpi_1_dfm_4 <= MUX1HOT_v_13_3_2(gain_rGb_t_nxt_lpi_1_dfm_5,
          z_out_1, z_out_2, {lsc_row_or_12_nl , lsc_col_and_58_nl , lsc_col_and_59_nl});
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dst_rsci_idat <= 12'b000000000000;
    end
    else if ( core_wen & ((and_dcpl_7 & (~ lsc_col_not_mdf_sva_st_1) & lscRegister_eb)
        | dst_rsci_idat_mx0c1) ) begin
      dst_rsci_idat <= MUX_v_12_2_2(lsc_clip_lsc_clip_lsc_clip_nor_nl, (BilinearInterpolation_acc_4_itm_1[11:0]),
          dst_rsci_idat_mx0c1);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      block_height_count_sva <= 9'b000000000;
      block_width_count_sva <= 9'b000000000;
      block_count_rGr_sva_7_1 <= 7'b0000000;
      block_count_rGr_sva_0 <= 1'b0;
      block_count_Gbb_sva_7_1 <= 7'b0000000;
      block_count_Gbb_sva_0 <= 1'b0;
    end
    else if ( block_height_count_static_init_and_cse ) begin
      block_height_count_sva <= MUX_v_9_2_2(9'b000000000, lsc_col_if_else_6_mux_nl,
          lsc_col_if_aelse_2_lsc_col_if_if_6_nand_nl);
      block_width_count_sva <= MUX_v_9_2_2(9'b000000000, z_out_9, lsc_col_if_oelse_lsc_col_if_if_7_nor_nl);
      block_count_rGr_sva_7_1 <= block_count_rGr_sva_dfm_5_7_1;
      block_count_rGr_sva_0 <= block_count_rGr_sva_dfm_5_0;
      block_count_Gbb_sva_7_1 <= block_count_Gbb_sva_dfm_5_7_1;
      block_count_Gbb_sva_0 <= block_count_Gbb_sva_dfm_5_0;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lsc_col_if_else_1_if_lor_lpi_1_dfm <= 1'b0;
    end
    else if ( core_wen & (~(mux_6_nl | or_dcpl_12)) ) begin
      lsc_col_if_else_1_if_lor_lpi_1_dfm <= lsc_col_if_else_2_if_lor_lpi_1_dfm_mx0w0;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lsc_col_if_else_2_if_lor_lpi_1_dfm <= 1'b0;
    end
    else if ( core_wen & (~(mux_8_nl | or_dcpl_12)) ) begin
      lsc_col_if_else_2_if_lor_lpi_1_dfm <= lsc_col_if_else_2_if_lor_lpi_1_dfm_mx0w0;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lsc_col_if_if_3_else_else_else_else_else_else_else_else_land_1_lpi_1_dfm <=
          1'b0;
    end
    else if ( core_wen & (~(mux_39_nl | or_dcpl_18)) ) begin
      lsc_col_if_if_3_else_else_else_else_else_else_else_else_land_1_lpi_1_dfm <=
          lsc_col_if_if_3_else_else_else_else_else_else_else_else_land_1_lpi_1_dfm_mx0w0;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lsc_col_if_if_3_else_else_else_else_else_else_else_land_1_lpi_1_dfm <= 1'b0;
    end
    else if ( core_wen & (~(mux_81_nl | or_dcpl_18)) ) begin
      lsc_col_if_if_3_else_else_else_else_else_else_else_land_1_lpi_1_dfm <= lsc_col_if_if_3_else_else_else_else_else_else_else_land_1_lpi_1_dfm_mx0w0;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lsc_col_if_if_3_else_else_else_else_else_else_land_1_lpi_1_dfm <= 1'b0;
    end
    else if ( core_wen & (~(mux_112_nl | or_dcpl_18)) ) begin
      lsc_col_if_if_3_else_else_else_else_else_else_land_1_lpi_1_dfm <= lsc_col_if_if_3_else_else_else_else_else_else_land_1_lpi_1_dfm_mx0w0;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lsc_col_if_if_3_else_else_else_else_else_land_1_lpi_1_dfm <= 1'b0;
    end
    else if ( core_wen & (~(mux_133_nl | or_dcpl_18)) ) begin
      lsc_col_if_if_3_else_else_else_else_else_land_1_lpi_1_dfm <= lsc_col_if_if_3_else_else_else_else_else_land_1_lpi_1_dfm_mx0w0;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lsc_col_if_if_3_else_else_else_else_land_1_lpi_1_dfm <= 1'b0;
    end
    else if ( core_wen & (~(mux_151_nl | or_dcpl_18)) ) begin
      lsc_col_if_if_3_else_else_else_else_land_1_lpi_1_dfm <= lsc_col_if_if_3_else_else_else_else_land_1_lpi_1_dfm_mx0w0;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lsc_col_if_if_3_else_else_else_land_1_lpi_1_dfm <= 1'b0;
    end
    else if ( core_wen & (~(mux_161_nl | or_dcpl_18)) ) begin
      lsc_col_if_if_3_else_else_else_land_1_lpi_1_dfm <= lsc_col_if_if_3_else_else_else_land_1_lpi_1_dfm_mx0w0;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lsc_col_if_if_3_else_else_land_1_lpi_1_dfm <= 1'b0;
    end
    else if ( core_wen & (~(mux_164_nl | or_dcpl_18)) ) begin
      lsc_col_if_if_3_else_else_land_1_lpi_1_dfm <= lsc_col_if_if_3_else_else_land_1_lpi_1_dfm_mx0w0;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lsc_col_if_if_3_else_land_1_lpi_1_dfm <= 1'b0;
    end
    else if ( core_wen & (~(mux_165_nl | or_dcpl_18)) ) begin
      lsc_col_if_if_3_else_land_1_lpi_1_dfm <= lsc_col_if_if_3_else_land_1_lpi_1_dfm_mx0w0;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lsc_col_if_if_4_else_else_else_else_else_else_else_else_land_1_lpi_1_dfm <=
          1'b0;
    end
    else if ( core_wen & (~(mux_196_nl | or_dcpl_18)) ) begin
      lsc_col_if_if_4_else_else_else_else_else_else_else_else_land_1_lpi_1_dfm <=
          lsc_col_if_if_4_else_else_else_else_else_else_else_else_land_1_lpi_1_dfm_mx0w0;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lsc_col_if_if_4_else_else_else_else_else_else_else_land_1_lpi_1_dfm <= 1'b0;
    end
    else if ( core_wen & (~(mux_238_nl | or_dcpl_18)) ) begin
      lsc_col_if_if_4_else_else_else_else_else_else_else_land_1_lpi_1_dfm <= lsc_col_if_if_4_else_else_else_else_else_else_else_land_1_lpi_1_dfm_mx0w0;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lsc_col_if_if_4_else_else_else_else_else_else_land_1_lpi_1_dfm <= 1'b0;
    end
    else if ( core_wen & (~(mux_269_nl | or_dcpl_18)) ) begin
      lsc_col_if_if_4_else_else_else_else_else_else_land_1_lpi_1_dfm <= lsc_col_if_if_4_else_else_else_else_else_else_land_1_lpi_1_dfm_mx0w0;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lsc_col_if_if_4_else_else_else_else_else_land_1_lpi_1_dfm <= 1'b0;
    end
    else if ( core_wen & (~(mux_290_nl | or_dcpl_18)) ) begin
      lsc_col_if_if_4_else_else_else_else_else_land_1_lpi_1_dfm <= lsc_col_if_if_4_else_else_else_else_else_land_1_lpi_1_dfm_mx0w0;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lsc_col_if_if_4_else_else_else_else_land_1_lpi_1_dfm <= 1'b0;
    end
    else if ( core_wen & (~(mux_308_nl | or_dcpl_18)) ) begin
      lsc_col_if_if_4_else_else_else_else_land_1_lpi_1_dfm <= lsc_col_if_if_4_else_else_else_else_land_1_lpi_1_dfm_mx0w0;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lsc_col_if_if_4_else_else_else_land_1_lpi_1_dfm <= 1'b0;
    end
    else if ( core_wen & (~(mux_318_nl | or_dcpl_18)) ) begin
      lsc_col_if_if_4_else_else_else_land_1_lpi_1_dfm <= lsc_col_if_if_4_else_else_else_land_1_lpi_1_dfm_mx0w0;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lsc_col_if_if_4_else_else_land_1_lpi_1_dfm <= 1'b0;
    end
    else if ( core_wen & (~(mux_321_nl | or_dcpl_18)) ) begin
      lsc_col_if_if_4_else_else_land_1_lpi_1_dfm <= lsc_col_if_if_4_else_else_land_1_lpi_1_dfm_mx0w0;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lsc_col_if_if_4_else_land_1_lpi_1_dfm <= 1'b0;
    end
    else if ( core_wen & (~(mux_322_nl | or_dcpl_18)) ) begin
      lsc_col_if_if_4_else_land_1_lpi_1_dfm <= lsc_col_if_if_4_else_land_1_lpi_1_dfm_mx0w0;
    end
  end
  assign operator_39_true_1_nand_nl = ~((BilinearInterpolation_mul_2_itm_32_7[11:0]==12'b111111111111));
  assign nl_BilinearInterpolation_acc_3_nl = (~ (BilinearInterpolation_mul_2_itm_32_7[25:12]))
      + conv_u2s_13_14(gain_ld_lpi_1_dfm_8) + conv_u2s_1_14(operator_39_true_1_nand_nl);
  assign BilinearInterpolation_acc_3_nl = nl_BilinearInterpolation_acc_3_nl[13:0];
  assign nl_BilinearInterpolation_acc_4_nl = $signed(BilinearInterpolation_tmp_t_sva_1_1)
      - $signed(BilinearInterpolation_acc_3_nl);
  assign BilinearInterpolation_acc_4_nl = nl_BilinearInterpolation_acc_4_nl[14:0];
  assign lsc_col_if_mux_69_nl = MUX_s_1_2_2(line_is_blue_sva_dfm_mx0, (~ line_is_blue_sva_dfm_mx0),
      lsc_col_if_lsc_col_if_if_6_lsc_col_if_if_6_nor_cse_sva_1);
  assign lsc_col_mux_62_nl = MUX_s_1_2_2(line_is_blue_sva_dfm_mx0, lsc_col_if_mux_69_nl,
      lscRegister_eb);
  assign lsc_col_mux_164_nl = MUX_s_1_2_2(line_is_blue_sva_dfm_mx0, lsc_col_mux_62_nl,
      lsc_col_acc_2_itm_13_1);
  assign or_356_nl = nor_115_cse | lsc_col_acc_2_itm_13_1;
  assign lsc_row_or_11_nl = (~ lsc_col_and_tmp_1) | lsc_row_asn_sft_lpi_1_dfm_st_1_mx0
      | ((~ lsc_col_if_if_4_else_and_6_tmp_1) & lsc_col_and_56_m1c_1);
  assign lsc_row_and_59_nl = lsc_col_if_if_4_else_and_6_tmp_1 & lsc_col_and_56_m1c_1;
  assign lsc_row_nand_7_nl = ~(lsc_row_and_21_tmp_1 & (~(lsc_col_if_if_4_and_2_cse_1
      | ((~ lsc_col_if_if_4_else_else_lsc_col_if_if_4_else_else_nor_1_tmp_1) & lsc_col_if_if_4_lsc_col_if_if_4_nor_1_m1c_1)
      | ((~ lsc_col_if_if_4_else_else_else_else_and_2_tmp_1) & lsc_col_if_if_4_and_15_m1c_1))));
  assign lsc_col_if_if_4_and_19_nl = lsc_col_if_if_4_else_else_else_else_and_2_tmp_1
      & lsc_col_if_if_4_and_15_m1c_1 & lsc_row_and_21_tmp_1;
  assign lsc_row_nand_6_nl = ~(lsc_row_and_21_tmp_1 & (~((~(lsc_col_if_if_4_else_lsc_col_if_if_4_else_nor_1_tmp_1
      | lsc_col_if_if_4_land_lpi_1_dfm_1)) | ((~ lsc_col_if_if_4_else_else_else_and_3_tmp_1)
      & lsc_col_if_if_4_and_13_m1c_1))));
  assign lsc_col_if_if_4_and_17_nl = lsc_col_if_if_4_else_else_else_and_3_tmp_1 &
      lsc_col_if_if_4_and_13_m1c_1 & lsc_row_and_21_tmp_1;
  assign lsc_row_or_7_nl = (~(lsc_col_and_tmp_1 & (~(lsc_col_if_if_4_else_land_1_lpi_1_dfm_mx0
      & (~ lsc_col_if_if_4_land_lpi_1_dfm_1))))) | lsc_row_asn_sft_lpi_1_dfm_st_1_mx0
      | ((~ lsc_col_if_if_4_else_else_and_3_tmp_1) & lsc_col_and_55_m1c_1);
  assign lsc_row_and_44_nl = lsc_col_if_if_4_else_else_and_3_tmp_1 & lsc_col_and_55_m1c_1;
  assign lsc_row_or_17_nl = (~(lsc_col_and_tmp_1 & (~((~ lsc_col_if_if_4_else_and_4_tmp_1)
      & lsc_col_and_52_m1c_1)))) | lsc_row_asn_sft_lpi_1_dfm_st_1_mx0;
  assign lsc_col_and_69_nl = lsc_col_if_if_4_else_and_4_tmp_1 & lsc_col_and_52_m1c_1
      & (~ lsc_row_asn_sft_lpi_1_dfm_mx0);
  assign lsc_row_nand_3_nl = ~(lsc_row_and_21_tmp_1 & (~(lsc_col_if_if_4_and_2_cse_1
      | ((~ lsc_col_if_if_4_else_else_and_tmp_1) & lsc_col_if_if_4_lsc_col_if_if_4_nor_1_m1c_1))));
  assign lsc_col_if_if_4_and_11_nl = lsc_col_if_if_4_else_else_and_tmp_1 & lsc_col_if_if_4_lsc_col_if_if_4_nor_1_m1c_1
      & lsc_row_and_21_tmp_1;
  assign lsc_row_nand_2_nl = ~(lsc_row_and_21_tmp_1 & (lsc_col_if_if_4_else_and_tmp_1
      | lsc_col_if_if_4_land_lpi_1_dfm_1));
  assign lsc_col_if_if_4_and_9_nl = lsc_col_if_if_4_else_and_tmp_1 & (~ lsc_col_if_if_4_land_lpi_1_dfm_1)
      & lsc_row_and_21_tmp_1;
  assign lsc_row_or_6_nl = (~(lsc_col_and_tmp_1 & (lsc_col_if_if_4_else_land_1_lpi_1_dfm_mx0
      | lsc_col_if_if_4_land_lpi_1_dfm_1))) | lsc_row_asn_sft_lpi_1_dfm_st_1_mx0;
  assign lsc_col_if_if_4_and_nl = lsc_col_if_if_4_else_land_1_lpi_1_dfm_mx0 & (~
      lsc_col_if_if_4_land_lpi_1_dfm_1) & lsc_col_and_tmp_1 & (~ lsc_row_asn_sft_lpi_1_dfm_mx0);
  assign lsc_row_or_9_nl = (~ lsc_col_and_tmp_1) | lsc_row_asn_sft_lpi_1_dfm_st_1_mx0
      | ((~ lsc_col_if_if_3_else_and_6_tmp_1) & lsc_col_and_49_m1c_1);
  assign lsc_row_and_54_nl = lsc_col_if_if_3_else_and_6_tmp_1 & lsc_col_and_49_m1c_1;
  assign lsc_row_nand_5_nl = ~(lsc_row_and_21_tmp_1 & (~(lsc_col_if_if_3_and_2_cse_1
      | ((~ lsc_col_if_if_3_else_else_lsc_col_if_if_3_else_else_nor_1_tmp_1) & lsc_col_if_if_3_lsc_col_if_if_3_nor_1_m1c_1)
      | ((~ lsc_col_if_if_3_else_else_else_else_and_2_tmp_1) & lsc_col_if_if_3_and_15_m1c_1))));
  assign lsc_col_if_if_3_and_19_nl = lsc_col_if_if_3_else_else_else_else_and_2_tmp_1
      & lsc_col_if_if_3_and_15_m1c_1 & lsc_row_and_21_tmp_1;
  assign lsc_row_nand_4_nl = ~(lsc_row_and_21_tmp_1 & (~((~(lsc_col_if_if_3_else_lsc_col_if_if_3_else_nor_1_tmp_1
      | lsc_col_if_if_3_land_lpi_1_dfm_1)) | ((~ lsc_col_if_if_3_else_else_else_and_3_tmp_1)
      & lsc_col_if_if_3_and_13_m1c_1))));
  assign lsc_col_if_if_3_and_17_nl = lsc_col_if_if_3_else_else_else_and_3_tmp_1 &
      lsc_col_if_if_3_and_13_m1c_1 & lsc_row_and_21_tmp_1;
  assign lsc_row_or_5_nl = (~(lsc_col_and_tmp_1 & (~(lsc_col_if_if_3_else_land_1_lpi_1_dfm_mx0
      & (~ lsc_col_if_if_3_land_lpi_1_dfm_1))))) | lsc_row_asn_sft_lpi_1_dfm_st_1_mx0
      | ((~ lsc_col_if_if_3_else_else_and_3_tmp_1) & lsc_col_and_48_m1c_1);
  assign lsc_row_and_37_nl = lsc_col_if_if_3_else_else_and_3_tmp_1 & lsc_col_and_48_m1c_1;
  assign lsc_row_or_16_nl = (~(lsc_col_and_tmp_1 & (~((~ lsc_col_if_if_3_else_and_4_tmp_1)
      & lsc_col_and_45_m1c_1)))) | lsc_row_asn_sft_lpi_1_dfm_st_1_mx0;
  assign lsc_col_and_67_nl = lsc_col_if_if_3_else_and_4_tmp_1 & lsc_col_and_45_m1c_1
      & (~ lsc_row_asn_sft_lpi_1_dfm_mx0);
  assign lsc_row_nand_1_nl = ~(lsc_row_and_21_tmp_1 & (~(lsc_col_if_if_3_and_2_cse_1
      | ((~ lsc_col_if_if_3_else_else_and_tmp_1) & lsc_col_if_if_3_lsc_col_if_if_3_nor_1_m1c_1))));
  assign lsc_col_if_if_3_and_11_nl = lsc_col_if_if_3_else_else_and_tmp_1 & lsc_col_if_if_3_lsc_col_if_if_3_nor_1_m1c_1
      & lsc_row_and_21_tmp_1;
  assign lsc_row_nand_nl = ~(lsc_row_and_21_tmp_1 & (lsc_col_if_if_3_else_and_tmp_1
      | lsc_col_if_if_3_land_lpi_1_dfm_1));
  assign lsc_col_if_if_3_and_9_nl = lsc_col_if_if_3_else_and_tmp_1 & (~ lsc_col_if_if_3_land_lpi_1_dfm_1)
      & lsc_row_and_21_tmp_1;
  assign lsc_row_or_4_nl = (~(lsc_col_and_tmp_1 & (lsc_col_if_if_3_else_land_1_lpi_1_dfm_mx0
      | lsc_col_if_if_3_land_lpi_1_dfm_1))) | lsc_row_asn_sft_lpi_1_dfm_st_1_mx0;
  assign lsc_col_if_if_3_and_nl = lsc_col_if_if_3_else_land_1_lpi_1_dfm_mx0 & (~
      lsc_col_if_if_3_land_lpi_1_dfm_1) & lsc_col_and_tmp_1 & (~ lsc_row_asn_sft_lpi_1_dfm_mx0);
  assign lsc_row_or_15_nl = (~ lsc_col_and_43_tmp_1) | lsc_row_asn_sft_lpi_1_dfm_st_1_mx0;
  assign lsc_col_and_64_nl = (~ line_is_blue_sva_dfm_mx0) & lsc_col_and_43_tmp_1
      & (~ lsc_row_asn_sft_lpi_1_dfm_mx0);
  assign lsc_col_and_65_nl = line_is_blue_sva_dfm_mx0 & lsc_col_and_43_tmp_1 & (~
      lsc_row_asn_sft_lpi_1_dfm_mx0);
  assign lsc_row_or_14_nl = (~ lsc_col_and_42_tmp_1) | lsc_row_asn_sft_lpi_1_dfm_st_1_mx0;
  assign lsc_col_and_62_nl = (~ line_is_blue_sva_dfm_mx0) & lsc_col_and_42_tmp_1
      & (~ lsc_row_asn_sft_lpi_1_dfm_mx0);
  assign lsc_col_and_63_nl = line_is_blue_sva_dfm_mx0 & lsc_col_and_42_tmp_1 & (~
      lsc_row_asn_sft_lpi_1_dfm_mx0);
  assign lsc_row_or_13_nl = (~ lsc_col_and_41_tmp_1) | lsc_row_asn_sft_lpi_1_dfm_st_1_mx0;
  assign lsc_col_and_60_nl = (~ line_is_blue_sva_dfm_mx0) & lsc_col_and_41_tmp_1
      & (~ lsc_row_asn_sft_lpi_1_dfm_mx0);
  assign lsc_col_and_61_nl = line_is_blue_sva_dfm_mx0 & lsc_col_and_41_tmp_1 & (~
      lsc_row_asn_sft_lpi_1_dfm_mx0);
  assign lsc_row_or_12_nl = (~ lsc_col_lsc_col_nor_25_tmp_1) | lsc_row_asn_sft_lpi_1_dfm_st_1_mx0;
  assign lsc_col_and_58_nl = (~ line_is_blue_sva_dfm_mx0) & lsc_col_lsc_col_nor_25_tmp_1
      & (~ lsc_row_asn_sft_lpi_1_dfm_mx0);
  assign lsc_col_and_59_nl = line_is_blue_sva_dfm_mx0 & lsc_col_lsc_col_nor_25_tmp_1
      & (~ lsc_row_asn_sft_lpi_1_dfm_mx0);
  assign nl_operator_16_true_acc_nl =  -(operator_33_true_acc_psp_sva_1[14:12]);
  assign operator_16_true_acc_nl = nl_operator_16_true_acc_nl[2:0];
  assign lsc_clip_nor_nl = ~(MUX_v_12_2_2((operator_33_true_acc_psp_sva_1[11:0]),
      12'b111111111111, (readslicef_3_1_2(operator_16_true_acc_nl))));
  assign lsc_clip_lsc_clip_lsc_clip_nor_nl = ~(MUX_v_12_2_2(lsc_clip_nor_nl, 12'b111111111111,
      (operator_33_true_acc_psp_sva_1[15])));
  assign lsc_col_if_else_6_mux_nl = MUX_v_9_2_2(block_height_count_sva, z_out_9,
      lsc_col_if_lsc_col_if_if_6_lsc_col_if_if_6_nor_cse_sva_1);
  assign lsc_col_if_aelse_2_lsc_col_if_if_6_nand_nl = ~(lsc_col_if_aif_2_lsc_col_if_aelse_2_lsc_col_if_aelse_2_nor_cse
      & lsc_col_if_lsc_col_if_if_6_lsc_col_if_if_6_nor_cse_sva_1);
  assign lsc_col_if_oelse_lsc_col_if_if_7_nor_nl = ~(lsc_col_if_lsc_col_if_if_6_lsc_col_if_if_6_nor_cse_sva_1
      | nor_110_cse);
  assign or_17_nl = exitL_exit_lsc_row_sva | line_is_blue_sva | lsc_row_asn_sft_lpi_1_dfm_st_1
      | exitL_exit_lsc_col_lpi_1_dfm | exit_lsc_row_lpi_1_dfm;
  assign or_19_nl = line_is_blue_sva | (~ or_tmp_5);
  assign mux_5_nl = MUX_s_1_2_2(or_19_nl, (topRegister_imgPattern[1]), exitL_exit_lsc_row_sva);
  assign mux_6_nl = MUX_s_1_2_2(or_17_nl, mux_5_nl, lsc_row_acc_2_itm_13_1);
  assign or_22_nl = exitL_exit_lsc_row_sva | (~ line_is_blue_sva) | lsc_row_asn_sft_lpi_1_dfm_st_1
      | exitL_exit_lsc_col_lpi_1_dfm | exit_lsc_row_lpi_1_dfm;
  assign and_13_nl = line_is_blue_sva & or_tmp_5;
  assign mux_7_nl = MUX_s_1_2_2(and_13_nl, (topRegister_imgPattern[1]), exitL_exit_lsc_row_sva);
  assign mux_8_nl = MUX_s_1_2_2(or_22_nl, (~ mux_7_nl), lsc_row_acc_2_itm_13_1);
  assign mux_38_nl = MUX_s_1_2_2(or_385_cse, mux_37_cse, line_is_blue_sva);
  assign mux_39_nl = MUX_s_1_2_2(mux_38_nl, nand_cse, exitL_exit_lsc_row_sva);
  assign mux_80_nl = MUX_s_1_2_2(or_383_cse, mux_79_cse, line_is_blue_sva);
  assign mux_81_nl = MUX_s_1_2_2(mux_80_nl, nand_cse, exitL_exit_lsc_row_sva);
  assign mux_111_nl = MUX_s_1_2_2(or_383_cse, mux_110_cse, line_is_blue_sva);
  assign mux_112_nl = MUX_s_1_2_2(mux_111_nl, nand_cse, exitL_exit_lsc_row_sva);
  assign mux_131_nl = MUX_s_1_2_2(nor_110_cse, mux_130_cse, line_is_blue_sva);
  assign or_133_nl = lsc_row_asn_sft_lpi_1_dfm_st_1 | mux_131_nl;
  assign mux_132_nl = MUX_s_1_2_2(or_133_nl, nand_33_cse, or_tmp_9);
  assign mux_133_nl = MUX_s_1_2_2(mux_132_nl, nand_cse, exitL_exit_lsc_row_sva);
  assign mux_149_nl = MUX_s_1_2_2(nor_110_cse, and_19_cse, line_is_blue_sva);
  assign or_159_nl = lsc_row_asn_sft_lpi_1_dfm_st_1 | mux_149_nl;
  assign mux_150_nl = MUX_s_1_2_2(or_159_nl, nand_33_cse, or_tmp_9);
  assign mux_151_nl = MUX_s_1_2_2(mux_150_nl, nand_cse, exitL_exit_lsc_row_sva);
  assign mux_159_nl = MUX_s_1_2_2(nor_110_cse, and_22_cse, line_is_blue_sva);
  assign or_174_nl = lsc_row_asn_sft_lpi_1_dfm_st_1 | mux_159_nl;
  assign mux_160_nl = MUX_s_1_2_2(or_174_nl, nand_33_cse, or_tmp_9);
  assign mux_161_nl = MUX_s_1_2_2(mux_160_nl, nand_cse, exitL_exit_lsc_row_sva);
  assign mux_162_nl = MUX_s_1_2_2(nor_110_cse, and_72_cse, line_is_blue_sva);
  assign or_184_nl = lsc_row_asn_sft_lpi_1_dfm_st_1 | mux_162_nl;
  assign mux_163_nl = MUX_s_1_2_2(or_184_nl, nand_33_cse, or_tmp_9);
  assign mux_164_nl = MUX_s_1_2_2(mux_163_nl, nand_cse, exitL_exit_lsc_row_sva);
  assign or_190_nl = exitL_exit_lsc_row_sva | (~(line_is_blue_sva | lsc_col_if_else_2_else_if_unequal_1_tmp
      | (operator_9_false_2_acc_tmp[9]))) | lsc_row_asn_sft_lpi_1_dfm_st_1 | exitL_exit_lsc_col_lpi_1_dfm
      | exit_lsc_row_lpi_1_dfm;
  assign mux_165_nl = MUX_s_1_2_2(or_190_nl, (~ mux_tmp_152), lsc_row_acc_2_itm_13_1);
  assign mux_195_nl = MUX_s_1_2_2(mux_37_cse, or_385_cse, line_is_blue_sva);
  assign mux_196_nl = MUX_s_1_2_2(mux_195_nl, nand_26_cse, exitL_exit_lsc_row_sva);
  assign mux_237_nl = MUX_s_1_2_2(mux_79_cse, or_383_cse, line_is_blue_sva);
  assign mux_238_nl = MUX_s_1_2_2(mux_237_nl, nand_26_cse, exitL_exit_lsc_row_sva);
  assign mux_268_nl = MUX_s_1_2_2(mux_110_cse, or_383_cse, line_is_blue_sva);
  assign mux_269_nl = MUX_s_1_2_2(mux_268_nl, nand_26_cse, exitL_exit_lsc_row_sva);
  assign mux_288_nl = MUX_s_1_2_2(mux_130_cse, nor_110_cse, line_is_blue_sva);
  assign or_299_nl = lsc_row_asn_sft_lpi_1_dfm_st_1 | mux_288_nl;
  assign mux_289_nl = MUX_s_1_2_2(or_299_nl, nand_22_cse, or_tmp_9);
  assign mux_290_nl = MUX_s_1_2_2(mux_289_nl, nand_26_cse, exitL_exit_lsc_row_sva);
  assign mux_306_nl = MUX_s_1_2_2(and_19_cse, nor_110_cse, line_is_blue_sva);
  assign or_324_nl = lsc_row_asn_sft_lpi_1_dfm_st_1 | mux_306_nl;
  assign mux_307_nl = MUX_s_1_2_2(or_324_nl, nand_22_cse, or_tmp_9);
  assign mux_308_nl = MUX_s_1_2_2(mux_307_nl, nand_26_cse, exitL_exit_lsc_row_sva);
  assign mux_316_nl = MUX_s_1_2_2(and_22_cse, nor_110_cse, line_is_blue_sva);
  assign or_336_nl = lsc_row_asn_sft_lpi_1_dfm_st_1 | mux_316_nl;
  assign mux_317_nl = MUX_s_1_2_2(or_336_nl, nand_22_cse, or_tmp_9);
  assign mux_318_nl = MUX_s_1_2_2(mux_317_nl, nand_26_cse, exitL_exit_lsc_row_sva);
  assign mux_319_nl = MUX_s_1_2_2(and_72_cse, nor_110_cse, line_is_blue_sva);
  assign or_346_nl = lsc_row_asn_sft_lpi_1_dfm_st_1 | mux_319_nl;
  assign mux_320_nl = MUX_s_1_2_2(or_346_nl, nand_22_cse, or_tmp_9);
  assign mux_321_nl = MUX_s_1_2_2(mux_320_nl, nand_26_cse, exitL_exit_lsc_row_sva);
  assign or_352_nl = exitL_exit_lsc_row_sva | (~((~ line_is_blue_sva) | lsc_col_if_else_2_else_if_unequal_1_tmp
      | (operator_9_false_2_acc_tmp[9]))) | lsc_row_asn_sft_lpi_1_dfm_st_1 | exitL_exit_lsc_col_lpi_1_dfm
      | exit_lsc_row_lpi_1_dfm;
  assign mux_322_nl = MUX_s_1_2_2(or_352_nl, (~ mux_tmp_309), lsc_row_acc_2_itm_13_1);
  assign operator_8_false_1_mux_1_nl = MUX_v_4_2_2((block_count_rGr_sva_dfm_5_7_1[6:3]),
      (block_count_Gbb_sva_dfm_5_7_1[6:3]), operator_8_false_1_or_1_ssc);
  assign operator_8_false_1_nor_1_nl = ~(and_dcpl_62 | and_dcpl_67);
  assign operator_8_false_1_operator_8_false_1_and_1_nl = MUX_v_4_2_2(4'b0000, operator_8_false_1_mux_1_nl,
      operator_8_false_1_nor_1_nl);
  assign operator_8_false_1_or_5_nl = and_dcpl_64 | and_dcpl_66;
  assign operator_8_false_1_mux1h_2_nl = MUX1HOT_v_4_4_2((block_count_rGr_sva_dfm_5_7_1[6:3]),
      ({(block_count_rGr_sva_dfm_5_7_1[2:0]) , block_count_rGr_sva_dfm_5_0}), (block_count_Gbb_sva_dfm_5_7_1[6:3]),
      ({(block_count_Gbb_sva_dfm_5_7_1[2:0]) , block_count_Gbb_sva_dfm_5_0}), {and_dcpl_62
      , operator_8_false_1_or_5_nl , and_dcpl_67 , operator_8_false_1_or_1_ssc});
  assign operator_8_false_1_or_6_nl = and_dcpl_66 | and_dcpl_69;
  assign operator_8_false_1_operator_8_false_1_or_1_nl = MUX_v_3_2_2(({{2{operator_8_false_1_or_3_seb}},
      operator_8_false_1_or_3_seb}), 3'b111, operator_8_false_1_or_6_nl);
  assign nl_z_out_4 = ({operator_8_false_1_operator_8_false_1_and_1_nl , operator_8_false_1_mux1h_2_nl})
      + conv_s2u_5_8({operator_8_false_1_or_3_seb , operator_8_false_1_operator_8_false_1_or_1_nl
      , 1'b1});
  assign z_out_4 = nl_z_out_4[7:0];
  assign nl_z_out_5 = operator_8_false_mux_cse + 7'b0000001;
  assign z_out_5 = nl_z_out_5[6:0];
  assign operator_9_false_1_mux1h_3_nl = MUX1HOT_v_7_3_2((lscRegister_blockHeight[8:2]),
      block_count_rGr_sva_7_1, block_count_Gbb_sva_7_1, {lsc_col_if_lsc_col_if_if_6_lsc_col_if_if_6_nor_cse_sva_1
      , and_178_ssc , and_179_ssc});
  assign operator_9_false_1_mux1h_4_nl = MUX1HOT_s_1_3_2((lscRegister_blockHeight[1]),
      block_count_rGr_sva_0, block_count_Gbb_sva_0, {lsc_col_if_lsc_col_if_if_6_lsc_col_if_if_6_nor_cse_sva_1
      , and_178_ssc , and_179_ssc});
  assign nl_z_out_6 = conv_u2u_8_9({operator_9_false_1_mux1h_3_nl , operator_9_false_1_mux1h_4_nl})
      + conv_s2u_2_9({lsc_col_if_lsc_col_if_if_6_lsc_col_if_if_6_nor_cse_sva_1 ,
      1'b1});
  assign z_out_6 = nl_z_out_6[8:0];
  assign lsc_col_mux_166_nl = MUX_v_13_2_2(lsc_row_y_lpi_1_dfm_3, lsc_col_x_lpi_1_dfm_3,
      lsc_col_acc_2_itm_13_1);
  assign nl_z_out_7 = lsc_col_mux_166_nl + 13'b0000000000001;
  assign z_out_7 = nl_z_out_7[12:0];
  assign operator_8_false_mux_1_nl = MUX_v_7_2_2(block_count_Gbb_sva_dfm_5_7_1, block_count_rGr_sva_dfm_5_7_1,
      line_is_blue_sva);
  assign nl_z_out_8 = operator_8_false_mux_1_nl + 7'b1111111;
  assign z_out_8 = nl_z_out_8[6:0];
  assign lsc_col_if_else_6_if_mux_1_nl = MUX_v_9_2_2(block_height_count_sva, block_width_count_sva,
      or_dcpl_64);
  assign nl_z_out_9 = lsc_col_if_else_6_if_mux_1_nl + 9'b000000001;
  assign z_out_9 = nl_z_out_9[8:0];
  assign operator_8_false_mux_2_nl = MUX_s_1_2_2(block_count_rGr_sva_0, block_count_Gbb_sva_0,
      line_is_blue_sva);
  assign nl_z_out_10 = ({operator_8_false_mux_cse , operator_8_false_mux_2_nl}) +
      8'b11110001;
  assign z_out_10 = nl_z_out_10[7:0];
  assign operator_8_false_9_mux_2_nl = MUX_v_7_2_2(block_count_rGr_sva_dfm_5_7_1,
      block_count_Gbb_sva_dfm_5_7_1, mux_ssc);
  assign operator_8_false_9_mux_3_nl = MUX_s_1_2_2(block_count_rGr_sva_dfm_5_0, block_count_Gbb_sva_dfm_5_0,
      mux_ssc);
  assign nl_z_out_11 = ({operator_8_false_9_mux_2_nl , operator_8_false_9_mux_3_nl})
      + 8'b00010001;
  assign z_out_11 = nl_z_out_11[7:0];
  assign lsc_col_if_if_4_else_else_else_else_else_else_else_else_if_mux1h_224_nl
      = MUX1HOT_v_4_5_2((z_out_4[3:0]), (z_out_4[7:4]), (z_out_8[6:3]), (z_out_11[7:4]),
      (block_count_Gbb_sva_dfm_5_7_1[6:3]), {and_124_ssc , lsc_col_if_if_4_else_else_else_else_else_else_else_else_if_or_ssc
      , and_130_ssc , and_131_cse , and_132_cse});
  assign lsc_col_if_if_4_else_else_else_else_else_else_else_else_if_or_3_nl = and_124_ssc
      | and_132_cse;
  assign lsc_col_if_if_4_else_else_else_else_else_else_else_else_if_mux1h_225_nl
      = MUX1HOT_v_3_4_2((block_count_Gbb_sva_dfm_5_7_1[2:0]), (z_out_4[3:1]), (z_out_8[2:0]),
      (z_out_11[3:1]), {lsc_col_if_if_4_else_else_else_else_else_else_else_else_if_or_3_nl
      , lsc_col_if_if_4_else_else_else_else_else_else_else_else_if_or_ssc , and_130_ssc
      , and_131_cse});
  assign lsc_col_if_if_4_else_else_else_else_else_else_else_else_if_or_4_nl = and_124_ssc
      | and_130_ssc | and_132_cse;
  assign lsc_col_if_if_4_else_else_else_else_else_else_else_else_if_mux1h_226_nl
      = MUX1HOT_s_1_3_2(block_count_Gbb_sva_dfm_5_0, (z_out_4[0]), (z_out_11[0]),
      {lsc_col_if_if_4_else_else_else_else_else_else_else_else_if_or_4_nl , lsc_col_if_if_4_else_else_else_else_else_else_else_else_if_or_ssc
      , and_131_cse});
  assign z_out = MUX_v_13_221_2((lscRegister_bGain[12:0]), (lscRegister_bGain[25:13]),
      (lscRegister_bGain[38:26]), (lscRegister_bGain[51:39]), (lscRegister_bGain[64:52]),
      (lscRegister_bGain[77:65]), (lscRegister_bGain[90:78]), (lscRegister_bGain[103:91]),
      (lscRegister_bGain[116:104]), (lscRegister_bGain[129:117]), (lscRegister_bGain[142:130]),
      (lscRegister_bGain[155:143]), (lscRegister_bGain[168:156]), (lscRegister_bGain[181:169]),
      (lscRegister_bGain[194:182]), (lscRegister_bGain[207:195]), (lscRegister_bGain[220:208]),
      (lscRegister_bGain[233:221]), (lscRegister_bGain[246:234]), (lscRegister_bGain[259:247]),
      (lscRegister_bGain[272:260]), (lscRegister_bGain[285:273]), (lscRegister_bGain[298:286]),
      (lscRegister_bGain[311:299]), (lscRegister_bGain[324:312]), (lscRegister_bGain[337:325]),
      (lscRegister_bGain[350:338]), (lscRegister_bGain[363:351]), (lscRegister_bGain[376:364]),
      (lscRegister_bGain[389:377]), (lscRegister_bGain[402:390]), (lscRegister_bGain[415:403]),
      (lscRegister_bGain[428:416]), (lscRegister_bGain[441:429]), (lscRegister_bGain[454:442]),
      (lscRegister_bGain[467:455]), (lscRegister_bGain[480:468]), (lscRegister_bGain[493:481]),
      (lscRegister_bGain[506:494]), (lscRegister_bGain[519:507]), (lscRegister_bGain[532:520]),
      (lscRegister_bGain[545:533]), (lscRegister_bGain[558:546]), (lscRegister_bGain[571:559]),
      (lscRegister_bGain[584:572]), (lscRegister_bGain[597:585]), (lscRegister_bGain[610:598]),
      (lscRegister_bGain[623:611]), (lscRegister_bGain[636:624]), (lscRegister_bGain[649:637]),
      (lscRegister_bGain[662:650]), (lscRegister_bGain[675:663]), (lscRegister_bGain[688:676]),
      (lscRegister_bGain[701:689]), (lscRegister_bGain[714:702]), (lscRegister_bGain[727:715]),
      (lscRegister_bGain[740:728]), (lscRegister_bGain[753:741]), (lscRegister_bGain[766:754]),
      (lscRegister_bGain[779:767]), (lscRegister_bGain[792:780]), (lscRegister_bGain[805:793]),
      (lscRegister_bGain[818:806]), (lscRegister_bGain[831:819]), (lscRegister_bGain[844:832]),
      (lscRegister_bGain[857:845]), (lscRegister_bGain[870:858]), (lscRegister_bGain[883:871]),
      (lscRegister_bGain[896:884]), (lscRegister_bGain[909:897]), (lscRegister_bGain[922:910]),
      (lscRegister_bGain[935:923]), (lscRegister_bGain[948:936]), (lscRegister_bGain[961:949]),
      (lscRegister_bGain[974:962]), (lscRegister_bGain[987:975]), (lscRegister_bGain[1000:988]),
      (lscRegister_bGain[1013:1001]), (lscRegister_bGain[1026:1014]), (lscRegister_bGain[1039:1027]),
      (lscRegister_bGain[1052:1040]), (lscRegister_bGain[1065:1053]), (lscRegister_bGain[1078:1066]),
      (lscRegister_bGain[1091:1079]), (lscRegister_bGain[1104:1092]), (lscRegister_bGain[1117:1105]),
      (lscRegister_bGain[1130:1118]), (lscRegister_bGain[1143:1131]), (lscRegister_bGain[1156:1144]),
      (lscRegister_bGain[1169:1157]), (lscRegister_bGain[1182:1170]), (lscRegister_bGain[1195:1183]),
      (lscRegister_bGain[1208:1196]), (lscRegister_bGain[1221:1209]), (lscRegister_bGain[1234:1222]),
      (lscRegister_bGain[1247:1235]), (lscRegister_bGain[1260:1248]), (lscRegister_bGain[1273:1261]),
      (lscRegister_bGain[1286:1274]), (lscRegister_bGain[1299:1287]), (lscRegister_bGain[1312:1300]),
      (lscRegister_bGain[1325:1313]), (lscRegister_bGain[1338:1326]), (lscRegister_bGain[1351:1339]),
      (lscRegister_bGain[1364:1352]), (lscRegister_bGain[1377:1365]), (lscRegister_bGain[1390:1378]),
      (lscRegister_bGain[1403:1391]), (lscRegister_bGain[1416:1404]), (lscRegister_bGain[1429:1417]),
      (lscRegister_bGain[1442:1430]), (lscRegister_bGain[1455:1443]), (lscRegister_bGain[1468:1456]),
      (lscRegister_bGain[1481:1469]), (lscRegister_bGain[1494:1482]), (lscRegister_bGain[1507:1495]),
      (lscRegister_bGain[1520:1508]), (lscRegister_bGain[1533:1521]), (lscRegister_bGain[1546:1534]),
      (lscRegister_bGain[1559:1547]), (lscRegister_bGain[1572:1560]), (lscRegister_bGain[1585:1573]),
      (lscRegister_bGain[1598:1586]), (lscRegister_bGain[1611:1599]), (lscRegister_bGain[1624:1612]),
      (lscRegister_bGain[1637:1625]), (lscRegister_bGain[1650:1638]), (lscRegister_bGain[1663:1651]),
      (lscRegister_bGain[1676:1664]), (lscRegister_bGain[1689:1677]), (lscRegister_bGain[1702:1690]),
      (lscRegister_bGain[1715:1703]), (lscRegister_bGain[1728:1716]), (lscRegister_bGain[1741:1729]),
      (lscRegister_bGain[1754:1742]), (lscRegister_bGain[1767:1755]), (lscRegister_bGain[1780:1768]),
      (lscRegister_bGain[1793:1781]), (lscRegister_bGain[1806:1794]), (lscRegister_bGain[1819:1807]),
      (lscRegister_bGain[1832:1820]), (lscRegister_bGain[1845:1833]), (lscRegister_bGain[1858:1846]),
      (lscRegister_bGain[1871:1859]), (lscRegister_bGain[1884:1872]), (lscRegister_bGain[1897:1885]),
      (lscRegister_bGain[1910:1898]), (lscRegister_bGain[1923:1911]), (lscRegister_bGain[1936:1924]),
      (lscRegister_bGain[1949:1937]), (lscRegister_bGain[1962:1950]), (lscRegister_bGain[1975:1963]),
      (lscRegister_bGain[1988:1976]), (lscRegister_bGain[2001:1989]), (lscRegister_bGain[2014:2002]),
      (lscRegister_bGain[2027:2015]), (lscRegister_bGain[2040:2028]), (lscRegister_bGain[2053:2041]),
      (lscRegister_bGain[2066:2054]), (lscRegister_bGain[2079:2067]), (lscRegister_bGain[2092:2080]),
      (lscRegister_bGain[2105:2093]), (lscRegister_bGain[2118:2106]), (lscRegister_bGain[2131:2119]),
      (lscRegister_bGain[2144:2132]), (lscRegister_bGain[2157:2145]), (lscRegister_bGain[2170:2158]),
      (lscRegister_bGain[2183:2171]), (lscRegister_bGain[2196:2184]), (lscRegister_bGain[2209:2197]),
      (lscRegister_bGain[2222:2210]), (lscRegister_bGain[2235:2223]), (lscRegister_bGain[2248:2236]),
      (lscRegister_bGain[2261:2249]), (lscRegister_bGain[2274:2262]), (lscRegister_bGain[2287:2275]),
      (lscRegister_bGain[2300:2288]), (lscRegister_bGain[2313:2301]), (lscRegister_bGain[2326:2314]),
      (lscRegister_bGain[2339:2327]), (lscRegister_bGain[2352:2340]), (lscRegister_bGain[2365:2353]),
      (lscRegister_bGain[2378:2366]), (lscRegister_bGain[2391:2379]), (lscRegister_bGain[2404:2392]),
      (lscRegister_bGain[2417:2405]), (lscRegister_bGain[2430:2418]), (lscRegister_bGain[2443:2431]),
      (lscRegister_bGain[2456:2444]), (lscRegister_bGain[2469:2457]), (lscRegister_bGain[2482:2470]),
      (lscRegister_bGain[2495:2483]), (lscRegister_bGain[2508:2496]), (lscRegister_bGain[2521:2509]),
      (lscRegister_bGain[2534:2522]), (lscRegister_bGain[2547:2535]), (lscRegister_bGain[2560:2548]),
      (lscRegister_bGain[2573:2561]), (lscRegister_bGain[2586:2574]), (lscRegister_bGain[2599:2587]),
      (lscRegister_bGain[2612:2600]), (lscRegister_bGain[2625:2613]), (lscRegister_bGain[2638:2626]),
      (lscRegister_bGain[2651:2639]), (lscRegister_bGain[2664:2652]), (lscRegister_bGain[2677:2665]),
      (lscRegister_bGain[2690:2678]), (lscRegister_bGain[2703:2691]), (lscRegister_bGain[2716:2704]),
      (lscRegister_bGain[2729:2717]), (lscRegister_bGain[2742:2730]), (lscRegister_bGain[2755:2743]),
      (lscRegister_bGain[2768:2756]), (lscRegister_bGain[2781:2769]), (lscRegister_bGain[2794:2782]),
      (lscRegister_bGain[2807:2795]), (lscRegister_bGain[2820:2808]), (lscRegister_bGain[2833:2821]),
      (lscRegister_bGain[2846:2834]), (lscRegister_bGain[2859:2847]), (lscRegister_bGain[2872:2860]),
      {lsc_col_if_if_4_else_else_else_else_else_else_else_else_if_mux1h_224_nl ,
      lsc_col_if_if_4_else_else_else_else_else_else_else_else_if_mux1h_225_nl , lsc_col_if_if_4_else_else_else_else_else_else_else_else_if_mux1h_226_nl});
  assign lsc_col_if_if_3_else_else_else_else_if_mux1h_224_nl = MUX1HOT_v_4_5_2((z_out_4[3:0]),
      (z_out_4[7:4]), (z_out_8[6:3]), (z_out_11[7:4]), (block_count_rGr_sva_dfm_5_7_1[6:3]),
      {and_134_ssc , lsc_col_if_if_3_else_else_else_else_if_or_ssc , and_142_ssc
      , and_143_cse , and_144_cse});
  assign lsc_col_if_if_3_else_else_else_else_if_or_3_nl = and_134_ssc | and_144_cse;
  assign lsc_col_if_if_3_else_else_else_else_if_mux1h_225_nl = MUX1HOT_v_3_4_2((block_count_rGr_sva_dfm_5_7_1[2:0]),
      (z_out_4[3:1]), (z_out_8[2:0]), (z_out_11[3:1]), {lsc_col_if_if_3_else_else_else_else_if_or_3_nl
      , lsc_col_if_if_3_else_else_else_else_if_or_ssc , and_142_ssc , and_143_cse});
  assign lsc_col_if_if_3_else_else_else_else_if_or_4_nl = and_134_ssc | and_142_ssc
      | and_144_cse;
  assign lsc_col_if_if_3_else_else_else_else_if_mux1h_226_nl = MUX1HOT_s_1_3_2(block_count_rGr_sva_dfm_5_0,
      (z_out_4[0]), (z_out_11[0]), {lsc_col_if_if_3_else_else_else_else_if_or_4_nl
      , lsc_col_if_if_3_else_else_else_else_if_or_ssc , and_143_cse});
  assign z_out_1 = MUX_v_13_221_2((lscRegister_rGain[12:0]), (lscRegister_rGain[25:13]),
      (lscRegister_rGain[38:26]), (lscRegister_rGain[51:39]), (lscRegister_rGain[64:52]),
      (lscRegister_rGain[77:65]), (lscRegister_rGain[90:78]), (lscRegister_rGain[103:91]),
      (lscRegister_rGain[116:104]), (lscRegister_rGain[129:117]), (lscRegister_rGain[142:130]),
      (lscRegister_rGain[155:143]), (lscRegister_rGain[168:156]), (lscRegister_rGain[181:169]),
      (lscRegister_rGain[194:182]), (lscRegister_rGain[207:195]), (lscRegister_rGain[220:208]),
      (lscRegister_rGain[233:221]), (lscRegister_rGain[246:234]), (lscRegister_rGain[259:247]),
      (lscRegister_rGain[272:260]), (lscRegister_rGain[285:273]), (lscRegister_rGain[298:286]),
      (lscRegister_rGain[311:299]), (lscRegister_rGain[324:312]), (lscRegister_rGain[337:325]),
      (lscRegister_rGain[350:338]), (lscRegister_rGain[363:351]), (lscRegister_rGain[376:364]),
      (lscRegister_rGain[389:377]), (lscRegister_rGain[402:390]), (lscRegister_rGain[415:403]),
      (lscRegister_rGain[428:416]), (lscRegister_rGain[441:429]), (lscRegister_rGain[454:442]),
      (lscRegister_rGain[467:455]), (lscRegister_rGain[480:468]), (lscRegister_rGain[493:481]),
      (lscRegister_rGain[506:494]), (lscRegister_rGain[519:507]), (lscRegister_rGain[532:520]),
      (lscRegister_rGain[545:533]), (lscRegister_rGain[558:546]), (lscRegister_rGain[571:559]),
      (lscRegister_rGain[584:572]), (lscRegister_rGain[597:585]), (lscRegister_rGain[610:598]),
      (lscRegister_rGain[623:611]), (lscRegister_rGain[636:624]), (lscRegister_rGain[649:637]),
      (lscRegister_rGain[662:650]), (lscRegister_rGain[675:663]), (lscRegister_rGain[688:676]),
      (lscRegister_rGain[701:689]), (lscRegister_rGain[714:702]), (lscRegister_rGain[727:715]),
      (lscRegister_rGain[740:728]), (lscRegister_rGain[753:741]), (lscRegister_rGain[766:754]),
      (lscRegister_rGain[779:767]), (lscRegister_rGain[792:780]), (lscRegister_rGain[805:793]),
      (lscRegister_rGain[818:806]), (lscRegister_rGain[831:819]), (lscRegister_rGain[844:832]),
      (lscRegister_rGain[857:845]), (lscRegister_rGain[870:858]), (lscRegister_rGain[883:871]),
      (lscRegister_rGain[896:884]), (lscRegister_rGain[909:897]), (lscRegister_rGain[922:910]),
      (lscRegister_rGain[935:923]), (lscRegister_rGain[948:936]), (lscRegister_rGain[961:949]),
      (lscRegister_rGain[974:962]), (lscRegister_rGain[987:975]), (lscRegister_rGain[1000:988]),
      (lscRegister_rGain[1013:1001]), (lscRegister_rGain[1026:1014]), (lscRegister_rGain[1039:1027]),
      (lscRegister_rGain[1052:1040]), (lscRegister_rGain[1065:1053]), (lscRegister_rGain[1078:1066]),
      (lscRegister_rGain[1091:1079]), (lscRegister_rGain[1104:1092]), (lscRegister_rGain[1117:1105]),
      (lscRegister_rGain[1130:1118]), (lscRegister_rGain[1143:1131]), (lscRegister_rGain[1156:1144]),
      (lscRegister_rGain[1169:1157]), (lscRegister_rGain[1182:1170]), (lscRegister_rGain[1195:1183]),
      (lscRegister_rGain[1208:1196]), (lscRegister_rGain[1221:1209]), (lscRegister_rGain[1234:1222]),
      (lscRegister_rGain[1247:1235]), (lscRegister_rGain[1260:1248]), (lscRegister_rGain[1273:1261]),
      (lscRegister_rGain[1286:1274]), (lscRegister_rGain[1299:1287]), (lscRegister_rGain[1312:1300]),
      (lscRegister_rGain[1325:1313]), (lscRegister_rGain[1338:1326]), (lscRegister_rGain[1351:1339]),
      (lscRegister_rGain[1364:1352]), (lscRegister_rGain[1377:1365]), (lscRegister_rGain[1390:1378]),
      (lscRegister_rGain[1403:1391]), (lscRegister_rGain[1416:1404]), (lscRegister_rGain[1429:1417]),
      (lscRegister_rGain[1442:1430]), (lscRegister_rGain[1455:1443]), (lscRegister_rGain[1468:1456]),
      (lscRegister_rGain[1481:1469]), (lscRegister_rGain[1494:1482]), (lscRegister_rGain[1507:1495]),
      (lscRegister_rGain[1520:1508]), (lscRegister_rGain[1533:1521]), (lscRegister_rGain[1546:1534]),
      (lscRegister_rGain[1559:1547]), (lscRegister_rGain[1572:1560]), (lscRegister_rGain[1585:1573]),
      (lscRegister_rGain[1598:1586]), (lscRegister_rGain[1611:1599]), (lscRegister_rGain[1624:1612]),
      (lscRegister_rGain[1637:1625]), (lscRegister_rGain[1650:1638]), (lscRegister_rGain[1663:1651]),
      (lscRegister_rGain[1676:1664]), (lscRegister_rGain[1689:1677]), (lscRegister_rGain[1702:1690]),
      (lscRegister_rGain[1715:1703]), (lscRegister_rGain[1728:1716]), (lscRegister_rGain[1741:1729]),
      (lscRegister_rGain[1754:1742]), (lscRegister_rGain[1767:1755]), (lscRegister_rGain[1780:1768]),
      (lscRegister_rGain[1793:1781]), (lscRegister_rGain[1806:1794]), (lscRegister_rGain[1819:1807]),
      (lscRegister_rGain[1832:1820]), (lscRegister_rGain[1845:1833]), (lscRegister_rGain[1858:1846]),
      (lscRegister_rGain[1871:1859]), (lscRegister_rGain[1884:1872]), (lscRegister_rGain[1897:1885]),
      (lscRegister_rGain[1910:1898]), (lscRegister_rGain[1923:1911]), (lscRegister_rGain[1936:1924]),
      (lscRegister_rGain[1949:1937]), (lscRegister_rGain[1962:1950]), (lscRegister_rGain[1975:1963]),
      (lscRegister_rGain[1988:1976]), (lscRegister_rGain[2001:1989]), (lscRegister_rGain[2014:2002]),
      (lscRegister_rGain[2027:2015]), (lscRegister_rGain[2040:2028]), (lscRegister_rGain[2053:2041]),
      (lscRegister_rGain[2066:2054]), (lscRegister_rGain[2079:2067]), (lscRegister_rGain[2092:2080]),
      (lscRegister_rGain[2105:2093]), (lscRegister_rGain[2118:2106]), (lscRegister_rGain[2131:2119]),
      (lscRegister_rGain[2144:2132]), (lscRegister_rGain[2157:2145]), (lscRegister_rGain[2170:2158]),
      (lscRegister_rGain[2183:2171]), (lscRegister_rGain[2196:2184]), (lscRegister_rGain[2209:2197]),
      (lscRegister_rGain[2222:2210]), (lscRegister_rGain[2235:2223]), (lscRegister_rGain[2248:2236]),
      (lscRegister_rGain[2261:2249]), (lscRegister_rGain[2274:2262]), (lscRegister_rGain[2287:2275]),
      (lscRegister_rGain[2300:2288]), (lscRegister_rGain[2313:2301]), (lscRegister_rGain[2326:2314]),
      (lscRegister_rGain[2339:2327]), (lscRegister_rGain[2352:2340]), (lscRegister_rGain[2365:2353]),
      (lscRegister_rGain[2378:2366]), (lscRegister_rGain[2391:2379]), (lscRegister_rGain[2404:2392]),
      (lscRegister_rGain[2417:2405]), (lscRegister_rGain[2430:2418]), (lscRegister_rGain[2443:2431]),
      (lscRegister_rGain[2456:2444]), (lscRegister_rGain[2469:2457]), (lscRegister_rGain[2482:2470]),
      (lscRegister_rGain[2495:2483]), (lscRegister_rGain[2508:2496]), (lscRegister_rGain[2521:2509]),
      (lscRegister_rGain[2534:2522]), (lscRegister_rGain[2547:2535]), (lscRegister_rGain[2560:2548]),
      (lscRegister_rGain[2573:2561]), (lscRegister_rGain[2586:2574]), (lscRegister_rGain[2599:2587]),
      (lscRegister_rGain[2612:2600]), (lscRegister_rGain[2625:2613]), (lscRegister_rGain[2638:2626]),
      (lscRegister_rGain[2651:2639]), (lscRegister_rGain[2664:2652]), (lscRegister_rGain[2677:2665]),
      (lscRegister_rGain[2690:2678]), (lscRegister_rGain[2703:2691]), (lscRegister_rGain[2716:2704]),
      (lscRegister_rGain[2729:2717]), (lscRegister_rGain[2742:2730]), (lscRegister_rGain[2755:2743]),
      (lscRegister_rGain[2768:2756]), (lscRegister_rGain[2781:2769]), (lscRegister_rGain[2794:2782]),
      (lscRegister_rGain[2807:2795]), (lscRegister_rGain[2820:2808]), (lscRegister_rGain[2833:2821]),
      (lscRegister_rGain[2846:2834]), (lscRegister_rGain[2859:2847]), (lscRegister_rGain[2872:2860]),
      {lsc_col_if_if_3_else_else_else_else_if_mux1h_224_nl , lsc_col_if_if_3_else_else_else_else_if_mux1h_225_nl
      , lsc_col_if_if_3_else_else_else_else_if_mux1h_226_nl});
  assign lsc_col_if_if_4_else_else_else_else_if_mux1h_224_nl = MUX1HOT_v_4_5_2((z_out_4[3:0]),
      (z_out_4[7:4]), (z_out_8[6:3]), (z_out_11[7:4]), (block_count_Gbb_sva_dfm_5_7_1[6:3]),
      {and_146_ssc , lsc_col_if_if_4_else_else_else_else_if_or_ssc , and_154_ssc
      , and_131_cse , and_132_cse});
  assign lsc_col_if_if_4_else_else_else_else_if_or_3_nl = and_146_ssc | and_132_cse;
  assign lsc_col_if_if_4_else_else_else_else_if_mux1h_225_nl = MUX1HOT_v_3_4_2((block_count_Gbb_sva_dfm_5_7_1[2:0]),
      (z_out_4[3:1]), (z_out_8[2:0]), (z_out_11[3:1]), {lsc_col_if_if_4_else_else_else_else_if_or_3_nl
      , lsc_col_if_if_4_else_else_else_else_if_or_ssc , and_154_ssc , and_131_cse});
  assign lsc_col_if_if_4_else_else_else_else_if_or_4_nl = and_146_ssc | and_154_ssc
      | and_132_cse;
  assign lsc_col_if_if_4_else_else_else_else_if_mux1h_226_nl = MUX1HOT_s_1_3_2(block_count_Gbb_sva_dfm_5_0,
      (z_out_4[0]), (z_out_11[0]), {lsc_col_if_if_4_else_else_else_else_if_or_4_nl
      , lsc_col_if_if_4_else_else_else_else_if_or_ssc , and_131_cse});
  assign z_out_2 = MUX_v_13_221_2((lscRegister_GbGain[12:0]), (lscRegister_GbGain[25:13]),
      (lscRegister_GbGain[38:26]), (lscRegister_GbGain[51:39]), (lscRegister_GbGain[64:52]),
      (lscRegister_GbGain[77:65]), (lscRegister_GbGain[90:78]), (lscRegister_GbGain[103:91]),
      (lscRegister_GbGain[116:104]), (lscRegister_GbGain[129:117]), (lscRegister_GbGain[142:130]),
      (lscRegister_GbGain[155:143]), (lscRegister_GbGain[168:156]), (lscRegister_GbGain[181:169]),
      (lscRegister_GbGain[194:182]), (lscRegister_GbGain[207:195]), (lscRegister_GbGain[220:208]),
      (lscRegister_GbGain[233:221]), (lscRegister_GbGain[246:234]), (lscRegister_GbGain[259:247]),
      (lscRegister_GbGain[272:260]), (lscRegister_GbGain[285:273]), (lscRegister_GbGain[298:286]),
      (lscRegister_GbGain[311:299]), (lscRegister_GbGain[324:312]), (lscRegister_GbGain[337:325]),
      (lscRegister_GbGain[350:338]), (lscRegister_GbGain[363:351]), (lscRegister_GbGain[376:364]),
      (lscRegister_GbGain[389:377]), (lscRegister_GbGain[402:390]), (lscRegister_GbGain[415:403]),
      (lscRegister_GbGain[428:416]), (lscRegister_GbGain[441:429]), (lscRegister_GbGain[454:442]),
      (lscRegister_GbGain[467:455]), (lscRegister_GbGain[480:468]), (lscRegister_GbGain[493:481]),
      (lscRegister_GbGain[506:494]), (lscRegister_GbGain[519:507]), (lscRegister_GbGain[532:520]),
      (lscRegister_GbGain[545:533]), (lscRegister_GbGain[558:546]), (lscRegister_GbGain[571:559]),
      (lscRegister_GbGain[584:572]), (lscRegister_GbGain[597:585]), (lscRegister_GbGain[610:598]),
      (lscRegister_GbGain[623:611]), (lscRegister_GbGain[636:624]), (lscRegister_GbGain[649:637]),
      (lscRegister_GbGain[662:650]), (lscRegister_GbGain[675:663]), (lscRegister_GbGain[688:676]),
      (lscRegister_GbGain[701:689]), (lscRegister_GbGain[714:702]), (lscRegister_GbGain[727:715]),
      (lscRegister_GbGain[740:728]), (lscRegister_GbGain[753:741]), (lscRegister_GbGain[766:754]),
      (lscRegister_GbGain[779:767]), (lscRegister_GbGain[792:780]), (lscRegister_GbGain[805:793]),
      (lscRegister_GbGain[818:806]), (lscRegister_GbGain[831:819]), (lscRegister_GbGain[844:832]),
      (lscRegister_GbGain[857:845]), (lscRegister_GbGain[870:858]), (lscRegister_GbGain[883:871]),
      (lscRegister_GbGain[896:884]), (lscRegister_GbGain[909:897]), (lscRegister_GbGain[922:910]),
      (lscRegister_GbGain[935:923]), (lscRegister_GbGain[948:936]), (lscRegister_GbGain[961:949]),
      (lscRegister_GbGain[974:962]), (lscRegister_GbGain[987:975]), (lscRegister_GbGain[1000:988]),
      (lscRegister_GbGain[1013:1001]), (lscRegister_GbGain[1026:1014]), (lscRegister_GbGain[1039:1027]),
      (lscRegister_GbGain[1052:1040]), (lscRegister_GbGain[1065:1053]), (lscRegister_GbGain[1078:1066]),
      (lscRegister_GbGain[1091:1079]), (lscRegister_GbGain[1104:1092]), (lscRegister_GbGain[1117:1105]),
      (lscRegister_GbGain[1130:1118]), (lscRegister_GbGain[1143:1131]), (lscRegister_GbGain[1156:1144]),
      (lscRegister_GbGain[1169:1157]), (lscRegister_GbGain[1182:1170]), (lscRegister_GbGain[1195:1183]),
      (lscRegister_GbGain[1208:1196]), (lscRegister_GbGain[1221:1209]), (lscRegister_GbGain[1234:1222]),
      (lscRegister_GbGain[1247:1235]), (lscRegister_GbGain[1260:1248]), (lscRegister_GbGain[1273:1261]),
      (lscRegister_GbGain[1286:1274]), (lscRegister_GbGain[1299:1287]), (lscRegister_GbGain[1312:1300]),
      (lscRegister_GbGain[1325:1313]), (lscRegister_GbGain[1338:1326]), (lscRegister_GbGain[1351:1339]),
      (lscRegister_GbGain[1364:1352]), (lscRegister_GbGain[1377:1365]), (lscRegister_GbGain[1390:1378]),
      (lscRegister_GbGain[1403:1391]), (lscRegister_GbGain[1416:1404]), (lscRegister_GbGain[1429:1417]),
      (lscRegister_GbGain[1442:1430]), (lscRegister_GbGain[1455:1443]), (lscRegister_GbGain[1468:1456]),
      (lscRegister_GbGain[1481:1469]), (lscRegister_GbGain[1494:1482]), (lscRegister_GbGain[1507:1495]),
      (lscRegister_GbGain[1520:1508]), (lscRegister_GbGain[1533:1521]), (lscRegister_GbGain[1546:1534]),
      (lscRegister_GbGain[1559:1547]), (lscRegister_GbGain[1572:1560]), (lscRegister_GbGain[1585:1573]),
      (lscRegister_GbGain[1598:1586]), (lscRegister_GbGain[1611:1599]), (lscRegister_GbGain[1624:1612]),
      (lscRegister_GbGain[1637:1625]), (lscRegister_GbGain[1650:1638]), (lscRegister_GbGain[1663:1651]),
      (lscRegister_GbGain[1676:1664]), (lscRegister_GbGain[1689:1677]), (lscRegister_GbGain[1702:1690]),
      (lscRegister_GbGain[1715:1703]), (lscRegister_GbGain[1728:1716]), (lscRegister_GbGain[1741:1729]),
      (lscRegister_GbGain[1754:1742]), (lscRegister_GbGain[1767:1755]), (lscRegister_GbGain[1780:1768]),
      (lscRegister_GbGain[1793:1781]), (lscRegister_GbGain[1806:1794]), (lscRegister_GbGain[1819:1807]),
      (lscRegister_GbGain[1832:1820]), (lscRegister_GbGain[1845:1833]), (lscRegister_GbGain[1858:1846]),
      (lscRegister_GbGain[1871:1859]), (lscRegister_GbGain[1884:1872]), (lscRegister_GbGain[1897:1885]),
      (lscRegister_GbGain[1910:1898]), (lscRegister_GbGain[1923:1911]), (lscRegister_GbGain[1936:1924]),
      (lscRegister_GbGain[1949:1937]), (lscRegister_GbGain[1962:1950]), (lscRegister_GbGain[1975:1963]),
      (lscRegister_GbGain[1988:1976]), (lscRegister_GbGain[2001:1989]), (lscRegister_GbGain[2014:2002]),
      (lscRegister_GbGain[2027:2015]), (lscRegister_GbGain[2040:2028]), (lscRegister_GbGain[2053:2041]),
      (lscRegister_GbGain[2066:2054]), (lscRegister_GbGain[2079:2067]), (lscRegister_GbGain[2092:2080]),
      (lscRegister_GbGain[2105:2093]), (lscRegister_GbGain[2118:2106]), (lscRegister_GbGain[2131:2119]),
      (lscRegister_GbGain[2144:2132]), (lscRegister_GbGain[2157:2145]), (lscRegister_GbGain[2170:2158]),
      (lscRegister_GbGain[2183:2171]), (lscRegister_GbGain[2196:2184]), (lscRegister_GbGain[2209:2197]),
      (lscRegister_GbGain[2222:2210]), (lscRegister_GbGain[2235:2223]), (lscRegister_GbGain[2248:2236]),
      (lscRegister_GbGain[2261:2249]), (lscRegister_GbGain[2274:2262]), (lscRegister_GbGain[2287:2275]),
      (lscRegister_GbGain[2300:2288]), (lscRegister_GbGain[2313:2301]), (lscRegister_GbGain[2326:2314]),
      (lscRegister_GbGain[2339:2327]), (lscRegister_GbGain[2352:2340]), (lscRegister_GbGain[2365:2353]),
      (lscRegister_GbGain[2378:2366]), (lscRegister_GbGain[2391:2379]), (lscRegister_GbGain[2404:2392]),
      (lscRegister_GbGain[2417:2405]), (lscRegister_GbGain[2430:2418]), (lscRegister_GbGain[2443:2431]),
      (lscRegister_GbGain[2456:2444]), (lscRegister_GbGain[2469:2457]), (lscRegister_GbGain[2482:2470]),
      (lscRegister_GbGain[2495:2483]), (lscRegister_GbGain[2508:2496]), (lscRegister_GbGain[2521:2509]),
      (lscRegister_GbGain[2534:2522]), (lscRegister_GbGain[2547:2535]), (lscRegister_GbGain[2560:2548]),
      (lscRegister_GbGain[2573:2561]), (lscRegister_GbGain[2586:2574]), (lscRegister_GbGain[2599:2587]),
      (lscRegister_GbGain[2612:2600]), (lscRegister_GbGain[2625:2613]), (lscRegister_GbGain[2638:2626]),
      (lscRegister_GbGain[2651:2639]), (lscRegister_GbGain[2664:2652]), (lscRegister_GbGain[2677:2665]),
      (lscRegister_GbGain[2690:2678]), (lscRegister_GbGain[2703:2691]), (lscRegister_GbGain[2716:2704]),
      (lscRegister_GbGain[2729:2717]), (lscRegister_GbGain[2742:2730]), (lscRegister_GbGain[2755:2743]),
      (lscRegister_GbGain[2768:2756]), (lscRegister_GbGain[2781:2769]), (lscRegister_GbGain[2794:2782]),
      (lscRegister_GbGain[2807:2795]), (lscRegister_GbGain[2820:2808]), (lscRegister_GbGain[2833:2821]),
      (lscRegister_GbGain[2846:2834]), (lscRegister_GbGain[2859:2847]), (lscRegister_GbGain[2872:2860]),
      {lsc_col_if_if_4_else_else_else_else_if_mux1h_224_nl , lsc_col_if_if_4_else_else_else_else_if_mux1h_225_nl
      , lsc_col_if_if_4_else_else_else_else_if_mux1h_226_nl});
  assign lsc_col_if_if_3_else_else_else_else_else_else_else_else_if_mux1h_224_nl
      = MUX1HOT_v_4_5_2((z_out_4[3:0]), (z_out_4[7:4]), (z_out_8[6:3]), (z_out_11[7:4]),
      (block_count_rGr_sva_dfm_5_7_1[6:3]), {and_158_ssc , lsc_col_if_if_3_else_else_else_else_else_else_else_else_if_or_ssc
      , and_166_ssc , and_143_cse , and_144_cse});
  assign lsc_col_if_if_3_else_else_else_else_else_else_else_else_if_or_3_nl = and_158_ssc
      | and_144_cse;
  assign lsc_col_if_if_3_else_else_else_else_else_else_else_else_if_mux1h_225_nl
      = MUX1HOT_v_3_4_2((block_count_rGr_sva_dfm_5_7_1[2:0]), (z_out_4[3:1]), (z_out_8[2:0]),
      (z_out_11[3:1]), {lsc_col_if_if_3_else_else_else_else_else_else_else_else_if_or_3_nl
      , lsc_col_if_if_3_else_else_else_else_else_else_else_else_if_or_ssc , and_166_ssc
      , and_143_cse});
  assign lsc_col_if_if_3_else_else_else_else_else_else_else_else_if_or_4_nl = and_158_ssc
      | and_166_ssc | and_144_cse;
  assign lsc_col_if_if_3_else_else_else_else_else_else_else_else_if_mux1h_226_nl
      = MUX1HOT_s_1_3_2(block_count_rGr_sva_dfm_5_0, (z_out_4[0]), (z_out_11[0]),
      {lsc_col_if_if_3_else_else_else_else_else_else_else_else_if_or_4_nl , lsc_col_if_if_3_else_else_else_else_else_else_else_else_if_or_ssc
      , and_143_cse});
  assign z_out_3 = MUX_v_13_221_2((lscRegister_GrGain[12:0]), (lscRegister_GrGain[25:13]),
      (lscRegister_GrGain[38:26]), (lscRegister_GrGain[51:39]), (lscRegister_GrGain[64:52]),
      (lscRegister_GrGain[77:65]), (lscRegister_GrGain[90:78]), (lscRegister_GrGain[103:91]),
      (lscRegister_GrGain[116:104]), (lscRegister_GrGain[129:117]), (lscRegister_GrGain[142:130]),
      (lscRegister_GrGain[155:143]), (lscRegister_GrGain[168:156]), (lscRegister_GrGain[181:169]),
      (lscRegister_GrGain[194:182]), (lscRegister_GrGain[207:195]), (lscRegister_GrGain[220:208]),
      (lscRegister_GrGain[233:221]), (lscRegister_GrGain[246:234]), (lscRegister_GrGain[259:247]),
      (lscRegister_GrGain[272:260]), (lscRegister_GrGain[285:273]), (lscRegister_GrGain[298:286]),
      (lscRegister_GrGain[311:299]), (lscRegister_GrGain[324:312]), (lscRegister_GrGain[337:325]),
      (lscRegister_GrGain[350:338]), (lscRegister_GrGain[363:351]), (lscRegister_GrGain[376:364]),
      (lscRegister_GrGain[389:377]), (lscRegister_GrGain[402:390]), (lscRegister_GrGain[415:403]),
      (lscRegister_GrGain[428:416]), (lscRegister_GrGain[441:429]), (lscRegister_GrGain[454:442]),
      (lscRegister_GrGain[467:455]), (lscRegister_GrGain[480:468]), (lscRegister_GrGain[493:481]),
      (lscRegister_GrGain[506:494]), (lscRegister_GrGain[519:507]), (lscRegister_GrGain[532:520]),
      (lscRegister_GrGain[545:533]), (lscRegister_GrGain[558:546]), (lscRegister_GrGain[571:559]),
      (lscRegister_GrGain[584:572]), (lscRegister_GrGain[597:585]), (lscRegister_GrGain[610:598]),
      (lscRegister_GrGain[623:611]), (lscRegister_GrGain[636:624]), (lscRegister_GrGain[649:637]),
      (lscRegister_GrGain[662:650]), (lscRegister_GrGain[675:663]), (lscRegister_GrGain[688:676]),
      (lscRegister_GrGain[701:689]), (lscRegister_GrGain[714:702]), (lscRegister_GrGain[727:715]),
      (lscRegister_GrGain[740:728]), (lscRegister_GrGain[753:741]), (lscRegister_GrGain[766:754]),
      (lscRegister_GrGain[779:767]), (lscRegister_GrGain[792:780]), (lscRegister_GrGain[805:793]),
      (lscRegister_GrGain[818:806]), (lscRegister_GrGain[831:819]), (lscRegister_GrGain[844:832]),
      (lscRegister_GrGain[857:845]), (lscRegister_GrGain[870:858]), (lscRegister_GrGain[883:871]),
      (lscRegister_GrGain[896:884]), (lscRegister_GrGain[909:897]), (lscRegister_GrGain[922:910]),
      (lscRegister_GrGain[935:923]), (lscRegister_GrGain[948:936]), (lscRegister_GrGain[961:949]),
      (lscRegister_GrGain[974:962]), (lscRegister_GrGain[987:975]), (lscRegister_GrGain[1000:988]),
      (lscRegister_GrGain[1013:1001]), (lscRegister_GrGain[1026:1014]), (lscRegister_GrGain[1039:1027]),
      (lscRegister_GrGain[1052:1040]), (lscRegister_GrGain[1065:1053]), (lscRegister_GrGain[1078:1066]),
      (lscRegister_GrGain[1091:1079]), (lscRegister_GrGain[1104:1092]), (lscRegister_GrGain[1117:1105]),
      (lscRegister_GrGain[1130:1118]), (lscRegister_GrGain[1143:1131]), (lscRegister_GrGain[1156:1144]),
      (lscRegister_GrGain[1169:1157]), (lscRegister_GrGain[1182:1170]), (lscRegister_GrGain[1195:1183]),
      (lscRegister_GrGain[1208:1196]), (lscRegister_GrGain[1221:1209]), (lscRegister_GrGain[1234:1222]),
      (lscRegister_GrGain[1247:1235]), (lscRegister_GrGain[1260:1248]), (lscRegister_GrGain[1273:1261]),
      (lscRegister_GrGain[1286:1274]), (lscRegister_GrGain[1299:1287]), (lscRegister_GrGain[1312:1300]),
      (lscRegister_GrGain[1325:1313]), (lscRegister_GrGain[1338:1326]), (lscRegister_GrGain[1351:1339]),
      (lscRegister_GrGain[1364:1352]), (lscRegister_GrGain[1377:1365]), (lscRegister_GrGain[1390:1378]),
      (lscRegister_GrGain[1403:1391]), (lscRegister_GrGain[1416:1404]), (lscRegister_GrGain[1429:1417]),
      (lscRegister_GrGain[1442:1430]), (lscRegister_GrGain[1455:1443]), (lscRegister_GrGain[1468:1456]),
      (lscRegister_GrGain[1481:1469]), (lscRegister_GrGain[1494:1482]), (lscRegister_GrGain[1507:1495]),
      (lscRegister_GrGain[1520:1508]), (lscRegister_GrGain[1533:1521]), (lscRegister_GrGain[1546:1534]),
      (lscRegister_GrGain[1559:1547]), (lscRegister_GrGain[1572:1560]), (lscRegister_GrGain[1585:1573]),
      (lscRegister_GrGain[1598:1586]), (lscRegister_GrGain[1611:1599]), (lscRegister_GrGain[1624:1612]),
      (lscRegister_GrGain[1637:1625]), (lscRegister_GrGain[1650:1638]), (lscRegister_GrGain[1663:1651]),
      (lscRegister_GrGain[1676:1664]), (lscRegister_GrGain[1689:1677]), (lscRegister_GrGain[1702:1690]),
      (lscRegister_GrGain[1715:1703]), (lscRegister_GrGain[1728:1716]), (lscRegister_GrGain[1741:1729]),
      (lscRegister_GrGain[1754:1742]), (lscRegister_GrGain[1767:1755]), (lscRegister_GrGain[1780:1768]),
      (lscRegister_GrGain[1793:1781]), (lscRegister_GrGain[1806:1794]), (lscRegister_GrGain[1819:1807]),
      (lscRegister_GrGain[1832:1820]), (lscRegister_GrGain[1845:1833]), (lscRegister_GrGain[1858:1846]),
      (lscRegister_GrGain[1871:1859]), (lscRegister_GrGain[1884:1872]), (lscRegister_GrGain[1897:1885]),
      (lscRegister_GrGain[1910:1898]), (lscRegister_GrGain[1923:1911]), (lscRegister_GrGain[1936:1924]),
      (lscRegister_GrGain[1949:1937]), (lscRegister_GrGain[1962:1950]), (lscRegister_GrGain[1975:1963]),
      (lscRegister_GrGain[1988:1976]), (lscRegister_GrGain[2001:1989]), (lscRegister_GrGain[2014:2002]),
      (lscRegister_GrGain[2027:2015]), (lscRegister_GrGain[2040:2028]), (lscRegister_GrGain[2053:2041]),
      (lscRegister_GrGain[2066:2054]), (lscRegister_GrGain[2079:2067]), (lscRegister_GrGain[2092:2080]),
      (lscRegister_GrGain[2105:2093]), (lscRegister_GrGain[2118:2106]), (lscRegister_GrGain[2131:2119]),
      (lscRegister_GrGain[2144:2132]), (lscRegister_GrGain[2157:2145]), (lscRegister_GrGain[2170:2158]),
      (lscRegister_GrGain[2183:2171]), (lscRegister_GrGain[2196:2184]), (lscRegister_GrGain[2209:2197]),
      (lscRegister_GrGain[2222:2210]), (lscRegister_GrGain[2235:2223]), (lscRegister_GrGain[2248:2236]),
      (lscRegister_GrGain[2261:2249]), (lscRegister_GrGain[2274:2262]), (lscRegister_GrGain[2287:2275]),
      (lscRegister_GrGain[2300:2288]), (lscRegister_GrGain[2313:2301]), (lscRegister_GrGain[2326:2314]),
      (lscRegister_GrGain[2339:2327]), (lscRegister_GrGain[2352:2340]), (lscRegister_GrGain[2365:2353]),
      (lscRegister_GrGain[2378:2366]), (lscRegister_GrGain[2391:2379]), (lscRegister_GrGain[2404:2392]),
      (lscRegister_GrGain[2417:2405]), (lscRegister_GrGain[2430:2418]), (lscRegister_GrGain[2443:2431]),
      (lscRegister_GrGain[2456:2444]), (lscRegister_GrGain[2469:2457]), (lscRegister_GrGain[2482:2470]),
      (lscRegister_GrGain[2495:2483]), (lscRegister_GrGain[2508:2496]), (lscRegister_GrGain[2521:2509]),
      (lscRegister_GrGain[2534:2522]), (lscRegister_GrGain[2547:2535]), (lscRegister_GrGain[2560:2548]),
      (lscRegister_GrGain[2573:2561]), (lscRegister_GrGain[2586:2574]), (lscRegister_GrGain[2599:2587]),
      (lscRegister_GrGain[2612:2600]), (lscRegister_GrGain[2625:2613]), (lscRegister_GrGain[2638:2626]),
      (lscRegister_GrGain[2651:2639]), (lscRegister_GrGain[2664:2652]), (lscRegister_GrGain[2677:2665]),
      (lscRegister_GrGain[2690:2678]), (lscRegister_GrGain[2703:2691]), (lscRegister_GrGain[2716:2704]),
      (lscRegister_GrGain[2729:2717]), (lscRegister_GrGain[2742:2730]), (lscRegister_GrGain[2755:2743]),
      (lscRegister_GrGain[2768:2756]), (lscRegister_GrGain[2781:2769]), (lscRegister_GrGain[2794:2782]),
      (lscRegister_GrGain[2807:2795]), (lscRegister_GrGain[2820:2808]), (lscRegister_GrGain[2833:2821]),
      (lscRegister_GrGain[2846:2834]), (lscRegister_GrGain[2859:2847]), (lscRegister_GrGain[2872:2860]),
      {lsc_col_if_if_3_else_else_else_else_else_else_else_else_if_mux1h_224_nl ,
      lsc_col_if_if_3_else_else_else_else_else_else_else_else_if_mux1h_225_nl , lsc_col_if_if_3_else_else_else_else_else_else_else_else_if_mux1h_226_nl});

  function automatic [0:0] MUX1HOT_s_1_3_2;
    input [0:0] input_2;
    input [0:0] input_1;
    input [0:0] input_0;
    input [2:0] sel;
    reg [0:0] result;
  begin
    result = input_0 & {1{sel[0]}};
    result = result | ( input_1 & {1{sel[1]}});
    result = result | ( input_2 & {1{sel[2]}});
    MUX1HOT_s_1_3_2 = result;
  end
  endfunction


  function automatic [12:0] MUX1HOT_v_13_3_2;
    input [12:0] input_2;
    input [12:0] input_1;
    input [12:0] input_0;
    input [2:0] sel;
    reg [12:0] result;
  begin
    result = input_0 & {13{sel[0]}};
    result = result | ( input_1 & {13{sel[1]}});
    result = result | ( input_2 & {13{sel[2]}});
    MUX1HOT_v_13_3_2 = result;
  end
  endfunction


  function automatic [12:0] MUX1HOT_v_13_4_2;
    input [12:0] input_3;
    input [12:0] input_2;
    input [12:0] input_1;
    input [12:0] input_0;
    input [3:0] sel;
    reg [12:0] result;
  begin
    result = input_0 & {13{sel[0]}};
    result = result | ( input_1 & {13{sel[1]}});
    result = result | ( input_2 & {13{sel[2]}});
    result = result | ( input_3 & {13{sel[3]}});
    MUX1HOT_v_13_4_2 = result;
  end
  endfunction


  function automatic [2:0] MUX1HOT_v_3_4_2;
    input [2:0] input_3;
    input [2:0] input_2;
    input [2:0] input_1;
    input [2:0] input_0;
    input [3:0] sel;
    reg [2:0] result;
  begin
    result = input_0 & {3{sel[0]}};
    result = result | ( input_1 & {3{sel[1]}});
    result = result | ( input_2 & {3{sel[2]}});
    result = result | ( input_3 & {3{sel[3]}});
    MUX1HOT_v_3_4_2 = result;
  end
  endfunction


  function automatic [3:0] MUX1HOT_v_4_4_2;
    input [3:0] input_3;
    input [3:0] input_2;
    input [3:0] input_1;
    input [3:0] input_0;
    input [3:0] sel;
    reg [3:0] result;
  begin
    result = input_0 & {4{sel[0]}};
    result = result | ( input_1 & {4{sel[1]}});
    result = result | ( input_2 & {4{sel[2]}});
    result = result | ( input_3 & {4{sel[3]}});
    MUX1HOT_v_4_4_2 = result;
  end
  endfunction


  function automatic [3:0] MUX1HOT_v_4_5_2;
    input [3:0] input_4;
    input [3:0] input_3;
    input [3:0] input_2;
    input [3:0] input_1;
    input [3:0] input_0;
    input [4:0] sel;
    reg [3:0] result;
  begin
    result = input_0 & {4{sel[0]}};
    result = result | ( input_1 & {4{sel[1]}});
    result = result | ( input_2 & {4{sel[2]}});
    result = result | ( input_3 & {4{sel[3]}});
    result = result | ( input_4 & {4{sel[4]}});
    MUX1HOT_v_4_5_2 = result;
  end
  endfunction


  function automatic [6:0] MUX1HOT_v_7_3_2;
    input [6:0] input_2;
    input [6:0] input_1;
    input [6:0] input_0;
    input [2:0] sel;
    reg [6:0] result;
  begin
    result = input_0 & {7{sel[0]}};
    result = result | ( input_1 & {7{sel[1]}});
    result = result | ( input_2 & {7{sel[2]}});
    MUX1HOT_v_7_3_2 = result;
  end
  endfunction


  function automatic [6:0] MUX1HOT_v_7_5_2;
    input [6:0] input_4;
    input [6:0] input_3;
    input [6:0] input_2;
    input [6:0] input_1;
    input [6:0] input_0;
    input [4:0] sel;
    reg [6:0] result;
  begin
    result = input_0 & {7{sel[0]}};
    result = result | ( input_1 & {7{sel[1]}});
    result = result | ( input_2 & {7{sel[2]}});
    result = result | ( input_3 & {7{sel[3]}});
    result = result | ( input_4 & {7{sel[4]}});
    MUX1HOT_v_7_5_2 = result;
  end
  endfunction


  function automatic [0:0] MUX_s_1_2_2;
    input [0:0] input_0;
    input [0:0] input_1;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [0:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction


  function automatic [12:0] MUX_v_13_221_2;
    input [12:0] input_0;
    input [12:0] input_1;
    input [12:0] input_2;
    input [12:0] input_3;
    input [12:0] input_4;
    input [12:0] input_5;
    input [12:0] input_6;
    input [12:0] input_7;
    input [12:0] input_8;
    input [12:0] input_9;
    input [12:0] input_10;
    input [12:0] input_11;
    input [12:0] input_12;
    input [12:0] input_13;
    input [12:0] input_14;
    input [12:0] input_15;
    input [12:0] input_16;
    input [12:0] input_17;
    input [12:0] input_18;
    input [12:0] input_19;
    input [12:0] input_20;
    input [12:0] input_21;
    input [12:0] input_22;
    input [12:0] input_23;
    input [12:0] input_24;
    input [12:0] input_25;
    input [12:0] input_26;
    input [12:0] input_27;
    input [12:0] input_28;
    input [12:0] input_29;
    input [12:0] input_30;
    input [12:0] input_31;
    input [12:0] input_32;
    input [12:0] input_33;
    input [12:0] input_34;
    input [12:0] input_35;
    input [12:0] input_36;
    input [12:0] input_37;
    input [12:0] input_38;
    input [12:0] input_39;
    input [12:0] input_40;
    input [12:0] input_41;
    input [12:0] input_42;
    input [12:0] input_43;
    input [12:0] input_44;
    input [12:0] input_45;
    input [12:0] input_46;
    input [12:0] input_47;
    input [12:0] input_48;
    input [12:0] input_49;
    input [12:0] input_50;
    input [12:0] input_51;
    input [12:0] input_52;
    input [12:0] input_53;
    input [12:0] input_54;
    input [12:0] input_55;
    input [12:0] input_56;
    input [12:0] input_57;
    input [12:0] input_58;
    input [12:0] input_59;
    input [12:0] input_60;
    input [12:0] input_61;
    input [12:0] input_62;
    input [12:0] input_63;
    input [12:0] input_64;
    input [12:0] input_65;
    input [12:0] input_66;
    input [12:0] input_67;
    input [12:0] input_68;
    input [12:0] input_69;
    input [12:0] input_70;
    input [12:0] input_71;
    input [12:0] input_72;
    input [12:0] input_73;
    input [12:0] input_74;
    input [12:0] input_75;
    input [12:0] input_76;
    input [12:0] input_77;
    input [12:0] input_78;
    input [12:0] input_79;
    input [12:0] input_80;
    input [12:0] input_81;
    input [12:0] input_82;
    input [12:0] input_83;
    input [12:0] input_84;
    input [12:0] input_85;
    input [12:0] input_86;
    input [12:0] input_87;
    input [12:0] input_88;
    input [12:0] input_89;
    input [12:0] input_90;
    input [12:0] input_91;
    input [12:0] input_92;
    input [12:0] input_93;
    input [12:0] input_94;
    input [12:0] input_95;
    input [12:0] input_96;
    input [12:0] input_97;
    input [12:0] input_98;
    input [12:0] input_99;
    input [12:0] input_100;
    input [12:0] input_101;
    input [12:0] input_102;
    input [12:0] input_103;
    input [12:0] input_104;
    input [12:0] input_105;
    input [12:0] input_106;
    input [12:0] input_107;
    input [12:0] input_108;
    input [12:0] input_109;
    input [12:0] input_110;
    input [12:0] input_111;
    input [12:0] input_112;
    input [12:0] input_113;
    input [12:0] input_114;
    input [12:0] input_115;
    input [12:0] input_116;
    input [12:0] input_117;
    input [12:0] input_118;
    input [12:0] input_119;
    input [12:0] input_120;
    input [12:0] input_121;
    input [12:0] input_122;
    input [12:0] input_123;
    input [12:0] input_124;
    input [12:0] input_125;
    input [12:0] input_126;
    input [12:0] input_127;
    input [12:0] input_128;
    input [12:0] input_129;
    input [12:0] input_130;
    input [12:0] input_131;
    input [12:0] input_132;
    input [12:0] input_133;
    input [12:0] input_134;
    input [12:0] input_135;
    input [12:0] input_136;
    input [12:0] input_137;
    input [12:0] input_138;
    input [12:0] input_139;
    input [12:0] input_140;
    input [12:0] input_141;
    input [12:0] input_142;
    input [12:0] input_143;
    input [12:0] input_144;
    input [12:0] input_145;
    input [12:0] input_146;
    input [12:0] input_147;
    input [12:0] input_148;
    input [12:0] input_149;
    input [12:0] input_150;
    input [12:0] input_151;
    input [12:0] input_152;
    input [12:0] input_153;
    input [12:0] input_154;
    input [12:0] input_155;
    input [12:0] input_156;
    input [12:0] input_157;
    input [12:0] input_158;
    input [12:0] input_159;
    input [12:0] input_160;
    input [12:0] input_161;
    input [12:0] input_162;
    input [12:0] input_163;
    input [12:0] input_164;
    input [12:0] input_165;
    input [12:0] input_166;
    input [12:0] input_167;
    input [12:0] input_168;
    input [12:0] input_169;
    input [12:0] input_170;
    input [12:0] input_171;
    input [12:0] input_172;
    input [12:0] input_173;
    input [12:0] input_174;
    input [12:0] input_175;
    input [12:0] input_176;
    input [12:0] input_177;
    input [12:0] input_178;
    input [12:0] input_179;
    input [12:0] input_180;
    input [12:0] input_181;
    input [12:0] input_182;
    input [12:0] input_183;
    input [12:0] input_184;
    input [12:0] input_185;
    input [12:0] input_186;
    input [12:0] input_187;
    input [12:0] input_188;
    input [12:0] input_189;
    input [12:0] input_190;
    input [12:0] input_191;
    input [12:0] input_192;
    input [12:0] input_193;
    input [12:0] input_194;
    input [12:0] input_195;
    input [12:0] input_196;
    input [12:0] input_197;
    input [12:0] input_198;
    input [12:0] input_199;
    input [12:0] input_200;
    input [12:0] input_201;
    input [12:0] input_202;
    input [12:0] input_203;
    input [12:0] input_204;
    input [12:0] input_205;
    input [12:0] input_206;
    input [12:0] input_207;
    input [12:0] input_208;
    input [12:0] input_209;
    input [12:0] input_210;
    input [12:0] input_211;
    input [12:0] input_212;
    input [12:0] input_213;
    input [12:0] input_214;
    input [12:0] input_215;
    input [12:0] input_216;
    input [12:0] input_217;
    input [12:0] input_218;
    input [12:0] input_219;
    input [12:0] input_220;
    input [7:0] sel;
    reg [12:0] result;
  begin
    case (sel)
      8'b00000000 : begin
        result = input_0;
      end
      8'b00000001 : begin
        result = input_1;
      end
      8'b00000010 : begin
        result = input_2;
      end
      8'b00000011 : begin
        result = input_3;
      end
      8'b00000100 : begin
        result = input_4;
      end
      8'b00000101 : begin
        result = input_5;
      end
      8'b00000110 : begin
        result = input_6;
      end
      8'b00000111 : begin
        result = input_7;
      end
      8'b00001000 : begin
        result = input_8;
      end
      8'b00001001 : begin
        result = input_9;
      end
      8'b00001010 : begin
        result = input_10;
      end
      8'b00001011 : begin
        result = input_11;
      end
      8'b00001100 : begin
        result = input_12;
      end
      8'b00001101 : begin
        result = input_13;
      end
      8'b00001110 : begin
        result = input_14;
      end
      8'b00001111 : begin
        result = input_15;
      end
      8'b00010000 : begin
        result = input_16;
      end
      8'b00010001 : begin
        result = input_17;
      end
      8'b00010010 : begin
        result = input_18;
      end
      8'b00010011 : begin
        result = input_19;
      end
      8'b00010100 : begin
        result = input_20;
      end
      8'b00010101 : begin
        result = input_21;
      end
      8'b00010110 : begin
        result = input_22;
      end
      8'b00010111 : begin
        result = input_23;
      end
      8'b00011000 : begin
        result = input_24;
      end
      8'b00011001 : begin
        result = input_25;
      end
      8'b00011010 : begin
        result = input_26;
      end
      8'b00011011 : begin
        result = input_27;
      end
      8'b00011100 : begin
        result = input_28;
      end
      8'b00011101 : begin
        result = input_29;
      end
      8'b00011110 : begin
        result = input_30;
      end
      8'b00011111 : begin
        result = input_31;
      end
      8'b00100000 : begin
        result = input_32;
      end
      8'b00100001 : begin
        result = input_33;
      end
      8'b00100010 : begin
        result = input_34;
      end
      8'b00100011 : begin
        result = input_35;
      end
      8'b00100100 : begin
        result = input_36;
      end
      8'b00100101 : begin
        result = input_37;
      end
      8'b00100110 : begin
        result = input_38;
      end
      8'b00100111 : begin
        result = input_39;
      end
      8'b00101000 : begin
        result = input_40;
      end
      8'b00101001 : begin
        result = input_41;
      end
      8'b00101010 : begin
        result = input_42;
      end
      8'b00101011 : begin
        result = input_43;
      end
      8'b00101100 : begin
        result = input_44;
      end
      8'b00101101 : begin
        result = input_45;
      end
      8'b00101110 : begin
        result = input_46;
      end
      8'b00101111 : begin
        result = input_47;
      end
      8'b00110000 : begin
        result = input_48;
      end
      8'b00110001 : begin
        result = input_49;
      end
      8'b00110010 : begin
        result = input_50;
      end
      8'b00110011 : begin
        result = input_51;
      end
      8'b00110100 : begin
        result = input_52;
      end
      8'b00110101 : begin
        result = input_53;
      end
      8'b00110110 : begin
        result = input_54;
      end
      8'b00110111 : begin
        result = input_55;
      end
      8'b00111000 : begin
        result = input_56;
      end
      8'b00111001 : begin
        result = input_57;
      end
      8'b00111010 : begin
        result = input_58;
      end
      8'b00111011 : begin
        result = input_59;
      end
      8'b00111100 : begin
        result = input_60;
      end
      8'b00111101 : begin
        result = input_61;
      end
      8'b00111110 : begin
        result = input_62;
      end
      8'b00111111 : begin
        result = input_63;
      end
      8'b01000000 : begin
        result = input_64;
      end
      8'b01000001 : begin
        result = input_65;
      end
      8'b01000010 : begin
        result = input_66;
      end
      8'b01000011 : begin
        result = input_67;
      end
      8'b01000100 : begin
        result = input_68;
      end
      8'b01000101 : begin
        result = input_69;
      end
      8'b01000110 : begin
        result = input_70;
      end
      8'b01000111 : begin
        result = input_71;
      end
      8'b01001000 : begin
        result = input_72;
      end
      8'b01001001 : begin
        result = input_73;
      end
      8'b01001010 : begin
        result = input_74;
      end
      8'b01001011 : begin
        result = input_75;
      end
      8'b01001100 : begin
        result = input_76;
      end
      8'b01001101 : begin
        result = input_77;
      end
      8'b01001110 : begin
        result = input_78;
      end
      8'b01001111 : begin
        result = input_79;
      end
      8'b01010000 : begin
        result = input_80;
      end
      8'b01010001 : begin
        result = input_81;
      end
      8'b01010010 : begin
        result = input_82;
      end
      8'b01010011 : begin
        result = input_83;
      end
      8'b01010100 : begin
        result = input_84;
      end
      8'b01010101 : begin
        result = input_85;
      end
      8'b01010110 : begin
        result = input_86;
      end
      8'b01010111 : begin
        result = input_87;
      end
      8'b01011000 : begin
        result = input_88;
      end
      8'b01011001 : begin
        result = input_89;
      end
      8'b01011010 : begin
        result = input_90;
      end
      8'b01011011 : begin
        result = input_91;
      end
      8'b01011100 : begin
        result = input_92;
      end
      8'b01011101 : begin
        result = input_93;
      end
      8'b01011110 : begin
        result = input_94;
      end
      8'b01011111 : begin
        result = input_95;
      end
      8'b01100000 : begin
        result = input_96;
      end
      8'b01100001 : begin
        result = input_97;
      end
      8'b01100010 : begin
        result = input_98;
      end
      8'b01100011 : begin
        result = input_99;
      end
      8'b01100100 : begin
        result = input_100;
      end
      8'b01100101 : begin
        result = input_101;
      end
      8'b01100110 : begin
        result = input_102;
      end
      8'b01100111 : begin
        result = input_103;
      end
      8'b01101000 : begin
        result = input_104;
      end
      8'b01101001 : begin
        result = input_105;
      end
      8'b01101010 : begin
        result = input_106;
      end
      8'b01101011 : begin
        result = input_107;
      end
      8'b01101100 : begin
        result = input_108;
      end
      8'b01101101 : begin
        result = input_109;
      end
      8'b01101110 : begin
        result = input_110;
      end
      8'b01101111 : begin
        result = input_111;
      end
      8'b01110000 : begin
        result = input_112;
      end
      8'b01110001 : begin
        result = input_113;
      end
      8'b01110010 : begin
        result = input_114;
      end
      8'b01110011 : begin
        result = input_115;
      end
      8'b01110100 : begin
        result = input_116;
      end
      8'b01110101 : begin
        result = input_117;
      end
      8'b01110110 : begin
        result = input_118;
      end
      8'b01110111 : begin
        result = input_119;
      end
      8'b01111000 : begin
        result = input_120;
      end
      8'b01111001 : begin
        result = input_121;
      end
      8'b01111010 : begin
        result = input_122;
      end
      8'b01111011 : begin
        result = input_123;
      end
      8'b01111100 : begin
        result = input_124;
      end
      8'b01111101 : begin
        result = input_125;
      end
      8'b01111110 : begin
        result = input_126;
      end
      8'b01111111 : begin
        result = input_127;
      end
      8'b10000000 : begin
        result = input_128;
      end
      8'b10000001 : begin
        result = input_129;
      end
      8'b10000010 : begin
        result = input_130;
      end
      8'b10000011 : begin
        result = input_131;
      end
      8'b10000100 : begin
        result = input_132;
      end
      8'b10000101 : begin
        result = input_133;
      end
      8'b10000110 : begin
        result = input_134;
      end
      8'b10000111 : begin
        result = input_135;
      end
      8'b10001000 : begin
        result = input_136;
      end
      8'b10001001 : begin
        result = input_137;
      end
      8'b10001010 : begin
        result = input_138;
      end
      8'b10001011 : begin
        result = input_139;
      end
      8'b10001100 : begin
        result = input_140;
      end
      8'b10001101 : begin
        result = input_141;
      end
      8'b10001110 : begin
        result = input_142;
      end
      8'b10001111 : begin
        result = input_143;
      end
      8'b10010000 : begin
        result = input_144;
      end
      8'b10010001 : begin
        result = input_145;
      end
      8'b10010010 : begin
        result = input_146;
      end
      8'b10010011 : begin
        result = input_147;
      end
      8'b10010100 : begin
        result = input_148;
      end
      8'b10010101 : begin
        result = input_149;
      end
      8'b10010110 : begin
        result = input_150;
      end
      8'b10010111 : begin
        result = input_151;
      end
      8'b10011000 : begin
        result = input_152;
      end
      8'b10011001 : begin
        result = input_153;
      end
      8'b10011010 : begin
        result = input_154;
      end
      8'b10011011 : begin
        result = input_155;
      end
      8'b10011100 : begin
        result = input_156;
      end
      8'b10011101 : begin
        result = input_157;
      end
      8'b10011110 : begin
        result = input_158;
      end
      8'b10011111 : begin
        result = input_159;
      end
      8'b10100000 : begin
        result = input_160;
      end
      8'b10100001 : begin
        result = input_161;
      end
      8'b10100010 : begin
        result = input_162;
      end
      8'b10100011 : begin
        result = input_163;
      end
      8'b10100100 : begin
        result = input_164;
      end
      8'b10100101 : begin
        result = input_165;
      end
      8'b10100110 : begin
        result = input_166;
      end
      8'b10100111 : begin
        result = input_167;
      end
      8'b10101000 : begin
        result = input_168;
      end
      8'b10101001 : begin
        result = input_169;
      end
      8'b10101010 : begin
        result = input_170;
      end
      8'b10101011 : begin
        result = input_171;
      end
      8'b10101100 : begin
        result = input_172;
      end
      8'b10101101 : begin
        result = input_173;
      end
      8'b10101110 : begin
        result = input_174;
      end
      8'b10101111 : begin
        result = input_175;
      end
      8'b10110000 : begin
        result = input_176;
      end
      8'b10110001 : begin
        result = input_177;
      end
      8'b10110010 : begin
        result = input_178;
      end
      8'b10110011 : begin
        result = input_179;
      end
      8'b10110100 : begin
        result = input_180;
      end
      8'b10110101 : begin
        result = input_181;
      end
      8'b10110110 : begin
        result = input_182;
      end
      8'b10110111 : begin
        result = input_183;
      end
      8'b10111000 : begin
        result = input_184;
      end
      8'b10111001 : begin
        result = input_185;
      end
      8'b10111010 : begin
        result = input_186;
      end
      8'b10111011 : begin
        result = input_187;
      end
      8'b10111100 : begin
        result = input_188;
      end
      8'b10111101 : begin
        result = input_189;
      end
      8'b10111110 : begin
        result = input_190;
      end
      8'b10111111 : begin
        result = input_191;
      end
      8'b11000000 : begin
        result = input_192;
      end
      8'b11000001 : begin
        result = input_193;
      end
      8'b11000010 : begin
        result = input_194;
      end
      8'b11000011 : begin
        result = input_195;
      end
      8'b11000100 : begin
        result = input_196;
      end
      8'b11000101 : begin
        result = input_197;
      end
      8'b11000110 : begin
        result = input_198;
      end
      8'b11000111 : begin
        result = input_199;
      end
      8'b11001000 : begin
        result = input_200;
      end
      8'b11001001 : begin
        result = input_201;
      end
      8'b11001010 : begin
        result = input_202;
      end
      8'b11001011 : begin
        result = input_203;
      end
      8'b11001100 : begin
        result = input_204;
      end
      8'b11001101 : begin
        result = input_205;
      end
      8'b11001110 : begin
        result = input_206;
      end
      8'b11001111 : begin
        result = input_207;
      end
      8'b11010000 : begin
        result = input_208;
      end
      8'b11010001 : begin
        result = input_209;
      end
      8'b11010010 : begin
        result = input_210;
      end
      8'b11010011 : begin
        result = input_211;
      end
      8'b11010100 : begin
        result = input_212;
      end
      8'b11010101 : begin
        result = input_213;
      end
      8'b11010110 : begin
        result = input_214;
      end
      8'b11010111 : begin
        result = input_215;
      end
      8'b11011000 : begin
        result = input_216;
      end
      8'b11011001 : begin
        result = input_217;
      end
      8'b11011010 : begin
        result = input_218;
      end
      8'b11011011 : begin
        result = input_219;
      end
      default : begin
        result = input_220;
      end
    endcase
    MUX_v_13_221_2 = result;
  end
  endfunction


  function automatic [12:0] MUX_v_13_2_2;
    input [12:0] input_0;
    input [12:0] input_1;
    input [0:0] sel;
    reg [12:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_13_2_2 = result;
  end
  endfunction


  function automatic [14:0] MUX_v_15_2_2;
    input [14:0] input_0;
    input [14:0] input_1;
    input [0:0] sel;
    reg [14:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_15_2_2 = result;
  end
  endfunction


  function automatic [2:0] MUX_v_3_2_2;
    input [2:0] input_0;
    input [2:0] input_1;
    input [0:0] sel;
    reg [2:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_3_2_2 = result;
  end
  endfunction


  function automatic [3:0] MUX_v_4_2_2;
    input [3:0] input_0;
    input [3:0] input_1;
    input [0:0] sel;
    reg [3:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_4_2_2 = result;
  end
  endfunction


  function automatic [6:0] MUX_v_7_2_2;
    input [6:0] input_0;
    input [6:0] input_1;
    input [0:0] sel;
    reg [6:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_7_2_2 = result;
  end
  endfunction


  function automatic [8:0] MUX_v_9_2_2;
    input [8:0] input_0;
    input [8:0] input_1;
    input [0:0] sel;
    reg [8:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_9_2_2 = result;
  end
  endfunction


  function automatic [0:0] readslicef_10_1_9;
    input [9:0] vector;
    reg [9:0] tmp;
  begin
    tmp = vector >> 9;
    readslicef_10_1_9 = tmp[0:0];
  end
  endfunction


  function automatic [0:0] readslicef_14_1_13;
    input [13:0] vector;
    reg [13:0] tmp;
  begin
    tmp = vector >> 13;
    readslicef_14_1_13 = tmp[0:0];
  end
  endfunction


  function automatic [15:0] readslicef_26_16_10;
    input [25:0] vector;
    reg [25:0] tmp;
  begin
    tmp = vector >> 10;
    readslicef_26_16_10 = tmp[15:0];
  end
  endfunction


  function automatic [21:0] readslicef_29_22_7;
    input [28:0] vector;
    reg [28:0] tmp;
  begin
    tmp = vector >> 7;
    readslicef_29_22_7 = tmp[21:0];
  end
  endfunction


  function automatic [25:0] readslicef_33_26_7;
    input [32:0] vector;
    reg [32:0] tmp;
  begin
    tmp = vector >> 7;
    readslicef_33_26_7 = tmp[25:0];
  end
  endfunction


  function automatic [0:0] readslicef_3_1_2;
    input [2:0] vector;
    reg [2:0] tmp;
  begin
    tmp = vector >> 2;
    readslicef_3_1_2 = tmp[0:0];
  end
  endfunction


  function automatic [15:0] conv_s2s_15_16 ;
    input [14:0]  vector ;
  begin
    conv_s2s_15_16 = {vector[14], vector};
  end
  endfunction


  function automatic [8:0] conv_s2u_2_9 ;
    input [1:0]  vector ;
  begin
    conv_s2u_2_9 = {{7{vector[1]}}, vector};
  end
  endfunction


  function automatic [7:0] conv_s2u_5_8 ;
    input [4:0]  vector ;
  begin
    conv_s2u_5_8 = {{3{vector[4]}}, vector};
  end
  endfunction


  function automatic [13:0] conv_u2s_1_14 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_14 = {{13{1'b0}}, vector};
  end
  endfunction


  function automatic [15:0] conv_u2s_1_16 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_16 = {{15{1'b0}}, vector};
  end
  endfunction


  function automatic [9:0] conv_u2s_9_10 ;
    input [8:0]  vector ;
  begin
    conv_u2s_9_10 =  {1'b0, vector};
  end
  endfunction


  function automatic [15:0] conv_u2s_9_16 ;
    input [8:0]  vector ;
  begin
    conv_u2s_9_16 = {{7{1'b0}}, vector};
  end
  endfunction


  function automatic [10:0] conv_u2s_10_11 ;
    input [9:0]  vector ;
  begin
    conv_u2s_10_11 =  {1'b0, vector};
  end
  endfunction


  function automatic [12:0] conv_u2s_12_13 ;
    input [11:0]  vector ;
  begin
    conv_u2s_12_13 =  {1'b0, vector};
  end
  endfunction


  function automatic [13:0] conv_u2s_13_14 ;
    input [12:0]  vector ;
  begin
    conv_u2s_13_14 =  {1'b0, vector};
  end
  endfunction


  function automatic [14:0] conv_u2s_14_15 ;
    input [13:0]  vector ;
  begin
    conv_u2s_14_15 =  {1'b0, vector};
  end
  endfunction


  function automatic [8:0] conv_u2u_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_9 = {1'b0, vector};
  end
  endfunction


  function automatic [13:0] conv_u2u_13_14 ;
    input [12:0]  vector ;
  begin
    conv_u2u_13_14 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    dpc_core
// ------------------------------------------------------------------


module dpc_core (
  clk, arst_n, top_reg_frameWidth, top_reg_frameHeight, top_reg_imgPattern, dpc_reg_eb,
      dpc_reg_th_w, dpc_reg_th_b, src_rsc_dat, src_rsc_vld, src_rsc_rdy, dst_rsc_dat,
      dst_rsc_vld, dst_rsc_rdy, lineBuffer_rsci_radr_d, lineBuffer_rsci_wadr_d, lineBuffer_rsci_d_d,
      lineBuffer_rsci_q_d, lineBuffer_rsci_we_d_pff, lineBuffer_rsci_re_d_pff
);
  input clk;
  input arst_n;
  input [12:0] top_reg_frameWidth;
  input [12:0] top_reg_frameHeight;
  input [1:0] top_reg_imgPattern;
  input dpc_reg_eb;
  input [10:0] dpc_reg_th_w;
  input [10:0] dpc_reg_th_b;
  input [11:0] src_rsc_dat;
  input src_rsc_vld;
  output src_rsc_rdy;
  output [11:0] dst_rsc_dat;
  output dst_rsc_vld;
  input dst_rsc_rdy;
  output [13:0] lineBuffer_rsci_radr_d;
  output [13:0] lineBuffer_rsci_wadr_d;
  output [11:0] lineBuffer_rsci_d_d;
  input [11:0] lineBuffer_rsci_q_d;
  output lineBuffer_rsci_we_d_pff;
  output lineBuffer_rsci_re_d_pff;


  // Interconnect Declarations
  wire core_wen;
  wire core_wten;
  wire src_rsci_wen_comp;
  wire [11:0] src_rsci_idat_mxwt;
  wire dst_rsci_wen_comp;
  reg [11:0] dst_rsci_idat;
  wire [11:0] lineBuffer_rsci_q_d_mxwt;
  wire dpc_loop_in_if_if_bayerPattern_xor_3_tmp;
  wire dpc_loop_in_if_if_bayerPattern_xor_tmp;
  wire addon_loop_or_7_tmp_2;
  wire addon_loop_addon_loop_nor_50_tmp;
  wire MF_outer_MF_outer_or_9_tmp;
  wire MF_outer_MF_outer_or_8_tmp;
  wire [3:0] MF_outer_acc_tmp;
  wire [4:0] nl_MF_outer_acc_tmp;
  wire [3:0] MF_inter_acc_1_tmp;
  wire [4:0] nl_MF_inter_acc_1_tmp;
  wire [3:0] MF_outer_1_acc_tmp;
  wire [4:0] nl_MF_outer_1_acc_tmp;
  wire [3:0] MF_inter_1_acc_1_tmp;
  wire [4:0] nl_MF_inter_1_acc_1_tmp;
  wire addon_loop_and_34_tmp;
  wire MF_outer_MF_outer_and_2_tmp;
  wire addon_loop_and_93_tmp_2;
  wire addon_loop_and_85_tmp_2;
  wire rawWin_loop_rawWin_loop_xnor_tmp;
  wire nor_tmp_4;
  wire or_dcpl_5;
  wire or_dcpl_6;
  wire or_dcpl_7;
  wire or_dcpl_11;
  wire nand_tmp_3;
  wire mux_tmp_43;
  wire and_dcpl_29;
  wire or_tmp_46;
  wire nor_tmp_13;
  wire nor_tmp_14;
  wire nor_tmp_15;
  wire mux_tmp_61;
  wire or_dcpl_18;
  wire or_tmp_63;
  wire or_dcpl_28;
  wire or_dcpl_29;
  wire or_dcpl_30;
  wire or_dcpl_31;
  wire or_dcpl_32;
  wire or_dcpl_33;
  wire nor_tmp_20;
  wire or_tmp_66;
  wire or_tmp_70;
  wire or_tmp_72;
  wire mux_tmp_88;
  wire or_dcpl_39;
  wire or_dcpl_40;
  wire or_dcpl_41;
  wire or_dcpl_42;
  wire or_dcpl_43;
  wire or_dcpl_44;
  wire or_dcpl_45;
  wire nor_tmp_22;
  wire mux_tmp_90;
  wire or_dcpl_46;
  wire or_dcpl_48;
  wire or_dcpl_49;
  wire or_dcpl_52;
  wire or_dcpl_53;
  wire or_dcpl_70;
  wire or_dcpl_72;
  wire nor_tmp_24;
  wire mux_tmp_93;
  wire or_dcpl_73;
  wire or_dcpl_74;
  wire mux_tmp_95;
  wire mux_tmp_96;
  wire mux_tmp_99;
  wire mux_tmp_100;
  wire mux_tmp_101;
  wire mux_tmp_102;
  wire mux_tmp_106;
  wire nand_tmp_8;
  wire or_tmp_89;
  wire mux_tmp_114;
  wire or_tmp_90;
  wire not_tmp_115;
  wire mux_tmp_127;
  wire or_tmp_111;
  wire or_tmp_112;
  wire mux_tmp_170;
  wire mux_tmp_173;
  wire or_tmp_123;
  wire or_tmp_125;
  wire or_tmp_126;
  wire or_tmp_127;
  wire or_tmp_128;
  wire or_tmp_129;
  wire mux_tmp_188;
  wire nand_tmp_15;
  wire mux_tmp_190;
  wire nand_tmp_16;
  wire mux_tmp_192;
  wire mux_tmp_194;
  wire mux_tmp_206;
  wire nand_tmp_17;
  wire or_tmp_135;
  wire mux_tmp_207;
  wire mux_tmp_209;
  wire mux_tmp_213;
  wire or_tmp_144;
  wire mux_tmp_233;
  wire and_tmp_16;
  wire and_tmp_17;
  wire mux_tmp_235;
  wire mux_tmp_238;
  wire mux_tmp_240;
  wire mux_tmp_242;
  wire and_tmp_18;
  wire or_tmp_149;
  wire mux_tmp_245;
  wire or_tmp_150;
  wire mux_tmp_247;
  wire and_tmp_19;
  wire mux_tmp_255;
  wire and_tmp_20;
  wire mux_tmp_256;
  wire mux_tmp_261;
  wire or_tmp_159;
  wire or_tmp_161;
  wire or_tmp_163;
  wire or_tmp_166;
  wire or_tmp_170;
  wire mux_tmp_276;
  wire mux_tmp_277;
  wire mux_tmp_280;
  wire mux_tmp_303;
  wire mux_tmp_309;
  wire nor_tmp_72;
  wire nor_tmp_73;
  wire or_tmp_180;
  wire or_tmp_181;
  wire mux_tmp_320;
  wire nand_tmp_18;
  wire mux_tmp_322;
  wire nand_tmp_19;
  wire mux_tmp_324;
  wire mux_tmp_326;
  wire mux_tmp_338;
  wire nand_tmp_20;
  wire mux_tmp_339;
  wire mux_tmp_341;
  reg [1:0] line_write_i_lpi_1_1_0;
  wire lfst_exitL_exitL_exit_MF_outer_1_lpi_1_mx0;
  reg sfi_dpc_loop_in_if_land_lpi_1;
  wire lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_1_mx0;
  wire lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_0_mx0;
  reg exit_rawWindow_read_lpi_1;
  reg sfi_dpc_reg_eb_lpi_1;
  wire lfst_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1;
  wire lfst_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_mx0;
  wire sfi_exit_dpc_loop_in_lpi_1_dfm_1;
  reg sfi_exit_dpc_loop_in_lpi_1;
  wire lfst_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1;
  wire lfst_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_mx0;
  wire exitL_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1;
  wire exitL_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_mx0;
  reg lfst_exit_dpc_loop_in_lpi_1;
  wire lfst_exitL_exit_dpc_loop_in_lpi_1_dfm_1;
  reg lfst_exitL_exit_dpc_loop_in_lpi_1;
  wire exitL_exitL_exit_dpc_loop_in_lpi_1_dfm_1;
  reg exitL_exitL_exit_dpc_loop_in_lpi_1;
  wire addon_loop_addon_loop_nor_1_cse_1;
  wire lfst_exit_addon_loop_lpi_1_dfm_1_1;
  wire lfst_exit_addon_loop_lpi_1_dfm_0_1;
  reg lfst_exit_addon_loop_lpi_1_dfm_3_1;
  reg lfst_exit_addon_loop_lpi_1_dfm_3_0;
  wire exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1;
  reg dpc_loop_in_asn_sft_1_lpi_1_dfm_1;
  reg dpc_loop_in_asn_sft_lpi_1_dfm_1;
  reg MF_outer_equal_tmp_1_1;
  reg dpc_loop_in_if_asn_sft_lpi_1;
  wire dpc_loop_in_if_if_if_asn_sft_lpi_1_dfm_mx0;
  wire MF_inter_nor_2_cse_1;
  reg [2:0] MF_inter_j_3_0_lpi_1_2_0;
  wire exitL_exit_MF_inter_lpi_1_dfm_1;
  reg exitL_exit_MF_inter_lpi_1;
  reg lfst_exit_MF_outer_lpi_1;
  wire lfst_exitL_exit_MF_outer_lpi_1_dfm_1;
  reg lfst_exitL_exit_MF_outer_lpi_1;
  wire defectPixelDetection_1_else_land_lpi_1_dfm_1;
  wire defectPixelDetection_1_land_lpi_1_dfm_1;
  wire MF_inter_1_nor_2_cse_1;
  reg [2:0] MF_inter_1_j_3_0_lpi_1_2_0;
  wire exitL_exit_MF_inter_1_lpi_1_dfm_1;
  reg exitL_exit_MF_inter_1_lpi_1;
  reg lfst_exitL_exitL_exit_MF_outer_lpi_1;
  wire lfst_exitL_exitL_exitL_exit_MF_outer_lpi_1_dfm_1;
  reg lfst_exitL_exitL_exitL_exit_MF_outer_lpi_1;
  wire lfst_exit_addon_loop_lpi_1_dfm_3_1_1;
  wire lfst_exit_addon_loop_lpi_1_dfm_3_0_1;
  wire dpc_loop_out_asn_sft_lpi_1_dfm_1_mx0;
  wire addon_loop_equal_tmp_2;
  wire addon_loop_equal_tmp_3;
  wire addon_loop_and_33_ssc_1;
  wire addon_loop_or_tmp_1;
  wire exit_dpc_loop_in_lpi_1_dfm_1;
  wire exit_rawWindow_read_lpi_1_dfm_3;
  wire [2:0] rawWindow_read_i_sva_2;
  wire [3:0] nl_rawWindow_read_i_sva_2;
  wire exit_rawWindow_read_lpi_1_dfm_2;
  wire [1:0] rawWindow_read_i_lpi_1_dfm_1_0_1;
  wire lfst_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1;
  wire lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1_1;
  wire lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_0_1;
  reg [12:0] dpc_loop_out_row_lpi_1;
  wire dpc_loop_out_dpc_loop_out_nor_2_cse_1;
  reg addon_loop_equal_tmp_1;
  reg addon_loop_equal_tmp_1_1;
  reg dpc_loop_out_asn_sft_lpi_1_dfm_1;
  wire dpc_loop_out_and_tmp_1;
  reg dpc_loop_in_if_if_asn_sft_lpi_1_dfm_1;
  wire MF_inter_and_13_tmp_1;
  wire dpc_loop_in_and_89_tmp_1;
  wire MF_inter_1_and_stg_1_2_sva_1;
  wire MF_inter_and_stg_1_2_sva_1;
  wire MF_inter_1_and_stg_1_1_sva_1;
  wire MF_inter_and_stg_1_1_sva_1;
  wire MF_inter_1_and_13_tmp_1;
  wire dpc_loop_in_if_if_and_1_tmp_1;
  wire MF_outer_MF_outer_nor_2_cse_1;
  wire dpc_loop_in_asn_sft_lpi_1_dfm_mx0;
  wire dpc_loop_out_dpc_loop_out_nor_15_cse_1;
  wire rawWin_loop_and_284_cse_1;
  wire addon_loop_addon_loop_nor_20_cse_1;
  wire rawWin_loop_and_283_cse_mx0;
  wire rawWin_loop_and_282_cse_mx0;
  wire rawWin_loop_and_m1c_mx0;
  wire dpc_loop_in_asn_sft_1_lpi_1_dfm_mx0;
  wire rawWin_loop_and_stg_3_0_sva_1;
  wire MF_outer_equal_tmp_2;
  reg rawWin_loop_and_stg_3_3_3_lpi_1;
  wire rawWin_loop_and_stg_1_0_sva_1;
  reg rawWin_loop_and_stg_3_7_3_lpi_1;
  reg [1:0] rawWindow_read_i_lpi_1_1_0;
  reg [2:0] rawWin_loop_i_lpi_1;
  wire rawWin_loop_and_svs_1;
  wire dpc_loop_in_and_58_tmp_1;
  wire addon_loop_or_172_tmp_1;
  wire MF_outer_MF_outer_nor_21_tmp_1;
  wire [2:0] rawWin_loop_i_sva_2;
  wire [3:0] nl_rawWin_loop_i_sva_2;
  wire [2:0] rawWin_loop_i_lpi_1_dfm_mx0w1;
  wire MF_outer_or_14_tmp_1;
  wire dpc_loop_out_or_2_tmp_1;
  reg addon_loop_and_87_itm_1;
  reg main_stage_0_2;
  reg exitL_exit_addon_loop_sva;
  reg dpc_loop_out_asn_sft_lpi_1;
  reg dpc_loop_in_asn_sft_lpi_1;
  reg dpc_loop_in_asn_sft_1_lpi_1;
  reg lfst_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1;
  reg lfst_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1;
  reg exitL_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1;
  reg lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_1;
  reg lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_0;
  reg lfst_exit_addon_loop_lpi_1_dfm_st_1_1;
  reg addon_loop_and_90_itm_2;
  reg main_stage_0_3;
  reg addon_loop_and_89_itm_2;
  reg addon_loop_and_88_itm_2;
  reg addon_loop_and_87_itm_2;
  reg sfi_dpc_loop_in_if_if_lor_lpi_1_dfm_st_1_1;
  reg lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1;
  reg lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_st_1_0;
  reg [12:0] dpc_loop_out_row_lpi_1_dfm_1;
  reg lfst_exit_addon_loop_lpi_1_dfm_st_1_0;
  reg addon_loop_and_55_itm_1;
  reg addon_loop_and_59_itm_1;
  reg addon_loop_and_62_itm_1;
  reg addon_loop_and_67_itm_1;
  reg sfi_exit_dpc_loop_in_lpi_1_dfm_1_1;
  reg sfi_dpc_loop_in_if_if_lor_lpi_1_dfm_1;
  reg addon_loop_and_53_itm_1;
  reg dpc_loop_in_if_if_if_asn_sft_lpi_1;
  reg defectPixelDetection_rst_lpi_1;
  reg dpc_loop_in_if_if_lor_lpi_1;
  reg lfst_exitL_exitL_exit_MF_outer_1_lpi_1;
  reg addon_loop_and_68_itm_1;
  reg rawWin_loop_acc_5_decb_4_lpi_1;
  reg addon_loop_and_95_itm_1;
  reg [12:0] dpc_loop_in_col_lpi_1_dfm_1;
  wire [11:0] MF_inter_else_aif_slc_arr_sort_12_11_0_ncse_sva_2;
  wire [11:0] MF_inter_1_else_aif_slc_arr_sort_12_11_0_ncse_sva_2;
  wire [12:0] dpc_loop_out_row_lpi_1_dfm_1_1;
  wire [13:0] addon_loop_cnt_sva_2;
  wire [14:0] nl_addon_loop_cnt_sva_2;
  wire [2:0] MF_inter_j_3_0_lpi_1_dfm_2_0_1;
  wire defectPixelDetection_else_land_5_lpi_1_dfm_mx0w0;
  reg defectPixelDetection_else_land_5_lpi_1_dfm;
  wire dpc_loop_in_if_if_else_asn_sft_lpi_1_dfm_mx0;
  wire [2:0] MF_inter_1_j_3_0_lpi_1_dfm_2_0_1;
  wire defectPixelDetection_1_else_land_5_lpi_1_dfm_mx0w0;
  reg defectPixelDetection_1_else_land_5_lpi_1_dfm;
  wire exit_dpc_loop_out_lpi_1_dfm_1;
  reg MF_outer_or_tmp_1;
  reg MF_inter_1_nor_2_cse;
  reg MF_inter_nor_2_cse;
  wire MF_inter_else_land_lpi_1_dfm_mx0w0;
  reg MF_inter_else_land_lpi_1_dfm;
  wire MF_inter_1_and_5_psp_1;
  reg MF_inter_1_and_5_psp;
  wire MF_inter_and_5_psp_1;
  reg MF_inter_and_5_psp;
  wire MF_inter_1_and_4_psp_1;
  reg MF_inter_1_and_4_psp;
  wire MF_inter_and_4_psp_1;
  reg MF_inter_and_4_psp;
  wire MF_inter_1_else_land_lpi_1_dfm_mx0w0;
  reg MF_inter_1_else_land_lpi_1_dfm;
  wire rawWin_loop_and_m1c_mx0w0;
  reg rawWin_loop_and_m1c;
  wire [12:0] dpc_loop_in_col_lpi_1_dfm_1_1;
  wire xor_cse_2;
  reg [11:0] medianFilter_item_lpi_1;
  reg [11:0] medianFilter_1_item_lpi_1;
  wire [11:0] medianFilter_item_sva_1;
  wire [11:0] medianFilter_1_item_sva_1;
  wire sfi_dpc_reg_eb_lpi_1_dfm_1;
  wire dpc_loop_in_and_36_rgt;
  wire dpc_loop_in_and_94_rgt;
  wire dpc_loop_in_if_if_and_7_rgt;
  wire dpc_loop_in_and_93_rgt;
  wire dpc_loop_in_and_10_rgt;
  wire MF_outer_and_2_rgt;
  reg reg_lineBuffer_rsci_oswt_cse;
  reg reg_dst_rsci_oswt_cse;
  reg reg_src_rsci_oswt_cse;
  wire MF_inter_and_cse;
  wire MF_inter_1_and_cse;
  wire and_87_cse;
  wire and_88_cse;
  wire or_18_cse;
  wire dpc_loop_in_and_98_cse;
  wire nor_56_cse;
  wire and_85_cse;
  wire or_217_cse;
  wire dpc_loop_in_or_6_cse;
  wire and_102_cse;
  wire and_97_cse;
  wire and_95_cse;
  wire nor_96_cse;
  wire nor_120_cse;
  wire and_105_cse;
  wire or_225_cse;
  wire or_237_cse;
  wire MF_outer_or_tmp_mx0w0;
  wire addon_loop_and_37_tmp_1;
  wire dpc_loop_in_nand_cse_1;
  wire dpc_loop_in_if_if_if_and_3_tmp_1;
  wire dpc_loop_in_if_and_3_m1c_1;
  wire dpc_loop_in_if_if_else_and_3_tmp_1;
  wire dpc_loop_in_if_and_4_m1c_1;
  wire dpc_loop_in_if_if_if_and_4_tmp_1;
  wire dpc_loop_in_if_if_else_and_4_tmp_1;
  wire addon_loop_or_175_cse_1;
  wire dpc_loop_in_if_if_if_and_1_tmp_1;
  wire dpc_loop_in_if_if_else_and_1_tmp_1;
  wire dpc_loop_in_if_if_if_and_2_tmp_1;
  wire dpc_loop_in_if_if_else_and_2_tmp_1;
  wire dpc_loop_in_if_if_if_and_5_tmp_1;
  wire dpc_loop_in_if_if_else_and_5_tmp_1;
  wire dpc_loop_in_if_if_if_and_6_tmp_1;
  wire dpc_loop_in_if_if_else_and_6_tmp_1;
  wire dpc_loop_out_and_35_tmp_1;
  wire rawWin_loop_and_189_psp_mx0;
  wire lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1_mx0;
  wire dpc_loop_in_if_aelse_and_cse;
  wire MF_inter_and_26_cse;
  wire MF_inter_1_and_26_cse;
  wire dpc_reg_eb_and_cse;
  wire rawWin_loop_and_289_cse;
  wire nor_119_cse;
  wire or_65_cse;
  wire and_36_cse;
  wire and_15_cse;
  wire lineBuffer_rsci_we_d_iff;
  wire lineBuffer_rsci_re_d_iff;
  wire rawWindow_read_nor_1_rmff;
  reg [11:0] rawWindow_1_3_1_lpi_1;
  wire [11:0] rawWindow_1_4_1_lpi_1_mx0;
  reg [11:0] rawWindow_2_0_1_lpi_1;
  reg [11:0] rawWindow_2_1_1_lpi_1;
  reg [11:0] rawWindow_2_2_1_lpi_1;
  reg [11:0] rawWindow_2_3_1_lpi_1;
  wire [11:0] rawWindow_2_4_1_lpi_1_mx0;
  reg [11:0] rawWindow_3_0_1_lpi_1;
  reg [11:0] rawWindow_3_1_1_lpi_1;
  reg [11:0] rawWindow_3_2_1_lpi_1;
  reg [11:0] rawWindow_3_3_1_lpi_1;
  wire [11:0] rawWindow_3_4_1_lpi_1_mx0;
  reg [11:0] rawWindow_4_0_1_lpi_1;
  reg [11:0] rawWindow_4_1_1_lpi_1;
  reg [11:0] rawWindow_4_2_1_lpi_1;
  reg [11:0] rawWindow_4_3_1_lpi_1;
  wire [11:0] srcData_lpi_1_dfm_mx0;
  reg [2:0] line_write_acc_4_itm_1;
  reg [1:0] operator_3_false_slc_operator_3_false_acc_psp_4_0_1_0_itm_1;
  reg [1:0] line_write_acc_itm_1;
  wire dpc_loop_in_if_and_tmp_1;
  wire or_302_tmp;
  wire MF_inter_j_and_itm;
  wire MF_inter_1_j_and_itm;
  wire mux_374_itm;
  wire mux_95_itm;
  wire mux_98_itm;
  wire mux_276_itm;
  wire mux_tmp_378;
  wire or_tmp_220;
  wire mux_tmp_379;
  wire mux_tmp_380;
  wire and_dcpl_51;
  wire [12:0] z_out;
  wire [13:0] nl_z_out;
  wire [12:0] z_out_1;
  wire and_dcpl_53;
  wire [11:0] z_out_6;
  reg [11:0] rawWindow_2_4_1_lpi_1;
  reg [11:0] rawWindow_1_4_1_lpi_1;
  reg [11:0] rawWindow_1_1_1_lpi_1;
  reg [11:0] rawWindow_3_4_1_lpi_1;
  reg [11:0] rawWindow_0_4_1_lpi_1;
  reg [11:0] rawWindow_0_2_1_lpi_1;
  reg [11:0] rawWindow_0_1_1_lpi_1;
  reg [11:0] rawWindow_0_0_lpi_1;
  reg [11:0] rawWindow_4_4_lpi_1;
  reg [11:0] arr_sort_3_lpi_1;
  reg [11:0] arr_sort_4_lpi_1;
  reg [11:0] arr_sort_2_lpi_1;
  reg [11:0] arr_sort_5_lpi_1;
  reg [11:0] arr_sort_1_lpi_1;
  reg [11:0] arr_sort_6_lpi_1;
  reg [12:0] dpc_loop_in_col_lpi_1;
  reg [11:0] srcData_lpi_1;
  reg [11:0] rawWindow_1_2_lpi_1;
  reg [11:0] rawWindow_0_3_lpi_1;
  reg [11:0] rawWin_loop_rawWin_loop_slc_rawWindow_60_59_48_1_ctmp_lpi_1;
  reg dpc_loop_in_if_if_asn_sft_lpi_1;
  reg [11:0] dstData_lpi_1;
  reg defectPixelDetection_1_rst_lpi_1;
  reg dpc_loop_in_if_if_else_asn_sft_lpi_1;
  reg [13:0] addon_loop_cnt_lpi_1;
  reg rawWin_loop_and_197_psp;
  reg rawWin_loop_and_189_psp;
  reg rawWin_loop_and_svs_1_1;
  reg operator_13_false_slc_operator_13_false_acc_11_svs_1;
  reg MF_outer_equal_tmp_1;
  reg [11:0] rawWin_loop_rawWin_loop_slc_rawWindow_60_47_36_1_ctmp_sva_1;
  reg [11:0] rawWin_loop_rawWin_loop_slc_rawWindow_60_35_24_1_ctmp_sva_1;
  reg [11:0] rawWin_loop_rawWin_loop_slc_rawWindow_60_23_12_1_ctmp_sva_1;
  reg [11:0] arr_sort_0_lpi_1_dfm_1;
  reg [11:0] defectPixelDetection_1_th_2_sva_1;
  wire [12:0] nl_defectPixelDetection_1_th_2_sva_1;
  reg [12:0] defectPixelDetection_1_diff_0_sva_1;
  reg [12:0] defectPixelDetection_1_diff_1_sva_1;
  reg [12:0] defectPixelDetection_1_diff_2_sva_1;
  reg [12:0] defectPixelDetection_1_diff_3_sva_1;
  wire [14:0] nl_defectPixelDetection_1_diff_3_sva_1;
  reg [12:0] defectPixelDetection_1_diff_5_sva_1;
  reg [12:0] defectPixelDetection_1_diff_6_sva_1;
  reg [12:0] defectPixelDetection_1_diff_7_sva_1;
  reg addon_loop_and_88_itm_1;
  reg addon_loop_and_89_itm_1;
  reg addon_loop_and_90_itm_1;
  reg operator_3_false_2_slc_line_write_i_2_2_itm_1;
  reg [2:0] MF_outer_i_3_0_lpi_1_2_0;
  reg [2:0] MF_outer_1_i_3_0_lpi_1_2_0;
  reg rawWin_loop_and_282_cse;
  reg rawWin_loop_and_283_cse;
  reg lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_2_1_0;
  wire [11:0] rawWindow_0_4_1_lpi_1_mx0;
  wire dpc_loop_in_if_if_lor_lpi_1_dfm_1_mx0;
  wire [12:0] dpc_loop_in_col_lpi_1_mx0;
  wire dpc_loop_in_if_asn_sft_lpi_1_mx0;
  wire dst_rsci_idat_mx0c1;
  wire [2:0] line_write_i_sva_2;
  wire [3:0] nl_line_write_i_sva_2;
  wire exitL_exit_MF_outer_pmx_lpi_1_dfm_mx0;
  wire dpc_loop_in_and_17_tmp_1;
  wire [11:0] dstData_lpi_1_dfm_9;
  wire [11:0] rawWindow_1_3_1_lpi_1_mx0;
  wire [11:0] rawWindow_2_1_1_lpi_1_mx0;
  wire [11:0] rawWindow_2_2_1_lpi_1_mx0;
  wire [11:0] rawWindow_2_3_1_lpi_1_mx0;
  wire [11:0] rawWindow_3_1_1_lpi_1_mx0;
  wire [11:0] rawWindow_3_2_1_lpi_1_mx0;
  wire [11:0] rawWindow_3_3_1_lpi_1_mx0;
  wire [11:0] rawWindow_4_0_1_lpi_1_mx0;
  wire [11:0] rawWindow_4_1_1_lpi_1_mx0;
  wire [11:0] rawWindow_4_2_1_lpi_1_mx1;
  wire [11:0] rawWindow_4_3_1_lpi_1_mx0;
  wire MF_outer_dpc_loop_in_if_nor_seb_1;
  wire exitL_exit_MF_outer_lpi_1_dfm_1;
  wire [2:0] MF_outer_i_3_0_lpi_1_dfm_2_0_1;
  wire defectPixelDetection_rst_lpi_1_dfm_2;
  wire [12:0] defectPixelDetection_diff_7_sva_1;
  wire [14:0] nl_defectPixelDetection_diff_7_sva_1;
  wire [12:0] defectPixelDetection_diff_4_sva_1;
  wire [14:0] nl_defectPixelDetection_diff_4_sva_1;
  wire [12:0] defectPixelDetection_diff_2_sva_1;
  wire [14:0] nl_defectPixelDetection_diff_2_sva_1;
  wire [11:0] rawWindow_0_0_lpi_1_dfm_1;
  wire [11:0] rawWindow_0_2_1_lpi_1_mx1;
  wire MF_inter_else_land_lpi_1_dfm_mx0;
  wire defectPixelDetection_rst_lpi_1_dfm_1_mx0;
  wire exitL_exitL_exitL_exit_MF_outer_lpi_1_dfm_1;
  wire [2:0] MF_outer_1_i_3_0_lpi_1_dfm_2_0_1;
  wire defectPixelDetection_1_rst_lpi_1_dfm_2;
  wire [12:0] defectPixelDetection_diff_6_sva_1;
  wire [14:0] nl_defectPixelDetection_diff_6_sva_1;
  wire [12:0] defectPixelDetection_diff_1_sva_mx0w1;
  wire [14:0] nl_defectPixelDetection_diff_1_sva_mx0w1;
  wire [11:0] rawWindow_1_1_1_lpi_1_mx0;
  wire MF_inter_1_else_land_lpi_1_dfm_mx0;
  wire defectPixelDetection_1_rst_lpi_1_dfm_1_mx0;
  wire MF_outer_and_23_ssc_1;
  wire MF_outer_and_24_ssc_1;
  wire [11:0] rawWin_loop_rawWin_loop_slc_rawWindow_60_59_48_1_ctmp_sva_1;
  wire [11:0] rawWin_loop_rawWin_loop_slc_rawWindow_60_47_36_1_ctmp_sva_1_1;
  wire [11:0] rawWin_loop_rawWin_loop_slc_rawWindow_60_35_24_1_ctmp_sva_1_1;
  wire [11:0] rawWin_loop_rawWin_loop_slc_rawWindow_60_23_12_1_ctmp_sva_1_1;
  wire exitL_exit_dpc_loop_in_lpi_1_dfm_1;
  wire rawWin_loop_and_282_cse_mx0w0;
  wire rawWin_loop_and_283_cse_mx0w0;
  wire rawWin_loop_and_197_psp_1;
  wire [11:0] rawWin_loop_rawWin_loop_slc_rawWindow_60_59_48_1_ctmp_lpi_1_mx0;
  wire rawWin_loop_and_189_psp_1;
  wire defectPixelDetection_aif_1_acc_itm_13;
  wire defectPixelDetection_1_aif_1_acc_itm_13;
  wire defectPixelDetection_1_else_aif_5_acc_1_itm_13;
  wire defectPixelDetection_1_else_aif_4_acc_1_itm_13;
  wire defectPixelDetection_1_else_aif_2_acc_1_itm_13;
  wire defectPixelDetection_1_else_acc_1_itm_13;
  wire defectPixelDetection_1_aif_5_acc_1_itm_13;
  wire defectPixelDetection_1_aif_4_acc_1_itm_13;
  wire defectPixelDetection_1_aif_2_acc_1_itm_13;
  wire defectPixelDetection_1_acc_15_itm_13;
  wire defectPixelDetection_1_else_aif_3_acc_1_itm_13;
  wire defectPixelDetection_1_aif_3_acc_1_itm_13;
  wire mux_410_itm;
  wire mux_412_itm;
  wire dpc_loop_in_acc_2_itm_13_1;
  wire operator_6_true_acc_itm_3_1;
  wire MF_inter_acc_itm_3_1;
  wire defectPixelDetection_else_aif_6_acc_itm_13_1;
  wire defectPixelDetection_else_aif_1_acc_itm_13_1;
  wire defectPixelDetection_aif_6_acc_itm_13_1;
  wire operator_6_true_2_acc_itm_3_1;
  wire MF_inter_1_acc_itm_3_1;
  wire defectPixelDetection_1_else_aif_6_acc_itm_13_1;
  wire defectPixelDetection_1_else_aif_1_acc_itm_13_1;
  wire defectPixelDetection_1_aif_6_acc_itm_13_1;
  wire dpc_loop_out_acc_3_itm_13_1;
  wire defectPixelDetection_1_else_aif_acc_1_itm_13_1;
  wire defectPixelDetection_1_aif_acc_1_itm_13_1;
  wire MF_inter_mux_25_m1c;
  wire MF_inter_mux_26_m1c;

  wire[0:0] MF_outer_mux_nl;
  wire[0:0] line_write_line_write_or_nl;
  wire[0:0] mux_46_nl;
  wire[0:0] mux_45_nl;
  wire[0:0] mux_44_nl;
  wire[0:0] mux_43_nl;
  wire[0:0] or_51_nl;
  wire[0:0] mux_49_nl;
  wire[0:0] mux_48_nl;
  wire[0:0] or_59_nl;
  wire[0:0] nor_114_nl;
  wire[0:0] dpc_loop_in_if_1_not_2_nl;
  wire[0:0] nor_109_nl;
  wire[0:0] mux_58_nl;
  wire[0:0] mux_57_nl;
  wire[0:0] mux_56_nl;
  wire[0:0] nor_110_nl;
  wire[0:0] mux_55_nl;
  wire[0:0] mux_54_nl;
  wire[0:0] mux_53_nl;
  wire[0:0] mux_52_nl;
  wire[0:0] mux_50_nl;
  wire[0:0] nand_32_nl;
  wire[0:0] dpc_loop_out_and_36_nl;
  wire[1:0] rawWin_loop_rawWin_loop_and_nl;
  wire[0:0] rawWin_loop_not_249_nl;
  wire[11:0] operator_13_false_acc_nl;
  wire[12:0] nl_operator_13_false_acc_nl;
  wire[2:0] line_write_acc_4_nl;
  wire[3:0] nl_line_write_acc_4_nl;
  wire[1:0] line_write_acc_nl;
  wire[2:0] nl_line_write_acc_nl;
  wire[1:0] rawWindow_read_acc_5_nl;
  wire[2:0] nl_rawWindow_read_acc_5_nl;
  wire[11:0] addon_loop_addon_loop_addon_loop_addon_loop_mux_14_nl;
  wire[0:0] addon_loop_or_189_nl;
  wire[0:0] MF_inter_mux_6_nl;
  wire[0:0] or_136_nl;
  wire[0:0] MF_inter_1_mux_6_nl;
  wire[0:0] or_159_nl;
  wire[0:0] addon_loop_not_127_nl;
  wire[0:0] addon_loop_and_100_nl;
  wire[13:0] acc_2_nl;
  wire[14:0] nl_acc_2_nl;
  wire[11:0] defectPixelDetection_1_mux_7_nl;
  wire[11:0] rawWin_loop_mux_nl;
  wire[12:0] defectPixelDetection_1_acc_10_nl;
  wire[14:0] nl_defectPixelDetection_1_acc_10_nl;
  wire[0:0] mux_143_nl;
  wire[0:0] mux_142_nl;
  wire[0:0] and_86_nl;
  wire[0:0] mux_141_nl;
  wire[0:0] mux_140_nl;
  wire[0:0] mux_139_nl;
  wire[0:0] mux_138_nl;
  wire[0:0] mux_136_nl;
  wire[0:0] mux_132_nl;
  wire[0:0] mux_125_nl;
  wire[0:0] mux_124_nl;
  wire[0:0] mux_123_nl;
  wire[0:0] mux_122_nl;
  wire[0:0] mux_121_nl;
  wire[0:0] mux_120_nl;
  wire[0:0] mux_119_nl;
  wire[0:0] mux_114_nl;
  wire[0:0] mux_113_nl;
  wire[0:0] mux_112_nl;
  wire[0:0] mux_111_nl;
  wire[0:0] and_89_nl;
  wire[0:0] mux_108_nl;
  wire[0:0] mux_107_nl;
  wire[0:0] or_166_nl;
  wire[0:0] and_48_nl;
  wire[12:0] defectPixelDetection_1_acc_nl;
  wire[14:0] nl_defectPixelDetection_1_acc_nl;
  wire[0:0] addon_loop_and_102_nl;
  wire[0:0] mux_154_nl;
  wire[0:0] mux_153_nl;
  wire[0:0] mux_152_nl;
  wire[0:0] mux_151_nl;
  wire[0:0] and_79_nl;
  wire[0:0] and_80_nl;
  wire[0:0] mux_149_nl;
  wire[0:0] mux_148_nl;
  wire[0:0] or_188_nl;
  wire[0:0] or_187_nl;
  wire[0:0] and_83_nl;
  wire[0:0] and_84_nl;
  wire[0:0] mux_146_nl;
  wire[0:0] mux_145_nl;
  wire[0:0] and_51_nl;
  wire[0:0] mux_144_nl;
  wire[0:0] nor_104_nl;
  wire[0:0] and_53_nl;
  wire[0:0] mux_173_nl;
  wire[0:0] nor_97_nl;
  wire[0:0] mux_172_nl;
  wire[0:0] mux_171_nl;
  wire[0:0] mux_170_nl;
  wire[0:0] nor_126_nl;
  wire[0:0] mux_169_nl;
  wire[0:0] mux_168_nl;
  wire[0:0] mux_167_nl;
  wire[0:0] mux_166_nl;
  wire[0:0] nor_98_nl;
  wire[0:0] or_197_nl;
  wire[0:0] mux_165_nl;
  wire[0:0] nor_99_nl;
  wire[0:0] nand_23_nl;
  wire[0:0] mux_189_nl;
  wire[0:0] mux_188_nl;
  wire[0:0] mux_187_nl;
  wire[0:0] mux_186_nl;
  wire[0:0] mux_185_nl;
  wire[0:0] mux_184_nl;
  wire[0:0] mux_183_nl;
  wire[0:0] mux_182_nl;
  wire[0:0] mux_181_nl;
  wire[0:0] mux_180_nl;
  wire[0:0] mux_179_nl;
  wire[0:0] mux_178_nl;
  wire[0:0] or_210_nl;
  wire[0:0] and_73_nl;
  wire[0:0] mux_176_nl;
  wire[0:0] or_208_nl;
  wire[0:0] mux_175_nl;
  wire[0:0] or_207_nl;
  wire[0:0] mux_164_nl;
  wire[0:0] nor_100_nl;
  wire[0:0] mux_163_nl;
  wire[0:0] mux_162_nl;
  wire[0:0] mux_161_nl;
  wire[0:0] nor_101_nl;
  wire[0:0] mux_160_nl;
  wire[0:0] mux_159_nl;
  wire[0:0] mux_25_nl;
  wire[0:0] mux_24_nl;
  wire[0:0] nand_1_nl;
  wire[0:0] mux_155_nl;
  wire[0:0] mux_199_nl;
  wire[0:0] mux_236_nl;
  wire[0:0] mux_235_nl;
  wire[0:0] mux_234_nl;
  wire[0:0] or_234_nl;
  wire[0:0] mux_233_nl;
  wire[0:0] mux_232_nl;
  wire[0:0] mux_231_nl;
  wire[0:0] mux_230_nl;
  wire[0:0] mux_229_nl;
  wire[0:0] mux_228_nl;
  wire[0:0] mux_227_nl;
  wire[0:0] mux_226_nl;
  wire[0:0] mux_225_nl;
  wire[0:0] mux_224_nl;
  wire[0:0] mux_223_nl;
  wire[0:0] mux_222_nl;
  wire[0:0] mux_221_nl;
  wire[0:0] mux_220_nl;
  wire[0:0] mux_219_nl;
  wire[0:0] mux_218_nl;
  wire[0:0] mux_215_nl;
  wire[0:0] mux_209_nl;
  wire[0:0] mux_208_nl;
  wire[0:0] mux_207_nl;
  wire[0:0] mux_206_nl;
  wire[0:0] mux_205_nl;
  wire[0:0] mux_204_nl;
  wire[0:0] mux_203_nl;
  wire[0:0] mux_202_nl;
  wire[0:0] mux_201_nl;
  wire[0:0] and_54_nl;
  wire[13:0] dpc_loop_out_dpc_loop_out_and_2_nl;
  wire[0:0] addon_loop_addon_loop_dpc_loop_out_not_3_nl;
  wire[0:0] mux_322_nl;
  wire[0:0] or_272_nl;
  wire[0:0] mux_321_nl;
  wire[0:0] mux_320_nl;
  wire[0:0] nand_21_nl;
  wire[0:0] mux_319_nl;
  wire[0:0] mux_318_nl;
  wire[0:0] mux_317_nl;
  wire[0:0] mux_316_nl;
  wire[0:0] mux_315_nl;
  wire[0:0] or_269_nl;
  wire[0:0] mux_314_nl;
  wire[0:0] mux_311_nl;
  wire[0:0] mux_310_nl;
  wire[0:0] mux_309_nl;
  wire[0:0] mux_308_nl;
  wire[0:0] mux_296_nl;
  wire[0:0] mux_295_nl;
  wire[0:0] mux_294_nl;
  wire[0:0] mux_293_nl;
  wire[0:0] mux_292_nl;
  wire[0:0] mux_291_nl;
  wire[0:0] mux_290_nl;
  wire[0:0] mux_285_nl;
  wire[0:0] mux_289_nl;
  wire[0:0] mux_288_nl;
  wire[0:0] mux_418_nl;
  wire[0:0] nor_67_nl;
  wire[4:0] rawWin_loop_acc_5_nl;
  wire[5:0] nl_rawWin_loop_acc_5_nl;
  wire[0:0] mux_331_nl;
  wire[0:0] mux_371_nl;
  wire[0:0] nor_82_nl;
  wire[0:0] mux_370_nl;
  wire[0:0] mux_369_nl;
  wire[0:0] mux_368_nl;
  wire[0:0] nor_83_nl;
  wire[0:0] mux_367_nl;
  wire[0:0] mux_366_nl;
  wire[0:0] mux_365_nl;
  wire[0:0] mux_364_nl;
  wire[0:0] mux_363_nl;
  wire[0:0] mux_362_nl;
  wire[0:0] mux_361_nl;
  wire[0:0] mux_360_nl;
  wire[0:0] mux_359_nl;
  wire[0:0] mux_358_nl;
  wire[0:0] mux_357_nl;
  wire[0:0] mux_355_nl;
  wire[0:0] mux_352_nl;
  wire[0:0] mux_351_nl;
  wire[0:0] mux_350_nl;
  wire[0:0] mux_349_nl;
  wire[0:0] mux_348_nl;
  wire[0:0] or_290_nl;
  wire[0:0] mux_347_nl;
  wire[0:0] mux_341_nl;
  wire[0:0] mux_340_nl;
  wire[0:0] mux_339_nl;
  wire[0:0] mux_338_nl;
  wire[0:0] mux_337_nl;
  wire[0:0] mux_336_nl;
  wire[0:0] mux_335_nl;
  wire[0:0] mux_334_nl;
  wire[0:0] mux_333_nl;
  wire[0:0] rawWin_loop_mux_16_nl;
  wire[0:0] and_66_nl;
  wire[0:0] nand_52_nl;
  wire[0:0] nand_41_nl;
  wire[0:0] asn_rawWindow_1_4_1_lpi_1_nand_nl;
  wire[0:0] asn_rawWindow_0_4_1_lpi_1_nand_nl;
  wire[0:0] addon_loop_not_129_nl;
  wire[0:0] dpc_loop_in_if_if_if_dpc_loop_in_if_if_if_nand_nl;
  wire[0:0] dpc_loop_out_mux_169_nl;
  wire[0:0] dpc_loop_in_mux_310_nl;
  wire[0:0] dpc_loop_in_mux_155_nl;
  wire[0:0] MF_outer_MF_outer_mux_143_nl;
  wire[0:0] dpc_loop_in_if_mux_101_nl;
  wire[12:0] dpc_loop_in_acc_1_nl;
  wire[13:0] nl_dpc_loop_in_acc_1_nl;
  wire[0:0] dpc_loop_in_col_nand_nl;
  wire[0:0] dpc_loop_in_col_and_nl;
  wire[0:0] dpc_loop_out_and_17_nl;
  wire[0:0] dpc_loop_out_mux_173_nl;
  wire[0:0] dpc_loop_in_mux_312_nl;
  wire[0:0] dpc_loop_in_mux_157_nl;
  wire[0:0] MF_outer_MF_outer_mux_145_nl;
  wire[0:0] line_write_mux_1_nl;
  wire[0:0] dpc_loop_in_if_if_dpc_loop_in_if_if_and_nl;
  wire[11:0] operator_13_false_1_acc_nl;
  wire[12:0] nl_operator_13_false_1_acc_nl;
  wire[0:0] mux_75_nl;
  wire[0:0] nor_106_nl;
  wire[0:0] mux_74_nl;
  wire[0:0] mux_73_nl;
  wire[0:0] mux_72_nl;
  wire[0:0] nor_107_nl;
  wire[0:0] mux_71_nl;
  wire[0:0] mux_70_nl;
  wire[0:0] mux_69_nl;
  wire[0:0] mux_68_nl;
  wire[0:0] mux_67_nl;
  wire[0:0] and_39_nl;
  wire[0:0] mux_66_nl;
  wire[0:0] and_38_nl;
  wire[0:0] mux_63_nl;
  wire[0:0] mux_62_nl;
  wire[0:0] mux_61_nl;
  wire[0:0] nand_6_nl;
  wire[0:0] mux_60_nl;
  wire[0:0] or_69_nl;
  wire[0:0] nand_5_nl;
  wire[0:0] and_45_nl;
  wire[0:0] mux_77_nl;
  wire[0:0] or_81_nl;
  wire[0:0] dpc_loop_out_mux_179_nl;
  wire[0:0] dpc_loop_in_mux_318_nl;
  wire[13:0] dpc_loop_in_acc_2_nl;
  wire[14:0] nl_dpc_loop_in_acc_2_nl;
  wire[0:0] or_89_nl;
  wire[0:0] mux_78_nl;
  wire[0:0] or_88_nl;
  wire[0:0] dpc_loop_out_mux_186_nl;
  wire[0:0] dpc_loop_in_dpc_loop_in_or_4_nl;
  wire[0:0] dpc_loop_out_mux_188_nl;
  wire[0:0] dpc_loop_in_dpc_loop_in_dpc_loop_in_nor_nl;
  wire[0:0] or_91_nl;
  wire[0:0] MF_outer_mux_29_nl;
  wire[0:0] MF_outer_MF_outer_and_5_nl;
  wire[0:0] mux_nl;
  wire[0:0] nor_127_nl;
  wire[0:0] nor_128_nl;
  wire[11:0] dpc_loop_in_if_dpc_loop_in_if_and_1_nl;
  wire[11:0] dpc_loop_in_if_dpc_loop_in_if_dpc_loop_in_if_mux_nl;
  wire[12:0] medianFilter_acc_nl;
  wire[13:0] nl_medianFilter_acc_nl;
  wire[11:0] mux_420_nl;
  wire[0:0] MF_inter_mux_21_nl;
  wire[11:0] mux_421_nl;
  wire[0:0] MF_inter_mux_22_nl;
  wire[0:0] dpc_loop_in_if_or_nl;
  wire[0:0] nor_129_nl;
  wire[0:0] and_114_nl;
  wire[0:0] dpc_reg_eb_not_5_nl;
  wire[3:0] operator_6_true_acc_nl;
  wire[4:0] nl_operator_6_true_acc_nl;
  wire[3:0] MF_inter_acc_nl;
  wire[4:0] nl_MF_inter_acc_nl;
  wire[0:0] defectPixelDetection_else_aelse_5_mux_nl;
  wire[13:0] defectPixelDetection_else_aif_6_acc_nl;
  wire[14:0] nl_defectPixelDetection_else_aif_6_acc_nl;
  wire[13:0] defectPixelDetection_else_aif_1_acc_nl;
  wire[14:0] nl_defectPixelDetection_else_aif_1_acc_nl;
  wire[13:0] defectPixelDetection_aif_6_acc_nl;
  wire[14:0] nl_defectPixelDetection_aif_6_acc_nl;
  wire[13:0] defectPixelDetection_aif_1_acc_nl;
  wire[14:0] nl_defectPixelDetection_aif_1_acc_nl;
  wire[0:0] addon_loop_not_151_nl;
  wire[0:0] nand_35_nl;
  wire[2:0] operator_6_true_acc_nl_1;
  wire[3:0] nl_operator_6_true_acc_nl_1;
  wire[12:0] MF_inter_else_aelse_acc_nl;
  wire[13:0] nl_MF_inter_else_aelse_acc_nl;
  wire[11:0] medianFilter_item_mux_nl;
  wire[0:0] or_140_nl;
  wire[3:0] operator_6_true_2_acc_nl;
  wire[4:0] nl_operator_6_true_2_acc_nl;
  wire[3:0] MF_inter_1_acc_nl;
  wire[4:0] nl_MF_inter_1_acc_nl;
  wire[0:0] defectPixelDetection_1_else_aelse_5_mux_nl;
  wire[13:0] defectPixelDetection_1_else_aif_6_acc_nl;
  wire[14:0] nl_defectPixelDetection_1_else_aif_6_acc_nl;
  wire[13:0] defectPixelDetection_1_else_aif_1_acc_nl;
  wire[14:0] nl_defectPixelDetection_1_else_aif_1_acc_nl;
  wire[13:0] defectPixelDetection_1_aif_6_acc_nl;
  wire[14:0] nl_defectPixelDetection_1_aif_6_acc_nl;
  wire[13:0] defectPixelDetection_1_aif_1_acc_nl;
  wire[14:0] nl_defectPixelDetection_1_aif_1_acc_nl;
  wire[2:0] operator_6_true_3_acc_nl;
  wire[3:0] nl_operator_6_true_3_acc_nl;
  wire[12:0] MF_inter_1_else_aelse_acc_nl;
  wire[13:0] nl_MF_inter_1_else_aelse_acc_nl;
  wire[11:0] medianFilter_1_item_mux_nl;
  wire[0:0] or_174_nl;
  wire[2:0] operator_3_false_acc_nl;
  wire[3:0] nl_operator_3_false_acc_nl;
  wire[13:0] dpc_loop_out_acc_3_nl;
  wire[14:0] nl_dpc_loop_out_acc_3_nl;
  wire[0:0] addon_loop_mux_10_nl;
  wire[13:0] operator_45_true_acc_nl;
  wire[14:0] nl_operator_45_true_acc_nl;
  wire[0:0] dpc_reg_eb_not_10_nl;
  wire[0:0] MF_inter_1_else_aelse_mux_3_nl;
  wire[0:0] or_180_nl;
  wire[0:0] rawWin_loop_and_286_nl;
  wire[0:0] rawWin_loop_and_287_nl;
  wire[0:0] rawWin_loop_and_280_nl;
  wire[0:0] rawWin_loop_and_281_nl;
  wire[0:0] MF_inter_else_aelse_mux_3_nl;
  wire[0:0] or_148_nl;
  wire[0:0] MF_inter_1_mux_4_nl;
  wire[0:0] MF_inter_mux_4_nl;
  wire[0:0] MF_inter_1_mux_2_nl;
  wire[0:0] MF_inter_mux_2_nl;
  wire[0:0] dpc_loop_in_mux_327_nl;
  wire[0:0] asn_rawWin_loop_rawWin_loop_slc_rawWindow_60_59_48_1_ctmp_lpi_1_nand_nl;
  wire[13:0] defectPixelDetection_1_else_aif_5_acc_1_nl;
  wire[14:0] nl_defectPixelDetection_1_else_aif_5_acc_1_nl;
  wire[13:0] defectPixelDetection_1_else_aif_4_acc_1_nl;
  wire[14:0] nl_defectPixelDetection_1_else_aif_4_acc_1_nl;
  wire[13:0] defectPixelDetection_1_else_aif_2_acc_1_nl;
  wire[14:0] nl_defectPixelDetection_1_else_aif_2_acc_1_nl;
  wire[13:0] defectPixelDetection_1_else_aif_acc_1_nl;
  wire[14:0] nl_defectPixelDetection_1_else_aif_acc_1_nl;
  wire[13:0] defectPixelDetection_1_else_acc_1_nl;
  wire[14:0] nl_defectPixelDetection_1_else_acc_1_nl;
  wire[13:0] defectPixelDetection_1_aif_5_acc_1_nl;
  wire[14:0] nl_defectPixelDetection_1_aif_5_acc_1_nl;
  wire[13:0] defectPixelDetection_1_aif_4_acc_1_nl;
  wire[14:0] nl_defectPixelDetection_1_aif_4_acc_1_nl;
  wire[13:0] defectPixelDetection_1_aif_2_acc_1_nl;
  wire[14:0] nl_defectPixelDetection_1_aif_2_acc_1_nl;
  wire[13:0] defectPixelDetection_1_aif_acc_1_nl;
  wire[14:0] nl_defectPixelDetection_1_aif_acc_1_nl;
  wire[13:0] defectPixelDetection_1_acc_15_nl;
  wire[14:0] nl_defectPixelDetection_1_acc_15_nl;
  wire[13:0] defectPixelDetection_1_else_aif_3_acc_1_nl;
  wire[14:0] nl_defectPixelDetection_1_else_aif_3_acc_1_nl;
  wire[13:0] defectPixelDetection_1_aif_3_acc_1_nl;
  wire[14:0] nl_defectPixelDetection_1_aif_3_acc_1_nl;
  wire[0:0] mux_42_nl;
  wire[0:0] nand_2_nl;
  wire[0:0] mux_41_nl;
  wire[0:0] nor_112_nl;
  wire[0:0] mux_40_nl;
  wire[0:0] nand_34_nl;
  wire[0:0] nor_113_nl;
  wire[0:0] or_nl;
  wire[12:0] operator_13_false_3_acc_nl;
  wire[13:0] nl_operator_13_false_3_acc_nl;
  wire[13:0] operator_13_false_2_acc_nl;
  wire[14:0] nl_operator_13_false_2_acc_nl;
  wire[0:0] mux_91_nl;
  wire[0:0] mux_90_nl;
  wire[0:0] or_117_nl;
  wire[0:0] mux_89_nl;
  wire[0:0] nand_25_nl;
  wire[0:0] mux_88_nl;
  wire[0:0] and_46_nl;
  wire[0:0] mux_87_nl;
  wire[0:0] nor_105_nl;
  wire[0:0] mux_86_nl;
  wire[0:0] or_113_nl;
  wire[0:0] mux_85_nl;
  wire[0:0] mux_84_nl;
  wire[0:0] mux_83_nl;
  wire[0:0] mux_82_nl;
  wire[0:0] nand_28_nl;
  wire[0:0] mux_81_nl;
  wire[0:0] mux_80_nl;
  wire[0:0] or_125_nl;
  wire[0:0] or_153_nl;
  wire[0:0] xnor_nl;
  wire[0:0] mux_109_nl;
  wire[0:0] mux_116_nl;
  wire[0:0] mux_115_nl;
  wire[0:0] mux_130_nl;
  wire[0:0] mux_417_nl;
  wire[0:0] or_203_nl;
  wire[0:0] or_211_nl;
  wire[0:0] mux_191_nl;
  wire[0:0] mux_193_nl;
  wire[0:0] or_223_nl;
  wire[0:0] mux_195_nl;
  wire[0:0] or_227_nl;
  wire[0:0] mux_216_nl;
  wire[0:0] or_231_nl;
  wire[0:0] and_106_nl;
  wire[0:0] mux_238_nl;
  wire[0:0] and_71_nl;
  wire[0:0] nor_90_nl;
  wire[0:0] mux_241_nl;
  wire[0:0] mux_419_nl;
  wire[0:0] mux_243_nl;
  wire[0:0] nor_89_nl;
  wire[0:0] mux_245_nl;
  wire[0:0] nor_62_nl;
  wire[0:0] mux_247_nl;
  wire[0:0] nor_87_nl;
  wire[0:0] mux_258_nl;
  wire[0:0] or_247_nl;
  wire[0:0] mux_416_nl;
  wire[0:0] mux_275_nl;
  wire[0:0] mux_274_nl;
  wire[0:0] mux_273_nl;
  wire[0:0] mux_272_nl;
  wire[0:0] mux_271_nl;
  wire[0:0] mux_270_nl;
  wire[0:0] mux_269_nl;
  wire[0:0] mux_268_nl;
  wire[0:0] mux_267_nl;
  wire[0:0] mux_266_nl;
  wire[0:0] mux_264_nl;
  wire[0:0] mux_262_nl;
  wire[0:0] mux_257_nl;
  wire[0:0] mux_256_nl;
  wire[0:0] mux_255_nl;
  wire[0:0] mux_254_nl;
  wire[0:0] mux_248_nl;
  wire[0:0] mux_253_nl;
  wire[0:0] mux_252_nl;
  wire[0:0] and_69_nl;
  wire[0:0] mux_277_nl;
  wire[0:0] or_259_nl;
  wire[0:0] mux_279_nl;
  wire[0:0] or_262_nl;
  wire[0:0] mux_278_nl;
  wire[0:0] or_261_nl;
  wire[0:0] mux_283_nl;
  wire[0:0] mux_282_nl;
  wire[0:0] mux_306_nl;
  wire[0:0] mux_305_nl;
  wire[0:0] mux_304_nl;
  wire[0:0] mux_303_nl;
  wire[0:0] and_67_nl;
  wire[0:0] mux_302_nl;
  wire[0:0] mux_301_nl;
  wire[0:0] mux_300_nl;
  wire[0:0] mux_299_nl;
  wire[0:0] mux_298_nl;
  wire[0:0] mux_312_nl;
  wire[0:0] mux_323_nl;
  wire[0:0] mux_325_nl;
  wire[0:0] or_279_nl;
  wire[0:0] mux_327_nl;
  wire[0:0] nor_85_nl;
  wire[0:0] or_326_nl;
  wire[0:0] or_328_nl;
  wire[0:0] mux_404_nl;
  wire[0:0] or_335_nl;
  wire[0:0] mux_403_nl;
  wire[0:0] mux_402_nl;
  wire[0:0] mux_401_nl;
  wire[0:0] mux_400_nl;
  wire[0:0] mux_399_nl;
  wire[0:0] or_334_nl;
  wire[0:0] mux_398_nl;
  wire[0:0] or_333_nl;
  wire[0:0] mux_397_nl;
  wire[0:0] mux_396_nl;
  wire[0:0] or_332_nl;
  wire[0:0] mux_395_nl;
  wire[0:0] mux_394_nl;
  wire[0:0] mux_393_nl;
  wire[0:0] mux_392_nl;
  wire[0:0] or_331_nl;
  wire[0:0] mux_391_nl;
  wire[0:0] or_330_nl;
  wire[0:0] mux_390_nl;
  wire[0:0] mux_389_nl;
  wire[0:0] or_329_nl;
  wire[0:0] or_306_nl;
  wire[12:0] dpc_loop_out_mux_220_nl;
  wire[1:0] dpc_loop_out_mux_221_nl;
  wire[13:0] acc_1_nl;
  wire[14:0] nl_acc_1_nl;
  wire[11:0] defectPixelDetection_1_mux_6_nl;
  wire[0:0] MF_inter_MF_inter_nor_3_nl;
  wire[0:0] MF_inter_1_MF_inter_1_nor_3_nl;
  wire[0:0] MF_inter_and_27_nl;
  wire[0:0] MF_inter_1_and_27_nl;
  wire[0:0] MF_inter_and_34_nl;
  wire[0:0] MF_inter_and_35_nl;
  wire[0:0] MF_inter_and_36_nl;
  wire[0:0] MF_inter_and_37_nl;
  wire[0:0] MF_inter_mux_27_nl;
  wire[0:0] MF_inter_and_28_nl;
  wire[0:0] MF_inter_1_and_28_nl;
  wire[0:0] MF_inter_mux_28_nl;
  wire[0:0] MF_inter_and_29_nl;
  wire[0:0] MF_inter_1_and_29_nl;
  wire[0:0] MF_inter_mux_29_nl;
  wire[0:0] MF_inter_and_30_nl;
  wire[0:0] MF_inter_1_and_30_nl;
  wire[0:0] MF_inter_mux_30_nl;
  wire[0:0] MF_inter_and_31_nl;
  wire[0:0] MF_inter_1_and_31_nl;
  wire[0:0] MF_inter_mux_31_nl;
  wire[0:0] MF_inter_and_32_nl;
  wire[0:0] MF_inter_1_and_32_nl;
  wire[0:0] MF_inter_mux_32_nl;
  wire[0:0] MF_inter_and_33_nl;
  wire[0:0] MF_inter_1_and_33_nl;

  // Interconnect Declarations for Component Instantiations 
  wire [0:0] nl_dpc_core_lineBuffer_rsci_1_inst_lineBuffer_rsci_iswt0_1_pff;
  assign nl_dpc_core_lineBuffer_rsci_1_inst_lineBuffer_rsci_iswt0_1_pff = ~((~ lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1)
      | lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_st_1_0 | or_dcpl_7 | or_dcpl_6);
  dpc_core_src_rsci dpc_core_src_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .src_rsc_dat(src_rsc_dat),
      .src_rsc_vld(src_rsc_vld),
      .src_rsc_rdy(src_rsc_rdy),
      .core_wen(core_wen),
      .src_rsci_oswt(reg_src_rsci_oswt_cse),
      .src_rsci_wen_comp(src_rsci_wen_comp),
      .src_rsci_idat_mxwt(src_rsci_idat_mxwt)
    );
  dpc_core_dst_rsci dpc_core_dst_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .dst_rsc_dat(dst_rsc_dat),
      .dst_rsc_vld(dst_rsc_vld),
      .dst_rsc_rdy(dst_rsc_rdy),
      .core_wen(core_wen),
      .dst_rsci_oswt(reg_dst_rsci_oswt_cse),
      .dst_rsci_wen_comp(dst_rsci_wen_comp),
      .dst_rsci_idat(dst_rsci_idat)
    );
  dpc_core_lineBuffer_rsci_1 dpc_core_lineBuffer_rsci_1_inst (
      .clk(clk),
      .arst_n(arst_n),
      .lineBuffer_rsci_q_d(lineBuffer_rsci_q_d),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .lineBuffer_rsci_oswt(reg_lineBuffer_rsci_oswt_cse),
      .lineBuffer_rsci_q_d_mxwt(lineBuffer_rsci_q_d_mxwt),
      .lineBuffer_rsci_we_d_pff(lineBuffer_rsci_we_d_iff),
      .lineBuffer_rsci_iswt0_1_pff(nl_dpc_core_lineBuffer_rsci_1_inst_lineBuffer_rsci_iswt0_1_pff[0:0]),
      .lineBuffer_rsci_re_d_pff(lineBuffer_rsci_re_d_iff),
      .lineBuffer_rsci_oswt_pff(rawWindow_read_nor_1_rmff)
    );
  dpc_core_staller dpc_core_staller_inst (
      .clk(clk),
      .arst_n(arst_n),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .src_rsci_wen_comp(src_rsci_wen_comp),
      .dst_rsci_wen_comp(dst_rsci_wen_comp)
    );
  assign rawWindow_read_nor_1_rmff = ~(sfi_dpc_loop_in_if_if_lor_lpi_1_dfm_st_1_1
      | lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1 | or_dcpl_7 | or_dcpl_6);
  assign dpc_loop_in_if_aelse_and_cse = core_wen & (~((~ dpc_loop_in_asn_sft_lpi_1_dfm_mx0)
      | dpc_loop_in_asn_sft_1_lpi_1_dfm_mx0 | dpc_loop_out_asn_sft_lpi_1_dfm_1_mx0
      | lfst_exit_addon_loop_lpi_1_dfm_1_1));
  assign or_65_cse = dpc_loop_in_acc_2_itm_13_1 | (~ exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1);
  assign and_36_cse = dpc_loop_in_acc_2_itm_13_1 & exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1;
  assign dpc_reg_eb_and_cse = core_wen & (~(dpc_loop_out_asn_sft_lpi_1_dfm_1_mx0
      | lfst_exit_addon_loop_lpi_1_dfm_1_1));
  assign dpc_loop_in_and_98_cse = core_wen & (~ lfst_exit_addon_loop_lpi_1_dfm_1_1);
  assign and_15_cse = dpc_loop_out_acc_3_itm_13_1 & or_217_cse;
  assign or_18_cse = (~ main_stage_0_2) | dpc_loop_out_asn_sft_lpi_1_dfm_1 | addon_loop_or_7_tmp_2;
  assign nor_119_cse = ~(dpc_loop_in_asn_sft_1_lpi_1 | exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1);
  assign MF_inter_and_cse = core_wen & (~((~ mux_95_itm) | or_dcpl_49));
  assign MF_inter_and_26_cse = core_wen & dpc_loop_in_if_if_if_asn_sft_lpi_1_dfm_mx0
      & dpc_loop_in_if_if_asn_sft_lpi_1_dfm_1 & dpc_loop_in_if_asn_sft_lpi_1 & MF_outer_equal_tmp_1_1
      & dpc_loop_in_asn_sft_lpi_1_dfm_1 & (~ dpc_loop_in_asn_sft_1_lpi_1_dfm_1) &
      (~ dpc_loop_out_asn_sft_lpi_1_dfm_1) & (~ or_dcpl_11);
  assign MF_inter_j_and_itm = core_wen & main_stage_0_2 & addon_loop_and_85_tmp_2;
  assign MF_inter_1_and_cse = core_wen & (~((~ mux_98_itm) | or_dcpl_74));
  assign MF_inter_1_and_26_cse = core_wen & dpc_loop_in_if_if_else_asn_sft_lpi_1_dfm_mx0
      & (~ dpc_loop_in_if_if_asn_sft_lpi_1_dfm_1) & dpc_loop_in_if_asn_sft_lpi_1
      & MF_outer_equal_tmp_1_1 & dpc_loop_in_asn_sft_lpi_1_dfm_1 & (~ dpc_loop_in_asn_sft_1_lpi_1_dfm_1)
      & (~ dpc_loop_out_asn_sft_lpi_1_dfm_1) & (~ or_dcpl_11);
  assign and_87_cse = (MF_outer_1_acc_tmp[3]) & (MF_inter_1_acc_1_tmp[3]);
  assign and_88_cse = (MF_outer_acc_tmp[3]) & (MF_inter_acc_1_tmp[3]);
  assign MF_inter_1_j_and_itm = core_wen & main_stage_0_2 & addon_loop_and_93_tmp_2;
  assign and_85_cse = dpc_loop_in_asn_sft_lpi_1_dfm_1 & MF_outer_equal_tmp_1_1;
  assign and_102_cse = dpc_loop_in_or_6_cse & dpc_loop_in_asn_sft_lpi_1_dfm_1;
  assign nor_56_cse = ~(and_105_cse | (~ lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_1));
  assign or_217_cse = (~ lfst_exit_addon_loop_lpi_1_dfm_3_0) | exitL_exit_addon_loop_sva;
  assign mux_199_nl = MUX_s_1_2_2(mux_tmp_194, mux_tmp_190, lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_0);
  assign mux_410_itm = MUX_s_1_2_2(mux_tmp_192, mux_199_nl, lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_1);
  assign mux_374_itm = MUX_s_1_2_2(mux_tmp_280, or_tmp_166, and_105_cse);
  assign rawWin_loop_and_289_cse = core_wen & (~(MF_outer_or_14_tmp_1 | (~ dpc_loop_in_asn_sft_lpi_1_dfm_mx0)
      | dpc_loop_in_asn_sft_1_lpi_1_dfm_mx0 | dpc_loop_out_asn_sft_lpi_1_dfm_1_mx0
      | lfst_exit_addon_loop_lpi_1_dfm_1_1));
  assign mux_331_nl = MUX_s_1_2_2(mux_tmp_326, mux_tmp_322, lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_0);
  assign mux_412_itm = MUX_s_1_2_2(mux_tmp_324, mux_331_nl, lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_1);
  assign nand_52_nl = ~(main_stage_0_3 & addon_loop_and_90_itm_2);
  assign rawWindow_3_4_1_lpi_1_mx0 = MUX_v_12_2_2(lineBuffer_rsci_q_d_mxwt, rawWindow_3_4_1_lpi_1,
      nand_52_nl);
  assign nand_41_nl = ~(main_stage_0_3 & addon_loop_and_89_itm_2);
  assign rawWindow_2_4_1_lpi_1_mx0 = MUX_v_12_2_2(lineBuffer_rsci_q_d_mxwt, rawWindow_2_4_1_lpi_1,
      nand_41_nl);
  assign asn_rawWindow_1_4_1_lpi_1_nand_nl = ~(main_stage_0_3 & addon_loop_and_88_itm_2);
  assign rawWindow_1_4_1_lpi_1_mx0 = MUX_v_12_2_2(lineBuffer_rsci_q_d_mxwt, rawWindow_1_4_1_lpi_1,
      asn_rawWindow_1_4_1_lpi_1_nand_nl);
  assign asn_rawWindow_0_4_1_lpi_1_nand_nl = ~(main_stage_0_3 & addon_loop_and_87_itm_2);
  assign rawWindow_0_4_1_lpi_1_mx0 = MUX_v_12_2_2(lineBuffer_rsci_q_d_mxwt, rawWindow_0_4_1_lpi_1,
      asn_rawWindow_0_4_1_lpi_1_nand_nl);
  assign dpc_loop_in_col_lpi_1_dfm_1_1 = MUX_v_13_2_2(13'b0000000000000, dpc_loop_in_col_lpi_1_mx0,
      lfst_exitL_exit_dpc_loop_in_lpi_1_dfm_1);
  assign lfst_exitL_exit_dpc_loop_in_lpi_1_dfm_1 = lfst_exitL_exit_dpc_loop_in_lpi_1
      & (~ exitL_exitL_exit_dpc_loop_in_lpi_1_dfm_1);
  assign addon_loop_not_129_nl = ~ exitL_exit_addon_loop_sva;
  assign dpc_loop_out_row_lpi_1_dfm_1_1 = MUX_v_13_2_2(13'b0000000000000, dpc_loop_out_row_lpi_1,
      addon_loop_not_129_nl);
  assign lfst_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1 = lfst_exitL_exitL_exit_MF_outer_1_lpi_1_mx0
      & (~ sfi_dpc_loop_in_if_land_lpi_1);
  assign dpc_loop_in_if_if_if_dpc_loop_in_if_if_if_nand_nl = ~((~(dpc_loop_in_if_if_bayerPattern_xor_3_tmp
      & dpc_loop_in_if_if_bayerPattern_xor_tmp)) & (dpc_loop_in_if_if_bayerPattern_xor_3_tmp
      | dpc_loop_in_if_if_bayerPattern_xor_tmp));
  assign dpc_loop_in_if_if_lor_lpi_1_dfm_1_mx0 = MUX_s_1_2_2(dpc_loop_in_if_if_lor_lpi_1,
      dpc_loop_in_if_if_if_dpc_loop_in_if_if_if_nand_nl, sfi_dpc_loop_in_if_land_lpi_1);
  assign dpc_loop_in_if_if_bayerPattern_xor_3_tmp = (dpc_loop_out_row_lpi_1_dfm_1_1[0])
      ^ (top_reg_imgPattern[1]);
  assign dpc_loop_in_if_if_bayerPattern_xor_tmp = (dpc_loop_in_col_lpi_1_dfm_1_1[0])
      ^ (top_reg_imgPattern[0]);
  assign dpc_loop_in_if_mux_101_nl = MUX_s_1_2_2(lfst_exitL_exitL_exit_MF_outer_1_lpi_1,
      (~ exitL_exit_MF_outer_pmx_lpi_1_dfm_mx0), dpc_loop_in_if_asn_sft_lpi_1);
  assign MF_outer_MF_outer_mux_143_nl = MUX_s_1_2_2(lfst_exitL_exitL_exit_MF_outer_1_lpi_1,
      dpc_loop_in_if_mux_101_nl, MF_outer_equal_tmp_1_1);
  assign dpc_loop_in_mux_155_nl = MUX_s_1_2_2(lfst_exitL_exitL_exit_MF_outer_1_lpi_1,
      MF_outer_MF_outer_mux_143_nl, dpc_loop_in_asn_sft_lpi_1_dfm_1);
  assign dpc_loop_in_mux_310_nl = MUX_s_1_2_2(dpc_loop_in_mux_155_nl, lfst_exitL_exitL_exit_MF_outer_1_lpi_1,
      dpc_loop_in_asn_sft_1_lpi_1_dfm_1);
  assign dpc_loop_out_mux_169_nl = MUX_s_1_2_2(dpc_loop_in_mux_310_nl, lfst_exitL_exitL_exit_MF_outer_1_lpi_1,
      dpc_loop_out_asn_sft_lpi_1_dfm_1);
  assign lfst_exitL_exitL_exit_MF_outer_1_lpi_1_mx0 = MUX_s_1_2_2(dpc_loop_out_mux_169_nl,
      lfst_exitL_exitL_exit_MF_outer_1_lpi_1, or_dcpl_11);
  assign nl_dpc_loop_in_acc_1_nl = dpc_loop_in_col_lpi_1_dfm_1 + 13'b0000000000001;
  assign dpc_loop_in_acc_1_nl = nl_dpc_loop_in_acc_1_nl[12:0];
  assign dpc_loop_in_col_nand_nl = ~(main_stage_0_2 & (~(dpc_loop_out_asn_sft_lpi_1_dfm_1
      | addon_loop_or_7_tmp_2)));
  assign dpc_loop_in_col_and_nl = (~(dpc_loop_in_and_17_tmp_1 | dpc_loop_out_asn_sft_lpi_1_dfm_1
      | addon_loop_or_7_tmp_2)) & main_stage_0_2;
  assign dpc_loop_out_and_17_nl = dpc_loop_in_and_17_tmp_1 & (~ dpc_loop_out_asn_sft_lpi_1_dfm_1)
      & (~ addon_loop_or_7_tmp_2) & main_stage_0_2;
  assign dpc_loop_in_col_lpi_1_mx0 = MUX1HOT_v_13_3_2(dpc_loop_in_col_lpi_1, dpc_loop_in_col_lpi_1_dfm_1,
      dpc_loop_in_acc_1_nl, {dpc_loop_in_col_nand_nl , dpc_loop_in_col_and_nl , dpc_loop_out_and_17_nl});
  assign nl_operator_13_false_1_acc_nl = ({1'b1 , (~ (dpc_loop_in_col_lpi_1_dfm_1[12:2]))})
      + 12'b000000000001;
  assign operator_13_false_1_acc_nl = nl_operator_13_false_1_acc_nl[11:0];
  assign dpc_loop_in_if_if_dpc_loop_in_if_if_and_nl = (readslicef_12_1_11(operator_13_false_1_acc_nl))
      & operator_13_false_slc_operator_13_false_acc_11_svs_1;
  assign line_write_mux_1_nl = MUX_s_1_2_2(dpc_loop_in_if_asn_sft_lpi_1, dpc_loop_in_if_if_dpc_loop_in_if_if_and_nl,
      operator_3_false_2_slc_line_write_i_2_2_itm_1);
  assign MF_outer_MF_outer_mux_145_nl = MUX_s_1_2_2(dpc_loop_in_if_asn_sft_lpi_1,
      line_write_mux_1_nl, MF_outer_equal_tmp_1);
  assign dpc_loop_in_mux_157_nl = MUX_s_1_2_2(dpc_loop_in_if_asn_sft_lpi_1, MF_outer_MF_outer_mux_145_nl,
      dpc_loop_in_asn_sft_lpi_1_dfm_1);
  assign dpc_loop_in_mux_312_nl = MUX_s_1_2_2(dpc_loop_in_mux_157_nl, dpc_loop_in_if_asn_sft_lpi_1,
      dpc_loop_in_asn_sft_1_lpi_1_dfm_1);
  assign dpc_loop_out_mux_173_nl = MUX_s_1_2_2(dpc_loop_in_mux_312_nl, dpc_loop_in_if_asn_sft_lpi_1,
      dpc_loop_out_asn_sft_lpi_1_dfm_1);
  assign dpc_loop_in_if_asn_sft_lpi_1_mx0 = MUX_s_1_2_2(dpc_loop_out_mux_173_nl,
      dpc_loop_in_if_asn_sft_lpi_1, or_dcpl_11);
  assign exit_dpc_loop_in_lpi_1_dfm_1 = (~ dpc_loop_in_acc_2_itm_13_1) & exitL_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1;
  assign exit_rawWindow_read_lpi_1_dfm_2 = exit_rawWindow_read_lpi_1 & (~ sfi_dpc_reg_eb_lpi_1_dfm_1);
  assign lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1_1 = lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_1_mx0
      & (~ sfi_dpc_reg_eb_lpi_1_dfm_1);
  assign and_39_nl = dpc_reg_eb & dpc_loop_in_acc_2_itm_13_1 & exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1;
  assign mux_66_nl = MUX_s_1_2_2(nor_119_cse, mux_tmp_61, dpc_reg_eb);
  assign mux_67_nl = MUX_s_1_2_2(and_39_nl, mux_66_nl, dpc_loop_in_asn_sft_lpi_1);
  assign and_38_nl = dpc_reg_eb & mux_tmp_61;
  assign mux_68_nl = MUX_s_1_2_2(mux_67_nl, and_38_nl, sfi_exit_dpc_loop_in_lpi_1);
  assign mux_69_nl = MUX_s_1_2_2(mux_68_nl, nor_tmp_14, dpc_loop_in_asn_sft_1_lpi_1_dfm_1);
  assign nand_6_nl = ~(dpc_reg_eb & (~((dpc_loop_in_asn_sft_1_lpi_1 | lfst_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1)
      & lfst_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1)));
  assign or_69_nl = dpc_loop_in_asn_sft_1_lpi_1 | (~(lfst_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1
      & lfst_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1));
  assign mux_60_nl = MUX_s_1_2_2(or_69_nl, nor_tmp_15, dpc_reg_eb);
  assign mux_61_nl = MUX_s_1_2_2(nand_6_nl, mux_60_nl, dpc_loop_in_asn_sft_lpi_1);
  assign nand_5_nl = ~(dpc_reg_eb & (~ nor_tmp_15));
  assign mux_62_nl = MUX_s_1_2_2(mux_61_nl, nand_5_nl, sfi_exit_dpc_loop_in_lpi_1);
  assign mux_63_nl = MUX_s_1_2_2((~ mux_62_nl), nor_tmp_14, exitL_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1);
  assign mux_70_nl = MUX_s_1_2_2(mux_69_nl, mux_63_nl, or_18_cse);
  assign mux_71_nl = MUX_s_1_2_2(nor_tmp_14, mux_70_nl, lfst_exit_dpc_loop_in_lpi_1);
  assign nor_107_nl = ~(dpc_loop_out_asn_sft_lpi_1 | (~ mux_71_nl));
  assign mux_72_nl = MUX_s_1_2_2(nor_tmp_14, nor_107_nl, lfst_exitL_exit_dpc_loop_in_lpi_1);
  assign mux_73_nl = MUX_s_1_2_2(nor_tmp_13, mux_72_nl, lfst_exit_addon_loop_lpi_1_dfm_3_0);
  assign mux_74_nl = MUX_s_1_2_2(mux_73_nl, nor_tmp_13, exitL_exitL_exit_dpc_loop_in_lpi_1);
  assign nor_106_nl = ~(lfst_exit_addon_loop_lpi_1_dfm_3_1 | (~ mux_74_nl));
  assign mux_75_nl = MUX_s_1_2_2(nor_106_nl, nor_tmp_13, exitL_exit_addon_loop_sva);
  assign lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1_mx0 = MUX_s_1_2_2(lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1,
      lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1_1, mux_75_nl);
  assign lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_0_1 = lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_0_mx0
      & (~ sfi_dpc_reg_eb_lpi_1_dfm_1);
  assign lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_1_mx0 = MUX_s_1_2_2(MF_outer_MF_outer_or_9_tmp,
      lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_1, or_dcpl_18);
  assign sfi_dpc_reg_eb_lpi_1_dfm_1 = sfi_dpc_reg_eb_lpi_1 | (~ lfst_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1);
  assign lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_0_mx0 = MUX_s_1_2_2(MF_outer_MF_outer_or_8_tmp,
      lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_0, or_dcpl_18);
  assign lfst_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1 = lfst_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_mx0
      & (~ sfi_exit_dpc_loop_in_lpi_1_dfm_1);
  assign or_81_nl = (~ lfst_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1) | exitL_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1
      | (~ lfst_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1);
  assign mux_77_nl = MUX_s_1_2_2(or_tmp_63, or_81_nl, or_18_cse);
  assign and_45_nl = (~ mux_77_nl) & lfst_exit_addon_loop_lpi_1_dfm_0_1 & lfst_exitL_exit_dpc_loop_in_lpi_1
      & lfst_exit_dpc_loop_in_lpi_1 & (~ sfi_exit_dpc_loop_in_lpi_1) & (~ exitL_exitL_exit_dpc_loop_in_lpi_1);
  assign dpc_loop_in_asn_sft_lpi_1_dfm_mx0 = MUX_s_1_2_2(dpc_reg_eb, dpc_loop_in_asn_sft_lpi_1,
      and_45_nl);
  assign dpc_loop_in_mux_318_nl = MUX_s_1_2_2((~ exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1),
      lfst_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1, dpc_loop_in_asn_sft_1_lpi_1_dfm_1);
  assign dpc_loop_out_mux_179_nl = MUX_s_1_2_2(dpc_loop_in_mux_318_nl, lfst_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1,
      dpc_loop_out_asn_sft_lpi_1_dfm_1);
  assign lfst_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_mx0 = MUX_s_1_2_2(dpc_loop_out_mux_179_nl,
      lfst_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1, or_dcpl_11);
  assign sfi_exit_dpc_loop_in_lpi_1_dfm_1 = sfi_exit_dpc_loop_in_lpi_1 | (~ lfst_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1);
  assign lfst_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1 = lfst_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_mx0
      & (~ exitL_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1);
  assign nl_dpc_loop_in_acc_2_nl = ({1'b1 , dpc_loop_in_col_lpi_1_dfm_1_1}) + conv_u2u_13_14(~
      top_reg_frameWidth) + 14'b00000000000001;
  assign dpc_loop_in_acc_2_nl = nl_dpc_loop_in_acc_2_nl[13:0];
  assign dpc_loop_in_acc_2_itm_13_1 = readslicef_14_1_13(dpc_loop_in_acc_2_nl);
  assign or_88_nl = exitL_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1 | (~
      lfst_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1);
  assign mux_78_nl = MUX_s_1_2_2(or_tmp_63, or_88_nl, or_18_cse);
  assign or_89_nl = mux_78_nl | or_217_cse | (~ lfst_exitL_exit_dpc_loop_in_lpi_1)
      | (~ lfst_exit_dpc_loop_in_lpi_1) | exitL_exitL_exit_dpc_loop_in_lpi_1;
  assign dpc_loop_in_asn_sft_1_lpi_1_dfm_mx0 = MUX_s_1_2_2(dpc_loop_in_asn_sft_1_lpi_1,
      exit_dpc_loop_in_lpi_1_dfm_1, or_89_nl);
  assign exitL_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1 = exitL_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_mx0
      | (~(lfst_exit_dpc_loop_in_lpi_1 & lfst_exitL_exit_dpc_loop_in_lpi_1_dfm_1));
  assign nl_line_write_i_sva_2 = conv_u2u_2_3(line_write_i_lpi_1_1_0) + 3'b001;
  assign line_write_i_sva_2 = nl_line_write_i_sva_2[2:0];
  assign dpc_loop_in_and_36_rgt = MF_outer_equal_tmp_2 & dpc_loop_in_asn_sft_lpi_1_dfm_mx0
      & (~ dpc_loop_in_asn_sft_1_lpi_1_dfm_mx0) & (~ addon_loop_or_172_tmp_1);
  assign dpc_loop_in_dpc_loop_in_or_4_nl = exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1
      | dpc_loop_in_asn_sft_1_lpi_1_dfm_1;
  assign dpc_loop_out_mux_186_nl = MUX_s_1_2_2(dpc_loop_in_dpc_loop_in_or_4_nl, exitL_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1,
      dpc_loop_out_asn_sft_lpi_1_dfm_1);
  assign exitL_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_mx0 = MUX_s_1_2_2(dpc_loop_out_mux_186_nl,
      exitL_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1, or_dcpl_11);
  assign dpc_loop_in_dpc_loop_in_dpc_loop_in_nor_nl = ~(exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1
      | dpc_loop_in_asn_sft_1_lpi_1_dfm_1);
  assign dpc_loop_out_mux_188_nl = MUX_s_1_2_2(dpc_loop_in_dpc_loop_in_dpc_loop_in_nor_nl,
      lfst_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1, dpc_loop_out_asn_sft_lpi_1_dfm_1);
  assign lfst_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_mx0 = MUX_s_1_2_2(dpc_loop_out_mux_188_nl,
      lfst_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1, or_dcpl_11);
  assign exitL_exit_MF_outer_pmx_lpi_1_dfm_mx0 = MUX_s_1_2_2(exitL_exitL_exitL_exit_MF_outer_lpi_1_dfm_1,
      exitL_exit_MF_outer_lpi_1_dfm_1, dpc_loop_in_if_if_asn_sft_lpi_1_dfm_1);
  assign dpc_loop_in_or_6_cse = MF_outer_MF_outer_or_9_tmp | MF_outer_MF_outer_or_8_tmp;
  assign exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1 = ~(dpc_loop_in_or_6_cse
      & dpc_loop_in_asn_sft_lpi_1_dfm_1);
  assign or_91_nl = or_217_cse | (~ lfst_exitL_exit_dpc_loop_in_lpi_1) | exitL_exitL_exit_dpc_loop_in_lpi_1;
  assign dpc_loop_out_asn_sft_lpi_1_dfm_1_mx0 = MUX_s_1_2_2(dpc_loop_out_asn_sft_lpi_1,
      exit_dpc_loop_out_lpi_1_dfm_1, or_91_nl);
  assign addon_loop_or_7_tmp_2 = addon_loop_equal_tmp_1 | addon_loop_equal_tmp_1_1;
  assign MF_outer_MF_outer_or_9_tmp = (~(((~(lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1
      & MF_outer_dpc_loop_in_if_nor_seb_1)) & MF_outer_equal_tmp_1_1) | MF_outer_and_23_ssc_1))
      | MF_outer_and_24_ssc_1;
  assign MF_outer_MF_outer_and_5_nl = lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_2_1_0
      & MF_outer_dpc_loop_in_if_nor_seb_1;
  assign MF_outer_mux_29_nl = MUX_s_1_2_2(lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_2_1_0,
      MF_outer_MF_outer_and_5_nl, MF_outer_equal_tmp_1_1);
  assign MF_outer_MF_outer_or_8_tmp = (MF_outer_mux_29_nl & (~ MF_outer_and_24_ssc_1))
      | MF_outer_and_23_ssc_1;
  assign MF_outer_equal_tmp_2 = lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1_1
      & (~ lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_0_1);
  assign addon_loop_equal_tmp_2 = lfst_exit_addon_loop_lpi_1_dfm_1_1 & (~ lfst_exit_addon_loop_lpi_1_dfm_0_1);
  assign addon_loop_equal_tmp_3 = lfst_exit_addon_loop_lpi_1_dfm_1_1 & lfst_exit_addon_loop_lpi_1_dfm_0_1;
  assign dpc_loop_in_and_17_tmp_1 = exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1
      & (~ dpc_loop_in_asn_sft_1_lpi_1_dfm_1);
  assign nor_127_nl = ~(and_88_cse | (~ dpc_loop_in_if_if_if_asn_sft_lpi_1_dfm_mx0));
  assign nor_128_nl = ~(and_87_cse | (~ dpc_loop_in_if_if_else_asn_sft_lpi_1_dfm_mx0));
  assign mux_nl = MUX_s_1_2_2(nor_127_nl, nor_128_nl, dpc_loop_in_if_and_tmp_1);
  assign or_302_tmp = (mux_nl & and_85_cse & dpc_loop_in_if_asn_sft_lpi_1) | ((~
      MF_outer_equal_tmp_1_1) & dpc_loop_in_asn_sft_lpi_1_dfm_1);
  assign MF_inter_mux_21_nl = MUX_s_1_2_2(MF_inter_1_and_4_psp_1, MF_inter_and_4_psp_1,
      dpc_loop_in_if_if_asn_sft_lpi_1_dfm_1);
  assign mux_420_nl = MUX_v_12_2_2(arr_sort_3_lpi_1, z_out_6, MF_inter_mux_21_nl);
  assign MF_inter_mux_22_nl = MUX_s_1_2_2(MF_inter_1_and_5_psp_1, MF_inter_and_5_psp_1,
      dpc_loop_in_if_if_asn_sft_lpi_1_dfm_1);
  assign mux_421_nl = MUX_v_12_2_2(arr_sort_4_lpi_1, z_out_6, MF_inter_mux_22_nl);
  assign nl_medianFilter_acc_nl = conv_u2u_12_13(mux_420_nl) + conv_u2u_12_13(mux_421_nl);
  assign medianFilter_acc_nl = nl_medianFilter_acc_nl[12:0];
  assign dpc_loop_in_if_or_nl = (and_88_cse & dpc_loop_in_if_if_if_asn_sft_lpi_1_dfm_mx0
      & (~ dpc_loop_in_if_and_tmp_1)) | (and_87_cse & dpc_loop_in_if_if_else_asn_sft_lpi_1_dfm_mx0
      & dpc_loop_in_if_and_tmp_1);
  assign dpc_loop_in_if_dpc_loop_in_if_dpc_loop_in_if_mux_nl = MUX_v_12_2_2(rawWindow_2_2_1_lpi_1,
      (readslicef_13_12_1(medianFilter_acc_nl)), dpc_loop_in_if_or_nl);
  assign dpc_loop_in_if_dpc_loop_in_if_and_1_nl = MUX_v_12_2_2(12'b000000000000,
      dpc_loop_in_if_dpc_loop_in_if_dpc_loop_in_if_mux_nl, dpc_loop_in_if_asn_sft_lpi_1);
  assign nor_129_nl = ~(and_85_cse | or_302_tmp);
  assign and_114_nl = and_85_cse & (~ or_302_tmp);
  assign dstData_lpi_1_dfm_9 = MUX1HOT_v_12_3_2(srcData_lpi_1_dfm_mx0, dpc_loop_in_if_dpc_loop_in_if_and_1_nl,
      dstData_lpi_1, {nor_129_nl , and_114_nl , or_302_tmp});
  assign MF_outer_MF_outer_and_2_tmp = lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1_1
      & lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_0_1;
  assign rawWindow_1_3_1_lpi_1_mx0 = MUX_v_12_2_2(rawWin_loop_rawWin_loop_slc_rawWindow_60_59_48_1_ctmp_sva_1,
      rawWindow_1_3_1_lpi_1, or_dcpl_30);
  assign rawWindow_2_1_1_lpi_1_mx0 = MUX_v_12_2_2(rawWin_loop_rawWin_loop_slc_rawWindow_60_35_24_1_ctmp_sva_1,
      rawWindow_2_1_1_lpi_1, or_dcpl_31);
  assign rawWindow_2_2_1_lpi_1_mx0 = MUX_v_12_2_2(rawWin_loop_rawWin_loop_slc_rawWindow_60_47_36_1_ctmp_sva_1,
      rawWindow_2_2_1_lpi_1, or_dcpl_31);
  assign rawWindow_2_3_1_lpi_1_mx0 = MUX_v_12_2_2(rawWin_loop_rawWin_loop_slc_rawWindow_60_59_48_1_ctmp_sva_1,
      rawWindow_2_3_1_lpi_1, or_dcpl_31);
  assign rawWindow_3_1_1_lpi_1_mx0 = MUX_v_12_2_2(rawWin_loop_rawWin_loop_slc_rawWindow_60_35_24_1_ctmp_sva_1,
      rawWindow_3_1_1_lpi_1, or_dcpl_32);
  assign rawWindow_3_2_1_lpi_1_mx0 = MUX_v_12_2_2(rawWin_loop_rawWin_loop_slc_rawWindow_60_47_36_1_ctmp_sva_1,
      rawWindow_3_2_1_lpi_1, or_dcpl_32);
  assign rawWindow_3_3_1_lpi_1_mx0 = MUX_v_12_2_2(rawWin_loop_rawWin_loop_slc_rawWindow_60_59_48_1_ctmp_sva_1,
      rawWindow_3_3_1_lpi_1, or_dcpl_32);
  assign rawWindow_4_0_1_lpi_1_mx0 = MUX_v_12_2_2(rawWin_loop_rawWin_loop_slc_rawWindow_60_23_12_1_ctmp_sva_1,
      rawWindow_4_0_1_lpi_1, or_dcpl_33);
  assign rawWindow_4_1_1_lpi_1_mx0 = MUX_v_12_2_2(rawWin_loop_rawWin_loop_slc_rawWindow_60_35_24_1_ctmp_sva_1,
      rawWindow_4_1_1_lpi_1, or_dcpl_33);
  assign rawWindow_4_2_1_lpi_1_mx1 = MUX_v_12_2_2(rawWin_loop_rawWin_loop_slc_rawWindow_60_47_36_1_ctmp_sva_1,
      rawWindow_4_2_1_lpi_1, or_dcpl_33);
  assign rawWindow_4_3_1_lpi_1_mx0 = MUX_v_12_2_2(rawWin_loop_rawWin_loop_slc_rawWindow_60_59_48_1_ctmp_sva_1,
      rawWindow_4_3_1_lpi_1, or_dcpl_33);
  assign srcData_lpi_1_dfm_mx0 = MUX_v_12_2_2(srcData_lpi_1, src_rsci_idat_mxwt,
      sfi_exit_dpc_loop_in_lpi_1_dfm_1_1);
  assign dpc_reg_eb_not_5_nl = ~ sfi_dpc_reg_eb_lpi_1_dfm_1;
  assign rawWin_loop_i_lpi_1_dfm_mx0w1 = MUX_v_3_2_2(3'b000, rawWin_loop_i_lpi_1,
      dpc_reg_eb_not_5_nl);
  assign MF_outer_dpc_loop_in_if_nor_seb_1 = ~(exitL_exit_MF_outer_pmx_lpi_1_dfm_mx0
      | (~ dpc_loop_in_if_asn_sft_lpi_1));
  assign dpc_loop_in_if_if_if_asn_sft_lpi_1_dfm_mx0 = MUX_s_1_2_2(dpc_loop_in_if_if_if_asn_sft_lpi_1,
      defectPixelDetection_rst_lpi_1_dfm_1_mx0, or_dcpl_40);
  assign dpc_loop_in_if_if_else_asn_sft_lpi_1_dfm_mx0 = MUX_s_1_2_2(dpc_loop_in_if_if_else_asn_sft_lpi_1,
      defectPixelDetection_1_rst_lpi_1_dfm_1_mx0, or_dcpl_41);
  assign exitL_exit_MF_outer_lpi_1_dfm_1 = and_88_cse | (~ dpc_loop_in_if_if_if_asn_sft_lpi_1_dfm_mx0);
  assign MF_outer_i_3_0_lpi_1_dfm_2_0_1 = MUX_v_3_2_2(3'b000, MF_outer_i_3_0_lpi_1_2_0,
      lfst_exitL_exit_MF_outer_lpi_1_dfm_1);
  assign MF_inter_j_3_0_lpi_1_dfm_2_0_1 = MUX_v_3_2_2(MF_inter_j_3_0_lpi_1_2_0, 3'b111,
      exitL_exit_MF_inter_lpi_1_dfm_1);
  assign nl_operator_6_true_acc_nl = ({1'b1 , (~ MF_inter_j_3_0_lpi_1_dfm_2_0_1)})
      + 4'b0001;
  assign operator_6_true_acc_nl = nl_operator_6_true_acc_nl[3:0];
  assign operator_6_true_acc_itm_3_1 = readslicef_4_1_3(operator_6_true_acc_nl);
  assign MF_inter_and_4_psp_1 = (MF_inter_j_3_0_lpi_1_dfm_2_0_1==3'b011);
  assign MF_inter_and_5_psp_1 = MF_inter_nor_2_cse_1 & (MF_inter_j_3_0_lpi_1_dfm_2_0_1[2]);
  assign nl_MF_outer_acc_tmp = conv_u2s_3_4(MF_outer_i_3_0_lpi_1_dfm_2_0_1) + 4'b0001;
  assign MF_outer_acc_tmp = nl_MF_outer_acc_tmp[3:0];
  assign nl_MF_inter_acc_1_tmp = conv_u2s_3_4(MF_inter_j_3_0_lpi_1_dfm_2_0_1) + 4'b1111;
  assign MF_inter_acc_1_tmp = nl_MF_inter_acc_1_tmp[3:0];
  assign MF_inter_nor_2_cse_1 = ~((MF_inter_j_3_0_lpi_1_dfm_2_0_1[1:0]!=2'b00));
  assign nl_MF_inter_acc_nl = ({1'b1 , (~ MF_inter_j_3_0_lpi_1_dfm_2_0_1)}) + conv_u2s_3_4(MF_outer_i_3_0_lpi_1_dfm_2_0_1)
      + 4'b0001;
  assign MF_inter_acc_nl = nl_MF_inter_acc_nl[3:0];
  assign MF_inter_acc_itm_3_1 = readslicef_4_1_3(MF_inter_acc_nl);
  assign exitL_exit_MF_inter_lpi_1_dfm_1 = exitL_exit_MF_inter_lpi_1 | (~(lfst_exit_MF_outer_lpi_1
      & lfst_exitL_exit_MF_outer_lpi_1_dfm_1));
  assign lfst_exitL_exit_MF_outer_lpi_1_dfm_1 = lfst_exitL_exit_MF_outer_lpi_1 &
      (~ sfi_dpc_loop_in_if_if_lor_lpi_1_dfm_1);
  assign defectPixelDetection_else_aelse_5_mux_nl = MUX_s_1_2_2(defectPixelDetection_else_land_5_lpi_1_dfm_mx0w0,
      defectPixelDetection_else_land_5_lpi_1_dfm, nor_tmp_22);
  assign defectPixelDetection_rst_lpi_1_dfm_2 = (defectPixelDetection_else_aif_6_acc_itm_13_1
      & defectPixelDetection_else_aelse_5_mux_nl) | (defectPixelDetection_aif_6_acc_itm_13_1
      & defectPixelDetection_1_aif_5_acc_1_itm_13 & defectPixelDetection_1_aif_4_acc_1_itm_13
      & defectPixelDetection_1_aif_3_acc_1_itm_13 & defectPixelDetection_1_aif_2_acc_1_itm_13
      & defectPixelDetection_aif_1_acc_itm_13 & defectPixelDetection_1_land_lpi_1_dfm_1);
  assign nl_defectPixelDetection_else_aif_6_acc_nl = conv_u2u_11_14(dpc_reg_th_w)
      - conv_s2u_13_14(defectPixelDetection_diff_7_sva_1);
  assign defectPixelDetection_else_aif_6_acc_nl = nl_defectPixelDetection_else_aif_6_acc_nl[13:0];
  assign defectPixelDetection_else_aif_6_acc_itm_13_1 = readslicef_14_1_13(defectPixelDetection_else_aif_6_acc_nl);
  assign defectPixelDetection_else_land_5_lpi_1_dfm_mx0w0 = defectPixelDetection_1_else_aif_5_acc_1_itm_13
      & defectPixelDetection_1_else_aif_4_acc_1_itm_13 & defectPixelDetection_1_else_aif_3_acc_1_itm_13
      & defectPixelDetection_1_else_aif_2_acc_1_itm_13 & defectPixelDetection_else_aif_1_acc_itm_13_1
      & defectPixelDetection_1_else_land_lpi_1_dfm_1;
  assign nl_defectPixelDetection_diff_7_sva_1 = ({1'b1 , srcData_lpi_1_dfm_mx0})
      + conv_u2s_12_13(~ rawWindow_2_2_1_lpi_1) + 13'b0000000000001;
  assign defectPixelDetection_diff_7_sva_1 = nl_defectPixelDetection_diff_7_sva_1[12:0];
  assign nl_defectPixelDetection_diff_4_sva_1 = ({1'b1 , rawWindow_2_4_1_lpi_1_mx0})
      + conv_u2s_12_13(~ rawWindow_2_2_1_lpi_1) + 13'b0000000000001;
  assign defectPixelDetection_diff_4_sva_1 = nl_defectPixelDetection_diff_4_sva_1[12:0];
  assign nl_defectPixelDetection_else_aif_1_acc_nl = conv_u2u_11_14(dpc_reg_th_w)
      - conv_s2u_13_14(defectPixelDetection_diff_2_sva_1);
  assign defectPixelDetection_else_aif_1_acc_nl = nl_defectPixelDetection_else_aif_1_acc_nl[13:0];
  assign defectPixelDetection_else_aif_1_acc_itm_13_1 = readslicef_14_1_13(defectPixelDetection_else_aif_1_acc_nl);
  assign nl_defectPixelDetection_diff_2_sva_1 = ({1'b1 , rawWindow_0_4_1_lpi_1_mx0})
      + conv_u2s_12_13(~ rawWindow_2_2_1_lpi_1) + 13'b0000000000001;
  assign defectPixelDetection_diff_2_sva_1 = nl_defectPixelDetection_diff_2_sva_1[12:0];
  assign defectPixelDetection_1_else_land_lpi_1_dfm_1 = defectPixelDetection_1_else_aif_acc_1_itm_13_1
      & defectPixelDetection_1_else_acc_1_itm_13;
  assign nl_defectPixelDetection_aif_6_acc_nl = conv_s2u_13_14(defectPixelDetection_diff_7_sva_1)
      - conv_s2u_12_14(defectPixelDetection_1_th_2_sva_1);
  assign defectPixelDetection_aif_6_acc_nl = nl_defectPixelDetection_aif_6_acc_nl[13:0];
  assign defectPixelDetection_aif_6_acc_itm_13_1 = readslicef_14_1_13(defectPixelDetection_aif_6_acc_nl);
  assign nl_defectPixelDetection_aif_1_acc_nl = conv_s2u_13_14(defectPixelDetection_diff_2_sva_1)
      - conv_s2u_12_14(defectPixelDetection_1_th_2_sva_1);
  assign defectPixelDetection_aif_1_acc_nl = nl_defectPixelDetection_aif_1_acc_nl[13:0];
  assign defectPixelDetection_aif_1_acc_itm_13 = readslicef_14_1_13(defectPixelDetection_aif_1_acc_nl);
  assign defectPixelDetection_1_land_lpi_1_dfm_1 = defectPixelDetection_1_aif_acc_1_itm_13_1
      & defectPixelDetection_1_acc_15_itm_13;
  assign medianFilter_item_sva_1 = MUX_v_12_8_2((defectPixelDetection_1_diff_2_sva_1[11:0]),
      rawWindow_0_2_1_lpi_1, rawWindow_0_4_1_lpi_1_mx0, rawWindow_2_0_1_lpi_1, rawWindow_2_4_1_lpi_1_mx0,
      rawWindow_4_0_1_lpi_1, rawWindow_4_2_1_lpi_1, srcData_lpi_1_dfm_mx0, MF_outer_i_3_0_lpi_1_dfm_2_0_1);
  assign addon_loop_not_151_nl = ~ exitL_exit_addon_loop_sva;
  assign rawWindow_0_0_lpi_1_dfm_1 = MUX_v_12_2_2(12'b000000000000, rawWindow_0_0_lpi_1,
      addon_loop_not_151_nl);
  assign nand_35_nl = ~(main_stage_0_2 & addon_loop_and_53_itm_1);
  assign rawWindow_0_2_1_lpi_1_mx1 = MUX_v_12_2_2(rawWin_loop_rawWin_loop_slc_rawWindow_60_47_36_1_ctmp_sva_1,
      rawWindow_0_2_1_lpi_1, nand_35_nl);
  assign dpc_loop_in_and_94_rgt = MF_inter_and_13_tmp_1 & dpc_loop_in_and_89_tmp_1
      & (~ addon_loop_or_175_cse_1);
  assign nl_operator_6_true_acc_nl_1 = MF_inter_j_3_0_lpi_1_dfm_2_0_1 + 3'b111;
  assign operator_6_true_acc_nl_1 = nl_operator_6_true_acc_nl_1[2:0];
  assign MF_inter_else_aif_slc_arr_sort_12_11_0_ncse_sva_2 = MUX_v_12_7_2(arr_sort_0_lpi_1_dfm_1,
      arr_sort_1_lpi_1, arr_sort_2_lpi_1, arr_sort_3_lpi_1, arr_sort_4_lpi_1, arr_sort_5_lpi_1,
      arr_sort_6_lpi_1, operator_6_true_acc_nl_1);
  assign or_140_nl = or_dcpl_40 | exitL_exit_MF_inter_lpi_1 | (~ lfst_exit_MF_outer_lpi_1);
  assign medianFilter_item_mux_nl = MUX_v_12_2_2(medianFilter_item_lpi_1, medianFilter_item_sva_1,
      or_140_nl);
  assign nl_MF_inter_else_aelse_acc_nl = ({1'b1 , medianFilter_item_mux_nl}) + conv_u2u_12_13(~
      MF_inter_else_aif_slc_arr_sort_12_11_0_ncse_sva_2) + 13'b0000000000001;
  assign MF_inter_else_aelse_acc_nl = nl_MF_inter_else_aelse_acc_nl[12:0];
  assign MF_inter_else_land_lpi_1_dfm_mx0w0 = (readslicef_13_1_12(MF_inter_else_aelse_acc_nl))
      & operator_6_true_acc_itm_3_1;
  assign MF_inter_else_land_lpi_1_dfm_mx0 = MUX_s_1_2_2(MF_inter_else_land_lpi_1_dfm_mx0w0,
      MF_inter_else_land_lpi_1_dfm, MF_inter_acc_itm_3_1);
  assign defectPixelDetection_rst_lpi_1_dfm_1_mx0 = MUX_s_1_2_2(defectPixelDetection_rst_lpi_1,
      defectPixelDetection_rst_lpi_1_dfm_2, sfi_dpc_loop_in_if_if_lor_lpi_1_dfm_1);
  assign exitL_exitL_exitL_exit_MF_outer_lpi_1_dfm_1 = and_87_cse | (~ dpc_loop_in_if_if_else_asn_sft_lpi_1_dfm_mx0);
  assign MF_outer_1_i_3_0_lpi_1_dfm_2_0_1 = MUX_v_3_2_2(3'b000, MF_outer_1_i_3_0_lpi_1_2_0,
      lfst_exitL_exitL_exitL_exit_MF_outer_lpi_1_dfm_1);
  assign MF_inter_1_j_3_0_lpi_1_dfm_2_0_1 = MUX_v_3_2_2(MF_inter_1_j_3_0_lpi_1_2_0,
      3'b111, exitL_exit_MF_inter_1_lpi_1_dfm_1);
  assign nl_operator_6_true_2_acc_nl = ({1'b1 , (~ MF_inter_1_j_3_0_lpi_1_dfm_2_0_1)})
      + 4'b0001;
  assign operator_6_true_2_acc_nl = nl_operator_6_true_2_acc_nl[3:0];
  assign operator_6_true_2_acc_itm_3_1 = readslicef_4_1_3(operator_6_true_2_acc_nl);
  assign MF_inter_1_and_4_psp_1 = (MF_inter_1_j_3_0_lpi_1_dfm_2_0_1==3'b011);
  assign MF_inter_1_and_5_psp_1 = MF_inter_1_nor_2_cse_1 & (MF_inter_1_j_3_0_lpi_1_dfm_2_0_1[2]);
  assign nl_MF_outer_1_acc_tmp = conv_u2s_3_4(MF_outer_1_i_3_0_lpi_1_dfm_2_0_1) +
      4'b0001;
  assign MF_outer_1_acc_tmp = nl_MF_outer_1_acc_tmp[3:0];
  assign nl_MF_inter_1_acc_1_tmp = conv_u2s_3_4(MF_inter_1_j_3_0_lpi_1_dfm_2_0_1)
      + 4'b1111;
  assign MF_inter_1_acc_1_tmp = nl_MF_inter_1_acc_1_tmp[3:0];
  assign MF_inter_1_nor_2_cse_1 = ~((MF_inter_1_j_3_0_lpi_1_dfm_2_0_1[1:0]!=2'b00));
  assign nl_MF_inter_1_acc_nl = ({1'b1 , (~ MF_inter_1_j_3_0_lpi_1_dfm_2_0_1)}) +
      conv_u2s_3_4(MF_outer_1_i_3_0_lpi_1_dfm_2_0_1) + 4'b0001;
  assign MF_inter_1_acc_nl = nl_MF_inter_1_acc_nl[3:0];
  assign MF_inter_1_acc_itm_3_1 = readslicef_4_1_3(MF_inter_1_acc_nl);
  assign exitL_exit_MF_inter_1_lpi_1_dfm_1 = exitL_exit_MF_inter_1_lpi_1 | (~(lfst_exitL_exitL_exit_MF_outer_lpi_1
      & lfst_exitL_exitL_exitL_exit_MF_outer_lpi_1_dfm_1));
  assign lfst_exitL_exitL_exitL_exit_MF_outer_lpi_1_dfm_1 = lfst_exitL_exitL_exitL_exit_MF_outer_lpi_1
      & (~ sfi_dpc_loop_in_if_if_lor_lpi_1_dfm_1);
  assign defectPixelDetection_1_else_aelse_5_mux_nl = MUX_s_1_2_2(defectPixelDetection_1_else_land_5_lpi_1_dfm_mx0w0,
      defectPixelDetection_1_else_land_5_lpi_1_dfm, nor_tmp_24);
  assign defectPixelDetection_1_rst_lpi_1_dfm_2 = (defectPixelDetection_1_else_aif_6_acc_itm_13_1
      & defectPixelDetection_1_else_aelse_5_mux_nl) | (defectPixelDetection_1_aif_6_acc_itm_13_1
      & defectPixelDetection_1_aif_5_acc_1_itm_13 & defectPixelDetection_1_aif_4_acc_1_itm_13
      & defectPixelDetection_1_aif_3_acc_1_itm_13 & defectPixelDetection_1_aif_2_acc_1_itm_13
      & defectPixelDetection_1_aif_1_acc_itm_13 & defectPixelDetection_1_land_lpi_1_dfm_1);
  assign nl_defectPixelDetection_1_else_aif_6_acc_nl = conv_u2u_11_14(dpc_reg_th_w)
      - conv_s2u_13_14(defectPixelDetection_1_diff_7_sva_1);
  assign defectPixelDetection_1_else_aif_6_acc_nl = nl_defectPixelDetection_1_else_aif_6_acc_nl[13:0];
  assign defectPixelDetection_1_else_aif_6_acc_itm_13_1 = readslicef_14_1_13(defectPixelDetection_1_else_aif_6_acc_nl);
  assign defectPixelDetection_1_else_land_5_lpi_1_dfm_mx0w0 = defectPixelDetection_1_else_aif_5_acc_1_itm_13
      & defectPixelDetection_1_else_aif_4_acc_1_itm_13 & defectPixelDetection_1_else_aif_3_acc_1_itm_13
      & defectPixelDetection_1_else_aif_2_acc_1_itm_13 & defectPixelDetection_1_else_aif_1_acc_itm_13_1
      & defectPixelDetection_1_else_land_lpi_1_dfm_1;
  assign nl_defectPixelDetection_diff_6_sva_1 = ({1'b1 , rawWindow_4_2_1_lpi_1_mx1})
      + conv_u2s_12_13(~ rawWindow_2_2_1_lpi_1_mx0) + 13'b0000000000001;
  assign defectPixelDetection_diff_6_sva_1 = nl_defectPixelDetection_diff_6_sva_1[12:0];
  assign nl_defectPixelDetection_1_else_aif_1_acc_nl = conv_u2u_11_14(dpc_reg_th_w)
      - conv_s2u_13_14(defectPixelDetection_1_diff_2_sva_1);
  assign defectPixelDetection_1_else_aif_1_acc_nl = nl_defectPixelDetection_1_else_aif_1_acc_nl[13:0];
  assign defectPixelDetection_1_else_aif_1_acc_itm_13_1 = readslicef_14_1_13(defectPixelDetection_1_else_aif_1_acc_nl);
  assign nl_defectPixelDetection_diff_1_sva_mx0w1 = ({1'b1 , rawWindow_0_2_1_lpi_1_mx1})
      + conv_u2s_12_13(~ rawWindow_2_2_1_lpi_1_mx0) + 13'b0000000000001;
  assign defectPixelDetection_diff_1_sva_mx0w1 = nl_defectPixelDetection_diff_1_sva_mx0w1[12:0];
  assign nl_defectPixelDetection_1_aif_6_acc_nl = conv_s2u_13_14(defectPixelDetection_1_diff_7_sva_1)
      - conv_s2u_12_14(defectPixelDetection_1_th_2_sva_1);
  assign defectPixelDetection_1_aif_6_acc_nl = nl_defectPixelDetection_1_aif_6_acc_nl[13:0];
  assign defectPixelDetection_1_aif_6_acc_itm_13_1 = readslicef_14_1_13(defectPixelDetection_1_aif_6_acc_nl);
  assign nl_defectPixelDetection_1_aif_1_acc_nl = conv_s2u_13_14(defectPixelDetection_1_diff_2_sva_1)
      - conv_s2u_12_14(defectPixelDetection_1_th_2_sva_1);
  assign defectPixelDetection_1_aif_1_acc_nl = nl_defectPixelDetection_1_aif_1_acc_nl[13:0];
  assign defectPixelDetection_1_aif_1_acc_itm_13 = readslicef_14_1_13(defectPixelDetection_1_aif_1_acc_nl);
  assign medianFilter_1_item_sva_1 = MUX_v_12_8_2(rawWindow_0_2_1_lpi_1, rawWindow_1_1_1_lpi_1,
      rawWindow_1_3_1_lpi_1, rawWindow_2_0_1_lpi_1, rawWindow_2_4_1_lpi_1_mx0, rawWindow_3_1_1_lpi_1,
      rawWindow_3_3_1_lpi_1, rawWindow_4_2_1_lpi_1, MF_outer_1_i_3_0_lpi_1_dfm_2_0_1);
  assign rawWindow_1_1_1_lpi_1_mx0 = MUX_v_12_2_2(rawWin_loop_rawWin_loop_slc_rawWindow_60_35_24_1_ctmp_sva_1,
      rawWindow_1_1_1_lpi_1, or_dcpl_30);
  assign dpc_loop_in_if_if_and_7_rgt = MF_inter_1_and_13_tmp_1 & dpc_loop_in_if_if_and_1_tmp_1
      & dpc_loop_out_and_35_tmp_1 & (~ addon_loop_or_7_tmp_2);
  assign nl_operator_6_true_3_acc_nl = MF_inter_1_j_3_0_lpi_1_dfm_2_0_1 + 3'b111;
  assign operator_6_true_3_acc_nl = nl_operator_6_true_3_acc_nl[2:0];
  assign MF_inter_1_else_aif_slc_arr_sort_12_11_0_ncse_sva_2 = MUX_v_12_7_2(arr_sort_0_lpi_1_dfm_1,
      arr_sort_1_lpi_1, arr_sort_2_lpi_1, arr_sort_3_lpi_1, arr_sort_4_lpi_1, arr_sort_5_lpi_1,
      arr_sort_6_lpi_1, operator_6_true_3_acc_nl);
  assign or_174_nl = or_dcpl_41 | exitL_exit_MF_inter_1_lpi_1 | (~ lfst_exitL_exitL_exit_MF_outer_lpi_1);
  assign medianFilter_1_item_mux_nl = MUX_v_12_2_2(medianFilter_1_item_lpi_1, medianFilter_1_item_sva_1,
      or_174_nl);
  assign nl_MF_inter_1_else_aelse_acc_nl = ({1'b1 , medianFilter_1_item_mux_nl})
      + conv_u2u_12_13(~ MF_inter_1_else_aif_slc_arr_sort_12_11_0_ncse_sva_2) + 13'b0000000000001;
  assign MF_inter_1_else_aelse_acc_nl = nl_MF_inter_1_else_aelse_acc_nl[12:0];
  assign MF_inter_1_else_land_lpi_1_dfm_mx0w0 = (readslicef_13_1_12(MF_inter_1_else_aelse_acc_nl))
      & operator_6_true_2_acc_itm_3_1;
  assign MF_inter_1_else_land_lpi_1_dfm_mx0 = MUX_s_1_2_2(MF_inter_1_else_land_lpi_1_dfm_mx0w0,
      MF_inter_1_else_land_lpi_1_dfm, MF_inter_1_acc_itm_3_1);
  assign defectPixelDetection_1_rst_lpi_1_dfm_1_mx0 = MUX_s_1_2_2(defectPixelDetection_1_rst_lpi_1,
      defectPixelDetection_1_rst_lpi_1_dfm_2, sfi_dpc_loop_in_if_if_lor_lpi_1_dfm_1);
  assign dpc_loop_in_if_and_tmp_1 = (~ dpc_loop_in_if_if_asn_sft_lpi_1_dfm_1) & dpc_loop_in_if_asn_sft_lpi_1;
  assign MF_outer_and_23_ssc_1 = (~ rawWin_loop_and_svs_1_1) & MF_outer_or_tmp_1;
  assign MF_outer_and_24_ssc_1 = rawWin_loop_and_svs_1_1 & MF_outer_or_tmp_1;
  assign nl_operator_3_false_acc_nl = rawWin_loop_i_sva_2 + 3'b011;
  assign operator_3_false_acc_nl = nl_operator_3_false_acc_nl[2:0];
  assign rawWin_loop_and_svs_1 = (~ (readslicef_3_1_2(operator_3_false_acc_nl)))
      & exit_rawWindow_read_lpi_1_dfm_3;
  assign MF_outer_or_tmp_mx0w0 = (lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_0_1
      & (~ lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1_1)) | (~(lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1_1
      | lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_0_1));
  assign lfst_exit_addon_loop_lpi_1_dfm_1_1 = lfst_exit_addon_loop_lpi_1_dfm_3_1
      & (~ exitL_exit_addon_loop_sva);
  assign lfst_exit_addon_loop_lpi_1_dfm_0_1 = lfst_exit_addon_loop_lpi_1_dfm_3_0
      & (~ exitL_exit_addon_loop_sva);
  assign nl_dpc_loop_out_acc_3_nl = ({1'b1 , dpc_loop_out_row_lpi_1_dfm_1_1}) + conv_u2u_13_14(~
      top_reg_frameHeight) + 14'b00000000000001;
  assign dpc_loop_out_acc_3_nl = nl_dpc_loop_out_acc_3_nl[13:0];
  assign dpc_loop_out_acc_3_itm_13_1 = readslicef_14_1_13(dpc_loop_out_acc_3_nl);
  assign exit_dpc_loop_out_lpi_1_dfm_1 = (~ dpc_loop_out_acc_3_itm_13_1) & exitL_exitL_exit_dpc_loop_in_lpi_1_dfm_1;
  assign exitL_exitL_exit_dpc_loop_in_lpi_1_dfm_1 = exitL_exitL_exit_dpc_loop_in_lpi_1
      | addon_loop_addon_loop_nor_1_cse_1;
  assign addon_loop_addon_loop_nor_1_cse_1 = ~(lfst_exit_addon_loop_lpi_1_dfm_1_1
      | lfst_exit_addon_loop_lpi_1_dfm_0_1);
  assign nl_operator_45_true_acc_nl = ({1'b1 , (addon_loop_cnt_sva_2[13:1])}) + conv_u2u_13_14(~
      top_reg_frameWidth);
  assign operator_45_true_acc_nl = nl_operator_45_true_acc_nl[13:0];
  assign addon_loop_mux_10_nl = MUX_s_1_2_2((readslicef_14_1_13(operator_45_true_acc_nl)),
      lfst_exit_addon_loop_lpi_1_dfm_1_1, addon_loop_equal_tmp_3);
  assign lfst_exit_addon_loop_lpi_1_dfm_3_1_1 = (addon_loop_mux_10_nl & (~ addon_loop_and_33_ssc_1))
      | addon_loop_and_34_tmp;
  assign lfst_exit_addon_loop_lpi_1_dfm_3_0_1 = (lfst_exit_addon_loop_lpi_1_dfm_0_1
      & (~(addon_loop_and_34_tmp | addon_loop_equal_tmp_2))) | addon_loop_and_33_ssc_1;
  assign exit_rawWindow_read_lpi_1_dfm_3 = (rawWindow_read_i_sva_2[2]) | exit_rawWindow_read_lpi_1_dfm_2;
  assign MF_outer_or_14_tmp_1 = MF_outer_equal_tmp_2 | MF_outer_MF_outer_and_2_tmp;
  assign nl_rawWindow_read_i_sva_2 = conv_u2u_2_3(rawWindow_read_i_lpi_1_dfm_1_0_1)
      + 3'b001;
  assign rawWindow_read_i_sva_2 = nl_rawWindow_read_i_sva_2[2:0];
  assign dpc_reg_eb_not_10_nl = ~ sfi_dpc_reg_eb_lpi_1_dfm_1;
  assign rawWindow_read_i_lpi_1_dfm_1_0_1 = MUX_v_2_2_2(2'b00, rawWindow_read_i_lpi_1_1_0,
      dpc_reg_eb_not_10_nl);
  assign nl_rawWin_loop_i_sva_2 = rawWin_loop_i_lpi_1_dfm_mx0w1 + 3'b001;
  assign rawWin_loop_i_sva_2 = nl_rawWin_loop_i_sva_2[2:0];
  assign dpc_loop_in_and_93_rgt = MF_outer_MF_outer_nor_21_tmp_1 & dpc_loop_in_and_58_tmp_1
      & (~ addon_loop_or_172_tmp_1);
  assign dpc_loop_in_and_10_rgt = MF_outer_or_14_tmp_1 & dpc_loop_in_asn_sft_lpi_1_dfm_mx0
      & (~ dpc_loop_out_or_2_tmp_1) & (~ lfst_exit_addon_loop_lpi_1_dfm_1_1);
  assign rawWin_loop_rawWin_loop_slc_rawWindow_60_59_48_1_ctmp_sva_1 = MUX_v_12_5_2(rawWindow_0_4_1_lpi_1_mx0,
      rawWindow_1_4_1_lpi_1_mx0, rawWindow_2_4_1_lpi_1_mx0, rawWindow_3_4_1_lpi_1_mx0,
      rawWindow_4_4_lpi_1, line_write_acc_4_itm_1);
  assign or_180_nl = (~ mux_98_itm) | dpc_loop_in_if_if_asn_sft_lpi_1_dfm_1;
  assign MF_inter_1_else_aelse_mux_3_nl = MUX_s_1_2_2(MF_inter_1_else_land_lpi_1_dfm_mx0w0,
      MF_inter_1_else_land_lpi_1_dfm, or_180_nl);
  assign MF_inter_1_and_13_tmp_1 = operator_6_true_2_acc_itm_3_1 & (~(MF_inter_1_else_aelse_mux_3_nl
      | MF_inter_1_acc_itm_3_1));
  assign dpc_loop_in_if_if_and_1_tmp_1 = dpc_loop_in_if_if_else_asn_sft_lpi_1_dfm_mx0
      & (~ dpc_loop_in_if_if_asn_sft_lpi_1_dfm_1);
  assign rawWin_loop_and_286_nl = (~ rawWin_loop_and_197_psp_1) & rawWin_loop_and_stg_3_0_sva_1;
  assign rawWin_loop_and_287_nl = rawWin_loop_and_197_psp_1 & rawWin_loop_and_stg_3_0_sva_1;
  assign rawWin_loop_rawWin_loop_slc_rawWindow_60_47_36_1_ctmp_sva_1_1 = MUX1HOT_v_12_6_2(rawWindow_0_3_lpi_1,
      rawWin_loop_rawWin_loop_slc_rawWindow_60_59_48_1_ctmp_lpi_1_mx0, rawWindow_1_3_1_lpi_1_mx0,
      rawWindow_2_3_1_lpi_1_mx0, rawWindow_3_3_1_lpi_1_mx0, rawWindow_4_3_1_lpi_1_mx0,
      {rawWin_loop_and_286_nl , rawWin_loop_and_287_nl , rawWin_loop_and_m1c_mx0w0
      , rawWin_loop_and_282_cse_mx0w0 , rawWin_loop_and_283_cse_mx0w0 , rawWin_loop_and_284_cse_1});
  assign rawWin_loop_and_280_nl = (~ rawWin_loop_and_189_psp_1) & rawWin_loop_and_m1c_mx0w0;
  assign rawWin_loop_and_281_nl = rawWin_loop_and_189_psp_1 & rawWin_loop_and_m1c_mx0w0;
  assign rawWin_loop_rawWin_loop_slc_rawWindow_60_35_24_1_ctmp_sva_1_1 = MUX1HOT_v_12_6_2(rawWindow_0_2_1_lpi_1_mx1,
      rawWindow_1_2_lpi_1, rawWin_loop_rawWin_loop_slc_rawWindow_60_59_48_1_ctmp_lpi_1_mx0,
      rawWindow_2_2_1_lpi_1_mx0, rawWindow_3_2_1_lpi_1_mx0, rawWindow_4_2_1_lpi_1_mx1,
      {rawWin_loop_and_stg_3_0_sva_1 , rawWin_loop_and_280_nl , rawWin_loop_and_281_nl
      , rawWin_loop_and_282_cse_mx0w0 , rawWin_loop_and_283_cse_mx0w0 , rawWin_loop_and_284_cse_1});
  assign rawWin_loop_rawWin_loop_slc_rawWindow_60_23_12_1_ctmp_sva_1_1 = MUX_v_12_5_2(rawWindow_0_1_1_lpi_1,
      rawWindow_1_1_1_lpi_1_mx0, rawWindow_2_1_1_lpi_1_mx0, rawWindow_3_1_1_lpi_1_mx0,
      rawWindow_4_1_1_lpi_1_mx0, rawWin_loop_i_lpi_1_dfm_mx0w1);
  assign addon_loop_or_175_cse_1 = dpc_loop_in_asn_sft_1_lpi_1_dfm_1 | dpc_loop_out_asn_sft_lpi_1_dfm_1
      | addon_loop_equal_tmp_1 | addon_loop_equal_tmp_1_1;
  assign or_148_nl = (~ mux_95_itm) | or_dcpl_44 | or_dcpl_42;
  assign MF_inter_else_aelse_mux_3_nl = MUX_s_1_2_2(MF_inter_else_land_lpi_1_dfm_mx0w0,
      MF_inter_else_land_lpi_1_dfm, or_148_nl);
  assign MF_inter_and_13_tmp_1 = operator_6_true_acc_itm_3_1 & (~(MF_inter_else_aelse_mux_3_nl
      | MF_inter_acc_itm_3_1));
  assign dpc_loop_in_and_89_tmp_1 = dpc_loop_in_if_if_if_asn_sft_lpi_1_dfm_mx0 &
      dpc_loop_in_if_if_asn_sft_lpi_1_dfm_1 & dpc_loop_in_if_asn_sft_lpi_1 & MF_outer_equal_tmp_1_1
      & dpc_loop_in_asn_sft_lpi_1_dfm_1;
  assign dpc_loop_in_if_if_else_and_6_tmp_1 = MF_inter_1_and_stg_1_2_sva_1 & (MF_inter_1_j_3_0_lpi_1_dfm_2_0_1[2])
      & dpc_loop_in_if_if_else_asn_sft_lpi_1_dfm_mx0;
  assign dpc_loop_in_if_if_if_and_6_tmp_1 = MF_inter_and_stg_1_2_sva_1 & (MF_inter_j_3_0_lpi_1_dfm_2_0_1[2])
      & dpc_loop_in_if_if_if_asn_sft_lpi_1_dfm_mx0;
  assign dpc_loop_in_if_if_else_and_5_tmp_1 = MF_inter_1_and_stg_1_1_sva_1 & (MF_inter_1_j_3_0_lpi_1_dfm_2_0_1[2])
      & dpc_loop_in_if_if_else_asn_sft_lpi_1_dfm_mx0;
  assign dpc_loop_in_if_if_if_and_5_tmp_1 = MF_inter_and_stg_1_1_sva_1 & (MF_inter_j_3_0_lpi_1_dfm_2_0_1[2])
      & dpc_loop_in_if_if_if_asn_sft_lpi_1_dfm_mx0;
  assign MF_inter_1_mux_4_nl = MUX_s_1_2_2(MF_inter_1_and_5_psp_1, MF_inter_1_and_5_psp,
      or_dcpl_73);
  assign dpc_loop_in_if_if_else_and_4_tmp_1 = MF_inter_1_mux_4_nl & dpc_loop_in_if_if_else_asn_sft_lpi_1_dfm_mx0;
  assign MF_inter_mux_4_nl = MUX_s_1_2_2(MF_inter_and_5_psp_1, MF_inter_and_5_psp,
      or_dcpl_46);
  assign dpc_loop_in_if_if_if_and_4_tmp_1 = MF_inter_mux_4_nl & dpc_loop_in_if_if_if_asn_sft_lpi_1_dfm_mx0;
  assign MF_inter_1_mux_2_nl = MUX_s_1_2_2(MF_inter_1_and_4_psp_1, MF_inter_1_and_4_psp,
      or_dcpl_73);
  assign dpc_loop_in_if_if_else_and_3_tmp_1 = MF_inter_1_mux_2_nl & dpc_loop_in_if_if_else_asn_sft_lpi_1_dfm_mx0;
  assign MF_inter_mux_2_nl = MUX_s_1_2_2(MF_inter_and_4_psp_1, MF_inter_and_4_psp,
      or_dcpl_46);
  assign dpc_loop_in_if_if_if_and_3_tmp_1 = MF_inter_mux_2_nl & dpc_loop_in_if_if_if_asn_sft_lpi_1_dfm_mx0;
  assign dpc_loop_in_if_if_else_and_2_tmp_1 = MF_inter_1_and_stg_1_2_sva_1 & (~ (MF_inter_1_j_3_0_lpi_1_dfm_2_0_1[2]))
      & dpc_loop_in_if_if_else_asn_sft_lpi_1_dfm_mx0;
  assign dpc_loop_in_if_if_if_and_2_tmp_1 = MF_inter_and_stg_1_2_sva_1 & (~ (MF_inter_j_3_0_lpi_1_dfm_2_0_1[2]))
      & dpc_loop_in_if_if_if_asn_sft_lpi_1_dfm_mx0;
  assign dpc_loop_in_if_and_4_m1c_1 = (~ dpc_loop_in_if_if_asn_sft_lpi_1_dfm_1) &
      dpc_loop_in_if_asn_sft_lpi_1 & and_85_cse;
  assign dpc_loop_in_if_if_else_and_1_tmp_1 = MF_inter_1_and_stg_1_1_sva_1 & (~ (MF_inter_1_j_3_0_lpi_1_dfm_2_0_1[2]))
      & dpc_loop_in_if_if_else_asn_sft_lpi_1_dfm_mx0;
  assign dpc_loop_in_if_and_3_m1c_1 = dpc_loop_in_if_if_asn_sft_lpi_1_dfm_1 & dpc_loop_in_if_asn_sft_lpi_1
      & and_85_cse;
  assign dpc_loop_in_if_if_if_and_1_tmp_1 = MF_inter_and_stg_1_1_sva_1 & (~ (MF_inter_j_3_0_lpi_1_dfm_2_0_1[2]))
      & dpc_loop_in_if_if_if_asn_sft_lpi_1_dfm_mx0;
  assign dpc_loop_out_and_35_tmp_1 = dpc_loop_in_if_asn_sft_lpi_1 & MF_outer_equal_tmp_1_1
      & dpc_loop_in_asn_sft_lpi_1_dfm_1 & dpc_loop_out_dpc_loop_out_nor_2_cse_1;
  assign dpc_loop_out_and_tmp_1 = MF_outer_equal_tmp_1_1 & dpc_loop_in_asn_sft_lpi_1_dfm_1
      & dpc_loop_out_dpc_loop_out_nor_2_cse_1;
  assign MF_inter_and_stg_1_1_sva_1 = (MF_inter_j_3_0_lpi_1_dfm_2_0_1[1:0]==2'b01);
  assign MF_inter_and_stg_1_2_sva_1 = (MF_inter_j_3_0_lpi_1_dfm_2_0_1[1:0]==2'b10);
  assign MF_inter_1_and_stg_1_1_sva_1 = (MF_inter_1_j_3_0_lpi_1_dfm_2_0_1[1:0]==2'b01);
  assign MF_inter_1_and_stg_1_2_sva_1 = (MF_inter_1_j_3_0_lpi_1_dfm_2_0_1[1:0]==2'b10);
  assign dpc_loop_out_dpc_loop_out_nor_2_cse_1 = ~(dpc_loop_in_asn_sft_1_lpi_1_dfm_1
      | dpc_loop_out_asn_sft_lpi_1_dfm_1);
  assign addon_loop_and_93_tmp_2 = dpc_loop_in_if_if_else_asn_sft_lpi_1_dfm_mx0 &
      (~ dpc_loop_in_if_if_asn_sft_lpi_1_dfm_1) & dpc_loop_in_if_asn_sft_lpi_1 &
      MF_outer_equal_tmp_1_1 & dpc_loop_in_asn_sft_lpi_1_dfm_1 & addon_loop_and_37_tmp_1;
  assign addon_loop_and_37_tmp_1 = dpc_loop_out_dpc_loop_out_nor_2_cse_1 & (~(addon_loop_equal_tmp_1
      | addon_loop_equal_tmp_1_1));
  assign addon_loop_and_85_tmp_2 = dpc_loop_in_if_if_if_asn_sft_lpi_1_dfm_mx0 & dpc_loop_in_if_if_asn_sft_lpi_1_dfm_1
      & dpc_loop_in_if_asn_sft_lpi_1 & MF_outer_equal_tmp_1_1 & dpc_loop_in_asn_sft_lpi_1_dfm_1
      & addon_loop_and_37_tmp_1;
  assign dpc_loop_in_mux_327_nl = MUX_s_1_2_2(and_85_cse, MF_outer_or_tmp_1, or_dcpl_29);
  assign dpc_loop_in_nand_cse_1 = ~(dpc_loop_in_mux_327_nl & dpc_loop_in_if_asn_sft_lpi_1);
  assign exitL_exit_dpc_loop_in_lpi_1_dfm_1 = exit_dpc_loop_in_lpi_1_dfm_1 | dpc_loop_out_asn_sft_lpi_1_dfm_1_mx0;
  assign addon_loop_or_172_tmp_1 = dpc_loop_out_asn_sft_lpi_1_dfm_1_mx0 | addon_loop_equal_tmp_2
      | addon_loop_equal_tmp_3;
  assign addon_loop_addon_loop_nor_20_cse_1 = ~(dpc_loop_out_asn_sft_lpi_1_dfm_1_mx0
      | addon_loop_equal_tmp_2 | addon_loop_equal_tmp_3);
  assign nl_addon_loop_cnt_sva_2 = addon_loop_cnt_lpi_1 + 14'b00000000000001;
  assign addon_loop_cnt_sva_2 = nl_addon_loop_cnt_sva_2[13:0];
  assign addon_loop_and_33_ssc_1 = (~ exit_dpc_loop_out_lpi_1_dfm_1) & addon_loop_or_tmp_1;
  assign addon_loop_and_34_tmp = exit_dpc_loop_out_lpi_1_dfm_1 & addon_loop_or_tmp_1;
  assign addon_loop_or_tmp_1 = (lfst_exit_addon_loop_lpi_1_dfm_0_1 & (~ lfst_exit_addon_loop_lpi_1_dfm_1_1))
      | addon_loop_addon_loop_nor_1_cse_1;
  assign rawWin_loop_rawWin_loop_xnor_tmp = ~((rawWin_loop_i_lpi_1_dfm_mx0w1[2])
      ^ (rawWin_loop_i_lpi_1_dfm_mx0w1[0]));
  assign rawWin_loop_and_stg_3_0_sva_1 = rawWin_loop_and_stg_1_0_sva_1 & rawWin_loop_rawWin_loop_xnor_tmp;
  assign rawWin_loop_and_m1c_mx0w0 = (rawWin_loop_i_lpi_1_dfm_mx0w1==3'b001);
  assign rawWin_loop_and_m1c_mx0 = MUX_s_1_2_2(rawWin_loop_and_m1c, rawWin_loop_and_m1c_mx0w0,
      mux_276_itm);
  assign rawWin_loop_and_282_cse_mx0w0 = (rawWin_loop_i_lpi_1_dfm_mx0w1==3'b010);
  assign rawWin_loop_and_282_cse_mx0 = MUX_s_1_2_2(rawWin_loop_and_282_cse, rawWin_loop_and_282_cse_mx0w0,
      mux_276_itm);
  assign rawWin_loop_and_283_cse_mx0w0 = (rawWin_loop_i_lpi_1_dfm_mx0w1==3'b011);
  assign rawWin_loop_and_283_cse_mx0 = MUX_s_1_2_2(rawWin_loop_and_283_cse, rawWin_loop_and_283_cse_mx0w0,
      mux_276_itm);
  assign rawWin_loop_and_284_cse_1 = (rawWin_loop_i_lpi_1_dfm_mx0w1[2]) & rawWin_loop_and_stg_1_0_sva_1;
  assign MF_outer_MF_outer_nor_2_cse_1 = ~(MF_outer_equal_tmp_2 | MF_outer_MF_outer_and_2_tmp);
  assign dpc_loop_out_dpc_loop_out_nor_15_cse_1 = ~(dpc_loop_in_asn_sft_1_lpi_1_dfm_mx0
      | dpc_loop_out_asn_sft_lpi_1_dfm_1_mx0);
  assign rawWin_loop_and_197_psp_1 = rawWin_loop_and_stg_3_3_3_lpi_1 & (~ rawWin_loop_acc_5_decb_4_lpi_1);
  assign asn_rawWin_loop_rawWin_loop_slc_rawWindow_60_59_48_1_ctmp_lpi_1_nand_nl
      = ~(main_stage_0_2 & addon_loop_and_95_itm_1);
  assign rawWin_loop_rawWin_loop_slc_rawWindow_60_59_48_1_ctmp_lpi_1_mx0 = MUX_v_12_2_2(rawWin_loop_rawWin_loop_slc_rawWindow_60_59_48_1_ctmp_sva_1,
      rawWin_loop_rawWin_loop_slc_rawWindow_60_59_48_1_ctmp_lpi_1, asn_rawWin_loop_rawWin_loop_slc_rawWindow_60_59_48_1_ctmp_lpi_1_nand_nl);
  assign rawWin_loop_and_189_psp_1 = rawWin_loop_and_stg_3_7_3_lpi_1 & (~ rawWin_loop_acc_5_decb_4_lpi_1);
  assign rawWin_loop_and_189_psp_mx0 = MUX_s_1_2_2(rawWin_loop_and_189_psp, rawWin_loop_and_189_psp_1,
      mux_276_itm);
  assign rawWin_loop_and_stg_1_0_sva_1 = ~((rawWin_loop_i_lpi_1_dfm_mx0w1[1:0]!=2'b00));
  assign MF_outer_and_2_rgt = rawWin_loop_and_m1c_mx0 & (~ lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1_mx0)
      & dpc_loop_in_asn_sft_lpi_1_dfm_mx0 & (~ dpc_loop_out_or_2_tmp_1) & (~ lfst_exit_addon_loop_lpi_1_dfm_1_1);
  assign MF_outer_MF_outer_nor_21_tmp_1 = ~(exit_rawWindow_read_lpi_1_dfm_2 | MF_outer_equal_tmp_2
      | MF_outer_MF_outer_and_2_tmp);
  assign dpc_loop_in_and_58_tmp_1 = dpc_loop_in_asn_sft_lpi_1_dfm_mx0 & (~ dpc_loop_in_asn_sft_1_lpi_1_dfm_mx0);
  assign dpc_loop_out_or_2_tmp_1 = dpc_loop_in_asn_sft_1_lpi_1_dfm_mx0 | dpc_loop_out_asn_sft_lpi_1_dfm_1_mx0;
  assign nl_defectPixelDetection_1_else_aif_5_acc_1_nl = conv_u2u_11_14(dpc_reg_th_w)
      - conv_s2u_13_14(defectPixelDetection_1_diff_6_sva_1);
  assign defectPixelDetection_1_else_aif_5_acc_1_nl = nl_defectPixelDetection_1_else_aif_5_acc_1_nl[13:0];
  assign defectPixelDetection_1_else_aif_5_acc_1_itm_13 = readslicef_14_1_13(defectPixelDetection_1_else_aif_5_acc_1_nl);
  assign nl_defectPixelDetection_1_else_aif_4_acc_1_nl = conv_u2u_11_14(dpc_reg_th_w)
      - conv_s2u_13_14(defectPixelDetection_1_diff_5_sva_1);
  assign defectPixelDetection_1_else_aif_4_acc_1_nl = nl_defectPixelDetection_1_else_aif_4_acc_1_nl[13:0];
  assign defectPixelDetection_1_else_aif_4_acc_1_itm_13 = readslicef_14_1_13(defectPixelDetection_1_else_aif_4_acc_1_nl);
  assign nl_defectPixelDetection_1_else_aif_2_acc_1_nl = conv_u2u_11_14(dpc_reg_th_w)
      - conv_s2u_13_14(defectPixelDetection_1_diff_3_sva_1);
  assign defectPixelDetection_1_else_aif_2_acc_1_nl = nl_defectPixelDetection_1_else_aif_2_acc_1_nl[13:0];
  assign defectPixelDetection_1_else_aif_2_acc_1_itm_13 = readslicef_14_1_13(defectPixelDetection_1_else_aif_2_acc_1_nl);
  assign nl_defectPixelDetection_1_else_aif_acc_1_nl = conv_u2u_11_14(dpc_reg_th_w)
      - conv_s2u_13_14(defectPixelDetection_1_diff_1_sva_1);
  assign defectPixelDetection_1_else_aif_acc_1_nl = nl_defectPixelDetection_1_else_aif_acc_1_nl[13:0];
  assign defectPixelDetection_1_else_aif_acc_1_itm_13_1 = readslicef_14_1_13(defectPixelDetection_1_else_aif_acc_1_nl);
  assign nl_defectPixelDetection_1_else_acc_1_nl = conv_u2u_11_14(dpc_reg_th_w) -
      conv_s2u_13_14(defectPixelDetection_1_diff_0_sva_1);
  assign defectPixelDetection_1_else_acc_1_nl = nl_defectPixelDetection_1_else_acc_1_nl[13:0];
  assign defectPixelDetection_1_else_acc_1_itm_13 = readslicef_14_1_13(defectPixelDetection_1_else_acc_1_nl);
  assign nl_defectPixelDetection_1_aif_5_acc_1_nl = conv_s2u_13_14(defectPixelDetection_1_diff_6_sva_1)
      - conv_s2u_12_14(defectPixelDetection_1_th_2_sva_1);
  assign defectPixelDetection_1_aif_5_acc_1_nl = nl_defectPixelDetection_1_aif_5_acc_1_nl[13:0];
  assign defectPixelDetection_1_aif_5_acc_1_itm_13 = readslicef_14_1_13(defectPixelDetection_1_aif_5_acc_1_nl);
  assign nl_defectPixelDetection_1_aif_4_acc_1_nl = conv_s2u_13_14(defectPixelDetection_1_diff_5_sva_1)
      - conv_s2u_12_14(defectPixelDetection_1_th_2_sva_1);
  assign defectPixelDetection_1_aif_4_acc_1_nl = nl_defectPixelDetection_1_aif_4_acc_1_nl[13:0];
  assign defectPixelDetection_1_aif_4_acc_1_itm_13 = readslicef_14_1_13(defectPixelDetection_1_aif_4_acc_1_nl);
  assign nl_defectPixelDetection_1_aif_2_acc_1_nl = conv_s2u_13_14(defectPixelDetection_1_diff_3_sva_1)
      - conv_s2u_12_14(defectPixelDetection_1_th_2_sva_1);
  assign defectPixelDetection_1_aif_2_acc_1_nl = nl_defectPixelDetection_1_aif_2_acc_1_nl[13:0];
  assign defectPixelDetection_1_aif_2_acc_1_itm_13 = readslicef_14_1_13(defectPixelDetection_1_aif_2_acc_1_nl);
  assign nl_defectPixelDetection_1_aif_acc_1_nl = conv_s2u_13_14(defectPixelDetection_1_diff_1_sva_1)
      - conv_s2u_12_14(defectPixelDetection_1_th_2_sva_1);
  assign defectPixelDetection_1_aif_acc_1_nl = nl_defectPixelDetection_1_aif_acc_1_nl[13:0];
  assign defectPixelDetection_1_aif_acc_1_itm_13_1 = readslicef_14_1_13(defectPixelDetection_1_aif_acc_1_nl);
  assign nl_defectPixelDetection_1_acc_15_nl = conv_s2u_13_14(defectPixelDetection_1_diff_0_sva_1)
      - conv_s2u_12_14(defectPixelDetection_1_th_2_sva_1);
  assign defectPixelDetection_1_acc_15_nl = nl_defectPixelDetection_1_acc_15_nl[13:0];
  assign defectPixelDetection_1_acc_15_itm_13 = readslicef_14_1_13(defectPixelDetection_1_acc_15_nl);
  assign nl_defectPixelDetection_1_else_aif_3_acc_1_nl = conv_u2u_11_14(dpc_reg_th_w)
      - conv_s2u_13_14(defectPixelDetection_diff_4_sva_1);
  assign defectPixelDetection_1_else_aif_3_acc_1_nl = nl_defectPixelDetection_1_else_aif_3_acc_1_nl[13:0];
  assign defectPixelDetection_1_else_aif_3_acc_1_itm_13 = readslicef_14_1_13(defectPixelDetection_1_else_aif_3_acc_1_nl);
  assign nl_defectPixelDetection_1_aif_3_acc_1_nl = conv_s2u_13_14(defectPixelDetection_diff_4_sva_1)
      - conv_s2u_12_14(defectPixelDetection_1_th_2_sva_1);
  assign defectPixelDetection_1_aif_3_acc_1_nl = nl_defectPixelDetection_1_aif_3_acc_1_nl[13:0];
  assign defectPixelDetection_1_aif_3_acc_1_itm_13 = readslicef_14_1_13(defectPixelDetection_1_aif_3_acc_1_nl);
  assign addon_loop_addon_loop_nor_50_tmp = ~(dpc_loop_out_asn_sft_lpi_1_dfm_1 |
      addon_loop_equal_tmp_1 | addon_loop_equal_tmp_1_1);
  assign and_105_cse = dpc_loop_in_asn_sft_lpi_1_dfm_1 & addon_loop_addon_loop_nor_50_tmp;
  assign nor_120_cse = ~((~ dpc_loop_in_asn_sft_lpi_1_dfm_1) | (~ addon_loop_addon_loop_nor_50_tmp)
      | dpc_loop_in_asn_sft_1_lpi_1_dfm_1);
  assign nor_tmp_4 = dpc_loop_out_acc_3_itm_13_1 & dpc_loop_in_acc_2_itm_13_1;
  assign or_dcpl_5 = dpc_loop_in_asn_sft_1_lpi_1_dfm_1 | dpc_loop_out_asn_sft_lpi_1_dfm_1;
  assign or_dcpl_6 = or_dcpl_5 | (~ main_stage_0_2);
  assign or_dcpl_7 = (~ dpc_loop_in_asn_sft_lpi_1_dfm_1) | lfst_exit_addon_loop_lpi_1_dfm_st_1_1;
  assign or_dcpl_11 = addon_loop_or_7_tmp_2 | (~ main_stage_0_2);
  assign nand_34_nl = ~(dpc_loop_in_or_6_cse & dpc_loop_in_asn_sft_lpi_1_dfm_1 &
      (~ exitL_exit_addon_loop_sva) & lfst_exit_addon_loop_lpi_1_dfm_3_0);
  assign mux_40_nl = MUX_s_1_2_2(nand_34_nl, or_217_cse, lfst_exit_addon_loop_lpi_1_dfm_st_1_1);
  assign nor_112_nl = ~(dpc_loop_in_asn_sft_1_lpi_1_dfm_1 | mux_40_nl);
  assign nor_113_nl = ~(exitL_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1
      | exitL_exit_addon_loop_sva | (~ lfst_exit_addon_loop_lpi_1_dfm_3_0));
  assign mux_41_nl = MUX_s_1_2_2(nor_112_nl, nor_113_nl, or_18_cse);
  assign nand_2_nl = ~(lfst_exit_dpc_loop_in_lpi_1 & mux_41_nl);
  assign mux_42_nl = MUX_s_1_2_2(nand_2_nl, or_217_cse, dpc_loop_out_asn_sft_lpi_1);
  assign nand_tmp_3 = ~(lfst_exitL_exit_dpc_loop_in_lpi_1 & (~ mux_42_nl));
  assign nl_operator_13_false_3_acc_nl = ({1'b1 , (~ (dpc_loop_in_col_lpi_1_dfm_1[12:1]))})
      + 13'b0000000000001;
  assign operator_13_false_3_acc_nl = nl_operator_13_false_3_acc_nl[12:0];
  assign or_nl = (~ (readslicef_13_1_12(operator_13_false_3_acc_nl))) | (dpc_loop_out_row_lpi_1_dfm_1[1:0]!=2'b10)
      | and_102_cse;
  assign nl_operator_13_false_2_acc_nl = ({1'b1 , (~ dpc_loop_out_row_lpi_1_dfm_1)})
      + 14'b00000000000011;
  assign operator_13_false_2_acc_nl = nl_operator_13_false_2_acc_nl[13:0];
  assign mux_tmp_43 = MUX_s_1_2_2(or_nl, and_102_cse, readslicef_14_1_13(operator_13_false_2_acc_nl));
  assign and_dcpl_29 = (~(lfst_exit_addon_loop_lpi_1_dfm_st_1_1 | dpc_loop_in_asn_sft_1_lpi_1_dfm_1))
      & (~ dpc_loop_out_asn_sft_lpi_1_dfm_1) & main_stage_0_2;
  assign or_tmp_46 = (~ sfi_exit_dpc_loop_in_lpi_1) | dpc_loop_in_asn_sft_1_lpi_1;
  assign nor_tmp_13 = dpc_loop_out_acc_3_itm_13_1 & dpc_reg_eb & dpc_loop_in_acc_2_itm_13_1;
  assign nor_tmp_14 = dpc_reg_eb & dpc_loop_in_acc_2_itm_13_1;
  assign nor_tmp_15 = dpc_loop_in_asn_sft_1_lpi_1 & lfst_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1;
  assign mux_tmp_61 = MUX_s_1_2_2(or_65_cse, and_36_cse, dpc_loop_in_asn_sft_1_lpi_1);
  assign or_dcpl_18 = ~(addon_loop_addon_loop_nor_50_tmp & dpc_loop_in_asn_sft_lpi_1_dfm_1
      & (~ dpc_loop_in_asn_sft_1_lpi_1_dfm_1) & main_stage_0_2);
  assign or_tmp_63 = dpc_loop_in_asn_sft_1_lpi_1_dfm_1 | (~ and_102_cse);
  assign or_dcpl_28 = lfst_exit_addon_loop_lpi_1_dfm_st_1_1 | dpc_loop_in_asn_sft_1_lpi_1_dfm_1;
  assign or_dcpl_29 = or_dcpl_28 | dpc_loop_out_asn_sft_lpi_1_dfm_1;
  assign or_dcpl_30 = ~(main_stage_0_2 & addon_loop_and_55_itm_1);
  assign or_dcpl_31 = ~(main_stage_0_2 & addon_loop_and_59_itm_1);
  assign or_dcpl_32 = ~(main_stage_0_2 & addon_loop_and_62_itm_1);
  assign or_dcpl_33 = ~(main_stage_0_2 & addon_loop_and_67_itm_1);
  assign nor_tmp_20 = ~(dpc_loop_in_asn_sft_1_lpi_1_dfm_1 | (~ dpc_loop_in_asn_sft_lpi_1_dfm_1));
  assign or_tmp_66 = addon_loop_addon_loop_nor_50_tmp | lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_1;
  assign or_tmp_70 = addon_loop_addon_loop_nor_50_tmp | (~ lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_1)
      | (~ lfst_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1) | exitL_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1
      | (~ lfst_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1);
  assign or_tmp_72 = ~(lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_1 & lfst_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1
      & (~ exitL_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1) & lfst_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1);
  assign and_46_nl = MF_outer_MF_outer_or_9_tmp & or_tmp_66;
  assign nor_105_nl = ~(addon_loop_addon_loop_nor_50_tmp | (~ lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_1));
  assign mux_87_nl = MUX_s_1_2_2(nor_105_nl, or_tmp_66, MF_outer_MF_outer_or_9_tmp);
  assign mux_88_nl = MUX_s_1_2_2(and_46_nl, mux_87_nl, MF_outer_MF_outer_or_8_tmp);
  assign nand_25_nl = ~(dpc_loop_in_asn_sft_lpi_1_dfm_1 & mux_88_nl);
  assign or_113_nl = addon_loop_addon_loop_nor_50_tmp | (~ lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_1);
  assign mux_86_nl = MUX_s_1_2_2((~ lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_1),
      or_113_nl, dpc_loop_in_asn_sft_lpi_1_dfm_1);
  assign mux_89_nl = MUX_s_1_2_2(nand_25_nl, mux_86_nl, lfst_exit_addon_loop_lpi_1_dfm_st_1_1);
  assign or_117_nl = dpc_loop_in_asn_sft_1_lpi_1_dfm_1 | mux_89_nl;
  assign nand_28_nl = ~(or_tmp_66 & lfst_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1
      & (~ exitL_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1) & lfst_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1);
  assign mux_82_nl = MUX_s_1_2_2(or_tmp_70, nand_28_nl, MF_outer_MF_outer_or_9_tmp);
  assign mux_83_nl = MUX_s_1_2_2(or_tmp_72, mux_82_nl, dpc_loop_in_asn_sft_lpi_1_dfm_1);
  assign mux_81_nl = MUX_s_1_2_2(or_tmp_72, or_tmp_70, dpc_loop_in_asn_sft_lpi_1_dfm_1);
  assign mux_84_nl = MUX_s_1_2_2(mux_83_nl, mux_81_nl, lfst_exit_addon_loop_lpi_1_dfm_st_1_1);
  assign mux_85_nl = MUX_s_1_2_2(mux_84_nl, or_tmp_72, dpc_loop_in_asn_sft_1_lpi_1_dfm_1);
  assign mux_90_nl = MUX_s_1_2_2(or_117_nl, mux_85_nl, addon_loop_or_7_tmp_2);
  assign mux_80_nl = MUX_s_1_2_2(or_tmp_72, or_tmp_70, nor_tmp_20);
  assign mux_91_nl = MUX_s_1_2_2(mux_90_nl, mux_80_nl, dpc_loop_out_asn_sft_lpi_1_dfm_1);
  assign mux_tmp_88 = MUX_s_1_2_2(or_tmp_72, mux_91_nl, main_stage_0_2);
  assign or_dcpl_39 = mux_tmp_88 | or_217_cse | (~(lfst_exitL_exit_dpc_loop_in_lpi_1
      & lfst_exit_dpc_loop_in_lpi_1)) | sfi_exit_dpc_loop_in_lpi_1 | sfi_dpc_reg_eb_lpi_1
      | exitL_exitL_exit_dpc_loop_in_lpi_1;
  assign or_dcpl_40 = (~ lfst_exitL_exit_MF_outer_lpi_1) | sfi_dpc_loop_in_if_if_lor_lpi_1_dfm_1;
  assign or_dcpl_41 = (~ lfst_exitL_exitL_exitL_exit_MF_outer_lpi_1) | sfi_dpc_loop_in_if_if_lor_lpi_1_dfm_1;
  assign or_dcpl_42 = ~(dpc_loop_in_asn_sft_lpi_1_dfm_1 & dpc_loop_in_if_asn_sft_lpi_1);
  assign or_dcpl_43 = ~(dpc_loop_in_if_if_asn_sft_lpi_1_dfm_1 & lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1);
  assign or_dcpl_44 = or_dcpl_43 | (~ lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_st_1_0);
  assign or_dcpl_45 = or_dcpl_44 | or_dcpl_42;
  assign nor_tmp_22 = defectPixelDetection_aif_6_acc_itm_13_1 & defectPixelDetection_aif_1_acc_itm_13
      & defectPixelDetection_1_aif_5_acc_1_itm_13 & defectPixelDetection_1_aif_4_acc_1_itm_13
      & defectPixelDetection_1_aif_3_acc_1_itm_13 & defectPixelDetection_1_aif_2_acc_1_itm_13
      & defectPixelDetection_1_aif_acc_1_itm_13_1 & defectPixelDetection_1_acc_15_itm_13;
  assign mux_tmp_90 = MUX_s_1_2_2(defectPixelDetection_rst_lpi_1, dpc_loop_in_if_if_if_asn_sft_lpi_1,
      lfst_exitL_exit_MF_outer_lpi_1);
  assign and_97_cse = defectPixelDetection_else_aif_6_acc_itm_13_1 & defectPixelDetection_else_aif_1_acc_itm_13_1
      & defectPixelDetection_1_else_aif_5_acc_1_itm_13 & defectPixelDetection_1_else_aif_4_acc_1_itm_13
      & defectPixelDetection_1_else_aif_3_acc_1_itm_13 & defectPixelDetection_1_else_aif_2_acc_1_itm_13
      & defectPixelDetection_1_else_aif_acc_1_itm_13_1 & defectPixelDetection_1_else_acc_1_itm_13;
  assign or_125_nl = and_97_cse | nor_tmp_22;
  assign mux_95_itm = MUX_s_1_2_2(mux_tmp_90, or_125_nl, sfi_dpc_loop_in_if_if_lor_lpi_1_dfm_1);
  assign or_dcpl_46 = (~ mux_95_itm) | or_dcpl_45;
  assign or_dcpl_48 = or_dcpl_28 | dpc_loop_out_asn_sft_lpi_1_dfm_1 | (~ main_stage_0_2);
  assign or_dcpl_49 = or_dcpl_45 | or_dcpl_48;
  assign or_dcpl_52 = (~ dpc_loop_in_if_asn_sft_lpi_1) | dpc_loop_in_asn_sft_1_lpi_1_dfm_1
      | dpc_loop_out_asn_sft_lpi_1_dfm_1;
  assign or_dcpl_53 = ~(lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_st_1_0 &
      dpc_loop_in_asn_sft_lpi_1_dfm_1);
  assign or_dcpl_70 = dpc_loop_in_if_if_asn_sft_lpi_1_dfm_1 | (~ lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1);
  assign or_dcpl_72 = or_dcpl_70 | (~ lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_st_1_0)
      | or_dcpl_42;
  assign nor_tmp_24 = defectPixelDetection_1_aif_6_acc_itm_13_1 & defectPixelDetection_1_aif_1_acc_itm_13
      & defectPixelDetection_1_aif_5_acc_1_itm_13 & defectPixelDetection_1_aif_4_acc_1_itm_13
      & defectPixelDetection_1_aif_3_acc_1_itm_13 & defectPixelDetection_1_aif_2_acc_1_itm_13
      & defectPixelDetection_1_aif_acc_1_itm_13_1 & defectPixelDetection_1_acc_15_itm_13;
  assign mux_tmp_93 = MUX_s_1_2_2(defectPixelDetection_1_rst_lpi_1, dpc_loop_in_if_if_else_asn_sft_lpi_1,
      lfst_exitL_exitL_exitL_exit_MF_outer_lpi_1);
  assign and_95_cse = defectPixelDetection_1_else_aif_6_acc_itm_13_1 & defectPixelDetection_1_else_aif_1_acc_itm_13_1
      & defectPixelDetection_1_else_aif_5_acc_1_itm_13 & defectPixelDetection_1_else_aif_4_acc_1_itm_13
      & defectPixelDetection_1_else_aif_3_acc_1_itm_13 & defectPixelDetection_1_else_aif_2_acc_1_itm_13
      & defectPixelDetection_1_else_aif_acc_1_itm_13_1 & defectPixelDetection_1_else_acc_1_itm_13;
  assign or_153_nl = and_95_cse | nor_tmp_24;
  assign mux_98_itm = MUX_s_1_2_2(mux_tmp_93, or_153_nl, sfi_dpc_loop_in_if_if_lor_lpi_1_dfm_1);
  assign or_dcpl_73 = (~ mux_98_itm) | or_dcpl_72;
  assign or_dcpl_74 = or_dcpl_72 | or_dcpl_48;
  assign xnor_nl = ~((dpc_loop_in_col_lpi_1_dfm_1_1[0]) ^ (top_reg_imgPattern[0]));
  assign mux_tmp_95 = MUX_s_1_2_2(xnor_nl, dpc_loop_in_if_if_bayerPattern_xor_tmp,
      dpc_loop_in_if_if_bayerPattern_xor_3_tmp);
  assign mux_tmp_96 = MUX_s_1_2_2(dpc_loop_in_if_if_lor_lpi_1, mux_tmp_95, sfi_dpc_loop_in_if_land_lpi_1);
  assign mux_tmp_99 = MUX_s_1_2_2(dpc_loop_in_if_if_lor_lpi_1, mux_tmp_90, lfst_exitL_exitL_exit_MF_outer_1_lpi_1);
  assign mux_tmp_100 = MUX_s_1_2_2(mux_tmp_99, mux_tmp_95, sfi_dpc_loop_in_if_land_lpi_1);
  assign mux_tmp_101 = MUX_s_1_2_2((~ defectPixelDetection_rst_lpi_1), (~ dpc_loop_in_if_if_if_asn_sft_lpi_1),
      lfst_exitL_exit_MF_outer_lpi_1);
  assign mux_tmp_102 = MUX_s_1_2_2((~ dpc_loop_in_if_if_lor_lpi_1), mux_tmp_101,
      lfst_exitL_exitL_exit_MF_outer_1_lpi_1);
  assign mux_109_nl = MUX_s_1_2_2((~ sfi_dpc_loop_in_if_if_lor_lpi_1_dfm_st_1_1),
      sfi_dpc_loop_in_if_if_lor_lpi_1_dfm_st_1_1, nor_tmp_22);
  assign mux_tmp_106 = MUX_s_1_2_2(mux_109_nl, sfi_dpc_loop_in_if_if_lor_lpi_1_dfm_st_1_1,
      and_97_cse);
  assign nand_tmp_8 = dpc_loop_in_if_if_lor_lpi_1 | (~ sfi_dpc_loop_in_if_if_lor_lpi_1_dfm_1)
      | mux_tmp_106;
  assign or_tmp_89 = dpc_loop_in_if_if_lor_lpi_1 | (sfi_dpc_loop_in_if_if_lor_lpi_1_dfm_1
      & mux_tmp_106);
  assign mux_115_nl = MUX_s_1_2_2((~ sfi_dpc_loop_in_if_if_lor_lpi_1_dfm_st_1_1),
      sfi_dpc_loop_in_if_if_lor_lpi_1_dfm_st_1_1, nor_tmp_24);
  assign mux_116_nl = MUX_s_1_2_2(mux_115_nl, sfi_dpc_loop_in_if_if_lor_lpi_1_dfm_st_1_1,
      and_95_cse);
  assign mux_tmp_114 = MUX_s_1_2_2(mux_tmp_93, mux_116_nl, sfi_dpc_loop_in_if_if_lor_lpi_1_dfm_1);
  assign or_tmp_90 = dpc_loop_in_if_if_lor_lpi_1 | mux_tmp_114;
  assign not_tmp_115 = dpc_loop_in_if_if_lor_lpi_1 & (~ mux_tmp_114);
  assign mux_417_nl = MUX_s_1_2_2(dpc_loop_in_if_if_lor_lpi_1, mux_tmp_90, lfst_exitL_exitL_exit_MF_outer_1_lpi_1);
  assign mux_130_nl = MUX_s_1_2_2(mux_417_nl, dpc_loop_in_if_if_lor_lpi_1, MF_outer_equal_tmp_1_1);
  assign mux_tmp_127 = MUX_s_1_2_2(mux_130_nl, mux_tmp_95, sfi_dpc_loop_in_if_land_lpi_1);
  assign or_tmp_111 = lfst_exit_addon_loop_lpi_1_dfm_st_1_1 | dpc_loop_in_asn_sft_1_lpi_1_dfm_1
      | (~ main_stage_0_2) | dpc_loop_out_asn_sft_lpi_1_dfm_1;
  assign or_tmp_112 = ~((~(dpc_loop_out_acc_3_itm_13_1 & dpc_loop_in_acc_2_itm_13_1))
      & or_tmp_111);
  assign nor_96_cse = ~((~ dpc_loop_in_asn_sft_1_lpi_1_dfm_1) | addon_loop_or_7_tmp_2
      | (~ main_stage_0_2) | dpc_loop_out_asn_sft_lpi_1_dfm_1);
  assign or_203_nl = dpc_loop_in_asn_sft_1_lpi_1_dfm_1 | addon_loop_or_7_tmp_2 |
      (~ main_stage_0_2) | dpc_loop_out_asn_sft_lpi_1_dfm_1;
  assign mux_tmp_170 = MUX_s_1_2_2(nor_96_cse, or_203_nl, exitL_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1);
  assign or_211_nl = dpc_loop_in_asn_sft_1_lpi_1_dfm_1 | (~ main_stage_0_2) | dpc_loop_out_asn_sft_lpi_1_dfm_1;
  assign mux_tmp_173 = MUX_s_1_2_2(nor_96_cse, or_211_nl, exitL_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1);
  assign or_tmp_123 = dpc_loop_in_acc_2_itm_13_1 | (~ or_tmp_111);
  assign or_tmp_125 = xor_cse_2 | (~ dpc_reg_eb) | (~ dpc_loop_in_acc_2_itm_13_1)
      | MF_outer_MF_outer_and_2_tmp;
  assign or_tmp_126 = (~ lfst_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1) | sfi_exit_dpc_loop_in_lpi_1;
  assign or_tmp_127 = dpc_loop_in_asn_sft_1_lpi_1 | (~ dpc_reg_eb) | MF_outer_MF_outer_and_2_tmp;
  assign or_tmp_128 = dpc_loop_in_asn_sft_1_lpi_1 | (~ dpc_loop_in_asn_sft_lpi_1)
      | MF_outer_MF_outer_and_2_tmp;
  assign or_tmp_129 = (~ dpc_reg_eb) | MF_outer_MF_outer_and_2_tmp;
  assign mux_191_nl = MUX_s_1_2_2(or_tmp_128, or_tmp_127, or_tmp_126);
  assign mux_tmp_188 = MUX_s_1_2_2(or_tmp_129, mux_191_nl, lfst_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1);
  assign nand_tmp_15 = ~(rawWin_loop_rawWin_loop_xnor_tmp & (~ mux_tmp_188));
  assign or_223_nl = (~ lfst_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1)
      | (~ lfst_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1) | sfi_exit_dpc_loop_in_lpi_1
      | dpc_loop_in_asn_sft_1_lpi_1 | (~ dpc_loop_in_asn_sft_lpi_1) | MF_outer_MF_outer_and_2_tmp;
  assign mux_193_nl = MUX_s_1_2_2(or_223_nl, mux_tmp_188, rawWin_loop_rawWin_loop_xnor_tmp);
  assign mux_tmp_190 = MUX_s_1_2_2(mux_193_nl, nand_tmp_15, sfi_dpc_reg_eb_lpi_1);
  assign or_227_nl = (~ or_tmp_126) | dpc_loop_in_asn_sft_1_lpi_1 | (~ dpc_reg_eb)
      | MF_outer_MF_outer_and_2_tmp;
  assign mux_195_nl = MUX_s_1_2_2(or_tmp_129, or_227_nl, lfst_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1);
  assign nand_tmp_16 = ~(rawWin_loop_rawWin_loop_xnor_tmp & (~ mux_195_nl));
  assign or_225_cse = (~((rawWin_loop_i_lpi_1[1:0]!=2'b00))) | sfi_dpc_reg_eb_lpi_1;
  assign mux_tmp_192 = MUX_s_1_2_2(nand_tmp_16, nand_tmp_15, or_225_cse);
  assign mux_tmp_194 = MUX_s_1_2_2(nand_tmp_16, nand_tmp_15, sfi_dpc_reg_eb_lpi_1);
  assign mux_tmp_206 = MUX_s_1_2_2(or_tmp_128, or_tmp_127, sfi_exit_dpc_loop_in_lpi_1);
  assign nand_tmp_17 = ~(rawWin_loop_rawWin_loop_xnor_tmp & (~ mux_tmp_206));
  assign or_tmp_135 = xor_cse_2 | (~ sfi_exit_dpc_loop_in_lpi_1) | dpc_loop_in_asn_sft_1_lpi_1
      | (~ dpc_reg_eb);
  assign mux_tmp_207 = MUX_s_1_2_2(or_tmp_135, nand_tmp_17, sfi_dpc_reg_eb_lpi_1);
  assign mux_tmp_209 = MUX_s_1_2_2(or_tmp_135, nand_tmp_17, or_225_cse);
  assign or_231_nl = sfi_exit_dpc_loop_in_lpi_1 | dpc_loop_in_asn_sft_1_lpi_1 | (~
      dpc_loop_in_asn_sft_lpi_1) | MF_outer_MF_outer_and_2_tmp;
  assign mux_216_nl = MUX_s_1_2_2(or_231_nl, mux_tmp_206, rawWin_loop_rawWin_loop_xnor_tmp);
  assign mux_tmp_213 = MUX_s_1_2_2(mux_216_nl, nand_tmp_17, sfi_dpc_reg_eb_lpi_1);
  assign or_tmp_144 = dpc_loop_out_acc_3_itm_13_1 | lfst_exit_addon_loop_lpi_1_dfm_0_1;
  assign and_106_nl = dpc_loop_out_asn_sft_lpi_1 & lfst_exitL_exit_dpc_loop_in_lpi_1;
  assign mux_tmp_233 = MUX_s_1_2_2(or_tmp_144, and_15_cse, and_106_nl);
  assign and_tmp_16 = dpc_loop_in_acc_2_itm_13_1 & mux_tmp_233;
  assign and_71_nl = (lfst_exit_dpc_loop_in_lpi_1 | dpc_loop_out_asn_sft_lpi_1) &
      lfst_exitL_exit_dpc_loop_in_lpi_1;
  assign mux_238_nl = MUX_s_1_2_2(or_tmp_144, and_15_cse, and_71_nl);
  assign and_tmp_17 = dpc_loop_in_acc_2_itm_13_1 & mux_238_nl;
  assign nor_90_nl = ~((~ lfst_exit_dpc_loop_in_lpi_1) | dpc_loop_out_asn_sft_lpi_1
      | (~ lfst_exitL_exit_dpc_loop_in_lpi_1) | (~ lfst_exit_addon_loop_lpi_1_dfm_3_0)
      | exitL_exit_addon_loop_sva);
  assign mux_tmp_235 = MUX_s_1_2_2(nor_90_nl, mux_tmp_233, dpc_loop_in_acc_2_itm_13_1);
  assign mux_419_nl = MUX_s_1_2_2(mux_tmp_235, and_tmp_17, or_tmp_46);
  assign mux_241_nl = MUX_s_1_2_2(mux_tmp_235, mux_419_nl, lfst_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1);
  assign mux_tmp_238 = MUX_s_1_2_2(mux_241_nl, and_tmp_16, exitL_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1);
  assign mux_243_nl = MUX_s_1_2_2(mux_tmp_235, and_tmp_17, nor_tmp_15);
  assign mux_tmp_240 = MUX_s_1_2_2(mux_243_nl, and_tmp_16, exitL_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1);
  assign nor_89_nl = ~((~ dpc_loop_in_asn_sft_lpi_1) | (~ lfst_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1)
      | exitL_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1 | (~ lfst_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1)
      | sfi_exit_dpc_loop_in_lpi_1 | dpc_loop_in_asn_sft_1_lpi_1 | (~ lfst_exit_dpc_loop_in_lpi_1)
      | dpc_loop_out_asn_sft_lpi_1 | (~ lfst_exitL_exit_dpc_loop_in_lpi_1) | (~ lfst_exit_addon_loop_lpi_1_dfm_3_0)
      | exitL_exit_addon_loop_sva);
  assign nor_62_nl = ~(dpc_loop_in_asn_sft_lpi_1 | (~ lfst_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1));
  assign mux_245_nl = MUX_s_1_2_2(mux_tmp_240, mux_tmp_238, nor_62_nl);
  assign mux_tmp_242 = MUX_s_1_2_2(nor_89_nl, mux_245_nl, dpc_reg_eb);
  assign mux_247_nl = MUX_s_1_2_2(mux_tmp_240, mux_tmp_238, lfst_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1);
  assign and_tmp_18 = dpc_reg_eb & mux_247_nl;
  assign or_237_cse = (~ or_tmp_66) | sfi_dpc_reg_eb_lpi_1;
  assign or_tmp_149 = addon_loop_addon_loop_nor_50_tmp | (~ lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_1)
      | sfi_dpc_reg_eb_lpi_1;
  assign mux_tmp_245 = MUX_s_1_2_2(and_tmp_18, mux_tmp_242, or_tmp_149);
  assign or_tmp_150 = (~ lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_1) | sfi_dpc_reg_eb_lpi_1;
  assign mux_tmp_247 = MUX_s_1_2_2(and_tmp_18, mux_tmp_242, or_tmp_150);
  assign and_tmp_19 = dpc_reg_eb & dpc_loop_in_acc_2_itm_13_1 & mux_tmp_233;
  assign nor_87_nl = ~((~ dpc_loop_in_asn_sft_lpi_1) | sfi_exit_dpc_loop_in_lpi_1
      | dpc_loop_in_asn_sft_1_lpi_1 | (~ lfst_exit_dpc_loop_in_lpi_1) | dpc_loop_out_asn_sft_lpi_1
      | (~ lfst_exitL_exit_dpc_loop_in_lpi_1) | (~ lfst_exit_addon_loop_lpi_1_dfm_3_0)
      | exitL_exit_addon_loop_sva);
  assign or_247_nl = (~(dpc_loop_in_asn_sft_lpi_1 | sfi_exit_dpc_loop_in_lpi_1))
      | dpc_loop_in_asn_sft_1_lpi_1;
  assign mux_258_nl = MUX_s_1_2_2(mux_tmp_235, and_tmp_17, or_247_nl);
  assign mux_tmp_255 = MUX_s_1_2_2(nor_87_nl, mux_258_nl, dpc_reg_eb);
  assign mux_416_nl = MUX_s_1_2_2(mux_tmp_235, and_tmp_17, or_tmp_46);
  assign and_tmp_20 = dpc_reg_eb & mux_416_nl;
  assign mux_tmp_256 = MUX_s_1_2_2(and_tmp_20, mux_tmp_255, or_tmp_149);
  assign mux_tmp_261 = MUX_s_1_2_2(and_tmp_20, mux_tmp_255, or_237_cse);
  assign mux_267_nl = MUX_s_1_2_2(and_tmp_19, mux_tmp_261, MF_outer_MF_outer_or_9_tmp);
  assign mux_266_nl = MUX_s_1_2_2(mux_tmp_256, mux_tmp_261, MF_outer_MF_outer_or_9_tmp);
  assign mux_268_nl = MUX_s_1_2_2(mux_267_nl, mux_266_nl, MF_outer_MF_outer_or_8_tmp);
  assign mux_269_nl = MUX_s_1_2_2(and_tmp_19, mux_268_nl, dpc_loop_in_asn_sft_lpi_1_dfm_1);
  assign mux_262_nl = MUX_s_1_2_2(and_tmp_20, mux_tmp_255, or_tmp_150);
  assign mux_264_nl = MUX_s_1_2_2(mux_262_nl, mux_tmp_256, dpc_loop_in_asn_sft_lpi_1_dfm_1);
  assign mux_270_nl = MUX_s_1_2_2(mux_269_nl, mux_264_nl, lfst_exit_addon_loop_lpi_1_dfm_st_1_1);
  assign mux_271_nl = MUX_s_1_2_2(mux_270_nl, and_tmp_19, dpc_loop_in_asn_sft_1_lpi_1_dfm_1);
  assign mux_248_nl = MUX_s_1_2_2(and_tmp_18, mux_tmp_242, or_237_cse);
  assign mux_254_nl = MUX_s_1_2_2(mux_tmp_245, mux_248_nl, MF_outer_MF_outer_or_9_tmp);
  assign mux_255_nl = MUX_s_1_2_2(mux_tmp_247, mux_254_nl, dpc_loop_in_asn_sft_lpi_1_dfm_1);
  assign mux_253_nl = MUX_s_1_2_2(mux_tmp_247, mux_tmp_245, dpc_loop_in_asn_sft_lpi_1_dfm_1);
  assign mux_256_nl = MUX_s_1_2_2(mux_255_nl, mux_253_nl, lfst_exit_addon_loop_lpi_1_dfm_st_1_1);
  assign mux_257_nl = MUX_s_1_2_2(mux_256_nl, mux_tmp_247, dpc_loop_in_asn_sft_1_lpi_1_dfm_1);
  assign mux_272_nl = MUX_s_1_2_2(mux_271_nl, mux_257_nl, addon_loop_or_7_tmp_2);
  assign mux_252_nl = MUX_s_1_2_2(mux_tmp_247, mux_tmp_245, nor_tmp_20);
  assign mux_273_nl = MUX_s_1_2_2(mux_272_nl, mux_252_nl, dpc_loop_out_asn_sft_lpi_1_dfm_1);
  assign mux_274_nl = MUX_s_1_2_2(mux_tmp_247, mux_273_nl, main_stage_0_2);
  assign mux_275_nl = MUX_s_1_2_2(mux_274_nl, nor_tmp_13, exitL_exitL_exit_dpc_loop_in_lpi_1);
  assign and_69_nl = dpc_reg_eb & dpc_loop_in_acc_2_itm_13_1 & dpc_loop_out_acc_3_itm_13_1
      & exitL_exit_addon_loop_sva;
  assign mux_276_itm = MUX_s_1_2_2(mux_275_nl, and_69_nl, lfst_exit_addon_loop_lpi_1_dfm_3_1);
  assign or_tmp_159 = ~(dpc_loop_out_acc_3_itm_13_1 & dpc_reg_eb & dpc_loop_in_acc_2_itm_13_1
      & (~ rawWin_loop_acc_5_decb_4_lpi_1) & rawWin_loop_and_stg_3_3_3_lpi_1);
  assign or_tmp_161 = (~ dpc_reg_eb) | (~ dpc_loop_in_acc_2_itm_13_1) | dpc_loop_out_asn_sft_lpi_1
      | rawWin_loop_acc_5_decb_4_lpi_1 | (~ rawWin_loop_and_stg_3_3_3_lpi_1);
  assign or_tmp_163 = (~ dpc_reg_eb) | dpc_loop_out_asn_sft_lpi_1 | rawWin_loop_acc_5_decb_4_lpi_1
      | (~ rawWin_loop_and_stg_3_3_3_lpi_1);
  assign or_259_nl = (~ dpc_loop_in_asn_sft_lpi_1) | dpc_loop_out_asn_sft_lpi_1 |
      rawWin_loop_acc_5_decb_4_lpi_1 | (~ rawWin_loop_and_stg_3_3_3_lpi_1);
  assign mux_277_nl = MUX_s_1_2_2(or_259_nl, or_tmp_163, sfi_exit_dpc_loop_in_lpi_1);
  assign or_tmp_166 = dpc_loop_in_asn_sft_1_lpi_1 | mux_277_nl;
  assign or_tmp_170 = dpc_loop_in_asn_sft_1_lpi_1 | (~ sfi_exit_dpc_loop_in_lpi_1)
      | (~ dpc_reg_eb) | dpc_loop_out_asn_sft_lpi_1 | rawWin_loop_acc_5_decb_4_lpi_1
      | (~ rawWin_loop_and_stg_3_3_3_lpi_1);
  assign mux_tmp_276 = MUX_s_1_2_2(or_tmp_170, or_tmp_166, sfi_dpc_reg_eb_lpi_1);
  assign or_261_nl = (~ dpc_loop_in_asn_sft_lpi_1) | dpc_loop_out_asn_sft_lpi_1;
  assign mux_278_nl = MUX_s_1_2_2(or_261_nl, or_tmp_163, sfi_exit_dpc_loop_in_lpi_1);
  assign or_262_nl = dpc_loop_in_asn_sft_1_lpi_1 | mux_278_nl;
  assign mux_279_nl = MUX_s_1_2_2(or_262_nl, or_tmp_166, sfi_dpc_reg_eb_lpi_1);
  assign mux_tmp_277 = MUX_s_1_2_2(mux_tmp_276, mux_279_nl, rawWin_loop_and_197_psp);
  assign mux_283_nl = MUX_s_1_2_2(or_tmp_170, or_tmp_166, or_tmp_150);
  assign mux_282_nl = MUX_s_1_2_2(or_tmp_166, mux_tmp_277, lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_1);
  assign mux_tmp_280 = MUX_s_1_2_2(mux_283_nl, mux_282_nl, lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_0);
  assign mux_303_nl = MUX_s_1_2_2(mux_tmp_280, mux_tmp_276, addon_loop_addon_loop_nor_50_tmp);
  assign and_67_nl = MF_outer_MF_outer_or_9_tmp & dpc_loop_in_asn_sft_lpi_1_dfm_1;
  assign mux_304_nl = MUX_s_1_2_2(or_tmp_161, mux_303_nl, and_67_nl);
  assign mux_300_nl = MUX_s_1_2_2(mux_tmp_280, or_tmp_166, addon_loop_addon_loop_nor_50_tmp);
  assign mux_301_nl = MUX_s_1_2_2(or_tmp_161, mux_300_nl, dpc_loop_in_asn_sft_lpi_1_dfm_1);
  assign mux_298_nl = MUX_s_1_2_2(mux_tmp_280, mux_tmp_277, addon_loop_addon_loop_nor_50_tmp);
  assign mux_299_nl = MUX_s_1_2_2(or_tmp_161, mux_298_nl, dpc_loop_in_asn_sft_lpi_1_dfm_1);
  assign mux_302_nl = MUX_s_1_2_2(mux_301_nl, mux_299_nl, MF_outer_MF_outer_or_9_tmp);
  assign mux_305_nl = MUX_s_1_2_2(mux_304_nl, mux_302_nl, MF_outer_MF_outer_or_8_tmp);
  assign mux_306_nl = MUX_s_1_2_2(mux_305_nl, mux_374_itm, lfst_exit_addon_loop_lpi_1_dfm_st_1_1);
  assign mux_tmp_303 = MUX_s_1_2_2(mux_306_nl, or_tmp_161, dpc_loop_in_asn_sft_1_lpi_1_dfm_1);
  assign mux_312_nl = MUX_s_1_2_2(or_tmp_163, or_tmp_161, exitL_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1);
  assign mux_tmp_309 = MUX_s_1_2_2(mux_tmp_303, mux_312_nl, or_18_cse);
  assign nor_tmp_72 = dpc_loop_out_acc_3_itm_13_1 & (~ xor_cse_2) & dpc_reg_eb &
      dpc_loop_in_acc_2_itm_13_1;
  assign nor_tmp_73 = ~(xor_cse_2 | (~ dpc_reg_eb) | (~ dpc_loop_in_acc_2_itm_13_1));
  assign or_tmp_180 = dpc_loop_in_asn_sft_1_lpi_1 | (~ dpc_reg_eb);
  assign or_tmp_181 = dpc_loop_in_asn_sft_1_lpi_1 | (~ dpc_loop_in_asn_sft_lpi_1);
  assign mux_323_nl = MUX_s_1_2_2(or_tmp_181, or_tmp_180, or_tmp_126);
  assign mux_tmp_320 = MUX_s_1_2_2((~ dpc_reg_eb), mux_323_nl, lfst_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1);
  assign nand_tmp_18 = ~(rawWin_loop_rawWin_loop_xnor_tmp & (~ mux_tmp_320));
  assign or_279_nl = (~ lfst_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1)
      | (~ lfst_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1) | sfi_exit_dpc_loop_in_lpi_1
      | dpc_loop_in_asn_sft_1_lpi_1 | (~ dpc_loop_in_asn_sft_lpi_1);
  assign mux_325_nl = MUX_s_1_2_2(or_279_nl, mux_tmp_320, rawWin_loop_rawWin_loop_xnor_tmp);
  assign mux_tmp_322 = MUX_s_1_2_2(mux_325_nl, nand_tmp_18, sfi_dpc_reg_eb_lpi_1);
  assign nor_85_nl = ~((~ or_tmp_126) | dpc_loop_in_asn_sft_1_lpi_1 | (~ dpc_reg_eb));
  assign mux_327_nl = MUX_s_1_2_2(dpc_reg_eb, nor_85_nl, lfst_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1);
  assign nand_tmp_19 = ~(rawWin_loop_rawWin_loop_xnor_tmp & mux_327_nl);
  assign mux_tmp_324 = MUX_s_1_2_2(nand_tmp_19, nand_tmp_18, or_225_cse);
  assign mux_tmp_326 = MUX_s_1_2_2(nand_tmp_19, nand_tmp_18, sfi_dpc_reg_eb_lpi_1);
  assign mux_tmp_338 = MUX_s_1_2_2(or_tmp_181, or_tmp_180, sfi_exit_dpc_loop_in_lpi_1);
  assign nand_tmp_20 = ~(rawWin_loop_rawWin_loop_xnor_tmp & (~ mux_tmp_338));
  assign mux_tmp_339 = MUX_s_1_2_2(or_tmp_135, nand_tmp_20, sfi_dpc_reg_eb_lpi_1);
  assign mux_tmp_341 = MUX_s_1_2_2(or_tmp_135, nand_tmp_20, or_225_cse);
  assign dst_rsci_idat_mx0c1 = lfst_exit_addon_loop_lpi_1_dfm_st_1_1 & main_stage_0_2
      & (~ lfst_exit_addon_loop_lpi_1_dfm_st_1_0);
  assign xor_cse_2 = (rawWin_loop_i_lpi_1_dfm_mx0w1[2]) ^ (rawWin_loop_i_lpi_1_dfm_mx0w1[0]);
  assign lineBuffer_rsci_radr_d = {line_write_acc_itm_1 , (dpc_loop_in_col_lpi_1_dfm_1[11:0])};
  assign lineBuffer_rsci_wadr_d = {line_write_acc_itm_1 , (dpc_loop_in_col_lpi_1_dfm_1[11:0])};
  assign lineBuffer_rsci_d_d = MUX_v_12_25_2x0x1x2x3x4x5x6x7(rawWindow_1_3_1_lpi_1,
      rawWindow_1_4_1_lpi_1_mx0, rawWindow_2_0_1_lpi_1, rawWindow_2_1_1_lpi_1, rawWindow_2_2_1_lpi_1,
      rawWindow_2_3_1_lpi_1, rawWindow_2_4_1_lpi_1_mx0, rawWindow_3_0_1_lpi_1, rawWindow_3_1_1_lpi_1,
      rawWindow_3_2_1_lpi_1, rawWindow_3_3_1_lpi_1, rawWindow_3_4_1_lpi_1_mx0, rawWindow_4_0_1_lpi_1,
      rawWindow_4_1_1_lpi_1, rawWindow_4_2_1_lpi_1, rawWindow_4_3_1_lpi_1, srcData_lpi_1_dfm_mx0,
      {line_write_acc_4_itm_1 , operator_3_false_slc_operator_3_false_acc_psp_4_0_1_0_itm_1});
  assign lineBuffer_rsci_we_d_pff = lineBuffer_rsci_we_d_iff;
  assign lineBuffer_rsci_re_d_pff = lineBuffer_rsci_re_d_iff;
  assign mux_tmp_378 = MUX_s_1_2_2((~ dpc_loop_in_asn_sft_lpi_1_dfm_1), dpc_loop_in_asn_sft_lpi_1_dfm_1,
      lfst_exit_addon_loop_lpi_1_dfm_st_1_1);
  assign or_tmp_220 = (~ lfst_exit_addon_loop_lpi_1_dfm_st_1_1) | dpc_loop_in_asn_sft_lpi_1_dfm_1;
  assign or_326_nl = (~ MF_outer_equal_tmp_1_1) | MF_outer_or_tmp_1;
  assign mux_tmp_379 = MUX_s_1_2_2(or_tmp_220, mux_tmp_378, or_326_nl);
  assign or_328_nl = (lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1 & dpc_loop_in_if_asn_sft_lpi_1)
      | (~ MF_outer_equal_tmp_1_1) | MF_outer_or_tmp_1;
  assign mux_tmp_380 = MUX_s_1_2_2(or_tmp_220, mux_tmp_378, or_328_nl);
  assign or_334_nl = (defectPixelDetection_1_rst_lpi_1 & lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1
      & dpc_loop_in_if_asn_sft_lpi_1) | (~ MF_outer_equal_tmp_1_1) | MF_outer_or_tmp_1;
  assign mux_399_nl = MUX_s_1_2_2(or_tmp_220, mux_tmp_378, or_334_nl);
  assign or_333_nl = (dpc_loop_in_if_if_else_asn_sft_lpi_1 & lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1
      & dpc_loop_in_if_asn_sft_lpi_1) | (~ MF_outer_equal_tmp_1_1) | MF_outer_or_tmp_1;
  assign mux_398_nl = MUX_s_1_2_2(or_tmp_220, mux_tmp_378, or_333_nl);
  assign mux_400_nl = MUX_s_1_2_2(mux_399_nl, mux_398_nl, lfst_exitL_exitL_exitL_exit_MF_outer_lpi_1);
  assign or_332_nl = (defectPixelDetection_1_aif_6_acc_itm_13_1 & defectPixelDetection_1_aif_1_acc_itm_13
      & defectPixelDetection_1_aif_5_acc_1_itm_13 & defectPixelDetection_1_aif_4_acc_1_itm_13
      & defectPixelDetection_1_aif_3_acc_1_itm_13 & defectPixelDetection_1_aif_2_acc_1_itm_13
      & defectPixelDetection_1_aif_acc_1_itm_13_1 & defectPixelDetection_1_acc_15_itm_13
      & lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1 & dpc_loop_in_if_asn_sft_lpi_1)
      | (~ MF_outer_equal_tmp_1_1) | MF_outer_or_tmp_1;
  assign mux_396_nl = MUX_s_1_2_2(or_tmp_220, mux_tmp_378, or_332_nl);
  assign mux_397_nl = MUX_s_1_2_2(mux_396_nl, mux_tmp_380, and_95_cse);
  assign mux_401_nl = MUX_s_1_2_2(mux_400_nl, mux_397_nl, sfi_dpc_loop_in_if_if_lor_lpi_1_dfm_1);
  assign mux_402_nl = MUX_s_1_2_2(mux_401_nl, mux_tmp_379, and_87_cse);
  assign or_331_nl = (defectPixelDetection_rst_lpi_1 & lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1
      & dpc_loop_in_if_asn_sft_lpi_1) | (~ MF_outer_equal_tmp_1_1) | MF_outer_or_tmp_1;
  assign mux_392_nl = MUX_s_1_2_2(or_tmp_220, mux_tmp_378, or_331_nl);
  assign or_330_nl = (dpc_loop_in_if_if_if_asn_sft_lpi_1 & lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1
      & dpc_loop_in_if_asn_sft_lpi_1) | (~ MF_outer_equal_tmp_1_1) | MF_outer_or_tmp_1;
  assign mux_391_nl = MUX_s_1_2_2(or_tmp_220, mux_tmp_378, or_330_nl);
  assign mux_393_nl = MUX_s_1_2_2(mux_392_nl, mux_391_nl, lfst_exitL_exit_MF_outer_lpi_1);
  assign or_329_nl = (defectPixelDetection_aif_6_acc_itm_13_1 & defectPixelDetection_aif_1_acc_itm_13
      & defectPixelDetection_1_aif_5_acc_1_itm_13 & defectPixelDetection_1_aif_4_acc_1_itm_13
      & defectPixelDetection_1_aif_3_acc_1_itm_13 & defectPixelDetection_1_aif_2_acc_1_itm_13
      & defectPixelDetection_1_aif_acc_1_itm_13_1 & defectPixelDetection_1_acc_15_itm_13
      & lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1 & dpc_loop_in_if_asn_sft_lpi_1)
      | (~ MF_outer_equal_tmp_1_1) | MF_outer_or_tmp_1;
  assign mux_389_nl = MUX_s_1_2_2(or_tmp_220, mux_tmp_378, or_329_nl);
  assign mux_390_nl = MUX_s_1_2_2(mux_389_nl, mux_tmp_380, and_97_cse);
  assign mux_394_nl = MUX_s_1_2_2(mux_393_nl, mux_390_nl, sfi_dpc_loop_in_if_if_lor_lpi_1_dfm_1);
  assign mux_395_nl = MUX_s_1_2_2(mux_394_nl, mux_tmp_379, and_88_cse);
  assign mux_403_nl = MUX_s_1_2_2(mux_402_nl, mux_395_nl, dpc_loop_in_if_if_asn_sft_lpi_1_dfm_1);
  assign or_335_nl = dpc_loop_in_asn_sft_1_lpi_1_dfm_1 | mux_403_nl;
  assign or_306_nl = (~ main_stage_0_2) | dpc_loop_out_asn_sft_lpi_1_dfm_1 | addon_loop_equal_tmp_1
      | addon_loop_equal_tmp_1_1;
  assign mux_404_nl = MUX_s_1_2_2(or_335_nl, exitL_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1,
      or_306_nl);
  assign and_dcpl_51 = (~ mux_404_nl) & lfst_exitL_exit_dpc_loop_in_lpi_1 & lfst_exit_dpc_loop_in_lpi_1
      & (~ exitL_exitL_exit_dpc_loop_in_lpi_1) & lfst_exit_addon_loop_lpi_1_dfm_3_0
      & (~ exitL_exit_addon_loop_sva);
  assign and_dcpl_53 = (~ dpc_loop_in_if_if_asn_sft_lpi_1_dfm_1) & MF_outer_equal_tmp_1_1
      & dpc_loop_in_asn_sft_lpi_1_dfm_1;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawWindow_3_4_1_lpi_1 <= 12'b000000000000;
      rawWindow_2_4_1_lpi_1 <= 12'b000000000000;
      rawWindow_1_4_1_lpi_1 <= 12'b000000000000;
      rawWindow_0_4_1_lpi_1 <= 12'b000000000000;
      addon_loop_and_90_itm_2 <= 1'b0;
      addon_loop_and_89_itm_2 <= 1'b0;
      addon_loop_and_88_itm_2 <= 1'b0;
      addon_loop_and_87_itm_2 <= 1'b0;
      reg_lineBuffer_rsci_oswt_cse <= 1'b0;
      lfst_exitL_exitL_exit_MF_outer_1_lpi_1 <= 1'b0;
      dpc_loop_in_col_lpi_1 <= 13'b0000000000000;
      exitL_exit_addon_loop_sva <= 1'b1;
      dpc_loop_out_row_lpi_1 <= 13'b0000000000000;
      dpc_loop_in_if_asn_sft_lpi_1 <= 1'b0;
      reg_dst_rsci_oswt_cse <= 1'b0;
      reg_src_rsci_oswt_cse <= 1'b0;
      lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1 <= 1'b0;
      lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_1 <= 1'b0;
      lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_0 <= 1'b0;
      lfst_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1 <= 1'b0;
      exitL_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1 <= 1'b0;
      lfst_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1 <= 1'b0;
      dpc_loop_in_col_lpi_1_dfm_1 <= 13'b0000000000000;
      dpc_loop_in_asn_sft_1_lpi_1_dfm_1 <= 1'b0;
      dpc_loop_out_asn_sft_lpi_1_dfm_1 <= 1'b0;
      dpc_loop_in_asn_sft_lpi_1_dfm_1 <= 1'b0;
      operator_13_false_slc_operator_13_false_acc_11_svs_1 <= 1'b0;
      operator_3_false_2_slc_line_write_i_2_2_itm_1 <= 1'b0;
      MF_outer_equal_tmp_1 <= 1'b0;
      addon_loop_equal_tmp_1 <= 1'b0;
      addon_loop_equal_tmp_1_1 <= 1'b0;
      dpc_loop_out_row_lpi_1_dfm_1 <= 13'b0000000000000;
      MF_outer_equal_tmp_1_1 <= 1'b0;
      rawWindow_1_3_1_lpi_1 <= 12'b000000000000;
      rawWindow_2_1_1_lpi_1 <= 12'b000000000000;
      rawWindow_2_2_1_lpi_1 <= 12'b000000000000;
      rawWindow_2_3_1_lpi_1 <= 12'b000000000000;
      rawWindow_3_1_1_lpi_1 <= 12'b000000000000;
      rawWindow_3_2_1_lpi_1 <= 12'b000000000000;
      rawWindow_3_3_1_lpi_1 <= 12'b000000000000;
      rawWindow_4_0_1_lpi_1 <= 12'b000000000000;
      rawWindow_4_1_1_lpi_1 <= 12'b000000000000;
      rawWindow_4_2_1_lpi_1 <= 12'b000000000000;
      rawWindow_4_3_1_lpi_1 <= 12'b000000000000;
      line_write_acc_4_itm_1 <= 3'b000;
      operator_3_false_slc_operator_3_false_acc_psp_4_0_1_0_itm_1 <= 2'b00;
      line_write_acc_itm_1 <= 2'b00;
      rawWindow_0_2_1_lpi_1 <= 12'b000000000000;
      arr_sort_0_lpi_1_dfm_1 <= 12'b000000000000;
      sfi_dpc_loop_in_if_if_lor_lpi_1_dfm_1 <= 1'b0;
      defectPixelDetection_1_diff_7_sva_1 <= 13'b0000000000000;
      defectPixelDetection_1_diff_6_sva_1 <= 13'b0000000000000;
      defectPixelDetection_1_diff_5_sva_1 <= 13'b0000000000000;
      defectPixelDetection_1_diff_3_sva_1 <= 13'b0000000000000;
      defectPixelDetection_1_diff_2_sva_1 <= 13'b0000000000000;
      defectPixelDetection_1_diff_1_sva_1 <= 13'b0000000000000;
      defectPixelDetection_1_diff_0_sva_1 <= 13'b0000000000000;
      defectPixelDetection_1_th_2_sva_1 <= 12'b000000000000;
      rawWindow_1_1_1_lpi_1 <= 12'b000000000000;
      sfi_dpc_loop_in_if_if_lor_lpi_1_dfm_st_1_1 <= 1'b0;
      dpc_loop_in_if_if_asn_sft_lpi_1_dfm_1 <= 1'b0;
      lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_2_1_0 <= 1'b0;
      rawWin_loop_and_svs_1_1 <= 1'b0;
      lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_st_1_0 <= 1'b0;
      sfi_exit_dpc_loop_in_lpi_1_dfm_1_1 <= 1'b0;
      lfst_exit_addon_loop_lpi_1_dfm_st_1_1 <= 1'b0;
      lfst_exit_addon_loop_lpi_1_dfm_st_1_0 <= 1'b0;
      lfst_exit_addon_loop_lpi_1_dfm_3_1 <= 1'b0;
      lfst_exit_addon_loop_lpi_1_dfm_3_0 <= 1'b0;
      main_stage_0_2 <= 1'b0;
      main_stage_0_3 <= 1'b0;
      addon_loop_and_87_itm_1 <= 1'b0;
      addon_loop_and_89_itm_1 <= 1'b0;
      rawWindow_0_0_lpi_1 <= 12'b000000000000;
      addon_loop_and_90_itm_1 <= 1'b0;
      addon_loop_and_88_itm_1 <= 1'b0;
      addon_loop_and_67_itm_1 <= 1'b0;
      rawWin_loop_rawWin_loop_slc_rawWindow_60_47_36_1_ctmp_sva_1 <= 12'b000000000000;
      rawWin_loop_rawWin_loop_slc_rawWindow_60_35_24_1_ctmp_sva_1 <= 12'b000000000000;
      rawWin_loop_rawWin_loop_slc_rawWindow_60_23_12_1_ctmp_sva_1 <= 12'b000000000000;
      addon_loop_and_62_itm_1 <= 1'b0;
      addon_loop_and_59_itm_1 <= 1'b0;
      addon_loop_and_55_itm_1 <= 1'b0;
      addon_loop_and_53_itm_1 <= 1'b0;
      rawWin_loop_and_m1c <= 1'b0;
      rawWin_loop_and_282_cse <= 1'b0;
      rawWin_loop_and_283_cse <= 1'b0;
      rawWin_loop_rawWin_loop_slc_rawWindow_60_59_48_1_ctmp_lpi_1 <= 12'b000000000000;
      rawWin_loop_and_189_psp <= 1'b0;
      addon_loop_and_68_itm_1 <= 1'b0;
      addon_loop_and_95_itm_1 <= 1'b0;
    end
    else if ( core_wen ) begin
      rawWindow_3_4_1_lpi_1 <= rawWindow_3_4_1_lpi_1_mx0;
      rawWindow_2_4_1_lpi_1 <= rawWindow_2_4_1_lpi_1_mx0;
      rawWindow_1_4_1_lpi_1 <= rawWindow_1_4_1_lpi_1_mx0;
      rawWindow_0_4_1_lpi_1 <= rawWindow_0_4_1_lpi_1_mx0;
      addon_loop_and_90_itm_2 <= addon_loop_and_90_itm_1;
      addon_loop_and_89_itm_2 <= addon_loop_and_89_itm_1;
      addon_loop_and_88_itm_2 <= addon_loop_and_88_itm_1;
      addon_loop_and_87_itm_2 <= addon_loop_and_87_itm_1;
      reg_lineBuffer_rsci_oswt_cse <= rawWindow_read_nor_1_rmff;
      lfst_exitL_exitL_exit_MF_outer_1_lpi_1 <= lfst_exitL_exitL_exit_MF_outer_1_lpi_1_mx0;
      dpc_loop_in_col_lpi_1 <= dpc_loop_in_col_lpi_1_mx0;
      exitL_exit_addon_loop_sva <= ~(lfst_exit_addon_loop_lpi_1_dfm_3_1_1 | lfst_exit_addon_loop_lpi_1_dfm_3_0_1);
      dpc_loop_out_row_lpi_1 <= MUX_v_13_2_2(z_out, dpc_loop_out_row_lpi_1_dfm_1_1,
          mux_46_nl);
      dpc_loop_in_if_asn_sft_lpi_1 <= dpc_loop_in_if_asn_sft_lpi_1_mx0;
      reg_dst_rsci_oswt_cse <= mux_49_nl & main_stage_0_2;
      reg_src_rsci_oswt_cse <= MUX_s_1_2_2(nor_109_nl, nor_tmp_4, exitL_exit_addon_loop_sva);
      lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1 <= lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1_mx0;
      lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_1 <= lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_1_mx0;
      lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_0 <= lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_0_mx0;
      lfst_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1 <= lfst_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_mx0;
      exitL_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1 <= exitL_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_mx0;
      lfst_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1 <= lfst_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_mx0;
      dpc_loop_in_col_lpi_1_dfm_1 <= dpc_loop_in_col_lpi_1_dfm_1_1;
      dpc_loop_in_asn_sft_1_lpi_1_dfm_1 <= dpc_loop_in_asn_sft_1_lpi_1_dfm_mx0;
      dpc_loop_out_asn_sft_lpi_1_dfm_1 <= dpc_loop_out_asn_sft_lpi_1_dfm_1_mx0;
      dpc_loop_in_asn_sft_lpi_1_dfm_1 <= dpc_loop_in_asn_sft_lpi_1_dfm_mx0;
      operator_13_false_slc_operator_13_false_acc_11_svs_1 <= readslicef_12_1_11(operator_13_false_acc_nl);
      operator_3_false_2_slc_line_write_i_2_2_itm_1 <= line_write_i_sva_2[2];
      MF_outer_equal_tmp_1 <= MF_outer_equal_tmp_2;
      addon_loop_equal_tmp_1 <= addon_loop_equal_tmp_2;
      addon_loop_equal_tmp_1_1 <= addon_loop_equal_tmp_3;
      dpc_loop_out_row_lpi_1_dfm_1 <= dpc_loop_out_row_lpi_1_dfm_1_1;
      MF_outer_equal_tmp_1_1 <= MF_outer_MF_outer_and_2_tmp;
      rawWindow_1_3_1_lpi_1 <= rawWindow_1_3_1_lpi_1_mx0;
      rawWindow_2_1_1_lpi_1 <= rawWindow_2_1_1_lpi_1_mx0;
      rawWindow_2_2_1_lpi_1 <= rawWindow_2_2_1_lpi_1_mx0;
      rawWindow_2_3_1_lpi_1 <= rawWindow_2_3_1_lpi_1_mx0;
      rawWindow_3_1_1_lpi_1 <= rawWindow_3_1_1_lpi_1_mx0;
      rawWindow_3_2_1_lpi_1 <= rawWindow_3_2_1_lpi_1_mx0;
      rawWindow_3_3_1_lpi_1 <= rawWindow_3_3_1_lpi_1_mx0;
      rawWindow_4_0_1_lpi_1 <= rawWindow_4_0_1_lpi_1_mx0;
      rawWindow_4_1_1_lpi_1 <= rawWindow_4_1_1_lpi_1_mx0;
      rawWindow_4_2_1_lpi_1 <= rawWindow_4_2_1_lpi_1_mx1;
      rawWindow_4_3_1_lpi_1 <= rawWindow_4_3_1_lpi_1_mx0;
      line_write_acc_4_itm_1 <= MUX_v_3_2_2(line_write_acc_4_nl, rawWin_loop_i_lpi_1_dfm_mx0w1,
          or_dcpl_39);
      operator_3_false_slc_operator_3_false_acc_psp_4_0_1_0_itm_1 <= z_out[1:0];
      line_write_acc_itm_1 <= MUX_v_2_2_2(line_write_acc_nl, rawWindow_read_acc_5_nl,
          or_dcpl_39);
      rawWindow_0_2_1_lpi_1 <= rawWindow_0_2_1_lpi_1_mx1;
      arr_sort_0_lpi_1_dfm_1 <= MUX_v_12_2_2(12'b000000000000, addon_loop_addon_loop_addon_loop_addon_loop_mux_14_nl,
          addon_loop_not_127_nl);
      sfi_dpc_loop_in_if_if_lor_lpi_1_dfm_1 <= ~ lfst_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1;
      defectPixelDetection_1_diff_7_sva_1 <= defectPixelDetection_diff_6_sva_1;
      defectPixelDetection_1_diff_6_sva_1 <= MUX_v_13_2_2(z_out_1, defectPixelDetection_diff_6_sva_1,
          mux_tmp_96);
      defectPixelDetection_1_diff_5_sva_1 <= readslicef_14_13_1(acc_2_nl);
      defectPixelDetection_1_diff_3_sva_1 <= nl_defectPixelDetection_1_diff_3_sva_1[12:0];
      defectPixelDetection_1_diff_2_sva_1 <= MUX_v_13_2_2(defectPixelDetection_1_acc_10_nl,
          ({1'b0 , rawWindow_0_0_lpi_1_dfm_1}), mux_143_nl);
      defectPixelDetection_1_diff_1_sva_1 <= MUX_v_13_2_2(defectPixelDetection_1_acc_nl,
          defectPixelDetection_diff_1_sva_mx0w1, mux_tmp_96);
      defectPixelDetection_1_diff_0_sva_1 <= MUX_v_13_2_2(defectPixelDetection_diff_1_sva_mx0w1,
          z_out_1, mux_tmp_96);
      defectPixelDetection_1_th_2_sva_1 <= nl_defectPixelDetection_1_th_2_sva_1[11:0];
      rawWindow_1_1_1_lpi_1 <= rawWindow_1_1_1_lpi_1_mx0;
      sfi_dpc_loop_in_if_if_lor_lpi_1_dfm_st_1_1 <= MUX_s_1_2_2((~ lfst_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1),
          exit_rawWindow_read_lpi_1_dfm_2, or_dcpl_39);
      dpc_loop_in_if_if_asn_sft_lpi_1_dfm_1 <= MUX_s_1_2_2(dpc_loop_in_if_if_asn_sft_lpi_1,
          dpc_loop_in_if_if_lor_lpi_1_dfm_1_mx0, mux_154_nl);
      lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_2_1_0 <= MUX_s_1_2_2((line_write_i_sva_2[2]),
          lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_0_1, MF_outer_MF_outer_and_2_tmp);
      rawWin_loop_and_svs_1_1 <= rawWin_loop_and_svs_1;
      lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_st_1_0 <= lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_0_1;
      sfi_exit_dpc_loop_in_lpi_1_dfm_1_1 <= sfi_exit_dpc_loop_in_lpi_1_dfm_1;
      lfst_exit_addon_loop_lpi_1_dfm_st_1_1 <= lfst_exit_addon_loop_lpi_1_dfm_1_1;
      lfst_exit_addon_loop_lpi_1_dfm_st_1_0 <= lfst_exit_addon_loop_lpi_1_dfm_0_1;
      lfst_exit_addon_loop_lpi_1_dfm_3_1 <= lfst_exit_addon_loop_lpi_1_dfm_3_1_1;
      lfst_exit_addon_loop_lpi_1_dfm_3_0 <= lfst_exit_addon_loop_lpi_1_dfm_3_0_1;
      main_stage_0_2 <= 1'b1;
      main_stage_0_3 <= main_stage_0_2;
      addon_loop_and_87_itm_1 <= (~((rawWindow_read_i_lpi_1_dfm_1_0_1!=2'b00) | exit_rawWindow_read_lpi_1_dfm_2))
          & MF_outer_MF_outer_nor_2_cse_1 & dpc_loop_in_asn_sft_lpi_1_dfm_mx0 & dpc_loop_out_dpc_loop_out_nor_15_cse_1
          & addon_loop_or_tmp_1;
      addon_loop_and_89_itm_1 <= (rawWindow_read_i_lpi_1_dfm_1_0_1==2'b10) & (~ exit_rawWindow_read_lpi_1_dfm_2)
          & MF_outer_MF_outer_nor_2_cse_1 & dpc_loop_in_asn_sft_lpi_1_dfm_mx0 & dpc_loop_out_dpc_loop_out_nor_15_cse_1
          & addon_loop_or_tmp_1;
      rawWindow_0_0_lpi_1 <= MUX_v_12_2_2(rawWin_loop_rawWin_loop_slc_rawWindow_60_23_12_1_ctmp_sva_1_1,
          rawWindow_0_0_lpi_1_dfm_1, mux_236_nl);
      addon_loop_and_90_itm_1 <= (rawWindow_read_i_lpi_1_dfm_1_0_1==2'b11) & (~ exit_rawWindow_read_lpi_1_dfm_2)
          & MF_outer_MF_outer_nor_2_cse_1 & dpc_loop_in_asn_sft_lpi_1_dfm_mx0 & dpc_loop_out_dpc_loop_out_nor_15_cse_1
          & addon_loop_or_tmp_1;
      addon_loop_and_88_itm_1 <= (rawWindow_read_i_lpi_1_dfm_1_0_1==2'b01) & (~ exit_rawWindow_read_lpi_1_dfm_2)
          & MF_outer_MF_outer_nor_2_cse_1 & dpc_loop_in_asn_sft_lpi_1_dfm_mx0 & dpc_loop_out_dpc_loop_out_nor_15_cse_1
          & addon_loop_or_tmp_1;
      addon_loop_and_67_itm_1 <= rawWin_loop_and_284_cse_1 & MF_outer_MF_outer_nor_2_cse_1
          & dpc_loop_in_asn_sft_lpi_1_dfm_mx0 & (~ dpc_loop_in_asn_sft_1_lpi_1_dfm_mx0)
          & addon_loop_addon_loop_nor_20_cse_1;
      rawWin_loop_rawWin_loop_slc_rawWindow_60_47_36_1_ctmp_sva_1 <= rawWin_loop_rawWin_loop_slc_rawWindow_60_47_36_1_ctmp_sva_1_1;
      rawWin_loop_rawWin_loop_slc_rawWindow_60_35_24_1_ctmp_sva_1 <= rawWin_loop_rawWin_loop_slc_rawWindow_60_35_24_1_ctmp_sva_1_1;
      rawWin_loop_rawWin_loop_slc_rawWindow_60_23_12_1_ctmp_sva_1 <= rawWin_loop_rawWin_loop_slc_rawWindow_60_23_12_1_ctmp_sva_1_1;
      addon_loop_and_62_itm_1 <= rawWin_loop_and_283_cse_mx0 & MF_outer_MF_outer_nor_2_cse_1
          & dpc_loop_in_asn_sft_lpi_1_dfm_mx0 & (~ dpc_loop_in_asn_sft_1_lpi_1_dfm_mx0)
          & addon_loop_addon_loop_nor_20_cse_1;
      addon_loop_and_59_itm_1 <= rawWin_loop_and_282_cse_mx0 & MF_outer_MF_outer_nor_2_cse_1
          & dpc_loop_in_asn_sft_lpi_1_dfm_mx0 & (~ dpc_loop_in_asn_sft_1_lpi_1_dfm_mx0)
          & addon_loop_addon_loop_nor_20_cse_1;
      addon_loop_and_55_itm_1 <= rawWin_loop_and_m1c_mx0 & MF_outer_MF_outer_nor_2_cse_1
          & dpc_loop_in_asn_sft_lpi_1_dfm_mx0 & (~ dpc_loop_in_asn_sft_1_lpi_1_dfm_mx0)
          & addon_loop_addon_loop_nor_20_cse_1;
      addon_loop_and_53_itm_1 <= rawWin_loop_and_stg_3_0_sva_1 & MF_outer_MF_outer_nor_2_cse_1
          & dpc_loop_in_asn_sft_lpi_1_dfm_mx0 & (~ dpc_loop_in_asn_sft_1_lpi_1_dfm_mx0)
          & addon_loop_addon_loop_nor_20_cse_1;
      rawWin_loop_and_m1c <= rawWin_loop_and_m1c_mx0;
      rawWin_loop_and_282_cse <= rawWin_loop_and_282_cse_mx0;
      rawWin_loop_and_283_cse <= rawWin_loop_and_283_cse_mx0;
      rawWin_loop_rawWin_loop_slc_rawWindow_60_59_48_1_ctmp_lpi_1 <= rawWin_loop_rawWin_loop_slc_rawWindow_60_59_48_1_ctmp_lpi_1_mx0;
      rawWin_loop_and_189_psp <= rawWin_loop_and_189_psp_mx0;
      addon_loop_and_68_itm_1 <= rawWin_loop_and_svs_1 & MF_outer_MF_outer_nor_2_cse_1
          & dpc_loop_in_asn_sft_lpi_1_dfm_mx0 & dpc_loop_out_dpc_loop_out_nor_15_cse_1
          & addon_loop_or_tmp_1;
      addon_loop_and_95_itm_1 <= MF_outer_MF_outer_nor_2_cse_1 & dpc_loop_in_asn_sft_lpi_1_dfm_mx0
          & dpc_loop_out_dpc_loop_out_nor_15_cse_1 & addon_loop_or_tmp_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dpc_loop_in_if_if_lor_lpi_1 <= 1'b0;
    end
    else if ( core_wen & dpc_loop_in_if_asn_sft_lpi_1_mx0 & MF_outer_MF_outer_and_2_tmp
        & dpc_loop_in_asn_sft_lpi_1_dfm_mx0 & (~ dpc_loop_in_asn_sft_1_lpi_1_dfm_mx0)
        & (~ dpc_loop_out_asn_sft_lpi_1_dfm_1_mx0) & (~ lfst_exit_addon_loop_lpi_1_dfm_1_1)
        ) begin
      dpc_loop_in_if_if_lor_lpi_1 <= dpc_loop_in_if_if_lor_lpi_1_dfm_1_mx0;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dpc_loop_in_if_if_asn_sft_lpi_1 <= 1'b0;
    end
    else if ( core_wen & (~ lfst_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1) & dpc_loop_in_if_asn_sft_lpi_1_mx0
        & MF_outer_MF_outer_and_2_tmp & dpc_loop_in_asn_sft_lpi_1_dfm_mx0 & (~ dpc_loop_in_asn_sft_1_lpi_1_dfm_mx0)
        & (~ dpc_loop_out_asn_sft_lpi_1_dfm_1_mx0) & (~ lfst_exit_addon_loop_lpi_1_dfm_1_1)
        ) begin
      dpc_loop_in_if_if_asn_sft_lpi_1 <= dpc_loop_in_if_if_lor_lpi_1_dfm_1_mx0;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      sfi_dpc_loop_in_if_land_lpi_1 <= 1'b0;
      exit_rawWindow_read_lpi_1 <= 1'b0;
    end
    else if ( dpc_loop_in_if_aelse_and_cse ) begin
      sfi_dpc_loop_in_if_land_lpi_1 <= MF_outer_mux_nl & (~ MF_outer_MF_outer_and_2_tmp);
      exit_rawWindow_read_lpi_1 <= MUX_s_1_2_2(exit_rawWindow_read_lpi_1_dfm_3, exit_rawWindow_read_lpi_1_dfm_2,
          dpc_loop_out_and_36_nl);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dst_rsci_idat <= 12'b000000000000;
    end
    else if ( core_wen & (((~ mux_tmp_43) & and_dcpl_29) | dst_rsci_idat_mx0c1) )
        begin
      dst_rsci_idat <= MUX_v_12_2_2(12'b000000000000, dstData_lpi_1_dfm_9, dpc_loop_in_if_1_not_2_nl);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      sfi_dpc_reg_eb_lpi_1 <= 1'b0;
      lfst_exit_dpc_loop_in_lpi_1 <= 1'b0;
    end
    else if ( dpc_reg_eb_and_cse ) begin
      sfi_dpc_reg_eb_lpi_1 <= sfi_dpc_reg_eb_lpi_1 & dpc_loop_in_asn_sft_1_lpi_1_dfm_mx0;
      lfst_exit_dpc_loop_in_lpi_1 <= ~ exit_dpc_loop_in_lpi_1_dfm_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      sfi_exit_dpc_loop_in_lpi_1 <= 1'b0;
      lfst_exitL_exit_dpc_loop_in_lpi_1 <= 1'b0;
      exitL_exitL_exit_dpc_loop_in_lpi_1 <= 1'b0;
    end
    else if ( dpc_loop_in_and_98_cse ) begin
      sfi_exit_dpc_loop_in_lpi_1 <= sfi_exit_dpc_loop_in_lpi_1 & dpc_loop_out_asn_sft_lpi_1_dfm_1_mx0;
      lfst_exitL_exit_dpc_loop_in_lpi_1 <= ~ exitL_exit_dpc_loop_in_lpi_1_dfm_1;
      exitL_exitL_exit_dpc_loop_in_lpi_1 <= exitL_exit_dpc_loop_in_lpi_1_dfm_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      line_write_i_lpi_1_1_0 <= 2'b00;
    end
    else if ( core_wen & ((MF_outer_or_tmp_mx0w0 & dpc_loop_in_asn_sft_lpi_1_dfm_mx0
        & (~ dpc_loop_in_asn_sft_1_lpi_1_dfm_mx0) & (~ addon_loop_or_172_tmp_1))
        | dpc_loop_in_and_36_rgt) ) begin
      line_write_i_lpi_1_1_0 <= MUX_v_2_2_2(rawWin_loop_rawWin_loop_and_nl, (line_write_i_sva_2[1:0]),
          dpc_loop_in_and_36_rgt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dpc_loop_in_asn_sft_lpi_1 <= 1'b0;
    end
    else if ( core_wen & (~(lfst_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1
        | dpc_loop_in_asn_sft_1_lpi_1_dfm_mx0 | dpc_loop_out_asn_sft_lpi_1_dfm_1_mx0
        | lfst_exit_addon_loop_lpi_1_dfm_1_1)) ) begin
      dpc_loop_in_asn_sft_lpi_1 <= dpc_reg_eb;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dpc_loop_in_asn_sft_1_lpi_1 <= 1'b0;
    end
    else if ( core_wen & (~(lfst_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1
        | dpc_loop_out_asn_sft_lpi_1_dfm_1_mx0)) ) begin
      dpc_loop_in_asn_sft_1_lpi_1 <= exit_dpc_loop_in_lpi_1_dfm_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dstData_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & (~(or_dcpl_6 | addon_loop_or_7_tmp_2)) ) begin
      dstData_lpi_1 <= dstData_lpi_1_dfm_9;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawWindow_2_0_1_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & (~ or_dcpl_31) ) begin
      rawWindow_2_0_1_lpi_1 <= rawWin_loop_rawWin_loop_slc_rawWindow_60_23_12_1_ctmp_sva_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawWindow_3_0_1_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & (~ or_dcpl_32) ) begin
      rawWindow_3_0_1_lpi_1 <= rawWin_loop_rawWin_loop_slc_rawWindow_60_23_12_1_ctmp_sva_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      arr_sort_3_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & ((addon_loop_and_37_tmp_1 & (~(dpc_loop_in_nand_cse_1 |
        ((~ dpc_loop_in_if_if_if_and_3_tmp_1) & dpc_loop_in_if_and_3_m1c_1) | ((~
        dpc_loop_in_if_if_else_and_3_tmp_1) & dpc_loop_in_if_and_4_m1c_1)))) | (dpc_loop_in_if_if_if_and_3_tmp_1
        & dpc_loop_in_if_and_3_m1c_1 & addon_loop_and_37_tmp_1) | (dpc_loop_in_if_if_else_and_3_tmp_1
        & dpc_loop_in_if_and_4_m1c_1 & addon_loop_and_37_tmp_1)) & main_stage_0_2
        ) begin
      arr_sort_3_lpi_1 <= z_out_6;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      arr_sort_4_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & ((addon_loop_and_37_tmp_1 & (~(dpc_loop_in_nand_cse_1 |
        ((~ dpc_loop_in_if_if_if_and_4_tmp_1) & dpc_loop_in_if_and_3_m1c_1) | ((~
        dpc_loop_in_if_if_else_and_4_tmp_1) & dpc_loop_in_if_and_4_m1c_1)))) | (dpc_loop_in_if_if_if_and_4_tmp_1
        & dpc_loop_in_if_and_3_m1c_1 & addon_loop_and_37_tmp_1) | (dpc_loop_in_if_if_else_and_4_tmp_1
        & dpc_loop_in_if_and_4_m1c_1 & addon_loop_and_37_tmp_1)) & main_stage_0_2
        ) begin
      arr_sort_4_lpi_1 <= z_out_6;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      MF_inter_and_4_psp <= 1'b0;
      MF_inter_and_5_psp <= 1'b0;
      MF_inter_nor_2_cse <= 1'b0;
    end
    else if ( MF_inter_and_cse ) begin
      MF_inter_and_4_psp <= MF_inter_and_4_psp_1;
      MF_inter_and_5_psp <= MF_inter_and_5_psp_1;
      MF_inter_nor_2_cse <= MF_inter_nor_2_cse_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      exitL_exit_MF_inter_lpi_1 <= 1'b0;
      lfst_exit_MF_outer_lpi_1 <= 1'b0;
    end
    else if ( MF_inter_and_26_cse ) begin
      exitL_exit_MF_inter_lpi_1 <= MF_inter_acc_1_tmp[3];
      lfst_exit_MF_outer_lpi_1 <= ~ and_88_cse;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      defectPixelDetection_else_land_5_lpi_1_dfm <= 1'b0;
    end
    else if ( core_wen & (~(nor_tmp_22 | (~ sfi_dpc_loop_in_if_if_lor_lpi_1_dfm_st_1_1)
        | or_dcpl_49)) ) begin
      defectPixelDetection_else_land_5_lpi_1_dfm <= defectPixelDetection_else_land_5_lpi_1_dfm_mx0w0;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      medianFilter_item_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & ((exitL_exit_MF_inter_lpi_1_dfm_1 & (~ MF_inter_and_13_tmp_1)
        & dpc_loop_in_and_89_tmp_1 & (~ addon_loop_or_175_cse_1)) | dpc_loop_in_and_94_rgt)
        & main_stage_0_2 ) begin
      medianFilter_item_lpi_1 <= MUX_v_12_2_2(medianFilter_item_sva_1, MF_inter_else_aif_slc_arr_sort_12_11_0_ncse_sva_2,
          dpc_loop_in_and_94_rgt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      MF_inter_else_land_lpi_1_dfm <= 1'b0;
    end
    else if ( core_wen & (~((~ mux_95_itm) | or_dcpl_45 | or_dcpl_29 | (~ main_stage_0_2)
        | MF_inter_acc_itm_3_1)) ) begin
      MF_inter_else_land_lpi_1_dfm <= MF_inter_else_land_lpi_1_dfm_mx0w0;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      arr_sort_1_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & ((addon_loop_and_37_tmp_1 & (~(dpc_loop_in_nand_cse_1 |
        ((~ dpc_loop_in_if_if_if_and_1_tmp_1) & dpc_loop_in_if_and_3_m1c_1) | ((~
        dpc_loop_in_if_if_else_and_1_tmp_1) & dpc_loop_in_if_and_4_m1c_1)))) | (dpc_loop_in_if_if_if_and_1_tmp_1
        & dpc_loop_in_if_and_3_m1c_1 & addon_loop_and_37_tmp_1) | (dpc_loop_in_if_if_else_and_1_tmp_1
        & dpc_loop_in_if_and_4_m1c_1 & addon_loop_and_37_tmp_1)) & main_stage_0_2
        ) begin
      arr_sort_1_lpi_1 <= z_out_6;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      arr_sort_2_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & ((addon_loop_and_37_tmp_1 & (~(dpc_loop_in_nand_cse_1 |
        ((~ dpc_loop_in_if_if_if_and_2_tmp_1) & dpc_loop_in_if_and_3_m1c_1) | ((~
        dpc_loop_in_if_if_else_and_2_tmp_1) & dpc_loop_in_if_and_4_m1c_1)))) | (dpc_loop_in_if_if_if_and_2_tmp_1
        & dpc_loop_in_if_and_3_m1c_1 & addon_loop_and_37_tmp_1) | (dpc_loop_in_if_if_else_and_2_tmp_1
        & dpc_loop_in_if_and_4_m1c_1 & addon_loop_and_37_tmp_1)) & main_stage_0_2
        ) begin
      arr_sort_2_lpi_1 <= z_out_6;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      arr_sort_5_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & ((addon_loop_and_37_tmp_1 & (~(dpc_loop_in_nand_cse_1 |
        ((~ dpc_loop_in_if_if_if_and_5_tmp_1) & dpc_loop_in_if_and_3_m1c_1) | ((~
        dpc_loop_in_if_if_else_and_5_tmp_1) & dpc_loop_in_if_and_4_m1c_1)))) | (dpc_loop_in_if_if_if_and_5_tmp_1
        & dpc_loop_in_if_and_3_m1c_1 & addon_loop_and_37_tmp_1) | (dpc_loop_in_if_if_else_and_5_tmp_1
        & dpc_loop_in_if_and_4_m1c_1 & addon_loop_and_37_tmp_1)) & main_stage_0_2
        ) begin
      arr_sort_5_lpi_1 <= z_out_6;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      arr_sort_6_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & ((addon_loop_and_37_tmp_1 & (~(dpc_loop_in_nand_cse_1 |
        ((~ dpc_loop_in_if_if_if_and_6_tmp_1) & dpc_loop_in_if_and_3_m1c_1) | ((~
        dpc_loop_in_if_if_else_and_6_tmp_1) & dpc_loop_in_if_and_4_m1c_1)))) | (dpc_loop_in_if_if_if_and_6_tmp_1
        & dpc_loop_in_if_and_3_m1c_1 & addon_loop_and_37_tmp_1) | (dpc_loop_in_if_if_else_and_6_tmp_1
        & dpc_loop_in_if_and_4_m1c_1 & addon_loop_and_37_tmp_1)) & main_stage_0_2
        ) begin
      arr_sort_6_lpi_1 <= z_out_6;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      MF_inter_j_3_0_lpi_1_2_0 <= 3'b000;
      MF_outer_i_3_0_lpi_1_2_0 <= 3'b000;
    end
    else if ( MF_inter_j_and_itm ) begin
      MF_inter_j_3_0_lpi_1_2_0 <= MF_inter_acc_1_tmp[2:0];
      MF_outer_i_3_0_lpi_1_2_0 <= MUX_v_3_2_2(MF_outer_i_3_0_lpi_1_dfm_2_0_1, (MF_outer_acc_tmp[2:0]),
          addon_loop_and_100_nl);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dpc_loop_in_if_if_if_asn_sft_lpi_1 <= 1'b0;
    end
    else if ( core_wen & (~ lfst_exitL_exit_MF_outer_lpi_1_dfm_1) & dpc_loop_in_if_if_asn_sft_lpi_1_dfm_1
        & dpc_loop_in_if_asn_sft_lpi_1 & MF_outer_equal_tmp_1_1 & dpc_loop_in_asn_sft_lpi_1_dfm_1
        & (~ dpc_loop_in_asn_sft_1_lpi_1_dfm_1) & (~ dpc_loop_out_asn_sft_lpi_1_dfm_1)
        & (~ or_dcpl_11) ) begin
      dpc_loop_in_if_if_if_asn_sft_lpi_1 <= defectPixelDetection_rst_lpi_1_dfm_1_mx0;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lfst_exitL_exit_MF_outer_lpi_1 <= 1'b0;
    end
    else if ( core_wen & dpc_loop_in_if_if_asn_sft_lpi_1_dfm_1 & dpc_loop_in_if_asn_sft_lpi_1
        & MF_outer_equal_tmp_1_1 & dpc_loop_in_asn_sft_lpi_1_dfm_1 & (~ dpc_loop_in_asn_sft_1_lpi_1_dfm_1)
        & (~ dpc_loop_out_asn_sft_lpi_1_dfm_1) & (~ or_dcpl_11) ) begin
      lfst_exitL_exit_MF_outer_lpi_1 <= ~ exitL_exit_MF_outer_lpi_1_dfm_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      defectPixelDetection_rst_lpi_1 <= 1'b0;
    end
    else if ( core_wen & sfi_dpc_loop_in_if_if_lor_lpi_1_dfm_1 & dpc_loop_in_if_if_asn_sft_lpi_1_dfm_1
        & dpc_loop_in_if_asn_sft_lpi_1 & MF_outer_equal_tmp_1_1 & dpc_loop_in_asn_sft_lpi_1_dfm_1
        & (~ dpc_loop_in_asn_sft_1_lpi_1_dfm_1) & (~ dpc_loop_out_asn_sft_lpi_1_dfm_1)
        & (~ or_dcpl_11) ) begin
      defectPixelDetection_rst_lpi_1 <= defectPixelDetection_rst_lpi_1_dfm_2;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      MF_inter_1_and_4_psp <= 1'b0;
      MF_inter_1_and_5_psp <= 1'b0;
      MF_inter_1_nor_2_cse <= 1'b0;
    end
    else if ( MF_inter_1_and_cse ) begin
      MF_inter_1_and_4_psp <= MF_inter_1_and_4_psp_1;
      MF_inter_1_and_5_psp <= MF_inter_1_and_5_psp_1;
      MF_inter_1_nor_2_cse <= MF_inter_1_nor_2_cse_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      exitL_exit_MF_inter_1_lpi_1 <= 1'b0;
      lfst_exitL_exitL_exit_MF_outer_lpi_1 <= 1'b0;
    end
    else if ( MF_inter_1_and_26_cse ) begin
      exitL_exit_MF_inter_1_lpi_1 <= MF_inter_1_acc_1_tmp[3];
      lfst_exitL_exitL_exit_MF_outer_lpi_1 <= ~ and_87_cse;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      defectPixelDetection_1_else_land_5_lpi_1_dfm <= 1'b0;
    end
    else if ( core_wen & (~(nor_tmp_24 | (~ sfi_dpc_loop_in_if_if_lor_lpi_1_dfm_st_1_1)
        | or_dcpl_74)) ) begin
      defectPixelDetection_1_else_land_5_lpi_1_dfm <= defectPixelDetection_1_else_land_5_lpi_1_dfm_mx0w0;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      medianFilter_1_item_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & ((exitL_exit_MF_inter_1_lpi_1_dfm_1 & (~ MF_inter_1_and_13_tmp_1)
        & dpc_loop_in_if_if_and_1_tmp_1 & dpc_loop_out_and_35_tmp_1 & (~ addon_loop_or_7_tmp_2))
        | dpc_loop_in_if_if_and_7_rgt) & main_stage_0_2 ) begin
      medianFilter_1_item_lpi_1 <= MUX_v_12_2_2(medianFilter_1_item_sva_1, MF_inter_1_else_aif_slc_arr_sort_12_11_0_ncse_sva_2,
          dpc_loop_in_if_if_and_7_rgt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      MF_inter_1_else_land_lpi_1_dfm <= 1'b0;
    end
    else if ( core_wen & (~((~ mux_98_itm) | or_dcpl_72 | or_dcpl_29 | (~ main_stage_0_2)
        | MF_inter_1_acc_itm_3_1)) ) begin
      MF_inter_1_else_land_lpi_1_dfm <= MF_inter_1_else_land_lpi_1_dfm_mx0w0;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      MF_inter_1_j_3_0_lpi_1_2_0 <= 3'b000;
      MF_outer_1_i_3_0_lpi_1_2_0 <= 3'b000;
    end
    else if ( MF_inter_1_j_and_itm ) begin
      MF_inter_1_j_3_0_lpi_1_2_0 <= MF_inter_1_acc_1_tmp[2:0];
      MF_outer_1_i_3_0_lpi_1_2_0 <= MUX_v_3_2_2(MF_outer_1_i_3_0_lpi_1_dfm_2_0_1,
          (MF_outer_1_acc_tmp[2:0]), addon_loop_and_102_nl);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dpc_loop_in_if_if_else_asn_sft_lpi_1 <= 1'b0;
    end
    else if ( core_wen & (~(lfst_exitL_exitL_exitL_exit_MF_outer_lpi_1_dfm_1 | dpc_loop_in_if_if_asn_sft_lpi_1_dfm_1))
        & dpc_loop_in_if_asn_sft_lpi_1 & MF_outer_equal_tmp_1_1 & dpc_loop_in_asn_sft_lpi_1_dfm_1
        & (~ dpc_loop_in_asn_sft_1_lpi_1_dfm_1) & (~ dpc_loop_out_asn_sft_lpi_1_dfm_1)
        & (~ or_dcpl_11) ) begin
      dpc_loop_in_if_if_else_asn_sft_lpi_1 <= defectPixelDetection_1_rst_lpi_1_dfm_1_mx0;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lfst_exitL_exitL_exitL_exit_MF_outer_lpi_1 <= 1'b0;
    end
    else if ( core_wen & (~ dpc_loop_in_if_if_asn_sft_lpi_1_dfm_1) & dpc_loop_in_if_asn_sft_lpi_1
        & MF_outer_equal_tmp_1_1 & dpc_loop_in_asn_sft_lpi_1_dfm_1 & (~ dpc_loop_in_asn_sft_1_lpi_1_dfm_1)
        & (~ dpc_loop_out_asn_sft_lpi_1_dfm_1) & (~ or_dcpl_11) ) begin
      lfst_exitL_exitL_exitL_exit_MF_outer_lpi_1 <= ~ exitL_exitL_exitL_exit_MF_outer_lpi_1_dfm_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      defectPixelDetection_1_rst_lpi_1 <= 1'b0;
    end
    else if ( core_wen & sfi_dpc_loop_in_if_if_lor_lpi_1_dfm_1 & (~ dpc_loop_in_if_if_asn_sft_lpi_1_dfm_1)
        & dpc_loop_in_if_asn_sft_lpi_1 & MF_outer_equal_tmp_1_1 & dpc_loop_in_asn_sft_lpi_1_dfm_1
        & (~ dpc_loop_in_asn_sft_1_lpi_1_dfm_1) & (~ dpc_loop_out_asn_sft_lpi_1_dfm_1)
        & (~ or_dcpl_11) ) begin
      defectPixelDetection_1_rst_lpi_1 <= defectPixelDetection_1_rst_lpi_1_dfm_2;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      MF_outer_or_tmp_1 <= 1'b0;
    end
    else if ( core_wen & (mux_189_nl | mux_164_nl) ) begin
      MF_outer_or_tmp_1 <= MUX_s_1_2_2(MF_outer_or_tmp_mx0w0, and_85_cse, and_53_nl);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      srcData_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & addon_loop_addon_loop_nor_50_tmp & (~ dpc_loop_in_asn_sft_1_lpi_1_dfm_1)
        & main_stage_0_2 & sfi_exit_dpc_loop_in_lpi_1_dfm_1_1 ) begin
      srcData_lpi_1 <= src_rsci_idat_mxwt;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dpc_loop_out_asn_sft_lpi_1 <= 1'b0;
    end
    else if ( core_wen & (~ lfst_exitL_exit_dpc_loop_in_lpi_1_dfm_1) ) begin
      dpc_loop_out_asn_sft_lpi_1 <= exit_dpc_loop_out_lpi_1_dfm_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawWindow_read_i_lpi_1_1_0 <= 2'b00;
    end
    else if ( core_wen & (((~ MF_outer_MF_outer_nor_21_tmp_1) & dpc_loop_in_and_58_tmp_1
        & (~ addon_loop_or_172_tmp_1)) | dpc_loop_in_and_93_rgt) ) begin
      rawWindow_read_i_lpi_1_1_0 <= MUX_v_2_2_2(rawWindow_read_i_lpi_1_dfm_1_0_1,
          (rawWindow_read_i_sva_2[1:0]), dpc_loop_in_and_93_rgt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawWin_loop_i_lpi_1 <= 3'b000;
    end
    else if ( core_wen & ((~(MF_outer_or_14_tmp_1 | (~ dpc_loop_in_asn_sft_lpi_1_dfm_mx0)
        | dpc_loop_out_or_2_tmp_1 | lfst_exit_addon_loop_lpi_1_dfm_1_1)) | dpc_loop_in_and_10_rgt)
        ) begin
      rawWin_loop_i_lpi_1 <= MUX_v_3_2_2(rawWin_loop_i_sva_2, rawWin_loop_i_lpi_1_dfm_mx0w1,
          dpc_loop_in_and_10_rgt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawWindow_4_4_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & addon_loop_and_68_itm_1 ) begin
      rawWindow_4_4_lpi_1 <= srcData_lpi_1_dfm_mx0;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      addon_loop_cnt_lpi_1 <= 14'b00000000000000;
    end
    else if ( core_wen & (addon_loop_or_tmp_1 | addon_loop_equal_tmp_2) ) begin
      addon_loop_cnt_lpi_1 <= MUX_v_14_2_2(dpc_loop_out_dpc_loop_out_and_2_nl, addon_loop_cnt_sva_2,
          addon_loop_equal_tmp_2);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawWindow_0_3_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & (~(mux_322_nl | MF_outer_MF_outer_and_2_tmp)) ) begin
      rawWindow_0_3_lpi_1 <= rawWin_loop_rawWin_loop_slc_rawWindow_60_59_48_1_ctmp_lpi_1_mx0;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawWin_loop_and_197_psp <= 1'b0;
    end
    else if ( core_wen & mux_276_itm ) begin
      rawWin_loop_and_197_psp <= rawWin_loop_and_197_psp_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawWin_loop_and_stg_3_3_3_lpi_1 <= 1'b0;
      rawWin_loop_acc_5_decb_4_lpi_1 <= 1'b0;
      rawWin_loop_and_stg_3_7_3_lpi_1 <= 1'b0;
    end
    else if ( rawWin_loop_and_289_cse ) begin
      rawWin_loop_and_stg_3_3_3_lpi_1 <= rawWin_loop_and_stg_3_0_sva_1;
      rawWin_loop_acc_5_decb_4_lpi_1 <= readslicef_5_1_4(rawWin_loop_acc_5_nl);
      rawWin_loop_and_stg_3_7_3_lpi_1 <= rawWin_loop_and_284_cse_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawWindow_0_1_1_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & (~((~ mux_371_nl) | MF_outer_MF_outer_and_2_tmp)) ) begin
      rawWindow_0_1_1_lpi_1 <= rawWin_loop_rawWin_loop_slc_rawWindow_60_35_24_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawWindow_1_2_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & ((~((~(dpc_loop_in_asn_sft_lpi_1_dfm_mx0 & (~((~(rawWin_loop_and_189_psp_mx0
        | rawWin_loop_mux_16_nl | lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1_1))
        | lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1_mx0)))) | dpc_loop_out_or_2_tmp_1
        | lfst_exit_addon_loop_lpi_1_dfm_1_1)) | MF_outer_and_2_rgt) ) begin
      rawWindow_1_2_lpi_1 <= MUX_v_12_2_2(rawWin_loop_rawWin_loop_slc_rawWindow_60_59_48_1_ctmp_lpi_1_mx0,
          rawWin_loop_rawWin_loop_slc_rawWindow_60_47_36_1_ctmp_sva_1_1, MF_outer_and_2_rgt);
    end
  end
  assign mux_44_nl = MUX_s_1_2_2(nand_tmp_3, or_217_cse, dpc_loop_in_acc_2_itm_13_1);
  assign mux_45_nl = MUX_s_1_2_2(mux_44_nl, or_217_cse, exitL_exitL_exit_dpc_loop_in_lpi_1);
  assign or_51_nl = dpc_loop_in_acc_2_itm_13_1 | (~ nand_tmp_3);
  assign mux_43_nl = MUX_s_1_2_2(or_51_nl, dpc_loop_in_acc_2_itm_13_1, exitL_exitL_exit_dpc_loop_in_lpi_1);
  assign mux_46_nl = MUX_s_1_2_2((~ mux_45_nl), mux_43_nl, dpc_loop_out_acc_3_itm_13_1);
  assign or_59_nl = lfst_exit_addon_loop_lpi_1_dfm_st_1_1 | (~ mux_tmp_43);
  assign mux_48_nl = MUX_s_1_2_2(or_59_nl, lfst_exit_addon_loop_lpi_1_dfm_st_1_1,
      or_dcpl_5);
  assign nor_114_nl = ~(dpc_loop_out_asn_sft_lpi_1_dfm_1 | dpc_loop_in_asn_sft_1_lpi_1_dfm_1
      | lfst_exit_addon_loop_lpi_1_dfm_st_1_1 | mux_tmp_43);
  assign mux_49_nl = MUX_s_1_2_2(mux_48_nl, nor_114_nl, lfst_exit_addon_loop_lpi_1_dfm_st_1_0);
  assign mux_52_nl = MUX_s_1_2_2(or_65_cse, and_36_cse, or_tmp_46);
  assign mux_53_nl = MUX_s_1_2_2(mux_52_nl, dpc_loop_in_acc_2_itm_13_1, dpc_loop_in_asn_sft_1_lpi_1_dfm_1);
  assign nand_32_nl = ~(or_tmp_46 & lfst_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1);
  assign mux_50_nl = MUX_s_1_2_2(nand_32_nl, dpc_loop_in_acc_2_itm_13_1, exitL_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1);
  assign mux_54_nl = MUX_s_1_2_2(mux_53_nl, mux_50_nl, or_18_cse);
  assign mux_55_nl = MUX_s_1_2_2(dpc_loop_in_acc_2_itm_13_1, mux_54_nl, lfst_exit_dpc_loop_in_lpi_1);
  assign nor_110_nl = ~(dpc_loop_out_asn_sft_lpi_1 | (~ mux_55_nl));
  assign mux_56_nl = MUX_s_1_2_2(dpc_loop_in_acc_2_itm_13_1, nor_110_nl, lfst_exitL_exit_dpc_loop_in_lpi_1);
  assign mux_57_nl = MUX_s_1_2_2(nor_tmp_4, mux_56_nl, lfst_exit_addon_loop_lpi_1_dfm_3_0);
  assign mux_58_nl = MUX_s_1_2_2(mux_57_nl, nor_tmp_4, exitL_exitL_exit_dpc_loop_in_lpi_1);
  assign nor_109_nl = ~(lfst_exit_addon_loop_lpi_1_dfm_3_1 | (~ mux_58_nl));
  assign nl_operator_13_false_acc_nl = ({1'b1 , (~ (dpc_loop_out_row_lpi_1_dfm_1_1[12:2]))})
      + 12'b000000000001;
  assign operator_13_false_acc_nl = nl_operator_13_false_acc_nl[11:0];
  assign nl_line_write_acc_4_nl = (z_out[4:2]) + 3'b001;
  assign line_write_acc_4_nl = nl_line_write_acc_4_nl[2:0];
  assign nl_line_write_acc_nl = line_write_i_lpi_1_1_0 + conv_u2u_1_2(dpc_loop_in_col_lpi_1_dfm_1_1[12]);
  assign line_write_acc_nl = nl_line_write_acc_nl[1:0];
  assign nl_rawWindow_read_acc_5_nl = rawWindow_read_i_lpi_1_dfm_1_0_1 + conv_u2u_1_2(dpc_loop_in_col_lpi_1_dfm_1_1[12]);
  assign rawWindow_read_acc_5_nl = nl_rawWindow_read_acc_5_nl[1:0];
  assign or_136_nl = (~ mux_95_itm) | or_dcpl_43 | or_dcpl_53 | or_dcpl_52;
  assign MF_inter_mux_6_nl = MUX_s_1_2_2(MF_inter_nor_2_cse_1, MF_inter_nor_2_cse,
      or_136_nl);
  assign or_159_nl = (~ mux_98_itm) | or_dcpl_70 | or_dcpl_53 | or_dcpl_52;
  assign MF_inter_1_mux_6_nl = MUX_s_1_2_2(MF_inter_1_nor_2_cse_1, MF_inter_1_nor_2_cse,
      or_159_nl);
  assign addon_loop_or_189_nl = (MF_inter_mux_6_nl & (~ (MF_inter_j_3_0_lpi_1_dfm_2_0_1[2]))
      & dpc_loop_in_if_if_if_asn_sft_lpi_1_dfm_mx0 & dpc_loop_in_if_if_asn_sft_lpi_1_dfm_1
      & dpc_loop_in_if_asn_sft_lpi_1 & dpc_loop_out_and_tmp_1 & (~ addon_loop_or_7_tmp_2))
      | (MF_inter_1_mux_6_nl & (~ (MF_inter_1_j_3_0_lpi_1_dfm_2_0_1[2])) & dpc_loop_in_if_if_else_asn_sft_lpi_1_dfm_mx0
      & (~ dpc_loop_in_if_if_asn_sft_lpi_1_dfm_1) & dpc_loop_in_if_asn_sft_lpi_1
      & dpc_loop_out_and_tmp_1 & (~ addon_loop_or_7_tmp_2));
  assign addon_loop_addon_loop_addon_loop_addon_loop_mux_14_nl = MUX_v_12_2_2(arr_sort_0_lpi_1_dfm_1,
      z_out_6, addon_loop_or_189_nl);
  assign addon_loop_not_127_nl = ~ exitL_exit_addon_loop_sva;
  assign defectPixelDetection_1_mux_7_nl = MUX_v_12_2_2(rawWindow_3_1_1_lpi_1_mx0,
      rawWindow_4_0_1_lpi_1_mx0, mux_tmp_96);
  assign nl_acc_2_nl = ({1'b1 , defectPixelDetection_1_mux_7_nl , 1'b1}) + conv_u2u_13_14({(~
      rawWindow_2_2_1_lpi_1_mx0) , 1'b1});
  assign acc_2_nl = nl_acc_2_nl[13:0];
  assign rawWin_loop_mux_nl = MUX_v_12_2_2(rawWin_loop_rawWin_loop_slc_rawWindow_60_23_12_1_ctmp_sva_1,
      rawWindow_2_0_1_lpi_1, or_dcpl_31);
  assign nl_defectPixelDetection_1_diff_3_sva_1  = ({1'b1 , rawWin_loop_mux_nl})
      + conv_u2s_12_13(~ rawWindow_2_2_1_lpi_1_mx0) + 13'b0000000000001;
  assign nl_defectPixelDetection_1_acc_10_nl = ({1'b1 , rawWindow_1_3_1_lpi_1_mx0})
      + conv_u2s_12_13(~ rawWindow_2_2_1_lpi_1_mx0) + 13'b0000000000001;
  assign defectPixelDetection_1_acc_10_nl = nl_defectPixelDetection_1_acc_10_nl[12:0];
  assign mux_141_nl = MUX_s_1_2_2((~ mux_tmp_102), mux_tmp_95, sfi_dpc_loop_in_if_land_lpi_1);
  assign and_86_nl = lfst_exit_addon_loop_lpi_1_dfm_st_1_1 & dpc_loop_in_if_asn_sft_lpi_1
      & mux_141_nl;
  assign mux_138_nl = MUX_s_1_2_2(mux_tmp_100, mux_tmp_127, dpc_loop_in_if_asn_sft_lpi_1);
  assign mux_120_nl = MUX_s_1_2_2(not_tmp_115, or_tmp_90, defectPixelDetection_rst_lpi_1);
  assign mux_119_nl = MUX_s_1_2_2(not_tmp_115, or_tmp_90, dpc_loop_in_if_if_if_asn_sft_lpi_1);
  assign mux_121_nl = MUX_s_1_2_2(mux_120_nl, mux_119_nl, lfst_exitL_exit_MF_outer_lpi_1);
  assign mux_122_nl = MUX_s_1_2_2(mux_121_nl, dpc_loop_in_if_if_lor_lpi_1, and_87_cse);
  assign mux_112_nl = MUX_s_1_2_2(or_tmp_89, nand_tmp_8, defectPixelDetection_rst_lpi_1);
  assign mux_111_nl = MUX_s_1_2_2(or_tmp_89, nand_tmp_8, dpc_loop_in_if_if_if_asn_sft_lpi_1);
  assign mux_113_nl = MUX_s_1_2_2(mux_112_nl, mux_111_nl, lfst_exitL_exit_MF_outer_lpi_1);
  assign mux_114_nl = MUX_s_1_2_2(mux_113_nl, dpc_loop_in_if_if_lor_lpi_1, and_88_cse);
  assign mux_123_nl = MUX_s_1_2_2(mux_122_nl, mux_114_nl, dpc_loop_in_if_if_asn_sft_lpi_1_dfm_1);
  assign mux_124_nl = MUX_s_1_2_2(mux_tmp_99, mux_123_nl, MF_outer_equal_tmp_1_1);
  assign mux_125_nl = MUX_s_1_2_2(mux_124_nl, mux_tmp_95, sfi_dpc_loop_in_if_land_lpi_1);
  assign mux_132_nl = MUX_s_1_2_2(mux_tmp_127, mux_125_nl, lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1);
  assign mux_136_nl = MUX_s_1_2_2(mux_tmp_100, mux_132_nl, dpc_loop_in_if_asn_sft_lpi_1);
  assign mux_139_nl = MUX_s_1_2_2(mux_138_nl, mux_136_nl, lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_st_1_0);
  assign or_166_nl = dpc_loop_in_if_if_asn_sft_lpi_1_dfm_1 | mux_tmp_101;
  assign mux_107_nl = MUX_s_1_2_2(mux_tmp_102, or_166_nl, MF_outer_equal_tmp_1_1);
  assign mux_108_nl = MUX_s_1_2_2((~ mux_107_nl), mux_tmp_95, sfi_dpc_loop_in_if_land_lpi_1);
  assign and_89_nl = dpc_loop_in_if_asn_sft_lpi_1 & mux_108_nl;
  assign mux_140_nl = MUX_s_1_2_2(mux_139_nl, and_89_nl, lfst_exit_addon_loop_lpi_1_dfm_st_1_1);
  assign mux_142_nl = MUX_s_1_2_2(and_86_nl, mux_140_nl, dpc_loop_in_asn_sft_lpi_1_dfm_1);
  assign and_48_nl = dpc_loop_in_if_asn_sft_lpi_1 & mux_tmp_100;
  assign mux_143_nl = MUX_s_1_2_2(mux_142_nl, and_48_nl, or_18_cse);
  assign nl_defectPixelDetection_1_acc_nl = ({1'b1 , rawWindow_1_1_1_lpi_1_mx0})
      + conv_u2s_12_13(~ rawWindow_2_2_1_lpi_1_mx0) + 13'b0000000000001;
  assign defectPixelDetection_1_acc_nl = nl_defectPixelDetection_1_acc_nl[12:0];
  assign nl_defectPixelDetection_1_th_2_sva_1  = ({1'b1 , (~ dpc_reg_th_b)}) + 12'b000000000001;
  assign and_79_nl = dpc_loop_in_asn_sft_lpi_1_dfm_1 & (~ lfst_exitL_exitL_exit_MF_outer_1_lpi_1);
  assign or_188_nl = and_87_cse | (~ mux_98_itm);
  assign or_187_nl = and_88_cse | (~ mux_95_itm);
  assign and_83_nl = dpc_loop_in_if_if_asn_sft_lpi_1_dfm_1 & lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_st_1_0
      & lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1;
  assign mux_148_nl = MUX_s_1_2_2(or_188_nl, or_187_nl, and_83_nl);
  assign mux_149_nl = MUX_s_1_2_2((~ lfst_exitL_exitL_exit_MF_outer_1_lpi_1), mux_148_nl,
      MF_outer_equal_tmp_1_1);
  assign and_80_nl = dpc_loop_in_asn_sft_lpi_1_dfm_1 & mux_149_nl;
  assign mux_151_nl = MUX_s_1_2_2(and_79_nl, and_80_nl, dpc_loop_in_if_asn_sft_lpi_1);
  assign and_84_nl = dpc_loop_in_if_asn_sft_lpi_1 & (~(and_85_cse | lfst_exitL_exitL_exit_MF_outer_1_lpi_1));
  assign mux_152_nl = MUX_s_1_2_2(mux_151_nl, and_84_nl, lfst_exit_addon_loop_lpi_1_dfm_st_1_1);
  assign and_51_nl = dpc_loop_in_asn_sft_lpi_1_dfm_1 & (~(lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_st_1_0
      | (~ lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1)));
  assign mux_145_nl = MUX_s_1_2_2(and_51_nl, dpc_loop_in_asn_sft_lpi_1_dfm_1, dpc_loop_in_if_asn_sft_lpi_1);
  assign mux_146_nl = MUX_s_1_2_2(mux_145_nl, dpc_loop_in_if_asn_sft_lpi_1, lfst_exit_addon_loop_lpi_1_dfm_st_1_1);
  assign mux_153_nl = MUX_s_1_2_2(mux_152_nl, mux_146_nl, sfi_dpc_loop_in_if_land_lpi_1);
  assign nor_104_nl = ~((~ dpc_loop_in_if_asn_sft_lpi_1) | lfst_exitL_exitL_exit_MF_outer_1_lpi_1);
  assign mux_144_nl = MUX_s_1_2_2(nor_104_nl, dpc_loop_in_if_asn_sft_lpi_1, sfi_dpc_loop_in_if_land_lpi_1);
  assign mux_154_nl = MUX_s_1_2_2(mux_153_nl, mux_144_nl, or_18_cse);
  assign mux_231_nl = MUX_s_1_2_2(mux_410_itm, or_tmp_125, exitL_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1);
  assign mux_223_nl = MUX_s_1_2_2(or_tmp_125, mux_tmp_209, dpc_loop_in_or_6_cse);
  assign mux_221_nl = MUX_s_1_2_2(mux_tmp_207, mux_tmp_213, lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_0);
  assign mux_222_nl = MUX_s_1_2_2(or_tmp_125, mux_221_nl, dpc_loop_in_or_6_cse);
  assign mux_224_nl = MUX_s_1_2_2(mux_223_nl, mux_222_nl, lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_1);
  assign mux_219_nl = MUX_s_1_2_2(or_tmp_125, mux_tmp_209, MF_outer_MF_outer_or_8_tmp);
  assign mux_218_nl = MUX_s_1_2_2(mux_tmp_207, mux_tmp_213, MF_outer_MF_outer_or_8_tmp);
  assign mux_220_nl = MUX_s_1_2_2(mux_219_nl, mux_218_nl, MF_outer_MF_outer_or_9_tmp);
  assign mux_225_nl = MUX_s_1_2_2(mux_224_nl, mux_220_nl, addon_loop_addon_loop_nor_50_tmp);
  assign mux_226_nl = MUX_s_1_2_2(or_tmp_125, mux_225_nl, dpc_loop_in_asn_sft_lpi_1_dfm_1);
  assign mux_215_nl = MUX_s_1_2_2(mux_tmp_209, mux_tmp_207, nor_56_cse);
  assign mux_227_nl = MUX_s_1_2_2(mux_226_nl, mux_215_nl, lfst_exit_addon_loop_lpi_1_dfm_st_1_1);
  assign mux_228_nl = MUX_s_1_2_2(mux_227_nl, or_tmp_125, dpc_loop_in_asn_sft_1_lpi_1_dfm_1);
  assign mux_204_nl = MUX_s_1_2_2(mux_tmp_194, mux_tmp_190, MF_outer_MF_outer_or_8_tmp);
  assign mux_205_nl = MUX_s_1_2_2(mux_tmp_192, mux_204_nl, MF_outer_MF_outer_or_9_tmp);
  assign mux_206_nl = MUX_s_1_2_2(mux_410_itm, mux_205_nl, and_105_cse);
  assign mux_203_nl = MUX_s_1_2_2(mux_410_itm, mux_tmp_192, and_105_cse);
  assign mux_207_nl = MUX_s_1_2_2(mux_206_nl, mux_203_nl, lfst_exit_addon_loop_lpi_1_dfm_st_1_1);
  assign mux_208_nl = MUX_s_1_2_2(mux_207_nl, mux_410_itm, dpc_loop_in_asn_sft_1_lpi_1_dfm_1);
  assign mux_209_nl = MUX_s_1_2_2(mux_208_nl, or_tmp_125, exitL_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1);
  assign mux_229_nl = MUX_s_1_2_2(mux_228_nl, mux_209_nl, addon_loop_or_7_tmp_2);
  assign mux_201_nl = MUX_s_1_2_2(mux_410_itm, mux_tmp_192, nor_120_cse);
  assign mux_202_nl = MUX_s_1_2_2(mux_201_nl, or_tmp_125, exitL_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1);
  assign mux_230_nl = MUX_s_1_2_2(mux_229_nl, mux_202_nl, dpc_loop_out_asn_sft_lpi_1_dfm_1);
  assign mux_232_nl = MUX_s_1_2_2(mux_231_nl, mux_230_nl, main_stage_0_2);
  assign mux_233_nl = MUX_s_1_2_2(or_tmp_125, mux_232_nl, lfst_exit_dpc_loop_in_lpi_1);
  assign or_234_nl = dpc_loop_out_asn_sft_lpi_1 | mux_233_nl;
  assign mux_234_nl = MUX_s_1_2_2(or_tmp_125, or_234_nl, lfst_exitL_exit_dpc_loop_in_lpi_1);
  assign mux_235_nl = MUX_s_1_2_2(mux_234_nl, or_tmp_125, exitL_exitL_exit_dpc_loop_in_lpi_1);
  assign and_54_nl = dpc_loop_out_acc_3_itm_13_1 & or_tmp_125;
  assign mux_236_nl = MUX_s_1_2_2(mux_235_nl, and_54_nl, or_217_cse);
  assign line_write_line_write_or_nl = sfi_dpc_loop_in_if_land_lpi_1 | (line_write_i_sva_2[2]);
  assign MF_outer_mux_nl = MUX_s_1_2_2(sfi_dpc_loop_in_if_land_lpi_1, line_write_line_write_or_nl,
      MF_outer_equal_tmp_2);
  assign dpc_loop_out_and_36_nl = MF_outer_or_14_tmp_1 & dpc_loop_in_asn_sft_lpi_1_dfm_mx0
      & (~ dpc_loop_in_asn_sft_1_lpi_1_dfm_mx0) & (~ dpc_loop_out_asn_sft_lpi_1_dfm_1_mx0);
  assign dpc_loop_in_if_1_not_2_nl = ~ dst_rsci_idat_mx0c1;
  assign rawWin_loop_not_249_nl = ~ rawWin_loop_and_svs_1;
  assign rawWin_loop_rawWin_loop_and_nl = MUX_v_2_2_2(2'b00, line_write_i_lpi_1_1_0,
      rawWin_loop_not_249_nl);
  assign addon_loop_and_100_nl = (MF_inter_acc_1_tmp[3]) & addon_loop_and_85_tmp_2;
  assign addon_loop_and_102_nl = (MF_inter_1_acc_1_tmp[3]) & addon_loop_and_93_tmp_2;
  assign nor_98_nl = ~(dpc_loop_in_acc_2_itm_13_1 | dpc_loop_in_asn_sft_lpi_1_dfm_1);
  assign or_197_nl = (~ dpc_loop_in_acc_2_itm_13_1) | dpc_loop_in_asn_sft_lpi_1_dfm_1;
  assign mux_166_nl = MUX_s_1_2_2(nor_98_nl, or_197_nl, dpc_loop_in_asn_sft_1_lpi_1);
  assign mux_167_nl = MUX_s_1_2_2((~ dpc_loop_in_acc_2_itm_13_1), mux_166_nl, dpc_loop_in_or_6_cse);
  assign nor_99_nl = ~(dpc_loop_in_acc_2_itm_13_1 | (~ exitL_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1));
  assign nand_23_nl = ~(dpc_loop_in_acc_2_itm_13_1 & exitL_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1);
  assign mux_165_nl = MUX_s_1_2_2(nor_99_nl, nand_23_nl, nor_tmp_15);
  assign mux_168_nl = MUX_s_1_2_2(mux_167_nl, mux_165_nl, addon_loop_or_7_tmp_2);
  assign mux_169_nl = MUX_s_1_2_2((~ dpc_loop_in_acc_2_itm_13_1), mux_168_nl, lfst_exit_dpc_loop_in_lpi_1);
  assign nor_126_nl = ~(dpc_loop_out_asn_sft_lpi_1 | mux_169_nl);
  assign mux_170_nl = MUX_s_1_2_2(dpc_loop_in_acc_2_itm_13_1, nor_126_nl, lfst_exitL_exit_dpc_loop_in_lpi_1);
  assign mux_171_nl = MUX_s_1_2_2(nor_tmp_4, mux_170_nl, lfst_exit_addon_loop_lpi_1_dfm_3_0);
  assign mux_172_nl = MUX_s_1_2_2(mux_171_nl, nor_tmp_4, exitL_exitL_exit_dpc_loop_in_lpi_1);
  assign nor_97_nl = ~(lfst_exit_addon_loop_lpi_1_dfm_3_1 | (~ mux_172_nl));
  assign mux_173_nl = MUX_s_1_2_2(nor_97_nl, nor_tmp_4, exitL_exit_addon_loop_sva);
  assign and_53_nl = (~ mux_173_nl) & and_dcpl_29;
  assign mux_180_nl = MUX_s_1_2_2(mux_tmp_173, mux_tmp_170, lfst_exit_addon_loop_lpi_1_dfm_st_1_1);
  assign or_210_nl = exitL_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1 |
      (~(addon_loop_or_7_tmp_2 | (~ main_stage_0_2) | dpc_loop_out_asn_sft_lpi_1_dfm_1));
  assign mux_178_nl = MUX_s_1_2_2(mux_tmp_173, or_210_nl, lfst_exit_addon_loop_lpi_1_dfm_st_1_1);
  assign mux_179_nl = MUX_s_1_2_2(mux_178_nl, or_tmp_111, lfst_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1);
  assign mux_181_nl = MUX_s_1_2_2(mux_180_nl, mux_179_nl, dpc_loop_in_asn_sft_1_lpi_1);
  assign or_208_nl = (~ lfst_exit_addon_loop_lpi_1_dfm_st_1_1) | dpc_loop_in_asn_sft_1_lpi_1_dfm_1
      | addon_loop_or_7_tmp_2 | (~ main_stage_0_2) | dpc_loop_out_asn_sft_lpi_1_dfm_1;
  assign or_207_nl = exitL_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1 |
      (~((dpc_loop_in_asn_sft_1_lpi_1_dfm_1 & addon_loop_or_7_tmp_2) | (~ main_stage_0_2)
      | dpc_loop_out_asn_sft_lpi_1_dfm_1));
  assign mux_175_nl = MUX_s_1_2_2(or_207_nl, mux_tmp_170, lfst_exit_addon_loop_lpi_1_dfm_st_1_1);
  assign mux_176_nl = MUX_s_1_2_2(or_208_nl, mux_175_nl, lfst_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1);
  assign and_73_nl = dpc_loop_in_asn_sft_1_lpi_1 & (~ mux_176_nl);
  assign mux_182_nl = MUX_s_1_2_2(mux_181_nl, and_73_nl, dpc_loop_in_acc_2_itm_13_1);
  assign mux_183_nl = MUX_s_1_2_2((~ or_tmp_123), mux_182_nl, lfst_exit_dpc_loop_in_lpi_1);
  assign mux_184_nl = MUX_s_1_2_2(mux_183_nl, or_tmp_111, dpc_loop_out_asn_sft_lpi_1);
  assign mux_185_nl = MUX_s_1_2_2(or_tmp_123, (~ mux_184_nl), lfst_exitL_exit_dpc_loop_in_lpi_1);
  assign mux_186_nl = MUX_s_1_2_2(or_tmp_112, mux_185_nl, lfst_exit_addon_loop_lpi_1_dfm_3_0);
  assign mux_187_nl = MUX_s_1_2_2(mux_186_nl, or_tmp_112, exitL_exitL_exit_dpc_loop_in_lpi_1);
  assign mux_188_nl = MUX_s_1_2_2(mux_187_nl, (~ or_tmp_111), lfst_exit_addon_loop_lpi_1_dfm_3_1);
  assign mux_189_nl = MUX_s_1_2_2(mux_188_nl, or_tmp_112, exitL_exit_addon_loop_sva);
  assign nand_1_nl = ~(dpc_loop_in_asn_sft_1_lpi_1 & (~ exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_dfm_1));
  assign mux_24_nl = MUX_s_1_2_2(nor_119_cse, nand_1_nl, dpc_loop_in_acc_2_itm_13_1);
  assign mux_25_nl = MUX_s_1_2_2(mux_24_nl, dpc_loop_in_acc_2_itm_13_1, dpc_loop_in_asn_sft_1_lpi_1_dfm_1);
  assign mux_155_nl = MUX_s_1_2_2((~ nor_tmp_15), dpc_loop_in_acc_2_itm_13_1, exitL_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1);
  assign mux_159_nl = MUX_s_1_2_2(mux_25_nl, mux_155_nl, or_18_cse);
  assign mux_160_nl = MUX_s_1_2_2(dpc_loop_in_acc_2_itm_13_1, mux_159_nl, lfst_exit_dpc_loop_in_lpi_1);
  assign nor_101_nl = ~(dpc_loop_out_asn_sft_lpi_1 | (~ mux_160_nl));
  assign mux_161_nl = MUX_s_1_2_2(dpc_loop_in_acc_2_itm_13_1, nor_101_nl, lfst_exitL_exit_dpc_loop_in_lpi_1);
  assign mux_162_nl = MUX_s_1_2_2(nor_tmp_4, mux_161_nl, lfst_exit_addon_loop_lpi_1_dfm_3_0);
  assign mux_163_nl = MUX_s_1_2_2(mux_162_nl, nor_tmp_4, exitL_exitL_exit_dpc_loop_in_lpi_1);
  assign nor_100_nl = ~(lfst_exit_addon_loop_lpi_1_dfm_3_1 | (~ mux_163_nl));
  assign mux_164_nl = MUX_s_1_2_2(nor_100_nl, nor_tmp_4, exitL_exit_addon_loop_sva);
  assign addon_loop_addon_loop_dpc_loop_out_not_3_nl = ~ exit_dpc_loop_out_lpi_1_dfm_1;
  assign dpc_loop_out_dpc_loop_out_and_2_nl = MUX_v_14_2_2(14'b00000000000000, addon_loop_cnt_lpi_1,
      addon_loop_addon_loop_dpc_loop_out_not_3_nl);
  assign nand_21_nl = ~(dpc_reg_eb & dpc_loop_in_acc_2_itm_13_1 & (~ rawWin_loop_acc_5_decb_4_lpi_1)
      & rawWin_loop_and_stg_3_3_3_lpi_1);
  assign or_269_nl = dpc_loop_in_asn_sft_1_lpi_1 | (~ dpc_reg_eb) | dpc_loop_out_asn_sft_lpi_1
      | rawWin_loop_acc_5_decb_4_lpi_1 | (~ rawWin_loop_and_stg_3_3_3_lpi_1);
  assign mux_315_nl = MUX_s_1_2_2(or_269_nl, or_tmp_161, exitL_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1);
  assign mux_316_nl = MUX_s_1_2_2(mux_tmp_303, mux_315_nl, or_18_cse);
  assign mux_317_nl = MUX_s_1_2_2(mux_tmp_309, mux_316_nl, lfst_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1);
  assign mux_310_nl = MUX_s_1_2_2(mux_tmp_280, or_tmp_161, exitL_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1);
  assign mux_291_nl = MUX_s_1_2_2(mux_tmp_280, mux_tmp_276, and_105_cse);
  assign mux_292_nl = MUX_s_1_2_2(mux_374_itm, mux_291_nl, MF_outer_MF_outer_or_9_tmp);
  assign mux_285_nl = MUX_s_1_2_2(mux_tmp_280, mux_tmp_277, and_105_cse);
  assign mux_290_nl = MUX_s_1_2_2(mux_374_itm, mux_285_nl, MF_outer_MF_outer_or_9_tmp);
  assign mux_293_nl = MUX_s_1_2_2(mux_292_nl, mux_290_nl, MF_outer_MF_outer_or_8_tmp);
  assign mux_294_nl = MUX_s_1_2_2(mux_293_nl, mux_374_itm, lfst_exit_addon_loop_lpi_1_dfm_st_1_1);
  assign mux_295_nl = MUX_s_1_2_2(mux_294_nl, mux_tmp_280, dpc_loop_in_asn_sft_1_lpi_1_dfm_1);
  assign mux_296_nl = MUX_s_1_2_2(mux_295_nl, or_tmp_161, exitL_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1);
  assign mux_308_nl = MUX_s_1_2_2(mux_tmp_303, mux_296_nl, addon_loop_or_7_tmp_2);
  assign mux_418_nl = MUX_s_1_2_2(mux_tmp_280, or_tmp_166, and_105_cse);
  assign mux_288_nl = MUX_s_1_2_2(mux_418_nl, mux_tmp_280, dpc_loop_in_asn_sft_1_lpi_1_dfm_1);
  assign mux_289_nl = MUX_s_1_2_2(mux_288_nl, or_tmp_161, exitL_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1);
  assign mux_309_nl = MUX_s_1_2_2(mux_308_nl, mux_289_nl, dpc_loop_out_asn_sft_lpi_1_dfm_1);
  assign mux_311_nl = MUX_s_1_2_2(mux_310_nl, mux_309_nl, main_stage_0_2);
  assign mux_314_nl = MUX_s_1_2_2(mux_tmp_309, mux_311_nl, lfst_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1);
  assign mux_318_nl = MUX_s_1_2_2(mux_317_nl, mux_314_nl, lfst_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1);
  assign mux_319_nl = MUX_s_1_2_2(or_tmp_161, mux_318_nl, lfst_exit_dpc_loop_in_lpi_1);
  assign mux_320_nl = MUX_s_1_2_2(nand_21_nl, mux_319_nl, lfst_exitL_exit_dpc_loop_in_lpi_1);
  assign nor_67_nl = ~(exitL_exitL_exit_dpc_loop_in_lpi_1 | (~ lfst_exit_addon_loop_lpi_1_dfm_3_0));
  assign mux_321_nl = MUX_s_1_2_2(or_tmp_159, mux_320_nl, nor_67_nl);
  assign or_272_nl = lfst_exit_addon_loop_lpi_1_dfm_3_1 | mux_321_nl;
  assign mux_322_nl = MUX_s_1_2_2(or_272_nl, or_tmp_159, exitL_exit_addon_loop_sva);
  assign nl_rawWin_loop_acc_5_nl = conv_u2u_3_5(rawWin_loop_i_lpi_1_dfm_mx0w1) +
      ({rawWin_loop_i_lpi_1_dfm_mx0w1 , 2'b11});
  assign rawWin_loop_acc_5_nl = nl_rawWin_loop_acc_5_nl[4:0];
  assign mux_365_nl = MUX_s_1_2_2((~ mux_412_itm), nor_tmp_73, exitL_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1);
  assign mux_357_nl = MUX_s_1_2_2((~ nor_tmp_73), mux_tmp_341, dpc_loop_in_or_6_cse);
  assign mux_355_nl = MUX_s_1_2_2((~ nor_tmp_73), mux_tmp_339, dpc_loop_in_or_6_cse);
  assign mux_358_nl = MUX_s_1_2_2(mux_357_nl, mux_355_nl, lfst_exitL_exitL_exitL_exit_MF_outer_1_lpi_1_1);
  assign mux_351_nl = MUX_s_1_2_2((~ nor_tmp_73), mux_tmp_341, MF_outer_MF_outer_or_8_tmp);
  assign or_290_nl = sfi_exit_dpc_loop_in_lpi_1 | dpc_loop_in_asn_sft_1_lpi_1 | (~
      dpc_loop_in_asn_sft_lpi_1);
  assign mux_348_nl = MUX_s_1_2_2(or_290_nl, mux_tmp_338, rawWin_loop_rawWin_loop_xnor_tmp);
  assign mux_349_nl = MUX_s_1_2_2(mux_348_nl, nand_tmp_20, sfi_dpc_reg_eb_lpi_1);
  assign mux_350_nl = MUX_s_1_2_2(mux_tmp_339, mux_349_nl, MF_outer_MF_outer_or_8_tmp);
  assign mux_352_nl = MUX_s_1_2_2(mux_351_nl, mux_350_nl, MF_outer_MF_outer_or_9_tmp);
  assign mux_359_nl = MUX_s_1_2_2(mux_358_nl, mux_352_nl, addon_loop_addon_loop_nor_50_tmp);
  assign mux_360_nl = MUX_s_1_2_2(nor_tmp_73, (~ mux_359_nl), dpc_loop_in_asn_sft_lpi_1_dfm_1);
  assign mux_347_nl = MUX_s_1_2_2((~ mux_tmp_341), (~ mux_tmp_339), nor_56_cse);
  assign mux_361_nl = MUX_s_1_2_2(mux_360_nl, mux_347_nl, lfst_exit_addon_loop_lpi_1_dfm_st_1_1);
  assign mux_362_nl = MUX_s_1_2_2(mux_361_nl, nor_tmp_73, dpc_loop_in_asn_sft_1_lpi_1_dfm_1);
  assign mux_336_nl = MUX_s_1_2_2(mux_tmp_326, mux_tmp_322, MF_outer_MF_outer_or_8_tmp);
  assign mux_337_nl = MUX_s_1_2_2(mux_tmp_324, mux_336_nl, MF_outer_MF_outer_or_9_tmp);
  assign mux_338_nl = MUX_s_1_2_2(mux_412_itm, mux_337_nl, and_105_cse);
  assign mux_335_nl = MUX_s_1_2_2(mux_412_itm, mux_tmp_324, and_105_cse);
  assign mux_339_nl = MUX_s_1_2_2(mux_338_nl, mux_335_nl, lfst_exit_addon_loop_lpi_1_dfm_st_1_1);
  assign mux_340_nl = MUX_s_1_2_2(mux_339_nl, mux_412_itm, dpc_loop_in_asn_sft_1_lpi_1_dfm_1);
  assign mux_341_nl = MUX_s_1_2_2((~ mux_340_nl), nor_tmp_73, exitL_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1);
  assign mux_363_nl = MUX_s_1_2_2(mux_362_nl, mux_341_nl, addon_loop_or_7_tmp_2);
  assign mux_333_nl = MUX_s_1_2_2(mux_412_itm, mux_tmp_324, nor_120_cse);
  assign mux_334_nl = MUX_s_1_2_2((~ mux_333_nl), nor_tmp_73, exitL_exitL_exitL_exitL_exitL_exitL_exit_MF_outer_1_lpi_1);
  assign mux_364_nl = MUX_s_1_2_2(mux_363_nl, mux_334_nl, dpc_loop_out_asn_sft_lpi_1_dfm_1);
  assign mux_366_nl = MUX_s_1_2_2(mux_365_nl, mux_364_nl, main_stage_0_2);
  assign mux_367_nl = MUX_s_1_2_2(nor_tmp_73, mux_366_nl, lfst_exit_dpc_loop_in_lpi_1);
  assign nor_83_nl = ~(dpc_loop_out_asn_sft_lpi_1 | (~ mux_367_nl));
  assign mux_368_nl = MUX_s_1_2_2(nor_tmp_73, nor_83_nl, lfst_exitL_exit_dpc_loop_in_lpi_1);
  assign mux_369_nl = MUX_s_1_2_2(nor_tmp_72, mux_368_nl, lfst_exit_addon_loop_lpi_1_dfm_3_0);
  assign mux_370_nl = MUX_s_1_2_2(mux_369_nl, nor_tmp_72, exitL_exitL_exit_dpc_loop_in_lpi_1);
  assign nor_82_nl = ~(lfst_exit_addon_loop_lpi_1_dfm_3_1 | (~ mux_370_nl));
  assign mux_371_nl = MUX_s_1_2_2(nor_82_nl, nor_tmp_72, exitL_exit_addon_loop_sva);
  assign and_66_nl = (~ mux_tmp_88) & lfst_exit_addon_loop_lpi_1_dfm_0_1 & lfst_exitL_exit_dpc_loop_in_lpi_1
      & lfst_exit_dpc_loop_in_lpi_1 & (~(sfi_exit_dpc_loop_in_lpi_1 | sfi_dpc_reg_eb_lpi_1
      | exitL_exitL_exit_dpc_loop_in_lpi_1));
  assign rawWin_loop_mux_16_nl = MUX_s_1_2_2(rawWin_loop_and_m1c_mx0w0, rawWin_loop_and_m1c,
      and_66_nl);
  assign dpc_loop_out_mux_220_nl = MUX_v_13_2_2(dpc_loop_out_row_lpi_1_dfm_1_1, ({9'b000000000
      , line_write_i_lpi_1_1_0 , 2'b01}), and_dcpl_51);
  assign dpc_loop_out_mux_221_nl = MUX_v_2_2_2(2'b01, line_write_i_lpi_1_1_0, and_dcpl_51);
  assign nl_z_out = dpc_loop_out_mux_220_nl + conv_u2u_3_13({and_dcpl_51 , dpc_loop_out_mux_221_nl});
  assign z_out = nl_z_out[12:0];
  assign defectPixelDetection_1_mux_6_nl = MUX_v_12_2_2(rawWindow_3_3_1_lpi_1_mx0,
      rawWindow_0_0_lpi_1_dfm_1, mux_tmp_96);
  assign nl_acc_1_nl = ({1'b1 , defectPixelDetection_1_mux_6_nl , 1'b1}) + conv_u2u_13_14({(~
      rawWindow_2_2_1_lpi_1_mx0) , 1'b1});
  assign acc_1_nl = nl_acc_1_nl[13:0];
  assign z_out_1 = readslicef_14_13_1(acc_1_nl);
  assign MF_inter_MF_inter_nor_3_nl = ~(MF_inter_else_land_lpi_1_dfm_mx0 | MF_inter_acc_itm_3_1);
  assign MF_inter_1_MF_inter_1_nor_3_nl = ~(MF_inter_1_else_land_lpi_1_dfm_mx0 |
      MF_inter_1_acc_itm_3_1);
  assign MF_inter_mux_25_m1c = MUX_s_1_2_2(MF_inter_MF_inter_nor_3_nl, MF_inter_1_MF_inter_1_nor_3_nl,
      and_dcpl_53);
  assign MF_inter_and_27_nl = MF_inter_else_land_lpi_1_dfm_mx0 & (~ MF_inter_acc_itm_3_1);
  assign MF_inter_1_and_27_nl = MF_inter_1_else_land_lpi_1_dfm_mx0 & (~ MF_inter_1_acc_itm_3_1);
  assign MF_inter_mux_26_m1c = MUX_s_1_2_2(MF_inter_and_27_nl, MF_inter_1_and_27_nl,
      and_dcpl_53);
  assign MF_inter_and_34_nl = (~ and_dcpl_53) & MF_inter_mux_25_m1c;
  assign MF_inter_and_35_nl = and_dcpl_53 & MF_inter_mux_25_m1c;
  assign MF_inter_and_36_nl = (~ and_dcpl_53) & MF_inter_mux_26_m1c;
  assign MF_inter_and_37_nl = and_dcpl_53 & MF_inter_mux_26_m1c;
  assign MF_inter_and_28_nl = (MF_inter_j_3_0_lpi_1_dfm_2_0_1==3'b001) & MF_inter_acc_itm_3_1;
  assign MF_inter_1_and_28_nl = (MF_inter_1_j_3_0_lpi_1_dfm_2_0_1==3'b001) & MF_inter_1_acc_itm_3_1;
  assign MF_inter_mux_27_nl = MUX_s_1_2_2(MF_inter_and_28_nl, MF_inter_1_and_28_nl,
      and_dcpl_53);
  assign MF_inter_and_29_nl = (MF_inter_j_3_0_lpi_1_dfm_2_0_1==3'b010) & MF_inter_acc_itm_3_1;
  assign MF_inter_1_and_29_nl = (MF_inter_1_j_3_0_lpi_1_dfm_2_0_1==3'b010) & MF_inter_1_acc_itm_3_1;
  assign MF_inter_mux_28_nl = MUX_s_1_2_2(MF_inter_and_29_nl, MF_inter_1_and_29_nl,
      and_dcpl_53);
  assign MF_inter_and_30_nl = (MF_inter_j_3_0_lpi_1_dfm_2_0_1==3'b011) & MF_inter_acc_itm_3_1;
  assign MF_inter_1_and_30_nl = (MF_inter_1_j_3_0_lpi_1_dfm_2_0_1==3'b011) & MF_inter_1_acc_itm_3_1;
  assign MF_inter_mux_29_nl = MUX_s_1_2_2(MF_inter_and_30_nl, MF_inter_1_and_30_nl,
      and_dcpl_53);
  assign MF_inter_and_31_nl = (MF_inter_j_3_0_lpi_1_dfm_2_0_1[2]) & MF_inter_nor_2_cse_1
      & MF_inter_acc_itm_3_1;
  assign MF_inter_1_and_31_nl = (MF_inter_1_j_3_0_lpi_1_dfm_2_0_1[2]) & MF_inter_1_nor_2_cse_1
      & MF_inter_1_acc_itm_3_1;
  assign MF_inter_mux_30_nl = MUX_s_1_2_2(MF_inter_and_31_nl, MF_inter_1_and_31_nl,
      and_dcpl_53);
  assign MF_inter_and_32_nl = (MF_inter_j_3_0_lpi_1_dfm_2_0_1==3'b101) & MF_inter_acc_itm_3_1;
  assign MF_inter_1_and_32_nl = (MF_inter_1_j_3_0_lpi_1_dfm_2_0_1==3'b101) & MF_inter_1_acc_itm_3_1;
  assign MF_inter_mux_31_nl = MUX_s_1_2_2(MF_inter_and_32_nl, MF_inter_1_and_32_nl,
      and_dcpl_53);
  assign MF_inter_and_33_nl = (MF_inter_j_3_0_lpi_1_dfm_2_0_1==3'b110) & MF_inter_acc_itm_3_1;
  assign MF_inter_1_and_33_nl = (MF_inter_1_j_3_0_lpi_1_dfm_2_0_1==3'b110) & MF_inter_1_acc_itm_3_1;
  assign MF_inter_mux_32_nl = MUX_s_1_2_2(MF_inter_and_33_nl, MF_inter_1_and_33_nl,
      and_dcpl_53);
  assign z_out_6 = MUX1HOT_v_12_10_2(medianFilter_item_lpi_1, medianFilter_1_item_lpi_1,
      MF_inter_else_aif_slc_arr_sort_12_11_0_ncse_sva_2, MF_inter_1_else_aif_slc_arr_sort_12_11_0_ncse_sva_2,
      arr_sort_1_lpi_1, arr_sort_2_lpi_1, arr_sort_3_lpi_1, arr_sort_4_lpi_1, arr_sort_5_lpi_1,
      arr_sort_6_lpi_1, {MF_inter_and_34_nl , MF_inter_and_35_nl , MF_inter_and_36_nl
      , MF_inter_and_37_nl , MF_inter_mux_27_nl , MF_inter_mux_28_nl , MF_inter_mux_29_nl
      , MF_inter_mux_30_nl , MF_inter_mux_31_nl , MF_inter_mux_32_nl});

  function automatic [11:0] MUX1HOT_v_12_10_2;
    input [11:0] input_9;
    input [11:0] input_8;
    input [11:0] input_7;
    input [11:0] input_6;
    input [11:0] input_5;
    input [11:0] input_4;
    input [11:0] input_3;
    input [11:0] input_2;
    input [11:0] input_1;
    input [11:0] input_0;
    input [9:0] sel;
    reg [11:0] result;
  begin
    result = input_0 & {12{sel[0]}};
    result = result | ( input_1 & {12{sel[1]}});
    result = result | ( input_2 & {12{sel[2]}});
    result = result | ( input_3 & {12{sel[3]}});
    result = result | ( input_4 & {12{sel[4]}});
    result = result | ( input_5 & {12{sel[5]}});
    result = result | ( input_6 & {12{sel[6]}});
    result = result | ( input_7 & {12{sel[7]}});
    result = result | ( input_8 & {12{sel[8]}});
    result = result | ( input_9 & {12{sel[9]}});
    MUX1HOT_v_12_10_2 = result;
  end
  endfunction


  function automatic [11:0] MUX1HOT_v_12_3_2;
    input [11:0] input_2;
    input [11:0] input_1;
    input [11:0] input_0;
    input [2:0] sel;
    reg [11:0] result;
  begin
    result = input_0 & {12{sel[0]}};
    result = result | ( input_1 & {12{sel[1]}});
    result = result | ( input_2 & {12{sel[2]}});
    MUX1HOT_v_12_3_2 = result;
  end
  endfunction


  function automatic [11:0] MUX1HOT_v_12_6_2;
    input [11:0] input_5;
    input [11:0] input_4;
    input [11:0] input_3;
    input [11:0] input_2;
    input [11:0] input_1;
    input [11:0] input_0;
    input [5:0] sel;
    reg [11:0] result;
  begin
    result = input_0 & {12{sel[0]}};
    result = result | ( input_1 & {12{sel[1]}});
    result = result | ( input_2 & {12{sel[2]}});
    result = result | ( input_3 & {12{sel[3]}});
    result = result | ( input_4 & {12{sel[4]}});
    result = result | ( input_5 & {12{sel[5]}});
    MUX1HOT_v_12_6_2 = result;
  end
  endfunction


  function automatic [12:0] MUX1HOT_v_13_3_2;
    input [12:0] input_2;
    input [12:0] input_1;
    input [12:0] input_0;
    input [2:0] sel;
    reg [12:0] result;
  begin
    result = input_0 & {13{sel[0]}};
    result = result | ( input_1 & {13{sel[1]}});
    result = result | ( input_2 & {13{sel[2]}});
    MUX1HOT_v_13_3_2 = result;
  end
  endfunction


  function automatic [0:0] MUX_s_1_2_2;
    input [0:0] input_0;
    input [0:0] input_1;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [11:0] MUX_v_12_25_2x0x1x2x3x4x5x6x7;
    input [11:0] input_8;
    input [11:0] input_9;
    input [11:0] input_10;
    input [11:0] input_11;
    input [11:0] input_12;
    input [11:0] input_13;
    input [11:0] input_14;
    input [11:0] input_15;
    input [11:0] input_16;
    input [11:0] input_17;
    input [11:0] input_18;
    input [11:0] input_19;
    input [11:0] input_20;
    input [11:0] input_21;
    input [11:0] input_22;
    input [11:0] input_23;
    input [11:0] input_24;
    input [4:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      5'b01000 : begin
        result = input_8;
      end
      5'b01001 : begin
        result = input_9;
      end
      5'b01010 : begin
        result = input_10;
      end
      5'b01011 : begin
        result = input_11;
      end
      5'b01100 : begin
        result = input_12;
      end
      5'b01101 : begin
        result = input_13;
      end
      5'b01110 : begin
        result = input_14;
      end
      5'b01111 : begin
        result = input_15;
      end
      5'b10000 : begin
        result = input_16;
      end
      5'b10001 : begin
        result = input_17;
      end
      5'b10010 : begin
        result = input_18;
      end
      5'b10011 : begin
        result = input_19;
      end
      5'b10100 : begin
        result = input_20;
      end
      5'b10101 : begin
        result = input_21;
      end
      5'b10110 : begin
        result = input_22;
      end
      5'b10111 : begin
        result = input_23;
      end
      default : begin
        result = input_24;
      end
    endcase
    MUX_v_12_25_2x0x1x2x3x4x5x6x7 = result;
  end
  endfunction


  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [0:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction


  function automatic [11:0] MUX_v_12_5_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [11:0] input_2;
    input [11:0] input_3;
    input [11:0] input_4;
    input [2:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      3'b000 : begin
        result = input_0;
      end
      3'b001 : begin
        result = input_1;
      end
      3'b010 : begin
        result = input_2;
      end
      3'b011 : begin
        result = input_3;
      end
      default : begin
        result = input_4;
      end
    endcase
    MUX_v_12_5_2 = result;
  end
  endfunction


  function automatic [11:0] MUX_v_12_7_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [11:0] input_2;
    input [11:0] input_3;
    input [11:0] input_4;
    input [11:0] input_5;
    input [11:0] input_6;
    input [2:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      3'b000 : begin
        result = input_0;
      end
      3'b001 : begin
        result = input_1;
      end
      3'b010 : begin
        result = input_2;
      end
      3'b011 : begin
        result = input_3;
      end
      3'b100 : begin
        result = input_4;
      end
      3'b101 : begin
        result = input_5;
      end
      default : begin
        result = input_6;
      end
    endcase
    MUX_v_12_7_2 = result;
  end
  endfunction


  function automatic [11:0] MUX_v_12_8_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [11:0] input_2;
    input [11:0] input_3;
    input [11:0] input_4;
    input [11:0] input_5;
    input [11:0] input_6;
    input [11:0] input_7;
    input [2:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      3'b000 : begin
        result = input_0;
      end
      3'b001 : begin
        result = input_1;
      end
      3'b010 : begin
        result = input_2;
      end
      3'b011 : begin
        result = input_3;
      end
      3'b100 : begin
        result = input_4;
      end
      3'b101 : begin
        result = input_5;
      end
      3'b110 : begin
        result = input_6;
      end
      default : begin
        result = input_7;
      end
    endcase
    MUX_v_12_8_2 = result;
  end
  endfunction


  function automatic [12:0] MUX_v_13_2_2;
    input [12:0] input_0;
    input [12:0] input_1;
    input [0:0] sel;
    reg [12:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_13_2_2 = result;
  end
  endfunction


  function automatic [13:0] MUX_v_14_2_2;
    input [13:0] input_0;
    input [13:0] input_1;
    input [0:0] sel;
    reg [13:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_14_2_2 = result;
  end
  endfunction


  function automatic [1:0] MUX_v_2_2_2;
    input [1:0] input_0;
    input [1:0] input_1;
    input [0:0] sel;
    reg [1:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_2_2_2 = result;
  end
  endfunction


  function automatic [2:0] MUX_v_3_2_2;
    input [2:0] input_0;
    input [2:0] input_1;
    input [0:0] sel;
    reg [2:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_3_2_2 = result;
  end
  endfunction


  function automatic [0:0] readslicef_12_1_11;
    input [11:0] vector;
    reg [11:0] tmp;
  begin
    tmp = vector >> 11;
    readslicef_12_1_11 = tmp[0:0];
  end
  endfunction


  function automatic [11:0] readslicef_13_12_1;
    input [12:0] vector;
    reg [12:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_13_12_1 = tmp[11:0];
  end
  endfunction


  function automatic [0:0] readslicef_13_1_12;
    input [12:0] vector;
    reg [12:0] tmp;
  begin
    tmp = vector >> 12;
    readslicef_13_1_12 = tmp[0:0];
  end
  endfunction


  function automatic [12:0] readslicef_14_13_1;
    input [13:0] vector;
    reg [13:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_14_13_1 = tmp[12:0];
  end
  endfunction


  function automatic [0:0] readslicef_14_1_13;
    input [13:0] vector;
    reg [13:0] tmp;
  begin
    tmp = vector >> 13;
    readslicef_14_1_13 = tmp[0:0];
  end
  endfunction


  function automatic [0:0] readslicef_3_1_2;
    input [2:0] vector;
    reg [2:0] tmp;
  begin
    tmp = vector >> 2;
    readslicef_3_1_2 = tmp[0:0];
  end
  endfunction


  function automatic [0:0] readslicef_4_1_3;
    input [3:0] vector;
    reg [3:0] tmp;
  begin
    tmp = vector >> 3;
    readslicef_4_1_3 = tmp[0:0];
  end
  endfunction


  function automatic [0:0] readslicef_5_1_4;
    input [4:0] vector;
    reg [4:0] tmp;
  begin
    tmp = vector >> 4;
    readslicef_5_1_4 = tmp[0:0];
  end
  endfunction


  function automatic [13:0] conv_s2u_12_14 ;
    input [11:0]  vector ;
  begin
    conv_s2u_12_14 = {{2{vector[11]}}, vector};
  end
  endfunction


  function automatic [13:0] conv_s2u_13_14 ;
    input [12:0]  vector ;
  begin
    conv_s2u_13_14 = {vector[12], vector};
  end
  endfunction


  function automatic [3:0] conv_u2s_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2s_3_4 =  {1'b0, vector};
  end
  endfunction


  function automatic [12:0] conv_u2s_12_13 ;
    input [11:0]  vector ;
  begin
    conv_u2s_12_13 =  {1'b0, vector};
  end
  endfunction


  function automatic [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction


  function automatic [2:0] conv_u2u_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_3 = {1'b0, vector};
  end
  endfunction


  function automatic [4:0] conv_u2u_3_5 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_5 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [12:0] conv_u2u_3_13 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_13 = {{10{1'b0}}, vector};
  end
  endfunction


  function automatic [13:0] conv_u2u_11_14 ;
    input [10:0]  vector ;
  begin
    conv_u2u_11_14 = {{3{1'b0}}, vector};
  end
  endfunction


  function automatic [12:0] conv_u2u_12_13 ;
    input [11:0]  vector ;
  begin
    conv_u2u_12_13 = {1'b0, vector};
  end
  endfunction


  function automatic [13:0] conv_u2u_13_14 ;
    input [12:0]  vector ;
  begin
    conv_u2u_13_14 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns_core
// ------------------------------------------------------------------


module isp_rawdns_core (
  clk, arst_n, top_reg_frameWidth, top_reg_frameHeight, rawdns_reg_sigma, rawdns_reg_eb,
      rawdns_reg_Filterpara, rawdns_reg_invksigma2, src_rsc_dat, src_rsc_vld, src_rsc_rdy,
      dst_rsc_dat, dst_rsc_vld, dst_rsc_rdy, rawdns_lines_rsc_0_0_i_q_d, rawdns_lines_rsc_0_1_i_q_d,
      rawdns_lines_rsc_0_2_i_q_d, rawdns_lines_rsc_0_3_i_q_d, rawdns_lines_rsc_0_4_i_q_d,
      rawdns_lines_rsc_0_5_i_q_d, rawdns_lines_rsc_0_6_i_q_d, rawdns_lines_rsc_0_7_i_q_d,
      rawdns_lines_rsc_0_8_i_q_d, rawdns_lines_rsc_0_9_i_q_d, rawdns_lines_rsc_0_0_i_radr_d_pff,
      rawdns_lines_rsc_0_0_i_d_d_pff, rawdns_lines_rsc_0_0_i_we_d_pff, rawdns_lines_rsc_0_0_i_re_d_pff,
      rawdns_lines_rsc_0_1_i_we_d_pff, rawdns_lines_rsc_0_1_i_re_d_pff, rawdns_lines_rsc_0_2_i_we_d_pff,
      rawdns_lines_rsc_0_2_i_re_d_pff, rawdns_lines_rsc_0_3_i_we_d_pff, rawdns_lines_rsc_0_3_i_re_d_pff,
      rawdns_lines_rsc_0_4_i_we_d_pff, rawdns_lines_rsc_0_4_i_re_d_pff, rawdns_lines_rsc_0_5_i_we_d_pff,
      rawdns_lines_rsc_0_5_i_re_d_pff, rawdns_lines_rsc_0_6_i_we_d_pff, rawdns_lines_rsc_0_6_i_re_d_pff,
      rawdns_lines_rsc_0_7_i_we_d_pff, rawdns_lines_rsc_0_7_i_re_d_pff, rawdns_lines_rsc_0_8_i_we_d_pff,
      rawdns_lines_rsc_0_8_i_re_d_pff, rawdns_lines_rsc_0_9_i_we_d_pff, rawdns_lines_rsc_0_9_i_re_d_pff
);
  input clk;
  input arst_n;
  input [12:0] top_reg_frameWidth;
  input [12:0] top_reg_frameHeight;
  input [5:0] rawdns_reg_sigma;
  input rawdns_reg_eb;
  input [6:0] rawdns_reg_Filterpara;
  input [11:0] rawdns_reg_invksigma2;
  input [11:0] src_rsc_dat;
  input src_rsc_vld;
  output src_rsc_rdy;
  output [11:0] dst_rsc_dat;
  output dst_rsc_vld;
  input dst_rsc_rdy;
  input [11:0] rawdns_lines_rsc_0_0_i_q_d;
  input [11:0] rawdns_lines_rsc_0_1_i_q_d;
  input [11:0] rawdns_lines_rsc_0_2_i_q_d;
  input [11:0] rawdns_lines_rsc_0_3_i_q_d;
  input [11:0] rawdns_lines_rsc_0_4_i_q_d;
  input [11:0] rawdns_lines_rsc_0_5_i_q_d;
  input [11:0] rawdns_lines_rsc_0_6_i_q_d;
  input [11:0] rawdns_lines_rsc_0_7_i_q_d;
  input [11:0] rawdns_lines_rsc_0_8_i_q_d;
  input [11:0] rawdns_lines_rsc_0_9_i_q_d;
  output [11:0] rawdns_lines_rsc_0_0_i_radr_d_pff;
  output [11:0] rawdns_lines_rsc_0_0_i_d_d_pff;
  output rawdns_lines_rsc_0_0_i_we_d_pff;
  output rawdns_lines_rsc_0_0_i_re_d_pff;
  output rawdns_lines_rsc_0_1_i_we_d_pff;
  output rawdns_lines_rsc_0_1_i_re_d_pff;
  output rawdns_lines_rsc_0_2_i_we_d_pff;
  output rawdns_lines_rsc_0_2_i_re_d_pff;
  output rawdns_lines_rsc_0_3_i_we_d_pff;
  output rawdns_lines_rsc_0_3_i_re_d_pff;
  output rawdns_lines_rsc_0_4_i_we_d_pff;
  output rawdns_lines_rsc_0_4_i_re_d_pff;
  output rawdns_lines_rsc_0_5_i_we_d_pff;
  output rawdns_lines_rsc_0_5_i_re_d_pff;
  output rawdns_lines_rsc_0_6_i_we_d_pff;
  output rawdns_lines_rsc_0_6_i_re_d_pff;
  output rawdns_lines_rsc_0_7_i_we_d_pff;
  output rawdns_lines_rsc_0_7_i_re_d_pff;
  output rawdns_lines_rsc_0_8_i_we_d_pff;
  output rawdns_lines_rsc_0_8_i_re_d_pff;
  output rawdns_lines_rsc_0_9_i_we_d_pff;
  output rawdns_lines_rsc_0_9_i_re_d_pff;


  // Interconnect Declarations
  wire core_wen;
  wire core_wten;
  wire src_rsci_wen_comp;
  wire [11:0] src_rsci_idat_mxwt;
  wire dst_rsci_wen_comp;
  reg [11:0] dst_rsci_idat;
  wire [11:0] rawdns_lines_rsc_0_0_i_q_d_mxwt;
  wire [11:0] rawdns_lines_rsc_0_1_i_q_d_mxwt;
  wire [11:0] rawdns_lines_rsc_0_2_i_q_d_mxwt;
  wire [11:0] rawdns_lines_rsc_0_3_i_q_d_mxwt;
  wire [11:0] rawdns_lines_rsc_0_4_i_q_d_mxwt;
  wire [11:0] rawdns_lines_rsc_0_5_i_q_d_mxwt;
  wire [11:0] rawdns_lines_rsc_0_6_i_q_d_mxwt;
  wire [11:0] rawdns_lines_rsc_0_7_i_q_d_mxwt;
  wire [11:0] rawdns_lines_rsc_0_8_i_q_d_mxwt;
  wire [11:0] rawdns_lines_rsc_0_9_i_q_d_mxwt;
  wire [1:0] rawdns_process_for_mux1h_350_tmp;
  wire [1:0] Cal_Eur_Distance_for_acc_tmp;
  wire [2:0] nl_Cal_Eur_Distance_for_acc_tmp;
  wire Cal_Eur_Distance_for_for_xor_tmp;
  wire pixel_loop_equal_1_tmp;
  wire [9:0] padding_loop2_mux_125_tmp;
  wire [12:0] rawdns_process_acc_tmp;
  wire [13:0] nl_rawdns_process_acc_tmp;
  wire padding_loop2_or_24_tmp_2;
  wire padding_loop2_padding_loop2_or_1_tmp;
  wire padding_loop2_and_6_tmp;
  wire padding_loop2_and_5_tmp;
  wire rawdns_process_rawdns_process_rawdns_process_or_tmp_2;
  wire [3:0] pixel_loop_if_1_for_pixel_loop_if_1_for_acc_tmp;
  wire [4:0] nl_pixel_loop_if_1_for_pixel_loop_if_1_for_acc_tmp;
  wire or_tmp_17;
  wire or_dcpl_15;
  wire or_tmp_96;
  wire mux_tmp_91;
  wire mux_tmp_93;
  wire or_tmp_228;
  wire and_dcpl_162;
  wire and_dcpl_169;
  wire or_dcpl_51;
  wire and_dcpl_177;
  wire and_dcpl_178;
  wire and_dcpl_179;
  wire and_dcpl_180;
  wire or_dcpl_67;
  wire or_dcpl_68;
  wire or_dcpl_69;
  wire or_dcpl_73;
  wire or_dcpl_75;
  wire or_dcpl_77;
  wire or_dcpl_80;
  wire or_dcpl_81;
  wire or_dcpl_86;
  wire or_dcpl_91;
  wire or_dcpl_97;
  wire or_dcpl_102;
  wire and_dcpl_182;
  wire and_dcpl_183;
  wire or_tmp_276;
  wire mux_tmp_212;
  wire or_dcpl_110;
  wire or_dcpl_114;
  wire or_dcpl_118;
  wire mux_tmp_213;
  wire or_dcpl_122;
  wire or_dcpl_125;
  wire or_dcpl_127;
  wire or_dcpl_128;
  wire or_dcpl_129;
  wire mux_tmp_218;
  wire not_tmp_181;
  wire or_dcpl_131;
  wire or_dcpl_132;
  wire or_dcpl_134;
  wire or_dcpl_139;
  wire or_dcpl_180;
  wire and_tmp_24;
  wire or_tmp_292;
  wire mux_tmp_224;
  wire or_dcpl_268;
  wire and_dcpl_193;
  wire and_dcpl_196;
  wire and_dcpl_199;
  wire and_dcpl_202;
  wire and_dcpl_204;
  wire or_dcpl_296;
  wire and_dcpl_205;
  wire and_dcpl_207;
  wire and_dcpl_210;
  wire and_dcpl_218;
  wire and_dcpl_219;
  wire mux_tmp_230;
  wire or_tmp_301;
  wire or_tmp_302;
  wire or_tmp_303;
  wire and_tmp_27;
  wire mux_tmp_249;
  wire and_tmp_29;
  wire mux_tmp_253;
  wire or_dcpl_337;
  wire operator_4_true_2_acc_tmp_2;
  wire operator_4_true_3_acc_tmp_2;
  wire lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_5_2_1;
  wire [1:0] lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_5_1_0_1;
  wire pixel_loop_asn_sft_lpi_1_dfm_mx0;
  wire lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_2_1;
  wire exitL_exit_rawdns_process_for_lpi_1_dfm_1;
  wire rawdns_process_for_equal_tmp_3;
  wire rawdns_process_for_or_tmp_1;
  wire rawdns_process_for_and_157_ssc_1;
  wire exit_reg_refresh_out_loop_lpi_1_dfm_3;
  wire rawdns_process_for_equal_tmp_5;
  wire rawdns_process_for_equal_tmp_4;
  wire exit_rawdns_process_for_lpi_1_dfm_3;
  wire pixel_loop_if_1_asn_sft_lpi_1_mx0;
  wire exit_rawdns_process_for_for_lpi_1_dfm_2;
  wire exitL_exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1;
  wire lfst_exit_Cal_Eur_Distance_for_1_lpi_1_dfm_3_1_1;
  wire lfst_exit_Cal_Eur_Distance_for_1_lpi_1_dfm_3_0_1;
  wire rawdns_process_for_for_asn_sft_lpi_1_dfm_mx0;
  wire lfst_exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1_1;
  wire Cal_Eur_Distance_for_1_equal_tmp_2;
  wire Cal_Eur_Distance_for_1_and_56_ssc_1;
  wire Cal_Eur_Distance_for_1_and_57_ssc_1;
  wire lfst_exit_Cal_Eur_Distance_for_1_lpi_1_dfm_0_1;
  wire Cal_Eur_Distance_for_1_equal_tmp_3;
  wire exit_Cal_Eur_Distance_for_lpi_1_dfm_3;
  wire Cal_Eur_Distance_for_1_or_tmp_1;
  wire Cal_Eur_Distance_for_1_Cal_Eur_Distance_for_1_nor_1_cse_1;
  reg lfst_exit_Cal_Eur_Distance_for_1_lpi_1_1;
  reg lfst_exit_Cal_Eur_Distance_for_1_lpi_1_0;
  wire lfst_exitL_exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1;
  reg lfst_exitL_exit_Cal_Eur_Distance_for_1_lpi_1;
  reg exitL_exitL_exit_Cal_Eur_Distance_for_1_lpi_1;
  reg lfst_exit_rawdns_process_for_for_1_lpi_1;
  wire lfst_exit_rawdns_process_for_lpi_1_dfm_1;
  reg [2:0] rawdns_process_l_3_1_lpi_1;
  reg lfst_exit_rawdns_process_for_lpi_1;
  reg [2:0] rawdns_process_k_3_1_lpi_1;
  wire rawdns_process_for_rawdns_process_for_and_cse_1;
  wire rawdns_process_for_rawdns_process_for_nor_1_cse_1;
  reg lfst_exitL_exit_rawdns_process_for_lpi_1_2;
  reg [1:0] lfst_exitL_exit_rawdns_process_for_lpi_1_1_0;
  reg sfi_rawdns_reg_eb_1_lpi_1;
  wire lfst_exitL_exitL_exit_rawdns_process_for_lpi_1_dfm_1;
  reg lfst_exitL_exitL_exit_rawdns_process_for_lpi_1;
  wire lfst_exitL_exitL_exitL_exit_rawdns_process_for_lpi_1_dfm_1;
  reg lfst_exitL_exitL_exitL_exit_rawdns_process_for_lpi_1;
  wire exitL_exitL_exitL_exitL_exit_rawdns_process_for_lpi_1_dfm_1;
  reg exitL_exitL_exitL_exitL_exit_rawdns_process_for_lpi_1;
  wire padding_loop2_padding_loop2_nor_2_cse_1;
  reg lfst_exit_padding_loop2_lpi_1_1;
  reg lfst_exit_padding_loop2_lpi_1_0;
  wire lfst_exitL_exit_padding_loop2_lpi_1_dfm_1_1;
  wire lfst_exitL_exit_padding_loop2_lpi_1_dfm_0_1;
  reg lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_1;
  reg lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0;
  reg pixel_loop_asn_sft_1_lpi_1_dfm_1;
  reg padding_loop2_equal_tmp_1;
  reg padding_loop2_equal_tmp_3_1;
  reg pixel_loop_if_1_asn_sft_lpi_1;
  reg rawdns_process_for_equal_tmp_2_1;
  reg pixel_loop_asn_sft_lpi_1_dfm_1;
  wire Cal_Eur_Distance_for_for_and_stg_2_0_sva_1;
  wire Cal_Eur_Distance_for_for_and_stg_1_3_sva_1;
  wire Cal_Eur_Distance_for_for_and_stg_1_2_sva_1;
  wire Cal_Eur_Distance_for_for_and_stg_1_1_sva_1;
  wire Cal_Eur_Distance_for_for_and_stg_1_0_sva_1;
  reg Cal_weight_else_else_else_if_slc_operator_26_false_2_acc_30_svs_1;
  reg Cal_weight_else_else_slc_30_svs_1;
  reg Cal_weight_else_slc_30_svs_1;
  reg Cal_weight_else_if_if_slc_operator_26_false_acc_29_svs_1;
  reg pixel_loop_asn_sft_1_lpi_1_dfm_2;
  wire pixel_loop_if_1_for_and_stg_2_5_sva_1;
  reg reg_refresh_inner_loop_and_stg_5_45_sva_2;
  reg reg_refresh_inner_loop_acc_decb_sva_2_6;
  wire pixel_loop_if_1_for_and_stg_2_2_sva_1;
  reg reg_refresh_inner_loop_and_stg_5_34_sva_2;
  wire pixel_loop_if_1_for_and_stg_1_3_sva_1;
  wire pixel_loop_if_1_for_and_stg_1_0_sva_1;
  wire pixel_loop_if_1_for_and_stg_1_1_sva_1;
  wire pixel_loop_if_1_for_and_stg_1_2_sva_1;
  reg reg_refresh_inner_loop_and_stg_5_54_sva_2;
  reg reg_refresh_inner_loop_and_stg_5_43_sva_2;
  reg reg_refresh_inner_loop_and_stg_5_32_sva_2;
  reg reg_refresh_inner_loop_and_stg_5_21_sva_2;
  reg reg_refresh_inner_loop_and_stg_5_10_sva_2;
  reg pixel_loop_if_1_for_mul_sdt_3_0_sva_2_0;
  wire lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_1_1;
  wire lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0_1;
  wire padding_loop2_or_tmp_2;
  reg sfi_rawdns_reg_eb_lpi_1;
  wire exit_pixel_loop_lpi_1_dfm_1;
  wire padding_loop2_equal_tmp_5;
  wire padding_loop2_equal_tmp_4;
  wire Cal_Eur_Distance_for_for_xor_psp_mx0;
  wire lfst_exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1_mx0;
  wire pixel_loop_and_164_tmp_1;
  wire pixel_loop_and_135_tmp_1;
  wire padding_loop2_or_401_tmp_1;
  wire pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0;
  wire padding_loop2_equal_tmp_7;
  reg asn_sft_lpi_1;
  wire padding_loop2_or_tmp_3;
  wire lfst_exit_padding_loop2_lpi_1_dfm_3_0_1;
  wire padding_loop2_and_7_ssc_1;
  wire padding_loop2_and_8_ssc_1;
  wire exitL_exitL_exit_rawdns_process_for_lpi_1_dfm_1;
  wire rawdns_process_for_nor_tmp_1;
  wire [3:0] k_1_sva_2;
  wire [4:0] nl_k_1_sva_2;
  wire Cal_Eur_Distance_for_1_for_and_stg_2_0_sva_1;
  wire Cal_Eur_Distance_for_1_for_and_stg_1_3_sva_1;
  wire Cal_Eur_Distance_for_1_for_and_stg_1_1_sva_1;
  wire Cal_Eur_Distance_for_1_for_and_stg_1_2_sva_1;
  wire Cal_Eur_Distance_for_1_for_and_stg_1_0_sva_1;
  wire [2:0] Cal_Eur_Distance_for_1_for_acc_sdt_1;
  wire [3:0] nl_Cal_Eur_Distance_for_1_for_acc_sdt_1;
  reg [1:0] Cal_Eur_Distance_l_1_0_lpi_1;
  wire [25:0] n_lpi_1_dfm_1;
  wire lfst_exit_padding_loop2_lpi_1_dfm_0_mx0w1;
  wire [2:0] k_2_2_0_lpi_1_dfm_1;
  wire [2:0] loop2_inner_loop_acc_10_psp_sva_1;
  wire [4:0] nl_loop2_inner_loop_acc_10_psp_sva_1;
  wire lfst_exit_padding_loop2_lpi_1_dfm_1_mx0w1;
  reg reg_refresh_inner_loop_and_stg_5_23_sva_1;
  reg loop2_inner_loop_nor_1_itm_1;
  reg reg_refresh_inner_loop_and_stg_5_12_sva_1;
  reg reg_refresh_inner_loop_and_stg_5_1_sva_1;
  reg exit_rawdns_process_for_lpi_1_dfm_2_1;
  reg [2:0] loop2_inner_loop_conc_24_itm_1_3_1;
  reg Cal_weight_else_if_else_if_slc_Cal_weight_else_if_else_if_acc_29_svs_st_1;
  wire reg_refresh_inner_loop_and_stg_5_55_sva_1;
  wire rawdns_process_for_rawdns_process_for_nor_3_cse_1;
  wire reg_refresh_inner_loop_and_stg_5_54_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_53_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_52_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_51_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_50_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_49_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_48_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_47_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_46_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_44_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_43_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_42_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_41_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_40_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_39_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_38_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_37_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_36_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_35_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_33_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_32_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_31_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_30_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_29_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_28_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_27_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_26_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_25_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_24_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_22_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_21_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_20_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_19_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_18_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_17_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_16_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_15_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_14_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_13_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_11_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_10_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_9_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_8_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_7_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_6_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_5_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_4_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_3_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_2_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_0_sva_1;
  wire reg_refresh_inner_loop_and_stg_4_31_sva_1;
  wire pixel_loop_asn_sft_lpi_1_dfm_1_mx0;
  wire reg_refresh_inner_loop_and_stg_4_30_sva_1;
  wire reg_refresh_inner_loop_and_stg_4_29_sva_1;
  wire reg_refresh_inner_loop_and_stg_4_28_sva_1;
  wire reg_refresh_inner_loop_and_stg_4_27_sva_1;
  wire reg_refresh_inner_loop_and_stg_4_26_sva_1;
  wire reg_refresh_inner_loop_and_stg_4_25_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_56_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_45_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_34_sva_1;
  wire reg_refresh_inner_loop_and_stg_5_23_sva_1_1;
  wire reg_refresh_inner_loop_and_stg_5_12_sva_1_1;
  wire reg_refresh_inner_loop_and_stg_5_1_sva_1_1;
  reg [12:0] i_lpi_1;
  wire padding_loop2_equal_tmp_6;
  wire reg_refresh_inner_loop_and_stg_4_0_sva_1;
  wire reg_refresh_inner_loop_and_stg_4_1_sva_1;
  wire reg_refresh_inner_loop_and_stg_4_2_sva_1;
  wire reg_refresh_inner_loop_and_stg_4_3_sva_1;
  wire reg_refresh_inner_loop_and_stg_4_4_sva_1;
  wire reg_refresh_inner_loop_and_stg_4_5_sva_1;
  wire reg_refresh_inner_loop_and_stg_4_6_sva_1;
  wire reg_refresh_inner_loop_and_stg_4_7_sva_1;
  wire reg_refresh_inner_loop_and_stg_4_8_sva_1;
  wire reg_refresh_inner_loop_and_stg_4_9_sva_1;
  wire reg_refresh_inner_loop_and_stg_4_10_sva_1;
  wire reg_refresh_inner_loop_and_stg_4_11_sva_1;
  wire reg_refresh_inner_loop_and_stg_4_12_sva_1;
  wire reg_refresh_inner_loop_and_stg_4_13_sva_1;
  wire reg_refresh_inner_loop_and_stg_4_14_sva_1;
  wire reg_refresh_inner_loop_and_stg_4_15_sva_1;
  wire reg_refresh_inner_loop_and_stg_4_16_sva_1;
  wire reg_refresh_inner_loop_and_stg_4_17_sva_1;
  wire reg_refresh_inner_loop_and_stg_4_18_sva_1;
  wire reg_refresh_inner_loop_and_stg_4_19_sva_1;
  wire reg_refresh_inner_loop_and_stg_4_20_sva_1;
  wire reg_refresh_inner_loop_and_stg_4_21_sva_1;
  wire reg_refresh_inner_loop_and_stg_4_22_sva_1;
  wire reg_refresh_inner_loop_and_stg_4_23_sva_1;
  wire reg_refresh_inner_loop_and_stg_4_24_sva_1;
  wire reg_refresh_inner_loop_and_stg_3_9_sva_1;
  wire reg_refresh_inner_loop_and_stg_3_10_sva_1;
  wire reg_refresh_inner_loop_and_stg_3_11_sva_1;
  wire reg_refresh_inner_loop_and_stg_3_12_sva_1;
  wire reg_refresh_inner_loop_and_stg_3_13_sva_1;
  wire reg_refresh_inner_loop_and_stg_3_14_sva_1;
  wire reg_refresh_inner_loop_and_stg_3_15_sva_1;
  wire reg_refresh_inner_loop_and_stg_3_0_sva_1;
  wire reg_refresh_inner_loop_and_stg_3_1_sva_1;
  wire reg_refresh_inner_loop_and_stg_3_2_sva_1;
  wire reg_refresh_inner_loop_and_stg_3_3_sva_1;
  wire reg_refresh_inner_loop_and_stg_3_4_sva_1;
  wire reg_refresh_inner_loop_and_stg_3_5_sva_1;
  wire reg_refresh_inner_loop_and_stg_3_6_sva_1;
  wire reg_refresh_inner_loop_and_stg_3_7_sva_1;
  wire reg_refresh_inner_loop_and_stg_3_8_sva_1;
  wire reg_refresh_inner_loop_and_stg_2_1_sva_1;
  wire reg_refresh_inner_loop_and_stg_2_2_sva_1;
  wire reg_refresh_inner_loop_and_stg_2_3_sva_1;
  wire reg_refresh_inner_loop_and_stg_2_4_sva_1;
  wire reg_refresh_inner_loop_and_stg_2_5_sva_1;
  wire reg_refresh_inner_loop_and_stg_2_6_sva_1;
  wire reg_refresh_inner_loop_and_stg_2_7_sva_1;
  wire reg_refresh_inner_loop_and_stg_2_0_sva_1;
  wire reg_refresh_inner_loop_and_stg_1_1_sva_1;
  wire reg_refresh_inner_loop_and_stg_1_2_sva_1;
  wire reg_refresh_inner_loop_and_stg_1_3_sva_1;
  wire reg_refresh_inner_loop_and_stg_1_0_sva_1;
  wire [6:0] operator_4_false_mul_cse_sva_1;
  wire [7:0] nl_operator_4_false_mul_cse_sva_1;
  wire [3:0] l_1_lpi_1_dfm_2;
  reg reg_refresh_inner_loop_and_stg_5_56_sva_1_1;
  reg lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_1_1;
  reg lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_1_2;
  reg [1:0] lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_1_1_0;
  reg exit_rawdns_process_for_lpi_1_dfm_2_st_1;
  reg lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_1_0;
  reg [2:0] pixel_loop_if_1_for_pixel_loop_if_1_for_conc_decb_3_1_sva_1;
  wire [3:0] nl_pixel_loop_if_1_for_pixel_loop_if_1_for_conc_decb_3_1_sva_1;
  reg rawdns_process_for_equal_tmp_1;
  reg main_stage_0_2;
  reg Cal_weight_Cal_weight_Cal_weight_or_itm_1;
  reg pixel_loop_if_1_if_1_pixel_loop_if_1_if_1_or_itm_1;
  reg exitL_exit_rawdns_process_for_lpi_1_dfm_st_1;
  reg pixel_loop_asn_sft_1_lpi_1;
  reg pixel_loop_asn_sft_lpi_1;
  reg sfi_pixel_loop_if_1_land_lpi_1;
  reg pixel_loop_mux_716_itm_1;
  reg rawdns_process_for_for_asn_sft_lpi_1;
  reg rawdns_process_for_for_lor_lpi_1;
  reg exitL_exitL_exit_padding_loop2_sva;
  reg main_stage_0_3;
  reg loop2_inner_loop_slc_13_svs_st_2;
  reg exit_rawdns_process_for_lpi_1_dfm_2_st_2;
  reg asn_sft_lpi_1_st_2;
  reg lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_2_0;
  reg exitL_exit_rawdns_process_for_lpi_1_dfm_st_2;
  reg [1:0] lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_2_1_0;
  reg loop2_inner_loop_loop2_inner_loop_and_4_itm_2;
  reg lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_2_2;
  reg lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_2_1;
  reg padding_loop2_and_203_itm_2;
  reg rawdns_process_for_equal_tmp_2_2;
  reg sfi_exit_pixel_loop_lpi_1_dfm_1;
  reg Cal_Eur_Distance_for_for_slc_Cal_Eur_Distance_for_for_acc_7_sdt_0_itm_1;
  reg [2:0] pixel_loop_if_1_for_conc_21_itm_1_3_1;
  reg padding_loop2_and_163_itm_1;
  reg padding_loop2_and_165_itm_1;
  reg padding_loop2_and_166_itm_1;
  reg padding_loop2_and_167_itm_1;
  reg padding_loop2_and_168_itm_1;
  reg padding_loop2_and_169_itm_1;
  reg padding_loop2_and_170_itm_1;
  reg padding_loop2_and_171_itm_1;
  reg padding_loop2_and_172_itm_1;
  reg padding_loop2_and_173_itm_1;
  reg padding_loop2_and_174_itm_1;
  reg padding_loop2_and_176_itm_1;
  reg padding_loop2_and_177_itm_1;
  reg padding_loop2_and_178_itm_1;
  reg padding_loop2_and_179_itm_1;
  reg padding_loop2_and_180_itm_1;
  reg padding_loop2_and_181_itm_1;
  reg padding_loop2_and_182_itm_1;
  reg padding_loop2_and_183_itm_1;
  reg padding_loop2_and_184_itm_1;
  reg padding_loop2_and_185_itm_1;
  reg padding_loop2_and_187_itm_1;
  reg padding_loop2_and_188_itm_1;
  reg padding_loop2_and_189_itm_1;
  reg padding_loop2_and_190_itm_1;
  reg padding_loop2_and_191_itm_1;
  reg padding_loop2_and_192_itm_1;
  reg padding_loop2_and_193_itm_1;
  reg padding_loop2_and_194_itm_1;
  reg padding_loop2_and_195_itm_1;
  reg padding_loop2_and_196_itm_1;
  reg padding_loop2_and_198_itm_1;
  reg padding_loop2_and_207_itm_1;
  reg padding_loop2_and_209_itm_1;
  reg padding_loop2_and_210_itm_1;
  reg padding_loop2_and_211_itm_1;
  reg padding_loop2_and_212_itm_1;
  reg padding_loop2_and_213_itm_1;
  reg padding_loop2_and_214_itm_1;
  reg padding_loop2_and_215_itm_1;
  reg padding_loop2_and_216_itm_1;
  reg padding_loop2_and_217_itm_1;
  reg padding_loop2_and_218_itm_1;
  reg padding_loop2_and_220_itm_1;
  reg padding_loop2_and_221_itm_1;
  reg padding_loop2_and_222_itm_1;
  reg padding_loop2_and_223_itm_1;
  reg padding_loop2_and_224_itm_1;
  reg padding_loop2_and_225_itm_1;
  reg padding_loop2_and_226_itm_1;
  reg padding_loop2_and_227_itm_1;
  reg padding_loop2_and_228_itm_1;
  reg padding_loop2_and_229_itm_1;
  reg padding_loop2_and_231_itm_1;
  reg padding_loop2_and_232_itm_1;
  reg padding_loop2_and_233_itm_1;
  reg padding_loop2_and_234_itm_1;
  reg padding_loop2_and_235_itm_1;
  reg padding_loop2_and_236_itm_1;
  reg padding_loop2_and_237_itm_1;
  reg padding_loop2_and_238_itm_1;
  reg padding_loop2_and_239_itm_1;
  reg padding_loop2_and_240_itm_1;
  reg padding_loop2_and_242_itm_1;
  reg padding_loop2_and_243_itm_1;
  reg padding_loop2_and_244_itm_1;
  reg padding_loop2_and_245_itm_1;
  reg padding_loop2_and_246_itm_1;
  reg padding_loop2_and_247_itm_1;
  reg padding_loop2_and_248_itm_1;
  reg padding_loop2_and_249_itm_1;
  reg padding_loop2_and_250_itm_1;
  reg padding_loop2_and_251_itm_1;
  reg padding_loop2_and_253_itm_1;
  reg padding_loop2_and_254_itm_1;
  reg padding_loop2_and_255_itm_1;
  reg padding_loop2_and_256_itm_1;
  reg padding_loop2_and_257_itm_1;
  reg padding_loop2_and_258_itm_1;
  reg padding_loop2_and_259_itm_1;
  reg padding_loop2_and_260_itm_1;
  reg padding_loop2_and_261_itm_1;
  reg padding_loop2_and_262_itm_1;
  reg Cal_Eur_Distance_for_1_equal_tmp_1;
  reg rawdns_process_for_for_asn_sft_lpi_1_dfm_1;
  reg exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1_1;
  reg padding_loop2_and_143_itm_1;
  reg padding_loop2_and_144_itm_1;
  reg padding_loop2_and_145_itm_1;
  reg padding_loop2_and_146_itm_1;
  reg padding_loop2_and_147_itm_1;
  reg padding_loop2_and_148_itm_1;
  reg padding_loop2_and_149_itm_1;
  reg padding_loop2_and_150_itm_1;
  reg padding_loop2_and_151_itm_1;
  reg padding_loop2_and_152_itm_1;
  reg padding_loop2_and_154_itm_1;
  reg padding_loop2_and_155_itm_1;
  reg padding_loop2_and_156_itm_1;
  reg padding_loop2_and_157_itm_1;
  reg padding_loop2_and_158_itm_1;
  reg padding_loop2_and_159_itm_1;
  reg padding_loop2_and_160_itm_1;
  reg padding_loop2_and_161_itm_1;
  reg padding_loop2_and_162_itm_1;
  reg padding_loop2_and_199_itm_1;
  reg padding_loop2_and_200_itm_1;
  reg padding_loop2_and_201_itm_1;
  reg padding_loop2_and_202_itm_1;
  reg padding_loop2_and_204_itm_1;
  reg padding_loop2_and_205_itm_1;
  reg padding_loop2_and_206_itm_1;
  reg [11:0] rawdns_process_sigma2_mul_psp_lpi_1;
  wire [29:0] Cal_Eur_Distance_Eur_distance_sva_2;
  wire [30:0] nl_Cal_Eur_Distance_Eur_distance_sva_2;
  wire [11:0] rawdns_abs_rawData_1_sva_1;
  reg [7:0] rawdns_process_max_weight_lpi_1_dfm_1;
  wire [7:0] Cal_weight_weight_lpi_1_dfm_6;
  wire [24:0] rawdns_clip_result_sva_1;
  wire [2:0] k_2_2_0_sva_2;
  wire [3:0] nl_k_2_2_0_sva_2;
  wire [2:0] k_2_0_sva_2;
  wire [3:0] nl_k_2_0_sva_2;
  reg [12:0] j_lpi_1;
  wire [13:0] nl_j_lpi_1;
  reg exit_rawdns_process_for_sva_2;
  wire exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1_mx0w0;
  reg exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1;
  wire [1:0] lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_1_0_1;
  wire sfi_rawdns_reg_eb_1_lpi_1_dfm_1;
  reg [3:0] Cal_Eur_Distance_for_for_acc_4_decb_sva_1;
  reg [2:0] pixel_loop_if_1_for_pixel_loop_if_1_for_conc_decb_3_1_sva_2;
  reg Cal_Eur_Distance_for_for_xor_psp;
  wire [2:0] Cal_Eur_Distance_for_1_for_acc_psp_1;
  wire [3:0] nl_Cal_Eur_Distance_for_1_for_acc_psp_1;
  reg [1:0] Cal_Eur_Distance_k_1_0_lpi_1;
  wire [6:0] reg_refresh_inner_loop_acc_decb_sva_1;
  wire [7:0] nl_reg_refresh_inner_loop_acc_decb_sva_1;
  wire padding_loop2_and_330_cse_1;
  wire [12:0] i_1_lpi_1_dfm_3;
  wire [13:0] padding_loop1_acc_3_psp_sva_1;
  wire [14:0] nl_padding_loop1_acc_3_psp_sva_1;
  wire [11:0] rawdns_abs_rawData_2_sva_1;
  wire padding_loop2_and_331_cse_1;
  wire [2:0] pixel_loop_if_1_for_acc_11_psp_1;
  wire [3:0] nl_pixel_loop_if_1_for_acc_11_psp_1;
  wire [2:0] loop2_inner_loop_acc_11_psp_mx0w0;
  wire [3:0] nl_loop2_inner_loop_acc_11_psp_mx0w0;
  wire pixel_loop_if_1_and_18_rgt;
  wire rawdns_process_for_for_and_1_rgt;
  wire pixel_loop_and_126_rgt;
  wire padding_loop2_and_332_rgt;
  wire rawdns_process_for_and_161_rgt;
  reg reg_dst_rsci_oswt_cse;
  reg reg_pixel_loop_asn_sft_lpi_1_dfm_st_2_cse;
  reg reg_rawdns_lines_rsc_0_0_i_oswt_cse;
  reg reg_rawdns_lines_rsc_0_1_i_oswt_cse;
  reg reg_rawdns_lines_rsc_0_2_i_oswt_cse;
  reg reg_rawdns_lines_rsc_0_3_i_oswt_cse;
  reg reg_rawdns_lines_rsc_0_4_i_oswt_cse;
  reg reg_rawdns_lines_rsc_0_5_i_oswt_cse;
  reg reg_rawdns_lines_rsc_0_6_i_oswt_cse;
  reg reg_rawdns_lines_rsc_0_7_i_oswt_cse;
  reg reg_rawdns_lines_rsc_0_8_i_oswt_cse;
  reg reg_rawdns_lines_rsc_0_9_i_oswt_cse;
  wire nor_19_cse;
  wire Cal_Eur_Distance_temp_block_and_cse;
  wire or_78_cse;
  wire or_162_cse;
  reg reg_src_rsci_oswt_cse;
  wire padding_loop2_and_cse;
  wire or_249_cse;
  wire or_231_cse;
  wire nor_62_cse;
  wire or_133_cse;
  wire or_131_cse;
  wire or_130_cse;
  wire and_311_cse;
  wire padding_loop2_and_291_tmp_1;
  wire pixel_loop_if_1_and_5_tmp_1;
  wire Cal_Eur_Distance_for_1_or_42_tmp_1;
  wire padding_loop2_and_119_tmp_1;
  wire reg_refresh_inner_loop_and_244_tmp_1;
  reg rawdns_process_for_or_tmp_1_1;
  reg rawdns_process_for_equal_tmp_1_1;
  reg rawdns_process_for_nor_tmp_1_1;
  reg operator_4_false_2_slc_operator_4_false_2_acc_3_svs_1;
  wire [1:0] Cal_Eur_Distance_l_1_0_sva_2;
  wire [2:0] nl_Cal_Eur_Distance_l_1_0_sva_2;
  wire [1:0] Cal_Eur_Distance_k_1_0_sva_2;
  wire [2:0] nl_Cal_Eur_Distance_k_1_0_sva_2;
  wire and_299_cse;
  wire rawdns_lines_rsc_0_0_i_we_d_iff;
  wire rawdns_lines_rsc_0_0_i_re_d_iff;
  wire pixel_loop_if_1_for_pixel_loop_if_1_for_and_31_rmff;
  wire rawdns_lines_rsc_0_1_i_we_d_iff;
  wire rawdns_lines_rsc_0_1_i_re_d_iff;
  wire pixel_loop_if_1_for_pixel_loop_if_1_for_and_30_rmff;
  wire rawdns_lines_rsc_0_2_i_we_d_iff;
  wire rawdns_lines_rsc_0_2_i_re_d_iff;
  wire pixel_loop_if_1_for_pixel_loop_if_1_for_and_29_rmff;
  wire rawdns_lines_rsc_0_3_i_we_d_iff;
  wire rawdns_lines_rsc_0_3_i_re_d_iff;
  wire pixel_loop_if_1_for_pixel_loop_if_1_for_and_28_rmff;
  wire rawdns_lines_rsc_0_4_i_we_d_iff;
  wire rawdns_lines_rsc_0_4_i_re_d_iff;
  wire pixel_loop_if_1_for_pixel_loop_if_1_for_and_27_rmff;
  wire rawdns_lines_rsc_0_5_i_we_d_iff;
  wire rawdns_lines_rsc_0_5_i_re_d_iff;
  wire pixel_loop_if_1_for_pixel_loop_if_1_for_and_26_rmff;
  wire rawdns_lines_rsc_0_6_i_we_d_iff;
  wire rawdns_lines_rsc_0_6_i_re_d_iff;
  wire pixel_loop_if_1_for_pixel_loop_if_1_for_and_25_rmff;
  wire rawdns_lines_rsc_0_7_i_we_d_iff;
  wire rawdns_lines_rsc_0_7_i_re_d_iff;
  wire pixel_loop_if_1_for_pixel_loop_if_1_for_and_24_rmff;
  wire rawdns_lines_rsc_0_8_i_we_d_iff;
  wire rawdns_lines_rsc_0_8_i_re_d_iff;
  wire pixel_loop_if_1_for_pixel_loop_if_1_for_and_23_rmff;
  wire rawdns_lines_rsc_0_9_i_we_d_iff;
  wire rawdns_lines_rsc_0_9_i_re_d_iff;
  wire pixel_loop_if_1_for_pixel_loop_if_1_for_and_22_rmff;
  reg [14:0] operator_42_false_slc_operator_30_false_acc_psp_14_0_itm_1;
  reg [11:0] rawdns_block_1_9_lpi_1;
  wire [11:0] rawdns_block_1_10_lpi_1_mx0;
  reg [11:0] rawdns_block_2_0_lpi_1;
  reg [11:0] rawdns_block_2_1_lpi_1;
  reg [11:0] rawdns_block_2_2_lpi_1;
  reg [11:0] rawdns_block_2_3_lpi_1;
  reg [11:0] rawdns_block_2_4_lpi_1;
  reg [11:0] rawdns_block_2_5_lpi_1;
  reg [11:0] rawdns_block_2_6_lpi_1;
  reg [11:0] rawdns_block_2_7_lpi_1;
  reg [11:0] rawdns_block_2_8_lpi_1;
  reg [11:0] rawdns_block_2_9_lpi_1;
  wire [11:0] rawdns_block_2_10_lpi_1_mx0;
  reg [11:0] rawdns_block_3_0_lpi_1;
  reg [11:0] rawdns_block_3_1_lpi_1;
  reg [11:0] rawdns_block_3_2_lpi_1;
  reg [11:0] rawdns_block_3_3_lpi_1;
  reg [11:0] rawdns_block_3_4_lpi_1;
  reg [11:0] rawdns_block_3_5_lpi_1;
  reg [11:0] rawdns_block_3_6_lpi_1;
  reg [11:0] rawdns_block_3_7_lpi_1;
  reg [11:0] rawdns_block_3_8_lpi_1;
  reg [11:0] rawdns_block_3_9_lpi_1;
  wire [11:0] rawdns_block_3_10_lpi_1_mx0;
  reg [11:0] rawdns_block_4_0_lpi_1;
  reg [11:0] rawdns_block_4_1_lpi_1;
  reg [11:0] rawdns_block_4_2_lpi_1;
  reg [11:0] rawdns_block_4_3_lpi_1;
  reg [11:0] rawdns_block_4_4_lpi_1;
  reg [11:0] rawdns_block_4_5_lpi_1;
  reg [11:0] rawdns_block_4_6_lpi_1;
  reg [11:0] rawdns_block_4_7_lpi_1;
  reg [11:0] rawdns_block_4_8_lpi_1;
  reg [11:0] rawdns_block_4_9_lpi_1;
  wire [11:0] rawdns_block_4_10_lpi_1_mx0;
  reg [11:0] rawdns_block_5_0_lpi_1;
  reg [11:0] rawdns_block_5_9_lpi_1;
  wire [11:0] rawdns_block_5_10_lpi_1_mx0;
  reg [11:0] rawdns_block_6_0_lpi_1;
  reg [11:0] rawdns_block_6_1_lpi_1;
  reg [11:0] rawdns_block_6_2_lpi_1;
  reg [11:0] rawdns_block_6_3_lpi_1;
  reg [11:0] rawdns_block_6_4_lpi_1;
  reg [11:0] rawdns_block_6_5_lpi_1;
  reg [11:0] rawdns_block_6_6_lpi_1;
  reg [11:0] rawdns_block_6_7_lpi_1;
  reg [11:0] rawdns_block_6_8_lpi_1;
  reg [11:0] rawdns_block_6_9_lpi_1;
  wire [11:0] rawdns_block_6_10_lpi_1_mx0;
  reg [11:0] rawdns_block_7_0_lpi_1;
  reg [11:0] rawdns_block_7_1_lpi_1;
  reg [11:0] rawdns_block_7_2_lpi_1;
  reg [11:0] rawdns_block_7_3_lpi_1;
  reg [11:0] rawdns_block_7_4_lpi_1;
  reg [11:0] rawdns_block_7_5_lpi_1;
  reg [11:0] rawdns_block_7_6_lpi_1;
  reg [11:0] rawdns_block_7_7_lpi_1;
  reg [11:0] rawdns_block_7_8_lpi_1;
  reg [11:0] rawdns_block_7_9_lpi_1;
  wire [11:0] rawdns_block_7_10_lpi_1_mx0;
  reg [11:0] rawdns_block_8_0_lpi_1;
  reg [11:0] rawdns_block_8_1_lpi_1;
  reg [11:0] rawdns_block_8_2_lpi_1;
  reg [11:0] rawdns_block_8_3_lpi_1;
  reg [11:0] rawdns_block_8_4_lpi_1;
  reg [11:0] rawdns_block_8_5_lpi_1;
  reg [11:0] rawdns_block_8_6_lpi_1;
  reg [11:0] rawdns_block_8_7_lpi_1;
  reg [11:0] rawdns_block_8_8_lpi_1;
  reg [11:0] rawdns_block_8_9_lpi_1;
  wire [11:0] rawdns_block_8_10_lpi_1_mx0;
  reg [11:0] rawdns_block_9_0_lpi_1;
  reg [11:0] rawdns_block_9_1_lpi_1;
  reg [11:0] rawdns_block_9_2_lpi_1;
  reg [11:0] rawdns_block_9_3_lpi_1;
  reg [11:0] rawdns_block_9_4_lpi_1;
  reg [11:0] rawdns_block_9_5_lpi_1;
  reg [11:0] rawdns_block_9_6_lpi_1;
  reg [11:0] rawdns_block_9_7_lpi_1;
  reg [11:0] rawdns_block_9_8_lpi_1;
  reg [11:0] rawdns_block_9_9_lpi_1;
  wire [11:0] rawdns_block_9_10_lpi_1_mx0;
  reg [11:0] rawdns_block_10_0_lpi_1;
  reg [11:0] rawdns_block_10_1_lpi_1;
  reg [11:0] rawdns_block_10_2_lpi_1;
  reg [11:0] rawdns_block_10_3_lpi_1;
  reg [11:0] rawdns_block_10_4_lpi_1;
  reg [11:0] rawdns_block_10_5_lpi_1;
  reg [11:0] rawdns_block_10_6_lpi_1;
  reg [11:0] rawdns_block_10_7_lpi_1;
  reg [11:0] rawdns_block_10_8_lpi_1;
  reg [11:0] rawdns_block_10_9_lpi_1;
  wire [11:0] src_data_lpi_1_dfm_1_mx0;
  reg [5:0] Cal_Eur_Distance_for_for_acc_itm_1;
  wire and_dcpl_258;
  wire or_dcpl_355;
  wire or_dcpl_356;
  wire [23:0] Cal_Eur_Distance_for_1_for_mul_3_cse_sva_1;
  wire [47:0] nl_Cal_Eur_Distance_for_1_for_mul_3_cse_sva_1;
  wire padding_loop2_asn_489;
  wire padding_loop2_asn_491;
  wire rawdns_process_for_or_138_tmp_1;
  wire padding_loop2_asn_497;
  wire padding_loop2_asn_495;
  reg [3:0] l_1_lpi_1;
  wire [3:0] l_1_sva_2;
  wire [4:0] nl_l_1_sva_2;
  wire and_351_tmp;
  wire or_707_tmp;
  wire mux_227_itm;
  wire or_dcpl_361;
  wire [12:0] z_out;
  wire [25:0] nl_z_out;
  wire [3:0] z_out_1;
  wire [4:0] nl_z_out_1;
  wire [4:0] z_out_2;
  wire [5:0] nl_z_out_2;
  wire [4:0] z_out_3;
  wire [7:0] nl_z_out_3;
  wire [8:0] z_out_5;
  wire [9:0] nl_z_out_5;
  wire [6:0] z_out_6;
  wire [7:0] nl_z_out_6;
  wire and_dcpl_300;
  wire and_dcpl_302;
  wire and_dcpl_303;
  wire [5:0] z_out_7;
  wire and_dcpl_304;
  wire and_dcpl_305;
  wire and_dcpl_310;
  wire and_dcpl_311;
  wire and_dcpl_313;
  wire and_dcpl_315;
  wire [12:0] z_out_10;
  wire [13:0] nl_z_out_10;
  wire [6:0] z_out_11;
  wire [10:0] z_out_12;
  wire [11:0] nl_z_out_12;
  wire and_dcpl_327;
  wire and_dcpl_331;
  wire and_dcpl_333;
  wire [12:0] z_out_13;
  wire [13:0] nl_z_out_13;
  wire [11:0] z_out_14;
  wire [4:0] z_out_15;
  wire [5:0] nl_z_out_15;
  wire [2:0] z_out_17;
  wire [3:0] nl_z_out_17;
  wire and_dcpl_341;
  wire and_dcpl_343;
  wire [3:0] z_out_18;
  wire or_dcpl_382;
  wire [4:0] z_out_19;
  wire [2:0] z_out_20;
  reg [11:0] rawdns_block_5_5_lpi_1;
  reg [11:0] rawdns_block_5_4_lpi_1;
  reg [11:0] rawdns_block_5_6_lpi_1;
  reg [11:0] rawdns_block_5_3_lpi_1;
  reg [11:0] rawdns_block_5_7_lpi_1;
  reg [11:0] rawdns_block_5_2_lpi_1;
  reg [11:0] rawdns_block_5_8_lpi_1;
  reg [11:0] rawdns_block_5_1_lpi_1;
  reg [11:0] rawdns_block_5_10_lpi_1;
  reg [11:0] rawdns_block_4_10_lpi_1;
  reg [11:0] rawdns_block_6_10_lpi_1;
  reg [11:0] rawdns_block_3_10_lpi_1;
  reg [11:0] rawdns_block_7_10_lpi_1;
  reg [11:0] rawdns_block_2_10_lpi_1;
  reg [11:0] rawdns_block_8_10_lpi_1;
  reg [11:0] rawdns_block_1_10_lpi_1;
  reg [11:0] rawdns_block_1_8_lpi_1;
  reg [11:0] rawdns_block_1_7_lpi_1;
  reg [11:0] rawdns_block_1_6_lpi_1;
  reg [11:0] rawdns_block_1_5_lpi_1;
  reg [11:0] rawdns_block_1_4_lpi_1;
  reg [11:0] rawdns_block_1_3_lpi_1;
  reg [11:0] rawdns_block_1_2_lpi_1;
  reg [11:0] rawdns_block_1_1_lpi_1;
  reg [11:0] rawdns_block_1_0_lpi_1;
  reg [11:0] rawdns_block_9_10_lpi_1;
  reg [11:0] rawdns_block_0_10_lpi_1;
  reg [11:0] rawdns_block_0_9_lpi_1;
  reg [11:0] rawdns_block_0_8_lpi_1;
  reg [11:0] rawdns_block_0_7_lpi_1;
  reg [11:0] rawdns_block_0_6_lpi_1;
  reg [11:0] rawdns_block_0_5_lpi_1;
  reg [11:0] rawdns_block_0_4_lpi_1;
  reg [11:0] rawdns_block_0_3_lpi_1;
  reg [11:0] rawdns_block_0_2_lpi_1;
  reg [11:0] rawdns_block_0_1_lpi_1;
  reg [11:0] rawdns_block_0_0_lpi_1;
  reg [11:0] rawdns_block_10_10_lpi_1;
  reg [12:0] i_1_lpi_1;
  reg [12:0] count_lpi_1;
  reg [25:0] n_lpi_1;
  reg [11:0] src_data_lpi_1;
  reg [3:0] k_1_lpi_1;
  reg [3:0] l_2_lpi_1;
  reg [3:0] l_lpi_1;
  reg [12:0] rawdns_process_total_weight_1_lpi_1;
  reg [24:0] rawdns_process_total_value_1_lpi_1;
  reg [7:0] rawdns_process_max_weight_lpi_1;
  reg [11:0] Cal_Eur_Distance_temp_block_1_1_11_0_lpi_1;
  reg [11:0] Cal_Eur_Distance_temp_block_1_0_11_0_lpi_1;
  reg [11:0] Cal_Eur_Distance_temp_block_1_2_11_0_lpi_1;
  reg [11:0] Cal_Eur_Distance_temp_block_0_2_11_0_lpi_1;
  reg [11:0] Cal_Eur_Distance_temp_block_2_0_11_0_lpi_1;
  reg [11:0] Cal_Eur_Distance_temp_block_0_1_11_0_lpi_1;
  reg [11:0] Cal_Eur_Distance_temp_block_2_1_11_0_lpi_1;
  reg [11:0] Cal_Eur_Distance_temp_block_0_0_11_0_lpi_1;
  reg [11:0] Cal_Eur_Distance_temp_block_2_2_11_0_lpi_1;
  reg [29:0] Cal_Eur_Distance_Eur_distance_lpi_1;
  reg [1:0] Cal_Eur_Distance_k_1_1_0_lpi_1;
  reg [11:0] Cal_Eur_Distance_temp_block_1_1_23_12_lpi_1;
  reg [11:0] Cal_Eur_Distance_temp_block_1_0_23_12_lpi_1;
  reg [11:0] Cal_Eur_Distance_temp_block_1_2_23_12_lpi_1;
  reg [11:0] Cal_Eur_Distance_temp_block_0_2_23_12_lpi_1;
  reg [11:0] Cal_Eur_Distance_temp_block_2_0_23_12_lpi_1;
  reg [11:0] Cal_Eur_Distance_temp_block_0_1_23_12_lpi_1;
  reg [11:0] Cal_Eur_Distance_temp_block_2_1_23_12_lpi_1;
  reg [11:0] Cal_Eur_Distance_temp_block_0_0_23_12_lpi_1;
  reg [11:0] Cal_Eur_Distance_temp_block_2_2_23_12_lpi_1;
  reg [11:0] dst_data_1_lpi_1;
  reg [2:0] k_2_2_0_lpi_1;
  reg [2:0] k_2_0_lpi_1;
  reg [9:0] operator_26_false_operator_26_false_slc_ksigma2_mul_25_16_psp_lpi_1_dfm;
  reg Cal_weight_else_slc_30_svs;
  reg exit_padding_loop2_sva_1;
  reg reg_refresh_inner_loop_and_178_tmp_1;
  reg reg_refresh_inner_loop_and_156_tmp_1;
  reg reg_refresh_inner_loop_and_134_tmp_1;
  reg [12:0] rawdns_process_total_weight_sva_1;
  reg Cal_Eur_Distance_for_1_equal_tmp_1_1;
  reg Cal_Eur_Distance_for_1_or_tmp_1_1;
  reg rawdns_process_for_equal_tmp_1_2;
  reg rawdns_process_for_equal_tmp_2;
  reg rawdns_process_for_nor_tmp_2;
  reg rawdns_process_for_or_tmp_2;
  reg Cal_Eur_Distance_for_1_for_and_20_ssc_sva_1;
  reg Cal_Eur_Distance_for_1_for_and_19_ssc_sva_1;
  reg Cal_Eur_Distance_for_1_for_and_18_ssc_sva_1;
  reg Cal_Eur_Distance_for_1_for_and_17_ssc_sva_1;
  reg Cal_Eur_Distance_for_1_for_and_16_ssc_sva_1;
  reg Cal_Eur_Distance_for_1_for_and_15_ssc_sva_1;
  reg Cal_Eur_Distance_for_1_for_and_14_ssc_sva_1;
  reg Cal_Eur_Distance_for_1_for_and_13_ssc_sva_1;
  reg Cal_Eur_Distance_for_1_for_and_12_ssc_sva_1;
  reg reg_refresh_inner_loop_and_stg_5_10_sva_1_1;
  reg reg_refresh_inner_loop_and_stg_5_21_sva_1_1;
  reg reg_refresh_inner_loop_and_stg_5_32_sva_1_1;
  reg reg_refresh_inner_loop_and_stg_5_34_sva_1_1;
  reg reg_refresh_inner_loop_and_stg_5_43_sva_1_1;
  reg reg_refresh_inner_loop_and_stg_5_45_sva_1_1;
  reg reg_refresh_inner_loop_and_stg_5_54_sva_1_1;
  reg [11:0] reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1;
  reg padding_loop2_equal_tmp_2;
  reg padding_loop2_equal_tmp_3_2;
  reg [12:0] rawdns_process_total_weight_1_lpi_1_dfm_1;
  reg [24:0] rawdns_process_total_value_1_lpi_1_dfm_1;
  reg pixel_loop_if_1_for_nor_itm_1;
  reg pixel_loop_if_1_for_nor_3_itm_1;
  reg pixel_loop_if_1_for_nor_6_itm_1;
  reg [1:0] operator_30_false_1_slc_Cal_weight_diff_1_1_0_1_itm_1;
  reg [24:0] rawdns_process_acc_2_itm_1;
  wire [25:0] nl_rawdns_process_acc_2_itm_1;
  reg padding_loop1_nor_itm_2;
  reg padding_loop1_nor_1_itm_2;
  reg padding_loop1_nor_3_itm_2;
  reg padding_loop1_nor_6_itm_2;
  reg loop2_inner_loop_loop2_inner_loop_nor_itm_2;
  reg loop2_inner_loop_loop2_inner_loop_and_itm_2;
  reg loop2_inner_loop_loop2_inner_loop_and_2_itm_2;
  reg loop2_inner_loop_loop2_inner_loop_and_3_itm_1;
  reg loop2_inner_loop_loop2_inner_loop_and_5_itm_2;
  reg loop2_inner_loop_loop2_inner_loop_and_6_itm_2;
  reg loop2_inner_loop_loop2_inner_loop_and_7_itm_1;
  reg loop2_inner_loop_loop2_inner_loop_and_8_itm_2;
  reg padding_loop2_and_203_itm_1;
  reg Cal_weight_else_slc_30_svs_st_1;
  reg Cal_weight_else_if_if_slc_operator_26_false_acc_29_svs_st_1;
  reg Cal_weight_else_else_slc_30_svs_st_1;
  reg Cal_weight_else_else_else_if_slc_operator_26_false_2_acc_30_svs_st_1;
  reg [11:0] Cal_Eur_Distance_for_1_for_mul_3_cse_sva_1_11_0;
  reg padding_loop1_acc_3_psp_sva_2_0;
  reg Cal_Eur_Distance_l_1_1_0_lpi_1_1;
  reg Cal_Eur_Distance_l_1_1_0_lpi_1_0;
  reg lfst_exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1;
  reg [2:0] loop2_inner_loop_conc_24_itm_2_3_1;
  wire [11:0] rawdns_block_0_10_lpi_1_mx0;
  wire dst_rsci_idat_mx0c0;
  wire dst_rsci_idat_mx0c1;
  wire dst_rsci_idat_mx0c2;
  wire dst_rsci_idat_mx0c3;
  wire [11:0] rawdns_block_5_5_lpi_1_mx0;
  wire [11:0] tmp_lpi_1_dfm_1;
  wire pixel_loop_if_1_for_and_2_tmp_1;
  wire [11:0] reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
  wire reg_refresh_inner_loop_and_222_tmp_1;
  wire pixel_loop_if_1_for_and_45_tmp_1;
  wire reg_refresh_inner_loop_and_200_tmp_1;
  wire pixel_loop_if_1_for_and_29_tmp_1;
  wire pixel_loop_if_1_for_and_7_tmp_1;
  wire pixel_loop_if_1_for_and_48_tmp_1;
  wire pixel_loop_if_1_for_and_33_tmp_1;
  wire reg_refresh_inner_loop_and_135_tmp_1;
  wire pixel_loop_if_1_for_and_12_tmp_1;
  wire reg_refresh_inner_loop_and_157_tmp_1;
  wire pixel_loop_if_1_for_and_51_tmp_1;
  wire reg_refresh_inner_loop_and_179_tmp_1;
  wire pixel_loop_if_1_for_and_36_tmp_1;
  wire reg_refresh_inner_loop_and_201_tmp_1;
  wire pixel_loop_if_1_for_and_17_tmp_1;
  wire reg_refresh_inner_loop_and_223_tmp_1;
  wire pixel_loop_and_10_tmp_1;
  wire [11:0] dst_data_1_lpi_1_dfm_2;
  wire [11:0] Cal_Eur_Distance_temp_block_1_2_11_0_lpi_1_mx0;
  wire [11:0] Cal_Eur_Distance_temp_block_0_1_11_0_lpi_1_mx0;
  wire [11:0] Cal_Eur_Distance_temp_block_2_0_11_0_lpi_1_mx0;
  wire [11:0] Cal_Eur_Distance_temp_block_0_2_11_0_lpi_1_mx0;
  wire [11:0] Cal_Eur_Distance_temp_block_2_1_11_0_lpi_1_mx0;
  wire [11:0] Cal_Eur_Distance_temp_block_1_0_11_0_lpi_1_mx0;
  wire [11:0] Cal_Eur_Distance_temp_block_2_2_11_0_lpi_1_mx0;
  wire [11:0] Cal_Eur_Distance_temp_block_0_0_11_0_lpi_1_mx0;
  wire [11:0] Cal_Eur_Distance_temp_block_1_1_11_0_lpi_1_mx0;
  wire [2:0] rawdns_process_k_3_1_sva_2;
  wire [3:0] nl_rawdns_process_k_3_1_sva_2;
  wire [2:0] rawdns_process_k_3_1_lpi_1_dfm_1;
  wire [2:0] rawdns_process_l_3_1_sva_2;
  wire [3:0] nl_rawdns_process_l_3_1_sva_2;
  wire [2:0] rawdns_process_l_3_1_lpi_1_dfm_3;
  wire [1:0] Cal_Eur_Distance_k_1_1_0_lpi_1_dfm_1;
  wire Cal_Eur_Distance_l_1_1_0_lpi_1_dfm_0_1;
  wire Cal_Eur_Distance_l_1_1_0_lpi_1_dfm_1_1;
  wire [27:0] operator_30_false_acc_psp_sva_1;
  wire [28:0] nl_operator_30_false_acc_psp_sva_1;
  wire [29:0] rawdns_max_return_lpi_1_dfm_1;
  wire [26:0] operator_30_false_1_acc_psp_sva_1;
  wire [27:0] nl_operator_30_false_1_acc_psp_sva_1;
  wire [29:0] Cal_Eur_Distance_Eur_distance_lpi_1_dfm_1;
  wire rawdns_process_for_for_if_rawdns_process_for_for_if_or_mx0w0;
  wire rawdns_process_for_for_lor_lpi_1_dfm_1_mx0;
  wire Cal_Eur_Distance_for_for_and_20_tmp_1;
  wire Cal_Eur_Distance_for_for_and_18_tmp_1;
  wire Cal_Eur_Distance_for_for_and_16_tmp_1;
  wire Cal_Eur_Distance_for_for_and_14_tmp_1;
  wire Cal_Eur_Distance_for_for_and_12_tmp_1;
  wire Cal_Eur_Distance_for_for_and_13_tmp_1;
  wire Cal_Eur_Distance_for_for_and_15_tmp_1;
  wire Cal_Eur_Distance_for_for_and_17_tmp_1;
  wire Cal_Eur_Distance_for_for_and_19_tmp_1;
  wire pixel_loop_and_171_tmp_1;
  wire [7:0] rawdns_process_max_weight_lpi_1_dfm_4_mx0;
  wire [12:0] rawdns_process_total_weight_1_lpi_1_dfm_3_mx0;
  wire Cal_Eur_Distance_for_1_for_and_20_ssc_sva_1_1;
  wire padding_loop2_or_410_tmp_1;
  wire Cal_Eur_Distance_for_1_for_and_18_ssc_sva_1_1;
  wire Cal_Eur_Distance_for_1_for_and_16_ssc_sva_1_1;
  wire Cal_Eur_Distance_for_1_for_and_14_ssc_sva_1_1;
  wire Cal_Eur_Distance_for_1_for_and_12_ssc_sva_1_1;
  wire Cal_Eur_Distance_for_1_for_and_13_ssc_sva_1_1;
  wire Cal_Eur_Distance_for_1_for_and_15_ssc_sva_1_1;
  wire Cal_Eur_Distance_for_1_for_and_17_ssc_sva_1_1;
  wire Cal_Eur_Distance_for_1_for_and_19_ssc_sva_1_1;
  wire [12:0] count_lpi_1_dfm_1;
  wire [3:0] k_1_lpi_1_dfm_1;
  wire [3:0] l_2_sva_2;
  wire [4:0] nl_l_2_sva_2;
  wire [3:0] operator_4_false_1_acc_cse_sva_1;
  wire [4:0] nl_operator_4_false_1_acc_cse_sva_1;
  wire operator_4_true_2_xor_psp_sva_1;
  wire [4:0] operator_4_true_acc_sdt_1;
  wire [5:0] nl_operator_4_true_acc_sdt_1;
  wire [12:0] rawdns_process_total_weight_1_lpi_1_mx0;
  wire [7:0] rawdns_process_max_weight_lpi_1_mx0;
  wire [24:0] rawdns_process_total_value_1_lpi_1_dfm_3_mx0;
  wire pixel_loop_and_182_tmp_1;
  wire rawdns_process_for_or_362_tmp_1;
  wire exitL_exitL_exitL_exit_rawdns_process_for_lpi_1_dfm_1;
  wire rawdns_process_for_for_and_6_ssc_1;
  wire Cal_Eur_Distance_for_1_and_4_ssc_1;
  wire [4:0] pixel_loop_if_1_for_1_acc_9_psp_sva_1;
  wire [5:0] nl_pixel_loop_if_1_for_1_acc_9_psp_sva_1;
  wire [3:0] pixel_loop_if_1_for_1_acc_psp_sva_1;
  wire [4:0] nl_pixel_loop_if_1_for_1_acc_psp_sva_1;
  wire [3:0] operator_4_false_2_acc_psp_sva_1;
  wire [4:0] nl_operator_4_false_2_acc_psp_sva_1;
  wire [24:0] rawdns_process_total_value_1_lpi_1_mx0;
  wire [12:0] ksigma_sva_1;
  wire [3:0] pixel_loop_if_1_for_acc_32;
  wire [5:0] nl_pixel_loop_if_1_for_acc_32;
  wire padding_loop2_asn_483;
  wire pixel_loop_if_1_for_pixel_loop_if_1_for_and_17;
  wire pixel_loop_if_1_for_pixel_loop_if_1_for_and_19;
  wire pixel_loop_if_1_for_pixel_loop_if_1_for_and_21;
  wire [11:0] Cal_Eur_Distance_for_1_for_conc_12_23_12;
  wire [11:0] Cal_Eur_Distance_for_1_for_conc_12_11_0;
  wire [7:0] ROM_1i4_1o8_4dd8bd99bd10e9b88c29d6096de160de2e_1;
  wire [6:0] ROM_1i5_1o7_3c7b1334a034a5d093fcab7146dc0a172e_1;
  wire and_367_rgt;
  wire padding_loop2_and_342_rgt;
  wire pixel_loop_and_201_rgt;
  wire or_379_tmp;
  wire [2:0] padding_loop1_acc_13_sdt;
  wire [3:0] nl_padding_loop1_acc_13_sdt;
  wire and_382_cse;
  wire and_374_cse;
  wire and_375_cse;
  wire or_724_cse;
  wire nor_237_cse;
  wire or_142_cse;
  wire nand_78_cse;
  wire Cal_Eur_Distance_for_1_and_62_cse;
  wire pixel_loop_if_1_for_nor_7_cse;
  wire pixel_loop_if_1_for_nor_4_cse;
  wire padding_loop1_nor_2_cse;
  wire rawdns_reg_eb_and_cse;
  wire and_446_cse;
  wire pixel_loop_if_1_for_nor_cse;
  wire and_295_cse;
  wire and_296_cse;
  wire loop2_inner_loop_or_6_itm;
  wire pixel_loop_if_1_for_1_or_1_itm;
  wire loop2_inner_loop_nor_9_itm;
  wire loop2_inner_loop_or_9_itm;
  wire loop2_inner_loop_or_11_itm;
  wire operator_4_false_acc_itm_2_1;
  wire operator_4_false_1_acc_itm_2_1;
  wire Cal_weight_else_if_else_if_acc_itm_28_1;
  wire [11:0] Cal_weight_else_if_else_if_acc_1_itm_12_1;
  wire Cal_weight_else_if_acc_itm_30_1;
  wire rawdns_abs_if_acc_1_itm_12_1;
  wire operator_26_false_acc_itm_29_1;
  wire [12:0] operator_26_false_2_acc_1_itm_13_1_1;
  wire operator_26_false_2_acc_itm_29_1;
  wire Cal_weight_else_else_if_acc_itm_30_1;
  wire loop2_inner_loop_acc_12_itm_13_1;
  wire [9:0] ksigma2_mul_itm_25_16_1;
  wire operator_4_false_acc_itm_4_1;
  wire operator_4_false_1_acc_itm_3_1;
  wire operator_4_false_2_acc_itm_3_1;
  wire operator_4_false_3_acc_itm_3_1;
  wire pixel_loop_acc_4_itm_26_1;
  wire operator_4_false_4_acc_itm_2_1;
  wire operator_4_false_5_acc_itm_2;
  wire pixel_loop_if_1_for_1_pixel_loop_if_1_for_1_or_1_cse;
  wire [3:0] loop2_inner_loop_mux1h_43_cse;
  wire mux_280_cse;

  wire[0:0] mux_197_nl;
  wire[0:0] mux_196_nl;
  wire[0:0] or_294_nl;
  wire[0:0] mux_195_nl;
  wire[0:0] or_293_nl;
  wire[0:0] or_292_nl;
  wire[0:0] pixel_loop_if_1_if_1_or_nl;
  wire[0:0] pixel_loop_if_1_if_1_or_1_nl;
  wire[0:0] pixel_loop_if_1_if_1_or_2_nl;
  wire[0:0] pixel_loop_if_1_if_1_or_3_nl;
  wire[0:0] pixel_loop_if_1_if_1_or_4_nl;
  wire[0:0] pixel_loop_if_1_if_1_or_5_nl;
  wire[0:0] pixel_loop_if_1_if_1_or_6_nl;
  wire[0:0] pixel_loop_if_1_if_1_or_7_nl;
  wire[0:0] pixel_loop_if_1_if_1_or_8_nl;
  wire[0:0] pixel_loop_if_1_if_1_or_9_nl;
  wire[19:0] rawdns_process_mul_1_nl;
  wire[0:0] loop2_inner_loop_loop2_inner_loop_and_1_nl;
  wire[0:0] pixel_loop_if_1_and_16_nl;
  wire[0:0] mux_198_nl;
  wire[0:0] loop2_inner_loop_loop2_inner_loop_and_3_nl;
  wire[0:0] pixel_loop_if_1_nand_nl;
  wire[0:0] rawdns_process_for_and_160_nl;
  wire[0:0] mux_199_nl;
  wire[0:0] nor_132_nl;
  wire[0:0] nor_133_nl;
  wire[0:0] mux_200_nl;
  wire[0:0] nor_130_nl;
  wire[0:0] nor_131_nl;
  wire[0:0] mux_201_nl;
  wire[0:0] nor_128_nl;
  wire[0:0] nor_129_nl;
  wire[0:0] mux_202_nl;
  wire[0:0] nor_126_nl;
  wire[0:0] nor_127_nl;
  wire[0:0] mux_203_nl;
  wire[0:0] nor_124_nl;
  wire[0:0] nor_125_nl;
  wire[0:0] mux_204_nl;
  wire[0:0] nor_122_nl;
  wire[0:0] nor_123_nl;
  wire[0:0] mux_205_nl;
  wire[0:0] nor_120_nl;
  wire[0:0] nor_121_nl;
  wire[0:0] mux_206_nl;
  wire[0:0] nor_118_nl;
  wire[0:0] nor_119_nl;
  wire[0:0] mux_207_nl;
  wire[0:0] nor_117_nl;
  wire[0:0] nor_214_nl;
  wire[0:0] mux_208_nl;
  wire[0:0] nor_115_nl;
  wire[0:0] nor_116_nl;
  wire[0:0] mux_217_nl;
  wire[0:0] or_405_nl;
  wire[0:0] mux_216_nl;
  wire[0:0] or_403_nl;
  wire[0:0] mux_215_nl;
  wire[0:0] nand_73_nl;
  wire[0:0] padding_loop2_mux_130_nl;
  wire[0:0] rawdns_process_for_mux_24_nl;
  wire[0:0] pixel_loop_if_1_for_1_pixel_loop_if_1_for_1_or_nl;
  wire[1:0] mux_275_nl;
  wire[0:0] or_703_nl;
  wire[0:0] nor_228_nl;
  wire[11:0] Cal_Eur_Distance_for_1_mux_18_nl;
  wire[0:0] Cal_Eur_Distance_for_1_and_47_nl;
  wire[0:0] Cal_Eur_Distance_for_1_not_45_nl;
  wire[11:0] Cal_Eur_Distance_for_1_mux_19_nl;
  wire[0:0] Cal_Eur_Distance_for_1_and_48_nl;
  wire[0:0] Cal_Eur_Distance_for_1_not_62_nl;
  wire[11:0] Cal_Eur_Distance_for_1_mux_20_nl;
  wire[0:0] Cal_Eur_Distance_for_1_and_49_nl;
  wire[0:0] Cal_Eur_Distance_for_1_not_61_nl;
  wire[11:0] Cal_Eur_Distance_for_1_mux_21_nl;
  wire[0:0] Cal_Eur_Distance_for_1_and_50_nl;
  wire[0:0] Cal_Eur_Distance_for_1_not_60_nl;
  wire[11:0] Cal_Eur_Distance_for_1_mux_22_nl;
  wire[0:0] Cal_Eur_Distance_for_1_and_51_nl;
  wire[0:0] Cal_Eur_Distance_for_1_not_59_nl;
  wire[11:0] Cal_Eur_Distance_for_1_mux_23_nl;
  wire[0:0] Cal_Eur_Distance_for_1_and_52_nl;
  wire[0:0] Cal_Eur_Distance_for_1_not_58_nl;
  wire[11:0] Cal_Eur_Distance_for_1_mux_24_nl;
  wire[0:0] Cal_Eur_Distance_for_1_and_53_nl;
  wire[0:0] Cal_Eur_Distance_for_1_not_57_nl;
  wire[11:0] Cal_Eur_Distance_for_1_mux_25_nl;
  wire[0:0] Cal_Eur_Distance_for_1_and_54_nl;
  wire[0:0] Cal_Eur_Distance_for_1_not_56_nl;
  wire[11:0] Cal_Eur_Distance_for_1_mux_26_nl;
  wire[0:0] Cal_Eur_Distance_for_1_and_55_nl;
  wire[0:0] Cal_Eur_Distance_for_1_not_55_nl;
  wire[0:0] nand_84_nl;
  wire[0:0] pixel_loop_if_1_aelse_not_13_nl;
  wire[0:0] and_228_nl;
  wire[0:0] and_235_nl;
  wire[11:0] loop2_inner_loop_loop2_inner_loop_mux_nl;
  wire[11:0] loop2_inner_loop_acc_nl;
  wire[12:0] nl_loop2_inner_loop_acc_nl;
  wire[11:0] loop2_inner_loop_loop2_inner_loop_mux_6_nl;
  wire[11:0] loop2_inner_loop_acc_25_nl;
  wire[12:0] nl_loop2_inner_loop_acc_25_nl;
  wire[11:0] loop2_inner_loop_loop2_inner_loop_mux_7_nl;
  wire[0:0] and_245_nl;
  wire[0:0] and_248_nl;
  wire[0:0] asn_operator_42_false_slc_operator_30_false_acc_psp_14_0_itm_1_nor_nl;
  wire[0:0] mux_229_nl;
  wire[0:0] or_592_nl;
  wire[0:0] or_595_nl;
  wire[0:0] loop2_inner_loop_nor_3_nl;
  wire[0:0] padding_loop1_nor_1_nl;
  wire[0:0] padding_loop1_nor_6_nl;
  wire[0:0] pixel_loop_if_1_for_nor_1_nl;
  wire[0:0] loop2_inner_loop_loop2_inner_loop_and_2_nl;
  wire[0:0] padding_loop1_padding_loop1_and_2_nl;
  wire[0:0] pixel_loop_if_1_for_pixel_loop_if_1_for_and_5_nl;
  wire[0:0] loop2_inner_loop_loop2_inner_loop_and_5_nl;
  wire[0:0] padding_loop1_padding_loop1_and_5_nl;
  wire[0:0] pixel_loop_if_1_for_pixel_loop_if_1_for_and_8_nl;
  wire[0:0] loop2_inner_loop_loop2_inner_loop_and_8_nl;
  wire[0:0] padding_loop1_padding_loop1_and_8_nl;
  wire[0:0] pixel_loop_if_1_aelse_not_12_nl;
  wire[0:0] pixel_loop_if_1_for_pixel_loop_if_1_for_and_4_nl;
  wire[0:0] loop2_inner_loop_loop2_inner_loop_and_4_nl;
  wire[0:0] padding_loop1_padding_loop1_and_4_nl;
  wire[0:0] pixel_loop_if_1_for_pixel_loop_if_1_for_and_6_nl;
  wire[0:0] loop2_inner_loop_loop2_inner_loop_and_6_nl;
  wire[0:0] padding_loop1_padding_loop1_and_6_nl;
  wire[0:0] pixel_loop_if_1_for_pixel_loop_if_1_for_nor_1_nl;
  wire[0:0] and_254_nl;
  wire[0:0] and_264_nl;
  wire[0:0] loop2_inner_loop_nor_6_nl;
  wire[0:0] padding_loop1_nor_3_nl;
  wire[0:0] Cal_weight_Cal_weight_Cal_weight_or_nl;
  wire[0:0] pixel_loop_if_1_for_pixel_loop_if_1_for_and_2_nl;
  wire[0:0] loop2_inner_loop_loop2_inner_loop_and_nl;
  wire[0:0] padding_loop1_padding_loop1_nor_nl;
  wire[0:0] and_270_nl;
  wire[0:0] and_271_nl;
  wire[0:0] mux_232_nl;
  wire[2:0] pixel_loop_if_1_for_1_acc_11_nl;
  wire[3:0] nl_pixel_loop_if_1_for_1_acc_11_nl;
  wire[0:0] loop2_inner_loop_or_5_nl;
  wire[0:0] pixel_loop_mux_747_nl;
  wire[0:0] rawdns_process_for_rawdns_process_for_mux_334_nl;
  wire[0:0] pixel_loop_if_1_for_1_mux_1_nl;
  wire[0:0] pixel_loop_if_1_if_pixel_loop_if_1_if_and_nl;
  wire[12:0] operator_13_false_1_acc_nl;
  wire[13:0] nl_operator_13_false_1_acc_nl;
  wire[12:0] operator_13_false_acc_nl;
  wire[13:0] nl_operator_13_false_acc_nl;
  wire[0:0] mux_244_nl;
  wire[0:0] mux_243_nl;
  wire[0:0] mux_242_nl;
  wire[0:0] mux_241_nl;
  wire[0:0] mux_240_nl;
  wire[0:0] nor_94_nl;
  wire[0:0] and_447_nl;
  wire[3:0] reg_refresh_out_loop_reg_refresh_out_loop_and_1_nl;
  wire[0:0] rawdns_process_for_rawdns_process_for_reg_refresh_out_loop_not_3_nl;
  wire[3:0] pixel_loop_if_1_for_pixel_loop_if_1_for_and_15_nl;
  wire[12:0] nor_222_nl;
  wire[12:0] mux_274_nl;
  wire[0:0] nor_225_nl;
  wire[0:0] padding_loop2_mux_255_nl;
  wire[0:0] pixel_loop_pixel_loop_or_3_nl;
  wire[25:0] pixel_loop_acc_3_nl;
  wire[26:0] nl_pixel_loop_acc_3_nl;
  wire[0:0] mux_265_nl;
  wire[0:0] mux_264_nl;
  wire[0:0] mux_263_nl;
  wire[0:0] mux_262_nl;
  wire[0:0] mux_261_nl;
  wire[0:0] mux_260_nl;
  wire[0:0] mux_259_nl;
  wire[0:0] mux_258_nl;
  wire[0:0] mux_257_nl;
  wire[0:0] mux_256_nl;
  wire[0:0] mux_255_nl;
  wire[0:0] and_300_nl;
  wire[0:0] mux_248_nl;
  wire[0:0] mux_247_nl;
  wire[0:0] mux_246_nl;
  wire[0:0] mux_245_nl;
  wire[0:0] pixel_loop_if_1_aelse_not_14_nl;
  wire[0:0] loop2_inner_loop_loop2_inner_loop_nor_nl;
  wire[0:0] loop2_inner_loop_nor_1_nl;
  wire[0:0] mux_270_nl;
  wire[0:0] nor_105_nl;
  wire[0:0] mux_269_nl;
  wire[0:0] mux_268_nl;
  wire[0:0] mux_267_nl;
  wire[0:0] nor_106_nl;
  wire[0:0] mux_266_nl;
  wire[0:0] and_297_nl;
  wire[2:0] padding_loop1_padding_loop1_and_16_nl;
  wire[0:0] and_3_nl;
  wire[13:0] operator_13_false_3_acc_nl;
  wire[14:0] nl_operator_13_false_3_acc_nl;
  wire[12:0] operator_13_false_2_acc_nl;
  wire[13:0] nl_operator_13_false_2_acc_nl;
  wire[0:0] rawdns_block_nand_9_nl;
  wire[0:0] rawdns_process_for_and_123_nl;
  wire[0:0] rawdns_process_for_and_125_nl;
  wire[0:0] rawdns_block_nand_8_nl;
  wire[0:0] rawdns_process_for_and_11_nl;
  wire[0:0] rawdns_process_for_and_13_nl;
  wire[0:0] rawdns_block_nand_7_nl;
  wire[0:0] rawdns_process_for_and_67_nl;
  wire[0:0] rawdns_process_for_and_69_nl;
  wire[0:0] rawdns_block_nand_6_nl;
  wire[0:0] rawdns_process_for_and_109_nl;
  wire[0:0] rawdns_process_for_and_111_nl;
  wire[0:0] rawdns_block_nand_5_nl;
  wire[0:0] rawdns_process_for_and_53_nl;
  wire[0:0] rawdns_process_for_and_55_nl;
  wire[0:0] rawdns_block_nand_4_nl;
  wire[0:0] rawdns_process_for_and_95_nl;
  wire[0:0] rawdns_process_for_and_97_nl;
  wire[0:0] rawdns_block_nand_3_nl;
  wire[0:0] rawdns_process_for_and_39_nl;
  wire[0:0] rawdns_process_for_and_41_nl;
  wire[0:0] rawdns_block_nand_2_nl;
  wire[0:0] rawdns_process_for_and_137_nl;
  wire[0:0] rawdns_process_for_and_139_nl;
  wire[0:0] rawdns_block_nand_1_nl;
  wire[0:0] rawdns_process_for_and_25_nl;
  wire[0:0] rawdns_process_for_and_27_nl;
  wire[0:0] rawdns_block_nand_nl;
  wire[0:0] rawdns_process_for_and_81_nl;
  wire[0:0] rawdns_process_for_and_83_nl;
  wire[0:0] asn_rawdns_block_5_5_lpi_1_nand_nl;
  wire[0:0] pixel_loop_if_1_for_pixel_loop_if_1_for_and_nl;
  wire[11:0] rawdns_clip_rawdns_clip_or_nl;
  wire[13:0] operator_25_false_acc_nl;
  wire[14:0] nl_operator_25_false_acc_nl;
  wire[0:0] Cal_Eur_Distance_temp_block_nand_8_nl;
  wire[0:0] Cal_Eur_Distance_for_1_and_27_nl;
  wire[0:0] Cal_Eur_Distance_for_1_and_29_nl;
  wire[0:0] Cal_Eur_Distance_temp_block_nand_7_nl;
  wire[0:0] Cal_Eur_Distance_for_1_and_11_nl;
  wire[0:0] Cal_Eur_Distance_for_1_and_13_nl;
  wire[0:0] Cal_Eur_Distance_temp_block_nand_6_nl;
  wire[0:0] Cal_Eur_Distance_for_1_and_31_nl;
  wire[0:0] Cal_Eur_Distance_for_1_and_33_nl;
  wire[0:0] Cal_Eur_Distance_temp_block_nand_5_nl;
  wire[0:0] Cal_Eur_Distance_for_1_and_15_nl;
  wire[0:0] Cal_Eur_Distance_for_1_and_17_nl;
  wire[0:0] Cal_Eur_Distance_temp_block_nand_4_nl;
  wire[0:0] Cal_Eur_Distance_for_1_and_35_nl;
  wire[0:0] Cal_Eur_Distance_for_1_and_37_nl;
  wire[0:0] Cal_Eur_Distance_temp_block_nand_3_nl;
  wire[0:0] Cal_Eur_Distance_for_1_and_19_nl;
  wire[0:0] Cal_Eur_Distance_for_1_and_21_nl;
  wire[0:0] Cal_Eur_Distance_temp_block_nand_2_nl;
  wire[0:0] Cal_Eur_Distance_for_1_and_39_nl;
  wire[0:0] Cal_Eur_Distance_for_1_and_41_nl;
  wire[0:0] Cal_Eur_Distance_temp_block_nand_1_nl;
  wire[0:0] Cal_Eur_Distance_for_1_and_7_nl;
  wire[0:0] Cal_Eur_Distance_for_1_and_9_nl;
  wire[0:0] Cal_Eur_Distance_temp_block_nand_nl;
  wire[0:0] Cal_Eur_Distance_for_1_and_23_nl;
  wire[0:0] Cal_Eur_Distance_for_1_and_25_nl;
  wire[0:0] or_378_nl;
  wire[0:0] rawdns_process_for_mux_22_nl;
  wire[0:0] or_386_nl;
  wire[2:0] operator_4_false_acc_nl;
  wire[4:0] nl_operator_4_false_acc_nl;
  wire[0:0] pixel_loop_if_1_aelse_not_10_nl;
  wire[2:0] operator_4_false_1_acc_nl;
  wire[4:0] nl_operator_4_false_1_acc_nl;
  wire[0:0] Cal_Eur_Distance_for_1_mux_28_nl;
  wire[0:0] Cal_Eur_Distance_for_1_mux_nl;
  wire[0:0] Cal_Eur_Distance_for_1_Cal_Eur_Distance_for_1_Cal_Eur_Distance_for_1_Cal_Eur_Distance_for_1_not_2_nl;
  wire[0:0] or_420_nl;
  wire[28:0] Cal_weight_else_if_else_if_acc_nl;
  wire[29:0] nl_Cal_weight_else_if_else_if_acc_nl;
  wire[10:0] Cal_weight_else_if_else_if_acc_7_nl;
  wire[11:0] nl_Cal_weight_else_if_else_if_acc_7_nl;
  wire[9:0] Cal_weight_else_if_else_if_acc_4_nl;
  wire[11:0] nl_Cal_weight_else_if_else_if_acc_4_nl;
  wire[12:0] Cal_weight_else_if_else_if_acc_1_nl;
  wire[13:0] nl_Cal_weight_else_if_else_if_acc_1_nl;
  wire[29:0] rawdns_max_else_acc_nl;
  wire[30:0] nl_rawdns_max_else_acc_nl;
  wire[30:0] rawdns_max_if_acc_nl;
  wire[31:0] nl_rawdns_max_if_acc_nl;
  wire[30:0] Cal_weight_else_if_acc_nl;
  wire[31:0] nl_Cal_weight_else_if_acc_nl;
  wire[0:0] or_475_nl;
  wire[0:0] and_220_nl;
  wire[0:0] padding_loop2_not_425_nl;
  wire[12:0] rawdns_abs_if_acc_1_nl;
  wire[13:0] nl_rawdns_abs_if_acc_1_nl;
  wire[7:0] Cal_weight_else_Cal_weight_else_mux1h_nl;
  wire[6:0] Cal_weight_else_if_else_Cal_weight_else_if_else_and_nl;
  wire[0:0] Cal_weight_else_Cal_weight_else_nor_nl;
  wire[0:0] Cal_weight_else_else_and_1_nl;
  wire[0:0] Cal_weight_else_and_3_nl;
  wire[0:0] Cal_weight_else_and_nl;
  wire[0:0] Cal_weight_else_and_1_nl;
  wire[0:0] or_563_nl;
  wire[8:0] rawdns_process_for_for_if_if_acc_nl;
  wire[9:0] nl_rawdns_process_for_for_if_if_acc_nl;
  wire[29:0] operator_26_false_acc_nl;
  wire[30:0] nl_operator_26_false_acc_nl;
  wire[10:0] operator_26_false_acc_6_nl;
  wire[12:0] nl_operator_26_false_acc_6_nl;
  wire[13:0] operator_26_false_2_acc_1_nl;
  wire[14:0] nl_operator_26_false_2_acc_1_nl;
  wire[29:0] operator_26_false_2_acc_nl;
  wire[30:0] nl_operator_26_false_2_acc_nl;
  wire[10:0] operator_26_false_2_acc_5_nl;
  wire[11:0] nl_operator_26_false_2_acc_5_nl;
  wire[30:0] Cal_weight_else_else_if_acc_nl;
  wire[31:0] nl_Cal_weight_else_else_if_acc_nl;
  wire[12:0] rawdns_process_for_for_if_acc_1_nl;
  wire[13:0] nl_rawdns_process_for_for_if_acc_1_nl;
  wire[13:0] loop2_inner_loop_acc_12_nl;
  wire[14:0] nl_loop2_inner_loop_acc_12_nl;
  wire[0:0] rawdns_reg_eb_not_11_nl;
  wire[0:0] or_610_nl;
  wire[0:0] or_615_nl;
  wire[25:0] ksigma2_mul_nl;
  wire[0:0] padding_loop2_not_400_nl;
  wire[0:0] rawdns_process_for_mux_26_nl;
  wire[0:0] rawdns_process_for_and_163_nl;
  wire[0:0] rawdns_process_for_and_164_nl;
  wire[0:0] rawdns_process_for_or_363_nl;
  wire[1:0] rawdns_process_for_and_nl;
  wire[0:0] rawdns_process_for_nor_7_nl;
  wire[0:0] rawdns_process_for_and_155_nl;
  wire[4:0] operator_4_false_acc_nl_1;
  wire[5:0] nl_operator_4_false_acc_nl_1;
  wire[0:0] rawdns_reg_eb_not_13_nl;
  wire[3:0] operator_4_false_1_acc_nl_1;
  wire[4:0] nl_operator_4_false_1_acc_nl_1;
  wire[0:0] reg_refresh_out_loop_reg_refresh_out_loop_reg_refresh_out_loop_or_nl;
  wire[3:0] operator_4_false_2_acc_nl;
  wire[4:0] nl_operator_4_false_2_acc_nl;
  wire[3:0] operator_4_false_3_acc_nl;
  wire[4:0] nl_operator_4_false_3_acc_nl;
  wire[0:0] and_278_nl;
  wire[26:0] pixel_loop_acc_4_nl;
  wire[27:0] nl_pixel_loop_acc_4_nl;
  wire[25:0] pixel_loop_mul_nl;
  wire[0:0] padding_loop2_not_401_nl;
  wire[0:0] padding_loop2_mux_257_nl;
  wire[0:0] padding_loop2_padding_loop2_and_11_nl;
  wire[4:0] operator_4_true_mul_nl;
  wire signed [6:0] nl_operator_4_true_mul_nl;
  wire[24:0] rawdns_process_for_for_if_acc_3_nl;
  wire[25:0] nl_rawdns_process_for_for_if_acc_3_nl;
  wire[19:0] rawdns_process_for_for_if_mul_1_nl;
  wire[11:0] rawdns_process_for_for_if_rawdns_process_for_for_if_mux_nl;
  wire[0:0] Cal_Eur_Distance_for_for_mux_1_nl;
  wire[0:0] padding_loop2_mux_262_nl;
  wire[0:0] padding_loop2_loop2_inner_loop_nand_nl;
  wire[0:0] padding_loop2_mux_264_nl;
  wire[4:0] pixel_loop_if_1_for_1_acc_18_nl;
  wire[6:0] nl_pixel_loop_if_1_for_1_acc_18_nl;
  wire[2:0] operator_4_false_4_acc_nl;
  wire[3:0] nl_operator_4_false_4_acc_nl;
  wire[0:0] rawdns_reg_eb_not_14_nl;
  wire[3:0] operator_13_false_acc_nl_1;
  wire[4:0] nl_operator_13_false_acc_nl_1;
  wire[2:0] operator_4_false_5_acc_nl;
  wire[3:0] nl_operator_4_false_5_acc_nl;
  wire[1:0] pixel_loop_if_1_for_acc_26_nl;
  wire[2:0] nl_pixel_loop_if_1_for_acc_26_nl;
  wire[4:0] operator_4_false_acc_2_nl;
  wire[5:0] nl_operator_4_false_acc_2_nl;
  wire[0:0] mux_93_nl;
  wire[0:0] or_132_nl;
  wire[0:0] mux_212_nl;
  wire[0:0] mux_211_nl;
  wire[0:0] mux_210_nl;
  wire[0:0] mux_209_nl;
  wire[0:0] nor_81_nl;
  wire[0:0] mux_218_nl;
  wire[0:0] or_418_nl;
  wire[0:0] nand_35_nl;
  wire[0:0] nand_36_nl;
  wire[0:0] mux_224_nl;
  wire[0:0] nand_32_nl;
  wire[0:0] nand_33_nl;
  wire[0:0] mux_226_nl;
  wire[0:0] mux_230_nl;
  wire[0:0] and_331_nl;
  wire[0:0] nor_107_nl;
  wire[0:0] or_664_nl;
  wire[0:0] mux_253_nl;
  wire[0:0] mux_252_nl;
  wire[0:0] mux_251_nl;
  wire[0:0] nand_26_nl;
  wire[0:0] mux_276_nl;
  wire[0:0] mux_281_nl;
  wire[0:0] nor_232_nl;
  wire[0:0] and_444_nl;
  wire[0:0] and_445_nl;
  wire[12:0] rawdns_process_sigma2_rawdns_process_sigma2_mux1h_1_nl;
  wire[0:0] rawdns_process_sigma2_and_3_nl;
  wire[0:0] rawdns_process_sigma2_and_4_nl;
  wire[12:0] rawdns_process_sigma2_mux_2_nl;
  wire[3:0] operator_4_true_3_mux_2_nl;
  wire[3:0] operator_4_true_3_acc_1_nl;
  wire[4:0] nl_operator_4_true_3_acc_1_nl;
  wire[2:0] operator_4_true_3_mux_3_nl;
  wire[4:0] Cal_Eur_Distance_for_for_mux_19_nl;
  wire[4:0] padding_loop1_acc_24_nl;
  wire[5:0] nl_padding_loop1_acc_24_nl;
  wire[3:0] padding_loop1_acc_25_nl;
  wire[4:0] nl_padding_loop1_acc_25_nl;
  wire[4:0] Cal_Eur_Distance_for_for_mux_20_nl;
  wire[0:0] pixel_loop_if_1_for_mux_34_nl;
  wire[1:0] pixel_loop_if_1_for_mux_37_nl;
  wire[2:0] pixel_loop_if_1_for_mux_36_nl;
  wire[2:0] loop2_inner_loop_acc_28_nl;
  wire[3:0] nl_loop2_inner_loop_acc_28_nl;
  wire[3:0] pixel_loop_if_1_for_mux_35_nl;
  wire[2:0] Cal_Eur_Distance_for_for_Cal_Eur_Distance_for_for_Cal_Eur_Distance_for_for_nor_1_nl;
  wire[0:0] Cal_Eur_Distance_for_for_or_4_nl;
  wire[4:0] Cal_Eur_Distance_for_for_mux1h_16_nl;
  wire[0:0] Cal_Eur_Distance_for_for_mux1h_17_nl;
  wire[6:0] Cal_Eur_Distance_for_for_mux1h_18_nl;
  wire[6:0] rawdns_process_for_for_if_mux1h_2_nl;
  wire[6:0] rawdns_process_for_for_if_mux1h_3_nl;
  wire[6:0] acc_6_nl;
  wire[7:0] nl_acc_6_nl;
  wire[0:0] Cal_Eur_Distance_for_for_mux1h_19_nl;
  wire[3:0] Cal_Eur_Distance_for_for_mux1h_20_nl;
  wire[0:0] Cal_Eur_Distance_for_for_or_5_nl;
  wire[0:0] Cal_Eur_Distance_for_for_and_23_nl;
  wire[0:0] Cal_Eur_Distance_for_for_Cal_Eur_Distance_for_for_mux_2_nl;
  wire[3:0] Cal_Eur_Distance_for_for_Cal_Eur_Distance_for_for_mux_3_nl;
  wire[0:0] Cal_Eur_Distance_for_for_or_6_nl;
  wire[0:0] pixel_loop_if_1_for_1_pixel_loop_if_1_for_1_and_1_nl;
  wire[0:0] pixel_loop_if_1_for_1_mux_3_nl;
  wire[2:0] pixel_loop_if_1_for_1_mux1h_7_nl;
  wire[0:0] pixel_loop_if_1_for_1_mux1h_8_nl;
  wire[2:0] pixel_loop_if_1_for_1_mux1h_9_nl;
  wire[0:0] pixel_loop_if_1_for_1_mux1h_10_nl;
  wire[2:0] pixel_loop_if_1_for_1_mux1h_11_nl;
  wire[0:0] pixel_loop_if_1_for_1_mux1h_12_nl;
  wire[1:0] pixel_loop_if_1_for_1_mux1h_13_nl;
  wire[0:0] pixel_loop_if_1_for_1_or_4_nl;
  wire[7:0] acc_10_nl;
  wire[8:0] nl_acc_10_nl;
  wire[6:0] padding_loop1_mux_2_nl;
  wire[0:0] padding_loop1_or_1_nl;
  wire[4:0] padding_loop1_mux_3_nl;
  wire[1:0] loop2_inner_loop_loop2_inner_loop_and_19_nl;
  wire[0:0] loop2_inner_loop_mux1h_53_nl;
  wire[0:0] loop2_inner_loop_loop2_inner_loop_and_20_nl;
  wire[7:0] loop2_inner_loop_loop2_inner_loop_mux_8_nl;
  wire[7:0] loop2_inner_loop_acc_30_nl;
  wire[8:0] nl_loop2_inner_loop_acc_30_nl;
  wire[0:0] loop2_inner_loop_mux1h_51_nl;
  wire[3:0] loop2_inner_loop_loop2_inner_loop_mux_5_nl;
  wire[1:0] loop2_inner_loop_mux1h_52_nl;
  wire[1:0] and_450_nl;
  wire[1:0] loop2_inner_loop_mux_3_nl;
  wire[0:0] nor_246_nl;
  wire[3:0] loop2_inner_loop_mux1h_54_nl;
  wire[3:0] pixel_loop_pixel_loop_and_13_nl;
  wire[0:0] pixel_loop_if_not_9_nl;
  wire[0:0] loop2_inner_loop_mux1h_55_nl;
  wire[0:0] pixel_loop_pixel_loop_and_14_nl;
  wire[2:0] loop2_inner_loop_mux1h_56_nl;
  wire[2:0] pixel_loop_pixel_loop_and_15_nl;
  wire[0:0] pixel_loop_if_not_11_nl;
  wire[0:0] loop2_inner_loop_mux1h_57_nl;
  wire[0:0] pixel_loop_pixel_loop_and_16_nl;
  wire[0:0] loop2_inner_loop_loop2_inner_loop_or_3_nl;
  wire[0:0] loop2_inner_loop_mux_4_nl;
  wire[0:0] pixel_loop_pixel_loop_and_17_nl;
  wire[0:0] loop2_inner_loop_mux1h_58_nl;
  wire[0:0] pixel_loop_pixel_loop_and_18_nl;
  wire[0:0] loop2_inner_loop_loop2_inner_loop_or_4_nl;
  wire[9:0] loop2_inner_loop_mux1h_59_nl;
  wire[0:0] loop2_inner_loop_or_14_nl;
  wire[12:0] acc_13_nl;
  wire[13:0] nl_acc_13_nl;
  wire[11:0] rawdns_abs_if_mux_2_nl;
  wire[11:0] rawdns_abs_if_mux_3_nl;
  wire[4:0] pixel_loop_if_1_for_mux1h_21_nl;
  wire[2:0] loop2_inner_loop_acc_26_nl;
  wire[3:0] nl_loop2_inner_loop_acc_26_nl;
  wire[3:0] pixel_loop_if_1_for_mux1h_22_nl;
  wire[2:0] loop2_inner_loop_acc_27_nl;
  wire[3:0] nl_loop2_inner_loop_acc_27_nl;
  wire[1:0] pixel_loop_if_1_for_mux_38_nl;
  wire[1:0] pixel_loop_if_1_for_mux_39_nl;
  wire[4:0] acc_17_nl;
  wire[5:0] nl_acc_17_nl;
  wire[0:0] loop2_inner_loop_loop2_inner_loop_or_5_nl;
  wire[0:0] loop2_inner_loop_loop2_inner_loop_nand_2_nl;
  wire[0:0] loop2_inner_loop_mux1h_60_nl;
  wire[1:0] loop2_inner_loop_loop2_inner_loop_nand_3_nl;
  wire[1:0] loop2_inner_loop_mux1h_61_nl;
  wire[0:0] loop2_inner_loop_not_49_nl;
  wire[0:0] loop2_inner_loop_and_2_nl;
  wire[0:0] loop2_inner_loop_mux1h_62_nl;
  wire[0:0] loop2_inner_loop_mux1h_63_nl;
  wire[0:0] loop2_inner_loop_or_15_nl;
  wire[1:0] loop2_inner_loop_mux1h_64_nl;
  wire[5:0] acc_18_nl;
  wire[6:0] nl_acc_18_nl;
  wire[3:0] Cal_Eur_Distance_for_for_mux_21_nl;
  wire[0:0] Cal_Eur_Distance_for_for_Cal_Eur_Distance_for_for_nor_2_nl;
  wire[2:0] Cal_Eur_Distance_for_for_mux_22_nl;
  wire[3:0] acc_19_nl;
  wire[4:0] nl_acc_19_nl;
  wire[1:0] pixel_loop_if_1_for_mux_40_nl;
  wire[0:0] pixel_loop_if_1_for_mux_41_nl;
  wire[1:0] pixel_loop_if_1_for_mux_42_nl;

  // Interconnect Declarations for Component Instantiations 
  wire[14:0] Cal_weight_else_else_mul_nl;
  wire[26:0] nl_Cal_weight_else_else_mul_nl;
  wire [3:0] nl_U_ROM_1i4_1o8_4dd8bd99bd10e9b88c29d6096de160de2e_rg_I_1;
  assign nl_Cal_weight_else_else_mul_nl = rawdns_reg_invksigma2 * ({(operator_42_false_slc_operator_30_false_acc_psp_14_0_itm_1[12:0])
      , operator_30_false_1_slc_Cal_weight_diff_1_1_0_1_itm_1});
  assign Cal_weight_else_else_mul_nl = nl_Cal_weight_else_else_mul_nl[14:0];
  assign nl_U_ROM_1i4_1o8_4dd8bd99bd10e9b88c29d6096de160de2e_rg_I_1 = readslicef_15_4_11(Cal_weight_else_else_mul_nl);
  wire[16:0] Cal_weight_else_if_mul_nl;
  wire[28:0] nl_Cal_weight_else_if_mul_nl;
  wire [5:0] nl_U_ROM_1i5_1o7_3c7b1334a034a5d093fcab7146dc0a172e_rg_I_1;
  assign nl_Cal_weight_else_if_mul_nl = ({operator_42_false_slc_operator_30_false_acc_psp_14_0_itm_1
      , operator_30_false_1_slc_Cal_weight_diff_1_1_0_1_itm_1}) * rawdns_reg_invksigma2;
  assign Cal_weight_else_if_mul_nl = nl_Cal_weight_else_if_mul_nl[16:0];
  assign nl_U_ROM_1i5_1o7_3c7b1334a034a5d093fcab7146dc0a172e_rg_I_1 = (readslicef_17_5_12(Cal_weight_else_if_mul_nl))
      + 5'b11011;
  wire [0:0] nl_isp_rawdns_core_rawdns_lines_rsc_0_0_i_1_inst_rawdns_lines_rsc_0_0_i_iswt0_1_pff;
  assign nl_isp_rawdns_core_rawdns_lines_rsc_0_0_i_1_inst_rawdns_lines_rsc_0_0_i_iswt0_1_pff
      = ~(or_dcpl_75 | or_dcpl_69 | or_dcpl_67);
  wire [0:0] nl_isp_rawdns_core_rawdns_lines_rsc_0_1_i_1_inst_rawdns_lines_rsc_0_1_i_iswt0_1_pff;
  assign nl_isp_rawdns_core_rawdns_lines_rsc_0_1_i_1_inst_rawdns_lines_rsc_0_1_i_iswt0_1_pff
      = ~(or_dcpl_75 | or_dcpl_69 | or_dcpl_77);
  wire [0:0] nl_isp_rawdns_core_rawdns_lines_rsc_0_2_i_1_inst_rawdns_lines_rsc_0_2_i_iswt0_1_pff;
  assign nl_isp_rawdns_core_rawdns_lines_rsc_0_2_i_1_inst_rawdns_lines_rsc_0_2_i_iswt0_1_pff
      = ~(or_dcpl_75 | or_dcpl_81 | or_dcpl_67);
  wire [0:0] nl_isp_rawdns_core_rawdns_lines_rsc_0_3_i_1_inst_rawdns_lines_rsc_0_3_i_iswt0_1_pff;
  assign nl_isp_rawdns_core_rawdns_lines_rsc_0_3_i_1_inst_rawdns_lines_rsc_0_3_i_iswt0_1_pff
      = ~(or_dcpl_75 | or_dcpl_81 | or_dcpl_77);
  wire [0:0] nl_isp_rawdns_core_rawdns_lines_rsc_0_4_i_1_inst_rawdns_lines_rsc_0_4_i_iswt0_1_pff;
  assign nl_isp_rawdns_core_rawdns_lines_rsc_0_4_i_1_inst_rawdns_lines_rsc_0_4_i_iswt0_1_pff
      = ~(or_dcpl_75 | or_dcpl_86 | or_dcpl_67);
  wire [0:0] nl_isp_rawdns_core_rawdns_lines_rsc_0_5_i_1_inst_rawdns_lines_rsc_0_5_i_iswt0_1_pff;
  assign nl_isp_rawdns_core_rawdns_lines_rsc_0_5_i_1_inst_rawdns_lines_rsc_0_5_i_iswt0_1_pff
      = ~(or_dcpl_75 | or_dcpl_86 | or_dcpl_77);
  wire [0:0] nl_isp_rawdns_core_rawdns_lines_rsc_0_6_i_1_inst_rawdns_lines_rsc_0_6_i_iswt0_1_pff;
  assign nl_isp_rawdns_core_rawdns_lines_rsc_0_6_i_1_inst_rawdns_lines_rsc_0_6_i_iswt0_1_pff
      = ~(or_dcpl_75 | or_dcpl_91 | or_dcpl_67);
  wire [0:0] nl_isp_rawdns_core_rawdns_lines_rsc_0_7_i_1_inst_rawdns_lines_rsc_0_7_i_iswt0_1_pff;
  assign nl_isp_rawdns_core_rawdns_lines_rsc_0_7_i_1_inst_rawdns_lines_rsc_0_7_i_iswt0_1_pff
      = ~(or_dcpl_75 | or_dcpl_91 | or_dcpl_77);
  wire [0:0] nl_isp_rawdns_core_rawdns_lines_rsc_0_8_i_1_inst_rawdns_lines_rsc_0_8_i_iswt0_1_pff;
  assign nl_isp_rawdns_core_rawdns_lines_rsc_0_8_i_1_inst_rawdns_lines_rsc_0_8_i_iswt0_1_pff
      = ~(or_dcpl_75 | or_dcpl_97 | or_dcpl_67);
  wire [0:0] nl_isp_rawdns_core_rawdns_lines_rsc_0_9_i_1_inst_rawdns_lines_rsc_0_9_i_iswt0_1_pff;
  assign nl_isp_rawdns_core_rawdns_lines_rsc_0_9_i_1_inst_rawdns_lines_rsc_0_9_i_iswt0_1_pff
      = ~(or_dcpl_75 | or_dcpl_97 | or_dcpl_77);
  ROM_1i4_1o8_96e3ccc5bb278e55ed1046770727a763af  U_ROM_1i4_1o8_4dd8bd99bd10e9b88c29d6096de160de2e_rg
      (
      .I_1(nl_U_ROM_1i4_1o8_4dd8bd99bd10e9b88c29d6096de160de2e_rg_I_1[3:0]),
      .O_1(ROM_1i4_1o8_4dd8bd99bd10e9b88c29d6096de160de2e_1)
    );
  ROM_1i5_1o7_846ac2674154c5acd9efcd9dcf77ea71af  U_ROM_1i5_1o7_3c7b1334a034a5d093fcab7146dc0a172e_rg
      (
      .I_1(nl_U_ROM_1i5_1o7_3c7b1334a034a5d093fcab7146dc0a172e_rg_I_1[4:0]),
      .O_1(ROM_1i5_1o7_3c7b1334a034a5d093fcab7146dc0a172e_1)
    );
  isp_rawdns_core_src_rsci isp_rawdns_core_src_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .src_rsc_dat(src_rsc_dat),
      .src_rsc_vld(src_rsc_vld),
      .src_rsc_rdy(src_rsc_rdy),
      .core_wen(core_wen),
      .src_rsci_oswt(reg_src_rsci_oswt_cse),
      .src_rsci_wen_comp(src_rsci_wen_comp),
      .src_rsci_idat_mxwt(src_rsci_idat_mxwt)
    );
  isp_rawdns_core_dst_rsci isp_rawdns_core_dst_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .dst_rsc_dat(dst_rsc_dat),
      .dst_rsc_vld(dst_rsc_vld),
      .dst_rsc_rdy(dst_rsc_rdy),
      .core_wen(core_wen),
      .dst_rsci_oswt(reg_dst_rsci_oswt_cse),
      .dst_rsci_wen_comp(dst_rsci_wen_comp),
      .dst_rsci_idat(dst_rsci_idat)
    );
  isp_rawdns_core_rawdns_lines_rsc_0_0_i_1 isp_rawdns_core_rawdns_lines_rsc_0_0_i_1_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .rawdns_lines_rsc_0_0_i_q_d(rawdns_lines_rsc_0_0_i_q_d),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .rawdns_lines_rsc_0_0_i_oswt(reg_rawdns_lines_rsc_0_0_i_oswt_cse),
      .rawdns_lines_rsc_0_0_i_q_d_mxwt(rawdns_lines_rsc_0_0_i_q_d_mxwt),
      .rawdns_lines_rsc_0_0_i_we_d_pff(rawdns_lines_rsc_0_0_i_we_d_iff),
      .rawdns_lines_rsc_0_0_i_iswt0_1_pff(nl_isp_rawdns_core_rawdns_lines_rsc_0_0_i_1_inst_rawdns_lines_rsc_0_0_i_iswt0_1_pff[0:0]),
      .rawdns_lines_rsc_0_0_i_re_d_pff(rawdns_lines_rsc_0_0_i_re_d_iff),
      .rawdns_lines_rsc_0_0_i_oswt_pff(pixel_loop_if_1_for_pixel_loop_if_1_for_and_31_rmff)
    );
  isp_rawdns_core_rawdns_lines_rsc_0_1_i_1 isp_rawdns_core_rawdns_lines_rsc_0_1_i_1_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .rawdns_lines_rsc_0_1_i_q_d(rawdns_lines_rsc_0_1_i_q_d),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .rawdns_lines_rsc_0_1_i_oswt(reg_rawdns_lines_rsc_0_1_i_oswt_cse),
      .rawdns_lines_rsc_0_1_i_q_d_mxwt(rawdns_lines_rsc_0_1_i_q_d_mxwt),
      .rawdns_lines_rsc_0_1_i_we_d_pff(rawdns_lines_rsc_0_1_i_we_d_iff),
      .rawdns_lines_rsc_0_1_i_iswt0_1_pff(nl_isp_rawdns_core_rawdns_lines_rsc_0_1_i_1_inst_rawdns_lines_rsc_0_1_i_iswt0_1_pff[0:0]),
      .rawdns_lines_rsc_0_1_i_re_d_pff(rawdns_lines_rsc_0_1_i_re_d_iff),
      .rawdns_lines_rsc_0_1_i_oswt_pff(pixel_loop_if_1_for_pixel_loop_if_1_for_and_30_rmff)
    );
  isp_rawdns_core_rawdns_lines_rsc_0_2_i_1 isp_rawdns_core_rawdns_lines_rsc_0_2_i_1_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .rawdns_lines_rsc_0_2_i_q_d(rawdns_lines_rsc_0_2_i_q_d),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .rawdns_lines_rsc_0_2_i_oswt(reg_rawdns_lines_rsc_0_2_i_oswt_cse),
      .rawdns_lines_rsc_0_2_i_q_d_mxwt(rawdns_lines_rsc_0_2_i_q_d_mxwt),
      .rawdns_lines_rsc_0_2_i_we_d_pff(rawdns_lines_rsc_0_2_i_we_d_iff),
      .rawdns_lines_rsc_0_2_i_iswt0_1_pff(nl_isp_rawdns_core_rawdns_lines_rsc_0_2_i_1_inst_rawdns_lines_rsc_0_2_i_iswt0_1_pff[0:0]),
      .rawdns_lines_rsc_0_2_i_re_d_pff(rawdns_lines_rsc_0_2_i_re_d_iff),
      .rawdns_lines_rsc_0_2_i_oswt_pff(pixel_loop_if_1_for_pixel_loop_if_1_for_and_29_rmff)
    );
  isp_rawdns_core_rawdns_lines_rsc_0_3_i_1 isp_rawdns_core_rawdns_lines_rsc_0_3_i_1_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .rawdns_lines_rsc_0_3_i_q_d(rawdns_lines_rsc_0_3_i_q_d),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .rawdns_lines_rsc_0_3_i_oswt(reg_rawdns_lines_rsc_0_3_i_oswt_cse),
      .rawdns_lines_rsc_0_3_i_q_d_mxwt(rawdns_lines_rsc_0_3_i_q_d_mxwt),
      .rawdns_lines_rsc_0_3_i_we_d_pff(rawdns_lines_rsc_0_3_i_we_d_iff),
      .rawdns_lines_rsc_0_3_i_iswt0_1_pff(nl_isp_rawdns_core_rawdns_lines_rsc_0_3_i_1_inst_rawdns_lines_rsc_0_3_i_iswt0_1_pff[0:0]),
      .rawdns_lines_rsc_0_3_i_re_d_pff(rawdns_lines_rsc_0_3_i_re_d_iff),
      .rawdns_lines_rsc_0_3_i_oswt_pff(pixel_loop_if_1_for_pixel_loop_if_1_for_and_28_rmff)
    );
  isp_rawdns_core_rawdns_lines_rsc_0_4_i_1 isp_rawdns_core_rawdns_lines_rsc_0_4_i_1_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .rawdns_lines_rsc_0_4_i_q_d(rawdns_lines_rsc_0_4_i_q_d),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .rawdns_lines_rsc_0_4_i_oswt(reg_rawdns_lines_rsc_0_4_i_oswt_cse),
      .rawdns_lines_rsc_0_4_i_q_d_mxwt(rawdns_lines_rsc_0_4_i_q_d_mxwt),
      .rawdns_lines_rsc_0_4_i_we_d_pff(rawdns_lines_rsc_0_4_i_we_d_iff),
      .rawdns_lines_rsc_0_4_i_iswt0_1_pff(nl_isp_rawdns_core_rawdns_lines_rsc_0_4_i_1_inst_rawdns_lines_rsc_0_4_i_iswt0_1_pff[0:0]),
      .rawdns_lines_rsc_0_4_i_re_d_pff(rawdns_lines_rsc_0_4_i_re_d_iff),
      .rawdns_lines_rsc_0_4_i_oswt_pff(pixel_loop_if_1_for_pixel_loop_if_1_for_and_27_rmff)
    );
  isp_rawdns_core_rawdns_lines_rsc_0_5_i_1 isp_rawdns_core_rawdns_lines_rsc_0_5_i_1_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .rawdns_lines_rsc_0_5_i_q_d(rawdns_lines_rsc_0_5_i_q_d),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .rawdns_lines_rsc_0_5_i_oswt(reg_rawdns_lines_rsc_0_5_i_oswt_cse),
      .rawdns_lines_rsc_0_5_i_q_d_mxwt(rawdns_lines_rsc_0_5_i_q_d_mxwt),
      .rawdns_lines_rsc_0_5_i_we_d_pff(rawdns_lines_rsc_0_5_i_we_d_iff),
      .rawdns_lines_rsc_0_5_i_iswt0_1_pff(nl_isp_rawdns_core_rawdns_lines_rsc_0_5_i_1_inst_rawdns_lines_rsc_0_5_i_iswt0_1_pff[0:0]),
      .rawdns_lines_rsc_0_5_i_re_d_pff(rawdns_lines_rsc_0_5_i_re_d_iff),
      .rawdns_lines_rsc_0_5_i_oswt_pff(pixel_loop_if_1_for_pixel_loop_if_1_for_and_26_rmff)
    );
  isp_rawdns_core_rawdns_lines_rsc_0_6_i_1 isp_rawdns_core_rawdns_lines_rsc_0_6_i_1_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .rawdns_lines_rsc_0_6_i_q_d(rawdns_lines_rsc_0_6_i_q_d),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .rawdns_lines_rsc_0_6_i_oswt(reg_rawdns_lines_rsc_0_6_i_oswt_cse),
      .rawdns_lines_rsc_0_6_i_q_d_mxwt(rawdns_lines_rsc_0_6_i_q_d_mxwt),
      .rawdns_lines_rsc_0_6_i_we_d_pff(rawdns_lines_rsc_0_6_i_we_d_iff),
      .rawdns_lines_rsc_0_6_i_iswt0_1_pff(nl_isp_rawdns_core_rawdns_lines_rsc_0_6_i_1_inst_rawdns_lines_rsc_0_6_i_iswt0_1_pff[0:0]),
      .rawdns_lines_rsc_0_6_i_re_d_pff(rawdns_lines_rsc_0_6_i_re_d_iff),
      .rawdns_lines_rsc_0_6_i_oswt_pff(pixel_loop_if_1_for_pixel_loop_if_1_for_and_25_rmff)
    );
  isp_rawdns_core_rawdns_lines_rsc_0_7_i_1 isp_rawdns_core_rawdns_lines_rsc_0_7_i_1_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .rawdns_lines_rsc_0_7_i_q_d(rawdns_lines_rsc_0_7_i_q_d),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .rawdns_lines_rsc_0_7_i_oswt(reg_rawdns_lines_rsc_0_7_i_oswt_cse),
      .rawdns_lines_rsc_0_7_i_q_d_mxwt(rawdns_lines_rsc_0_7_i_q_d_mxwt),
      .rawdns_lines_rsc_0_7_i_we_d_pff(rawdns_lines_rsc_0_7_i_we_d_iff),
      .rawdns_lines_rsc_0_7_i_iswt0_1_pff(nl_isp_rawdns_core_rawdns_lines_rsc_0_7_i_1_inst_rawdns_lines_rsc_0_7_i_iswt0_1_pff[0:0]),
      .rawdns_lines_rsc_0_7_i_re_d_pff(rawdns_lines_rsc_0_7_i_re_d_iff),
      .rawdns_lines_rsc_0_7_i_oswt_pff(pixel_loop_if_1_for_pixel_loop_if_1_for_and_24_rmff)
    );
  isp_rawdns_core_rawdns_lines_rsc_0_8_i_1 isp_rawdns_core_rawdns_lines_rsc_0_8_i_1_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .rawdns_lines_rsc_0_8_i_q_d(rawdns_lines_rsc_0_8_i_q_d),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .rawdns_lines_rsc_0_8_i_oswt(reg_rawdns_lines_rsc_0_8_i_oswt_cse),
      .rawdns_lines_rsc_0_8_i_q_d_mxwt(rawdns_lines_rsc_0_8_i_q_d_mxwt),
      .rawdns_lines_rsc_0_8_i_we_d_pff(rawdns_lines_rsc_0_8_i_we_d_iff),
      .rawdns_lines_rsc_0_8_i_iswt0_1_pff(nl_isp_rawdns_core_rawdns_lines_rsc_0_8_i_1_inst_rawdns_lines_rsc_0_8_i_iswt0_1_pff[0:0]),
      .rawdns_lines_rsc_0_8_i_re_d_pff(rawdns_lines_rsc_0_8_i_re_d_iff),
      .rawdns_lines_rsc_0_8_i_oswt_pff(pixel_loop_if_1_for_pixel_loop_if_1_for_and_23_rmff)
    );
  isp_rawdns_core_rawdns_lines_rsc_0_9_i_1 isp_rawdns_core_rawdns_lines_rsc_0_9_i_1_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .rawdns_lines_rsc_0_9_i_q_d(rawdns_lines_rsc_0_9_i_q_d),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .rawdns_lines_rsc_0_9_i_oswt(reg_rawdns_lines_rsc_0_9_i_oswt_cse),
      .rawdns_lines_rsc_0_9_i_q_d_mxwt(rawdns_lines_rsc_0_9_i_q_d_mxwt),
      .rawdns_lines_rsc_0_9_i_we_d_pff(rawdns_lines_rsc_0_9_i_we_d_iff),
      .rawdns_lines_rsc_0_9_i_iswt0_1_pff(nl_isp_rawdns_core_rawdns_lines_rsc_0_9_i_1_inst_rawdns_lines_rsc_0_9_i_iswt0_1_pff[0:0]),
      .rawdns_lines_rsc_0_9_i_re_d_pff(rawdns_lines_rsc_0_9_i_re_d_iff),
      .rawdns_lines_rsc_0_9_i_oswt_pff(pixel_loop_if_1_for_pixel_loop_if_1_for_and_22_rmff)
    );
  isp_rawdns_core_staller isp_rawdns_core_staller_inst (
      .clk(clk),
      .arst_n(arst_n),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .src_rsci_wen_comp(src_rsci_wen_comp),
      .dst_rsci_wen_comp(dst_rsci_wen_comp)
    );
  assign nor_132_nl = ~(Cal_weight_else_if_else_if_slc_Cal_weight_else_if_else_if_acc_29_svs_st_1
      | (pixel_loop_if_1_for_conc_21_itm_1_3_1!=3'b000) | (~ pixel_loop_asn_sft_lpi_1_dfm_1)
      | lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_1_2 | (lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_1_1_0!=2'b10)
      | pixel_loop_asn_sft_1_lpi_1_dfm_1);
  assign nor_133_nl = ~(Cal_Eur_Distance_for_for_slc_Cal_Eur_Distance_for_for_acc_7_sdt_0_itm_1
      | (loop2_inner_loop_conc_24_itm_1_3_1!=3'b000) | or_tmp_17);
  assign mux_199_nl = MUX_s_1_2_2(nor_132_nl, nor_133_nl, lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_1_1);
  assign pixel_loop_if_1_for_pixel_loop_if_1_for_and_31_rmff = mux_199_nl & main_stage_0_2;
  assign nor_130_nl = ~((~ Cal_weight_else_if_else_if_slc_Cal_weight_else_if_else_if_acc_29_svs_st_1)
      | (pixel_loop_if_1_for_conc_21_itm_1_3_1!=3'b000) | (~ pixel_loop_asn_sft_lpi_1_dfm_1)
      | lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_1_2 | (lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_1_1_0!=2'b10)
      | pixel_loop_asn_sft_1_lpi_1_dfm_1);
  assign nor_131_nl = ~((~ Cal_Eur_Distance_for_for_slc_Cal_Eur_Distance_for_for_acc_7_sdt_0_itm_1)
      | (loop2_inner_loop_conc_24_itm_1_3_1!=3'b000) | or_tmp_17);
  assign mux_200_nl = MUX_s_1_2_2(nor_130_nl, nor_131_nl, lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_1_1);
  assign pixel_loop_if_1_for_pixel_loop_if_1_for_and_30_rmff = mux_200_nl & main_stage_0_2;
  assign nor_128_nl = ~(Cal_weight_else_if_else_if_slc_Cal_weight_else_if_else_if_acc_29_svs_st_1
      | (pixel_loop_if_1_for_conc_21_itm_1_3_1!=3'b001) | (~ pixel_loop_asn_sft_lpi_1_dfm_1)
      | lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_1_2 | (lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_1_1_0!=2'b10)
      | pixel_loop_asn_sft_1_lpi_1_dfm_1);
  assign nor_129_nl = ~(Cal_Eur_Distance_for_for_slc_Cal_Eur_Distance_for_for_acc_7_sdt_0_itm_1
      | (loop2_inner_loop_conc_24_itm_1_3_1!=3'b001) | or_tmp_17);
  assign mux_201_nl = MUX_s_1_2_2(nor_128_nl, nor_129_nl, lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_1_1);
  assign pixel_loop_if_1_for_pixel_loop_if_1_for_and_29_rmff = mux_201_nl & main_stage_0_2;
  assign nor_126_nl = ~((~ Cal_weight_else_if_else_if_slc_Cal_weight_else_if_else_if_acc_29_svs_st_1)
      | (pixel_loop_if_1_for_conc_21_itm_1_3_1!=3'b001) | (~ pixel_loop_asn_sft_lpi_1_dfm_1)
      | lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_1_2 | (lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_1_1_0!=2'b10)
      | pixel_loop_asn_sft_1_lpi_1_dfm_1);
  assign nor_127_nl = ~((~ Cal_Eur_Distance_for_for_slc_Cal_Eur_Distance_for_for_acc_7_sdt_0_itm_1)
      | (loop2_inner_loop_conc_24_itm_1_3_1!=3'b001) | or_tmp_17);
  assign mux_202_nl = MUX_s_1_2_2(nor_126_nl, nor_127_nl, lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_1_1);
  assign pixel_loop_if_1_for_pixel_loop_if_1_for_and_28_rmff = mux_202_nl & main_stage_0_2;
  assign nor_124_nl = ~(Cal_weight_else_if_else_if_slc_Cal_weight_else_if_else_if_acc_29_svs_st_1
      | (pixel_loop_if_1_for_conc_21_itm_1_3_1!=3'b010) | (~ pixel_loop_asn_sft_lpi_1_dfm_1)
      | lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_1_2 | (lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_1_1_0!=2'b10)
      | pixel_loop_asn_sft_1_lpi_1_dfm_1);
  assign nor_125_nl = ~(Cal_Eur_Distance_for_for_slc_Cal_Eur_Distance_for_for_acc_7_sdt_0_itm_1
      | (loop2_inner_loop_conc_24_itm_1_3_1!=3'b010) | or_tmp_17);
  assign mux_203_nl = MUX_s_1_2_2(nor_124_nl, nor_125_nl, lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_1_1);
  assign pixel_loop_if_1_for_pixel_loop_if_1_for_and_27_rmff = mux_203_nl & main_stage_0_2;
  assign nor_122_nl = ~((~ Cal_weight_else_if_else_if_slc_Cal_weight_else_if_else_if_acc_29_svs_st_1)
      | (pixel_loop_if_1_for_conc_21_itm_1_3_1!=3'b010) | (~ pixel_loop_asn_sft_lpi_1_dfm_1)
      | lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_1_2 | (lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_1_1_0!=2'b10)
      | pixel_loop_asn_sft_1_lpi_1_dfm_1);
  assign nor_123_nl = ~((~ Cal_Eur_Distance_for_for_slc_Cal_Eur_Distance_for_for_acc_7_sdt_0_itm_1)
      | (loop2_inner_loop_conc_24_itm_1_3_1!=3'b010) | or_tmp_17);
  assign mux_204_nl = MUX_s_1_2_2(nor_122_nl, nor_123_nl, lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_1_1);
  assign pixel_loop_if_1_for_pixel_loop_if_1_for_and_26_rmff = mux_204_nl & main_stage_0_2;
  assign nor_120_nl = ~(Cal_weight_else_if_else_if_slc_Cal_weight_else_if_else_if_acc_29_svs_st_1
      | (pixel_loop_if_1_for_conc_21_itm_1_3_1!=3'b011) | (~ pixel_loop_asn_sft_lpi_1_dfm_1)
      | lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_1_2 | (lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_1_1_0!=2'b10)
      | pixel_loop_asn_sft_1_lpi_1_dfm_1);
  assign nor_121_nl = ~(Cal_Eur_Distance_for_for_slc_Cal_Eur_Distance_for_for_acc_7_sdt_0_itm_1
      | (loop2_inner_loop_conc_24_itm_1_3_1!=3'b011) | or_tmp_17);
  assign mux_205_nl = MUX_s_1_2_2(nor_120_nl, nor_121_nl, lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_1_1);
  assign pixel_loop_if_1_for_pixel_loop_if_1_for_and_25_rmff = mux_205_nl & main_stage_0_2;
  assign nor_118_nl = ~((~ Cal_weight_else_if_else_if_slc_Cal_weight_else_if_else_if_acc_29_svs_st_1)
      | (pixel_loop_if_1_for_conc_21_itm_1_3_1!=3'b011) | (~ pixel_loop_asn_sft_lpi_1_dfm_1)
      | lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_1_2 | (lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_1_1_0!=2'b10)
      | pixel_loop_asn_sft_1_lpi_1_dfm_1);
  assign nor_119_nl = ~((~(Cal_Eur_Distance_for_for_slc_Cal_Eur_Distance_for_for_acc_7_sdt_0_itm_1
      & (loop2_inner_loop_conc_24_itm_1_3_1==3'b011))) | or_tmp_17);
  assign mux_206_nl = MUX_s_1_2_2(nor_118_nl, nor_119_nl, lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_1_1);
  assign pixel_loop_if_1_for_pixel_loop_if_1_for_and_24_rmff = mux_206_nl & main_stage_0_2;
  assign nor_117_nl = ~(Cal_weight_else_if_else_if_slc_Cal_weight_else_if_else_if_acc_29_svs_st_1
      | (pixel_loop_if_1_for_conc_21_itm_1_3_1!=3'b100) | (~ pixel_loop_asn_sft_lpi_1_dfm_1)
      | lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_1_2 | (lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_1_1_0!=2'b10)
      | pixel_loop_asn_sft_1_lpi_1_dfm_1);
  assign nor_214_nl = ~(Cal_Eur_Distance_for_for_slc_Cal_Eur_Distance_for_for_acc_7_sdt_0_itm_1
      | (loop2_inner_loop_conc_24_itm_1_3_1!=3'b100) | or_tmp_17);
  assign mux_207_nl = MUX_s_1_2_2(nor_117_nl, nor_214_nl, lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_1_1);
  assign pixel_loop_if_1_for_pixel_loop_if_1_for_and_23_rmff = mux_207_nl & main_stage_0_2;
  assign nor_115_nl = ~((~ Cal_weight_else_if_else_if_slc_Cal_weight_else_if_else_if_acc_29_svs_st_1)
      | (pixel_loop_if_1_for_conc_21_itm_1_3_1!=3'b100) | (~ pixel_loop_asn_sft_lpi_1_dfm_1)
      | lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_1_2 | (lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_1_1_0!=2'b10)
      | pixel_loop_asn_sft_1_lpi_1_dfm_1);
  assign nor_116_nl = ~((~ Cal_Eur_Distance_for_for_slc_Cal_Eur_Distance_for_for_acc_7_sdt_0_itm_1)
      | (loop2_inner_loop_conc_24_itm_1_3_1!=3'b100) | or_tmp_17);
  assign mux_208_nl = MUX_s_1_2_2(nor_115_nl, nor_116_nl, lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_1_1);
  assign pixel_loop_if_1_for_pixel_loop_if_1_for_and_22_rmff = mux_208_nl & main_stage_0_2;
  assign nor_19_cse = ~(exitL_exitL_exit_Cal_Eur_Distance_for_1_lpi_1 | (~ lfst_exit_rawdns_process_for_for_1_lpi_1));
  assign or_78_cse = (rawdns_process_l_3_1_lpi_1!=3'b010) | (rawdns_process_k_3_1_lpi_1!=3'b010);
  assign Cal_Eur_Distance_temp_block_and_cse = core_wen & (~ or_dcpl_180);
  assign Cal_Eur_Distance_for_1_and_62_cse = core_wen & pixel_loop_if_1_asn_sft_lpi_1_mx0
      & rawdns_process_for_equal_tmp_3 & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
      & (~ lfst_exitL_exit_padding_loop2_lpi_1_dfm_1_1);
  assign and_367_rgt = padding_loop2_asn_495 & (~ or_707_tmp);
  assign padding_loop2_and_342_rgt = padding_loop2_asn_497 & (~ or_707_tmp);
  assign or_162_cse = (padding_loop2_mux_125_tmp!=10'b0000000000);
  assign padding_loop1_nor_2_cse = ~((pixel_loop_if_1_for_acc_11_psp_1[2:1]!=2'b00));
  assign pixel_loop_if_1_for_nor_7_cse = ~((pixel_loop_if_1_for_acc_11_psp_1[1:0]!=2'b00));
  assign pixel_loop_if_1_for_nor_4_cse = ~((pixel_loop_if_1_for_acc_11_psp_1[2])
      | (pixel_loop_if_1_for_acc_11_psp_1[0]));
  assign nor_62_cse = ~(padding_loop2_equal_tmp_1 | padding_loop2_equal_tmp_3_1 |
      (~ main_stage_0_2));
  assign or_231_cse = exitL_exitL_exit_padding_loop2_sva | (~ lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_1);
  assign and_446_cse = rawdns_reg_eb & pixel_loop_acc_4_itm_26_1;
  assign rawdns_reg_eb_and_cse = core_wen & (~ lfst_exitL_exit_padding_loop2_lpi_1_dfm_1_1);
  assign or_249_cse = (rawdns_process_for_mux1h_350_tmp!=2'b00);
  assign and_351_tmp = (~(padding_loop2_or_401_tmp_1 | rawdns_process_for_or_138_tmp_1))
      & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (operator_4_false_1_acc_itm_3_1 | (~ operator_4_false_acc_itm_4_1));
  assign pixel_loop_and_201_rgt = rawdns_process_for_or_362_tmp_1 & pixel_loop_and_182_tmp_1
      & (~ lfst_exitL_exit_padding_loop2_lpi_1_dfm_1_1);
  assign padding_loop2_and_cse = core_wen & (~(lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0
      | (~ asn_sft_lpi_1) | or_231_cse));
  assign and_311_cse = pixel_loop_acc_4_itm_26_1 & exitL_exitL_exit_padding_loop2_sva;
  assign and_299_cse = or_249_cse & rawdns_reg_eb;
  assign pixel_loop_if_1_for_nor_cse = ~((pixel_loop_if_1_for_acc_11_psp_1!=3'b000));
  assign and_295_cse = (~ sfi_rawdns_reg_eb_lpi_1) & lfst_exit_padding_loop2_lpi_1_1
      & lfst_exitL_exit_padding_loop2_lpi_1_dfm_1_1;
  assign and_296_cse = or_dcpl_296 & lfst_exitL_exit_padding_loop2_lpi_1_dfm_1_1;
  assign rawdns_block_nand_9_nl = ~(main_stage_0_3 & (~((~(pixel_loop_and_10_tmp_1
      & (~(((~ reg_refresh_inner_loop_and_200_tmp_1) & rawdns_process_for_or_tmp_2)
      | ((~ pixel_loop_if_1_for_and_45_tmp_1) & rawdns_process_for_equal_tmp_2) |
      rawdns_process_for_equal_tmp_1_2 | rawdns_process_for_equal_tmp_2_2 | rawdns_process_for_nor_tmp_2))))
      | padding_loop2_or_24_tmp_2)));
  assign rawdns_process_for_and_123_nl = reg_refresh_inner_loop_and_200_tmp_1 & rawdns_process_for_or_tmp_2
      & pixel_loop_and_10_tmp_1 & (~ padding_loop2_or_24_tmp_2) & main_stage_0_3;
  assign rawdns_process_for_and_125_nl = pixel_loop_if_1_for_and_45_tmp_1 & rawdns_process_for_equal_tmp_2
      & pixel_loop_and_10_tmp_1 & (~ padding_loop2_or_24_tmp_2) & main_stage_0_3;
  assign rawdns_block_8_10_lpi_1_mx0 = MUX1HOT_v_12_3_2(rawdns_block_8_10_lpi_1,
      reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1,
      tmp_lpi_1_dfm_1, {rawdns_block_nand_9_nl , rawdns_process_for_and_123_nl ,
      rawdns_process_for_and_125_nl});
  assign rawdns_block_nand_8_nl = ~(main_stage_0_3 & (~((~(pixel_loop_and_10_tmp_1
      & (~(((~ reg_refresh_inner_loop_and_223_tmp_1) & rawdns_process_for_or_tmp_2)
      | ((~ pixel_loop_if_1_for_and_17_tmp_1) & rawdns_process_for_equal_tmp_2) |
      rawdns_process_for_equal_tmp_1_2 | rawdns_process_for_equal_tmp_2_2 | rawdns_process_for_nor_tmp_2))))
      | padding_loop2_or_24_tmp_2)));
  assign rawdns_process_for_and_11_nl = reg_refresh_inner_loop_and_223_tmp_1 & rawdns_process_for_or_tmp_2
      & pixel_loop_and_10_tmp_1 & (~ padding_loop2_or_24_tmp_2) & main_stage_0_3;
  assign rawdns_process_for_and_13_nl = pixel_loop_if_1_for_and_17_tmp_1 & rawdns_process_for_equal_tmp_2
      & pixel_loop_and_10_tmp_1 & (~ padding_loop2_or_24_tmp_2) & main_stage_0_3;
  assign rawdns_block_0_10_lpi_1_mx0 = MUX1HOT_v_12_3_2(rawdns_block_0_10_lpi_1,
      reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1,
      tmp_lpi_1_dfm_1, {rawdns_block_nand_8_nl , rawdns_process_for_and_11_nl , rawdns_process_for_and_13_nl});
  assign rawdns_block_nand_7_nl = ~(main_stage_0_3 & (~((~(pixel_loop_and_10_tmp_1
      & (~(((~ reg_refresh_inner_loop_and_135_tmp_1) & rawdns_process_for_or_tmp_2)
      | ((~ pixel_loop_if_1_for_and_33_tmp_1) & rawdns_process_for_equal_tmp_2) |
      rawdns_process_for_equal_tmp_1_2 | rawdns_process_for_equal_tmp_2_2 | rawdns_process_for_nor_tmp_2))))
      | padding_loop2_or_24_tmp_2)));
  assign rawdns_process_for_and_67_nl = reg_refresh_inner_loop_and_135_tmp_1 & rawdns_process_for_or_tmp_2
      & pixel_loop_and_10_tmp_1 & (~ padding_loop2_or_24_tmp_2) & main_stage_0_3;
  assign rawdns_process_for_and_69_nl = pixel_loop_if_1_for_and_33_tmp_1 & rawdns_process_for_equal_tmp_2
      & pixel_loop_and_10_tmp_1 & (~ padding_loop2_or_24_tmp_2) & main_stage_0_3;
  assign rawdns_block_4_10_lpi_1_mx0 = MUX1HOT_v_12_3_2(rawdns_block_4_10_lpi_1,
      reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1,
      tmp_lpi_1_dfm_1, {rawdns_block_nand_7_nl , rawdns_process_for_and_67_nl , rawdns_process_for_and_69_nl});
  assign rawdns_block_nand_6_nl = ~(main_stage_0_3 & (~((~(pixel_loop_and_10_tmp_1
      & (~(((~ reg_refresh_inner_loop_and_178_tmp_1) & rawdns_process_for_or_tmp_2)
      | ((~ pixel_loop_if_1_for_and_29_tmp_1) & rawdns_process_for_equal_tmp_2) |
      rawdns_process_for_equal_tmp_1_2 | rawdns_process_for_equal_tmp_2_2 | rawdns_process_for_nor_tmp_2))))
      | padding_loop2_or_24_tmp_2)));
  assign rawdns_process_for_and_109_nl = reg_refresh_inner_loop_and_178_tmp_1 & rawdns_process_for_or_tmp_2
      & pixel_loop_and_10_tmp_1 & (~ padding_loop2_or_24_tmp_2) & main_stage_0_3;
  assign rawdns_process_for_and_111_nl = pixel_loop_if_1_for_and_29_tmp_1 & rawdns_process_for_equal_tmp_2
      & pixel_loop_and_10_tmp_1 & (~ padding_loop2_or_24_tmp_2) & main_stage_0_3;
  assign rawdns_block_7_10_lpi_1_mx0 = MUX1HOT_v_12_3_2(rawdns_block_7_10_lpi_1,
      reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1,
      tmp_lpi_1_dfm_1, {rawdns_block_nand_6_nl , rawdns_process_for_and_109_nl ,
      rawdns_process_for_and_111_nl});
  assign rawdns_block_nand_5_nl = ~(main_stage_0_3 & (~((~(pixel_loop_and_10_tmp_1
      & (~(((~ reg_refresh_inner_loop_and_157_tmp_1) & rawdns_process_for_or_tmp_2)
      | ((~ pixel_loop_if_1_for_and_12_tmp_1) & rawdns_process_for_equal_tmp_2) |
      rawdns_process_for_equal_tmp_1_2 | rawdns_process_for_equal_tmp_2_2 | rawdns_process_for_nor_tmp_2))))
      | padding_loop2_or_24_tmp_2)));
  assign rawdns_process_for_and_53_nl = reg_refresh_inner_loop_and_157_tmp_1 & rawdns_process_for_or_tmp_2
      & pixel_loop_and_10_tmp_1 & (~ padding_loop2_or_24_tmp_2) & main_stage_0_3;
  assign rawdns_process_for_and_55_nl = pixel_loop_if_1_for_and_12_tmp_1 & rawdns_process_for_equal_tmp_2
      & pixel_loop_and_10_tmp_1 & (~ padding_loop2_or_24_tmp_2) & main_stage_0_3;
  assign rawdns_block_3_10_lpi_1_mx0 = MUX1HOT_v_12_3_2(rawdns_block_3_10_lpi_1,
      reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1,
      tmp_lpi_1_dfm_1, {rawdns_block_nand_5_nl , rawdns_process_for_and_53_nl , rawdns_process_for_and_55_nl});
  assign rawdns_block_nand_4_nl = ~(main_stage_0_3 & (~((~(pixel_loop_and_10_tmp_1
      & (~(((~ reg_refresh_inner_loop_and_156_tmp_1) & rawdns_process_for_or_tmp_2)
      | ((~ pixel_loop_if_1_for_and_7_tmp_1) & rawdns_process_for_equal_tmp_2) |
      rawdns_process_for_equal_tmp_1_2 | rawdns_process_for_equal_tmp_2_2 | rawdns_process_for_nor_tmp_2))))
      | padding_loop2_or_24_tmp_2)));
  assign rawdns_process_for_and_95_nl = reg_refresh_inner_loop_and_156_tmp_1 & rawdns_process_for_or_tmp_2
      & pixel_loop_and_10_tmp_1 & (~ padding_loop2_or_24_tmp_2) & main_stage_0_3;
  assign rawdns_process_for_and_97_nl = pixel_loop_if_1_for_and_7_tmp_1 & rawdns_process_for_equal_tmp_2
      & pixel_loop_and_10_tmp_1 & (~ padding_loop2_or_24_tmp_2) & main_stage_0_3;
  assign rawdns_block_6_10_lpi_1_mx0 = MUX1HOT_v_12_3_2(rawdns_block_6_10_lpi_1,
      reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1,
      tmp_lpi_1_dfm_1, {rawdns_block_nand_4_nl , rawdns_process_for_and_95_nl , rawdns_process_for_and_97_nl});
  assign rawdns_block_nand_3_nl = ~(main_stage_0_3 & (~((~(pixel_loop_and_10_tmp_1
      & (~(((~ reg_refresh_inner_loop_and_179_tmp_1) & rawdns_process_for_or_tmp_2)
      | ((~ pixel_loop_if_1_for_and_51_tmp_1) & rawdns_process_for_equal_tmp_2) |
      rawdns_process_for_equal_tmp_1_2 | rawdns_process_for_equal_tmp_2_2 | rawdns_process_for_nor_tmp_2))))
      | padding_loop2_or_24_tmp_2)));
  assign rawdns_process_for_and_39_nl = reg_refresh_inner_loop_and_179_tmp_1 & rawdns_process_for_or_tmp_2
      & pixel_loop_and_10_tmp_1 & (~ padding_loop2_or_24_tmp_2) & main_stage_0_3;
  assign rawdns_process_for_and_41_nl = pixel_loop_if_1_for_and_51_tmp_1 & rawdns_process_for_equal_tmp_2
      & pixel_loop_and_10_tmp_1 & (~ padding_loop2_or_24_tmp_2) & main_stage_0_3;
  assign rawdns_block_2_10_lpi_1_mx0 = MUX1HOT_v_12_3_2(rawdns_block_2_10_lpi_1,
      reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1,
      tmp_lpi_1_dfm_1, {rawdns_block_nand_3_nl , rawdns_process_for_and_39_nl , rawdns_process_for_and_41_nl});
  assign rawdns_block_nand_2_nl = ~(main_stage_0_3 & (~((~(pixel_loop_and_10_tmp_1
      & (~(((~ reg_refresh_inner_loop_and_222_tmp_1) & rawdns_process_for_or_tmp_2)
      | ((~ pixel_loop_if_1_for_and_2_tmp_1) & rawdns_process_for_equal_tmp_2) |
      rawdns_process_for_equal_tmp_1_2 | rawdns_process_for_equal_tmp_2_2 | rawdns_process_for_nor_tmp_2))))
      | padding_loop2_or_24_tmp_2)));
  assign rawdns_process_for_and_137_nl = reg_refresh_inner_loop_and_222_tmp_1 & rawdns_process_for_or_tmp_2
      & pixel_loop_and_10_tmp_1 & (~ padding_loop2_or_24_tmp_2) & main_stage_0_3;
  assign rawdns_process_for_and_139_nl = pixel_loop_if_1_for_and_2_tmp_1 & rawdns_process_for_equal_tmp_2
      & pixel_loop_and_10_tmp_1 & (~ padding_loop2_or_24_tmp_2) & main_stage_0_3;
  assign rawdns_block_9_10_lpi_1_mx0 = MUX1HOT_v_12_3_2(rawdns_block_9_10_lpi_1,
      reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1,
      tmp_lpi_1_dfm_1, {rawdns_block_nand_2_nl , rawdns_process_for_and_137_nl ,
      rawdns_process_for_and_139_nl});
  assign rawdns_block_nand_1_nl = ~(main_stage_0_3 & (~((~(pixel_loop_and_10_tmp_1
      & (~(((~ reg_refresh_inner_loop_and_201_tmp_1) & rawdns_process_for_or_tmp_2)
      | ((~ pixel_loop_if_1_for_and_36_tmp_1) & rawdns_process_for_equal_tmp_2) |
      rawdns_process_for_equal_tmp_1_2 | rawdns_process_for_equal_tmp_2_2 | rawdns_process_for_nor_tmp_2))))
      | padding_loop2_or_24_tmp_2)));
  assign rawdns_process_for_and_25_nl = reg_refresh_inner_loop_and_201_tmp_1 & rawdns_process_for_or_tmp_2
      & pixel_loop_and_10_tmp_1 & (~ padding_loop2_or_24_tmp_2) & main_stage_0_3;
  assign rawdns_process_for_and_27_nl = pixel_loop_if_1_for_and_36_tmp_1 & rawdns_process_for_equal_tmp_2
      & pixel_loop_and_10_tmp_1 & (~ padding_loop2_or_24_tmp_2) & main_stage_0_3;
  assign rawdns_block_1_10_lpi_1_mx0 = MUX1HOT_v_12_3_2(rawdns_block_1_10_lpi_1,
      reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1,
      tmp_lpi_1_dfm_1, {rawdns_block_nand_1_nl , rawdns_process_for_and_25_nl , rawdns_process_for_and_27_nl});
  assign rawdns_block_nand_nl = ~(main_stage_0_3 & (~((~(pixel_loop_and_10_tmp_1
      & (~(((~ reg_refresh_inner_loop_and_134_tmp_1) & rawdns_process_for_or_tmp_2)
      | ((~ pixel_loop_if_1_for_and_48_tmp_1) & rawdns_process_for_equal_tmp_2) |
      rawdns_process_for_equal_tmp_1_2 | rawdns_process_for_equal_tmp_2_2 | rawdns_process_for_nor_tmp_2))))
      | padding_loop2_or_24_tmp_2)));
  assign rawdns_process_for_and_81_nl = reg_refresh_inner_loop_and_134_tmp_1 & rawdns_process_for_or_tmp_2
      & pixel_loop_and_10_tmp_1 & (~ padding_loop2_or_24_tmp_2) & main_stage_0_3;
  assign rawdns_process_for_and_83_nl = pixel_loop_if_1_for_and_48_tmp_1 & rawdns_process_for_equal_tmp_2
      & pixel_loop_and_10_tmp_1 & (~ padding_loop2_or_24_tmp_2) & main_stage_0_3;
  assign rawdns_block_5_10_lpi_1_mx0 = MUX1HOT_v_12_3_2(rawdns_block_5_10_lpi_1,
      reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1,
      tmp_lpi_1_dfm_1, {rawdns_block_nand_nl , rawdns_process_for_and_81_nl , rawdns_process_for_and_83_nl});
  assign asn_rawdns_block_5_5_lpi_1_nand_nl = ~(main_stage_0_3 & padding_loop2_and_203_itm_2);
  assign rawdns_block_5_5_lpi_1_mx0 = MUX_v_12_2_2(reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1,
      rawdns_block_5_5_lpi_1, asn_rawdns_block_5_5_lpi_1_nand_nl);
  assign pixel_loop_if_1_for_pixel_loop_if_1_for_and_nl = asn_sft_lpi_1_st_2 & padding_loop1_nor_itm_2;
  assign tmp_lpi_1_dfm_1 = MUX1HOT_v_12_10_2(rawdns_lines_rsc_0_0_i_q_d_mxwt, rawdns_lines_rsc_0_1_i_q_d_mxwt,
      rawdns_lines_rsc_0_2_i_q_d_mxwt, rawdns_lines_rsc_0_3_i_q_d_mxwt, rawdns_lines_rsc_0_4_i_q_d_mxwt,
      rawdns_lines_rsc_0_5_i_q_d_mxwt, rawdns_lines_rsc_0_6_i_q_d_mxwt, rawdns_lines_rsc_0_7_i_q_d_mxwt,
      rawdns_lines_rsc_0_8_i_q_d_mxwt, rawdns_lines_rsc_0_9_i_q_d_mxwt, {loop2_inner_loop_loop2_inner_loop_and_5_itm_2
      , pixel_loop_if_1_for_pixel_loop_if_1_for_and_nl , pixel_loop_if_1_for_pixel_loop_if_1_for_and_17
      , exit_rawdns_process_for_lpi_1_dfm_2_st_2 , pixel_loop_if_1_for_pixel_loop_if_1_for_and_19
      , exitL_exit_rawdns_process_for_lpi_1_dfm_st_2 , loop2_inner_loop_loop2_inner_loop_and_2_itm_2
      , loop2_inner_loop_loop2_inner_loop_and_3_itm_1 , pixel_loop_if_1_for_pixel_loop_if_1_for_and_21
      , loop2_inner_loop_loop2_inner_loop_and_4_itm_2});
  assign pixel_loop_if_1_for_and_2_tmp_1 = pixel_loop_if_1_for_and_stg_2_5_sva_1
      & (pixel_loop_if_1_for_pixel_loop_if_1_for_conc_decb_3_1_sva_2[2]);
  assign reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1
      = MUX_v_12_121_2(rawdns_block_0_0_lpi_1, rawdns_block_0_1_lpi_1, rawdns_block_0_2_lpi_1,
      rawdns_block_0_3_lpi_1, rawdns_block_0_4_lpi_1, rawdns_block_0_5_lpi_1, rawdns_block_0_6_lpi_1,
      rawdns_block_0_7_lpi_1, rawdns_block_0_8_lpi_1, rawdns_block_0_9_lpi_1, rawdns_block_0_10_lpi_1_mx0,
      rawdns_block_1_0_lpi_1, rawdns_block_1_1_lpi_1, rawdns_block_1_2_lpi_1, rawdns_block_1_3_lpi_1,
      rawdns_block_1_4_lpi_1, rawdns_block_1_5_lpi_1, rawdns_block_1_6_lpi_1, rawdns_block_1_7_lpi_1,
      rawdns_block_1_8_lpi_1, rawdns_block_1_9_lpi_1, rawdns_block_1_10_lpi_1_mx0,
      rawdns_block_2_0_lpi_1, rawdns_block_2_1_lpi_1, rawdns_block_2_2_lpi_1, rawdns_block_2_3_lpi_1,
      rawdns_block_2_4_lpi_1, rawdns_block_2_5_lpi_1, rawdns_block_2_6_lpi_1, rawdns_block_2_7_lpi_1,
      rawdns_block_2_8_lpi_1, rawdns_block_2_9_lpi_1, rawdns_block_2_10_lpi_1_mx0,
      rawdns_block_3_0_lpi_1, rawdns_block_3_1_lpi_1, rawdns_block_3_2_lpi_1, rawdns_block_3_3_lpi_1,
      rawdns_block_3_4_lpi_1, rawdns_block_3_5_lpi_1, rawdns_block_3_6_lpi_1, rawdns_block_3_7_lpi_1,
      rawdns_block_3_8_lpi_1, rawdns_block_3_9_lpi_1, rawdns_block_3_10_lpi_1_mx0,
      rawdns_block_4_0_lpi_1, rawdns_block_4_1_lpi_1, rawdns_block_4_2_lpi_1, rawdns_block_4_3_lpi_1,
      rawdns_block_4_4_lpi_1, rawdns_block_4_5_lpi_1, rawdns_block_4_6_lpi_1, rawdns_block_4_7_lpi_1,
      rawdns_block_4_8_lpi_1, rawdns_block_4_9_lpi_1, rawdns_block_4_10_lpi_1_mx0,
      rawdns_block_5_0_lpi_1, rawdns_block_5_1_lpi_1, rawdns_block_5_2_lpi_1, rawdns_block_5_3_lpi_1,
      rawdns_block_5_4_lpi_1, rawdns_block_5_5_lpi_1_mx0, rawdns_block_5_6_lpi_1,
      rawdns_block_5_7_lpi_1, rawdns_block_5_8_lpi_1, rawdns_block_5_9_lpi_1, rawdns_block_5_10_lpi_1_mx0,
      rawdns_block_6_0_lpi_1, rawdns_block_6_1_lpi_1, rawdns_block_6_2_lpi_1, rawdns_block_6_3_lpi_1,
      rawdns_block_6_4_lpi_1, rawdns_block_6_5_lpi_1, rawdns_block_6_6_lpi_1, rawdns_block_6_7_lpi_1,
      rawdns_block_6_8_lpi_1, rawdns_block_6_9_lpi_1, rawdns_block_6_10_lpi_1_mx0,
      rawdns_block_7_0_lpi_1, rawdns_block_7_1_lpi_1, rawdns_block_7_2_lpi_1, rawdns_block_7_3_lpi_1,
      rawdns_block_7_4_lpi_1, rawdns_block_7_5_lpi_1, rawdns_block_7_6_lpi_1, rawdns_block_7_7_lpi_1,
      rawdns_block_7_8_lpi_1, rawdns_block_7_9_lpi_1, rawdns_block_7_10_lpi_1_mx0,
      rawdns_block_8_0_lpi_1, rawdns_block_8_1_lpi_1, rawdns_block_8_2_lpi_1, rawdns_block_8_3_lpi_1,
      rawdns_block_8_4_lpi_1, rawdns_block_8_5_lpi_1, rawdns_block_8_6_lpi_1, rawdns_block_8_7_lpi_1,
      rawdns_block_8_8_lpi_1, rawdns_block_8_9_lpi_1, rawdns_block_8_10_lpi_1_mx0,
      rawdns_block_9_0_lpi_1, rawdns_block_9_1_lpi_1, rawdns_block_9_2_lpi_1, rawdns_block_9_3_lpi_1,
      rawdns_block_9_4_lpi_1, rawdns_block_9_5_lpi_1, rawdns_block_9_6_lpi_1, rawdns_block_9_7_lpi_1,
      rawdns_block_9_8_lpi_1, rawdns_block_9_9_lpi_1, rawdns_block_9_10_lpi_1_mx0,
      rawdns_block_10_0_lpi_1, rawdns_block_10_1_lpi_1, rawdns_block_10_2_lpi_1,
      rawdns_block_10_3_lpi_1, rawdns_block_10_4_lpi_1, rawdns_block_10_5_lpi_1,
      rawdns_block_10_6_lpi_1, rawdns_block_10_7_lpi_1, rawdns_block_10_8_lpi_1,
      rawdns_block_10_9_lpi_1, rawdns_block_10_10_lpi_1, operator_42_false_slc_operator_30_false_acc_psp_14_0_itm_1[6:0]);
  assign reg_refresh_inner_loop_and_222_tmp_1 = reg_refresh_inner_loop_and_stg_5_45_sva_2
      & reg_refresh_inner_loop_acc_decb_sva_2_6;
  assign pixel_loop_if_1_for_and_45_tmp_1 = pixel_loop_if_1_for_and_stg_2_2_sva_1
      & (~ (pixel_loop_if_1_for_pixel_loop_if_1_for_conc_decb_3_1_sva_2[2]));
  assign reg_refresh_inner_loop_and_200_tmp_1 = reg_refresh_inner_loop_and_stg_5_34_sva_2
      & reg_refresh_inner_loop_acc_decb_sva_2_6;
  assign pixel_loop_if_1_for_and_29_tmp_1 = pixel_loop_if_1_for_and_stg_1_3_sva_1
      & (pixel_loop_if_1_for_pixel_loop_if_1_for_conc_decb_3_1_sva_2[2:1]==2'b01);
  assign pixel_loop_if_1_for_and_7_tmp_1 = pixel_loop_if_1_for_and_stg_1_0_sva_1
      & (pixel_loop_if_1_for_pixel_loop_if_1_for_conc_decb_3_1_sva_2[2:1]==2'b11);
  assign pixel_loop_if_1_for_and_48_tmp_1 = pixel_loop_if_1_for_and_stg_1_1_sva_1
      & (pixel_loop_if_1_for_pixel_loop_if_1_for_conc_decb_3_1_sva_2[2:1]==2'b00);
  assign pixel_loop_if_1_for_and_33_tmp_1 = pixel_loop_if_1_for_and_stg_1_2_sva_1
      & (pixel_loop_if_1_for_pixel_loop_if_1_for_conc_decb_3_1_sva_2[2:1]==2'b01);
  assign reg_refresh_inner_loop_and_135_tmp_1 = reg_refresh_inner_loop_and_stg_5_54_sva_2
      & (~ reg_refresh_inner_loop_acc_decb_sva_2_6);
  assign pixel_loop_if_1_for_and_12_tmp_1 = pixel_loop_if_1_for_and_stg_1_3_sva_1
      & (pixel_loop_if_1_for_pixel_loop_if_1_for_conc_decb_3_1_sva_2[2:1]==2'b10);
  assign reg_refresh_inner_loop_and_157_tmp_1 = reg_refresh_inner_loop_and_stg_5_43_sva_2
      & (~ reg_refresh_inner_loop_acc_decb_sva_2_6);
  assign pixel_loop_if_1_for_and_51_tmp_1 = pixel_loop_if_1_for_and_stg_1_0_sva_1
      & (pixel_loop_if_1_for_pixel_loop_if_1_for_conc_decb_3_1_sva_2[2:1]==2'b00);
  assign reg_refresh_inner_loop_and_179_tmp_1 = reg_refresh_inner_loop_and_stg_5_32_sva_2
      & (~ reg_refresh_inner_loop_acc_decb_sva_2_6);
  assign pixel_loop_if_1_for_and_36_tmp_1 = pixel_loop_if_1_for_and_stg_2_5_sva_1
      & (~ (pixel_loop_if_1_for_pixel_loop_if_1_for_conc_decb_3_1_sva_2[2]));
  assign reg_refresh_inner_loop_and_201_tmp_1 = reg_refresh_inner_loop_and_stg_5_21_sva_2
      & (~ reg_refresh_inner_loop_acc_decb_sva_2_6);
  assign pixel_loop_if_1_for_and_17_tmp_1 = pixel_loop_if_1_for_and_stg_2_2_sva_1
      & (pixel_loop_if_1_for_pixel_loop_if_1_for_conc_decb_3_1_sva_2[2]);
  assign reg_refresh_inner_loop_and_223_tmp_1 = reg_refresh_inner_loop_and_stg_5_10_sva_2
      & (~ reg_refresh_inner_loop_acc_decb_sva_2_6);
  assign pixel_loop_and_10_tmp_1 = reg_pixel_loop_asn_sft_lpi_1_dfm_st_2_cse & (~
      pixel_loop_asn_sft_1_lpi_1_dfm_2);
  assign pixel_loop_if_1_for_and_stg_2_2_sva_1 = pixel_loop_if_1_for_and_stg_1_2_sva_1
      & (~ (pixel_loop_if_1_for_pixel_loop_if_1_for_conc_decb_3_1_sva_2[1]));
  assign pixel_loop_if_1_for_and_stg_1_2_sva_1 = (~ pixel_loop_if_1_for_mul_sdt_3_0_sva_2_0)
      & (pixel_loop_if_1_for_pixel_loop_if_1_for_conc_decb_3_1_sva_2[0]);
  assign pixel_loop_if_1_for_and_stg_1_3_sva_1 = pixel_loop_if_1_for_mul_sdt_3_0_sva_2_0
      & (pixel_loop_if_1_for_pixel_loop_if_1_for_conc_decb_3_1_sva_2[0]);
  assign pixel_loop_if_1_for_and_stg_1_0_sva_1 = ~(pixel_loop_if_1_for_mul_sdt_3_0_sva_2_0
      | (pixel_loop_if_1_for_pixel_loop_if_1_for_conc_decb_3_1_sva_2[0]));
  assign pixel_loop_if_1_for_and_stg_2_5_sva_1 = pixel_loop_if_1_for_and_stg_1_1_sva_1
      & (pixel_loop_if_1_for_pixel_loop_if_1_for_conc_decb_3_1_sva_2[1]);
  assign pixel_loop_if_1_for_and_stg_1_1_sva_1 = pixel_loop_if_1_for_mul_sdt_3_0_sva_2_0
      & (~ (pixel_loop_if_1_for_pixel_loop_if_1_for_conc_decb_3_1_sva_2[0]));
  assign rawdns_clip_result_sva_1 = div_25_u25_u13(rawdns_process_acc_2_itm_1, rawdns_process_total_weight_sva_1);
  assign nl_rawdns_process_acc_tmp = rawdns_process_total_weight_1_lpi_1_dfm_3_mx0
      + conv_u2u_8_13(rawdns_process_max_weight_lpi_1_dfm_4_mx0);
  assign rawdns_process_acc_tmp = nl_rawdns_process_acc_tmp[12:0];
  assign nl_operator_25_false_acc_nl = ({1'b1 , (~ (rawdns_clip_result_sva_1[24:12]))})
      + 14'b00000000000001;
  assign operator_25_false_acc_nl = nl_operator_25_false_acc_nl[13:0];
  assign rawdns_clip_rawdns_clip_or_nl = MUX_v_12_2_2((rawdns_clip_result_sva_1[11:0]),
      12'b111111111111, (readslicef_14_1_13(operator_25_false_acc_nl)));
  assign dst_data_1_lpi_1_dfm_2 = MUX1HOT_v_12_3_2(rawdns_block_5_5_lpi_1, dst_data_1_lpi_1,
      rawdns_clip_rawdns_clip_or_nl, {loop2_inner_loop_loop2_inner_loop_and_5_itm_2
      , loop2_inner_loop_loop2_inner_loop_and_2_itm_2 , loop2_inner_loop_loop2_inner_loop_and_6_itm_2});
  assign src_data_lpi_1_dfm_1_mx0 = MUX_v_12_2_2(src_data_lpi_1, src_rsci_idat_mxwt,
      sfi_exit_pixel_loop_lpi_1_dfm_1);
  assign padding_loop2_or_24_tmp_2 = padding_loop2_equal_tmp_2 | padding_loop2_equal_tmp_3_2;
  assign Cal_Eur_Distance_temp_block_nand_8_nl = ~(main_stage_0_2 & (~((~(pixel_loop_and_171_tmp_1
      & rawdns_process_for_for_asn_sft_lpi_1_dfm_1 & (~(((~ Cal_Eur_Distance_for_for_and_14_tmp_1)
      & Cal_Eur_Distance_for_1_or_tmp_1_1) | ((~ Cal_Eur_Distance_for_1_for_and_14_ssc_sva_1)
      & Cal_Eur_Distance_for_1_equal_tmp_1) | Cal_Eur_Distance_for_1_equal_tmp_1_1))))
      | padding_loop2_or_410_tmp_1)));
  assign Cal_Eur_Distance_for_1_and_27_nl = Cal_Eur_Distance_for_for_and_14_tmp_1
      & Cal_Eur_Distance_for_1_or_tmp_1_1 & rawdns_process_for_for_asn_sft_lpi_1_dfm_1
      & pixel_loop_and_171_tmp_1 & (~ padding_loop2_or_410_tmp_1) & main_stage_0_2;
  assign Cal_Eur_Distance_for_1_and_29_nl = Cal_Eur_Distance_for_1_for_and_14_ssc_sva_1
      & Cal_Eur_Distance_for_1_equal_tmp_1 & rawdns_process_for_for_asn_sft_lpi_1_dfm_1
      & pixel_loop_and_171_tmp_1 & (~ padding_loop2_or_410_tmp_1) & main_stage_0_2;
  assign Cal_Eur_Distance_temp_block_1_2_11_0_lpi_1_mx0 = MUX1HOT_v_12_3_2(Cal_Eur_Distance_temp_block_1_2_11_0_lpi_1,
      z_out_14, Cal_Eur_Distance_for_1_for_mul_3_cse_sva_1_11_0, {Cal_Eur_Distance_temp_block_nand_8_nl
      , Cal_Eur_Distance_for_1_and_27_nl , Cal_Eur_Distance_for_1_and_29_nl});
  assign Cal_Eur_Distance_temp_block_nand_7_nl = ~(main_stage_0_2 & (~((~(pixel_loop_and_171_tmp_1
      & rawdns_process_for_for_asn_sft_lpi_1_dfm_1 & (~(((~ Cal_Eur_Distance_for_for_and_17_tmp_1)
      & Cal_Eur_Distance_for_1_or_tmp_1_1) | ((~ Cal_Eur_Distance_for_1_for_and_17_ssc_sva_1)
      & Cal_Eur_Distance_for_1_equal_tmp_1) | Cal_Eur_Distance_for_1_equal_tmp_1_1))))
      | padding_loop2_or_410_tmp_1)));
  assign Cal_Eur_Distance_for_1_and_11_nl = Cal_Eur_Distance_for_for_and_17_tmp_1
      & Cal_Eur_Distance_for_1_or_tmp_1_1 & rawdns_process_for_for_asn_sft_lpi_1_dfm_1
      & pixel_loop_and_171_tmp_1 & (~ padding_loop2_or_410_tmp_1) & main_stage_0_2;
  assign Cal_Eur_Distance_for_1_and_13_nl = Cal_Eur_Distance_for_1_for_and_17_ssc_sva_1
      & Cal_Eur_Distance_for_1_equal_tmp_1 & rawdns_process_for_for_asn_sft_lpi_1_dfm_1
      & pixel_loop_and_171_tmp_1 & (~ padding_loop2_or_410_tmp_1) & main_stage_0_2;
  assign Cal_Eur_Distance_temp_block_0_1_11_0_lpi_1_mx0 = MUX1HOT_v_12_3_2(Cal_Eur_Distance_temp_block_0_1_11_0_lpi_1,
      z_out_14, Cal_Eur_Distance_for_1_for_mul_3_cse_sva_1_11_0, {Cal_Eur_Distance_temp_block_nand_7_nl
      , Cal_Eur_Distance_for_1_and_11_nl , Cal_Eur_Distance_for_1_and_13_nl});
  assign Cal_Eur_Distance_temp_block_nand_6_nl = ~(main_stage_0_2 & (~((~(pixel_loop_and_171_tmp_1
      & rawdns_process_for_for_asn_sft_lpi_1_dfm_1 & (~(((~ Cal_Eur_Distance_for_for_and_16_tmp_1)
      & Cal_Eur_Distance_for_1_or_tmp_1_1) | ((~ Cal_Eur_Distance_for_1_for_and_16_ssc_sva_1)
      & Cal_Eur_Distance_for_1_equal_tmp_1) | Cal_Eur_Distance_for_1_equal_tmp_1_1))))
      | padding_loop2_or_410_tmp_1)));
  assign Cal_Eur_Distance_for_1_and_31_nl = Cal_Eur_Distance_for_for_and_16_tmp_1
      & Cal_Eur_Distance_for_1_or_tmp_1_1 & rawdns_process_for_for_asn_sft_lpi_1_dfm_1
      & pixel_loop_and_171_tmp_1 & (~ padding_loop2_or_410_tmp_1) & main_stage_0_2;
  assign Cal_Eur_Distance_for_1_and_33_nl = Cal_Eur_Distance_for_1_for_and_16_ssc_sva_1
      & Cal_Eur_Distance_for_1_equal_tmp_1 & rawdns_process_for_for_asn_sft_lpi_1_dfm_1
      & pixel_loop_and_171_tmp_1 & (~ padding_loop2_or_410_tmp_1) & main_stage_0_2;
  assign Cal_Eur_Distance_temp_block_2_0_11_0_lpi_1_mx0 = MUX1HOT_v_12_3_2(Cal_Eur_Distance_temp_block_2_0_11_0_lpi_1,
      z_out_14, Cal_Eur_Distance_for_1_for_mul_3_cse_sva_1_11_0, {Cal_Eur_Distance_temp_block_nand_6_nl
      , Cal_Eur_Distance_for_1_and_31_nl , Cal_Eur_Distance_for_1_and_33_nl});
  assign Cal_Eur_Distance_temp_block_nand_5_nl = ~(main_stage_0_2 & (~((~(pixel_loop_and_171_tmp_1
      & rawdns_process_for_for_asn_sft_lpi_1_dfm_1 & (~(((~ Cal_Eur_Distance_for_for_and_15_tmp_1)
      & Cal_Eur_Distance_for_1_or_tmp_1_1) | ((~ Cal_Eur_Distance_for_1_for_and_15_ssc_sva_1)
      & Cal_Eur_Distance_for_1_equal_tmp_1) | Cal_Eur_Distance_for_1_equal_tmp_1_1))))
      | padding_loop2_or_410_tmp_1)));
  assign Cal_Eur_Distance_for_1_and_15_nl = Cal_Eur_Distance_for_for_and_15_tmp_1
      & Cal_Eur_Distance_for_1_or_tmp_1_1 & rawdns_process_for_for_asn_sft_lpi_1_dfm_1
      & pixel_loop_and_171_tmp_1 & (~ padding_loop2_or_410_tmp_1) & main_stage_0_2;
  assign Cal_Eur_Distance_for_1_and_17_nl = Cal_Eur_Distance_for_1_for_and_15_ssc_sva_1
      & Cal_Eur_Distance_for_1_equal_tmp_1 & rawdns_process_for_for_asn_sft_lpi_1_dfm_1
      & pixel_loop_and_171_tmp_1 & (~ padding_loop2_or_410_tmp_1) & main_stage_0_2;
  assign Cal_Eur_Distance_temp_block_0_2_11_0_lpi_1_mx0 = MUX1HOT_v_12_3_2(Cal_Eur_Distance_temp_block_0_2_11_0_lpi_1,
      z_out_14, Cal_Eur_Distance_for_1_for_mul_3_cse_sva_1_11_0, {Cal_Eur_Distance_temp_block_nand_5_nl
      , Cal_Eur_Distance_for_1_and_15_nl , Cal_Eur_Distance_for_1_and_17_nl});
  assign Cal_Eur_Distance_temp_block_nand_4_nl = ~(main_stage_0_2 & (~((~(pixel_loop_and_171_tmp_1
      & rawdns_process_for_for_asn_sft_lpi_1_dfm_1 & (~(((~ Cal_Eur_Distance_for_for_and_18_tmp_1)
      & Cal_Eur_Distance_for_1_or_tmp_1_1) | ((~ Cal_Eur_Distance_for_1_for_and_18_ssc_sva_1)
      & Cal_Eur_Distance_for_1_equal_tmp_1) | Cal_Eur_Distance_for_1_equal_tmp_1_1))))
      | padding_loop2_or_410_tmp_1)));
  assign Cal_Eur_Distance_for_1_and_35_nl = Cal_Eur_Distance_for_for_and_18_tmp_1
      & Cal_Eur_Distance_for_1_or_tmp_1_1 & rawdns_process_for_for_asn_sft_lpi_1_dfm_1
      & pixel_loop_and_171_tmp_1 & (~ padding_loop2_or_410_tmp_1) & main_stage_0_2;
  assign Cal_Eur_Distance_for_1_and_37_nl = Cal_Eur_Distance_for_1_for_and_18_ssc_sva_1
      & Cal_Eur_Distance_for_1_equal_tmp_1 & rawdns_process_for_for_asn_sft_lpi_1_dfm_1
      & pixel_loop_and_171_tmp_1 & (~ padding_loop2_or_410_tmp_1) & main_stage_0_2;
  assign Cal_Eur_Distance_temp_block_2_1_11_0_lpi_1_mx0 = MUX1HOT_v_12_3_2(Cal_Eur_Distance_temp_block_2_1_11_0_lpi_1,
      z_out_14, Cal_Eur_Distance_for_1_for_mul_3_cse_sva_1_11_0, {Cal_Eur_Distance_temp_block_nand_4_nl
      , Cal_Eur_Distance_for_1_and_35_nl , Cal_Eur_Distance_for_1_and_37_nl});
  assign Cal_Eur_Distance_temp_block_nand_3_nl = ~(main_stage_0_2 & (~((~(pixel_loop_and_171_tmp_1
      & rawdns_process_for_for_asn_sft_lpi_1_dfm_1 & (~(((~ Cal_Eur_Distance_for_for_and_13_tmp_1)
      & Cal_Eur_Distance_for_1_or_tmp_1_1) | ((~ Cal_Eur_Distance_for_1_for_and_13_ssc_sva_1)
      & Cal_Eur_Distance_for_1_equal_tmp_1) | Cal_Eur_Distance_for_1_equal_tmp_1_1))))
      | padding_loop2_or_410_tmp_1)));
  assign Cal_Eur_Distance_for_1_and_19_nl = Cal_Eur_Distance_for_for_and_13_tmp_1
      & Cal_Eur_Distance_for_1_or_tmp_1_1 & rawdns_process_for_for_asn_sft_lpi_1_dfm_1
      & pixel_loop_and_171_tmp_1 & (~ padding_loop2_or_410_tmp_1) & main_stage_0_2;
  assign Cal_Eur_Distance_for_1_and_21_nl = Cal_Eur_Distance_for_1_for_and_13_ssc_sva_1
      & Cal_Eur_Distance_for_1_equal_tmp_1 & rawdns_process_for_for_asn_sft_lpi_1_dfm_1
      & pixel_loop_and_171_tmp_1 & (~ padding_loop2_or_410_tmp_1) & main_stage_0_2;
  assign Cal_Eur_Distance_temp_block_1_0_11_0_lpi_1_mx0 = MUX1HOT_v_12_3_2(Cal_Eur_Distance_temp_block_1_0_11_0_lpi_1,
      z_out_14, Cal_Eur_Distance_for_1_for_mul_3_cse_sva_1_11_0, {Cal_Eur_Distance_temp_block_nand_3_nl
      , Cal_Eur_Distance_for_1_and_19_nl , Cal_Eur_Distance_for_1_and_21_nl});
  assign Cal_Eur_Distance_temp_block_nand_2_nl = ~(main_stage_0_2 & (~((~(pixel_loop_and_171_tmp_1
      & rawdns_process_for_for_asn_sft_lpi_1_dfm_1 & (~(((~ Cal_Eur_Distance_for_for_and_20_tmp_1)
      & Cal_Eur_Distance_for_1_or_tmp_1_1) | ((~ Cal_Eur_Distance_for_1_for_and_20_ssc_sva_1)
      & Cal_Eur_Distance_for_1_equal_tmp_1) | Cal_Eur_Distance_for_1_equal_tmp_1_1))))
      | padding_loop2_or_410_tmp_1)));
  assign Cal_Eur_Distance_for_1_and_39_nl = Cal_Eur_Distance_for_for_and_20_tmp_1
      & Cal_Eur_Distance_for_1_or_tmp_1_1 & rawdns_process_for_for_asn_sft_lpi_1_dfm_1
      & pixel_loop_and_171_tmp_1 & (~ padding_loop2_or_410_tmp_1) & main_stage_0_2;
  assign Cal_Eur_Distance_for_1_and_41_nl = Cal_Eur_Distance_for_1_for_and_20_ssc_sva_1
      & Cal_Eur_Distance_for_1_equal_tmp_1 & rawdns_process_for_for_asn_sft_lpi_1_dfm_1
      & pixel_loop_and_171_tmp_1 & (~ padding_loop2_or_410_tmp_1) & main_stage_0_2;
  assign Cal_Eur_Distance_temp_block_2_2_11_0_lpi_1_mx0 = MUX1HOT_v_12_3_2(Cal_Eur_Distance_temp_block_2_2_11_0_lpi_1,
      z_out_14, Cal_Eur_Distance_for_1_for_mul_3_cse_sva_1_11_0, {Cal_Eur_Distance_temp_block_nand_2_nl
      , Cal_Eur_Distance_for_1_and_39_nl , Cal_Eur_Distance_for_1_and_41_nl});
  assign Cal_Eur_Distance_temp_block_nand_1_nl = ~(main_stage_0_2 & (~((~(pixel_loop_and_171_tmp_1
      & rawdns_process_for_for_asn_sft_lpi_1_dfm_1 & (~(((~ Cal_Eur_Distance_for_for_and_19_tmp_1)
      & Cal_Eur_Distance_for_1_or_tmp_1_1) | ((~ Cal_Eur_Distance_for_1_for_and_19_ssc_sva_1)
      & Cal_Eur_Distance_for_1_equal_tmp_1) | Cal_Eur_Distance_for_1_equal_tmp_1_1))))
      | padding_loop2_or_410_tmp_1)));
  assign Cal_Eur_Distance_for_1_and_7_nl = Cal_Eur_Distance_for_for_and_19_tmp_1
      & Cal_Eur_Distance_for_1_or_tmp_1_1 & rawdns_process_for_for_asn_sft_lpi_1_dfm_1
      & pixel_loop_and_171_tmp_1 & (~ padding_loop2_or_410_tmp_1) & main_stage_0_2;
  assign Cal_Eur_Distance_for_1_and_9_nl = Cal_Eur_Distance_for_1_for_and_19_ssc_sva_1
      & Cal_Eur_Distance_for_1_equal_tmp_1 & rawdns_process_for_for_asn_sft_lpi_1_dfm_1
      & pixel_loop_and_171_tmp_1 & (~ padding_loop2_or_410_tmp_1) & main_stage_0_2;
  assign Cal_Eur_Distance_temp_block_0_0_11_0_lpi_1_mx0 = MUX1HOT_v_12_3_2(Cal_Eur_Distance_temp_block_0_0_11_0_lpi_1,
      z_out_14, Cal_Eur_Distance_for_1_for_mul_3_cse_sva_1_11_0, {Cal_Eur_Distance_temp_block_nand_1_nl
      , Cal_Eur_Distance_for_1_and_7_nl , Cal_Eur_Distance_for_1_and_9_nl});
  assign Cal_Eur_Distance_temp_block_nand_nl = ~(main_stage_0_2 & (~((~(pixel_loop_and_171_tmp_1
      & rawdns_process_for_for_asn_sft_lpi_1_dfm_1 & (~(((~ Cal_Eur_Distance_for_for_and_12_tmp_1)
      & Cal_Eur_Distance_for_1_or_tmp_1_1) | ((~ Cal_Eur_Distance_for_1_for_and_12_ssc_sva_1)
      & Cal_Eur_Distance_for_1_equal_tmp_1) | Cal_Eur_Distance_for_1_equal_tmp_1_1))))
      | padding_loop2_or_410_tmp_1)));
  assign Cal_Eur_Distance_for_1_and_23_nl = Cal_Eur_Distance_for_for_and_12_tmp_1
      & Cal_Eur_Distance_for_1_or_tmp_1_1 & rawdns_process_for_for_asn_sft_lpi_1_dfm_1
      & pixel_loop_and_171_tmp_1 & (~ padding_loop2_or_410_tmp_1) & main_stage_0_2;
  assign Cal_Eur_Distance_for_1_and_25_nl = Cal_Eur_Distance_for_1_for_and_12_ssc_sva_1
      & Cal_Eur_Distance_for_1_equal_tmp_1 & rawdns_process_for_for_asn_sft_lpi_1_dfm_1
      & pixel_loop_and_171_tmp_1 & (~ padding_loop2_or_410_tmp_1) & main_stage_0_2;
  assign Cal_Eur_Distance_temp_block_1_1_11_0_lpi_1_mx0 = MUX1HOT_v_12_3_2(Cal_Eur_Distance_temp_block_1_1_11_0_lpi_1,
      z_out_14, Cal_Eur_Distance_for_1_for_mul_3_cse_sva_1_11_0, {Cal_Eur_Distance_temp_block_nand_nl
      , Cal_Eur_Distance_for_1_and_23_nl , Cal_Eur_Distance_for_1_and_25_nl});
  assign or_378_nl = or_dcpl_102 | padding_loop2_equal_tmp_1;
  assign pixel_loop_if_1_asn_sft_lpi_1_mx0 = MUX_s_1_2_2(pixel_loop_mux_716_itm_1,
      pixel_loop_if_1_asn_sft_lpi_1, or_378_nl);
  assign pixel_loop_equal_1_tmp = count_lpi_1_dfm_1 == top_reg_frameWidth;
  assign lfst_exitL_exitL_exitL_exit_rawdns_process_for_lpi_1_dfm_1 = lfst_exitL_exitL_exitL_exit_rawdns_process_for_lpi_1
      & (~ exitL_exitL_exitL_exitL_exit_rawdns_process_for_lpi_1_dfm_1);
  assign or_386_nl = mux_tmp_212 | or_tmp_96 | (~ operator_4_false_1_acc_itm_2_1);
  assign rawdns_process_for_mux_22_nl = MUX_s_1_2_2(operator_4_false_acc_itm_2_1,
      exit_rawdns_process_for_sva_2, or_386_nl);
  assign exit_rawdns_process_for_lpi_1_dfm_3 = rawdns_process_for_mux_22_nl & exit_rawdns_process_for_for_lpi_1_dfm_2;
  assign nl_operator_4_false_acc_nl = (~ rawdns_process_k_3_1_sva_2) + 3'b101;
  assign operator_4_false_acc_nl = nl_operator_4_false_acc_nl[2:0];
  assign operator_4_false_acc_itm_2_1 = readslicef_3_1_2(operator_4_false_acc_nl);
  assign nl_rawdns_process_k_3_1_sva_2 = rawdns_process_k_3_1_lpi_1_dfm_1 + 3'b001;
  assign rawdns_process_k_3_1_sva_2 = nl_rawdns_process_k_3_1_sva_2[2:0];
  assign pixel_loop_if_1_aelse_not_10_nl = ~ sfi_pixel_loop_if_1_land_lpi_1;
  assign rawdns_process_k_3_1_lpi_1_dfm_1 = MUX_v_3_2_2(3'b000, rawdns_process_k_3_1_lpi_1,
      pixel_loop_if_1_aelse_not_10_nl);
  assign nl_operator_4_false_1_acc_nl = (~ rawdns_process_l_3_1_sva_2) + 3'b101;
  assign operator_4_false_1_acc_nl = nl_operator_4_false_1_acc_nl[2:0];
  assign operator_4_false_1_acc_itm_2_1 = readslicef_3_1_2(operator_4_false_1_acc_nl);
  assign nl_rawdns_process_l_3_1_sva_2 = rawdns_process_l_3_1_lpi_1_dfm_3 + 3'b001;
  assign rawdns_process_l_3_1_sva_2 = nl_rawdns_process_l_3_1_sva_2[2:0];
  assign rawdns_process_l_3_1_lpi_1_dfm_3 = MUX_v_3_2_2(3'b000, rawdns_process_l_3_1_lpi_1,
      lfst_exit_rawdns_process_for_lpi_1_dfm_1);
  assign Cal_Eur_Distance_for_1_mux_nl = MUX_s_1_2_2(exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1_mx0w0,
      exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1, or_dcpl_134);
  assign Cal_Eur_Distance_for_1_mux_28_nl = MUX_s_1_2_2((~ Cal_Eur_Distance_for_1_mux_nl),
      lfst_exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1_1, Cal_Eur_Distance_for_1_equal_tmp_2);
  assign lfst_exit_Cal_Eur_Distance_for_1_lpi_1_dfm_3_1_1 = (Cal_Eur_Distance_for_1_mux_28_nl
      & (~ Cal_Eur_Distance_for_1_and_56_ssc_1)) | Cal_Eur_Distance_for_1_and_57_ssc_1;
  assign lfst_exit_Cal_Eur_Distance_for_1_lpi_1_dfm_3_0_1 = (lfst_exit_Cal_Eur_Distance_for_1_lpi_1_dfm_0_1
      & (~(Cal_Eur_Distance_for_1_and_57_ssc_1 | Cal_Eur_Distance_for_1_equal_tmp_3)))
      | Cal_Eur_Distance_for_1_and_56_ssc_1;
  assign exit_Cal_Eur_Distance_for_lpi_1_dfm_3 = (Cal_Eur_Distance_for_acc_tmp[1])
      & Cal_Eur_Distance_for_for_xor_tmp;
  assign nl_Cal_Eur_Distance_for_acc_tmp = Cal_Eur_Distance_k_1_1_0_lpi_1_dfm_1 +
      2'b01;
  assign Cal_Eur_Distance_for_acc_tmp = nl_Cal_Eur_Distance_for_acc_tmp[1:0];
  assign Cal_Eur_Distance_for_1_Cal_Eur_Distance_for_1_Cal_Eur_Distance_for_1_Cal_Eur_Distance_for_1_not_2_nl
      = ~ lfst_exitL_exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1;
  assign Cal_Eur_Distance_k_1_1_0_lpi_1_dfm_1 = MUX_v_2_2_2(Cal_Eur_Distance_k_1_1_0_lpi_1,
      2'b11, Cal_Eur_Distance_for_1_Cal_Eur_Distance_for_1_Cal_Eur_Distance_for_1_Cal_Eur_Distance_for_1_not_2_nl);
  assign Cal_Eur_Distance_for_for_xor_tmp = Cal_Eur_Distance_l_1_1_0_lpi_1_dfm_0_1
      ^ Cal_Eur_Distance_l_1_1_0_lpi_1_dfm_1_1;
  assign or_420_nl = not_tmp_181 | or_dcpl_129;
  assign Cal_Eur_Distance_for_for_xor_psp_mx0 = MUX_s_1_2_2(Cal_Eur_Distance_for_for_xor_tmp,
      Cal_Eur_Distance_for_for_xor_psp, or_420_nl);
  assign Cal_Eur_Distance_l_1_1_0_lpi_1_dfm_0_1 = Cal_Eur_Distance_l_1_1_0_lpi_1_0
      | Cal_Eur_Distance_for_1_Cal_Eur_Distance_for_1_nor_1_cse_1;
  assign Cal_Eur_Distance_l_1_1_0_lpi_1_dfm_1_1 = Cal_Eur_Distance_l_1_1_0_lpi_1_1
      | Cal_Eur_Distance_for_1_Cal_Eur_Distance_for_1_nor_1_cse_1;
  assign Cal_Eur_Distance_for_1_Cal_Eur_Distance_for_1_nor_1_cse_1 = ~(lfst_exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1_1
      | lfst_exit_Cal_Eur_Distance_for_1_lpi_1_dfm_0_1);
  assign exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1_mx0w0 = operator_4_true_2_acc_tmp_2
      & operator_4_true_3_acc_tmp_2;
  assign nl_Cal_Eur_Distance_Eur_distance_sva_2 = Cal_Eur_Distance_Eur_distance_lpi_1_dfm_1
      + conv_u2u_24_30(Cal_Eur_Distance_for_1_for_mul_3_cse_sva_1);
  assign Cal_Eur_Distance_Eur_distance_sva_2 = nl_Cal_Eur_Distance_Eur_distance_sva_2[29:0];
  assign nl_Cal_weight_else_if_else_if_acc_4_nl = (~ operator_26_false_operator_26_false_slc_ksigma2_mul_25_16_psp_lpi_1_dfm)
      + conv_u2s_9_10(Cal_weight_else_if_else_if_acc_1_itm_12_1[11:3]);
  assign Cal_weight_else_if_else_if_acc_4_nl = nl_Cal_weight_else_if_else_if_acc_4_nl[9:0];
  assign nl_Cal_weight_else_if_else_if_acc_7_nl = ({1'b1 , Cal_weight_else_if_else_if_acc_4_nl})
      + 11'b00000000001;
  assign Cal_weight_else_if_else_if_acc_7_nl = nl_Cal_weight_else_if_else_if_acc_7_nl[10:0];
  assign nl_Cal_weight_else_if_else_if_acc_nl = conv_s2u_14_29({Cal_weight_else_if_else_if_acc_7_nl
      , (Cal_weight_else_if_else_if_acc_1_itm_12_1[2:0])}) + conv_u2u_28_29(operator_30_false_acc_psp_sva_1);
  assign Cal_weight_else_if_else_if_acc_nl = nl_Cal_weight_else_if_else_if_acc_nl[28:0];
  assign Cal_weight_else_if_else_if_acc_itm_28_1 = readslicef_29_1_28(Cal_weight_else_if_else_if_acc_nl);
  assign nl_Cal_weight_else_if_else_if_acc_1_nl = conv_u2u_12_13({operator_26_false_operator_26_false_slc_ksigma2_mul_25_16_psp_lpi_1_dfm
      , 1'b0 , (rawdns_max_return_lpi_1_dfm_1[1])}) + conv_u2u_10_13(operator_26_false_operator_26_false_slc_ksigma2_mul_25_16_psp_lpi_1_dfm);
  assign Cal_weight_else_if_else_if_acc_1_nl = nl_Cal_weight_else_if_else_if_acc_1_nl[12:0];
  assign Cal_weight_else_if_else_if_acc_1_itm_12_1 = readslicef_13_12_1(Cal_weight_else_if_else_if_acc_1_nl);
  assign nl_operator_30_false_acc_psp_sva_1 = (rawdns_max_return_lpi_1_dfm_1[29:2])
      + (rawdns_max_return_lpi_1_dfm_1[27:0]);
  assign operator_30_false_acc_psp_sva_1 = nl_operator_30_false_acc_psp_sva_1[27:0];
  assign nl_rawdns_max_else_acc_nl = Cal_Eur_Distance_Eur_distance_sva_2 + ({17'b11111111111111111
      , (~ rawdns_process_sigma2_mul_psp_lpi_1) , 1'b1}) + 30'b000000000000000000000000000001;
  assign rawdns_max_else_acc_nl = nl_rawdns_max_else_acc_nl[29:0];
  assign nl_rawdns_max_if_acc_nl = ({18'b100000000000000000 , rawdns_process_sigma2_mul_psp_lpi_1
      , 1'b0}) + conv_u2u_30_31(~ Cal_Eur_Distance_Eur_distance_sva_2) + 31'b0000000000000000000000000000001;
  assign rawdns_max_if_acc_nl = nl_rawdns_max_if_acc_nl[30:0];
  assign rawdns_max_return_lpi_1_dfm_1 = MUX_v_30_2_2(30'b000000000000000000000000000000,
      rawdns_max_else_acc_nl, (readslicef_31_1_30(rawdns_max_if_acc_nl)));
  assign nl_operator_30_false_1_acc_psp_sva_1 = (rawdns_max_return_lpi_1_dfm_1[28:2])
      + (rawdns_max_return_lpi_1_dfm_1[26:0]);
  assign operator_30_false_1_acc_psp_sva_1 = nl_operator_30_false_1_acc_psp_sva_1[26:0];
  assign nl_Cal_weight_else_if_acc_nl = ({21'b100000000000000000000 , operator_26_false_operator_26_false_slc_ksigma2_mul_25_16_psp_lpi_1_dfm})
      + conv_u2u_30_31(~ rawdns_max_return_lpi_1_dfm_1) + 31'b0000000000000000000000000000001;
  assign Cal_weight_else_if_acc_nl = nl_Cal_weight_else_if_acc_nl[30:0];
  assign Cal_weight_else_if_acc_itm_30_1 = readslicef_31_1_30(Cal_weight_else_if_acc_nl);
  assign operator_4_true_2_acc_tmp_2 = ~((Cal_Eur_Distance_k_1_0_sva_2[0]) ^ (Cal_Eur_Distance_k_1_0_sva_2[1]));
  assign nl_Cal_Eur_Distance_k_1_0_sva_2 = Cal_Eur_Distance_k_1_0_lpi_1 + 2'b01;
  assign Cal_Eur_Distance_k_1_0_sva_2 = nl_Cal_Eur_Distance_k_1_0_sva_2[1:0];
  assign operator_4_true_3_acc_tmp_2 = ~((Cal_Eur_Distance_l_1_0_sva_2[0]) ^ (Cal_Eur_Distance_l_1_0_sva_2[1]));
  assign nl_Cal_Eur_Distance_l_1_0_sva_2 = Cal_Eur_Distance_l_1_0_lpi_1 + 2'b01;
  assign Cal_Eur_Distance_l_1_0_sva_2 = nl_Cal_Eur_Distance_l_1_0_sva_2[1:0];
  assign Cal_Eur_Distance_Eur_distance_lpi_1_dfm_1 = MUX_v_30_2_2(30'b000000000000000000000000000000,
      Cal_Eur_Distance_Eur_distance_lpi_1, lfst_exitL_exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1);
  assign nl_Cal_Eur_Distance_for_1_for_mul_3_cse_sva_1 = ({Cal_Eur_Distance_for_1_for_conc_12_23_12
      , Cal_Eur_Distance_for_1_for_conc_12_11_0}) * ({Cal_Eur_Distance_for_1_for_conc_12_23_12
      , Cal_Eur_Distance_for_1_for_conc_12_11_0});
  assign Cal_Eur_Distance_for_1_for_mul_3_cse_sva_1 = nl_Cal_Eur_Distance_for_1_for_mul_3_cse_sva_1[23:0];
  assign nl_Cal_Eur_Distance_for_1_for_acc_psp_1 = conv_u2u_2_3(Cal_Eur_Distance_for_1_for_acc_sdt_1[2:1])
      + conv_u2u_2_3(Cal_Eur_Distance_k_1_0_lpi_1);
  assign Cal_Eur_Distance_for_1_for_acc_psp_1 = nl_Cal_Eur_Distance_for_1_for_acc_psp_1[2:0];
  assign nl_Cal_Eur_Distance_for_1_for_acc_sdt_1 = conv_u2u_2_3(Cal_Eur_Distance_k_1_0_lpi_1)
      + conv_u2u_2_3(Cal_Eur_Distance_l_1_0_lpi_1);
  assign Cal_Eur_Distance_for_1_for_acc_sdt_1 = nl_Cal_Eur_Distance_for_1_for_acc_sdt_1[2:0];
  assign lfst_exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1_1 = lfst_exit_Cal_Eur_Distance_for_1_lpi_1_1
      & lfst_exitL_exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1;
  assign lfst_exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1_mx0 = MUX_s_1_2_2(lfst_exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1_1,
      lfst_exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1, or_dcpl_180);
  assign Cal_Eur_Distance_for_1_equal_tmp_2 = lfst_exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1_1
      & lfst_exit_Cal_Eur_Distance_for_1_lpi_1_dfm_0_1;
  assign Cal_Eur_Distance_for_1_and_56_ssc_1 = (~ exit_Cal_Eur_Distance_for_lpi_1_dfm_3)
      & Cal_Eur_Distance_for_1_or_tmp_1;
  assign Cal_Eur_Distance_for_1_and_57_ssc_1 = exit_Cal_Eur_Distance_for_lpi_1_dfm_3
      & Cal_Eur_Distance_for_1_or_tmp_1;
  assign lfst_exit_Cal_Eur_Distance_for_1_lpi_1_dfm_0_1 = lfst_exit_Cal_Eur_Distance_for_1_lpi_1_0
      & lfst_exitL_exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1;
  assign Cal_Eur_Distance_for_1_equal_tmp_3 = lfst_exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1_1
      & (~ lfst_exit_Cal_Eur_Distance_for_1_lpi_1_dfm_0_1);
  assign Cal_Eur_Distance_for_1_or_tmp_1 = (lfst_exit_Cal_Eur_Distance_for_1_lpi_1_dfm_0_1
      & (~ lfst_exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1_1)) | Cal_Eur_Distance_for_1_Cal_Eur_Distance_for_1_nor_1_cse_1;
  assign pixel_loop_if_1_and_18_rgt = Cal_Eur_Distance_for_1_or_42_tmp_1 & pixel_loop_if_1_and_5_tmp_1
      & padding_loop2_and_291_tmp_1;
  assign rawdns_process_for_for_and_1_rgt = Cal_Eur_Distance_for_1_equal_tmp_3 &
      rawdns_process_for_for_asn_sft_lpi_1_dfm_mx0 & pixel_loop_and_164_tmp_1 & (~
      padding_loop2_or_401_tmp_1);
  assign lfst_exitL_exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1 = lfst_exitL_exit_Cal_Eur_Distance_for_1_lpi_1
      & (~(exitL_exitL_exit_Cal_Eur_Distance_for_1_lpi_1 | (~(lfst_exit_rawdns_process_for_for_1_lpi_1
      & lfst_exit_rawdns_process_for_lpi_1_dfm_1))));
  assign exit_rawdns_process_for_for_lpi_1_dfm_2 = operator_4_false_1_acc_itm_2_1
      & exitL_exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1;
  assign exitL_exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1 = ~((lfst_exit_Cal_Eur_Distance_for_1_lpi_1_dfm_3_1_1
      | lfst_exit_Cal_Eur_Distance_for_1_lpi_1_dfm_3_0_1) & rawdns_process_for_for_asn_sft_lpi_1_dfm_mx0);
  assign or_475_nl = or_tmp_96 | (~ lfst_exitL_exit_Cal_Eur_Distance_for_1_lpi_1)
      | or_130_cse;
  assign rawdns_process_for_for_asn_sft_lpi_1_dfm_mx0 = MUX_s_1_2_2(rawdns_process_for_for_asn_sft_lpi_1,
      rawdns_process_for_for_lor_lpi_1_dfm_1_mx0, or_475_nl);
  assign rawdns_process_for_for_if_rawdns_process_for_for_if_or_mx0w0 = (~((rawdns_process_l_3_1_lpi_1_dfm_3==3'b010)))
      | (~((rawdns_process_k_3_1_lpi_1_dfm_1==3'b010)));
  assign and_220_nl = lfst_exit_rawdns_process_for_lpi_1_dfm_1 & (~ exitL_exitL_exit_Cal_Eur_Distance_for_1_lpi_1)
      & lfst_exit_rawdns_process_for_for_1_lpi_1;
  assign rawdns_process_for_for_lor_lpi_1_dfm_1_mx0 = MUX_s_1_2_2(rawdns_process_for_for_if_rawdns_process_for_for_if_or_mx0w0,
      rawdns_process_for_for_lor_lpi_1, and_220_nl);
  assign lfst_exit_rawdns_process_for_lpi_1_dfm_1 = lfst_exit_rawdns_process_for_lpi_1
      & (~ sfi_pixel_loop_if_1_land_lpi_1);
  assign or_707_tmp = (padding_loop2_asn_495 & operator_4_false_acc_itm_2_1) | (padding_loop2_asn_497
      & (~(mux_tmp_212 | or_tmp_96)));
  assign padding_loop2_not_425_nl = ~ exitL_exitL_exit_padding_loop2_sva;
  assign i_1_lpi_1_dfm_3 = MUX_v_13_2_2(13'b0000000000000, i_1_lpi_1, padding_loop2_not_425_nl);
  assign nl_rawdns_abs_if_acc_1_nl = ({1'b1 , rawdns_abs_rawData_1_sva_1}) + conv_u2u_12_13(~
      rawdns_abs_rawData_2_sva_1) + 13'b0000000000001;
  assign rawdns_abs_if_acc_1_nl = nl_rawdns_abs_if_acc_1_nl[12:0];
  assign rawdns_abs_if_acc_1_itm_12_1 = readslicef_13_1_12(rawdns_abs_if_acc_1_nl);
  assign Cal_Eur_Distance_for_for_and_20_tmp_1 = Cal_Eur_Distance_for_for_and_stg_2_0_sva_1
      & (Cal_Eur_Distance_for_for_acc_4_decb_sva_1[3]);
  assign Cal_Eur_Distance_for_for_and_18_tmp_1 = Cal_Eur_Distance_for_for_and_stg_1_3_sva_1
      & (Cal_Eur_Distance_for_for_acc_4_decb_sva_1[3:2]==2'b01);
  assign Cal_Eur_Distance_for_for_and_16_tmp_1 = Cal_Eur_Distance_for_for_and_stg_1_2_sva_1
      & (Cal_Eur_Distance_for_for_acc_4_decb_sva_1[3:2]==2'b01);
  assign Cal_Eur_Distance_for_for_and_14_tmp_1 = Cal_Eur_Distance_for_for_and_stg_1_1_sva_1
      & (Cal_Eur_Distance_for_for_acc_4_decb_sva_1[3:2]==2'b01);
  assign Cal_Eur_Distance_for_for_and_12_tmp_1 = Cal_Eur_Distance_for_for_and_stg_1_0_sva_1
      & (Cal_Eur_Distance_for_for_acc_4_decb_sva_1[3:2]==2'b01);
  assign Cal_Eur_Distance_for_for_and_13_tmp_1 = Cal_Eur_Distance_for_for_and_stg_1_3_sva_1
      & (Cal_Eur_Distance_for_for_acc_4_decb_sva_1[3:2]==2'b00);
  assign Cal_Eur_Distance_for_for_and_15_tmp_1 = Cal_Eur_Distance_for_for_and_stg_1_2_sva_1
      & (Cal_Eur_Distance_for_for_acc_4_decb_sva_1[3:2]==2'b00);
  assign Cal_Eur_Distance_for_for_and_17_tmp_1 = Cal_Eur_Distance_for_for_and_stg_1_1_sva_1
      & (Cal_Eur_Distance_for_for_acc_4_decb_sva_1[3:2]==2'b00);
  assign Cal_Eur_Distance_for_for_and_19_tmp_1 = Cal_Eur_Distance_for_for_and_stg_2_0_sva_1
      & (~ (Cal_Eur_Distance_for_for_acc_4_decb_sva_1[3]));
  assign pixel_loop_and_171_tmp_1 = pixel_loop_if_1_asn_sft_lpi_1 & rawdns_process_for_equal_tmp_2_1
      & pixel_loop_asn_sft_lpi_1_dfm_1;
  assign nl_pixel_loop_if_1_for_acc_11_psp_1 = conv_u2u_1_3(z_out_20[2]) + conv_u2u_2_3(z_out_20[1:0]);
  assign pixel_loop_if_1_for_acc_11_psp_1 = nl_pixel_loop_if_1_for_acc_11_psp_1[2:0];
  assign Cal_weight_else_if_else_Cal_weight_else_if_else_and_nl = MUX_v_7_2_2(7'b0000000,
      ROM_1i5_1o7_3c7b1334a034a5d093fcab7146dc0a172e_1, Cal_Eur_Distance_for_for_slc_Cal_Eur_Distance_for_for_acc_7_sdt_0_itm_1);
  assign Cal_weight_else_Cal_weight_else_nor_nl = ~(Cal_weight_else_else_else_if_slc_operator_26_false_2_acc_30_svs_1
      | Cal_weight_else_else_slc_30_svs_1 | Cal_weight_else_slc_30_svs_1);
  assign Cal_weight_else_else_and_1_nl = Cal_weight_else_else_else_if_slc_operator_26_false_2_acc_30_svs_1
      & (~ Cal_weight_else_else_slc_30_svs_1) & (~ Cal_weight_else_slc_30_svs_1);
  assign Cal_weight_else_and_3_nl = Cal_weight_else_else_slc_30_svs_1 & (~ Cal_weight_else_slc_30_svs_1);
  assign Cal_weight_else_and_nl = (~ Cal_weight_else_if_if_slc_operator_26_false_acc_29_svs_1)
      & Cal_weight_else_slc_30_svs_1;
  assign Cal_weight_else_and_1_nl = Cal_weight_else_if_if_slc_operator_26_false_acc_29_svs_1
      & Cal_weight_else_slc_30_svs_1;
  assign Cal_weight_else_Cal_weight_else_mux1h_nl = MUX1HOT_v_8_5_2(8'b01100011,
      ROM_1i4_1o8_4dd8bd99bd10e9b88c29d6096de160de2e_1, 8'b11110100, ({1'b0 , Cal_weight_else_if_else_Cal_weight_else_if_else_and_nl}),
      8'b01010101, {Cal_weight_else_Cal_weight_else_nor_nl , Cal_weight_else_else_and_1_nl
      , Cal_weight_else_and_3_nl , Cal_weight_else_and_nl , Cal_weight_else_and_1_nl});
  assign Cal_weight_weight_lpi_1_dfm_6 = MUX_v_8_2_2(8'b00000000, Cal_weight_else_Cal_weight_else_mux1h_nl,
      Cal_weight_Cal_weight_Cal_weight_or_itm_1);
  assign nl_rawdns_process_for_for_if_if_acc_nl = ({1'b1 , rawdns_process_max_weight_lpi_1_dfm_1})
      + conv_u2u_8_9(~ Cal_weight_weight_lpi_1_dfm_6) + 9'b000000001;
  assign rawdns_process_for_for_if_if_acc_nl = nl_rawdns_process_for_for_if_if_acc_nl[8:0];
  assign or_563_nl = (~ (readslicef_9_1_8(rawdns_process_for_for_if_if_acc_nl)))
      | or_dcpl_268;
  assign rawdns_process_max_weight_lpi_1_dfm_4_mx0 = MUX_v_8_2_2(Cal_weight_weight_lpi_1_dfm_6,
      rawdns_process_max_weight_lpi_1_dfm_1, or_563_nl);
  assign Cal_Eur_Distance_for_for_and_stg_1_1_sva_1 = (Cal_Eur_Distance_for_for_acc_4_decb_sva_1[1:0]==2'b01);
  assign Cal_Eur_Distance_for_for_and_stg_1_2_sva_1 = (Cal_Eur_Distance_for_for_acc_4_decb_sva_1[1:0]==2'b10);
  assign Cal_Eur_Distance_for_for_and_stg_1_3_sva_1 = (Cal_Eur_Distance_for_for_acc_4_decb_sva_1[1:0]==2'b11);
  assign Cal_Eur_Distance_for_for_and_stg_2_0_sva_1 = Cal_Eur_Distance_for_for_and_stg_1_0_sva_1
      & (~ (Cal_Eur_Distance_for_for_acc_4_decb_sva_1[2]));
  assign Cal_Eur_Distance_for_for_and_stg_1_0_sva_1 = ~((Cal_Eur_Distance_for_for_acc_4_decb_sva_1[1:0]!=2'b00));
  assign rawdns_abs_rawData_1_sva_1 = MUX_v_12_32_2x9x10x11x12x13x14(rawdns_block_5_9_lpi_1,
      rawdns_block_5_10_lpi_1_mx0, rawdns_block_6_0_lpi_1, rawdns_block_6_1_lpi_1,
      rawdns_block_6_2_lpi_1, rawdns_block_6_3_lpi_1, rawdns_block_6_4_lpi_1, rawdns_block_6_5_lpi_1,
      rawdns_block_6_6_lpi_1, rawdns_block_4_3_lpi_1, rawdns_block_4_4_lpi_1, rawdns_block_4_5_lpi_1,
      rawdns_block_4_6_lpi_1, rawdns_block_4_7_lpi_1, rawdns_block_4_8_lpi_1, rawdns_block_4_9_lpi_1,
      rawdns_block_4_10_lpi_1_mx0, rawdns_block_5_0_lpi_1, rawdns_block_5_1_lpi_1,
      rawdns_block_5_2_lpi_1, rawdns_block_5_3_lpi_1, rawdns_block_5_4_lpi_1, rawdns_block_5_5_lpi_1_mx0,
      rawdns_block_5_6_lpi_1, rawdns_block_5_7_lpi_1, rawdns_block_5_8_lpi_1, {loop2_inner_loop_conc_24_itm_1_3_1
      , operator_30_false_1_slc_Cal_weight_diff_1_1_0_1_itm_1});
  assign rawdns_abs_rawData_2_sva_1 = MUX_v_12_121_2(rawdns_block_0_0_lpi_1, rawdns_block_0_1_lpi_1,
      rawdns_block_0_2_lpi_1, rawdns_block_0_3_lpi_1, rawdns_block_0_4_lpi_1, rawdns_block_0_5_lpi_1,
      rawdns_block_0_6_lpi_1, rawdns_block_0_7_lpi_1, rawdns_block_0_8_lpi_1, rawdns_block_0_9_lpi_1,
      rawdns_block_0_10_lpi_1_mx0, rawdns_block_1_0_lpi_1, rawdns_block_1_1_lpi_1,
      rawdns_block_1_2_lpi_1, rawdns_block_1_3_lpi_1, rawdns_block_1_4_lpi_1, rawdns_block_1_5_lpi_1,
      rawdns_block_1_6_lpi_1, rawdns_block_1_7_lpi_1, rawdns_block_1_8_lpi_1, rawdns_block_1_9_lpi_1,
      rawdns_block_1_10_lpi_1_mx0, rawdns_block_2_0_lpi_1, rawdns_block_2_1_lpi_1,
      rawdns_block_2_2_lpi_1, rawdns_block_2_3_lpi_1, rawdns_block_2_4_lpi_1, rawdns_block_2_5_lpi_1,
      rawdns_block_2_6_lpi_1, rawdns_block_2_7_lpi_1, rawdns_block_2_8_lpi_1, rawdns_block_2_9_lpi_1,
      rawdns_block_2_10_lpi_1_mx0, rawdns_block_3_0_lpi_1, rawdns_block_3_1_lpi_1,
      rawdns_block_3_2_lpi_1, rawdns_block_3_3_lpi_1, rawdns_block_3_4_lpi_1, rawdns_block_3_5_lpi_1,
      rawdns_block_3_6_lpi_1, rawdns_block_3_7_lpi_1, rawdns_block_3_8_lpi_1, rawdns_block_3_9_lpi_1,
      rawdns_block_3_10_lpi_1_mx0, rawdns_block_4_0_lpi_1, rawdns_block_4_1_lpi_1,
      rawdns_block_4_2_lpi_1, rawdns_block_4_3_lpi_1, rawdns_block_4_4_lpi_1, rawdns_block_4_5_lpi_1,
      rawdns_block_4_6_lpi_1, rawdns_block_4_7_lpi_1, rawdns_block_4_8_lpi_1, rawdns_block_4_9_lpi_1,
      rawdns_block_4_10_lpi_1_mx0, rawdns_block_5_0_lpi_1, rawdns_block_5_1_lpi_1,
      rawdns_block_5_2_lpi_1, rawdns_block_5_3_lpi_1, rawdns_block_5_4_lpi_1, rawdns_block_5_5_lpi_1_mx0,
      rawdns_block_5_6_lpi_1, rawdns_block_5_7_lpi_1, rawdns_block_5_8_lpi_1, rawdns_block_5_9_lpi_1,
      rawdns_block_5_10_lpi_1_mx0, rawdns_block_6_0_lpi_1, rawdns_block_6_1_lpi_1,
      rawdns_block_6_2_lpi_1, rawdns_block_6_3_lpi_1, rawdns_block_6_4_lpi_1, rawdns_block_6_5_lpi_1,
      rawdns_block_6_6_lpi_1, rawdns_block_6_7_lpi_1, rawdns_block_6_8_lpi_1, rawdns_block_6_9_lpi_1,
      rawdns_block_6_10_lpi_1_mx0, rawdns_block_7_0_lpi_1, rawdns_block_7_1_lpi_1,
      rawdns_block_7_2_lpi_1, rawdns_block_7_3_lpi_1, rawdns_block_7_4_lpi_1, rawdns_block_7_5_lpi_1,
      rawdns_block_7_6_lpi_1, rawdns_block_7_7_lpi_1, rawdns_block_7_8_lpi_1, rawdns_block_7_9_lpi_1,
      rawdns_block_7_10_lpi_1_mx0, rawdns_block_8_0_lpi_1, rawdns_block_8_1_lpi_1,
      rawdns_block_8_2_lpi_1, rawdns_block_8_3_lpi_1, rawdns_block_8_4_lpi_1, rawdns_block_8_5_lpi_1,
      rawdns_block_8_6_lpi_1, rawdns_block_8_7_lpi_1, rawdns_block_8_8_lpi_1, rawdns_block_8_9_lpi_1,
      rawdns_block_8_10_lpi_1_mx0, rawdns_block_9_0_lpi_1, rawdns_block_9_1_lpi_1,
      rawdns_block_9_2_lpi_1, rawdns_block_9_3_lpi_1, rawdns_block_9_4_lpi_1, rawdns_block_9_5_lpi_1,
      rawdns_block_9_6_lpi_1, rawdns_block_9_7_lpi_1, rawdns_block_9_8_lpi_1, rawdns_block_9_9_lpi_1,
      rawdns_block_9_10_lpi_1_mx0, rawdns_block_10_0_lpi_1, rawdns_block_10_1_lpi_1,
      rawdns_block_10_2_lpi_1, rawdns_block_10_3_lpi_1, rawdns_block_10_4_lpi_1,
      rawdns_block_10_5_lpi_1, rawdns_block_10_6_lpi_1, rawdns_block_10_7_lpi_1,
      rawdns_block_10_8_lpi_1, rawdns_block_10_9_lpi_1, src_data_lpi_1_dfm_1_mx0,
      {Cal_Eur_Distance_for_for_acc_itm_1 , Cal_Eur_Distance_for_for_slc_Cal_Eur_Distance_for_for_acc_7_sdt_0_itm_1});
  assign nl_operator_26_false_acc_6_nl = ({3'b100 , (operator_26_false_operator_26_false_slc_ksigma2_mul_25_16_psp_lpi_1_dfm[9:2])})
      + conv_u2s_10_11(~ operator_26_false_operator_26_false_slc_ksigma2_mul_25_16_psp_lpi_1_dfm)
      + 11'b00000000001;
  assign operator_26_false_acc_6_nl = nl_operator_26_false_acc_6_nl[10:0];
  assign nl_operator_26_false_acc_nl = conv_s2u_13_30({operator_26_false_acc_6_nl
      , (operator_26_false_operator_26_false_slc_ksigma2_mul_25_16_psp_lpi_1_dfm[1:0])})
      + conv_u2u_29_30({operator_30_false_acc_psp_sva_1 , (rawdns_max_return_lpi_1_dfm_1[1])});
  assign operator_26_false_acc_nl = nl_operator_26_false_acc_nl[29:0];
  assign operator_26_false_acc_itm_29_1 = readslicef_30_1_29(operator_26_false_acc_nl);
  assign nl_operator_26_false_2_acc_1_nl = conv_u2u_13_14({(~ operator_26_false_operator_26_false_slc_ksigma2_mul_25_16_psp_lpi_1_dfm)
      , 3'b001}) + conv_u2u_10_14(~ operator_26_false_operator_26_false_slc_ksigma2_mul_25_16_psp_lpi_1_dfm);
  assign operator_26_false_2_acc_1_nl = nl_operator_26_false_2_acc_1_nl[13:0];
  assign operator_26_false_2_acc_1_itm_13_1_1 = readslicef_14_13_1(operator_26_false_2_acc_1_nl);
  assign nl_operator_26_false_2_acc_5_nl = (operator_26_false_2_acc_1_itm_13_1_1[12:2])
      + 11'b01110000001;
  assign operator_26_false_2_acc_5_nl = nl_operator_26_false_2_acc_5_nl[10:0];
  assign nl_operator_26_false_2_acc_nl = conv_s2u_14_30({1'b1 , operator_26_false_2_acc_5_nl
      , (operator_26_false_2_acc_1_itm_13_1_1[1:0])}) + conv_u2u_29_30({operator_30_false_1_acc_psp_sva_1
      , (rawdns_max_return_lpi_1_dfm_1[1:0])});
  assign operator_26_false_2_acc_nl = nl_operator_26_false_2_acc_nl[29:0];
  assign operator_26_false_2_acc_itm_29_1 = readslicef_30_1_29(operator_26_false_2_acc_nl);
  assign nl_Cal_weight_else_else_if_acc_nl = ({1'b1 , operator_30_false_1_acc_psp_sva_1
      , (rawdns_max_return_lpi_1_dfm_1[1:0]) , 1'b0}) + conv_u2u_30_31({20'b11111111111111111111
      , (~ operator_26_false_operator_26_false_slc_ksigma2_mul_25_16_psp_lpi_1_dfm)})
      + 31'b0000000000000000000000000000001;
  assign Cal_weight_else_else_if_acc_nl = nl_Cal_weight_else_else_if_acc_nl[30:0];
  assign Cal_weight_else_else_if_acc_itm_30_1 = readslicef_31_1_30(Cal_weight_else_else_if_acc_nl);
  assign lfst_exit_padding_loop2_lpi_1_dfm_1_mx0w1 = lfst_exit_padding_loop2_lpi_1_1
      & (~ sfi_rawdns_reg_eb_lpi_1);
  assign lfst_exit_padding_loop2_lpi_1_dfm_0_mx0w1 = lfst_exit_padding_loop2_lpi_1_0
      & (~ sfi_rawdns_reg_eb_lpi_1);
  assign nl_rawdns_process_for_for_if_acc_1_nl = rawdns_process_total_weight_1_lpi_1_dfm_1
      + conv_u2u_8_13(Cal_weight_weight_lpi_1_dfm_6);
  assign rawdns_process_for_for_if_acc_1_nl = nl_rawdns_process_for_for_if_acc_1_nl[12:0];
  assign rawdns_process_total_weight_1_lpi_1_dfm_3_mx0 = MUX_v_13_2_2(rawdns_process_for_for_if_acc_1_nl,
      rawdns_process_total_weight_1_lpi_1_dfm_1, or_dcpl_268);
  assign nl_loop2_inner_loop_acc_12_nl = ({1'b1 , i_lpi_1}) + conv_u2u_13_14(~ top_reg_frameWidth)
      + 14'b00000000000001;
  assign loop2_inner_loop_acc_12_nl = nl_loop2_inner_loop_acc_12_nl[13:0];
  assign loop2_inner_loop_acc_12_itm_13_1 = readslicef_14_1_13(loop2_inner_loop_acc_12_nl);
  assign lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_2_1 = lfst_exitL_exit_rawdns_process_for_lpi_1_2
      & (~ sfi_rawdns_reg_eb_1_lpi_1_dfm_1);
  assign rawdns_reg_eb_not_11_nl = ~ sfi_rawdns_reg_eb_1_lpi_1_dfm_1;
  assign lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_1_0_1 = MUX_v_2_2_2(2'b00,
      lfst_exitL_exit_rawdns_process_for_lpi_1_1_0, rawdns_reg_eb_not_11_nl);
  assign rawdns_process_for_equal_tmp_3 = lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_2_1
      & (lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_1_0_1==2'b00);
  assign or_610_nl = or_dcpl_127 | (~ lfst_exitL_exitL_exit_rawdns_process_for_lpi_1)
      | exitL_exitL_exit_padding_loop2_sva;
  assign pixel_loop_asn_sft_lpi_1_dfm_1_mx0 = MUX_s_1_2_2(pixel_loop_asn_sft_lpi_1,
      rawdns_reg_eb, or_610_nl);
  assign nl_loop2_inner_loop_acc_11_psp_mx0w0 = conv_u2u_1_3(loop2_inner_loop_acc_10_psp_sva_1[2])
      + conv_u2u_2_3(loop2_inner_loop_acc_10_psp_sva_1[1:0]);
  assign loop2_inner_loop_acc_11_psp_mx0w0 = nl_loop2_inner_loop_acc_11_psp_mx0w0[2:0];
  assign padding_loop2_equal_tmp_4 = lfst_exitL_exit_padding_loop2_lpi_1_dfm_1_1
      & (~ lfst_exitL_exit_padding_loop2_lpi_1_dfm_0_1);
  assign padding_loop2_equal_tmp_5 = lfst_exitL_exit_padding_loop2_lpi_1_dfm_1_1
      & lfst_exitL_exit_padding_loop2_lpi_1_dfm_0_1;
  assign Cal_Eur_Distance_for_1_for_and_20_ssc_sva_1_1 = Cal_Eur_Distance_for_1_for_and_stg_2_0_sva_1
      & (Cal_Eur_Distance_for_1_for_acc_psp_1[2]);
  assign padding_loop2_or_410_tmp_1 = pixel_loop_asn_sft_1_lpi_1_dfm_1 | padding_loop2_equal_tmp_1
      | padding_loop2_equal_tmp_3_1;
  assign Cal_Eur_Distance_for_1_for_and_18_ssc_sva_1_1 = Cal_Eur_Distance_for_1_for_and_stg_1_3_sva_1
      & (Cal_Eur_Distance_for_1_for_acc_psp_1[2:1]==2'b01);
  assign Cal_Eur_Distance_for_1_for_and_16_ssc_sva_1_1 = Cal_Eur_Distance_for_1_for_and_stg_1_2_sva_1
      & (Cal_Eur_Distance_for_1_for_acc_psp_1[2:1]==2'b01);
  assign Cal_Eur_Distance_for_1_for_and_14_ssc_sva_1_1 = Cal_Eur_Distance_for_1_for_and_stg_1_1_sva_1
      & (Cal_Eur_Distance_for_1_for_acc_psp_1[2:1]==2'b01);
  assign Cal_Eur_Distance_for_1_for_and_12_ssc_sva_1_1 = Cal_Eur_Distance_for_1_for_and_stg_1_0_sva_1
      & (Cal_Eur_Distance_for_1_for_acc_psp_1[2:1]==2'b01);
  assign Cal_Eur_Distance_for_1_for_and_13_ssc_sva_1_1 = Cal_Eur_Distance_for_1_for_and_stg_1_3_sva_1
      & (Cal_Eur_Distance_for_1_for_acc_psp_1[2:1]==2'b00);
  assign Cal_Eur_Distance_for_1_for_and_15_ssc_sva_1_1 = Cal_Eur_Distance_for_1_for_and_stg_1_2_sva_1
      & (Cal_Eur_Distance_for_1_for_acc_psp_1[2:1]==2'b00);
  assign Cal_Eur_Distance_for_1_for_and_17_ssc_sva_1_1 = Cal_Eur_Distance_for_1_for_and_stg_1_1_sva_1
      & (Cal_Eur_Distance_for_1_for_acc_psp_1[2:1]==2'b00);
  assign Cal_Eur_Distance_for_1_for_and_19_ssc_sva_1_1 = Cal_Eur_Distance_for_1_for_and_stg_2_0_sva_1
      & (~ (Cal_Eur_Distance_for_1_for_acc_psp_1[2]));
  assign or_615_nl = or_tmp_228 | (~ lfst_exitL_exitL_exitL_exit_rawdns_process_for_lpi_1)
      | exitL_exitL_exit_padding_loop2_sva;
  assign pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0 = MUX_s_1_2_2(pixel_loop_asn_sft_1_lpi_1,
      exit_pixel_loop_lpi_1_dfm_1, or_615_nl);
  assign lfst_exitL_exit_padding_loop2_lpi_1_dfm_1_1 = lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_1
      & (~ exitL_exitL_exit_padding_loop2_sva);
  assign lfst_exitL_exit_padding_loop2_lpi_1_dfm_0_1 = lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0
      & (~ exitL_exitL_exit_padding_loop2_sva);
  assign ksigma2_mul_nl = conv_u2u_26_26(ksigma_sva_1 * ksigma_sva_1);
  assign ksigma2_mul_itm_25_16_1 = readslicef_26_10_16(ksigma2_mul_nl);
  assign padding_loop2_not_400_nl = ~ exitL_exitL_exit_padding_loop2_sva;
  assign count_lpi_1_dfm_1 = MUX_v_13_2_2(13'b0000000000000, count_lpi_1, padding_loop2_not_400_nl);
  assign rawdns_process_for_mux_26_nl = MUX_s_1_2_2(lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_2_1,
      (~ exitL_exit_rawdns_process_for_lpi_1_dfm_1), rawdns_process_for_equal_tmp_3);
  assign lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_5_2_1 = rawdns_process_for_mux_26_nl
      | rawdns_process_for_and_157_ssc_1;
  assign rawdns_process_for_and_163_nl = (~ exit_reg_refresh_out_loop_lpi_1_dfm_3)
      & rawdns_process_for_or_tmp_1;
  assign rawdns_process_for_and_164_nl = exit_reg_refresh_out_loop_lpi_1_dfm_3 &
      rawdns_process_for_or_tmp_1;
  assign rawdns_process_for_or_363_nl = (operator_4_false_2_acc_itm_3_1 & rawdns_process_for_equal_tmp_4)
      | (operator_4_false_3_acc_itm_3_1 & rawdns_process_for_equal_tmp_5) | rawdns_process_for_nor_tmp_1;
  assign rawdns_process_for_mux1h_350_tmp = MUX1HOT_v_2_3_2(2'b01, 2'b10, lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_1_0_1,
      {rawdns_process_for_and_163_nl , rawdns_process_for_and_164_nl , rawdns_process_for_or_363_nl});
  assign rawdns_process_for_nor_7_nl = ~(rawdns_process_for_and_157_ssc_1 | rawdns_process_for_equal_tmp_3);
  assign rawdns_process_for_and_nl = MUX_v_2_2_2(2'b00, rawdns_process_for_mux1h_350_tmp,
      rawdns_process_for_nor_7_nl);
  assign rawdns_process_for_and_155_nl = (~ operator_4_false_2_acc_itm_3_1) & rawdns_process_for_equal_tmp_4;
  assign lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_5_1_0_1 = MUX_v_2_2_2(rawdns_process_for_and_nl,
      2'b11, rawdns_process_for_and_155_nl);
  assign exit_reg_refresh_out_loop_lpi_1_dfm_3 = ~(operator_4_false_acc_itm_4_1 |
      operator_4_false_1_acc_itm_3_1);
  assign nl_operator_4_false_acc_nl_1 = conv_u2s_4_5(k_1_sva_2) + 5'b10101;
  assign operator_4_false_acc_nl_1 = nl_operator_4_false_acc_nl_1[4:0];
  assign operator_4_false_acc_itm_4_1 = readslicef_5_1_4(operator_4_false_acc_nl_1);
  assign nl_k_1_sva_2 = k_1_lpi_1_dfm_1 + 4'b0001;
  assign k_1_sva_2 = nl_k_1_sva_2[3:0];
  assign rawdns_reg_eb_not_13_nl = ~ sfi_rawdns_reg_eb_1_lpi_1_dfm_1;
  assign k_1_lpi_1_dfm_1 = MUX_v_4_2_2(4'b0000, k_1_lpi_1, rawdns_reg_eb_not_13_nl);
  assign nl_operator_4_false_1_acc_nl_1 = conv_u2u_3_4(l_1_sva_2[3:1]) + 4'b1011;
  assign operator_4_false_1_acc_nl_1 = nl_operator_4_false_1_acc_nl_1[3:0];
  assign operator_4_false_1_acc_itm_3_1 = readslicef_4_1_3(operator_4_false_1_acc_nl_1);
  assign nl_l_1_sva_2 = l_1_lpi_1_dfm_2 + 4'b0001;
  assign l_1_sva_2 = nl_l_1_sva_2[3:0];
  assign reg_refresh_out_loop_reg_refresh_out_loop_reg_refresh_out_loop_or_nl = lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_2_1
      | (lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_1_0_1!=2'b00);
  assign l_1_lpi_1_dfm_2 = MUX_v_4_2_2(4'b0000, l_1_lpi_1, reg_refresh_out_loop_reg_refresh_out_loop_reg_refresh_out_loop_or_nl);
  assign rawdns_process_for_or_tmp_1 = rawdns_process_for_rawdns_process_for_and_cse_1
      | rawdns_process_for_rawdns_process_for_nor_1_cse_1;
  assign rawdns_process_for_and_157_ssc_1 = (~ operator_4_false_3_acc_itm_3_1) &
      rawdns_process_for_equal_tmp_5;
  assign nl_operator_4_false_2_acc_nl = conv_u2u_3_4(l_2_sva_2[3:1]) + 4'b1011;
  assign operator_4_false_2_acc_nl = nl_operator_4_false_2_acc_nl[3:0];
  assign operator_4_false_2_acc_itm_3_1 = readslicef_4_1_3(operator_4_false_2_acc_nl);
  assign rawdns_process_for_equal_tmp_4 = (lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_1_0_1[1])
      & (~(lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_2_1 | (lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_1_0_1[0])));
  assign nl_operator_4_false_3_acc_nl = conv_u2u_3_4(operator_4_false_1_acc_cse_sva_1[3:1])
      + 4'b1011;
  assign operator_4_false_3_acc_nl = nl_operator_4_false_3_acc_nl[3:0];
  assign operator_4_false_3_acc_itm_3_1 = readslicef_4_1_3(operator_4_false_3_acc_nl);
  assign rawdns_process_for_equal_tmp_5 = (lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_1_0_1==2'b11)
      & (~ lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_2_1);
  assign rawdns_process_for_nor_tmp_1 = ~(rawdns_process_for_rawdns_process_for_and_cse_1
      | rawdns_process_for_rawdns_process_for_nor_1_cse_1 | rawdns_process_for_equal_tmp_4
      | rawdns_process_for_equal_tmp_5 | rawdns_process_for_equal_tmp_3);
  assign rawdns_process_for_rawdns_process_for_and_cse_1 = (lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_1_0_1[0])
      & (~(lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_2_1 | (lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_1_0_1[1])));
  assign rawdns_process_for_rawdns_process_for_nor_1_cse_1 = ~(lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_2_1
      | (lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_1_0_1!=2'b00));
  assign sfi_rawdns_reg_eb_1_lpi_1_dfm_1 = sfi_rawdns_reg_eb_1_lpi_1 | (~ lfst_exitL_exitL_exit_rawdns_process_for_lpi_1_dfm_1);
  assign lfst_exitL_exitL_exit_rawdns_process_for_lpi_1_dfm_1 = lfst_exitL_exitL_exit_rawdns_process_for_lpi_1
      & lfst_exitL_exitL_exitL_exit_rawdns_process_for_lpi_1_dfm_1;
  assign and_278_nl = and_dcpl_182 & lfst_exitL_exitL_exitL_exit_rawdns_process_for_lpi_1
      & lfst_exitL_exitL_exit_rawdns_process_for_lpi_1 & (~ exitL_exitL_exit_padding_loop2_sva);
  assign pixel_loop_asn_sft_lpi_1_dfm_mx0 = MUX_s_1_2_2(rawdns_reg_eb, pixel_loop_asn_sft_lpi_1,
      and_278_nl);
  assign exitL_exitL_exit_rawdns_process_for_lpi_1_dfm_1 = ~((lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_5_2_1
      | (lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_5_1_0_1!=2'b00)) & pixel_loop_asn_sft_lpi_1_dfm_mx0);
  assign pixel_loop_mul_nl = conv_u2u_26_26(top_reg_frameHeight * top_reg_frameWidth);
  assign nl_pixel_loop_acc_4_nl = ({1'b1 , n_lpi_1_dfm_1}) + conv_u2u_26_27(~ pixel_loop_mul_nl)
      + 27'b000000000000000000000000001;
  assign pixel_loop_acc_4_nl = nl_pixel_loop_acc_4_nl[26:0];
  assign pixel_loop_acc_4_itm_26_1 = readslicef_27_1_26(pixel_loop_acc_4_nl);
  assign padding_loop2_not_401_nl = ~ exitL_exitL_exit_padding_loop2_sva;
  assign n_lpi_1_dfm_1 = MUX_v_26_2_2(26'b00000000000000000000000000, n_lpi_1, padding_loop2_not_401_nl);
  assign nl_l_2_sva_2 = l_2_lpi_1 + 4'b0001;
  assign l_2_sva_2 = nl_l_2_sva_2[3:0];
  assign nl_operator_4_false_1_acc_cse_sva_1 = l_lpi_1 + 4'b0001;
  assign operator_4_false_1_acc_cse_sva_1 = nl_operator_4_false_1_acc_cse_sva_1[3:0];
  assign pixel_loop_and_126_rgt = rawdns_process_for_equal_tmp_5 & pixel_loop_asn_sft_lpi_1_dfm_mx0
      & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0) & (~ lfst_exitL_exit_padding_loop2_lpi_1_dfm_1_1);
  assign exitL_exit_rawdns_process_for_lpi_1_dfm_1 = exit_rawdns_process_for_lpi_1_dfm_3
      | (~ pixel_loop_if_1_asn_sft_lpi_1_mx0);
  assign exit_pixel_loop_lpi_1_dfm_1 = (~ pixel_loop_acc_4_itm_26_1) & exitL_exitL_exitL_exitL_exit_rawdns_process_for_lpi_1_dfm_1;
  assign exitL_exitL_exitL_exitL_exit_rawdns_process_for_lpi_1_dfm_1 = exitL_exitL_exitL_exitL_exit_rawdns_process_for_lpi_1
      | padding_loop2_padding_loop2_nor_2_cse_1;
  assign padding_loop2_padding_loop2_nor_2_cse_1 = ~(lfst_exitL_exit_padding_loop2_lpi_1_dfm_1_1
      | lfst_exitL_exit_padding_loop2_lpi_1_dfm_0_1);
  assign padding_loop2_and_332_rgt = loop2_inner_loop_acc_12_itm_13_1 & padding_loop2_equal_tmp_7
      & asn_sft_lpi_1 & padding_loop2_equal_tmp_4;
  assign padding_loop2_padding_loop2_and_11_nl = (padding_loop2_padding_loop2_or_1_tmp
      | lfst_exit_padding_loop2_lpi_1_dfm_3_0_1) & asn_sft_lpi_1;
  assign padding_loop2_mux_257_nl = MUX_s_1_2_2(padding_loop2_padding_loop2_and_11_nl,
      lfst_exitL_exit_padding_loop2_lpi_1_dfm_1_1, padding_loop2_equal_tmp_5);
  assign lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_1_1 = (padding_loop2_mux_257_nl
      & (~ padding_loop2_and_7_ssc_1)) | padding_loop2_and_8_ssc_1;
  assign lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0_1 = (lfst_exitL_exit_padding_loop2_lpi_1_dfm_0_1
      & (~(padding_loop2_and_8_ssc_1 | padding_loop2_equal_tmp_4))) | padding_loop2_and_7_ssc_1;
  assign padding_loop2_or_tmp_2 = (lfst_exitL_exit_padding_loop2_lpi_1_dfm_0_1 &
      (~ lfst_exitL_exit_padding_loop2_lpi_1_dfm_1_1)) | padding_loop2_padding_loop2_nor_2_cse_1;
  assign reg_refresh_inner_loop_and_stg_5_54_sva_1 = reg_refresh_inner_loop_and_stg_4_22_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[5]);
  assign reg_refresh_inner_loop_and_stg_5_45_sva_1 = reg_refresh_inner_loop_and_stg_4_13_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[5]);
  assign reg_refresh_inner_loop_and_stg_5_43_sva_1 = reg_refresh_inner_loop_and_stg_4_11_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[5]);
  assign reg_refresh_inner_loop_and_stg_5_34_sva_1 = reg_refresh_inner_loop_and_stg_4_2_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[5]);
  assign reg_refresh_inner_loop_and_stg_5_32_sva_1 = reg_refresh_inner_loop_and_stg_4_0_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[5]);
  assign reg_refresh_inner_loop_and_stg_5_21_sva_1 = reg_refresh_inner_loop_and_stg_4_21_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[5]));
  assign reg_refresh_inner_loop_and_stg_5_10_sva_1 = reg_refresh_inner_loop_and_stg_4_10_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[5]));
  assign operator_4_true_2_xor_psp_sva_1 = (Cal_Eur_Distance_k_1_1_0_lpi_1_dfm_1[0])
      ^ (Cal_Eur_Distance_k_1_1_0_lpi_1_dfm_1[1]);
  assign nl_operator_4_true_mul_nl = $signed(Cal_Eur_Distance_k_1_1_0_lpi_1_dfm_1)
      * $signed(5'b01011);
  assign operator_4_true_mul_nl = nl_operator_4_true_mul_nl[4:0];
  assign nl_operator_4_true_acc_sdt_1 = operator_4_true_mul_nl + conv_s2u_2_5({Cal_Eur_Distance_l_1_1_0_lpi_1_dfm_1_1
      , Cal_Eur_Distance_l_1_1_0_lpi_1_dfm_0_1});
  assign operator_4_true_acc_sdt_1 = nl_operator_4_true_acc_sdt_1[4:0];
  assign Cal_Eur_Distance_for_1_for_and_stg_2_0_sva_1 = Cal_Eur_Distance_for_1_for_and_stg_1_0_sva_1
      & (~ (Cal_Eur_Distance_for_1_for_acc_psp_1[1]));
  assign Cal_Eur_Distance_for_1_for_and_stg_1_3_sva_1 = (Cal_Eur_Distance_for_1_for_acc_sdt_1[0])
      & (Cal_Eur_Distance_for_1_for_acc_psp_1[0]);
  assign Cal_Eur_Distance_for_1_for_and_stg_1_1_sva_1 = (Cal_Eur_Distance_for_1_for_acc_sdt_1[0])
      & (~ (Cal_Eur_Distance_for_1_for_acc_psp_1[0]));
  assign Cal_Eur_Distance_for_1_for_and_stg_1_2_sva_1 = (~ (Cal_Eur_Distance_for_1_for_acc_sdt_1[0]))
      & (Cal_Eur_Distance_for_1_for_acc_psp_1[0]);
  assign Cal_Eur_Distance_for_1_for_and_stg_1_0_sva_1 = ~((Cal_Eur_Distance_for_1_for_acc_sdt_1[0])
      | (Cal_Eur_Distance_for_1_for_acc_psp_1[0]));
  assign rawdns_process_total_weight_1_lpi_1_mx0 = MUX_v_13_2_2(rawdns_process_total_weight_1_lpi_1_dfm_3_mx0,
      rawdns_process_total_weight_1_lpi_1, or_dcpl_337);
  assign rawdns_process_max_weight_lpi_1_mx0 = MUX_v_8_2_2(rawdns_process_max_weight_lpi_1_dfm_4_mx0,
      rawdns_process_max_weight_lpi_1, or_dcpl_337);
  assign rawdns_process_for_and_161_rgt = (~ operator_4_false_2_slc_operator_4_false_2_acc_3_svs_1)
      & rawdns_process_for_equal_tmp_1 & padding_loop2_and_119_tmp_1;
  assign rawdns_process_rawdns_process_rawdns_process_or_tmp_2 = (rawdns_process_acc_tmp!=13'b0000000000000);
  assign rawdns_process_for_for_if_rawdns_process_for_for_if_mux_nl = MUX_v_12_61_2(rawdns_block_0_0_lpi_1,
      rawdns_block_0_2_lpi_1, rawdns_block_0_4_lpi_1, rawdns_block_0_6_lpi_1, rawdns_block_0_8_lpi_1,
      rawdns_block_0_10_lpi_1_mx0, rawdns_block_1_1_lpi_1, rawdns_block_1_3_lpi_1,
      rawdns_block_1_5_lpi_1, rawdns_block_1_7_lpi_1, rawdns_block_1_9_lpi_1, rawdns_block_2_0_lpi_1,
      rawdns_block_2_2_lpi_1, rawdns_block_2_4_lpi_1, rawdns_block_2_6_lpi_1, rawdns_block_2_8_lpi_1,
      rawdns_block_2_10_lpi_1_mx0, rawdns_block_3_1_lpi_1, rawdns_block_3_3_lpi_1,
      rawdns_block_3_5_lpi_1, rawdns_block_3_7_lpi_1, rawdns_block_3_9_lpi_1, rawdns_block_4_0_lpi_1,
      rawdns_block_4_2_lpi_1, rawdns_block_4_4_lpi_1, rawdns_block_4_6_lpi_1, rawdns_block_4_8_lpi_1,
      rawdns_block_4_10_lpi_1_mx0, rawdns_block_5_1_lpi_1, rawdns_block_5_3_lpi_1,
      rawdns_block_5_5_lpi_1_mx0, rawdns_block_5_7_lpi_1, rawdns_block_5_9_lpi_1,
      rawdns_block_6_0_lpi_1, rawdns_block_6_2_lpi_1, rawdns_block_6_4_lpi_1, rawdns_block_6_6_lpi_1,
      rawdns_block_6_8_lpi_1, rawdns_block_6_10_lpi_1_mx0, rawdns_block_7_1_lpi_1,
      rawdns_block_7_3_lpi_1, rawdns_block_7_5_lpi_1, rawdns_block_7_7_lpi_1, rawdns_block_7_9_lpi_1,
      rawdns_block_8_0_lpi_1, rawdns_block_8_2_lpi_1, rawdns_block_8_4_lpi_1, rawdns_block_8_6_lpi_1,
      rawdns_block_8_8_lpi_1, rawdns_block_8_10_lpi_1_mx0, rawdns_block_9_1_lpi_1,
      rawdns_block_9_3_lpi_1, rawdns_block_9_5_lpi_1, rawdns_block_9_7_lpi_1, rawdns_block_9_9_lpi_1,
      rawdns_block_10_0_lpi_1, rawdns_block_10_2_lpi_1, rawdns_block_10_4_lpi_1,
      rawdns_block_10_6_lpi_1, rawdns_block_10_8_lpi_1, src_data_lpi_1_dfm_1_mx0,
      Cal_Eur_Distance_for_for_acc_itm_1);
  assign rawdns_process_for_for_if_mul_1_nl = conv_u2u_20_20(Cal_weight_weight_lpi_1_dfm_6
      * rawdns_process_for_for_if_rawdns_process_for_for_if_mux_nl);
  assign nl_rawdns_process_for_for_if_acc_3_nl = rawdns_process_total_value_1_lpi_1_dfm_1
      + conv_u2u_20_25(rawdns_process_for_for_if_mul_1_nl);
  assign rawdns_process_for_for_if_acc_3_nl = nl_rawdns_process_for_for_if_acc_3_nl[24:0];
  assign rawdns_process_total_value_1_lpi_1_dfm_3_mx0 = MUX_v_25_2_2(rawdns_process_for_for_if_acc_3_nl,
      rawdns_process_total_value_1_lpi_1_dfm_1, or_dcpl_268);
  assign reg_refresh_inner_loop_and_stg_5_23_sva_1_1 = reg_refresh_inner_loop_and_stg_4_23_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[5]));
  assign reg_refresh_inner_loop_and_stg_5_12_sva_1_1 = reg_refresh_inner_loop_and_stg_4_12_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[5]));
  assign reg_refresh_inner_loop_and_stg_5_1_sva_1_1 = reg_refresh_inner_loop_and_stg_4_1_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[5]));
  assign padding_loop2_or_401_tmp_1 = pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0 | padding_loop2_equal_tmp_4
      | padding_loop2_equal_tmp_5;
  assign rawdns_process_for_or_138_tmp_1 = rawdns_process_for_equal_tmp_4 | rawdns_process_for_equal_tmp_5
      | rawdns_process_for_equal_tmp_3 | rawdns_process_for_nor_tmp_1;
  assign pixel_loop_and_182_tmp_1 = pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0);
  assign rawdns_process_for_or_362_tmp_1 = operator_4_false_1_acc_itm_3_1 | rawdns_process_for_equal_tmp_4
      | rawdns_process_for_equal_tmp_5 | rawdns_process_for_equal_tmp_3 | rawdns_process_for_nor_tmp_1;
  assign Cal_Eur_Distance_for_for_mux_1_nl = MUX_s_1_2_2(Cal_Eur_Distance_for_for_xor_tmp,
      Cal_Eur_Distance_for_for_xor_psp, not_tmp_181);
  assign Cal_Eur_Distance_for_1_or_42_tmp_1 = (~ Cal_Eur_Distance_for_for_mux_1_nl)
      | Cal_Eur_Distance_for_1_equal_tmp_3 | Cal_Eur_Distance_for_1_equal_tmp_2;
  assign pixel_loop_if_1_and_5_tmp_1 = rawdns_process_for_for_asn_sft_lpi_1_dfm_mx0
      & pixel_loop_if_1_asn_sft_lpi_1_mx0;
  assign pixel_loop_and_135_tmp_1 = rawdns_process_for_equal_tmp_3 & pixel_loop_asn_sft_lpi_1_dfm_mx0;
  assign pixel_loop_and_164_tmp_1 = pixel_loop_if_1_asn_sft_lpi_1_mx0 & rawdns_process_for_equal_tmp_3
      & pixel_loop_asn_sft_lpi_1_dfm_mx0;
  assign padding_loop2_mux_264_nl = MUX_s_1_2_2((~ operator_4_false_5_acc_itm_2),
      exit_padding_loop2_sva_1, or_dcpl_296);
  assign padding_loop2_loop2_inner_loop_nand_nl = ~(padding_loop2_mux_264_nl & (~
      loop2_inner_loop_acc_12_itm_13_1));
  assign padding_loop2_mux_262_nl = MUX_s_1_2_2(padding_loop2_loop2_inner_loop_nand_nl,
      lfst_exit_padding_loop2_lpi_1_dfm_1_mx0w1, padding_loop2_equal_tmp_6);
  assign padding_loop2_padding_loop2_or_1_tmp = (padding_loop2_mux_262_nl & (~ padding_loop2_and_6_tmp))
      | padding_loop2_and_5_tmp;
  assign lfst_exit_padding_loop2_lpi_1_dfm_3_0_1 = (lfst_exit_padding_loop2_lpi_1_dfm_0_mx0w1
      & (~(padding_loop2_and_5_tmp | padding_loop2_equal_tmp_7))) | padding_loop2_and_6_tmp;
  assign padding_loop2_equal_tmp_6 = lfst_exit_padding_loop2_lpi_1_dfm_1_mx0w1 &
      lfst_exit_padding_loop2_lpi_1_dfm_0_mx0w1;
  assign padding_loop2_and_330_cse_1 = padding_loop2_or_tmp_3 & asn_sft_lpi_1 & padding_loop2_equal_tmp_4;
  assign padding_loop2_and_331_cse_1 = (~ loop2_inner_loop_acc_12_itm_13_1) & padding_loop2_equal_tmp_7
      & asn_sft_lpi_1 & padding_loop2_equal_tmp_4;
  assign padding_loop2_equal_tmp_7 = lfst_exit_padding_loop2_lpi_1_dfm_1_mx0w1 &
      (~ lfst_exit_padding_loop2_lpi_1_dfm_0_mx0w1);
  assign padding_loop2_or_tmp_3 = (lfst_exit_padding_loop2_lpi_1_dfm_0_mx0w1 & (~
      lfst_exit_padding_loop2_lpi_1_dfm_1_mx0w1)) | (~(lfst_exit_padding_loop2_lpi_1_dfm_1_mx0w1
      | lfst_exit_padding_loop2_lpi_1_dfm_0_mx0w1));
  assign exitL_exitL_exitL_exit_rawdns_process_for_lpi_1_dfm_1 = exitL_exitL_exit_rawdns_process_for_lpi_1_dfm_1
      | pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0;
  assign rawdns_process_for_for_and_6_ssc_1 = (~(Cal_Eur_Distance_for_for_xor_psp_mx0
      | lfst_exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1_mx0)) & rawdns_process_for_for_asn_sft_lpi_1_dfm_mx0
      & pixel_loop_and_164_tmp_1 & (~ padding_loop2_or_401_tmp_1);
  assign Cal_Eur_Distance_for_1_and_4_ssc_1 = Cal_Eur_Distance_for_for_xor_psp_mx0
      & (~ lfst_exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1_mx0) & rawdns_process_for_for_asn_sft_lpi_1_dfm_mx0
      & pixel_loop_and_164_tmp_1 & (~ padding_loop2_or_401_tmp_1);
  assign padding_loop2_and_291_tmp_1 = rawdns_process_for_equal_tmp_3 & pixel_loop_asn_sft_lpi_1_dfm_mx0
      & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0) & padding_loop2_or_tmp_2;
  assign nl_pixel_loop_if_1_for_1_acc_18_nl = conv_u2u_4_5(pixel_loop_if_1_for_acc_32)
      + conv_u2u_2_5(j_lpi_1[2:1]) + conv_u2u_2_5({(~ (pixel_loop_if_1_for_1_acc_psp_sva_1[0]))
      , (~ (j_lpi_1[11]))}) + conv_u2u_2_5(pixel_loop_if_1_for_1_acc_psp_sva_1[2:1]);
  assign pixel_loop_if_1_for_1_acc_18_nl = nl_pixel_loop_if_1_for_1_acc_18_nl[4:0];
  assign nl_pixel_loop_if_1_for_1_acc_9_psp_sva_1 = pixel_loop_if_1_for_1_acc_18_nl
      + ({4'b1011 , (~ (pixel_loop_if_1_for_1_acc_psp_sva_1[3]))});
  assign pixel_loop_if_1_for_1_acc_9_psp_sva_1 = nl_pixel_loop_if_1_for_1_acc_9_psp_sva_1[4:0];
  assign nl_pixel_loop_if_1_for_1_acc_psp_sva_1 = l_lpi_1 + conv_u2u_1_4(j_lpi_1[12]);
  assign pixel_loop_if_1_for_1_acc_psp_sva_1 = nl_pixel_loop_if_1_for_1_acc_psp_sva_1[3:0];
  assign nl_operator_4_false_4_acc_nl = k_2_2_0_sva_2 + 3'b011;
  assign operator_4_false_4_acc_nl = nl_operator_4_false_4_acc_nl[2:0];
  assign operator_4_false_4_acc_itm_2_1 = readslicef_3_1_2(operator_4_false_4_acc_nl);
  assign nl_k_2_2_0_sva_2 = k_2_2_0_lpi_1_dfm_1 + 3'b001;
  assign k_2_2_0_sva_2 = nl_k_2_2_0_sva_2[2:0];
  assign rawdns_reg_eb_not_14_nl = ~ sfi_rawdns_reg_eb_lpi_1;
  assign k_2_2_0_lpi_1_dfm_1 = MUX_v_3_2_2(3'b000, k_2_2_0_lpi_1, rawdns_reg_eb_not_14_nl);
  assign nl_operator_13_false_acc_nl_1 = 4'b1011 + conv_u2s_3_4(k_2_2_0_lpi_1_dfm_1);
  assign operator_13_false_acc_nl_1 = nl_operator_13_false_acc_nl_1[3:0];
  assign nl_padding_loop1_acc_3_psp_sva_1 = conv_s2s_4_14(operator_13_false_acc_nl_1)
      + conv_u2s_13_14(top_reg_frameWidth);
  assign padding_loop1_acc_3_psp_sva_1 = nl_padding_loop1_acc_3_psp_sva_1[13:0];
  assign nl_operator_4_false_5_acc_nl = k_2_0_sva_2 + 3'b011;
  assign operator_4_false_5_acc_nl = nl_operator_4_false_5_acc_nl[2:0];
  assign operator_4_false_5_acc_itm_2 = readslicef_3_1_2(operator_4_false_5_acc_nl);
  assign nl_k_2_0_sva_2 = k_2_0_lpi_1 + 3'b001;
  assign k_2_0_sva_2 = nl_k_2_0_sva_2[2:0];
  assign nl_loop2_inner_loop_acc_10_psp_sva_1 = ({1'b1 , (z_out_3[1:0])}) + conv_u2u_2_3(~
      (z_out_3[3:2])) + conv_u2u_1_3(~ (z_out_3[4]));
  assign loop2_inner_loop_acc_10_psp_sva_1 = nl_loop2_inner_loop_acc_10_psp_sva_1[2:0];
  assign nl_operator_4_false_2_acc_psp_sva_1 = conv_u2u_3_4({2'b10 , (i_lpi_1[12])})
      + conv_u2u_3_4(k_2_0_lpi_1) + 4'b0001;
  assign operator_4_false_2_acc_psp_sva_1 = nl_operator_4_false_2_acc_psp_sva_1[3:0];
  assign padding_loop2_and_6_tmp = operator_4_false_4_acc_itm_2_1 & padding_loop2_or_tmp_3;
  assign padding_loop2_and_5_tmp = (~ operator_4_false_4_acc_itm_2_1) & padding_loop2_or_tmp_3;
  assign padding_loop2_and_7_ssc_1 = (~ exit_pixel_loop_lpi_1_dfm_1) & padding_loop2_or_tmp_2;
  assign padding_loop2_and_8_ssc_1 = exit_pixel_loop_lpi_1_dfm_1 & padding_loop2_or_tmp_2;
  assign reg_refresh_inner_loop_and_stg_5_0_sva_1 = reg_refresh_inner_loop_and_stg_4_0_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[5]));
  assign nl_reg_refresh_inner_loop_acc_decb_sva_1 = operator_4_false_mul_cse_sva_1
      + conv_u2u_4_7(l_1_lpi_1_dfm_2);
  assign reg_refresh_inner_loop_acc_decb_sva_1 = nl_reg_refresh_inner_loop_acc_decb_sva_1[6:0];
  assign reg_refresh_inner_loop_and_stg_5_2_sva_1 = reg_refresh_inner_loop_and_stg_4_2_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[5]));
  assign reg_refresh_inner_loop_and_stg_5_3_sva_1 = reg_refresh_inner_loop_and_stg_4_3_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[5]));
  assign reg_refresh_inner_loop_and_stg_5_4_sva_1 = reg_refresh_inner_loop_and_stg_4_4_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[5]));
  assign reg_refresh_inner_loop_and_stg_5_5_sva_1 = reg_refresh_inner_loop_and_stg_4_5_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[5]));
  assign reg_refresh_inner_loop_and_stg_5_6_sva_1 = reg_refresh_inner_loop_and_stg_4_6_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[5]));
  assign reg_refresh_inner_loop_and_stg_5_7_sva_1 = reg_refresh_inner_loop_and_stg_4_7_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[5]));
  assign reg_refresh_inner_loop_and_stg_5_8_sva_1 = reg_refresh_inner_loop_and_stg_4_8_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[5]));
  assign reg_refresh_inner_loop_and_stg_5_9_sva_1 = reg_refresh_inner_loop_and_stg_4_9_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[5]));
  assign reg_refresh_inner_loop_and_stg_5_11_sva_1 = reg_refresh_inner_loop_and_stg_4_11_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[5]));
  assign reg_refresh_inner_loop_and_stg_5_13_sva_1 = reg_refresh_inner_loop_and_stg_4_13_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[5]));
  assign reg_refresh_inner_loop_and_stg_5_14_sva_1 = reg_refresh_inner_loop_and_stg_4_14_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[5]));
  assign reg_refresh_inner_loop_and_stg_5_15_sva_1 = reg_refresh_inner_loop_and_stg_4_15_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[5]));
  assign reg_refresh_inner_loop_and_stg_5_16_sva_1 = reg_refresh_inner_loop_and_stg_4_16_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[5]));
  assign reg_refresh_inner_loop_and_stg_5_17_sva_1 = reg_refresh_inner_loop_and_stg_4_17_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[5]));
  assign reg_refresh_inner_loop_and_stg_5_18_sva_1 = reg_refresh_inner_loop_and_stg_4_18_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[5]));
  assign reg_refresh_inner_loop_and_stg_5_19_sva_1 = reg_refresh_inner_loop_and_stg_4_19_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[5]));
  assign reg_refresh_inner_loop_and_stg_5_20_sva_1 = reg_refresh_inner_loop_and_stg_4_20_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[5]));
  assign reg_refresh_inner_loop_and_stg_5_22_sva_1 = reg_refresh_inner_loop_and_stg_4_22_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[5]));
  assign reg_refresh_inner_loop_and_stg_5_24_sva_1 = reg_refresh_inner_loop_and_stg_4_24_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[5]));
  assign reg_refresh_inner_loop_and_stg_5_25_sva_1 = reg_refresh_inner_loop_and_stg_4_25_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[5]));
  assign reg_refresh_inner_loop_and_stg_4_25_sva_1 = reg_refresh_inner_loop_and_stg_3_9_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[4]);
  assign reg_refresh_inner_loop_and_stg_5_26_sva_1 = reg_refresh_inner_loop_and_stg_4_26_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[5]));
  assign reg_refresh_inner_loop_and_stg_4_26_sva_1 = reg_refresh_inner_loop_and_stg_3_10_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[4]);
  assign reg_refresh_inner_loop_and_stg_5_27_sva_1 = reg_refresh_inner_loop_and_stg_4_27_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[5]));
  assign reg_refresh_inner_loop_and_stg_4_27_sva_1 = reg_refresh_inner_loop_and_stg_3_11_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[4]);
  assign reg_refresh_inner_loop_and_stg_5_28_sva_1 = reg_refresh_inner_loop_and_stg_4_28_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[5]));
  assign reg_refresh_inner_loop_and_stg_4_28_sva_1 = reg_refresh_inner_loop_and_stg_3_12_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[4]);
  assign reg_refresh_inner_loop_and_stg_5_29_sva_1 = reg_refresh_inner_loop_and_stg_4_29_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[5]));
  assign reg_refresh_inner_loop_and_stg_4_29_sva_1 = reg_refresh_inner_loop_and_stg_3_13_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[4]);
  assign reg_refresh_inner_loop_and_stg_5_30_sva_1 = reg_refresh_inner_loop_and_stg_4_30_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[5]));
  assign reg_refresh_inner_loop_and_stg_4_30_sva_1 = reg_refresh_inner_loop_and_stg_3_14_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[4]);
  assign reg_refresh_inner_loop_and_stg_5_31_sva_1 = reg_refresh_inner_loop_and_stg_4_31_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[5]));
  assign reg_refresh_inner_loop_and_stg_4_31_sva_1 = reg_refresh_inner_loop_and_stg_3_15_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[4]);
  assign reg_refresh_inner_loop_and_stg_5_33_sva_1 = reg_refresh_inner_loop_and_stg_4_1_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[5]);
  assign reg_refresh_inner_loop_and_stg_5_35_sva_1 = reg_refresh_inner_loop_and_stg_4_3_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[5]);
  assign reg_refresh_inner_loop_and_stg_5_36_sva_1 = reg_refresh_inner_loop_and_stg_4_4_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[5]);
  assign reg_refresh_inner_loop_and_stg_5_37_sva_1 = reg_refresh_inner_loop_and_stg_4_5_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[5]);
  assign reg_refresh_inner_loop_and_stg_5_38_sva_1 = reg_refresh_inner_loop_and_stg_4_6_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[5]);
  assign reg_refresh_inner_loop_and_stg_5_39_sva_1 = reg_refresh_inner_loop_and_stg_4_7_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[5]);
  assign reg_refresh_inner_loop_and_stg_5_40_sva_1 = reg_refresh_inner_loop_and_stg_4_8_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[5]);
  assign reg_refresh_inner_loop_and_stg_5_41_sva_1 = reg_refresh_inner_loop_and_stg_4_9_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[5]);
  assign reg_refresh_inner_loop_and_stg_5_42_sva_1 = reg_refresh_inner_loop_and_stg_4_10_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[5]);
  assign reg_refresh_inner_loop_and_stg_5_44_sva_1 = reg_refresh_inner_loop_and_stg_4_12_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[5]);
  assign reg_refresh_inner_loop_and_stg_5_46_sva_1 = reg_refresh_inner_loop_and_stg_4_14_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[5]);
  assign reg_refresh_inner_loop_and_stg_5_47_sva_1 = reg_refresh_inner_loop_and_stg_4_15_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[5]);
  assign reg_refresh_inner_loop_and_stg_5_48_sva_1 = reg_refresh_inner_loop_and_stg_4_16_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[5]);
  assign reg_refresh_inner_loop_and_stg_5_49_sva_1 = reg_refresh_inner_loop_and_stg_4_17_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[5]);
  assign reg_refresh_inner_loop_and_stg_5_50_sva_1 = reg_refresh_inner_loop_and_stg_4_18_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[5]);
  assign reg_refresh_inner_loop_and_stg_5_51_sva_1 = reg_refresh_inner_loop_and_stg_4_19_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[5]);
  assign reg_refresh_inner_loop_and_stg_5_52_sva_1 = reg_refresh_inner_loop_and_stg_4_20_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[5]);
  assign reg_refresh_inner_loop_and_stg_5_53_sva_1 = reg_refresh_inner_loop_and_stg_4_21_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[5]);
  assign reg_refresh_inner_loop_and_stg_5_55_sva_1 = reg_refresh_inner_loop_and_stg_4_23_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[5]);
  assign reg_refresh_inner_loop_and_stg_5_56_sva_1 = reg_refresh_inner_loop_and_stg_4_24_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[5]);
  assign rawdns_process_for_rawdns_process_for_nor_3_cse_1 = ~(rawdns_process_for_equal_tmp_4
      | rawdns_process_for_equal_tmp_5 | rawdns_process_for_equal_tmp_3 | rawdns_process_for_nor_tmp_1);
  assign rawdns_process_total_value_1_lpi_1_mx0 = MUX_v_25_2_2(rawdns_process_total_value_1_lpi_1_dfm_3_mx0,
      rawdns_process_total_value_1_lpi_1, or_dcpl_337);
  assign reg_refresh_inner_loop_and_244_tmp_1 = reg_refresh_inner_loop_and_stg_5_56_sva_1_1
      & loop2_inner_loop_nor_1_itm_1;
  assign padding_loop2_and_119_tmp_1 = pixel_loop_asn_sft_lpi_1_dfm_1 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1)
      & (~(padding_loop2_equal_tmp_1 | padding_loop2_equal_tmp_3_1));
  assign nl_pixel_loop_if_1_for_acc_26_nl = (~ (l_2_lpi_1[1:0])) + 2'b01;
  assign pixel_loop_if_1_for_acc_26_nl = nl_pixel_loop_if_1_for_acc_26_nl[1:0];
  assign nl_pixel_loop_if_1_for_pixel_loop_if_1_for_acc_tmp = ({pixel_loop_if_1_for_acc_26_nl
      , 2'b01}) + (~ l_2_lpi_1);
  assign pixel_loop_if_1_for_pixel_loop_if_1_for_acc_tmp = nl_pixel_loop_if_1_for_pixel_loop_if_1_for_acc_tmp[3:0];
  assign reg_refresh_inner_loop_and_stg_4_0_sva_1 = reg_refresh_inner_loop_and_stg_3_0_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[4]));
  assign reg_refresh_inner_loop_and_stg_4_1_sva_1 = reg_refresh_inner_loop_and_stg_3_1_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[4]));
  assign reg_refresh_inner_loop_and_stg_4_2_sva_1 = reg_refresh_inner_loop_and_stg_3_2_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[4]));
  assign reg_refresh_inner_loop_and_stg_4_3_sva_1 = reg_refresh_inner_loop_and_stg_3_3_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[4]));
  assign reg_refresh_inner_loop_and_stg_4_4_sva_1 = reg_refresh_inner_loop_and_stg_3_4_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[4]));
  assign reg_refresh_inner_loop_and_stg_4_5_sva_1 = reg_refresh_inner_loop_and_stg_3_5_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[4]));
  assign reg_refresh_inner_loop_and_stg_4_6_sva_1 = reg_refresh_inner_loop_and_stg_3_6_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[4]));
  assign reg_refresh_inner_loop_and_stg_4_7_sva_1 = reg_refresh_inner_loop_and_stg_3_7_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[4]));
  assign reg_refresh_inner_loop_and_stg_4_8_sva_1 = reg_refresh_inner_loop_and_stg_3_8_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[4]));
  assign reg_refresh_inner_loop_and_stg_4_9_sva_1 = reg_refresh_inner_loop_and_stg_3_9_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[4]));
  assign reg_refresh_inner_loop_and_stg_4_10_sva_1 = reg_refresh_inner_loop_and_stg_3_10_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[4]));
  assign reg_refresh_inner_loop_and_stg_4_11_sva_1 = reg_refresh_inner_loop_and_stg_3_11_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[4]));
  assign reg_refresh_inner_loop_and_stg_4_12_sva_1 = reg_refresh_inner_loop_and_stg_3_12_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[4]));
  assign reg_refresh_inner_loop_and_stg_4_13_sva_1 = reg_refresh_inner_loop_and_stg_3_13_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[4]));
  assign reg_refresh_inner_loop_and_stg_4_14_sva_1 = reg_refresh_inner_loop_and_stg_3_14_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[4]));
  assign reg_refresh_inner_loop_and_stg_4_15_sva_1 = reg_refresh_inner_loop_and_stg_3_15_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[4]));
  assign reg_refresh_inner_loop_and_stg_4_16_sva_1 = reg_refresh_inner_loop_and_stg_3_0_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[4]);
  assign reg_refresh_inner_loop_and_stg_4_17_sva_1 = reg_refresh_inner_loop_and_stg_3_1_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[4]);
  assign reg_refresh_inner_loop_and_stg_4_18_sva_1 = reg_refresh_inner_loop_and_stg_3_2_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[4]);
  assign reg_refresh_inner_loop_and_stg_4_19_sva_1 = reg_refresh_inner_loop_and_stg_3_3_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[4]);
  assign reg_refresh_inner_loop_and_stg_4_20_sva_1 = reg_refresh_inner_loop_and_stg_3_4_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[4]);
  assign reg_refresh_inner_loop_and_stg_4_21_sva_1 = reg_refresh_inner_loop_and_stg_3_5_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[4]);
  assign reg_refresh_inner_loop_and_stg_4_22_sva_1 = reg_refresh_inner_loop_and_stg_3_6_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[4]);
  assign reg_refresh_inner_loop_and_stg_4_23_sva_1 = reg_refresh_inner_loop_and_stg_3_7_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[4]);
  assign reg_refresh_inner_loop_and_stg_4_24_sva_1 = reg_refresh_inner_loop_and_stg_3_8_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[4]);
  assign reg_refresh_inner_loop_and_stg_3_9_sva_1 = reg_refresh_inner_loop_and_stg_2_1_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[3]);
  assign reg_refresh_inner_loop_and_stg_3_10_sva_1 = reg_refresh_inner_loop_and_stg_2_2_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[3]);
  assign reg_refresh_inner_loop_and_stg_3_11_sva_1 = reg_refresh_inner_loop_and_stg_2_3_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[3]);
  assign reg_refresh_inner_loop_and_stg_3_12_sva_1 = reg_refresh_inner_loop_and_stg_2_4_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[3]);
  assign reg_refresh_inner_loop_and_stg_3_13_sva_1 = reg_refresh_inner_loop_and_stg_2_5_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[3]);
  assign reg_refresh_inner_loop_and_stg_3_14_sva_1 = reg_refresh_inner_loop_and_stg_2_6_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[3]);
  assign reg_refresh_inner_loop_and_stg_3_15_sva_1 = reg_refresh_inner_loop_and_stg_2_7_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[3]);
  assign reg_refresh_inner_loop_and_stg_3_0_sva_1 = reg_refresh_inner_loop_and_stg_2_0_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[3]));
  assign reg_refresh_inner_loop_and_stg_3_1_sva_1 = reg_refresh_inner_loop_and_stg_2_1_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[3]));
  assign reg_refresh_inner_loop_and_stg_3_2_sva_1 = reg_refresh_inner_loop_and_stg_2_2_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[3]));
  assign reg_refresh_inner_loop_and_stg_3_3_sva_1 = reg_refresh_inner_loop_and_stg_2_3_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[3]));
  assign reg_refresh_inner_loop_and_stg_3_4_sva_1 = reg_refresh_inner_loop_and_stg_2_4_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[3]));
  assign reg_refresh_inner_loop_and_stg_3_5_sva_1 = reg_refresh_inner_loop_and_stg_2_5_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[3]));
  assign reg_refresh_inner_loop_and_stg_3_6_sva_1 = reg_refresh_inner_loop_and_stg_2_6_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[3]));
  assign reg_refresh_inner_loop_and_stg_3_7_sva_1 = reg_refresh_inner_loop_and_stg_2_7_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[3]));
  assign reg_refresh_inner_loop_and_stg_3_8_sva_1 = reg_refresh_inner_loop_and_stg_2_0_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[3]);
  assign reg_refresh_inner_loop_and_stg_2_1_sva_1 = reg_refresh_inner_loop_and_stg_1_1_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[2]));
  assign reg_refresh_inner_loop_and_stg_2_2_sva_1 = reg_refresh_inner_loop_and_stg_1_2_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[2]));
  assign reg_refresh_inner_loop_and_stg_2_3_sva_1 = reg_refresh_inner_loop_and_stg_1_3_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[2]));
  assign reg_refresh_inner_loop_and_stg_2_4_sva_1 = reg_refresh_inner_loop_and_stg_1_0_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[2]);
  assign reg_refresh_inner_loop_and_stg_2_5_sva_1 = reg_refresh_inner_loop_and_stg_1_1_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[2]);
  assign reg_refresh_inner_loop_and_stg_2_6_sva_1 = reg_refresh_inner_loop_and_stg_1_2_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[2]);
  assign reg_refresh_inner_loop_and_stg_2_7_sva_1 = reg_refresh_inner_loop_and_stg_1_3_sva_1
      & (reg_refresh_inner_loop_acc_decb_sva_1[2]);
  assign reg_refresh_inner_loop_and_stg_2_0_sva_1 = reg_refresh_inner_loop_and_stg_1_0_sva_1
      & (~ (reg_refresh_inner_loop_acc_decb_sva_1[2]));
  assign reg_refresh_inner_loop_and_stg_1_1_sva_1 = (reg_refresh_inner_loop_acc_decb_sva_1[1:0]==2'b01);
  assign reg_refresh_inner_loop_and_stg_1_2_sva_1 = (reg_refresh_inner_loop_acc_decb_sva_1[1:0]==2'b10);
  assign reg_refresh_inner_loop_and_stg_1_3_sva_1 = (reg_refresh_inner_loop_acc_decb_sva_1[1:0]==2'b11);
  assign reg_refresh_inner_loop_and_stg_1_0_sva_1 = ~((reg_refresh_inner_loop_acc_decb_sva_1[1:0]!=2'b00));
  assign nl_operator_4_false_acc_2_nl = ({(k_1_lpi_1_dfm_1[2:0]) , 2'b01}) + conv_u2u_4_5(~
      k_1_lpi_1_dfm_1);
  assign operator_4_false_acc_2_nl = nl_operator_4_false_acc_2_nl[4:0];
  assign nl_operator_4_false_mul_cse_sva_1 = ({operator_4_false_acc_2_nl , 2'b01})
      + conv_u2u_6_7({2'b11 , (~ k_1_lpi_1_dfm_1)});
  assign operator_4_false_mul_cse_sva_1 = nl_operator_4_false_mul_cse_sva_1[6:0];
  assign ksigma_sva_1 = conv_u2u_13_13(rawdns_reg_sigma * rawdns_reg_Filterpara);
  assign nl_pixel_loop_if_1_for_acc_32 = conv_u2u_2_4(~ (j_lpi_1[4:3])) + conv_u2u_2_4(j_lpi_1[6:5])
      + conv_u2u_2_4(~ (j_lpi_1[8:7])) + conv_u2u_2_4(j_lpi_1[10:9]);
  assign pixel_loop_if_1_for_acc_32 = nl_pixel_loop_if_1_for_acc_32[3:0];
  assign Cal_Eur_Distance_for_1_for_conc_12_23_12 = MUX_v_12_9_2(Cal_Eur_Distance_temp_block_0_0_23_12_lpi_1,
      Cal_Eur_Distance_temp_block_0_1_23_12_lpi_1, Cal_Eur_Distance_temp_block_0_2_23_12_lpi_1,
      Cal_Eur_Distance_temp_block_1_0_23_12_lpi_1, Cal_Eur_Distance_temp_block_1_1_23_12_lpi_1,
      Cal_Eur_Distance_temp_block_1_2_23_12_lpi_1, Cal_Eur_Distance_temp_block_2_0_23_12_lpi_1,
      Cal_Eur_Distance_temp_block_2_1_23_12_lpi_1, Cal_Eur_Distance_temp_block_2_2_23_12_lpi_1,
      {Cal_Eur_Distance_for_1_for_acc_psp_1 , (Cal_Eur_Distance_for_1_for_acc_sdt_1[0])});
  assign Cal_Eur_Distance_for_1_for_conc_12_11_0 = MUX_v_12_9_2(Cal_Eur_Distance_temp_block_0_0_11_0_lpi_1_mx0,
      Cal_Eur_Distance_temp_block_0_1_11_0_lpi_1_mx0, Cal_Eur_Distance_temp_block_0_2_11_0_lpi_1_mx0,
      Cal_Eur_Distance_temp_block_1_0_11_0_lpi_1_mx0, Cal_Eur_Distance_temp_block_1_1_11_0_lpi_1_mx0,
      Cal_Eur_Distance_temp_block_1_2_11_0_lpi_1_mx0, Cal_Eur_Distance_temp_block_2_0_11_0_lpi_1_mx0,
      Cal_Eur_Distance_temp_block_2_1_11_0_lpi_1_mx0, Cal_Eur_Distance_temp_block_2_2_11_0_lpi_1_mx0,
      {Cal_Eur_Distance_for_1_for_acc_psp_1 , (Cal_Eur_Distance_for_1_for_acc_sdt_1[0])});
  assign padding_loop2_asn_483 = rawdns_process_for_equal_tmp_4 & pixel_loop_asn_sft_lpi_1_dfm_mx0
      & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0) & (~ lfst_exitL_exit_padding_loop2_lpi_1_dfm_1_1);
  assign padding_loop2_asn_489 = Cal_Eur_Distance_for_1_or_tmp_1 & rawdns_process_for_for_asn_sft_lpi_1_dfm_mx0
      & pixel_loop_and_164_tmp_1 & (~ padding_loop2_or_401_tmp_1);
  assign padding_loop2_asn_491 = operator_4_true_3_acc_tmp_2 & Cal_Eur_Distance_for_1_equal_tmp_3
      & rawdns_process_for_for_asn_sft_lpi_1_dfm_mx0 & pixel_loop_and_164_tmp_1 &
      (~ padding_loop2_or_401_tmp_1);
  assign padding_loop2_asn_495 = exit_rawdns_process_for_for_lpi_1_dfm_2 & pixel_loop_if_1_asn_sft_lpi_1_mx0
      & pixel_loop_and_135_tmp_1 & (~ padding_loop2_or_401_tmp_1);
  assign padding_loop2_asn_497 = (~ exit_rawdns_process_for_for_lpi_1_dfm_2) & pixel_loop_if_1_asn_sft_lpi_1_mx0
      & pixel_loop_and_135_tmp_1 & (~ padding_loop2_or_401_tmp_1);
  assign pixel_loop_if_1_for_pixel_loop_if_1_for_and_17 = (loop2_inner_loop_conc_24_itm_2_3_1[0])
      & padding_loop1_nor_1_itm_2;
  assign pixel_loop_if_1_for_pixel_loop_if_1_for_and_19 = (loop2_inner_loop_conc_24_itm_2_3_1[1])
      & padding_loop1_nor_3_itm_2;
  assign pixel_loop_if_1_for_pixel_loop_if_1_for_and_21 = (loop2_inner_loop_conc_24_itm_2_3_1[2])
      & padding_loop1_nor_6_itm_2;
  assign padding_loop2_mux_125_tmp = MUX_v_10_2_2(operator_26_false_operator_26_false_slc_ksigma2_mul_25_16_psp_lpi_1_dfm,
      ksigma2_mul_itm_25_16_1, exitL_exitL_exit_padding_loop2_sva);
  assign or_tmp_17 = (((~ exit_rawdns_process_for_lpi_1_dfm_2_st_1) | Cal_weight_Cal_weight_Cal_weight_or_itm_1)
      & Cal_weight_else_else_else_if_slc_operator_26_false_2_acc_30_svs_1) | lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_1_0
      | (~ asn_sft_lpi_1);
  assign or_dcpl_15 = pixel_loop_asn_sft_1_lpi_1 | sfi_rawdns_reg_eb_1_lpi_1;
  assign or_tmp_96 = (~ lfst_exit_rawdns_process_for_lpi_1) | sfi_pixel_loop_if_1_land_lpi_1;
  assign mux_tmp_91 = MUX_s_1_2_2(pixel_loop_if_1_asn_sft_lpi_1, pixel_loop_mux_716_itm_1,
      nor_62_cse);
  assign or_133_cse = rawdns_process_for_for_lor_lpi_1 | (~ lfst_exit_rawdns_process_for_lpi_1)
      | sfi_pixel_loop_if_1_land_lpi_1;
  assign or_131_cse = (rawdns_process_k_3_1_lpi_1!=3'b010) | (rawdns_process_l_3_1_lpi_1!=3'b010)
      | (~ lfst_exit_rawdns_process_for_lpi_1) | sfi_pixel_loop_if_1_land_lpi_1;
  assign or_130_cse = (~ lfst_exit_rawdns_process_for_for_1_lpi_1) | exitL_exitL_exit_Cal_Eur_Distance_for_1_lpi_1;
  assign or_132_nl = rawdns_process_for_for_asn_sft_lpi_1 | (~ lfst_exit_rawdns_process_for_lpi_1)
      | sfi_pixel_loop_if_1_land_lpi_1;
  assign mux_93_nl = MUX_s_1_2_2(or_133_cse, or_132_nl, lfst_exitL_exit_Cal_Eur_Distance_for_1_lpi_1);
  assign mux_tmp_93 = MUX_s_1_2_2(mux_93_nl, or_131_cse, or_130_cse);
  assign or_tmp_228 = exitL_exitL_exitL_exitL_exit_rawdns_process_for_lpi_1 | (~
      lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0);
  assign and_dcpl_162 = main_stage_0_3 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_2);
  assign and_dcpl_169 = main_stage_0_3 & (~ lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_2_0);
  assign or_dcpl_51 = (lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_1_1_0[1])
      | lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_1_1;
  assign and_dcpl_177 = Cal_weight_else_else_else_if_slc_operator_26_false_2_acc_30_svs_1
      & lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_1_1;
  assign and_dcpl_178 = (~ Cal_weight_else_else_else_if_slc_operator_26_false_2_acc_30_svs_1)
      & lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_1_1;
  assign and_dcpl_179 = ~((lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_1_1_0[1])
      | lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_1_1);
  assign and_dcpl_180 = (lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_1_1_0[1])
      & (~ lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_1_1);
  assign or_dcpl_67 = Cal_Eur_Distance_for_for_slc_Cal_Eur_Distance_for_for_acc_7_sdt_0_itm_1
      | lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_1_1;
  assign or_dcpl_68 = (loop2_inner_loop_conc_24_itm_1_3_1[2]) | (loop2_inner_loop_conc_24_itm_1_3_1[0]);
  assign or_dcpl_69 = or_dcpl_68 | (loop2_inner_loop_conc_24_itm_1_3_1[1]);
  assign or_dcpl_73 = pixel_loop_asn_sft_1_lpi_1_dfm_1 | (~ main_stage_0_2);
  assign or_dcpl_75 = or_dcpl_73 | (lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_1_1_0!=2'b11)
      | lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_1_2 | (~ pixel_loop_asn_sft_lpi_1_dfm_1);
  assign or_dcpl_77 = (~ Cal_Eur_Distance_for_for_slc_Cal_Eur_Distance_for_for_acc_7_sdt_0_itm_1)
      | lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_1_1;
  assign or_dcpl_80 = (loop2_inner_loop_conc_24_itm_1_3_1[2]) | (~ (loop2_inner_loop_conc_24_itm_1_3_1[0]));
  assign or_dcpl_81 = or_dcpl_80 | (loop2_inner_loop_conc_24_itm_1_3_1[1]);
  assign or_dcpl_86 = or_dcpl_68 | (~ (loop2_inner_loop_conc_24_itm_1_3_1[1]));
  assign or_dcpl_91 = or_dcpl_80 | (~ (loop2_inner_loop_conc_24_itm_1_3_1[1]));
  assign or_dcpl_97 = (loop2_inner_loop_conc_24_itm_1_3_1!=3'b100);
  assign or_dcpl_102 = (~ main_stage_0_2) | padding_loop2_equal_tmp_3_1;
  assign and_dcpl_182 = lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0 & (~ exitL_exitL_exitL_exitL_exit_rawdns_process_for_lpi_1);
  assign and_dcpl_183 = and_dcpl_182 & lfst_exitL_exitL_exitL_exit_rawdns_process_for_lpi_1
      & (~ exitL_exitL_exit_padding_loop2_sva);
  assign or_tmp_276 = (~ rawdns_process_for_for_asn_sft_lpi_1) | lfst_exit_Cal_Eur_Distance_for_1_lpi_1_1;
  assign mux_211_nl = MUX_s_1_2_2(rawdns_process_for_for_lor_lpi_1, rawdns_process_for_for_asn_sft_lpi_1,
      lfst_exitL_exit_Cal_Eur_Distance_for_1_lpi_1);
  assign mux_212_nl = MUX_s_1_2_2(mux_211_nl, or_78_cse, or_130_cse);
  assign mux_209_nl = MUX_s_1_2_2(rawdns_process_for_for_lor_lpi_1, (~ or_tmp_276),
      lfst_exitL_exit_Cal_Eur_Distance_for_1_lpi_1);
  assign mux_210_nl = MUX_s_1_2_2(mux_209_nl, or_78_cse, or_130_cse);
  assign nor_81_nl = ~(lfst_exit_Cal_Eur_Distance_for_1_lpi_1_0 | (~ operator_4_true_2_acc_tmp_2)
      | (~ operator_4_true_3_acc_tmp_2));
  assign mux_tmp_212 = MUX_s_1_2_2(mux_212_nl, mux_210_nl, nor_81_nl);
  assign or_dcpl_110 = sfi_rawdns_reg_eb_1_lpi_1 | (~ lfst_exitL_exit_rawdns_process_for_lpi_1_2);
  assign or_dcpl_114 = (~ pixel_loop_asn_sft_lpi_1) | sfi_pixel_loop_if_1_land_lpi_1;
  assign or_dcpl_118 = or_tmp_228 | (~ lfst_exitL_exitL_exitL_exit_rawdns_process_for_lpi_1)
      | (~ lfst_exitL_exitL_exit_rawdns_process_for_lpi_1);
  assign or_142_cse = (~ main_stage_0_2) | padding_loop2_equal_tmp_1 | padding_loop2_equal_tmp_3_1;
  assign mux_tmp_213 = MUX_s_1_2_2(pixel_loop_mux_716_itm_1, pixel_loop_if_1_asn_sft_lpi_1,
      or_142_cse);
  assign or_dcpl_122 = exitL_exitL_exit_padding_loop2_sva | (lfst_exitL_exit_rawdns_process_for_lpi_1_1_0[1]);
  assign or_dcpl_125 = ~(lfst_exitL_exitL_exit_rawdns_process_for_lpi_1 & pixel_loop_asn_sft_lpi_1);
  assign or_dcpl_127 = or_tmp_228 | (~ lfst_exitL_exitL_exitL_exit_rawdns_process_for_lpi_1);
  assign or_dcpl_128 = or_dcpl_127 | or_dcpl_125 | pixel_loop_asn_sft_1_lpi_1;
  assign or_dcpl_129 = or_dcpl_128 | or_dcpl_110 | (lfst_exitL_exit_rawdns_process_for_lpi_1_1_0[0])
      | or_dcpl_122;
  assign or_418_nl = (~ or_tmp_276) | (~ lfst_exit_rawdns_process_for_lpi_1) | sfi_pixel_loop_if_1_land_lpi_1;
  assign mux_218_nl = MUX_s_1_2_2(or_133_cse, or_418_nl, lfst_exitL_exit_Cal_Eur_Distance_for_1_lpi_1);
  assign mux_tmp_218 = MUX_s_1_2_2(mux_218_nl, or_131_cse, or_130_cse);
  assign nand_35_nl = ~(pixel_loop_if_1_asn_sft_lpi_1 & mux_tmp_218);
  assign nand_36_nl = ~(pixel_loop_mux_716_itm_1 & mux_tmp_218);
  assign not_tmp_181 = MUX_s_1_2_2(nand_35_nl, nand_36_nl, nor_62_cse);
  assign or_dcpl_131 = (~ lfst_exitL_exit_Cal_Eur_Distance_for_1_lpi_1) | exitL_exitL_exit_Cal_Eur_Distance_for_1_lpi_1;
  assign or_dcpl_132 = or_dcpl_131 | (~ lfst_exit_rawdns_process_for_for_1_lpi_1);
  assign or_dcpl_134 = or_tmp_96 | (~ lfst_exit_Cal_Eur_Distance_for_1_lpi_1_1) |
      or_dcpl_132;
  assign or_dcpl_139 = ~(lfst_exit_rawdns_process_for_lpi_1 & lfst_exit_Cal_Eur_Distance_for_1_lpi_1_1);
  assign nand_32_nl = ~(pixel_loop_if_1_asn_sft_lpi_1 & mux_tmp_93);
  assign nand_33_nl = ~(pixel_loop_mux_716_itm_1 & mux_tmp_93);
  assign mux_224_nl = MUX_s_1_2_2(nand_32_nl, nand_33_nl, nor_62_cse);
  assign or_dcpl_180 = mux_224_nl | or_dcpl_129;
  assign and_tmp_24 = pixel_loop_acc_4_itm_26_1 & or_tmp_228;
  assign or_tmp_292 = pixel_loop_acc_4_itm_26_1 | and_dcpl_182;
  assign mux_tmp_224 = MUX_s_1_2_2(or_tmp_292, and_tmp_24, lfst_exitL_exitL_exitL_exit_rawdns_process_for_lpi_1);
  assign mux_226_nl = MUX_s_1_2_2(mux_tmp_224, pixel_loop_acc_4_itm_26_1, exitL_exitL_exit_padding_loop2_sva);
  assign mux_227_itm = MUX_s_1_2_2(mux_226_nl, and_311_cse, lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_1);
  assign or_dcpl_268 = ~(exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1_1 & rawdns_process_for_for_asn_sft_lpi_1_dfm_1
      & Cal_Eur_Distance_for_1_equal_tmp_1);
  assign and_dcpl_193 = lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0 & lfst_exitL_exit_rawdns_process_for_lpi_1_2;
  assign and_dcpl_196 = lfst_exitL_exit_Cal_Eur_Distance_for_1_lpi_1 & (~ exitL_exitL_exit_Cal_Eur_Distance_for_1_lpi_1);
  assign and_dcpl_199 = lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0 & (~ sfi_pixel_loop_if_1_land_lpi_1);
  assign and_dcpl_202 = lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0 & (~ lfst_exitL_exit_rawdns_process_for_lpi_1_2);
  assign and_dcpl_204 = (~ lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0) & (~ sfi_rawdns_reg_eb_lpi_1)
      & lfst_exit_padding_loop2_lpi_1_1;
  assign or_dcpl_296 = sfi_rawdns_reg_eb_lpi_1 | (~ lfst_exit_padding_loop2_lpi_1_1);
  assign and_dcpl_205 = or_dcpl_296 & (~ lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0);
  assign and_dcpl_207 = (~ sfi_rawdns_reg_eb_1_lpi_1) & lfst_exitL_exit_rawdns_process_for_lpi_1_2;
  assign and_dcpl_210 = and_dcpl_182 & lfst_exitL_exitL_exitL_exit_rawdns_process_for_lpi_1
      & lfst_exitL_exitL_exit_rawdns_process_for_lpi_1;
  assign and_dcpl_218 = and_dcpl_202 & (lfst_exitL_exit_rawdns_process_for_lpi_1_1_0[0]);
  assign and_dcpl_219 = and_dcpl_202 & (~ (lfst_exitL_exit_rawdns_process_for_lpi_1_1_0[0]));
  assign and_331_nl = pixel_loop_asn_sft_1_lpi_1 & lfst_exitL_exitL_exitL_exit_rawdns_process_for_lpi_1;
  assign mux_230_nl = MUX_s_1_2_2(or_tmp_292, and_tmp_24, and_331_nl);
  assign mux_tmp_230 = MUX_s_1_2_2(mux_230_nl, pixel_loop_acc_4_itm_26_1, exitL_exitL_exit_padding_loop2_sva);
  assign or_tmp_301 = (~ lfst_exitL_exitL_exitL_exit_rawdns_process_for_lpi_1) |
      exitL_exitL_exitL_exitL_exit_rawdns_process_for_lpi_1 | exitL_exitL_exit_padding_loop2_sva;
  assign or_tmp_302 = or_tmp_301 | (~ lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0);
  assign or_tmp_303 = ~((~(or_249_cse & rawdns_reg_eb)) & or_tmp_302);
  assign and_tmp_27 = or_249_cse & (rawdns_reg_eb | (~ or_tmp_302));
  assign nor_107_nl = ~(or_tmp_301 | (~(lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0
      & mux_tmp_213)));
  assign or_664_nl = (~ lfst_exitL_exitL_exitL_exit_rawdns_process_for_lpi_1) | exitL_exitL_exitL_exitL_exit_rawdns_process_for_lpi_1
      | exitL_exitL_exit_padding_loop2_sva | (~ lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0)
      | mux_tmp_213;
  assign mux_tmp_249 = MUX_s_1_2_2(nor_107_nl, or_664_nl, and_299_cse);
  assign and_tmp_29 = or_249_cse & rawdns_reg_eb & or_tmp_302;
  assign mux_253_nl = MUX_s_1_2_2(and_tmp_29, mux_tmp_249, rawdns_process_for_for_lor_lpi_1);
  assign nand_26_nl = ~(operator_4_true_2_acc_tmp_2 & operator_4_true_3_acc_tmp_2
      & lfst_exit_Cal_Eur_Distance_for_1_lpi_1_1 & (~ lfst_exit_Cal_Eur_Distance_for_1_lpi_1_0));
  assign mux_251_nl = MUX_s_1_2_2(and_tmp_29, mux_tmp_249, nand_26_nl);
  assign mux_252_nl = MUX_s_1_2_2(and_tmp_29, mux_251_nl, rawdns_process_for_for_asn_sft_lpi_1);
  assign mux_tmp_253 = MUX_s_1_2_2(mux_253_nl, mux_252_nl, lfst_exitL_exit_Cal_Eur_Distance_for_1_lpi_1);
  assign or_dcpl_337 = (~ pixel_loop_if_1_asn_sft_lpi_1) | pixel_loop_asn_sft_1_lpi_1_dfm_1
      | or_dcpl_102 | padding_loop2_equal_tmp_1 | (~ pixel_loop_asn_sft_lpi_1_dfm_1)
      | (~ rawdns_process_for_equal_tmp_2_1);
  assign dst_rsci_idat_mx0c0 = and_dcpl_162 & exitL_exit_rawdns_process_for_lpi_1_dfm_st_2
      & (lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_2_1_0==2'b00) & lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_2_2
      & loop2_inner_loop_loop2_inner_loop_and_4_itm_2 & reg_pixel_loop_asn_sft_lpi_1_dfm_st_2_cse
      & (~ lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_2_1);
  assign dst_rsci_idat_mx0c1 = and_dcpl_162 & (~(reg_pixel_loop_asn_sft_lpi_1_dfm_st_2_cse
      | lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_2_1));
  assign dst_rsci_idat_mx0c2 = and_dcpl_169 & asn_sft_lpi_1_st_2 & (~ exitL_exit_rawdns_process_for_lpi_1_dfm_st_2)
      & lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_2_1;
  assign dst_rsci_idat_mx0c3 = and_dcpl_169 & asn_sft_lpi_1_st_2 & (~ exit_rawdns_process_for_lpi_1_dfm_2_st_2)
      & loop2_inner_loop_slc_13_svs_st_2 & exitL_exit_rawdns_process_for_lpi_1_dfm_st_2
      & lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_2_1;
  assign rawdns_lines_rsc_0_0_i_radr_d_pff = operator_42_false_slc_operator_30_false_acc_psp_14_0_itm_1[11:0];
  assign rawdns_lines_rsc_0_0_i_d_d_pff = MUX_v_12_121_2x0x1x2x3x4x5x6x7x8x9x10x11x12x13x14x15x16x17x18x19x56x57x58x59x60x61x62x63(rawdns_block_1_9_lpi_1,
      rawdns_block_1_10_lpi_1_mx0, rawdns_block_2_0_lpi_1, rawdns_block_2_1_lpi_1,
      rawdns_block_2_2_lpi_1, rawdns_block_2_3_lpi_1, rawdns_block_2_4_lpi_1, rawdns_block_2_5_lpi_1,
      rawdns_block_2_6_lpi_1, rawdns_block_2_7_lpi_1, rawdns_block_2_8_lpi_1, rawdns_block_2_9_lpi_1,
      rawdns_block_2_10_lpi_1_mx0, rawdns_block_3_0_lpi_1, rawdns_block_3_1_lpi_1,
      rawdns_block_3_2_lpi_1, rawdns_block_3_3_lpi_1, rawdns_block_3_4_lpi_1, rawdns_block_3_5_lpi_1,
      rawdns_block_3_6_lpi_1, rawdns_block_3_7_lpi_1, rawdns_block_3_8_lpi_1, rawdns_block_3_9_lpi_1,
      rawdns_block_3_10_lpi_1_mx0, rawdns_block_4_0_lpi_1, rawdns_block_4_1_lpi_1,
      rawdns_block_4_2_lpi_1, rawdns_block_4_3_lpi_1, rawdns_block_4_4_lpi_1, rawdns_block_4_5_lpi_1,
      rawdns_block_4_6_lpi_1, rawdns_block_4_7_lpi_1, rawdns_block_4_8_lpi_1, rawdns_block_4_9_lpi_1,
      rawdns_block_4_10_lpi_1_mx0, rawdns_block_5_0_lpi_1, rawdns_block_5_9_lpi_1,
      rawdns_block_5_10_lpi_1_mx0, rawdns_block_6_0_lpi_1, rawdns_block_6_1_lpi_1,
      rawdns_block_6_2_lpi_1, rawdns_block_6_3_lpi_1, rawdns_block_6_4_lpi_1, rawdns_block_6_5_lpi_1,
      rawdns_block_6_6_lpi_1, rawdns_block_6_7_lpi_1, rawdns_block_6_8_lpi_1, rawdns_block_6_9_lpi_1,
      rawdns_block_6_10_lpi_1_mx0, rawdns_block_7_0_lpi_1, rawdns_block_7_1_lpi_1,
      rawdns_block_7_2_lpi_1, rawdns_block_7_3_lpi_1, rawdns_block_7_4_lpi_1, rawdns_block_7_5_lpi_1,
      rawdns_block_7_6_lpi_1, rawdns_block_7_7_lpi_1, rawdns_block_7_8_lpi_1, rawdns_block_7_9_lpi_1,
      rawdns_block_7_10_lpi_1_mx0, rawdns_block_8_0_lpi_1, rawdns_block_8_1_lpi_1,
      rawdns_block_8_2_lpi_1, rawdns_block_8_3_lpi_1, rawdns_block_8_4_lpi_1, rawdns_block_8_5_lpi_1,
      rawdns_block_8_6_lpi_1, rawdns_block_8_7_lpi_1, rawdns_block_8_8_lpi_1, rawdns_block_8_9_lpi_1,
      rawdns_block_8_10_lpi_1_mx0, rawdns_block_9_0_lpi_1, rawdns_block_9_1_lpi_1,
      rawdns_block_9_2_lpi_1, rawdns_block_9_3_lpi_1, rawdns_block_9_4_lpi_1, rawdns_block_9_5_lpi_1,
      rawdns_block_9_6_lpi_1, rawdns_block_9_7_lpi_1, rawdns_block_9_8_lpi_1, rawdns_block_9_9_lpi_1,
      rawdns_block_9_10_lpi_1_mx0, rawdns_block_10_0_lpi_1, rawdns_block_10_1_lpi_1,
      rawdns_block_10_2_lpi_1, rawdns_block_10_3_lpi_1, rawdns_block_10_4_lpi_1,
      rawdns_block_10_5_lpi_1, rawdns_block_10_6_lpi_1, rawdns_block_10_7_lpi_1,
      rawdns_block_10_8_lpi_1, rawdns_block_10_9_lpi_1, src_data_lpi_1_dfm_1_mx0,
      {Cal_Eur_Distance_for_for_acc_itm_1 , Cal_weight_else_if_else_if_slc_Cal_weight_else_if_else_if_acc_29_svs_st_1});
  assign rawdns_lines_rsc_0_0_i_we_d_pff = rawdns_lines_rsc_0_0_i_we_d_iff;
  assign rawdns_lines_rsc_0_0_i_re_d_pff = rawdns_lines_rsc_0_0_i_re_d_iff;
  assign rawdns_lines_rsc_0_1_i_we_d_pff = rawdns_lines_rsc_0_1_i_we_d_iff;
  assign rawdns_lines_rsc_0_1_i_re_d_pff = rawdns_lines_rsc_0_1_i_re_d_iff;
  assign rawdns_lines_rsc_0_2_i_we_d_pff = rawdns_lines_rsc_0_2_i_we_d_iff;
  assign rawdns_lines_rsc_0_2_i_re_d_pff = rawdns_lines_rsc_0_2_i_re_d_iff;
  assign rawdns_lines_rsc_0_3_i_we_d_pff = rawdns_lines_rsc_0_3_i_we_d_iff;
  assign rawdns_lines_rsc_0_3_i_re_d_pff = rawdns_lines_rsc_0_3_i_re_d_iff;
  assign rawdns_lines_rsc_0_4_i_we_d_pff = rawdns_lines_rsc_0_4_i_we_d_iff;
  assign rawdns_lines_rsc_0_4_i_re_d_pff = rawdns_lines_rsc_0_4_i_re_d_iff;
  assign rawdns_lines_rsc_0_5_i_we_d_pff = rawdns_lines_rsc_0_5_i_we_d_iff;
  assign rawdns_lines_rsc_0_5_i_re_d_pff = rawdns_lines_rsc_0_5_i_re_d_iff;
  assign rawdns_lines_rsc_0_6_i_we_d_pff = rawdns_lines_rsc_0_6_i_we_d_iff;
  assign rawdns_lines_rsc_0_6_i_re_d_pff = rawdns_lines_rsc_0_6_i_re_d_iff;
  assign rawdns_lines_rsc_0_7_i_we_d_pff = rawdns_lines_rsc_0_7_i_we_d_iff;
  assign rawdns_lines_rsc_0_7_i_re_d_pff = rawdns_lines_rsc_0_7_i_re_d_iff;
  assign rawdns_lines_rsc_0_8_i_we_d_pff = rawdns_lines_rsc_0_8_i_we_d_iff;
  assign rawdns_lines_rsc_0_8_i_re_d_pff = rawdns_lines_rsc_0_8_i_re_d_iff;
  assign rawdns_lines_rsc_0_9_i_we_d_pff = rawdns_lines_rsc_0_9_i_we_d_iff;
  assign rawdns_lines_rsc_0_9_i_re_d_pff = rawdns_lines_rsc_0_9_i_re_d_iff;
  assign and_dcpl_258 = Cal_Eur_Distance_for_1_equal_tmp_3 & (~ operator_4_true_3_acc_tmp_2);
  assign or_dcpl_355 = ((~ operator_4_false_5_acc_itm_2) & padding_loop2_and_331_cse_1)
      | (operator_4_false_4_acc_itm_2_1 & padding_loop2_and_330_cse_1);
  assign or_dcpl_356 = (operator_4_false_5_acc_itm_2 & padding_loop2_and_331_cse_1)
      | ((~ operator_4_false_4_acc_itm_2_1) & padding_loop2_and_330_cse_1);
  assign or_dcpl_361 = (~(lfst_exitL_exitL_exitL_exit_rawdns_process_for_lpi_1 &
      lfst_exitL_exitL_exit_rawdns_process_for_lpi_1)) | exitL_exitL_exitL_exitL_exit_rawdns_process_for_lpi_1
      | sfi_rawdns_reg_eb_1_lpi_1 | (~ lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0)
      | exitL_exitL_exit_padding_loop2_sva;
  assign and_374_cse = ((~(lfst_exit_Cal_Eur_Distance_for_1_lpi_1_1 & lfst_exitL_exit_Cal_Eur_Distance_for_1_lpi_1))
      | exitL_exitL_exit_Cal_Eur_Distance_for_1_lpi_1 | (~(lfst_exit_rawdns_process_for_for_1_lpi_1
      & lfst_exit_rawdns_process_for_lpi_1)) | sfi_pixel_loop_if_1_land_lpi_1) &
      lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0 & (~ (lfst_exitL_exit_rawdns_process_for_lpi_1_1_0[1]));
  assign and_375_cse = lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0 & (lfst_exitL_exit_rawdns_process_for_lpi_1_1_0[1]);
  assign and_382_cse = lfst_exit_Cal_Eur_Distance_for_1_lpi_1_1 & lfst_exitL_exit_Cal_Eur_Distance_for_1_lpi_1
      & (~ exitL_exitL_exit_Cal_Eur_Distance_for_1_lpi_1) & lfst_exit_rawdns_process_for_for_1_lpi_1
      & lfst_exit_rawdns_process_for_lpi_1 & lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0
      & (~ sfi_pixel_loop_if_1_land_lpi_1) & (~ (lfst_exitL_exit_rawdns_process_for_lpi_1_1_0[1]));
  assign and_dcpl_300 = lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0 & (~ (lfst_exitL_exit_rawdns_process_for_lpi_1_1_0[1]));
  assign and_dcpl_302 = and_375_cse & (lfst_exitL_exit_rawdns_process_for_lpi_1_1_0[0]);
  assign and_dcpl_303 = and_375_cse & (~ (lfst_exitL_exit_rawdns_process_for_lpi_1_1_0[0]));
  assign and_dcpl_304 = lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0 & (lfst_exitL_exit_rawdns_process_for_lpi_1_1_0[0]);
  assign and_dcpl_305 = lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0 & (~ (lfst_exitL_exit_rawdns_process_for_lpi_1_1_0[0]));
  assign and_dcpl_310 = lfst_exitL_exitL_exitL_exit_rawdns_process_for_lpi_1 & (~
      exitL_exitL_exitL_exitL_exit_rawdns_process_for_lpi_1) & lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0;
  assign and_dcpl_311 = and_dcpl_310 & (~ exitL_exitL_exit_padding_loop2_sva) & (lfst_exitL_exit_rawdns_process_for_lpi_1_1_0[0]);
  assign and_dcpl_313 = and_dcpl_310 & (~(exitL_exitL_exit_padding_loop2_sva | (lfst_exitL_exit_rawdns_process_for_lpi_1_1_0[0])));
  assign and_dcpl_315 = (~ lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0) & (~ exitL_exitL_exit_padding_loop2_sva)
      & lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_1;
  assign or_724_cse = (~((~((~ lfst_exitL_exitL_exitL_exit_rawdns_process_for_lpi_1)
      | exitL_exitL_exitL_exitL_exit_rawdns_process_for_lpi_1 | (~ lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0)))
      | lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_1)) | exitL_exitL_exit_padding_loop2_sva;
  assign nor_237_cse = ~((~((~ lfst_exit_padding_loop2_lpi_1_1) | sfi_rawdns_reg_eb_lpi_1))
      | lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0);
  assign and_dcpl_327 = ~(exitL_exitL_exit_padding_loop2_sva | lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_1);
  assign and_dcpl_331 = and_dcpl_310 & and_dcpl_327 & (lfst_exitL_exit_rawdns_process_for_lpi_1_1_0[0]);
  assign and_dcpl_333 = and_dcpl_310 & and_dcpl_327 & (~ (lfst_exitL_exit_rawdns_process_for_lpi_1_1_0[0]));
  assign and_dcpl_341 = lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0 & (lfst_exitL_exit_rawdns_process_for_lpi_1_1_0==2'b10);
  assign and_dcpl_343 = lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0 & (lfst_exitL_exit_rawdns_process_for_lpi_1_1_0==2'b00);
  assign mux_281_nl = MUX_s_1_2_2((~ rawdns_process_for_for_lor_lpi_1), or_tmp_276,
      lfst_exitL_exit_Cal_Eur_Distance_for_1_lpi_1);
  assign nor_232_nl = ~((rawdns_process_k_3_1_lpi_1!=3'b010) | (rawdns_process_l_3_1_lpi_1!=3'b010));
  assign mux_276_nl = MUX_s_1_2_2(mux_281_nl, nor_232_nl, or_130_cse);
  assign nand_78_cse = ~((~(sfi_pixel_loop_if_1_land_lpi_1 | (~ lfst_exit_rawdns_process_for_lpi_1)))
      & mux_276_nl);
  assign and_444_nl = pixel_loop_mux_716_itm_1 & nand_78_cse;
  assign and_445_nl = pixel_loop_if_1_asn_sft_lpi_1 & nand_78_cse;
  assign mux_280_cse = MUX_s_1_2_2(and_444_nl, and_445_nl, or_142_cse);
  assign or_dcpl_382 = ~(mux_280_cse & lfst_exitL_exit_rawdns_process_for_lpi_1_2);
  assign or_379_tmp = and_dcpl_183 | (~ pixel_loop_equal_1_tmp);
  assign nl_padding_loop1_acc_13_sdt = conv_u2u_2_3(~ (padding_loop1_acc_3_psp_sva_1[8:7]))
      + conv_u2u_2_3(padding_loop1_acc_3_psp_sva_1[10:9]);
  assign padding_loop1_acc_13_sdt = nl_padding_loop1_acc_13_sdt[2:0];
  assign loop2_inner_loop_or_6_itm = and_dcpl_304 | and_dcpl_305;
  assign pixel_loop_if_1_for_1_or_1_itm = and_dcpl_311 | and_dcpl_313;
  assign pixel_loop_if_1_for_1_pixel_loop_if_1_for_1_or_1_cse = (~(and_dcpl_315 |
      or_724_cse)) | and_dcpl_311 | and_dcpl_313;
  assign loop2_inner_loop_nor_9_itm = ~(and_dcpl_204 | and_dcpl_304 | and_dcpl_305);
  assign loop2_inner_loop_mux1h_43_cse = MUX1HOT_v_4_3_2((i_lpi_1[10:7]), (padding_loop1_acc_3_psp_sva_1[10:7]),
      (j_lpi_1[10:7]), {and_dcpl_204 , nor_237_cse , loop2_inner_loop_or_6_itm});
  assign loop2_inner_loop_or_9_itm = and_dcpl_331 | and_dcpl_333;
  assign loop2_inner_loop_or_11_itm = and_dcpl_304 | and_dcpl_341;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_8_10_lpi_1 <= 12'b000000000000;
      rawdns_block_0_10_lpi_1 <= 12'b000000000000;
      rawdns_block_4_10_lpi_1 <= 12'b000000000000;
      rawdns_block_7_10_lpi_1 <= 12'b000000000000;
      rawdns_block_3_10_lpi_1 <= 12'b000000000000;
      rawdns_block_6_10_lpi_1 <= 12'b000000000000;
      rawdns_block_2_10_lpi_1 <= 12'b000000000000;
      rawdns_block_9_10_lpi_1 <= 12'b000000000000;
      rawdns_block_1_10_lpi_1 <= 12'b000000000000;
      rawdns_block_5_10_lpi_1 <= 12'b000000000000;
      reg_dst_rsci_oswt_cse <= 1'b0;
      rawdns_block_5_5_lpi_1 <= 12'b000000000000;
      reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1
          <= 12'b000000000000;
      pixel_loop_if_1_for_pixel_loop_if_1_for_conc_decb_3_1_sva_2 <= 3'b000;
      pixel_loop_if_1_for_mul_sdt_3_0_sva_2_0 <= 1'b0;
      rawdns_process_acc_2_itm_1 <= 25'b0000000000000000000000000;
      rawdns_process_total_weight_sva_1 <= 13'b0000000000000;
      exit_rawdns_process_for_lpi_1_dfm_2_st_2 <= 1'b0;
      exitL_exit_rawdns_process_for_lpi_1_dfm_st_2 <= 1'b0;
      reg_refresh_inner_loop_and_stg_5_45_sva_2 <= 1'b0;
      reg_refresh_inner_loop_acc_decb_sva_2_6 <= 1'b0;
      reg_refresh_inner_loop_and_stg_5_34_sva_2 <= 1'b0;
      reg_refresh_inner_loop_and_stg_5_54_sva_2 <= 1'b0;
      reg_refresh_inner_loop_and_stg_5_43_sva_2 <= 1'b0;
      reg_refresh_inner_loop_and_stg_5_32_sva_2 <= 1'b0;
      reg_refresh_inner_loop_and_stg_5_21_sva_2 <= 1'b0;
      reg_refresh_inner_loop_and_stg_5_10_sva_2 <= 1'b0;
      lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_2_2 <= 1'b0;
      lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_2_1_0 <= 2'b00;
      reg_pixel_loop_asn_sft_lpi_1_dfm_st_2_cse <= 1'b0;
      pixel_loop_asn_sft_1_lpi_1_dfm_2 <= 1'b0;
      padding_loop1_acc_3_psp_sva_2_0 <= 1'b0;
      padding_loop1_nor_itm_2 <= 1'b0;
      padding_loop1_nor_1_itm_2 <= 1'b0;
      padding_loop1_nor_3_itm_2 <= 1'b0;
      padding_loop1_nor_6_itm_2 <= 1'b0;
      loop2_inner_loop_loop2_inner_loop_nor_itm_2 <= 1'b0;
      loop2_inner_loop_loop2_inner_loop_and_itm_2 <= 1'b0;
      loop2_inner_loop_loop2_inner_loop_and_2_itm_2 <= 1'b0;
      loop2_inner_loop_loop2_inner_loop_and_3_itm_1 <= 1'b0;
      loop2_inner_loop_loop2_inner_loop_and_4_itm_2 <= 1'b0;
      loop2_inner_loop_loop2_inner_loop_and_5_itm_2 <= 1'b0;
      loop2_inner_loop_loop2_inner_loop_and_6_itm_2 <= 1'b0;
      loop2_inner_loop_loop2_inner_loop_and_7_itm_1 <= 1'b0;
      loop2_inner_loop_loop2_inner_loop_and_8_itm_2 <= 1'b0;
      loop2_inner_loop_conc_24_itm_2_3_1 <= 3'b000;
      loop2_inner_loop_slc_13_svs_st_2 <= 1'b0;
      asn_sft_lpi_1_st_2 <= 1'b0;
      rawdns_process_for_or_tmp_2 <= 1'b0;
      rawdns_process_for_equal_tmp_2 <= 1'b0;
      rawdns_process_for_equal_tmp_1_2 <= 1'b0;
      rawdns_process_for_equal_tmp_2_2 <= 1'b0;
      rawdns_process_for_nor_tmp_2 <= 1'b0;
      reg_refresh_inner_loop_and_178_tmp_1 <= 1'b0;
      reg_refresh_inner_loop_and_156_tmp_1 <= 1'b0;
      reg_refresh_inner_loop_and_134_tmp_1 <= 1'b0;
      padding_loop2_and_203_itm_2 <= 1'b0;
      padding_loop2_equal_tmp_2 <= 1'b0;
      padding_loop2_equal_tmp_3_2 <= 1'b0;
      lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_2_1 <= 1'b0;
      lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_2_0 <= 1'b0;
      reg_rawdns_lines_rsc_0_0_i_oswt_cse <= 1'b0;
      reg_rawdns_lines_rsc_0_1_i_oswt_cse <= 1'b0;
      reg_rawdns_lines_rsc_0_2_i_oswt_cse <= 1'b0;
      reg_rawdns_lines_rsc_0_3_i_oswt_cse <= 1'b0;
      reg_rawdns_lines_rsc_0_4_i_oswt_cse <= 1'b0;
      reg_rawdns_lines_rsc_0_5_i_oswt_cse <= 1'b0;
      reg_rawdns_lines_rsc_0_6_i_oswt_cse <= 1'b0;
      reg_rawdns_lines_rsc_0_7_i_oswt_cse <= 1'b0;
      reg_rawdns_lines_rsc_0_8_i_oswt_cse <= 1'b0;
      reg_rawdns_lines_rsc_0_9_i_oswt_cse <= 1'b0;
      Cal_Eur_Distance_temp_block_1_2_11_0_lpi_1 <= 12'b000000000000;
      Cal_Eur_Distance_temp_block_0_1_11_0_lpi_1 <= 12'b000000000000;
      Cal_Eur_Distance_temp_block_2_0_11_0_lpi_1 <= 12'b000000000000;
      Cal_Eur_Distance_temp_block_0_2_11_0_lpi_1 <= 12'b000000000000;
      Cal_Eur_Distance_temp_block_2_1_11_0_lpi_1 <= 12'b000000000000;
      Cal_Eur_Distance_temp_block_1_0_11_0_lpi_1 <= 12'b000000000000;
      Cal_Eur_Distance_temp_block_2_2_11_0_lpi_1 <= 12'b000000000000;
      Cal_Eur_Distance_temp_block_0_0_11_0_lpi_1 <= 12'b000000000000;
      Cal_Eur_Distance_temp_block_1_1_11_0_lpi_1 <= 12'b000000000000;
      pixel_loop_if_1_asn_sft_lpi_1 <= 1'b0;
      Cal_Eur_Distance_for_for_xor_psp <= 1'b0;
      Cal_Eur_Distance_l_1_1_0_lpi_1_1 <= 1'b0;
      Cal_Eur_Distance_l_1_0_lpi_1 <= 2'b00;
      lfst_exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1 <= 1'b0;
      exitL_exitL_exit_padding_loop2_sva <= 1'b1;
      i_1_lpi_1 <= 13'b0000000000000;
      Cal_Eur_Distance_for_1_for_mul_3_cse_sva_1_11_0 <= 12'b000000000000;
      pixel_loop_if_1_for_conc_21_itm_1_3_1 <= 3'b000;
      rawdns_process_max_weight_lpi_1_dfm_1 <= 8'b00000000;
      Cal_Eur_Distance_for_for_acc_4_decb_sva_1 <= 4'b0000;
      Cal_Eur_Distance_for_for_acc_itm_1 <= 6'b000000;
      Cal_Eur_Distance_for_for_slc_Cal_Eur_Distance_for_for_acc_7_sdt_0_itm_1 <=
          1'b0;
      operator_42_false_slc_operator_30_false_acc_psp_14_0_itm_1 <= 15'b000000000000000;
      Cal_weight_else_if_else_if_slc_Cal_weight_else_if_else_if_acc_29_svs_st_1 <=
          1'b0;
      Cal_weight_else_if_if_slc_operator_26_false_acc_29_svs_st_1 <= 1'b0;
      operator_30_false_1_slc_Cal_weight_diff_1_1_0_1_itm_1 <= 2'b00;
      Cal_weight_else_else_else_if_slc_operator_26_false_2_acc_30_svs_st_1 <= 1'b0;
      Cal_weight_else_else_slc_30_svs_st_1 <= 1'b0;
      Cal_weight_else_slc_30_svs_st_1 <= 1'b0;
      rawdns_process_total_weight_1_lpi_1_dfm_1 <= 13'b0000000000000;
      Cal_weight_else_else_else_if_slc_operator_26_false_2_acc_30_svs_1 <= 1'b0;
      Cal_weight_else_else_slc_30_svs_1 <= 1'b0;
      Cal_weight_else_slc_30_svs_1 <= 1'b0;
      Cal_weight_else_if_if_slc_operator_26_false_acc_29_svs_1 <= 1'b0;
      Cal_weight_Cal_weight_Cal_weight_or_itm_1 <= 1'b0;
      exit_rawdns_process_for_lpi_1_dfm_2_st_1 <= 1'b0;
      exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1_1 <= 1'b0;
      Cal_Eur_Distance_for_1_equal_tmp_1 <= 1'b0;
      rawdns_process_for_for_asn_sft_lpi_1_dfm_1 <= 1'b0;
      lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_1_2 <= 1'b0;
      lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_1_1_0 <= 2'b00;
      rawdns_process_for_equal_tmp_2_1 <= 1'b0;
      pixel_loop_asn_sft_lpi_1_dfm_1 <= 1'b0;
      loop2_inner_loop_conc_24_itm_1_3_1 <= 3'b000;
      pixel_loop_mux_716_itm_1 <= 1'b0;
      padding_loop2_equal_tmp_1 <= 1'b0;
      padding_loop2_equal_tmp_3_1 <= 1'b0;
      Cal_Eur_Distance_for_1_or_tmp_1_1 <= 1'b0;
      Cal_Eur_Distance_for_1_for_and_20_ssc_sva_1 <= 1'b0;
      Cal_Eur_Distance_for_1_equal_tmp_1_1 <= 1'b0;
      Cal_Eur_Distance_for_1_for_and_18_ssc_sva_1 <= 1'b0;
      Cal_Eur_Distance_for_1_for_and_16_ssc_sva_1 <= 1'b0;
      Cal_Eur_Distance_for_1_for_and_14_ssc_sva_1 <= 1'b0;
      Cal_Eur_Distance_for_1_for_and_12_ssc_sva_1 <= 1'b0;
      Cal_Eur_Distance_for_1_for_and_13_ssc_sva_1 <= 1'b0;
      Cal_Eur_Distance_for_1_for_and_15_ssc_sva_1 <= 1'b0;
      Cal_Eur_Distance_for_1_for_and_17_ssc_sva_1 <= 1'b0;
      Cal_Eur_Distance_for_1_for_and_19_ssc_sva_1 <= 1'b0;
      pixel_loop_asn_sft_1_lpi_1_dfm_1 <= 1'b0;
      lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_1_1 <= 1'b0;
      lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_1_0 <= 1'b0;
      reg_src_rsci_oswt_cse <= 1'b0;
      lfst_exitL_exit_rawdns_process_for_lpi_1_1_0 <= 2'b00;
      sfi_rawdns_reg_eb_lpi_1 <= 1'b0;
      lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_1 <= 1'b0;
      lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0 <= 1'b0;
      count_lpi_1 <= 13'b0000000000000;
      n_lpi_1 <= 26'b00000000000000000000000000;
      main_stage_0_2 <= 1'b0;
      main_stage_0_3 <= 1'b0;
      pixel_loop_if_1_for_nor_6_itm_1 <= 1'b0;
      pixel_loop_if_1_for_nor_3_itm_1 <= 1'b0;
      pixel_loop_if_1_for_nor_itm_1 <= 1'b0;
      reg_refresh_inner_loop_and_stg_5_54_sva_1_1 <= 1'b0;
      reg_refresh_inner_loop_and_stg_5_45_sva_1_1 <= 1'b0;
      reg_refresh_inner_loop_and_stg_5_43_sva_1_1 <= 1'b0;
      reg_refresh_inner_loop_and_stg_5_34_sva_1_1 <= 1'b0;
      reg_refresh_inner_loop_and_stg_5_32_sva_1_1 <= 1'b0;
      reg_refresh_inner_loop_and_stg_5_21_sva_1_1 <= 1'b0;
      pixel_loop_if_1_for_pixel_loop_if_1_for_conc_decb_3_1_sva_1 <= 3'b000;
      rawdns_process_for_or_tmp_1_1 <= 1'b0;
      rawdns_process_for_nor_tmp_1_1 <= 1'b0;
      rawdns_process_for_equal_tmp_1 <= 1'b0;
      rawdns_process_for_equal_tmp_1_1 <= 1'b0;
      padding_loop2_and_203_itm_1 <= 1'b0;
      reg_refresh_inner_loop_and_stg_5_10_sva_1_1 <= 1'b0;
      rawdns_process_total_weight_1_lpi_1 <= 13'b0000000000000;
      rawdns_process_max_weight_lpi_1 <= 8'b00000000;
      rawdns_process_total_value_1_lpi_1_dfm_1 <= 25'b0000000000000000000000000;
      exit_rawdns_process_for_lpi_1_dfm_2_1 <= 1'b0;
      reg_refresh_inner_loop_and_stg_5_23_sva_1 <= 1'b0;
      reg_refresh_inner_loop_and_stg_5_12_sva_1 <= 1'b0;
      reg_refresh_inner_loop_and_stg_5_1_sva_1 <= 1'b0;
      loop2_inner_loop_nor_1_itm_1 <= 1'b0;
      padding_loop2_and_262_itm_1 <= 1'b0;
      padding_loop2_and_261_itm_1 <= 1'b0;
      padding_loop2_and_260_itm_1 <= 1'b0;
      padding_loop2_and_259_itm_1 <= 1'b0;
      padding_loop2_and_258_itm_1 <= 1'b0;
      padding_loop2_and_257_itm_1 <= 1'b0;
      padding_loop2_and_256_itm_1 <= 1'b0;
      padding_loop2_and_255_itm_1 <= 1'b0;
      padding_loop2_and_254_itm_1 <= 1'b0;
      padding_loop2_and_253_itm_1 <= 1'b0;
      padding_loop2_and_251_itm_1 <= 1'b0;
      padding_loop2_and_250_itm_1 <= 1'b0;
      padding_loop2_and_249_itm_1 <= 1'b0;
      padding_loop2_and_248_itm_1 <= 1'b0;
      padding_loop2_and_247_itm_1 <= 1'b0;
      padding_loop2_and_246_itm_1 <= 1'b0;
      padding_loop2_and_245_itm_1 <= 1'b0;
      padding_loop2_and_244_itm_1 <= 1'b0;
      padding_loop2_and_243_itm_1 <= 1'b0;
      padding_loop2_and_242_itm_1 <= 1'b0;
      padding_loop2_and_240_itm_1 <= 1'b0;
      padding_loop2_and_239_itm_1 <= 1'b0;
      padding_loop2_and_238_itm_1 <= 1'b0;
      padding_loop2_and_237_itm_1 <= 1'b0;
      padding_loop2_and_236_itm_1 <= 1'b0;
      padding_loop2_and_235_itm_1 <= 1'b0;
      padding_loop2_and_234_itm_1 <= 1'b0;
      padding_loop2_and_233_itm_1 <= 1'b0;
      padding_loop2_and_232_itm_1 <= 1'b0;
      padding_loop2_and_231_itm_1 <= 1'b0;
      padding_loop2_and_229_itm_1 <= 1'b0;
      padding_loop2_and_228_itm_1 <= 1'b0;
      padding_loop2_and_227_itm_1 <= 1'b0;
      padding_loop2_and_226_itm_1 <= 1'b0;
      padding_loop2_and_225_itm_1 <= 1'b0;
      padding_loop2_and_224_itm_1 <= 1'b0;
      padding_loop2_and_223_itm_1 <= 1'b0;
      padding_loop2_and_222_itm_1 <= 1'b0;
      padding_loop2_and_221_itm_1 <= 1'b0;
      padding_loop2_and_220_itm_1 <= 1'b0;
      padding_loop2_and_218_itm_1 <= 1'b0;
      padding_loop2_and_217_itm_1 <= 1'b0;
      padding_loop2_and_216_itm_1 <= 1'b0;
      padding_loop2_and_215_itm_1 <= 1'b0;
      padding_loop2_and_214_itm_1 <= 1'b0;
      padding_loop2_and_213_itm_1 <= 1'b0;
      padding_loop2_and_212_itm_1 <= 1'b0;
      padding_loop2_and_211_itm_1 <= 1'b0;
      padding_loop2_and_210_itm_1 <= 1'b0;
      padding_loop2_and_209_itm_1 <= 1'b0;
      padding_loop2_and_207_itm_1 <= 1'b0;
      padding_loop2_and_206_itm_1 <= 1'b0;
      padding_loop2_and_205_itm_1 <= 1'b0;
      padding_loop2_and_204_itm_1 <= 1'b0;
      padding_loop2_and_202_itm_1 <= 1'b0;
      padding_loop2_and_201_itm_1 <= 1'b0;
      padding_loop2_and_200_itm_1 <= 1'b0;
      padding_loop2_and_199_itm_1 <= 1'b0;
      padding_loop2_and_198_itm_1 <= 1'b0;
      padding_loop2_and_196_itm_1 <= 1'b0;
      padding_loop2_and_195_itm_1 <= 1'b0;
      padding_loop2_and_194_itm_1 <= 1'b0;
      padding_loop2_and_193_itm_1 <= 1'b0;
      padding_loop2_and_192_itm_1 <= 1'b0;
      padding_loop2_and_191_itm_1 <= 1'b0;
      padding_loop2_and_190_itm_1 <= 1'b0;
      padding_loop2_and_189_itm_1 <= 1'b0;
      padding_loop2_and_188_itm_1 <= 1'b0;
      padding_loop2_and_187_itm_1 <= 1'b0;
      padding_loop2_and_185_itm_1 <= 1'b0;
      padding_loop2_and_184_itm_1 <= 1'b0;
      padding_loop2_and_183_itm_1 <= 1'b0;
      padding_loop2_and_182_itm_1 <= 1'b0;
      padding_loop2_and_181_itm_1 <= 1'b0;
      padding_loop2_and_180_itm_1 <= 1'b0;
      padding_loop2_and_179_itm_1 <= 1'b0;
      padding_loop2_and_178_itm_1 <= 1'b0;
      padding_loop2_and_177_itm_1 <= 1'b0;
      padding_loop2_and_176_itm_1 <= 1'b0;
      padding_loop2_and_174_itm_1 <= 1'b0;
      padding_loop2_and_173_itm_1 <= 1'b0;
      padding_loop2_and_172_itm_1 <= 1'b0;
      padding_loop2_and_171_itm_1 <= 1'b0;
      padding_loop2_and_170_itm_1 <= 1'b0;
      padding_loop2_and_169_itm_1 <= 1'b0;
      padding_loop2_and_168_itm_1 <= 1'b0;
      padding_loop2_and_167_itm_1 <= 1'b0;
      padding_loop2_and_166_itm_1 <= 1'b0;
      padding_loop2_and_165_itm_1 <= 1'b0;
      padding_loop2_and_163_itm_1 <= 1'b0;
      padding_loop2_and_162_itm_1 <= 1'b0;
      padding_loop2_and_161_itm_1 <= 1'b0;
      padding_loop2_and_160_itm_1 <= 1'b0;
      padding_loop2_and_159_itm_1 <= 1'b0;
      padding_loop2_and_158_itm_1 <= 1'b0;
      padding_loop2_and_157_itm_1 <= 1'b0;
      padding_loop2_and_156_itm_1 <= 1'b0;
      padding_loop2_and_155_itm_1 <= 1'b0;
      padding_loop2_and_154_itm_1 <= 1'b0;
      padding_loop2_and_152_itm_1 <= 1'b0;
      padding_loop2_and_151_itm_1 <= 1'b0;
      padding_loop2_and_150_itm_1 <= 1'b0;
      padding_loop2_and_149_itm_1 <= 1'b0;
      padding_loop2_and_148_itm_1 <= 1'b0;
      padding_loop2_and_147_itm_1 <= 1'b0;
      padding_loop2_and_146_itm_1 <= 1'b0;
      padding_loop2_and_145_itm_1 <= 1'b0;
      padding_loop2_and_144_itm_1 <= 1'b0;
      padding_loop2_and_143_itm_1 <= 1'b0;
      k_2_2_0_lpi_1 <= 3'b000;
      pixel_loop_if_1_if_1_pixel_loop_if_1_if_1_or_itm_1 <= 1'b0;
      exitL_exit_rawdns_process_for_lpi_1_dfm_st_1 <= 1'b0;
      rawdns_process_total_value_1_lpi_1 <= 25'b0000000000000000000000000;
      reg_refresh_inner_loop_and_stg_5_56_sva_1_1 <= 1'b0;
      operator_4_false_2_slc_operator_4_false_2_acc_3_svs_1 <= 1'b0;
    end
    else if ( core_wen ) begin
      rawdns_block_8_10_lpi_1 <= rawdns_block_8_10_lpi_1_mx0;
      rawdns_block_0_10_lpi_1 <= rawdns_block_0_10_lpi_1_mx0;
      rawdns_block_4_10_lpi_1 <= rawdns_block_4_10_lpi_1_mx0;
      rawdns_block_7_10_lpi_1 <= rawdns_block_7_10_lpi_1_mx0;
      rawdns_block_3_10_lpi_1 <= rawdns_block_3_10_lpi_1_mx0;
      rawdns_block_6_10_lpi_1 <= rawdns_block_6_10_lpi_1_mx0;
      rawdns_block_2_10_lpi_1 <= rawdns_block_2_10_lpi_1_mx0;
      rawdns_block_9_10_lpi_1 <= rawdns_block_9_10_lpi_1_mx0;
      rawdns_block_1_10_lpi_1 <= rawdns_block_1_10_lpi_1_mx0;
      rawdns_block_5_10_lpi_1 <= rawdns_block_5_10_lpi_1_mx0;
      reg_dst_rsci_oswt_cse <= ~(mux_197_nl | (~ main_stage_0_3));
      rawdns_block_5_5_lpi_1 <= rawdns_block_5_5_lpi_1_mx0;
      reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1
          <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
      pixel_loop_if_1_for_pixel_loop_if_1_for_conc_decb_3_1_sva_2 <= pixel_loop_if_1_for_pixel_loop_if_1_for_conc_decb_3_1_sva_1;
      pixel_loop_if_1_for_mul_sdt_3_0_sva_2_0 <= Cal_weight_else_if_if_slc_operator_26_false_acc_29_svs_1;
      rawdns_process_acc_2_itm_1 <= nl_rawdns_process_acc_2_itm_1[24:0];
      rawdns_process_total_weight_sva_1 <= MUX_v_13_2_2(({1'b0 , src_data_lpi_1_dfm_1_mx0}),
          rawdns_process_acc_tmp, pixel_loop_asn_sft_lpi_1_dfm_1);
      exit_rawdns_process_for_lpi_1_dfm_2_st_2 <= MUX_s_1_2_2(exit_rawdns_process_for_lpi_1_dfm_2_st_1,
          Cal_weight_Cal_weight_Cal_weight_or_itm_1, or_dcpl_51);
      exitL_exit_rawdns_process_for_lpi_1_dfm_st_2 <= MUX_s_1_2_2(exitL_exit_rawdns_process_for_lpi_1_dfm_st_1,
          Cal_weight_else_else_else_if_slc_operator_26_false_2_acc_30_svs_1, or_dcpl_51);
      reg_refresh_inner_loop_and_stg_5_45_sva_2 <= reg_refresh_inner_loop_and_stg_5_45_sva_1_1;
      reg_refresh_inner_loop_acc_decb_sva_2_6 <= loop2_inner_loop_nor_1_itm_1;
      reg_refresh_inner_loop_and_stg_5_34_sva_2 <= reg_refresh_inner_loop_and_stg_5_34_sva_1_1;
      reg_refresh_inner_loop_and_stg_5_54_sva_2 <= reg_refresh_inner_loop_and_stg_5_54_sva_1_1;
      reg_refresh_inner_loop_and_stg_5_43_sva_2 <= reg_refresh_inner_loop_and_stg_5_43_sva_1_1;
      reg_refresh_inner_loop_and_stg_5_32_sva_2 <= reg_refresh_inner_loop_and_stg_5_32_sva_1_1;
      reg_refresh_inner_loop_and_stg_5_21_sva_2 <= reg_refresh_inner_loop_and_stg_5_21_sva_1_1;
      reg_refresh_inner_loop_and_stg_5_10_sva_2 <= reg_refresh_inner_loop_and_stg_5_10_sva_1_1;
      lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_2_2 <= MUX1HOT_s_1_3_2(lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_1_2,
          loop2_inner_loop_loop2_inner_loop_and_1_nl, Cal_weight_else_else_else_if_slc_operator_26_false_2_acc_30_svs_st_1,
          {(~ lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_1_1) , and_dcpl_177 , and_dcpl_178});
      lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_2_1_0 <= lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_1_1_0;
      reg_pixel_loop_asn_sft_lpi_1_dfm_st_2_cse <= pixel_loop_asn_sft_lpi_1_dfm_1;
      pixel_loop_asn_sft_1_lpi_1_dfm_2 <= pixel_loop_asn_sft_1_lpi_1_dfm_1;
      padding_loop1_acc_3_psp_sva_2_0 <= Cal_Eur_Distance_for_for_slc_Cal_Eur_Distance_for_for_acc_7_sdt_0_itm_1;
      padding_loop1_nor_itm_2 <= MUX_s_1_2_2(pixel_loop_if_1_for_nor_itm_1, loop2_inner_loop_nor_1_itm_1,
          lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_1_1);
      padding_loop1_nor_1_itm_2 <= MUX1HOT_s_1_3_2(Cal_weight_else_if_else_if_slc_Cal_weight_else_if_else_if_acc_29_svs_st_1,
          Cal_weight_else_if_if_slc_operator_26_false_acc_29_svs_st_1, Cal_Eur_Distance_for_for_slc_Cal_Eur_Distance_for_for_acc_7_sdt_0_itm_1,
          {and_dcpl_178 , (~ lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_1_1) , and_dcpl_177});
      padding_loop1_nor_3_itm_2 <= MUX_s_1_2_2(pixel_loop_if_1_for_nor_3_itm_1, Cal_weight_else_if_if_slc_operator_26_false_acc_29_svs_1,
          lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_1_1);
      padding_loop1_nor_6_itm_2 <= MUX_s_1_2_2(pixel_loop_if_1_for_nor_6_itm_1, Cal_weight_else_if_if_slc_operator_26_false_acc_29_svs_st_1,
          lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_1_1);
      loop2_inner_loop_loop2_inner_loop_nor_itm_2 <= exit_rawdns_process_for_lpi_1_dfm_2_1;
      loop2_inner_loop_loop2_inner_loop_and_itm_2 <= exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1_1;
      loop2_inner_loop_loop2_inner_loop_and_2_itm_2 <= MUX1HOT_s_1_3_2(Cal_weight_else_else_else_if_slc_operator_26_false_2_acc_30_svs_st_1,
          Cal_weight_else_else_slc_30_svs_1, pixel_loop_if_1_and_16_nl, {mux_198_nl
          , and_dcpl_178 , and_dcpl_179});
      loop2_inner_loop_loop2_inner_loop_and_3_itm_1 <= MUX1HOT_s_1_4_2(loop2_inner_loop_loop2_inner_loop_and_3_nl,
          Cal_weight_else_else_slc_30_svs_st_1, pixel_loop_if_1_asn_sft_lpi_1, Cal_weight_else_else_slc_30_svs_1,
          {and_dcpl_177 , and_dcpl_178 , and_dcpl_179 , and_dcpl_180});
      loop2_inner_loop_loop2_inner_loop_and_4_itm_2 <= MUX1HOT_s_1_4_2(Cal_weight_else_else_slc_30_svs_1,
          Cal_weight_else_slc_30_svs_1, Cal_weight_else_else_slc_30_svs_st_1, pixel_loop_if_1_if_1_pixel_loop_if_1_if_1_or_itm_1,
          {and_dcpl_177 , and_dcpl_178 , and_dcpl_180 , and_dcpl_179});
      loop2_inner_loop_loop2_inner_loop_and_5_itm_2 <= MUX1HOT_s_1_4_2(Cal_weight_else_else_slc_30_svs_st_1,
          Cal_weight_else_slc_30_svs_st_1, Cal_weight_else_slc_30_svs_1, pixel_loop_if_1_nand_nl,
          {and_dcpl_177 , and_dcpl_178 , and_dcpl_180 , and_dcpl_179});
      loop2_inner_loop_loop2_inner_loop_and_6_itm_2 <= MUX1HOT_s_1_3_2(Cal_weight_else_slc_30_svs_1,
          exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1_1, rawdns_process_for_and_160_nl,
          {and_dcpl_177 , and_dcpl_178 , (~ lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_1_1)});
      loop2_inner_loop_loop2_inner_loop_and_7_itm_1 <= (loop2_inner_loop_conc_24_itm_1_3_1[2])
          & Cal_weight_else_if_if_slc_operator_26_false_acc_29_svs_1;
      loop2_inner_loop_loop2_inner_loop_and_8_itm_2 <= Cal_weight_else_slc_30_svs_st_1;
      loop2_inner_loop_conc_24_itm_2_3_1 <= loop2_inner_loop_conc_24_itm_1_3_1;
      loop2_inner_loop_slc_13_svs_st_2 <= exit_rawdns_process_for_lpi_1_dfm_2_st_1;
      asn_sft_lpi_1_st_2 <= MUX_s_1_2_2(Cal_Eur_Distance_for_for_slc_Cal_Eur_Distance_for_for_acc_7_sdt_0_itm_1,
          asn_sft_lpi_1, lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_1_1);
      rawdns_process_for_or_tmp_2 <= rawdns_process_for_or_tmp_1_1;
      rawdns_process_for_equal_tmp_2 <= rawdns_process_for_equal_tmp_1;
      rawdns_process_for_equal_tmp_1_2 <= rawdns_process_for_equal_tmp_1_1;
      rawdns_process_for_equal_tmp_2_2 <= rawdns_process_for_equal_tmp_2_1;
      rawdns_process_for_nor_tmp_2 <= rawdns_process_for_nor_tmp_1_1;
      reg_refresh_inner_loop_and_178_tmp_1 <= reg_refresh_inner_loop_and_stg_5_23_sva_1
          & loop2_inner_loop_nor_1_itm_1;
      reg_refresh_inner_loop_and_156_tmp_1 <= reg_refresh_inner_loop_and_stg_5_12_sva_1
          & loop2_inner_loop_nor_1_itm_1;
      reg_refresh_inner_loop_and_134_tmp_1 <= reg_refresh_inner_loop_and_stg_5_1_sva_1
          & loop2_inner_loop_nor_1_itm_1;
      padding_loop2_and_203_itm_2 <= padding_loop2_and_203_itm_1;
      padding_loop2_equal_tmp_2 <= padding_loop2_equal_tmp_1;
      padding_loop2_equal_tmp_3_2 <= padding_loop2_equal_tmp_3_1;
      lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_2_1 <= lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_1_1;
      lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_2_0 <= lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_1_0;
      reg_rawdns_lines_rsc_0_0_i_oswt_cse <= pixel_loop_if_1_for_pixel_loop_if_1_for_and_31_rmff;
      reg_rawdns_lines_rsc_0_1_i_oswt_cse <= pixel_loop_if_1_for_pixel_loop_if_1_for_and_30_rmff;
      reg_rawdns_lines_rsc_0_2_i_oswt_cse <= pixel_loop_if_1_for_pixel_loop_if_1_for_and_29_rmff;
      reg_rawdns_lines_rsc_0_3_i_oswt_cse <= pixel_loop_if_1_for_pixel_loop_if_1_for_and_28_rmff;
      reg_rawdns_lines_rsc_0_4_i_oswt_cse <= pixel_loop_if_1_for_pixel_loop_if_1_for_and_27_rmff;
      reg_rawdns_lines_rsc_0_5_i_oswt_cse <= pixel_loop_if_1_for_pixel_loop_if_1_for_and_26_rmff;
      reg_rawdns_lines_rsc_0_6_i_oswt_cse <= pixel_loop_if_1_for_pixel_loop_if_1_for_and_25_rmff;
      reg_rawdns_lines_rsc_0_7_i_oswt_cse <= pixel_loop_if_1_for_pixel_loop_if_1_for_and_24_rmff;
      reg_rawdns_lines_rsc_0_8_i_oswt_cse <= pixel_loop_if_1_for_pixel_loop_if_1_for_and_23_rmff;
      reg_rawdns_lines_rsc_0_9_i_oswt_cse <= pixel_loop_if_1_for_pixel_loop_if_1_for_and_22_rmff;
      Cal_Eur_Distance_temp_block_1_2_11_0_lpi_1 <= Cal_Eur_Distance_temp_block_1_2_11_0_lpi_1_mx0;
      Cal_Eur_Distance_temp_block_0_1_11_0_lpi_1 <= Cal_Eur_Distance_temp_block_0_1_11_0_lpi_1_mx0;
      Cal_Eur_Distance_temp_block_2_0_11_0_lpi_1 <= Cal_Eur_Distance_temp_block_2_0_11_0_lpi_1_mx0;
      Cal_Eur_Distance_temp_block_0_2_11_0_lpi_1 <= Cal_Eur_Distance_temp_block_0_2_11_0_lpi_1_mx0;
      Cal_Eur_Distance_temp_block_2_1_11_0_lpi_1 <= Cal_Eur_Distance_temp_block_2_1_11_0_lpi_1_mx0;
      Cal_Eur_Distance_temp_block_1_0_11_0_lpi_1 <= Cal_Eur_Distance_temp_block_1_0_11_0_lpi_1_mx0;
      Cal_Eur_Distance_temp_block_2_2_11_0_lpi_1 <= Cal_Eur_Distance_temp_block_2_2_11_0_lpi_1_mx0;
      Cal_Eur_Distance_temp_block_0_0_11_0_lpi_1 <= Cal_Eur_Distance_temp_block_0_0_11_0_lpi_1_mx0;
      Cal_Eur_Distance_temp_block_1_1_11_0_lpi_1 <= Cal_Eur_Distance_temp_block_1_1_11_0_lpi_1_mx0;
      pixel_loop_if_1_asn_sft_lpi_1 <= pixel_loop_if_1_asn_sft_lpi_1_mx0;
      Cal_Eur_Distance_for_for_xor_psp <= Cal_Eur_Distance_for_for_xor_psp_mx0;
      Cal_Eur_Distance_l_1_1_0_lpi_1_1 <= padding_loop2_mux_130_nl | Cal_Eur_Distance_for_1_and_4_ssc_1;
      Cal_Eur_Distance_l_1_0_lpi_1 <= MUX_v_2_2_2(2'b00, mux_275_nl, nor_228_nl);
      lfst_exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1 <= lfst_exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1_mx0;
      exitL_exitL_exit_padding_loop2_sva <= ~(lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_1_1
          | lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0_1);
      i_1_lpi_1 <= MUX_v_13_2_2(z_out_10, i_1_lpi_1_dfm_3, nand_84_nl);
      Cal_Eur_Distance_for_1_for_mul_3_cse_sva_1_11_0 <= Cal_Eur_Distance_for_1_for_mul_3_cse_sva_1[11:0];
      pixel_loop_if_1_for_conc_21_itm_1_3_1 <= pixel_loop_if_1_for_acc_11_psp_1;
      rawdns_process_max_weight_lpi_1_dfm_1 <= MUX_v_8_2_2(8'b00000000, rawdns_process_max_weight_lpi_1_mx0,
          pixel_loop_if_1_aelse_not_13_nl);
      Cal_Eur_Distance_for_for_acc_4_decb_sva_1 <= z_out_1;
      Cal_Eur_Distance_for_for_acc_itm_1 <= z_out_5[5:0];
      Cal_Eur_Distance_for_for_slc_Cal_Eur_Distance_for_for_acc_7_sdt_0_itm_1 <=
          MUX1HOT_s_1_5_2((z_out_19[0]), Cal_weight_else_if_else_if_acc_itm_28_1,
          (j_lpi_1[0]), (i_lpi_1[0]), (padding_loop1_acc_3_psp_sva_1[0]), {and_228_nl
          , and_235_nl , and_dcpl_202 , and_dcpl_204 , and_dcpl_205});
      operator_42_false_slc_operator_30_false_acc_psp_14_0_itm_1 <= MUX1HOT_v_15_4_2((operator_30_false_acc_psp_sva_1[14:0]),
          ({2'b00 , (operator_30_false_1_acc_psp_sva_1[12:0])}), ({3'b000 , loop2_inner_loop_loop2_inner_loop_mux_nl}),
          ({8'b00000000 , z_out_11}), {and_245_nl , and_248_nl , asn_operator_42_false_slc_operator_30_false_acc_psp_14_0_itm_1_nor_nl
          , or_595_nl});
      Cal_weight_else_if_else_if_slc_Cal_weight_else_if_else_if_acc_29_svs_st_1 <=
          MUX1HOT_s_1_5_2(Cal_weight_else_if_else_if_acc_itm_28_1, loop2_inner_loop_nor_3_nl,
          padding_loop1_nor_1_nl, (z_out_6[0]), (j_lpi_1[0]), {and_dcpl_193 , and_dcpl_204
          , and_dcpl_205 , and_dcpl_218 , and_dcpl_219});
      Cal_weight_else_if_if_slc_operator_26_false_acc_29_svs_st_1 <= MUX1HOT_s_1_3_2(operator_26_false_acc_itm_29_1,
          padding_loop1_nor_6_nl, pixel_loop_if_1_for_nor_1_nl, {and_dcpl_193 , (~
          lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0) , and_dcpl_202});
      operator_30_false_1_slc_Cal_weight_diff_1_1_0_1_itm_1 <= MUX_v_2_2_2((rawdns_max_return_lpi_1_dfm_1[1:0]),
          (operator_4_true_acc_sdt_1[1:0]), or_dcpl_134);
      Cal_weight_else_else_else_if_slc_operator_26_false_2_acc_30_svs_st_1 <= MUX1HOT_s_1_4_2(operator_26_false_2_acc_itm_29_1,
          loop2_inner_loop_loop2_inner_loop_and_2_nl, padding_loop1_padding_loop1_and_2_nl,
          pixel_loop_if_1_for_pixel_loop_if_1_for_and_5_nl, {and_dcpl_193 , and_dcpl_204
          , and_dcpl_205 , and_dcpl_202});
      Cal_weight_else_else_slc_30_svs_st_1 <= MUX1HOT_s_1_4_2(Cal_weight_else_else_if_acc_itm_30_1,
          loop2_inner_loop_loop2_inner_loop_and_5_nl, padding_loop1_padding_loop1_and_5_nl,
          pixel_loop_if_1_for_pixel_loop_if_1_for_and_8_nl, {and_dcpl_193 , and_dcpl_204
          , and_dcpl_205 , and_dcpl_202});
      Cal_weight_else_slc_30_svs_st_1 <= MUX1HOT_s_1_3_2(Cal_weight_else_if_acc_itm_30_1,
          loop2_inner_loop_loop2_inner_loop_and_8_nl, padding_loop1_padding_loop1_and_8_nl,
          {lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0 , and_dcpl_204 , and_dcpl_205});
      rawdns_process_total_weight_1_lpi_1_dfm_1 <= MUX_v_13_2_2(13'b0000000000000,
          rawdns_process_total_weight_1_lpi_1_mx0, pixel_loop_if_1_aelse_not_12_nl);
      Cal_weight_else_else_else_if_slc_operator_26_false_2_acc_30_svs_1 <= MUX1HOT_s_1_3_2(operator_26_false_2_acc_itm_29_1,
          lfst_exit_padding_loop2_lpi_1_dfm_1_mx0w1, pixel_loop_if_1_for_pixel_loop_if_1_for_and_4_nl,
          {and_dcpl_193 , (~ lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0) , and_dcpl_202});
      Cal_weight_else_else_slc_30_svs_1 <= MUX1HOT_s_1_4_2(Cal_weight_else_else_if_acc_itm_30_1,
          loop2_inner_loop_loop2_inner_loop_and_4_nl, padding_loop1_padding_loop1_and_4_nl,
          pixel_loop_if_1_for_pixel_loop_if_1_for_and_6_nl, {and_dcpl_193 , and_dcpl_204
          , and_dcpl_205 , and_dcpl_202});
      Cal_weight_else_slc_30_svs_1 <= MUX1HOT_s_1_5_2(Cal_weight_else_if_acc_itm_30_1,
          Cal_weight_else_slc_30_svs, loop2_inner_loop_loop2_inner_loop_and_6_nl,
          padding_loop1_padding_loop1_and_6_nl, pixel_loop_if_1_for_pixel_loop_if_1_for_nor_1_nl,
          {and_254_nl , and_264_nl , and_dcpl_204 , and_dcpl_205 , and_dcpl_202});
      Cal_weight_else_if_if_slc_operator_26_false_acc_29_svs_1 <= MUX1HOT_s_1_4_2(operator_26_false_acc_itm_29_1,
          loop2_inner_loop_nor_6_nl, padding_loop1_nor_3_nl, (pixel_loop_if_1_for_pixel_loop_if_1_for_acc_tmp[0]),
          {and_dcpl_193 , and_dcpl_204 , and_dcpl_205 , and_dcpl_202});
      Cal_weight_Cal_weight_Cal_weight_or_itm_1 <= MUX1HOT_s_1_3_2(Cal_weight_Cal_weight_Cal_weight_or_nl,
          lfst_exit_padding_loop2_lpi_1_dfm_0_mx0w1, pixel_loop_if_1_for_pixel_loop_if_1_for_and_2_nl,
          {and_dcpl_193 , (~ lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0) , and_dcpl_202});
      exit_rawdns_process_for_lpi_1_dfm_2_st_1 <= MUX_s_1_2_2(loop2_inner_loop_acc_12_itm_13_1,
          exit_rawdns_process_for_lpi_1_dfm_3, lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0);
      exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1_1 <= MUX1HOT_s_1_4_2(exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1_mx0w0,
          exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1, loop2_inner_loop_loop2_inner_loop_and_nl,
          padding_loop1_padding_loop1_nor_nl, {and_270_nl , and_271_nl , and_dcpl_204
          , and_dcpl_205});
      Cal_Eur_Distance_for_1_equal_tmp_1 <= Cal_Eur_Distance_for_1_equal_tmp_3;
      rawdns_process_for_for_asn_sft_lpi_1_dfm_1 <= rawdns_process_for_for_asn_sft_lpi_1_dfm_mx0;
      lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_1_2 <= lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_2_1;
      lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_1_1_0 <= lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_1_0_1;
      rawdns_process_for_equal_tmp_2_1 <= rawdns_process_for_equal_tmp_3;
      pixel_loop_asn_sft_lpi_1_dfm_1 <= pixel_loop_asn_sft_lpi_1_dfm_1_mx0;
      loop2_inner_loop_conc_24_itm_1_3_1 <= MUX1HOT_v_3_4_2(loop2_inner_loop_acc_11_psp_mx0w0,
          (z_out_18[2:0]), pixel_loop_if_1_for_acc_11_psp_1, pixel_loop_if_1_for_1_acc_11_nl,
          {and_dcpl_204 , and_dcpl_193 , loop2_inner_loop_or_5_nl , and_dcpl_218});
      pixel_loop_mux_716_itm_1 <= MUX_s_1_2_2(pixel_loop_if_1_asn_sft_lpi_1_mx0,
          pixel_loop_mux_747_nl, mux_tmp_230);
      padding_loop2_equal_tmp_1 <= padding_loop2_equal_tmp_4;
      padding_loop2_equal_tmp_3_1 <= padding_loop2_equal_tmp_5;
      Cal_Eur_Distance_for_1_or_tmp_1_1 <= Cal_Eur_Distance_for_1_or_tmp_1;
      Cal_Eur_Distance_for_1_for_and_20_ssc_sva_1 <= Cal_Eur_Distance_for_1_for_and_20_ssc_sva_1_1;
      Cal_Eur_Distance_for_1_equal_tmp_1_1 <= Cal_Eur_Distance_for_1_equal_tmp_2;
      Cal_Eur_Distance_for_1_for_and_18_ssc_sva_1 <= Cal_Eur_Distance_for_1_for_and_18_ssc_sva_1_1;
      Cal_Eur_Distance_for_1_for_and_16_ssc_sva_1 <= Cal_Eur_Distance_for_1_for_and_16_ssc_sva_1_1;
      Cal_Eur_Distance_for_1_for_and_14_ssc_sva_1 <= Cal_Eur_Distance_for_1_for_and_14_ssc_sva_1_1;
      Cal_Eur_Distance_for_1_for_and_12_ssc_sva_1 <= Cal_Eur_Distance_for_1_for_and_12_ssc_sva_1_1;
      Cal_Eur_Distance_for_1_for_and_13_ssc_sva_1 <= Cal_Eur_Distance_for_1_for_and_13_ssc_sva_1_1;
      Cal_Eur_Distance_for_1_for_and_15_ssc_sva_1 <= Cal_Eur_Distance_for_1_for_and_15_ssc_sva_1_1;
      Cal_Eur_Distance_for_1_for_and_17_ssc_sva_1 <= Cal_Eur_Distance_for_1_for_and_17_ssc_sva_1_1;
      Cal_Eur_Distance_for_1_for_and_19_ssc_sva_1 <= Cal_Eur_Distance_for_1_for_and_19_ssc_sva_1_1;
      pixel_loop_asn_sft_1_lpi_1_dfm_1 <= pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0;
      lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_1_1 <= lfst_exitL_exit_padding_loop2_lpi_1_dfm_1_1;
      lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_1_0 <= lfst_exitL_exit_padding_loop2_lpi_1_dfm_0_1;
      reg_src_rsci_oswt_cse <= mux_227_itm;
      lfst_exitL_exit_rawdns_process_for_lpi_1_1_0 <= lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_5_1_0_1;
      sfi_rawdns_reg_eb_lpi_1 <= padding_loop2_mux_255_nl & (~ padding_loop2_equal_tmp_4);
      lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_1 <= lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_1_1;
      lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0 <= lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0_1;
      count_lpi_1 <= MUX_v_13_2_2(z_out_13, count_lpi_1_dfm_1, and_dcpl_183);
      n_lpi_1 <= MUX_v_26_2_2(pixel_loop_acc_3_nl, n_lpi_1_dfm_1, mux_265_nl);
      main_stage_0_2 <= 1'b1;
      main_stage_0_3 <= main_stage_0_2;
      pixel_loop_if_1_for_nor_6_itm_1 <= ~((pixel_loop_if_1_for_acc_11_psp_1[1:0]!=2'b00)
          | (j_lpi_1[0]));
      pixel_loop_if_1_for_nor_3_itm_1 <= ~((pixel_loop_if_1_for_acc_11_psp_1[2])
          | (pixel_loop_if_1_for_acc_11_psp_1[0]) | (j_lpi_1[0]));
      pixel_loop_if_1_for_nor_itm_1 <= pixel_loop_if_1_for_nor_cse;
      reg_refresh_inner_loop_and_stg_5_54_sva_1_1 <= reg_refresh_inner_loop_and_stg_5_54_sva_1;
      reg_refresh_inner_loop_and_stg_5_45_sva_1_1 <= reg_refresh_inner_loop_and_stg_5_45_sva_1;
      reg_refresh_inner_loop_and_stg_5_43_sva_1_1 <= reg_refresh_inner_loop_and_stg_5_43_sva_1;
      reg_refresh_inner_loop_and_stg_5_34_sva_1_1 <= reg_refresh_inner_loop_and_stg_5_34_sva_1;
      reg_refresh_inner_loop_and_stg_5_32_sva_1_1 <= reg_refresh_inner_loop_and_stg_5_32_sva_1;
      reg_refresh_inner_loop_and_stg_5_21_sva_1_1 <= reg_refresh_inner_loop_and_stg_5_21_sva_1;
      pixel_loop_if_1_for_pixel_loop_if_1_for_conc_decb_3_1_sva_1 <= nl_pixel_loop_if_1_for_pixel_loop_if_1_for_conc_decb_3_1_sva_1[2:0];
      rawdns_process_for_or_tmp_1_1 <= rawdns_process_for_or_tmp_1;
      rawdns_process_for_nor_tmp_1_1 <= rawdns_process_for_nor_tmp_1;
      rawdns_process_for_equal_tmp_1 <= rawdns_process_for_equal_tmp_4;
      rawdns_process_for_equal_tmp_1_1 <= rawdns_process_for_equal_tmp_5;
      padding_loop2_and_203_itm_1 <= reg_refresh_inner_loop_and_stg_4_28_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6:5]==2'b01) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_1_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      reg_refresh_inner_loop_and_stg_5_10_sva_1_1 <= reg_refresh_inner_loop_and_stg_5_10_sva_1;
      rawdns_process_total_weight_1_lpi_1 <= rawdns_process_total_weight_1_lpi_1_mx0;
      rawdns_process_max_weight_lpi_1 <= rawdns_process_max_weight_lpi_1_mx0;
      rawdns_process_total_value_1_lpi_1_dfm_1 <= MUX_v_25_2_2(25'b0000000000000000000000000,
          rawdns_process_total_value_1_lpi_1_mx0, pixel_loop_if_1_aelse_not_14_nl);
      exit_rawdns_process_for_lpi_1_dfm_2_1 <= MUX_s_1_2_2(loop2_inner_loop_loop2_inner_loop_nor_nl,
          exit_rawdns_process_for_lpi_1_dfm_3, lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0);
      reg_refresh_inner_loop_and_stg_5_23_sva_1 <= reg_refresh_inner_loop_and_stg_5_23_sva_1_1;
      reg_refresh_inner_loop_and_stg_5_12_sva_1 <= reg_refresh_inner_loop_and_stg_5_12_sva_1_1;
      reg_refresh_inner_loop_and_stg_5_1_sva_1 <= reg_refresh_inner_loop_and_stg_5_1_sva_1_1;
      loop2_inner_loop_nor_1_itm_1 <= MUX1HOT_s_1_3_2(loop2_inner_loop_nor_1_nl,
          (reg_refresh_inner_loop_acc_decb_sva_1[6]), pixel_loop_if_1_for_nor_cse,
          {and_295_cse , or_231_cse , and_296_cse});
      padding_loop2_and_262_itm_1 <= reg_refresh_inner_loop_and_stg_5_55_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6]) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_261_itm_1 <= reg_refresh_inner_loop_and_stg_5_54_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6]) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_260_itm_1 <= reg_refresh_inner_loop_and_stg_5_53_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6]) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_259_itm_1 <= reg_refresh_inner_loop_and_stg_5_52_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6]) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_258_itm_1 <= reg_refresh_inner_loop_and_stg_5_51_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6]) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_257_itm_1 <= reg_refresh_inner_loop_and_stg_5_50_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6]) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_256_itm_1 <= reg_refresh_inner_loop_and_stg_5_49_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6]) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_255_itm_1 <= reg_refresh_inner_loop_and_stg_5_48_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6]) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_254_itm_1 <= reg_refresh_inner_loop_and_stg_5_47_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6]) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_253_itm_1 <= reg_refresh_inner_loop_and_stg_5_46_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6]) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_251_itm_1 <= reg_refresh_inner_loop_and_stg_5_44_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6]) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_250_itm_1 <= reg_refresh_inner_loop_and_stg_5_43_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6]) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_249_itm_1 <= reg_refresh_inner_loop_and_stg_5_42_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6]) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_248_itm_1 <= reg_refresh_inner_loop_and_stg_5_41_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6]) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_247_itm_1 <= reg_refresh_inner_loop_and_stg_5_40_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6]) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_246_itm_1 <= reg_refresh_inner_loop_and_stg_5_39_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6]) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_245_itm_1 <= reg_refresh_inner_loop_and_stg_5_38_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6]) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_244_itm_1 <= reg_refresh_inner_loop_and_stg_5_37_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6]) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_243_itm_1 <= reg_refresh_inner_loop_and_stg_5_36_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6]) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_242_itm_1 <= reg_refresh_inner_loop_and_stg_5_35_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6]) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_240_itm_1 <= reg_refresh_inner_loop_and_stg_5_33_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6]) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_239_itm_1 <= reg_refresh_inner_loop_and_stg_5_32_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6]) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_238_itm_1 <= reg_refresh_inner_loop_and_stg_5_31_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6]) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_237_itm_1 <= reg_refresh_inner_loop_and_stg_5_30_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6]) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_236_itm_1 <= reg_refresh_inner_loop_and_stg_5_29_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6]) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_235_itm_1 <= reg_refresh_inner_loop_and_stg_5_28_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6]) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_234_itm_1 <= reg_refresh_inner_loop_and_stg_5_27_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6]) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_233_itm_1 <= reg_refresh_inner_loop_and_stg_5_26_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6]) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_232_itm_1 <= reg_refresh_inner_loop_and_stg_5_25_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6]) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_231_itm_1 <= reg_refresh_inner_loop_and_stg_5_24_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6]) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_229_itm_1 <= reg_refresh_inner_loop_and_stg_5_22_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6]) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_228_itm_1 <= reg_refresh_inner_loop_and_stg_5_21_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6]) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_227_itm_1 <= reg_refresh_inner_loop_and_stg_5_20_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6]) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_226_itm_1 <= reg_refresh_inner_loop_and_stg_5_19_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6]) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_225_itm_1 <= reg_refresh_inner_loop_and_stg_5_18_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6]) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_224_itm_1 <= reg_refresh_inner_loop_and_stg_5_17_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6]) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_223_itm_1 <= reg_refresh_inner_loop_and_stg_5_16_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6]) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_222_itm_1 <= reg_refresh_inner_loop_and_stg_5_15_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6]) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_221_itm_1 <= reg_refresh_inner_loop_and_stg_5_14_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6]) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_220_itm_1 <= reg_refresh_inner_loop_and_stg_5_13_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6]) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_218_itm_1 <= reg_refresh_inner_loop_and_stg_5_11_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6]) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_217_itm_1 <= reg_refresh_inner_loop_and_stg_5_10_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6]) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_216_itm_1 <= reg_refresh_inner_loop_and_stg_5_9_sva_1 & (reg_refresh_inner_loop_acc_decb_sva_1[6])
          & rawdns_process_for_rawdns_process_for_nor_3_cse_1 & pixel_loop_asn_sft_lpi_1_dfm_mx0
          & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0) & padding_loop2_or_tmp_2;
      padding_loop2_and_215_itm_1 <= reg_refresh_inner_loop_and_stg_5_8_sva_1 & (reg_refresh_inner_loop_acc_decb_sva_1[6])
          & rawdns_process_for_rawdns_process_for_nor_3_cse_1 & pixel_loop_asn_sft_lpi_1_dfm_mx0
          & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0) & padding_loop2_or_tmp_2;
      padding_loop2_and_214_itm_1 <= reg_refresh_inner_loop_and_stg_5_7_sva_1 & (reg_refresh_inner_loop_acc_decb_sva_1[6])
          & rawdns_process_for_rawdns_process_for_nor_3_cse_1 & pixel_loop_asn_sft_lpi_1_dfm_mx0
          & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0) & padding_loop2_or_tmp_2;
      padding_loop2_and_213_itm_1 <= reg_refresh_inner_loop_and_stg_5_6_sva_1 & (reg_refresh_inner_loop_acc_decb_sva_1[6])
          & rawdns_process_for_rawdns_process_for_nor_3_cse_1 & pixel_loop_asn_sft_lpi_1_dfm_mx0
          & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0) & padding_loop2_or_tmp_2;
      padding_loop2_and_212_itm_1 <= reg_refresh_inner_loop_and_stg_5_5_sva_1 & (reg_refresh_inner_loop_acc_decb_sva_1[6])
          & rawdns_process_for_rawdns_process_for_nor_3_cse_1 & pixel_loop_asn_sft_lpi_1_dfm_mx0
          & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0) & padding_loop2_or_tmp_2;
      padding_loop2_and_211_itm_1 <= reg_refresh_inner_loop_and_stg_5_4_sva_1 & (reg_refresh_inner_loop_acc_decb_sva_1[6])
          & rawdns_process_for_rawdns_process_for_nor_3_cse_1 & pixel_loop_asn_sft_lpi_1_dfm_mx0
          & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0) & padding_loop2_or_tmp_2;
      padding_loop2_and_210_itm_1 <= reg_refresh_inner_loop_and_stg_5_3_sva_1 & (reg_refresh_inner_loop_acc_decb_sva_1[6])
          & rawdns_process_for_rawdns_process_for_nor_3_cse_1 & pixel_loop_asn_sft_lpi_1_dfm_mx0
          & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0) & padding_loop2_or_tmp_2;
      padding_loop2_and_209_itm_1 <= reg_refresh_inner_loop_and_stg_5_2_sva_1 & (reg_refresh_inner_loop_acc_decb_sva_1[6])
          & rawdns_process_for_rawdns_process_for_nor_3_cse_1 & pixel_loop_asn_sft_lpi_1_dfm_mx0
          & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0) & padding_loop2_or_tmp_2;
      padding_loop2_and_207_itm_1 <= reg_refresh_inner_loop_and_stg_5_0_sva_1 & (reg_refresh_inner_loop_acc_decb_sva_1[6])
          & rawdns_process_for_rawdns_process_for_nor_3_cse_1 & pixel_loop_asn_sft_lpi_1_dfm_mx0
          & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0) & padding_loop2_or_tmp_2;
      padding_loop2_and_206_itm_1 <= reg_refresh_inner_loop_and_stg_4_31_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6:5]==2'b01) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_1_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_205_itm_1 <= reg_refresh_inner_loop_and_stg_4_30_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6:5]==2'b01) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_1_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_204_itm_1 <= reg_refresh_inner_loop_and_stg_4_29_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6:5]==2'b01) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_1_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_202_itm_1 <= reg_refresh_inner_loop_and_stg_4_27_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6:5]==2'b01) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_1_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_201_itm_1 <= reg_refresh_inner_loop_and_stg_4_26_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6:5]==2'b01) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_1_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_200_itm_1 <= reg_refresh_inner_loop_and_stg_4_25_sva_1 &
          (reg_refresh_inner_loop_acc_decb_sva_1[6:5]==2'b01) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_1_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_199_itm_1 <= reg_refresh_inner_loop_and_stg_5_56_sva_1 &
          (~ (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_1_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_198_itm_1 <= reg_refresh_inner_loop_and_stg_5_55_sva_1 &
          (~ (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_196_itm_1 <= reg_refresh_inner_loop_and_stg_5_53_sva_1 &
          (~ (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_195_itm_1 <= reg_refresh_inner_loop_and_stg_5_52_sva_1 &
          (~ (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_194_itm_1 <= reg_refresh_inner_loop_and_stg_5_51_sva_1 &
          (~ (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_193_itm_1 <= reg_refresh_inner_loop_and_stg_5_50_sva_1 &
          (~ (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_192_itm_1 <= reg_refresh_inner_loop_and_stg_5_49_sva_1 &
          (~ (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_191_itm_1 <= reg_refresh_inner_loop_and_stg_5_48_sva_1 &
          (~ (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_190_itm_1 <= reg_refresh_inner_loop_and_stg_5_47_sva_1 &
          (~ (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_189_itm_1 <= reg_refresh_inner_loop_and_stg_5_46_sva_1 &
          (~ (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_188_itm_1 <= reg_refresh_inner_loop_and_stg_5_45_sva_1 &
          (~ (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_187_itm_1 <= reg_refresh_inner_loop_and_stg_5_44_sva_1 &
          (~ (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_185_itm_1 <= reg_refresh_inner_loop_and_stg_5_42_sva_1 &
          (~ (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_184_itm_1 <= reg_refresh_inner_loop_and_stg_5_41_sva_1 &
          (~ (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_183_itm_1 <= reg_refresh_inner_loop_and_stg_5_40_sva_1 &
          (~ (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_182_itm_1 <= reg_refresh_inner_loop_and_stg_5_39_sva_1 &
          (~ (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_181_itm_1 <= reg_refresh_inner_loop_and_stg_5_38_sva_1 &
          (~ (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_180_itm_1 <= reg_refresh_inner_loop_and_stg_5_37_sva_1 &
          (~ (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_179_itm_1 <= reg_refresh_inner_loop_and_stg_5_36_sva_1 &
          (~ (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_178_itm_1 <= reg_refresh_inner_loop_and_stg_5_35_sva_1 &
          (~ (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_177_itm_1 <= reg_refresh_inner_loop_and_stg_5_34_sva_1 &
          (~ (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_176_itm_1 <= reg_refresh_inner_loop_and_stg_5_33_sva_1 &
          (~ (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_174_itm_1 <= reg_refresh_inner_loop_and_stg_5_31_sva_1 &
          (~ (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_173_itm_1 <= reg_refresh_inner_loop_and_stg_5_30_sva_1 &
          (~ (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_172_itm_1 <= reg_refresh_inner_loop_and_stg_5_29_sva_1 &
          (~ (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_171_itm_1 <= reg_refresh_inner_loop_and_stg_5_28_sva_1 &
          (~ (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_170_itm_1 <= reg_refresh_inner_loop_and_stg_5_27_sva_1 &
          (~ (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_169_itm_1 <= reg_refresh_inner_loop_and_stg_5_26_sva_1 &
          (~ (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_168_itm_1 <= reg_refresh_inner_loop_and_stg_5_25_sva_1 &
          (~ (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_167_itm_1 <= reg_refresh_inner_loop_and_stg_5_24_sva_1 &
          (~ (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_166_itm_1 <= reg_refresh_inner_loop_and_stg_5_23_sva_1_1
          & (~ (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_165_itm_1 <= reg_refresh_inner_loop_and_stg_5_22_sva_1 &
          (~ (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_163_itm_1 <= reg_refresh_inner_loop_and_stg_5_20_sva_1 &
          (~ (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_162_itm_1 <= reg_refresh_inner_loop_and_stg_5_19_sva_1 &
          (~ (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_1_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_161_itm_1 <= reg_refresh_inner_loop_and_stg_5_18_sva_1 &
          (~ (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_1_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_160_itm_1 <= reg_refresh_inner_loop_and_stg_5_17_sva_1 &
          (~ (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_1_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_159_itm_1 <= reg_refresh_inner_loop_and_stg_5_16_sva_1 &
          (~ (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_1_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_158_itm_1 <= reg_refresh_inner_loop_and_stg_5_15_sva_1 &
          (~ (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_1_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_157_itm_1 <= reg_refresh_inner_loop_and_stg_5_14_sva_1 &
          (~ (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_1_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_156_itm_1 <= reg_refresh_inner_loop_and_stg_5_13_sva_1 &
          (~ (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_1_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_155_itm_1 <= reg_refresh_inner_loop_and_stg_5_12_sva_1_1
          & (~ (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_1_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_154_itm_1 <= reg_refresh_inner_loop_and_stg_5_11_sva_1 &
          (~ (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_1_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_152_itm_1 <= reg_refresh_inner_loop_and_stg_5_9_sva_1 & (~
          (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_1_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_151_itm_1 <= reg_refresh_inner_loop_and_stg_5_8_sva_1 & (~
          (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_1_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_150_itm_1 <= reg_refresh_inner_loop_and_stg_5_7_sva_1 & (~
          (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_1_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_149_itm_1 <= reg_refresh_inner_loop_and_stg_5_6_sva_1 & (~
          (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_1_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_148_itm_1 <= reg_refresh_inner_loop_and_stg_5_5_sva_1 & (~
          (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_1_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_147_itm_1 <= reg_refresh_inner_loop_and_stg_5_4_sva_1 & (~
          (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_1_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_146_itm_1 <= reg_refresh_inner_loop_and_stg_5_3_sva_1 & (~
          (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_1_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_145_itm_1 <= reg_refresh_inner_loop_and_stg_5_2_sva_1 & (~
          (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_1_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_144_itm_1 <= reg_refresh_inner_loop_and_stg_5_1_sva_1_1 &
          (~ (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_1_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      padding_loop2_and_143_itm_1 <= reg_refresh_inner_loop_and_stg_5_0_sva_1 & (~
          (reg_refresh_inner_loop_acc_decb_sva_1[6])) & rawdns_process_for_rawdns_process_for_nor_3_cse_1
          & pixel_loop_asn_sft_lpi_1_dfm_1_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_loop2_or_tmp_2;
      k_2_2_0_lpi_1 <= MUX_v_3_2_2(k_2_2_0_sva_2, k_2_2_0_lpi_1_dfm_1, and_3_nl);
      pixel_loop_if_1_if_1_pixel_loop_if_1_if_1_or_itm_1 <= ((readslicef_14_1_13(operator_13_false_3_acc_nl))
          & (i_1_lpi_1_dfm_3[2:0]==3'b101)) | (readslicef_13_1_12(operator_13_false_2_acc_nl));
      exitL_exit_rawdns_process_for_lpi_1_dfm_st_1 <= exitL_exit_rawdns_process_for_lpi_1_dfm_1;
      rawdns_process_total_value_1_lpi_1 <= rawdns_process_total_value_1_lpi_1_mx0;
      reg_refresh_inner_loop_and_stg_5_56_sva_1_1 <= reg_refresh_inner_loop_and_stg_5_56_sva_1;
      operator_4_false_2_slc_operator_4_false_2_acc_3_svs_1 <= operator_4_false_2_acc_itm_3_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dst_rsci_idat <= 12'b000000000000;
    end
    else if ( core_wen & (dst_rsci_idat_mx0c0 | dst_rsci_idat_mx0c1 | dst_rsci_idat_mx0c2
        | dst_rsci_idat_mx0c3) ) begin
      dst_rsci_idat <= MUX1HOT_v_12_12_2(dst_data_1_lpi_1_dfm_2, (rawdns_process_total_weight_sva_1[11:0]),
          rawdns_lines_rsc_0_0_i_q_d_mxwt, rawdns_lines_rsc_0_1_i_q_d_mxwt, rawdns_lines_rsc_0_2_i_q_d_mxwt,
          rawdns_lines_rsc_0_3_i_q_d_mxwt, rawdns_lines_rsc_0_4_i_q_d_mxwt, rawdns_lines_rsc_0_5_i_q_d_mxwt,
          rawdns_lines_rsc_0_6_i_q_d_mxwt, rawdns_lines_rsc_0_7_i_q_d_mxwt, rawdns_lines_rsc_0_8_i_q_d_mxwt,
          rawdns_lines_rsc_0_9_i_q_d_mxwt, {dst_rsci_idat_mx0c0 , dst_rsci_idat_mx0c1
          , pixel_loop_if_1_if_1_or_nl , pixel_loop_if_1_if_1_or_1_nl , pixel_loop_if_1_if_1_or_2_nl
          , pixel_loop_if_1_if_1_or_3_nl , pixel_loop_if_1_if_1_or_4_nl , pixel_loop_if_1_if_1_or_5_nl
          , pixel_loop_if_1_if_1_or_6_nl , pixel_loop_if_1_if_1_or_7_nl , pixel_loop_if_1_if_1_or_8_nl
          , pixel_loop_if_1_if_1_or_9_nl});
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dst_data_1_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & (~((~ main_stage_0_3) | pixel_loop_asn_sft_1_lpi_1_dfm_2
        | (~ rawdns_process_for_equal_tmp_2_2) | padding_loop2_or_24_tmp_2 | (~ reg_pixel_loop_asn_sft_lpi_1_dfm_st_2_cse)))
        ) begin
      dst_data_1_lpi_1 <= dst_data_1_lpi_1_dfm_2;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      exit_rawdns_process_for_sva_2 <= 1'b0;
    end
    else if ( core_wen & (~(mux_217_nl | or_dcpl_118 | or_dcpl_114 | (~ lfst_exit_rawdns_process_for_lpi_1)
        | pixel_loop_asn_sft_1_lpi_1 | (~ operator_4_false_1_acc_itm_2_1) | or_dcpl_110
        | (lfst_exitL_exit_rawdns_process_for_lpi_1_1_0[0]) | exitL_exitL_exit_padding_loop2_sva
        | (lfst_exitL_exit_rawdns_process_for_lpi_1_1_0[1]))) ) begin
      exit_rawdns_process_for_sva_2 <= operator_4_false_acc_itm_2_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      Cal_Eur_Distance_l_1_1_0_lpi_1_0 <= 1'b0;
    end
    else if ( core_wen & (Cal_Eur_Distance_for_1_and_4_ssc_1 | rawdns_process_for_for_and_6_ssc_1)
        ) begin
      Cal_Eur_Distance_l_1_1_0_lpi_1_0 <= MUX_s_1_2_2((~ (Cal_Eur_Distance_for_acc_tmp[1])),
          (~ Cal_Eur_Distance_l_1_1_0_lpi_1_dfm_0_1), rawdns_process_for_for_and_6_ssc_1);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1 <= 1'b0;
    end
    else if ( core_wen & (~((~(mux_tmp_91 & lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0))
        | exitL_exitL_exitL_exitL_exit_rawdns_process_for_lpi_1 | (~ lfst_exitL_exitL_exitL_exit_rawdns_process_for_lpi_1)
        | (~ lfst_exitL_exitL_exit_rawdns_process_for_lpi_1) | or_dcpl_114 | or_dcpl_139
        | (~ rawdns_process_for_for_asn_sft_lpi_1) | or_dcpl_132 | or_dcpl_15 | (~
        lfst_exitL_exit_rawdns_process_for_lpi_1_2) | lfst_exit_Cal_Eur_Distance_for_1_lpi_1_0
        | exitL_exitL_exit_padding_loop2_sva)) ) begin
      exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1 <= exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1_mx0w0;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      operator_26_false_operator_26_false_slc_ksigma2_mul_25_16_psp_lpi_1_dfm <=
          10'b0000000000;
    end
    else if ( core_wen & exitL_exitL_exit_padding_loop2_sva ) begin
      operator_26_false_operator_26_false_slc_ksigma2_mul_25_16_psp_lpi_1_dfm <=
          ksigma2_mul_itm_25_16_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      Cal_weight_else_slc_30_svs <= 1'b0;
    end
    else if ( core_wen & (~((~(or_162_cse & mux_tmp_91)) | or_dcpl_127 | or_dcpl_125
        | sfi_pixel_loop_if_1_land_lpi_1 | or_dcpl_139 | (~ rawdns_process_for_for_asn_sft_lpi_1)
        | (~ lfst_exitL_exit_Cal_Eur_Distance_for_1_lpi_1) | or_130_cse | or_dcpl_15
        | (~ lfst_exitL_exit_rawdns_process_for_lpi_1_2) | (~ operator_4_true_3_acc_tmp_2)
        | (~ operator_4_true_2_acc_tmp_2) | (lfst_exitL_exit_rawdns_process_for_lpi_1_1_0[0])
        | or_dcpl_122)) ) begin
      Cal_weight_else_slc_30_svs <= Cal_weight_else_if_acc_itm_30_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_process_sigma2_mul_psp_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & (~((~ mux_tmp_91) | or_dcpl_118 | (~ pixel_loop_asn_sft_lpi_1)
        | (~ sfi_pixel_loop_if_1_land_lpi_1) | or_dcpl_15 | (~ lfst_exitL_exit_rawdns_process_for_lpi_1_2)
        | (lfst_exitL_exit_rawdns_process_for_lpi_1_1_0[0]) | or_dcpl_122)) ) begin
      rawdns_process_sigma2_mul_psp_lpi_1 <= z_out[11:0];
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      sfi_pixel_loop_if_1_land_lpi_1 <= 1'b0;
    end
    else if ( core_wen & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
        & (~ lfst_exitL_exit_padding_loop2_lpi_1_dfm_1_1) ) begin
      sfi_pixel_loop_if_1_land_lpi_1 <= rawdns_process_for_mux_24_nl & (~ rawdns_process_for_equal_tmp_3);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      Cal_Eur_Distance_k_1_0_lpi_1 <= 2'b00;
    end
    else if ( core_wen & (~(padding_loop2_or_401_tmp_1 | (~ rawdns_process_for_for_asn_sft_lpi_1_dfm_mx0)
        | ((~ exit_Cal_Eur_Distance_for_lpi_1_dfm_3) & padding_loop2_asn_489) | (~
        pixel_loop_and_164_tmp_1) | Cal_Eur_Distance_for_1_equal_tmp_2 | and_dcpl_258))
        ) begin
      Cal_Eur_Distance_k_1_0_lpi_1 <= MUX_v_2_2_2((signext_2_1(~ exit_Cal_Eur_Distance_for_lpi_1_dfm_3)),
          Cal_Eur_Distance_k_1_0_sva_2, padding_loop2_asn_491);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      Cal_Eur_Distance_temp_block_0_0_23_12_lpi_1 <= 12'b000000000000;
      Cal_Eur_Distance_temp_block_0_1_23_12_lpi_1 <= 12'b000000000000;
      Cal_Eur_Distance_temp_block_0_2_23_12_lpi_1 <= 12'b000000000000;
      Cal_Eur_Distance_temp_block_1_0_23_12_lpi_1 <= 12'b000000000000;
      Cal_Eur_Distance_temp_block_1_1_23_12_lpi_1 <= 12'b000000000000;
      Cal_Eur_Distance_temp_block_1_2_23_12_lpi_1 <= 12'b000000000000;
      Cal_Eur_Distance_temp_block_2_0_23_12_lpi_1 <= 12'b000000000000;
      Cal_Eur_Distance_temp_block_2_1_23_12_lpi_1 <= 12'b000000000000;
      Cal_Eur_Distance_temp_block_2_2_23_12_lpi_1 <= 12'b000000000000;
      lfst_exit_Cal_Eur_Distance_for_1_lpi_1_1 <= 1'b0;
      lfst_exit_Cal_Eur_Distance_for_1_lpi_1_0 <= 1'b0;
    end
    else if ( Cal_Eur_Distance_temp_block_and_cse ) begin
      Cal_Eur_Distance_temp_block_0_0_23_12_lpi_1 <= MUX_v_12_2_2(12'b000000000000,
          Cal_Eur_Distance_for_1_mux_18_nl, Cal_Eur_Distance_for_1_not_45_nl);
      Cal_Eur_Distance_temp_block_0_1_23_12_lpi_1 <= MUX_v_12_2_2(12'b000000000000,
          Cal_Eur_Distance_for_1_mux_19_nl, Cal_Eur_Distance_for_1_not_62_nl);
      Cal_Eur_Distance_temp_block_0_2_23_12_lpi_1 <= MUX_v_12_2_2(12'b000000000000,
          Cal_Eur_Distance_for_1_mux_20_nl, Cal_Eur_Distance_for_1_not_61_nl);
      Cal_Eur_Distance_temp_block_1_0_23_12_lpi_1 <= MUX_v_12_2_2(12'b000000000000,
          Cal_Eur_Distance_for_1_mux_21_nl, Cal_Eur_Distance_for_1_not_60_nl);
      Cal_Eur_Distance_temp_block_1_1_23_12_lpi_1 <= MUX_v_12_2_2(12'b000000000000,
          Cal_Eur_Distance_for_1_mux_22_nl, Cal_Eur_Distance_for_1_not_59_nl);
      Cal_Eur_Distance_temp_block_1_2_23_12_lpi_1 <= MUX_v_12_2_2(12'b000000000000,
          Cal_Eur_Distance_for_1_mux_23_nl, Cal_Eur_Distance_for_1_not_58_nl);
      Cal_Eur_Distance_temp_block_2_0_23_12_lpi_1 <= MUX_v_12_2_2(12'b000000000000,
          Cal_Eur_Distance_for_1_mux_24_nl, Cal_Eur_Distance_for_1_not_57_nl);
      Cal_Eur_Distance_temp_block_2_1_23_12_lpi_1 <= MUX_v_12_2_2(12'b000000000000,
          Cal_Eur_Distance_for_1_mux_25_nl, Cal_Eur_Distance_for_1_not_56_nl);
      Cal_Eur_Distance_temp_block_2_2_23_12_lpi_1 <= MUX_v_12_2_2(12'b000000000000,
          Cal_Eur_Distance_for_1_mux_26_nl, Cal_Eur_Distance_for_1_not_55_nl);
      lfst_exit_Cal_Eur_Distance_for_1_lpi_1_1 <= lfst_exit_Cal_Eur_Distance_for_1_lpi_1_dfm_3_1_1;
      lfst_exit_Cal_Eur_Distance_for_1_lpi_1_0 <= lfst_exit_Cal_Eur_Distance_for_1_lpi_1_dfm_3_0_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      Cal_Eur_Distance_k_1_1_0_lpi_1 <= 2'b00;
    end
    else if ( core_wen & (((~ Cal_Eur_Distance_for_1_or_42_tmp_1) & pixel_loop_if_1_and_5_tmp_1
        & padding_loop2_and_291_tmp_1) | pixel_loop_if_1_and_18_rgt) ) begin
      Cal_Eur_Distance_k_1_1_0_lpi_1 <= MUX_v_2_2_2(Cal_Eur_Distance_for_acc_tmp,
          Cal_Eur_Distance_k_1_1_0_lpi_1_dfm_1, pixel_loop_if_1_and_18_rgt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      Cal_Eur_Distance_Eur_distance_lpi_1 <= 30'b000000000000000000000000000000;
    end
    else if ( core_wen & (((~ Cal_Eur_Distance_for_1_equal_tmp_3) & rawdns_process_for_for_asn_sft_lpi_1_dfm_mx0
        & pixel_loop_and_164_tmp_1 & (~ padding_loop2_or_401_tmp_1)) | rawdns_process_for_for_and_1_rgt)
        ) begin
      Cal_Eur_Distance_Eur_distance_lpi_1 <= MUX_v_30_2_2(Cal_Eur_Distance_Eur_distance_lpi_1_dfm_1,
          Cal_Eur_Distance_Eur_distance_sva_2, rawdns_process_for_for_and_1_rgt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_process_for_for_asn_sft_lpi_1 <= 1'b0;
    end
    else if ( core_wen & (~ lfst_exitL_exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1) &
        pixel_loop_if_1_asn_sft_lpi_1_mx0 & rawdns_process_for_equal_tmp_3 & pixel_loop_asn_sft_lpi_1_dfm_mx0
        & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0) & (~ lfst_exitL_exit_padding_loop2_lpi_1_dfm_1_1)
        ) begin
      rawdns_process_for_for_asn_sft_lpi_1 <= rawdns_process_for_for_lor_lpi_1_dfm_1_mx0;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lfst_exitL_exit_Cal_Eur_Distance_for_1_lpi_1 <= 1'b0;
      exitL_exitL_exit_Cal_Eur_Distance_for_1_lpi_1 <= 1'b0;
      lfst_exit_rawdns_process_for_lpi_1 <= 1'b0;
    end
    else if ( Cal_Eur_Distance_for_1_and_62_cse ) begin
      lfst_exitL_exit_Cal_Eur_Distance_for_1_lpi_1 <= ~ exitL_exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1;
      exitL_exitL_exit_Cal_Eur_Distance_for_1_lpi_1 <= exitL_exit_Cal_Eur_Distance_for_1_lpi_1_dfm_1;
      lfst_exit_rawdns_process_for_lpi_1 <= ~ exit_rawdns_process_for_lpi_1_dfm_3;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_process_for_for_lor_lpi_1 <= 1'b0;
    end
    else if ( core_wen & sfi_pixel_loop_if_1_land_lpi_1 & pixel_loop_if_1_asn_sft_lpi_1_mx0
        & rawdns_process_for_equal_tmp_3 & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~
        pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0) & (~ lfst_exitL_exit_padding_loop2_lpi_1_dfm_1_1)
        ) begin
      rawdns_process_for_for_lor_lpi_1 <= rawdns_process_for_for_if_rawdns_process_for_for_if_or_mx0w0;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lfst_exit_rawdns_process_for_for_1_lpi_1 <= 1'b0;
    end
    else if ( core_wen & pixel_loop_if_1_asn_sft_lpi_1_mx0 & rawdns_process_for_equal_tmp_3
        & pixel_loop_asn_sft_lpi_1_dfm_1_mx0 & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0)
        & (~ lfst_exitL_exit_padding_loop2_lpi_1_dfm_1_1) ) begin
      lfst_exit_rawdns_process_for_for_1_lpi_1 <= ~ exit_rawdns_process_for_for_lpi_1_dfm_2;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_process_l_3_1_lpi_1 <= 3'b000;
    end
    else if ( core_wen & (and_367_rgt | padding_loop2_and_342_rgt | or_707_tmp) )
        begin
      rawdns_process_l_3_1_lpi_1 <= MUX1HOT_v_3_3_2(({{2{operator_4_false_acc_itm_2_1}},
          operator_4_false_acc_itm_2_1}), rawdns_process_l_3_1_lpi_1_dfm_3, rawdns_process_l_3_1_sva_2,
          {and_367_rgt , padding_loop2_and_342_rgt , or_707_tmp});
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_process_k_3_1_lpi_1 <= 3'b000;
    end
    else if ( core_wen & (padding_loop2_asn_495 | padding_loop2_asn_497) ) begin
      rawdns_process_k_3_1_lpi_1 <= MUX_v_3_2_2(rawdns_process_k_3_1_sva_2, rawdns_process_k_3_1_lpi_1_dfm_1,
          padding_loop2_asn_497);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_1_9_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_163_itm_1 ) begin
      rawdns_block_1_9_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_2_0_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_165_itm_1 ) begin
      rawdns_block_2_0_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_2_1_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_166_itm_1 ) begin
      rawdns_block_2_1_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_2_2_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_167_itm_1 ) begin
      rawdns_block_2_2_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_2_3_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_168_itm_1 ) begin
      rawdns_block_2_3_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_2_4_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_169_itm_1 ) begin
      rawdns_block_2_4_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_2_5_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_170_itm_1 ) begin
      rawdns_block_2_5_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_2_6_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_171_itm_1 ) begin
      rawdns_block_2_6_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_2_7_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_172_itm_1 ) begin
      rawdns_block_2_7_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_2_8_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_173_itm_1 ) begin
      rawdns_block_2_8_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_2_9_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_174_itm_1 ) begin
      rawdns_block_2_9_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_3_0_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_176_itm_1 ) begin
      rawdns_block_3_0_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_3_1_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_177_itm_1 ) begin
      rawdns_block_3_1_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_3_2_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_178_itm_1 ) begin
      rawdns_block_3_2_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_3_3_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_179_itm_1 ) begin
      rawdns_block_3_3_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_3_4_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_180_itm_1 ) begin
      rawdns_block_3_4_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_3_5_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_181_itm_1 ) begin
      rawdns_block_3_5_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_3_6_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_182_itm_1 ) begin
      rawdns_block_3_6_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_3_7_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_183_itm_1 ) begin
      rawdns_block_3_7_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_3_8_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_184_itm_1 ) begin
      rawdns_block_3_8_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_3_9_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_185_itm_1 ) begin
      rawdns_block_3_9_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_4_0_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_187_itm_1 ) begin
      rawdns_block_4_0_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_4_1_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_188_itm_1 ) begin
      rawdns_block_4_1_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_4_2_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_189_itm_1 ) begin
      rawdns_block_4_2_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_4_3_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_190_itm_1 ) begin
      rawdns_block_4_3_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_4_4_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_191_itm_1 ) begin
      rawdns_block_4_4_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_4_5_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_192_itm_1 ) begin
      rawdns_block_4_5_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_4_6_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_193_itm_1 ) begin
      rawdns_block_4_6_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_4_7_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_194_itm_1 ) begin
      rawdns_block_4_7_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_4_8_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_195_itm_1 ) begin
      rawdns_block_4_8_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_4_9_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_196_itm_1 ) begin
      rawdns_block_4_9_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_5_0_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_198_itm_1 ) begin
      rawdns_block_5_0_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_5_9_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_207_itm_1 ) begin
      rawdns_block_5_9_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_6_0_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_209_itm_1 ) begin
      rawdns_block_6_0_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_6_1_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_210_itm_1 ) begin
      rawdns_block_6_1_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_6_2_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_211_itm_1 ) begin
      rawdns_block_6_2_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_6_3_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_212_itm_1 ) begin
      rawdns_block_6_3_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_6_4_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_213_itm_1 ) begin
      rawdns_block_6_4_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_6_5_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_214_itm_1 ) begin
      rawdns_block_6_5_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_6_6_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_215_itm_1 ) begin
      rawdns_block_6_6_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_6_7_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_216_itm_1 ) begin
      rawdns_block_6_7_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_6_8_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_217_itm_1 ) begin
      rawdns_block_6_8_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_6_9_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_218_itm_1 ) begin
      rawdns_block_6_9_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_7_0_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_220_itm_1 ) begin
      rawdns_block_7_0_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_7_1_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_221_itm_1 ) begin
      rawdns_block_7_1_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_7_2_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_222_itm_1 ) begin
      rawdns_block_7_2_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_7_3_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_223_itm_1 ) begin
      rawdns_block_7_3_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_7_4_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_224_itm_1 ) begin
      rawdns_block_7_4_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_7_5_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_225_itm_1 ) begin
      rawdns_block_7_5_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_7_6_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_226_itm_1 ) begin
      rawdns_block_7_6_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_7_7_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_227_itm_1 ) begin
      rawdns_block_7_7_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_7_8_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_228_itm_1 ) begin
      rawdns_block_7_8_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_7_9_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_229_itm_1 ) begin
      rawdns_block_7_9_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_8_0_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_231_itm_1 ) begin
      rawdns_block_8_0_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_8_1_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_232_itm_1 ) begin
      rawdns_block_8_1_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_8_2_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_233_itm_1 ) begin
      rawdns_block_8_2_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_8_3_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_234_itm_1 ) begin
      rawdns_block_8_3_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_8_4_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_235_itm_1 ) begin
      rawdns_block_8_4_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_8_5_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_236_itm_1 ) begin
      rawdns_block_8_5_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_8_6_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_237_itm_1 ) begin
      rawdns_block_8_6_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_8_7_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_238_itm_1 ) begin
      rawdns_block_8_7_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_8_8_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_239_itm_1 ) begin
      rawdns_block_8_8_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_8_9_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_240_itm_1 ) begin
      rawdns_block_8_9_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_9_0_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_242_itm_1 ) begin
      rawdns_block_9_0_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_9_1_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_243_itm_1 ) begin
      rawdns_block_9_1_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_9_2_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_244_itm_1 ) begin
      rawdns_block_9_2_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_9_3_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_245_itm_1 ) begin
      rawdns_block_9_3_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_9_4_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_246_itm_1 ) begin
      rawdns_block_9_4_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_9_5_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_247_itm_1 ) begin
      rawdns_block_9_5_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_9_6_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_248_itm_1 ) begin
      rawdns_block_9_6_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_9_7_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_249_itm_1 ) begin
      rawdns_block_9_7_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_9_8_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_250_itm_1 ) begin
      rawdns_block_9_8_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_9_9_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_251_itm_1 ) begin
      rawdns_block_9_9_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_10_0_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_253_itm_1 ) begin
      rawdns_block_10_0_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_10_1_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_254_itm_1 ) begin
      rawdns_block_10_1_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_10_2_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_255_itm_1 ) begin
      rawdns_block_10_2_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_10_3_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_256_itm_1 ) begin
      rawdns_block_10_3_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_10_4_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_257_itm_1 ) begin
      rawdns_block_10_4_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_10_5_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_258_itm_1 ) begin
      rawdns_block_10_5_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_10_6_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_259_itm_1 ) begin
      rawdns_block_10_6_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_10_7_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_260_itm_1 ) begin
      rawdns_block_10_7_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_10_8_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_261_itm_1 ) begin
      rawdns_block_10_8_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_10_9_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_262_itm_1 ) begin
      rawdns_block_10_9_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_0_0_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_143_itm_1 ) begin
      rawdns_block_0_0_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_0_1_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_144_itm_1 ) begin
      rawdns_block_0_1_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_0_2_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_145_itm_1 ) begin
      rawdns_block_0_2_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_0_3_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_146_itm_1 ) begin
      rawdns_block_0_3_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_0_4_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_147_itm_1 ) begin
      rawdns_block_0_4_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_0_5_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_148_itm_1 ) begin
      rawdns_block_0_5_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_0_6_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_149_itm_1 ) begin
      rawdns_block_0_6_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_0_7_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_150_itm_1 ) begin
      rawdns_block_0_7_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_0_8_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_151_itm_1 ) begin
      rawdns_block_0_8_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_0_9_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_152_itm_1 ) begin
      rawdns_block_0_9_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_1_0_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_154_itm_1 ) begin
      rawdns_block_1_0_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_1_1_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_155_itm_1 ) begin
      rawdns_block_1_1_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_1_2_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_156_itm_1 ) begin
      rawdns_block_1_2_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_1_3_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_157_itm_1 ) begin
      rawdns_block_1_3_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_1_4_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_158_itm_1 ) begin
      rawdns_block_1_4_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_1_5_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_159_itm_1 ) begin
      rawdns_block_1_5_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_1_6_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_160_itm_1 ) begin
      rawdns_block_1_6_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_1_7_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_161_itm_1 ) begin
      rawdns_block_1_7_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_1_8_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_162_itm_1 ) begin
      rawdns_block_1_8_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_5_1_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_199_itm_1 ) begin
      rawdns_block_5_1_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_5_2_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_200_itm_1 ) begin
      rawdns_block_5_2_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_5_3_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_201_itm_1 ) begin
      rawdns_block_5_3_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_5_4_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_202_itm_1 ) begin
      rawdns_block_5_4_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_5_6_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_204_itm_1 ) begin
      rawdns_block_5_6_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_5_7_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_205_itm_1 ) begin
      rawdns_block_5_7_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_5_8_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop2_and_206_itm_1 ) begin
      rawdns_block_5_8_lpi_1 <= reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      src_data_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & (~(or_dcpl_73 | padding_loop2_equal_tmp_3_1 | padding_loop2_equal_tmp_1
        | (~ sfi_exit_pixel_loop_lpi_1_dfm_1))) ) begin
      src_data_lpi_1 <= src_rsci_idat_mxwt;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      sfi_exit_pixel_loop_lpi_1_dfm_1 <= 1'b0;
    end
    else if ( core_wen & mux_232_nl ) begin
      sfi_exit_pixel_loop_lpi_1_dfm_1 <= ~ lfst_exitL_exitL_exitL_exit_rawdns_process_for_lpi_1_dfm_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lfst_exitL_exit_rawdns_process_for_lpi_1_2 <= 1'b0;
    end
    else if ( core_wen & mux_244_nl ) begin
      lfst_exitL_exit_rawdns_process_for_lpi_1_2 <= lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_5_2_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      sfi_rawdns_reg_eb_1_lpi_1 <= 1'b0;
      lfst_exitL_exitL_exitL_exit_rawdns_process_for_lpi_1 <= 1'b0;
      exitL_exitL_exitL_exitL_exit_rawdns_process_for_lpi_1 <= 1'b0;
    end
    else if ( rawdns_reg_eb_and_cse ) begin
      sfi_rawdns_reg_eb_1_lpi_1 <= sfi_rawdns_reg_eb_1_lpi_1 & pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0;
      lfst_exitL_exitL_exitL_exit_rawdns_process_for_lpi_1 <= ~ exitL_exitL_exitL_exit_rawdns_process_for_lpi_1_dfm_1;
      exitL_exitL_exitL_exitL_exit_rawdns_process_for_lpi_1 <= exitL_exitL_exitL_exit_rawdns_process_for_lpi_1_dfm_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lfst_exitL_exitL_exit_rawdns_process_for_lpi_1 <= 1'b0;
    end
    else if ( core_wen & (~(pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0 | lfst_exitL_exit_padding_loop2_lpi_1_dfm_1_1))
        ) begin
      lfst_exitL_exitL_exit_rawdns_process_for_lpi_1 <= ~ exitL_exitL_exit_rawdns_process_for_lpi_1_dfm_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      l_1_lpi_1 <= 4'b0000;
    end
    else if ( core_wen & (((~(operator_4_false_1_acc_itm_3_1 | rawdns_process_for_or_138_tmp_1))
        & pixel_loop_asn_sft_lpi_1_dfm_mx0 & (~ padding_loop2_or_401_tmp_1)) | and_351_tmp)
        ) begin
      l_1_lpi_1 <= MUX_v_4_2_2((signext_4_1(~ operator_4_false_acc_itm_4_1)), l_1_sva_2,
          and_351_tmp);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      l_2_lpi_1 <= 4'b0000;
    end
    else if ( core_wen & ((rawdns_process_for_or_tmp_1 & pixel_loop_asn_sft_lpi_1_dfm_mx0
        & (~ pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0) & (~ lfst_exitL_exit_padding_loop2_lpi_1_dfm_1_1))
        | padding_loop2_asn_483) ) begin
      l_2_lpi_1 <= MUX_v_4_2_2(reg_refresh_out_loop_reg_refresh_out_loop_and_1_nl,
          l_2_sva_2, padding_loop2_asn_483);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      l_lpi_1 <= 4'b0000;
    end
    else if ( core_wen & (padding_loop2_asn_483 | pixel_loop_and_126_rgt) ) begin
      l_lpi_1 <= MUX_v_4_2_2(pixel_loop_if_1_for_pixel_loop_if_1_for_and_15_nl, operator_4_false_1_acc_cse_sva_1,
          pixel_loop_and_126_rgt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      k_1_lpi_1 <= 4'b0000;
    end
    else if ( core_wen & (((~ rawdns_process_for_or_362_tmp_1) & pixel_loop_and_182_tmp_1
        & (~ lfst_exitL_exit_padding_loop2_lpi_1_dfm_1_1)) | pixel_loop_and_201_rgt)
        ) begin
      k_1_lpi_1 <= MUX_v_4_2_2(k_1_sva_2, k_1_lpi_1_dfm_1, pixel_loop_and_201_rgt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      pixel_loop_asn_sft_lpi_1 <= 1'b0;
    end
    else if ( core_wen & ((~ lfst_exitL_exitL_exit_rawdns_process_for_lpi_1_dfm_1)
        | pixel_loop_asn_sft_1_lpi_1_dfm_1_mx0) ) begin
      pixel_loop_asn_sft_lpi_1 <= rawdns_reg_eb;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      pixel_loop_asn_sft_1_lpi_1 <= 1'b0;
    end
    else if ( core_wen & (~ lfst_exitL_exitL_exitL_exit_rawdns_process_for_lpi_1_dfm_1)
        ) begin
      pixel_loop_asn_sft_1_lpi_1 <= exit_pixel_loop_lpi_1_dfm_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      i_lpi_1 <= 13'b0000000000000;
    end
    else if ( core_wen & (padding_loop2_and_330_cse_1 | padding_loop2_and_331_cse_1
        | padding_loop2_and_332_rgt) ) begin
      i_lpi_1 <= ~(MUX_v_13_2_2(nor_222_nl, 13'b1111111111111, or_dcpl_356));
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lfst_exit_padding_loop2_lpi_1_1 <= 1'b0;
      lfst_exit_padding_loop2_lpi_1_0 <= 1'b0;
    end
    else if ( padding_loop2_and_cse ) begin
      lfst_exit_padding_loop2_lpi_1_1 <= padding_loop2_padding_loop2_or_1_tmp;
      lfst_exit_padding_loop2_lpi_1_0 <= lfst_exit_padding_loop2_lpi_1_dfm_3_0_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      asn_sft_lpi_1 <= 1'b0;
    end
    else if ( core_wen & exit_pixel_loop_lpi_1_dfm_1 & (~ lfst_exitL_exit_padding_loop2_lpi_1_dfm_1_1)
        ) begin
      asn_sft_lpi_1 <= rawdns_reg_eb;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawdns_block_10_10_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & ((padding_loop2_and_119_tmp_1 & (~(((~ reg_refresh_inner_loop_and_244_tmp_1)
        & rawdns_process_for_or_tmp_1_1) | rawdns_process_for_equal_tmp_1_1 | rawdns_process_for_equal_tmp_2_1
        | rawdns_process_for_nor_tmp_1_1 | (operator_4_false_2_slc_operator_4_false_2_acc_3_svs_1
        & rawdns_process_for_equal_tmp_1)))) | (reg_refresh_inner_loop_and_244_tmp_1
        & rawdns_process_for_or_tmp_1_1 & padding_loop2_and_119_tmp_1) | rawdns_process_for_and_161_rgt)
        & main_stage_0_2 ) begin
      rawdns_block_10_10_lpi_1 <= MUX_v_12_2_2(reg_refresh_inner_loop_reg_refresh_inner_loop_slc_rawdns_block_12_11_0_1_ctmp_sva_1_1,
          src_data_lpi_1_dfm_1_mx0, rawdns_process_for_and_161_rgt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      j_lpi_1 <= 13'b0000000000000;
    end
    else if ( core_wen & mux_270_nl ) begin
      j_lpi_1 <= nl_j_lpi_1[12:0];
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      exit_padding_loop2_sva_1 <= 1'b0;
    end
    else if ( core_wen & (~((~ asn_sft_lpi_1) | sfi_rawdns_reg_eb_lpi_1 | (~ lfst_exit_padding_loop2_lpi_1_1)
        | lfst_exit_padding_loop2_lpi_1_0 | loop2_inner_loop_acc_12_itm_13_1 | exitL_exitL_exit_padding_loop2_sva
        | (~ lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_1))) ) begin
      exit_padding_loop2_sva_1 <= ~ operator_4_false_5_acc_itm_2;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      k_2_0_lpi_1 <= 3'b000;
    end
    else if ( core_wen & (padding_loop2_and_330_cse_1 | padding_loop2_and_331_cse_1)
        ) begin
      k_2_0_lpi_1 <= MUX_v_3_2_2(padding_loop1_padding_loop1_and_16_nl, k_2_0_sva_2,
          padding_loop2_and_331_cse_1);
    end
  end
  assign or_294_nl = (~ loop2_inner_loop_loop2_inner_loop_and_4_itm_2) | (~ lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_2_2)
      | (lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_2_1_0!=2'b00) | (~ exitL_exit_rawdns_process_for_lpi_1_dfm_st_2)
      | pixel_loop_asn_sft_1_lpi_1_dfm_2;
  assign mux_196_nl = MUX_s_1_2_2(pixel_loop_asn_sft_1_lpi_1_dfm_2, or_294_nl, reg_pixel_loop_asn_sft_lpi_1_dfm_st_2_cse);
  assign or_293_nl = (~ asn_sft_lpi_1_st_2) | lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_2_0;
  assign or_292_nl = (~ loop2_inner_loop_slc_13_svs_st_2) | exit_rawdns_process_for_lpi_1_dfm_2_st_2
      | (~ asn_sft_lpi_1_st_2) | lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_2_0;
  assign mux_195_nl = MUX_s_1_2_2(or_293_nl, or_292_nl, exitL_exit_rawdns_process_for_lpi_1_dfm_st_2);
  assign mux_197_nl = MUX_s_1_2_2(mux_196_nl, mux_195_nl, lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_2_1);
  assign rawdns_process_mul_1_nl = conv_u2u_20_20(rawdns_process_max_weight_lpi_1_dfm_4_mx0
      * rawdns_block_5_5_lpi_1_mx0);
  assign nl_rawdns_process_acc_2_itm_1  = rawdns_process_total_value_1_lpi_1_dfm_3_mx0
      + conv_u2u_20_25(rawdns_process_mul_1_nl);
  assign loop2_inner_loop_loop2_inner_loop_and_1_nl = (loop2_inner_loop_conc_24_itm_1_3_1[0])
      & loop2_inner_loop_nor_1_itm_1;
  assign pixel_loop_if_1_and_16_nl = (~ exit_rawdns_process_for_lpi_1_dfm_2_1) &
      pixel_loop_if_1_asn_sft_lpi_1;
  assign mux_198_nl = MUX_s_1_2_2((lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_1_1_0[1]),
      Cal_weight_else_else_else_if_slc_operator_26_false_2_acc_30_svs_1, lfst_exitL_exit_padding_loop2_lpi_1_dfm_st_1_1);
  assign loop2_inner_loop_loop2_inner_loop_and_3_nl = (loop2_inner_loop_conc_24_itm_1_3_1[1])
      & Cal_weight_else_if_else_if_slc_Cal_weight_else_if_else_if_acc_29_svs_st_1;
  assign pixel_loop_if_1_nand_nl = ~(pixel_loop_if_1_asn_sft_lpi_1 & (~((~ rawdns_process_rawdns_process_rawdns_process_or_tmp_2)
      & exit_rawdns_process_for_lpi_1_dfm_2_1)));
  assign rawdns_process_for_and_160_nl = rawdns_process_rawdns_process_rawdns_process_or_tmp_2
      & exit_rawdns_process_for_lpi_1_dfm_2_1 & pixel_loop_if_1_asn_sft_lpi_1;
  assign padding_loop2_mux_130_nl = MUX_s_1_2_2(Cal_Eur_Distance_l_1_1_0_lpi_1_1,
      Cal_Eur_Distance_for_for_xor_tmp, rawdns_process_for_for_and_6_ssc_1);
  assign or_703_nl = ((~ padding_loop2_or_401_tmp_1) & rawdns_process_for_for_asn_sft_lpi_1_dfm_mx0
      & pixel_loop_and_164_tmp_1 & and_dcpl_258) | (padding_loop2_asn_491 & operator_4_true_2_acc_tmp_2);
  assign mux_275_nl = MUX_v_2_2_2(Cal_Eur_Distance_l_1_0_lpi_1, Cal_Eur_Distance_l_1_0_sva_2,
      or_703_nl);
  assign nor_228_nl = ~((padding_loop2_asn_491 & (~ operator_4_true_2_acc_tmp_2))
      | (exit_Cal_Eur_Distance_for_lpi_1_dfm_3 & padding_loop2_asn_489));
  assign nand_84_nl = ~(mux_227_itm & pixel_loop_equal_1_tmp);
  assign pixel_loop_if_1_aelse_not_13_nl = ~ sfi_pixel_loop_if_1_land_lpi_1;
  assign and_228_nl = or_dcpl_134 & and_dcpl_193;
  assign and_235_nl = and_dcpl_199 & lfst_exit_rawdns_process_for_lpi_1 & lfst_exit_Cal_Eur_Distance_for_1_lpi_1_1
      & and_dcpl_196 & lfst_exit_rawdns_process_for_for_1_lpi_1 & lfst_exitL_exit_rawdns_process_for_lpi_1_2;
  assign nl_loop2_inner_loop_acc_25_nl = ({(operator_4_false_2_acc_psp_sva_1[2:0])
      , (i_lpi_1[11]) , (operator_4_false_2_acc_psp_sva_1[2:0]) , (i_lpi_1[11]) ,
      (operator_4_false_2_acc_psp_sva_1[2:0]) , (i_lpi_1[11])}) + conv_u2u_11_12({1'b1
      , (z_out_13[9:0])});
  assign loop2_inner_loop_acc_25_nl = nl_loop2_inner_loop_acc_25_nl[11:0];
  assign loop2_inner_loop_loop2_inner_loop_mux_6_nl = MUX_v_12_2_2(loop2_inner_loop_acc_25_nl,
      (z_out_10[11:0]), loop2_inner_loop_or_6_itm);
  assign loop2_inner_loop_loop2_inner_loop_mux_7_nl = MUX_v_12_2_2(({10'b0111011101
      , (z_out_3[3:2])}), (z_out_13[11:0]), loop2_inner_loop_or_6_itm);
  assign nl_loop2_inner_loop_acc_nl = loop2_inner_loop_loop2_inner_loop_mux_6_nl
      + loop2_inner_loop_loop2_inner_loop_mux_7_nl;
  assign loop2_inner_loop_acc_nl = nl_loop2_inner_loop_acc_nl[11:0];
  assign loop2_inner_loop_loop2_inner_loop_mux_nl = MUX_v_12_2_2(loop2_inner_loop_acc_nl,
      (z_out_13[11:0]), and_dcpl_205);
  assign and_245_nl = and_dcpl_210 & and_dcpl_207 & (~ exitL_exitL_exit_padding_loop2_sva)
      & Cal_weight_else_if_acc_itm_30_1;
  assign and_248_nl = and_dcpl_210 & and_dcpl_207 & (~(exitL_exitL_exit_padding_loop2_sva
      | Cal_weight_else_if_acc_itm_30_1));
  assign or_592_nl = (~ (lfst_exitL_exit_rawdns_process_for_lpi_1_1_0[1])) | lfst_exitL_exit_rawdns_process_for_lpi_1_2
      | sfi_rawdns_reg_eb_1_lpi_1 | (~ lfst_exitL_exitL_exit_rawdns_process_for_lpi_1)
      | (~ lfst_exitL_exitL_exitL_exit_rawdns_process_for_lpi_1) | exitL_exitL_exitL_exitL_exit_rawdns_process_for_lpi_1
      | (~ lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0);
  assign mux_229_nl = MUX_s_1_2_2(or_592_nl, lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0,
      lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_1);
  assign asn_operator_42_false_slc_operator_30_false_acc_psp_14_0_itm_1_nor_nl =
      ~(mux_229_nl | exitL_exitL_exit_padding_loop2_sva);
  assign or_595_nl = (~((~(or_dcpl_118 | (~(lfst_exitL_exit_rawdns_process_for_lpi_1_2
      | (lfst_exitL_exit_rawdns_process_for_lpi_1_1_0[1]))) | sfi_rawdns_reg_eb_1_lpi_1))
      | lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_1)) | exitL_exitL_exit_padding_loop2_sva;
  assign loop2_inner_loop_nor_3_nl = ~((loop2_inner_loop_acc_11_psp_mx0w0[2]) | (loop2_inner_loop_acc_11_psp_mx0w0[0])
      | (i_lpi_1[0]));
  assign padding_loop1_nor_1_nl = ~((pixel_loop_if_1_for_acc_11_psp_1[2:1]!=2'b00)
      | (padding_loop1_acc_3_psp_sva_1[0]));
  assign padding_loop1_nor_6_nl = ~((pixel_loop_if_1_for_acc_11_psp_1[1:0]!=2'b00)
      | (padding_loop1_acc_3_psp_sva_1[0]));
  assign pixel_loop_if_1_for_nor_1_nl = ~((pixel_loop_if_1_for_acc_11_psp_1[2:1]!=2'b00)
      | (j_lpi_1[0]));
  assign loop2_inner_loop_loop2_inner_loop_and_2_nl = (loop2_inner_loop_acc_11_psp_mx0w0[0])
      & (i_lpi_1[0]) & (loop2_inner_loop_acc_11_psp_mx0w0[2:1]==2'b00);
  assign padding_loop1_padding_loop1_and_2_nl = (pixel_loop_if_1_for_acc_11_psp_1[0])
      & (padding_loop1_acc_3_psp_sva_1[0]) & padding_loop1_nor_2_cse;
  assign pixel_loop_if_1_for_pixel_loop_if_1_for_and_5_nl = (pixel_loop_if_1_for_acc_11_psp_1[1:0]==2'b11)
      & (~((pixel_loop_if_1_for_acc_11_psp_1[2]) | (j_lpi_1[0])));
  assign loop2_inner_loop_loop2_inner_loop_and_5_nl = (loop2_inner_loop_acc_11_psp_mx0w0[1:0]==2'b11)
      & (~((loop2_inner_loop_acc_11_psp_mx0w0[2]) | (i_lpi_1[0])));
  assign padding_loop1_padding_loop1_and_5_nl = (pixel_loop_if_1_for_acc_11_psp_1[1:0]==2'b11)
      & (~((pixel_loop_if_1_for_acc_11_psp_1[2]) | (padding_loop1_acc_3_psp_sva_1[0])));
  assign pixel_loop_if_1_for_pixel_loop_if_1_for_and_8_nl = (pixel_loop_if_1_for_acc_11_psp_1[2])
      & (j_lpi_1[0]) & pixel_loop_if_1_for_nor_7_cse;
  assign loop2_inner_loop_loop2_inner_loop_and_8_nl = (loop2_inner_loop_acc_11_psp_mx0w0[2])
      & (i_lpi_1[0]) & (loop2_inner_loop_acc_11_psp_mx0w0[1:0]==2'b00);
  assign padding_loop1_padding_loop1_and_8_nl = (pixel_loop_if_1_for_acc_11_psp_1[2])
      & (padding_loop1_acc_3_psp_sva_1[0]) & pixel_loop_if_1_for_nor_7_cse;
  assign pixel_loop_if_1_aelse_not_12_nl = ~ sfi_pixel_loop_if_1_land_lpi_1;
  assign pixel_loop_if_1_for_pixel_loop_if_1_for_and_4_nl = (pixel_loop_if_1_for_acc_11_psp_1[1])
      & (j_lpi_1[0]) & pixel_loop_if_1_for_nor_4_cse;
  assign loop2_inner_loop_loop2_inner_loop_and_4_nl = (loop2_inner_loop_acc_11_psp_mx0w0[1])
      & (i_lpi_1[0]) & (~((loop2_inner_loop_acc_11_psp_mx0w0[2]) | (loop2_inner_loop_acc_11_psp_mx0w0[0])));
  assign padding_loop1_padding_loop1_and_4_nl = (pixel_loop_if_1_for_acc_11_psp_1[1])
      & (padding_loop1_acc_3_psp_sva_1[0]) & pixel_loop_if_1_for_nor_4_cse;
  assign pixel_loop_if_1_for_pixel_loop_if_1_for_and_6_nl = (pixel_loop_if_1_for_acc_11_psp_1[1:0]==2'b11)
      & (j_lpi_1[0]) & (~ (pixel_loop_if_1_for_acc_11_psp_1[2]));
  assign loop2_inner_loop_loop2_inner_loop_and_6_nl = (loop2_inner_loop_acc_11_psp_mx0w0[1:0]==2'b11)
      & (i_lpi_1[0]) & (~ (loop2_inner_loop_acc_11_psp_mx0w0[2]));
  assign padding_loop1_padding_loop1_and_6_nl = (pixel_loop_if_1_for_acc_11_psp_1[1:0]==2'b11)
      & (padding_loop1_acc_3_psp_sva_1[0]) & (~ (pixel_loop_if_1_for_acc_11_psp_1[2]));
  assign pixel_loop_if_1_for_pixel_loop_if_1_for_nor_1_nl = ~((pixel_loop_if_1_for_acc_11_psp_1!=3'b000)
      | (j_lpi_1[0]));
  assign and_254_nl = or_162_cse & and_dcpl_193;
  assign and_264_nl = and_dcpl_193 & (padding_loop2_mux_125_tmp==10'b0000000000);
  assign loop2_inner_loop_nor_6_nl = ~((loop2_inner_loop_acc_11_psp_mx0w0[1:0]!=2'b00)
      | (i_lpi_1[0]));
  assign padding_loop1_nor_3_nl = ~((pixel_loop_if_1_for_acc_11_psp_1[2]) | (pixel_loop_if_1_for_acc_11_psp_1[0])
      | (padding_loop1_acc_3_psp_sva_1[0]));
  assign Cal_weight_Cal_weight_Cal_weight_or_nl = (operator_26_false_operator_26_false_slc_ksigma2_mul_25_16_psp_lpi_1_dfm!=10'b0000000000);
  assign pixel_loop_if_1_for_pixel_loop_if_1_for_and_2_nl = (pixel_loop_if_1_for_acc_11_psp_1[0])
      & (j_lpi_1[0]) & padding_loop1_nor_2_cse;
  assign loop2_inner_loop_loop2_inner_loop_and_nl = (i_lpi_1[0]) & (loop2_inner_loop_acc_11_psp_mx0w0==3'b000);
  assign padding_loop1_padding_loop1_nor_nl = ~((pixel_loop_if_1_for_acc_11_psp_1!=3'b000)
      | (padding_loop1_acc_3_psp_sva_1[0]));
  assign and_270_nl = and_dcpl_199 & lfst_exit_rawdns_process_for_lpi_1 & lfst_exit_Cal_Eur_Distance_for_1_lpi_1_1
      & rawdns_process_for_for_asn_sft_lpi_1 & and_dcpl_196 & lfst_exit_rawdns_process_for_for_1_lpi_1
      & (~ lfst_exit_Cal_Eur_Distance_for_1_lpi_1_0);
  assign and_271_nl = (or_tmp_96 | (~(lfst_exit_Cal_Eur_Distance_for_1_lpi_1_1 &
      rawdns_process_for_for_asn_sft_lpi_1)) | or_dcpl_131 | (~ lfst_exit_rawdns_process_for_for_1_lpi_1)
      | lfst_exit_Cal_Eur_Distance_for_1_lpi_1_0) & lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0;
  assign nl_pixel_loop_if_1_for_1_acc_11_nl = conv_u2u_1_3(z_out_19[2]) + conv_u2u_2_3(z_out_19[1:0]);
  assign pixel_loop_if_1_for_1_acc_11_nl = nl_pixel_loop_if_1_for_1_acc_11_nl[2:0];
  assign loop2_inner_loop_or_5_nl = and_dcpl_205 | and_dcpl_219;
  assign nl_operator_13_false_1_acc_nl = ({1'b1 , (~ (j_lpi_1[12:1]))}) + 13'b0000000000101;
  assign operator_13_false_1_acc_nl = nl_operator_13_false_1_acc_nl[12:0];
  assign nl_operator_13_false_acc_nl = ({1'b1 , (~ (i_1_lpi_1_dfm_3[12:1]))}) + 13'b0000000000101;
  assign operator_13_false_acc_nl = nl_operator_13_false_acc_nl[12:0];
  assign pixel_loop_if_1_if_pixel_loop_if_1_if_and_nl = (readslicef_13_1_12(operator_13_false_1_acc_nl))
      & (readslicef_13_1_12(operator_13_false_acc_nl));
  assign pixel_loop_if_1_for_1_mux_1_nl = MUX_s_1_2_2(pixel_loop_if_1_if_pixel_loop_if_1_if_and_nl,
      pixel_loop_if_1_asn_sft_lpi_1_mx0, operator_4_false_3_acc_itm_3_1);
  assign rawdns_process_for_rawdns_process_for_mux_334_nl = MUX_s_1_2_2(pixel_loop_if_1_asn_sft_lpi_1_mx0,
      pixel_loop_if_1_for_1_mux_1_nl, rawdns_process_for_equal_tmp_5);
  assign pixel_loop_mux_747_nl = MUX_s_1_2_2(pixel_loop_if_1_asn_sft_lpi_1_mx0, rawdns_process_for_rawdns_process_for_mux_334_nl,
      pixel_loop_asn_sft_lpi_1_dfm_1_mx0);
  assign pixel_loop_pixel_loop_or_3_nl = sfi_rawdns_reg_eb_lpi_1 | exit_pixel_loop_lpi_1_dfm_1;
  assign padding_loop2_mux_255_nl = MUX_s_1_2_2(pixel_loop_pixel_loop_or_3_nl, sfi_rawdns_reg_eb_lpi_1,
      padding_loop2_equal_tmp_5);
  assign nl_pixel_loop_acc_3_nl = n_lpi_1_dfm_1 + 26'b00000000000000000000000001;
  assign pixel_loop_acc_3_nl = nl_pixel_loop_acc_3_nl[25:0];
  assign mux_256_nl = MUX_s_1_2_2(and_tmp_29, mux_tmp_253, nor_19_cse);
  assign mux_255_nl = MUX_s_1_2_2(mux_tmp_249, mux_tmp_253, nor_19_cse);
  assign mux_257_nl = MUX_s_1_2_2(mux_256_nl, mux_255_nl, or_78_cse);
  assign and_300_nl = operator_4_false_acc_itm_2_1 & operator_4_false_1_acc_itm_2_1
      & (~ sfi_pixel_loop_if_1_land_lpi_1) & lfst_exit_rawdns_process_for_lpi_1;
  assign mux_258_nl = MUX_s_1_2_2(mux_tmp_249, mux_257_nl, and_300_nl);
  assign mux_259_nl = MUX_s_1_2_2(mux_258_nl, or_tmp_303, lfst_exitL_exit_rawdns_process_for_lpi_1_1_0[0]);
  assign mux_260_nl = MUX_s_1_2_2(and_tmp_27, mux_259_nl, lfst_exitL_exit_rawdns_process_for_lpi_1_2);
  assign mux_246_nl = MUX_s_1_2_2(or_tmp_303, and_tmp_27, operator_4_false_2_acc_itm_3_1);
  assign mux_245_nl = MUX_s_1_2_2(or_tmp_303, and_tmp_27, operator_4_false_3_acc_itm_3_1);
  assign mux_247_nl = MUX_s_1_2_2(mux_246_nl, mux_245_nl, lfst_exitL_exit_rawdns_process_for_lpi_1_1_0[0]);
  assign mux_248_nl = MUX_s_1_2_2(mux_247_nl, or_tmp_303, lfst_exitL_exit_rawdns_process_for_lpi_1_2);
  assign mux_261_nl = MUX_s_1_2_2(mux_260_nl, mux_248_nl, lfst_exitL_exit_rawdns_process_for_lpi_1_1_0[1]);
  assign mux_262_nl = MUX_s_1_2_2(mux_261_nl, and_tmp_27, sfi_rawdns_reg_eb_1_lpi_1);
  assign mux_263_nl = MUX_s_1_2_2(and_tmp_29, mux_262_nl, pixel_loop_asn_sft_lpi_1);
  assign mux_264_nl = MUX_s_1_2_2(and_299_cse, mux_263_nl, lfst_exitL_exitL_exit_rawdns_process_for_lpi_1);
  assign mux_265_nl = MUX_s_1_2_2(mux_264_nl, or_tmp_303, pixel_loop_asn_sft_1_lpi_1);
  assign nl_pixel_loop_if_1_for_pixel_loop_if_1_for_conc_decb_3_1_sva_1  = (pixel_loop_if_1_for_pixel_loop_if_1_for_acc_tmp[3:1])
      + 3'b101;
  assign pixel_loop_if_1_aelse_not_14_nl = ~ sfi_pixel_loop_if_1_land_lpi_1;
  assign loop2_inner_loop_loop2_inner_loop_nor_nl = ~((loop2_inner_loop_acc_11_psp_mx0w0!=3'b000)
      | (i_lpi_1[0]));
  assign loop2_inner_loop_nor_1_nl = ~((loop2_inner_loop_acc_11_psp_mx0w0[2:1]!=2'b00)
      | (i_lpi_1[0]));
  assign and_3_nl = (padding_loop2_equal_tmp_7 | padding_loop2_equal_tmp_6) & asn_sft_lpi_1
      & padding_loop2_equal_tmp_4;
  assign nl_operator_13_false_3_acc_nl = ({1'b1 , (~ j_lpi_1)}) + 14'b00000000000101;
  assign operator_13_false_3_acc_nl = nl_operator_13_false_3_acc_nl[13:0];
  assign nl_operator_13_false_2_acc_nl = ({1'b1 , (~ (i_1_lpi_1_dfm_3[12:1]))}) +
      13'b0000000000011;
  assign operator_13_false_2_acc_nl = nl_operator_13_false_2_acc_nl[12:0];
  assign pixel_loop_if_1_if_1_or_nl = (loop2_inner_loop_loop2_inner_loop_and_6_itm_2
      & dst_rsci_idat_mx0c2) | (loop2_inner_loop_loop2_inner_loop_nor_itm_2 & dst_rsci_idat_mx0c3);
  assign pixel_loop_if_1_if_1_or_1_nl = (padding_loop1_acc_3_psp_sva_2_0 & padding_loop1_nor_itm_2
      & dst_rsci_idat_mx0c2) | (loop2_inner_loop_loop2_inner_loop_and_itm_2 & dst_rsci_idat_mx0c3);
  assign pixel_loop_if_1_if_1_or_2_nl = (pixel_loop_if_1_for_pixel_loop_if_1_for_and_17
      & dst_rsci_idat_mx0c2) | (lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_2_2
      & dst_rsci_idat_mx0c3);
  assign pixel_loop_if_1_if_1_or_3_nl = (lfst_exitL_exit_rawdns_process_for_lpi_1_dfm_st_2_2
      & dst_rsci_idat_mx0c2) | (loop2_inner_loop_loop2_inner_loop_and_2_itm_2 & dst_rsci_idat_mx0c3);
  assign pixel_loop_if_1_if_1_or_4_nl = (pixel_loop_if_1_for_pixel_loop_if_1_for_and_19
      & dst_rsci_idat_mx0c2) | (loop2_inner_loop_loop2_inner_loop_and_3_itm_1 & dst_rsci_idat_mx0c3);
  assign pixel_loop_if_1_if_1_or_5_nl = (loop2_inner_loop_loop2_inner_loop_and_2_itm_2
      & dst_rsci_idat_mx0c2) | (loop2_inner_loop_loop2_inner_loop_and_4_itm_2 & dst_rsci_idat_mx0c3);
  assign pixel_loop_if_1_if_1_or_6_nl = (loop2_inner_loop_loop2_inner_loop_and_3_itm_1
      & dst_rsci_idat_mx0c2) | (loop2_inner_loop_loop2_inner_loop_and_5_itm_2 & dst_rsci_idat_mx0c3);
  assign pixel_loop_if_1_if_1_or_7_nl = (loop2_inner_loop_loop2_inner_loop_and_4_itm_2
      & dst_rsci_idat_mx0c2) | (loop2_inner_loop_loop2_inner_loop_and_6_itm_2 & dst_rsci_idat_mx0c3);
  assign pixel_loop_if_1_if_1_or_8_nl = (pixel_loop_if_1_for_pixel_loop_if_1_for_and_21
      & dst_rsci_idat_mx0c2) | (loop2_inner_loop_loop2_inner_loop_and_7_itm_1 & dst_rsci_idat_mx0c3);
  assign pixel_loop_if_1_if_1_or_9_nl = (loop2_inner_loop_loop2_inner_loop_and_5_itm_2
      & dst_rsci_idat_mx0c2) | (loop2_inner_loop_loop2_inner_loop_and_8_itm_2 & dst_rsci_idat_mx0c3);
  assign or_405_nl = (rawdns_process_l_3_1_lpi_1!=3'b010) | (rawdns_process_k_3_1_lpi_1!=3'b010)
      | (~ mux_tmp_213);
  assign or_403_nl = rawdns_process_for_for_lor_lpi_1 | (~ mux_tmp_213);
  assign nand_73_nl = ~(operator_4_true_2_acc_tmp_2 & operator_4_true_3_acc_tmp_2
      & lfst_exit_Cal_Eur_Distance_for_1_lpi_1_1 & (~ lfst_exit_Cal_Eur_Distance_for_1_lpi_1_0)
      & mux_tmp_213);
  assign mux_215_nl = MUX_s_1_2_2((~ mux_tmp_213), nand_73_nl, rawdns_process_for_for_asn_sft_lpi_1);
  assign mux_216_nl = MUX_s_1_2_2(or_403_nl, mux_215_nl, lfst_exitL_exit_Cal_Eur_Distance_for_1_lpi_1);
  assign mux_217_nl = MUX_s_1_2_2(or_405_nl, mux_216_nl, nor_19_cse);
  assign pixel_loop_if_1_for_1_pixel_loop_if_1_for_1_or_nl = sfi_pixel_loop_if_1_land_lpi_1
      | (~ operator_4_false_3_acc_itm_3_1);
  assign rawdns_process_for_mux_24_nl = MUX_s_1_2_2(sfi_pixel_loop_if_1_land_lpi_1,
      pixel_loop_if_1_for_1_pixel_loop_if_1_for_1_or_nl, rawdns_process_for_equal_tmp_5);
  assign Cal_Eur_Distance_for_1_and_47_nl = Cal_Eur_Distance_for_1_for_and_19_ssc_sva_1_1
      & (~ Cal_Eur_Distance_for_1_equal_tmp_2);
  assign Cal_Eur_Distance_for_1_mux_18_nl = MUX_v_12_2_2(Cal_Eur_Distance_temp_block_0_0_23_12_lpi_1,
      (Cal_Eur_Distance_for_1_for_mul_3_cse_sva_1[23:12]), Cal_Eur_Distance_for_1_and_47_nl);
  assign Cal_Eur_Distance_for_1_not_45_nl = ~ Cal_Eur_Distance_for_1_or_tmp_1;
  assign Cal_Eur_Distance_for_1_and_48_nl = Cal_Eur_Distance_for_1_for_and_17_ssc_sva_1_1
      & (~ Cal_Eur_Distance_for_1_equal_tmp_2);
  assign Cal_Eur_Distance_for_1_mux_19_nl = MUX_v_12_2_2(Cal_Eur_Distance_temp_block_0_1_23_12_lpi_1,
      (Cal_Eur_Distance_for_1_for_mul_3_cse_sva_1[23:12]), Cal_Eur_Distance_for_1_and_48_nl);
  assign Cal_Eur_Distance_for_1_not_62_nl = ~ Cal_Eur_Distance_for_1_or_tmp_1;
  assign Cal_Eur_Distance_for_1_and_49_nl = Cal_Eur_Distance_for_1_for_and_15_ssc_sva_1_1
      & (~ Cal_Eur_Distance_for_1_equal_tmp_2);
  assign Cal_Eur_Distance_for_1_mux_20_nl = MUX_v_12_2_2(Cal_Eur_Distance_temp_block_0_2_23_12_lpi_1,
      (Cal_Eur_Distance_for_1_for_mul_3_cse_sva_1[23:12]), Cal_Eur_Distance_for_1_and_49_nl);
  assign Cal_Eur_Distance_for_1_not_61_nl = ~ Cal_Eur_Distance_for_1_or_tmp_1;
  assign Cal_Eur_Distance_for_1_and_50_nl = Cal_Eur_Distance_for_1_for_and_13_ssc_sva_1_1
      & (~ Cal_Eur_Distance_for_1_equal_tmp_2);
  assign Cal_Eur_Distance_for_1_mux_21_nl = MUX_v_12_2_2(Cal_Eur_Distance_temp_block_1_0_23_12_lpi_1,
      (Cal_Eur_Distance_for_1_for_mul_3_cse_sva_1[23:12]), Cal_Eur_Distance_for_1_and_50_nl);
  assign Cal_Eur_Distance_for_1_not_60_nl = ~ Cal_Eur_Distance_for_1_or_tmp_1;
  assign Cal_Eur_Distance_for_1_and_51_nl = Cal_Eur_Distance_for_1_for_and_12_ssc_sva_1_1
      & (~ Cal_Eur_Distance_for_1_equal_tmp_2);
  assign Cal_Eur_Distance_for_1_mux_22_nl = MUX_v_12_2_2(Cal_Eur_Distance_temp_block_1_1_23_12_lpi_1,
      (Cal_Eur_Distance_for_1_for_mul_3_cse_sva_1[23:12]), Cal_Eur_Distance_for_1_and_51_nl);
  assign Cal_Eur_Distance_for_1_not_59_nl = ~ Cal_Eur_Distance_for_1_or_tmp_1;
  assign Cal_Eur_Distance_for_1_and_52_nl = Cal_Eur_Distance_for_1_for_and_14_ssc_sva_1_1
      & (~ Cal_Eur_Distance_for_1_equal_tmp_2);
  assign Cal_Eur_Distance_for_1_mux_23_nl = MUX_v_12_2_2(Cal_Eur_Distance_temp_block_1_2_23_12_lpi_1,
      (Cal_Eur_Distance_for_1_for_mul_3_cse_sva_1[23:12]), Cal_Eur_Distance_for_1_and_52_nl);
  assign Cal_Eur_Distance_for_1_not_58_nl = ~ Cal_Eur_Distance_for_1_or_tmp_1;
  assign Cal_Eur_Distance_for_1_and_53_nl = Cal_Eur_Distance_for_1_for_and_16_ssc_sva_1_1
      & (~ Cal_Eur_Distance_for_1_equal_tmp_2);
  assign Cal_Eur_Distance_for_1_mux_24_nl = MUX_v_12_2_2(Cal_Eur_Distance_temp_block_2_0_23_12_lpi_1,
      (Cal_Eur_Distance_for_1_for_mul_3_cse_sva_1[23:12]), Cal_Eur_Distance_for_1_and_53_nl);
  assign Cal_Eur_Distance_for_1_not_57_nl = ~ Cal_Eur_Distance_for_1_or_tmp_1;
  assign Cal_Eur_Distance_for_1_and_54_nl = Cal_Eur_Distance_for_1_for_and_18_ssc_sva_1_1
      & (~ Cal_Eur_Distance_for_1_equal_tmp_2);
  assign Cal_Eur_Distance_for_1_mux_25_nl = MUX_v_12_2_2(Cal_Eur_Distance_temp_block_2_1_23_12_lpi_1,
      (Cal_Eur_Distance_for_1_for_mul_3_cse_sva_1[23:12]), Cal_Eur_Distance_for_1_and_54_nl);
  assign Cal_Eur_Distance_for_1_not_56_nl = ~ Cal_Eur_Distance_for_1_or_tmp_1;
  assign Cal_Eur_Distance_for_1_and_55_nl = Cal_Eur_Distance_for_1_for_and_20_ssc_sva_1_1
      & (~ Cal_Eur_Distance_for_1_equal_tmp_2);
  assign Cal_Eur_Distance_for_1_mux_26_nl = MUX_v_12_2_2(Cal_Eur_Distance_temp_block_2_2_23_12_lpi_1,
      (Cal_Eur_Distance_for_1_for_mul_3_cse_sva_1[23:12]), Cal_Eur_Distance_for_1_and_55_nl);
  assign Cal_Eur_Distance_for_1_not_55_nl = ~ Cal_Eur_Distance_for_1_or_tmp_1;
  assign mux_232_nl = MUX_s_1_2_2(mux_tmp_230, and_311_cse, lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_1);
  assign nor_94_nl = ~(pixel_loop_asn_sft_lpi_1 | (~ lfst_exitL_exitL_exit_rawdns_process_for_lpi_1)
      | (~ lfst_exitL_exitL_exitL_exit_rawdns_process_for_lpi_1));
  assign mux_240_nl = MUX_s_1_2_2(or_tmp_292, and_tmp_24, nor_94_nl);
  assign mux_241_nl = MUX_s_1_2_2(mux_240_nl, mux_tmp_224, pixel_loop_asn_sft_1_lpi_1);
  assign mux_242_nl = MUX_s_1_2_2((~ or_dcpl_128), mux_241_nl, rawdns_reg_eb);
  assign mux_243_nl = MUX_s_1_2_2(mux_242_nl, and_446_cse, exitL_exitL_exit_padding_loop2_sva);
  assign and_447_nl = exitL_exitL_exit_padding_loop2_sva & rawdns_reg_eb & pixel_loop_acc_4_itm_26_1;
  assign mux_244_nl = MUX_s_1_2_2(mux_243_nl, and_447_nl, lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_1);
  assign rawdns_process_for_rawdns_process_for_reg_refresh_out_loop_not_3_nl = ~
      exit_reg_refresh_out_loop_lpi_1_dfm_3;
  assign reg_refresh_out_loop_reg_refresh_out_loop_and_1_nl = MUX_v_4_2_2(4'b0000,
      l_2_lpi_1, rawdns_process_for_rawdns_process_for_reg_refresh_out_loop_not_3_nl);
  assign pixel_loop_if_1_for_pixel_loop_if_1_for_and_15_nl = MUX_v_4_2_2(4'b0000,
      l_lpi_1, operator_4_false_2_acc_itm_3_1);
  assign mux_274_nl = MUX_v_13_2_2(z_out_10, i_lpi_1, or_dcpl_355);
  assign nor_225_nl = ~(padding_loop2_and_332_rgt | or_dcpl_355 | or_dcpl_356);
  assign nor_222_nl = ~(MUX_v_13_2_2(mux_274_nl, 13'b1111111111111, nor_225_nl));
  assign nl_j_lpi_1  = (n_lpi_1_dfm_1[12:0]) - z_out;
  assign and_297_nl = sfi_rawdns_reg_eb_1_lpi_1 & pixel_loop_asn_sft_lpi_1;
  assign mux_266_nl = MUX_s_1_2_2(rawdns_reg_eb, and_297_nl, lfst_exitL_exitL_exit_rawdns_process_for_lpi_1);
  assign nor_106_nl = ~(pixel_loop_asn_sft_1_lpi_1 | (~ mux_266_nl));
  assign mux_267_nl = MUX_s_1_2_2(rawdns_reg_eb, nor_106_nl, lfst_exitL_exitL_exitL_exit_rawdns_process_for_lpi_1);
  assign mux_268_nl = MUX_s_1_2_2(and_446_cse, mux_267_nl, lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0);
  assign mux_269_nl = MUX_s_1_2_2(mux_268_nl, and_446_cse, exitL_exitL_exitL_exitL_exit_rawdns_process_for_lpi_1);
  assign nor_105_nl = ~(lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_1 | (~ mux_269_nl));
  assign mux_270_nl = MUX_s_1_2_2(nor_105_nl, and_446_cse, exitL_exitL_exit_padding_loop2_sva);
  assign padding_loop1_padding_loop1_and_16_nl = MUX_v_3_2_2(3'b000, k_2_0_lpi_1,
      operator_4_false_4_acc_itm_2_1);
  assign rawdns_process_sigma2_and_3_nl = (~ or_379_tmp) & or_dcpl_361;
  assign rawdns_process_sigma2_and_4_nl = or_379_tmp & or_dcpl_361;
  assign rawdns_process_sigma2_rawdns_process_sigma2_mux1h_1_nl = MUX1HOT_v_13_3_2(({7'b0000000
      , rawdns_reg_sigma}), z_out_10, i_1_lpi_1_dfm_3, {(~ or_dcpl_361) , rawdns_process_sigma2_and_3_nl
      , rawdns_process_sigma2_and_4_nl});
  assign rawdns_process_sigma2_mux_2_nl = MUX_v_13_2_2(({7'b0000000 , rawdns_reg_sigma}),
      top_reg_frameWidth, or_dcpl_361);
  assign nl_z_out = rawdns_process_sigma2_rawdns_process_sigma2_mux1h_1_nl * rawdns_process_sigma2_mux_2_nl;
  assign z_out = nl_z_out[12:0];
  assign nl_operator_4_true_3_acc_1_nl = conv_u2s_2_4({operator_4_true_2_xor_psp_sva_1
      , (~ (Cal_Eur_Distance_k_1_1_0_lpi_1_dfm_1[0]))}) + conv_s2s_2_4({Cal_Eur_Distance_l_1_1_0_lpi_1_dfm_1_1
      , Cal_Eur_Distance_l_1_1_0_lpi_1_dfm_0_1});
  assign operator_4_true_3_acc_1_nl = nl_operator_4_true_3_acc_1_nl[3:0];
  assign operator_4_true_3_mux_2_nl = MUX_v_4_2_2(({2'b10 , (padding_loop1_acc_3_psp_sva_1[2:1])}),
      operator_4_true_3_acc_1_nl, lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0);
  assign operator_4_true_3_mux_3_nl = MUX_v_3_2_2(z_out_17, ({operator_4_true_2_xor_psp_sva_1
      , (~ (Cal_Eur_Distance_k_1_1_0_lpi_1_dfm_1[0])) , 1'b1}), lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0);
  assign nl_z_out_1 = operator_4_true_3_mux_2_nl + conv_u2u_3_4(operator_4_true_3_mux_3_nl);
  assign z_out_1 = nl_z_out_1[3:0];
  assign nl_padding_loop1_acc_25_nl = conv_u2u_3_4({(~ (z_out_6[4])) , (~ (padding_loop1_acc_3_psp_sva_1[6:5]))})
      + conv_u2u_2_4(z_out_6[3:2]);
  assign padding_loop1_acc_25_nl = nl_padding_loop1_acc_25_nl[3:0];
  assign nl_padding_loop1_acc_24_nl = conv_u2s_4_5(padding_loop1_acc_25_nl) + conv_s2s_3_5(padding_loop1_acc_3_psp_sva_1[13:11]);
  assign padding_loop1_acc_24_nl = nl_padding_loop1_acc_24_nl[4:0];
  assign Cal_Eur_Distance_for_for_mux_19_nl = MUX_v_5_2_2(padding_loop1_acc_24_nl,
      ({(z_out_6[2:0]) , (rawdns_process_l_3_1_lpi_1_dfm_3[2:1])}), lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0);
  assign Cal_Eur_Distance_for_for_mux_20_nl = MUX_v_5_2_2((~ (padding_loop1_acc_3_psp_sva_1[13:9])),
      5'b01101, lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0);
  assign nl_z_out_2 = Cal_Eur_Distance_for_for_mux_19_nl + Cal_Eur_Distance_for_for_mux_20_nl;
  assign z_out_2 = nl_z_out_2[4:0];
  assign pixel_loop_if_1_for_mux_34_nl = MUX_s_1_2_2((~ (operator_4_false_2_acc_psp_sva_1[3])),
      (~ (z_out_15[3])), lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0);
  assign pixel_loop_if_1_for_mux_37_nl = MUX_v_2_2_2((i_lpi_1[2:1]), (j_lpi_1[2:1]),
      lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0);
  assign nl_loop2_inner_loop_acc_28_nl = conv_u2u_2_3({(~ (operator_4_false_2_acc_psp_sva_1[0]))
      , (~ (i_lpi_1[11]))}) + conv_u2u_2_3(operator_4_false_2_acc_psp_sva_1[2:1]);
  assign loop2_inner_loop_acc_28_nl = nl_loop2_inner_loop_acc_28_nl[2:0];
  assign pixel_loop_if_1_for_mux_36_nl = MUX_v_3_2_2(loop2_inner_loop_acc_28_nl,
      z_out_17, lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0);
  assign pixel_loop_if_1_for_mux_35_nl = MUX_v_4_2_2((z_out_15[3:0]), pixel_loop_if_1_for_acc_32,
      lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0);
  assign nl_z_out_3 = conv_u2u_1_5(pixel_loop_if_1_for_mux_34_nl) + conv_u2u_2_5(pixel_loop_if_1_for_mux_37_nl)
      + conv_u2u_3_5(pixel_loop_if_1_for_mux_36_nl) + conv_u2u_4_5(pixel_loop_if_1_for_mux_35_nl)
      + 5'b10110;
  assign z_out_3 = nl_z_out_3[4:0];
  assign Cal_Eur_Distance_for_for_or_4_nl = and_374_cse | and_375_cse | and_382_cse;
  assign Cal_Eur_Distance_for_for_Cal_Eur_Distance_for_for_Cal_Eur_Distance_for_for_nor_1_nl
      = ~(MUX_v_3_2_2((padding_loop1_acc_3_psp_sva_1[13:11]), 3'b111, Cal_Eur_Distance_for_for_or_4_nl));
  assign Cal_Eur_Distance_for_for_mux1h_16_nl = MUX1HOT_v_5_4_2(z_out_2, (z_out_6[6:2]),
      (z_out_6[5:1]), ({(~ (padding_loop1_acc_3_psp_sva_1[10:7])) , 1'b1}), {and_374_cse
      , and_375_cse , and_382_cse , (~ lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0)});
  assign Cal_Eur_Distance_for_for_mux1h_17_nl = MUX1HOT_s_1_4_2((rawdns_process_l_3_1_lpi_1_dfm_3[0]),
      (z_out_6[1]), (z_out_6[0]), (~ (z_out_20[2])), {and_374_cse , and_375_cse ,
      and_382_cse , (~ lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0)});
  assign Cal_Eur_Distance_for_for_mux1h_18_nl = MUX1HOT_v_7_4_2(({1'b0 , z_out_7}),
      7'b0000101, ({4'b1100 , (~ rawdns_process_k_3_1_lpi_1_dfm_1)}), z_out_11, {and_374_cse
      , and_375_cse , and_382_cse , (~ lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0)});
  assign nl_z_out_5 = ({Cal_Eur_Distance_for_for_Cal_Eur_Distance_for_for_Cal_Eur_Distance_for_for_nor_1_nl
      , Cal_Eur_Distance_for_for_mux1h_16_nl , Cal_Eur_Distance_for_for_mux1h_17_nl})
      + conv_s2u_7_9(Cal_Eur_Distance_for_for_mux1h_18_nl);
  assign z_out_5 = nl_z_out_5[8:0];
  assign rawdns_process_for_for_if_mux1h_2_nl = MUX1HOT_v_7_4_2(({1'b0 , (rawdns_process_k_3_1_lpi_1_dfm_1[1:0])
      , 1'b0 , rawdns_process_l_3_1_lpi_1_dfm_3}), ({3'b000 , rawdns_process_k_3_1_lpi_1_dfm_1
      , 1'b1}), ({z_out_15 , 2'b01}), ({{3{z_out_1[3]}}, z_out_1}), {and_382_cse
      , and_374_cse , and_375_cse , (~ lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0)});
  assign rawdns_process_for_for_if_mux1h_3_nl = MUX1HOT_v_7_4_2(({2'b00 , (~ rawdns_process_k_3_1_lpi_1_dfm_1)
      , 2'b11}), ({{5{Cal_Eur_Distance_k_1_1_0_lpi_1_dfm_1[1]}}, Cal_Eur_Distance_k_1_1_0_lpi_1_dfm_1}),
      ({3'b011 , (~ operator_4_false_1_acc_cse_sva_1)}), ({{3{z_out_18[3]}}, z_out_18}),
      {and_382_cse , and_374_cse , and_375_cse , (~ lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0)});
  assign nl_z_out_6 = rawdns_process_for_for_if_mux1h_2_nl + rawdns_process_for_for_if_mux1h_3_nl;
  assign z_out_6 = nl_z_out_6[6:0];
  assign Cal_Eur_Distance_for_for_mux1h_19_nl = MUX1HOT_s_1_4_2((~ (z_out_6[3])),
      (operator_4_false_2_acc_psp_sva_1[3]), (pixel_loop_if_1_for_1_acc_psp_sva_1[3]),
      (z_out_15[3]), {and_dcpl_300 , (~ lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0)
      , and_dcpl_302 , and_dcpl_303});
  assign Cal_Eur_Distance_for_for_or_5_nl = and_dcpl_302 | and_dcpl_303;
  assign Cal_Eur_Distance_for_for_mux1h_20_nl = MUX1HOT_v_4_3_2(({(~ (z_out_6[2:0]))
      , 1'b1}), (i_lpi_1[6:3]), (j_lpi_1[6:3]), {and_dcpl_300 , (~ lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0)
      , Cal_Eur_Distance_for_for_or_5_nl});
  assign Cal_Eur_Distance_for_for_Cal_Eur_Distance_for_for_mux_2_nl = MUX_s_1_2_2((z_out_3[4]),
      (pixel_loop_if_1_for_1_acc_9_psp_sva_1[4]), and_dcpl_302);
  assign Cal_Eur_Distance_for_for_and_23_nl = Cal_Eur_Distance_for_for_Cal_Eur_Distance_for_for_mux_2_nl
      & (~ and_dcpl_300);
  assign Cal_Eur_Distance_for_for_or_6_nl = (~ lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0)
      | and_dcpl_302 | and_dcpl_303;
  assign Cal_Eur_Distance_for_for_Cal_Eur_Distance_for_for_mux_3_nl = MUX_v_4_2_2((z_out_19[4:1]),
      z_out_18, Cal_Eur_Distance_for_for_or_6_nl);
  assign nl_acc_6_nl = conv_u2u_6_7({Cal_Eur_Distance_for_for_mux1h_19_nl , Cal_Eur_Distance_for_for_mux1h_20_nl
      , Cal_Eur_Distance_for_for_and_23_nl}) + conv_u2u_5_7({Cal_Eur_Distance_for_for_Cal_Eur_Distance_for_for_mux_3_nl
      , 1'b1});
  assign acc_6_nl = nl_acc_6_nl[6:0];
  assign z_out_7 = readslicef_7_6_1(acc_6_nl);
  assign pixel_loop_if_1_for_1_mux_3_nl = MUX_s_1_2_2((i_lpi_1[12]), (i_1_lpi_1_dfm_3[12]),
      or_724_cse);
  assign pixel_loop_if_1_for_1_pixel_loop_if_1_for_1_and_1_nl = pixel_loop_if_1_for_1_mux_3_nl
      & (~(and_dcpl_311 | and_dcpl_313));
  assign pixel_loop_if_1_for_1_mux1h_7_nl = MUX1HOT_v_3_4_2((pixel_loop_if_1_for_1_acc_psp_sva_1[2:0]),
      (z_out_15[2:0]), (i_lpi_1[11:9]), (i_1_lpi_1_dfm_3[11:9]), {and_dcpl_311 ,
      and_dcpl_313 , and_dcpl_315 , or_724_cse});
  assign pixel_loop_if_1_for_1_mux1h_8_nl = MUX1HOT_s_1_3_2((j_lpi_1[11]), (i_lpi_1[8]),
      (i_1_lpi_1_dfm_3[8]), {pixel_loop_if_1_for_1_or_1_itm , and_dcpl_315 , or_724_cse});
  assign pixel_loop_if_1_for_1_mux1h_9_nl = MUX1HOT_v_3_4_2((pixel_loop_if_1_for_1_acc_psp_sva_1[2:0]),
      (z_out_15[2:0]), (i_lpi_1[7:5]), (i_1_lpi_1_dfm_3[7:5]), {and_dcpl_311 , and_dcpl_313
      , and_dcpl_315 , or_724_cse});
  assign pixel_loop_if_1_for_1_mux1h_10_nl = MUX1HOT_s_1_3_2((j_lpi_1[11]), (i_lpi_1[4]),
      (i_1_lpi_1_dfm_3[4]), {pixel_loop_if_1_for_1_or_1_itm , and_dcpl_315 , or_724_cse});
  assign pixel_loop_if_1_for_1_mux1h_11_nl = MUX1HOT_v_3_4_2((pixel_loop_if_1_for_1_acc_psp_sva_1[2:0]),
      (z_out_15[2:0]), (i_lpi_1[3:1]), (i_1_lpi_1_dfm_3[3:1]), {and_dcpl_311 , and_dcpl_313
      , and_dcpl_315 , or_724_cse});
  assign pixel_loop_if_1_for_1_mux1h_12_nl = MUX1HOT_s_1_3_2((j_lpi_1[11]), (i_lpi_1[0]),
      (i_1_lpi_1_dfm_3[0]), {pixel_loop_if_1_for_1_or_1_itm , and_dcpl_315 , or_724_cse});
  assign pixel_loop_if_1_for_1_or_4_nl = and_dcpl_315 | or_724_cse;
  assign pixel_loop_if_1_for_1_mux1h_13_nl = MUX1HOT_v_2_3_2((pixel_loop_if_1_for_1_acc_9_psp_sva_1[3:2]),
      (z_out_3[3:2]), 2'b01, {and_dcpl_311 , and_dcpl_313 , pixel_loop_if_1_for_1_or_4_nl});
  assign nl_z_out_10 = ({pixel_loop_if_1_for_1_pixel_loop_if_1_for_1_and_1_nl , pixel_loop_if_1_for_1_mux1h_7_nl
      , pixel_loop_if_1_for_1_mux1h_8_nl , pixel_loop_if_1_for_1_mux1h_9_nl , pixel_loop_if_1_for_1_mux1h_10_nl
      , pixel_loop_if_1_for_1_mux1h_11_nl , pixel_loop_if_1_for_1_mux1h_12_nl}) +
      conv_u2u_11_13(signext_11_9({pixel_loop_if_1_for_1_pixel_loop_if_1_for_1_or_1_cse
      , 1'b0 , pixel_loop_if_1_for_1_pixel_loop_if_1_for_1_or_1_cse , pixel_loop_if_1_for_1_pixel_loop_if_1_for_1_or_1_cse
      , pixel_loop_if_1_for_1_pixel_loop_if_1_for_1_or_1_cse , 1'b0 , pixel_loop_if_1_for_1_pixel_loop_if_1_for_1_or_1_cse
      , pixel_loop_if_1_for_1_mux1h_13_nl}));
  assign z_out_10 = nl_z_out_10[12:0];
  assign padding_loop1_mux_2_nl = MUX_v_7_2_2(({(padding_loop1_acc_3_psp_sva_1[13:11])
      , (padding_loop1_acc_3_psp_sva_1[6:3])}), operator_4_false_mul_cse_sva_1, or_231_cse);
  assign padding_loop1_or_1_nl = (~((~ exitL_exitL_exit_padding_loop2_sva) & lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_1))
      | or_231_cse;
  assign padding_loop1_mux_3_nl = MUX_v_5_2_2(z_out_2, ({1'b0 , l_1_lpi_1_dfm_2}),
      or_231_cse);
  assign nl_acc_10_nl = ({padding_loop1_mux_2_nl , padding_loop1_or_1_nl}) + conv_s2u_6_8({padding_loop1_mux_3_nl
      , 1'b1});
  assign acc_10_nl = nl_acc_10_nl[7:0];
  assign z_out_11 = readslicef_8_7_1(acc_10_nl);
  assign loop2_inner_loop_loop2_inner_loop_and_19_nl = MUX_v_2_2_2(2'b00, (padding_loop1_acc_3_psp_sva_1[13:12]),
      loop2_inner_loop_nor_9_itm);
  assign loop2_inner_loop_mux1h_53_nl = MUX1HOT_s_1_4_2((operator_4_false_2_acc_psp_sva_1[3]),
      (padding_loop1_acc_3_psp_sva_1[11]), (pixel_loop_if_1_for_1_acc_psp_sva_1[3]),
      (z_out_15[3]), {and_dcpl_204 , nor_237_cse , and_dcpl_304 , and_dcpl_305});
  assign loop2_inner_loop_loop2_inner_loop_and_20_nl = (z_out_5[8]) & loop2_inner_loop_nor_9_itm;
  assign loop2_inner_loop_mux1h_51_nl = MUX1HOT_s_1_3_2((~ (operator_4_false_2_acc_psp_sva_1[3])),
      (~ (pixel_loop_if_1_for_1_acc_psp_sva_1[3])), (~ (z_out_15[3])), {(~ lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0)
      , and_dcpl_304 , and_dcpl_305});
  assign loop2_inner_loop_loop2_inner_loop_mux_5_nl = MUX_v_4_2_2((~ (i_lpi_1[10:7])),
      (~ (j_lpi_1[10:7])), loop2_inner_loop_or_6_itm);
  assign loop2_inner_loop_mux1h_52_nl = MUX1HOT_v_2_3_2((~ (operator_4_false_2_acc_psp_sva_1[2:1])),
      (~ (pixel_loop_if_1_for_1_acc_psp_sva_1[2:1])), (~ (z_out_15[2:1])), {(~ lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0)
      , and_dcpl_304 , and_dcpl_305});
  assign nl_loop2_inner_loop_acc_30_nl = conv_u2u_7_8({loop2_inner_loop_mux1h_51_nl
      , loop2_inner_loop_loop2_inner_loop_mux_5_nl , loop2_inner_loop_mux1h_52_nl})
      + conv_u2u_6_8(z_out_7);
  assign loop2_inner_loop_acc_30_nl = nl_loop2_inner_loop_acc_30_nl[7:0];
  assign loop2_inner_loop_loop2_inner_loop_mux_8_nl = MUX_v_8_2_2(loop2_inner_loop_acc_30_nl,
      (z_out_5[7:0]), nor_237_cse);
  assign nl_z_out_12 = ({loop2_inner_loop_loop2_inner_loop_and_19_nl , loop2_inner_loop_mux1h_53_nl
      , loop2_inner_loop_mux1h_43_cse , loop2_inner_loop_mux1h_43_cse}) + conv_s2u_9_11({loop2_inner_loop_loop2_inner_loop_and_20_nl
      , loop2_inner_loop_loop2_inner_loop_mux_8_nl});
  assign z_out_12 = nl_z_out_12[10:0];
  assign loop2_inner_loop_mux_3_nl = MUX_v_2_2_2((signext_2_1(z_out_12[10])), (count_lpi_1_dfm_1[12:11]),
      or_724_cse);
  assign nor_246_nl = ~((or_724_cse & pixel_loop_equal_1_tmp) | and_dcpl_333 | and_dcpl_331
      | and_295_cse);
  assign and_450_nl = MUX_v_2_2_2(2'b00, loop2_inner_loop_mux_3_nl, nor_246_nl);
  assign pixel_loop_if_not_9_nl = ~ pixel_loop_equal_1_tmp;
  assign pixel_loop_pixel_loop_and_13_nl = MUX_v_4_2_2(4'b0000, (count_lpi_1_dfm_1[10:7]),
      pixel_loop_if_not_9_nl);
  assign loop2_inner_loop_mux1h_54_nl = MUX1HOT_v_4_5_2((~ operator_4_false_2_acc_psp_sva_1),
      (z_out_12[10:7]), (~ pixel_loop_if_1_for_1_acc_psp_sva_1), (~ (z_out_15[3:0])),
      pixel_loop_pixel_loop_and_13_nl, {and_295_cse , and_296_cse , and_dcpl_331
      , and_dcpl_333 , or_724_cse});
  assign pixel_loop_pixel_loop_and_14_nl = (count_lpi_1_dfm_1[6]) & (~ pixel_loop_equal_1_tmp);
  assign loop2_inner_loop_mux1h_55_nl = MUX1HOT_s_1_4_2((~ (i_lpi_1[11])), (z_out_12[6]),
      (~ (j_lpi_1[11])), pixel_loop_pixel_loop_and_14_nl, {and_295_cse , and_296_cse
      , loop2_inner_loop_or_9_itm , or_724_cse});
  assign pixel_loop_if_not_11_nl = ~ pixel_loop_equal_1_tmp;
  assign pixel_loop_pixel_loop_and_15_nl = MUX_v_3_2_2(3'b000, (count_lpi_1_dfm_1[5:3]),
      pixel_loop_if_not_11_nl);
  assign loop2_inner_loop_mux1h_56_nl = MUX1HOT_v_3_5_2((~ (operator_4_false_2_acc_psp_sva_1[2:0])),
      (z_out_12[5:3]), (~ (pixel_loop_if_1_for_1_acc_psp_sva_1[2:0])), (~ (z_out_15[2:0])),
      pixel_loop_pixel_loop_and_15_nl, {and_295_cse , and_296_cse , and_dcpl_331
      , and_dcpl_333 , or_724_cse});
  assign pixel_loop_pixel_loop_and_16_nl = (count_lpi_1_dfm_1[2]) & (~ pixel_loop_equal_1_tmp);
  assign loop2_inner_loop_mux1h_57_nl = MUX1HOT_s_1_4_2((~ (i_lpi_1[11])), (z_out_12[2]),
      (~ (j_lpi_1[11])), pixel_loop_pixel_loop_and_16_nl, {and_295_cse , and_296_cse
      , loop2_inner_loop_or_9_itm , or_724_cse});
  assign pixel_loop_pixel_loop_and_17_nl = (count_lpi_1_dfm_1[1]) & (~ pixel_loop_equal_1_tmp);
  assign loop2_inner_loop_mux_4_nl = MUX_s_1_2_2((z_out_12[1]), pixel_loop_pixel_loop_and_17_nl,
      or_724_cse);
  assign loop2_inner_loop_loop2_inner_loop_or_3_nl = loop2_inner_loop_mux_4_nl |
      and_295_cse | and_dcpl_331 | and_dcpl_333;
  assign pixel_loop_pixel_loop_and_18_nl = (count_lpi_1_dfm_1[0]) & (~ pixel_loop_equal_1_tmp);
  assign loop2_inner_loop_mux1h_58_nl = MUX1HOT_s_1_5_2((~ (loop2_inner_loop_acc_10_psp_sva_1[2])),
      (z_out_12[0]), (~ (z_out_19[2])), (~ (z_out_20[2])), pixel_loop_pixel_loop_and_18_nl,
      {and_295_cse , and_296_cse , and_dcpl_331 , and_dcpl_333 , or_724_cse});
  assign loop2_inner_loop_loop2_inner_loop_or_4_nl = (~(and_295_cse | and_dcpl_331
      | and_dcpl_333 | or_724_cse)) | and_296_cse;
  assign loop2_inner_loop_or_14_nl = and_295_cse | and_dcpl_331 | and_dcpl_333;
  assign loop2_inner_loop_mux1h_59_nl = MUX1HOT_v_10_3_2((z_out_12[9:0]), ({9'b100110001
      , (z_out_6[4])}), 10'b0000000001, {loop2_inner_loop_or_14_nl , and_296_cse
      , or_724_cse});
  assign nl_z_out_13 = ({and_450_nl , loop2_inner_loop_mux1h_54_nl , loop2_inner_loop_mux1h_55_nl
      , loop2_inner_loop_mux1h_56_nl , loop2_inner_loop_mux1h_57_nl , loop2_inner_loop_loop2_inner_loop_or_3_nl
      , loop2_inner_loop_mux1h_58_nl}) + conv_u2u_11_13({loop2_inner_loop_loop2_inner_loop_or_4_nl
      , loop2_inner_loop_mux1h_59_nl});
  assign z_out_13 = nl_z_out_13[12:0];
  assign rawdns_abs_if_mux_2_nl = MUX_v_12_2_2(rawdns_abs_rawData_1_sva_1, rawdns_abs_rawData_2_sva_1,
      rawdns_abs_if_acc_1_itm_12_1);
  assign rawdns_abs_if_mux_3_nl = MUX_v_12_2_2((~ rawdns_abs_rawData_2_sva_1), (~
      rawdns_abs_rawData_1_sva_1), rawdns_abs_if_acc_1_itm_12_1);
  assign nl_acc_13_nl = ({rawdns_abs_if_mux_2_nl , 1'b1}) + ({rawdns_abs_if_mux_3_nl
      , 1'b1});
  assign acc_13_nl = nl_acc_13_nl[12:0];
  assign z_out_14 = readslicef_13_12_1(acc_13_nl);
  assign nl_loop2_inner_loop_acc_26_nl = conv_u2u_2_3(~ (i_lpi_1[4:3])) + conv_u2u_2_3(i_lpi_1[6:5]);
  assign loop2_inner_loop_acc_26_nl = nl_loop2_inner_loop_acc_26_nl[2:0];
  assign pixel_loop_if_1_for_mux1h_21_nl = MUX1HOT_v_5_3_2(({1'b0 , l_2_lpi_1}),
      ({(operator_4_false_1_acc_cse_sva_1[2:0]) , 2'b01}), ({2'b00 , loop2_inner_loop_acc_26_nl}),
      {and_dcpl_305 , and_dcpl_304 , (~ lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0)});
  assign nl_loop2_inner_loop_acc_27_nl = conv_u2u_2_3(~ (i_lpi_1[8:7])) + conv_u2u_2_3(i_lpi_1[10:9]);
  assign loop2_inner_loop_acc_27_nl = nl_loop2_inner_loop_acc_27_nl[2:0];
  assign pixel_loop_if_1_for_mux1h_22_nl = MUX1HOT_v_4_3_2(({3'b000 , (j_lpi_1[12])}),
      (~ operator_4_false_1_acc_cse_sva_1), ({1'b0 , loop2_inner_loop_acc_27_nl}),
      {and_dcpl_305 , and_dcpl_304 , (~ lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0)});
  assign nl_z_out_15 = pixel_loop_if_1_for_mux1h_21_nl + conv_u2u_4_5(pixel_loop_if_1_for_mux1h_22_nl);
  assign z_out_15 = nl_z_out_15[4:0];
  assign pixel_loop_if_1_for_mux_38_nl = MUX_v_2_2_2((~ (padding_loop1_acc_3_psp_sva_1[4:3])),
      ({(~ (z_out_15[0])) , (~ (j_lpi_1[11]))}), lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0);
  assign pixel_loop_if_1_for_mux_39_nl = MUX_v_2_2_2((padding_loop1_acc_3_psp_sva_1[6:5]),
      (z_out_15[2:1]), lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0);
  assign nl_z_out_17 = conv_u2u_2_3(pixel_loop_if_1_for_mux_38_nl) + conv_u2u_2_3(pixel_loop_if_1_for_mux_39_nl);
  assign z_out_17 = nl_z_out_17[2:0];
  assign loop2_inner_loop_loop2_inner_loop_or_5_nl = (~((padding_loop1_acc_3_psp_sva_1[13])
      | and_dcpl_204 | and_dcpl_304 | and_dcpl_341)) | and_dcpl_343;
  assign loop2_inner_loop_mux1h_60_nl = MUX1HOT_s_1_4_2((operator_4_false_2_acc_psp_sva_1[3]),
      (pixel_loop_if_1_for_1_acc_psp_sva_1[3]), (z_out_15[3]), (padding_loop1_acc_3_psp_sva_1[13]),
      {and_dcpl_204 , and_dcpl_304 , and_dcpl_341 , nor_237_cse});
  assign loop2_inner_loop_loop2_inner_loop_nand_2_nl = ~(loop2_inner_loop_mux1h_60_nl
      & (~ and_dcpl_343));
  assign loop2_inner_loop_mux1h_61_nl = MUX1HOT_v_2_3_2((i_lpi_1[6:5]), (j_lpi_1[6:5]),
      (padding_loop1_acc_3_psp_sva_1[12:11]), {and_dcpl_204 , loop2_inner_loop_or_11_itm
      , nor_237_cse});
  assign loop2_inner_loop_not_49_nl = ~ and_dcpl_343;
  assign loop2_inner_loop_loop2_inner_loop_nand_3_nl = ~(MUX_v_2_2_2(2'b00, loop2_inner_loop_mux1h_61_nl,
      loop2_inner_loop_not_49_nl));
  assign loop2_inner_loop_mux1h_62_nl = MUX1HOT_s_1_3_2((operator_4_false_2_acc_psp_sva_1[3]),
      (pixel_loop_if_1_for_1_acc_psp_sva_1[3]), (z_out_15[3]), {and_dcpl_204 , and_dcpl_304
      , and_dcpl_341});
  assign loop2_inner_loop_and_2_nl = loop2_inner_loop_mux1h_62_nl & (~(and_dcpl_343
      | nor_237_cse));
  assign loop2_inner_loop_or_15_nl = and_dcpl_204 | and_dcpl_341;
  assign loop2_inner_loop_mux1h_63_nl = MUX1HOT_s_1_4_2((~ (z_out_3[4])), (~ (pixel_loop_if_1_for_1_acc_9_psp_sva_1[4])),
      (operator_4_true_acc_sdt_1[4]), (padding_loop1_acc_13_sdt[2]), {loop2_inner_loop_or_15_nl
      , and_dcpl_304 , and_dcpl_343 , nor_237_cse});
  assign loop2_inner_loop_mux1h_64_nl = MUX1HOT_v_2_4_2((~ (i_lpi_1[10:9])), (~ (j_lpi_1[10:9])),
      (operator_4_true_acc_sdt_1[3:2]), (padding_loop1_acc_13_sdt[1:0]), {and_dcpl_204
      , loop2_inner_loop_or_11_itm , and_dcpl_343 , nor_237_cse});
  assign nl_acc_17_nl = ({loop2_inner_loop_loop2_inner_loop_or_5_nl , loop2_inner_loop_loop2_inner_loop_nand_2_nl
      , loop2_inner_loop_loop2_inner_loop_nand_3_nl , loop2_inner_loop_and_2_nl})
      + conv_u2u_4_5({loop2_inner_loop_mux1h_63_nl , loop2_inner_loop_mux1h_64_nl
      , 1'b1});
  assign acc_17_nl = nl_acc_17_nl[4:0];
  assign z_out_18 = readslicef_5_4_1(acc_17_nl);
  assign Cal_Eur_Distance_for_for_mux_21_nl = MUX_v_4_2_2((~ (z_out_6[3:0])), ({2'b11
      , (pixel_loop_if_1_for_1_acc_9_psp_sva_1[1:0])}), or_dcpl_382);
  assign Cal_Eur_Distance_for_for_Cal_Eur_Distance_for_for_nor_2_nl = ~((pixel_loop_if_1_for_1_acc_9_psp_sva_1[4])
      | (mux_280_cse & lfst_exitL_exit_rawdns_process_for_lpi_1_2));
  assign Cal_Eur_Distance_for_for_mux_22_nl = MUX_v_3_2_2((signext_3_2({Cal_Eur_Distance_l_1_1_0_lpi_1_dfm_1_1
      , Cal_Eur_Distance_l_1_1_0_lpi_1_dfm_0_1})), ({1'b0 , (~ (pixel_loop_if_1_for_1_acc_9_psp_sva_1[3:2]))}),
      or_dcpl_382);
  assign nl_acc_18_nl = conv_u2u_5_6({Cal_Eur_Distance_for_for_mux_21_nl , Cal_Eur_Distance_for_for_Cal_Eur_Distance_for_for_nor_2_nl})
      + conv_s2u_4_6({Cal_Eur_Distance_for_for_mux_22_nl , 1'b1});
  assign acc_18_nl = nl_acc_18_nl[5:0];
  assign z_out_19 = readslicef_6_5_1(acc_18_nl);
  assign pixel_loop_if_1_for_mux_40_nl = MUX_v_2_2_2((z_out_6[1:0]), (z_out_3[1:0]),
      lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0);
  assign pixel_loop_if_1_for_mux_41_nl = MUX_s_1_2_2((~ (z_out_6[4])), (~ (z_out_3[4])),
      lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0);
  assign pixel_loop_if_1_for_mux_42_nl = MUX_v_2_2_2((~ (z_out_6[3:2])), (~ (z_out_3[3:2])),
      lfst_exitL_exit_padding_loop2_lpi_1_dfm_3_0);
  assign nl_acc_19_nl = ({1'b1 , pixel_loop_if_1_for_mux_40_nl , pixel_loop_if_1_for_mux_41_nl})
      + conv_u2u_3_4({pixel_loop_if_1_for_mux_42_nl , 1'b1});
  assign acc_19_nl = nl_acc_19_nl[3:0];
  assign z_out_20 = readslicef_4_3_1(acc_19_nl);

  function automatic [24:0] div_25_u25_u13;
    input [24:0] l;
    input [12:0] r;
    reg [24:0] rdiv;
    reg [13:0] diff;
    reg [14:0] diff_tmp;
    reg [37:0] lbuf;
    integer i; 
  begin
    lbuf = 38'b0;
    lbuf[24:0] = l;
    for(i=24; i>=0; i=i-1)
    begin
      diff_tmp = (lbuf[37:24] - {1'b0,r});
      diff = diff_tmp[13:0];
      rdiv[i] = ~diff[13];
      if(diff[13] == 0)
        lbuf[37:24] = diff;
      lbuf[37:1] = lbuf[36:0];
    end
    div_25_u25_u13 = rdiv;
  end
  endfunction


  function automatic [0:0] MUX1HOT_s_1_3_2;
    input [0:0] input_2;
    input [0:0] input_1;
    input [0:0] input_0;
    input [2:0] sel;
    reg [0:0] result;
  begin
    result = input_0 & {1{sel[0]}};
    result = result | ( input_1 & {1{sel[1]}});
    result = result | ( input_2 & {1{sel[2]}});
    MUX1HOT_s_1_3_2 = result;
  end
  endfunction


  function automatic [0:0] MUX1HOT_s_1_4_2;
    input [0:0] input_3;
    input [0:0] input_2;
    input [0:0] input_1;
    input [0:0] input_0;
    input [3:0] sel;
    reg [0:0] result;
  begin
    result = input_0 & {1{sel[0]}};
    result = result | ( input_1 & {1{sel[1]}});
    result = result | ( input_2 & {1{sel[2]}});
    result = result | ( input_3 & {1{sel[3]}});
    MUX1HOT_s_1_4_2 = result;
  end
  endfunction


  function automatic [0:0] MUX1HOT_s_1_5_2;
    input [0:0] input_4;
    input [0:0] input_3;
    input [0:0] input_2;
    input [0:0] input_1;
    input [0:0] input_0;
    input [4:0] sel;
    reg [0:0] result;
  begin
    result = input_0 & {1{sel[0]}};
    result = result | ( input_1 & {1{sel[1]}});
    result = result | ( input_2 & {1{sel[2]}});
    result = result | ( input_3 & {1{sel[3]}});
    result = result | ( input_4 & {1{sel[4]}});
    MUX1HOT_s_1_5_2 = result;
  end
  endfunction


  function automatic [9:0] MUX1HOT_v_10_3_2;
    input [9:0] input_2;
    input [9:0] input_1;
    input [9:0] input_0;
    input [2:0] sel;
    reg [9:0] result;
  begin
    result = input_0 & {10{sel[0]}};
    result = result | ( input_1 & {10{sel[1]}});
    result = result | ( input_2 & {10{sel[2]}});
    MUX1HOT_v_10_3_2 = result;
  end
  endfunction


  function automatic [11:0] MUX1HOT_v_12_10_2;
    input [11:0] input_9;
    input [11:0] input_8;
    input [11:0] input_7;
    input [11:0] input_6;
    input [11:0] input_5;
    input [11:0] input_4;
    input [11:0] input_3;
    input [11:0] input_2;
    input [11:0] input_1;
    input [11:0] input_0;
    input [9:0] sel;
    reg [11:0] result;
  begin
    result = input_0 & {12{sel[0]}};
    result = result | ( input_1 & {12{sel[1]}});
    result = result | ( input_2 & {12{sel[2]}});
    result = result | ( input_3 & {12{sel[3]}});
    result = result | ( input_4 & {12{sel[4]}});
    result = result | ( input_5 & {12{sel[5]}});
    result = result | ( input_6 & {12{sel[6]}});
    result = result | ( input_7 & {12{sel[7]}});
    result = result | ( input_8 & {12{sel[8]}});
    result = result | ( input_9 & {12{sel[9]}});
    MUX1HOT_v_12_10_2 = result;
  end
  endfunction


  function automatic [11:0] MUX1HOT_v_12_12_2;
    input [11:0] input_11;
    input [11:0] input_10;
    input [11:0] input_9;
    input [11:0] input_8;
    input [11:0] input_7;
    input [11:0] input_6;
    input [11:0] input_5;
    input [11:0] input_4;
    input [11:0] input_3;
    input [11:0] input_2;
    input [11:0] input_1;
    input [11:0] input_0;
    input [11:0] sel;
    reg [11:0] result;
  begin
    result = input_0 & {12{sel[0]}};
    result = result | ( input_1 & {12{sel[1]}});
    result = result | ( input_2 & {12{sel[2]}});
    result = result | ( input_3 & {12{sel[3]}});
    result = result | ( input_4 & {12{sel[4]}});
    result = result | ( input_5 & {12{sel[5]}});
    result = result | ( input_6 & {12{sel[6]}});
    result = result | ( input_7 & {12{sel[7]}});
    result = result | ( input_8 & {12{sel[8]}});
    result = result | ( input_9 & {12{sel[9]}});
    result = result | ( input_10 & {12{sel[10]}});
    result = result | ( input_11 & {12{sel[11]}});
    MUX1HOT_v_12_12_2 = result;
  end
  endfunction


  function automatic [11:0] MUX1HOT_v_12_3_2;
    input [11:0] input_2;
    input [11:0] input_1;
    input [11:0] input_0;
    input [2:0] sel;
    reg [11:0] result;
  begin
    result = input_0 & {12{sel[0]}};
    result = result | ( input_1 & {12{sel[1]}});
    result = result | ( input_2 & {12{sel[2]}});
    MUX1HOT_v_12_3_2 = result;
  end
  endfunction


  function automatic [12:0] MUX1HOT_v_13_3_2;
    input [12:0] input_2;
    input [12:0] input_1;
    input [12:0] input_0;
    input [2:0] sel;
    reg [12:0] result;
  begin
    result = input_0 & {13{sel[0]}};
    result = result | ( input_1 & {13{sel[1]}});
    result = result | ( input_2 & {13{sel[2]}});
    MUX1HOT_v_13_3_2 = result;
  end
  endfunction


  function automatic [14:0] MUX1HOT_v_15_4_2;
    input [14:0] input_3;
    input [14:0] input_2;
    input [14:0] input_1;
    input [14:0] input_0;
    input [3:0] sel;
    reg [14:0] result;
  begin
    result = input_0 & {15{sel[0]}};
    result = result | ( input_1 & {15{sel[1]}});
    result = result | ( input_2 & {15{sel[2]}});
    result = result | ( input_3 & {15{sel[3]}});
    MUX1HOT_v_15_4_2 = result;
  end
  endfunction


  function automatic [1:0] MUX1HOT_v_2_3_2;
    input [1:0] input_2;
    input [1:0] input_1;
    input [1:0] input_0;
    input [2:0] sel;
    reg [1:0] result;
  begin
    result = input_0 & {2{sel[0]}};
    result = result | ( input_1 & {2{sel[1]}});
    result = result | ( input_2 & {2{sel[2]}});
    MUX1HOT_v_2_3_2 = result;
  end
  endfunction


  function automatic [1:0] MUX1HOT_v_2_4_2;
    input [1:0] input_3;
    input [1:0] input_2;
    input [1:0] input_1;
    input [1:0] input_0;
    input [3:0] sel;
    reg [1:0] result;
  begin
    result = input_0 & {2{sel[0]}};
    result = result | ( input_1 & {2{sel[1]}});
    result = result | ( input_2 & {2{sel[2]}});
    result = result | ( input_3 & {2{sel[3]}});
    MUX1HOT_v_2_4_2 = result;
  end
  endfunction


  function automatic [2:0] MUX1HOT_v_3_3_2;
    input [2:0] input_2;
    input [2:0] input_1;
    input [2:0] input_0;
    input [2:0] sel;
    reg [2:0] result;
  begin
    result = input_0 & {3{sel[0]}};
    result = result | ( input_1 & {3{sel[1]}});
    result = result | ( input_2 & {3{sel[2]}});
    MUX1HOT_v_3_3_2 = result;
  end
  endfunction


  function automatic [2:0] MUX1HOT_v_3_4_2;
    input [2:0] input_3;
    input [2:0] input_2;
    input [2:0] input_1;
    input [2:0] input_0;
    input [3:0] sel;
    reg [2:0] result;
  begin
    result = input_0 & {3{sel[0]}};
    result = result | ( input_1 & {3{sel[1]}});
    result = result | ( input_2 & {3{sel[2]}});
    result = result | ( input_3 & {3{sel[3]}});
    MUX1HOT_v_3_4_2 = result;
  end
  endfunction


  function automatic [2:0] MUX1HOT_v_3_5_2;
    input [2:0] input_4;
    input [2:0] input_3;
    input [2:0] input_2;
    input [2:0] input_1;
    input [2:0] input_0;
    input [4:0] sel;
    reg [2:0] result;
  begin
    result = input_0 & {3{sel[0]}};
    result = result | ( input_1 & {3{sel[1]}});
    result = result | ( input_2 & {3{sel[2]}});
    result = result | ( input_3 & {3{sel[3]}});
    result = result | ( input_4 & {3{sel[4]}});
    MUX1HOT_v_3_5_2 = result;
  end
  endfunction


  function automatic [3:0] MUX1HOT_v_4_3_2;
    input [3:0] input_2;
    input [3:0] input_1;
    input [3:0] input_0;
    input [2:0] sel;
    reg [3:0] result;
  begin
    result = input_0 & {4{sel[0]}};
    result = result | ( input_1 & {4{sel[1]}});
    result = result | ( input_2 & {4{sel[2]}});
    MUX1HOT_v_4_3_2 = result;
  end
  endfunction


  function automatic [3:0] MUX1HOT_v_4_5_2;
    input [3:0] input_4;
    input [3:0] input_3;
    input [3:0] input_2;
    input [3:0] input_1;
    input [3:0] input_0;
    input [4:0] sel;
    reg [3:0] result;
  begin
    result = input_0 & {4{sel[0]}};
    result = result | ( input_1 & {4{sel[1]}});
    result = result | ( input_2 & {4{sel[2]}});
    result = result | ( input_3 & {4{sel[3]}});
    result = result | ( input_4 & {4{sel[4]}});
    MUX1HOT_v_4_5_2 = result;
  end
  endfunction


  function automatic [4:0] MUX1HOT_v_5_3_2;
    input [4:0] input_2;
    input [4:0] input_1;
    input [4:0] input_0;
    input [2:0] sel;
    reg [4:0] result;
  begin
    result = input_0 & {5{sel[0]}};
    result = result | ( input_1 & {5{sel[1]}});
    result = result | ( input_2 & {5{sel[2]}});
    MUX1HOT_v_5_3_2 = result;
  end
  endfunction


  function automatic [4:0] MUX1HOT_v_5_4_2;
    input [4:0] input_3;
    input [4:0] input_2;
    input [4:0] input_1;
    input [4:0] input_0;
    input [3:0] sel;
    reg [4:0] result;
  begin
    result = input_0 & {5{sel[0]}};
    result = result | ( input_1 & {5{sel[1]}});
    result = result | ( input_2 & {5{sel[2]}});
    result = result | ( input_3 & {5{sel[3]}});
    MUX1HOT_v_5_4_2 = result;
  end
  endfunction


  function automatic [6:0] MUX1HOT_v_7_4_2;
    input [6:0] input_3;
    input [6:0] input_2;
    input [6:0] input_1;
    input [6:0] input_0;
    input [3:0] sel;
    reg [6:0] result;
  begin
    result = input_0 & {7{sel[0]}};
    result = result | ( input_1 & {7{sel[1]}});
    result = result | ( input_2 & {7{sel[2]}});
    result = result | ( input_3 & {7{sel[3]}});
    MUX1HOT_v_7_4_2 = result;
  end
  endfunction


  function automatic [7:0] MUX1HOT_v_8_5_2;
    input [7:0] input_4;
    input [7:0] input_3;
    input [7:0] input_2;
    input [7:0] input_1;
    input [7:0] input_0;
    input [4:0] sel;
    reg [7:0] result;
  begin
    result = input_0 & {8{sel[0]}};
    result = result | ( input_1 & {8{sel[1]}});
    result = result | ( input_2 & {8{sel[2]}});
    result = result | ( input_3 & {8{sel[3]}});
    result = result | ( input_4 & {8{sel[4]}});
    MUX1HOT_v_8_5_2 = result;
  end
  endfunction


  function automatic [0:0] MUX_s_1_2_2;
    input [0:0] input_0;
    input [0:0] input_1;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function automatic [11:0] MUX_v_12_121_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [11:0] input_2;
    input [11:0] input_3;
    input [11:0] input_4;
    input [11:0] input_5;
    input [11:0] input_6;
    input [11:0] input_7;
    input [11:0] input_8;
    input [11:0] input_9;
    input [11:0] input_10;
    input [11:0] input_11;
    input [11:0] input_12;
    input [11:0] input_13;
    input [11:0] input_14;
    input [11:0] input_15;
    input [11:0] input_16;
    input [11:0] input_17;
    input [11:0] input_18;
    input [11:0] input_19;
    input [11:0] input_20;
    input [11:0] input_21;
    input [11:0] input_22;
    input [11:0] input_23;
    input [11:0] input_24;
    input [11:0] input_25;
    input [11:0] input_26;
    input [11:0] input_27;
    input [11:0] input_28;
    input [11:0] input_29;
    input [11:0] input_30;
    input [11:0] input_31;
    input [11:0] input_32;
    input [11:0] input_33;
    input [11:0] input_34;
    input [11:0] input_35;
    input [11:0] input_36;
    input [11:0] input_37;
    input [11:0] input_38;
    input [11:0] input_39;
    input [11:0] input_40;
    input [11:0] input_41;
    input [11:0] input_42;
    input [11:0] input_43;
    input [11:0] input_44;
    input [11:0] input_45;
    input [11:0] input_46;
    input [11:0] input_47;
    input [11:0] input_48;
    input [11:0] input_49;
    input [11:0] input_50;
    input [11:0] input_51;
    input [11:0] input_52;
    input [11:0] input_53;
    input [11:0] input_54;
    input [11:0] input_55;
    input [11:0] input_56;
    input [11:0] input_57;
    input [11:0] input_58;
    input [11:0] input_59;
    input [11:0] input_60;
    input [11:0] input_61;
    input [11:0] input_62;
    input [11:0] input_63;
    input [11:0] input_64;
    input [11:0] input_65;
    input [11:0] input_66;
    input [11:0] input_67;
    input [11:0] input_68;
    input [11:0] input_69;
    input [11:0] input_70;
    input [11:0] input_71;
    input [11:0] input_72;
    input [11:0] input_73;
    input [11:0] input_74;
    input [11:0] input_75;
    input [11:0] input_76;
    input [11:0] input_77;
    input [11:0] input_78;
    input [11:0] input_79;
    input [11:0] input_80;
    input [11:0] input_81;
    input [11:0] input_82;
    input [11:0] input_83;
    input [11:0] input_84;
    input [11:0] input_85;
    input [11:0] input_86;
    input [11:0] input_87;
    input [11:0] input_88;
    input [11:0] input_89;
    input [11:0] input_90;
    input [11:0] input_91;
    input [11:0] input_92;
    input [11:0] input_93;
    input [11:0] input_94;
    input [11:0] input_95;
    input [11:0] input_96;
    input [11:0] input_97;
    input [11:0] input_98;
    input [11:0] input_99;
    input [11:0] input_100;
    input [11:0] input_101;
    input [11:0] input_102;
    input [11:0] input_103;
    input [11:0] input_104;
    input [11:0] input_105;
    input [11:0] input_106;
    input [11:0] input_107;
    input [11:0] input_108;
    input [11:0] input_109;
    input [11:0] input_110;
    input [11:0] input_111;
    input [11:0] input_112;
    input [11:0] input_113;
    input [11:0] input_114;
    input [11:0] input_115;
    input [11:0] input_116;
    input [11:0] input_117;
    input [11:0] input_118;
    input [11:0] input_119;
    input [11:0] input_120;
    input [6:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      7'b0000000 : begin
        result = input_0;
      end
      7'b0000001 : begin
        result = input_1;
      end
      7'b0000010 : begin
        result = input_2;
      end
      7'b0000011 : begin
        result = input_3;
      end
      7'b0000100 : begin
        result = input_4;
      end
      7'b0000101 : begin
        result = input_5;
      end
      7'b0000110 : begin
        result = input_6;
      end
      7'b0000111 : begin
        result = input_7;
      end
      7'b0001000 : begin
        result = input_8;
      end
      7'b0001001 : begin
        result = input_9;
      end
      7'b0001010 : begin
        result = input_10;
      end
      7'b0001011 : begin
        result = input_11;
      end
      7'b0001100 : begin
        result = input_12;
      end
      7'b0001101 : begin
        result = input_13;
      end
      7'b0001110 : begin
        result = input_14;
      end
      7'b0001111 : begin
        result = input_15;
      end
      7'b0010000 : begin
        result = input_16;
      end
      7'b0010001 : begin
        result = input_17;
      end
      7'b0010010 : begin
        result = input_18;
      end
      7'b0010011 : begin
        result = input_19;
      end
      7'b0010100 : begin
        result = input_20;
      end
      7'b0010101 : begin
        result = input_21;
      end
      7'b0010110 : begin
        result = input_22;
      end
      7'b0010111 : begin
        result = input_23;
      end
      7'b0011000 : begin
        result = input_24;
      end
      7'b0011001 : begin
        result = input_25;
      end
      7'b0011010 : begin
        result = input_26;
      end
      7'b0011011 : begin
        result = input_27;
      end
      7'b0011100 : begin
        result = input_28;
      end
      7'b0011101 : begin
        result = input_29;
      end
      7'b0011110 : begin
        result = input_30;
      end
      7'b0011111 : begin
        result = input_31;
      end
      7'b0100000 : begin
        result = input_32;
      end
      7'b0100001 : begin
        result = input_33;
      end
      7'b0100010 : begin
        result = input_34;
      end
      7'b0100011 : begin
        result = input_35;
      end
      7'b0100100 : begin
        result = input_36;
      end
      7'b0100101 : begin
        result = input_37;
      end
      7'b0100110 : begin
        result = input_38;
      end
      7'b0100111 : begin
        result = input_39;
      end
      7'b0101000 : begin
        result = input_40;
      end
      7'b0101001 : begin
        result = input_41;
      end
      7'b0101010 : begin
        result = input_42;
      end
      7'b0101011 : begin
        result = input_43;
      end
      7'b0101100 : begin
        result = input_44;
      end
      7'b0101101 : begin
        result = input_45;
      end
      7'b0101110 : begin
        result = input_46;
      end
      7'b0101111 : begin
        result = input_47;
      end
      7'b0110000 : begin
        result = input_48;
      end
      7'b0110001 : begin
        result = input_49;
      end
      7'b0110010 : begin
        result = input_50;
      end
      7'b0110011 : begin
        result = input_51;
      end
      7'b0110100 : begin
        result = input_52;
      end
      7'b0110101 : begin
        result = input_53;
      end
      7'b0110110 : begin
        result = input_54;
      end
      7'b0110111 : begin
        result = input_55;
      end
      7'b0111000 : begin
        result = input_56;
      end
      7'b0111001 : begin
        result = input_57;
      end
      7'b0111010 : begin
        result = input_58;
      end
      7'b0111011 : begin
        result = input_59;
      end
      7'b0111100 : begin
        result = input_60;
      end
      7'b0111101 : begin
        result = input_61;
      end
      7'b0111110 : begin
        result = input_62;
      end
      7'b0111111 : begin
        result = input_63;
      end
      7'b1000000 : begin
        result = input_64;
      end
      7'b1000001 : begin
        result = input_65;
      end
      7'b1000010 : begin
        result = input_66;
      end
      7'b1000011 : begin
        result = input_67;
      end
      7'b1000100 : begin
        result = input_68;
      end
      7'b1000101 : begin
        result = input_69;
      end
      7'b1000110 : begin
        result = input_70;
      end
      7'b1000111 : begin
        result = input_71;
      end
      7'b1001000 : begin
        result = input_72;
      end
      7'b1001001 : begin
        result = input_73;
      end
      7'b1001010 : begin
        result = input_74;
      end
      7'b1001011 : begin
        result = input_75;
      end
      7'b1001100 : begin
        result = input_76;
      end
      7'b1001101 : begin
        result = input_77;
      end
      7'b1001110 : begin
        result = input_78;
      end
      7'b1001111 : begin
        result = input_79;
      end
      7'b1010000 : begin
        result = input_80;
      end
      7'b1010001 : begin
        result = input_81;
      end
      7'b1010010 : begin
        result = input_82;
      end
      7'b1010011 : begin
        result = input_83;
      end
      7'b1010100 : begin
        result = input_84;
      end
      7'b1010101 : begin
        result = input_85;
      end
      7'b1010110 : begin
        result = input_86;
      end
      7'b1010111 : begin
        result = input_87;
      end
      7'b1011000 : begin
        result = input_88;
      end
      7'b1011001 : begin
        result = input_89;
      end
      7'b1011010 : begin
        result = input_90;
      end
      7'b1011011 : begin
        result = input_91;
      end
      7'b1011100 : begin
        result = input_92;
      end
      7'b1011101 : begin
        result = input_93;
      end
      7'b1011110 : begin
        result = input_94;
      end
      7'b1011111 : begin
        result = input_95;
      end
      7'b1100000 : begin
        result = input_96;
      end
      7'b1100001 : begin
        result = input_97;
      end
      7'b1100010 : begin
        result = input_98;
      end
      7'b1100011 : begin
        result = input_99;
      end
      7'b1100100 : begin
        result = input_100;
      end
      7'b1100101 : begin
        result = input_101;
      end
      7'b1100110 : begin
        result = input_102;
      end
      7'b1100111 : begin
        result = input_103;
      end
      7'b1101000 : begin
        result = input_104;
      end
      7'b1101001 : begin
        result = input_105;
      end
      7'b1101010 : begin
        result = input_106;
      end
      7'b1101011 : begin
        result = input_107;
      end
      7'b1101100 : begin
        result = input_108;
      end
      7'b1101101 : begin
        result = input_109;
      end
      7'b1101110 : begin
        result = input_110;
      end
      7'b1101111 : begin
        result = input_111;
      end
      7'b1110000 : begin
        result = input_112;
      end
      7'b1110001 : begin
        result = input_113;
      end
      7'b1110010 : begin
        result = input_114;
      end
      7'b1110011 : begin
        result = input_115;
      end
      7'b1110100 : begin
        result = input_116;
      end
      7'b1110101 : begin
        result = input_117;
      end
      7'b1110110 : begin
        result = input_118;
      end
      7'b1110111 : begin
        result = input_119;
      end
      default : begin
        result = input_120;
      end
    endcase
    MUX_v_12_121_2 = result;
  end
  endfunction


  function automatic [11:0] MUX_v_12_121_2x0x1x2x3x4x5x6x7x8x9x10x11x12x13x14x15x16x17x18x19x56x57x58x59x60x61x62x63;
    input [11:0] input_20;
    input [11:0] input_21;
    input [11:0] input_22;
    input [11:0] input_23;
    input [11:0] input_24;
    input [11:0] input_25;
    input [11:0] input_26;
    input [11:0] input_27;
    input [11:0] input_28;
    input [11:0] input_29;
    input [11:0] input_30;
    input [11:0] input_31;
    input [11:0] input_32;
    input [11:0] input_33;
    input [11:0] input_34;
    input [11:0] input_35;
    input [11:0] input_36;
    input [11:0] input_37;
    input [11:0] input_38;
    input [11:0] input_39;
    input [11:0] input_40;
    input [11:0] input_41;
    input [11:0] input_42;
    input [11:0] input_43;
    input [11:0] input_44;
    input [11:0] input_45;
    input [11:0] input_46;
    input [11:0] input_47;
    input [11:0] input_48;
    input [11:0] input_49;
    input [11:0] input_50;
    input [11:0] input_51;
    input [11:0] input_52;
    input [11:0] input_53;
    input [11:0] input_54;
    input [11:0] input_55;
    input [11:0] input_64;
    input [11:0] input_65;
    input [11:0] input_66;
    input [11:0] input_67;
    input [11:0] input_68;
    input [11:0] input_69;
    input [11:0] input_70;
    input [11:0] input_71;
    input [11:0] input_72;
    input [11:0] input_73;
    input [11:0] input_74;
    input [11:0] input_75;
    input [11:0] input_76;
    input [11:0] input_77;
    input [11:0] input_78;
    input [11:0] input_79;
    input [11:0] input_80;
    input [11:0] input_81;
    input [11:0] input_82;
    input [11:0] input_83;
    input [11:0] input_84;
    input [11:0] input_85;
    input [11:0] input_86;
    input [11:0] input_87;
    input [11:0] input_88;
    input [11:0] input_89;
    input [11:0] input_90;
    input [11:0] input_91;
    input [11:0] input_92;
    input [11:0] input_93;
    input [11:0] input_94;
    input [11:0] input_95;
    input [11:0] input_96;
    input [11:0] input_97;
    input [11:0] input_98;
    input [11:0] input_99;
    input [11:0] input_100;
    input [11:0] input_101;
    input [11:0] input_102;
    input [11:0] input_103;
    input [11:0] input_104;
    input [11:0] input_105;
    input [11:0] input_106;
    input [11:0] input_107;
    input [11:0] input_108;
    input [11:0] input_109;
    input [11:0] input_110;
    input [11:0] input_111;
    input [11:0] input_112;
    input [11:0] input_113;
    input [11:0] input_114;
    input [11:0] input_115;
    input [11:0] input_116;
    input [11:0] input_117;
    input [11:0] input_118;
    input [11:0] input_119;
    input [11:0] input_120;
    input [6:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      7'b0010100 : begin
        result = input_20;
      end
      7'b0010101 : begin
        result = input_21;
      end
      7'b0010110 : begin
        result = input_22;
      end
      7'b0010111 : begin
        result = input_23;
      end
      7'b0011000 : begin
        result = input_24;
      end
      7'b0011001 : begin
        result = input_25;
      end
      7'b0011010 : begin
        result = input_26;
      end
      7'b0011011 : begin
        result = input_27;
      end
      7'b0011100 : begin
        result = input_28;
      end
      7'b0011101 : begin
        result = input_29;
      end
      7'b0011110 : begin
        result = input_30;
      end
      7'b0011111 : begin
        result = input_31;
      end
      7'b0100000 : begin
        result = input_32;
      end
      7'b0100001 : begin
        result = input_33;
      end
      7'b0100010 : begin
        result = input_34;
      end
      7'b0100011 : begin
        result = input_35;
      end
      7'b0100100 : begin
        result = input_36;
      end
      7'b0100101 : begin
        result = input_37;
      end
      7'b0100110 : begin
        result = input_38;
      end
      7'b0100111 : begin
        result = input_39;
      end
      7'b0101000 : begin
        result = input_40;
      end
      7'b0101001 : begin
        result = input_41;
      end
      7'b0101010 : begin
        result = input_42;
      end
      7'b0101011 : begin
        result = input_43;
      end
      7'b0101100 : begin
        result = input_44;
      end
      7'b0101101 : begin
        result = input_45;
      end
      7'b0101110 : begin
        result = input_46;
      end
      7'b0101111 : begin
        result = input_47;
      end
      7'b0110000 : begin
        result = input_48;
      end
      7'b0110001 : begin
        result = input_49;
      end
      7'b0110010 : begin
        result = input_50;
      end
      7'b0110011 : begin
        result = input_51;
      end
      7'b0110100 : begin
        result = input_52;
      end
      7'b0110101 : begin
        result = input_53;
      end
      7'b0110110 : begin
        result = input_54;
      end
      7'b0110111 : begin
        result = input_55;
      end
      7'b1000000 : begin
        result = input_64;
      end
      7'b1000001 : begin
        result = input_65;
      end
      7'b1000010 : begin
        result = input_66;
      end
      7'b1000011 : begin
        result = input_67;
      end
      7'b1000100 : begin
        result = input_68;
      end
      7'b1000101 : begin
        result = input_69;
      end
      7'b1000110 : begin
        result = input_70;
      end
      7'b1000111 : begin
        result = input_71;
      end
      7'b1001000 : begin
        result = input_72;
      end
      7'b1001001 : begin
        result = input_73;
      end
      7'b1001010 : begin
        result = input_74;
      end
      7'b1001011 : begin
        result = input_75;
      end
      7'b1001100 : begin
        result = input_76;
      end
      7'b1001101 : begin
        result = input_77;
      end
      7'b1001110 : begin
        result = input_78;
      end
      7'b1001111 : begin
        result = input_79;
      end
      7'b1010000 : begin
        result = input_80;
      end
      7'b1010001 : begin
        result = input_81;
      end
      7'b1010010 : begin
        result = input_82;
      end
      7'b1010011 : begin
        result = input_83;
      end
      7'b1010100 : begin
        result = input_84;
      end
      7'b1010101 : begin
        result = input_85;
      end
      7'b1010110 : begin
        result = input_86;
      end
      7'b1010111 : begin
        result = input_87;
      end
      7'b1011000 : begin
        result = input_88;
      end
      7'b1011001 : begin
        result = input_89;
      end
      7'b1011010 : begin
        result = input_90;
      end
      7'b1011011 : begin
        result = input_91;
      end
      7'b1011100 : begin
        result = input_92;
      end
      7'b1011101 : begin
        result = input_93;
      end
      7'b1011110 : begin
        result = input_94;
      end
      7'b1011111 : begin
        result = input_95;
      end
      7'b1100000 : begin
        result = input_96;
      end
      7'b1100001 : begin
        result = input_97;
      end
      7'b1100010 : begin
        result = input_98;
      end
      7'b1100011 : begin
        result = input_99;
      end
      7'b1100100 : begin
        result = input_100;
      end
      7'b1100101 : begin
        result = input_101;
      end
      7'b1100110 : begin
        result = input_102;
      end
      7'b1100111 : begin
        result = input_103;
      end
      7'b1101000 : begin
        result = input_104;
      end
      7'b1101001 : begin
        result = input_105;
      end
      7'b1101010 : begin
        result = input_106;
      end
      7'b1101011 : begin
        result = input_107;
      end
      7'b1101100 : begin
        result = input_108;
      end
      7'b1101101 : begin
        result = input_109;
      end
      7'b1101110 : begin
        result = input_110;
      end
      7'b1101111 : begin
        result = input_111;
      end
      7'b1110000 : begin
        result = input_112;
      end
      7'b1110001 : begin
        result = input_113;
      end
      7'b1110010 : begin
        result = input_114;
      end
      7'b1110011 : begin
        result = input_115;
      end
      7'b1110100 : begin
        result = input_116;
      end
      7'b1110101 : begin
        result = input_117;
      end
      7'b1110110 : begin
        result = input_118;
      end
      7'b1110111 : begin
        result = input_119;
      end
      default : begin
        result = input_120;
      end
    endcase
    MUX_v_12_121_2x0x1x2x3x4x5x6x7x8x9x10x11x12x13x14x15x16x17x18x19x56x57x58x59x60x61x62x63
        = result;
  end
  endfunction


  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [0:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction


  function automatic [11:0] MUX_v_12_32_2x9x10x11x12x13x14;
    input [11:0] input_0;
    input [11:0] input_1;
    input [11:0] input_2;
    input [11:0] input_3;
    input [11:0] input_4;
    input [11:0] input_5;
    input [11:0] input_6;
    input [11:0] input_7;
    input [11:0] input_8;
    input [11:0] input_15;
    input [11:0] input_16;
    input [11:0] input_17;
    input [11:0] input_18;
    input [11:0] input_19;
    input [11:0] input_20;
    input [11:0] input_21;
    input [11:0] input_22;
    input [11:0] input_23;
    input [11:0] input_24;
    input [11:0] input_25;
    input [11:0] input_26;
    input [11:0] input_27;
    input [11:0] input_28;
    input [11:0] input_29;
    input [11:0] input_30;
    input [11:0] input_31;
    input [4:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      5'b00000 : begin
        result = input_0;
      end
      5'b00001 : begin
        result = input_1;
      end
      5'b00010 : begin
        result = input_2;
      end
      5'b00011 : begin
        result = input_3;
      end
      5'b00100 : begin
        result = input_4;
      end
      5'b00101 : begin
        result = input_5;
      end
      5'b00110 : begin
        result = input_6;
      end
      5'b00111 : begin
        result = input_7;
      end
      5'b01000 : begin
        result = input_8;
      end
      5'b01111 : begin
        result = input_15;
      end
      5'b10000 : begin
        result = input_16;
      end
      5'b10001 : begin
        result = input_17;
      end
      5'b10010 : begin
        result = input_18;
      end
      5'b10011 : begin
        result = input_19;
      end
      5'b10100 : begin
        result = input_20;
      end
      5'b10101 : begin
        result = input_21;
      end
      5'b10110 : begin
        result = input_22;
      end
      5'b10111 : begin
        result = input_23;
      end
      5'b11000 : begin
        result = input_24;
      end
      5'b11001 : begin
        result = input_25;
      end
      5'b11010 : begin
        result = input_26;
      end
      5'b11011 : begin
        result = input_27;
      end
      5'b11100 : begin
        result = input_28;
      end
      5'b11101 : begin
        result = input_29;
      end
      5'b11110 : begin
        result = input_30;
      end
      default : begin
        result = input_31;
      end
    endcase
    MUX_v_12_32_2x9x10x11x12x13x14 = result;
  end
  endfunction


  function automatic [11:0] MUX_v_12_61_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [11:0] input_2;
    input [11:0] input_3;
    input [11:0] input_4;
    input [11:0] input_5;
    input [11:0] input_6;
    input [11:0] input_7;
    input [11:0] input_8;
    input [11:0] input_9;
    input [11:0] input_10;
    input [11:0] input_11;
    input [11:0] input_12;
    input [11:0] input_13;
    input [11:0] input_14;
    input [11:0] input_15;
    input [11:0] input_16;
    input [11:0] input_17;
    input [11:0] input_18;
    input [11:0] input_19;
    input [11:0] input_20;
    input [11:0] input_21;
    input [11:0] input_22;
    input [11:0] input_23;
    input [11:0] input_24;
    input [11:0] input_25;
    input [11:0] input_26;
    input [11:0] input_27;
    input [11:0] input_28;
    input [11:0] input_29;
    input [11:0] input_30;
    input [11:0] input_31;
    input [11:0] input_32;
    input [11:0] input_33;
    input [11:0] input_34;
    input [11:0] input_35;
    input [11:0] input_36;
    input [11:0] input_37;
    input [11:0] input_38;
    input [11:0] input_39;
    input [11:0] input_40;
    input [11:0] input_41;
    input [11:0] input_42;
    input [11:0] input_43;
    input [11:0] input_44;
    input [11:0] input_45;
    input [11:0] input_46;
    input [11:0] input_47;
    input [11:0] input_48;
    input [11:0] input_49;
    input [11:0] input_50;
    input [11:0] input_51;
    input [11:0] input_52;
    input [11:0] input_53;
    input [11:0] input_54;
    input [11:0] input_55;
    input [11:0] input_56;
    input [11:0] input_57;
    input [11:0] input_58;
    input [11:0] input_59;
    input [11:0] input_60;
    input [5:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      6'b000000 : begin
        result = input_0;
      end
      6'b000001 : begin
        result = input_1;
      end
      6'b000010 : begin
        result = input_2;
      end
      6'b000011 : begin
        result = input_3;
      end
      6'b000100 : begin
        result = input_4;
      end
      6'b000101 : begin
        result = input_5;
      end
      6'b000110 : begin
        result = input_6;
      end
      6'b000111 : begin
        result = input_7;
      end
      6'b001000 : begin
        result = input_8;
      end
      6'b001001 : begin
        result = input_9;
      end
      6'b001010 : begin
        result = input_10;
      end
      6'b001011 : begin
        result = input_11;
      end
      6'b001100 : begin
        result = input_12;
      end
      6'b001101 : begin
        result = input_13;
      end
      6'b001110 : begin
        result = input_14;
      end
      6'b001111 : begin
        result = input_15;
      end
      6'b010000 : begin
        result = input_16;
      end
      6'b010001 : begin
        result = input_17;
      end
      6'b010010 : begin
        result = input_18;
      end
      6'b010011 : begin
        result = input_19;
      end
      6'b010100 : begin
        result = input_20;
      end
      6'b010101 : begin
        result = input_21;
      end
      6'b010110 : begin
        result = input_22;
      end
      6'b010111 : begin
        result = input_23;
      end
      6'b011000 : begin
        result = input_24;
      end
      6'b011001 : begin
        result = input_25;
      end
      6'b011010 : begin
        result = input_26;
      end
      6'b011011 : begin
        result = input_27;
      end
      6'b011100 : begin
        result = input_28;
      end
      6'b011101 : begin
        result = input_29;
      end
      6'b011110 : begin
        result = input_30;
      end
      6'b011111 : begin
        result = input_31;
      end
      6'b100000 : begin
        result = input_32;
      end
      6'b100001 : begin
        result = input_33;
      end
      6'b100010 : begin
        result = input_34;
      end
      6'b100011 : begin
        result = input_35;
      end
      6'b100100 : begin
        result = input_36;
      end
      6'b100101 : begin
        result = input_37;
      end
      6'b100110 : begin
        result = input_38;
      end
      6'b100111 : begin
        result = input_39;
      end
      6'b101000 : begin
        result = input_40;
      end
      6'b101001 : begin
        result = input_41;
      end
      6'b101010 : begin
        result = input_42;
      end
      6'b101011 : begin
        result = input_43;
      end
      6'b101100 : begin
        result = input_44;
      end
      6'b101101 : begin
        result = input_45;
      end
      6'b101110 : begin
        result = input_46;
      end
      6'b101111 : begin
        result = input_47;
      end
      6'b110000 : begin
        result = input_48;
      end
      6'b110001 : begin
        result = input_49;
      end
      6'b110010 : begin
        result = input_50;
      end
      6'b110011 : begin
        result = input_51;
      end
      6'b110100 : begin
        result = input_52;
      end
      6'b110101 : begin
        result = input_53;
      end
      6'b110110 : begin
        result = input_54;
      end
      6'b110111 : begin
        result = input_55;
      end
      6'b111000 : begin
        result = input_56;
      end
      6'b111001 : begin
        result = input_57;
      end
      6'b111010 : begin
        result = input_58;
      end
      6'b111011 : begin
        result = input_59;
      end
      default : begin
        result = input_60;
      end
    endcase
    MUX_v_12_61_2 = result;
  end
  endfunction


  function automatic [11:0] MUX_v_12_9_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [11:0] input_2;
    input [11:0] input_3;
    input [11:0] input_4;
    input [11:0] input_5;
    input [11:0] input_6;
    input [11:0] input_7;
    input [11:0] input_8;
    input [3:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      4'b0000 : begin
        result = input_0;
      end
      4'b0001 : begin
        result = input_1;
      end
      4'b0010 : begin
        result = input_2;
      end
      4'b0011 : begin
        result = input_3;
      end
      4'b0100 : begin
        result = input_4;
      end
      4'b0101 : begin
        result = input_5;
      end
      4'b0110 : begin
        result = input_6;
      end
      4'b0111 : begin
        result = input_7;
      end
      default : begin
        result = input_8;
      end
    endcase
    MUX_v_12_9_2 = result;
  end
  endfunction


  function automatic [12:0] MUX_v_13_2_2;
    input [12:0] input_0;
    input [12:0] input_1;
    input [0:0] sel;
    reg [12:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_13_2_2 = result;
  end
  endfunction


  function automatic [24:0] MUX_v_25_2_2;
    input [24:0] input_0;
    input [24:0] input_1;
    input [0:0] sel;
    reg [24:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_25_2_2 = result;
  end
  endfunction


  function automatic [25:0] MUX_v_26_2_2;
    input [25:0] input_0;
    input [25:0] input_1;
    input [0:0] sel;
    reg [25:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_26_2_2 = result;
  end
  endfunction


  function automatic [1:0] MUX_v_2_2_2;
    input [1:0] input_0;
    input [1:0] input_1;
    input [0:0] sel;
    reg [1:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_2_2_2 = result;
  end
  endfunction


  function automatic [29:0] MUX_v_30_2_2;
    input [29:0] input_0;
    input [29:0] input_1;
    input [0:0] sel;
    reg [29:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_30_2_2 = result;
  end
  endfunction


  function automatic [2:0] MUX_v_3_2_2;
    input [2:0] input_0;
    input [2:0] input_1;
    input [0:0] sel;
    reg [2:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_3_2_2 = result;
  end
  endfunction


  function automatic [3:0] MUX_v_4_2_2;
    input [3:0] input_0;
    input [3:0] input_1;
    input [0:0] sel;
    reg [3:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_4_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input [0:0] sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction


  function automatic [6:0] MUX_v_7_2_2;
    input [6:0] input_0;
    input [6:0] input_1;
    input [0:0] sel;
    reg [6:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_7_2_2 = result;
  end
  endfunction


  function automatic [7:0] MUX_v_8_2_2;
    input [7:0] input_0;
    input [7:0] input_1;
    input [0:0] sel;
    reg [7:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_8_2_2 = result;
  end
  endfunction


  function automatic [11:0] readslicef_13_12_1;
    input [12:0] vector;
    reg [12:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_13_12_1 = tmp[11:0];
  end
  endfunction


  function automatic [0:0] readslicef_13_1_12;
    input [12:0] vector;
    reg [12:0] tmp;
  begin
    tmp = vector >> 12;
    readslicef_13_1_12 = tmp[0:0];
  end
  endfunction


  function automatic [12:0] readslicef_14_13_1;
    input [13:0] vector;
    reg [13:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_14_13_1 = tmp[12:0];
  end
  endfunction


  function automatic [0:0] readslicef_14_1_13;
    input [13:0] vector;
    reg [13:0] tmp;
  begin
    tmp = vector >> 13;
    readslicef_14_1_13 = tmp[0:0];
  end
  endfunction


  function automatic [3:0] readslicef_15_4_11;
    input [14:0] vector;
    reg [14:0] tmp;
  begin
    tmp = vector >> 11;
    readslicef_15_4_11 = tmp[3:0];
  end
  endfunction


  function automatic [4:0] readslicef_17_5_12;
    input [16:0] vector;
    reg [16:0] tmp;
  begin
    tmp = vector >> 12;
    readslicef_17_5_12 = tmp[4:0];
  end
  endfunction


  function automatic [9:0] readslicef_26_10_16;
    input [25:0] vector;
    reg [25:0] tmp;
  begin
    tmp = vector >> 16;
    readslicef_26_10_16 = tmp[9:0];
  end
  endfunction


  function automatic [0:0] readslicef_27_1_26;
    input [26:0] vector;
    reg [26:0] tmp;
  begin
    tmp = vector >> 26;
    readslicef_27_1_26 = tmp[0:0];
  end
  endfunction


  function automatic [0:0] readslicef_29_1_28;
    input [28:0] vector;
    reg [28:0] tmp;
  begin
    tmp = vector >> 28;
    readslicef_29_1_28 = tmp[0:0];
  end
  endfunction


  function automatic [0:0] readslicef_30_1_29;
    input [29:0] vector;
    reg [29:0] tmp;
  begin
    tmp = vector >> 29;
    readslicef_30_1_29 = tmp[0:0];
  end
  endfunction


  function automatic [0:0] readslicef_31_1_30;
    input [30:0] vector;
    reg [30:0] tmp;
  begin
    tmp = vector >> 30;
    readslicef_31_1_30 = tmp[0:0];
  end
  endfunction


  function automatic [0:0] readslicef_3_1_2;
    input [2:0] vector;
    reg [2:0] tmp;
  begin
    tmp = vector >> 2;
    readslicef_3_1_2 = tmp[0:0];
  end
  endfunction


  function automatic [0:0] readslicef_4_1_3;
    input [3:0] vector;
    reg [3:0] tmp;
  begin
    tmp = vector >> 3;
    readslicef_4_1_3 = tmp[0:0];
  end
  endfunction


  function automatic [2:0] readslicef_4_3_1;
    input [3:0] vector;
    reg [3:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_4_3_1 = tmp[2:0];
  end
  endfunction


  function automatic [0:0] readslicef_5_1_4;
    input [4:0] vector;
    reg [4:0] tmp;
  begin
    tmp = vector >> 4;
    readslicef_5_1_4 = tmp[0:0];
  end
  endfunction


  function automatic [3:0] readslicef_5_4_1;
    input [4:0] vector;
    reg [4:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_5_4_1 = tmp[3:0];
  end
  endfunction


  function automatic [4:0] readslicef_6_5_1;
    input [5:0] vector;
    reg [5:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_6_5_1 = tmp[4:0];
  end
  endfunction


  function automatic [5:0] readslicef_7_6_1;
    input [6:0] vector;
    reg [6:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_7_6_1 = tmp[5:0];
  end
  endfunction


  function automatic [6:0] readslicef_8_7_1;
    input [7:0] vector;
    reg [7:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_8_7_1 = tmp[6:0];
  end
  endfunction


  function automatic [0:0] readslicef_9_1_8;
    input [8:0] vector;
    reg [8:0] tmp;
  begin
    tmp = vector >> 8;
    readslicef_9_1_8 = tmp[0:0];
  end
  endfunction


  function automatic [10:0] signext_11_9;
    input [8:0] vector;
  begin
    signext_11_9= {{2{vector[8]}}, vector};
  end
  endfunction


  function automatic [1:0] signext_2_1;
    input [0:0] vector;
  begin
    signext_2_1= {{1{vector[0]}}, vector};
  end
  endfunction


  function automatic [2:0] signext_3_2;
    input [1:0] vector;
  begin
    signext_3_2= {{1{vector[1]}}, vector};
  end
  endfunction


  function automatic [3:0] signext_4_1;
    input [0:0] vector;
  begin
    signext_4_1= {{3{vector[0]}}, vector};
  end
  endfunction


  function automatic [3:0] conv_s2s_2_4 ;
    input [1:0]  vector ;
  begin
    conv_s2s_2_4 = {{2{vector[1]}}, vector};
  end
  endfunction


  function automatic [4:0] conv_s2s_3_5 ;
    input [2:0]  vector ;
  begin
    conv_s2s_3_5 = {{2{vector[2]}}, vector};
  end
  endfunction


  function automatic [13:0] conv_s2s_4_14 ;
    input [3:0]  vector ;
  begin
    conv_s2s_4_14 = {{10{vector[3]}}, vector};
  end
  endfunction


  function automatic [4:0] conv_s2u_2_5 ;
    input [1:0]  vector ;
  begin
    conv_s2u_2_5 = {{3{vector[1]}}, vector};
  end
  endfunction


  function automatic [5:0] conv_s2u_4_6 ;
    input [3:0]  vector ;
  begin
    conv_s2u_4_6 = {{2{vector[3]}}, vector};
  end
  endfunction


  function automatic [7:0] conv_s2u_6_8 ;
    input [5:0]  vector ;
  begin
    conv_s2u_6_8 = {{2{vector[5]}}, vector};
  end
  endfunction


  function automatic [8:0] conv_s2u_7_9 ;
    input [6:0]  vector ;
  begin
    conv_s2u_7_9 = {{2{vector[6]}}, vector};
  end
  endfunction


  function automatic [10:0] conv_s2u_9_11 ;
    input [8:0]  vector ;
  begin
    conv_s2u_9_11 = {{2{vector[8]}}, vector};
  end
  endfunction


  function automatic [29:0] conv_s2u_13_30 ;
    input [12:0]  vector ;
  begin
    conv_s2u_13_30 = {{17{vector[12]}}, vector};
  end
  endfunction


  function automatic [28:0] conv_s2u_14_29 ;
    input [13:0]  vector ;
  begin
    conv_s2u_14_29 = {{15{vector[13]}}, vector};
  end
  endfunction


  function automatic [29:0] conv_s2u_14_30 ;
    input [13:0]  vector ;
  begin
    conv_s2u_14_30 = {{16{vector[13]}}, vector};
  end
  endfunction


  function automatic [3:0] conv_u2s_2_4 ;
    input [1:0]  vector ;
  begin
    conv_u2s_2_4 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [3:0] conv_u2s_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2s_3_4 =  {1'b0, vector};
  end
  endfunction


  function automatic [4:0] conv_u2s_4_5 ;
    input [3:0]  vector ;
  begin
    conv_u2s_4_5 =  {1'b0, vector};
  end
  endfunction


  function automatic [9:0] conv_u2s_9_10 ;
    input [8:0]  vector ;
  begin
    conv_u2s_9_10 =  {1'b0, vector};
  end
  endfunction


  function automatic [10:0] conv_u2s_10_11 ;
    input [9:0]  vector ;
  begin
    conv_u2s_10_11 =  {1'b0, vector};
  end
  endfunction


  function automatic [13:0] conv_u2s_13_14 ;
    input [12:0]  vector ;
  begin
    conv_u2s_13_14 =  {1'b0, vector};
  end
  endfunction


  function automatic [2:0] conv_u2u_1_3 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_3 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [3:0] conv_u2u_1_4 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_4 = {{3{1'b0}}, vector};
  end
  endfunction


  function automatic [4:0] conv_u2u_1_5 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_5 = {{4{1'b0}}, vector};
  end
  endfunction


  function automatic [2:0] conv_u2u_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_3 = {1'b0, vector};
  end
  endfunction


  function automatic [3:0] conv_u2u_2_4 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_4 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [4:0] conv_u2u_2_5 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_5 = {{3{1'b0}}, vector};
  end
  endfunction


  function automatic [3:0] conv_u2u_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_4 = {1'b0, vector};
  end
  endfunction


  function automatic [4:0] conv_u2u_3_5 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_5 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [4:0] conv_u2u_4_5 ;
    input [3:0]  vector ;
  begin
    conv_u2u_4_5 = {1'b0, vector};
  end
  endfunction


  function automatic [6:0] conv_u2u_4_7 ;
    input [3:0]  vector ;
  begin
    conv_u2u_4_7 = {{3{1'b0}}, vector};
  end
  endfunction


  function automatic [5:0] conv_u2u_5_6 ;
    input [4:0]  vector ;
  begin
    conv_u2u_5_6 = {1'b0, vector};
  end
  endfunction


  function automatic [6:0] conv_u2u_5_7 ;
    input [4:0]  vector ;
  begin
    conv_u2u_5_7 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [6:0] conv_u2u_6_7 ;
    input [5:0]  vector ;
  begin
    conv_u2u_6_7 = {1'b0, vector};
  end
  endfunction


  function automatic [7:0] conv_u2u_6_8 ;
    input [5:0]  vector ;
  begin
    conv_u2u_6_8 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [7:0] conv_u2u_7_8 ;
    input [6:0]  vector ;
  begin
    conv_u2u_7_8 = {1'b0, vector};
  end
  endfunction


  function automatic [8:0] conv_u2u_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_9 = {1'b0, vector};
  end
  endfunction


  function automatic [12:0] conv_u2u_8_13 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_13 = {{5{1'b0}}, vector};
  end
  endfunction


  function automatic [12:0] conv_u2u_10_13 ;
    input [9:0]  vector ;
  begin
    conv_u2u_10_13 = {{3{1'b0}}, vector};
  end
  endfunction


  function automatic [13:0] conv_u2u_10_14 ;
    input [9:0]  vector ;
  begin
    conv_u2u_10_14 = {{4{1'b0}}, vector};
  end
  endfunction


  function automatic [11:0] conv_u2u_11_12 ;
    input [10:0]  vector ;
  begin
    conv_u2u_11_12 = {1'b0, vector};
  end
  endfunction


  function automatic [12:0] conv_u2u_11_13 ;
    input [10:0]  vector ;
  begin
    conv_u2u_11_13 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [12:0] conv_u2u_12_13 ;
    input [11:0]  vector ;
  begin
    conv_u2u_12_13 = {1'b0, vector};
  end
  endfunction


  function automatic [12:0] conv_u2u_13_13 ;
    input [12:0]  vector ;
  begin
    conv_u2u_13_13 = vector;
  end
  endfunction


  function automatic [13:0] conv_u2u_13_14 ;
    input [12:0]  vector ;
  begin
    conv_u2u_13_14 = {1'b0, vector};
  end
  endfunction


  function automatic [19:0] conv_u2u_20_20 ;
    input [19:0]  vector ;
  begin
    conv_u2u_20_20 = vector;
  end
  endfunction


  function automatic [24:0] conv_u2u_20_25 ;
    input [19:0]  vector ;
  begin
    conv_u2u_20_25 = {{5{1'b0}}, vector};
  end
  endfunction


  function automatic [29:0] conv_u2u_24_30 ;
    input [23:0]  vector ;
  begin
    conv_u2u_24_30 = {{6{1'b0}}, vector};
  end
  endfunction


  function automatic [25:0] conv_u2u_26_26 ;
    input [25:0]  vector ;
  begin
    conv_u2u_26_26 = vector;
  end
  endfunction


  function automatic [26:0] conv_u2u_26_27 ;
    input [25:0]  vector ;
  begin
    conv_u2u_26_27 = {1'b0, vector};
  end
  endfunction


  function automatic [28:0] conv_u2u_28_29 ;
    input [27:0]  vector ;
  begin
    conv_u2u_28_29 = {1'b0, vector};
  end
  endfunction


  function automatic [29:0] conv_u2u_29_30 ;
    input [28:0]  vector ;
  begin
    conv_u2u_29_30 = {1'b0, vector};
  end
  endfunction


  function automatic [30:0] conv_u2u_30_31 ;
    input [29:0]  vector ;
  begin
    conv_u2u_30_31 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    awb_core
// ------------------------------------------------------------------


module awb_core (
  clk, arst_n, top_reg_frameWidth, top_reg_frameHeight, top_reg_imgPattern, awb_reg_m_nEb,
      awb_reg_r_gain_rsc_triosy_lz, awb_reg_g_gain_rsc_triosy_lz, awb_reg_b_gain_rsc_triosy_lz,
      awb_reg_coeff, src_rsc_dat, src_rsc_vld, src_rsc_rdy, dst_rsc_dat, dst_rsc_vld,
      dst_rsc_rdy, awb_reg_r_gain_rsci_idat, awb_reg_b_gain_rsci_idat
);
  input clk;
  input arst_n;
  input [12:0] top_reg_frameWidth;
  input [12:0] top_reg_frameHeight;
  input [1:0] top_reg_imgPattern;
  input awb_reg_m_nEb;
  output awb_reg_r_gain_rsc_triosy_lz;
  output awb_reg_g_gain_rsc_triosy_lz;
  output awb_reg_b_gain_rsc_triosy_lz;
  input [4:0] awb_reg_coeff;
  input [11:0] src_rsc_dat;
  input src_rsc_vld;
  output src_rsc_rdy;
  output [11:0] dst_rsc_dat;
  output dst_rsc_vld;
  input dst_rsc_rdy;
  output [14:0] awb_reg_r_gain_rsci_idat;
  reg [14:0] awb_reg_r_gain_rsci_idat;
  output [14:0] awb_reg_b_gain_rsci_idat;
  reg [14:0] awb_reg_b_gain_rsci_idat;


  // Interconnect Declarations
  wire core_wen;
  wire core_wten;
  wire src_rsci_wen_comp;
  wire [11:0] src_rsci_idat_mxwt;
  wire dst_rsci_wen_comp;
  reg [11:0] dst_rsci_idat;
  wire awb_row_awb_row_or_2_tmp;
  wire awb_col_if_bayerPattern_xor_3_tmp;
  wire awb_col_if_bayerPattern_xor_tmp;
  wire or_dcpl_1;
  wire and_dcpl_3;
  wire or_dcpl_4;
  wire or_dcpl_6;
  wire exitL_exitL_exit_awb_col_lpi_1_dfm_1;
  reg exit_awb_row_lpi_1_dfm;
  reg exitL_exit_awb_row_sva;
  reg awb_col_not_mdf_sva_1;
  reg awb_row_asn_sft_lpi_1_dfm_1;
  reg main_stage_0_2;
  reg awb_col_not_mdf_sva_st_1;
  reg operator_13_false_operator_13_false_slc_awb_row_y_0_itm_1;
  reg operator_13_false_1_operator_13_false_1_slc_awb_col_x_0_itm_1;
  reg reg_awb_reg_r_gain_rsc_triosy_obj_iswt0_cse;
  wire and_cse;
  reg reg_dst_rsci_oswt_cse;
  reg reg_src_rsci_oswt_cse;
  wire exit_awb_row_lpi_1_dfm_1;
  wire [12:0] z_out;
  wire [13:0] nl_z_out;
  wire [31:0] z_out_1;
  wire [32:0] nl_z_out_1;
  reg [12:0] awb_row_y_lpi_1;
  reg [12:0] awb_col_x_lpi_1;
  reg [30:0] r_total_30_0_lpi_1_dfm_1;
  reg [31:0] g_total_31_0_lpi_1_dfm_1;
  reg [30:0] b_total_30_0_lpi_1_dfm_1;
  reg [11:0] ac_int_cctor_1_sva_1;
  reg [11:0] operator_38_false_operator_38_false_slc_mul_30_19_1_itm_1;
  reg [11:0] operator_38_false_2_operator_38_false_2_slc_mul_2_30_19_1_itm_1;
  wire [12:0] awb_col_x_lpi_1_dfm_1;
  wire [12:0] awb_row_y_lpi_1_dfm_1;
  wire [30:0] b_total_30_0_lpi_1_dfm_1_1;
  wire [30:0] r_total_30_0_lpi_1_dfm_1_1;
  wire [31:0] g_total_31_0_lpi_1_dfm_1_1;
  wire awb_col_awb_col_nor_3_tmp_1;
  wire and_11_ssc;
  wire operator_2_false_operator_2_false_nor_cse;
  wire awb_col_acc_2_itm_13_1;
  wire awb_row_acc_2_itm_13_1;

  wire[31:0] mul_3_nl;
  wire[36:0] nl_mul_3_nl;
  wire[30:0] mul_5_nl;
  wire[35:0] nl_mul_5_nl;
  wire[30:0] mul_4_nl;
  wire[35:0] nl_mul_4_nl;
  wire[13:0] awb_col_acc_2_nl;
  wire[14:0] nl_awb_col_acc_2_nl;
  wire[0:0] awb_col_awb_col_awb_col_awb_col_not_nl;
  wire[13:0] awb_row_acc_2_nl;
  wire[14:0] nl_awb_row_acc_2_nl;
  wire[0:0] awb_row_not_39_nl;
  wire[30:0] awb_row_mux_2_nl;
  wire[0:0] or_16_nl;
  wire[0:0] awb_row_not_41_nl;
  wire[30:0] awb_row_mux_3_nl;
  wire[0:0] or_20_nl;
  wire[0:0] awb_row_not_40_nl;
  wire[31:0] awb_row_awb_row_awb_row_mux_nl;
  wire[0:0] awb_row_or_1_nl;
  wire[0:0] awb_row_not_35_nl;
  wire[12:0] awb_col_mux_3_nl;
  wire[0:0] awb_col_if_else_else_else_awb_col_if_else_else_else_and_1_nl;
  wire[30:0] awb_col_if_else_else_else_mux1h_1_nl;
  wire[0:0] xor_2_nl;

  // Interconnect Declarations for Component Instantiations 
  awb_core_src_rsci awb_core_src_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .src_rsc_dat(src_rsc_dat),
      .src_rsc_vld(src_rsc_vld),
      .src_rsc_rdy(src_rsc_rdy),
      .core_wen(core_wen),
      .src_rsci_oswt(reg_src_rsci_oswt_cse),
      .src_rsci_wen_comp(src_rsci_wen_comp),
      .src_rsci_idat_mxwt(src_rsci_idat_mxwt)
    );
  awb_core_dst_rsci awb_core_dst_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .dst_rsc_dat(dst_rsc_dat),
      .dst_rsc_vld(dst_rsc_vld),
      .dst_rsc_rdy(dst_rsc_rdy),
      .core_wen(core_wen),
      .dst_rsci_oswt(reg_dst_rsci_oswt_cse),
      .dst_rsci_wen_comp(dst_rsci_wen_comp),
      .dst_rsci_idat(dst_rsci_idat)
    );
  awb_core_awb_reg_r_gain_rsc_triosy_obj awb_core_awb_reg_r_gain_rsc_triosy_obj_inst
      (
      .awb_reg_r_gain_rsc_triosy_lz(awb_reg_r_gain_rsc_triosy_lz),
      .core_wten(core_wten),
      .awb_reg_r_gain_rsc_triosy_obj_iswt0(reg_awb_reg_r_gain_rsc_triosy_obj_iswt0_cse)
    );
  awb_core_awb_reg_g_gain_rsc_triosy_obj awb_core_awb_reg_g_gain_rsc_triosy_obj_inst
      (
      .awb_reg_g_gain_rsc_triosy_lz(awb_reg_g_gain_rsc_triosy_lz),
      .core_wten(core_wten),
      .awb_reg_g_gain_rsc_triosy_obj_iswt0(reg_awb_reg_r_gain_rsc_triosy_obj_iswt0_cse)
    );
  awb_core_awb_reg_b_gain_rsc_triosy_obj awb_core_awb_reg_b_gain_rsc_triosy_obj_inst
      (
      .awb_reg_b_gain_rsc_triosy_lz(awb_reg_b_gain_rsc_triosy_lz),
      .core_wten(core_wten),
      .awb_reg_b_gain_rsc_triosy_obj_iswt0(reg_awb_reg_r_gain_rsc_triosy_obj_iswt0_cse)
    );
  awb_core_staller awb_core_staller_inst (
      .clk(clk),
      .arst_n(arst_n),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .src_rsci_wen_comp(src_rsci_wen_comp),
      .dst_rsci_wen_comp(dst_rsci_wen_comp)
    );
  assign and_cse = core_wen & (~ or_dcpl_4);
  assign exit_awb_row_lpi_1_dfm_1 = (~ awb_row_acc_2_itm_13_1) & exitL_exitL_exit_awb_col_lpi_1_dfm_1;
  assign nl_awb_col_acc_2_nl = ({1'b1 , awb_col_x_lpi_1_dfm_1}) + conv_u2u_13_14(~
      top_reg_frameWidth) + 14'b00000000000001;
  assign awb_col_acc_2_nl = nl_awb_col_acc_2_nl[13:0];
  assign awb_col_acc_2_itm_13_1 = readslicef_14_1_13(awb_col_acc_2_nl);
  assign awb_col_awb_col_awb_col_awb_col_not_nl = ~ exitL_exitL_exit_awb_col_lpi_1_dfm_1;
  assign awb_col_x_lpi_1_dfm_1 = MUX_v_13_2_2(13'b0000000000000, awb_col_x_lpi_1,
      awb_col_awb_col_awb_col_awb_col_not_nl);
  assign nl_awb_row_acc_2_nl = ({1'b1 , awb_row_y_lpi_1_dfm_1}) + conv_u2u_13_14(~
      top_reg_frameHeight) + 14'b00000000000001;
  assign awb_row_acc_2_nl = nl_awb_row_acc_2_nl[13:0];
  assign awb_row_acc_2_itm_13_1 = readslicef_14_1_13(awb_row_acc_2_nl);
  assign awb_row_not_39_nl = ~ exitL_exit_awb_row_sva;
  assign awb_row_y_lpi_1_dfm_1 = MUX_v_13_2_2(13'b0000000000000, awb_row_y_lpi_1,
      awb_row_not_39_nl);
  assign exitL_exitL_exit_awb_col_lpi_1_dfm_1 = awb_row_awb_row_or_2_tmp | exit_awb_row_lpi_1_dfm
      | exitL_exit_awb_row_sva;
  assign awb_row_awb_row_or_2_tmp = awb_col_not_mdf_sva_1 | awb_row_asn_sft_lpi_1_dfm_1;
  assign awb_col_if_bayerPattern_xor_3_tmp = operator_13_false_operator_13_false_slc_awb_row_y_0_itm_1
      ^ (top_reg_imgPattern[1]);
  assign awb_col_if_bayerPattern_xor_tmp = operator_13_false_1_operator_13_false_1_slc_awb_col_x_0_itm_1
      ^ (top_reg_imgPattern[0]);
  assign or_16_nl = (~(awb_col_if_bayerPattern_xor_3_tmp & awb_col_if_bayerPattern_xor_tmp
      & awb_reg_m_nEb)) | awb_row_awb_row_or_2_tmp;
  assign awb_row_mux_2_nl = MUX_v_31_2_2((z_out_1[30:0]), b_total_30_0_lpi_1_dfm_1,
      or_16_nl);
  assign awb_row_not_41_nl = ~ exitL_exit_awb_row_sva;
  assign b_total_30_0_lpi_1_dfm_1_1 = MUX_v_31_2_2(31'b0000000000000000000000000000000,
      awb_row_mux_2_nl, awb_row_not_41_nl);
  assign or_20_nl = awb_row_awb_row_or_2_tmp | (~ awb_reg_m_nEb) | awb_col_if_bayerPattern_xor_tmp
      | awb_col_if_bayerPattern_xor_3_tmp | awb_col_not_mdf_sva_st_1;
  assign awb_row_mux_3_nl = MUX_v_31_2_2((z_out_1[30:0]), r_total_30_0_lpi_1_dfm_1,
      or_20_nl);
  assign awb_row_not_40_nl = ~ exitL_exit_awb_row_sva;
  assign r_total_30_0_lpi_1_dfm_1_1 = MUX_v_31_2_2(31'b0000000000000000000000000000000,
      awb_row_mux_3_nl, awb_row_not_40_nl);
  assign awb_row_or_1_nl = ((~ awb_col_if_bayerPattern_xor_tmp) & awb_col_awb_col_nor_3_tmp_1
      & (~ awb_row_asn_sft_lpi_1_dfm_1)) | ((~ awb_col_if_bayerPattern_xor_3_tmp)
      & awb_col_awb_col_nor_3_tmp_1 & (~ awb_row_asn_sft_lpi_1_dfm_1));
  assign awb_row_awb_row_awb_row_mux_nl = MUX_v_32_2_2(g_total_31_0_lpi_1_dfm_1,
      z_out_1, awb_row_or_1_nl);
  assign awb_row_not_35_nl = ~ exitL_exit_awb_row_sva;
  assign g_total_31_0_lpi_1_dfm_1_1 = MUX_v_32_2_2(32'b00000000000000000000000000000000,
      awb_row_awb_row_awb_row_mux_nl, awb_row_not_35_nl);
  assign operator_2_false_operator_2_false_nor_cse = ~(awb_col_if_bayerPattern_xor_3_tmp
      | awb_col_if_bayerPattern_xor_tmp);
  assign awb_col_awb_col_nor_3_tmp_1 = ~(operator_2_false_operator_2_false_nor_cse
      | (~ awb_reg_m_nEb) | awb_col_not_mdf_sva_1);
  assign or_dcpl_1 = exitL_exit_awb_row_sva | exit_awb_row_lpi_1_dfm;
  assign and_dcpl_3 = ~((~((awb_row_awb_row_or_2_tmp & main_stage_0_2) | or_dcpl_1))
      | awb_row_acc_2_itm_13_1);
  assign or_dcpl_4 = ~(awb_row_asn_sft_lpi_1_dfm_1 & main_stage_0_2 & awb_col_not_mdf_sva_st_1);
  assign or_dcpl_6 = awb_row_asn_sft_lpi_1_dfm_1 | (~ main_stage_0_2) | awb_col_not_mdf_sva_st_1;
  assign and_11_ssc = awb_col_if_bayerPattern_xor_3_tmp & awb_col_if_bayerPattern_xor_tmp;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      reg_awb_reg_r_gain_rsc_triosy_obj_iswt0_cse <= 1'b0;
      reg_dst_rsci_oswt_cse <= 1'b0;
      exit_awb_row_lpi_1_dfm <= 1'b0;
      reg_src_rsci_oswt_cse <= 1'b0;
      awb_col_x_lpi_1 <= 13'b0000000000000;
      exitL_exit_awb_row_sva <= 1'b1;
      awb_row_y_lpi_1 <= 13'b0000000000000;
      ac_int_cctor_1_sva_1 <= 12'b000000000000;
      operator_38_false_2_operator_38_false_2_slc_mul_2_30_19_1_itm_1 <= 12'b000000000000;
      operator_38_false_operator_38_false_slc_mul_30_19_1_itm_1 <= 12'b000000000000;
      operator_13_false_operator_13_false_slc_awb_row_y_0_itm_1 <= 1'b0;
      operator_13_false_1_operator_13_false_1_slc_awb_col_x_0_itm_1 <= 1'b0;
      awb_col_not_mdf_sva_st_1 <= 1'b0;
      awb_col_not_mdf_sva_1 <= 1'b0;
      main_stage_0_2 <= 1'b0;
      r_total_30_0_lpi_1_dfm_1 <= 31'b0000000000000000000000000000000;
      g_total_31_0_lpi_1_dfm_1 <= 32'b00000000000000000000000000000000;
      b_total_30_0_lpi_1_dfm_1 <= 31'b0000000000000000000000000000000;
    end
    else if ( core_wen ) begin
      reg_awb_reg_r_gain_rsc_triosy_obj_iswt0_cse <= ~ or_dcpl_4;
      reg_dst_rsci_oswt_cse <= ~ or_dcpl_6;
      exit_awb_row_lpi_1_dfm <= exit_awb_row_lpi_1_dfm_1;
      reg_src_rsci_oswt_cse <= ~(and_dcpl_3 | (~ awb_col_acc_2_itm_13_1));
      awb_col_x_lpi_1 <= z_out;
      exitL_exit_awb_row_sva <= exit_awb_row_lpi_1_dfm_1;
      awb_row_y_lpi_1 <= MUX_v_13_2_2(z_out, awb_row_y_lpi_1_dfm_1, awb_col_acc_2_itm_13_1);
      ac_int_cctor_1_sva_1 <= readslicef_32_12_20(mul_3_nl);
      operator_38_false_2_operator_38_false_2_slc_mul_2_30_19_1_itm_1 <= readslicef_31_12_19(mul_5_nl);
      operator_38_false_operator_38_false_slc_mul_30_19_1_itm_1 <= readslicef_31_12_19(mul_4_nl);
      operator_13_false_operator_13_false_slc_awb_row_y_0_itm_1 <= awb_row_y_lpi_1_dfm_1[0];
      operator_13_false_1_operator_13_false_1_slc_awb_col_x_0_itm_1 <= awb_col_x_lpi_1_dfm_1[0];
      awb_col_not_mdf_sva_st_1 <= MUX_s_1_2_2((~ awb_col_acc_2_itm_13_1), exit_awb_row_lpi_1_dfm_1,
          and_dcpl_3);
      awb_col_not_mdf_sva_1 <= ~ awb_col_acc_2_itm_13_1;
      main_stage_0_2 <= 1'b1;
      r_total_30_0_lpi_1_dfm_1 <= r_total_30_0_lpi_1_dfm_1_1;
      g_total_31_0_lpi_1_dfm_1 <= g_total_31_0_lpi_1_dfm_1_1;
      b_total_30_0_lpi_1_dfm_1 <= b_total_30_0_lpi_1_dfm_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      awb_reg_b_gain_rsci_idat <= 15'b000000000000000;
      awb_reg_r_gain_rsci_idat <= 15'b000000000000000;
    end
    else if ( and_cse ) begin
      awb_reg_b_gain_rsci_idat <= div_15_u26_u12({ac_int_cctor_1_sva_1 , 14'b00000000000000},
          operator_38_false_2_operator_38_false_2_slc_mul_2_30_19_1_itm_1);
      awb_reg_r_gain_rsci_idat <= div_15_u26_u12({ac_int_cctor_1_sva_1 , 14'b00000000000000},
          operator_38_false_operator_38_false_slc_mul_30_19_1_itm_1);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dst_rsci_idat <= 12'b000000000000;
    end
    else if ( core_wen & (~ or_dcpl_6) ) begin
      dst_rsci_idat <= src_rsci_idat_mxwt;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      awb_row_asn_sft_lpi_1_dfm_1 <= 1'b0;
    end
    else if ( core_wen & ((~ main_stage_0_2) | awb_col_not_mdf_sva_1 | awb_row_asn_sft_lpi_1_dfm_1
        | or_dcpl_1) ) begin
      awb_row_asn_sft_lpi_1_dfm_1 <= exit_awb_row_lpi_1_dfm_1;
    end
  end
  assign nl_mul_3_nl = g_total_31_0_lpi_1_dfm_1_1 * awb_reg_coeff;
  assign mul_3_nl = nl_mul_3_nl[31:0];
  assign nl_mul_5_nl = b_total_30_0_lpi_1_dfm_1_1 * awb_reg_coeff;
  assign mul_5_nl = nl_mul_5_nl[30:0];
  assign nl_mul_4_nl = r_total_30_0_lpi_1_dfm_1_1 * awb_reg_coeff;
  assign mul_4_nl = nl_mul_4_nl[30:0];
  assign awb_col_mux_3_nl = MUX_v_13_2_2(awb_row_y_lpi_1_dfm_1, awb_col_x_lpi_1_dfm_1,
      awb_col_acc_2_itm_13_1);
  assign nl_z_out = awb_col_mux_3_nl + 13'b0000000000001;
  assign z_out = nl_z_out[12:0];
  assign awb_col_if_else_else_else_awb_col_if_else_else_else_and_1_nl = (g_total_31_0_lpi_1_dfm_1[31])
      & (~(and_11_ssc | operator_2_false_operator_2_false_nor_cse));
  assign xor_2_nl = awb_col_if_bayerPattern_xor_3_tmp ^ awb_col_if_bayerPattern_xor_tmp;
  assign awb_col_if_else_else_else_mux1h_1_nl = MUX1HOT_v_31_3_2(b_total_30_0_lpi_1_dfm_1,
      r_total_30_0_lpi_1_dfm_1, (g_total_31_0_lpi_1_dfm_1[30:0]), {and_11_ssc , operator_2_false_operator_2_false_nor_cse
      , xor_2_nl});
  assign nl_z_out_1 = ({awb_col_if_else_else_else_awb_col_if_else_else_else_and_1_nl
      , awb_col_if_else_else_else_mux1h_1_nl}) + conv_u2u_12_32(src_rsci_idat_mxwt);
  assign z_out_1 = nl_z_out_1[31:0];

  function automatic [14:0] div_15_u26_u12;
    input [25:0] l;
    input [11:0] r;
    reg [25:0] rdiv;
    reg [12:0] diff;
    reg [13:0] diff_tmp;
    reg [37:0] lbuf;
    integer i; 
  begin
    lbuf = 38'b0;
    lbuf[25:0] = l;
    for(i=25; i>=0; i=i-1)
    begin
      diff_tmp = (lbuf[37:25] - {1'b0,r});
      diff = diff_tmp[12:0];
      rdiv[i] = ~diff[12];
      if(diff[12] == 0)
        lbuf[37:25] = diff;
      lbuf[37:1] = lbuf[36:0];
    end
    div_15_u26_u12 = rdiv[14:0];
  end
  endfunction


  function automatic [30:0] MUX1HOT_v_31_3_2;
    input [30:0] input_2;
    input [30:0] input_1;
    input [30:0] input_0;
    input [2:0] sel;
    reg [30:0] result;
  begin
    result = input_0 & {31{sel[0]}};
    result = result | ( input_1 & {31{sel[1]}});
    result = result | ( input_2 & {31{sel[2]}});
    MUX1HOT_v_31_3_2 = result;
  end
  endfunction


  function automatic [0:0] MUX_s_1_2_2;
    input [0:0] input_0;
    input [0:0] input_1;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [12:0] MUX_v_13_2_2;
    input [12:0] input_0;
    input [12:0] input_1;
    input [0:0] sel;
    reg [12:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_13_2_2 = result;
  end
  endfunction


  function automatic [30:0] MUX_v_31_2_2;
    input [30:0] input_0;
    input [30:0] input_1;
    input [0:0] sel;
    reg [30:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_31_2_2 = result;
  end
  endfunction


  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [0:0] readslicef_14_1_13;
    input [13:0] vector;
    reg [13:0] tmp;
  begin
    tmp = vector >> 13;
    readslicef_14_1_13 = tmp[0:0];
  end
  endfunction


  function automatic [11:0] readslicef_31_12_19;
    input [30:0] vector;
    reg [30:0] tmp;
  begin
    tmp = vector >> 19;
    readslicef_31_12_19 = tmp[11:0];
  end
  endfunction


  function automatic [11:0] readslicef_32_12_20;
    input [31:0] vector;
    reg [31:0] tmp;
  begin
    tmp = vector >> 20;
    readslicef_32_12_20 = tmp[11:0];
  end
  endfunction


  function automatic [31:0] conv_u2u_12_32 ;
    input [11:0]  vector ;
  begin
    conv_u2u_12_32 = {{20{1'b0}}, vector};
  end
  endfunction


  function automatic [13:0] conv_u2u_13_14 ;
    input [12:0]  vector ;
  begin
    conv_u2u_13_14 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    wbc_core
// ------------------------------------------------------------------


module wbc_core (
  clk, arst_n, top_reg_frameWidth, top_reg_frameHeight, top_reg_imgPattern, top_reg_blc,
      wbc_reg_m_nEb, wbc_reg_m_nR, wbc_reg_m_nGr, wbc_reg_m_nGb, wbc_reg_m_nB, src_rsc_dat,
      src_rsc_vld, src_rsc_rdy, dst_rsc_dat, dst_rsc_vld, dst_rsc_rdy
);
  input clk;
  input arst_n;
  input [12:0] top_reg_frameWidth;
  input [12:0] top_reg_frameHeight;
  input [1:0] top_reg_imgPattern;
  input [8:0] top_reg_blc;
  input wbc_reg_m_nEb;
  input [14:0] wbc_reg_m_nR;
  input [14:0] wbc_reg_m_nGr;
  input [14:0] wbc_reg_m_nGb;
  input [14:0] wbc_reg_m_nB;
  input [11:0] src_rsc_dat;
  input src_rsc_vld;
  output src_rsc_rdy;
  output [11:0] dst_rsc_dat;
  output dst_rsc_vld;
  input dst_rsc_rdy;


  // Interconnect Declarations
  wire core_wen;
  wire src_rsci_wen_comp;
  wire [11:0] src_rsci_idat_mxwt;
  wire dst_rsci_wen_comp;
  reg [11:0] dst_rsci_idat;
  wire and_dcpl_6;
  reg exitL_exit_wbc_col_lpi_1_dfm;
  reg exit_wbc_row_lpi_1_dfm;
  reg exitL_exit_wbc_row_sva;
  wire wbc_col_if_bayerPattern_1_sva_1;
  wire wbc_col_if_bayerPattern_0_sva_1;
  reg operator_13_false_operator_13_false_slc_wbc_row_y_0_itm_1;
  reg operator_13_false_1_operator_13_false_1_slc_wbc_col_x_0_itm_1;
  wire wbc_row_asn_sft_lpi_1_dfm_st_1_mx0;
  reg wbc_row_asn_sft_lpi_1_dfm_st_1;
  reg main_stage_0_2;
  reg wbc_col_not_mdf_sva_st_1;
  wire [15:0] wbc_col_if_dst_val_sva_1;
  wire [17:0] nl_wbc_col_if_dst_val_sva_1;
  reg reg_dst_rsci_oswt_cse;
  reg reg_src_rsci_oswt_cse;
  wire or_9_cse;
  wire nor_2_cse;
  wire [12:0] z_out;
  wire [13:0] nl_z_out;
  reg [12:0] wbc_row_y_lpi_1_dfm_2;
  reg [12:0] wbc_col_x_lpi_1_dfm_2;
  wire dst_rsci_idat_mx0c1;
  wire operator_2_false_2_operator_2_false_2_and_svs_1;
  wire operator_2_false_1_operator_2_false_1_and_svs_1;
  wire operator_2_false_operator_2_false_nor_svs_1;
  wire [12:0] wbc_col_x_lpi_1_dfm_3;
  wire [12:0] wbc_row_y_lpi_1_dfm_3;
  wire exit_wbc_row_lpi_1_dfm_1;
  wire [16:0] wbc_col_if_mul_itm_27_11_1;
  wire wbc_col_acc_2_itm_13_1;
  wire wbc_row_acc_2_itm_13;

  wire[11:0] wbc_clip_wbc_clip_wbc_clip_nor_nl;
  wire[11:0] wbc_clip_nor_nl;
  wire[3:0] operator_16_true_acc_nl;
  wire[4:0] nl_operator_16_true_acc_nl;
  wire[0:0] mux_3_nl;
  wire[0:0] or_nl;
  wire[0:0] or_8_nl;
  wire[27:0] wbc_col_if_mul_nl;
  wire signed [28:0] nl_wbc_col_if_mul_nl;
  wire[12:0] wbc_col_if_acc_2_nl;
  wire[13:0] nl_wbc_col_if_acc_2_nl;
  wire[14:0] wbc_col_if_wbc_col_if_mux1h_nl;
  wire[0:0] wbc_col_if_wbc_col_if_nor_nl;
  wire[13:0] wbc_col_acc_2_nl;
  wire[14:0] nl_wbc_col_acc_2_nl;
  wire[0:0] asn_wbc_row_asn_sft_lpi_1_dfm_st_1_nor_nl;
  wire[0:0] wbc_col_wbc_col_wbc_col_wbc_row_not_nl;
  wire[13:0] wbc_row_acc_2_nl;
  wire[14:0] nl_wbc_row_acc_2_nl;
  wire[0:0] wbc_row_not_12_nl;
  wire[12:0] wbc_col_mux_4_nl;

  // Interconnect Declarations for Component Instantiations 
  wbc_core_src_rsci wbc_core_src_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .src_rsc_dat(src_rsc_dat),
      .src_rsc_vld(src_rsc_vld),
      .src_rsc_rdy(src_rsc_rdy),
      .core_wen(core_wen),
      .src_rsci_oswt(reg_src_rsci_oswt_cse),
      .src_rsci_wen_comp(src_rsci_wen_comp),
      .src_rsci_idat_mxwt(src_rsci_idat_mxwt)
    );
  wbc_core_dst_rsci wbc_core_dst_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .dst_rsc_dat(dst_rsc_dat),
      .dst_rsc_vld(dst_rsc_vld),
      .dst_rsc_rdy(dst_rsc_rdy),
      .core_wen(core_wen),
      .dst_rsci_oswt(reg_dst_rsci_oswt_cse),
      .dst_rsci_wen_comp(dst_rsci_wen_comp),
      .dst_rsci_idat(dst_rsci_idat)
    );
  wbc_core_staller wbc_core_staller_inst (
      .core_wen(core_wen),
      .src_rsci_wen_comp(src_rsci_wen_comp),
      .dst_rsci_wen_comp(dst_rsci_wen_comp)
    );
  assign or_9_cse = exitL_exit_wbc_row_sva | exitL_exit_wbc_col_lpi_1_dfm | exit_wbc_row_lpi_1_dfm;
  assign operator_2_false_2_operator_2_false_2_and_svs_1 = wbc_col_if_bayerPattern_1_sva_1
      & (~ wbc_col_if_bayerPattern_0_sva_1);
  assign operator_2_false_1_operator_2_false_1_and_svs_1 = wbc_col_if_bayerPattern_0_sva_1
      & (~ wbc_col_if_bayerPattern_1_sva_1);
  assign wbc_col_if_bayerPattern_1_sva_1 = operator_13_false_operator_13_false_slc_wbc_row_y_0_itm_1
      ^ (top_reg_imgPattern[1]);
  assign wbc_col_if_bayerPattern_0_sva_1 = operator_13_false_1_operator_13_false_1_slc_wbc_col_x_0_itm_1
      ^ (top_reg_imgPattern[0]);
  assign nl_wbc_col_if_dst_val_sva_1 = (wbc_col_if_mul_itm_27_11_1[16:1]) + conv_u2s_9_16(top_reg_blc)
      + conv_u2s_1_16(wbc_col_if_mul_itm_27_11_1[0]);
  assign wbc_col_if_dst_val_sva_1 = nl_wbc_col_if_dst_val_sva_1[15:0];
  assign nl_wbc_col_if_acc_2_nl = ({1'b1 , src_rsci_idat_mxwt}) + conv_u2s_12_13({3'b111
      , (~ top_reg_blc)}) + 13'b0000000000001;
  assign wbc_col_if_acc_2_nl = nl_wbc_col_if_acc_2_nl[12:0];
  assign wbc_col_if_wbc_col_if_nor_nl = ~(operator_2_false_2_operator_2_false_2_and_svs_1
      | operator_2_false_1_operator_2_false_1_and_svs_1 | operator_2_false_operator_2_false_nor_svs_1);
  assign wbc_col_if_wbc_col_if_mux1h_nl = MUX1HOT_v_15_4_2(wbc_reg_m_nB, wbc_reg_m_nGb,
      wbc_reg_m_nGr, wbc_reg_m_nR, {wbc_col_if_wbc_col_if_nor_nl , operator_2_false_2_operator_2_false_2_and_svs_1
      , operator_2_false_1_operator_2_false_1_and_svs_1 , operator_2_false_operator_2_false_nor_svs_1});
  assign nl_wbc_col_if_mul_nl = $signed(wbc_col_if_acc_2_nl) * $signed(conv_u2s_15_16(wbc_col_if_wbc_col_if_mux1h_nl));
  assign wbc_col_if_mul_nl = nl_wbc_col_if_mul_nl[27:0];
  assign wbc_col_if_mul_itm_27_11_1 = readslicef_28_17_11(wbc_col_if_mul_nl);
  assign operator_2_false_operator_2_false_nor_svs_1 = ~(wbc_col_if_bayerPattern_1_sva_1
      | wbc_col_if_bayerPattern_0_sva_1);
  assign nl_wbc_col_acc_2_nl = ({1'b1 , wbc_col_x_lpi_1_dfm_3}) + conv_u2u_13_14(~
      top_reg_frameWidth) + 14'b00000000000001;
  assign wbc_col_acc_2_nl = nl_wbc_col_acc_2_nl[13:0];
  assign wbc_col_acc_2_itm_13_1 = readslicef_14_1_13(wbc_col_acc_2_nl);
  assign asn_wbc_row_asn_sft_lpi_1_dfm_st_1_nor_nl = ~(exitL_exit_wbc_row_sva | exitL_exit_wbc_col_lpi_1_dfm
      | exit_wbc_row_lpi_1_dfm);
  assign wbc_row_asn_sft_lpi_1_dfm_st_1_mx0 = MUX_s_1_2_2(exit_wbc_row_lpi_1_dfm_1,
      wbc_row_asn_sft_lpi_1_dfm_st_1, asn_wbc_row_asn_sft_lpi_1_dfm_st_1_nor_nl);
  assign wbc_col_wbc_col_wbc_col_wbc_row_not_nl = ~ or_9_cse;
  assign wbc_col_x_lpi_1_dfm_3 = MUX_v_13_2_2(13'b0000000000000, wbc_col_x_lpi_1_dfm_2,
      wbc_col_wbc_col_wbc_col_wbc_row_not_nl);
  assign nl_wbc_row_acc_2_nl = ({1'b1 , wbc_row_y_lpi_1_dfm_3}) + conv_u2u_13_14(~
      top_reg_frameHeight) + 14'b00000000000001;
  assign wbc_row_acc_2_nl = nl_wbc_row_acc_2_nl[13:0];
  assign wbc_row_acc_2_itm_13 = readslicef_14_1_13(wbc_row_acc_2_nl);
  assign wbc_row_not_12_nl = ~ exitL_exit_wbc_row_sva;
  assign wbc_row_y_lpi_1_dfm_3 = MUX_v_13_2_2(13'b0000000000000, wbc_row_y_lpi_1_dfm_2,
      wbc_row_not_12_nl);
  assign exit_wbc_row_lpi_1_dfm_1 = (~ wbc_row_acc_2_itm_13) & or_9_cse;
  assign nor_2_cse = ~((~ wbc_row_asn_sft_lpi_1_dfm_st_1) | exit_wbc_row_lpi_1_dfm
      | exitL_exit_wbc_col_lpi_1_dfm | exitL_exit_wbc_row_sva);
  assign and_dcpl_6 = ~(wbc_row_asn_sft_lpi_1_dfm_st_1 | wbc_col_not_mdf_sva_st_1);
  assign dst_rsci_idat_mx0c1 = and_dcpl_6 & main_stage_0_2 & (~ wbc_reg_m_nEb);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      reg_dst_rsci_oswt_cse <= 1'b0;
      operator_13_false_operator_13_false_slc_wbc_row_y_0_itm_1 <= 1'b0;
      operator_13_false_1_operator_13_false_1_slc_wbc_col_x_0_itm_1 <= 1'b0;
      wbc_col_not_mdf_sva_st_1 <= 1'b0;
      wbc_row_asn_sft_lpi_1_dfm_st_1 <= 1'b0;
      reg_src_rsci_oswt_cse <= 1'b0;
      wbc_col_x_lpi_1_dfm_2 <= 13'b0000000000000;
      exit_wbc_row_lpi_1_dfm <= 1'b0;
      exitL_exit_wbc_col_lpi_1_dfm <= 1'b0;
      exitL_exit_wbc_row_sva <= 1'b1;
      wbc_row_y_lpi_1_dfm_2 <= 13'b0000000000000;
      main_stage_0_2 <= 1'b0;
    end
    else if ( core_wen ) begin
      reg_dst_rsci_oswt_cse <= ~(wbc_row_asn_sft_lpi_1_dfm_st_1 | wbc_col_not_mdf_sva_st_1
          | (~ main_stage_0_2));
      operator_13_false_operator_13_false_slc_wbc_row_y_0_itm_1 <= wbc_row_y_lpi_1_dfm_3[0];
      operator_13_false_1_operator_13_false_1_slc_wbc_col_x_0_itm_1 <= wbc_col_x_lpi_1_dfm_3[0];
      wbc_col_not_mdf_sva_st_1 <= ~ wbc_col_acc_2_itm_13_1;
      wbc_row_asn_sft_lpi_1_dfm_st_1 <= wbc_row_asn_sft_lpi_1_dfm_st_1_mx0;
      reg_src_rsci_oswt_cse <= ~(mux_3_nl | (~ wbc_col_acc_2_itm_13_1));
      wbc_col_x_lpi_1_dfm_2 <= z_out;
      exit_wbc_row_lpi_1_dfm <= exit_wbc_row_lpi_1_dfm_1;
      exitL_exit_wbc_col_lpi_1_dfm <= (~ wbc_col_acc_2_itm_13_1) | wbc_row_asn_sft_lpi_1_dfm_st_1_mx0;
      exitL_exit_wbc_row_sva <= exit_wbc_row_lpi_1_dfm_1;
      wbc_row_y_lpi_1_dfm_2 <= MUX_v_13_2_2(z_out, wbc_row_y_lpi_1_dfm_3, or_8_nl);
      main_stage_0_2 <= 1'b1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dst_rsci_idat <= 12'b000000000000;
    end
    else if ( core_wen & ((and_dcpl_6 & main_stage_0_2 & wbc_reg_m_nEb) | dst_rsci_idat_mx0c1)
        ) begin
      dst_rsci_idat <= MUX_v_12_2_2(wbc_clip_wbc_clip_wbc_clip_nor_nl, src_rsci_idat_mxwt,
          dst_rsci_idat_mx0c1);
    end
  end
  assign or_nl = wbc_row_asn_sft_lpi_1_dfm_st_1 | exit_wbc_row_lpi_1_dfm | exitL_exit_wbc_col_lpi_1_dfm
      | exitL_exit_wbc_row_sva;
  assign mux_3_nl = MUX_s_1_2_2(or_nl, nor_2_cse, wbc_row_acc_2_itm_13);
  assign or_8_nl = nor_2_cse | wbc_col_acc_2_itm_13_1;
  assign nl_operator_16_true_acc_nl = ({1'b1 , (~ (wbc_col_if_dst_val_sva_1[14:12]))})
      + 4'b0001;
  assign operator_16_true_acc_nl = nl_operator_16_true_acc_nl[3:0];
  assign wbc_clip_nor_nl = ~(MUX_v_12_2_2((wbc_col_if_dst_val_sva_1[11:0]), 12'b111111111111,
      (readslicef_4_1_3(operator_16_true_acc_nl))));
  assign wbc_clip_wbc_clip_wbc_clip_nor_nl = ~(MUX_v_12_2_2(wbc_clip_nor_nl, 12'b111111111111,
      (wbc_col_if_dst_val_sva_1[15])));
  assign wbc_col_mux_4_nl = MUX_v_13_2_2(wbc_row_y_lpi_1_dfm_3, wbc_col_x_lpi_1_dfm_3,
      wbc_col_acc_2_itm_13_1);
  assign nl_z_out = wbc_col_mux_4_nl + 13'b0000000000001;
  assign z_out = nl_z_out[12:0];

  function automatic [14:0] MUX1HOT_v_15_4_2;
    input [14:0] input_3;
    input [14:0] input_2;
    input [14:0] input_1;
    input [14:0] input_0;
    input [3:0] sel;
    reg [14:0] result;
  begin
    result = input_0 & {15{sel[0]}};
    result = result | ( input_1 & {15{sel[1]}});
    result = result | ( input_2 & {15{sel[2]}});
    result = result | ( input_3 & {15{sel[3]}});
    MUX1HOT_v_15_4_2 = result;
  end
  endfunction


  function automatic [0:0] MUX_s_1_2_2;
    input [0:0] input_0;
    input [0:0] input_1;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [0:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction


  function automatic [12:0] MUX_v_13_2_2;
    input [12:0] input_0;
    input [12:0] input_1;
    input [0:0] sel;
    reg [12:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_13_2_2 = result;
  end
  endfunction


  function automatic [0:0] readslicef_14_1_13;
    input [13:0] vector;
    reg [13:0] tmp;
  begin
    tmp = vector >> 13;
    readslicef_14_1_13 = tmp[0:0];
  end
  endfunction


  function automatic [16:0] readslicef_28_17_11;
    input [27:0] vector;
    reg [27:0] tmp;
  begin
    tmp = vector >> 11;
    readslicef_28_17_11 = tmp[16:0];
  end
  endfunction


  function automatic [0:0] readslicef_4_1_3;
    input [3:0] vector;
    reg [3:0] tmp;
  begin
    tmp = vector >> 3;
    readslicef_4_1_3 = tmp[0:0];
  end
  endfunction


  function automatic [15:0] conv_u2s_1_16 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_16 = {{15{1'b0}}, vector};
  end
  endfunction


  function automatic [15:0] conv_u2s_9_16 ;
    input [8:0]  vector ;
  begin
    conv_u2s_9_16 = {{7{1'b0}}, vector};
  end
  endfunction


  function automatic [12:0] conv_u2s_12_13 ;
    input [11:0]  vector ;
  begin
    conv_u2s_12_13 =  {1'b0, vector};
  end
  endfunction


  function automatic [15:0] conv_u2s_15_16 ;
    input [14:0]  vector ;
  begin
    conv_u2s_15_16 =  {1'b0, vector};
  end
  endfunction


  function automatic [13:0] conv_u2u_13_14 ;
    input [12:0]  vector ;
  begin
    conv_u2u_13_14 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    greenbalance2_core
// ------------------------------------------------------------------


module greenbalance2_core (
  clk, arst_n, top_reg_frameWidth, top_reg_frameHeight, top_reg_imgPattern, gb_reg_eb,
      gb_reg_Lbound, gb_reg_Hbound, gb_reg_threhold, src_rsc_dat, src_rsc_vld, src_rsc_rdy,
      dst_rsc_dat, dst_rsc_vld, dst_rsc_rdy, gb_lines_rsc_0_0_i_q_d, gb_lines_rsc_0_1_i_q_d,
      gb_lines_rsc_0_2_i_q_d, gb_lines_rsc_0_3_i_q_d, gb_lines_rsc_0_4_i_q_d, gb_lines_rsc_0_5_i_q_d,
      gb_lines_rsc_0_0_i_radr_d_pff, gb_lines_rsc_0_0_i_d_d_pff, gb_lines_rsc_0_0_i_we_d_pff,
      gb_lines_rsc_0_0_i_re_d_pff, gb_lines_rsc_0_1_i_we_d_pff, gb_lines_rsc_0_1_i_re_d_pff,
      gb_lines_rsc_0_2_i_we_d_pff, gb_lines_rsc_0_2_i_re_d_pff, gb_lines_rsc_0_3_i_we_d_pff,
      gb_lines_rsc_0_3_i_re_d_pff, gb_lines_rsc_0_4_i_we_d_pff, gb_lines_rsc_0_4_i_re_d_pff,
      gb_lines_rsc_0_5_i_we_d_pff, gb_lines_rsc_0_5_i_re_d_pff
);
  input clk;
  input arst_n;
  input [12:0] top_reg_frameWidth;
  input [12:0] top_reg_frameHeight;
  input [1:0] top_reg_imgPattern;
  input gb_reg_eb;
  input [3:0] gb_reg_Lbound;
  input [5:0] gb_reg_Hbound;
  input [9:0] gb_reg_threhold;
  input [11:0] src_rsc_dat;
  input src_rsc_vld;
  output src_rsc_rdy;
  output [11:0] dst_rsc_dat;
  output dst_rsc_vld;
  input dst_rsc_rdy;
  input [11:0] gb_lines_rsc_0_0_i_q_d;
  input [11:0] gb_lines_rsc_0_1_i_q_d;
  input [11:0] gb_lines_rsc_0_2_i_q_d;
  input [11:0] gb_lines_rsc_0_3_i_q_d;
  input [11:0] gb_lines_rsc_0_4_i_q_d;
  input [11:0] gb_lines_rsc_0_5_i_q_d;
  output [11:0] gb_lines_rsc_0_0_i_radr_d_pff;
  output [11:0] gb_lines_rsc_0_0_i_d_d_pff;
  output gb_lines_rsc_0_0_i_we_d_pff;
  output gb_lines_rsc_0_0_i_re_d_pff;
  output gb_lines_rsc_0_1_i_we_d_pff;
  output gb_lines_rsc_0_1_i_re_d_pff;
  output gb_lines_rsc_0_2_i_we_d_pff;
  output gb_lines_rsc_0_2_i_re_d_pff;
  output gb_lines_rsc_0_3_i_we_d_pff;
  output gb_lines_rsc_0_3_i_re_d_pff;
  output gb_lines_rsc_0_4_i_we_d_pff;
  output gb_lines_rsc_0_4_i_re_d_pff;
  output gb_lines_rsc_0_5_i_we_d_pff;
  output gb_lines_rsc_0_5_i_re_d_pff;


  // Interconnect Declarations
  wire core_wen;
  wire core_wten;
  wire src_rsci_wen_comp;
  wire [11:0] src_rsci_idat_mxwt;
  wire dst_rsci_wen_comp;
  reg [11:0] dst_rsci_idat;
  wire [11:0] gb_lines_rsc_0_0_i_q_d_mxwt;
  wire [11:0] gb_lines_rsc_0_1_i_q_d_mxwt;
  wire [11:0] gb_lines_rsc_0_2_i_q_d_mxwt;
  wire [11:0] gb_lines_rsc_0_3_i_q_d_mxwt;
  wire [11:0] gb_lines_rsc_0_4_i_q_d_mxwt;
  wire [11:0] gb_lines_rsc_0_5_i_q_d_mxwt;
  wire [2:0] operator_4_false_acc_tmp;
  wire [3:0] nl_operator_4_false_acc_tmp;
  wire col_loop_if_if_col_loop_if_if_xor_1_tmp;
  wire padding_outer_loop_and_101_tmp;
  wire padding_outer_loop_and_100_tmp;
  wire [5:0] in_window_loop_acc_tmp;
  wire [6:0] nl_in_window_loop_acc_tmp;
  wire line_feed_loop_line_feed_loop_xnor_tmp;
  wire mux_tmp_31;
  wire and_tmp_6;
  wire or_tmp_63;
  wire or_tmp_77;
  wire or_tmp_134;
  wire and_dcpl_138;
  wire or_dcpl_68;
  wire or_dcpl_69;
  wire or_tmp_138;
  wire mux_tmp_130;
  wire mux_tmp_132;
  wire or_dcpl_73;
  wire or_dcpl_76;
  wire or_dcpl_79;
  wire or_dcpl_80;
  wire or_dcpl_81;
  wire or_dcpl_87;
  wire or_dcpl_89;
  wire or_dcpl_92;
  wire or_dcpl_97;
  wire and_dcpl_141;
  wire and_dcpl_144;
  wire and_dcpl_147;
  wire and_dcpl_148;
  wire and_dcpl_152;
  wire and_dcpl_153;
  wire and_dcpl_154;
  wire or_dcpl_146;
  wire or_dcpl_148;
  wire or_dcpl_149;
  wire or_dcpl_153;
  wire and_tmp_24;
  wire and_tmp_25;
  wire or_tmp_153;
  wire and_tmp_30;
  wire and_tmp_31;
  wire mux_tmp_169;
  wire or_dcpl_199;
  wire operator_4_false_3_acc_tmp_2;
  wire operator_3_false_5_acc_tmp_2;
  wire [6:0] ColumnStatistic_if_1_acc_cse;
  wire [7:0] nl_ColumnStatistic_if_1_acc_cse;
  wire [12:0] sawtooth_loop_2_else_if_if_1_acc_5_cse;
  wire [14:0] nl_sawtooth_loop_2_else_if_if_1_acc_5_cse;
  wire [12:0] sawtooth_loop_2_else_else_if_3_acc_5_cse;
  wire [14:0] nl_sawtooth_loop_2_else_else_if_3_acc_5_cse;
  wire [12:0] sawtooth_loop_4_if_3_acc_5_cse;
  wire [14:0] nl_sawtooth_loop_4_if_3_acc_5_cse;
  wire lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_5_2_1;
  wire [1:0] lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_5_1_0_1;
  wire col_loop_asn_sft_lpi_1_dfm_1_mx0;
  wire lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_2_mx0w0;
  wire exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_1;
  wire sawtooth_loop_1_equal_tmp_3;
  wire sawtooth_loop_1_or_tmp_1;
  wire sawtooth_loop_1_and_73_ssc_1;
  wire [1:0] lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_1_0_1;
  wire sawtooth_loop_1_equal_tmp_4;
  wire sawtooth_loop_1_equal_tmp_5;
  wire sawtooth_loop_1_nor_tmp_1;
  wire exit_out_window_loop_lpi_1_dfm_3;
  wire exit_sawtooth_loop_1_pmx_lpi_1_dfm_mx0;
  reg [1:0] ColumnStatistic_j_1_3_1_lpi_1_1_0;
  reg lfst_exit_sawtooth_loop_1_lpi_1;
  reg sfi_col_loop_if_if_col_loop_if_if_xor_lpi_1;
  reg lfst_exitL_exit_sawtooth_loop_1_1_lpi_1;
  wire sawtooth_loop_1_sawtooth_loop_1_and_cse_1;
  wire sawtooth_loop_1_sawtooth_loop_1_nor_1_cse_1;
  reg lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_2;
  reg [1:0] lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_1_0;
  reg sfi_gb_reg_eb_1_lpi_1;
  wire lfst_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_1;
  reg lfst_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1;
  wire sfi_exit_col_loop_lpi_1_dfm_1;
  reg sfi_exit_col_loop_lpi_1;
  wire lfst_exitL_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_1;
  reg lfst_exitL_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1;
  wire exitL_exitL_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_1;
  reg exitL_exitL_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1;
  reg lfst_exit_col_loop_lpi_1;
  wire lfst_exitL_exit_col_loop_lpi_1_dfm_1;
  reg lfst_exitL_exit_col_loop_lpi_1;
  wire exitL_exitL_exit_col_loop_lpi_1_dfm_1;
  reg exitL_exitL_exit_col_loop_lpi_1;
  wire padding_outer_loop_padding_outer_loop_nor_2_cse_1;
  reg lfst_exit_padding_outer_loop_lpi_1_1;
  reg lfst_exit_padding_outer_loop_lpi_1_0;
  wire lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_1_1;
  wire lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_0_1;
  reg lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_1;
  reg lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0;
  reg [12:0] row_lpi_1;
  reg row_loop_asn_sft_lpi_1_dfm_1;
  reg padding_outer_loop_equal_tmp_1;
  reg padding_outer_loop_equal_tmp_3_1;
  wire sawtooth_loop_2_and_1_m1c_1;
  reg col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1;
  reg sawtooth_loop_2_if_slc_12_1_svs_1;
  wire sawtooth_loop_2_unequal_tmp_1;
  wire sawtooth_loop_2_else_unequal_tmp_1;
  reg row_loop_asn_sft_lpi_1_dfm_2;
  reg padding_outer_loop_equal_tmp_2;
  reg padding_outer_loop_equal_tmp_3_2;
  reg col_loop_asn_sft_lpi_1_dfm_2;
  reg col_loop_asn_sft_1_lpi_1_dfm_2;
  wire line_feed_loop_and_stg_1_1_sva_1;
  reg in_window_loop_and_stg_4_16_sva_2;
  reg in_window_loop_acc_decb_sva_2_5;
  wire line_feed_loop_and_stg_1_2_sva_1;
  reg in_window_loop_and_stg_4_9_sva_2;
  reg line_feed_loop_line_feed_loop_xnor_psp_sva_1;
  reg in_window_loop_and_stg_4_20_sva_2;
  reg in_window_loop_and_stg_4_13_sva_2;
  reg [29:0] ColumnStatistic_sum_total_ColumnStatistic_nand_itm_1;
  reg [11:0] gb_block_3_3_lpi_1;
  wire in_window_loop_and_stg_4_18_sva_1;
  wire sawtooth_loop_1_sawtooth_loop_1_nor_3_cse_1;
  wire col_loop_asn_sft_lpi_1_dfm_mx0;
  wire padding_outer_loop_padding_outer_loop_nor_cse_1;
  wire in_window_loop_and_stg_4_10_sva_1;
  wire in_window_loop_and_stg_3_4_sva_1;
  wire in_window_loop_and_stg_3_12_sva_1;
  wire in_window_loop_and_stg_4_22_sva_1;
  wire in_window_loop_and_stg_4_14_sva_1;
  wire lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_1_1;
  wire lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0_1;
  reg sfi_gb_reg_eb_lpi_1;
  wire exit_row_loop_lpi_1_dfm_1;
  wire padding_outer_loop_equal_tmp_5;
  wire padding_outer_loop_equal_tmp_4;
  wire col_loop_and_66_tmp_1;
  wire col_loop_asn_sft_1_lpi_1_dfm_1_mx0;
  wire row_loop_asn_sft_lpi_1_dfm_1_mx0;
  reg asn_sft_lpi_1;
  wire lfst_exit_padding_outer_loop_lpi_1_dfm_3_1_1;
  wire lfst_exit_padding_outer_loop_lpi_1_dfm_3_0_1;
  wire exit_col_loop_lpi_1_dfm_1;
  wire exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_1;
  reg col_loop_if_asn_sft_lpi_1;
  wire in_window_loop_and_stg_3_10_sva_1;
  wire in_window_loop_and_stg_2_2_sva_1;
  wire in_window_loop_and_stg_2_4_sva_1;
  wire in_window_loop_and_stg_3_14_sva_1;
  wire in_window_loop_and_stg_2_6_sva_1;
  wire in_window_loop_and_stg_3_2_sva_1;
  wire in_window_loop_and_stg_1_2_sva_1;
  wire in_window_loop_and_stg_1_0_sva_1;
  wire in_window_loop_and_stg_3_6_sva_1;
  reg [12:0] col_lpi_1;
  wire lfst_exit_padding_outer_loop_lpi_1_dfm_1_1;
  wire padding_outer_loop_equal_tmp_6;
  wire padding_outer_loop_and_55_ssc_1;
  wire padding_outer_loop_and_56_ssc_1;
  wire lfst_exit_padding_outer_loop_lpi_1_dfm_0_1;
  wire padding_outer_loop_equal_tmp_7;
  wire padding_outer_loop_or_tmp_2;
  reg [1:0] k_4_1_0_lpi_1;
  reg [2:0] line_feed_loop_mul_sdt_2_0_sva_1;
  wire [3:0] nl_line_feed_loop_mul_sdt_2_0_sva_1;
  reg in_window_loop_and_stg_3_2_sva_1_1;
  reg in_window_loop_and_stg_3_11_sva_1;
  reg [1:0] ColumnStatistic_i_1_2_1_lpi_1_dfm_1;
  wire [30:0] ColumnStatistic_sum_total_1_lpi_1_dfm_17;
  wire in_window_loop_and_stg_4_21_sva_1;
  wire in_window_loop_and_stg_4_20_sva_1;
  wire in_window_loop_and_stg_4_19_sva_1;
  wire in_window_loop_and_stg_4_17_sva_1;
  wire in_window_loop_and_stg_4_15_sva_1;
  wire in_window_loop_and_stg_4_13_sva_1;
  wire in_window_loop_and_stg_4_12_sva_1;
  wire in_window_loop_and_stg_4_11_sva_1;
  wire in_window_loop_and_stg_4_8_sva_1;
  wire in_window_loop_and_stg_4_7_sva_1;
  wire in_window_loop_and_stg_3_5_sva_1;
  wire in_window_loop_and_stg_3_3_sva_1;
  wire in_window_loop_and_stg_3_1_sva_1;
  wire in_window_loop_and_stg_3_0_sva_1;
  wire in_window_loop_and_stg_3_15_sva_1;
  wire in_window_loop_and_stg_3_13_sva_1;
  wire in_window_loop_and_stg_3_9_sva_1;
  wire in_window_loop_and_stg_3_8_sva_1;
  wire in_window_loop_and_stg_4_23_sva_1;
  wire in_window_loop_and_stg_4_16_sva_1;
  wire in_window_loop_and_stg_4_9_sva_1;
  wire [1:0] k_4_1_0_lpi_1_dfm_1;
  wire padding_outer_loop_or_3_tmp_1;
  wire padding_outer_loop_or_tmp_3;
  reg [12:0] i_lpi_1;
  wire [12:0] col_lpi_1_dfm_1;
  wire col_loop_and_50_tmp_1;
  wire in_window_loop_and_stg_3_7_sva_1;
  wire in_window_loop_and_stg_2_0_sva_1;
  wire in_window_loop_and_stg_2_1_sva_1;
  wire in_window_loop_and_stg_3_11_sva_mx0w0;
  wire in_window_loop_and_stg_2_3_sva_1;
  wire in_window_loop_and_stg_2_5_sva_1;
  wire in_window_loop_and_stg_2_7_sva_1;
  wire in_window_loop_and_stg_1_1_sva_1;
  wire in_window_loop_and_stg_1_3_sva_1;
  wire [12:0] row_lpi_1_dfm_1;
  reg col_loop_asn_sft_lpi_1_dfm_1;
  reg in_window_loop_and_stg_4_23_sva_1_1;
  reg sawtooth_loop_1_or_tmp_1_1;
  reg padding_outer_loop_and_131_itm_1;
  reg main_stage_0_2;
  reg lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_1_1;
  reg col_loop_asn_sft_1_lpi_1_dfm_1;
  reg lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_st_1_2;
  reg lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_1_0;
  reg col_loop_if_and_1_itm_1;
  reg col_loop_if_and_itm_1;
  reg [1:0] lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_st_1_1_0;
  reg sawtooth_loop_1_equal_tmp_1;
  reg exit_sawtooth_loop_1_pmx_lpi_1_dfm_st_1;
  reg col_loop_if_asn_sft_lpi_1_st_1;
  reg exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_st_1;
  reg col_loop_if_if_1_col_loop_if_if_1_or_itm_1;
  reg col_loop_asn_sft_lpi_1;
  reg col_loop_asn_sft_1_lpi_1;
  reg row_loop_asn_sft_lpi_1;
  reg exitL_exitL_exit_padding_outer_loop_sva;
  reg sfi_col_loop_if_land_lpi_1;
  reg col_loop_if_if_col_loop_if_if_xor_sft_lpi_1;
  reg main_stage_0_3;
  reg col_loop_if_and_1_itm_2;
  reg padding_inter_loop_slc_13_svs_st_2;
  reg lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_2_0;
  reg col_loop_if_and_itm_2;
  reg [1:0] lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_st_2_1_0;
  reg col_loop_if_if_1_col_loop_if_if_1_or_itm_2;
  reg exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_st_2;
  reg lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_st_2_2;
  reg lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_2_1;
  reg asn_sft_lpi_1_st_2;
  reg padding_outer_loop_and_131_itm_2;
  reg sawtooth_loop_1_equal_tmp_2_2;
  reg sfi_exit_col_loop_lpi_1_dfm_1_1;
  reg [1:0] ColumnStatistic_j_1_3_1_lpi_1_dfm_1_1_0;
  reg padding_outer_loop_and_116_itm_1;
  reg padding_outer_loop_and_123_itm_1;
  reg padding_outer_loop_and_128_itm_1;
  reg padding_outer_loop_and_135_itm_1;
  reg padding_outer_loop_and_140_itm_1;
  reg padding_outer_loop_and_147_itm_1;
  reg padding_outer_loop_and_111_itm_1;
  reg padding_outer_loop_and_112_itm_1;
  reg padding_outer_loop_and_113_itm_1;
  reg padding_outer_loop_and_114_itm_1;
  reg padding_outer_loop_and_115_itm_1;
  reg padding_outer_loop_and_117_itm_1;
  reg padding_outer_loop_and_118_itm_1;
  reg padding_outer_loop_and_119_itm_1;
  reg padding_outer_loop_and_120_itm_1;
  reg padding_outer_loop_and_121_itm_1;
  reg padding_outer_loop_and_122_itm_1;
  reg padding_outer_loop_and_124_itm_1;
  reg padding_outer_loop_and_125_itm_1;
  reg padding_outer_loop_and_126_itm_1;
  reg padding_outer_loop_and_127_itm_1;
  reg padding_outer_loop_and_129_itm_1;
  reg padding_outer_loop_and_130_itm_1;
  reg padding_outer_loop_and_132_itm_1;
  reg padding_outer_loop_and_133_itm_1;
  reg padding_outer_loop_and_134_itm_1;
  reg padding_outer_loop_and_136_itm_1;
  reg padding_outer_loop_and_137_itm_1;
  reg padding_outer_loop_and_138_itm_1;
  reg padding_outer_loop_and_139_itm_1;
  reg padding_outer_loop_and_141_itm_1;
  reg padding_outer_loop_and_142_itm_1;
  reg padding_outer_loop_and_143_itm_1;
  reg padding_outer_loop_and_144_itm_1;
  reg padding_outer_loop_and_145_itm_1;
  reg padding_outer_loop_and_146_itm_1;
  reg padding_outer_loop_and_148_itm_1;
  reg padding_outer_loop_and_149_itm_1;
  reg padding_outer_loop_and_150_itm_1;
  reg padding_outer_loop_and_151_itm_1;
  reg padding_outer_loop_and_110_itm_1;
  reg padding_outer_loop_and_171_itm_1;
  wire [2:0] k_2_sva_2;
  wire [3:0] nl_k_2_sva_2;
  wire [12:0] sawtooth_loop_2_if_if_1_acc_5_itm_1;
  wire [14:0] nl_sawtooth_loop_2_if_if_1_acc_5_itm_1;
  wire [30:0] clip_result_sva_1;
  wire [31:0] nl_clip_result_sva_1;
  wire sfi_col_loop_if_if_col_loop_if_if_xor_lpi_1_dfm_1;
  wire sfi_gb_reg_eb_1_lpi_1_dfm_1;
  reg [12:0] sawtooth_loop_2_if_if_1_acc_5_itm_1_1;
  wire ColumnStatistic_ColumnStatistic_nor_1_cse_1;
  wire row_loop_or_tmp_1;
  reg exit_padding_outer_loop_sva_1;
  reg [1:0] in_window_loop_acc_decb_sva_1_5_4;
  reg [11:0] abs_rawData_1_sva_1;
  wire [11:0] abs_rawData_2_sva_1;
  wire [11:0] abs_rawData_1_2_sva_1;
  reg [11:0] abs_rawData_2_3_sva_1;
  wire [11:0] abs_rawData_1_4_sva_1;
  wire [11:0] abs_rawData_2_7_sva_1;
  wire [11:0] abs_rawData_1_8_sva_1;
  wire [11:0] abs_rawData_2_11_sva_1;
  wire [11:0] abs_rawData_2_10_sva_1;
  wire ColumnStatistic_and_6_cse_1;
  reg [1:0] line_feed_loop_mul_sdt_2_0_sva_2_1_0;
  wire sawtooth_loop_2_and_5_cse_1;
  wire sawtooth_loop_2_and_6_cse_1;
  wire sawtooth_loop_2_and_7_cse_1;
  wire sawtooth_loop_2_and_8_cse_1;
  wire sawtooth_loop_1_and_75_rgt;
  wire sawtooth_loop_1_and_69_rgt;
  wire col_loop_and_54_rgt;
  wire ColumnStatistic_and_15_rgt;
  wire ColumnStatistic_and_1_rgt;
  wire ColumnStatistic_and_10_rgt;
  wire and_2_rgt;
  wire padding_outer_loop_and_rgt;
  wire padding_outer_loop_and_1_rgt;
  wire padding_outer_loop_and_52_rgt;
  wire and_190_m1c;
  wire and_178_m1c;
  reg reg_dst_rsci_oswt_cse;
  reg reg_gb_lines_rsc_0_0_i_oswt_cse;
  reg reg_gb_lines_rsc_0_1_i_oswt_cse;
  reg reg_gb_lines_rsc_0_2_i_oswt_cse;
  reg reg_gb_lines_rsc_0_3_i_oswt_cse;
  reg reg_gb_lines_rsc_0_4_i_oswt_cse;
  reg reg_gb_lines_rsc_0_5_i_oswt_cse;
  wire nor_15_cse;
  reg reg_src_rsci_oswt_cse;
  wire sawtooth_loop_1_and_80_cse;
  wire col_loop_and_cse;
  wire padding_outer_loop_and_178_cse;
  wire or_67_cse;
  wire or_56_cse;
  wire and_258_cse;
  wire or_358_cse;
  reg bGreen_lpi_1_dfm;
  wire padding_outer_loop_and_99_tmp_1;
  wire in_window_loop_and_108_tmp_1;
  reg sawtooth_loop_1_equal_tmp_1_1;
  reg sawtooth_loop_1_equal_tmp_2_1;
  reg sawtooth_loop_1_nor_tmp_1_1;
  reg operator_3_false_2_slc_operator_3_false_2_acc_2_svs_1;
  wire sawtooth_loop_1_or_50_tmp_1;
  wire padding_outer_loop_or_223_tmp_1;
  wire padding_outer_loop_or_230_tmp_1;
  wire col_loop_and_59_tmp_1;
  wire ColumnStatistic_ColumnStatistic_nor_3_cse_1;
  wire [1:0] operator_4_false_2_slc_operator_4_false_2_operator_4_false_2_acc_psp_sva_1;
  wire [2:0] nl_operator_4_false_2_slc_operator_4_false_2_operator_4_false_2_acc_psp_sva_1;
  wire gb_reg_eb_and_cse;
  wire nand_37_cse;
  wire mux_34_cse;
  wire gb_lines_rsc_0_0_i_we_d_iff;
  wire gb_lines_rsc_0_0_i_re_d_iff;
  wire line_feed_loop_line_feed_loop_nor_14_rmff;
  wire gb_lines_rsc_0_1_i_we_d_iff;
  wire gb_lines_rsc_0_1_i_re_d_iff;
  wire line_feed_loop_line_feed_loop_nor_13_rmff;
  wire gb_lines_rsc_0_2_i_we_d_iff;
  wire gb_lines_rsc_0_2_i_re_d_iff;
  wire line_feed_loop_line_feed_loop_nor_12_rmff;
  wire gb_lines_rsc_0_3_i_we_d_iff;
  wire gb_lines_rsc_0_3_i_re_d_iff;
  wire line_feed_loop_line_feed_loop_nor_11_rmff;
  wire gb_lines_rsc_0_4_i_we_d_iff;
  wire gb_lines_rsc_0_4_i_re_d_iff;
  wire line_feed_loop_line_feed_loop_nor_10_rmff;
  wire gb_lines_rsc_0_5_i_we_d_iff;
  wire gb_lines_rsc_0_5_i_re_d_iff;
  wire line_feed_loop_line_feed_loop_nor_9_rmff;
  wire [11:0] gb_block_1_6_lpi_1_mx0;
  wire [11:0] gb_block_2_6_lpi_1_mx0;
  wire [11:0] gb_block_3_6_lpi_1_mx0;
  wire [11:0] gb_block_4_6_lpi_1_mx0;
  wire [11:0] gb_block_5_6_lpi_1_mx0;
  wire [11:0] pixel_in_lpi_1_dfm_mx0;
  reg [2:0] k_3_lpi_1;
  wire [2:0] l_sva_2;
  wire [3:0] nl_l_sva_2;
  wire [1:0] ColumnStatistic_j_2_1_sva_2;
  wire [2:0] nl_ColumnStatistic_j_2_1_sva_2;
  wire ColumnStatistic_mux_44_itm;
  wire [4:0] z_out;
  wire [5:0] nl_z_out;
  wire and_dcpl_181;
  wire and_dcpl_182;
  wire [5:0] z_out_3;
  wire [6:0] nl_z_out_3;
  wire [12:0] z_out_11;
  wire [12:0] z_out_14;
  wire [12:0] z_out_15;
  wire and_dcpl_211;
  wire and_dcpl_212;
  wire and_dcpl_214;
  wire and_dcpl_216;
  wire and_dcpl_217;
  wire and_dcpl_219;
  wire and_dcpl_221;
  wire and_dcpl_223;
  wire and_dcpl_224;
  wire and_dcpl_225;
  wire and_dcpl_226;
  wire and_dcpl_227;
  wire and_dcpl_228;
  wire and_dcpl_229;
  wire and_dcpl_230;
  wire and_dcpl_231;
  wire and_dcpl_232;
  wire and_dcpl_233;
  wire [12:0] z_out_26;
  wire [13:0] nl_z_out_26;
  wire [30:0] z_out_27;
  wire [31:0] nl_z_out_27;
  wire [11:0] z_out_31;
  wire [11:0] z_out_32;
  wire [5:0] z_out_33;
  wire [6:0] nl_z_out_33;
  wire and_dcpl_253;
  wire and_dcpl_256;
  wire and_dcpl_257;
  wire [5:0] z_out_34;
  wire or_dcpl_230;
  wire and_dcpl_274;
  wire and_dcpl_277;
  wire [3:0] z_out_37;
  wire [5:0] z_out_38;
  wire [2:0] z_out_40;
  wire [3:0] nl_z_out_40;
  wire and_dcpl_284;
  wire [1:0] z_out_41;
  wire [2:0] nl_z_out_41;
  wire [3:0] z_out_42;
  wire and_dcpl_294;
  wire [2:0] z_out_43;
  wire [3:0] nl_z_out_43;
  wire [4:0] z_out_44;
  wire [5:0] nl_z_out_44;
  wire and_dcpl_307;
  wire and_dcpl_310;
  wire and_dcpl_311;
  wire and_dcpl_312;
  wire [2:0] z_out_46;
  wire [2:0] z_out_47;
  reg [11:0] gb_block_3_2_lpi_1;
  reg [11:0] gb_block_3_4_lpi_1;
  reg [11:0] gb_block_3_1_lpi_1;
  reg [11:0] gb_block_3_5_lpi_1;
  reg [11:0] gb_block_3_0_lpi_1;
  reg [11:0] gb_block_3_6_lpi_1;
  reg [11:0] gb_block_2_6_lpi_1;
  reg [11:0] gb_block_4_0_lpi_1;
  reg [11:0] gb_block_2_5_lpi_1;
  reg [11:0] gb_block_4_1_lpi_1;
  reg [11:0] gb_block_2_4_lpi_1;
  reg [11:0] gb_block_4_2_lpi_1;
  reg [11:0] gb_block_2_3_lpi_1;
  reg [11:0] gb_block_4_3_lpi_1;
  reg [11:0] gb_block_2_2_lpi_1;
  reg [11:0] gb_block_4_4_lpi_1;
  reg [11:0] gb_block_2_1_lpi_1;
  reg [11:0] gb_block_4_5_lpi_1;
  reg [11:0] gb_block_2_0_lpi_1;
  reg [11:0] gb_block_4_6_lpi_1;
  reg [11:0] gb_block_1_6_lpi_1;
  reg [11:0] gb_block_5_0_lpi_1;
  reg [11:0] gb_block_1_5_lpi_1;
  reg [11:0] gb_block_5_1_lpi_1;
  reg [11:0] gb_block_1_4_lpi_1;
  reg [11:0] gb_block_5_2_lpi_1;
  reg [11:0] gb_block_1_3_lpi_1;
  reg [11:0] gb_block_5_3_lpi_1;
  reg [11:0] gb_block_1_2_lpi_1;
  reg [11:0] gb_block_5_4_lpi_1;
  reg [11:0] gb_block_1_1_lpi_1;
  reg [11:0] gb_block_5_5_lpi_1;
  reg [11:0] gb_block_1_0_lpi_1;
  reg [11:0] gb_block_5_6_lpi_1;
  reg [11:0] gb_block_0_6_lpi_1;
  reg [11:0] gb_block_6_0_lpi_1;
  reg [11:0] gb_block_0_5_lpi_1;
  reg [11:0] gb_block_6_1_lpi_1;
  reg [11:0] gb_block_0_4_lpi_1;
  reg [11:0] gb_block_6_2_lpi_1;
  reg [11:0] gb_block_0_3_lpi_1;
  reg [11:0] gb_block_6_3_lpi_1;
  reg [11:0] gb_block_0_2_lpi_1;
  reg [11:0] gb_block_6_4_lpi_1;
  reg [11:0] gb_block_0_1_lpi_1;
  reg [11:0] gb_block_6_5_lpi_1;
  reg [11:0] gb_block_0_0_lpi_1;
  reg [11:0] gb_block_6_6_lpi_1;
  reg [11:0] pixel_in_lpi_1;
  reg [2:0] k_1_lpi_1;
  reg [2:0] l_lpi_1;
  reg [2:0] k_2_lpi_1;
  reg [30:0] ColumnStatistic_sum_total_1_lpi_1;
  reg [5:0] ColumnStatistic_count_total_lpi_1;
  reg [1:0] ColumnStatistic_i_1_2_1_lpi_1;
  reg [1:0] ColumnStatistic_i_2_1_lpi_1;
  reg lfst_exitL_exit_sawtooth_loop_1_lpi_1;
  reg [1:0] ColumnStatistic_j_2_1_lpi_1;
  reg [11:0] pixel_out_1_lpi_1;
  reg [1:0] k_1_0_lpi_1;
  reg line_feed_loop_and_22_tmp_1;
  reg in_window_loop_and_66_tmp_1;
  reg in_window_loop_and_67_tmp_1;
  reg sawtooth_loop_1_nor_tmp_2;
  reg sawtooth_loop_1_equal_tmp_1_2;
  reg sawtooth_loop_1_equal_tmp_2;
  reg sawtooth_loop_1_or_tmp_2;
  reg [1:0] greenbalance2_label0_acc_cse_sva_1;
  reg [2:0] k_3_sva_1_1;
  reg [2:0] k_3_lpi_1_dfm_1;
  reg in_window_loop_and_stg_4_9_sva_1_1;
  reg in_window_loop_and_stg_4_13_sva_1_1;
  reg in_window_loop_and_stg_4_16_sva_1_1;
  reg in_window_loop_and_stg_4_20_sva_1_1;
  reg [11:0] in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1;
  reg [1:0] line_feed_loop_acc_9_psp_2;
  reg [5:0] ColumnStatistic_count_total_lpi_1_dfm_1;
  reg [30:0] ColumnStatistic_sum_total_1_lpi_1_dfm_1;
  reg [2:0] sawtooth_loop_2_else_else_if_acc_itm_1;
  reg [4:0] operator_4_false_12_acc_itm_1;
  reg col_loop_if_not_56_itm_1;
  reg col_loop_if_not_56_itm_2;
  reg [11:0] greenbalance2_label0_mux_itm_1;
  reg col_loop_if_asn_sft_lpi_1_st_2;
  reg exit_sawtooth_loop_1_pmx_lpi_1_dfm_st_2;
  reg col_lpi_1_dfm_2_0;
  reg [2:0] operator_4_false_9_acc_itm_1_2_0;
  wire [11:0] gb_block_0_6_lpi_1_mx0;
  wire dst_rsci_idat_mx0c0;
  wire dst_rsci_idat_mx0c1;
  wire dst_rsci_idat_mx0c2;
  wire [11:0] gb_block_3_3_lpi_1_mx0;
  wire [11:0] tmp_lpi_1_dfm_1;
  wire line_feed_loop_and_1_tmp_1;
  wire [11:0] in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1;
  wire in_window_loop_and_94_tmp_1;
  wire line_feed_loop_and_25_tmp_1;
  wire in_window_loop_and_80_tmp_1;
  wire line_feed_loop_and_19_tmp_1;
  wire line_feed_loop_and_16_tmp_1;
  wire in_window_loop_and_81_tmp_1;
  wire line_feed_loop_and_13_tmp_1;
  wire in_window_loop_and_95_tmp_1;
  wire col_loop_and_6_tmp_1;
  wire [11:0] pixel_out_1_lpi_1_dfm_2;
  wire padding_outer_loop_padding_outer_loop_nor_58_tmp_1;
  wire [11:0] gb_block_1_0_lpi_1_mx0;
  wire [11:0] gb_block_2_1_lpi_1_mx0;
  wire [11:0] gb_block_3_0_lpi_1_mx0;
  wire [11:0] gb_block_4_1_lpi_1_mx0;
  wire [11:0] gb_block_5_0_lpi_1_mx0;
  wire [11:0] gb_block_6_1_lpi_1_mx0;
  wire [2:0] k_3_lpi_1_mx0;
  wire [11:0] gb_block_0_1_lpi_1_mx0;
  wire [11:0] gb_block_0_3_lpi_1_mx0;
  wire [11:0] gb_block_0_5_lpi_1_mx0;
  wire [11:0] gb_block_2_3_lpi_1_mx0;
  wire [11:0] gb_block_2_5_lpi_1_mx0;
  wire [11:0] gb_block_4_3_lpi_1_mx0;
  wire [11:0] gb_block_4_5_lpi_1_mx0;
  wire [11:0] gb_block_5_2_lpi_1_mx0;
  wire [11:0] gb_block_6_5_lpi_1_mx0;
  wire [5:0] ColumnStatistic_count_total_lpi_1_dfm_1_mx0w0;
  wire [6:0] nl_ColumnStatistic_count_total_lpi_1_dfm_1_mx0w0;
  wire [11:0] abs_rawData_1_sva_mx0w0;
  wire [1:0] ColumnStatistic_i_1_2_1_lpi_1_dfm_mx0w0;
  wire [1:0] ColumnStatistic_i_2_1_lpi_1_dfm_mx0w1;
  wire [30:0] ColumnStatistic_sum_total_1_lpi_1_dfm_5_mx0;
  wire [5:0] ColumnStatistic_count_total_lpi_1_dfm_5_mx0;
  wire [30:0] ColumnStatistic_sum_total_1_lpi_1_dfm_6_mx0;
  wire [1:0] ColumnStatistic_j_1_3_1_lpi_1_dfm_1_0_mx0w0;
  wire [5:0] ColumnStatistic_count_total_lpi_1_dfm_16;
  wire padding_outer_loop_or_225_tmp_1;
  wire [2:0] k_3_sva_2;
  wire [3:0] nl_k_3_sva_2;
  wire [2:0] k_1_lpi_1_dfm_1;
  wire [2:0] l_lpi_1_dfm_2;
  wire [11:0] abs_rawData_2_1_sva_1;
  wire exit_sawtooth_loop_1_lpi_1_dfm_3;
  wire [1:0] operator_4_false_16_slc_operator_4_false_16_operator_4_false_16_acc_psp_sva_1;
  wire [2:0] nl_operator_4_false_16_slc_operator_4_false_16_operator_4_false_16_acc_psp_sva_1;
  wire exitL_exit_sawtooth_loop_1_lpi_1_dfm_3;
  wire [1:0] ColumnStatistic_j_2_1_lpi_1_dfm_2;
  wire [30:0] ColumnStatistic_sum_total_1_lpi_1_mx0;
  wire [5:0] ColumnStatistic_count_total_lpi_1_mx0;
  wire [32:0] operator_44_true_acc_psp_sva_1;
  wire [33:0] nl_operator_44_true_acc_psp_sva_1;
  wire [33:0] operator_46_true_acc_psp_sva_1;
  wire [34:0] nl_operator_46_true_acc_psp_sva_1;
  wire sawtooth_loop_1_or_183_tmp_1;
  wire col_loop_and_70_tmp_1;
  wire exitL_exit_col_loop_lpi_1_dfm_1;
  wire [2:0] line_feed_loop_line_feed_loop_conc_1_idiv_14_12_sva_1;
  wire [3:0] nl_line_feed_loop_line_feed_loop_conc_1_idiv_14_12_sva_1;
  wire [1:0] lines_write_loop_acc_12_psp_sva_1;
  wire [3:0] nl_lines_write_loop_acc_12_psp_sva_1;
  wire [2:0] lines_write_loop_lines_write_loop_conc_idiv_14_12_sva_1;
  wire [3:0] nl_lines_write_loop_lines_write_loop_conc_idiv_14_12_sva_1;
  wire [3:0] lines_write_loop_acc_10_psp_sva_1;
  wire [5:0] nl_lines_write_loop_acc_10_psp_sva_1;
  wire [2:0] lines_write_loop_acc_11_psp_sva_1;
  wire [3:0] nl_lines_write_loop_acc_11_psp_sva_1;
  wire [1:0] k_1_0_sva_2;
  wire [2:0] nl_k_1_0_sva_2;
  wire [30:0] operator_31_true_acc_2;
  wire [31:0] nl_operator_31_true_acc_2;
  wire [1:0] line_feed_loop_acc_33;
  wire [3:0] nl_line_feed_loop_acc_33;
  wire [1:0] line_feed_loop_acc_35;
  wire [3:0] nl_line_feed_loop_acc_35;
  wire [2:0] line_feed_loop_acc_39;
  wire [4:0] nl_line_feed_loop_acc_39;
  wire [5:0] ROM_1i5_1o6_909eb1361a488e6876f74b06293376842f_1;
  wire col_loop_and_76_rgt;
  wire row_loop_and_1_rgt;
  wire and_4_rgt;
  wire [30:0] ColumnStatistic_sum_total_mux_cse;
  wire [5:0] ColumnStatistic_count_total_mux_cse;
  wire xor_8_cse;
  wire [11:0] sawtooth_loop_2_else_else_if_mux_6_cse;
  wire [11:0] sawtooth_loop_2_else_else_if_mux_7_cse;
  wire [11:0] sawtooth_loop_2_else_else_if_mux_8_cse;
  wire [11:0] sawtooth_loop_2_else_else_if_mux_10_cse;
  wire [11:0] sawtooth_loop_2_else_else_if_mux_11_cse;
  wire [11:0] sawtooth_loop_2_else_else_if_mux_12_cse;
  wire nor_135_cse;
  wire [5:0] ColumnStatistic_count_total_mux_5_cse;
  wire ColumnStatistic_or_4_cse;
  wire padding_outer_loop_padding_outer_loop_and_15_cse;
  wire and_283_cse;
  wire [30:0] ColumnStatistic_sum_total_mux_2_cse;
  wire nand_39_itm;
  wire [11:0] sawtooth_loop_2_else_else_if_mux_18_itm;
  wire operator_4_false_12_nor_2_itm;
  wire operator_4_false_12_or_itm;
  wire sawtooth_loop_2_else_if_if_1_acc_itm_12_1;
  wire sawtooth_loop_2_else_else_if_3_acc_itm_12_1;
  wire sawtooth_loop_4_if_3_acc_itm_12_1;
  wire padding_inter_loop_acc_13_itm_13_1;
  wire operator_3_false_1_acc_itm_2_1;
  wire operator_3_false_2_acc_itm_2_1;
  wire operator_3_false_3_acc_itm_2_1;
  wire col_loop_acc_2_itm_13_1;
  wire row_loop_acc_3_itm_13_1;
  wire operator_4_false_2_acc_itm_2_1;
  wire [28:0] ColumnStatistic_else_1_if_else_mul_itm_36_8;
  wire [34:0] ColumnStatistic_else_1_else_if_mul_itm_42_8;
  wire [35:0] ColumnStatistic_else_1_else_else_mul_itm_43_8;
  wire line_feed_loop_mux1h_12_cse;
  wire line_feed_loop_line_feed_loop_mux_12_cse;
  wire line_feed_loop_line_feed_loop_mux_14_cse;
  wire line_feed_loop_line_feed_loop_mux_18_cse;
  wire line_feed_loop_mux1h_15_cse;
  wire line_feed_loop_line_feed_loop_mux_21_cse;
  wire line_feed_loop_mux1h_74_cse;
  wire line_feed_loop_line_feed_loop_mux_25_cse;
  wire line_feed_loop_line_feed_loop_mux_31_cse;
  wire line_feed_loop_line_feed_loop_mux_11_cse;
  wire z_out_12_12;
  wire z_out_13_12;
  wire z_out_16_12;
  wire [2:0] z_out_36_3_1;
  wire [1:0] z_out_39_1_0;
  wire [2:0] nl_z_out_39_1_0;
  wire [1:0] z_out_45_1_0;
  wire and_280_cse;
  wire and_282_cse;
  wire sawtooth_loop_4_if_3_or_5_cse;

  wire[0:0] mux_128_nl;
  wire[0:0] mux_127_nl;
  wire[0:0] or_194_nl;
  wire[0:0] mux_126_nl;
  wire[0:0] or_193_nl;
  wire[0:0] col_loop_if_if_1_and_nl;
  wire[0:0] col_loop_if_if_1_and_1_nl;
  wire[0:0] col_loop_if_if_1_and_2_nl;
  wire[0:0] col_loop_if_if_1_and_3_nl;
  wire[0:0] col_loop_if_if_1_and_4_nl;
  wire[0:0] col_loop_if_if_1_and_5_nl;
  wire[29:0] ColumnStatistic_mux_nl;
  wire[35:0] ColumnStatistic_else_1_if_if_mul_nl;
  wire[28:0] operator_31_true_1_acc_nl;
  wire[30:0] nl_operator_31_true_1_acc_nl;
  wire[30:0] operator_45_true_operator_45_true_acc_nl;
  wire[31:0] nl_operator_45_true_operator_45_true_acc_nl;
  wire[0:0] operator_45_true_and_nl;
  wire[30:0] operator_31_true_3_acc_nl;
  wire[32:0] nl_operator_31_true_3_acc_nl;
  wire[0:0] operator_47_true_nand_nl;
  wire[0:0] ColumnStatistic_and_4_nl;
  wire[6:0] ColumnStatistic_else_1_if_acc_nl;
  wire[7:0] nl_ColumnStatistic_else_1_if_acc_nl;
  wire[0:0] ColumnStatistic_if_1_not_8_nl;
  wire[0:0] line_feed_loop_line_feed_loop_and_4_nl;
  wire[0:0] greenbalance2_label0_and_nl;
  wire[0:0] greenbalance2_label0_and_1_nl;
  wire[0:0] greenbalance2_label0_and_2_nl;
  wire[0:0] and_168_nl;
  wire[0:0] nor_129_nl;
  wire[11:0] sawtooth_loop_2_else_else_sawtooth_loop_2_else_else_if_2_mux_nl;
  wire[11:0] line_feed_loop_acc_48_nl;
  wire[15:0] nl_line_feed_loop_acc_48_nl;
  wire[8:0] acc_2_nl;
  wire[9:0] nl_acc_2_nl;
  wire[0:0] line_feed_loop_line_feed_loop_mux_40_nl;
  wire[0:0] line_feed_loop_line_feed_loop_mux_42_nl;
  wire[7:0] acc_1_nl;
  wire[8:0] nl_acc_1_nl;
  wire[0:0] line_feed_loop_line_feed_loop_mux_37_nl;
  wire[0:0] line_feed_loop_line_feed_loop_mux_38_nl;
  wire[0:0] line_feed_loop_line_feed_loop_mux_39_nl;
  wire[0:0] line_feed_loop_mux1h_112_nl;
  wire[0:0] line_feed_loop_line_feed_loop_mux_41_nl;
  wire[0:0] and_171_nl;
  wire[0:0] sawtooth_loop_2_if_if_and_nl;
  wire[0:0] sawtooth_loop_2_if_if_and_1_nl;
  wire[0:0] sawtooth_loop_2_if_if_and_2_nl;
  wire[0:0] and_180_nl;
  wire[0:0] sawtooth_loop_2_if_if_or_nl;
  wire[0:0] and_184_nl;
  wire[0:0] col_loop_if_aelse_not_7_nl;
  wire[5:0] col_loop_if_col_loop_if_and_nl;
  wire[0:0] col_loop_if_aelse_not_8_nl;
  wire[5:0] operator_3_false_acc_nl;
  wire[6:0] nl_operator_3_false_acc_nl;
  wire[0:0] or_297_nl;
  wire[0:0] or_61_nl;
  wire[4:0] operator_4_false_13_mux_nl;
  wire[3:0] operator_4_false_acc_nl;
  wire[4:0] nl_operator_4_false_acc_nl;
  wire[0:0] sawtooth_loop_2_else_if_if_1_and_nl;
  wire[0:0] sawtooth_loop_2_else_if_if_1_and_1_nl;
  wire[0:0] sawtooth_loop_2_else_if_if_1_and_2_nl;
  wire[0:0] mux_139_nl;
  wire[0:0] mux_138_nl;
  wire[0:0] mux_137_nl;
  wire[1:0] lines_write_loop_acc_9_nl;
  wire[2:0] nl_lines_write_loop_acc_9_nl;
  wire[0:0] and_191_nl;
  wire[0:0] and_192_nl;
  wire[0:0] or_452_nl;
  wire[0:0] and_193_nl;
  wire[0:0] nor_128_nl;
  wire[0:0] padding_inter_loop_padding_inter_loop_and_nl;
  wire[0:0] and_195_nl;
  wire[0:0] and_196_nl;
  wire[0:0] padding_inter_loop_padding_inter_loop_and_3_nl;
  wire[0:0] and_198_nl;
  wire[0:0] and_199_nl;
  wire[12:0] sawtooth_loop_2_if_if_1_acc_nl;
  wire[13:0] nl_sawtooth_loop_2_if_if_1_acc_nl;
  wire[12:0] acc_25_nl;
  wire[13:0] nl_acc_25_nl;
  wire[11:0] abs_1_if_mux_2_nl;
  wire[11:0] abs_1_if_mux_3_nl;
  wire[0:0] padding_inter_loop_padding_inter_loop_and_1_nl;
  wire[0:0] nor_133_nl;
  wire[0:0] mux_144_nl;
  wire[0:0] mux_143_nl;
  wire[0:0] mux_142_nl;
  wire[0:0] mux_141_nl;
  wire[0:0] mux_140_nl;
  wire[0:0] or_314_nl;
  wire[0:0] mux_169_nl;
  wire[0:0] mux_168_nl;
  wire[0:0] mux_167_nl;
  wire[0:0] mux_165_nl;
  wire[0:0] mux_164_nl;
  wire[0:0] mux_163_nl;
  wire[0:0] mux_162_nl;
  wire[0:0] mux_161_nl;
  wire[0:0] and_241_nl;
  wire[0:0] or_58_nl;
  wire[0:0] or_399_nl;
  wire[2:0] out_window_loop_out_window_loop_and_1_nl;
  wire[0:0] sawtooth_loop_1_sawtooth_loop_1_out_window_loop_not_3_nl;
  wire[1:0] padding_outer_loop_mux_57_nl;
  wire[0:0] ColumnStatistic_and_3_nl;
  wire[0:0] ColumnStatistic_nand_nl;
  wire[0:0] or_400_nl;
  wire[0:0] sawtooth_loop_1_mux_38_nl;
  wire[0:0] lines_write_loop_lines_write_loop_or_nl;
  wire[12:0] operator_13_false_1_acc_nl;
  wire[13:0] nl_operator_13_false_1_acc_nl;
  wire[12:0] operator_13_false_acc_nl;
  wire[13:0] nl_operator_13_false_acc_nl;
  wire[12:0] padding_inter_loop_padding_inter_loop_and_7_nl;
  wire[0:0] padding_outer_loop_not_nl;
  wire[0:0] padding_outer_loop_mux_62_nl;
  wire[0:0] row_loop_row_loop_or_2_nl;
  wire[0:0] or_361_nl;
  wire[0:0] mux_174_nl;
  wire[0:0] mux_173_nl;
  wire[0:0] mux_172_nl;
  wire[0:0] mux_171_nl;
  wire[0:0] or_385_nl;
  wire[0:0] and_217_nl;
  wire[0:0] padding_inter_loop_padding_inter_loop_and_2_nl;
  wire[0:0] col_loop_if_if_1_col_loop_if_if_1_or_nl;
  wire[13:0] operator_13_false_3_acc_nl;
  wire[14:0] nl_operator_13_false_3_acc_nl;
  wire[11:0] operator_13_false_2_acc_nl;
  wire[12:0] nl_operator_13_false_2_acc_nl;
  wire[0:0] padding_inter_loop_padding_inter_loop_nor_nl;
  wire[0:0] col_loop_if_and_1_nl;
  wire[0:0] line_feed_loop_line_feed_loop_and_2_nl;
  wire[0:0] col_loop_if_and_nl;
  wire[0:0] line_feed_loop_line_feed_loop_nor_2_nl;
  wire[0:0] padding_inter_loop_padding_inter_loop_and_4_nl;
  wire[0:0] gb_block_nand_5_nl;
  wire[0:0] sawtooth_loop_1_and_47_nl;
  wire[0:0] sawtooth_loop_1_and_49_nl;
  wire[0:0] gb_block_nand_4_nl;
  wire[0:0] sawtooth_loop_1_and_7_nl;
  wire[0:0] sawtooth_loop_1_and_9_nl;
  wire[0:0] gb_block_nand_3_nl;
  wire[0:0] sawtooth_loop_1_and_57_nl;
  wire[0:0] sawtooth_loop_1_and_59_nl;
  wire[0:0] gb_block_nand_2_nl;
  wire[0:0] sawtooth_loop_1_and_17_nl;
  wire[0:0] sawtooth_loop_1_and_19_nl;
  wire[0:0] gb_block_nand_1_nl;
  wire[0:0] sawtooth_loop_1_and_27_nl;
  wire[0:0] sawtooth_loop_1_and_29_nl;
  wire[0:0] gb_block_nand_nl;
  wire[0:0] sawtooth_loop_1_and_37_nl;
  wire[0:0] sawtooth_loop_1_and_39_nl;
  wire[0:0] asn_gb_block_3_3_lpi_1_nand_nl;
  wire[0:0] line_feed_loop_line_feed_loop_and_nl;
  wire[0:0] line_feed_loop_line_feed_loop_and_1_nl;
  wire[0:0] line_feed_loop_line_feed_loop_and_3_nl;
  wire[11:0] clip_clip_clip_nor_nl;
  wire[11:0] clip_nor_nl;
  wire[17:0] operator_31_true_acc_nl;
  wire[18:0] nl_operator_31_true_acc_nl;
  wire[0:0] asn_gb_block_1_0_lpi_1_nand_nl;
  wire[0:0] asn_gb_block_2_1_lpi_1_nand_nl;
  wire[0:0] asn_gb_block_3_0_lpi_1_nand_nl;
  wire[0:0] asn_gb_block_4_1_lpi_1_nand_nl;
  wire[0:0] asn_gb_block_5_0_lpi_1_nand_nl;
  wire[0:0] asn_gb_block_6_1_lpi_1_nand_nl;
  wire[0:0] k_nand_nl;
  wire[0:0] col_loop_and_55_nl;
  wire[0:0] col_loop_and_56_nl;
  wire[0:0] asn_gb_block_0_1_lpi_1_nand_nl;
  wire[0:0] asn_gb_block_0_3_lpi_1_nand_nl;
  wire[0:0] asn_gb_block_0_5_lpi_1_nand_nl;
  wire[0:0] asn_gb_block_2_3_lpi_1_nand_nl;
  wire[0:0] asn_gb_block_2_5_lpi_1_nand_nl;
  wire[0:0] asn_gb_block_4_3_lpi_1_nand_nl;
  wire[0:0] asn_gb_block_4_5_lpi_1_nand_nl;
  wire[0:0] asn_gb_block_5_2_lpi_1_nand_nl;
  wire[0:0] asn_gb_block_6_5_lpi_1_nand_nl;
  wire[12:0] sawtooth_loop_2_else_if_if_1_acc_nl;
  wire[13:0] nl_sawtooth_loop_2_else_if_if_1_acc_nl;
  wire[12:0] acc_17_nl;
  wire[13:0] nl_acc_17_nl;
  wire[11:0] abs_3_if_mux_2_nl;
  wire[11:0] abs_3_if_mux_3_nl;
  wire[30:0] sawtooth_loop_2_else_else_if_2_acc_nl;
  wire[31:0] nl_sawtooth_loop_2_else_else_if_2_acc_nl;
  wire[12:0] sawtooth_loop_2_else_else_if_3_acc_nl;
  wire[13:0] nl_sawtooth_loop_2_else_else_if_3_acc_nl;
  wire[12:0] acc_19_nl;
  wire[13:0] nl_acc_19_nl;
  wire[11:0] abs_7_if_mux_2_nl;
  wire[11:0] abs_7_if_mux_3_nl;
  wire[0:0] col_loop_if_if_not_8_nl;
  wire[0:0] col_loop_if_if_not_6_nl;
  wire[30:0] sawtooth_loop_2_else_else_if_1_acc_nl;
  wire[31:0] nl_sawtooth_loop_2_else_else_if_1_acc_nl;
  wire[5:0] sawtooth_loop_2_else_else_if_1_acc_6_nl;
  wire[6:0] nl_sawtooth_loop_2_else_else_if_1_acc_6_nl;
  wire[0:0] ColumnStatistic_ColumnStatistic_and_1_nl;
  wire[12:0] sawtooth_loop_4_if_3_acc_nl;
  wire[13:0] nl_sawtooth_loop_4_if_3_acc_nl;
  wire[12:0] acc_21_nl;
  wire[13:0] nl_acc_21_nl;
  wire[11:0] abs_11_if_mux_2_nl;
  wire[11:0] abs_11_if_mux_3_nl;
  wire[30:0] sawtooth_loop_4_if_3_acc_6_nl;
  wire[31:0] nl_sawtooth_loop_4_if_3_acc_6_nl;
  wire[30:0] sawtooth_loop_4_if_3_sawtooth_loop_4_if_3_mux_1_nl;
  wire[12:0] sawtooth_loop_4_if_3_mux1h_2_nl;
  wire[0:0] ColumnStatistic_or_6_nl;
  wire[0:0] ColumnStatistic_or_2_nl;
  wire[5:0] sawtooth_loop_4_if_3_acc_7_nl;
  wire[6:0] nl_sawtooth_loop_4_if_3_acc_7_nl;
  wire[5:0] sawtooth_loop_4_if_3_sawtooth_loop_4_if_3_sawtooth_loop_4_if_3_mux_1_nl;
  wire[0:0] sawtooth_loop_4_if_3_or_4_nl;
  wire[0:0] ColumnStatistic_or_nl;
  wire[0:0] ColumnStatistic_or_1_nl;
  wire[0:0] ColumnStatistic_or_5_nl;
  wire[13:0] padding_inter_loop_acc_13_nl;
  wire[14:0] nl_padding_inter_loop_acc_13_nl;
  wire[0:0] gb_reg_eb_not_10_nl;
  wire[0:0] and_208_nl;
  wire[0:0] or_311_nl;
  wire[0:0] or_312_nl;
  wire[0:0] sawtooth_loop_1_mux_31_nl;
  wire[1:0] sawtooth_loop_1_and_nl;
  wire[1:0] sawtooth_loop_1_mux1h_175_nl;
  wire[0:0] sawtooth_loop_1_and_77_nl;
  wire[0:0] sawtooth_loop_1_and_78_nl;
  wire[0:0] sawtooth_loop_1_or_184_nl;
  wire[0:0] sawtooth_loop_1_nor_7_nl;
  wire[0:0] sawtooth_loop_1_and_71_nl;
  wire[0:0] gb_reg_eb_not_12_nl;
  wire[2:0] operator_3_false_1_acc_nl;
  wire[3:0] nl_operator_3_false_1_acc_nl;
  wire[0:0] out_window_loop_out_window_loop_out_window_loop_or_nl;
  wire[2:0] operator_3_false_2_acc_nl;
  wire[3:0] nl_operator_3_false_2_acc_nl;
  wire[2:0] operator_3_false_3_acc_nl;
  wire[3:0] nl_operator_3_false_3_acc_nl;
  wire[0:0] or_332_nl;
  wire[13:0] col_loop_acc_2_nl;
  wire[14:0] nl_col_loop_acc_2_nl;
  wire[13:0] row_loop_acc_3_nl;
  wire[14:0] nl_row_loop_acc_3_nl;
  wire[0:0] padding_outer_loop_not_160_nl;
  wire[2:0] operator_4_false_acc_nl_1;
  wire[3:0] nl_operator_4_false_acc_nl_1;
  wire[2:0] operator_4_false_2_acc_nl;
  wire[3:0] nl_operator_4_false_2_acc_nl;
  wire[0:0] ColumnStatistic_ColumnStatistic_and_3_nl;
  wire[0:0] padding_outer_loop_mux_56_nl;
  wire[0:0] padding_outer_loop_padding_outer_loop_and_9_nl;
  wire[36:0] ColumnStatistic_else_1_if_else_mul_nl;
  wire[42:0] ColumnStatistic_else_1_else_if_mul_nl;
  wire signed [43:0] nl_ColumnStatistic_else_1_else_if_mul_nl;
  wire[36:0] ColumnStatistic_else_1_else_if_mul_1_nl;
  wire signed [37:0] nl_ColumnStatistic_else_1_else_if_mul_1_nl;
  wire[43:0] ColumnStatistic_else_1_else_else_mul_nl;
  wire signed [44:0] nl_ColumnStatistic_else_1_else_else_mul_nl;
  wire[37:0] ColumnStatistic_else_1_else_else_mul_1_nl;
  wire signed [38:0] nl_ColumnStatistic_else_1_else_else_mul_1_nl;
  wire[0:0] padding_outer_loop_mux_55_nl;
  wire[0:0] padding_outer_loop_padding_inter_loop_nand_nl;
  wire[0:0] padding_outer_loop_mux_66_nl;
  wire[0:0] or_384_nl;
  wire[3:0] lines_write_loop_acc_18_nl;
  wire[5:0] nl_lines_write_loop_acc_18_nl;
  wire[2:0] lines_write_loop_acc_17_nl;
  wire[4:0] nl_lines_write_loop_acc_17_nl;
  wire[1:0] lines_write_loop_acc_20_nl;
  wire[2:0] nl_lines_write_loop_acc_20_nl;
  wire[0:0] gb_reg_eb_not_8_nl;
  wire[1:0] line_feed_loop_acc_36_nl;
  wire[2:0] nl_line_feed_loop_acc_36_nl;
  wire[0:0] and_92_nl;
  wire[0:0] mux_19_nl;
  wire[0:0] or_55_nl;
  wire[0:0] mux_130_nl;
  wire[0:0] or_208_nl;
  wire[0:0] or_207_nl;
  wire[0:0] nand_9_nl;
  wire[0:0] mux_132_nl;
  wire[0:0] or_211_nl;
  wire[0:0] mux_160_nl;
  wire[0:0] mux_166_nl;
  wire[0:0] nor_85_nl;
  wire[0:0] mux_129_nl;
  wire[0:0] or_197_nl;
  wire[1:0] operator_4_false_10_mux_3_nl;
  wire[2:0] operator_4_false_10_mux_4_nl;
  wire[5:0] sawtooth_loop_2_else_else_if_2_sawtooth_loop_2_else_else_if_2_mux_1_nl;
  wire[13:0] acc_11_nl;
  wire[14:0] nl_acc_11_nl;
  wire[11:0] sawtooth_loop_2_if_if_mux1h_11_nl;
  wire[11:0] sawtooth_loop_2_if_if_mux1h_12_nl;
  wire[0:0] sawtooth_loop_2_if_if_or_5_nl;
  wire[13:0] acc_12_nl;
  wire[14:0] nl_acc_12_nl;
  wire[12:0] acc_22_nl;
  wire[13:0] nl_acc_22_nl;
  wire[11:0] abs_4_if_mux1h_2_nl;
  wire[0:0] abs_4_if_or_2_nl;
  wire[11:0] abs_4_if_mux1h_3_nl;
  wire[0:0] abs_4_if_or_3_nl;
  wire[13:0] acc_13_nl;
  wire[14:0] nl_acc_13_nl;
  wire[12:0] acc_20_nl;
  wire[13:0] nl_acc_20_nl;
  wire[11:0] abs_5_if_mux1h_2_nl;
  wire[0:0] abs_5_if_or_2_nl;
  wire[11:0] abs_5_if_mux1h_3_nl;
  wire[0:0] abs_5_if_or_3_nl;
  wire[13:0] acc_14_nl;
  wire[14:0] nl_acc_14_nl;
  wire[13:0] acc_15_nl;
  wire[14:0] nl_acc_15_nl;
  wire[13:0] acc_16_nl;
  wire[14:0] nl_acc_16_nl;
  wire[12:0] acc_18_nl;
  wire[13:0] nl_acc_18_nl;
  wire[11:0] abs_if_mux1h_2_nl;
  wire[0:0] abs_if_or_2_nl;
  wire[11:0] abs_if_mux1h_3_nl;
  wire[0:0] abs_if_or_3_nl;
  wire[12:0] col_loop_mux1h_5_nl;
  wire[0:0] mux_180_nl;
  wire[0:0] nor_146_nl;
  wire[0:0] nor_149_nl;
  wire[12:0] sawtooth_loop_2_if_if_sawtooth_loop_2_if_if_mux_1_nl;
  wire[0:0] sawtooth_loop_2_if_if_nand_1_nl;
  wire[5:0] operator_4_false_13_mux_3_nl;
  wire[0:0] operator_4_false_13_operator_4_false_13_and_1_nl;
  wire[0:0] operator_4_false_13_mux_4_nl;
  wire[0:0] operator_4_false_13_operator_4_false_13_or_1_nl;
  wire[6:0] acc_32_nl;
  wire[7:0] nl_acc_32_nl;
  wire[0:0] operator_4_false_12_operator_4_false_12_and_4_nl;
  wire[0:0] operator_4_false_12_operator_4_false_12_and_5_nl;
  wire[0:0] operator_4_false_12_mux_6_nl;
  wire[0:0] operator_4_false_12_operator_4_false_12_or_3_nl;
  wire[0:0] operator_4_false_12_mux_7_nl;
  wire[2:0] operator_4_false_12_mux1h_5_nl;
  wire[0:0] operator_4_false_12_operator_4_false_12_nor_2_nl;
  wire[0:0] operator_4_false_12_mux_8_nl;
  wire[0:0] operator_4_false_12_operator_4_false_12_or_4_nl;
  wire[0:0] operator_4_false_12_operator_4_false_12_or_5_nl;
  wire[0:0] operator_4_false_12_operator_4_false_12_and_6_nl;
  wire[0:0] operator_4_false_12_operator_4_false_12_and_7_nl;
  wire[0:0] operator_4_false_12_mux_9_nl;
  wire[0:0] operator_4_false_12_or_4_nl;
  wire[0:0] operator_4_false_12_mux1h_6_nl;
  wire[4:0] acc_34_nl;
  wire[5:0] nl_acc_34_nl;
  wire[2:0] sawtooth_loop_4_if_mux_3_nl;
  wire[0:0] sawtooth_loop_4_if_sawtooth_loop_4_if_nand_1_nl;
  wire[1:0] sawtooth_loop_4_if_sawtooth_loop_4_if_and_1_nl;
  wire[0:0] not_1111_nl;
  wire[4:0] acc_35_nl;
  wire[5:0] nl_acc_35_nl;
  wire[3:0] line_feed_loop_line_feed_loop_mux_45_nl;
  wire[4:0] acc_33_nl;
  wire[5:0] nl_acc_33_nl;
  wire[0:0] line_feed_loop_line_feed_loop_mux_43_nl;
  wire[1:0] line_feed_loop_line_feed_loop_mux_44_nl;
  wire[0:0] line_feed_loop_and_29_nl;
  wire[0:0] line_feed_loop_line_feed_loop_mux_46_nl;
  wire[0:0] line_feed_loop_mux1h_114_nl;
  wire[0:0] line_feed_loop_line_feed_loop_and_9_nl;
  wire[0:0] line_feed_loop_or_46_nl;
  wire[0:0] line_feed_loop_line_feed_loop_mux_47_nl;
  wire[6:0] acc_36_nl;
  wire[7:0] nl_acc_36_nl;
  wire[0:0] line_feed_loop_mux1h_115_nl;
  wire[0:0] line_feed_loop_line_feed_loop_or_2_nl;
  wire[0:0] line_feed_loop_line_feed_loop_nor_16_nl;
  wire[0:0] line_feed_loop_line_feed_loop_or_3_nl;
  wire[0:0] line_feed_loop_or_47_nl;
  wire[0:0] line_feed_loop_line_feed_loop_mux_48_nl;
  wire[0:0] line_feed_loop_and_30_nl;
  wire[0:0] line_feed_loop_line_feed_loop_mux_49_nl;
  wire[3:0] line_feed_loop_line_feed_loop_mux_50_nl;
  wire[1:0] line_feed_loop_acc_40_nl;
  wire[2:0] nl_line_feed_loop_acc_40_nl;
  wire[1:0] operator_4_false_17_mux_2_nl;
  wire[0:0] operator_4_false_17_mux_3_nl;
  wire[4:0] acc_40_nl;
  wire[5:0] nl_acc_40_nl;
  wire[2:0] line_feed_loop_mux_25_nl;
  wire[2:0] padding_inter_loop_acc_33_nl;
  wire[4:0] nl_padding_inter_loop_acc_33_nl;
  wire[1:0] padding_inter_loop_acc_34_nl;
  wire[3:0] nl_padding_inter_loop_acc_34_nl;
  wire[1:0] padding_inter_loop_acc_35_nl;
  wire[3:0] nl_padding_inter_loop_acc_35_nl;
  wire[0:0] line_feed_loop_mux_26_nl;
  wire[2:0] line_feed_loop_mux_27_nl;
  wire[2:0] padding_inter_loop_acc_36_nl;
  wire[4:0] nl_padding_inter_loop_acc_36_nl;
  wire[1:0] padding_inter_loop_acc_37_nl;
  wire[2:0] nl_padding_inter_loop_acc_37_nl;
  wire[1:0] operator_3_false_mux_3_nl;
  wire[1:0] operator_3_false_mux_4_nl;
  wire[1:0] operator_4_false_21_operator_4_false_21_and_1_nl;
  wire[0:0] not_1120_nl;
  wire[2:0] operator_4_false_21_mux_2_nl;
  wire[1:0] operator_4_false_21_mux_3_nl;
  wire[2:0] acc_43_nl;
  wire[3:0] nl_acc_43_nl;
  wire[3:0] acc_44_nl;
  wire[4:0] nl_acc_44_nl;
  wire[1:0] operator_4_false_12_mux1h_7_nl;
  wire[0:0] operator_4_false_12_operator_4_false_12_nor_3_nl;
  wire[1:0] operator_4_false_12_operator_4_false_12_mux_1_nl;
  wire[3:0] acc_45_nl;
  wire[4:0] nl_acc_45_nl;
  wire[1:0] operator_4_false_9_mux_3_nl;
  wire[1:0] operator_4_false_9_mux_4_nl;
  wire[11:0] sawtooth_loop_2_else_else_if_mux_20_nl;
  wire[11:0] sawtooth_loop_2_else_else_if_mux_21_nl;
  wire[11:0] sawtooth_loop_2_else_else_if_mux_22_nl;
  wire[11:0] sawtooth_loop_2_else_else_if_mux_23_nl;
  wire[1:0] sawtooth_loop_2_else_else_if_mux_24_nl;
  wire[2:0] sawtooth_loop_2_else_else_if_mux_25_nl;
  wire[11:0] sawtooth_loop_2_else_else_if_1_mux_21_nl;
  wire[11:0] sawtooth_loop_2_else_else_if_1_mux_22_nl;
  wire[11:0] sawtooth_loop_2_else_else_if_1_mux_23_nl;
  wire[11:0] sawtooth_loop_2_else_else_if_1_mux_24_nl;
  wire[11:0] sawtooth_loop_2_else_else_if_1_mux_25_nl;

  // Interconnect Declarations for Component Instantiations 
  wire [5:0] nl_U_ROM_1i5_1o6_909eb1361a488e6876f74b06293376842f_rg_I_1;
  assign nl_U_ROM_1i5_1o6_909eb1361a488e6876f74b06293376842f_rg_I_1 = (ColumnStatistic_count_total_lpi_1_dfm_16[4:0])
      + 5'b11011;
  wire [0:0] nl_greenbalance2_core_gb_lines_rsc_0_0_i_1_inst_gb_lines_rsc_0_0_i_iswt0_1_pff;
  assign nl_greenbalance2_core_gb_lines_rsc_0_0_i_1_inst_gb_lines_rsc_0_0_i_iswt0_1_pff
      = ~(or_dcpl_87 | or_dcpl_81 | or_dcpl_79);
  wire [0:0] nl_greenbalance2_core_gb_lines_rsc_0_1_i_1_inst_gb_lines_rsc_0_1_i_iswt0_1_pff;
  assign nl_greenbalance2_core_gb_lines_rsc_0_1_i_1_inst_gb_lines_rsc_0_1_i_iswt0_1_pff
      = ~(or_dcpl_87 | or_dcpl_89 | or_dcpl_79);
  wire [0:0] nl_greenbalance2_core_gb_lines_rsc_0_2_i_1_inst_gb_lines_rsc_0_2_i_iswt0_1_pff;
  assign nl_greenbalance2_core_gb_lines_rsc_0_2_i_1_inst_gb_lines_rsc_0_2_i_iswt0_1_pff
      = ~(or_dcpl_87 | or_dcpl_81 | or_dcpl_92);
  wire [0:0] nl_greenbalance2_core_gb_lines_rsc_0_3_i_1_inst_gb_lines_rsc_0_3_i_iswt0_1_pff;
  assign nl_greenbalance2_core_gb_lines_rsc_0_3_i_1_inst_gb_lines_rsc_0_3_i_iswt0_1_pff
      = ~(or_dcpl_87 | or_dcpl_89 | or_dcpl_92);
  wire [0:0] nl_greenbalance2_core_gb_lines_rsc_0_4_i_1_inst_gb_lines_rsc_0_4_i_iswt0_1_pff;
  assign nl_greenbalance2_core_gb_lines_rsc_0_4_i_1_inst_gb_lines_rsc_0_4_i_iswt0_1_pff
      = ~(or_dcpl_87 | or_dcpl_81 | or_dcpl_97);
  wire [0:0] nl_greenbalance2_core_gb_lines_rsc_0_5_i_1_inst_gb_lines_rsc_0_5_i_iswt0_1_pff;
  assign nl_greenbalance2_core_gb_lines_rsc_0_5_i_1_inst_gb_lines_rsc_0_5_i_iswt0_1_pff
      = ~(or_dcpl_87 | or_dcpl_89 | or_dcpl_97);
  ROM_1i5_1o6_aa7bd700c82af0b46f20bb855ae78565b0  U_ROM_1i5_1o6_909eb1361a488e6876f74b06293376842f_rg
      (
      .I_1(nl_U_ROM_1i5_1o6_909eb1361a488e6876f74b06293376842f_rg_I_1[4:0]),
      .O_1(ROM_1i5_1o6_909eb1361a488e6876f74b06293376842f_1)
    );
  greenbalance2_core_src_rsci greenbalance2_core_src_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .src_rsc_dat(src_rsc_dat),
      .src_rsc_vld(src_rsc_vld),
      .src_rsc_rdy(src_rsc_rdy),
      .core_wen(core_wen),
      .src_rsci_oswt(reg_src_rsci_oswt_cse),
      .src_rsci_wen_comp(src_rsci_wen_comp),
      .src_rsci_idat_mxwt(src_rsci_idat_mxwt)
    );
  greenbalance2_core_dst_rsci greenbalance2_core_dst_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .dst_rsc_dat(dst_rsc_dat),
      .dst_rsc_vld(dst_rsc_vld),
      .dst_rsc_rdy(dst_rsc_rdy),
      .core_wen(core_wen),
      .dst_rsci_oswt(reg_dst_rsci_oswt_cse),
      .dst_rsci_wen_comp(dst_rsci_wen_comp),
      .dst_rsci_idat(dst_rsci_idat)
    );
  greenbalance2_core_gb_lines_rsc_0_0_i_1 greenbalance2_core_gb_lines_rsc_0_0_i_1_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .gb_lines_rsc_0_0_i_q_d(gb_lines_rsc_0_0_i_q_d),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .gb_lines_rsc_0_0_i_oswt(reg_gb_lines_rsc_0_0_i_oswt_cse),
      .gb_lines_rsc_0_0_i_q_d_mxwt(gb_lines_rsc_0_0_i_q_d_mxwt),
      .gb_lines_rsc_0_0_i_we_d_pff(gb_lines_rsc_0_0_i_we_d_iff),
      .gb_lines_rsc_0_0_i_iswt0_1_pff(nl_greenbalance2_core_gb_lines_rsc_0_0_i_1_inst_gb_lines_rsc_0_0_i_iswt0_1_pff[0:0]),
      .gb_lines_rsc_0_0_i_re_d_pff(gb_lines_rsc_0_0_i_re_d_iff),
      .gb_lines_rsc_0_0_i_oswt_pff(line_feed_loop_line_feed_loop_nor_14_rmff)
    );
  greenbalance2_core_gb_lines_rsc_0_1_i_1 greenbalance2_core_gb_lines_rsc_0_1_i_1_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .gb_lines_rsc_0_1_i_q_d(gb_lines_rsc_0_1_i_q_d),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .gb_lines_rsc_0_1_i_oswt(reg_gb_lines_rsc_0_1_i_oswt_cse),
      .gb_lines_rsc_0_1_i_q_d_mxwt(gb_lines_rsc_0_1_i_q_d_mxwt),
      .gb_lines_rsc_0_1_i_we_d_pff(gb_lines_rsc_0_1_i_we_d_iff),
      .gb_lines_rsc_0_1_i_iswt0_1_pff(nl_greenbalance2_core_gb_lines_rsc_0_1_i_1_inst_gb_lines_rsc_0_1_i_iswt0_1_pff[0:0]),
      .gb_lines_rsc_0_1_i_re_d_pff(gb_lines_rsc_0_1_i_re_d_iff),
      .gb_lines_rsc_0_1_i_oswt_pff(line_feed_loop_line_feed_loop_nor_13_rmff)
    );
  greenbalance2_core_gb_lines_rsc_0_2_i_1 greenbalance2_core_gb_lines_rsc_0_2_i_1_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .gb_lines_rsc_0_2_i_q_d(gb_lines_rsc_0_2_i_q_d),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .gb_lines_rsc_0_2_i_oswt(reg_gb_lines_rsc_0_2_i_oswt_cse),
      .gb_lines_rsc_0_2_i_q_d_mxwt(gb_lines_rsc_0_2_i_q_d_mxwt),
      .gb_lines_rsc_0_2_i_we_d_pff(gb_lines_rsc_0_2_i_we_d_iff),
      .gb_lines_rsc_0_2_i_iswt0_1_pff(nl_greenbalance2_core_gb_lines_rsc_0_2_i_1_inst_gb_lines_rsc_0_2_i_iswt0_1_pff[0:0]),
      .gb_lines_rsc_0_2_i_re_d_pff(gb_lines_rsc_0_2_i_re_d_iff),
      .gb_lines_rsc_0_2_i_oswt_pff(line_feed_loop_line_feed_loop_nor_12_rmff)
    );
  greenbalance2_core_gb_lines_rsc_0_3_i_1 greenbalance2_core_gb_lines_rsc_0_3_i_1_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .gb_lines_rsc_0_3_i_q_d(gb_lines_rsc_0_3_i_q_d),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .gb_lines_rsc_0_3_i_oswt(reg_gb_lines_rsc_0_3_i_oswt_cse),
      .gb_lines_rsc_0_3_i_q_d_mxwt(gb_lines_rsc_0_3_i_q_d_mxwt),
      .gb_lines_rsc_0_3_i_we_d_pff(gb_lines_rsc_0_3_i_we_d_iff),
      .gb_lines_rsc_0_3_i_iswt0_1_pff(nl_greenbalance2_core_gb_lines_rsc_0_3_i_1_inst_gb_lines_rsc_0_3_i_iswt0_1_pff[0:0]),
      .gb_lines_rsc_0_3_i_re_d_pff(gb_lines_rsc_0_3_i_re_d_iff),
      .gb_lines_rsc_0_3_i_oswt_pff(line_feed_loop_line_feed_loop_nor_11_rmff)
    );
  greenbalance2_core_gb_lines_rsc_0_4_i_1 greenbalance2_core_gb_lines_rsc_0_4_i_1_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .gb_lines_rsc_0_4_i_q_d(gb_lines_rsc_0_4_i_q_d),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .gb_lines_rsc_0_4_i_oswt(reg_gb_lines_rsc_0_4_i_oswt_cse),
      .gb_lines_rsc_0_4_i_q_d_mxwt(gb_lines_rsc_0_4_i_q_d_mxwt),
      .gb_lines_rsc_0_4_i_we_d_pff(gb_lines_rsc_0_4_i_we_d_iff),
      .gb_lines_rsc_0_4_i_iswt0_1_pff(nl_greenbalance2_core_gb_lines_rsc_0_4_i_1_inst_gb_lines_rsc_0_4_i_iswt0_1_pff[0:0]),
      .gb_lines_rsc_0_4_i_re_d_pff(gb_lines_rsc_0_4_i_re_d_iff),
      .gb_lines_rsc_0_4_i_oswt_pff(line_feed_loop_line_feed_loop_nor_10_rmff)
    );
  greenbalance2_core_gb_lines_rsc_0_5_i_1 greenbalance2_core_gb_lines_rsc_0_5_i_1_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .gb_lines_rsc_0_5_i_q_d(gb_lines_rsc_0_5_i_q_d),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .gb_lines_rsc_0_5_i_oswt(reg_gb_lines_rsc_0_5_i_oswt_cse),
      .gb_lines_rsc_0_5_i_q_d_mxwt(gb_lines_rsc_0_5_i_q_d_mxwt),
      .gb_lines_rsc_0_5_i_we_d_pff(gb_lines_rsc_0_5_i_we_d_iff),
      .gb_lines_rsc_0_5_i_iswt0_1_pff(nl_greenbalance2_core_gb_lines_rsc_0_5_i_1_inst_gb_lines_rsc_0_5_i_iswt0_1_pff[0:0]),
      .gb_lines_rsc_0_5_i_re_d_pff(gb_lines_rsc_0_5_i_re_d_iff),
      .gb_lines_rsc_0_5_i_oswt_pff(line_feed_loop_line_feed_loop_nor_9_rmff)
    );
  greenbalance2_core_staller greenbalance2_core_staller_inst (
      .clk(clk),
      .arst_n(arst_n),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .src_rsci_wen_comp(src_rsci_wen_comp),
      .dst_rsci_wen_comp(dst_rsci_wen_comp)
    );
  assign line_feed_loop_line_feed_loop_nor_14_rmff = ~(mux_tmp_130 | or_dcpl_69);
  assign line_feed_loop_line_feed_loop_nor_13_rmff = ~(mux_tmp_132 | or_dcpl_69);
  assign line_feed_loop_line_feed_loop_nor_12_rmff = ~(mux_tmp_130 | or_dcpl_73);
  assign line_feed_loop_line_feed_loop_nor_11_rmff = ~(mux_tmp_132 | or_dcpl_73);
  assign line_feed_loop_line_feed_loop_nor_10_rmff = ~(mux_tmp_130 | or_dcpl_76);
  assign line_feed_loop_line_feed_loop_nor_9_rmff = ~(mux_tmp_132 | or_dcpl_76);
  assign and_178_m1c = and_dcpl_148 & and_dcpl_144 & (ColumnStatistic_j_1_3_1_lpi_1_1_0==2'b11);
  assign or_61_nl = (ColumnStatistic_j_1_3_1_lpi_1_1_0!=2'b00);
  assign mux_34_cse = MUX_s_1_2_2(ColumnStatistic_mux_44_itm, mux_tmp_31, or_61_nl);
  assign and_190_m1c = col_loop_if_if_col_loop_if_if_xor_sft_lpi_1 & (~ sfi_col_loop_if_if_col_loop_if_if_xor_lpi_1)
      & lfst_exit_sawtooth_loop_1_lpi_1 & (~ sfi_col_loop_if_land_lpi_1) & lfst_exitL_exit_sawtooth_loop_1_1_lpi_1
      & (ColumnStatistic_j_1_3_1_lpi_1_1_0==2'b11);
  assign or_67_cse = (~ lfst_exitL_exit_sawtooth_loop_1_1_lpi_1) | sfi_col_loop_if_land_lpi_1;
  assign nor_15_cse = ~(exitL_exitL_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1
      | (~ lfst_exit_col_loop_lpi_1));
  assign and_241_nl = gb_reg_eb & col_loop_acc_2_itm_13_1 & row_loop_acc_3_itm_13_1;
  assign mux_161_nl = MUX_s_1_2_2((~ or_tmp_153), or_56_cse, and_241_nl);
  assign mux_162_nl = MUX_s_1_2_2(and_tmp_6, mux_161_nl, col_loop_asn_sft_lpi_1);
  assign or_58_nl = (~ lfst_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1) | sfi_exit_col_loop_lpi_1;
  assign mux_163_nl = MUX_s_1_2_2(mux_162_nl, and_tmp_30, or_58_nl);
  assign mux_164_nl = MUX_s_1_2_2(mux_163_nl, and_tmp_6, col_loop_asn_sft_1_lpi_1);
  assign mux_165_nl = MUX_s_1_2_2(and_tmp_30, mux_164_nl, lfst_exitL_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1);
  assign mux_167_nl = MUX_s_1_2_2(and_tmp_31, mux_165_nl, nor_15_cse);
  assign mux_168_nl = MUX_s_1_2_2(mux_167_nl, and_tmp_6, row_loop_asn_sft_lpi_1);
  assign mux_169_nl = MUX_s_1_2_2(and_tmp_31, mux_168_nl, lfst_exitL_exit_col_loop_lpi_1);
  assign sawtooth_loop_1_and_80_cse = core_wen & mux_169_nl;
  assign gb_reg_eb_and_cse = core_wen & (~(row_loop_asn_sft_lpi_1_dfm_1_mx0 | lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_1_1));
  assign col_loop_and_cse = core_wen & (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_1_1);
  assign ColumnStatistic_mux_44_itm = MUX_s_1_2_2(col_loop_if_if_col_loop_if_if_xor_sft_lpi_1,
      col_loop_if_if_col_loop_if_if_xor_1_tmp, or_67_cse);
  assign col_loop_and_76_rgt = sawtooth_loop_1_or_183_tmp_1 & col_loop_and_70_tmp_1
      & (~ padding_outer_loop_or_223_tmp_1);
  assign row_loop_and_1_rgt = col_loop_and_50_tmp_1 & (~ row_loop_asn_sft_lpi_1_dfm_1_mx0)
      & (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_1_1);
  assign padding_outer_loop_and_178_cse = core_wen & (~(or_tmp_77 | (~ asn_sft_lpi_1)
      | (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_1)));
  assign or_358_cse = (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0) | exitL_exitL_exit_padding_outer_loop_sva;
  assign and_4_rgt = padding_outer_loop_or_3_tmp_1 & asn_sft_lpi_1 & padding_outer_loop_equal_tmp_4;
  assign padding_outer_loop_padding_outer_loop_and_15_cse = padding_outer_loop_equal_tmp_4
      & asn_sft_lpi_1;
  assign gb_block_nand_5_nl = ~(main_stage_0_3 & padding_outer_loop_padding_outer_loop_nor_58_tmp_1
      & col_loop_and_6_tmp_1 & (~(((~ in_window_loop_and_80_tmp_1) & sawtooth_loop_1_or_tmp_2)
      | ((~ line_feed_loop_and_25_tmp_1) & sawtooth_loop_1_equal_tmp_2) | sawtooth_loop_1_equal_tmp_1_2
      | sawtooth_loop_1_equal_tmp_2_2 | sawtooth_loop_1_nor_tmp_2)));
  assign sawtooth_loop_1_and_47_nl = in_window_loop_and_80_tmp_1 & sawtooth_loop_1_or_tmp_2
      & col_loop_and_6_tmp_1 & padding_outer_loop_padding_outer_loop_nor_58_tmp_1
      & main_stage_0_3;
  assign sawtooth_loop_1_and_49_nl = line_feed_loop_and_25_tmp_1 & sawtooth_loop_1_equal_tmp_2
      & col_loop_and_6_tmp_1 & padding_outer_loop_padding_outer_loop_nor_58_tmp_1
      & main_stage_0_3;
  assign gb_block_4_6_lpi_1_mx0 = MUX1HOT_v_12_3_2(gb_block_4_6_lpi_1, in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1,
      tmp_lpi_1_dfm_1, {gb_block_nand_5_nl , sawtooth_loop_1_and_47_nl , sawtooth_loop_1_and_49_nl});
  assign gb_block_nand_4_nl = ~(main_stage_0_3 & padding_outer_loop_padding_outer_loop_nor_58_tmp_1
      & col_loop_and_6_tmp_1 & (~(((~ in_window_loop_and_95_tmp_1) & sawtooth_loop_1_or_tmp_2)
      | ((~ line_feed_loop_and_13_tmp_1) & sawtooth_loop_1_equal_tmp_2) | sawtooth_loop_1_equal_tmp_1_2
      | sawtooth_loop_1_equal_tmp_2_2 | sawtooth_loop_1_nor_tmp_2)));
  assign sawtooth_loop_1_and_7_nl = in_window_loop_and_95_tmp_1 & sawtooth_loop_1_or_tmp_2
      & col_loop_and_6_tmp_1 & padding_outer_loop_padding_outer_loop_nor_58_tmp_1
      & main_stage_0_3;
  assign sawtooth_loop_1_and_9_nl = line_feed_loop_and_13_tmp_1 & sawtooth_loop_1_equal_tmp_2
      & col_loop_and_6_tmp_1 & padding_outer_loop_padding_outer_loop_nor_58_tmp_1
      & main_stage_0_3;
  assign gb_block_0_6_lpi_1_mx0 = MUX1HOT_v_12_3_2(gb_block_0_6_lpi_1, in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1,
      tmp_lpi_1_dfm_1, {gb_block_nand_4_nl , sawtooth_loop_1_and_7_nl , sawtooth_loop_1_and_9_nl});
  assign gb_block_nand_3_nl = ~(main_stage_0_3 & padding_outer_loop_padding_outer_loop_nor_58_tmp_1
      & col_loop_and_6_tmp_1 & (~(((~ in_window_loop_and_94_tmp_1) & sawtooth_loop_1_or_tmp_2)
      | ((~ line_feed_loop_and_1_tmp_1) & sawtooth_loop_1_equal_tmp_2) | sawtooth_loop_1_equal_tmp_1_2
      | sawtooth_loop_1_equal_tmp_2_2 | sawtooth_loop_1_nor_tmp_2)));
  assign sawtooth_loop_1_and_57_nl = in_window_loop_and_94_tmp_1 & sawtooth_loop_1_or_tmp_2
      & col_loop_and_6_tmp_1 & padding_outer_loop_padding_outer_loop_nor_58_tmp_1
      & main_stage_0_3;
  assign sawtooth_loop_1_and_59_nl = line_feed_loop_and_1_tmp_1 & sawtooth_loop_1_equal_tmp_2
      & col_loop_and_6_tmp_1 & padding_outer_loop_padding_outer_loop_nor_58_tmp_1
      & main_stage_0_3;
  assign gb_block_5_6_lpi_1_mx0 = MUX1HOT_v_12_3_2(gb_block_5_6_lpi_1, in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1,
      tmp_lpi_1_dfm_1, {gb_block_nand_3_nl , sawtooth_loop_1_and_57_nl , sawtooth_loop_1_and_59_nl});
  assign gb_block_nand_2_nl = ~(main_stage_0_3 & padding_outer_loop_padding_outer_loop_nor_58_tmp_1
      & col_loop_and_6_tmp_1 & (~(((~ in_window_loop_and_81_tmp_1) & sawtooth_loop_1_or_tmp_2)
      | ((~ line_feed_loop_and_16_tmp_1) & sawtooth_loop_1_equal_tmp_2) | sawtooth_loop_1_equal_tmp_1_2
      | sawtooth_loop_1_equal_tmp_2_2 | sawtooth_loop_1_nor_tmp_2)));
  assign sawtooth_loop_1_and_17_nl = in_window_loop_and_81_tmp_1 & sawtooth_loop_1_or_tmp_2
      & col_loop_and_6_tmp_1 & padding_outer_loop_padding_outer_loop_nor_58_tmp_1
      & main_stage_0_3;
  assign sawtooth_loop_1_and_19_nl = line_feed_loop_and_16_tmp_1 & sawtooth_loop_1_equal_tmp_2
      & col_loop_and_6_tmp_1 & padding_outer_loop_padding_outer_loop_nor_58_tmp_1
      & main_stage_0_3;
  assign gb_block_1_6_lpi_1_mx0 = MUX1HOT_v_12_3_2(gb_block_1_6_lpi_1, in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1,
      tmp_lpi_1_dfm_1, {gb_block_nand_2_nl , sawtooth_loop_1_and_17_nl , sawtooth_loop_1_and_19_nl});
  assign gb_block_nand_1_nl = ~(main_stage_0_3 & padding_outer_loop_padding_outer_loop_nor_58_tmp_1
      & col_loop_and_6_tmp_1 & (~(((~ in_window_loop_and_67_tmp_1) & sawtooth_loop_1_or_tmp_2)
      | ((~ line_feed_loop_and_19_tmp_1) & sawtooth_loop_1_equal_tmp_2) | sawtooth_loop_1_equal_tmp_1_2
      | sawtooth_loop_1_equal_tmp_2_2 | sawtooth_loop_1_nor_tmp_2)));
  assign sawtooth_loop_1_and_27_nl = in_window_loop_and_67_tmp_1 & sawtooth_loop_1_or_tmp_2
      & col_loop_and_6_tmp_1 & padding_outer_loop_padding_outer_loop_nor_58_tmp_1
      & main_stage_0_3;
  assign sawtooth_loop_1_and_29_nl = line_feed_loop_and_19_tmp_1 & sawtooth_loop_1_equal_tmp_2
      & col_loop_and_6_tmp_1 & padding_outer_loop_padding_outer_loop_nor_58_tmp_1
      & main_stage_0_3;
  assign gb_block_2_6_lpi_1_mx0 = MUX1HOT_v_12_3_2(gb_block_2_6_lpi_1, in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1,
      tmp_lpi_1_dfm_1, {gb_block_nand_1_nl , sawtooth_loop_1_and_27_nl , sawtooth_loop_1_and_29_nl});
  assign gb_block_nand_nl = ~(main_stage_0_3 & padding_outer_loop_padding_outer_loop_nor_58_tmp_1
      & col_loop_and_6_tmp_1 & (~(((~ in_window_loop_and_66_tmp_1) & sawtooth_loop_1_or_tmp_2)
      | ((~ line_feed_loop_and_22_tmp_1) & sawtooth_loop_1_equal_tmp_2) | sawtooth_loop_1_equal_tmp_1_2
      | sawtooth_loop_1_equal_tmp_2_2 | sawtooth_loop_1_nor_tmp_2)));
  assign sawtooth_loop_1_and_37_nl = in_window_loop_and_66_tmp_1 & sawtooth_loop_1_or_tmp_2
      & col_loop_and_6_tmp_1 & padding_outer_loop_padding_outer_loop_nor_58_tmp_1
      & main_stage_0_3;
  assign sawtooth_loop_1_and_39_nl = line_feed_loop_and_22_tmp_1 & sawtooth_loop_1_equal_tmp_2
      & col_loop_and_6_tmp_1 & padding_outer_loop_padding_outer_loop_nor_58_tmp_1
      & main_stage_0_3;
  assign gb_block_3_6_lpi_1_mx0 = MUX1HOT_v_12_3_2(gb_block_3_6_lpi_1, in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1,
      tmp_lpi_1_dfm_1, {gb_block_nand_nl , sawtooth_loop_1_and_37_nl , sawtooth_loop_1_and_39_nl});
  assign asn_gb_block_3_3_lpi_1_nand_nl = ~(main_stage_0_3 & padding_outer_loop_and_131_itm_2);
  assign gb_block_3_3_lpi_1_mx0 = MUX_v_12_2_2(in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1,
      gb_block_3_3_lpi_1, asn_gb_block_3_3_lpi_1_nand_nl);
  assign line_feed_loop_line_feed_loop_and_nl = col_lpi_1_dfm_2_0 & (line_feed_loop_acc_9_psp_2==2'b00);
  assign line_feed_loop_line_feed_loop_and_1_nl = (line_feed_loop_acc_9_psp_2[0])
      & (~((line_feed_loop_acc_9_psp_2[1]) | col_lpi_1_dfm_2_0));
  assign line_feed_loop_line_feed_loop_and_3_nl = (line_feed_loop_acc_9_psp_2[1])
      & (~((line_feed_loop_acc_9_psp_2[0]) | col_lpi_1_dfm_2_0));
  assign tmp_lpi_1_dfm_1 = MUX1HOT_v_12_6_2(gb_lines_rsc_0_0_i_q_d_mxwt, gb_lines_rsc_0_1_i_q_d_mxwt,
      gb_lines_rsc_0_2_i_q_d_mxwt, gb_lines_rsc_0_3_i_q_d_mxwt, gb_lines_rsc_0_4_i_q_d_mxwt,
      gb_lines_rsc_0_5_i_q_d_mxwt, {col_loop_if_asn_sft_lpi_1_st_2 , line_feed_loop_line_feed_loop_and_nl
      , line_feed_loop_line_feed_loop_and_1_nl , col_loop_if_and_1_itm_2 , line_feed_loop_line_feed_loop_and_3_nl
      , col_loop_if_and_itm_2});
  assign line_feed_loop_and_1_tmp_1 = line_feed_loop_and_stg_1_1_sva_1 & (~ line_feed_loop_line_feed_loop_xnor_psp_sva_1);
  assign in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1 = MUX_v_12_49_2x0(gb_block_0_1_lpi_1,
      gb_block_0_2_lpi_1, gb_block_0_3_lpi_1, gb_block_0_4_lpi_1, gb_block_0_5_lpi_1,
      gb_block_0_6_lpi_1_mx0, gb_block_1_0_lpi_1, gb_block_1_1_lpi_1, gb_block_1_2_lpi_1,
      gb_block_1_3_lpi_1, gb_block_1_4_lpi_1, gb_block_1_5_lpi_1, gb_block_1_6_lpi_1_mx0,
      gb_block_2_0_lpi_1, gb_block_2_1_lpi_1, gb_block_2_2_lpi_1, gb_block_2_3_lpi_1,
      gb_block_2_4_lpi_1, gb_block_2_5_lpi_1, gb_block_2_6_lpi_1_mx0, gb_block_3_0_lpi_1,
      gb_block_3_1_lpi_1, gb_block_3_2_lpi_1, gb_block_3_3_lpi_1_mx0, gb_block_3_4_lpi_1,
      gb_block_3_5_lpi_1, gb_block_3_6_lpi_1_mx0, gb_block_4_0_lpi_1, gb_block_4_1_lpi_1,
      gb_block_4_2_lpi_1, gb_block_4_3_lpi_1, gb_block_4_4_lpi_1, gb_block_4_5_lpi_1,
      gb_block_4_6_lpi_1_mx0, gb_block_5_0_lpi_1, gb_block_5_1_lpi_1, gb_block_5_2_lpi_1,
      gb_block_5_3_lpi_1, gb_block_5_4_lpi_1, gb_block_5_5_lpi_1, gb_block_5_6_lpi_1_mx0,
      gb_block_6_0_lpi_1, gb_block_6_1_lpi_1, gb_block_6_2_lpi_1, gb_block_6_3_lpi_1,
      gb_block_6_4_lpi_1, gb_block_6_5_lpi_1, gb_block_6_6_lpi_1, ColumnStatistic_count_total_lpi_1_dfm_1);
  assign in_window_loop_and_94_tmp_1 = in_window_loop_and_stg_4_16_sva_2 & in_window_loop_acc_decb_sva_2_5;
  assign line_feed_loop_and_25_tmp_1 = line_feed_loop_and_stg_1_2_sva_1 & (~ line_feed_loop_line_feed_loop_xnor_psp_sva_1);
  assign in_window_loop_and_80_tmp_1 = in_window_loop_and_stg_4_9_sva_2 & in_window_loop_acc_decb_sva_2_5;
  assign line_feed_loop_and_19_tmp_1 = (~((line_feed_loop_mul_sdt_2_0_sva_2_1_0!=2'b10)))
      & line_feed_loop_line_feed_loop_xnor_psp_sva_1;
  assign line_feed_loop_and_16_tmp_1 = line_feed_loop_and_stg_1_1_sva_1 & line_feed_loop_line_feed_loop_xnor_psp_sva_1;
  assign in_window_loop_and_81_tmp_1 = in_window_loop_and_stg_4_20_sva_2 & (~ in_window_loop_acc_decb_sva_2_5);
  assign line_feed_loop_and_13_tmp_1 = line_feed_loop_and_stg_1_2_sva_1 & line_feed_loop_line_feed_loop_xnor_psp_sva_1;
  assign in_window_loop_and_95_tmp_1 = in_window_loop_and_stg_4_13_sva_2 & (~ in_window_loop_acc_decb_sva_2_5);
  assign col_loop_and_6_tmp_1 = col_loop_asn_sft_lpi_1_dfm_2 & (~ col_loop_asn_sft_1_lpi_1_dfm_2);
  assign line_feed_loop_and_stg_1_2_sva_1 = ~((line_feed_loop_mul_sdt_2_0_sva_2_1_0!=2'b00));
  assign line_feed_loop_and_stg_1_1_sva_1 = (line_feed_loop_mul_sdt_2_0_sva_2_1_0==2'b11);
  assign nl_clip_result_sva_1 = conv_s2s_30_31(ColumnStatistic_sum_total_ColumnStatistic_nand_itm_1)
      + conv_u2s_12_31(gb_block_3_3_lpi_1) + 31'b0000000000000000000000000000001;
  assign clip_result_sva_1 = nl_clip_result_sva_1[30:0];
  assign nl_operator_31_true_acc_nl =  -(clip_result_sva_1[29:12]);
  assign operator_31_true_acc_nl = nl_operator_31_true_acc_nl[17:0];
  assign clip_nor_nl = ~(MUX_v_12_2_2((clip_result_sva_1[11:0]), 12'b111111111111,
      (readslicef_18_1_17(operator_31_true_acc_nl))));
  assign clip_clip_clip_nor_nl = ~(MUX_v_12_2_2(clip_nor_nl, 12'b111111111111, (clip_result_sva_1[30])));
  assign pixel_out_1_lpi_1_dfm_2 = MUX1HOT_v_12_3_2(gb_block_3_3_lpi_1, pixel_out_1_lpi_1,
      clip_clip_clip_nor_nl, {col_loop_if_not_56_itm_2 , col_loop_if_and_itm_2 ,
      col_loop_if_and_1_itm_2});
  assign line_feed_loop_line_feed_loop_xnor_tmp = ~((line_feed_loop_mul_sdt_2_0_sva_1[1])
      ^ (line_feed_loop_mul_sdt_2_0_sva_1[2]));
  assign padding_outer_loop_padding_outer_loop_nor_58_tmp_1 = ~(row_loop_asn_sft_lpi_1_dfm_2
      | padding_outer_loop_equal_tmp_2 | padding_outer_loop_equal_tmp_3_2);
  assign asn_gb_block_1_0_lpi_1_nand_nl = ~(main_stage_0_2 & padding_outer_loop_and_116_itm_1);
  assign gb_block_1_0_lpi_1_mx0 = MUX_v_12_2_2(in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1,
      gb_block_1_0_lpi_1, asn_gb_block_1_0_lpi_1_nand_nl);
  assign asn_gb_block_2_1_lpi_1_nand_nl = ~(main_stage_0_2 & padding_outer_loop_and_123_itm_1);
  assign gb_block_2_1_lpi_1_mx0 = MUX_v_12_2_2(in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1,
      gb_block_2_1_lpi_1, asn_gb_block_2_1_lpi_1_nand_nl);
  assign asn_gb_block_3_0_lpi_1_nand_nl = ~(main_stage_0_2 & padding_outer_loop_and_128_itm_1);
  assign gb_block_3_0_lpi_1_mx0 = MUX_v_12_2_2(in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1,
      gb_block_3_0_lpi_1, asn_gb_block_3_0_lpi_1_nand_nl);
  assign asn_gb_block_4_1_lpi_1_nand_nl = ~(main_stage_0_2 & padding_outer_loop_and_135_itm_1);
  assign gb_block_4_1_lpi_1_mx0 = MUX_v_12_2_2(in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1,
      gb_block_4_1_lpi_1, asn_gb_block_4_1_lpi_1_nand_nl);
  assign asn_gb_block_5_0_lpi_1_nand_nl = ~(main_stage_0_2 & padding_outer_loop_and_140_itm_1);
  assign gb_block_5_0_lpi_1_mx0 = MUX_v_12_2_2(in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1,
      gb_block_5_0_lpi_1, asn_gb_block_5_0_lpi_1_nand_nl);
  assign asn_gb_block_6_1_lpi_1_nand_nl = ~(main_stage_0_2 & padding_outer_loop_and_147_itm_1);
  assign gb_block_6_1_lpi_1_mx0 = MUX_v_12_2_2(in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1,
      gb_block_6_1_lpi_1, asn_gb_block_6_1_lpi_1_nand_nl);
  assign k_nand_nl = ~(main_stage_0_2 & (~((~(col_loop_asn_sft_lpi_1_dfm_1 & (~(sawtooth_loop_1_or_tmp_1_1
      | sawtooth_loop_1_equal_tmp_2_1 | sawtooth_loop_1_nor_tmp_1_1)))) | col_loop_asn_sft_1_lpi_1_dfm_1
      | padding_outer_loop_or_225_tmp_1)));
  assign col_loop_and_55_nl = sawtooth_loop_1_equal_tmp_1 & col_loop_asn_sft_lpi_1_dfm_1
      & (~ col_loop_asn_sft_1_lpi_1_dfm_1) & (~ padding_outer_loop_or_225_tmp_1)
      & main_stage_0_2;
  assign col_loop_and_56_nl = sawtooth_loop_1_equal_tmp_1_1 & col_loop_asn_sft_lpi_1_dfm_1
      & (~ col_loop_asn_sft_1_lpi_1_dfm_1) & (~ padding_outer_loop_or_225_tmp_1)
      & main_stage_0_2;
  assign k_3_lpi_1_mx0 = MUX1HOT_v_3_3_2(k_3_lpi_1, k_3_lpi_1_dfm_1, k_3_sva_1_1,
      {k_nand_nl , col_loop_and_55_nl , col_loop_and_56_nl});
  assign asn_gb_block_0_1_lpi_1_nand_nl = ~(main_stage_0_2 & padding_outer_loop_and_111_itm_1);
  assign gb_block_0_1_lpi_1_mx0 = MUX_v_12_2_2(in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1,
      gb_block_0_1_lpi_1, asn_gb_block_0_1_lpi_1_nand_nl);
  assign asn_gb_block_0_3_lpi_1_nand_nl = ~(main_stage_0_2 & padding_outer_loop_and_113_itm_1);
  assign gb_block_0_3_lpi_1_mx0 = MUX_v_12_2_2(in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1,
      gb_block_0_3_lpi_1, asn_gb_block_0_3_lpi_1_nand_nl);
  assign asn_gb_block_0_5_lpi_1_nand_nl = ~(main_stage_0_2 & padding_outer_loop_and_115_itm_1);
  assign gb_block_0_5_lpi_1_mx0 = MUX_v_12_2_2(in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1,
      gb_block_0_5_lpi_1, asn_gb_block_0_5_lpi_1_nand_nl);
  assign asn_gb_block_2_3_lpi_1_nand_nl = ~(main_stage_0_2 & padding_outer_loop_and_125_itm_1);
  assign gb_block_2_3_lpi_1_mx0 = MUX_v_12_2_2(in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1,
      gb_block_2_3_lpi_1, asn_gb_block_2_3_lpi_1_nand_nl);
  assign asn_gb_block_2_5_lpi_1_nand_nl = ~(main_stage_0_2 & padding_outer_loop_and_127_itm_1);
  assign gb_block_2_5_lpi_1_mx0 = MUX_v_12_2_2(in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1,
      gb_block_2_5_lpi_1, asn_gb_block_2_5_lpi_1_nand_nl);
  assign asn_gb_block_4_3_lpi_1_nand_nl = ~(main_stage_0_2 & padding_outer_loop_and_137_itm_1);
  assign gb_block_4_3_lpi_1_mx0 = MUX_v_12_2_2(in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1,
      gb_block_4_3_lpi_1, asn_gb_block_4_3_lpi_1_nand_nl);
  assign asn_gb_block_4_5_lpi_1_nand_nl = ~(main_stage_0_2 & padding_outer_loop_and_139_itm_1);
  assign gb_block_4_5_lpi_1_mx0 = MUX_v_12_2_2(in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1,
      gb_block_4_5_lpi_1, asn_gb_block_4_5_lpi_1_nand_nl);
  assign asn_gb_block_5_2_lpi_1_nand_nl = ~(main_stage_0_2 & padding_outer_loop_and_142_itm_1);
  assign gb_block_5_2_lpi_1_mx0 = MUX_v_12_2_2(in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1,
      gb_block_5_2_lpi_1, asn_gb_block_5_2_lpi_1_nand_nl);
  assign asn_gb_block_6_5_lpi_1_nand_nl = ~(main_stage_0_2 & padding_outer_loop_and_151_itm_1);
  assign gb_block_6_5_lpi_1_mx0 = MUX_v_12_2_2(in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1,
      gb_block_6_5_lpi_1, asn_gb_block_6_5_lpi_1_nand_nl);
  assign sawtooth_loop_1_and_75_rgt = (~ operator_3_false_2_slc_operator_3_false_2_acc_2_svs_1)
      & sawtooth_loop_1_equal_tmp_1 & padding_outer_loop_and_99_tmp_1;
  assign pixel_in_lpi_1_dfm_mx0 = MUX_v_12_2_2(pixel_in_lpi_1, src_rsci_idat_mxwt,
      sfi_exit_col_loop_lpi_1_dfm_1_1);
  assign ColumnStatistic_sum_total_mux_cse = MUX_v_31_2_2(ColumnStatistic_sum_total_1_lpi_1_dfm_1,
      z_out_27, z_out_16_12);
  assign nl_ColumnStatistic_count_total_lpi_1_dfm_1_mx0w0 = ColumnStatistic_count_total_lpi_1_dfm_1
      + 6'b000001;
  assign ColumnStatistic_count_total_lpi_1_dfm_1_mx0w0 = nl_ColumnStatistic_count_total_lpi_1_dfm_1_mx0w0[5:0];
  assign ColumnStatistic_count_total_mux_cse = MUX_v_6_2_2(ColumnStatistic_count_total_lpi_1_dfm_1,
      ColumnStatistic_count_total_lpi_1_dfm_1_mx0w0, z_out_16_12);
  assign nl_sawtooth_loop_2_else_if_if_1_acc_5_cse = ({1'b1 , abs_rawData_1_2_sva_1})
      + conv_u2s_12_13(~ abs_rawData_2_3_sva_1) + 13'b0000000000001;
  assign sawtooth_loop_2_else_if_if_1_acc_5_cse = nl_sawtooth_loop_2_else_if_if_1_acc_5_cse[12:0];
  assign abs_3_if_mux_2_nl = MUX_v_12_2_2(abs_rawData_1_2_sva_1, abs_rawData_2_3_sva_1,
      sawtooth_loop_2_else_if_if_1_acc_5_cse[12]);
  assign abs_3_if_mux_3_nl = MUX_v_12_2_2((~ abs_rawData_2_3_sva_1), (~ abs_rawData_1_2_sva_1),
      sawtooth_loop_2_else_if_if_1_acc_5_cse[12]);
  assign nl_acc_17_nl = ({abs_3_if_mux_2_nl , 1'b1}) + ({abs_3_if_mux_3_nl , 1'b1});
  assign acc_17_nl = nl_acc_17_nl[12:0];
  assign nl_sawtooth_loop_2_else_if_if_1_acc_nl = ({1'b1 , (readslicef_13_12_1(acc_17_nl))})
      + conv_u2u_12_13({2'b11 , (~ gb_reg_threhold)}) + 13'b0000000000001;
  assign sawtooth_loop_2_else_if_if_1_acc_nl = nl_sawtooth_loop_2_else_if_if_1_acc_nl[12:0];
  assign sawtooth_loop_2_else_if_if_1_acc_itm_12_1 = readslicef_13_1_12(sawtooth_loop_2_else_if_if_1_acc_nl);
  assign nl_sawtooth_loop_2_else_else_if_2_acc_nl = ColumnStatistic_sum_total_1_lpi_1_dfm_6_mx0
      + conv_s2u_13_31(z_out_11);
  assign sawtooth_loop_2_else_else_if_2_acc_nl = nl_sawtooth_loop_2_else_else_if_2_acc_nl[30:0];
  assign ColumnStatistic_sum_total_mux_2_cse = MUX_v_31_2_2(ColumnStatistic_sum_total_1_lpi_1_dfm_6_mx0,
      sawtooth_loop_2_else_else_if_2_acc_nl, z_out_16_12);
  assign nl_sawtooth_loop_2_else_else_if_3_acc_5_cse = ({1'b1 , abs_rawData_1_4_sva_1})
      + conv_u2s_12_13(~ abs_rawData_2_7_sva_1) + 13'b0000000000001;
  assign sawtooth_loop_2_else_else_if_3_acc_5_cse = nl_sawtooth_loop_2_else_else_if_3_acc_5_cse[12:0];
  assign abs_7_if_mux_2_nl = MUX_v_12_2_2(abs_rawData_1_4_sva_1, abs_rawData_2_7_sva_1,
      sawtooth_loop_2_else_else_if_3_acc_5_cse[12]);
  assign abs_7_if_mux_3_nl = MUX_v_12_2_2((~ abs_rawData_2_7_sva_1), (~ abs_rawData_1_4_sva_1),
      sawtooth_loop_2_else_else_if_3_acc_5_cse[12]);
  assign nl_acc_19_nl = ({abs_7_if_mux_2_nl , 1'b1}) + ({abs_7_if_mux_3_nl , 1'b1});
  assign acc_19_nl = nl_acc_19_nl[12:0];
  assign nl_sawtooth_loop_2_else_else_if_3_acc_nl = ({1'b1 , (readslicef_13_12_1(acc_19_nl))})
      + conv_u2u_12_13({2'b11 , (~ gb_reg_threhold)}) + 13'b0000000000001;
  assign sawtooth_loop_2_else_else_if_3_acc_nl = nl_sawtooth_loop_2_else_else_if_3_acc_nl[12:0];
  assign sawtooth_loop_2_else_else_if_3_acc_itm_12_1 = readslicef_13_1_12(sawtooth_loop_2_else_else_if_3_acc_nl);
  assign sawtooth_loop_2_and_1_m1c_1 = sawtooth_loop_2_else_unequal_tmp_1 & sawtooth_loop_2_unequal_tmp_1;
  assign sawtooth_loop_2_unequal_tmp_1 = (ColumnStatistic_j_1_3_1_lpi_1_dfm_1_1_0!=2'b00);
  assign abs_rawData_1_sva_mx0w0 = MUX_v_12_3_2(gb_block_1_0_lpi_1_mx0, gb_block_3_0_lpi_1_mx0,
      gb_block_5_0_lpi_1_mx0, ColumnStatistic_i_1_2_1_lpi_1_dfm_mx0w0);
  assign abs_rawData_2_sva_1 = MUX_v_12_16_2x1x2x3x4x5x9x10x11x12x13(gb_block_0_1_lpi_1,
      gb_block_1_6_lpi_1_mx0, gb_block_2_1_lpi_1, gb_block_2_3_lpi_1, gb_block_4_1_lpi_1,
      gb_block_4_3_lpi_1, abs_rawData_2_3_sva_1[3:0]);
  assign nl_sawtooth_loop_2_if_if_1_acc_5_itm_1 = ({1'b1 , abs_rawData_1_sva_mx0w0})
      + conv_u2s_12_13(~ abs_rawData_2_1_sva_1) + 13'b0000000000001;
  assign sawtooth_loop_2_if_if_1_acc_5_itm_1 = nl_sawtooth_loop_2_if_if_1_acc_5_itm_1[12:0];
  assign sawtooth_loop_2_else_unequal_tmp_1 = ~((ColumnStatistic_j_1_3_1_lpi_1_dfm_1_1_0==2'b11));
  assign abs_rawData_1_2_sva_1 = MUX_v_12_3_2(gb_block_1_6_lpi_1_mx0, gb_block_3_6_lpi_1_mx0,
      gb_block_5_6_lpi_1_mx0, ColumnStatistic_i_1_2_1_lpi_1_dfm_1);
  assign col_loop_if_if_not_8_nl = ~ sfi_col_loop_if_if_col_loop_if_if_xor_lpi_1_dfm_1;
  assign ColumnStatistic_i_1_2_1_lpi_1_dfm_mx0w0 = MUX_v_2_2_2(2'b00, ColumnStatistic_i_1_2_1_lpi_1,
      col_loop_if_if_not_8_nl);
  assign col_loop_if_if_not_6_nl = ~ sfi_col_loop_if_if_col_loop_if_if_xor_lpi_1_dfm_1;
  assign ColumnStatistic_i_2_1_lpi_1_dfm_mx0w1 = MUX_v_2_2_2(2'b00, ColumnStatistic_i_2_1_lpi_1,
      col_loop_if_if_not_6_nl);
  assign abs_rawData_1_4_sva_1 = MUX_v_12_22_2x0x1x2x6x7x8x9x14x15x16x17(gb_block_1_0_lpi_1,
      gb_block_1_2_lpi_1, gb_block_1_4_lpi_1, gb_block_3_0_lpi_1, gb_block_3_2_lpi_1,
      gb_block_3_4_lpi_1, gb_block_3_6_lpi_1_mx0, gb_block_5_2_lpi_1, gb_block_5_4_lpi_1,
      gb_block_5_6_lpi_1_mx0, gb_block_6_1_lpi_1, {ColumnStatistic_i_1_2_1_lpi_1_dfm_1
      , sawtooth_loop_2_else_else_if_acc_itm_1});
  assign ColumnStatistic_sum_total_1_lpi_1_dfm_5_mx0 = MUX_v_31_2_2(ColumnStatistic_sum_total_1_lpi_1_dfm_1,
      z_out_27, z_out_12_12);
  assign ColumnStatistic_count_total_lpi_1_dfm_5_mx0 = MUX_v_6_2_2(ColumnStatistic_count_total_lpi_1_dfm_1,
      ColumnStatistic_count_total_lpi_1_dfm_1_mx0w0, z_out_12_12);
  assign nl_sawtooth_loop_2_else_else_if_1_acc_nl = ColumnStatistic_sum_total_1_lpi_1_dfm_5_mx0
      + conv_s2u_13_31(z_out_15);
  assign sawtooth_loop_2_else_else_if_1_acc_nl = nl_sawtooth_loop_2_else_else_if_1_acc_nl[30:0];
  assign ColumnStatistic_sum_total_1_lpi_1_dfm_6_mx0 = MUX_v_31_2_2(ColumnStatistic_sum_total_1_lpi_1_dfm_5_mx0,
      sawtooth_loop_2_else_else_if_1_acc_nl, z_out_13_12);
  assign nl_sawtooth_loop_2_else_else_if_1_acc_6_nl = ColumnStatistic_count_total_lpi_1_dfm_5_mx0
      + 6'b000001;
  assign sawtooth_loop_2_else_else_if_1_acc_6_nl = nl_sawtooth_loop_2_else_else_if_1_acc_6_nl[5:0];
  assign ColumnStatistic_count_total_mux_5_cse = MUX_v_6_2_2(ColumnStatistic_count_total_lpi_1_dfm_5_mx0,
      sawtooth_loop_2_else_else_if_1_acc_6_nl, z_out_13_12);
  assign abs_rawData_2_7_sva_1 = MUX_v_12_24_2x0x1x2x3x4x5x10x11x12x13x18x19x20x21(gb_block_1_6_lpi_1_mx0,
      gb_block_2_1_lpi_1, gb_block_2_3_lpi_1, gb_block_2_5_lpi_1, gb_block_4_1_lpi_1,
      gb_block_4_3_lpi_1, gb_block_4_5_lpi_1, gb_block_5_0_lpi_1, gb_block_6_3_lpi_1,
      gb_block_6_5_lpi_1, abs_rawData_2_3_sva_1[4:0]);
  assign ColumnStatistic_ColumnStatistic_and_1_nl = lfst_exit_sawtooth_loop_1_lpi_1
      & (~ sfi_col_loop_if_if_col_loop_if_if_xor_lpi_1_dfm_1);
  assign ColumnStatistic_j_1_3_1_lpi_1_dfm_1_0_mx0w0 = MUX_v_2_2_2(2'b00, ColumnStatistic_j_1_3_1_lpi_1_1_0,
      ColumnStatistic_ColumnStatistic_and_1_nl);
  assign nl_sawtooth_loop_4_if_3_acc_5_cse = ({1'b1 , abs_rawData_1_8_sva_1}) + conv_u2s_12_13(~
      abs_rawData_2_11_sva_1) + 13'b0000000000001;
  assign sawtooth_loop_4_if_3_acc_5_cse = nl_sawtooth_loop_4_if_3_acc_5_cse[12:0];
  assign abs_11_if_mux_2_nl = MUX_v_12_2_2(abs_rawData_1_8_sva_1, abs_rawData_2_11_sva_1,
      sawtooth_loop_4_if_3_acc_5_cse[12]);
  assign abs_11_if_mux_3_nl = MUX_v_12_2_2((~ abs_rawData_2_11_sva_1), (~ abs_rawData_1_8_sva_1),
      sawtooth_loop_4_if_3_acc_5_cse[12]);
  assign nl_acc_21_nl = ({abs_11_if_mux_2_nl , 1'b1}) + ({abs_11_if_mux_3_nl , 1'b1});
  assign acc_21_nl = nl_acc_21_nl[12:0];
  assign nl_sawtooth_loop_4_if_3_acc_nl = ({1'b1 , (readslicef_13_12_1(acc_21_nl))})
      + conv_u2u_12_13({2'b11 , (~ gb_reg_threhold)}) + 13'b0000000000001;
  assign sawtooth_loop_4_if_3_acc_nl = nl_sawtooth_loop_4_if_3_acc_nl[12:0];
  assign sawtooth_loop_4_if_3_acc_itm_12_1 = readslicef_13_1_12(sawtooth_loop_4_if_3_acc_nl);
  assign abs_rawData_1_8_sva_1 = MUX_v_12_23_2x0x1x7x8x9x15x16x17(gb_block_0_4_lpi_1,
      gb_block_0_6_lpi_1_mx0, gb_block_1_1_lpi_1, gb_block_1_3_lpi_1, gb_block_1_5_lpi_1,
      gb_block_2_6_lpi_1_mx0, gb_block_3_1_lpi_1, gb_block_3_3_lpi_1_mx0, gb_block_3_5_lpi_1,
      gb_block_4_0_lpi_1, gb_block_5_1_lpi_1, gb_block_5_3_lpi_1, gb_block_5_5_lpi_1,
      gb_block_6_0_lpi_1, gb_block_6_2_lpi_1, {ColumnStatistic_i_1_2_1_lpi_1_dfm_1
      , operator_4_false_9_acc_itm_1_2_0});
  assign abs_rawData_2_10_sva_1 = MUX_v_12_19_2x0x4x5x6x12x13x14(gb_block_0_2_lpi_1,
      gb_block_0_4_lpi_1, gb_block_0_6_lpi_1_mx0, gb_block_2_0_lpi_1, gb_block_2_2_lpi_1,
      gb_block_2_4_lpi_1, gb_block_2_6_lpi_1_mx0, gb_block_3_1_lpi_1, gb_block_4_2_lpi_1,
      gb_block_4_4_lpi_1, gb_block_4_6_lpi_1_mx0, gb_block_5_1_lpi_1, abs_rawData_1_sva_1[4:0]);
  assign abs_rawData_2_11_sva_1 = MUX_v_12_25_2x0x1x2x3x4x5x11x12x13x19x20x21(gb_block_1_5_lpi_1,
      gb_block_2_0_lpi_1, gb_block_2_2_lpi_1, gb_block_2_4_lpi_1, gb_block_2_6_lpi_1_mx0,
      gb_block_4_0_lpi_1, gb_block_4_2_lpi_1, gb_block_4_4_lpi_1, gb_block_4_6_lpi_1_mx0,
      gb_block_5_1_lpi_1, gb_block_6_2_lpi_1, gb_block_6_4_lpi_1, pixel_in_lpi_1_dfm_mx0,
      abs_rawData_2_3_sva_1[4:0]);
  assign ColumnStatistic_or_4_cse = ((~(sawtooth_loop_2_if_slc_12_1_svs_1 | sawtooth_loop_2_unequal_tmp_1))
      & col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1) | ((~ sawtooth_loop_2_else_if_if_1_acc_itm_12_1)
      & (~ sawtooth_loop_2_else_unequal_tmp_1) & col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1);
  assign sawtooth_loop_4_if_3_or_5_cse = and_280_cse | and_282_cse;
  assign sawtooth_loop_4_if_3_sawtooth_loop_4_if_3_mux_1_nl = MUX_v_31_2_2(ColumnStatistic_sum_total_mux_2_cse,
      ColumnStatistic_sum_total_mux_cse, sawtooth_loop_4_if_3_or_5_cse);
  assign sawtooth_loop_4_if_3_mux1h_2_nl = MUX1HOT_v_13_4_2(sawtooth_loop_4_if_3_acc_5_cse,
      sawtooth_loop_2_if_if_1_acc_5_itm_1_1, sawtooth_loop_2_else_if_if_1_acc_5_cse,
      sawtooth_loop_2_else_else_if_3_acc_5_cse, {(~ col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1)
      , and_280_cse , and_282_cse , and_283_cse});
  assign nl_sawtooth_loop_4_if_3_acc_6_nl = sawtooth_loop_4_if_3_sawtooth_loop_4_if_3_mux_1_nl
      + conv_s2u_13_31(sawtooth_loop_4_if_3_mux1h_2_nl);
  assign sawtooth_loop_4_if_3_acc_6_nl = nl_sawtooth_loop_4_if_3_acc_6_nl[30:0];
  assign ColumnStatistic_or_6_nl = ColumnStatistic_ColumnStatistic_nor_1_cse_1 |
      sawtooth_loop_2_and_7_cse_1;
  assign ColumnStatistic_or_2_nl = ColumnStatistic_and_6_cse_1 | sawtooth_loop_2_and_5_cse_1
      | sawtooth_loop_2_and_6_cse_1 | sawtooth_loop_2_and_8_cse_1;
  assign ColumnStatistic_sum_total_1_lpi_1_dfm_17 = MUX1HOT_v_31_3_2(ColumnStatistic_sum_total_mux_2_cse,
      sawtooth_loop_4_if_3_acc_6_nl, ColumnStatistic_sum_total_mux_cse, {ColumnStatistic_or_6_nl
      , ColumnStatistic_or_2_nl , ColumnStatistic_or_4_cse});
  assign sawtooth_loop_4_if_3_or_4_nl = (z_out_16_12 & (~ col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1))
      | (z_out_16_12 & col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1);
  assign sawtooth_loop_4_if_3_sawtooth_loop_4_if_3_sawtooth_loop_4_if_3_mux_1_nl
      = MUX_v_6_2_2(ColumnStatistic_count_total_mux_5_cse, z_out_3, sawtooth_loop_4_if_3_or_4_nl);
  assign nl_sawtooth_loop_4_if_3_acc_7_nl = sawtooth_loop_4_if_3_sawtooth_loop_4_if_3_sawtooth_loop_4_if_3_mux_1_nl
      + 6'b000001;
  assign sawtooth_loop_4_if_3_acc_7_nl = nl_sawtooth_loop_4_if_3_acc_7_nl[5:0];
  assign ColumnStatistic_or_nl = ((~ z_out_16_12) & ColumnStatistic_ColumnStatistic_nor_1_cse_1)
      | ((~ z_out_16_12) & sawtooth_loop_2_and_7_cse_1);
  assign ColumnStatistic_or_1_nl = (z_out_16_12 & ColumnStatistic_ColumnStatistic_nor_1_cse_1)
      | sawtooth_loop_2_and_5_cse_1 | sawtooth_loop_2_and_6_cse_1 | (z_out_16_12
      & sawtooth_loop_2_and_7_cse_1);
  assign ColumnStatistic_or_5_nl = ColumnStatistic_and_6_cse_1 | sawtooth_loop_2_and_8_cse_1;
  assign ColumnStatistic_count_total_lpi_1_dfm_16 = MUX1HOT_v_6_4_2(ColumnStatistic_count_total_mux_5_cse,
      z_out_3, sawtooth_loop_4_if_3_acc_7_nl, ColumnStatistic_count_total_mux_cse,
      {ColumnStatistic_or_nl , ColumnStatistic_or_1_nl , ColumnStatistic_or_5_nl
      , ColumnStatistic_or_4_cse});
  assign nl_ColumnStatistic_if_1_acc_cse = ({1'b1 , ColumnStatistic_count_total_lpi_1_dfm_16})
      + conv_u2u_6_7({2'b11 , (~ gb_reg_Lbound)}) + 7'b0000001;
  assign ColumnStatistic_if_1_acc_cse = nl_ColumnStatistic_if_1_acc_cse[6:0];
  assign ColumnStatistic_ColumnStatistic_nor_1_cse_1 = ~(sawtooth_loop_4_if_3_acc_itm_12_1
      | col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1);
  assign ColumnStatistic_and_6_cse_1 = sawtooth_loop_4_if_3_acc_itm_12_1 & (~ col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1);
  assign sawtooth_loop_2_and_5_cse_1 = sawtooth_loop_2_if_slc_12_1_svs_1 & (~ sawtooth_loop_2_unequal_tmp_1)
      & col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1;
  assign sawtooth_loop_2_and_6_cse_1 = sawtooth_loop_2_else_if_if_1_acc_itm_12_1
      & (~ sawtooth_loop_2_else_unequal_tmp_1) & col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1;
  assign sawtooth_loop_2_and_7_cse_1 = (~ sawtooth_loop_2_else_else_if_3_acc_itm_12_1)
      & sawtooth_loop_2_and_1_m1c_1 & col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1;
  assign sawtooth_loop_2_and_8_cse_1 = sawtooth_loop_2_else_else_if_3_acc_itm_12_1
      & sawtooth_loop_2_and_1_m1c_1 & col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1;
  assign lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_2_mx0w0 = lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_2
      & (~ sfi_gb_reg_eb_1_lpi_1_dfm_1);
  assign nl_padding_inter_loop_acc_13_nl = ({1'b1 , i_lpi_1}) + conv_u2u_13_14(~
      top_reg_frameWidth) + 14'b00000000000001;
  assign padding_inter_loop_acc_13_nl = nl_padding_inter_loop_acc_13_nl[13:0];
  assign padding_inter_loop_acc_13_itm_13_1 = readslicef_14_1_13(padding_inter_loop_acc_13_nl);
  assign gb_reg_eb_not_10_nl = ~ sfi_gb_reg_eb_1_lpi_1_dfm_1;
  assign lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_1_0_1 = MUX_v_2_2_2(2'b00,
      lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_1_0, gb_reg_eb_not_10_nl);
  assign sfi_exit_col_loop_lpi_1_dfm_1 = sfi_exit_col_loop_lpi_1 | (~ lfst_exitL_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_1);
  assign and_208_nl = (~ exitL_exitL_exit_col_loop_lpi_1) & lfst_exitL_exit_col_loop_lpi_1
      & lfst_exit_col_loop_lpi_1 & (~(exitL_exitL_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1
      | exitL_exitL_exit_padding_outer_loop_sva)) & lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0
      & lfst_exitL_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1 & (~ sfi_exit_col_loop_lpi_1)
      & lfst_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1;
  assign col_loop_asn_sft_lpi_1_dfm_1_mx0 = MUX_s_1_2_2(gb_reg_eb, col_loop_asn_sft_lpi_1,
      and_208_nl);
  assign sawtooth_loop_1_or_tmp_1 = sawtooth_loop_1_sawtooth_loop_1_and_cse_1 | sawtooth_loop_1_sawtooth_loop_1_nor_1_cse_1;
  assign sawtooth_loop_1_equal_tmp_3 = lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_2_mx0w0
      & (lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_1_0_1==2'b00);
  assign sawtooth_loop_1_nor_tmp_1 = ~(sawtooth_loop_1_sawtooth_loop_1_and_cse_1
      | sawtooth_loop_1_sawtooth_loop_1_nor_1_cse_1 | sawtooth_loop_1_equal_tmp_4
      | sawtooth_loop_1_equal_tmp_5 | sawtooth_loop_1_equal_tmp_3);
  assign or_311_nl = or_dcpl_148 | (~ lfst_exit_col_loop_lpi_1) | exitL_exitL_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1
      | or_358_cse | (~ lfst_exitL_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1);
  assign col_loop_asn_sft_1_lpi_1_dfm_1_mx0 = MUX_s_1_2_2(col_loop_asn_sft_1_lpi_1,
      exit_col_loop_lpi_1_dfm_1, or_311_nl);
  assign padding_outer_loop_or_225_tmp_1 = row_loop_asn_sft_lpi_1_dfm_1 | padding_outer_loop_equal_tmp_1
      | padding_outer_loop_equal_tmp_3_1;
  assign sawtooth_loop_1_equal_tmp_4 = (lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_1_0_1[1])
      & (~(lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_2_mx0w0 | (lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_1_0_1[0])));
  assign nl_k_3_sva_2 = k_3_lpi_1_mx0 + 3'b001;
  assign k_3_sva_2 = nl_k_3_sva_2[2:0];
  assign sawtooth_loop_1_equal_tmp_5 = (lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_1_0_1==2'b11)
      & (~ lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_2_mx0w0);
  assign or_312_nl = or_dcpl_148 | or_358_cse;
  assign row_loop_asn_sft_lpi_1_dfm_1_mx0 = MUX_s_1_2_2(row_loop_asn_sft_lpi_1, exit_row_loop_lpi_1_dfm_1,
      or_312_nl);
  assign padding_outer_loop_equal_tmp_4 = lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_1_1
      & (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_0_1);
  assign padding_outer_loop_equal_tmp_5 = lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_1_1
      & lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_0_1;
  assign lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_1_1 = lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_1
      & (~ exitL_exitL_exit_padding_outer_loop_sva);
  assign lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_0_1 = lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0
      & (~ exitL_exitL_exit_padding_outer_loop_sva);
  assign and_258_cse = col_loop_acc_2_itm_13_1 & row_loop_acc_3_itm_13_1;
  assign exit_col_loop_lpi_1_dfm_1 = (~ col_loop_acc_2_itm_13_1) & exitL_exitL_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_1;
  assign sawtooth_loop_1_mux_31_nl = MUX_s_1_2_2(lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_2_mx0w0,
      (~ exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_1), sawtooth_loop_1_equal_tmp_3);
  assign lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_5_2_1 = sawtooth_loop_1_mux_31_nl
      | sawtooth_loop_1_and_73_ssc_1;
  assign sawtooth_loop_1_and_77_nl = (~ exit_out_window_loop_lpi_1_dfm_3) & sawtooth_loop_1_or_tmp_1;
  assign sawtooth_loop_1_and_78_nl = exit_out_window_loop_lpi_1_dfm_3 & sawtooth_loop_1_or_tmp_1;
  assign sawtooth_loop_1_or_184_nl = (operator_3_false_2_acc_itm_2_1 & sawtooth_loop_1_equal_tmp_4)
      | (operator_3_false_3_acc_itm_2_1 & sawtooth_loop_1_equal_tmp_5) | sawtooth_loop_1_nor_tmp_1;
  assign sawtooth_loop_1_mux1h_175_nl = MUX1HOT_v_2_3_2(2'b01, 2'b10, lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_1_0_1,
      {sawtooth_loop_1_and_77_nl , sawtooth_loop_1_and_78_nl , sawtooth_loop_1_or_184_nl});
  assign sawtooth_loop_1_nor_7_nl = ~(sawtooth_loop_1_and_73_ssc_1 | sawtooth_loop_1_equal_tmp_3);
  assign sawtooth_loop_1_and_nl = MUX_v_2_2_2(2'b00, sawtooth_loop_1_mux1h_175_nl,
      sawtooth_loop_1_nor_7_nl);
  assign sawtooth_loop_1_and_71_nl = (~ operator_3_false_2_acc_itm_2_1) & sawtooth_loop_1_equal_tmp_4;
  assign lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_5_1_0_1 = MUX_v_2_2_2(sawtooth_loop_1_and_nl,
      2'b11, sawtooth_loop_1_and_71_nl);
  assign exit_out_window_loop_lpi_1_dfm_3 = ~((z_out_36_3_1[2]) | operator_3_false_1_acc_itm_2_1);
  assign gb_reg_eb_not_12_nl = ~ sfi_gb_reg_eb_1_lpi_1_dfm_1;
  assign k_1_lpi_1_dfm_1 = MUX_v_3_2_2(3'b000, k_1_lpi_1, gb_reg_eb_not_12_nl);
  assign nl_operator_3_false_1_acc_nl = ({1'b1 , (l_sva_2[2:1])}) + 3'b001;
  assign operator_3_false_1_acc_nl = nl_operator_3_false_1_acc_nl[2:0];
  assign operator_3_false_1_acc_itm_2_1 = readslicef_3_1_2(operator_3_false_1_acc_nl);
  assign nl_l_sva_2 = l_lpi_1_dfm_2 + 3'b001;
  assign l_sva_2 = nl_l_sva_2[2:0];
  assign out_window_loop_out_window_loop_out_window_loop_or_nl = lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_2_mx0w0
      | (lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_1_0_1!=2'b00);
  assign l_lpi_1_dfm_2 = MUX_v_3_2_2(3'b000, l_lpi_1, out_window_loop_out_window_loop_out_window_loop_or_nl);
  assign sawtooth_loop_1_and_73_ssc_1 = (~ operator_3_false_3_acc_itm_2_1) & sawtooth_loop_1_equal_tmp_5;
  assign nl_operator_3_false_2_acc_nl = ({1'b1 , (k_2_sva_2[2:1])}) + 3'b001;
  assign operator_3_false_2_acc_nl = nl_operator_3_false_2_acc_nl[2:0];
  assign operator_3_false_2_acc_itm_2_1 = readslicef_3_1_2(operator_3_false_2_acc_nl);
  assign nl_operator_3_false_3_acc_nl = ({1'b1 , (k_3_sva_2[2:1])}) + 3'b001;
  assign operator_3_false_3_acc_nl = nl_operator_3_false_3_acc_nl[2:0];
  assign operator_3_false_3_acc_itm_2_1 = readslicef_3_1_2(operator_3_false_3_acc_nl);
  assign sawtooth_loop_1_sawtooth_loop_1_and_cse_1 = (lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_1_0_1[0])
      & (~(lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_2_mx0w0 | (lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_1_0_1[1])));
  assign sawtooth_loop_1_sawtooth_loop_1_nor_1_cse_1 = ~(lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_2_mx0w0
      | (lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_1_0_1!=2'b00));
  assign sfi_gb_reg_eb_1_lpi_1_dfm_1 = sfi_gb_reg_eb_1_lpi_1 | (~ lfst_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_1);
  assign lfst_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_1 = lfst_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1
      & (~ sfi_exit_col_loop_lpi_1_dfm_1);
  assign or_332_nl = or_dcpl_149 | or_dcpl_146 | (~(lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0
      & lfst_exitL_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1)) | sfi_exit_col_loop_lpi_1
      | (~ lfst_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1);
  assign col_loop_asn_sft_lpi_1_dfm_mx0 = MUX_s_1_2_2(col_loop_asn_sft_lpi_1, gb_reg_eb,
      or_332_nl);
  assign exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_1 = ~((lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_5_2_1
      | (lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_5_1_0_1!=2'b00)) & col_loop_asn_sft_lpi_1_dfm_1_mx0);
  assign lfst_exitL_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_1 = lfst_exitL_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1
      & (~ exitL_exitL_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_1);
  assign nl_col_loop_acc_2_nl = ({1'b1 , col_lpi_1_dfm_1}) + conv_u2u_13_14(~ top_reg_frameWidth)
      + 14'b00000000000001;
  assign col_loop_acc_2_nl = nl_col_loop_acc_2_nl[13:0];
  assign col_loop_acc_2_itm_13_1 = readslicef_14_1_13(col_loop_acc_2_nl);
  assign col_lpi_1_dfm_1 = MUX_v_13_2_2(13'b0000000000000, col_lpi_1, lfst_exitL_exit_col_loop_lpi_1_dfm_1);
  assign exitL_exitL_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_1 = exitL_exitL_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1
      | (~(lfst_exit_col_loop_lpi_1 & lfst_exitL_exit_col_loop_lpi_1_dfm_1));
  assign lfst_exitL_exit_col_loop_lpi_1_dfm_1 = lfst_exitL_exit_col_loop_lpi_1 &
      (~ exitL_exitL_exit_col_loop_lpi_1_dfm_1);
  assign nl_row_loop_acc_3_nl = ({1'b1 , row_lpi_1_dfm_1}) + conv_u2u_13_14(~ top_reg_frameHeight)
      + 14'b00000000000001;
  assign row_loop_acc_3_nl = nl_row_loop_acc_3_nl[13:0];
  assign row_loop_acc_3_itm_13_1 = readslicef_14_1_13(row_loop_acc_3_nl);
  assign padding_outer_loop_not_160_nl = ~ exitL_exitL_exit_padding_outer_loop_sva;
  assign row_lpi_1_dfm_1 = MUX_v_13_2_2(13'b0000000000000, row_lpi_1, padding_outer_loop_not_160_nl);
  assign sawtooth_loop_1_and_69_rgt = operator_3_false_1_acc_itm_2_1 & (~ sawtooth_loop_1_or_50_tmp_1)
      & col_loop_asn_sft_lpi_1_dfm_1_mx0 & (~ row_loop_or_tmp_1) & (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_1_1);
  assign nl_k_2_sva_2 = k_2_lpi_1 + 3'b001;
  assign k_2_sva_2 = nl_k_2_sva_2[2:0];
  assign col_loop_and_54_rgt = sawtooth_loop_1_equal_tmp_4 & col_loop_asn_sft_lpi_1_dfm_1_mx0
      & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0) & (~ padding_outer_loop_or_223_tmp_1);
  assign exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_1 = exit_sawtooth_loop_1_pmx_lpi_1_dfm_mx0
      | (~ col_loop_if_asn_sft_lpi_1);
  assign exit_sawtooth_loop_1_pmx_lpi_1_dfm_mx0 = MUX_s_1_2_2(exitL_exit_sawtooth_loop_1_lpi_1_dfm_3,
      exit_sawtooth_loop_1_lpi_1_dfm_3, ColumnStatistic_mux_44_itm);
  assign abs_rawData_2_1_sva_1 = MUX_v_12_4_2x0(gb_block_2_1_lpi_1_mx0, gb_block_4_1_lpi_1_mx0,
      gb_block_6_1_lpi_1_mx0, operator_4_false_2_slc_operator_4_false_2_operator_4_false_2_acc_psp_sva_1);
  assign nl_operator_4_false_2_slc_operator_4_false_2_operator_4_false_2_acc_psp_sva_1
      = ColumnStatistic_i_1_2_1_lpi_1_dfm_mx0w0 + 2'b01;
  assign operator_4_false_2_slc_operator_4_false_2_operator_4_false_2_acc_psp_sva_1
      = nl_operator_4_false_2_slc_operator_4_false_2_operator_4_false_2_acc_psp_sva_1[1:0];
  assign nl_operator_4_false_acc_nl_1 = ({1'b1 , operator_4_false_2_slc_operator_4_false_2_operator_4_false_2_acc_psp_sva_1})
      + 3'b001;
  assign operator_4_false_acc_nl_1 = nl_operator_4_false_acc_nl_1[2:0];
  assign exit_sawtooth_loop_1_lpi_1_dfm_3 = (~ (readslicef_3_1_2(operator_4_false_acc_nl_1)))
      & (operator_4_false_acc_tmp[2]);
  assign nl_operator_4_false_acc_tmp = conv_u2u_2_3(ColumnStatistic_j_1_3_1_lpi_1_dfm_1_0_mx0w0)
      + 3'b001;
  assign operator_4_false_acc_tmp = nl_operator_4_false_acc_tmp[2:0];
  assign sfi_col_loop_if_if_col_loop_if_if_xor_lpi_1_dfm_1 = sfi_col_loop_if_if_col_loop_if_if_xor_lpi_1
      | (~(lfst_exitL_exit_sawtooth_loop_1_1_lpi_1 & (~ sfi_col_loop_if_land_lpi_1)));
  assign ColumnStatistic_and_15_rgt = (operator_4_false_acc_tmp[2]) & ColumnStatistic_mux_44_itm
      & col_loop_and_66_tmp_1 & (~ padding_outer_loop_or_230_tmp_1);
  assign nl_operator_4_false_2_acc_nl = ({1'b1 , operator_4_false_16_slc_operator_4_false_16_operator_4_false_16_acc_psp_sva_1})
      + 3'b001;
  assign operator_4_false_2_acc_nl = nl_operator_4_false_2_acc_nl[2:0];
  assign operator_4_false_2_acc_itm_2_1 = readslicef_3_1_2(operator_4_false_2_acc_nl);
  assign nl_operator_4_false_16_slc_operator_4_false_16_operator_4_false_16_acc_psp_sva_1
      = ColumnStatistic_i_2_1_lpi_1_dfm_mx0w1 + 2'b01;
  assign operator_4_false_16_slc_operator_4_false_16_operator_4_false_16_acc_psp_sva_1
      = nl_operator_4_false_16_slc_operator_4_false_16_operator_4_false_16_acc_psp_sva_1[1:0];
  assign exitL_exit_sawtooth_loop_1_lpi_1_dfm_3 = ~(operator_4_false_2_acc_itm_2_1
      | operator_4_false_3_acc_tmp_2);
  assign operator_4_false_3_acc_tmp_2 = (ColumnStatistic_j_2_1_sva_2[0]) ^ (ColumnStatistic_j_2_1_sva_2[1]);
  assign nl_ColumnStatistic_j_2_1_sva_2 = ColumnStatistic_j_2_1_lpi_1_dfm_2 + 2'b01;
  assign ColumnStatistic_j_2_1_sva_2 = nl_ColumnStatistic_j_2_1_sva_2[1:0];
  assign ColumnStatistic_ColumnStatistic_and_3_nl = lfst_exitL_exit_sawtooth_loop_1_lpi_1
      & (~ sfi_col_loop_if_if_col_loop_if_if_xor_lpi_1_dfm_1);
  assign ColumnStatistic_j_2_1_lpi_1_dfm_2 = MUX_v_2_2_2(2'b00, ColumnStatistic_j_2_1_lpi_1,
      ColumnStatistic_ColumnStatistic_and_3_nl);
  assign ColumnStatistic_and_1_rgt = operator_4_false_3_acc_tmp_2 & (~ ColumnStatistic_mux_44_itm)
      & col_loop_if_asn_sft_lpi_1 & col_loop_and_59_tmp_1 & (~ row_loop_or_tmp_1)
      & (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_1_1);
  assign ColumnStatistic_and_10_rgt = operator_4_false_3_acc_tmp_2 & (~ ColumnStatistic_mux_44_itm)
      & col_loop_and_66_tmp_1 & (~ row_loop_or_tmp_1) & (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_1_1);
  assign exit_row_loop_lpi_1_dfm_1 = (~ row_loop_acc_3_itm_13_1) & exitL_exitL_exit_col_loop_lpi_1_dfm_1;
  assign exitL_exitL_exit_col_loop_lpi_1_dfm_1 = exitL_exitL_exit_col_loop_lpi_1
      | padding_outer_loop_padding_outer_loop_nor_2_cse_1;
  assign padding_outer_loop_padding_outer_loop_nor_2_cse_1 = ~(lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_1_1
      | lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_0_1);
  assign and_2_rgt = padding_outer_loop_or_tmp_2 & asn_sft_lpi_1 & padding_outer_loop_equal_tmp_4;
  assign padding_outer_loop_and_rgt = (~ padding_inter_loop_acc_13_itm_13_1) & padding_outer_loop_equal_tmp_7
      & asn_sft_lpi_1 & padding_outer_loop_equal_tmp_4;
  assign padding_outer_loop_and_1_rgt = padding_inter_loop_acc_13_itm_13_1 & padding_outer_loop_equal_tmp_7
      & asn_sft_lpi_1 & padding_outer_loop_equal_tmp_4;
  assign lfst_exit_padding_outer_loop_lpi_1_dfm_1_1 = lfst_exit_padding_outer_loop_lpi_1_1
      & (~ sfi_gb_reg_eb_lpi_1);
  assign lfst_exit_padding_outer_loop_lpi_1_dfm_0_1 = lfst_exit_padding_outer_loop_lpi_1_0
      & (~ sfi_gb_reg_eb_lpi_1);
  assign padding_outer_loop_padding_outer_loop_and_9_nl = (lfst_exit_padding_outer_loop_lpi_1_dfm_3_1_1
      | lfst_exit_padding_outer_loop_lpi_1_dfm_3_0_1) & asn_sft_lpi_1;
  assign padding_outer_loop_mux_56_nl = MUX_s_1_2_2(padding_outer_loop_padding_outer_loop_and_9_nl,
      lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_1_1, padding_outer_loop_equal_tmp_5);
  assign lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_1_1 = (padding_outer_loop_mux_56_nl
      & (~ padding_outer_loop_and_100_tmp)) | padding_outer_loop_and_101_tmp;
  assign lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0_1 = (lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_0_1
      & (~(padding_outer_loop_and_101_tmp | padding_outer_loop_equal_tmp_4))) | padding_outer_loop_and_100_tmp;
  assign ColumnStatistic_sum_total_1_lpi_1_mx0 = MUX_v_31_2_2(ColumnStatistic_sum_total_1_lpi_1_dfm_17,
      ColumnStatistic_sum_total_1_lpi_1, or_dcpl_199);
  assign ColumnStatistic_count_total_lpi_1_mx0 = MUX_v_6_2_2(ColumnStatistic_count_total_lpi_1_dfm_16,
      ColumnStatistic_count_total_lpi_1, or_dcpl_199);
  assign ColumnStatistic_else_1_if_else_mul_nl = conv_u2u_37_37(operator_31_true_acc_2
      * ROM_1i5_1o6_909eb1361a488e6876f74b06293376842f_1);
  assign ColumnStatistic_else_1_if_else_mul_itm_36_8 = readslicef_37_29_8(ColumnStatistic_else_1_if_else_mul_nl);
  assign nl_operator_44_true_acc_psp_sva_1 = conv_s2s_32_33(ColumnStatistic_else_1_else_if_mul_itm_42_8[34:3])
      + 33'b000000000000000000000000000000001;
  assign operator_44_true_acc_psp_sva_1 = nl_operator_44_true_acc_psp_sva_1[32:0];
  assign nl_ColumnStatistic_else_1_else_if_mul_1_nl = $signed((ColumnStatistic_if_1_acc_cse))
      * $signed(conv_u2s_30_31(ColumnStatistic_sum_total_1_lpi_1_dfm_17[29:0]));
  assign ColumnStatistic_else_1_else_if_mul_1_nl = nl_ColumnStatistic_else_1_else_if_mul_1_nl[36:0];
  assign nl_ColumnStatistic_else_1_else_if_mul_nl = $signed(ColumnStatistic_else_1_else_if_mul_1_nl)
      * $signed(conv_u2s_6_7(ROM_1i5_1o6_909eb1361a488e6876f74b06293376842f_1));
  assign ColumnStatistic_else_1_else_if_mul_nl = nl_ColumnStatistic_else_1_else_if_mul_nl[42:0];
  assign ColumnStatistic_else_1_else_if_mul_itm_42_8 = readslicef_43_35_8(ColumnStatistic_else_1_else_if_mul_nl);
  assign nl_operator_46_true_acc_psp_sva_1 = conv_s2s_33_34(ColumnStatistic_else_1_else_else_mul_itm_43_8[35:3])
      + 34'b0000000000000000000000000000000001;
  assign operator_46_true_acc_psp_sva_1 = nl_operator_46_true_acc_psp_sva_1[33:0];
  assign nl_ColumnStatistic_else_1_else_else_mul_1_nl = $signed((ColumnStatistic_if_1_acc_cse))
      * $signed(conv_u2s_31_32(operator_31_true_acc_2));
  assign ColumnStatistic_else_1_else_else_mul_1_nl = nl_ColumnStatistic_else_1_else_else_mul_1_nl[37:0];
  assign nl_ColumnStatistic_else_1_else_else_mul_nl = $signed(ColumnStatistic_else_1_else_else_mul_1_nl)
      * $signed(conv_u2s_6_7(ROM_1i5_1o6_909eb1361a488e6876f74b06293376842f_1));
  assign ColumnStatistic_else_1_else_else_mul_nl = nl_ColumnStatistic_else_1_else_else_mul_nl[43:0];
  assign ColumnStatistic_else_1_else_else_mul_itm_43_8 = readslicef_44_36_8(ColumnStatistic_else_1_else_else_mul_nl);
  assign in_window_loop_and_stg_3_2_sva_1 = in_window_loop_and_stg_2_2_sva_1 & (~
      (in_window_loop_acc_tmp[3]));
  assign in_window_loop_and_stg_3_11_sva_mx0w0 = in_window_loop_and_stg_2_3_sva_1
      & (in_window_loop_acc_tmp[3]);
  assign in_window_loop_and_stg_4_10_sva_1 = in_window_loop_and_stg_3_10_sva_1 &
      (~ (in_window_loop_acc_tmp[4]));
  assign nl_in_window_loop_acc_tmp = conv_u2u_3_6(~ k_1_lpi_1_dfm_1) + ({k_1_lpi_1_dfm_1
      , l_lpi_1_dfm_2});
  assign in_window_loop_acc_tmp = nl_in_window_loop_acc_tmp[5:0];
  assign in_window_loop_and_stg_3_12_sva_1 = in_window_loop_and_stg_2_4_sva_1 & (in_window_loop_acc_tmp[3]);
  assign in_window_loop_and_stg_4_14_sva_1 = in_window_loop_and_stg_3_14_sva_1 &
      (~ (in_window_loop_acc_tmp[4]));
  assign in_window_loop_and_stg_4_18_sva_1 = in_window_loop_and_stg_3_2_sva_1 & (in_window_loop_acc_tmp[4]);
  assign in_window_loop_and_stg_3_4_sva_1 = in_window_loop_and_stg_2_4_sva_1 & (~
      (in_window_loop_acc_tmp[3]));
  assign in_window_loop_and_stg_4_22_sva_1 = in_window_loop_and_stg_3_6_sva_1 & (in_window_loop_acc_tmp[4]);
  assign sawtooth_loop_1_sawtooth_loop_1_nor_3_cse_1 = ~(sawtooth_loop_1_equal_tmp_4
      | sawtooth_loop_1_equal_tmp_5 | sawtooth_loop_1_equal_tmp_3 | sawtooth_loop_1_nor_tmp_1);
  assign padding_outer_loop_padding_outer_loop_nor_cse_1 = ~(row_loop_asn_sft_lpi_1_dfm_1_mx0
      | padding_outer_loop_equal_tmp_4 | padding_outer_loop_equal_tmp_5);
  assign col_loop_and_66_tmp_1 = col_loop_if_asn_sft_lpi_1 & sawtooth_loop_1_equal_tmp_3
      & col_loop_asn_sft_lpi_1_dfm_1_mx0;
  assign sawtooth_loop_1_or_50_tmp_1 = sawtooth_loop_1_equal_tmp_4 | sawtooth_loop_1_equal_tmp_5
      | sawtooth_loop_1_equal_tmp_3 | sawtooth_loop_1_nor_tmp_1;
  assign in_window_loop_and_stg_4_13_sva_1 = in_window_loop_and_stg_3_13_sva_1 &
      (~ (in_window_loop_acc_tmp[4]));
  assign in_window_loop_and_stg_4_20_sva_1 = in_window_loop_and_stg_3_4_sva_1 & (in_window_loop_acc_tmp[4]);
  assign in_window_loop_and_stg_4_16_sva_1 = in_window_loop_and_stg_3_0_sva_1 & (in_window_loop_acc_tmp[4]);
  assign in_window_loop_and_stg_4_9_sva_1 = in_window_loop_and_stg_3_9_sva_1 & (~
      (in_window_loop_acc_tmp[4]));
  assign col_loop_and_59_tmp_1 = sawtooth_loop_1_equal_tmp_3 & col_loop_asn_sft_lpi_1_dfm_1_mx0;
  assign sawtooth_loop_1_or_183_tmp_1 = operator_3_false_1_acc_itm_2_1 | sawtooth_loop_1_equal_tmp_4
      | sawtooth_loop_1_equal_tmp_5 | sawtooth_loop_1_equal_tmp_3 | sawtooth_loop_1_nor_tmp_1;
  assign col_loop_and_70_tmp_1 = col_loop_asn_sft_lpi_1_dfm_1_mx0 & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0);
  assign or_384_nl = (~ lfst_exit_padding_outer_loop_lpi_1_1) | sfi_gb_reg_eb_lpi_1;
  assign padding_outer_loop_mux_66_nl = MUX_s_1_2_2((~ operator_3_false_5_acc_tmp_2),
      exit_padding_outer_loop_sva_1, or_384_nl);
  assign padding_outer_loop_padding_inter_loop_nand_nl = ~(padding_outer_loop_mux_66_nl
      & (~ padding_inter_loop_acc_13_itm_13_1));
  assign padding_outer_loop_mux_55_nl = MUX_s_1_2_2(padding_outer_loop_padding_inter_loop_nand_nl,
      lfst_exit_padding_outer_loop_lpi_1_dfm_1_1, padding_outer_loop_equal_tmp_6);
  assign lfst_exit_padding_outer_loop_lpi_1_dfm_3_1_1 = (padding_outer_loop_mux_55_nl
      & (~ padding_outer_loop_and_55_ssc_1)) | padding_outer_loop_and_56_ssc_1;
  assign lfst_exit_padding_outer_loop_lpi_1_dfm_3_0_1 = (lfst_exit_padding_outer_loop_lpi_1_dfm_0_1
      & (~(padding_outer_loop_and_56_ssc_1 | padding_outer_loop_equal_tmp_7))) |
      padding_outer_loop_and_55_ssc_1;
  assign padding_outer_loop_equal_tmp_6 = lfst_exit_padding_outer_loop_lpi_1_dfm_1_1
      & lfst_exit_padding_outer_loop_lpi_1_dfm_0_1;
  assign padding_outer_loop_or_tmp_2 = (lfst_exit_padding_outer_loop_lpi_1_dfm_0_1
      & (~ lfst_exit_padding_outer_loop_lpi_1_dfm_1_1)) | (~(lfst_exit_padding_outer_loop_lpi_1_dfm_1_1
      | lfst_exit_padding_outer_loop_lpi_1_dfm_0_1));
  assign padding_outer_loop_equal_tmp_7 = lfst_exit_padding_outer_loop_lpi_1_dfm_1_1
      & (~ lfst_exit_padding_outer_loop_lpi_1_dfm_0_1);
  assign row_loop_or_tmp_1 = col_loop_asn_sft_1_lpi_1_dfm_1_mx0 | row_loop_asn_sft_lpi_1_dfm_1_mx0;
  assign exitL_exit_col_loop_lpi_1_dfm_1 = exit_col_loop_lpi_1_dfm_1 | row_loop_asn_sft_lpi_1_dfm_1_mx0;
  assign col_loop_and_50_tmp_1 = exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_1
      & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0);
  assign in_window_loop_and_stg_3_10_sva_1 = in_window_loop_and_stg_2_2_sva_1 & (in_window_loop_acc_tmp[3]);
  assign in_window_loop_and_stg_2_2_sva_1 = in_window_loop_and_stg_1_2_sva_1 & (~
      (in_window_loop_acc_tmp[2]));
  assign in_window_loop_and_stg_2_4_sva_1 = in_window_loop_and_stg_1_0_sva_1 & (in_window_loop_acc_tmp[2]);
  assign in_window_loop_and_stg_3_14_sva_1 = in_window_loop_and_stg_2_6_sva_1 & (in_window_loop_acc_tmp[3]);
  assign in_window_loop_and_stg_2_6_sva_1 = in_window_loop_and_stg_1_2_sva_1 & (in_window_loop_acc_tmp[2]);
  assign in_window_loop_and_stg_1_2_sva_1 = (in_window_loop_acc_tmp[1:0]==2'b10);
  assign in_window_loop_and_stg_1_0_sva_1 = ~((in_window_loop_acc_tmp[1:0]!=2'b00));
  assign in_window_loop_and_stg_3_6_sva_1 = in_window_loop_and_stg_2_6_sva_1 & (~
      (in_window_loop_acc_tmp[3]));
  assign nl_line_feed_loop_line_feed_loop_conc_1_idiv_14_12_sva_1 = k_2_lpi_1 + conv_u2u_1_3(col_lpi_1_dfm_1[12]);
  assign line_feed_loop_line_feed_loop_conc_1_idiv_14_12_sva_1 = nl_line_feed_loop_line_feed_loop_conc_1_idiv_14_12_sva_1[2:0];
  assign nl_lines_write_loop_acc_12_psp_sva_1 = ({1'b1 , (lines_write_loop_acc_11_psp_sva_1[0])})
      + conv_u2u_1_2(~ (lines_write_loop_acc_11_psp_sva_1[1])) + conv_u2u_1_2(~ (lines_write_loop_acc_11_psp_sva_1[2]));
  assign lines_write_loop_acc_12_psp_sva_1 = nl_lines_write_loop_acc_12_psp_sva_1[1:0];
  assign nl_lines_write_loop_lines_write_loop_conc_idiv_14_12_sva_1 = k_3_lpi_1_mx0
      + conv_u2u_1_3(col_lpi_1_dfm_1[12]);
  assign lines_write_loop_lines_write_loop_conc_idiv_14_12_sva_1 = nl_lines_write_loop_lines_write_loop_conc_idiv_14_12_sva_1[2:0];
  assign nl_lines_write_loop_acc_17_nl = conv_u2u_2_3(line_feed_loop_acc_33) + conv_u2u_2_3(line_feed_loop_acc_35)
      + conv_u2u_1_3(~ (lines_write_loop_lines_write_loop_conc_idiv_14_12_sva_1[0]));
  assign lines_write_loop_acc_17_nl = nl_lines_write_loop_acc_17_nl[2:0];
  assign nl_lines_write_loop_acc_18_nl = conv_u2u_3_4(lines_write_loop_acc_17_nl)
      + conv_u2u_3_4(line_feed_loop_acc_39) + conv_u2u_1_4(lines_write_loop_lines_write_loop_conc_idiv_14_12_sva_1[1]);
  assign lines_write_loop_acc_18_nl = nl_lines_write_loop_acc_18_nl[3:0];
  assign nl_lines_write_loop_acc_10_psp_sva_1 = lines_write_loop_acc_18_nl + ({3'b100
      , (col_lpi_1_dfm_1[1])}) + conv_u2u_1_4(~ (lines_write_loop_lines_write_loop_conc_idiv_14_12_sva_1[2]));
  assign lines_write_loop_acc_10_psp_sva_1 = nl_lines_write_loop_acc_10_psp_sva_1[3:0];
  assign nl_lines_write_loop_acc_20_nl = conv_s2s_1_2(lines_write_loop_acc_10_psp_sva_1[1])
      + conv_u2s_1_2(lines_write_loop_acc_10_psp_sva_1[0]);
  assign lines_write_loop_acc_20_nl = nl_lines_write_loop_acc_20_nl[1:0];
  assign nl_lines_write_loop_acc_11_psp_sva_1 = conv_s2u_2_3(lines_write_loop_acc_20_nl)
      + conv_s2u_2_3(lines_write_loop_acc_10_psp_sva_1[3:2]);
  assign lines_write_loop_acc_11_psp_sva_1 = nl_lines_write_loop_acc_11_psp_sva_1[2:0];
  assign padding_outer_loop_or_230_tmp_1 = col_loop_asn_sft_1_lpi_1_dfm_1_mx0 | row_loop_asn_sft_lpi_1_dfm_1_mx0
      | padding_outer_loop_equal_tmp_4 | padding_outer_loop_equal_tmp_5;
  assign ColumnStatistic_ColumnStatistic_nor_3_cse_1 = ~(operator_4_false_3_acc_tmp_2
      | ColumnStatistic_mux_44_itm);
  assign padding_outer_loop_or_223_tmp_1 = row_loop_asn_sft_lpi_1_dfm_1_mx0 | padding_outer_loop_equal_tmp_4
      | padding_outer_loop_equal_tmp_5;
  assign gb_reg_eb_not_8_nl = ~ sfi_gb_reg_eb_lpi_1;
  assign k_4_1_0_lpi_1_dfm_1 = MUX_v_2_2_2(2'b00, k_4_1_0_lpi_1, gb_reg_eb_not_8_nl);
  assign operator_3_false_5_acc_tmp_2 = (k_1_0_sva_2[0]) ^ (k_1_0_sva_2[1]);
  assign nl_k_1_0_sva_2 = k_1_0_lpi_1 + 2'b01;
  assign k_1_0_sva_2 = nl_k_1_0_sva_2[1:0];
  assign padding_outer_loop_and_52_rgt = (~ padding_inter_loop_acc_13_itm_13_1) &
      padding_outer_loop_equal_tmp_7 & padding_outer_loop_padding_outer_loop_and_15_cse;
  assign padding_outer_loop_and_55_ssc_1 = (~ (k_4_1_0_lpi_1_dfm_1[1])) & padding_outer_loop_or_tmp_2;
  assign padding_outer_loop_and_56_ssc_1 = (k_4_1_0_lpi_1_dfm_1[1]) & padding_outer_loop_or_tmp_2;
  assign padding_outer_loop_and_100_tmp = (~ exit_row_loop_lpi_1_dfm_1) & padding_outer_loop_or_tmp_3;
  assign padding_outer_loop_and_101_tmp = exit_row_loop_lpi_1_dfm_1 & padding_outer_loop_or_tmp_3;
  assign padding_outer_loop_or_tmp_3 = (lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_0_1
      & (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_1_1)) | padding_outer_loop_padding_outer_loop_nor_2_cse_1;
  assign in_window_loop_and_108_tmp_1 = in_window_loop_and_stg_4_23_sva_1_1 & (in_window_loop_acc_decb_sva_1_5_4[1]);
  assign in_window_loop_and_stg_4_23_sva_1 = in_window_loop_and_stg_3_7_sva_1 & (in_window_loop_acc_tmp[4]);
  assign padding_outer_loop_and_99_tmp_1 = col_loop_asn_sft_lpi_1_dfm_1 & (~ col_loop_asn_sft_1_lpi_1_dfm_1)
      & (~(row_loop_asn_sft_lpi_1_dfm_1 | padding_outer_loop_equal_tmp_1 | padding_outer_loop_equal_tmp_3_1));
  assign in_window_loop_and_stg_4_7_sva_1 = in_window_loop_and_stg_3_7_sva_1 & (~
      (in_window_loop_acc_tmp[4]));
  assign in_window_loop_and_stg_4_8_sva_1 = in_window_loop_and_stg_3_8_sva_1 & (~
      (in_window_loop_acc_tmp[4]));
  assign in_window_loop_and_stg_3_8_sva_1 = in_window_loop_and_stg_2_0_sva_1 & (in_window_loop_acc_tmp[3]);
  assign in_window_loop_and_stg_3_9_sva_1 = in_window_loop_and_stg_2_1_sva_1 & (in_window_loop_acc_tmp[3]);
  assign in_window_loop_and_stg_4_11_sva_1 = in_window_loop_and_stg_3_11_sva_mx0w0
      & (~ (in_window_loop_acc_tmp[4]));
  assign in_window_loop_and_stg_4_12_sva_1 = in_window_loop_and_stg_3_12_sva_1 &
      (~ (in_window_loop_acc_tmp[4]));
  assign in_window_loop_and_stg_3_13_sva_1 = in_window_loop_and_stg_2_5_sva_1 & (in_window_loop_acc_tmp[3]);
  assign in_window_loop_and_stg_4_15_sva_1 = in_window_loop_and_stg_3_15_sva_1 &
      (~ (in_window_loop_acc_tmp[4]));
  assign in_window_loop_and_stg_3_15_sva_1 = in_window_loop_and_stg_2_7_sva_1 & (in_window_loop_acc_tmp[3]);
  assign in_window_loop_and_stg_3_0_sva_1 = in_window_loop_and_stg_2_0_sva_1 & (~
      (in_window_loop_acc_tmp[3]));
  assign in_window_loop_and_stg_4_17_sva_1 = in_window_loop_and_stg_3_1_sva_1 & (in_window_loop_acc_tmp[4]);
  assign in_window_loop_and_stg_3_1_sva_1 = in_window_loop_and_stg_2_1_sva_1 & (~
      (in_window_loop_acc_tmp[3]));
  assign in_window_loop_and_stg_4_19_sva_1 = in_window_loop_and_stg_3_3_sva_1 & (in_window_loop_acc_tmp[4]);
  assign in_window_loop_and_stg_3_3_sva_1 = in_window_loop_and_stg_2_3_sva_1 & (~
      (in_window_loop_acc_tmp[3]));
  assign in_window_loop_and_stg_4_21_sva_1 = in_window_loop_and_stg_3_5_sva_1 & (in_window_loop_acc_tmp[4]);
  assign in_window_loop_and_stg_3_5_sva_1 = in_window_loop_and_stg_2_5_sva_1 & (~
      (in_window_loop_acc_tmp[3]));
  assign padding_outer_loop_or_3_tmp_1 = padding_outer_loop_equal_tmp_7 | padding_outer_loop_equal_tmp_6;
  assign in_window_loop_and_stg_3_7_sva_1 = in_window_loop_and_stg_2_7_sva_1 & (~
      (in_window_loop_acc_tmp[3]));
  assign in_window_loop_and_stg_2_0_sva_1 = in_window_loop_and_stg_1_0_sva_1 & (~
      (in_window_loop_acc_tmp[2]));
  assign in_window_loop_and_stg_2_1_sva_1 = in_window_loop_and_stg_1_1_sva_1 & (~
      (in_window_loop_acc_tmp[2]));
  assign in_window_loop_and_stg_2_3_sva_1 = in_window_loop_and_stg_1_3_sva_1 & (~
      (in_window_loop_acc_tmp[2]));
  assign in_window_loop_and_stg_2_5_sva_1 = in_window_loop_and_stg_1_1_sva_1 & (in_window_loop_acc_tmp[2]);
  assign in_window_loop_and_stg_2_7_sva_1 = in_window_loop_and_stg_1_3_sva_1 & (in_window_loop_acc_tmp[2]);
  assign in_window_loop_and_stg_1_1_sva_1 = (in_window_loop_acc_tmp[1:0]==2'b01);
  assign in_window_loop_and_stg_1_3_sva_1 = (in_window_loop_acc_tmp[1:0]==2'b11);
  assign nl_operator_31_true_acc_2 = conv_u2u_30_31(~ (ColumnStatistic_sum_total_1_lpi_1_dfm_17[29:0]))
      + 31'b0000000000000000000000000000001;
  assign operator_31_true_acc_2 = nl_operator_31_true_acc_2[30:0];
  assign nl_line_feed_loop_acc_33 = conv_u2u_1_2(col_lpi_1_dfm_1[3]) + conv_u2u_1_2(~
      (col_lpi_1_dfm_1[4])) + conv_u2u_1_2(~ (col_lpi_1_dfm_1[10]));
  assign line_feed_loop_acc_33 = nl_line_feed_loop_acc_33[1:0];
  assign nl_line_feed_loop_acc_35 = conv_u2u_1_2(col_lpi_1_dfm_1[5]) + conv_u2u_1_2(~
      (col_lpi_1_dfm_1[6])) + conv_u2u_1_2(col_lpi_1_dfm_1[9]);
  assign line_feed_loop_acc_35 = nl_line_feed_loop_acc_35[1:0];
  assign nl_line_feed_loop_acc_36_nl = conv_u2u_1_2(col_lpi_1_dfm_1[7]) + conv_u2u_1_2(~
      (col_lpi_1_dfm_1[8])) + 2'b01;
  assign line_feed_loop_acc_36_nl = nl_line_feed_loop_acc_36_nl[1:0];
  assign nl_line_feed_loop_acc_39 = conv_u2u_2_3(line_feed_loop_acc_36_nl) + conv_u2u_1_3(~
      (col_lpi_1_dfm_1[2])) + conv_u2u_1_3(col_lpi_1_dfm_1[11]);
  assign line_feed_loop_acc_39 = nl_line_feed_loop_acc_39[2:0];
  assign or_56_cse = (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_1) | exitL_exitL_exit_padding_outer_loop_sva;
  assign and_92_nl = col_loop_if_if_col_loop_if_if_xor_sft_lpi_1 & ((~ lfst_exit_sawtooth_loop_1_lpi_1)
      | sfi_col_loop_if_if_col_loop_if_if_xor_lpi_1);
  assign mux_tmp_31 = MUX_s_1_2_2(and_92_nl, col_loop_if_if_col_loop_if_if_xor_1_tmp,
      or_67_cse);
  assign or_55_nl = exitL_exitL_exit_col_loop_lpi_1 | (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0)
      | exitL_exitL_exit_padding_outer_loop_sva;
  assign mux_19_nl = MUX_s_1_2_2(or_55_nl, exitL_exitL_exit_padding_outer_loop_sva,
      lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_1);
  assign and_tmp_6 = gb_reg_eb & col_loop_acc_2_itm_13_1 & row_loop_acc_3_itm_13_1
      & mux_19_nl;
  assign or_tmp_63 = exitL_exitL_exit_col_loop_lpi_1 | (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0);
  assign nand_37_cse = ~((~(col_loop_acc_2_itm_13_1 & row_loop_acc_3_itm_13_1)) &
      or_tmp_63);
  assign or_tmp_77 = lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0 | exitL_exitL_exit_padding_outer_loop_sva;
  assign or_tmp_134 = lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_2_1 | padding_inter_loop_slc_13_svs_st_2
      | col_loop_asn_sft_1_lpi_1_dfm_2;
  assign and_dcpl_138 = (lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_st_1_1_0[1])
      & (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_1_1);
  assign or_dcpl_68 = (~ main_stage_0_2) | (ColumnStatistic_i_1_2_1_lpi_1_dfm_1[0]);
  assign or_dcpl_69 = or_dcpl_68 | (ColumnStatistic_i_1_2_1_lpi_1_dfm_1[1]);
  assign or_tmp_138 = lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_st_1_2 |
      (lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_st_1_1_0!=2'b10) | (~ col_loop_asn_sft_lpi_1_dfm_1)
      | col_loop_asn_sft_1_lpi_1_dfm_1 | row_loop_asn_sft_lpi_1_dfm_1;
  assign or_208_nl = in_window_loop_and_stg_3_11_sva_1 | (~ lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_st_1_2)
      | (~ col_loop_if_and_itm_1) | col_loop_if_and_1_itm_1 | (~ asn_sft_lpi_1) |
      lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_1_0;
  assign mux_130_nl = MUX_s_1_2_2(or_tmp_138, or_208_nl, lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_1_1);
  assign or_207_nl = (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_1_1) | in_window_loop_and_stg_3_11_sva_1
      | (~ lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_st_1_2) | (~ col_loop_if_and_itm_1)
      | col_loop_if_and_1_itm_1 | (~ asn_sft_lpi_1) | lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_1_0;
  assign mux_tmp_130 = MUX_s_1_2_2(mux_130_nl, or_207_nl, ColumnStatistic_j_1_3_1_lpi_1_dfm_1_1_0[0]);
  assign nand_9_nl = ~(lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_1_1 & in_window_loop_and_stg_3_11_sva_1
      & lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_st_1_2 & col_loop_if_and_itm_1
      & (~ col_loop_if_and_1_itm_1) & asn_sft_lpi_1 & (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_1_0));
  assign or_211_nl = (~ in_window_loop_and_stg_3_11_sva_1) | (~ lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_st_1_2)
      | (~ col_loop_if_and_itm_1) | col_loop_if_and_1_itm_1 | (~ asn_sft_lpi_1) |
      lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_1_0;
  assign mux_132_nl = MUX_s_1_2_2(or_tmp_138, or_211_nl, lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_1_1);
  assign mux_tmp_132 = MUX_s_1_2_2(nand_9_nl, mux_132_nl, ColumnStatistic_j_1_3_1_lpi_1_dfm_1_1_0[0]);
  assign or_dcpl_73 = (~ main_stage_0_2) | (ColumnStatistic_i_1_2_1_lpi_1_dfm_1!=2'b01);
  assign or_dcpl_76 = or_dcpl_68 | (~ (ColumnStatistic_i_1_2_1_lpi_1_dfm_1[1]));
  assign or_dcpl_79 = (ColumnStatistic_i_1_2_1_lpi_1_dfm_1!=2'b00);
  assign or_dcpl_80 = lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_st_1_2 |
      lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_1_1;
  assign or_dcpl_81 = or_dcpl_80 | (ColumnStatistic_j_1_3_1_lpi_1_dfm_1_1_0[0]);
  assign or_dcpl_87 = col_loop_asn_sft_1_lpi_1_dfm_1 | row_loop_asn_sft_lpi_1_dfm_1
      | (~ col_loop_asn_sft_lpi_1_dfm_1) | (~((lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_st_1_1_0==2'b11)
      & main_stage_0_2));
  assign or_dcpl_89 = or_dcpl_80 | (~ (ColumnStatistic_j_1_3_1_lpi_1_dfm_1_1_0[0]));
  assign or_dcpl_92 = (ColumnStatistic_i_1_2_1_lpi_1_dfm_1!=2'b01);
  assign or_dcpl_97 = (ColumnStatistic_i_1_2_1_lpi_1_dfm_1!=2'b10);
  assign and_dcpl_141 = lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0 & (~ (lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_1_0[1]));
  assign and_dcpl_144 = (~ sfi_col_loop_if_land_lpi_1) & lfst_exitL_exit_sawtooth_loop_1_1_lpi_1;
  assign and_dcpl_147 = and_dcpl_141 & col_loop_if_if_col_loop_if_if_xor_sft_lpi_1;
  assign and_dcpl_148 = and_dcpl_147 & (~ sfi_col_loop_if_if_col_loop_if_if_xor_lpi_1)
      & lfst_exit_sawtooth_loop_1_lpi_1;
  assign and_dcpl_152 = lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0 & (lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_1_0[1]);
  assign and_dcpl_153 = and_dcpl_152 & (~ (lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_1_0[0]));
  assign and_dcpl_154 = and_dcpl_152 & (lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_1_0[0]);
  assign or_dcpl_146 = exitL_exitL_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1
      | exitL_exitL_exit_padding_outer_loop_sva;
  assign or_dcpl_148 = exitL_exitL_exit_col_loop_lpi_1 | (~ lfst_exitL_exit_col_loop_lpi_1);
  assign or_dcpl_149 = or_dcpl_148 | (~ lfst_exit_col_loop_lpi_1);
  assign or_dcpl_153 = (~ col_loop_if_if_col_loop_if_if_xor_sft_lpi_1) | sfi_col_loop_if_land_lpi_1
      | (~ lfst_exitL_exit_sawtooth_loop_1_1_lpi_1);
  assign and_tmp_24 = col_loop_acc_2_itm_13_1 & row_loop_acc_3_itm_13_1 & or_tmp_63;
  assign and_tmp_25 = col_loop_acc_2_itm_13_1 & (row_loop_acc_3_itm_13_1 | (~ or_tmp_63));
  assign or_tmp_153 = lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_1 | exitL_exitL_exit_col_loop_lpi_1
      | (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0) | exitL_exitL_exit_padding_outer_loop_sva;
  assign mux_160_nl = MUX_s_1_2_2((~ or_tmp_153), or_56_cse, and_258_cse);
  assign and_tmp_30 = gb_reg_eb & mux_160_nl;
  assign mux_166_nl = MUX_s_1_2_2((~ or_tmp_153), or_56_cse, row_loop_acc_3_itm_13_1);
  assign and_tmp_31 = gb_reg_eb & col_loop_acc_2_itm_13_1 & mux_166_nl;
  assign nor_85_nl = ~(lfst_exitL_exit_col_loop_lpi_1 | exitL_exitL_exit_col_loop_lpi_1);
  assign mux_tmp_169 = MUX_s_1_2_2(nor_85_nl, or_dcpl_148, row_loop_acc_3_itm_13_1);
  assign or_dcpl_199 = ~(main_stage_0_2 & padding_outer_loop_and_171_itm_1);
  assign dst_rsci_idat_mx0c0 = main_stage_0_3 & (~ col_loop_asn_sft_1_lpi_1_dfm_2)
      & (~ padding_inter_loop_slc_13_svs_st_2) & (lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_st_2_1_0==2'b00)
      & lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_st_2_2 & exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_st_2
      & col_loop_if_if_1_col_loop_if_if_1_or_itm_2 & (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_2_1)
      & asn_sft_lpi_1_st_2;
  assign or_197_nl = (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_2_1) | col_loop_if_and_itm_2
      | lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_2_0;
  assign mux_129_nl = MUX_s_1_2_2(or_tmp_134, or_197_nl, asn_sft_lpi_1_st_2);
  assign dst_rsci_idat_mx0c1 = (~ mux_129_nl) & main_stage_0_3;
  assign dst_rsci_idat_mx0c2 = main_stage_0_3 & (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_2_0)
      & padding_inter_loop_slc_13_svs_st_2 & (~ col_loop_if_and_1_itm_2) & col_loop_if_and_itm_2
      & lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_2_1 & asn_sft_lpi_1_st_2;
  assign col_loop_if_if_col_loop_if_if_xor_1_tmp = ~((row_lpi_1_dfm_1[0]) ^ (col_lpi_1_dfm_1[0])
      ^ bGreen_lpi_1_dfm);
  assign gb_lines_rsc_0_0_i_radr_d_pff = abs_rawData_1_sva_1;
  assign gb_lines_rsc_0_0_i_d_d_pff = MUX_v_12_6_2(gb_block_1_6_lpi_1_mx0, gb_block_2_6_lpi_1_mx0,
      gb_block_3_6_lpi_1_mx0, gb_block_4_6_lpi_1_mx0, gb_block_5_6_lpi_1_mx0, pixel_in_lpi_1_dfm_mx0,
      k_3_lpi_1);
  assign gb_lines_rsc_0_0_i_we_d_pff = gb_lines_rsc_0_0_i_we_d_iff;
  assign gb_lines_rsc_0_0_i_re_d_pff = gb_lines_rsc_0_0_i_re_d_iff;
  assign gb_lines_rsc_0_1_i_we_d_pff = gb_lines_rsc_0_1_i_we_d_iff;
  assign gb_lines_rsc_0_1_i_re_d_pff = gb_lines_rsc_0_1_i_re_d_iff;
  assign gb_lines_rsc_0_2_i_we_d_pff = gb_lines_rsc_0_2_i_we_d_iff;
  assign gb_lines_rsc_0_2_i_re_d_pff = gb_lines_rsc_0_2_i_re_d_iff;
  assign gb_lines_rsc_0_3_i_we_d_pff = gb_lines_rsc_0_3_i_we_d_iff;
  assign gb_lines_rsc_0_3_i_re_d_pff = gb_lines_rsc_0_3_i_re_d_iff;
  assign gb_lines_rsc_0_4_i_we_d_pff = gb_lines_rsc_0_4_i_we_d_iff;
  assign gb_lines_rsc_0_4_i_re_d_pff = gb_lines_rsc_0_4_i_re_d_iff;
  assign gb_lines_rsc_0_5_i_we_d_pff = gb_lines_rsc_0_5_i_we_d_iff;
  assign gb_lines_rsc_0_5_i_re_d_pff = gb_lines_rsc_0_5_i_re_d_iff;
  assign and_dcpl_181 = (~ (lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_1_0[0]))
      & lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0;
  assign and_dcpl_182 = (lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_1_0[0]) &
      lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0;
  assign and_280_cse = col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1 & (ColumnStatistic_j_1_3_1_lpi_1_dfm_1_1_0==2'b00);
  assign and_282_cse = col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1 & (ColumnStatistic_j_1_3_1_lpi_1_dfm_1_1_0==2'b11);
  assign xor_8_cse = (ColumnStatistic_j_1_3_1_lpi_1_dfm_1_1_0[1]) ^ (ColumnStatistic_j_1_3_1_lpi_1_dfm_1_1_0[0]);
  assign and_283_cse = xor_8_cse & col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1;
  assign and_dcpl_211 = col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1 & (~ (ColumnStatistic_j_1_3_1_lpi_1_dfm_1_1_0[1]));
  assign and_dcpl_212 = and_dcpl_211 & (~ (ColumnStatistic_j_1_3_1_lpi_1_dfm_1_1_0[0]))
      & (~ (z_out_11[12]));
  assign and_dcpl_214 = and_dcpl_211 & (~ (ColumnStatistic_j_1_3_1_lpi_1_dfm_1_1_0[0]))
      & (z_out_11[12]);
  assign and_dcpl_216 = col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1 & (ColumnStatistic_j_1_3_1_lpi_1_dfm_1_1_0[1]);
  assign and_dcpl_217 = and_dcpl_216 & (ColumnStatistic_j_1_3_1_lpi_1_dfm_1_1_0[0])
      & (~ (z_out_11[12]));
  assign and_dcpl_219 = and_dcpl_216 & (ColumnStatistic_j_1_3_1_lpi_1_dfm_1_1_0[0])
      & (z_out_11[12]);
  assign and_dcpl_221 = xor_8_cse & col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1
      & (~ (z_out_11[12]));
  assign and_dcpl_223 = xor_8_cse & col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1
      & (z_out_11[12]);
  assign and_dcpl_224 = ~(col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1 | (z_out_11[12]));
  assign and_dcpl_225 = (~ col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1) & (z_out_11[12]);
  assign and_dcpl_226 = col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1 & (~ (z_out_15[12]));
  assign and_dcpl_227 = col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1 & (z_out_15[12]);
  assign and_dcpl_228 = ~(col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1 | (z_out_15[12]));
  assign and_dcpl_229 = (~ col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1) & (z_out_15[12]);
  assign and_dcpl_230 = col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1 & (~ (z_out_14[12]));
  assign and_dcpl_231 = col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1 & (z_out_14[12]);
  assign and_dcpl_232 = ~(col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1 | (z_out_14[12]));
  assign and_dcpl_233 = (~ col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1) & (z_out_14[12]);
  assign sawtooth_loop_2_else_else_if_mux_6_cse = MUX_v_12_2_2(gb_block_4_4_lpi_1,
      gb_block_4_5_lpi_1, col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1);
  assign sawtooth_loop_2_else_else_if_mux_7_cse = MUX_v_12_2_2(gb_block_4_2_lpi_1,
      gb_block_4_3_lpi_1, col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1);
  assign sawtooth_loop_2_else_else_if_mux_8_cse = MUX_v_12_2_2(gb_block_4_0_lpi_1,
      gb_block_4_1_lpi_1, col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1);
  assign sawtooth_loop_2_else_else_if_mux_10_cse = MUX_v_12_2_2(gb_block_2_2_lpi_1,
      gb_block_2_3_lpi_1, col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1);
  assign sawtooth_loop_2_else_else_if_mux_11_cse = MUX_v_12_2_2(gb_block_2_0_lpi_1,
      gb_block_2_1_lpi_1, col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1);
  assign sawtooth_loop_2_else_else_if_mux_12_cse = MUX_v_12_2_2(gb_block_1_5_lpi_1,
      gb_block_1_6_lpi_1_mx0, col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1);
  assign and_dcpl_253 = lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_2 & (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_1);
  assign and_dcpl_256 = col_loop_if_if_col_loop_if_if_xor_sft_lpi_1 & (~ sfi_col_loop_if_land_lpi_1)
      & lfst_exitL_exit_sawtooth_loop_1_1_lpi_1 & and_dcpl_253;
  assign and_dcpl_257 = or_dcpl_153 & and_dcpl_253;
  assign nor_135_cse = ~(lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_2 | lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_1);
  assign nand_39_itm = ~(lfst_exitL_exit_col_loop_lpi_1 & lfst_exit_col_loop_lpi_1);
  assign or_dcpl_230 = (lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_1_0[0]) | (~
      lfst_exitL_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1) | sfi_exit_col_loop_lpi_1
      | (~ lfst_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1) | sfi_gb_reg_eb_1_lpi_1
      | (lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_1_0[1]) | (~ lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_2)
      | nand_39_itm | exitL_exitL_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1
      | exitL_exitL_exit_col_loop_lpi_1 | (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0)
      | exitL_exitL_exit_padding_outer_loop_sva;
  assign and_dcpl_274 = (lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_1_0==2'b10)
      & lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0;
  assign and_dcpl_277 = (lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_1_0==2'b00)
      & lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0;
  assign and_dcpl_284 = col_loop_if_if_col_loop_if_if_xor_sft_lpi_1 & (~ sfi_col_loop_if_land_lpi_1)
      & lfst_exitL_exit_sawtooth_loop_1_1_lpi_1;
  assign and_dcpl_294 = lfst_exitL_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1
      & (~ sfi_exit_col_loop_lpi_1) & lfst_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1
      & (~ sfi_gb_reg_eb_1_lpi_1) & lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_2
      & lfst_exitL_exit_col_loop_lpi_1 & lfst_exit_col_loop_lpi_1 & (~ exitL_exitL_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1)
      & (~ exitL_exitL_exit_col_loop_lpi_1) & lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0
      & (~ exitL_exitL_exit_padding_outer_loop_sva);
  assign and_dcpl_307 = lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_2 & lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0;
  assign and_dcpl_310 = col_loop_if_if_col_loop_if_if_xor_sft_lpi_1 & (~ sfi_col_loop_if_land_lpi_1)
      & lfst_exitL_exit_sawtooth_loop_1_1_lpi_1 & and_dcpl_307;
  assign and_dcpl_311 = or_dcpl_153 & and_dcpl_307;
  assign and_dcpl_312 = (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0) & lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_1;
  assign line_feed_loop_mux1h_12_cse = MUX1HOT_s_1_3_2((line_feed_loop_line_feed_loop_conc_1_idiv_14_12_sva_1[1]),
      (lines_write_loop_lines_write_loop_conc_idiv_14_12_sva_1[1]), (z_out_47[1]),
      {and_dcpl_181 , and_dcpl_182 , (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0)});
  assign line_feed_loop_line_feed_loop_mux_11_cse = MUX_s_1_2_2((i_lpi_1[6]), (col_lpi_1_dfm_1[6]),
      lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0);
  assign line_feed_loop_line_feed_loop_mux_12_cse = MUX_s_1_2_2((i_lpi_1[5]), (col_lpi_1_dfm_1[5]),
      lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0);
  assign line_feed_loop_mux1h_15_cse = MUX1HOT_s_1_3_2((~ (line_feed_loop_line_feed_loop_conc_1_idiv_14_12_sva_1[2])),
      (~ (lines_write_loop_lines_write_loop_conc_idiv_14_12_sva_1[2])), (~ (z_out_47[2])),
      {and_dcpl_181 , and_dcpl_182 , (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0)});
  assign line_feed_loop_line_feed_loop_mux_14_cse = MUX_s_1_2_2((~ (i_lpi_1[8])),
      (~ (col_lpi_1_dfm_1[8])), lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0);
  assign line_feed_loop_line_feed_loop_mux_18_cse = MUX_s_1_2_2((i_lpi_1[7]), (col_lpi_1_dfm_1[7]),
      lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0);
  assign line_feed_loop_line_feed_loop_mux_21_cse = MUX_s_1_2_2((~ (i_lpi_1[10])),
      (~ (col_lpi_1_dfm_1[10])), lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0);
  assign line_feed_loop_mux1h_74_cse = MUX1HOT_s_1_3_2((~ (line_feed_loop_line_feed_loop_conc_1_idiv_14_12_sva_1[0])),
      (~ (lines_write_loop_lines_write_loop_conc_idiv_14_12_sva_1[0])), (~ (z_out_47[0])),
      {and_dcpl_181 , and_dcpl_182 , (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0)});
  assign line_feed_loop_line_feed_loop_mux_25_cse = MUX_s_1_2_2((i_lpi_1[11]), (col_lpi_1_dfm_1[11]),
      lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0);
  assign line_feed_loop_line_feed_loop_mux_31_cse = MUX_s_1_2_2((i_lpi_1[9]), (col_lpi_1_dfm_1[9]),
      lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0);
  assign sawtooth_loop_2_else_else_if_mux_18_itm = MUX_v_12_2_2(abs_rawData_1_8_sva_1,
      abs_rawData_1_4_sva_1, col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1);
  assign operator_4_false_12_nor_2_itm = ~(nor_135_cse | lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_1);
  assign operator_4_false_12_or_itm = nor_135_cse | lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_1;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      gb_block_4_6_lpi_1 <= 12'b000000000000;
      gb_block_0_6_lpi_1 <= 12'b000000000000;
      gb_block_5_6_lpi_1 <= 12'b000000000000;
      gb_block_1_6_lpi_1 <= 12'b000000000000;
      reg_dst_rsci_oswt_cse <= 1'b0;
      gb_block_2_6_lpi_1 <= 12'b000000000000;
      gb_block_3_6_lpi_1 <= 12'b000000000000;
      gb_block_3_3_lpi_1 <= 12'b000000000000;
      in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1 <= 12'b000000000000;
      line_feed_loop_mul_sdt_2_0_sva_2_1_0 <= 2'b00;
      col_lpi_1_dfm_2_0 <= 1'b0;
      line_feed_loop_acc_9_psp_2 <= 2'b00;
      ColumnStatistic_sum_total_ColumnStatistic_nand_itm_1 <= 30'b000000000000000000000000000000;
      exit_sawtooth_loop_1_pmx_lpi_1_dfm_st_2 <= 1'b0;
      col_loop_if_if_1_col_loop_if_if_1_or_itm_2 <= 1'b0;
      exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_st_2 <= 1'b0;
      col_loop_if_not_56_itm_2 <= 1'b0;
      col_loop_if_and_itm_2 <= 1'b0;
      col_loop_if_and_1_itm_2 <= 1'b0;
      col_loop_if_asn_sft_lpi_1_st_2 <= 1'b0;
      line_feed_loop_line_feed_loop_xnor_psp_sva_1 <= 1'b0;
      in_window_loop_and_stg_4_16_sva_2 <= 1'b0;
      in_window_loop_acc_decb_sva_2_5 <= 1'b0;
      in_window_loop_and_stg_4_9_sva_2 <= 1'b0;
      in_window_loop_and_stg_4_20_sva_2 <= 1'b0;
      in_window_loop_and_stg_4_13_sva_2 <= 1'b0;
      lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_st_2_2 <= 1'b0;
      lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_st_2_1_0 <= 2'b00;
      col_loop_asn_sft_lpi_1_dfm_2 <= 1'b0;
      col_loop_asn_sft_1_lpi_1_dfm_2 <= 1'b0;
      greenbalance2_label0_mux_itm_1 <= 12'b000000000000;
      padding_inter_loop_slc_13_svs_st_2 <= 1'b0;
      asn_sft_lpi_1_st_2 <= 1'b0;
      sawtooth_loop_1_or_tmp_2 <= 1'b0;
      sawtooth_loop_1_equal_tmp_2 <= 1'b0;
      sawtooth_loop_1_equal_tmp_1_2 <= 1'b0;
      sawtooth_loop_1_equal_tmp_2_2 <= 1'b0;
      sawtooth_loop_1_nor_tmp_2 <= 1'b0;
      in_window_loop_and_66_tmp_1 <= 1'b0;
      line_feed_loop_and_22_tmp_1 <= 1'b0;
      padding_outer_loop_and_131_itm_2 <= 1'b0;
      in_window_loop_and_67_tmp_1 <= 1'b0;
      row_loop_asn_sft_lpi_1_dfm_2 <= 1'b0;
      padding_outer_loop_equal_tmp_2 <= 1'b0;
      padding_outer_loop_equal_tmp_3_2 <= 1'b0;
      lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_2_1 <= 1'b0;
      lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_2_0 <= 1'b0;
      reg_gb_lines_rsc_0_0_i_oswt_cse <= 1'b0;
      reg_gb_lines_rsc_0_1_i_oswt_cse <= 1'b0;
      reg_gb_lines_rsc_0_2_i_oswt_cse <= 1'b0;
      reg_gb_lines_rsc_0_3_i_oswt_cse <= 1'b0;
      reg_gb_lines_rsc_0_4_i_oswt_cse <= 1'b0;
      reg_gb_lines_rsc_0_5_i_oswt_cse <= 1'b0;
      gb_block_1_0_lpi_1 <= 12'b000000000000;
      gb_block_2_1_lpi_1 <= 12'b000000000000;
      gb_block_3_0_lpi_1 <= 12'b000000000000;
      gb_block_4_1_lpi_1 <= 12'b000000000000;
      gb_block_5_0_lpi_1 <= 12'b000000000000;
      gb_block_6_1_lpi_1 <= 12'b000000000000;
      k_3_lpi_1 <= 3'b000;
      gb_block_0_1_lpi_1 <= 12'b000000000000;
      gb_block_0_3_lpi_1 <= 12'b000000000000;
      gb_block_0_5_lpi_1 <= 12'b000000000000;
      gb_block_2_3_lpi_1 <= 12'b000000000000;
      gb_block_2_5_lpi_1 <= 12'b000000000000;
      gb_block_4_3_lpi_1 <= 12'b000000000000;
      gb_block_4_5_lpi_1 <= 12'b000000000000;
      gb_block_5_2_lpi_1 <= 12'b000000000000;
      gb_block_6_5_lpi_1 <= 12'b000000000000;
      abs_rawData_1_sva_1 <= 12'b000000000000;
      ColumnStatistic_sum_total_1_lpi_1_dfm_1 <= 31'b0000000000000000000000000000000;
      ColumnStatistic_count_total_lpi_1_dfm_1 <= 6'b000000;
      sawtooth_loop_2_if_if_1_acc_5_itm_1_1 <= 13'b0000000000000;
      abs_rawData_2_3_sva_1 <= 12'b000000000000;
      ColumnStatistic_i_1_2_1_lpi_1_dfm_1 <= 2'b00;
      operator_4_false_12_acc_itm_1 <= 5'b00000;
      operator_4_false_9_acc_itm_1_2_0 <= 3'b000;
      sawtooth_loop_2_else_else_if_acc_itm_1 <= 3'b000;
      ColumnStatistic_j_1_3_1_lpi_1_dfm_1_1_0 <= 2'b00;
      exit_sawtooth_loop_1_pmx_lpi_1_dfm_st_1 <= 1'b0;
      col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1 <= 1'b0;
      sawtooth_loop_2_if_slc_12_1_svs_1 <= 1'b0;
      col_loop_if_asn_sft_lpi_1_st_1 <= 1'b0;
      lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_st_1_2 <= 1'b0;
      lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_st_1_1_0 <= 2'b00;
      sfi_exit_col_loop_lpi_1_dfm_1_1 <= 1'b0;
      col_loop_asn_sft_lpi_1_dfm_1 <= 1'b0;
      sawtooth_loop_1_or_tmp_1_1 <= 1'b0;
      sawtooth_loop_1_equal_tmp_2_1 <= 1'b0;
      sawtooth_loop_1_nor_tmp_1_1 <= 1'b0;
      col_loop_asn_sft_1_lpi_1_dfm_1 <= 1'b0;
      k_3_lpi_1_dfm_1 <= 3'b000;
      sawtooth_loop_1_equal_tmp_1 <= 1'b0;
      k_3_sva_1_1 <= 3'b000;
      sawtooth_loop_1_equal_tmp_1_1 <= 1'b0;
      row_loop_asn_sft_lpi_1_dfm_1 <= 1'b0;
      padding_outer_loop_equal_tmp_1 <= 1'b0;
      padding_outer_loop_equal_tmp_3_1 <= 1'b0;
      padding_outer_loop_and_147_itm_1 <= 1'b0;
      padding_outer_loop_and_140_itm_1 <= 1'b0;
      padding_outer_loop_and_135_itm_1 <= 1'b0;
      padding_outer_loop_and_128_itm_1 <= 1'b0;
      padding_outer_loop_and_123_itm_1 <= 1'b0;
      padding_outer_loop_and_116_itm_1 <= 1'b0;
      lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_1_1 <= 1'b0;
      lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_1_0 <= 1'b0;
      reg_src_rsci_oswt_cse <= 1'b0;
      ColumnStatistic_j_1_3_1_lpi_1_1_0 <= 2'b00;
      sfi_gb_reg_eb_lpi_1 <= 1'b0;
      lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_1 <= 1'b0;
      exitL_exitL_exit_padding_outer_loop_sva <= 1'b1;
      lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0 <= 1'b0;
      row_lpi_1 <= 13'b0000000000000;
      main_stage_0_2 <= 1'b0;
      main_stage_0_3 <= 1'b0;
      ColumnStatistic_sum_total_1_lpi_1 <= 31'b0000000000000000000000000000000;
      ColumnStatistic_count_total_lpi_1 <= 6'b000000;
      line_feed_loop_mul_sdt_2_0_sva_1 <= 3'b000;
      in_window_loop_and_stg_3_2_sva_1_1 <= 1'b0;
      in_window_loop_acc_decb_sva_1_5_4 <= 2'b00;
      in_window_loop_and_stg_3_11_sva_1 <= 1'b0;
      greenbalance2_label0_acc_cse_sva_1 <= 2'b00;
      padding_outer_loop_and_171_itm_1 <= 1'b0;
      padding_outer_loop_and_151_itm_1 <= 1'b0;
      padding_outer_loop_and_150_itm_1 <= 1'b0;
      padding_outer_loop_and_149_itm_1 <= 1'b0;
      padding_outer_loop_and_148_itm_1 <= 1'b0;
      padding_outer_loop_and_146_itm_1 <= 1'b0;
      padding_outer_loop_and_145_itm_1 <= 1'b0;
      padding_outer_loop_and_144_itm_1 <= 1'b0;
      padding_outer_loop_and_143_itm_1 <= 1'b0;
      padding_outer_loop_and_142_itm_1 <= 1'b0;
      padding_outer_loop_and_141_itm_1 <= 1'b0;
      padding_outer_loop_and_139_itm_1 <= 1'b0;
      padding_outer_loop_and_138_itm_1 <= 1'b0;
      padding_outer_loop_and_137_itm_1 <= 1'b0;
      padding_outer_loop_and_136_itm_1 <= 1'b0;
      padding_outer_loop_and_134_itm_1 <= 1'b0;
      padding_outer_loop_and_133_itm_1 <= 1'b0;
      padding_outer_loop_and_132_itm_1 <= 1'b0;
      padding_outer_loop_and_130_itm_1 <= 1'b0;
      padding_outer_loop_and_129_itm_1 <= 1'b0;
      padding_outer_loop_and_127_itm_1 <= 1'b0;
      padding_outer_loop_and_126_itm_1 <= 1'b0;
      padding_outer_loop_and_125_itm_1 <= 1'b0;
      padding_outer_loop_and_124_itm_1 <= 1'b0;
      padding_outer_loop_and_122_itm_1 <= 1'b0;
      padding_outer_loop_and_121_itm_1 <= 1'b0;
      padding_outer_loop_and_120_itm_1 <= 1'b0;
      padding_outer_loop_and_119_itm_1 <= 1'b0;
      padding_outer_loop_and_118_itm_1 <= 1'b0;
      padding_outer_loop_and_117_itm_1 <= 1'b0;
      padding_outer_loop_and_115_itm_1 <= 1'b0;
      padding_outer_loop_and_114_itm_1 <= 1'b0;
      padding_outer_loop_and_113_itm_1 <= 1'b0;
      padding_outer_loop_and_112_itm_1 <= 1'b0;
      padding_outer_loop_and_111_itm_1 <= 1'b0;
      padding_outer_loop_and_110_itm_1 <= 1'b0;
      padding_outer_loop_and_131_itm_1 <= 1'b0;
      in_window_loop_and_stg_4_13_sva_1_1 <= 1'b0;
      in_window_loop_and_stg_4_20_sva_1_1 <= 1'b0;
      in_window_loop_and_stg_4_16_sva_1_1 <= 1'b0;
      in_window_loop_and_stg_4_9_sva_1_1 <= 1'b0;
      col_loop_if_if_1_col_loop_if_if_1_or_itm_1 <= 1'b0;
      exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_st_1 <= 1'b0;
      col_loop_if_and_1_itm_1 <= 1'b0;
      col_loop_if_and_itm_1 <= 1'b0;
      col_loop_if_not_56_itm_1 <= 1'b0;
      in_window_loop_and_stg_4_23_sva_1_1 <= 1'b0;
      operator_3_false_2_slc_operator_3_false_2_acc_2_svs_1 <= 1'b0;
    end
    else if ( core_wen ) begin
      gb_block_4_6_lpi_1 <= gb_block_4_6_lpi_1_mx0;
      gb_block_0_6_lpi_1 <= gb_block_0_6_lpi_1_mx0;
      gb_block_5_6_lpi_1 <= gb_block_5_6_lpi_1_mx0;
      gb_block_1_6_lpi_1 <= gb_block_1_6_lpi_1_mx0;
      reg_dst_rsci_oswt_cse <= ~(mux_128_nl | (~ main_stage_0_3));
      gb_block_2_6_lpi_1 <= gb_block_2_6_lpi_1_mx0;
      gb_block_3_6_lpi_1 <= gb_block_3_6_lpi_1_mx0;
      gb_block_3_3_lpi_1 <= gb_block_3_3_lpi_1_mx0;
      in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1 <= in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1;
      line_feed_loop_mul_sdt_2_0_sva_2_1_0 <= line_feed_loop_mul_sdt_2_0_sva_1[1:0];
      col_lpi_1_dfm_2_0 <= MUX_s_1_2_2((ColumnStatistic_j_1_3_1_lpi_1_dfm_1_1_0[0]),
          in_window_loop_and_stg_3_11_sva_1, lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_1_1);
      line_feed_loop_acc_9_psp_2 <= ColumnStatistic_i_1_2_1_lpi_1_dfm_1;
      ColumnStatistic_sum_total_ColumnStatistic_nand_itm_1 <= ~(MUX_v_30_2_2(30'b000000000000000000000000000000,
          ColumnStatistic_mux_nl, ColumnStatistic_if_1_not_8_nl));
      exit_sawtooth_loop_1_pmx_lpi_1_dfm_st_2 <= MUX_s_1_2_2(exit_sawtooth_loop_1_pmx_lpi_1_dfm_st_1,
          col_loop_if_not_56_itm_1, lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_1_1);
      col_loop_if_if_1_col_loop_if_if_1_or_itm_2 <= col_loop_if_if_1_col_loop_if_if_1_or_itm_1;
      exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_st_2 <= MUX_s_1_2_2(exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_st_1,
          exit_sawtooth_loop_1_pmx_lpi_1_dfm_st_1, lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_1_1);
      col_loop_if_not_56_itm_2 <= MUX_s_1_2_2(col_loop_if_not_56_itm_1, col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1,
          lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_1_1);
      col_loop_if_and_itm_2 <= MUX_s_1_2_2(col_loop_if_and_itm_1, line_feed_loop_line_feed_loop_and_4_nl,
          and_dcpl_138);
      col_loop_if_and_1_itm_2 <= col_loop_if_and_1_itm_1;
      col_loop_if_asn_sft_lpi_1_st_2 <= MUX_s_1_2_2(col_loop_if_asn_sft_lpi_1_st_1,
          col_loop_if_and_itm_1, and_dcpl_138);
      line_feed_loop_line_feed_loop_xnor_psp_sva_1 <= line_feed_loop_line_feed_loop_xnor_tmp;
      in_window_loop_and_stg_4_16_sva_2 <= in_window_loop_and_stg_4_16_sva_1_1;
      in_window_loop_acc_decb_sva_2_5 <= in_window_loop_acc_decb_sva_1_5_4[1];
      in_window_loop_and_stg_4_9_sva_2 <= in_window_loop_and_stg_4_9_sva_1_1;
      in_window_loop_and_stg_4_20_sva_2 <= in_window_loop_and_stg_4_20_sva_1_1;
      in_window_loop_and_stg_4_13_sva_2 <= in_window_loop_and_stg_4_13_sva_1_1;
      lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_st_2_2 <= MUX_s_1_2_2(lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_st_1_2,
          exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_st_1, lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_1_1);
      lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_st_2_1_0 <= MUX_v_2_2_2(lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_st_1_1_0,
          ColumnStatistic_i_1_2_1_lpi_1_dfm_1, lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_1_1);
      col_loop_asn_sft_lpi_1_dfm_2 <= col_loop_asn_sft_lpi_1_dfm_1;
      col_loop_asn_sft_1_lpi_1_dfm_2 <= col_loop_asn_sft_1_lpi_1_dfm_1;
      greenbalance2_label0_mux_itm_1 <= MUX1HOT_v_12_5_2(gb_block_3_4_lpi_1, gb_block_3_5_lpi_1,
          gb_block_3_6_lpi_1_mx0, src_rsci_idat_mxwt, pixel_in_lpi_1, {greenbalance2_label0_and_nl
          , greenbalance2_label0_and_1_nl , greenbalance2_label0_and_2_nl , and_168_nl
          , nor_129_nl});
      padding_inter_loop_slc_13_svs_st_2 <= MUX_s_1_2_2(row_loop_asn_sft_lpi_1_dfm_1,
          lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_st_1_2, lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_1_1);
      asn_sft_lpi_1_st_2 <= MUX_s_1_2_2(col_loop_asn_sft_lpi_1_dfm_1, asn_sft_lpi_1,
          lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_1_1);
      sawtooth_loop_1_or_tmp_2 <= sawtooth_loop_1_or_tmp_1_1;
      sawtooth_loop_1_equal_tmp_2 <= sawtooth_loop_1_equal_tmp_1;
      sawtooth_loop_1_equal_tmp_1_2 <= sawtooth_loop_1_equal_tmp_1_1;
      sawtooth_loop_1_equal_tmp_2_2 <= sawtooth_loop_1_equal_tmp_2_1;
      sawtooth_loop_1_nor_tmp_2 <= sawtooth_loop_1_nor_tmp_1_1;
      in_window_loop_and_66_tmp_1 <= in_window_loop_and_stg_3_2_sva_1_1 & (in_window_loop_acc_decb_sva_1_5_4==2'b10);
      line_feed_loop_and_22_tmp_1 <= (line_feed_loop_mul_sdt_2_0_sva_1[1:0]==2'b01)
          & (~ line_feed_loop_line_feed_loop_xnor_tmp);
      padding_outer_loop_and_131_itm_2 <= padding_outer_loop_and_131_itm_1;
      in_window_loop_and_67_tmp_1 <= in_window_loop_and_stg_3_11_sva_1 & (in_window_loop_acc_decb_sva_1_5_4==2'b01);
      row_loop_asn_sft_lpi_1_dfm_2 <= row_loop_asn_sft_lpi_1_dfm_1;
      padding_outer_loop_equal_tmp_2 <= padding_outer_loop_equal_tmp_1;
      padding_outer_loop_equal_tmp_3_2 <= padding_outer_loop_equal_tmp_3_1;
      lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_2_1 <= lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_1_1;
      lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_2_0 <= lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_1_0;
      reg_gb_lines_rsc_0_0_i_oswt_cse <= line_feed_loop_line_feed_loop_nor_14_rmff;
      reg_gb_lines_rsc_0_1_i_oswt_cse <= line_feed_loop_line_feed_loop_nor_13_rmff;
      reg_gb_lines_rsc_0_2_i_oswt_cse <= line_feed_loop_line_feed_loop_nor_12_rmff;
      reg_gb_lines_rsc_0_3_i_oswt_cse <= line_feed_loop_line_feed_loop_nor_11_rmff;
      reg_gb_lines_rsc_0_4_i_oswt_cse <= line_feed_loop_line_feed_loop_nor_10_rmff;
      reg_gb_lines_rsc_0_5_i_oswt_cse <= line_feed_loop_line_feed_loop_nor_9_rmff;
      gb_block_1_0_lpi_1 <= gb_block_1_0_lpi_1_mx0;
      gb_block_2_1_lpi_1 <= gb_block_2_1_lpi_1_mx0;
      gb_block_3_0_lpi_1 <= gb_block_3_0_lpi_1_mx0;
      gb_block_4_1_lpi_1 <= gb_block_4_1_lpi_1_mx0;
      gb_block_5_0_lpi_1 <= gb_block_5_0_lpi_1_mx0;
      gb_block_6_1_lpi_1 <= gb_block_6_1_lpi_1_mx0;
      k_3_lpi_1 <= k_3_lpi_1_mx0;
      gb_block_0_1_lpi_1 <= gb_block_0_1_lpi_1_mx0;
      gb_block_0_3_lpi_1 <= gb_block_0_3_lpi_1_mx0;
      gb_block_0_5_lpi_1 <= gb_block_0_5_lpi_1_mx0;
      gb_block_2_3_lpi_1 <= gb_block_2_3_lpi_1_mx0;
      gb_block_2_5_lpi_1 <= gb_block_2_5_lpi_1_mx0;
      gb_block_4_3_lpi_1 <= gb_block_4_3_lpi_1_mx0;
      gb_block_4_5_lpi_1 <= gb_block_4_5_lpi_1_mx0;
      gb_block_5_2_lpi_1 <= gb_block_5_2_lpi_1_mx0;
      gb_block_6_5_lpi_1 <= gb_block_6_5_lpi_1_mx0;
      abs_rawData_1_sva_1 <= MUX1HOT_v_12_7_2(abs_rawData_1_sva_mx0w0, gb_block_0_5_lpi_1_mx0,
          gb_block_2_5_lpi_1_mx0, gb_block_4_5_lpi_1_mx0, sawtooth_loop_2_else_else_sawtooth_loop_2_else_else_if_2_mux_nl,
          line_feed_loop_acc_48_nl, ({7'b0000000 , z_out}), {and_171_nl , sawtooth_loop_2_if_if_and_nl
          , sawtooth_loop_2_if_if_and_1_nl , sawtooth_loop_2_if_if_and_2_nl , and_180_nl
          , sawtooth_loop_2_if_if_or_nl , and_184_nl});
      ColumnStatistic_sum_total_1_lpi_1_dfm_1 <= MUX_v_31_2_2(31'b0000000000000000000000000000000,
          ColumnStatistic_sum_total_1_lpi_1_mx0, col_loop_if_aelse_not_7_nl);
      ColumnStatistic_count_total_lpi_1_dfm_1 <= MUX_v_6_2_2(col_loop_if_col_loop_if_and_nl,
          operator_3_false_acc_nl, or_297_nl);
      sawtooth_loop_2_if_if_1_acc_5_itm_1_1 <= sawtooth_loop_2_if_if_1_acc_5_itm_1;
      abs_rawData_2_3_sva_1 <= MUX1HOT_v_12_5_2(gb_block_2_5_lpi_1_mx0, gb_block_4_5_lpi_1_mx0,
          gb_block_6_5_lpi_1_mx0, ({7'b0000000 , operator_4_false_13_mux_nl}), ({8'b00000000
          , operator_4_false_acc_nl}), {sawtooth_loop_2_else_if_if_1_and_nl , sawtooth_loop_2_else_if_if_1_and_1_nl
          , sawtooth_loop_2_else_if_if_1_and_2_nl , (~ mux_139_nl) , mux_34_cse});
      ColumnStatistic_i_1_2_1_lpi_1_dfm_1 <= MUX1HOT_v_2_4_2(ColumnStatistic_i_1_2_1_lpi_1_dfm_mx0w0,
          ColumnStatistic_i_2_1_lpi_1_dfm_mx0w1, lines_write_loop_acc_9_nl, z_out_39_1_0,
          {and_191_nl , and_192_nl , and_dcpl_154 , or_452_nl});
      operator_4_false_12_acc_itm_1 <= MUX_v_5_2_2((z_out_34[4:0]), (z_out_34[5:1]),
          or_dcpl_153);
      operator_4_false_9_acc_itm_1_2_0 <= MUX_v_3_2_2((signext_3_2(z_out_47[1:0])),
          z_out_36_3_1, or_dcpl_153);
      sawtooth_loop_2_else_else_if_acc_itm_1 <= MUX_v_3_2_2(z_out_43, (z_out_37[3:1]),
          or_dcpl_153);
      ColumnStatistic_j_1_3_1_lpi_1_dfm_1_1_0 <= MUX1HOT_v_2_3_2(ColumnStatistic_j_1_3_1_lpi_1_dfm_1_0_mx0w0,
          z_out_41, ({1'b0 , (col_lpi_1_dfm_1[0])}), {and_193_nl , nor_128_nl , (lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_1_0[1])});
      exit_sawtooth_loop_1_pmx_lpi_1_dfm_st_1 <= MUX1HOT_s_1_3_2(exit_sawtooth_loop_1_lpi_1_dfm_3,
          exitL_exit_sawtooth_loop_1_lpi_1_dfm_3, padding_inter_loop_padding_inter_loop_and_nl,
          {and_195_nl , and_196_nl , (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0)});
      col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1 <= MUX1HOT_s_1_3_2(col_loop_if_if_col_loop_if_if_xor_sft_lpi_1,
          col_loop_if_if_col_loop_if_if_xor_1_tmp, padding_inter_loop_padding_inter_loop_and_3_nl,
          {and_198_nl , and_199_nl , (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0)});
      sawtooth_loop_2_if_slc_12_1_svs_1 <= readslicef_13_1_12(sawtooth_loop_2_if_if_1_acc_nl);
      col_loop_if_asn_sft_lpi_1_st_1 <= MUX_s_1_2_2(padding_inter_loop_padding_inter_loop_and_1_nl,
          col_loop_if_asn_sft_lpi_1, lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0);
      lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_st_1_2 <= MUX_s_1_2_2(lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_2_mx0w0,
          padding_inter_loop_acc_13_itm_13_1, lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_1_1);
      lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_st_1_1_0 <= lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_1_0_1;
      sfi_exit_col_loop_lpi_1_dfm_1_1 <= sfi_exit_col_loop_lpi_1_dfm_1;
      col_loop_asn_sft_lpi_1_dfm_1 <= col_loop_asn_sft_lpi_1_dfm_1_mx0;
      sawtooth_loop_1_or_tmp_1_1 <= sawtooth_loop_1_or_tmp_1;
      sawtooth_loop_1_equal_tmp_2_1 <= sawtooth_loop_1_equal_tmp_3;
      sawtooth_loop_1_nor_tmp_1_1 <= sawtooth_loop_1_nor_tmp_1;
      col_loop_asn_sft_1_lpi_1_dfm_1 <= col_loop_asn_sft_1_lpi_1_dfm_1_mx0;
      k_3_lpi_1_dfm_1 <= MUX_v_3_2_2(3'b000, k_3_lpi_1_mx0, operator_3_false_2_acc_itm_2_1);
      sawtooth_loop_1_equal_tmp_1 <= sawtooth_loop_1_equal_tmp_4;
      k_3_sva_1_1 <= k_3_sva_2;
      sawtooth_loop_1_equal_tmp_1_1 <= sawtooth_loop_1_equal_tmp_5;
      row_loop_asn_sft_lpi_1_dfm_1 <= row_loop_asn_sft_lpi_1_dfm_1_mx0;
      padding_outer_loop_equal_tmp_1 <= padding_outer_loop_equal_tmp_4;
      padding_outer_loop_equal_tmp_3_1 <= padding_outer_loop_equal_tmp_5;
      padding_outer_loop_and_147_itm_1 <= in_window_loop_and_stg_4_18_sva_1 & (in_window_loop_acc_tmp[5])
          & sawtooth_loop_1_sawtooth_loop_1_nor_3_cse_1 & col_loop_asn_sft_lpi_1_dfm_mx0
          & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0) & padding_outer_loop_padding_outer_loop_nor_cse_1;
      padding_outer_loop_and_140_itm_1 <= in_window_loop_and_stg_4_10_sva_1 & (in_window_loop_acc_tmp[5])
          & sawtooth_loop_1_sawtooth_loop_1_nor_3_cse_1 & col_loop_asn_sft_lpi_1_dfm_mx0
          & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0) & padding_outer_loop_padding_outer_loop_nor_cse_1;
      padding_outer_loop_and_135_itm_1 <= in_window_loop_and_stg_3_4_sva_1 & (in_window_loop_acc_tmp[5:4]==2'b10)
          & sawtooth_loop_1_sawtooth_loop_1_nor_3_cse_1 & col_loop_asn_sft_lpi_1_dfm_mx0
          & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0) & padding_outer_loop_padding_outer_loop_nor_cse_1;
      padding_outer_loop_and_128_itm_1 <= in_window_loop_and_stg_3_12_sva_1 & (in_window_loop_acc_tmp[5:4]==2'b01)
          & sawtooth_loop_1_sawtooth_loop_1_nor_3_cse_1 & col_loop_asn_sft_lpi_1_dfm_mx0
          & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0) & padding_outer_loop_padding_outer_loop_nor_cse_1;
      padding_outer_loop_and_123_itm_1 <= in_window_loop_and_stg_4_22_sva_1 & (~
          (in_window_loop_acc_tmp[5])) & sawtooth_loop_1_sawtooth_loop_1_nor_3_cse_1
          & col_loop_asn_sft_lpi_1_dfm_mx0 & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_outer_loop_padding_outer_loop_nor_cse_1;
      padding_outer_loop_and_116_itm_1 <= in_window_loop_and_stg_4_14_sva_1 & (~
          (in_window_loop_acc_tmp[5])) & sawtooth_loop_1_sawtooth_loop_1_nor_3_cse_1
          & col_loop_asn_sft_lpi_1_dfm_mx0 & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_outer_loop_padding_outer_loop_nor_cse_1;
      lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_1_1 <= lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_1_1;
      lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_1_0 <= lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_0_1;
      reg_src_rsci_oswt_cse <= MUX_s_1_2_2(nor_133_nl, and_258_cse, exitL_exitL_exit_padding_outer_loop_sva);
      ColumnStatistic_j_1_3_1_lpi_1_1_0 <= MUX_v_2_2_2(2'b00, padding_outer_loop_mux_57_nl,
          ColumnStatistic_nand_nl);
      sfi_gb_reg_eb_lpi_1 <= padding_outer_loop_mux_62_nl & (~ padding_outer_loop_equal_tmp_4);
      lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_1 <= lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_1_1;
      exitL_exitL_exit_padding_outer_loop_sva <= ~(lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_1_1
          | lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0_1);
      lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0 <= lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0_1;
      row_lpi_1 <= MUX_v_13_2_2(z_out_26, row_lpi_1_dfm_1, or_361_nl);
      main_stage_0_2 <= 1'b1;
      main_stage_0_3 <= main_stage_0_2;
      ColumnStatistic_sum_total_1_lpi_1 <= ColumnStatistic_sum_total_1_lpi_1_mx0;
      ColumnStatistic_count_total_lpi_1 <= ColumnStatistic_count_total_lpi_1_mx0;
      line_feed_loop_mul_sdt_2_0_sva_1 <= nl_line_feed_loop_mul_sdt_2_0_sva_1[2:0];
      in_window_loop_and_stg_3_2_sva_1_1 <= in_window_loop_and_stg_3_2_sva_1;
      in_window_loop_acc_decb_sva_1_5_4 <= in_window_loop_acc_tmp[5:4];
      in_window_loop_and_stg_3_11_sva_1 <= MUX_s_1_2_2(in_window_loop_and_stg_3_11_sva_mx0w0,
          (i_lpi_1[0]), lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_1_1);
      greenbalance2_label0_acc_cse_sva_1 <= MUX_v_2_2_2((z_out_46[1:0]), z_out_41,
          lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0);
      padding_outer_loop_and_171_itm_1 <= col_loop_if_asn_sft_lpi_1 & sawtooth_loop_1_equal_tmp_3
          & col_loop_asn_sft_lpi_1_dfm_1_mx0 & (~(col_loop_asn_sft_1_lpi_1_dfm_1_mx0
          | row_loop_asn_sft_lpi_1_dfm_1_mx0)) & padding_outer_loop_or_tmp_3;
      padding_outer_loop_and_151_itm_1 <= in_window_loop_and_stg_4_22_sva_1 & (in_window_loop_acc_tmp[5])
          & sawtooth_loop_1_sawtooth_loop_1_nor_3_cse_1 & col_loop_asn_sft_lpi_1_dfm_mx0
          & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0) & padding_outer_loop_padding_outer_loop_nor_cse_1;
      padding_outer_loop_and_150_itm_1 <= in_window_loop_and_stg_4_21_sva_1 & (in_window_loop_acc_tmp[5])
          & sawtooth_loop_1_sawtooth_loop_1_nor_3_cse_1 & col_loop_asn_sft_lpi_1_dfm_mx0
          & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0) & padding_outer_loop_padding_outer_loop_nor_cse_1;
      padding_outer_loop_and_149_itm_1 <= in_window_loop_and_stg_4_20_sva_1 & (in_window_loop_acc_tmp[5])
          & sawtooth_loop_1_sawtooth_loop_1_nor_3_cse_1 & col_loop_asn_sft_lpi_1_dfm_mx0
          & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0) & padding_outer_loop_padding_outer_loop_nor_cse_1;
      padding_outer_loop_and_148_itm_1 <= in_window_loop_and_stg_4_19_sva_1 & (in_window_loop_acc_tmp[5])
          & sawtooth_loop_1_sawtooth_loop_1_nor_3_cse_1 & col_loop_asn_sft_lpi_1_dfm_mx0
          & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0) & padding_outer_loop_padding_outer_loop_nor_cse_1;
      padding_outer_loop_and_146_itm_1 <= in_window_loop_and_stg_4_17_sva_1 & (in_window_loop_acc_tmp[5])
          & sawtooth_loop_1_sawtooth_loop_1_nor_3_cse_1 & col_loop_asn_sft_lpi_1_dfm_mx0
          & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0) & padding_outer_loop_padding_outer_loop_nor_cse_1;
      padding_outer_loop_and_145_itm_1 <= in_window_loop_and_stg_4_15_sva_1 & (in_window_loop_acc_tmp[5])
          & sawtooth_loop_1_sawtooth_loop_1_nor_3_cse_1 & col_loop_asn_sft_lpi_1_dfm_mx0
          & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0) & padding_outer_loop_padding_outer_loop_nor_cse_1;
      padding_outer_loop_and_144_itm_1 <= in_window_loop_and_stg_4_14_sva_1 & (in_window_loop_acc_tmp[5])
          & sawtooth_loop_1_sawtooth_loop_1_nor_3_cse_1 & col_loop_asn_sft_lpi_1_dfm_mx0
          & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0) & padding_outer_loop_padding_outer_loop_nor_cse_1;
      padding_outer_loop_and_143_itm_1 <= in_window_loop_and_stg_4_13_sva_1 & (in_window_loop_acc_tmp[5])
          & sawtooth_loop_1_sawtooth_loop_1_nor_3_cse_1 & col_loop_asn_sft_lpi_1_dfm_mx0
          & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0) & padding_outer_loop_padding_outer_loop_nor_cse_1;
      padding_outer_loop_and_142_itm_1 <= in_window_loop_and_stg_4_12_sva_1 & (in_window_loop_acc_tmp[5])
          & sawtooth_loop_1_sawtooth_loop_1_nor_3_cse_1 & col_loop_asn_sft_lpi_1_dfm_mx0
          & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0) & padding_outer_loop_padding_outer_loop_nor_cse_1;
      padding_outer_loop_and_141_itm_1 <= in_window_loop_and_stg_4_11_sva_1 & (in_window_loop_acc_tmp[5])
          & sawtooth_loop_1_sawtooth_loop_1_nor_3_cse_1 & col_loop_asn_sft_lpi_1_dfm_mx0
          & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0) & padding_outer_loop_padding_outer_loop_nor_cse_1;
      padding_outer_loop_and_139_itm_1 <= in_window_loop_and_stg_4_8_sva_1 & (in_window_loop_acc_tmp[5])
          & sawtooth_loop_1_sawtooth_loop_1_nor_3_cse_1 & col_loop_asn_sft_lpi_1_dfm_mx0
          & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0) & padding_outer_loop_padding_outer_loop_nor_cse_1;
      padding_outer_loop_and_138_itm_1 <= in_window_loop_and_stg_4_7_sva_1 & (in_window_loop_acc_tmp[5])
          & sawtooth_loop_1_sawtooth_loop_1_nor_3_cse_1 & col_loop_asn_sft_lpi_1_dfm_mx0
          & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0) & padding_outer_loop_padding_outer_loop_nor_cse_1;
      padding_outer_loop_and_137_itm_1 <= in_window_loop_and_stg_3_6_sva_1 & (in_window_loop_acc_tmp[5:4]==2'b10)
          & sawtooth_loop_1_sawtooth_loop_1_nor_3_cse_1 & col_loop_asn_sft_lpi_1_dfm_mx0
          & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0) & padding_outer_loop_padding_outer_loop_nor_cse_1;
      padding_outer_loop_and_136_itm_1 <= in_window_loop_and_stg_3_5_sva_1 & (in_window_loop_acc_tmp[5:4]==2'b10)
          & sawtooth_loop_1_sawtooth_loop_1_nor_3_cse_1 & col_loop_asn_sft_lpi_1_dfm_mx0
          & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0) & padding_outer_loop_padding_outer_loop_nor_cse_1;
      padding_outer_loop_and_134_itm_1 <= in_window_loop_and_stg_3_3_sva_1 & (in_window_loop_acc_tmp[5:4]==2'b10)
          & sawtooth_loop_1_sawtooth_loop_1_nor_3_cse_1 & col_loop_asn_sft_lpi_1_dfm_mx0
          & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0) & padding_outer_loop_padding_outer_loop_nor_cse_1;
      padding_outer_loop_and_133_itm_1 <= in_window_loop_and_stg_3_1_sva_1 & (in_window_loop_acc_tmp[5:4]==2'b10)
          & sawtooth_loop_1_sawtooth_loop_1_nor_3_cse_1 & col_loop_asn_sft_lpi_1_dfm_mx0
          & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0) & padding_outer_loop_padding_outer_loop_nor_cse_1;
      padding_outer_loop_and_132_itm_1 <= in_window_loop_and_stg_3_0_sva_1 & (in_window_loop_acc_tmp[5:4]==2'b10)
          & sawtooth_loop_1_sawtooth_loop_1_nor_3_cse_1 & col_loop_asn_sft_lpi_1_dfm_mx0
          & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0) & padding_outer_loop_padding_outer_loop_nor_cse_1;
      padding_outer_loop_and_130_itm_1 <= in_window_loop_and_stg_3_14_sva_1 & (in_window_loop_acc_tmp[5:4]==2'b01)
          & sawtooth_loop_1_sawtooth_loop_1_nor_3_cse_1 & col_loop_asn_sft_lpi_1_dfm_mx0
          & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0) & padding_outer_loop_padding_outer_loop_nor_cse_1;
      padding_outer_loop_and_129_itm_1 <= in_window_loop_and_stg_3_13_sva_1 & (in_window_loop_acc_tmp[5:4]==2'b01)
          & sawtooth_loop_1_sawtooth_loop_1_nor_3_cse_1 & col_loop_asn_sft_lpi_1_dfm_mx0
          & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0) & padding_outer_loop_padding_outer_loop_nor_cse_1;
      padding_outer_loop_and_127_itm_1 <= in_window_loop_and_stg_3_10_sva_1 & (in_window_loop_acc_tmp[5:4]==2'b01)
          & sawtooth_loop_1_sawtooth_loop_1_nor_3_cse_1 & col_loop_asn_sft_lpi_1_dfm_mx0
          & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0) & padding_outer_loop_padding_outer_loop_nor_cse_1;
      padding_outer_loop_and_126_itm_1 <= in_window_loop_and_stg_3_9_sva_1 & (in_window_loop_acc_tmp[5:4]==2'b01)
          & sawtooth_loop_1_sawtooth_loop_1_nor_3_cse_1 & col_loop_asn_sft_lpi_1_dfm_mx0
          & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0) & padding_outer_loop_padding_outer_loop_nor_cse_1;
      padding_outer_loop_and_125_itm_1 <= in_window_loop_and_stg_3_8_sva_1 & (in_window_loop_acc_tmp[5:4]==2'b01)
          & sawtooth_loop_1_sawtooth_loop_1_nor_3_cse_1 & col_loop_asn_sft_lpi_1_dfm_mx0
          & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0) & padding_outer_loop_padding_outer_loop_nor_cse_1;
      padding_outer_loop_and_124_itm_1 <= in_window_loop_and_stg_4_23_sva_1 & (~
          (in_window_loop_acc_tmp[5])) & sawtooth_loop_1_sawtooth_loop_1_nor_3_cse_1
          & col_loop_asn_sft_lpi_1_dfm_mx0 & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_outer_loop_padding_outer_loop_nor_cse_1;
      padding_outer_loop_and_122_itm_1 <= in_window_loop_and_stg_4_21_sva_1 & (~
          (in_window_loop_acc_tmp[5])) & sawtooth_loop_1_sawtooth_loop_1_nor_3_cse_1
          & col_loop_asn_sft_lpi_1_dfm_mx0 & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_outer_loop_padding_outer_loop_nor_cse_1;
      padding_outer_loop_and_121_itm_1 <= in_window_loop_and_stg_4_19_sva_1 & (~
          (in_window_loop_acc_tmp[5])) & sawtooth_loop_1_sawtooth_loop_1_nor_3_cse_1
          & col_loop_asn_sft_lpi_1_dfm_mx0 & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_outer_loop_padding_outer_loop_nor_cse_1;
      padding_outer_loop_and_120_itm_1 <= in_window_loop_and_stg_4_18_sva_1 & (~
          (in_window_loop_acc_tmp[5])) & sawtooth_loop_1_sawtooth_loop_1_nor_3_cse_1
          & col_loop_asn_sft_lpi_1_dfm_mx0 & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_outer_loop_padding_outer_loop_nor_cse_1;
      padding_outer_loop_and_119_itm_1 <= in_window_loop_and_stg_4_17_sva_1 & (~
          (in_window_loop_acc_tmp[5])) & sawtooth_loop_1_sawtooth_loop_1_nor_3_cse_1
          & col_loop_asn_sft_lpi_1_dfm_mx0 & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_outer_loop_padding_outer_loop_nor_cse_1;
      padding_outer_loop_and_118_itm_1 <= in_window_loop_and_stg_4_16_sva_1 & (~
          (in_window_loop_acc_tmp[5])) & sawtooth_loop_1_sawtooth_loop_1_nor_3_cse_1
          & col_loop_asn_sft_lpi_1_dfm_mx0 & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_outer_loop_padding_outer_loop_nor_cse_1;
      padding_outer_loop_and_117_itm_1 <= in_window_loop_and_stg_4_15_sva_1 & (~
          (in_window_loop_acc_tmp[5])) & sawtooth_loop_1_sawtooth_loop_1_nor_3_cse_1
          & col_loop_asn_sft_lpi_1_dfm_mx0 & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_outer_loop_padding_outer_loop_nor_cse_1;
      padding_outer_loop_and_115_itm_1 <= in_window_loop_and_stg_4_12_sva_1 & (~
          (in_window_loop_acc_tmp[5])) & sawtooth_loop_1_sawtooth_loop_1_nor_3_cse_1
          & col_loop_asn_sft_lpi_1_dfm_mx0 & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_outer_loop_padding_outer_loop_nor_cse_1;
      padding_outer_loop_and_114_itm_1 <= in_window_loop_and_stg_4_11_sva_1 & (~
          (in_window_loop_acc_tmp[5])) & sawtooth_loop_1_sawtooth_loop_1_nor_3_cse_1
          & col_loop_asn_sft_lpi_1_dfm_mx0 & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_outer_loop_padding_outer_loop_nor_cse_1;
      padding_outer_loop_and_113_itm_1 <= in_window_loop_and_stg_4_10_sva_1 & (~
          (in_window_loop_acc_tmp[5])) & sawtooth_loop_1_sawtooth_loop_1_nor_3_cse_1
          & col_loop_asn_sft_lpi_1_dfm_mx0 & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0)
          & padding_outer_loop_padding_outer_loop_nor_cse_1;
      padding_outer_loop_and_112_itm_1 <= in_window_loop_and_stg_4_9_sva_1 & (~ (in_window_loop_acc_tmp[5]))
          & sawtooth_loop_1_sawtooth_loop_1_nor_3_cse_1 & col_loop_asn_sft_lpi_1_dfm_mx0
          & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0) & padding_outer_loop_padding_outer_loop_nor_cse_1;
      padding_outer_loop_and_111_itm_1 <= in_window_loop_and_stg_4_8_sva_1 & (~ (in_window_loop_acc_tmp[5]))
          & sawtooth_loop_1_sawtooth_loop_1_nor_3_cse_1 & col_loop_asn_sft_lpi_1_dfm_mx0
          & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0) & padding_outer_loop_padding_outer_loop_nor_cse_1;
      padding_outer_loop_and_110_itm_1 <= in_window_loop_and_stg_4_7_sva_1 & (~ (in_window_loop_acc_tmp[5]))
          & sawtooth_loop_1_sawtooth_loop_1_nor_3_cse_1 & col_loop_asn_sft_lpi_1_dfm_mx0
          & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0) & padding_outer_loop_padding_outer_loop_nor_cse_1;
      padding_outer_loop_and_131_itm_1 <= in_window_loop_and_stg_3_15_sva_1 & (in_window_loop_acc_tmp[5:4]==2'b01)
          & sawtooth_loop_1_sawtooth_loop_1_nor_3_cse_1 & col_loop_asn_sft_lpi_1_dfm_1_mx0
          & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0) & padding_outer_loop_padding_outer_loop_nor_cse_1;
      in_window_loop_and_stg_4_13_sva_1_1 <= in_window_loop_and_stg_4_13_sva_1;
      in_window_loop_and_stg_4_20_sva_1_1 <= in_window_loop_and_stg_4_20_sva_1;
      in_window_loop_and_stg_4_16_sva_1_1 <= in_window_loop_and_stg_4_16_sva_1;
      in_window_loop_and_stg_4_9_sva_1_1 <= in_window_loop_and_stg_4_9_sva_1;
      col_loop_if_if_1_col_loop_if_if_1_or_itm_1 <= MUX_s_1_2_2(padding_inter_loop_padding_inter_loop_and_2_nl,
          col_loop_if_if_1_col_loop_if_if_1_or_nl, lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0);
      exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_st_1 <= MUX_s_1_2_2(padding_inter_loop_padding_inter_loop_nor_nl,
          exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_1, lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0);
      col_loop_if_and_1_itm_1 <= MUX1HOT_s_1_3_2(col_loop_if_and_1_nl, lfst_exit_padding_outer_loop_lpi_1_dfm_0_1,
          line_feed_loop_line_feed_loop_and_2_nl, {and_dcpl_141 , (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0)
          , and_dcpl_152});
      col_loop_if_and_itm_1 <= MUX1HOT_s_1_3_2(col_loop_if_and_nl, lfst_exit_padding_outer_loop_lpi_1_dfm_1_1,
          line_feed_loop_line_feed_loop_nor_2_nl, {and_dcpl_141 , (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0)
          , and_dcpl_152});
      col_loop_if_not_56_itm_1 <= MUX_s_1_2_2(padding_inter_loop_padding_inter_loop_and_4_nl,
          (~ col_loop_if_asn_sft_lpi_1), lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0);
      in_window_loop_and_stg_4_23_sva_1_1 <= in_window_loop_and_stg_4_23_sva_1;
      operator_3_false_2_slc_operator_3_false_2_acc_2_svs_1 <= operator_3_false_2_acc_itm_2_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dst_rsci_idat <= 12'b000000000000;
    end
    else if ( core_wen & (dst_rsci_idat_mx0c0 | dst_rsci_idat_mx0c1 | dst_rsci_idat_mx0c2)
        ) begin
      dst_rsci_idat <= MUX1HOT_v_12_8_2(pixel_out_1_lpi_1_dfm_2, greenbalance2_label0_mux_itm_1,
          gb_lines_rsc_0_0_i_q_d_mxwt, gb_lines_rsc_0_1_i_q_d_mxwt, gb_lines_rsc_0_2_i_q_d_mxwt,
          gb_lines_rsc_0_3_i_q_d_mxwt, gb_lines_rsc_0_4_i_q_d_mxwt, gb_lines_rsc_0_5_i_q_d_mxwt,
          {dst_rsci_idat_mx0c0 , dst_rsci_idat_mx0c1 , col_loop_if_if_1_and_nl ,
          col_loop_if_if_1_and_1_nl , col_loop_if_if_1_and_2_nl , col_loop_if_if_1_and_3_nl
          , col_loop_if_if_1_and_4_nl , col_loop_if_if_1_and_5_nl});
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      pixel_out_1_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & (~((~ main_stage_0_3) | col_loop_asn_sft_1_lpi_1_dfm_2 |
        row_loop_asn_sft_lpi_1_dfm_2 | padding_outer_loop_equal_tmp_2 | padding_outer_loop_equal_tmp_3_2
        | (~ sawtooth_loop_1_equal_tmp_2_2) | (~ col_loop_asn_sft_lpi_1_dfm_2)))
        ) begin
      pixel_out_1_lpi_1 <= pixel_out_1_lpi_1_dfm_2;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      gb_block_0_2_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_outer_loop_and_112_itm_1 ) begin
      gb_block_0_2_lpi_1 <= in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      gb_block_0_4_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_outer_loop_and_114_itm_1 ) begin
      gb_block_0_4_lpi_1 <= in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      gb_block_1_1_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_outer_loop_and_117_itm_1 ) begin
      gb_block_1_1_lpi_1 <= in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      gb_block_1_2_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_outer_loop_and_118_itm_1 ) begin
      gb_block_1_2_lpi_1 <= in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      gb_block_1_3_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_outer_loop_and_119_itm_1 ) begin
      gb_block_1_3_lpi_1 <= in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      gb_block_1_4_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_outer_loop_and_120_itm_1 ) begin
      gb_block_1_4_lpi_1 <= in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      gb_block_1_5_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_outer_loop_and_121_itm_1 ) begin
      gb_block_1_5_lpi_1 <= in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      gb_block_2_0_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_outer_loop_and_122_itm_1 ) begin
      gb_block_2_0_lpi_1 <= in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      gb_block_2_2_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_outer_loop_and_124_itm_1 ) begin
      gb_block_2_2_lpi_1 <= in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      gb_block_2_4_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_outer_loop_and_126_itm_1 ) begin
      gb_block_2_4_lpi_1 <= in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      gb_block_3_1_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_outer_loop_and_129_itm_1 ) begin
      gb_block_3_1_lpi_1 <= in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      gb_block_3_2_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_outer_loop_and_130_itm_1 ) begin
      gb_block_3_2_lpi_1 <= in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      gb_block_3_4_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_outer_loop_and_132_itm_1 ) begin
      gb_block_3_4_lpi_1 <= in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      gb_block_3_5_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_outer_loop_and_133_itm_1 ) begin
      gb_block_3_5_lpi_1 <= in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      gb_block_4_0_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_outer_loop_and_134_itm_1 ) begin
      gb_block_4_0_lpi_1 <= in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      gb_block_4_2_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_outer_loop_and_136_itm_1 ) begin
      gb_block_4_2_lpi_1 <= in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      gb_block_4_4_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_outer_loop_and_138_itm_1 ) begin
      gb_block_4_4_lpi_1 <= in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      gb_block_5_1_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_outer_loop_and_141_itm_1 ) begin
      gb_block_5_1_lpi_1 <= in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      gb_block_5_3_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_outer_loop_and_143_itm_1 ) begin
      gb_block_5_3_lpi_1 <= in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      gb_block_5_4_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_outer_loop_and_144_itm_1 ) begin
      gb_block_5_4_lpi_1 <= in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      gb_block_5_5_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_outer_loop_and_145_itm_1 ) begin
      gb_block_5_5_lpi_1 <= in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      gb_block_6_0_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_outer_loop_and_146_itm_1 ) begin
      gb_block_6_0_lpi_1 <= in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      gb_block_6_2_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_outer_loop_and_148_itm_1 ) begin
      gb_block_6_2_lpi_1 <= in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      gb_block_6_3_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_outer_loop_and_149_itm_1 ) begin
      gb_block_6_3_lpi_1 <= in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      gb_block_6_4_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_outer_loop_and_150_itm_1 ) begin
      gb_block_6_4_lpi_1 <= in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      gb_block_6_6_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & ((padding_outer_loop_and_99_tmp_1 & (~(((~ in_window_loop_and_108_tmp_1)
        & sawtooth_loop_1_or_tmp_1_1) | sawtooth_loop_1_equal_tmp_1_1 | sawtooth_loop_1_equal_tmp_2_1
        | sawtooth_loop_1_nor_tmp_1_1 | (operator_3_false_2_slc_operator_3_false_2_acc_2_svs_1
        & sawtooth_loop_1_equal_tmp_1)))) | (in_window_loop_and_108_tmp_1 & sawtooth_loop_1_or_tmp_1_1
        & padding_outer_loop_and_99_tmp_1) | sawtooth_loop_1_and_75_rgt) & main_stage_0_2
        ) begin
      gb_block_6_6_lpi_1 <= MUX_v_12_2_2(in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1,
          pixel_in_lpi_1_dfm_mx0, sawtooth_loop_1_and_75_rgt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      gb_block_0_0_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_outer_loop_and_110_itm_1 ) begin
      gb_block_0_0_lpi_1 <= in_window_loop_in_window_loop_slc_gb_block_12_11_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      pixel_in_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & (~(row_loop_asn_sft_lpi_1_dfm_1 | padding_outer_loop_equal_tmp_3_1
        | padding_outer_loop_equal_tmp_1 | col_loop_asn_sft_1_lpi_1_dfm_1 | (~ main_stage_0_2)
        | (~ sfi_exit_col_loop_lpi_1_dfm_1_1))) ) begin
      pixel_in_lpi_1 <= src_rsci_idat_mxwt;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_2 <= 1'b0;
      lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_1_0 <= 2'b00;
    end
    else if ( sawtooth_loop_1_and_80_cse ) begin
      lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_2 <= lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_5_2_1;
      lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_1_0 <= lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_5_1_0_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      sfi_gb_reg_eb_1_lpi_1 <= 1'b0;
      lfst_exitL_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1 <= 1'b0;
      exitL_exitL_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1 <= 1'b0;
      lfst_exit_col_loop_lpi_1 <= 1'b0;
    end
    else if ( gb_reg_eb_and_cse ) begin
      sfi_gb_reg_eb_1_lpi_1 <= sfi_gb_reg_eb_1_lpi_1 & col_loop_asn_sft_1_lpi_1_dfm_1_mx0;
      lfst_exitL_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1 <= ~(exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_1
          | col_loop_asn_sft_1_lpi_1_dfm_1_mx0);
      exitL_exitL_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1 <= exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_1
          | col_loop_asn_sft_1_lpi_1_dfm_1_mx0;
      lfst_exit_col_loop_lpi_1 <= ~ exit_col_loop_lpi_1_dfm_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lfst_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1 <= 1'b0;
    end
    else if ( core_wen & (~(col_loop_asn_sft_1_lpi_1_dfm_1_mx0 | row_loop_asn_sft_lpi_1_dfm_1_mx0
        | lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_1_1)) ) begin
      lfst_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1 <= ~ exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      sfi_exit_col_loop_lpi_1 <= 1'b0;
      lfst_exitL_exit_col_loop_lpi_1 <= 1'b0;
      exitL_exitL_exit_col_loop_lpi_1 <= 1'b0;
    end
    else if ( col_loop_and_cse ) begin
      sfi_exit_col_loop_lpi_1 <= sfi_exit_col_loop_lpi_1 & row_loop_asn_sft_lpi_1_dfm_1_mx0;
      lfst_exitL_exit_col_loop_lpi_1 <= ~ exitL_exit_col_loop_lpi_1_dfm_1;
      exitL_exitL_exit_col_loop_lpi_1 <= exitL_exit_col_loop_lpi_1_dfm_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      l_lpi_1 <= 3'b000;
    end
    else if ( core_wen & (((~(operator_3_false_1_acc_itm_2_1 | sawtooth_loop_1_or_50_tmp_1))
        & col_loop_asn_sft_lpi_1_dfm_1_mx0 & (~ row_loop_or_tmp_1) & (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_1_1))
        | sawtooth_loop_1_and_69_rgt) ) begin
      l_lpi_1 <= MUX_v_3_2_2((signext_3_1(~ (z_out_36_3_1[2]))), l_sva_2, or_399_nl);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      k_2_lpi_1 <= 3'b000;
    end
    else if ( core_wen & ((sawtooth_loop_1_or_tmp_1 & col_loop_asn_sft_lpi_1_dfm_1_mx0
        & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0) & (~ padding_outer_loop_or_223_tmp_1))
        | col_loop_and_54_rgt) ) begin
      k_2_lpi_1 <= MUX_v_3_2_2(out_window_loop_out_window_loop_and_1_nl, k_2_sva_2,
          col_loop_and_54_rgt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lfst_exit_sawtooth_loop_1_lpi_1 <= 1'b0;
    end
    else if ( core_wen & ColumnStatistic_mux_44_itm & col_loop_if_asn_sft_lpi_1 &
        sawtooth_loop_1_equal_tmp_3 & col_loop_asn_sft_lpi_1_dfm_1_mx0 & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0)
        & (~ row_loop_asn_sft_lpi_1_dfm_1_mx0) & (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_1_1)
        ) begin
      lfst_exit_sawtooth_loop_1_lpi_1 <= ~ exit_sawtooth_loop_1_lpi_1_dfm_3;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ColumnStatistic_i_1_2_1_lpi_1 <= 2'b00;
    end
    else if ( core_wen & (((~ (operator_4_false_acc_tmp[2])) & ColumnStatistic_mux_44_itm
        & col_loop_and_66_tmp_1 & (~ padding_outer_loop_or_230_tmp_1)) | ColumnStatistic_and_15_rgt)
        ) begin
      ColumnStatistic_i_1_2_1_lpi_1 <= MUX_v_2_2_2(ColumnStatistic_i_1_2_1_lpi_1_dfm_mx0w0,
          operator_4_false_2_slc_operator_4_false_2_operator_4_false_2_acc_psp_sva_1,
          ColumnStatistic_and_15_rgt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ColumnStatistic_j_2_1_lpi_1 <= 2'b00;
    end
    else if ( core_wen & ((ColumnStatistic_ColumnStatistic_nor_3_cse_1 & col_loop_if_asn_sft_lpi_1
        & col_loop_and_59_tmp_1 & (~ row_loop_or_tmp_1) & (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_1_1))
        | ColumnStatistic_and_1_rgt) ) begin
      ColumnStatistic_j_2_1_lpi_1 <= MUX_v_2_2_2((signext_2_1(~ operator_4_false_2_acc_itm_2_1)),
          ColumnStatistic_j_2_1_sva_2, or_400_nl);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lfst_exitL_exit_sawtooth_loop_1_lpi_1 <= 1'b0;
    end
    else if ( core_wen & (~ ColumnStatistic_mux_44_itm) & col_loop_if_asn_sft_lpi_1
        & sawtooth_loop_1_equal_tmp_3 & col_loop_asn_sft_lpi_1_dfm_1_mx0 & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0)
        & (~ row_loop_asn_sft_lpi_1_dfm_1_mx0) & (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_1_1)
        ) begin
      lfst_exitL_exit_sawtooth_loop_1_lpi_1 <= ~ exitL_exit_sawtooth_loop_1_lpi_1_dfm_3;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ColumnStatistic_i_2_1_lpi_1 <= 2'b00;
    end
    else if ( core_wen & ((ColumnStatistic_ColumnStatistic_nor_3_cse_1 & col_loop_and_66_tmp_1
        & (~ row_loop_or_tmp_1) & (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_1_1))
        | ColumnStatistic_and_10_rgt) ) begin
      ColumnStatistic_i_2_1_lpi_1 <= MUX_v_2_2_2(operator_4_false_16_slc_operator_4_false_16_operator_4_false_16_acc_psp_sva_1,
          ColumnStatistic_i_2_1_lpi_1_dfm_mx0w1, ColumnStatistic_and_10_rgt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      sfi_col_loop_if_if_col_loop_if_if_xor_lpi_1 <= 1'b0;
    end
    else if ( core_wen & sawtooth_loop_1_equal_tmp_3 & col_loop_asn_sft_lpi_1_dfm_1_mx0
        & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0) & (~ row_loop_asn_sft_lpi_1_dfm_1_mx0)
        & (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_1_1) ) begin
      sfi_col_loop_if_if_col_loop_if_if_xor_lpi_1 <= sfi_col_loop_if_if_col_loop_if_if_xor_lpi_1
          & (~ col_loop_if_asn_sft_lpi_1);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      bGreen_lpi_1_dfm <= 1'b0;
    end
    else if ( core_wen & exitL_exitL_exit_padding_outer_loop_sva ) begin
      bGreen_lpi_1_dfm <= (top_reg_imgPattern[1]) ^ (top_reg_imgPattern[0]);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      col_loop_if_if_col_loop_if_if_xor_sft_lpi_1 <= 1'b0;
    end
    else if ( core_wen & or_67_cse & col_loop_if_asn_sft_lpi_1 & sawtooth_loop_1_equal_tmp_3
        & col_loop_asn_sft_lpi_1_dfm_1_mx0 & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0)
        & (~ row_loop_asn_sft_lpi_1_dfm_1_mx0) & (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_1_1)
        ) begin
      col_loop_if_if_col_loop_if_if_xor_sft_lpi_1 <= col_loop_if_if_col_loop_if_if_xor_1_tmp;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lfst_exitL_exit_sawtooth_loop_1_1_lpi_1 <= 1'b0;
    end
    else if ( core_wen & col_loop_if_asn_sft_lpi_1 & sawtooth_loop_1_equal_tmp_3
        & col_loop_asn_sft_lpi_1_dfm_1_mx0 & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0)
        & (~ row_loop_asn_sft_lpi_1_dfm_1_mx0) & (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_1_1)
        ) begin
      lfst_exitL_exit_sawtooth_loop_1_1_lpi_1 <= ~ exit_sawtooth_loop_1_pmx_lpi_1_dfm_mx0;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      sfi_col_loop_if_land_lpi_1 <= 1'b0;
    end
    else if ( core_wen & (~((~ col_loop_asn_sft_lpi_1_dfm_1_mx0) | col_loop_asn_sft_1_lpi_1_dfm_1_mx0
        | row_loop_asn_sft_lpi_1_dfm_1_mx0 | lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_1_1))
        ) begin
      sfi_col_loop_if_land_lpi_1 <= sawtooth_loop_1_mux_38_nl & (~ sawtooth_loop_1_equal_tmp_3);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      col_loop_if_asn_sft_lpi_1 <= 1'b0;
    end
    else if ( core_wen & (~ operator_3_false_3_acc_itm_2_1) & sawtooth_loop_1_equal_tmp_5
        & col_loop_asn_sft_lpi_1_dfm_1_mx0 & (~ col_loop_asn_sft_1_lpi_1_dfm_1_mx0)
        & (~ row_loop_asn_sft_lpi_1_dfm_1_mx0) & (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_1_1)
        ) begin
      col_loop_if_asn_sft_lpi_1 <= (readslicef_13_1_12(operator_13_false_1_acc_nl))
          & (readslicef_13_1_12(operator_13_false_acc_nl));
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      k_1_lpi_1 <= 3'b000;
    end
    else if ( core_wen & (((~ sawtooth_loop_1_or_183_tmp_1) & col_loop_and_70_tmp_1
        & (~ padding_outer_loop_or_223_tmp_1)) | col_loop_and_76_rgt) ) begin
      k_1_lpi_1 <= MUX_v_3_2_2((z_out_44[2:0]), k_1_lpi_1_dfm_1, col_loop_and_76_rgt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      col_loop_asn_sft_lpi_1 <= 1'b0;
    end
    else if ( core_wen & (~(lfst_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_1
        | col_loop_asn_sft_1_lpi_1_dfm_1_mx0 | row_loop_asn_sft_lpi_1_dfm_1_mx0 |
        lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_1_1)) ) begin
      col_loop_asn_sft_lpi_1 <= gb_reg_eb;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      col_loop_asn_sft_1_lpi_1 <= 1'b0;
    end
    else if ( core_wen & (~((~((~ lfst_exitL_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_1)
        | row_loop_asn_sft_lpi_1_dfm_1_mx0)) | lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_1_1))
        ) begin
      col_loop_asn_sft_1_lpi_1 <= exit_col_loop_lpi_1_dfm_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      col_lpi_1 <= 13'b0000000000000;
    end
    else if ( core_wen & ((~(col_loop_and_50_tmp_1 | row_loop_asn_sft_lpi_1_dfm_1_mx0
        | lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_1_1)) | row_loop_and_1_rgt)
        ) begin
      col_lpi_1 <= MUX_v_13_2_2(col_lpi_1_dfm_1, z_out_26, row_loop_and_1_rgt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      row_loop_asn_sft_lpi_1 <= 1'b0;
    end
    else if ( core_wen & (~(lfst_exitL_exit_col_loop_lpi_1_dfm_1 | lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_1_1))
        ) begin
      row_loop_asn_sft_lpi_1 <= exit_row_loop_lpi_1_dfm_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      i_lpi_1 <= 13'b0000000000000;
    end
    else if ( core_wen & (and_2_rgt | padding_outer_loop_and_rgt | padding_outer_loop_and_1_rgt)
        ) begin
      i_lpi_1 <= MUX1HOT_v_13_3_2((signext_13_1(~ (k_4_1_0_lpi_1_dfm_1[1]))), padding_inter_loop_padding_inter_loop_and_7_nl,
          z_out_26, {and_2_rgt , padding_outer_loop_and_rgt , padding_outer_loop_and_1_rgt});
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lfst_exit_padding_outer_loop_lpi_1_1 <= 1'b0;
      lfst_exit_padding_outer_loop_lpi_1_0 <= 1'b0;
    end
    else if ( padding_outer_loop_and_178_cse ) begin
      lfst_exit_padding_outer_loop_lpi_1_1 <= lfst_exit_padding_outer_loop_lpi_1_dfm_3_1_1;
      lfst_exit_padding_outer_loop_lpi_1_0 <= lfst_exit_padding_outer_loop_lpi_1_dfm_3_0_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      asn_sft_lpi_1 <= 1'b0;
    end
    else if ( core_wen & exit_row_loop_lpi_1_dfm_1 & (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_1_1)
        ) begin
      asn_sft_lpi_1 <= gb_reg_eb;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      exit_padding_outer_loop_sva_1 <= 1'b0;
    end
    else if ( core_wen & (~(or_tmp_77 | (~ asn_sft_lpi_1) | sfi_gb_reg_eb_lpi_1 |
        (~ lfst_exit_padding_outer_loop_lpi_1_1) | lfst_exit_padding_outer_loop_lpi_1_0
        | padding_inter_loop_acc_13_itm_13_1 | (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_1)))
        ) begin
      exit_padding_outer_loop_sva_1 <= ~ operator_3_false_5_acc_tmp_2;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      k_1_0_lpi_1 <= 2'b00;
    end
    else if ( core_wen & ((padding_outer_loop_or_tmp_2 & padding_outer_loop_padding_outer_loop_and_15_cse)
        | padding_outer_loop_and_52_rgt) ) begin
      k_1_0_lpi_1 <= MUX_v_2_2_2((signext_2_1(~ (k_4_1_0_lpi_1_dfm_1[1]))), k_1_0_sva_2,
          padding_outer_loop_and_52_rgt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      k_4_1_0_lpi_1 <= 2'b00;
    end
    else if ( core_wen & (((~ padding_outer_loop_or_3_tmp_1) & asn_sft_lpi_1 & padding_outer_loop_equal_tmp_4)
        | and_4_rgt) ) begin
      k_4_1_0_lpi_1 <= MUX_v_2_2_2((z_out_46[1:0]), k_4_1_0_lpi_1_dfm_1, and_4_rgt);
    end
  end
  assign or_194_nl = (~ col_loop_if_if_1_col_loop_if_if_1_or_itm_2) | (~ exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_st_2)
      | (~ lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_st_2_2) | (lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_st_2_1_0!=2'b00)
      | padding_inter_loop_slc_13_svs_st_2 | col_loop_asn_sft_1_lpi_1_dfm_2;
  assign or_193_nl = col_loop_if_and_1_itm_2 | (~ padding_inter_loop_slc_13_svs_st_2)
      | lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_2_0;
  assign mux_126_nl = MUX_s_1_2_2(lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_2_0,
      or_193_nl, col_loop_if_and_itm_2);
  assign mux_127_nl = MUX_s_1_2_2(or_194_nl, mux_126_nl, lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_2_1);
  assign mux_128_nl = MUX_s_1_2_2(or_tmp_134, mux_127_nl, asn_sft_lpi_1_st_2);
  assign ColumnStatistic_else_1_if_if_mul_nl = conv_u2u_36_36((ColumnStatistic_sum_total_1_lpi_1_dfm_17[29:0])
      * ROM_1i5_1o6_909eb1361a488e6876f74b06293376842f_1);
  assign nl_operator_31_true_1_acc_nl = ({1'b1 , (~ (ColumnStatistic_else_1_if_else_mul_itm_36_8[28:1]))})
      + conv_u2s_1_29(~ (ColumnStatistic_else_1_if_else_mul_itm_36_8[0]));
  assign operator_31_true_1_acc_nl = nl_operator_31_true_1_acc_nl[28:0];
  assign operator_45_true_and_nl = (operator_44_true_acc_psp_sva_1[32]) & ((operator_44_true_acc_psp_sva_1[0])
      | (ColumnStatistic_else_1_else_if_mul_itm_42_8[2:0]!=3'b000));
  assign nl_operator_45_true_operator_45_true_acc_nl = (operator_44_true_acc_psp_sva_1[31:1])
      + conv_u2s_1_31(operator_45_true_and_nl);
  assign operator_45_true_operator_45_true_acc_nl = nl_operator_45_true_operator_45_true_acc_nl[30:0];
  assign operator_47_true_nand_nl = ~((operator_46_true_acc_psp_sva_1[33]) & ((operator_46_true_acc_psp_sva_1[0])
      | (ColumnStatistic_else_1_else_else_mul_itm_43_8[2:0]!=3'b000)));
  assign nl_operator_31_true_3_acc_nl = conv_u2s_1_31(operator_47_true_nand_nl) +
      (~ (operator_46_true_acc_psp_sva_1[31:1]));
  assign operator_31_true_3_acc_nl = nl_operator_31_true_3_acc_nl[30:0];
  assign nl_ColumnStatistic_else_1_if_acc_nl = ({1'b1 , ColumnStatistic_count_total_lpi_1_dfm_16})
      + conv_u2u_6_7(~ gb_reg_Hbound) + 7'b0000001;
  assign ColumnStatistic_else_1_if_acc_nl = nl_ColumnStatistic_else_1_if_acc_nl[6:0];
  assign ColumnStatistic_and_4_nl = (readslicef_7_1_6(ColumnStatistic_else_1_if_acc_nl))
      & (~ (ColumnStatistic_if_1_acc_cse[6]));
  assign ColumnStatistic_mux_nl = MUX_v_30_4_2(({3'b000 , (readslicef_36_27_9(ColumnStatistic_else_1_if_if_mul_nl))}),
      (signext_30_29(operator_31_true_1_acc_nl)), (readslicef_31_30_1(operator_45_true_operator_45_true_acc_nl)),
      (readslicef_31_30_1(operator_31_true_3_acc_nl)), {ColumnStatistic_and_4_nl
      , (ColumnStatistic_sum_total_1_lpi_1_dfm_17[30])});
  assign ColumnStatistic_if_1_not_8_nl = ~ (ColumnStatistic_if_1_acc_cse[6]);
  assign line_feed_loop_line_feed_loop_and_4_nl = (ColumnStatistic_i_1_2_1_lpi_1_dfm_1[1])
      & (ColumnStatistic_j_1_3_1_lpi_1_dfm_1_1_0[0]) & (~ (ColumnStatistic_i_1_2_1_lpi_1_dfm_1[0]));
  assign greenbalance2_label0_and_nl = (greenbalance2_label0_acc_cse_sva_1==2'b01)
      & lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_1_1;
  assign greenbalance2_label0_and_1_nl = (greenbalance2_label0_acc_cse_sva_1==2'b10)
      & lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_1_1;
  assign greenbalance2_label0_and_2_nl = (greenbalance2_label0_acc_cse_sva_1==2'b11)
      & lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_1_1;
  assign and_168_nl = (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_1_1) & sfi_exit_col_loop_lpi_1_dfm_1_1;
  assign nor_129_nl = ~(lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_st_1_1 | sfi_exit_col_loop_lpi_1_dfm_1_1);
  assign sawtooth_loop_2_else_else_sawtooth_loop_2_else_else_if_2_mux_nl = MUX_v_12_19_2x3x4x5x6x11x12x13x14(gb_block_0_1_lpi_1_mx0,
      gb_block_0_3_lpi_1_mx0, gb_block_0_5_lpi_1_mx0, gb_block_2_1_lpi_1_mx0, gb_block_2_3_lpi_1_mx0,
      gb_block_2_5_lpi_1_mx0, gb_block_3_0_lpi_1_mx0, gb_block_4_3_lpi_1_mx0, gb_block_4_5_lpi_1_mx0,
      gb_block_5_0_lpi_1_mx0, gb_block_5_2_lpi_1_mx0, z_out);
  assign line_feed_loop_line_feed_loop_mux_40_nl = MUX_s_1_2_2((~ (z_out_45_1_0[1])),
      (~ (lines_write_loop_acc_12_psp_sva_1[1])), and_dcpl_182);
  assign nl_acc_2_nl = conv_u2u_8_9({line_feed_loop_mux1h_12_cse , 1'b0 , line_feed_loop_line_feed_loop_mux_11_cse
      , 1'b0 , line_feed_loop_line_feed_loop_mux_12_cse , 1'b0 , line_feed_loop_line_feed_loop_mux_12_cse
      , line_feed_loop_line_feed_loop_mux_40_nl}) + conv_u2u_8_9({line_feed_loop_mux1h_15_cse
      , 1'b1 , line_feed_loop_line_feed_loop_mux_14_cse , 1'b1 , line_feed_loop_line_feed_loop_mux_14_cse
      , 1'b1 , line_feed_loop_line_feed_loop_mux_14_cse , 1'b1});
  assign acc_2_nl = nl_acc_2_nl[8:0];
  assign line_feed_loop_line_feed_loop_mux_42_nl = MUX_s_1_2_2((i_lpi_1[10]), (col_lpi_1_dfm_1[10]),
      lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0);
  assign line_feed_loop_line_feed_loop_mux_37_nl = MUX_s_1_2_2((~ (z_out_40[2])),
      (~ (lines_write_loop_acc_11_psp_sva_1[2])), and_dcpl_182);
  assign line_feed_loop_line_feed_loop_mux_38_nl = MUX_s_1_2_2((i_lpi_1[4]), (col_lpi_1_dfm_1[4]),
      lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0);
  assign line_feed_loop_line_feed_loop_mux_39_nl = MUX_s_1_2_2((i_lpi_1[3]), (col_lpi_1_dfm_1[3]),
      lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0);
  assign nl_acc_1_nl = conv_u2u_7_8({z_out_38 , line_feed_loop_line_feed_loop_mux_37_nl})
      + conv_u2u_6_8({line_feed_loop_mux1h_12_cse , 1'b0 , line_feed_loop_line_feed_loop_mux_38_nl
      , 1'b0 , line_feed_loop_line_feed_loop_mux_39_nl , 1'b1});
  assign acc_1_nl = nl_acc_1_nl[7:0];
  assign line_feed_loop_mux1h_112_nl = MUX1HOT_s_1_3_2((line_feed_loop_line_feed_loop_conc_1_idiv_14_12_sva_1[0]),
      (lines_write_loop_lines_write_loop_conc_idiv_14_12_sva_1[0]), (z_out_47[0]),
      {and_dcpl_181 , and_dcpl_182 , (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0)});
  assign line_feed_loop_line_feed_loop_mux_41_nl = MUX_s_1_2_2((i_lpi_1[8]), (col_lpi_1_dfm_1[8]),
      lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0);
  assign nl_line_feed_loop_acc_48_nl = conv_u2u_1_12(line_feed_loop_line_feed_loop_mux_31_cse)
      + conv_u2u_7_12({line_feed_loop_line_feed_loop_mux_21_cse , 1'b0 , line_feed_loop_mux1h_74_cse
      , 1'b0 , line_feed_loop_mux1h_74_cse , 1'b0 , line_feed_loop_mux1h_74_cse})
      + conv_u2u_7_12({line_feed_loop_line_feed_loop_mux_31_cse , 1'b0 , line_feed_loop_line_feed_loop_mux_25_cse
      , 1'b0 , line_feed_loop_line_feed_loop_mux_25_cse , 1'b0 , line_feed_loop_line_feed_loop_mux_25_cse})
      + conv_u2u_9_12({line_feed_loop_mux1h_12_cse , (readslicef_9_8_1(acc_2_nl))})
      + conv_u2u_9_12({line_feed_loop_line_feed_loop_mux_42_nl , 1'b0 , (readslicef_8_7_1(acc_1_nl))})
      + conv_u2u_11_12({line_feed_loop_mux1h_15_cse , 1'b0 , line_feed_loop_mux1h_15_cse
      , 1'b0 , line_feed_loop_mux1h_74_cse , 1'b0 , line_feed_loop_line_feed_loop_mux_18_cse
      , 1'b0 , line_feed_loop_line_feed_loop_mux_18_cse , 1'b0 , line_feed_loop_mux1h_12_cse})
      + conv_u2u_11_12({line_feed_loop_mux1h_112_nl , 1'b0 , line_feed_loop_mux1h_74_cse
      , 1'b0 , line_feed_loop_line_feed_loop_mux_25_cse , 1'b0 , line_feed_loop_line_feed_loop_mux_21_cse
      , 1'b0 , line_feed_loop_line_feed_loop_mux_21_cse , 1'b0 , line_feed_loop_line_feed_loop_mux_18_cse})
      + conv_u2u_11_12({line_feed_loop_mux1h_12_cse , 1'b0 , line_feed_loop_line_feed_loop_mux_25_cse
      , 1'b0 , line_feed_loop_line_feed_loop_mux_41_nl , 1'b0 , line_feed_loop_line_feed_loop_mux_31_cse
      , 1'b0 , line_feed_loop_line_feed_loop_mux_31_cse , 1'b0 , line_feed_loop_line_feed_loop_mux_21_cse})
      + 12'b100010101110;
  assign line_feed_loop_acc_48_nl = nl_line_feed_loop_acc_48_nl[11:0];
  assign and_171_nl = mux_34_cse & and_dcpl_141;
  assign sawtooth_loop_2_if_if_and_nl = (ColumnStatistic_i_1_2_1_lpi_1_dfm_mx0w0==2'b00)
      & and_178_m1c;
  assign sawtooth_loop_2_if_if_and_1_nl = (ColumnStatistic_i_1_2_1_lpi_1_dfm_mx0w0==2'b01)
      & and_178_m1c;
  assign sawtooth_loop_2_if_if_and_2_nl = (ColumnStatistic_i_1_2_1_lpi_1_dfm_mx0w0==2'b10)
      & and_178_m1c;
  assign and_180_nl = and_dcpl_148 & and_dcpl_144 & ((ColumnStatistic_j_1_3_1_lpi_1_1_0[0])
      ^ (ColumnStatistic_j_1_3_1_lpi_1_1_0[1]));
  assign sawtooth_loop_2_if_if_or_nl = and_dcpl_153 | and_dcpl_154 | (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0);
  assign and_184_nl = (~ ColumnStatistic_mux_44_itm) & and_dcpl_141;
  assign col_loop_if_aelse_not_7_nl = ~ sfi_col_loop_if_land_lpi_1;
  assign col_loop_if_aelse_not_8_nl = ~ sfi_col_loop_if_land_lpi_1;
  assign col_loop_if_col_loop_if_and_nl = MUX_v_6_2_2(6'b000000, ColumnStatistic_count_total_lpi_1_mx0,
      col_loop_if_aelse_not_8_nl);
  assign nl_operator_3_false_acc_nl = conv_s2u_4_6({z_out_43 , (~ (k_1_lpi_1_dfm_1[0]))})
      + ({k_1_lpi_1_dfm_1 , l_lpi_1_dfm_2});
  assign operator_3_false_acc_nl = nl_operator_3_false_acc_nl[5:0];
  assign or_297_nl = or_dcpl_149 | or_dcpl_146 | (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0)
      | (~ lfst_exitL_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1) | sfi_exit_col_loop_lpi_1
      | (~ lfst_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1) | sfi_gb_reg_eb_1_lpi_1
      | (~ lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_2);
  assign operator_4_false_13_mux_nl = MUX_v_5_2_2((z_out_33[4:0]), (z_out_33[5:1]),
      or_dcpl_153);
  assign nl_operator_4_false_acc_nl = conv_s2u_3_4({1'b1 , (~ ColumnStatistic_i_1_2_1_lpi_1_dfm_mx0w0)})
      + ({(ColumnStatistic_i_1_2_1_lpi_1_dfm_mx0w0[0]) , 3'b001});
  assign operator_4_false_acc_nl = nl_operator_4_false_acc_nl[3:0];
  assign sawtooth_loop_2_else_if_if_1_and_nl = (operator_4_false_2_slc_operator_4_false_2_operator_4_false_2_acc_psp_sva_1==2'b01)
      & and_190_m1c;
  assign sawtooth_loop_2_else_if_if_1_and_1_nl = (operator_4_false_2_slc_operator_4_false_2_operator_4_false_2_acc_psp_sva_1==2'b10)
      & and_190_m1c;
  assign sawtooth_loop_2_else_if_if_1_and_2_nl = (operator_4_false_2_slc_operator_4_false_2_operator_4_false_2_acc_psp_sva_1==2'b11)
      & and_190_m1c;
  assign mux_138_nl = MUX_s_1_2_2(ColumnStatistic_mux_44_itm, mux_tmp_31, ColumnStatistic_j_1_3_1_lpi_1_1_0[0]);
  assign mux_137_nl = MUX_s_1_2_2(mux_tmp_31, ColumnStatistic_mux_44_itm, ColumnStatistic_j_1_3_1_lpi_1_1_0[0]);
  assign mux_139_nl = MUX_s_1_2_2(mux_138_nl, mux_137_nl, ColumnStatistic_j_1_3_1_lpi_1_1_0[1]);
  assign nl_lines_write_loop_acc_9_nl = conv_s2u_1_2(lines_write_loop_acc_12_psp_sva_1[1])
      + lines_write_loop_acc_12_psp_sva_1;
  assign lines_write_loop_acc_9_nl = nl_lines_write_loop_acc_9_nl[1:0];
  assign and_191_nl = and_dcpl_147 & and_dcpl_144;
  assign and_192_nl = or_dcpl_153 & and_dcpl_141;
  assign or_452_nl = (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0) | and_dcpl_153;
  assign and_193_nl = ColumnStatistic_mux_44_itm & (~ (lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_1_0[1]));
  assign nor_128_nl = ~(ColumnStatistic_mux_44_itm | (lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_1_0[1]));
  assign padding_inter_loop_padding_inter_loop_and_nl = (i_lpi_1[0]) & (z_out_39_1_0==2'b00);
  assign and_195_nl = ColumnStatistic_mux_44_itm & lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0;
  assign and_196_nl = (~ ColumnStatistic_mux_44_itm) & lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0;
  assign padding_inter_loop_padding_inter_loop_and_3_nl = (z_out_39_1_0[1]) & (~((z_out_39_1_0[0])
      | (i_lpi_1[0])));
  assign and_198_nl = lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0 & (~ sfi_col_loop_if_land_lpi_1)
      & lfst_exitL_exit_sawtooth_loop_1_1_lpi_1;
  assign and_199_nl = or_67_cse & lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0;
  assign abs_1_if_mux_2_nl = MUX_v_12_2_2(abs_rawData_1_sva_mx0w0, abs_rawData_2_1_sva_1,
      sawtooth_loop_2_if_if_1_acc_5_itm_1[12]);
  assign abs_1_if_mux_3_nl = MUX_v_12_2_2((~ abs_rawData_2_1_sva_1), (~ abs_rawData_1_sva_mx0w0),
      sawtooth_loop_2_if_if_1_acc_5_itm_1[12]);
  assign nl_acc_25_nl = ({abs_1_if_mux_2_nl , 1'b1}) + ({abs_1_if_mux_3_nl , 1'b1});
  assign acc_25_nl = nl_acc_25_nl[12:0];
  assign nl_sawtooth_loop_2_if_if_1_acc_nl = ({1'b1 , (readslicef_13_12_1(acc_25_nl))})
      + conv_u2u_12_13({2'b11 , (~ gb_reg_threhold)}) + 13'b0000000000001;
  assign sawtooth_loop_2_if_if_1_acc_nl = nl_sawtooth_loop_2_if_if_1_acc_nl[12:0];
  assign padding_inter_loop_padding_inter_loop_and_1_nl = (z_out_39_1_0[0]) & (~((z_out_39_1_0[1])
      | (i_lpi_1[0])));
  assign or_314_nl = (~ sfi_exit_col_loop_lpi_1) | col_loop_asn_sft_1_lpi_1;
  assign mux_140_nl = MUX_s_1_2_2(nand_37_cse, and_tmp_24, or_314_nl);
  assign mux_141_nl = MUX_s_1_2_2(nand_37_cse, mux_140_nl, lfst_exitL_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1);
  assign mux_142_nl = MUX_s_1_2_2(and_tmp_25, mux_141_nl, nor_15_cse);
  assign mux_143_nl = MUX_s_1_2_2(mux_142_nl, and_tmp_24, row_loop_asn_sft_lpi_1);
  assign mux_144_nl = MUX_s_1_2_2(and_tmp_25, mux_143_nl, lfst_exitL_exit_col_loop_lpi_1);
  assign nor_133_nl = ~(lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_1 | (~ mux_144_nl));
  assign ColumnStatistic_and_3_nl = (~ (operator_4_false_acc_tmp[2])) & ColumnStatistic_mux_44_itm
      & col_loop_and_66_tmp_1 & (~ row_loop_or_tmp_1) & (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_1_1);
  assign padding_outer_loop_mux_57_nl = MUX_v_2_2_2(ColumnStatistic_j_1_3_1_lpi_1_1_0,
      (operator_4_false_acc_tmp[1:0]), ColumnStatistic_and_3_nl);
  assign ColumnStatistic_nand_nl = ~((operator_4_false_acc_tmp[2]) & ColumnStatistic_mux_44_itm
      & col_loop_and_66_tmp_1 & (~ row_loop_or_tmp_1) & (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_1_1));
  assign row_loop_row_loop_or_2_nl = sfi_gb_reg_eb_lpi_1 | exit_row_loop_lpi_1_dfm_1;
  assign padding_outer_loop_mux_62_nl = MUX_s_1_2_2(row_loop_row_loop_or_2_nl, sfi_gb_reg_eb_lpi_1,
      padding_outer_loop_equal_tmp_5);
  assign or_385_nl = row_loop_acc_3_itm_13_1 | (~ exitL_exitL_exit_col_loop_lpi_1);
  assign mux_171_nl = MUX_s_1_2_2(or_385_nl, mux_tmp_169, nor_15_cse);
  assign mux_172_nl = MUX_s_1_2_2(mux_171_nl, mux_tmp_169, row_loop_asn_sft_lpi_1);
  assign mux_173_nl = MUX_s_1_2_2(mux_172_nl, row_loop_acc_3_itm_13_1, or_358_cse);
  assign and_217_nl = exitL_exitL_exit_padding_outer_loop_sva & row_loop_acc_3_itm_13_1;
  assign mux_174_nl = MUX_s_1_2_2(mux_173_nl, and_217_nl, lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_1);
  assign or_361_nl = (~ mux_174_nl) | col_loop_acc_2_itm_13_1;
  assign nl_line_feed_loop_mul_sdt_2_0_sva_1  = (~ k_2_lpi_1) + 3'b001;
  assign padding_inter_loop_padding_inter_loop_and_2_nl = (z_out_39_1_0[0]) & (i_lpi_1[0])
      & (~ (z_out_39_1_0[1]));
  assign nl_operator_13_false_3_acc_nl = ({1'b1 , (~ col_lpi_1_dfm_1)}) + 14'b00000000000011;
  assign operator_13_false_3_acc_nl = nl_operator_13_false_3_acc_nl[13:0];
  assign nl_operator_13_false_2_acc_nl = ({1'b1 , (~ (row_lpi_1_dfm_1[12:2]))}) +
      12'b000000000001;
  assign operator_13_false_2_acc_nl = nl_operator_13_false_2_acc_nl[11:0];
  assign col_loop_if_if_1_col_loop_if_if_1_or_nl = ((readslicef_14_1_13(operator_13_false_3_acc_nl))
      & (row_lpi_1_dfm_1[1:0]==2'b11)) | (readslicef_12_1_11(operator_13_false_2_acc_nl));
  assign padding_inter_loop_padding_inter_loop_nor_nl = ~((z_out_39_1_0!=2'b00) |
      (i_lpi_1[0]));
  assign col_loop_if_and_1_nl = exit_sawtooth_loop_1_pmx_lpi_1_dfm_mx0 & col_loop_if_asn_sft_lpi_1;
  assign line_feed_loop_line_feed_loop_and_2_nl = (z_out_39_1_0[0]) & (col_lpi_1_dfm_1[0])
      & (~ (z_out_39_1_0[1]));
  assign col_loop_if_and_nl = (~ exit_sawtooth_loop_1_pmx_lpi_1_dfm_mx0) & col_loop_if_asn_sft_lpi_1;
  assign line_feed_loop_line_feed_loop_nor_2_nl = ~((z_out_39_1_0!=2'b00) | (col_lpi_1_dfm_1[0]));
  assign padding_inter_loop_padding_inter_loop_and_4_nl = (z_out_39_1_0[1]) & (i_lpi_1[0])
      & (~ (z_out_39_1_0[0]));
  assign col_loop_if_if_1_and_nl = lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_st_2_2
      & dst_rsci_idat_mx0c2;
  assign col_loop_if_if_1_and_1_nl = exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_dfm_st_2
      & dst_rsci_idat_mx0c2;
  assign col_loop_if_if_1_and_2_nl = col_loop_if_asn_sft_lpi_1_st_2 & dst_rsci_idat_mx0c2;
  assign col_loop_if_if_1_and_3_nl = col_loop_if_if_1_col_loop_if_if_1_or_itm_2 &
      dst_rsci_idat_mx0c2;
  assign col_loop_if_if_1_and_4_nl = col_loop_if_not_56_itm_2 & dst_rsci_idat_mx0c2;
  assign col_loop_if_if_1_and_5_nl = exit_sawtooth_loop_1_pmx_lpi_1_dfm_st_2 & dst_rsci_idat_mx0c2;
  assign or_399_nl = sawtooth_loop_1_and_69_rgt | (~ (z_out_36_3_1[2]));
  assign sawtooth_loop_1_sawtooth_loop_1_out_window_loop_not_3_nl = ~ exit_out_window_loop_lpi_1_dfm_3;
  assign out_window_loop_out_window_loop_and_1_nl = MUX_v_3_2_2(3'b000, k_2_lpi_1,
      sawtooth_loop_1_sawtooth_loop_1_out_window_loop_not_3_nl);
  assign or_400_nl = ColumnStatistic_and_1_rgt | (~ operator_4_false_2_acc_itm_2_1);
  assign lines_write_loop_lines_write_loop_or_nl = sfi_col_loop_if_land_lpi_1 | (~
      operator_3_false_3_acc_itm_2_1);
  assign sawtooth_loop_1_mux_38_nl = MUX_s_1_2_2(sfi_col_loop_if_land_lpi_1, lines_write_loop_lines_write_loop_or_nl,
      sawtooth_loop_1_equal_tmp_5);
  assign nl_operator_13_false_1_acc_nl = ({1'b1 , (~ (col_lpi_1_dfm_1[12:1]))}) +
      13'b0000000000011;
  assign operator_13_false_1_acc_nl = nl_operator_13_false_1_acc_nl[12:0];
  assign nl_operator_13_false_acc_nl = ({1'b1 , (~ (row_lpi_1_dfm_1[12:1]))}) + 13'b0000000000011;
  assign operator_13_false_acc_nl = nl_operator_13_false_acc_nl[12:0];
  assign padding_outer_loop_not_nl = ~ operator_3_false_5_acc_tmp_2;
  assign padding_inter_loop_padding_inter_loop_and_7_nl = MUX_v_13_2_2(13'b0000000000000,
      i_lpi_1, padding_outer_loop_not_nl);
  assign operator_4_false_10_mux_3_nl = MUX_v_2_2_2(ColumnStatistic_i_1_2_1_lpi_1_dfm_mx0w0,
      ColumnStatistic_i_2_1_lpi_1_dfm_mx0w1, or_dcpl_153);
  assign operator_4_false_10_mux_4_nl = MUX_v_3_2_2((signext_3_2(z_out_47[1:0])),
      (z_out_37[3:1]), or_dcpl_153);
  assign nl_z_out = ({operator_4_false_10_mux_3_nl , 3'b001}) + conv_s2u_3_5(operator_4_false_10_mux_4_nl);
  assign z_out = nl_z_out[4:0];
  assign sawtooth_loop_2_else_else_if_2_sawtooth_loop_2_else_else_if_2_mux_1_nl =
      MUX_v_6_2_2(ColumnStatistic_count_total_mux_5_cse, ColumnStatistic_count_total_mux_cse,
      sawtooth_loop_4_if_3_or_5_cse);
  assign nl_z_out_3 = sawtooth_loop_2_else_else_if_2_sawtooth_loop_2_else_else_if_2_mux_1_nl
      + 6'b000001;
  assign z_out_3 = nl_z_out_3[5:0];
  assign sawtooth_loop_2_if_if_mux1h_11_nl = MUX1HOT_v_12_4_2(abs_rawData_1_sva_1,
      abs_rawData_1_2_sva_1, abs_rawData_1_4_sva_1, abs_rawData_1_8_sva_1, {and_280_cse
      , and_282_cse , and_283_cse , (~ col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1)});
  assign sawtooth_loop_2_if_if_or_5_nl = and_282_cse | and_283_cse;
  assign sawtooth_loop_2_if_if_mux1h_12_nl = MUX1HOT_v_12_3_2((~ abs_rawData_2_sva_1),
      (~ abs_rawData_1_sva_1), (~ abs_rawData_2_10_sva_1), {and_280_cse , sawtooth_loop_2_if_if_or_5_nl
      , (~ col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1)});
  assign nl_acc_11_nl = ({1'b1 , sawtooth_loop_2_if_if_mux1h_11_nl , 1'b1}) + conv_u2u_13_14({sawtooth_loop_2_if_if_mux1h_12_nl
      , 1'b1});
  assign acc_11_nl = nl_acc_11_nl[13:0];
  assign z_out_11 = readslicef_14_13_1(acc_11_nl);
  assign abs_4_if_or_2_nl = and_dcpl_231 | and_dcpl_233;
  assign abs_4_if_mux1h_2_nl = MUX1HOT_v_12_3_2(abs_rawData_1_4_sva_1, z_out_31,
      abs_rawData_1_8_sva_1, {and_dcpl_230 , abs_4_if_or_2_nl , and_dcpl_232});
  assign abs_4_if_or_3_nl = and_dcpl_230 | and_dcpl_232;
  assign abs_4_if_mux1h_3_nl = MUX1HOT_v_12_3_2((~ z_out_31), (~ abs_rawData_1_4_sva_1),
      (~ abs_rawData_1_8_sva_1), {abs_4_if_or_3_nl , and_dcpl_231 , and_dcpl_233});
  assign nl_acc_22_nl = ({abs_4_if_mux1h_2_nl , 1'b1}) + ({abs_4_if_mux1h_3_nl ,
      1'b1});
  assign acc_22_nl = nl_acc_22_nl[12:0];
  assign nl_acc_12_nl = ({1'b1 , (readslicef_13_12_1(acc_22_nl)) , 1'b1}) + conv_u2u_13_14({2'b11
      , (~ gb_reg_threhold) , 1'b1});
  assign acc_12_nl = nl_acc_12_nl[13:0];
  assign z_out_12_12 = readslicef_14_1_13(acc_12_nl);
  assign abs_5_if_or_2_nl = and_dcpl_227 | and_dcpl_229;
  assign abs_5_if_mux1h_2_nl = MUX1HOT_v_12_3_2(abs_rawData_1_4_sva_1, z_out_32,
      abs_rawData_1_8_sva_1, {and_dcpl_226 , abs_5_if_or_2_nl , and_dcpl_228});
  assign abs_5_if_or_3_nl = and_dcpl_226 | and_dcpl_228;
  assign abs_5_if_mux1h_3_nl = MUX1HOT_v_12_3_2((~ z_out_32), (~ abs_rawData_1_4_sva_1),
      (~ abs_rawData_1_8_sva_1), {abs_5_if_or_3_nl , and_dcpl_227 , and_dcpl_229});
  assign nl_acc_20_nl = ({abs_5_if_mux1h_2_nl , 1'b1}) + ({abs_5_if_mux1h_3_nl ,
      1'b1});
  assign acc_20_nl = nl_acc_20_nl[12:0];
  assign nl_acc_13_nl = ({1'b1 , (readslicef_13_12_1(acc_20_nl)) , 1'b1}) + conv_u2u_13_14({2'b11
      , (~ gb_reg_threhold) , 1'b1});
  assign acc_13_nl = nl_acc_13_nl[13:0];
  assign z_out_13_12 = readslicef_14_1_13(acc_13_nl);
  assign nl_acc_14_nl = ({1'b1 , sawtooth_loop_2_else_else_if_mux_18_itm , 1'b1})
      + conv_u2u_13_14({(~ z_out_31) , 1'b1});
  assign acc_14_nl = nl_acc_14_nl[13:0];
  assign z_out_14 = readslicef_14_13_1(acc_14_nl);
  assign nl_acc_15_nl = ({1'b1 , sawtooth_loop_2_else_else_if_mux_18_itm , 1'b1})
      + conv_u2u_13_14({(~ z_out_32) , 1'b1});
  assign acc_15_nl = nl_acc_15_nl[13:0];
  assign z_out_15 = readslicef_14_13_1(acc_15_nl);
  assign abs_if_or_2_nl = and_dcpl_212 | and_dcpl_219 | and_dcpl_223;
  assign abs_if_mux1h_2_nl = MUX1HOT_v_12_6_2(abs_rawData_1_sva_1, abs_rawData_2_sva_1,
      abs_rawData_1_2_sva_1, abs_rawData_1_4_sva_1, abs_rawData_1_8_sva_1, abs_rawData_2_10_sva_1,
      {abs_if_or_2_nl , and_dcpl_214 , and_dcpl_217 , and_dcpl_221 , and_dcpl_224
      , and_dcpl_225});
  assign abs_if_or_3_nl = and_dcpl_214 | and_dcpl_217 | and_dcpl_221;
  assign abs_if_mux1h_3_nl = MUX1HOT_v_12_6_2((~ abs_rawData_2_sva_1), (~ abs_rawData_1_sva_1),
      (~ abs_rawData_1_2_sva_1), (~ abs_rawData_1_4_sva_1), (~ abs_rawData_2_10_sva_1),
      (~ abs_rawData_1_8_sva_1), {and_dcpl_212 , abs_if_or_3_nl , and_dcpl_219 ,
      and_dcpl_223 , and_dcpl_224 , and_dcpl_225});
  assign nl_acc_18_nl = ({abs_if_mux1h_2_nl , 1'b1}) + ({abs_if_mux1h_3_nl , 1'b1});
  assign acc_18_nl = nl_acc_18_nl[12:0];
  assign nl_acc_16_nl = ({1'b1 , (readslicef_13_12_1(acc_18_nl)) , 1'b1}) + conv_u2u_13_14({2'b11
      , (~ gb_reg_threhold) , 1'b1});
  assign acc_16_nl = nl_acc_16_nl[13:0];
  assign z_out_16_12 = readslicef_14_1_13(acc_16_nl);
  assign nor_146_nl = ~(lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_1 | (~((~((~
      lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0) | exitL_exitL_exit_col_loop_lpi_1
      | exitL_exitL_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1 | (~ lfst_exit_col_loop_lpi_1)
      | (~ lfst_exitL_exit_col_loop_lpi_1))) | col_loop_acc_2_itm_13_1)));
  assign mux_180_nl = MUX_s_1_2_2(nor_146_nl, col_loop_acc_2_itm_13_1, exitL_exitL_exit_padding_outer_loop_sva);
  assign nor_149_nl = ~((~((~((~(nand_39_itm | exitL_exitL_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1
      | exitL_exitL_exit_col_loop_lpi_1 | (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0)))
      | lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_1)) | exitL_exitL_exit_padding_outer_loop_sva))
      | col_loop_acc_2_itm_13_1);
  assign col_loop_mux1h_5_nl = MUX1HOT_v_13_3_2(col_lpi_1_dfm_1, i_lpi_1, row_lpi_1_dfm_1,
      {mux_180_nl , lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_1_1 , nor_149_nl});
  assign nl_z_out_26 = col_loop_mux1h_5_nl + 13'b0000000000001;
  assign z_out_26 = nl_z_out_26[12:0];
  assign sawtooth_loop_2_if_if_nand_1_nl = ~((~((ColumnStatistic_j_1_3_1_lpi_1_dfm_1_1_0[1])
      ^ (ColumnStatistic_j_1_3_1_lpi_1_dfm_1_1_0[0]))) & col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1);
  assign sawtooth_loop_2_if_if_sawtooth_loop_2_if_if_mux_1_nl = MUX_v_13_2_2(z_out_11,
      z_out_14, sawtooth_loop_2_if_if_nand_1_nl);
  assign nl_z_out_27 = ColumnStatistic_sum_total_1_lpi_1_dfm_1 + conv_s2u_13_31(sawtooth_loop_2_if_if_sawtooth_loop_2_if_if_mux_1_nl);
  assign z_out_27 = nl_z_out_27[30:0];
  assign operator_4_false_13_mux_3_nl = MUX_v_6_2_2((signext_6_5(z_out_38[4:0])),
      ({z_out_44 , 1'b1}), or_dcpl_153);
  assign operator_4_false_13_operator_4_false_13_and_1_nl = (ColumnStatistic_j_2_1_lpi_1_dfm_2[1])
      & or_dcpl_153;
  assign operator_4_false_13_mux_4_nl = MUX_s_1_2_2((ColumnStatistic_j_1_3_1_lpi_1_dfm_1_0_mx0w0[1]),
      (ColumnStatistic_j_2_1_lpi_1_dfm_2[0]), or_dcpl_153);
  assign operator_4_false_13_operator_4_false_13_or_1_nl = (ColumnStatistic_j_1_3_1_lpi_1_dfm_1_0_mx0w0[0])
      | or_dcpl_153;
  assign nl_z_out_33 = operator_4_false_13_mux_3_nl + ({1'b1 , (~ or_dcpl_153) ,
      1'b0 , operator_4_false_13_operator_4_false_13_and_1_nl , operator_4_false_13_mux_4_nl
      , operator_4_false_13_operator_4_false_13_or_1_nl});
  assign z_out_33 = nl_z_out_33[5:0];
  assign operator_4_false_12_operator_4_false_12_and_4_nl = (z_out_46[1]) & operator_4_false_12_nor_2_itm;
  assign operator_4_false_12_mux_6_nl = MUX_s_1_2_2((z_out_46[1]), (z_out_46[0]),
      and_dcpl_257);
  assign operator_4_false_12_operator_4_false_12_and_5_nl = operator_4_false_12_mux_6_nl
      & operator_4_false_12_nor_2_itm;
  assign operator_4_false_12_mux_7_nl = MUX_s_1_2_2((z_out_46[0]), (z_out_42[3]),
      operator_4_false_12_or_itm);
  assign operator_4_false_12_operator_4_false_12_or_3_nl = operator_4_false_12_mux_7_nl
      | and_dcpl_257;
  assign operator_4_false_12_mux1h_5_nl = MUX1HOT_v_3_3_2(({1'b1 , (~ operator_4_false_2_slc_operator_4_false_2_operator_4_false_2_acc_psp_sva_1)}),
      ({(~ operator_4_false_16_slc_operator_4_false_16_operator_4_false_16_acc_psp_sva_1)
      , 1'b1}), (z_out_42[2:0]), {and_dcpl_256 , and_dcpl_257 , operator_4_false_12_or_itm});
  assign operator_4_false_12_mux_8_nl = MUX_s_1_2_2((line_feed_loop_line_feed_loop_conc_1_idiv_14_12_sva_1[2]),
      (z_out_47[2]), lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_1);
  assign operator_4_false_12_operator_4_false_12_nor_2_nl = ~(operator_4_false_12_mux_8_nl
      | and_dcpl_256 | and_dcpl_257);
  assign operator_4_false_12_operator_4_false_12_or_4_nl = (~ and_dcpl_257) | and_dcpl_256
      | nor_135_cse | lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_1;
  assign operator_4_false_12_operator_4_false_12_or_5_nl = (~(and_dcpl_256 | and_dcpl_257))
      | nor_135_cse | lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_1;
  assign operator_4_false_12_operator_4_false_12_and_6_nl = (ColumnStatistic_j_2_1_lpi_1_dfm_2[1])
      & (~(and_dcpl_256 | nor_135_cse | lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_1));
  assign operator_4_false_12_mux_9_nl = MUX_s_1_2_2((ColumnStatistic_j_1_3_1_lpi_1_dfm_1_0_mx0w0[1]),
      (ColumnStatistic_j_2_1_lpi_1_dfm_2[0]), and_dcpl_257);
  assign operator_4_false_12_operator_4_false_12_and_7_nl = operator_4_false_12_mux_9_nl
      & operator_4_false_12_nor_2_itm;
  assign operator_4_false_12_mux1h_6_nl = MUX1HOT_s_1_3_2((ColumnStatistic_j_1_3_1_lpi_1_dfm_1_0_mx0w0[0]),
      (col_lpi_1_dfm_1[1]), (i_lpi_1[1]), {and_dcpl_256 , nor_135_cse , lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_1});
  assign operator_4_false_12_or_4_nl = operator_4_false_12_mux1h_6_nl | and_dcpl_257;
  assign nl_acc_32_nl = ({operator_4_false_12_operator_4_false_12_and_4_nl , operator_4_false_12_operator_4_false_12_and_5_nl
      , operator_4_false_12_operator_4_false_12_or_3_nl , operator_4_false_12_mux1h_5_nl
      , operator_4_false_12_operator_4_false_12_nor_2_nl}) + ({1'b1 , operator_4_false_12_operator_4_false_12_or_4_nl
      , operator_4_false_12_operator_4_false_12_or_5_nl , operator_4_false_12_operator_4_false_12_and_6_nl
      , operator_4_false_12_operator_4_false_12_and_7_nl , operator_4_false_12_or_4_nl
      , 1'b1});
  assign acc_32_nl = nl_acc_32_nl[6:0];
  assign z_out_34 = readslicef_7_6_1(acc_32_nl);
  assign sawtooth_loop_4_if_mux_3_nl = MUX_v_3_2_2(({(~ ColumnStatistic_i_2_1_lpi_1_dfm_mx0w1)
      , 1'b0}), (z_out_44[2:0]), or_dcpl_230);
  assign sawtooth_loop_4_if_sawtooth_loop_4_if_nand_1_nl = ~(or_dcpl_230 & (~((~
      (lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_1_0[0])) & lfst_exitL_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1
      & (~ sfi_exit_col_loop_lpi_1) & lfst_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1
      & (~(sfi_gb_reg_eb_1_lpi_1 | (lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_1_0[1])))
      & lfst_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1_2 & lfst_exitL_exit_col_loop_lpi_1
      & lfst_exit_col_loop_lpi_1 & (~ exitL_exitL_exitL_exitL_exitL_exit_sawtooth_loop_1_1_lpi_1)
      & (~ exitL_exitL_exit_col_loop_lpi_1) & lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0
      & (~ exitL_exitL_exit_padding_outer_loop_sva))));
  assign not_1111_nl = ~ or_dcpl_230;
  assign sawtooth_loop_4_if_sawtooth_loop_4_if_and_1_nl = MUX_v_2_2_2(2'b00, ColumnStatistic_j_2_1_lpi_1_dfm_2,
      not_1111_nl);
  assign nl_acc_34_nl = ({1'b1 , sawtooth_loop_4_if_mux_3_nl , sawtooth_loop_4_if_sawtooth_loop_4_if_nand_1_nl})
      + ({(~ or_dcpl_230) , sawtooth_loop_4_if_sawtooth_loop_4_if_and_1_nl , 2'b11});
  assign acc_34_nl = nl_acc_34_nl[4:0];
  assign z_out_36_3_1 = readslicef_5_3_2(acc_34_nl);
  assign line_feed_loop_line_feed_loop_mux_43_nl = MUX_s_1_2_2((~ (i_lpi_1[4])),
      (~ (col_lpi_1_dfm_1[4])), lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0);
  assign line_feed_loop_line_feed_loop_mux_44_nl = MUX_v_2_2_2((z_out_34[3:2]), (lines_write_loop_acc_10_psp_sva_1[3:2]),
      and_dcpl_182);
  assign nl_acc_33_nl = conv_u2u_4_5({line_feed_loop_mux1h_15_cse , 1'b1 , line_feed_loop_line_feed_loop_mux_43_nl
      , line_feed_loop_mux1h_15_cse}) + conv_s2u_3_5({line_feed_loop_line_feed_loop_mux_44_nl
      , 1'b1});
  assign acc_33_nl = nl_acc_33_nl[4:0];
  assign line_feed_loop_line_feed_loop_mux_45_nl = MUX_v_4_2_2((readslicef_5_4_1(acc_33_nl)),
      ({1'b1 , (~ ColumnStatistic_i_2_1_lpi_1_dfm_mx0w1) , 1'b1}), and_dcpl_277);
  assign line_feed_loop_line_feed_loop_mux_46_nl = MUX_s_1_2_2((z_out_34[1]), (lines_write_loop_acc_10_psp_sva_1[1]),
      and_dcpl_182);
  assign line_feed_loop_and_29_nl = line_feed_loop_line_feed_loop_mux_46_nl & (~
      and_dcpl_277);
  assign line_feed_loop_mux1h_114_nl = MUX1HOT_s_1_4_2((line_feed_loop_line_feed_loop_conc_1_idiv_14_12_sva_1[1]),
      (lines_write_loop_lines_write_loop_conc_idiv_14_12_sva_1[1]), (z_out_47[1]),
      (ColumnStatistic_j_2_1_lpi_1_dfm_2[1]), {and_dcpl_274 , and_dcpl_182 , (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0)
      , and_dcpl_277});
  assign line_feed_loop_line_feed_loop_and_9_nl = (ColumnStatistic_j_2_1_lpi_1_dfm_2[0])
      & (~(and_dcpl_274 | and_dcpl_182 | (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0)));
  assign line_feed_loop_line_feed_loop_mux_47_nl = MUX_s_1_2_2((i_lpi_1[2]), (col_lpi_1_dfm_1[2]),
      lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0);
  assign line_feed_loop_or_46_nl = line_feed_loop_line_feed_loop_mux_47_nl | and_dcpl_277;
  assign nl_acc_35_nl = ({line_feed_loop_line_feed_loop_mux_45_nl , line_feed_loop_and_29_nl})
      + conv_u2u_4_5({line_feed_loop_mux1h_114_nl , line_feed_loop_line_feed_loop_and_9_nl
      , line_feed_loop_or_46_nl , 1'b1});
  assign acc_35_nl = nl_acc_35_nl[4:0];
  assign z_out_37 = readslicef_5_4_1(acc_35_nl);
  assign line_feed_loop_mux1h_115_nl = MUX1HOT_s_1_4_2((~ (line_feed_loop_line_feed_loop_conc_1_idiv_14_12_sva_1[2])),
      (~ (lines_write_loop_lines_write_loop_conc_idiv_14_12_sva_1[2])), (~ (z_out_47[2])),
      (operator_4_false_2_slc_operator_4_false_2_operator_4_false_2_acc_psp_sva_1[1]),
      {and_dcpl_274 , and_dcpl_182 , (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0)
      , and_dcpl_277});
  assign line_feed_loop_line_feed_loop_or_2_nl = (operator_4_false_2_slc_operator_4_false_2_operator_4_false_2_acc_psp_sva_1[0])
      | and_dcpl_274 | and_dcpl_182 | (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0);
  assign line_feed_loop_line_feed_loop_nor_16_nl = ~(line_feed_loop_line_feed_loop_mux_11_cse
      | and_dcpl_277);
  assign line_feed_loop_line_feed_loop_or_3_nl = (~ and_dcpl_277) | and_dcpl_274
      | and_dcpl_182 | (~ lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0);
  assign line_feed_loop_line_feed_loop_mux_48_nl = MUX_s_1_2_2((~ (i_lpi_1[6])),
      (~ (col_lpi_1_dfm_1[6])), lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_0);
  assign line_feed_loop_or_47_nl = line_feed_loop_line_feed_loop_mux_48_nl | and_dcpl_277;
  assign line_feed_loop_line_feed_loop_mux_49_nl = MUX_s_1_2_2((z_out_40[1]), (lines_write_loop_acc_11_psp_sva_1[1]),
      and_dcpl_182);
  assign line_feed_loop_and_30_nl = line_feed_loop_line_feed_loop_mux_49_nl & (~
      and_dcpl_277);
  assign line_feed_loop_line_feed_loop_mux_50_nl = MUX_v_4_2_2(z_out_37, ({2'b11
      , (~ operator_4_false_2_slc_operator_4_false_2_operator_4_false_2_acc_psp_sva_1)}),
      and_dcpl_277);
  assign nl_acc_36_nl = conv_u2u_6_7({line_feed_loop_mux1h_115_nl , line_feed_loop_line_feed_loop_or_2_nl
      , line_feed_loop_line_feed_loop_nor_16_nl , line_feed_loop_line_feed_loop_or_3_nl
      , line_feed_loop_or_47_nl , line_feed_loop_and_30_nl}) + conv_u2u_5_7({line_feed_loop_line_feed_loop_mux_50_nl
      , 1'b1});
  assign acc_36_nl = nl_acc_36_nl[6:0];
  assign z_out_38 = readslicef_7_6_1(acc_36_nl);
  assign nl_z_out_39_1_0 = conv_s2u_1_2(z_out_45_1_0[1]) + z_out_45_1_0;
  assign z_out_39_1_0 = nl_z_out_39_1_0[1:0];
  assign nl_line_feed_loop_acc_40_nl = conv_s2s_1_2(z_out_34[1]) + conv_u2s_1_2(z_out_34[0]);
  assign line_feed_loop_acc_40_nl = nl_line_feed_loop_acc_40_nl[1:0];
  assign nl_z_out_40 = conv_s2u_2_3(line_feed_loop_acc_40_nl) + conv_s2u_2_3(z_out_34[3:2]);
  assign z_out_40 = nl_z_out_40[2:0];
  assign operator_4_false_17_mux_2_nl = MUX_v_2_2_2(ColumnStatistic_i_2_1_lpi_1_dfm_mx0w1,
      ColumnStatistic_i_1_2_1_lpi_1_dfm_mx0w0, and_dcpl_284);
  assign operator_4_false_17_mux_3_nl = MUX_s_1_2_2((z_out_37[3]), (z_out_47[1]),
      and_dcpl_284);
  assign nl_z_out_41 = operator_4_false_17_mux_2_nl + conv_s2u_1_2(operator_4_false_17_mux_3_nl);
  assign z_out_41 = nl_z_out_41[1:0];
  assign nl_padding_inter_loop_acc_34_nl = conv_u2u_1_2(i_lpi_1[3]) + conv_u2u_1_2(~
      (i_lpi_1[4])) + conv_u2u_1_2(~ (i_lpi_1[10]));
  assign padding_inter_loop_acc_34_nl = nl_padding_inter_loop_acc_34_nl[1:0];
  assign nl_padding_inter_loop_acc_35_nl = conv_u2u_1_2(i_lpi_1[5]) + conv_u2u_1_2(~
      (i_lpi_1[6])) + conv_u2u_1_2(i_lpi_1[9]);
  assign padding_inter_loop_acc_35_nl = nl_padding_inter_loop_acc_35_nl[1:0];
  assign nl_padding_inter_loop_acc_33_nl = conv_u2u_2_3(padding_inter_loop_acc_34_nl)
      + conv_u2u_2_3(padding_inter_loop_acc_35_nl) + conv_u2u_1_3(~ (z_out_47[0]));
  assign padding_inter_loop_acc_33_nl = nl_padding_inter_loop_acc_33_nl[2:0];
  assign line_feed_loop_mux_25_nl = MUX_v_3_2_2(z_out_46, padding_inter_loop_acc_33_nl,
      lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_1);
  assign line_feed_loop_mux_26_nl = MUX_s_1_2_2((line_feed_loop_line_feed_loop_conc_1_idiv_14_12_sva_1[1]),
      (z_out_47[1]), lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_1);
  assign nl_padding_inter_loop_acc_37_nl = conv_u2u_1_2(i_lpi_1[7]) + conv_u2u_1_2(~
      (i_lpi_1[8])) + 2'b01;
  assign padding_inter_loop_acc_37_nl = nl_padding_inter_loop_acc_37_nl[1:0];
  assign nl_padding_inter_loop_acc_36_nl = conv_u2u_2_3(padding_inter_loop_acc_37_nl)
      + conv_u2u_1_3(~ (i_lpi_1[2])) + conv_u2u_1_3(i_lpi_1[11]);
  assign padding_inter_loop_acc_36_nl = nl_padding_inter_loop_acc_36_nl[2:0];
  assign line_feed_loop_mux_27_nl = MUX_v_3_2_2(line_feed_loop_acc_39, padding_inter_loop_acc_36_nl,
      lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_1);
  assign nl_acc_40_nl = conv_u2u_4_5({line_feed_loop_mux_25_nl , line_feed_loop_mux_26_nl})
      + conv_u2u_4_5({line_feed_loop_mux_27_nl , 1'b1});
  assign acc_40_nl = nl_acc_40_nl[4:0];
  assign z_out_42 = readslicef_5_4_1(acc_40_nl);
  assign operator_3_false_mux_3_nl = MUX_v_2_2_2((~ (k_1_lpi_1_dfm_1[2:1])), (~ ColumnStatistic_i_1_2_1_lpi_1_dfm_mx0w0),
      and_dcpl_294);
  assign operator_3_false_mux_4_nl = MUX_v_2_2_2(2'b01, ColumnStatistic_j_1_3_1_lpi_1_dfm_1_0_mx0w0,
      and_dcpl_294);
  assign nl_z_out_43 = ({1'b1 , operator_3_false_mux_3_nl}) + ({and_dcpl_294 , operator_3_false_mux_4_nl});
  assign z_out_43 = nl_z_out_43[2:0];
  assign not_1120_nl = ~ or_dcpl_230;
  assign operator_4_false_21_operator_4_false_21_and_1_nl = MUX_v_2_2_2(2'b00, operator_4_false_16_slc_operator_4_false_16_operator_4_false_16_acc_psp_sva_1,
      not_1120_nl);
  assign operator_4_false_21_mux_2_nl = MUX_v_3_2_2(3'b001, k_1_lpi_1_dfm_1, or_dcpl_230);
  assign operator_4_false_21_mux_3_nl = MUX_v_2_2_2((~ operator_4_false_16_slc_operator_4_false_16_operator_4_false_16_acc_psp_sva_1),
      2'b01, or_dcpl_230);
  assign nl_z_out_44 = ({operator_4_false_21_operator_4_false_21_and_1_nl , operator_4_false_21_mux_2_nl})
      + conv_u2u_4_5(signext_4_3({(~ or_dcpl_230) , operator_4_false_21_mux_3_nl}));
  assign z_out_44 = nl_z_out_44[4:0];
  assign nl_acc_43_nl = ({1'b1 , (z_out_40[0]) , (~ (z_out_40[2]))}) + conv_u2u_2_3({(~
      (z_out_40[1])) , 1'b1});
  assign acc_43_nl = nl_acc_43_nl[2:0];
  assign z_out_45_1_0 = readslicef_3_2_1(acc_43_nl);
  assign operator_4_false_12_mux1h_7_nl = MUX1HOT_v_2_4_2(operator_4_false_2_slc_operator_4_false_2_operator_4_false_2_acc_psp_sva_1,
      operator_4_false_16_slc_operator_4_false_16_operator_4_false_16_acc_psp_sva_1,
      k_4_1_0_lpi_1_dfm_1, line_feed_loop_acc_33, {and_dcpl_310 , and_dcpl_311 ,
      and_dcpl_312 , nor_135_cse});
  assign operator_4_false_12_operator_4_false_12_nor_3_nl = ~((line_feed_loop_line_feed_loop_conc_1_idiv_14_12_sva_1[0])
      | and_dcpl_310 | and_dcpl_311 | and_dcpl_312);
  assign operator_4_false_12_operator_4_false_12_mux_1_nl = MUX_v_2_2_2(2'b01, line_feed_loop_acc_35,
      nor_135_cse);
  assign nl_acc_44_nl = conv_u2u_3_4({operator_4_false_12_mux1h_7_nl , operator_4_false_12_operator_4_false_12_nor_3_nl})
      + conv_u2u_3_4({operator_4_false_12_operator_4_false_12_mux_1_nl , 1'b1});
  assign acc_44_nl = nl_acc_44_nl[3:0];
  assign z_out_46 = readslicef_4_3_1(acc_44_nl);
  assign operator_4_false_9_mux_3_nl = MUX_v_2_2_2((~ ColumnStatistic_i_1_2_1_lpi_1_dfm_mx0w0),
      ({1'b1 , (i_lpi_1[12])}), lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_1);
  assign operator_4_false_9_mux_4_nl = MUX_v_2_2_2(ColumnStatistic_j_1_3_1_lpi_1_dfm_1_0_mx0w0,
      k_1_0_lpi_1, lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_1);
  assign nl_acc_45_nl = conv_u2u_3_4({operator_4_false_9_mux_3_nl , lfst_exitL_exit_padding_outer_loop_lpi_1_dfm_3_1})
      + conv_u2u_3_4({operator_4_false_9_mux_4_nl , 1'b1});
  assign acc_45_nl = nl_acc_45_nl[3:0];
  assign z_out_47 = readslicef_4_3_1(acc_45_nl);
  assign sawtooth_loop_2_else_else_if_mux_20_nl = MUX_v_12_2_2(gb_block_0_0_lpi_1,
      gb_block_0_1_lpi_1, col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1);
  assign sawtooth_loop_2_else_else_if_mux_21_nl = MUX_v_12_2_2(gb_block_0_2_lpi_1,
      gb_block_0_3_lpi_1, col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1);
  assign sawtooth_loop_2_else_else_if_mux_22_nl = MUX_v_12_2_2(gb_block_2_4_lpi_1,
      gb_block_2_5_lpi_1, col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1);
  assign sawtooth_loop_2_else_else_if_mux_23_nl = MUX_v_12_2_2(gb_block_4_6_lpi_1_mx0,
      gb_block_5_0_lpi_1, col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1);
  assign sawtooth_loop_2_else_else_if_mux_24_nl = MUX_v_2_2_2(ColumnStatistic_j_1_3_1_lpi_1_dfm_1_1_0,
      greenbalance2_label0_acc_cse_sva_1, col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1);
  assign sawtooth_loop_2_else_else_if_mux_25_nl = MUX_v_3_2_2(sawtooth_loop_2_else_else_if_acc_itm_1,
      operator_4_false_9_acc_itm_1_2_0, col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1);
  assign z_out_31 = MUX_v_12_18_2x3x4x5x11x12x13(sawtooth_loop_2_else_else_if_mux_20_nl,
      sawtooth_loop_2_else_else_if_mux_21_nl, gb_block_0_4_lpi_1, sawtooth_loop_2_else_else_if_mux_12_cse,
      sawtooth_loop_2_else_else_if_mux_11_cse, sawtooth_loop_2_else_else_if_mux_10_cse,
      sawtooth_loop_2_else_else_if_mux_22_nl, gb_block_2_6_lpi_1_mx0, sawtooth_loop_2_else_else_if_mux_8_cse,
      sawtooth_loop_2_else_else_if_mux_7_cse, sawtooth_loop_2_else_else_if_mux_6_cse,
      sawtooth_loop_2_else_else_if_mux_23_nl, {sawtooth_loop_2_else_else_if_mux_24_nl
      , sawtooth_loop_2_else_else_if_mux_25_nl});
  assign sawtooth_loop_2_else_else_if_1_mux_21_nl = MUX_v_12_2_2(gb_block_1_3_lpi_1,
      gb_block_1_4_lpi_1, col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1);
  assign sawtooth_loop_2_else_else_if_1_mux_22_nl = MUX_v_12_2_2(gb_block_3_5_lpi_1,
      gb_block_3_6_lpi_1_mx0, col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1);
  assign sawtooth_loop_2_else_else_if_1_mux_23_nl = MUX_v_12_2_2(gb_block_6_0_lpi_1,
      gb_block_6_1_lpi_1, col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1);
  assign sawtooth_loop_2_else_else_if_1_mux_24_nl = MUX_v_12_2_2(gb_block_6_2_lpi_1,
      gb_block_6_3_lpi_1, col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1);
  assign sawtooth_loop_2_else_else_if_1_mux_25_nl = MUX_v_12_2_2(gb_block_6_4_lpi_1,
      gb_block_6_5_lpi_1, col_loop_if_if_col_loop_if_if_xor_sft_lpi_1_dfm_1);
  assign z_out_32 = MUX_v_12_25_2x0x1x2x3x4x10x11x12x18x19x20(sawtooth_loop_2_else_else_if_1_mux_21_nl,
      sawtooth_loop_2_else_else_if_mux_12_cse, sawtooth_loop_2_else_else_if_mux_11_cse,
      sawtooth_loop_2_else_else_if_mux_10_cse, gb_block_2_4_lpi_1, sawtooth_loop_2_else_else_if_1_mux_22_nl,
      sawtooth_loop_2_else_else_if_mux_8_cse, sawtooth_loop_2_else_else_if_mux_7_cse,
      sawtooth_loop_2_else_else_if_mux_6_cse, gb_block_4_6_lpi_1_mx0, sawtooth_loop_2_else_else_if_1_mux_23_nl,
      sawtooth_loop_2_else_else_if_1_mux_24_nl, sawtooth_loop_2_else_else_if_1_mux_25_nl,
      pixel_in_lpi_1_dfm_mx0, operator_4_false_12_acc_itm_1);

  function automatic [0:0] MUX1HOT_s_1_3_2;
    input [0:0] input_2;
    input [0:0] input_1;
    input [0:0] input_0;
    input [2:0] sel;
    reg [0:0] result;
  begin
    result = input_0 & {1{sel[0]}};
    result = result | ( input_1 & {1{sel[1]}});
    result = result | ( input_2 & {1{sel[2]}});
    MUX1HOT_s_1_3_2 = result;
  end
  endfunction


  function automatic [0:0] MUX1HOT_s_1_4_2;
    input [0:0] input_3;
    input [0:0] input_2;
    input [0:0] input_1;
    input [0:0] input_0;
    input [3:0] sel;
    reg [0:0] result;
  begin
    result = input_0 & {1{sel[0]}};
    result = result | ( input_1 & {1{sel[1]}});
    result = result | ( input_2 & {1{sel[2]}});
    result = result | ( input_3 & {1{sel[3]}});
    MUX1HOT_s_1_4_2 = result;
  end
  endfunction


  function automatic [11:0] MUX1HOT_v_12_3_2;
    input [11:0] input_2;
    input [11:0] input_1;
    input [11:0] input_0;
    input [2:0] sel;
    reg [11:0] result;
  begin
    result = input_0 & {12{sel[0]}};
    result = result | ( input_1 & {12{sel[1]}});
    result = result | ( input_2 & {12{sel[2]}});
    MUX1HOT_v_12_3_2 = result;
  end
  endfunction


  function automatic [11:0] MUX1HOT_v_12_4_2;
    input [11:0] input_3;
    input [11:0] input_2;
    input [11:0] input_1;
    input [11:0] input_0;
    input [3:0] sel;
    reg [11:0] result;
  begin
    result = input_0 & {12{sel[0]}};
    result = result | ( input_1 & {12{sel[1]}});
    result = result | ( input_2 & {12{sel[2]}});
    result = result | ( input_3 & {12{sel[3]}});
    MUX1HOT_v_12_4_2 = result;
  end
  endfunction


  function automatic [11:0] MUX1HOT_v_12_5_2;
    input [11:0] input_4;
    input [11:0] input_3;
    input [11:0] input_2;
    input [11:0] input_1;
    input [11:0] input_0;
    input [4:0] sel;
    reg [11:0] result;
  begin
    result = input_0 & {12{sel[0]}};
    result = result | ( input_1 & {12{sel[1]}});
    result = result | ( input_2 & {12{sel[2]}});
    result = result | ( input_3 & {12{sel[3]}});
    result = result | ( input_4 & {12{sel[4]}});
    MUX1HOT_v_12_5_2 = result;
  end
  endfunction


  function automatic [11:0] MUX1HOT_v_12_6_2;
    input [11:0] input_5;
    input [11:0] input_4;
    input [11:0] input_3;
    input [11:0] input_2;
    input [11:0] input_1;
    input [11:0] input_0;
    input [5:0] sel;
    reg [11:0] result;
  begin
    result = input_0 & {12{sel[0]}};
    result = result | ( input_1 & {12{sel[1]}});
    result = result | ( input_2 & {12{sel[2]}});
    result = result | ( input_3 & {12{sel[3]}});
    result = result | ( input_4 & {12{sel[4]}});
    result = result | ( input_5 & {12{sel[5]}});
    MUX1HOT_v_12_6_2 = result;
  end
  endfunction


  function automatic [11:0] MUX1HOT_v_12_7_2;
    input [11:0] input_6;
    input [11:0] input_5;
    input [11:0] input_4;
    input [11:0] input_3;
    input [11:0] input_2;
    input [11:0] input_1;
    input [11:0] input_0;
    input [6:0] sel;
    reg [11:0] result;
  begin
    result = input_0 & {12{sel[0]}};
    result = result | ( input_1 & {12{sel[1]}});
    result = result | ( input_2 & {12{sel[2]}});
    result = result | ( input_3 & {12{sel[3]}});
    result = result | ( input_4 & {12{sel[4]}});
    result = result | ( input_5 & {12{sel[5]}});
    result = result | ( input_6 & {12{sel[6]}});
    MUX1HOT_v_12_7_2 = result;
  end
  endfunction


  function automatic [11:0] MUX1HOT_v_12_8_2;
    input [11:0] input_7;
    input [11:0] input_6;
    input [11:0] input_5;
    input [11:0] input_4;
    input [11:0] input_3;
    input [11:0] input_2;
    input [11:0] input_1;
    input [11:0] input_0;
    input [7:0] sel;
    reg [11:0] result;
  begin
    result = input_0 & {12{sel[0]}};
    result = result | ( input_1 & {12{sel[1]}});
    result = result | ( input_2 & {12{sel[2]}});
    result = result | ( input_3 & {12{sel[3]}});
    result = result | ( input_4 & {12{sel[4]}});
    result = result | ( input_5 & {12{sel[5]}});
    result = result | ( input_6 & {12{sel[6]}});
    result = result | ( input_7 & {12{sel[7]}});
    MUX1HOT_v_12_8_2 = result;
  end
  endfunction


  function automatic [12:0] MUX1HOT_v_13_3_2;
    input [12:0] input_2;
    input [12:0] input_1;
    input [12:0] input_0;
    input [2:0] sel;
    reg [12:0] result;
  begin
    result = input_0 & {13{sel[0]}};
    result = result | ( input_1 & {13{sel[1]}});
    result = result | ( input_2 & {13{sel[2]}});
    MUX1HOT_v_13_3_2 = result;
  end
  endfunction


  function automatic [12:0] MUX1HOT_v_13_4_2;
    input [12:0] input_3;
    input [12:0] input_2;
    input [12:0] input_1;
    input [12:0] input_0;
    input [3:0] sel;
    reg [12:0] result;
  begin
    result = input_0 & {13{sel[0]}};
    result = result | ( input_1 & {13{sel[1]}});
    result = result | ( input_2 & {13{sel[2]}});
    result = result | ( input_3 & {13{sel[3]}});
    MUX1HOT_v_13_4_2 = result;
  end
  endfunction


  function automatic [1:0] MUX1HOT_v_2_3_2;
    input [1:0] input_2;
    input [1:0] input_1;
    input [1:0] input_0;
    input [2:0] sel;
    reg [1:0] result;
  begin
    result = input_0 & {2{sel[0]}};
    result = result | ( input_1 & {2{sel[1]}});
    result = result | ( input_2 & {2{sel[2]}});
    MUX1HOT_v_2_3_2 = result;
  end
  endfunction


  function automatic [1:0] MUX1HOT_v_2_4_2;
    input [1:0] input_3;
    input [1:0] input_2;
    input [1:0] input_1;
    input [1:0] input_0;
    input [3:0] sel;
    reg [1:0] result;
  begin
    result = input_0 & {2{sel[0]}};
    result = result | ( input_1 & {2{sel[1]}});
    result = result | ( input_2 & {2{sel[2]}});
    result = result | ( input_3 & {2{sel[3]}});
    MUX1HOT_v_2_4_2 = result;
  end
  endfunction


  function automatic [30:0] MUX1HOT_v_31_3_2;
    input [30:0] input_2;
    input [30:0] input_1;
    input [30:0] input_0;
    input [2:0] sel;
    reg [30:0] result;
  begin
    result = input_0 & {31{sel[0]}};
    result = result | ( input_1 & {31{sel[1]}});
    result = result | ( input_2 & {31{sel[2]}});
    MUX1HOT_v_31_3_2 = result;
  end
  endfunction


  function automatic [2:0] MUX1HOT_v_3_3_2;
    input [2:0] input_2;
    input [2:0] input_1;
    input [2:0] input_0;
    input [2:0] sel;
    reg [2:0] result;
  begin
    result = input_0 & {3{sel[0]}};
    result = result | ( input_1 & {3{sel[1]}});
    result = result | ( input_2 & {3{sel[2]}});
    MUX1HOT_v_3_3_2 = result;
  end
  endfunction


  function automatic [5:0] MUX1HOT_v_6_4_2;
    input [5:0] input_3;
    input [5:0] input_2;
    input [5:0] input_1;
    input [5:0] input_0;
    input [3:0] sel;
    reg [5:0] result;
  begin
    result = input_0 & {6{sel[0]}};
    result = result | ( input_1 & {6{sel[1]}});
    result = result | ( input_2 & {6{sel[2]}});
    result = result | ( input_3 & {6{sel[3]}});
    MUX1HOT_v_6_4_2 = result;
  end
  endfunction


  function automatic [0:0] MUX_s_1_2_2;
    input [0:0] input_0;
    input [0:0] input_1;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [11:0] MUX_v_12_16_2x1x2x3x4x5x9x10x11x12x13;
    input [11:0] input_0;
    input [11:0] input_6;
    input [11:0] input_7;
    input [11:0] input_8;
    input [11:0] input_14;
    input [11:0] input_15;
    input [3:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      4'b0000 : begin
        result = input_0;
      end
      4'b0110 : begin
        result = input_6;
      end
      4'b0111 : begin
        result = input_7;
      end
      4'b1000 : begin
        result = input_8;
      end
      4'b1110 : begin
        result = input_14;
      end
      default : begin
        result = input_15;
      end
    endcase
    MUX_v_12_16_2x1x2x3x4x5x9x10x11x12x13 = result;
  end
  endfunction


  function automatic [11:0] MUX_v_12_18_2x3x4x5x11x12x13;
    input [11:0] input_0;
    input [11:0] input_1;
    input [11:0] input_2;
    input [11:0] input_6;
    input [11:0] input_7;
    input [11:0] input_8;
    input [11:0] input_9;
    input [11:0] input_10;
    input [11:0] input_14;
    input [11:0] input_15;
    input [11:0] input_16;
    input [11:0] input_17;
    input [4:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      5'b00000 : begin
        result = input_0;
      end
      5'b00001 : begin
        result = input_1;
      end
      5'b00010 : begin
        result = input_2;
      end
      5'b00110 : begin
        result = input_6;
      end
      5'b00111 : begin
        result = input_7;
      end
      5'b01000 : begin
        result = input_8;
      end
      5'b01001 : begin
        result = input_9;
      end
      5'b01010 : begin
        result = input_10;
      end
      5'b01110 : begin
        result = input_14;
      end
      5'b01111 : begin
        result = input_15;
      end
      5'b10000 : begin
        result = input_16;
      end
      default : begin
        result = input_17;
      end
    endcase
    MUX_v_12_18_2x3x4x5x11x12x13 = result;
  end
  endfunction


  function automatic [11:0] MUX_v_12_19_2x0x4x5x6x12x13x14;
    input [11:0] input_1;
    input [11:0] input_2;
    input [11:0] input_3;
    input [11:0] input_7;
    input [11:0] input_8;
    input [11:0] input_9;
    input [11:0] input_10;
    input [11:0] input_11;
    input [11:0] input_15;
    input [11:0] input_16;
    input [11:0] input_17;
    input [11:0] input_18;
    input [4:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      5'b00001 : begin
        result = input_1;
      end
      5'b00010 : begin
        result = input_2;
      end
      5'b00011 : begin
        result = input_3;
      end
      5'b00111 : begin
        result = input_7;
      end
      5'b01000 : begin
        result = input_8;
      end
      5'b01001 : begin
        result = input_9;
      end
      5'b01010 : begin
        result = input_10;
      end
      5'b01011 : begin
        result = input_11;
      end
      5'b01111 : begin
        result = input_15;
      end
      5'b10000 : begin
        result = input_16;
      end
      5'b10001 : begin
        result = input_17;
      end
      default : begin
        result = input_18;
      end
    endcase
    MUX_v_12_19_2x0x4x5x6x12x13x14 = result;
  end
  endfunction


  function automatic [11:0] MUX_v_12_19_2x3x4x5x6x11x12x13x14;
    input [11:0] input_0;
    input [11:0] input_1;
    input [11:0] input_2;
    input [11:0] input_7;
    input [11:0] input_8;
    input [11:0] input_9;
    input [11:0] input_10;
    input [11:0] input_15;
    input [11:0] input_16;
    input [11:0] input_17;
    input [11:0] input_18;
    input [4:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      5'b00000 : begin
        result = input_0;
      end
      5'b00001 : begin
        result = input_1;
      end
      5'b00010 : begin
        result = input_2;
      end
      5'b00111 : begin
        result = input_7;
      end
      5'b01000 : begin
        result = input_8;
      end
      5'b01001 : begin
        result = input_9;
      end
      5'b01010 : begin
        result = input_10;
      end
      5'b01111 : begin
        result = input_15;
      end
      5'b10000 : begin
        result = input_16;
      end
      5'b10001 : begin
        result = input_17;
      end
      default : begin
        result = input_18;
      end
    endcase
    MUX_v_12_19_2x3x4x5x6x11x12x13x14 = result;
  end
  endfunction


  function automatic [11:0] MUX_v_12_22_2x0x1x2x6x7x8x9x14x15x16x17;
    input [11:0] input_3;
    input [11:0] input_4;
    input [11:0] input_5;
    input [11:0] input_10;
    input [11:0] input_11;
    input [11:0] input_12;
    input [11:0] input_13;
    input [11:0] input_18;
    input [11:0] input_19;
    input [11:0] input_20;
    input [11:0] input_21;
    input [4:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      5'b00011 : begin
        result = input_3;
      end
      5'b00100 : begin
        result = input_4;
      end
      5'b00101 : begin
        result = input_5;
      end
      5'b01010 : begin
        result = input_10;
      end
      5'b01011 : begin
        result = input_11;
      end
      5'b01100 : begin
        result = input_12;
      end
      5'b01101 : begin
        result = input_13;
      end
      5'b10010 : begin
        result = input_18;
      end
      5'b10011 : begin
        result = input_19;
      end
      5'b10100 : begin
        result = input_20;
      end
      default : begin
        result = input_21;
      end
    endcase
    MUX_v_12_22_2x0x1x2x6x7x8x9x14x15x16x17 = result;
  end
  endfunction


  function automatic [11:0] MUX_v_12_23_2x0x1x7x8x9x15x16x17;
    input [11:0] input_2;
    input [11:0] input_3;
    input [11:0] input_4;
    input [11:0] input_5;
    input [11:0] input_6;
    input [11:0] input_10;
    input [11:0] input_11;
    input [11:0] input_12;
    input [11:0] input_13;
    input [11:0] input_14;
    input [11:0] input_18;
    input [11:0] input_19;
    input [11:0] input_20;
    input [11:0] input_21;
    input [11:0] input_22;
    input [4:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      5'b00010 : begin
        result = input_2;
      end
      5'b00011 : begin
        result = input_3;
      end
      5'b00100 : begin
        result = input_4;
      end
      5'b00101 : begin
        result = input_5;
      end
      5'b00110 : begin
        result = input_6;
      end
      5'b01010 : begin
        result = input_10;
      end
      5'b01011 : begin
        result = input_11;
      end
      5'b01100 : begin
        result = input_12;
      end
      5'b01101 : begin
        result = input_13;
      end
      5'b01110 : begin
        result = input_14;
      end
      5'b10010 : begin
        result = input_18;
      end
      5'b10011 : begin
        result = input_19;
      end
      5'b10100 : begin
        result = input_20;
      end
      5'b10101 : begin
        result = input_21;
      end
      default : begin
        result = input_22;
      end
    endcase
    MUX_v_12_23_2x0x1x7x8x9x15x16x17 = result;
  end
  endfunction


  function automatic [11:0] MUX_v_12_24_2x0x1x2x3x4x5x10x11x12x13x18x19x20x21;
    input [11:0] input_6;
    input [11:0] input_7;
    input [11:0] input_8;
    input [11:0] input_9;
    input [11:0] input_14;
    input [11:0] input_15;
    input [11:0] input_16;
    input [11:0] input_17;
    input [11:0] input_22;
    input [11:0] input_23;
    input [4:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      5'b00110 : begin
        result = input_6;
      end
      5'b00111 : begin
        result = input_7;
      end
      5'b01000 : begin
        result = input_8;
      end
      5'b01001 : begin
        result = input_9;
      end
      5'b01110 : begin
        result = input_14;
      end
      5'b01111 : begin
        result = input_15;
      end
      5'b10000 : begin
        result = input_16;
      end
      5'b10001 : begin
        result = input_17;
      end
      5'b10110 : begin
        result = input_22;
      end
      default : begin
        result = input_23;
      end
    endcase
    MUX_v_12_24_2x0x1x2x3x4x5x10x11x12x13x18x19x20x21 = result;
  end
  endfunction


  function automatic [11:0] MUX_v_12_25_2x0x1x2x3x4x10x11x12x18x19x20;
    input [11:0] input_5;
    input [11:0] input_6;
    input [11:0] input_7;
    input [11:0] input_8;
    input [11:0] input_9;
    input [11:0] input_13;
    input [11:0] input_14;
    input [11:0] input_15;
    input [11:0] input_16;
    input [11:0] input_17;
    input [11:0] input_21;
    input [11:0] input_22;
    input [11:0] input_23;
    input [11:0] input_24;
    input [4:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      5'b00101 : begin
        result = input_5;
      end
      5'b00110 : begin
        result = input_6;
      end
      5'b00111 : begin
        result = input_7;
      end
      5'b01000 : begin
        result = input_8;
      end
      5'b01001 : begin
        result = input_9;
      end
      5'b01101 : begin
        result = input_13;
      end
      5'b01110 : begin
        result = input_14;
      end
      5'b01111 : begin
        result = input_15;
      end
      5'b10000 : begin
        result = input_16;
      end
      5'b10001 : begin
        result = input_17;
      end
      5'b10101 : begin
        result = input_21;
      end
      5'b10110 : begin
        result = input_22;
      end
      5'b10111 : begin
        result = input_23;
      end
      default : begin
        result = input_24;
      end
    endcase
    MUX_v_12_25_2x0x1x2x3x4x10x11x12x18x19x20 = result;
  end
  endfunction


  function automatic [11:0] MUX_v_12_25_2x0x1x2x3x4x5x11x12x13x19x20x21;
    input [11:0] input_6;
    input [11:0] input_7;
    input [11:0] input_8;
    input [11:0] input_9;
    input [11:0] input_10;
    input [11:0] input_14;
    input [11:0] input_15;
    input [11:0] input_16;
    input [11:0] input_17;
    input [11:0] input_18;
    input [11:0] input_22;
    input [11:0] input_23;
    input [11:0] input_24;
    input [4:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      5'b00110 : begin
        result = input_6;
      end
      5'b00111 : begin
        result = input_7;
      end
      5'b01000 : begin
        result = input_8;
      end
      5'b01001 : begin
        result = input_9;
      end
      5'b01010 : begin
        result = input_10;
      end
      5'b01110 : begin
        result = input_14;
      end
      5'b01111 : begin
        result = input_15;
      end
      5'b10000 : begin
        result = input_16;
      end
      5'b10001 : begin
        result = input_17;
      end
      5'b10010 : begin
        result = input_18;
      end
      5'b10110 : begin
        result = input_22;
      end
      5'b10111 : begin
        result = input_23;
      end
      default : begin
        result = input_24;
      end
    endcase
    MUX_v_12_25_2x0x1x2x3x4x5x11x12x13x19x20x21 = result;
  end
  endfunction


  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [0:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction


  function automatic [11:0] MUX_v_12_3_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [11:0] input_2;
    input [1:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      2'b00 : begin
        result = input_0;
      end
      2'b01 : begin
        result = input_1;
      end
      default : begin
        result = input_2;
      end
    endcase
    MUX_v_12_3_2 = result;
  end
  endfunction


  function automatic [11:0] MUX_v_12_49_2x0;
    input [11:0] input_1;
    input [11:0] input_2;
    input [11:0] input_3;
    input [11:0] input_4;
    input [11:0] input_5;
    input [11:0] input_6;
    input [11:0] input_7;
    input [11:0] input_8;
    input [11:0] input_9;
    input [11:0] input_10;
    input [11:0] input_11;
    input [11:0] input_12;
    input [11:0] input_13;
    input [11:0] input_14;
    input [11:0] input_15;
    input [11:0] input_16;
    input [11:0] input_17;
    input [11:0] input_18;
    input [11:0] input_19;
    input [11:0] input_20;
    input [11:0] input_21;
    input [11:0] input_22;
    input [11:0] input_23;
    input [11:0] input_24;
    input [11:0] input_25;
    input [11:0] input_26;
    input [11:0] input_27;
    input [11:0] input_28;
    input [11:0] input_29;
    input [11:0] input_30;
    input [11:0] input_31;
    input [11:0] input_32;
    input [11:0] input_33;
    input [11:0] input_34;
    input [11:0] input_35;
    input [11:0] input_36;
    input [11:0] input_37;
    input [11:0] input_38;
    input [11:0] input_39;
    input [11:0] input_40;
    input [11:0] input_41;
    input [11:0] input_42;
    input [11:0] input_43;
    input [11:0] input_44;
    input [11:0] input_45;
    input [11:0] input_46;
    input [11:0] input_47;
    input [11:0] input_48;
    input [5:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      6'b000001 : begin
        result = input_1;
      end
      6'b000010 : begin
        result = input_2;
      end
      6'b000011 : begin
        result = input_3;
      end
      6'b000100 : begin
        result = input_4;
      end
      6'b000101 : begin
        result = input_5;
      end
      6'b000110 : begin
        result = input_6;
      end
      6'b000111 : begin
        result = input_7;
      end
      6'b001000 : begin
        result = input_8;
      end
      6'b001001 : begin
        result = input_9;
      end
      6'b001010 : begin
        result = input_10;
      end
      6'b001011 : begin
        result = input_11;
      end
      6'b001100 : begin
        result = input_12;
      end
      6'b001101 : begin
        result = input_13;
      end
      6'b001110 : begin
        result = input_14;
      end
      6'b001111 : begin
        result = input_15;
      end
      6'b010000 : begin
        result = input_16;
      end
      6'b010001 : begin
        result = input_17;
      end
      6'b010010 : begin
        result = input_18;
      end
      6'b010011 : begin
        result = input_19;
      end
      6'b010100 : begin
        result = input_20;
      end
      6'b010101 : begin
        result = input_21;
      end
      6'b010110 : begin
        result = input_22;
      end
      6'b010111 : begin
        result = input_23;
      end
      6'b011000 : begin
        result = input_24;
      end
      6'b011001 : begin
        result = input_25;
      end
      6'b011010 : begin
        result = input_26;
      end
      6'b011011 : begin
        result = input_27;
      end
      6'b011100 : begin
        result = input_28;
      end
      6'b011101 : begin
        result = input_29;
      end
      6'b011110 : begin
        result = input_30;
      end
      6'b011111 : begin
        result = input_31;
      end
      6'b100000 : begin
        result = input_32;
      end
      6'b100001 : begin
        result = input_33;
      end
      6'b100010 : begin
        result = input_34;
      end
      6'b100011 : begin
        result = input_35;
      end
      6'b100100 : begin
        result = input_36;
      end
      6'b100101 : begin
        result = input_37;
      end
      6'b100110 : begin
        result = input_38;
      end
      6'b100111 : begin
        result = input_39;
      end
      6'b101000 : begin
        result = input_40;
      end
      6'b101001 : begin
        result = input_41;
      end
      6'b101010 : begin
        result = input_42;
      end
      6'b101011 : begin
        result = input_43;
      end
      6'b101100 : begin
        result = input_44;
      end
      6'b101101 : begin
        result = input_45;
      end
      6'b101110 : begin
        result = input_46;
      end
      6'b101111 : begin
        result = input_47;
      end
      default : begin
        result = input_48;
      end
    endcase
    MUX_v_12_49_2x0 = result;
  end
  endfunction


  function automatic [11:0] MUX_v_12_4_2x0;
    input [11:0] input_1;
    input [11:0] input_2;
    input [11:0] input_3;
    input [1:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      2'b01 : begin
        result = input_1;
      end
      2'b10 : begin
        result = input_2;
      end
      default : begin
        result = input_3;
      end
    endcase
    MUX_v_12_4_2x0 = result;
  end
  endfunction


  function automatic [11:0] MUX_v_12_6_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [11:0] input_2;
    input [11:0] input_3;
    input [11:0] input_4;
    input [11:0] input_5;
    input [2:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      3'b000 : begin
        result = input_0;
      end
      3'b001 : begin
        result = input_1;
      end
      3'b010 : begin
        result = input_2;
      end
      3'b011 : begin
        result = input_3;
      end
      3'b100 : begin
        result = input_4;
      end
      default : begin
        result = input_5;
      end
    endcase
    MUX_v_12_6_2 = result;
  end
  endfunction


  function automatic [12:0] MUX_v_13_2_2;
    input [12:0] input_0;
    input [12:0] input_1;
    input [0:0] sel;
    reg [12:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_13_2_2 = result;
  end
  endfunction


  function automatic [1:0] MUX_v_2_2_2;
    input [1:0] input_0;
    input [1:0] input_1;
    input [0:0] sel;
    reg [1:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_2_2_2 = result;
  end
  endfunction


  function automatic [29:0] MUX_v_30_2_2;
    input [29:0] input_0;
    input [29:0] input_1;
    input [0:0] sel;
    reg [29:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_30_2_2 = result;
  end
  endfunction


  function automatic [29:0] MUX_v_30_4_2;
    input [29:0] input_0;
    input [29:0] input_1;
    input [29:0] input_2;
    input [29:0] input_3;
    input [1:0] sel;
    reg [29:0] result;
  begin
    case (sel)
      2'b00 : begin
        result = input_0;
      end
      2'b01 : begin
        result = input_1;
      end
      2'b10 : begin
        result = input_2;
      end
      default : begin
        result = input_3;
      end
    endcase
    MUX_v_30_4_2 = result;
  end
  endfunction


  function automatic [30:0] MUX_v_31_2_2;
    input [30:0] input_0;
    input [30:0] input_1;
    input [0:0] sel;
    reg [30:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_31_2_2 = result;
  end
  endfunction


  function automatic [2:0] MUX_v_3_2_2;
    input [2:0] input_0;
    input [2:0] input_1;
    input [0:0] sel;
    reg [2:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_3_2_2 = result;
  end
  endfunction


  function automatic [3:0] MUX_v_4_2_2;
    input [3:0] input_0;
    input [3:0] input_1;
    input [0:0] sel;
    reg [3:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_4_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input [0:0] sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction


  function automatic [5:0] MUX_v_6_2_2;
    input [5:0] input_0;
    input [5:0] input_1;
    input [0:0] sel;
    reg [5:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_6_2_2 = result;
  end
  endfunction


  function automatic [0:0] readslicef_12_1_11;
    input [11:0] vector;
    reg [11:0] tmp;
  begin
    tmp = vector >> 11;
    readslicef_12_1_11 = tmp[0:0];
  end
  endfunction


  function automatic [11:0] readslicef_13_12_1;
    input [12:0] vector;
    reg [12:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_13_12_1 = tmp[11:0];
  end
  endfunction


  function automatic [0:0] readslicef_13_1_12;
    input [12:0] vector;
    reg [12:0] tmp;
  begin
    tmp = vector >> 12;
    readslicef_13_1_12 = tmp[0:0];
  end
  endfunction


  function automatic [12:0] readslicef_14_13_1;
    input [13:0] vector;
    reg [13:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_14_13_1 = tmp[12:0];
  end
  endfunction


  function automatic [0:0] readslicef_14_1_13;
    input [13:0] vector;
    reg [13:0] tmp;
  begin
    tmp = vector >> 13;
    readslicef_14_1_13 = tmp[0:0];
  end
  endfunction


  function automatic [0:0] readslicef_18_1_17;
    input [17:0] vector;
    reg [17:0] tmp;
  begin
    tmp = vector >> 17;
    readslicef_18_1_17 = tmp[0:0];
  end
  endfunction


  function automatic [29:0] readslicef_31_30_1;
    input [30:0] vector;
    reg [30:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_31_30_1 = tmp[29:0];
  end
  endfunction


  function automatic [26:0] readslicef_36_27_9;
    input [35:0] vector;
    reg [35:0] tmp;
  begin
    tmp = vector >> 9;
    readslicef_36_27_9 = tmp[26:0];
  end
  endfunction


  function automatic [28:0] readslicef_37_29_8;
    input [36:0] vector;
    reg [36:0] tmp;
  begin
    tmp = vector >> 8;
    readslicef_37_29_8 = tmp[28:0];
  end
  endfunction


  function automatic [0:0] readslicef_3_1_2;
    input [2:0] vector;
    reg [2:0] tmp;
  begin
    tmp = vector >> 2;
    readslicef_3_1_2 = tmp[0:0];
  end
  endfunction


  function automatic [1:0] readslicef_3_2_1;
    input [2:0] vector;
    reg [2:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_3_2_1 = tmp[1:0];
  end
  endfunction


  function automatic [34:0] readslicef_43_35_8;
    input [42:0] vector;
    reg [42:0] tmp;
  begin
    tmp = vector >> 8;
    readslicef_43_35_8 = tmp[34:0];
  end
  endfunction


  function automatic [35:0] readslicef_44_36_8;
    input [43:0] vector;
    reg [43:0] tmp;
  begin
    tmp = vector >> 8;
    readslicef_44_36_8 = tmp[35:0];
  end
  endfunction


  function automatic [2:0] readslicef_4_3_1;
    input [3:0] vector;
    reg [3:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_4_3_1 = tmp[2:0];
  end
  endfunction


  function automatic [2:0] readslicef_5_3_2;
    input [4:0] vector;
    reg [4:0] tmp;
  begin
    tmp = vector >> 2;
    readslicef_5_3_2 = tmp[2:0];
  end
  endfunction


  function automatic [3:0] readslicef_5_4_1;
    input [4:0] vector;
    reg [4:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_5_4_1 = tmp[3:0];
  end
  endfunction


  function automatic [0:0] readslicef_7_1_6;
    input [6:0] vector;
    reg [6:0] tmp;
  begin
    tmp = vector >> 6;
    readslicef_7_1_6 = tmp[0:0];
  end
  endfunction


  function automatic [5:0] readslicef_7_6_1;
    input [6:0] vector;
    reg [6:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_7_6_1 = tmp[5:0];
  end
  endfunction


  function automatic [6:0] readslicef_8_7_1;
    input [7:0] vector;
    reg [7:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_8_7_1 = tmp[6:0];
  end
  endfunction


  function automatic [7:0] readslicef_9_8_1;
    input [8:0] vector;
    reg [8:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_9_8_1 = tmp[7:0];
  end
  endfunction


  function automatic [12:0] signext_13_1;
    input [0:0] vector;
  begin
    signext_13_1= {{12{vector[0]}}, vector};
  end
  endfunction


  function automatic [1:0] signext_2_1;
    input [0:0] vector;
  begin
    signext_2_1= {{1{vector[0]}}, vector};
  end
  endfunction


  function automatic [29:0] signext_30_29;
    input [28:0] vector;
  begin
    signext_30_29= {{1{vector[28]}}, vector};
  end
  endfunction


  function automatic [2:0] signext_3_1;
    input [0:0] vector;
  begin
    signext_3_1= {{2{vector[0]}}, vector};
  end
  endfunction


  function automatic [2:0] signext_3_2;
    input [1:0] vector;
  begin
    signext_3_2= {{1{vector[1]}}, vector};
  end
  endfunction


  function automatic [3:0] signext_4_3;
    input [2:0] vector;
  begin
    signext_4_3= {{1{vector[2]}}, vector};
  end
  endfunction


  function automatic [5:0] signext_6_5;
    input [4:0] vector;
  begin
    signext_6_5= {{1{vector[4]}}, vector};
  end
  endfunction


  function automatic [1:0] conv_s2s_1_2 ;
    input [0:0]  vector ;
  begin
    conv_s2s_1_2 = {vector[0], vector};
  end
  endfunction


  function automatic [30:0] conv_s2s_30_31 ;
    input [29:0]  vector ;
  begin
    conv_s2s_30_31 = {vector[29], vector};
  end
  endfunction


  function automatic [32:0] conv_s2s_32_33 ;
    input [31:0]  vector ;
  begin
    conv_s2s_32_33 = {vector[31], vector};
  end
  endfunction


  function automatic [33:0] conv_s2s_33_34 ;
    input [32:0]  vector ;
  begin
    conv_s2s_33_34 = {vector[32], vector};
  end
  endfunction


  function automatic [1:0] conv_s2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_s2u_1_2 = {vector[0], vector};
  end
  endfunction


  function automatic [2:0] conv_s2u_2_3 ;
    input [1:0]  vector ;
  begin
    conv_s2u_2_3 = {vector[1], vector};
  end
  endfunction


  function automatic [3:0] conv_s2u_3_4 ;
    input [2:0]  vector ;
  begin
    conv_s2u_3_4 = {vector[2], vector};
  end
  endfunction


  function automatic [4:0] conv_s2u_3_5 ;
    input [2:0]  vector ;
  begin
    conv_s2u_3_5 = {{2{vector[2]}}, vector};
  end
  endfunction


  function automatic [5:0] conv_s2u_4_6 ;
    input [3:0]  vector ;
  begin
    conv_s2u_4_6 = {{2{vector[3]}}, vector};
  end
  endfunction


  function automatic [30:0] conv_s2u_13_31 ;
    input [12:0]  vector ;
  begin
    conv_s2u_13_31 = {{18{vector[12]}}, vector};
  end
  endfunction


  function automatic [1:0] conv_u2s_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_2 =  {1'b0, vector};
  end
  endfunction


  function automatic [28:0] conv_u2s_1_29 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_29 = {{28{1'b0}}, vector};
  end
  endfunction


  function automatic [30:0] conv_u2s_1_31 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_31 = {{30{1'b0}}, vector};
  end
  endfunction


  function automatic [6:0] conv_u2s_6_7 ;
    input [5:0]  vector ;
  begin
    conv_u2s_6_7 =  {1'b0, vector};
  end
  endfunction


  function automatic [12:0] conv_u2s_12_13 ;
    input [11:0]  vector ;
  begin
    conv_u2s_12_13 =  {1'b0, vector};
  end
  endfunction


  function automatic [30:0] conv_u2s_12_31 ;
    input [11:0]  vector ;
  begin
    conv_u2s_12_31 = {{19{1'b0}}, vector};
  end
  endfunction


  function automatic [30:0] conv_u2s_30_31 ;
    input [29:0]  vector ;
  begin
    conv_u2s_30_31 =  {1'b0, vector};
  end
  endfunction


  function automatic [31:0] conv_u2s_31_32 ;
    input [30:0]  vector ;
  begin
    conv_u2s_31_32 =  {1'b0, vector};
  end
  endfunction


  function automatic [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction


  function automatic [2:0] conv_u2u_1_3 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_3 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [3:0] conv_u2u_1_4 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_4 = {{3{1'b0}}, vector};
  end
  endfunction


  function automatic [11:0] conv_u2u_1_12 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_12 = {{11{1'b0}}, vector};
  end
  endfunction


  function automatic [2:0] conv_u2u_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_3 = {1'b0, vector};
  end
  endfunction


  function automatic [3:0] conv_u2u_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_4 = {1'b0, vector};
  end
  endfunction


  function automatic [5:0] conv_u2u_3_6 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_6 = {{3{1'b0}}, vector};
  end
  endfunction


  function automatic [4:0] conv_u2u_4_5 ;
    input [3:0]  vector ;
  begin
    conv_u2u_4_5 = {1'b0, vector};
  end
  endfunction


  function automatic [6:0] conv_u2u_5_7 ;
    input [4:0]  vector ;
  begin
    conv_u2u_5_7 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [6:0] conv_u2u_6_7 ;
    input [5:0]  vector ;
  begin
    conv_u2u_6_7 = {1'b0, vector};
  end
  endfunction


  function automatic [7:0] conv_u2u_6_8 ;
    input [5:0]  vector ;
  begin
    conv_u2u_6_8 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [7:0] conv_u2u_7_8 ;
    input [6:0]  vector ;
  begin
    conv_u2u_7_8 = {1'b0, vector};
  end
  endfunction


  function automatic [11:0] conv_u2u_7_12 ;
    input [6:0]  vector ;
  begin
    conv_u2u_7_12 = {{5{1'b0}}, vector};
  end
  endfunction


  function automatic [8:0] conv_u2u_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_9 = {1'b0, vector};
  end
  endfunction


  function automatic [11:0] conv_u2u_9_12 ;
    input [8:0]  vector ;
  begin
    conv_u2u_9_12 = {{3{1'b0}}, vector};
  end
  endfunction


  function automatic [11:0] conv_u2u_11_12 ;
    input [10:0]  vector ;
  begin
    conv_u2u_11_12 = {1'b0, vector};
  end
  endfunction


  function automatic [12:0] conv_u2u_12_13 ;
    input [11:0]  vector ;
  begin
    conv_u2u_12_13 = {1'b0, vector};
  end
  endfunction


  function automatic [13:0] conv_u2u_13_14 ;
    input [12:0]  vector ;
  begin
    conv_u2u_13_14 = {1'b0, vector};
  end
  endfunction


  function automatic [30:0] conv_u2u_30_31 ;
    input [29:0]  vector ;
  begin
    conv_u2u_30_31 = {1'b0, vector};
  end
  endfunction


  function automatic [35:0] conv_u2u_36_36 ;
    input [35:0]  vector ;
  begin
    conv_u2u_36_36 = vector;
  end
  endfunction


  function automatic [36:0] conv_u2u_37_37 ;
    input [36:0]  vector ;
  begin
    conv_u2u_37_37 = vector;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    demosaic_core
// ------------------------------------------------------------------


module demosaic_core (
  clk, arst_n, top_reg_frameWidth, top_reg_frameHeight, top_reg_imgPattern, demosaic_reg_eb,
      src_rsc_dat, src_rsc_vld, src_rsc_rdy, dst_rsc_dat, dst_rsc_vld, dst_rsc_rdy,
      lineBuf_rsc_0_0_i_radr_d, lineBuf_rsc_0_0_i_wadr_d, lineBuf_rsc_0_0_i_q_d,
      lineBuf_rsc_0_1_i_radr_d, lineBuf_rsc_0_1_i_wadr_d, lineBuf_rsc_0_1_i_q_d,
      lineBuf_rsc_0_2_i_radr_d, lineBuf_rsc_0_2_i_wadr_d, lineBuf_rsc_0_2_i_q_d,
      lineBuf_rsc_0_3_i_radr_d, lineBuf_rsc_0_3_i_wadr_d, lineBuf_rsc_0_3_i_q_d,
      lineBuf_rsc_0_0_i_d_d_pff, lineBuf_rsc_0_0_i_we_d_pff, lineBuf_rsc_0_0_i_re_d_pff,
      lineBuf_rsc_0_1_i_we_d_pff, lineBuf_rsc_0_1_i_re_d_pff, lineBuf_rsc_0_2_i_we_d_pff,
      lineBuf_rsc_0_2_i_re_d_pff, lineBuf_rsc_0_3_i_we_d_pff, lineBuf_rsc_0_3_i_re_d_pff
);
  input clk;
  input arst_n;
  input [12:0] top_reg_frameWidth;
  input [12:0] top_reg_frameHeight;
  input [1:0] top_reg_imgPattern;
  input demosaic_reg_eb;
  input [11:0] src_rsc_dat;
  input src_rsc_vld;
  output src_rsc_rdy;
  output [35:0] dst_rsc_dat;
  output dst_rsc_vld;
  input dst_rsc_rdy;
  output [11:0] lineBuf_rsc_0_0_i_radr_d;
  output [11:0] lineBuf_rsc_0_0_i_wadr_d;
  input [11:0] lineBuf_rsc_0_0_i_q_d;
  output [11:0] lineBuf_rsc_0_1_i_radr_d;
  output [11:0] lineBuf_rsc_0_1_i_wadr_d;
  input [11:0] lineBuf_rsc_0_1_i_q_d;
  output [11:0] lineBuf_rsc_0_2_i_radr_d;
  output [11:0] lineBuf_rsc_0_2_i_wadr_d;
  input [11:0] lineBuf_rsc_0_2_i_q_d;
  output [11:0] lineBuf_rsc_0_3_i_radr_d;
  output [11:0] lineBuf_rsc_0_3_i_wadr_d;
  input [11:0] lineBuf_rsc_0_3_i_q_d;
  output [11:0] lineBuf_rsc_0_0_i_d_d_pff;
  output lineBuf_rsc_0_0_i_we_d_pff;
  output lineBuf_rsc_0_0_i_re_d_pff;
  output lineBuf_rsc_0_1_i_we_d_pff;
  output lineBuf_rsc_0_1_i_re_d_pff;
  output lineBuf_rsc_0_2_i_we_d_pff;
  output lineBuf_rsc_0_2_i_re_d_pff;
  output lineBuf_rsc_0_3_i_we_d_pff;
  output lineBuf_rsc_0_3_i_re_d_pff;


  // Interconnect Declarations
  wire core_wen;
  wire core_wten;
  wire src_rsci_wen_comp;
  wire [11:0] src_rsci_idat_mxwt;
  wire dst_rsci_wen_comp;
  wire [11:0] lineBuf_rsc_0_0_i_q_d_mxwt;
  wire [11:0] lineBuf_rsc_0_1_i_q_d_mxwt;
  wire [11:0] lineBuf_rsc_0_2_i_q_d_mxwt;
  wire [11:0] lineBuf_rsc_0_3_i_q_d_mxwt;
  reg [11:0] dst_rsci_idat_35_24;
  reg [11:0] dst_rsci_idat_23_12;
  reg [11:0] dst_rsci_idat_11_0;
  wire [2:0] raw_read_acc_3_tmp;
  wire [3:0] nl_raw_read_acc_3_tmp;
  wire inner_loop_if_if_bayerPattern_xor_3_tmp;
  wire inner_loop_if_if_bayerPattern_xor_tmp;
  wire [2:0] line_write_acc_3_tmp;
  wire [3:0] nl_line_write_acc_3_tmp;
  wire and_tmp;
  wire or_tmp_2;
  wire xor_dcpl;
  wire or_tmp_13;
  wire or_tmp_17;
  wire and_tmp_8;
  wire and_tmp_9;
  wire or_dcpl_25;
  wire or_dcpl_26;
  wire or_dcpl_29;
  wire or_dcpl_30;
  wire or_dcpl_32;
  wire or_dcpl_35;
  wire or_dcpl_38;
  wire or_dcpl_41;
  wire or_dcpl_44;
  wire or_dcpl_45;
  wire and_dcpl_95;
  wire or_dcpl_68;
  wire and_tmp_20;
  wire and_tmp_21;
  wire or_dcpl_75;
  wire lfst_exit_line_write_lpi_1_dfm_3_1_1;
  wire lfst_exit_line_write_lpi_1_dfm_3_0_1;
  wire lfst_exit_line_write_lpi_1_dfm_1_1;
  wire line_write_equal_tmp_7;
  wire line_write_and_4_ssc_1;
  wire line_write_and_5_ssc_1;
  wire lfst_exit_line_write_lpi_1_dfm_0_1;
  wire line_write_equal_tmp_6;
  wire line_write_or_tmp_1;
  reg lfst_exit_line_write_lpi_1_1;
  reg lfst_exit_line_write_lpi_1_0;
  reg sfi_demosaic_reg_eb_lpi_1;
  wire lfst_exitL_exit_line_write_lpi_1_dfm_1;
  reg lfst_exitL_exit_line_write_lpi_1;
  wire sfi_exit_inner_loop_lpi_1_dfm_1;
  reg sfi_exit_inner_loop_lpi_1;
  wire lfst_exitL_exitL_exit_line_write_lpi_1_dfm_1;
  reg lfst_exitL_exitL_exit_line_write_lpi_1;
  wire exitL_exitL_exitL_exit_line_write_lpi_1_dfm_1;
  reg exitL_exitL_exitL_exit_line_write_lpi_1;
  reg lfst_exit_inner_loop_lpi_1;
  wire lfst_exitL_exit_inner_loop_lpi_1_dfm_1;
  reg lfst_exitL_exit_inner_loop_lpi_1;
  wire exitL_exitL_exit_inner_loop_lpi_1_dfm_1;
  reg exitL_exitL_exit_inner_loop_lpi_1;
  wire addon_loop_addon_loop_nor_1_cse_1;
  wire lfst_exit_addon_loop_lpi_1_dfm_1_1;
  wire lfst_exit_addon_loop_lpi_1_dfm_0_1;
  reg lfst_exit_addon_loop_lpi_1_dfm_3_1;
  reg lfst_exit_addon_loop_lpi_1_dfm_3_0;
  reg [12:0] outer_loop_row_lpi_1;
  wire [1:0] demosaicInterpol_pixTmp_b_13_12_lpi_1_dfm_4;
  reg operator_2_false_2_operator_2_false_2_and_svs_1;
  reg operator_2_false_1_operator_2_false_1_and_svs_1;
  reg operator_2_false_operator_2_false_nor_svs_1;
  wire demosaicInterpol_and_1_cse_1;
  wire lfst_exit_addon_loop_lpi_1_dfm_3_1_1;
  wire lfst_exit_addon_loop_lpi_1_dfm_3_0_1;
  wire outer_loop_asn_sft_lpi_1_dfm_mx0;
  wire addon_loop_equal_tmp_2;
  wire addon_loop_equal_tmp_3;
  wire addon_loop_and_20_ssc_1;
  wire addon_loop_and_21_ssc_1;
  wire exit_outer_loop_lpi_1_dfm_1;
  wire addon_loop_or_tmp_1;
  wire exit_inner_loop_lpi_1_dfm_1;
  wire inner_loop_asn_sft_1_lpi_1_dfm_mx0;
  wire exitL_exit_line_write_lpi_1_dfm_1;
  wire [12:0] outer_loop_row_lpi_1_dfm_1;
  reg [12:0] inner_loop_col_lpi_1;
  wire line_write_line_write_nor_3_cse_1;
  wire addon_loop_addon_loop_nor_20_cse_1;
  wire [12:0] inner_loop_col_lpi_1_dfm_1;
  wire inner_loop_and_20_tmp_1;
  wire addon_loop_or_83_tmp_1;
  reg [1:0] i_2_lpi_1_1_0;
  wire [1:0] i_2_lpi_1_dfm_1_0_1;
  wire line_write_or_15_tmp_1;
  wire outer_loop_or_8_tmp_1;
  reg addon_loop_and_29_itm_1;
  reg main_stage_0_2;
  reg addon_loop_and_28_itm_1;
  reg addon_loop_and_27_itm_1;
  reg lfst_exit_line_write_lpi_1_dfm_st_1_1;
  reg lfst_exit_addon_loop_lpi_1_dfm_st_1_1;
  reg inner_loop_asn_sft_1_lpi_1_dfm_1;
  reg lfst_exit_line_write_lpi_1_dfm_st_1_0;
  reg exitL_exit_addon_loop_sva;
  reg inner_loop_asn_sft_lpi_1;
  reg inner_loop_asn_sft_1_lpi_1;
  reg outer_loop_asn_sft_lpi_1;
  reg addon_loop_and_itm_1;
  reg addon_loop_and_29_itm_2;
  reg main_stage_0_3;
  reg addon_loop_and_28_itm_2;
  reg addon_loop_and_27_itm_2;
  reg inner_loop_if_1_inner_loop_if_1_or_itm_1;
  reg exitL_exit_line_write_lpi_1_dfm_st_1;
  reg outer_loop_asn_sft_lpi_1_dfm_1;
  reg lfst_exit_addon_loop_lpi_1_dfm_st_1_0;
  reg sfi_demosaic_reg_eb_lpi_1_dfm_1;
  reg inner_loop_asn_sft_lpi_1_dfm_1;
  reg addon_loop_equal_tmp_1_1;
  reg addon_loop_equal_tmp_1;
  reg sfi_exit_inner_loop_lpi_1_dfm_1_1;
  reg addon_loop_and_51_itm_1;
  reg addon_loop_and_itm_2;
  wire sfi_demosaic_reg_eb_lpi_1_dfm_1_1;
  reg [11:0] inner_loop_col_lpi_1_dfm_1_11_0;
  reg reg_lineBuf_rsc_0_0_i_oswt_cse;
  reg reg_lineBuf_rsc_0_1_i_oswt_cse;
  reg reg_lineBuf_rsc_0_2_i_oswt_cse;
  reg reg_lineBuf_rsc_0_3_i_oswt_cse;
  reg reg_dst_rsci_oswt_cse;
  wire inner_loop_if_1_and_cse;
  wire nor_12_cse;
  wire and_165_cse;
  reg reg_src_rsci_oswt_cse;
  wire or_31_cse;
  wire [11:0] addon_loop_mux_3_cse;
  wire demosaic_reg_eb_mux_cse;
  wire nand_13_cse;
  wire mux_106_cse;
  wire lineBuf_rsc_0_0_i_we_d_iff;
  wire lineBuf_rsc_0_0_i_re_d_iff;
  wire raw_read_nor_8_rmff;
  wire lineBuf_rsc_0_1_i_we_d_iff;
  wire lineBuf_rsc_0_1_i_re_d_iff;
  wire raw_read_nor_7_rmff;
  wire lineBuf_rsc_0_2_i_we_d_iff;
  wire lineBuf_rsc_0_2_i_re_d_iff;
  wire raw_read_nor_6_rmff;
  wire lineBuf_rsc_0_3_i_we_d_iff;
  wire lineBuf_rsc_0_3_i_re_d_iff;
  wire raw_read_nor_5_rmff;
  reg [11:0] rawWindow_1_3_lpi_1;
  wire [11:0] rawWindow_1_4_lpi_1_mx1;
  reg [11:0] rawWindow_2_0_lpi_1;
  reg [11:0] rawWindow_2_1_lpi_1;
  reg [11:0] rawWindow_2_2_lpi_1;
  reg [11:0] rawWindow_2_3_lpi_1;
  reg [11:0] rawWindow_3_0_lpi_1;
  reg [11:0] rawWindow_3_1_lpi_1;
  reg [11:0] rawWindow_3_2_lpi_1;
  reg [11:0] rawWindow_3_3_lpi_1;
  wire [11:0] rawWindow_3_4_lpi_1_mx1;
  reg [11:0] rawWindow_4_0_lpi_1;
  reg [11:0] rawWindow_4_1_lpi_1;
  reg [11:0] rawWindow_4_2_lpi_1;
  reg [11:0] rawWindow_4_3_lpi_1;
  wire [11:0] srcPixel_lpi_1_dfm_mx0;
  reg [2:0] line_write_acc_4_itm_1;
  wire [3:0] nl_line_write_acc_4_itm_1;
  reg [1:0] operator_3_false_slc_operator_3_false_acc_psp_4_0_1_0_itm_1;
  reg [1:0] line_write_acc_psp_sva_1;
  wire [2:0] nl_line_write_acc_psp_sva_1;
  reg [1:0] i_lpi_1_1_0;
  wire mux_125_itm;
  wire or_dcpl;
  wire [12:0] z_out_2;
  wire [13:0] nl_z_out_2;
  wire [12:0] z_out_4;
  wire [13:0] nl_z_out_4;
  wire [14:0] z_out_5;
  wire [15:0] nl_z_out_5;
  wire [14:0] z_out_6;
  wire [15:0] nl_z_out_6;
  wire [13:0] z_out_7;
  wire [14:0] nl_z_out_7;
  wire [13:0] z_out_8;
  wire [14:0] nl_z_out_8;
  wire [12:0] z_out_9;
  wire [13:0] nl_z_out_9;
  wire [15:0] z_out_10;
  wire [16:0] nl_z_out_10;
  wire [13:0] z_out_12;
  wire [15:0] nl_z_out_12;
  wire [14:0] z_out_13;
  wire [15:0] nl_z_out_13;
  wire [16:0] z_out_14;
  wire [17:0] nl_z_out_14;
  wire [12:0] z_out_15;
  wire [13:0] nl_z_out_15;
  wire [13:0] z_out_16;
  wire [14:0] nl_z_out_16;
  wire [12:0] z_out_18;
  wire [13:0] nl_z_out_18;
  wire [16:0] z_out_19;
  wire [17:0] nl_z_out_19;
  wire [16:0] z_out_20;
  reg [11:0] rawWindow_2_4_lpi_1;
  reg [11:0] rawWindow_1_4_lpi_1;
  reg [11:0] rawWindow_1_2_lpi_1;
  reg [11:0] rawWindow_3_4_lpi_1;
  reg [11:0] rawWindow_0_4_lpi_1;
  reg [11:0] rawWindow_0_3_lpi_1;
  reg [11:0] rawWindow_4_4_lpi_1;
  reg [11:0] srcPixel_lpi_1;
  reg [11:0] rawWindow_0_2_lpi_1;
  reg [11:0] rawWindow_1_1_lpi_1;
  reg [13:0] addon_loop_cnt_lpi_1;
  reg inner_loop_if_land_lpi_1_dfm_1;
  reg raw_read_raw_read_nor_itm_1;
  reg raw_read_raw_read_and_itm_1;
  reg raw_read_raw_read_and_1_itm_1;
  reg raw_read_raw_read_and_2_itm_1;
  reg [11:0] operator_13_false_3_slc_demosaicInterpol_else_else_if_acc_10_12_1_itm_1;
  reg [12:0] demosaicInterpol_else_else_else_acc_27_itm_1;
  reg [12:0] demosaicInterpol_else_else_else_acc_23_itm_1_13_1;
  wire [13:0] nl_demosaicInterpol_else_else_else_acc_23_itm_1_13_1;
  reg [12:0] demosaicInterpol_else_else_else_acc_29_itm_1_13_1;
  wire [13:0] nl_demosaicInterpol_else_else_else_acc_29_itm_1_13_1;
  wire [11:0] tmp_lpi_1_dfm_1;
  wire [11:0] rawWindow_2_3_lpi_1_dfm_1_mx0;
  wire [11:0] rawWindow_3_3_lpi_1_dfm_1_mx0;
  wire [11:0] rawWindow_1_3_lpi_1_dfm_1_mx0;
  wire [1:0] demosaicInterpol_pixTmp_r_13_12_lpi_1_dfm_3;
  wire [1:0] demosaicInterpol_pixTmp_g_13_12_lpi_1_dfm_2_mx0;
  wire [11:0] rawWindow_1_3_lpi_1_mx0;
  wire [11:0] rawWindow_2_3_lpi_1_mx0;
  wire [11:0] rawWindow_3_3_lpi_1_mx0;
  wire [11:0] rawWindow_4_4_lpi_1_mx0;
  wire [11:0] rawWindow_0_3_lpi_1_mx0;
  wire exitL_exit_inner_loop_lpi_1_dfm_1;
  wire [4:0] operator_3_false_acc_psp_4_0_sva_1;
  wire [5:0] nl_operator_3_false_acc_psp_4_0_sva_1;
  wire [13:0] addon_loop_cnt_sva_2;
  wire [14:0] nl_addon_loop_cnt_sva_2;
  wire [11:0] rawWindow_0_4_lpi_1_mx0;
  wire demosaicInterpol_demosaicInterpol_nor_5;
  wire demosaicInterpol_else_and_8;
  wire inner_loop_and_2_rgt;
  wire outer_loop_and_6_rgt;
  wire demosaicInterpol_or_1_cse;
  wire demosaicInterpol_nor_cse;
  wire line_write_and_10_cse;
  wire demosaic_reg_eb_and_cse;
  wire inner_loop_and_cse;
  wire rawWindow_and_cse;
  wire or_186_cse;
  wire demosaicInterpol_demosaicInterpol_nor_6_cse;
  wire inner_loop_acc_2_itm_13_1;
  wire outer_loop_acc_3_itm_13_1;
  wire [13:0] operator_12_false_3_acc_27_sdt;
  wire [15:0] nl_operator_12_false_3_acc_27_sdt;
  wire [13:0] z_out_17_14_1;
  wire [14:0] nl_z_out_17_14_1;

  wire[0:0] mux_97_nl;
  wire[0:0] or_103_nl;
  wire[11:0] demosaic_clip_demosaic_clip_demosaic_clip_nor_nl;
  wire[11:0] demosaic_clip_nor_nl;
  wire[11:0] demosaicInterpol_demosaicInterpol_mux1h_1_nl;
  wire[0:0] demosaicInterpol_or_2_nl;
  wire[11:0] demosaic_clip_2_demosaic_clip_2_demosaic_clip_2_nor_nl;
  wire[11:0] demosaic_clip_2_nor_nl;
  wire[11:0] demosaicInterpol_demosaicInterpol_mux1h_3_nl;
  wire[11:0] demosaic_clip_1_demosaic_clip_1_demosaic_clip_1_nor_nl;
  wire[11:0] demosaic_clip_1_nor_nl;
  wire[11:0] demosaicInterpol_demosaicInterpol_demosaicInterpol_mux_nl;
  wire[1:0] line_write_mux_49_nl;
  wire[0:0] or_201_nl;
  wire[12:0] operator_12_false_3_acc_4_nl;
  wire[13:0] nl_operator_12_false_3_acc_4_nl;
  wire[11:0] demosaicInterpol_if_mux_19_nl;
  wire[11:0] demosaicInterpol_if_mux_20_nl;
  wire[11:0] demosaicInterpol_if_mux_21_nl;
  wire[11:0] demosaicInterpol_if_mux_22_nl;
  wire[11:0] operator_13_false_1_acc_nl;
  wire[12:0] nl_operator_13_false_1_acc_nl;
  wire[11:0] operator_13_false_acc_nl;
  wire[12:0] nl_operator_13_false_acc_nl;
  wire[12:0] operator_13_false_3_acc_nl;
  wire[13:0] nl_operator_13_false_3_acc_nl;
  wire[13:0] operator_13_false_2_acc_nl;
  wire[14:0] nl_operator_13_false_2_acc_nl;
  wire[0:0] nor_74_nl;
  wire[0:0] mux_102_nl;
  wire[0:0] mux_101_nl;
  wire[0:0] mux_100_nl;
  wire[0:0] mux_99_nl;
  wire[0:0] mux_98_nl;
  wire[0:0] or_124_nl;
  wire[0:0] mux_114_nl;
  wire[0:0] mux_113_nl;
  wire[0:0] mux_112_nl;
  wire[0:0] mux_110_nl;
  wire[0:0] mux_109_nl;
  wire[0:0] mux_108_nl;
  wire[0:0] mux_107_nl;
  wire[0:0] inner_loop_and_21_nl;
  wire[0:0] or_138_nl;
  wire[0:0] nand_10_nl;
  wire[0:0] nand_2_nl;
  wire[0:0] nand_1_nl;
  wire[1:0] demosaicInterpol_else_demosaicInterpol_else_demosaicInterpol_else_mux_nl;
  wire[0:0] operator_2_false_not_32_nl;
  wire[1:0] demosaicInterpol_else_demosaicInterpol_else_and_nl;
  wire[1:0] demosaicInterpol_else_else_demosaicInterpol_else_else_and_1_nl;
  wire[0:0] and_120_nl;
  wire[0:0] addon_loop_not_68_nl;
  wire[0:0] line_write_mux_46_nl;
  wire[0:0] demosaic_reg_eb_not_20_nl;
  wire[13:0] inner_loop_acc_2_nl;
  wire[14:0] nl_inner_loop_acc_2_nl;
  wire[0:0] or_136_nl;
  wire[13:0] outer_loop_acc_3_nl;
  wire[14:0] nl_outer_loop_acc_3_nl;
  wire[0:0] addon_loop_mux_10_nl;
  wire[13:0] operator_45_true_acc_nl;
  wire[14:0] nl_operator_45_true_acc_nl;
  wire[0:0] asn_rawWindow_4_4_lpi_1_nand_nl;
  wire[0:0] asn_rawWindow_0_4_lpi_1_nand_nl;
  wire[0:0] mux_10_nl;
  wire[0:0] or_3_nl;
  wire[0:0] mux_105_nl;
  wire[0:0] mux_39_nl;
  wire[0:0] and_146_nl;
  wire[0:0] mux_124_nl;
  wire[0:0] mux_123_nl;
  wire[0:0] mux_121_nl;
  wire[0:0] mux_120_nl;
  wire[0:0] mux_119_nl;
  wire[0:0] mux_118_nl;
  wire[0:0] and_136_nl;
  wire[11:0] inner_loop_mux_180_nl;
  wire[11:0] inner_loop_mux_181_nl;
  wire[11:0] inner_loop_mux_182_nl;
  wire[11:0] operator_12_false_1_mux_12_nl;
  wire[11:0] operator_12_false_1_mux_13_nl;
  wire[11:0] demosaicInterpol_if_mux_23_nl;
  wire[11:0] demosaicInterpol_if_mux_24_nl;
  wire[13:0] operator_12_false_1_mux_14_nl;
  wire[13:0] operator_12_false_2_acc_29_nl;
  wire[15:0] nl_operator_12_false_2_acc_29_nl;
  wire[13:0] operator_12_false_1_mux_15_nl;
  wire[11:0] operator_12_false_1_mux_16_nl;
  wire[13:0] operator_12_false_1_mux_17_nl;
  wire[0:0] operator_18_true_1_and_3_nl;
  wire[13:0] operator_18_true_mux_2_nl;
  wire[0:0] operator_18_true_mux_3_nl;
  wire[0:0] operator_18_true_and_3_nl;
  wire[0:0] operator_18_true_2_and_3_nl;
  wire[11:0] demosaicInterpol_else_if_mux_2_nl;
  wire[11:0] demosaicInterpol_else_if_mux_3_nl;
  wire[14:0] operator_12_false_1_mux_18_nl;
  wire[14:0] demosaicInterpol_if_slc_demosaicInterpol_if_demosaicInterpol_if_acc_1_nl;
  wire[15:0] nl_demosaicInterpol_if_slc_demosaicInterpol_if_demosaicInterpol_if_acc_1_nl;
  wire[13:0] operator_12_false_1_mux_19_nl;
  wire[11:0] demosaicInterpol_if_mux_25_nl;
  wire[11:0] demosaicInterpol_if_mux_26_nl;
  wire[13:0] demosaicInterpol_if_mux_27_nl;
  wire[13:0] demosaicInterpol_if_mux_28_nl;
  wire[14:0] demosaicInterpol_if_mux_29_nl;
  wire[14:0] demosaicInterpol_if_mux_30_nl;
  wire[11:0] operator_12_false_2_mux_4_nl;
  wire[11:0] operator_12_false_2_mux_5_nl;
  wire[12:0] operator_12_false_2_mux_6_nl;
  wire[12:0] operator_12_false_2_mux_7_nl;
  wire[12:0] operator_12_false_1_mux_20_nl;
  wire[0:0] operator_12_false_1_operator_12_false_1_and_1_nl;
  wire[10:0] operator_12_false_1_mux_21_nl;
  wire[0:0] operator_12_false_1_operator_12_false_1_or_1_nl;
  wire[12:0] inner_loop_mux_196_nl;
  wire[0:0] nor_82_nl;
  wire[15:0] operator_12_false_1_mux_22_nl;
  wire[13:0] operator_12_false_1_mux_23_nl;
  wire[0:0] operator_12_false_1_mux_25_nl;
  wire[0:0] operator_12_false_1_operator_12_false_1_or_nl;
  wire[17:0] acc_20_nl;
  wire[18:0] nl_acc_20_nl;
  wire[15:0] demosaicInterpol_if_mux_31_nl;
  wire[0:0] demosaicInterpol_if_or_1_nl;
  wire[15:0] demosaicInterpol_if_mux_32_nl;
  wire[13:0] operator_12_false_2_acc_31_nl;
  wire[14:0] nl_operator_12_false_2_acc_31_nl;

  // Interconnect Declarations for Component Instantiations 
  wire [35:0] nl_demosaic_core_dst_rsci_inst_dst_rsci_idat;
  assign nl_demosaic_core_dst_rsci_inst_dst_rsci_idat = {dst_rsci_idat_35_24 , dst_rsci_idat_23_12
      , dst_rsci_idat_11_0};
  wire [0:0] nl_demosaic_core_lineBuf_rsc_0_0_i_1_inst_lineBuf_rsc_0_0_i_iswt0_1_pff;
  assign nl_demosaic_core_lineBuf_rsc_0_0_i_1_inst_lineBuf_rsc_0_0_i_iswt0_1_pff
      = ~(or_dcpl_45 | or_dcpl_41 | or_dcpl_25);
  wire [0:0] nl_demosaic_core_lineBuf_rsc_0_1_i_1_inst_lineBuf_rsc_0_1_i_iswt0_1_pff;
  assign nl_demosaic_core_lineBuf_rsc_0_1_i_1_inst_lineBuf_rsc_0_1_i_iswt0_1_pff
      = ~(or_dcpl_45 | or_dcpl_41 | or_dcpl_32);
  wire [0:0] nl_demosaic_core_lineBuf_rsc_0_2_i_1_inst_lineBuf_rsc_0_2_i_iswt0_1_pff;
  assign nl_demosaic_core_lineBuf_rsc_0_2_i_1_inst_lineBuf_rsc_0_2_i_iswt0_1_pff
      = ~(or_dcpl_45 | or_dcpl_41 | or_dcpl_35);
  wire [0:0] nl_demosaic_core_lineBuf_rsc_0_3_i_1_inst_lineBuf_rsc_0_3_i_iswt0_1_pff;
  assign nl_demosaic_core_lineBuf_rsc_0_3_i_1_inst_lineBuf_rsc_0_3_i_iswt0_1_pff
      = ~(or_dcpl_45 | or_dcpl_41 | or_dcpl_38);
  demosaic_core_src_rsci demosaic_core_src_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .src_rsc_dat(src_rsc_dat),
      .src_rsc_vld(src_rsc_vld),
      .src_rsc_rdy(src_rsc_rdy),
      .core_wen(core_wen),
      .src_rsci_oswt(reg_src_rsci_oswt_cse),
      .src_rsci_wen_comp(src_rsci_wen_comp),
      .src_rsci_idat_mxwt(src_rsci_idat_mxwt)
    );
  demosaic_core_dst_rsci demosaic_core_dst_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .dst_rsc_dat(dst_rsc_dat),
      .dst_rsc_vld(dst_rsc_vld),
      .dst_rsc_rdy(dst_rsc_rdy),
      .core_wen(core_wen),
      .dst_rsci_oswt(reg_dst_rsci_oswt_cse),
      .dst_rsci_wen_comp(dst_rsci_wen_comp),
      .dst_rsci_idat(nl_demosaic_core_dst_rsci_inst_dst_rsci_idat[35:0])
    );
  demosaic_core_lineBuf_rsc_0_0_i_1 demosaic_core_lineBuf_rsc_0_0_i_1_inst (
      .clk(clk),
      .arst_n(arst_n),
      .lineBuf_rsc_0_0_i_q_d(lineBuf_rsc_0_0_i_q_d),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .lineBuf_rsc_0_0_i_oswt(reg_lineBuf_rsc_0_0_i_oswt_cse),
      .lineBuf_rsc_0_0_i_q_d_mxwt(lineBuf_rsc_0_0_i_q_d_mxwt),
      .lineBuf_rsc_0_0_i_we_d_pff(lineBuf_rsc_0_0_i_we_d_iff),
      .lineBuf_rsc_0_0_i_iswt0_1_pff(nl_demosaic_core_lineBuf_rsc_0_0_i_1_inst_lineBuf_rsc_0_0_i_iswt0_1_pff[0:0]),
      .lineBuf_rsc_0_0_i_re_d_pff(lineBuf_rsc_0_0_i_re_d_iff),
      .lineBuf_rsc_0_0_i_oswt_pff(raw_read_nor_8_rmff)
    );
  demosaic_core_lineBuf_rsc_0_1_i_1 demosaic_core_lineBuf_rsc_0_1_i_1_inst (
      .clk(clk),
      .arst_n(arst_n),
      .lineBuf_rsc_0_1_i_q_d(lineBuf_rsc_0_1_i_q_d),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .lineBuf_rsc_0_1_i_oswt(reg_lineBuf_rsc_0_1_i_oswt_cse),
      .lineBuf_rsc_0_1_i_q_d_mxwt(lineBuf_rsc_0_1_i_q_d_mxwt),
      .lineBuf_rsc_0_1_i_we_d_pff(lineBuf_rsc_0_1_i_we_d_iff),
      .lineBuf_rsc_0_1_i_iswt0_1_pff(nl_demosaic_core_lineBuf_rsc_0_1_i_1_inst_lineBuf_rsc_0_1_i_iswt0_1_pff[0:0]),
      .lineBuf_rsc_0_1_i_re_d_pff(lineBuf_rsc_0_1_i_re_d_iff),
      .lineBuf_rsc_0_1_i_oswt_pff(raw_read_nor_7_rmff)
    );
  demosaic_core_lineBuf_rsc_0_2_i_1 demosaic_core_lineBuf_rsc_0_2_i_1_inst (
      .clk(clk),
      .arst_n(arst_n),
      .lineBuf_rsc_0_2_i_q_d(lineBuf_rsc_0_2_i_q_d),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .lineBuf_rsc_0_2_i_oswt(reg_lineBuf_rsc_0_2_i_oswt_cse),
      .lineBuf_rsc_0_2_i_q_d_mxwt(lineBuf_rsc_0_2_i_q_d_mxwt),
      .lineBuf_rsc_0_2_i_we_d_pff(lineBuf_rsc_0_2_i_we_d_iff),
      .lineBuf_rsc_0_2_i_iswt0_1_pff(nl_demosaic_core_lineBuf_rsc_0_2_i_1_inst_lineBuf_rsc_0_2_i_iswt0_1_pff[0:0]),
      .lineBuf_rsc_0_2_i_re_d_pff(lineBuf_rsc_0_2_i_re_d_iff),
      .lineBuf_rsc_0_2_i_oswt_pff(raw_read_nor_6_rmff)
    );
  demosaic_core_lineBuf_rsc_0_3_i_1 demosaic_core_lineBuf_rsc_0_3_i_1_inst (
      .clk(clk),
      .arst_n(arst_n),
      .lineBuf_rsc_0_3_i_q_d(lineBuf_rsc_0_3_i_q_d),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .lineBuf_rsc_0_3_i_oswt(reg_lineBuf_rsc_0_3_i_oswt_cse),
      .lineBuf_rsc_0_3_i_q_d_mxwt(lineBuf_rsc_0_3_i_q_d_mxwt),
      .lineBuf_rsc_0_3_i_we_d_pff(lineBuf_rsc_0_3_i_we_d_iff),
      .lineBuf_rsc_0_3_i_iswt0_1_pff(nl_demosaic_core_lineBuf_rsc_0_3_i_1_inst_lineBuf_rsc_0_3_i_iswt0_1_pff[0:0]),
      .lineBuf_rsc_0_3_i_re_d_pff(lineBuf_rsc_0_3_i_re_d_iff),
      .lineBuf_rsc_0_3_i_oswt_pff(raw_read_nor_5_rmff)
    );
  demosaic_core_staller demosaic_core_staller_inst (
      .clk(clk),
      .arst_n(arst_n),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .src_rsci_wen_comp(src_rsci_wen_comp),
      .dst_rsci_wen_comp(dst_rsci_wen_comp)
    );
  assign raw_read_nor_8_rmff = ~(or_dcpl_30 | or_dcpl_26 | or_dcpl_25);
  assign raw_read_nor_7_rmff = ~(or_dcpl_30 | or_dcpl_26 | or_dcpl_32);
  assign raw_read_nor_6_rmff = ~(or_dcpl_30 | or_dcpl_26 | or_dcpl_35);
  assign raw_read_nor_5_rmff = ~(or_dcpl_30 | or_dcpl_26 | or_dcpl_38);
  assign inner_loop_if_1_and_cse = core_wen & (((~(outer_loop_asn_sft_lpi_1_dfm_1
      | inner_loop_asn_sft_1_lpi_1_dfm_1)) & main_stage_0_2 & exitL_exit_line_write_lpi_1_dfm_st_1
      & inner_loop_if_1_inner_loop_if_1_or_itm_1 & (~ lfst_exit_addon_loop_lpi_1_dfm_st_1_1))
      | and_dcpl_95);
  assign demosaicInterpol_or_1_cse = demosaicInterpol_and_1_cse_1 | operator_2_false_operator_2_false_nor_svs_1;
  assign demosaicInterpol_nor_cse = ~(operator_2_false_2_operator_2_false_2_and_svs_1
      | operator_2_false_1_operator_2_false_1_and_svs_1);
  assign demosaicInterpol_demosaicInterpol_nor_6_cse = ~(demosaicInterpol_nor_cse
      | operator_2_false_operator_2_false_nor_svs_1);
  assign nor_12_cse = ~(exitL_exitL_exitL_exit_line_write_lpi_1 | (~ lfst_exit_inner_loop_lpi_1));
  assign and_165_cse = inner_loop_acc_2_itm_13_1 & outer_loop_acc_3_itm_13_1;
  assign or_31_cse = (~ lfst_exitL_exit_line_write_lpi_1) | sfi_exit_inner_loop_lpi_1;
  assign nand_13_cse = ~((~(inner_loop_acc_2_itm_13_1 & outer_loop_acc_3_itm_13_1))
      & or_tmp_17);
  assign mux_107_nl = MUX_s_1_2_2(and_tmp, mux_106_cse, inner_loop_asn_sft_lpi_1);
  assign mux_108_nl = MUX_s_1_2_2(mux_107_nl, and_tmp_20, or_31_cse);
  assign mux_109_nl = MUX_s_1_2_2(mux_108_nl, and_tmp, inner_loop_asn_sft_1_lpi_1);
  assign mux_110_nl = MUX_s_1_2_2(and_tmp_20, mux_109_nl, lfst_exitL_exitL_exit_line_write_lpi_1);
  assign mux_112_nl = MUX_s_1_2_2(and_tmp_21, mux_110_nl, nor_12_cse);
  assign mux_113_nl = MUX_s_1_2_2(mux_112_nl, and_tmp, outer_loop_asn_sft_lpi_1);
  assign mux_114_nl = MUX_s_1_2_2(and_tmp_21, mux_113_nl, lfst_exitL_exit_inner_loop_lpi_1);
  assign line_write_and_10_cse = core_wen & mux_114_nl;
  assign demosaic_reg_eb_and_cse = core_wen & (~(outer_loop_asn_sft_lpi_1_dfm_mx0
      | lfst_exit_addon_loop_lpi_1_dfm_1_1));
  assign inner_loop_and_cse = core_wen & (~ lfst_exit_addon_loop_lpi_1_dfm_1_1);
  assign inner_loop_and_2_rgt = line_write_or_15_tmp_1 & demosaic_reg_eb_mux_cse
      & (~ outer_loop_or_8_tmp_1) & (~ lfst_exit_addon_loop_lpi_1_dfm_1_1);
  assign outer_loop_and_6_rgt = inner_loop_and_20_tmp_1 & (~ outer_loop_asn_sft_lpi_1_dfm_mx0)
      & (~ lfst_exit_addon_loop_lpi_1_dfm_1_1);
  assign rawWindow_and_cse = core_wen & mux_125_itm;
  assign nand_10_nl = ~(main_stage_0_3 & addon_loop_and_29_itm_2);
  assign rawWindow_3_4_lpi_1_mx1 = MUX_v_12_2_2(tmp_lpi_1_dfm_1, rawWindow_3_4_lpi_1,
      nand_10_nl);
  assign nand_2_nl = ~(main_stage_0_3 & addon_loop_and_28_itm_2);
  assign addon_loop_mux_3_cse = MUX_v_12_2_2(tmp_lpi_1_dfm_1, rawWindow_2_4_lpi_1,
      nand_2_nl);
  assign nand_1_nl = ~(main_stage_0_3 & addon_loop_and_27_itm_2);
  assign rawWindow_1_4_lpi_1_mx1 = MUX_v_12_2_2(tmp_lpi_1_dfm_1, rawWindow_1_4_lpi_1,
      nand_1_nl);
  assign tmp_lpi_1_dfm_1 = MUX1HOT_v_12_4_2(lineBuf_rsc_0_0_i_q_d_mxwt, lineBuf_rsc_0_1_i_q_d_mxwt,
      lineBuf_rsc_0_2_i_q_d_mxwt, lineBuf_rsc_0_3_i_q_d_mxwt, {raw_read_raw_read_nor_itm_1
      , raw_read_raw_read_and_itm_1 , raw_read_raw_read_and_1_itm_1 , raw_read_raw_read_and_2_itm_1});
  assign rawWindow_2_3_lpi_1_dfm_1_mx0 = MUX_v_12_2_2(rawWindow_2_3_lpi_1, addon_loop_mux_3_cse,
      sfi_demosaic_reg_eb_lpi_1_dfm_1);
  assign rawWindow_3_3_lpi_1_dfm_1_mx0 = MUX_v_12_2_2(rawWindow_3_3_lpi_1, rawWindow_3_4_lpi_1_mx1,
      sfi_demosaic_reg_eb_lpi_1_dfm_1);
  assign rawWindow_1_3_lpi_1_dfm_1_mx0 = MUX_v_12_2_2(rawWindow_1_3_lpi_1, rawWindow_1_4_lpi_1_mx1,
      sfi_demosaic_reg_eb_lpi_1_dfm_1);
  assign demosaicInterpol_and_1_cse_1 = operator_2_false_1_operator_2_false_1_and_svs_1
      & (~ operator_2_false_operator_2_false_nor_svs_1);
  assign demosaicInterpol_else_demosaicInterpol_else_demosaicInterpol_else_mux_nl
      = MUX_v_2_2_2((z_out_7[13:12]), (z_out_8[13:12]), operator_2_false_1_operator_2_false_1_and_svs_1);
  assign operator_2_false_not_32_nl = ~ operator_2_false_operator_2_false_nor_svs_1;
  assign demosaicInterpol_pixTmp_r_13_12_lpi_1_dfm_3 = MUX_v_2_2_2(2'b00, demosaicInterpol_else_demosaicInterpol_else_demosaicInterpol_else_mux_nl,
      operator_2_false_not_32_nl);
  assign demosaicInterpol_else_demosaicInterpol_else_and_nl = (z_out_8[13:12]) &
      (signext_2_1(~ operator_2_false_2_operator_2_false_2_and_svs_1)) & (signext_2_1(~
      operator_2_false_1_operator_2_false_1_and_svs_1));
  assign demosaicInterpol_pixTmp_g_13_12_lpi_1_dfm_2_mx0 = MUX_v_2_2_2(demosaicInterpol_else_demosaicInterpol_else_and_nl,
      (z_out_8[13:12]), operator_2_false_operator_2_false_nor_svs_1);
  assign demosaicInterpol_else_else_demosaicInterpol_else_else_and_1_nl = MUX_v_2_2_2(2'b00,
      (z_out_8[13:12]), operator_2_false_2_operator_2_false_2_and_svs_1);
  assign demosaicInterpol_pixTmp_b_13_12_lpi_1_dfm_4 = MUX_v_2_2_2(demosaicInterpol_else_else_demosaicInterpol_else_else_and_1_nl,
      (z_out_7[13:12]), demosaicInterpol_or_1_cse);
  assign rawWindow_1_3_lpi_1_mx0 = MUX_v_12_2_2(rawWindow_1_4_lpi_1_mx1, rawWindow_1_3_lpi_1,
      or_dcpl_68);
  assign sfi_demosaic_reg_eb_lpi_1_dfm_1_1 = sfi_demosaic_reg_eb_lpi_1 | (~ lfst_exitL_exit_line_write_lpi_1_dfm_1);
  assign rawWindow_2_3_lpi_1_mx0 = MUX_v_12_2_2(addon_loop_mux_3_cse, rawWindow_2_3_lpi_1,
      or_dcpl_68);
  assign rawWindow_3_3_lpi_1_mx0 = MUX_v_12_2_2(rawWindow_3_4_lpi_1_mx1, rawWindow_3_3_lpi_1,
      or_dcpl_68);
  assign srcPixel_lpi_1_dfm_mx0 = MUX_v_12_2_2(srcPixel_lpi_1, src_rsci_idat_mxwt,
      sfi_exit_inner_loop_lpi_1_dfm_1_1);
  assign lfst_exit_line_write_lpi_1_dfm_1_1 = lfst_exit_line_write_lpi_1_1 & (~ sfi_demosaic_reg_eb_lpi_1_dfm_1_1);
  assign lfst_exit_line_write_lpi_1_dfm_0_1 = lfst_exit_line_write_lpi_1_0 & (~ sfi_demosaic_reg_eb_lpi_1_dfm_1_1);
  assign exitL_exit_line_write_lpi_1_dfm_1 = ~((lfst_exit_line_write_lpi_1_dfm_3_1_1
      | lfst_exit_line_write_lpi_1_dfm_3_0_1) & demosaic_reg_eb_mux_cse);
  assign and_120_nl = lfst_exit_addon_loop_lpi_1_dfm_3_0 & (~ exitL_exitL_exit_inner_loop_lpi_1)
      & (~ exitL_exit_addon_loop_sva) & lfst_exitL_exit_inner_loop_lpi_1 & (~ exitL_exitL_exitL_exit_line_write_lpi_1)
      & lfst_exit_inner_loop_lpi_1 & lfst_exitL_exitL_exit_line_write_lpi_1 & (~
      sfi_exit_inner_loop_lpi_1) & lfst_exitL_exit_line_write_lpi_1;
  assign demosaic_reg_eb_mux_cse = MUX_s_1_2_2(demosaic_reg_eb, inner_loop_asn_sft_lpi_1,
      and_120_nl);
  assign line_write_equal_tmp_6 = lfst_exit_line_write_lpi_1_dfm_1_1 & (~ lfst_exit_line_write_lpi_1_dfm_0_1);
  assign sfi_exit_inner_loop_lpi_1_dfm_1 = sfi_exit_inner_loop_lpi_1 | (~ lfst_exitL_exitL_exit_line_write_lpi_1_dfm_1);
  assign lfst_exit_addon_loop_lpi_1_dfm_1_1 = lfst_exit_addon_loop_lpi_1_dfm_3_1
      & (~ exitL_exit_addon_loop_sva);
  assign lfst_exit_addon_loop_lpi_1_dfm_0_1 = lfst_exit_addon_loop_lpi_1_dfm_3_0
      & (~ exitL_exit_addon_loop_sva);
  assign exit_inner_loop_lpi_1_dfm_1 = (~ inner_loop_acc_2_itm_13_1) & exitL_exitL_exitL_exit_line_write_lpi_1_dfm_1;
  assign addon_loop_not_68_nl = ~ exitL_exit_addon_loop_sva;
  assign outer_loop_row_lpi_1_dfm_1 = MUX_v_13_2_2(13'b0000000000000, outer_loop_row_lpi_1,
      addon_loop_not_68_nl);
  assign line_write_mux_46_nl = MUX_s_1_2_2((~ (line_write_acc_3_tmp[2])), lfst_exit_line_write_lpi_1_dfm_1_1,
      line_write_equal_tmp_7);
  assign lfst_exit_line_write_lpi_1_dfm_3_1_1 = (line_write_mux_46_nl & (~ line_write_and_4_ssc_1))
      | line_write_and_5_ssc_1;
  assign lfst_exit_line_write_lpi_1_dfm_3_0_1 = (lfst_exit_line_write_lpi_1_dfm_0_1
      & (~(line_write_and_5_ssc_1 | line_write_equal_tmp_6))) | line_write_and_4_ssc_1;
  assign nl_raw_read_acc_3_tmp = conv_u2u_2_3(i_2_lpi_1_dfm_1_0_1) + 3'b001;
  assign raw_read_acc_3_tmp = nl_raw_read_acc_3_tmp[2:0];
  assign demosaic_reg_eb_not_20_nl = ~ sfi_demosaic_reg_eb_lpi_1_dfm_1_1;
  assign i_2_lpi_1_dfm_1_0_1 = MUX_v_2_2_2(2'b00, i_2_lpi_1_1_0, demosaic_reg_eb_not_20_nl);
  assign nl_line_write_acc_3_tmp = conv_u2u_2_3(i_lpi_1_1_0) + 3'b001;
  assign line_write_acc_3_tmp = nl_line_write_acc_3_tmp[2:0];
  assign line_write_equal_tmp_7 = lfst_exit_line_write_lpi_1_dfm_1_1 & lfst_exit_line_write_lpi_1_dfm_0_1;
  assign line_write_and_4_ssc_1 = (~ (raw_read_acc_3_tmp[2])) & line_write_or_tmp_1;
  assign line_write_and_5_ssc_1 = (raw_read_acc_3_tmp[2]) & line_write_or_tmp_1;
  assign line_write_or_tmp_1 = (lfst_exit_line_write_lpi_1_dfm_0_1 & (~ lfst_exit_line_write_lpi_1_dfm_1_1))
      | (~(lfst_exit_line_write_lpi_1_dfm_1_1 | lfst_exit_line_write_lpi_1_dfm_0_1));
  assign lfst_exitL_exit_line_write_lpi_1_dfm_1 = lfst_exitL_exit_line_write_lpi_1
      & (~ sfi_exit_inner_loop_lpi_1_dfm_1);
  assign lfst_exitL_exitL_exit_line_write_lpi_1_dfm_1 = lfst_exitL_exitL_exit_line_write_lpi_1
      & (~ exitL_exitL_exitL_exit_line_write_lpi_1_dfm_1);
  assign nl_inner_loop_acc_2_nl = ({1'b1 , inner_loop_col_lpi_1_dfm_1}) + conv_u2u_13_14(~
      top_reg_frameWidth) + 14'b00000000000001;
  assign inner_loop_acc_2_nl = nl_inner_loop_acc_2_nl[13:0];
  assign inner_loop_acc_2_itm_13_1 = readslicef_14_1_13(inner_loop_acc_2_nl);
  assign inner_loop_col_lpi_1_dfm_1 = MUX_v_13_2_2(13'b0000000000000, inner_loop_col_lpi_1,
      lfst_exitL_exit_inner_loop_lpi_1_dfm_1);
  assign or_136_nl = or_dcpl_75 | exitL_exitL_exitL_exit_line_write_lpi_1 | (~ lfst_exit_inner_loop_lpi_1)
      | (~ lfst_exitL_exitL_exit_line_write_lpi_1);
  assign inner_loop_asn_sft_1_lpi_1_dfm_mx0 = MUX_s_1_2_2(inner_loop_asn_sft_1_lpi_1,
      exit_inner_loop_lpi_1_dfm_1, or_136_nl);
  assign exitL_exitL_exitL_exit_line_write_lpi_1_dfm_1 = exitL_exitL_exitL_exit_line_write_lpi_1
      | (~(lfst_exit_inner_loop_lpi_1 & lfst_exitL_exit_inner_loop_lpi_1_dfm_1));
  assign lfst_exitL_exit_inner_loop_lpi_1_dfm_1 = lfst_exitL_exit_inner_loop_lpi_1
      & (~ exitL_exitL_exit_inner_loop_lpi_1_dfm_1);
  assign nl_outer_loop_acc_3_nl = ({1'b1 , outer_loop_row_lpi_1_dfm_1}) + conv_u2u_13_14(~
      top_reg_frameHeight) + 14'b00000000000001;
  assign outer_loop_acc_3_nl = nl_outer_loop_acc_3_nl[13:0];
  assign outer_loop_acc_3_itm_13_1 = readslicef_14_1_13(outer_loop_acc_3_nl);
  assign inner_loop_if_if_bayerPattern_xor_3_tmp = (outer_loop_row_lpi_1_dfm_1[0])
      ^ (top_reg_imgPattern[1]);
  assign inner_loop_if_if_bayerPattern_xor_tmp = (inner_loop_col_lpi_1_dfm_1[0])
      ^ (top_reg_imgPattern[0]);
  assign outer_loop_asn_sft_lpi_1_dfm_mx0 = MUX_s_1_2_2(outer_loop_asn_sft_lpi_1,
      exit_outer_loop_lpi_1_dfm_1, or_dcpl_75);
  assign exit_outer_loop_lpi_1_dfm_1 = (~ outer_loop_acc_3_itm_13_1) & exitL_exitL_exit_inner_loop_lpi_1_dfm_1;
  assign exitL_exitL_exit_inner_loop_lpi_1_dfm_1 = exitL_exitL_exit_inner_loop_lpi_1
      | addon_loop_addon_loop_nor_1_cse_1;
  assign addon_loop_addon_loop_nor_1_cse_1 = ~(lfst_exit_addon_loop_lpi_1_dfm_1_1
      | lfst_exit_addon_loop_lpi_1_dfm_0_1);
  assign nl_operator_45_true_acc_nl = ({1'b1 , (addon_loop_cnt_sva_2[13:1])}) + conv_u2u_13_14(~
      top_reg_frameWidth);
  assign operator_45_true_acc_nl = nl_operator_45_true_acc_nl[13:0];
  assign addon_loop_mux_10_nl = MUX_s_1_2_2((readslicef_14_1_13(operator_45_true_acc_nl)),
      lfst_exit_addon_loop_lpi_1_dfm_1_1, addon_loop_equal_tmp_3);
  assign lfst_exit_addon_loop_lpi_1_dfm_3_1_1 = (addon_loop_mux_10_nl & (~ addon_loop_and_20_ssc_1))
      | addon_loop_and_21_ssc_1;
  assign lfst_exit_addon_loop_lpi_1_dfm_3_0_1 = (lfst_exit_addon_loop_lpi_1_dfm_0_1
      & (~(addon_loop_and_21_ssc_1 | addon_loop_equal_tmp_2))) | addon_loop_and_20_ssc_1;
  assign asn_rawWindow_4_4_lpi_1_nand_nl = ~(main_stage_0_2 & addon_loop_and_51_itm_1);
  assign rawWindow_4_4_lpi_1_mx0 = MUX_v_12_2_2(srcPixel_lpi_1_dfm_mx0, rawWindow_4_4_lpi_1,
      asn_rawWindow_4_4_lpi_1_nand_nl);
  assign rawWindow_0_3_lpi_1_mx0 = MUX_v_12_2_2(rawWindow_0_4_lpi_1_mx0, rawWindow_0_3_lpi_1,
      or_dcpl_68);
  assign addon_loop_equal_tmp_2 = lfst_exit_addon_loop_lpi_1_dfm_1_1 & (~ lfst_exit_addon_loop_lpi_1_dfm_0_1);
  assign addon_loop_equal_tmp_3 = lfst_exit_addon_loop_lpi_1_dfm_1_1 & lfst_exit_addon_loop_lpi_1_dfm_0_1;
  assign line_write_or_15_tmp_1 = line_write_equal_tmp_6 | line_write_equal_tmp_7;
  assign exitL_exit_inner_loop_lpi_1_dfm_1 = exit_inner_loop_lpi_1_dfm_1 | outer_loop_asn_sft_lpi_1_dfm_mx0;
  assign outer_loop_or_8_tmp_1 = inner_loop_asn_sft_1_lpi_1_dfm_mx0 | outer_loop_asn_sft_lpi_1_dfm_mx0;
  assign inner_loop_and_20_tmp_1 = exitL_exit_line_write_lpi_1_dfm_1 & (~ inner_loop_asn_sft_1_lpi_1_dfm_mx0);
  assign addon_loop_addon_loop_nor_20_cse_1 = ~(outer_loop_asn_sft_lpi_1_dfm_mx0
      | addon_loop_equal_tmp_2 | addon_loop_equal_tmp_3);
  assign addon_loop_or_83_tmp_1 = outer_loop_asn_sft_lpi_1_dfm_mx0 | addon_loop_equal_tmp_2
      | addon_loop_equal_tmp_3;
  assign nl_operator_3_false_acc_psp_4_0_sva_1 = conv_u2u_3_5({1'b1 , i_lpi_1_1_0})
      + conv_u2u_4_5({i_lpi_1_1_0 , 2'b01});
  assign operator_3_false_acc_psp_4_0_sva_1 = nl_operator_3_false_acc_psp_4_0_sva_1[4:0];
  assign nl_addon_loop_cnt_sva_2 = addon_loop_cnt_lpi_1 + 14'b00000000000001;
  assign addon_loop_cnt_sva_2 = nl_addon_loop_cnt_sva_2[13:0];
  assign addon_loop_and_20_ssc_1 = (~ exit_outer_loop_lpi_1_dfm_1) & addon_loop_or_tmp_1;
  assign addon_loop_and_21_ssc_1 = exit_outer_loop_lpi_1_dfm_1 & addon_loop_or_tmp_1;
  assign addon_loop_or_tmp_1 = (lfst_exit_addon_loop_lpi_1_dfm_0_1 & (~ lfst_exit_addon_loop_lpi_1_dfm_1_1))
      | addon_loop_addon_loop_nor_1_cse_1;
  assign asn_rawWindow_0_4_lpi_1_nand_nl = ~(main_stage_0_3 & addon_loop_and_itm_2);
  assign rawWindow_0_4_lpi_1_mx0 = MUX_v_12_2_2(tmp_lpi_1_dfm_1, rawWindow_0_4_lpi_1,
      asn_rawWindow_0_4_lpi_1_nand_nl);
  assign line_write_line_write_nor_3_cse_1 = ~(line_write_equal_tmp_6 | line_write_equal_tmp_7);
  assign demosaicInterpol_demosaicInterpol_nor_5 = ~(operator_2_false_2_operator_2_false_2_and_svs_1
      | operator_2_false_1_operator_2_false_1_and_svs_1 | operator_2_false_operator_2_false_nor_svs_1);
  assign demosaicInterpol_else_and_8 = operator_2_false_2_operator_2_false_2_and_svs_1
      & (~ operator_2_false_1_operator_2_false_1_and_svs_1) & (~ operator_2_false_operator_2_false_nor_svs_1);
  assign or_3_nl = exitL_exitL_exit_inner_loop_lpi_1 | (~ lfst_exit_addon_loop_lpi_1_dfm_3_0)
      | exitL_exit_addon_loop_sva;
  assign mux_10_nl = MUX_s_1_2_2(or_3_nl, exitL_exit_addon_loop_sva, lfst_exit_addon_loop_lpi_1_dfm_3_1);
  assign and_tmp = demosaic_reg_eb & inner_loop_acc_2_itm_13_1 & outer_loop_acc_3_itm_13_1
      & mux_10_nl;
  assign or_tmp_2 = (~ lfst_exit_addon_loop_lpi_1_dfm_3_1) | exitL_exit_addon_loop_sva;
  assign or_tmp_13 = lfst_exit_addon_loop_lpi_1_dfm_3_1 | exitL_exitL_exit_inner_loop_lpi_1
      | (~ lfst_exit_addon_loop_lpi_1_dfm_3_0) | exitL_exit_addon_loop_sva;
  assign or_tmp_17 = exitL_exitL_exit_inner_loop_lpi_1 | (~ lfst_exit_addon_loop_lpi_1_dfm_3_0);
  assign and_tmp_8 = inner_loop_acc_2_itm_13_1 & outer_loop_acc_3_itm_13_1 & or_tmp_17;
  assign and_tmp_9 = inner_loop_acc_2_itm_13_1 & (outer_loop_acc_3_itm_13_1 | (~
      or_tmp_17));
  assign or_dcpl_25 = (inner_loop_col_lpi_1_dfm_1_11_0[1:0]!=2'b00);
  assign or_dcpl_26 = (~ inner_loop_asn_sft_lpi_1_dfm_1) | lfst_exit_line_write_lpi_1_dfm_st_1_1;
  assign or_dcpl_29 = outer_loop_asn_sft_lpi_1_dfm_1 | inner_loop_asn_sft_1_lpi_1_dfm_1;
  assign or_dcpl_30 = or_dcpl_29 | (~ main_stage_0_2) | lfst_exit_addon_loop_lpi_1_dfm_st_1_1;
  assign or_dcpl_32 = (inner_loop_col_lpi_1_dfm_1_11_0[1:0]!=2'b01);
  assign or_dcpl_35 = (inner_loop_col_lpi_1_dfm_1_11_0[1:0]!=2'b10);
  assign or_dcpl_38 = ~((inner_loop_col_lpi_1_dfm_1_11_0[1:0]==2'b11));
  assign or_dcpl_41 = (~ lfst_exit_line_write_lpi_1_dfm_st_1_1) | lfst_exit_line_write_lpi_1_dfm_st_1_0;
  assign or_dcpl_44 = or_dcpl_29 | (~ main_stage_0_2);
  assign or_dcpl_45 = or_dcpl_44 | lfst_exit_addon_loop_lpi_1_dfm_st_1_1 | (~ inner_loop_asn_sft_lpi_1_dfm_1);
  assign and_dcpl_95 = main_stage_0_2 & (~ lfst_exit_addon_loop_lpi_1_dfm_st_1_0)
      & lfst_exit_addon_loop_lpi_1_dfm_st_1_1;
  assign or_dcpl_68 = or_dcpl_29 | (~ main_stage_0_2) | addon_loop_equal_tmp_1 |
      addon_loop_equal_tmp_1_1 | (~ inner_loop_asn_sft_lpi_1_dfm_1) | (~ sfi_demosaic_reg_eb_lpi_1_dfm_1);
  assign mux_105_nl = MUX_s_1_2_2((~ or_tmp_13), or_tmp_2, and_165_cse);
  assign and_tmp_20 = demosaic_reg_eb & mux_105_nl;
  assign mux_39_nl = MUX_s_1_2_2((~ or_tmp_13), or_tmp_2, outer_loop_acc_3_itm_13_1);
  assign and_tmp_21 = demosaic_reg_eb & inner_loop_acc_2_itm_13_1 & mux_39_nl;
  assign and_146_nl = demosaic_reg_eb & inner_loop_acc_2_itm_13_1 & outer_loop_acc_3_itm_13_1;
  assign mux_106_cse = MUX_s_1_2_2((~ or_tmp_13), or_tmp_2, and_146_nl);
  assign or_dcpl_75 = or_tmp_17 | exitL_exit_addon_loop_sva | (~ lfst_exitL_exit_inner_loop_lpi_1);
  assign and_136_nl = sfi_demosaic_reg_eb_lpi_1 & inner_loop_asn_sft_lpi_1;
  assign mux_118_nl = MUX_s_1_2_2(and_tmp, mux_106_cse, and_136_nl);
  assign mux_119_nl = MUX_s_1_2_2(mux_118_nl, and_tmp_20, or_31_cse);
  assign mux_120_nl = MUX_s_1_2_2(mux_119_nl, and_tmp, inner_loop_asn_sft_1_lpi_1);
  assign mux_121_nl = MUX_s_1_2_2(and_tmp_20, mux_120_nl, lfst_exitL_exitL_exit_line_write_lpi_1);
  assign mux_123_nl = MUX_s_1_2_2(and_tmp_21, mux_121_nl, nor_12_cse);
  assign mux_124_nl = MUX_s_1_2_2(mux_123_nl, and_tmp, outer_loop_asn_sft_lpi_1);
  assign mux_125_itm = MUX_s_1_2_2(and_tmp_21, mux_124_nl, lfst_exitL_exit_inner_loop_lpi_1);
  assign xor_dcpl = (top_reg_imgPattern[1]) ^ (inner_loop_col_lpi_1_dfm_1[0]) ^ (top_reg_imgPattern[0])
      ^ (outer_loop_row_lpi_1_dfm_1[0]);
  assign lineBuf_rsc_0_0_i_radr_d = {line_write_acc_psp_sva_1 , (inner_loop_col_lpi_1_dfm_1_11_0[11:2])};
  assign lineBuf_rsc_0_0_i_wadr_d = {line_write_acc_psp_sva_1 , (inner_loop_col_lpi_1_dfm_1_11_0[11:2])};
  assign inner_loop_mux_180_nl = MUX_v_12_2_2(rawWindow_1_3_lpi_1, rawWindow_1_4_lpi_1_mx1,
      sfi_demosaic_reg_eb_lpi_1_dfm_1);
  assign inner_loop_mux_181_nl = MUX_v_12_2_2(rawWindow_2_3_lpi_1, addon_loop_mux_3_cse,
      sfi_demosaic_reg_eb_lpi_1_dfm_1);
  assign inner_loop_mux_182_nl = MUX_v_12_2_2(rawWindow_3_3_lpi_1, rawWindow_3_4_lpi_1_mx1,
      sfi_demosaic_reg_eb_lpi_1_dfm_1);
  assign lineBuf_rsc_0_0_i_d_d_pff = MUX_v_12_25_2x0x1x2x3x4x5x6x7(inner_loop_mux_180_nl,
      rawWindow_1_4_lpi_1_mx1, rawWindow_2_0_lpi_1, rawWindow_2_1_lpi_1, rawWindow_2_2_lpi_1,
      inner_loop_mux_181_nl, addon_loop_mux_3_cse, rawWindow_3_0_lpi_1, rawWindow_3_1_lpi_1,
      rawWindow_3_2_lpi_1, inner_loop_mux_182_nl, rawWindow_3_4_lpi_1_mx1, rawWindow_4_0_lpi_1,
      rawWindow_4_1_lpi_1, rawWindow_4_2_lpi_1, rawWindow_4_3_lpi_1, srcPixel_lpi_1_dfm_mx0,
      {line_write_acc_4_itm_1 , operator_3_false_slc_operator_3_false_acc_psp_4_0_1_0_itm_1});
  assign lineBuf_rsc_0_0_i_we_d_pff = lineBuf_rsc_0_0_i_we_d_iff;
  assign lineBuf_rsc_0_0_i_re_d_pff = lineBuf_rsc_0_0_i_re_d_iff;
  assign lineBuf_rsc_0_1_i_radr_d = {line_write_acc_psp_sva_1 , (inner_loop_col_lpi_1_dfm_1_11_0[11:2])};
  assign lineBuf_rsc_0_1_i_wadr_d = {line_write_acc_psp_sva_1 , (inner_loop_col_lpi_1_dfm_1_11_0[11:2])};
  assign lineBuf_rsc_0_1_i_we_d_pff = lineBuf_rsc_0_1_i_we_d_iff;
  assign lineBuf_rsc_0_1_i_re_d_pff = lineBuf_rsc_0_1_i_re_d_iff;
  assign lineBuf_rsc_0_2_i_radr_d = {line_write_acc_psp_sva_1 , (inner_loop_col_lpi_1_dfm_1_11_0[11:2])};
  assign lineBuf_rsc_0_2_i_wadr_d = {line_write_acc_psp_sva_1 , (inner_loop_col_lpi_1_dfm_1_11_0[11:2])};
  assign lineBuf_rsc_0_2_i_we_d_pff = lineBuf_rsc_0_2_i_we_d_iff;
  assign lineBuf_rsc_0_2_i_re_d_pff = lineBuf_rsc_0_2_i_re_d_iff;
  assign lineBuf_rsc_0_3_i_radr_d = {line_write_acc_psp_sva_1 , (inner_loop_col_lpi_1_dfm_1_11_0[11:2])};
  assign lineBuf_rsc_0_3_i_wadr_d = {line_write_acc_psp_sva_1 , (inner_loop_col_lpi_1_dfm_1_11_0[11:2])};
  assign lineBuf_rsc_0_3_i_we_d_pff = lineBuf_rsc_0_3_i_we_d_iff;
  assign lineBuf_rsc_0_3_i_re_d_pff = lineBuf_rsc_0_3_i_re_d_iff;
  assign or_dcpl = exitL_exitL_exit_inner_loop_lpi_1 | exitL_exit_addon_loop_sva;
  assign or_186_cse = demosaicInterpol_nor_cse | operator_2_false_operator_2_false_nor_svs_1;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawWindow_3_4_lpi_1 <= 12'b000000000000;
      rawWindow_2_4_lpi_1 <= 12'b000000000000;
      rawWindow_1_4_lpi_1 <= 12'b000000000000;
      raw_read_raw_read_nor_itm_1 <= 1'b0;
      raw_read_raw_read_and_itm_1 <= 1'b0;
      raw_read_raw_read_and_1_itm_1 <= 1'b0;
      raw_read_raw_read_and_2_itm_1 <= 1'b0;
      addon_loop_and_29_itm_2 <= 1'b0;
      addon_loop_and_28_itm_2 <= 1'b0;
      addon_loop_and_27_itm_2 <= 1'b0;
      reg_lineBuf_rsc_0_0_i_oswt_cse <= 1'b0;
      reg_lineBuf_rsc_0_1_i_oswt_cse <= 1'b0;
      reg_lineBuf_rsc_0_2_i_oswt_cse <= 1'b0;
      reg_lineBuf_rsc_0_3_i_oswt_cse <= 1'b0;
      reg_dst_rsci_oswt_cse <= 1'b0;
      inner_loop_col_lpi_1_dfm_1_11_0 <= 12'b000000000000;
      line_write_acc_psp_sva_1 <= 2'b00;
      operator_13_false_3_slc_demosaicInterpol_else_else_if_acc_10_12_1_itm_1 <=
          12'b000000000000;
      demosaicInterpol_else_else_else_acc_27_itm_1 <= 13'b0000000000000;
      demosaicInterpol_else_else_else_acc_29_itm_1_13_1 <= 13'b0000000000000;
      demosaicInterpol_else_else_else_acc_23_itm_1_13_1 <= 13'b0000000000000;
      operator_2_false_2_operator_2_false_2_and_svs_1 <= 1'b0;
      operator_2_false_1_operator_2_false_1_and_svs_1 <= 1'b0;
      operator_2_false_operator_2_false_nor_svs_1 <= 1'b0;
      rawWindow_1_3_lpi_1 <= 12'b000000000000;
      sfi_demosaic_reg_eb_lpi_1_dfm_1 <= 1'b0;
      rawWindow_2_3_lpi_1 <= 12'b000000000000;
      rawWindow_3_3_lpi_1 <= 12'b000000000000;
      inner_loop_if_land_lpi_1_dfm_1 <= 1'b0;
      line_write_acc_4_itm_1 <= 3'b000;
      operator_3_false_slc_operator_3_false_acc_psp_4_0_1_0_itm_1 <= 2'b00;
      lfst_exit_line_write_lpi_1_dfm_st_1_1 <= 1'b0;
      lfst_exit_line_write_lpi_1_dfm_st_1_0 <= 1'b0;
      inner_loop_if_1_inner_loop_if_1_or_itm_1 <= 1'b0;
      exitL_exit_line_write_lpi_1_dfm_st_1 <= 1'b0;
      inner_loop_asn_sft_lpi_1_dfm_1 <= 1'b0;
      sfi_exit_inner_loop_lpi_1_dfm_1_1 <= 1'b0;
      lfst_exit_addon_loop_lpi_1_dfm_st_1_1 <= 1'b0;
      lfst_exit_addon_loop_lpi_1_dfm_st_1_0 <= 1'b0;
      reg_src_rsci_oswt_cse <= 1'b0;
      lfst_exit_addon_loop_lpi_1_dfm_3_1 <= 1'b0;
      exitL_exit_addon_loop_sva <= 1'b1;
      lfst_exit_addon_loop_lpi_1_dfm_3_0 <= 1'b0;
      outer_loop_row_lpi_1 <= 13'b0000000000000;
      main_stage_0_2 <= 1'b0;
      main_stage_0_3 <= 1'b0;
      rawWindow_4_4_lpi_1 <= 12'b000000000000;
      rawWindow_0_3_lpi_1 <= 12'b000000000000;
      inner_loop_asn_sft_1_lpi_1_dfm_1 <= 1'b0;
      outer_loop_asn_sft_lpi_1_dfm_1 <= 1'b0;
      addon_loop_equal_tmp_1 <= 1'b0;
      addon_loop_equal_tmp_1_1 <= 1'b0;
      addon_loop_and_29_itm_1 <= 1'b0;
      addon_loop_and_28_itm_1 <= 1'b0;
      addon_loop_and_27_itm_1 <= 1'b0;
      rawWindow_4_3_lpi_1 <= 12'b000000000000;
      rawWindow_4_1_lpi_1 <= 12'b000000000000;
      rawWindow_4_2_lpi_1 <= 12'b000000000000;
      rawWindow_4_0_lpi_1 <= 12'b000000000000;
      rawWindow_3_0_lpi_1 <= 12'b000000000000;
      rawWindow_3_1_lpi_1 <= 12'b000000000000;
      rawWindow_2_0_lpi_1 <= 12'b000000000000;
      rawWindow_2_1_lpi_1 <= 12'b000000000000;
      rawWindow_2_2_lpi_1 <= 12'b000000000000;
      rawWindow_3_2_lpi_1 <= 12'b000000000000;
      addon_loop_cnt_lpi_1 <= 14'b00000000000000;
      rawWindow_0_4_lpi_1 <= 12'b000000000000;
      addon_loop_and_itm_2 <= 1'b0;
      addon_loop_and_51_itm_1 <= 1'b0;
      addon_loop_and_itm_1 <= 1'b0;
    end
    else if ( core_wen ) begin
      rawWindow_3_4_lpi_1 <= rawWindow_3_4_lpi_1_mx1;
      rawWindow_2_4_lpi_1 <= addon_loop_mux_3_cse;
      rawWindow_1_4_lpi_1 <= rawWindow_1_4_lpi_1_mx1;
      raw_read_raw_read_nor_itm_1 <= ~((inner_loop_col_lpi_1_dfm_1_11_0[1:0]!=2'b00));
      raw_read_raw_read_and_itm_1 <= (inner_loop_col_lpi_1_dfm_1_11_0[1:0]==2'b01);
      raw_read_raw_read_and_1_itm_1 <= (inner_loop_col_lpi_1_dfm_1_11_0[1:0]==2'b10);
      raw_read_raw_read_and_2_itm_1 <= (inner_loop_col_lpi_1_dfm_1_11_0[1:0]==2'b11);
      addon_loop_and_29_itm_2 <= addon_loop_and_29_itm_1;
      addon_loop_and_28_itm_2 <= addon_loop_and_28_itm_1;
      addon_loop_and_27_itm_2 <= addon_loop_and_27_itm_1;
      reg_lineBuf_rsc_0_0_i_oswt_cse <= raw_read_nor_8_rmff;
      reg_lineBuf_rsc_0_1_i_oswt_cse <= raw_read_nor_7_rmff;
      reg_lineBuf_rsc_0_2_i_oswt_cse <= raw_read_nor_6_rmff;
      reg_lineBuf_rsc_0_3_i_oswt_cse <= raw_read_nor_5_rmff;
      reg_dst_rsci_oswt_cse <= ~(mux_97_nl | (~ main_stage_0_2));
      inner_loop_col_lpi_1_dfm_1_11_0 <= inner_loop_col_lpi_1_dfm_1[11:0];
      line_write_acc_psp_sva_1 <= nl_line_write_acc_psp_sva_1[1:0];
      operator_13_false_3_slc_demosaicInterpol_else_else_if_acc_10_12_1_itm_1 <=
          z_out_9[12:1];
      demosaicInterpol_else_else_else_acc_27_itm_1 <= MUX_v_13_2_2(z_out_9, operator_12_false_3_acc_4_nl,
          xor_dcpl);
      demosaicInterpol_else_else_else_acc_29_itm_1_13_1 <= nl_demosaicInterpol_else_else_else_acc_29_itm_1_13_1[12:0];
      demosaicInterpol_else_else_else_acc_23_itm_1_13_1 <= nl_demosaicInterpol_else_else_else_acc_23_itm_1_13_1[12:0];
      operator_2_false_2_operator_2_false_2_and_svs_1 <= inner_loop_if_if_bayerPattern_xor_3_tmp
          & (~ inner_loop_if_if_bayerPattern_xor_tmp);
      operator_2_false_1_operator_2_false_1_and_svs_1 <= inner_loop_if_if_bayerPattern_xor_tmp
          & (~ inner_loop_if_if_bayerPattern_xor_3_tmp);
      operator_2_false_operator_2_false_nor_svs_1 <= ~(inner_loop_if_if_bayerPattern_xor_3_tmp
          | inner_loop_if_if_bayerPattern_xor_tmp);
      rawWindow_1_3_lpi_1 <= rawWindow_1_3_lpi_1_mx0;
      sfi_demosaic_reg_eb_lpi_1_dfm_1 <= sfi_demosaic_reg_eb_lpi_1_dfm_1_1;
      rawWindow_2_3_lpi_1 <= rawWindow_2_3_lpi_1_mx0;
      rawWindow_3_3_lpi_1 <= rawWindow_3_3_lpi_1_mx0;
      inner_loop_if_land_lpi_1_dfm_1 <= (readslicef_12_1_11(operator_13_false_1_acc_nl))
          & (readslicef_12_1_11(operator_13_false_acc_nl));
      line_write_acc_4_itm_1 <= nl_line_write_acc_4_itm_1[2:0];
      operator_3_false_slc_operator_3_false_acc_psp_4_0_1_0_itm_1 <= operator_3_false_acc_psp_4_0_sva_1[1:0];
      lfst_exit_line_write_lpi_1_dfm_st_1_1 <= lfst_exit_line_write_lpi_1_dfm_1_1;
      lfst_exit_line_write_lpi_1_dfm_st_1_0 <= lfst_exit_line_write_lpi_1_dfm_0_1;
      inner_loop_if_1_inner_loop_if_1_or_itm_1 <= ((readslicef_13_1_12(operator_13_false_3_acc_nl))
          & (outer_loop_row_lpi_1_dfm_1[1:0]==2'b10)) | (readslicef_14_1_13(operator_13_false_2_acc_nl));
      exitL_exit_line_write_lpi_1_dfm_st_1 <= exitL_exit_line_write_lpi_1_dfm_1;
      inner_loop_asn_sft_lpi_1_dfm_1 <= demosaic_reg_eb_mux_cse;
      sfi_exit_inner_loop_lpi_1_dfm_1_1 <= sfi_exit_inner_loop_lpi_1_dfm_1;
      lfst_exit_addon_loop_lpi_1_dfm_st_1_1 <= lfst_exit_addon_loop_lpi_1_dfm_1_1;
      lfst_exit_addon_loop_lpi_1_dfm_st_1_0 <= lfst_exit_addon_loop_lpi_1_dfm_0_1;
      reg_src_rsci_oswt_cse <= MUX_s_1_2_2(nor_74_nl, and_165_cse, exitL_exit_addon_loop_sva);
      lfst_exit_addon_loop_lpi_1_dfm_3_1 <= lfst_exit_addon_loop_lpi_1_dfm_3_1_1;
      exitL_exit_addon_loop_sva <= ~(lfst_exit_addon_loop_lpi_1_dfm_3_1_1 | lfst_exit_addon_loop_lpi_1_dfm_3_0_1);
      lfst_exit_addon_loop_lpi_1_dfm_3_0 <= lfst_exit_addon_loop_lpi_1_dfm_3_0_1;
      outer_loop_row_lpi_1 <= MUX_v_13_2_2(z_out_18, outer_loop_row_lpi_1_dfm_1,
          or_138_nl);
      main_stage_0_2 <= 1'b1;
      main_stage_0_3 <= main_stage_0_2;
      rawWindow_4_4_lpi_1 <= rawWindow_4_4_lpi_1_mx0;
      rawWindow_0_3_lpi_1 <= rawWindow_0_3_lpi_1_mx0;
      inner_loop_asn_sft_1_lpi_1_dfm_1 <= inner_loop_asn_sft_1_lpi_1_dfm_mx0;
      outer_loop_asn_sft_lpi_1_dfm_1 <= outer_loop_asn_sft_lpi_1_dfm_mx0;
      addon_loop_equal_tmp_1 <= addon_loop_equal_tmp_2;
      addon_loop_equal_tmp_1_1 <= addon_loop_equal_tmp_3;
      addon_loop_and_29_itm_1 <= (i_2_lpi_1_dfm_1_0_1==2'b11) & line_write_line_write_nor_3_cse_1
          & demosaic_reg_eb_mux_cse & (~ inner_loop_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_addon_loop_nor_20_cse_1;
      addon_loop_and_28_itm_1 <= (i_2_lpi_1_dfm_1_0_1==2'b10) & line_write_line_write_nor_3_cse_1
          & demosaic_reg_eb_mux_cse & (~ inner_loop_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_addon_loop_nor_20_cse_1;
      addon_loop_and_27_itm_1 <= (i_2_lpi_1_dfm_1_0_1==2'b01) & line_write_line_write_nor_3_cse_1
          & demosaic_reg_eb_mux_cse & (~ inner_loop_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_addon_loop_nor_20_cse_1;
      rawWindow_4_3_lpi_1 <= MUX_v_12_2_2(rawWindow_4_3_lpi_1, rawWindow_4_4_lpi_1_mx0,
          mux_125_itm);
      rawWindow_4_1_lpi_1 <= MUX_v_12_2_2(rawWindow_4_1_lpi_1, rawWindow_4_2_lpi_1,
          mux_125_itm);
      rawWindow_4_2_lpi_1 <= MUX_v_12_2_2(rawWindow_4_2_lpi_1, rawWindow_4_3_lpi_1,
          mux_125_itm);
      rawWindow_4_0_lpi_1 <= MUX_v_12_2_2(rawWindow_4_0_lpi_1, rawWindow_4_1_lpi_1,
          mux_125_itm);
      rawWindow_3_0_lpi_1 <= MUX_v_12_2_2(rawWindow_3_0_lpi_1, rawWindow_3_1_lpi_1,
          mux_125_itm);
      rawWindow_3_1_lpi_1 <= MUX_v_12_2_2(rawWindow_3_1_lpi_1, rawWindow_3_2_lpi_1,
          mux_125_itm);
      rawWindow_2_0_lpi_1 <= MUX_v_12_2_2(rawWindow_2_0_lpi_1, rawWindow_2_1_lpi_1,
          mux_125_itm);
      rawWindow_2_1_lpi_1 <= MUX_v_12_2_2(rawWindow_2_1_lpi_1, rawWindow_2_2_lpi_1,
          mux_125_itm);
      rawWindow_2_2_lpi_1 <= MUX_v_12_2_2(rawWindow_2_2_lpi_1, rawWindow_2_3_lpi_1_mx0,
          mux_125_itm);
      rawWindow_3_2_lpi_1 <= MUX_v_12_2_2(rawWindow_3_2_lpi_1, rawWindow_3_3_lpi_1_mx0,
          mux_125_itm);
      addon_loop_cnt_lpi_1 <= MUX_v_14_2_2((signext_14_1(~ exit_outer_loop_lpi_1_dfm_1)),
          addon_loop_cnt_sva_2, addon_loop_equal_tmp_2);
      rawWindow_0_4_lpi_1 <= rawWindow_0_4_lpi_1_mx0;
      addon_loop_and_itm_2 <= addon_loop_and_itm_1;
      addon_loop_and_51_itm_1 <= (raw_read_acc_3_tmp[2]) & line_write_line_write_nor_3_cse_1
          & demosaic_reg_eb_mux_cse & (~(inner_loop_asn_sft_1_lpi_1_dfm_mx0 | outer_loop_asn_sft_lpi_1_dfm_mx0))
          & addon_loop_or_tmp_1;
      addon_loop_and_itm_1 <= (i_2_lpi_1_dfm_1_0_1==2'b00) & line_write_line_write_nor_3_cse_1
          & demosaic_reg_eb_mux_cse & (~ inner_loop_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_addon_loop_nor_20_cse_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dst_rsci_idat_35_24 <= 12'b000000000000;
      dst_rsci_idat_11_0 <= 12'b000000000000;
      dst_rsci_idat_23_12 <= 12'b000000000000;
    end
    else if ( inner_loop_if_1_and_cse ) begin
      dst_rsci_idat_35_24 <= demosaic_clip_demosaic_clip_demosaic_clip_nor_nl & ({{11{inner_loop_if_land_lpi_1_dfm_1}},
          inner_loop_if_land_lpi_1_dfm_1}) & ({{11{inner_loop_asn_sft_lpi_1_dfm_1}},
          inner_loop_asn_sft_lpi_1_dfm_1}) & (signext_12_1(~ and_dcpl_95));
      dst_rsci_idat_11_0 <= demosaic_clip_2_demosaic_clip_2_demosaic_clip_2_nor_nl
          & ({{11{inner_loop_if_land_lpi_1_dfm_1}}, inner_loop_if_land_lpi_1_dfm_1})
          & ({{11{inner_loop_asn_sft_lpi_1_dfm_1}}, inner_loop_asn_sft_lpi_1_dfm_1})
          & (signext_12_1(~ and_dcpl_95));
      dst_rsci_idat_23_12 <= demosaic_clip_1_demosaic_clip_1_demosaic_clip_1_nor_nl
          & ({{11{inner_loop_if_land_lpi_1_dfm_1}}, inner_loop_if_land_lpi_1_dfm_1})
          & ({{11{inner_loop_asn_sft_lpi_1_dfm_1}}, inner_loop_asn_sft_lpi_1_dfm_1})
          & (signext_12_1(~ and_dcpl_95));
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      srcPixel_lpi_1 <= 12'b000000000000;
    end
    else if ( core_wen & (~(or_dcpl_44 | addon_loop_equal_tmp_1 | addon_loop_equal_tmp_1_1
        | (~ sfi_exit_inner_loop_lpi_1_dfm_1_1))) ) begin
      srcPixel_lpi_1 <= src_rsci_idat_mxwt;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lfst_exit_line_write_lpi_1_1 <= 1'b0;
      lfst_exit_line_write_lpi_1_0 <= 1'b0;
    end
    else if ( line_write_and_10_cse ) begin
      lfst_exit_line_write_lpi_1_1 <= lfst_exit_line_write_lpi_1_dfm_3_1_1;
      lfst_exit_line_write_lpi_1_0 <= lfst_exit_line_write_lpi_1_dfm_3_0_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      sfi_demosaic_reg_eb_lpi_1 <= 1'b0;
      lfst_exitL_exitL_exit_line_write_lpi_1 <= 1'b0;
      exitL_exitL_exitL_exit_line_write_lpi_1 <= 1'b0;
      lfst_exit_inner_loop_lpi_1 <= 1'b0;
    end
    else if ( demosaic_reg_eb_and_cse ) begin
      sfi_demosaic_reg_eb_lpi_1 <= sfi_demosaic_reg_eb_lpi_1 & inner_loop_asn_sft_1_lpi_1_dfm_mx0;
      lfst_exitL_exitL_exit_line_write_lpi_1 <= ~(exitL_exit_line_write_lpi_1_dfm_1
          | inner_loop_asn_sft_1_lpi_1_dfm_mx0);
      exitL_exitL_exitL_exit_line_write_lpi_1 <= exitL_exit_line_write_lpi_1_dfm_1
          | inner_loop_asn_sft_1_lpi_1_dfm_mx0;
      lfst_exit_inner_loop_lpi_1 <= ~ exit_inner_loop_lpi_1_dfm_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lfst_exitL_exit_line_write_lpi_1 <= 1'b0;
    end
    else if ( core_wen & (~(inner_loop_asn_sft_1_lpi_1_dfm_mx0 | outer_loop_asn_sft_lpi_1_dfm_mx0
        | lfst_exit_addon_loop_lpi_1_dfm_1_1)) ) begin
      lfst_exitL_exit_line_write_lpi_1 <= ~ exitL_exit_line_write_lpi_1_dfm_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      sfi_exit_inner_loop_lpi_1 <= 1'b0;
      lfst_exitL_exit_inner_loop_lpi_1 <= 1'b0;
      exitL_exitL_exit_inner_loop_lpi_1 <= 1'b0;
    end
    else if ( inner_loop_and_cse ) begin
      sfi_exit_inner_loop_lpi_1 <= sfi_exit_inner_loop_lpi_1 & outer_loop_asn_sft_lpi_1_dfm_mx0;
      lfst_exitL_exit_inner_loop_lpi_1 <= ~ exitL_exit_inner_loop_lpi_1_dfm_1;
      exitL_exitL_exit_inner_loop_lpi_1 <= exitL_exit_inner_loop_lpi_1_dfm_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      i_lpi_1_1_0 <= 2'b00;
    end
    else if ( core_wen & (~(addon_loop_or_83_tmp_1 | inner_loop_asn_sft_1_lpi_1_dfm_mx0
        | line_write_equal_tmp_7 | (~((~(line_write_or_tmp_1 & (~ (raw_read_acc_3_tmp[2]))))
        & demosaic_reg_eb_mux_cse)))) ) begin
      i_lpi_1_1_0 <= MUX_v_2_2_2((signext_2_1(~ (raw_read_acc_3_tmp[2]))), (line_write_acc_3_tmp[1:0]),
          inner_loop_and_21_nl);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      i_2_lpi_1_1_0 <= 2'b00;
    end
    else if ( core_wen & ((~(line_write_or_15_tmp_1 | (~ demosaic_reg_eb_mux_cse)
        | outer_loop_or_8_tmp_1 | lfst_exit_addon_loop_lpi_1_dfm_1_1)) | inner_loop_and_2_rgt)
        ) begin
      i_2_lpi_1_1_0 <= MUX_v_2_2_2((raw_read_acc_3_tmp[1:0]), i_2_lpi_1_dfm_1_0_1,
          inner_loop_and_2_rgt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      inner_loop_asn_sft_lpi_1 <= 1'b0;
    end
    else if ( core_wen & (~(lfst_exitL_exit_line_write_lpi_1_dfm_1 & (~ inner_loop_asn_sft_1_lpi_1_dfm_mx0)
        & (~ outer_loop_asn_sft_lpi_1_dfm_mx0))) ) begin
      inner_loop_asn_sft_lpi_1 <= demosaic_reg_eb;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      inner_loop_asn_sft_1_lpi_1 <= 1'b0;
    end
    else if ( core_wen & (~(lfst_exitL_exitL_exit_line_write_lpi_1_dfm_1 & (~ outer_loop_asn_sft_lpi_1_dfm_mx0)))
        ) begin
      inner_loop_asn_sft_1_lpi_1 <= exit_inner_loop_lpi_1_dfm_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      inner_loop_col_lpi_1 <= 13'b0000000000000;
    end
    else if ( core_wen & ((~(inner_loop_and_20_tmp_1 | outer_loop_asn_sft_lpi_1_dfm_mx0
        | lfst_exit_addon_loop_lpi_1_dfm_1_1)) | outer_loop_and_6_rgt) ) begin
      inner_loop_col_lpi_1 <= MUX_v_13_2_2(inner_loop_col_lpi_1_dfm_1, z_out_18,
          outer_loop_and_6_rgt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      outer_loop_asn_sft_lpi_1 <= 1'b0;
    end
    else if ( core_wen & (~ lfst_exitL_exit_inner_loop_lpi_1_dfm_1) ) begin
      outer_loop_asn_sft_lpi_1 <= exit_outer_loop_lpi_1_dfm_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rawWindow_0_2_lpi_1 <= 12'b000000000000;
      rawWindow_1_1_lpi_1 <= 12'b000000000000;
      rawWindow_1_2_lpi_1 <= 12'b000000000000;
    end
    else if ( rawWindow_and_cse ) begin
      rawWindow_0_2_lpi_1 <= rawWindow_0_3_lpi_1_mx0;
      rawWindow_1_1_lpi_1 <= rawWindow_1_2_lpi_1;
      rawWindow_1_2_lpi_1 <= rawWindow_1_3_lpi_1_mx0;
    end
  end
  assign or_103_nl = (~ inner_loop_if_1_inner_loop_if_1_or_itm_1) | (~ exitL_exit_line_write_lpi_1_dfm_st_1)
      | inner_loop_asn_sft_1_lpi_1_dfm_1 | outer_loop_asn_sft_lpi_1_dfm_1;
  assign mux_97_nl = MUX_s_1_2_2(or_103_nl, lfst_exit_addon_loop_lpi_1_dfm_st_1_0,
      lfst_exit_addon_loop_lpi_1_dfm_st_1_1);
  assign or_201_nl = sfi_demosaic_reg_eb_lpi_1 | (~ lfst_exitL_exit_line_write_lpi_1)
      | sfi_exit_inner_loop_lpi_1 | (~(lfst_exit_line_write_lpi_1_1 & lfst_exitL_exitL_exit_line_write_lpi_1
      & lfst_exitL_exit_inner_loop_lpi_1)) | (~ lfst_exit_inner_loop_lpi_1) | exitL_exitL_exitL_exit_line_write_lpi_1
      | (~ lfst_exit_addon_loop_lpi_1_dfm_3_0) | or_dcpl;
  assign line_write_mux_49_nl = MUX_v_2_2_2(i_lpi_1_1_0, i_2_lpi_1_dfm_1_0_1, or_201_nl);
  assign nl_line_write_acc_psp_sva_1  = line_write_mux_49_nl + conv_u2u_1_2(inner_loop_col_lpi_1_dfm_1[12]);
  assign nl_operator_12_false_3_acc_4_nl = conv_u2u_12_13(~ rawWindow_0_2_lpi_1)
      + conv_u2u_12_13(~ rawWindow_1_1_lpi_1);
  assign operator_12_false_3_acc_4_nl = nl_operator_12_false_3_acc_4_nl[12:0];
  assign demosaicInterpol_if_mux_19_nl = MUX_v_12_2_2(rawWindow_1_2_lpi_1, rawWindow_2_2_lpi_1,
      xor_dcpl);
  assign demosaicInterpol_if_mux_20_nl = MUX_v_12_2_2(rawWindow_2_1_lpi_1, rawWindow_3_2_lpi_1,
      xor_dcpl);
  assign nl_demosaicInterpol_else_else_else_acc_29_itm_1_13_1  = conv_u2u_12_13(demosaicInterpol_if_mux_19_nl)
      + conv_u2u_12_13(demosaicInterpol_if_mux_20_nl);
  assign demosaicInterpol_if_mux_21_nl = MUX_v_12_2_2(rawWindow_0_2_lpi_1, (~ rawWindow_2_0_lpi_1),
      xor_dcpl);
  assign demosaicInterpol_if_mux_22_nl = MUX_v_12_2_2(rawWindow_2_0_lpi_1, rawWindow_2_2_lpi_1,
      xor_dcpl);
  assign nl_demosaicInterpol_else_else_else_acc_23_itm_1_13_1  = conv_u2u_12_13(demosaicInterpol_if_mux_21_nl)
      + conv_u2u_12_13(demosaicInterpol_if_mux_22_nl);
  assign nl_operator_13_false_1_acc_nl = ({1'b1 , (~ (inner_loop_col_lpi_1_dfm_1[12:2]))})
      + 12'b000000000001;
  assign operator_13_false_1_acc_nl = nl_operator_13_false_1_acc_nl[11:0];
  assign nl_operator_13_false_acc_nl = ({1'b1 , (~ (outer_loop_row_lpi_1_dfm_1[12:2]))})
      + 12'b000000000001;
  assign operator_13_false_acc_nl = nl_operator_13_false_acc_nl[11:0];
  assign nl_line_write_acc_4_itm_1  = (operator_3_false_acc_psp_4_0_sva_1[4:2]) +
      3'b001;
  assign nl_operator_13_false_3_acc_nl = ({1'b1 , (~ (inner_loop_col_lpi_1_dfm_1[12:1]))})
      + 13'b0000000000001;
  assign operator_13_false_3_acc_nl = nl_operator_13_false_3_acc_nl[12:0];
  assign nl_operator_13_false_2_acc_nl = ({1'b1 , (~ outer_loop_row_lpi_1_dfm_1)})
      + 14'b00000000000011;
  assign operator_13_false_2_acc_nl = nl_operator_13_false_2_acc_nl[13:0];
  assign or_124_nl = (~ sfi_exit_inner_loop_lpi_1) | inner_loop_asn_sft_1_lpi_1;
  assign mux_98_nl = MUX_s_1_2_2(nand_13_cse, and_tmp_8, or_124_nl);
  assign mux_99_nl = MUX_s_1_2_2(nand_13_cse, mux_98_nl, lfst_exitL_exitL_exit_line_write_lpi_1);
  assign mux_100_nl = MUX_s_1_2_2(and_tmp_9, mux_99_nl, nor_12_cse);
  assign mux_101_nl = MUX_s_1_2_2(mux_100_nl, and_tmp_8, outer_loop_asn_sft_lpi_1);
  assign mux_102_nl = MUX_s_1_2_2(and_tmp_9, mux_101_nl, lfst_exitL_exit_inner_loop_lpi_1);
  assign nor_74_nl = ~(lfst_exit_addon_loop_lpi_1_dfm_3_1 | (~ mux_102_nl));
  assign or_138_nl = ((((~ exitL_exitL_exitL_exit_line_write_lpi_1) & lfst_exit_inner_loop_lpi_1)
      | outer_loop_asn_sft_lpi_1) & lfst_exit_addon_loop_lpi_1_dfm_3_0 & (~(exitL_exitL_exit_inner_loop_lpi_1
      | exitL_exit_addon_loop_sva)) & lfst_exitL_exit_inner_loop_lpi_1) | inner_loop_acc_2_itm_13_1;
  assign demosaicInterpol_or_2_nl = demosaicInterpol_demosaicInterpol_nor_5 | demosaicInterpol_else_and_8;
  assign demosaicInterpol_demosaicInterpol_mux1h_1_nl = MUX1HOT_v_12_3_2((z_out_7[11:0]),
      (z_out_8[11:0]), rawWindow_2_2_lpi_1, {demosaicInterpol_or_2_nl , demosaicInterpol_and_1_cse_1
      , operator_2_false_operator_2_false_nor_svs_1});
  assign demosaic_clip_nor_nl = ~(MUX_v_12_2_2(demosaicInterpol_demosaicInterpol_mux1h_1_nl,
      12'b111111111111, (demosaicInterpol_pixTmp_r_13_12_lpi_1_dfm_3[0])));
  assign demosaic_clip_demosaic_clip_demosaic_clip_nor_nl = ~(MUX_v_12_2_2(demosaic_clip_nor_nl,
      12'b111111111111, (demosaicInterpol_pixTmp_r_13_12_lpi_1_dfm_3[1])));
  assign demosaicInterpol_demosaicInterpol_mux1h_3_nl = MUX1HOT_v_12_3_2(rawWindow_2_2_lpi_1,
      (z_out_8[11:0]), (z_out_7[11:0]), {demosaicInterpol_demosaicInterpol_nor_5
      , demosaicInterpol_else_and_8 , demosaicInterpol_or_1_cse});
  assign demosaic_clip_2_nor_nl = ~(MUX_v_12_2_2(demosaicInterpol_demosaicInterpol_mux1h_3_nl,
      12'b111111111111, (demosaicInterpol_pixTmp_b_13_12_lpi_1_dfm_4[0])));
  assign demosaic_clip_2_demosaic_clip_2_demosaic_clip_2_nor_nl = ~(MUX_v_12_2_2(demosaic_clip_2_nor_nl,
      12'b111111111111, (demosaicInterpol_pixTmp_b_13_12_lpi_1_dfm_4[1])));
  assign demosaicInterpol_demosaicInterpol_demosaicInterpol_mux_nl = MUX_v_12_2_2((z_out_8[11:0]),
      rawWindow_2_2_lpi_1, demosaicInterpol_demosaicInterpol_nor_6_cse);
  assign demosaic_clip_1_nor_nl = ~(MUX_v_12_2_2(demosaicInterpol_demosaicInterpol_demosaicInterpol_mux_nl,
      12'b111111111111, (demosaicInterpol_pixTmp_g_13_12_lpi_1_dfm_2_mx0[0])));
  assign demosaic_clip_1_demosaic_clip_1_demosaic_clip_1_nor_nl = ~(MUX_v_12_2_2(demosaic_clip_1_nor_nl,
      12'b111111111111, (demosaicInterpol_pixTmp_g_13_12_lpi_1_dfm_2_mx0[1])));
  assign inner_loop_and_21_nl = line_write_equal_tmp_6 & demosaic_reg_eb_mux_cse
      & (~ inner_loop_asn_sft_1_lpi_1_dfm_mx0) & (~ addon_loop_or_83_tmp_1);
  assign operator_12_false_1_mux_12_nl = MUX_v_12_2_2(rawWindow_3_1_lpi_1, rawWindow_2_2_lpi_1,
      demosaicInterpol_demosaicInterpol_nor_6_cse);
  assign operator_12_false_1_mux_13_nl = MUX_v_12_2_2(rawWindow_3_3_lpi_1_dfm_1_mx0,
      rawWindow_2_3_lpi_1_dfm_1_mx0, demosaicInterpol_demosaicInterpol_nor_6_cse);
  assign nl_z_out_2 = conv_u2u_12_13(operator_12_false_1_mux_12_nl) + conv_u2u_12_13(operator_12_false_1_mux_13_nl);
  assign z_out_2 = nl_z_out_2[12:0];
  assign demosaicInterpol_if_mux_23_nl = MUX_v_12_2_2(rawWindow_2_3_lpi_1_dfm_1_mx0,
      rawWindow_2_0_lpi_1, demosaicInterpol_demosaicInterpol_nor_6_cse);
  assign demosaicInterpol_if_mux_24_nl = MUX_v_12_2_2(rawWindow_3_2_lpi_1, addon_loop_mux_3_cse,
      demosaicInterpol_demosaicInterpol_nor_6_cse);
  assign nl_z_out_4 = conv_u2u_12_13(demosaicInterpol_if_mux_23_nl) + conv_u2u_12_13(demosaicInterpol_if_mux_24_nl);
  assign z_out_4 = nl_z_out_4[12:0];
  assign nl_operator_12_false_2_acc_29_nl = conv_u2u_13_14(z_out_15) + conv_u2u_12_14(~
      rawWindow_3_3_lpi_1_dfm_1_mx0) + conv_u2u_12_14(operator_13_false_3_slc_demosaicInterpol_else_else_if_acc_10_12_1_itm_1);
  assign operator_12_false_2_acc_29_nl = nl_operator_12_false_2_acc_29_nl[13:0];
  assign operator_12_false_1_mux_14_nl = MUX_v_14_2_2(({2'b00 , rawWindow_1_3_lpi_1_dfm_1_mx0}),
      operator_12_false_2_acc_29_nl, demosaicInterpol_demosaicInterpol_nor_6_cse);
  assign operator_12_false_1_mux_15_nl = MUX_v_14_2_2(({2'b00 , rawWindow_2_2_lpi_1}),
      ({rawWindow_2_1_lpi_1 , 2'b10}), demosaicInterpol_demosaicInterpol_nor_6_cse);
  assign nl_z_out_5 = conv_u2u_14_15(operator_12_false_1_mux_14_nl) + conv_u2u_14_15(operator_12_false_1_mux_15_nl);
  assign z_out_5 = nl_z_out_5[14:0];
  assign operator_12_false_1_mux_16_nl = MUX_v_12_2_2(rawWindow_1_1_lpi_1, 12'b100000000001,
      demosaicInterpol_demosaicInterpol_nor_6_cse);
  assign operator_12_false_1_mux_17_nl = MUX_v_14_2_2(({(z_out_17_14_1[12:0]) , (z_out_2[0])}),
      ({1'b0 , (z_out_17_14_1[13:1])}), demosaicInterpol_demosaicInterpol_nor_6_cse);
  assign nl_z_out_6 = ({1'b1 , demosaicInterpol_demosaicInterpol_nor_6_cse , 1'b0
      , operator_12_false_1_mux_16_nl}) + conv_u2u_14_15(operator_12_false_1_mux_17_nl);
  assign z_out_6 = nl_z_out_6[14:0];
  assign operator_18_true_1_and_3_nl = (z_out_19[16]) & ((z_out_19[2:0]!=3'b000));
  assign nl_z_out_7 = (z_out_19[16:3]) + conv_u2u_1_14(operator_18_true_1_and_3_nl);
  assign z_out_7 = nl_z_out_7[13:0];
  assign operator_18_true_mux_2_nl = MUX_v_14_2_2((z_out_14[16:3]), (z_out_20[16:3]),
      demosaicInterpol_demosaicInterpol_nor_6_cse);
  assign operator_18_true_and_3_nl = (z_out_14[16]) & ((z_out_14[2:0]!=3'b000));
  assign operator_18_true_2_and_3_nl = (z_out_20[16]) & ((z_out_20[2:0]!=3'b000));
  assign operator_18_true_mux_3_nl = MUX_s_1_2_2(operator_18_true_and_3_nl, operator_18_true_2_and_3_nl,
      demosaicInterpol_demosaicInterpol_nor_6_cse);
  assign nl_z_out_8 = operator_18_true_mux_2_nl + conv_u2u_1_14(operator_18_true_mux_3_nl);
  assign z_out_8 = nl_z_out_8[13:0];
  assign demosaicInterpol_else_if_mux_2_nl = MUX_v_12_2_2((~ rawWindow_0_2_lpi_1),
      rawWindow_0_2_lpi_1, xor_dcpl);
  assign demosaicInterpol_else_if_mux_3_nl = MUX_v_12_2_2((~ rawWindow_2_0_lpi_1),
      rawWindow_4_2_lpi_1, xor_dcpl);
  assign nl_z_out_9 = conv_u2u_12_13(demosaicInterpol_else_if_mux_2_nl) + conv_u2u_12_13(demosaicInterpol_else_if_mux_3_nl);
  assign z_out_9 = nl_z_out_9[12:0];
  assign nl_demosaicInterpol_if_slc_demosaicInterpol_if_demosaicInterpol_if_acc_1_nl
      = conv_u2u_14_15(z_out_16) + conv_u2u_13_15(z_out_16[13:1]);
  assign demosaicInterpol_if_slc_demosaicInterpol_if_demosaicInterpol_if_acc_1_nl
      = nl_demosaicInterpol_if_slc_demosaicInterpol_if_demosaicInterpol_if_acc_1_nl[14:0];
  assign operator_12_false_1_mux_18_nl = MUX_v_15_2_2((~ demosaicInterpol_if_slc_demosaicInterpol_if_demosaicInterpol_if_acc_1_nl),
      ({z_out_2 , 2'b00}), demosaicInterpol_demosaicInterpol_nor_6_cse);
  assign operator_12_false_1_mux_19_nl = MUX_v_14_2_2(({(z_out_5[12:0]) , 1'b0}),
      (z_out_13[13:0]), demosaicInterpol_demosaicInterpol_nor_6_cse);
  assign nl_z_out_10 = conv_u2u_15_16(operator_12_false_1_mux_18_nl) + conv_u2u_14_16(operator_12_false_1_mux_19_nl);
  assign z_out_10 = nl_z_out_10[15:0];
  assign demosaicInterpol_if_mux_25_nl = MUX_v_12_2_2((~ addon_loop_mux_3_cse), (~
      rawWindow_1_3_lpi_1_dfm_1_mx0), demosaicInterpol_demosaicInterpol_nor_6_cse);
  assign demosaicInterpol_if_mux_26_nl = MUX_v_12_2_2((~ rawWindow_4_2_lpi_1), rawWindow_2_2_lpi_1,
      demosaicInterpol_demosaicInterpol_nor_6_cse);
  assign nl_z_out_12 = conv_u2u_12_14(demosaicInterpol_if_mux_25_nl) + conv_u2u_12_14(demosaicInterpol_if_mux_26_nl)
      + conv_u2u_13_14(demosaicInterpol_else_else_else_acc_27_itm_1);
  assign z_out_12 = nl_z_out_12[13:0];
  assign demosaicInterpol_if_mux_27_nl = MUX_v_14_2_2(z_out_12, ({1'b0 , (z_out_16[12:0])}),
      demosaicInterpol_demosaicInterpol_nor_6_cse);
  assign demosaicInterpol_if_mux_28_nl = MUX_v_14_2_2(({demosaicInterpol_else_else_else_acc_29_itm_1_13_1
      , 1'b0}), ({1'b0 , demosaicInterpol_else_else_else_acc_23_itm_1_13_1}), demosaicInterpol_demosaicInterpol_nor_6_cse);
  assign nl_z_out_13 = conv_u2u_14_15(demosaicInterpol_if_mux_27_nl) + conv_u2u_14_15(demosaicInterpol_if_mux_28_nl);
  assign z_out_13 = nl_z_out_13[14:0];
  assign demosaicInterpol_if_mux_29_nl = MUX_v_15_2_2(z_out_13, ({demosaicInterpol_else_else_else_acc_29_itm_1_13_1
      , 2'b00}), demosaicInterpol_demosaicInterpol_nor_6_cse);
  assign demosaicInterpol_if_mux_30_nl = MUX_v_15_2_2(({(z_out_20[12:0]) , (z_out_4[0])
      , 1'b0}), ({1'b0 , z_out_12}), demosaicInterpol_demosaicInterpol_nor_6_cse);
  assign nl_z_out_14 = conv_u2u_15_17(demosaicInterpol_if_mux_29_nl) + conv_s2u_15_17(demosaicInterpol_if_mux_30_nl);
  assign z_out_14 = nl_z_out_14[16:0];
  assign operator_12_false_2_mux_4_nl = MUX_v_12_2_2((~ addon_loop_mux_3_cse), addon_loop_mux_3_cse,
      or_186_cse);
  assign operator_12_false_2_mux_5_nl = MUX_v_12_2_2((~ rawWindow_3_1_lpi_1), rawWindow_4_2_lpi_1,
      or_186_cse);
  assign nl_z_out_15 = conv_u2u_12_13(operator_12_false_2_mux_4_nl) + conv_u2u_12_13(operator_12_false_2_mux_5_nl);
  assign z_out_15 = nl_z_out_15[12:0];
  assign operator_12_false_2_mux_6_nl = MUX_v_13_2_2(({1'b0 , (~ rawWindow_1_1_lpi_1)}),
      z_out_15, or_186_cse);
  assign operator_12_false_2_mux_7_nl = MUX_v_13_2_2(({1'b0 , (~ rawWindow_1_3_lpi_1_dfm_1_mx0)}),
      demosaicInterpol_else_else_else_acc_23_itm_1_13_1, or_186_cse);
  assign nl_z_out_16 = conv_u2u_13_14(operator_12_false_2_mux_6_nl) + conv_u2u_13_14(operator_12_false_2_mux_7_nl);
  assign z_out_16 = nl_z_out_16[13:0];
  assign nl_operator_12_false_3_acc_27_sdt = conv_u2u_12_14(~ rawWindow_3_1_lpi_1)
      + conv_u2u_12_14(~ rawWindow_3_3_lpi_1_dfm_1_mx0) + conv_u2u_12_14(~ rawWindow_4_2_lpi_1)
      + conv_u2u_12_14(z_out_4[12:1]);
  assign operator_12_false_3_acc_27_sdt = nl_operator_12_false_3_acc_27_sdt[13:0];
  assign operator_12_false_1_mux_20_nl = MUX_v_13_2_2(({1'b0 , (z_out_2[12:1])}),
      (operator_12_false_3_acc_27_sdt[13:1]), demosaicInterpol_demosaicInterpol_nor_6_cse);
  assign operator_12_false_1_operator_12_false_1_and_1_nl = (rawWindow_1_2_lpi_1[11])
      & demosaicInterpol_demosaicInterpol_nor_6_cse;
  assign operator_12_false_1_mux_21_nl = MUX_v_11_2_2((rawWindow_2_2_lpi_1[11:1]),
      (rawWindow_1_2_lpi_1[10:0]), demosaicInterpol_demosaicInterpol_nor_6_cse);
  assign operator_12_false_1_operator_12_false_1_or_1_nl = (rawWindow_2_2_lpi_1[0])
      | demosaicInterpol_demosaicInterpol_nor_6_cse;
  assign nl_z_out_17_14_1 = conv_u2u_13_14(operator_12_false_1_mux_20_nl) + conv_u2u_13_14({operator_12_false_1_operator_12_false_1_and_1_nl
      , operator_12_false_1_mux_21_nl , operator_12_false_1_operator_12_false_1_or_1_nl});
  assign z_out_17_14_1 = nl_z_out_17_14_1[13:0];
  assign nor_82_nl = ~((~((~(lfst_exitL_exit_inner_loop_lpi_1 & lfst_exit_inner_loop_lpi_1))
      | exitL_exitL_exitL_exit_line_write_lpi_1 | or_dcpl | (~ lfst_exit_addon_loop_lpi_1_dfm_3_0)))
      | inner_loop_acc_2_itm_13_1);
  assign inner_loop_mux_196_nl = MUX_v_13_2_2(inner_loop_col_lpi_1_dfm_1, outer_loop_row_lpi_1_dfm_1,
      nor_82_nl);
  assign nl_z_out_18 = inner_loop_mux_196_nl + 13'b0000000000001;
  assign z_out_18 = nl_z_out_18[12:0];
  assign operator_12_false_1_mux_22_nl = MUX_v_16_2_2(z_out_10, (z_out_14[15:0]),
      demosaicInterpol_demosaicInterpol_nor_6_cse);
  assign operator_12_false_1_mux_23_nl = MUX_v_14_2_2((z_out_6[14:1]), (z_out_6[13:0]),
      demosaicInterpol_demosaicInterpol_nor_6_cse);
  assign operator_12_false_1_mux_25_nl = MUX_s_1_2_2((z_out_6[0]), (z_out_17_14_1[0]),
      demosaicInterpol_demosaicInterpol_nor_6_cse);
  assign operator_12_false_1_operator_12_false_1_or_nl = (operator_12_false_3_acc_27_sdt[0])
      | (~ demosaicInterpol_demosaicInterpol_nor_6_cse);
  assign nl_z_out_19 = conv_u2u_16_17(operator_12_false_1_mux_22_nl) + conv_s2u_16_17({operator_12_false_1_mux_23_nl
      , operator_12_false_1_mux_25_nl , operator_12_false_1_operator_12_false_1_or_nl});
  assign z_out_19 = nl_z_out_19[16:0];
  assign demosaicInterpol_if_mux_31_nl = MUX_v_16_2_2(({4'b1111 , (z_out_4[12:1])}),
      z_out_10, demosaicInterpol_demosaicInterpol_nor_6_cse);
  assign demosaicInterpol_if_or_1_nl = (~ demosaicInterpol_demosaicInterpol_nor_6_cse)
      | demosaicInterpol_nor_cse | operator_2_false_operator_2_false_nor_svs_1;
  assign nl_operator_12_false_2_acc_31_nl = conv_u2s_13_14(z_out_5[14:2]) + 14'b10100000000001;
  assign operator_12_false_2_acc_31_nl = nl_operator_12_false_2_acc_31_nl[13:0];
  assign demosaicInterpol_if_mux_32_nl = MUX_v_16_2_2(({4'b0000 , rawWindow_2_2_lpi_1}),
      ({operator_12_false_2_acc_31_nl , (z_out_5[1:0])}), demosaicInterpol_demosaicInterpol_nor_6_cse);
  assign nl_acc_20_nl = conv_u2u_17_18({demosaicInterpol_if_mux_31_nl , demosaicInterpol_if_or_1_nl})
      + conv_s2u_17_18({demosaicInterpol_if_mux_32_nl , 1'b1});
  assign acc_20_nl = nl_acc_20_nl[17:0];
  assign z_out_20 = readslicef_18_17_1(acc_20_nl);

  function automatic [11:0] MUX1HOT_v_12_3_2;
    input [11:0] input_2;
    input [11:0] input_1;
    input [11:0] input_0;
    input [2:0] sel;
    reg [11:0] result;
  begin
    result = input_0 & {12{sel[0]}};
    result = result | ( input_1 & {12{sel[1]}});
    result = result | ( input_2 & {12{sel[2]}});
    MUX1HOT_v_12_3_2 = result;
  end
  endfunction


  function automatic [11:0] MUX1HOT_v_12_4_2;
    input [11:0] input_3;
    input [11:0] input_2;
    input [11:0] input_1;
    input [11:0] input_0;
    input [3:0] sel;
    reg [11:0] result;
  begin
    result = input_0 & {12{sel[0]}};
    result = result | ( input_1 & {12{sel[1]}});
    result = result | ( input_2 & {12{sel[2]}});
    result = result | ( input_3 & {12{sel[3]}});
    MUX1HOT_v_12_4_2 = result;
  end
  endfunction


  function automatic [0:0] MUX_s_1_2_2;
    input [0:0] input_0;
    input [0:0] input_1;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [10:0] MUX_v_11_2_2;
    input [10:0] input_0;
    input [10:0] input_1;
    input [0:0] sel;
    reg [10:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_11_2_2 = result;
  end
  endfunction


  function automatic [11:0] MUX_v_12_25_2x0x1x2x3x4x5x6x7;
    input [11:0] input_8;
    input [11:0] input_9;
    input [11:0] input_10;
    input [11:0] input_11;
    input [11:0] input_12;
    input [11:0] input_13;
    input [11:0] input_14;
    input [11:0] input_15;
    input [11:0] input_16;
    input [11:0] input_17;
    input [11:0] input_18;
    input [11:0] input_19;
    input [11:0] input_20;
    input [11:0] input_21;
    input [11:0] input_22;
    input [11:0] input_23;
    input [11:0] input_24;
    input [4:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      5'b01000 : begin
        result = input_8;
      end
      5'b01001 : begin
        result = input_9;
      end
      5'b01010 : begin
        result = input_10;
      end
      5'b01011 : begin
        result = input_11;
      end
      5'b01100 : begin
        result = input_12;
      end
      5'b01101 : begin
        result = input_13;
      end
      5'b01110 : begin
        result = input_14;
      end
      5'b01111 : begin
        result = input_15;
      end
      5'b10000 : begin
        result = input_16;
      end
      5'b10001 : begin
        result = input_17;
      end
      5'b10010 : begin
        result = input_18;
      end
      5'b10011 : begin
        result = input_19;
      end
      5'b10100 : begin
        result = input_20;
      end
      5'b10101 : begin
        result = input_21;
      end
      5'b10110 : begin
        result = input_22;
      end
      5'b10111 : begin
        result = input_23;
      end
      default : begin
        result = input_24;
      end
    endcase
    MUX_v_12_25_2x0x1x2x3x4x5x6x7 = result;
  end
  endfunction


  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [0:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction


  function automatic [12:0] MUX_v_13_2_2;
    input [12:0] input_0;
    input [12:0] input_1;
    input [0:0] sel;
    reg [12:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_13_2_2 = result;
  end
  endfunction


  function automatic [13:0] MUX_v_14_2_2;
    input [13:0] input_0;
    input [13:0] input_1;
    input [0:0] sel;
    reg [13:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_14_2_2 = result;
  end
  endfunction


  function automatic [14:0] MUX_v_15_2_2;
    input [14:0] input_0;
    input [14:0] input_1;
    input [0:0] sel;
    reg [14:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_15_2_2 = result;
  end
  endfunction


  function automatic [15:0] MUX_v_16_2_2;
    input [15:0] input_0;
    input [15:0] input_1;
    input [0:0] sel;
    reg [15:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_16_2_2 = result;
  end
  endfunction


  function automatic [1:0] MUX_v_2_2_2;
    input [1:0] input_0;
    input [1:0] input_1;
    input [0:0] sel;
    reg [1:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_2_2_2 = result;
  end
  endfunction


  function automatic [0:0] readslicef_12_1_11;
    input [11:0] vector;
    reg [11:0] tmp;
  begin
    tmp = vector >> 11;
    readslicef_12_1_11 = tmp[0:0];
  end
  endfunction


  function automatic [0:0] readslicef_13_1_12;
    input [12:0] vector;
    reg [12:0] tmp;
  begin
    tmp = vector >> 12;
    readslicef_13_1_12 = tmp[0:0];
  end
  endfunction


  function automatic [0:0] readslicef_14_1_13;
    input [13:0] vector;
    reg [13:0] tmp;
  begin
    tmp = vector >> 13;
    readslicef_14_1_13 = tmp[0:0];
  end
  endfunction


  function automatic [16:0] readslicef_18_17_1;
    input [17:0] vector;
    reg [17:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_18_17_1 = tmp[16:0];
  end
  endfunction


  function automatic [11:0] signext_12_1;
    input [0:0] vector;
  begin
    signext_12_1= {{11{vector[0]}}, vector};
  end
  endfunction


  function automatic [13:0] signext_14_1;
    input [0:0] vector;
  begin
    signext_14_1= {{13{vector[0]}}, vector};
  end
  endfunction


  function automatic [1:0] signext_2_1;
    input [0:0] vector;
  begin
    signext_2_1= {{1{vector[0]}}, vector};
  end
  endfunction


  function automatic [16:0] conv_s2u_15_17 ;
    input [14:0]  vector ;
  begin
    conv_s2u_15_17 = {{2{vector[14]}}, vector};
  end
  endfunction


  function automatic [16:0] conv_s2u_16_17 ;
    input [15:0]  vector ;
  begin
    conv_s2u_16_17 = {vector[15], vector};
  end
  endfunction


  function automatic [17:0] conv_s2u_17_18 ;
    input [16:0]  vector ;
  begin
    conv_s2u_17_18 = {vector[16], vector};
  end
  endfunction


  function automatic [13:0] conv_u2s_13_14 ;
    input [12:0]  vector ;
  begin
    conv_u2s_13_14 =  {1'b0, vector};
  end
  endfunction


  function automatic [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction


  function automatic [13:0] conv_u2u_1_14 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_14 = {{13{1'b0}}, vector};
  end
  endfunction


  function automatic [2:0] conv_u2u_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_3 = {1'b0, vector};
  end
  endfunction


  function automatic [4:0] conv_u2u_3_5 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_5 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [4:0] conv_u2u_4_5 ;
    input [3:0]  vector ;
  begin
    conv_u2u_4_5 = {1'b0, vector};
  end
  endfunction


  function automatic [12:0] conv_u2u_12_13 ;
    input [11:0]  vector ;
  begin
    conv_u2u_12_13 = {1'b0, vector};
  end
  endfunction


  function automatic [13:0] conv_u2u_12_14 ;
    input [11:0]  vector ;
  begin
    conv_u2u_12_14 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [13:0] conv_u2u_13_14 ;
    input [12:0]  vector ;
  begin
    conv_u2u_13_14 = {1'b0, vector};
  end
  endfunction


  function automatic [14:0] conv_u2u_13_15 ;
    input [12:0]  vector ;
  begin
    conv_u2u_13_15 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [14:0] conv_u2u_14_15 ;
    input [13:0]  vector ;
  begin
    conv_u2u_14_15 = {1'b0, vector};
  end
  endfunction


  function automatic [15:0] conv_u2u_14_16 ;
    input [13:0]  vector ;
  begin
    conv_u2u_14_16 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [15:0] conv_u2u_15_16 ;
    input [14:0]  vector ;
  begin
    conv_u2u_15_16 = {1'b0, vector};
  end
  endfunction


  function automatic [16:0] conv_u2u_15_17 ;
    input [14:0]  vector ;
  begin
    conv_u2u_15_17 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [16:0] conv_u2u_16_17 ;
    input [15:0]  vector ;
  begin
    conv_u2u_16_17 = {1'b0, vector};
  end
  endfunction


  function automatic [17:0] conv_u2u_17_18 ;
    input [16:0]  vector ;
  begin
    conv_u2u_17_18 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    edgeenhancement_core
// ------------------------------------------------------------------


module edgeenhancement_core (
  clk, arst_n, isp_top_frameWidth, isp_top_frameHeight, ee_top_eb, ee_top_coeff,
      src_rsc_dat, src_rsc_vld, src_rsc_rdy, dst_rsc_dat, dst_rsc_vld, dst_rsc_rdy,
      ee_lines_rsc_0_0_i_radr_d, ee_lines_rsc_0_0_i_wadr_d, ee_lines_rsc_0_0_i_q_d,
      ee_lines_rsc_0_1_i_radr_d, ee_lines_rsc_0_1_i_wadr_d, ee_lines_rsc_0_1_i_q_d,
      ee_lines_rsc_0_2_i_radr_d, ee_lines_rsc_0_2_i_wadr_d, ee_lines_rsc_0_2_i_q_d,
      ee_lines_rsc_0_3_i_radr_d, ee_lines_rsc_0_3_i_wadr_d, ee_lines_rsc_0_3_i_q_d,
      ee_lines_rsc_0_0_i_d_d_pff, ee_lines_rsc_0_0_i_we_d_pff, ee_lines_rsc_0_0_i_re_d_pff,
      ee_lines_rsc_0_1_i_we_d_pff, ee_lines_rsc_0_1_i_re_d_pff, ee_lines_rsc_0_2_i_we_d_pff,
      ee_lines_rsc_0_2_i_re_d_pff, ee_lines_rsc_0_3_i_we_d_pff, ee_lines_rsc_0_3_i_re_d_pff
);
  input clk;
  input arst_n;
  input [12:0] isp_top_frameWidth;
  input [12:0] isp_top_frameHeight;
  input ee_top_eb;
  input [7:0] ee_top_coeff;
  input [35:0] src_rsc_dat;
  input src_rsc_vld;
  output src_rsc_rdy;
  output [35:0] dst_rsc_dat;
  output dst_rsc_vld;
  input dst_rsc_rdy;
  output [11:0] ee_lines_rsc_0_0_i_radr_d;
  output [11:0] ee_lines_rsc_0_0_i_wadr_d;
  input [35:0] ee_lines_rsc_0_0_i_q_d;
  output [11:0] ee_lines_rsc_0_1_i_radr_d;
  output [11:0] ee_lines_rsc_0_1_i_wadr_d;
  input [35:0] ee_lines_rsc_0_1_i_q_d;
  output [11:0] ee_lines_rsc_0_2_i_radr_d;
  output [11:0] ee_lines_rsc_0_2_i_wadr_d;
  input [35:0] ee_lines_rsc_0_2_i_q_d;
  output [11:0] ee_lines_rsc_0_3_i_radr_d;
  output [11:0] ee_lines_rsc_0_3_i_wadr_d;
  input [35:0] ee_lines_rsc_0_3_i_q_d;
  output [35:0] ee_lines_rsc_0_0_i_d_d_pff;
  output ee_lines_rsc_0_0_i_we_d_pff;
  output ee_lines_rsc_0_0_i_re_d_pff;
  output ee_lines_rsc_0_1_i_we_d_pff;
  output ee_lines_rsc_0_1_i_re_d_pff;
  output ee_lines_rsc_0_2_i_we_d_pff;
  output ee_lines_rsc_0_2_i_re_d_pff;
  output ee_lines_rsc_0_3_i_we_d_pff;
  output ee_lines_rsc_0_3_i_re_d_pff;


  // Interconnect Declarations
  wire core_wen;
  wire core_wten;
  wire src_rsci_wen_comp;
  wire [35:0] src_rsci_idat_mxwt;
  wire dst_rsci_wen_comp;
  wire [35:0] ee_lines_rsc_0_0_i_q_d_mxwt;
  wire [35:0] ee_lines_rsc_0_1_i_q_d_mxwt;
  wire [35:0] ee_lines_rsc_0_2_i_q_d_mxwt;
  wire [35:0] ee_lines_rsc_0_3_i_q_d_mxwt;
  reg [11:0] dst_rsci_idat_35_24;
  reg [11:0] dst_rsci_idat_23_12;
  reg [11:0] dst_rsci_idat_11_0;
  wire [2:0] block_refresh_loop_in_acc_3_tmp;
  wire [3:0] nl_block_refresh_loop_in_acc_3_tmp;
  wire [2:0] single_loop_for_1_acc_3_tmp;
  wire [3:0] nl_single_loop_for_1_acc_3_tmp;
  wire [1:0] eeprocess_for_6_mux1h_539_tmp;
  wire eeprocess_for_6_or_541_tmp;
  wire [2:0] operator_3_false_2_acc_tmp;
  wire [3:0] nl_operator_3_false_2_acc_tmp;
  wire [2:0] operator_3_false_4_acc_tmp;
  wire [3:0] nl_operator_3_false_4_acc_tmp;
  wire [2:0] operator_3_false_6_acc_tmp;
  wire [3:0] nl_operator_3_false_6_acc_tmp;
  wire [2:0] operator_3_false_8_acc_tmp;
  wire [3:0] nl_operator_3_false_8_acc_tmp;
  wire [2:0] operator_3_false_10_acc_tmp;
  wire [3:0] nl_operator_3_false_10_acc_tmp;
  wire [2:0] operator_3_false_12_acc_tmp;
  wire [3:0] nl_operator_3_false_12_acc_tmp;
  wire single_loop_if_1_if_single_loop_if_1_if_and_tmp;
  wire single_loop_equal_1_tmp;
  wire padding_loop_2_padding_loop_2_or_3_tmp;
  wire padding_loop_2_padding_loop_2_or_2_tmp;
  wire [2:0] single_loop_for_acc_3_tmp;
  wire [3:0] nl_single_loop_for_acc_3_tmp;
  wire [2:0] eeprocess_for_for_acc_tmp;
  wire [3:0] nl_eeprocess_for_for_acc_tmp;
  wire [3:0] eeprocess_for_for_acc_16_tmp;
  wire [4:0] nl_eeprocess_for_for_acc_16_tmp;
  wire or_dcpl_21;
  wire or_dcpl_100;
  wire or_tmp_115;
  wire and_dcpl_91;
  wire and_dcpl_94;
  wire and_dcpl_99;
  wire and_dcpl_104;
  wire and_dcpl_105;
  wire and_dcpl_106;
  wire and_dcpl_107;
  wire and_dcpl_108;
  wire or_dcpl_143;
  wire mux_tmp_118;
  wire or_dcpl_148;
  wire or_dcpl_154;
  wire or_dcpl_157;
  wire or_dcpl_158;
  wire or_dcpl_169;
  wire or_dcpl_170;
  wire or_dcpl_171;
  wire or_dcpl_172;
  wire or_dcpl_173;
  wire or_dcpl_174;
  wire or_dcpl_175;
  wire or_dcpl_176;
  wire or_dcpl_177;
  wire or_dcpl_178;
  wire or_dcpl_179;
  wire or_dcpl_180;
  wire or_dcpl_181;
  wire or_dcpl_182;
  wire or_dcpl_183;
  wire or_dcpl_184;
  wire or_dcpl_185;
  wire or_dcpl_186;
  wire or_dcpl_187;
  wire or_dcpl_188;
  wire or_dcpl_189;
  wire or_dcpl_190;
  wire or_dcpl_191;
  wire or_dcpl_192;
  wire or_dcpl_193;
  wire and_dcpl_111;
  wire or_dcpl_209;
  wire and_dcpl_113;
  wire and_dcpl_115;
  wire and_dcpl_116;
  wire and_dcpl_118;
  wire and_dcpl_120;
  wire or_dcpl_224;
  wire mux_tmp_119;
  wire mux_tmp_120;
  wire or_dcpl_226;
  wire or_dcpl_228;
  wire or_dcpl_236;
  wire or_dcpl_242;
  wire or_dcpl_246;
  wire or_dcpl_248;
  wire or_dcpl_251;
  wire or_dcpl_252;
  wire or_dcpl_254;
  wire or_dcpl_255;
  wire or_dcpl_256;
  wire or_dcpl_259;
  wire or_dcpl_264;
  wire or_dcpl_266;
  wire or_dcpl_270;
  wire or_dcpl_275;
  wire or_dcpl_276;
  wire or_dcpl_280;
  wire or_dcpl_281;
  wire or_dcpl_291;
  wire or_dcpl_292;
  wire or_dcpl_293;
  wire or_dcpl_297;
  wire or_dcpl_315;
  wire and_tmp_16;
  wire mux_tmp_131;
  wire and_tmp_17;
  wire or_dcpl_329;
  wire exitL_exit_eeprocess_for_6_lpi_1_dfm_1;
  wire [1:0] lfst_exit_eeprocess_for_6_lpi_1_dfm_8_2_1_1;
  wire lfst_exit_eeprocess_for_6_lpi_1_dfm_8_0_1;
  wire single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0;
  wire eeprocess_for_6_and_206_ssc_1;
  wire eeprocess_for_6_equal_tmp_10;
  wire eeprocess_for_6_and_202_ssc_1;
  wire eeprocess_for_6_and_204_ssc_1;
  wire lfst_exit_eeprocess_for_6_lpi_1_dfm_0_mx0w0;
  wire exit_eeprocess_for_5_lpi_1_dfm_2;
  wire eeprocess_for_6_or_tmp_2;
  wire eeprocess_for_6_equal_tmp_9;
  wire eeprocess_for_6_and_200_ssc_1;
  wire eeprocess_for_6_equal_tmp_11;
  wire exit_eeprocess_for_3_lpi_1_dfm_2;
  wire eeprocess_for_6_equal_tmp_12;
  wire eeprocess_for_6_equal_tmp_13;
  wire exit_eeprocess_for_1_lpi_1_dfm_2;
  wire eeprocess_for_6_equal_tmp_14;
  wire [11:0] eeprocess_for_2_acc_1_psp_sva_1;
  wire [12:0] nl_eeprocess_for_2_acc_1_psp_sva_1;
  wire [11:0] eeprocess_for_4_acc_1_psp_sva_1;
  wire [12:0] nl_eeprocess_for_4_acc_1_psp_sva_1;
  wire eeprocess_for_6_and_1_cse_sva_1;
  wire eeprocess_for_6_and_cse_sva_1;
  wire [11:0] eeprocess_for_6_acc_1_psp_sva_1;
  wire [12:0] nl_eeprocess_for_6_acc_1_psp_sva_1;
  reg [1:0] lfst_exit_eeprocess_for_6_lpi_1_2_1;
  reg lfst_exit_eeprocess_for_6_lpi_1_0;
  reg sfi_single_loop_if_1_land_lpi_1;
  wire lfst_exitL_exit_eeprocess_for_6_lpi_1_dfm_1;
  reg lfst_exitL_exit_eeprocess_for_6_lpi_1;
  reg sfi_ee_top_eb_1_lpi_1;
  reg lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_2;
  wire lfst_exitL_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_1;
  reg [1:0] lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_1_0;
  reg lfst_exitL_exitL_exitL_exit_eeprocess_for_6_lpi_1;
  wire exitL_exitL_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_1;
  reg exitL_exitL_exitL_exitL_exit_eeprocess_for_6_lpi_1;
  wire padding_loop_2_padding_loop_2_nor_2_cse_1;
  reg lfst_exit_padding_loop_2_lpi_1_1;
  reg lfst_exit_padding_loop_2_lpi_1_0;
  wire lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1;
  wire lfst_exitL_exit_padding_loop_2_lpi_1_dfm_0_1;
  reg lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_1;
  reg lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_0;
  reg single_loop_asn_sft_lpi_1;
  wire eeprocess_for_6_equal_tmp_17;
  wire padding_loop_2_or_tmp_2;
  reg sfi_ee_top_eb_lpi_1;
  wire exit_single_loop_lpi_1_dfm_1;
  wire padding_loop_2_equal_tmp_5;
  wire padding_loop_2_equal_tmp_4;
  wire eeprocess_for_for_and_stg_3_8_sva_mx0;
  wire eeprocess_for_6_eeprocess_for_6_nor_8_cse_1;
  wire eeprocess_for_for_and_stg_3_7_sva_mx0;
  wire eeprocess_for_for_and_stg_3_6_sva_mx0;
  wire eeprocess_for_for_and_stg_3_5_sva_mx0;
  wire eeprocess_for_for_and_stg_3_4_sva_mx0;
  wire eeprocess_for_for_and_stg_3_3_sva_mx0;
  wire eeprocess_for_for_and_stg_3_2_sva_mx0;
  wire eeprocess_for_for_and_stg_3_1_sva_mx0;
  wire eeprocess_for_for_and_stg_3_0_sva_mx0;
  reg [1:0] eeprocess_l_3_1_0_lpi_1;
  wire single_loop_and_207_tmp_1;
  wire single_loop_if_1_and_36_ssc_1;
  wire single_loop_if_1_and_11_m1c_1;
  reg [1:0] eeprocess_l_2_1_0_lpi_1;
  wire single_loop_if_1_and_8_cse_1;
  wire single_loop_if_1_and_9_m1c_1;
  reg [1:0] eeprocess_l_1_0_lpi_1;
  wire single_loop_if_1_and_37_ssc_1;
  wire single_loop_if_1_and_13_m1c_1;
  reg [1:0] eeprocess_k_1_0_lpi_1;
  wire single_loop_and_29_tmp_1;
  wire eeprocess_for_6_equal_tmp_15;
  wire single_loop_asn_sft_1_lpi_1_dfm_mx0;
  wire eeprocess_for_5_for_and_1_cse_sva_1;
  wire eeprocess_for_3_for_and_1_cse_sva_1;
  wire eeprocess_for_1_for_and_1_cse_sva_1;
  wire eeprocess_for_5_for_and_cse_sva_1;
  wire eeprocess_for_3_for_and_cse_sva_1;
  wire eeprocess_for_1_for_and_cse_sva_1;
  reg [12:0] i_lpi_1;
  reg asn_sft_lpi_1;
  wire padding_loop_2_equal_tmp_6;
  wire padding_loop_2_or_tmp_3;
  wire padding_loop_2_equal_tmp_7;
  wire lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_5_2_1;
  wire [1:0] lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_5_1_0_1;
  wire lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_2_mx0w0;
  wire eeprocess_for_6_or_tmp_3;
  wire eeprocess_for_6_and_212_ssc_1;
  wire exit_block_refresh_loop_out_lpi_1_dfm_3;
  wire eeprocess_for_6_equal_tmp_16;
  wire eeprocess_for_6_nor_tmp_1;
  wire eeprocess_for_5_and_stg_1_0_sva_1;
  wire eeprocess_for_3_and_stg_1_0_sva_1;
  wire eeprocess_for_for_and_stg_2_0_sva_1;
  wire eeprocess_for_for_and_stg_2_1_sva_mx0w0;
  wire eeprocess_for_for_and_stg_1_1_sva_1;
  wire eeprocess_for_for_and_stg_2_2_sva_mx0w0;
  wire eeprocess_for_for_and_stg_1_2_sva_1;
  wire eeprocess_for_for_and_stg_2_3_sva_mx0w0;
  wire eeprocess_for_for_and_stg_1_3_sva_1;
  wire eeprocess_for_for_and_stg_2_4_sva_mx0w0;
  wire eeprocess_for_for_and_stg_1_0_sva_1;
  wire eeprocess_for_for_and_stg_2_5_sva_mx0w0;
  wire eeprocess_for_for_and_stg_2_6_sva_mx0w0;
  wire eeprocess_for_for_and_stg_2_7_sva_mx0w0;
  wire eeprocess_for_2_and_1_cse_sva_1;
  wire eeprocess_for_2_and_cse_sva_1;
  wire eeprocess_for_4_and_1_cse_sva_1;
  wire eeprocess_for_4_and_cse_sva_1;
  wire eeprocess_for_6_eeprocess_for_6_and_cse_1;
  wire eeprocess_for_6_eeprocess_for_6_nor_2_cse_1;
  wire [25:0] n_lpi_1_dfm_1;
  wire [12:0] i_1_lpi_1_dfm_3;
  reg k_0_lpi_1;
  wire lfst_exit_padding_loop_2_lpi_1_dfm_1_1;
  wire padding_loop_2_and_24_ssc_1;
  wire padding_loop_2_and_25_ssc_1;
  wire lfst_exit_padding_loop_2_lpi_1_dfm_0_1;
  wire k_4_0_lpi_1_dfm_1;
  reg k_4_0_lpi_1;
  reg single_loop_for_nor_tmp_1;
  reg eeprocess_for_6_equal_tmp_1;
  wire padding_loop_2_padding_loop_2_nor_28_tmp_1;
  wire block_refresh_loop_in_and_43_tmp_1;
  reg eeprocess_for_6_or_tmp_1;
  reg eeprocess_for_6_equal_tmp_1_1;
  reg eeprocess_for_6_equal_tmp_2_1;
  reg eeprocess_for_6_nor_tmp_1_1;
  reg single_loop_asn_sft_1_lpi_1_dfm_1;
  reg padding_loop_2_equal_tmp_1;
  reg padding_loop_2_equal_tmp_3_1;
  reg block_refresh_loop_in_and_stg_3_4_sva_1;
  reg block_refresh_loop_in_acc_decb_sva_1_4;
  reg operator_3_false_12_acc_cse_sva_1_2;
  wire single_loop_if_1_and_15_m1c_1;
  reg eeprocess_for_6_equal_tmp_8_1;
  reg single_loop_if_1_asn_sft_lpi_1_dfm_1;
  wire [17:0] operator_24_true_2_acc_psp_sva_1;
  wire [19:0] nl_operator_24_true_2_acc_psp_sva_1;
  wire block_refresh_loop_in_and_stg_3_7_sva_1;
  wire eeprocess_for_6_eeprocess_for_6_nor_cse_1;
  wire padding_loop_2_padding_loop_2_nor_cse_1;
  wire block_refresh_loop_in_and_stg_3_6_sva_1;
  wire block_refresh_loop_in_and_stg_3_5_sva_1;
  wire block_refresh_loop_in_and_stg_3_4_sva_1_1;
  wire block_refresh_loop_in_and_stg_3_2_sva_1;
  wire block_refresh_loop_in_and_stg_3_1_sva_1;
  wire block_refresh_loop_in_and_stg_3_0_sva_1;
  wire block_refresh_loop_in_and_stg_2_7_sva_1;
  wire block_refresh_loop_in_and_stg_2_5_sva_1;
  wire block_refresh_loop_in_and_stg_2_4_sva_1;
  wire block_refresh_loop_in_and_stg_2_3_sva_1;
  wire block_refresh_loop_in_and_stg_2_2_sva_1;
  wire block_refresh_loop_in_and_stg_2_0_sva_1;
  reg [1:0] eeprocess_k_5_1_0_lpi_1;
  reg [1:0] eeprocess_k_3_1_0_lpi_1;
  reg [2:0] eeprocess_k_6_lpi_1;
  reg [2:0] eeprocess_k_4_lpi_1;
  wire [2:0] eeprocess_k_4_sva_2;
  wire [3:0] nl_eeprocess_k_4_sva_2;
  reg [2:0] eeprocess_k_2_lpi_1;
  wire [2:0] eeprocess_k_2_sva_2;
  wire [3:0] nl_eeprocess_k_2_sva_2;
  wire [2:0] k_1_sva_2;
  wire [3:0] nl_k_1_sva_2;
  wire block_refresh_loop_in_and_stg_1_1_sva_1;
  wire block_refresh_loop_in_and_stg_1_2_sva_1;
  wire block_refresh_loop_in_and_stg_1_3_sva_1;
  wire block_refresh_loop_in_and_stg_1_0_sva_1;
  wire [3:0] operator_3_false_acc_1_cse_1;
  wire [4:0] nl_operator_3_false_acc_1_cse_1;
  wire [2:0] k_1_lpi_1_dfm_1;
  wire [1:0] l_lpi_1_dfm_1_0_1;
  reg [12:0] j_lpi_1;
  wire [13:0] nl_j_lpi_1;
  wire [11:0] ee_clip_return_4_lpi_1_dfm_3;
  wire [11:0] ee_clip_return_3_lpi_1_dfm_3;
  reg [1:0] k_2_lpi_1_1_0;
  reg main_stage_0_2;
  reg lfst_exitL_exit_padding_loop_2_lpi_1_dfm_st_1_1;
  reg lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_st_1_2;
  reg [1:0] lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_st_1_1_0;
  reg single_loop_if_1_if_1_single_loop_if_1_if_1_or_itm_1;
  reg padding_loop_3_slc_13_svs_st_1;
  reg exitL_exit_eeprocess_for_6_lpi_1_dfm_st_1;
  reg lfst_exitL_exit_padding_loop_2_lpi_1_dfm_st_1_0;
  reg padding_loop_2_and_140_itm_1;
  reg padding_loop_2_and_141_itm_1;
  reg padding_loop_2_and_142_itm_1;
  reg exitL_exitL_exit_padding_loop_2_sva;
  reg single_loop_asn_sft_1_lpi_1;
  reg single_loop_if_1_land_lpi_1;
  reg single_loop_if_1_asn_sft_lpi_1;
  reg main_stage_0_3;
  reg padding_loop_3_slc_13_svs_st_2;
  reg lfst_exit_padding_loop_2_lpi_1_dfm_st_2_0;
  reg lfst_exit_padding_loop_2_lpi_1_dfm_st_2_1;
  reg lfst_exitL_exit_padding_loop_2_lpi_1_dfm_st_2_0;
  reg padding_loop_1_padding_loop_1_and_2_itm_1;
  reg padding_loop_1_padding_loop_1_and_1_itm_1;
  reg [1:0] lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_st_2_1_0;
  reg lfst_exitL_exit_padding_loop_2_lpi_1_dfm_st_2_1;
  reg asn_sft_lpi_1_st_2;
  reg padding_loop_2_and_142_itm_2;
  reg padding_loop_2_and_141_itm_2;
  reg padding_loop_2_and_140_itm_2;
  reg sfi_exit_single_loop_lpi_1_dfm_1;
  reg [1:0] lfst_exit_eeprocess_for_6_lpi_1_dfm_st_1_2_1;
  reg [1:0] single_loop_for_1_slc_j_11_0_1_itm_1;
  reg padding_loop_2_and_254_itm_1;
  reg padding_loop_2_and_253_itm_1;
  reg padding_loop_2_and_252_itm_1;
  reg padding_loop_2_and_251_itm_1;
  reg padding_loop_2_and_250_itm_1;
  reg padding_loop_2_and_249_itm_1;
  reg padding_loop_2_and_248_itm_1;
  reg padding_loop_2_and_247_itm_1;
  reg padding_loop_2_and_246_itm_1;
  reg padding_loop_2_and_245_itm_1;
  reg padding_loop_2_and_244_itm_1;
  reg padding_loop_2_and_243_itm_1;
  reg padding_loop_2_and_242_itm_1;
  reg padding_loop_2_and_241_itm_1;
  reg padding_loop_2_and_240_itm_1;
  reg padding_loop_2_and_239_itm_1;
  reg padding_loop_2_and_238_itm_1;
  reg padding_loop_2_and_237_itm_1;
  reg padding_loop_2_and_236_itm_1;
  reg padding_loop_2_and_235_itm_1;
  reg padding_loop_2_and_234_itm_1;
  reg padding_loop_2_and_233_itm_1;
  reg padding_loop_2_and_232_itm_1;
  reg padding_loop_2_and_231_itm_1;
  reg padding_loop_2_and_180_itm_1;
  reg padding_loop_2_and_42_itm_1;
  reg padding_loop_2_and_43_itm_1;
  reg padding_loop_2_and_44_itm_1;
  reg padding_loop_2_and_45_itm_1;
  reg padding_loop_2_and_46_itm_1;
  reg padding_loop_2_and_47_itm_1;
  reg padding_loop_2_and_48_itm_1;
  reg padding_loop_2_and_49_itm_1;
  reg padding_loop_2_and_50_itm_1;
  reg padding_loop_2_and_51_itm_1;
  reg padding_loop_2_and_52_itm_1;
  reg padding_loop_2_and_53_itm_1;
  reg padding_loop_2_and_54_itm_1;
  reg padding_loop_2_and_35_itm_1;
  reg padding_loop_2_and_36_itm_1;
  reg padding_loop_2_and_37_itm_1;
  reg padding_loop_2_and_38_itm_1;
  reg padding_loop_2_and_39_itm_1;
  reg padding_loop_2_and_40_itm_1;
  reg padding_loop_2_and_41_itm_1;
  reg padding_loop_2_and_143_itm_1;
  reg padding_loop_2_and_155_itm_1;
  reg [14:0] eeprocess_temp_g_lpi_1;
  reg [14:0] eeprocess_temp_r_lpi_1;
  reg [17:0] operator_24_true_1_acc_psp_sva_1;
  wire [19:0] nl_operator_24_true_1_acc_psp_sva_1;
  reg [17:0] operator_24_true_acc_psp_sva_1;
  wire [19:0] nl_operator_24_true_acc_psp_sva_1;
  wire exit_eeprocess_for_lpi_1_dfm_3;
  wire [22:0] eeprocess_sharpen_threhold_r_1_lpi_1_dfm_mx1w1;
  wire [22:0] eeprocess_sharpen_threhold_g_1_lpi_1_dfm_mx1w1;
  wire [22:0] eeprocess_sharpen_threhold_b_1_lpi_1_dfm_mx1w1;
  wire [1:0] lfst_exit_eeprocess_for_6_lpi_1_dfm_2_1_mx0w0;
  wire sfi_single_loop_if_1_land_lpi_1_dfm_1;
  wire [1:0] eeprocess_for_for_acc_psp_mx0_2_1;
  wire operator_3_false_6_acc_psp_sva_mx0_2;
  wire operator_3_false_2_acc_psp_sva_mx0_2;
  wire operator_3_false_10_acc_psp_sva_mx0_2;
  wire [1:0] lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_1_0_1;
  reg [11:0] ee_clip_return_5_lpi_1_dfm_1_1;
  wire [1:0] block_refresh_loop_in_acc_psp_mx0_2_1;
  wire [2:0] block_refresh_loop_in_acc_psp_mx0w0;
  wire [3:0] nl_block_refresh_loop_in_acc_psp_mx0w0;
  wire single_loop_and_13_cse_1;
  wire [13:0] eeprocess_for_6_else_if_acc_cse_sva_mx0;
  wire [13:0] eeprocess_for_2_else_if_acc_cse_sva_mx0;
  wire [13:0] eeprocess_for_4_else_if_acc_cse_sva_mx0;
  reg [13:0] eeprocess_for_6_else_if_acc_cse_sva;
  reg [13:0] eeprocess_for_2_else_if_acc_cse_sva;
  reg [13:0] eeprocess_for_4_else_if_acc_cse_sva;
  wire single_loop_and_17_rgt;
  wire eeprocess_for_6_and_25_rgt;
  wire single_loop_if_1_and_45_rgt;
  wire eeprocess_for_6_and_40_rgt;
  wire eeprocess_for_6_and_52_rgt;
  wire single_loop_if_1_and_25_rgt;
  wire single_loop_if_1_and_47_rgt;
  wire single_loop_if_1_and_27_rgt;
  wire single_loop_if_1_and_49_rgt;
  wire single_loop_if_1_and_21_rgt;
  wire padding_loop_2_and_26_rgt;
  reg [1:0] reg_block_refresh_loop_in_acc_psp_ftd;
  reg [1:0] reg_eeprocess_for_for_acc_psp_ftd;
  reg reg_operator_3_false_10_acc_psp_ftd;
  reg reg_operator_3_false_6_acc_psp_ftd;
  reg reg_operator_3_false_2_acc_psp_ftd;
  reg reg_dst_rsci_oswt_cse;
  wire dst_out_and_11_cse;
  wire dst_out_and_12_cse;
  wire dst_out_and_13_cse;
  wire dst_out_and_14_cse;
  wire single_loop_if_1_if_1_and_cse;
  reg reg_ee_lines_rsc_0_0_i_oswt_cse;
  reg reg_ee_lines_rsc_0_1_i_oswt_cse;
  reg reg_ee_lines_rsc_0_2_i_oswt_cse;
  reg reg_ee_lines_rsc_0_3_i_oswt_cse;
  reg reg_src_rsci_oswt_cse;
  wire eeprocess_for_6_and_223_cse;
  wire eeprocess_for_6_and_227_cse;
  wire padding_loop_2_and_274_cse;
  wire dst_out_and_cse;
  wire eeprocess_for_6_and_222_cse;
  wire or_167_cse;
  wire eeprocess_sharpen_threhold_b_and_1_cse;
  wire mux_65_cse;
  wire mux_22_cse;
  wire or_214_cse;
  wire eeprocess_for_6_or_18_tmp_1;
  wire padding_loop_2_and_60_tmp_1;
  wire single_loop_and_119_tmp_1;
  wire eeprocess_for_6_and_126_cse_1;
  wire eeprocess_for_6_and_128_cse_1;
  wire eeprocess_for_6_and_130_cse_1;
  wire eeprocess_for_1_and_5_tmp_1;
  wire eeprocess_for_6_and_125_m1c_1;
  wire eeprocess_for_3_and_5_tmp_1;
  wire eeprocess_for_6_and_127_m1c_1;
  wire eeprocess_for_5_and_5_tmp_1;
  wire eeprocess_for_6_and_129_m1c_1;
  wire eeprocess_for_1_and_4_tmp_1;
  wire eeprocess_for_3_and_4_tmp_1;
  wire eeprocess_for_5_and_4_tmp_1;
  wire eeprocess_for_1_and_6_tmp_1;
  wire eeprocess_for_3_and_6_tmp_1;
  wire eeprocess_for_5_and_6_tmp_1;
  wire padding_loop_2_and_153_itm_1;
  wire eeprocess_feq_h_and_cse;
  wire eeprocess_feq_h_and_2_cse;
  wire mux_23_cse;
  wire eeprocess_sharpen_threhold_b_and_cse;
  wire single_loop_if_1_and_72;
  wire [9:0] single_loop_for_mux_rmff;
  wire ee_lines_rsc_0_0_i_we_d_iff;
  wire ee_lines_rsc_0_0_i_re_d_iff;
  wire block_refresh_loop_in_single_loop_for_nor_7_rmff;
  wire ee_lines_rsc_0_1_i_we_d_iff;
  wire ee_lines_rsc_0_1_i_re_d_iff;
  wire block_refresh_loop_in_single_loop_for_nor_6_rmff;
  wire ee_lines_rsc_0_2_i_we_d_iff;
  wire ee_lines_rsc_0_2_i_re_d_iff;
  wire block_refresh_loop_in_single_loop_for_nor_5_rmff;
  wire ee_lines_rsc_0_3_i_we_d_iff;
  wire ee_lines_rsc_0_3_i_re_d_iff;
  wire block_refresh_loop_in_single_loop_for_nor_4_rmff;
  reg [35:0] ee_block_1_3_lpi_1;
  wire [35:0] ee_block_1_4_lpi_1_mx0;
  reg [35:0] ee_block_2_0_lpi_1;
  reg [35:0] ee_block_2_1_lpi_1;
  reg [35:0] ee_block_2_2_lpi_1;
  reg [35:0] ee_block_2_3_lpi_1;
  wire [35:0] ee_block_2_4_lpi_1_mx0;
  reg [35:0] ee_block_3_0_lpi_1;
  reg [35:0] ee_block_3_1_lpi_1;
  reg [35:0] ee_block_3_2_lpi_1;
  reg [35:0] ee_block_3_3_lpi_1;
  wire [35:0] ee_block_3_4_lpi_1_mx0;
  reg [35:0] ee_block_4_0_lpi_1;
  reg [35:0] ee_block_4_1_lpi_1;
  reg [35:0] ee_block_4_2_lpi_1;
  reg [35:0] ee_block_4_3_lpi_1;
  wire [35:0] src_in_lpi_1_dfm_1_mx0;
  reg [2:0] eeprocess_for_for_eeprocess_for_for_acc_cse_sva_1_4_2;
  reg [1:0] eeprocess_for_for_eeprocess_for_for_acc_cse_sva_1_1_0;
  wire or_dcpl_334;
  wire and_dcpl_132;
  wire or_dcpl_355;
  wire or_dcpl_358;
  wire or_dcpl_361;
  wire [11:0] operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1;
  wire [11:0] operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1_1;
  wire [11:0] operator_36_false_slc_ee_block_36_35_0_psp_sva_1;
  wire eeprocess_for_6_and_9_ssc_1;
  wire eeprocess_for_6_and_5_ssc_1;
  wire eeprocess_for_2_and_9_ssc_1;
  wire eeprocess_for_2_and_5_ssc_1;
  wire eeprocess_for_4_and_9_ssc_1;
  wire eeprocess_for_4_and_5_ssc_1;
  wire [2:0] eeprocess_l_1_sva_2;
  wire [3:0] nl_eeprocess_l_1_sva_2;
  wire or_535_tmp;
  wire or_534_tmp;
  wire or_532_tmp;
  wire or_531_tmp;
  wire or_529_tmp;
  wire or_528_tmp;
  wire single_loop_if_1_aelse_mux_1_itm;
  wire [1:0] z_out;
  wire [2:0] nl_z_out;
  wire [2:0] z_out_1;
  wire [3:0] nl_z_out_1;
  wire [2:0] z_out_2;
  wire [3:0] nl_z_out_2;
  wire [3:0] z_out_3;
  wire [4:0] nl_z_out_3;
  wire [10:0] z_out_4;
  wire [11:0] z_out_8;
  wire [3:0] z_out_9;
  wire [4:0] nl_z_out_9;
  wire and_dcpl_186;
  wire [2:0] z_out_10;
  wire [3:0] nl_z_out_10;
  wire [2:0] z_out_11;
  wire [3:0] nl_z_out_11;
  wire and_dcpl_192;
  wire and_dcpl_195;
  wire and_dcpl_197;
  wire and_dcpl_199;
  wire and_dcpl_233;
  wire and_dcpl_235;
  wire and_dcpl_237;
  wire [12:0] z_out_16;
  wire or_dcpl_365;
  wire and_dcpl_239;
  wire and_dcpl_240;
  wire and_dcpl_241;
  wire and_dcpl_244;
  wire and_dcpl_248;
  wire and_dcpl_249;
  wire and_dcpl_252;
  wire [13:0] z_out_17;
  wire and_dcpl_256;
  wire [25:0] z_out_18;
  wire [26:0] nl_z_out_18;
  wire or_dcpl_372;
  wire and_dcpl_260;
  wire and_dcpl_264;
  wire and_dcpl_265;
  wire and_dcpl_268;
  wire and_dcpl_270;
  wire and_dcpl_272;
  wire and_dcpl_278;
  wire and_dcpl_279;
  wire and_dcpl_282;
  wire and_dcpl_286;
  wire and_dcpl_288;
  wire and_dcpl_290;
  wire and_dcpl_293;
  wire and_dcpl_297;
  wire and_dcpl_300;
  wire and_dcpl_303;
  wire and_dcpl_306;
  wire [13:0] z_out_19;
  wire [14:0] z_out_20;
  wire [16:0] nl_z_out_20;
  reg [35:0] ee_block_2_4_lpi_1;
  reg [35:0] ee_block_1_4_lpi_1;
  reg [35:0] ee_block_1_2_lpi_1;
  reg [35:0] ee_block_1_1_lpi_1;
  reg [35:0] ee_block_1_0_lpi_1;
  reg [35:0] ee_block_3_4_lpi_1;
  reg [35:0] ee_block_0_4_lpi_1;
  reg [35:0] ee_block_0_3_lpi_1;
  reg [35:0] ee_block_0_2_lpi_1;
  reg [35:0] ee_block_0_1_lpi_1;
  reg [35:0] ee_block_0_0_lpi_1;
  reg [35:0] ee_block_4_4_lpi_1;
  reg [12:0] i_1_lpi_1;
  reg [12:0] count_lpi_1;
  reg [25:0] n_lpi_1;
  reg [35:0] src_in_lpi_1;
  reg [2:0] k_1_lpi_1;
  reg [22:0] eeprocess_sharpen_threhold_r_1_lpi_1;
  reg [22:0] eeprocess_sharpen_threhold_g_1_lpi_1;
  reg [22:0] eeprocess_sharpen_threhold_b_1_lpi_1;
  reg [11:0] eeprocess_rblock_2_2_11_0_lpi_1;
  reg [10:0] eeprocess_rblock_2_1_11_1_lpi_1;
  reg [10:0] eeprocess_rblock_2_3_11_1_lpi_1;
  reg [10:0] eeprocess_rblock_2_0_11_1_lpi_1;
  reg [10:0] eeprocess_rblock_2_4_11_1_lpi_1;
  reg [10:0] eeprocess_rblock_1_4_11_1_lpi_1;
  reg [10:0] eeprocess_rblock_3_0_11_1_lpi_1;
  reg [10:0] eeprocess_rblock_1_3_11_1_lpi_1;
  reg [10:0] eeprocess_rblock_3_1_11_1_lpi_1;
  reg [10:0] eeprocess_rblock_1_2_11_1_lpi_1;
  reg [10:0] eeprocess_rblock_3_2_11_1_lpi_1;
  reg [10:0] eeprocess_rblock_1_1_11_1_lpi_1;
  reg [10:0] eeprocess_rblock_3_3_11_1_lpi_1;
  reg [10:0] eeprocess_rblock_1_0_11_1_lpi_1;
  reg [10:0] eeprocess_rblock_3_4_11_1_lpi_1;
  reg [10:0] eeprocess_rblock_0_4_11_1_lpi_1;
  reg [10:0] eeprocess_rblock_4_0_11_1_lpi_1;
  reg [10:0] eeprocess_rblock_0_3_11_1_lpi_1;
  reg [10:0] eeprocess_rblock_4_1_11_1_lpi_1;
  reg [10:0] eeprocess_rblock_0_2_11_1_lpi_1;
  reg [10:0] eeprocess_rblock_4_2_11_1_lpi_1;
  reg [10:0] eeprocess_rblock_0_1_11_1_lpi_1;
  reg [10:0] eeprocess_rblock_4_3_11_1_lpi_1;
  reg [10:0] eeprocess_rblock_0_0_11_1_lpi_1;
  reg [10:0] eeprocess_rblock_4_4_11_1_lpi_1;
  reg [11:0] eeprocess_gblock_2_2_11_0_lpi_1;
  reg [10:0] eeprocess_gblock_2_1_11_1_lpi_1;
  reg [10:0] eeprocess_gblock_2_3_11_1_lpi_1;
  reg [10:0] eeprocess_gblock_2_0_11_1_lpi_1;
  reg [10:0] eeprocess_gblock_2_4_11_1_lpi_1;
  reg [10:0] eeprocess_gblock_1_4_11_1_lpi_1;
  reg [10:0] eeprocess_gblock_3_0_11_1_lpi_1;
  reg [10:0] eeprocess_gblock_1_3_11_1_lpi_1;
  reg [10:0] eeprocess_gblock_3_1_11_1_lpi_1;
  reg [10:0] eeprocess_gblock_1_2_11_1_lpi_1;
  reg [10:0] eeprocess_gblock_3_2_11_1_lpi_1;
  reg [10:0] eeprocess_gblock_1_1_11_1_lpi_1;
  reg [10:0] eeprocess_gblock_3_3_11_1_lpi_1;
  reg [10:0] eeprocess_gblock_1_0_11_1_lpi_1;
  reg [10:0] eeprocess_gblock_3_4_11_1_lpi_1;
  reg [10:0] eeprocess_gblock_0_4_11_1_lpi_1;
  reg [10:0] eeprocess_gblock_4_0_11_1_lpi_1;
  reg [10:0] eeprocess_gblock_0_3_11_1_lpi_1;
  reg [10:0] eeprocess_gblock_4_1_11_1_lpi_1;
  reg [10:0] eeprocess_gblock_0_2_11_1_lpi_1;
  reg [10:0] eeprocess_gblock_4_2_11_1_lpi_1;
  reg [10:0] eeprocess_gblock_0_1_11_1_lpi_1;
  reg [10:0] eeprocess_gblock_4_3_11_1_lpi_1;
  reg [10:0] eeprocess_gblock_0_0_11_1_lpi_1;
  reg [10:0] eeprocess_gblock_4_4_11_1_lpi_1;
  reg [11:0] eeprocess_bblock_2_2_11_0_lpi_1;
  reg [10:0] eeprocess_bblock_2_1_11_1_lpi_1;
  reg [10:0] eeprocess_bblock_2_3_11_1_lpi_1;
  reg [10:0] eeprocess_bblock_2_0_11_1_lpi_1;
  reg [10:0] eeprocess_bblock_2_4_11_1_lpi_1;
  reg [10:0] eeprocess_bblock_1_4_11_1_lpi_1;
  reg [10:0] eeprocess_bblock_3_0_11_1_lpi_1;
  reg [10:0] eeprocess_bblock_1_3_11_1_lpi_1;
  reg [10:0] eeprocess_bblock_3_1_11_1_lpi_1;
  reg [10:0] eeprocess_bblock_1_2_11_1_lpi_1;
  reg [10:0] eeprocess_bblock_3_2_11_1_lpi_1;
  reg [10:0] eeprocess_bblock_1_1_11_1_lpi_1;
  reg [10:0] eeprocess_bblock_3_3_11_1_lpi_1;
  reg [10:0] eeprocess_bblock_1_0_11_1_lpi_1;
  reg [10:0] eeprocess_bblock_3_4_11_1_lpi_1;
  reg [10:0] eeprocess_bblock_0_4_11_1_lpi_1;
  reg [10:0] eeprocess_bblock_4_0_11_1_lpi_1;
  reg [10:0] eeprocess_bblock_0_3_11_1_lpi_1;
  reg [10:0] eeprocess_bblock_4_1_11_1_lpi_1;
  reg [10:0] eeprocess_bblock_0_2_11_1_lpi_1;
  reg [10:0] eeprocess_bblock_4_2_11_1_lpi_1;
  reg [10:0] eeprocess_bblock_0_1_11_1_lpi_1;
  reg [10:0] eeprocess_bblock_4_3_11_1_lpi_1;
  reg [10:0] eeprocess_bblock_0_0_11_1_lpi_1;
  reg [10:0] eeprocess_bblock_4_4_11_1_lpi_1;
  reg [10:0] eeprocess_feq_l_1_11_1_lpi_1;
  reg [10:0] eeprocess_feq_l_2_11_1_lpi_1;
  reg [10:0] eeprocess_result_v_2_11_1_lpi_1;
  reg [10:0] eeprocess_result_v_1_11_1_lpi_1;
  reg [10:0] eeprocess_result_v_3_11_1_lpi_1;
  reg [10:0] eeprocess_result_v_0_11_1_lpi_1;
  reg [2:0] eeprocess_k_1_lpi_1;
  reg [2:0] eeprocess_l_1_lpi_1;
  reg [10:0] ee_clip_return_11_1_lpi_1;
  reg [10:0] eeprocess_result_v_4_11_1_lpi_1;
  reg [11:0] dst_out_1_23_12_lpi_1;
  reg [11:0] dst_out_1_11_0_lpi_1;
  reg [11:0] dst_out_1_35_24_lpi_1;
  reg sfi_exit_single_loop_lpi_1_dfm;
  reg eeprocess_for_for_and_stg_3_8_sva;
  reg eeprocess_for_for_and_stg_2_7_sva;
  reg eeprocess_for_for_and_stg_3_7_sva;
  reg eeprocess_for_for_and_stg_2_6_sva;
  reg eeprocess_for_for_and_stg_3_6_sva;
  reg eeprocess_for_for_and_stg_2_5_sva;
  reg eeprocess_for_for_and_stg_3_5_sva;
  reg eeprocess_for_for_and_stg_2_4_sva;
  reg eeprocess_for_for_and_stg_3_4_sva;
  reg eeprocess_for_for_and_stg_2_3_sva;
  reg eeprocess_for_for_and_stg_3_3_sva;
  reg eeprocess_for_for_and_stg_2_2_sva;
  reg eeprocess_for_for_and_stg_3_2_sva;
  reg eeprocess_for_for_and_stg_2_1_sva;
  reg eeprocess_for_for_and_stg_3_1_sva;
  reg eeprocess_for_for_and_stg_3_0_sva;
  reg single_loop_and_213_tmp_1;
  reg eeprocess_for_6_or_13_tmp_1;
  reg [11:0] dst_out_1_11_0_lpi_1_dfm_2_1;
  reg [11:0] dst_out_1_23_12_lpi_1_dfm_2_1;
  reg [11:0] dst_out_1_35_24_lpi_1_dfm_2_1;
  reg [35:0] block_refresh_loop_in_block_refresh_loop_in_slc_ee_block_36_35_0_1_ctmp_sva_1;
  reg [35:0] src_in_lpi_1_dfm_1;
  reg [4:0] eeprocess_for_for_slc_eeprocess_guass_55_5_4_0_cse_sva_1;
  reg [12:0] eeprocess_acc_13_itm_1;
  wire [13:0] nl_eeprocess_acc_13_itm_1;
  reg padding_loop_1_padding_loop_1_nor_itm_1;
  reg padding_loop_1_padding_loop_1_and_itm_1;
  reg padding_loop_3_padding_loop_3_nor_itm_1;
  reg padding_loop_2_nand_itm_1;
  reg eeprocess_for_6_and_154_itm_1;
  reg eeprocess_for_6_and_208_itm_1;
  reg operator_3_false_14_slc_eeprocess_k_2_itm_1;
  reg [1:0] l_lpi_1_1_0;
  reg [1:0] k_3_lpi_1_1_0;
  reg eeprocess_feq_h_1_lpi_1_13;
  reg [12:0] eeprocess_feq_h_1_lpi_1_12_0;
  reg eeprocess_feq_h_2_lpi_1_13;
  reg [12:0] eeprocess_feq_h_2_lpi_1_12_0;
  reg lfst_exit_eeprocess_for_6_lpi_1_dfm_st_1_0;
  wire [35:0] ee_block_0_4_lpi_1_mx0;
  wire [35:0] tmp_lpi_1_dfm_1;
  wire [11:0] dst_out_1_35_24_lpi_1_dfm_3;
  wire [11:0] dst_out_1_11_0_lpi_1_dfm_3;
  wire [11:0] dst_out_1_23_12_lpi_1_dfm_3;
  wire padding_loop_1_padding_loop_1_nor_itm_mx0w0;
  wire padding_loop_1_padding_loop_1_and_itm_mx0w0;
  wire padding_loop_1_padding_loop_1_and_1_itm_mx0w0;
  wire padding_loop_1_padding_loop_1_and_2_itm_mx0w3;
  wire [35:0] block_refresh_loop_in_block_refresh_loop_in_slc_ee_block_36_35_0_1_ctmp_sva_1_1;
  wire [10:0] eeprocess_bblock_4_4_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_bblock_4_3_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_bblock_4_2_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_bblock_4_1_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_bblock_4_0_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_bblock_3_4_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_bblock_3_3_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_bblock_3_2_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_bblock_3_1_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_bblock_3_0_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_bblock_2_4_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_bblock_2_3_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_bblock_2_1_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_bblock_2_0_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_bblock_1_4_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_bblock_1_3_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_bblock_1_2_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_bblock_1_1_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_bblock_1_0_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_bblock_0_4_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_bblock_0_3_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_bblock_0_2_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_bblock_0_1_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_bblock_0_0_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_gblock_4_4_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_gblock_4_3_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_gblock_4_2_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_gblock_4_1_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_gblock_4_0_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_gblock_3_4_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_gblock_3_3_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_gblock_3_2_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_gblock_3_1_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_gblock_3_0_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_gblock_2_4_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_gblock_2_3_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_gblock_2_1_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_gblock_2_0_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_gblock_1_4_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_gblock_1_3_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_gblock_1_2_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_gblock_1_1_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_gblock_1_0_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_gblock_0_4_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_gblock_0_3_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_gblock_0_2_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_gblock_0_1_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_gblock_0_0_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_rblock_4_4_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_rblock_4_3_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_rblock_4_2_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_rblock_4_1_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_rblock_4_0_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_rblock_3_4_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_rblock_3_3_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_rblock_3_2_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_rblock_3_1_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_rblock_3_0_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_rblock_2_4_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_rblock_2_3_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_rblock_2_1_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_rblock_2_0_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_rblock_1_4_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_rblock_1_3_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_rblock_1_2_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_rblock_1_1_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_rblock_1_0_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_rblock_0_4_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_rblock_0_3_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_rblock_0_2_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_rblock_0_1_11_1_lpi_1_mx0;
  wire [10:0] eeprocess_rblock_0_0_11_1_lpi_1_mx0;
  wire [11:0] eeprocess_bblock_2_2_11_0_lpi_1_mx0;
  wire [11:0] eeprocess_gblock_2_2_11_0_lpi_1_mx0;
  wire [11:0] eeprocess_rblock_2_2_11_0_lpi_1_mx0;
  wire [22:0] eeprocess_sharpen_threhold_b_1_sva_2;
  wire [23:0] nl_eeprocess_sharpen_threhold_b_1_sva_2;
  wire [22:0] eeprocess_sharpen_threhold_g_1_sva_2;
  wire [23:0] nl_eeprocess_sharpen_threhold_g_1_sva_2;
  wire [22:0] eeprocess_sharpen_threhold_r_1_sva_2;
  wire [23:0] nl_eeprocess_sharpen_threhold_r_1_sva_2;
  wire [11:0] ee_clip_return_5_lpi_1_dfm_1_mx0w0;
  wire [12:0] count_lpi_1_dfm_1;
  wire [2:0] eeprocess_k_1_sva_2;
  wire [3:0] nl_eeprocess_k_1_sva_2;
  wire [2:0] eeprocess_k_1_lpi_1_dfm_1;
  wire [2:0] eeprocess_l_1_lpi_1_dfm_2;
  wire [12:0] eeprocess_for_1_for_if_eeprocess_for_1_for_if_acc_1_pmx_lpi_1_dfm_12_0_mx1;
  wire eeprocess_feq_h_2_sva_1_13_mx0;
  wire [12:0] eeprocess_feq_h_2_sva_1_12_0_mx0;
  wire eeprocess_feq_h_1_sva_1_13_mx0;
  wire [12:0] eeprocess_feq_h_1_sva_1_12_0_mx0;
  wire [10:0] operator_13_true_1_operator_13_true_1_acc_cse_10_0_sva_1;
  wire [10:0] operator_14_true_5_slc_eeprocess_result_v_14_13_0_tmp_11_1_sva_1;
  wire [10:0] eeprocess_result_v_0_11_1_lpi_1_dfm_1;
  wire eeprocess_feq_h_2_sva_5_13_mx0;
  wire [12:0] eeprocess_feq_h_2_sva_5_12_0_mx0;
  wire eeprocess_feq_h_1_sva_5_13_mx0;
  wire [12:0] eeprocess_feq_h_1_sva_5_12_0_mx0;
  wire [10:0] operator_13_true_5_operator_13_true_5_acc_cse_10_0_sva_1;
  wire [10:0] operator_14_true_17_operator_14_true_17_acc_cse_10_0_sva_1;
  wire eeprocess_feq_h_2_sva_9_13_mx0;
  wire [12:0] eeprocess_feq_h_2_sva_9_12_0_mx0;
  wire eeprocess_feq_h_1_sva_9_13_mx0;
  wire [12:0] eeprocess_feq_h_1_sva_9_12_0_mx0;
  wire [10:0] operator_13_true_9_operator_13_true_9_acc_cse_10_0_sva_1;
  wire eeprocess_feq_h_2_lpi_1_dfm_6_13_1;
  wire [12:0] eeprocess_feq_h_2_lpi_1_dfm_6_12_0_1;
  wire eeprocess_feq_h_1_lpi_1_dfm_6_13_1;
  wire [12:0] eeprocess_feq_h_1_lpi_1_dfm_6_12_0_1;
  wire eeprocess_for_6_and_3_ssc_1;
  wire [10:0] operator_14_true_29_operator_14_true_29_acc_cse_10_0_sva_1;
  wire eeprocess_for_6_or_259_tmp_1;
  wire padding_loop_2_or_338_tmp_1;
  wire lfst_exit_padding_loop_2_lpi_1_dfm_3_1_1;
  wire lfst_exit_padding_loop_2_lpi_1_dfm_3_0_1;
  wire eeprocess_for_for_and_stg_2_1_sva_mx0;
  wire eeprocess_for_for_and_stg_2_2_sva_mx0;
  wire eeprocess_for_for_and_stg_2_3_sva_mx0;
  wire eeprocess_for_for_and_stg_2_4_sva_mx0;
  wire eeprocess_for_for_and_stg_2_5_sva_mx0;
  wire eeprocess_for_for_and_stg_2_6_sva_mx0;
  wire eeprocess_for_for_and_stg_2_7_sva_mx0;
  wire [10:0] ee_clip_return_11_1_lpi_1_dfm_2;
  wire eeprocess_feq_h_2_lpi_1_dfm_2_13_1;
  wire [12:0] eeprocess_feq_h_2_lpi_1_dfm_2_12_0_1;
  wire eeprocess_feq_h_1_lpi_1_dfm_2_13_1;
  wire [12:0] eeprocess_feq_h_1_lpi_1_dfm_2_12_0_1;
  wire eeprocess_feq_h_2_lpi_1_dfm_4_13_1;
  wire [12:0] eeprocess_feq_h_2_lpi_1_dfm_4_12_0_1;
  wire eeprocess_feq_h_1_lpi_1_dfm_4_13_1;
  wire [12:0] eeprocess_feq_h_1_lpi_1_dfm_4_12_0_1;
  wire eeprocess_for_6_or_537_tmp_1;
  wire exitL_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_1;
  wire [4:0] operator_3_false_1_acc_psp_4_0_sva_1;
  wire [5:0] nl_operator_3_false_1_acc_psp_4_0_sva_1;
  wire eeprocess_for_2_and_3_ssc_1;
  wire eeprocess_for_4_and_3_ssc_1;
  wire [13:0] padding_loop_1_acc_3_sdt_sva_1;
  wire [14:0] nl_padding_loop_1_acc_3_sdt_sva_1;
  wire padding_loop_2_and_29_ssc_1;
  wire padding_loop_2_and_30_ssc_1;
  wire [10:0] eeprocess_for_1_for_asn_9;
  wire [10:0] eeprocess_for_2_asn_24;
  wire [10:0] eeprocess_for_3_for_asn_9;
  wire [10:0] eeprocess_for_4_asn_24;
  wire [10:0] eeprocess_for_5_for_asn_9;
  wire eeprocess_for_6_asn_166;
  wire eeprocess_for_6_asn_168;
  wire eeprocess_for_6_asn_170;
  wire [10:0] eeprocess_for_6_asn_172;
  wire single_loop_if_1_asn_14;
  wire single_loop_if_1_asn_16;
  wire eeprocess_for_2_asn_28;
  wire eeprocess_for_2_asn_30;
  wire eeprocess_for_2_asn_32;
  wire eeprocess_for_4_asn_28;
  wire eeprocess_for_4_asn_30;
  wire eeprocess_for_4_asn_32;
  wire padding_loop_2_asn_376;
  wire padding_loop_2_asn_378;
  wire padding_loop_2_asn_380;
  wire padding_loop_2_asn_382;
  wire padding_loop_2_asn_384;
  wire padding_loop_2_asn_386;
  wire padding_loop_2_asn_390;
  wire [4:0] ROM_1i5_1o5_5228d0b702cc16ac60c7d7bb9d7a503b2e_1;
  wire single_loop_and_230_rgt;
  wire and_381_cse;
  wire and_218_cse;
  wire and_376_cse;
  wire nor_89_cse;
  wire padding_loop_2_or_367_cse;
  wire padding_loop_2_or_366_cse;
  wire and_231_cse;
  wire and_254_cse;
  wire eeprocess_for_1_for_nor_1_itm;
  wire [17:0] eeprocess_mul_4_itm_20_3;
  wire padding_loop_3_acc_6_itm_13_1;
  wire single_loop_acc_4_itm_26_1;
  wire operator_3_false_5_acc_itm_2_1;
  wire operator_3_false_6_acc_itm_2_1;
  wire eeprocess_for_2_acc_2_itm_13_1;
  wire operator_3_false_9_acc_itm_2_1;
  wire eeprocess_for_4_acc_2_itm_13_1;
  wire [10:0] eeprocess_for_6_acc_itm_11_1_1;
  wire eeprocess_for_6_acc_2_itm_13_1;
  wire [17:0] eeprocess_mul_3_itm_20_3_1;
  wire [17:0] eeprocess_mul_2_itm_20_3_1;
  wire operator_3_false_4_acc_itm_2_1;
  wire [10:0] eeprocess_for_4_eeprocess_for_4_mux_cse;
  wire [1:0] eeprocess_for_1_for_mux1h_13_cse;
  wire [2:0] eeprocess_for_1_for_mux1h_15_cse;
  wire [2:0] eeprocess_for_1_for_mux1h_14_cse;
  wire eeprocess_for_1_for_eeprocess_for_1_for_or_1_cse;

  wire[0:0] mux_126_nl;
  wire[0:0] nor_26_nl;
  wire[0:0] mux_125_nl;
  wire[0:0] nor_27_nl;
  wire[0:0] nor_28_nl;
  wire[0:0] or_356_nl;
  wire[1:0] padding_loop_1_acc_7_nl;
  wire[2:0] nl_padding_loop_1_acc_7_nl;
  wire[1:0] padding_loop_3_acc_5_nl;
  wire[2:0] nl_padding_loop_3_acc_5_nl;
  wire[0:0] and_140_nl;
  wire[0:0] padding_loop_3_padding_loop_3_and_nl;
  wire[0:0] padding_loop_3_padding_loop_3_and_1_nl;
  wire[0:0] padding_loop_3_padding_loop_3_and_2_nl;
  wire[0:0] mux_134_nl;
  wire[0:0] nor_22_nl;
  wire[12:0] single_loop_mul_1_nl;
  wire[25:0] nl_single_loop_mul_1_nl;
  wire[12:0] single_loop_mux_2_nl;
  wire[1:0] padding_loop_2_mux_34_nl;
  wire[0:0] padding_loop_2_or_342_nl;
  wire[0:0] eeprocess_for_6_or_550_nl;
  wire[1:0] single_loop_for_single_loop_for_and_3_nl;
  wire[0:0] eeprocess_for_6_eeprocess_for_6_eeprocess_for_6_not_33_nl;
  wire[0:0] or_505_nl;
  wire[2:0] eeprocess_for_eeprocess_for_and_1_nl;
  wire[0:0] eeprocess_for_eeprocess_for_not_4_nl;
  wire[1:0] mux_168_nl;
  wire[0:0] or_510_nl;
  wire[0:0] nor_82_nl;
  wire[1:0] eeprocess_for_1_eeprocess_for_1_and_nl;
  wire[0:0] eeprocess_for_6_eeprocess_for_6_eeprocess_for_1_not_1_nl;
  wire[2:0] eeprocess_for_2_eeprocess_for_2_and_nl;
  wire[0:0] eeprocess_for_6_eeprocess_for_6_eeprocess_for_6_not_37_nl;
  wire[1:0] mux_169_nl;
  wire[0:0] or_515_nl;
  wire[0:0] nor_81_nl;
  wire[0:0] operator_3_false_6_mux_2_nl;
  wire[0:0] or_434_nl;
  wire[0:0] operator_3_false_10_mux_2_nl;
  wire[0:0] or_450_nl;
  wire[1:0] eeprocess_for_3_eeprocess_for_3_and_nl;
  wire[0:0] eeprocess_for_6_eeprocess_for_6_eeprocess_for_3_not_1_nl;
  wire[2:0] eeprocess_for_4_eeprocess_for_4_and_nl;
  wire[0:0] eeprocess_for_6_eeprocess_for_6_eeprocess_for_6_not_38_nl;
  wire[1:0] mux_170_nl;
  wire[0:0] or_520_nl;
  wire[0:0] nor_80_nl;
  wire[1:0] eeprocess_for_5_eeprocess_for_5_and_nl;
  wire[0:0] eeprocess_for_5_not_15_nl;
  wire[0:0] padding_loop_2_or_368_nl;
  wire[0:0] eeprocess_for_6_mux_38_nl;
  wire[0:0] single_loop_for_1_single_loop_for_1_or_nl;
  wire[12:0] mux_167_nl;
  wire[0:0] or_525_nl;
  wire[0:0] nand_67_nl;
  wire[0:0] padding_loop_2_mux_43_nl;
  wire[0:0] single_loop_single_loop_or_2_nl;
  wire[0:0] and_142_nl;
  wire[0:0] or_477_nl;
  wire[0:0] mux_157_nl;
  wire[0:0] mux_156_nl;
  wire[0:0] mux_155_nl;
  wire[0:0] mux_154_nl;
  wire[0:0] mux_153_nl;
  wire[0:0] mux_152_nl;
  wire[0:0] nor_18_nl;
  wire[0:0] mux_151_nl;
  wire[0:0] mux_150_nl;
  wire[0:0] nor_17_nl;
  wire[0:0] mux_149_nl;
  wire[0:0] mux_148_nl;
  wire[0:0] mux_147_nl;
  wire[0:0] mux_146_nl;
  wire[0:0] or_476_nl;
  wire[0:0] mux_145_nl;
  wire[0:0] mux_144_nl;
  wire[0:0] nor_16_nl;
  wire[0:0] mux_143_nl;
  wire[0:0] or_471_nl;
  wire[0:0] or_469_nl;
  wire[0:0] and_149_nl;
  wire[1:0] block_refresh_loop_out_block_refresh_loop_out_and_1_nl;
  wire[0:0] eeprocess_for_6_eeprocess_for_6_block_refresh_loop_out_not_3_nl;
  wire[0:0] padding_loop_2_padding_loop_2_nor_65_nl;
  wire[0:0] padding_loop_1_padding_loop_1_and_4_nl;
  wire[0:0] and_158_nl;
  wire[0:0] and_159_nl;
  wire[12:0] operator_13_false_acc_nl;
  wire[13:0] nl_operator_13_false_acc_nl;
  wire[13:0] operator_13_false_2_acc_nl;
  wire[14:0] nl_operator_13_false_2_acc_nl;
  wire[0:0] padding_loop_3_padding_loop_3_nor_nl;
  wire[0:0] asn_ee_block_3_4_lpi_1_nand_nl;
  wire[0:0] asn_ee_block_2_4_lpi_1_nand_nl;
  wire[0:0] asn_ee_block_1_4_lpi_1_nand_nl;
  wire[0:0] ee_block_or_nl;
  wire[0:0] ee_block_and_20_nl;
  wire[0:0] ee_block_and_21_nl;
  wire[11:0] ee_clip_6_ee_clip_6_or_nl;
  wire[11:0] ee_clip_6_else_ee_clip_6_else_and_nl;
  wire[0:0] operator_25_true_not_nl;
  wire[5:0] operator_25_true_acc_nl;
  wire[6:0] nl_operator_25_true_acc_nl;
  wire[11:0] ee_clip_8_ee_clip_8_or_nl;
  wire[11:0] ee_clip_8_else_ee_clip_8_else_and_nl;
  wire[0:0] operator_25_true_2_not_nl;
  wire[5:0] operator_25_true_2_acc_nl;
  wire[6:0] nl_operator_25_true_2_acc_nl;
  wire[11:0] ee_clip_7_ee_clip_7_or_nl;
  wire[11:0] ee_clip_7_else_ee_clip_7_else_and_nl;
  wire[0:0] operator_25_true_1_not_nl;
  wire[5:0] operator_25_true_1_acc_nl;
  wire[6:0] nl_operator_25_true_1_acc_nl;
  wire[22:0] eeprocess_sharpen_threhold_b_mux_nl;
  wire[0:0] single_loop_if_1_aelse_not_13_nl;
  wire[22:0] eeprocess_sharpen_threhold_g_mux_nl;
  wire[0:0] single_loop_if_1_aelse_not_14_nl;
  wire[22:0] eeprocess_sharpen_threhold_r_mux_nl;
  wire[0:0] single_loop_if_1_aelse_not_11_nl;
  wire[15:0] eeprocess_for_for_mul_14_nl;
  wire[16:0] nl_eeprocess_for_for_mul_14_nl;
  wire[15:0] eeprocess_for_for_mul_11_nl;
  wire[16:0] nl_eeprocess_for_for_mul_11_nl;
  wire[15:0] eeprocess_for_for_mul_8_nl;
  wire[16:0] nl_eeprocess_for_for_mul_8_nl;
  wire[20:0] eeprocess_mul_4_nl;
  wire signed [21:0] nl_eeprocess_mul_4_nl;
  wire[11:0] ee_clip_5_else_ee_clip_5_else_and_nl;
  wire[0:0] operator_15_true_5_not_nl;
  wire[0:0] single_loop_if_1_aelse_not_12_nl;
  wire[13:0] padding_loop_3_acc_6_nl;
  wire[14:0] nl_padding_loop_3_acc_6_nl;
  wire[0:0] padding_loop_2_not_255_nl;
  wire[0:0] block_refresh_loop_out_block_refresh_loop_out_block_refresh_loop_out_or_nl;
  wire[26:0] single_loop_acc_4_nl;
  wire[27:0] nl_single_loop_acc_4_nl;
  wire[25:0] single_loop_mul_nl;
  wire[0:0] padding_loop_2_not_256_nl;
  wire[0:0] padding_loop_2_not_317_nl;
  wire[0:0] eeprocess_for_6_or_547_nl;
  wire[0:0] eeprocess_for_6_or_548_nl;
  wire[0:0] eeprocess_for_6_mux1h_236_nl;
  wire[0:0] single_loop_if_1_aelse_not_9_nl;
  wire[2:0] operator_3_false_5_acc_nl;
  wire[3:0] nl_operator_3_false_5_acc_nl;
  wire[0:0] eeprocess_for_eeprocess_for_eeprocess_for_or_nl;
  wire[11:0] operator_13_false_1_acc_nl;
  wire[12:0] nl_operator_13_false_1_acc_nl;
  wire[11:0] operator_13_false_acc_nl_1;
  wire[12:0] nl_operator_13_false_acc_nl_1;
  wire[12:0] eeprocess_for_1_for_else_eeprocess_for_1_for_else_and_nl;
  wire[2:0] operator_3_false_6_acc_nl;
  wire[3:0] nl_operator_3_false_6_acc_nl;
  wire[0:0] or_412_nl;
  wire[13:0] eeprocess_for_2_acc_2_nl;
  wire[14:0] nl_eeprocess_for_2_acc_2_nl;
  wire[0:0] single_loop_if_1_aelse_not_10_nl;
  wire[2:0] operator_3_false_9_acc_nl;
  wire[3:0] nl_operator_3_false_9_acc_nl;
  wire[0:0] or_430_nl;
  wire[13:0] eeprocess_for_4_acc_2_nl;
  wire[14:0] nl_eeprocess_for_4_acc_2_nl;
  wire[2:0] operator_3_false_12_acc_nl;
  wire[3:0] nl_operator_3_false_12_acc_nl;
  wire[0:0] or_447_nl;
  wire[0:0] eeprocess_for_6_else_if_eeprocess_for_6_else_if_or_1_nl;
  wire[0:0] eeprocess_for_6_else_else_and_8_nl;
  wire[0:0] eeprocess_for_6_and_216_nl;
  wire[0:0] and_212_nl;
  wire[11:0] eeprocess_for_6_acc_nl;
  wire[12:0] nl_eeprocess_for_6_acc_nl;
  wire[0:0] eeprocess_for_6_else_if_eeprocess_for_6_else_if_or_nl;
  wire[0:0] eeprocess_for_6_else_else_and_7_nl;
  wire[0:0] eeprocess_for_6_and_214_nl;
  wire[0:0] and_210_nl;
  wire[13:0] eeprocess_for_6_acc_2_nl;
  wire[14:0] nl_eeprocess_for_6_acc_2_nl;
  wire[0:0] or_465_nl;
  wire[0:0] padding_loop_2_mux_33_nl;
  wire[0:0] padding_loop_2_padding_loop_2_and_11_nl;
  wire[0:0] eeprocess_for_6_mux_51_nl;
  wire[0:0] eeprocess_for_6_eeprocess_for_6_eeprocess_for_6_eeprocess_for_6_single_loop_nor_nl;
  wire[1:0] eeprocess_for_6_and_218_nl;
  wire[1:0] eeprocess_for_6_mux1h_537_nl;
  wire[0:0] eeprocess_for_6_and_219_nl;
  wire[0:0] eeprocess_for_6_and_220_nl;
  wire[0:0] eeprocess_for_6_or_542_nl;
  wire[0:0] eeprocess_for_6_nor_11_nl;
  wire[0:0] eeprocess_for_6_and_210_nl;
  wire[0:0] padding_loop_2_mux_32_nl;
  wire[0:0] padding_loop_2_padding_loop_3_nand_nl;
  wire[0:0] eeprocess_for_for_and_20_nl;
  wire[0:0] eeprocess_for_for_and_19_nl;
  wire[0:0] eeprocess_for_for_and_17_nl;
  wire[0:0] eeprocess_for_for_and_15_nl;
  wire[0:0] eeprocess_for_for_and_13_nl;
  wire[0:0] eeprocess_for_for_and_11_nl;
  wire[0:0] eeprocess_for_for_and_8_nl;
  wire[0:0] eeprocess_for_for_and_5_nl;
  wire[0:0] eeprocess_for_for_and_2_nl;
  wire[0:0] operator_3_false_10_mux_1_nl;
  wire[0:0] or_449_nl;
  wire[0:0] operator_3_false_6_mux_1_nl;
  wire[0:0] or_433_nl;
  wire[0:0] operator_3_false_2_mux_1_nl;
  wire[0:0] or_416_nl;
  wire[10:0] ee_clip_else_ee_clip_else_and_nl;
  wire[0:0] eeprocess_temp_r_not_nl;
  wire[0:0] eeprocess_for_2_else_if_eeprocess_for_2_else_if_or_1_nl;
  wire[0:0] eeprocess_for_2_else_else_and_8_nl;
  wire[0:0] eeprocess_for_2_and_14_nl;
  wire[0:0] and_208_nl;
  wire[0:0] eeprocess_for_2_else_if_eeprocess_for_2_else_if_or_nl;
  wire[0:0] eeprocess_for_2_else_else_and_7_nl;
  wire[0:0] eeprocess_for_2_and_12_nl;
  wire[0:0] and_206_nl;
  wire[0:0] eeprocess_for_4_else_if_eeprocess_for_4_else_if_or_1_nl;
  wire[0:0] eeprocess_for_4_else_else_and_8_nl;
  wire[0:0] eeprocess_for_4_and_14_nl;
  wire[0:0] and_204_nl;
  wire[0:0] eeprocess_for_4_else_if_eeprocess_for_4_else_if_or_nl;
  wire[0:0] eeprocess_for_4_else_else_and_7_nl;
  wire[0:0] eeprocess_for_4_and_12_nl;
  wire[0:0] and_202_nl;
  wire[2:0] operator_3_false_acc_nl;
  wire[3:0] nl_operator_3_false_acc_nl;
  wire[20:0] eeprocess_mul_3_nl;
  wire signed [21:0] nl_eeprocess_mul_3_nl;
  wire[11:0] ee_clip_4_else_ee_clip_4_else_and_nl;
  wire[0:0] operator_15_true_4_not_nl;
  wire[2:0] operator_15_true_4_acc_nl;
  wire[3:0] nl_operator_15_true_4_acc_nl;
  wire[20:0] eeprocess_mul_2_nl;
  wire signed [21:0] nl_eeprocess_mul_2_nl;
  wire[11:0] ee_clip_3_else_ee_clip_3_else_and_nl;
  wire[0:0] operator_15_true_3_not_nl;
  wire[0:0] mux_160_nl;
  wire[0:0] mux_159_nl;
  wire[0:0] nor_19_nl;
  wire[0:0] mux_158_nl;
  wire[0:0] mux_21_nl;
  wire[0:0] nor_55_nl;
  wire[0:0] mux_64_nl;
  wire[0:0] or_153_nl;
  wire[0:0] mux_63_nl;
  wire[0:0] or_288_nl;
  wire[0:0] mux_11_nl;
  wire[0:0] or_12_nl;
  wire[0:0] or_11_nl;
  wire[0:0] or_369_nl;
  wire[0:0] nor_23_nl;
  wire[0:0] nor_20_nl;
  wire[0:0] mux_24_nl;
  wire[0:0] or_42_nl;
  wire[2:0] operator_3_false_4_acc_nl;
  wire[3:0] nl_operator_3_false_4_acc_nl;
  wire[1:0] single_loop_for_mux_3_nl;
  wire[12:0] acc_4_nl;
  wire[13:0] nl_acc_4_nl;
  wire[10:0] eeprocess_for_1_for_mux1h_17_nl;
  wire[10:0] eeprocess_for_1_for_mux1h_18_nl;
  wire[2:0] single_loop_for_1_single_loop_for_1_mux_nl;
  wire[0:0] single_loop_for_1_or_1_nl;
  wire[2:0] eeprocess_for_5_mux_2_nl;
  wire[13:0] acc_12_nl;
  wire[14:0] nl_acc_12_nl;
  wire[0:0] eeprocess_for_1_for_eeprocess_for_1_for_eeprocess_for_1_for_nor_1_nl;
  wire[10:0] eeprocess_for_1_for_mux1h_21_nl;
  wire[0:0] eeprocess_for_1_for_eeprocess_for_1_for_and_4_nl;
  wire[10:0] eeprocess_for_1_for_mux1h_22_nl;
  wire[14:0] acc_13_nl;
  wire[15:0] nl_acc_13_nl;
  wire[12:0] single_loop_mux1h_2_nl;
  wire[12:0] single_loop_single_loop_and_6_nl;
  wire[0:0] single_loop_if_not_3_nl;
  wire[0:0] single_loop_or_2_nl;
  wire[12:0] single_loop_mux1h_3_nl;
  wire[0:0] single_loop_or_3_nl;
  wire[25:0] operator_3_false_mux_2_nl;
  wire[3:0] operator_3_false_mux_3_nl;
  wire[14:0] acc_15_nl;
  wire[15:0] nl_acc_15_nl;
  wire[12:0] padding_loop_3_mux1h_7_nl;
  wire[0:0] padding_loop_3_or_14_nl;
  wire[0:0] padding_loop_3_or_15_nl;
  wire[0:0] padding_loop_3_or_16_nl;
  wire[0:0] padding_loop_3_or_17_nl;
  wire[0:0] padding_loop_3_or_18_nl;
  wire[0:0] padding_loop_3_or_19_nl;
  wire[0:0] padding_loop_3_or_20_nl;
  wire[11:0] padding_loop_3_mux1h_8_nl;
  wire[0:0] padding_loop_3_or_21_nl;
  wire[0:0] padding_loop_3_or_22_nl;
  wire[0:0] padding_loop_3_or_23_nl;
  wire[0:0] padding_loop_3_or_24_nl;
  wire[0:0] padding_loop_3_or_25_nl;
  wire[10:0] mux_186_nl;
  wire[0:0] eeprocess_for_4_mux1h_4_nl;
  wire[10:0] mux_187_nl;
  wire[0:0] eeprocess_for_4_mux1h_5_nl;
  wire[12:0] operator_14_true_23_acc_nl;
  wire[13:0] nl_operator_14_true_23_acc_nl;
  wire[0:0] operator_14_true_23_mux1h_3_nl;
  wire[11:0] operator_14_true_23_mux1h_4_nl;
  wire[0:0] operator_14_true_23_mux1h_5_nl;
  wire[0:0] operator_14_true_23_and_1_nl;
  wire[0:0] operator_14_true_11_and_1_nl;
  wire[0:0] operator_14_true_3_and_1_nl;
  wire[0:0] operator_14_true_15_and_1_nl;
  wire[0:0] operator_14_true_27_and_1_nl;
  wire[0:0] operator_14_true_35_and_1_nl;
  wire[12:0] operator_14_true_21_acc_nl;
  wire[13:0] nl_operator_14_true_21_acc_nl;
  wire[0:0] operator_14_true_21_mux1h_3_nl;
  wire[11:0] operator_14_true_21_mux1h_4_nl;
  wire[0:0] operator_14_true_21_mux1h_5_nl;
  wire[0:0] operator_14_true_21_and_1_nl;
  wire[0:0] operator_14_true_9_and_1_nl;
  wire[0:0] operator_14_true_1_and_1_nl;
  wire[0:0] operator_14_true_13_and_1_nl;
  wire[0:0] operator_14_true_25_and_1_nl;
  wire[0:0] operator_14_true_33_and_1_nl;
  wire[0:0] padding_loop_2_mux_62_nl;
  wire[0:0] mux_178_nl;
  wire[0:0] mux_177_nl;
  wire[0:0] nor_93_nl;
  wire[0:0] mux_176_nl;
  wire[0:0] mux_172_nl;
  wire[0:0] mux_171_nl;
  wire[0:0] nor_94_nl;
  wire[0:0] or_540_nl;
  wire[0:0] mux_185_nl;
  wire[0:0] nor_95_nl;
  wire[0:0] or_558_nl;

  // Interconnect Declarations for Component Instantiations 
  wire [4:0] nl_U_ROM_1i5_1o5_5228d0b702cc16ac60c7d7bb9d7a503b2e_rg_I_1;
  assign nl_U_ROM_1i5_1o5_5228d0b702cc16ac60c7d7bb9d7a503b2e_rg_I_1 = {eeprocess_for_for_acc_tmp
      , (eeprocess_for_for_acc_16_tmp[1:0])};
  wire [35:0] nl_edgeenhancement_core_dst_rsci_inst_dst_rsci_idat;
  assign nl_edgeenhancement_core_dst_rsci_inst_dst_rsci_idat = {dst_rsci_idat_35_24
      , dst_rsci_idat_23_12 , dst_rsci_idat_11_0};
  wire [0:0] nl_edgeenhancement_core_ee_lines_rsc_0_0_i_1_inst_ee_lines_rsc_0_0_i_iswt0_1_pff;
  assign nl_edgeenhancement_core_ee_lines_rsc_0_0_i_1_inst_ee_lines_rsc_0_0_i_iswt0_1_pff
      = ~(or_dcpl_158 | or_dcpl_154 | (single_loop_for_1_slc_j_11_0_1_itm_1!=2'b00));
  wire [0:0] nl_edgeenhancement_core_ee_lines_rsc_0_1_i_1_inst_ee_lines_rsc_0_1_i_iswt0_1_pff;
  assign nl_edgeenhancement_core_ee_lines_rsc_0_1_i_1_inst_ee_lines_rsc_0_1_i_iswt0_1_pff
      = ~(or_dcpl_158 | or_dcpl_154 | (single_loop_for_1_slc_j_11_0_1_itm_1!=2'b01));
  wire [0:0] nl_edgeenhancement_core_ee_lines_rsc_0_2_i_1_inst_ee_lines_rsc_0_2_i_iswt0_1_pff;
  assign nl_edgeenhancement_core_ee_lines_rsc_0_2_i_1_inst_ee_lines_rsc_0_2_i_iswt0_1_pff
      = ~(or_dcpl_158 | or_dcpl_154 | (single_loop_for_1_slc_j_11_0_1_itm_1!=2'b10));
  wire [0:0] nl_edgeenhancement_core_ee_lines_rsc_0_3_i_1_inst_ee_lines_rsc_0_3_i_iswt0_1_pff;
  assign nl_edgeenhancement_core_ee_lines_rsc_0_3_i_1_inst_ee_lines_rsc_0_3_i_iswt0_1_pff
      = ~(or_dcpl_158 | or_dcpl_154 | (single_loop_for_1_slc_j_11_0_1_itm_1!=2'b11));
  ROM_1i5_1o5_a77d0c3e0e6562b96c8dca87049745f0af  U_ROM_1i5_1o5_5228d0b702cc16ac60c7d7bb9d7a503b2e_rg
      (
      .I_1(nl_U_ROM_1i5_1o5_5228d0b702cc16ac60c7d7bb9d7a503b2e_rg_I_1[4:0]),
      .O_1(ROM_1i5_1o5_5228d0b702cc16ac60c7d7bb9d7a503b2e_1)
    );
  edgeenhancement_core_src_rsci edgeenhancement_core_src_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .src_rsc_dat(src_rsc_dat),
      .src_rsc_vld(src_rsc_vld),
      .src_rsc_rdy(src_rsc_rdy),
      .core_wen(core_wen),
      .src_rsci_oswt(reg_src_rsci_oswt_cse),
      .src_rsci_wen_comp(src_rsci_wen_comp),
      .src_rsci_idat_mxwt(src_rsci_idat_mxwt)
    );
  edgeenhancement_core_dst_rsci edgeenhancement_core_dst_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .dst_rsc_dat(dst_rsc_dat),
      .dst_rsc_vld(dst_rsc_vld),
      .dst_rsc_rdy(dst_rsc_rdy),
      .core_wen(core_wen),
      .dst_rsci_oswt(reg_dst_rsci_oswt_cse),
      .dst_rsci_wen_comp(dst_rsci_wen_comp),
      .dst_rsci_idat(nl_edgeenhancement_core_dst_rsci_inst_dst_rsci_idat[35:0])
    );
  edgeenhancement_core_ee_lines_rsc_0_0_i_1 edgeenhancement_core_ee_lines_rsc_0_0_i_1_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .ee_lines_rsc_0_0_i_q_d(ee_lines_rsc_0_0_i_q_d),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .ee_lines_rsc_0_0_i_oswt(reg_ee_lines_rsc_0_0_i_oswt_cse),
      .ee_lines_rsc_0_0_i_q_d_mxwt(ee_lines_rsc_0_0_i_q_d_mxwt),
      .ee_lines_rsc_0_0_i_we_d_pff(ee_lines_rsc_0_0_i_we_d_iff),
      .ee_lines_rsc_0_0_i_iswt0_1_pff(nl_edgeenhancement_core_ee_lines_rsc_0_0_i_1_inst_ee_lines_rsc_0_0_i_iswt0_1_pff[0:0]),
      .ee_lines_rsc_0_0_i_re_d_pff(ee_lines_rsc_0_0_i_re_d_iff),
      .ee_lines_rsc_0_0_i_oswt_pff(block_refresh_loop_in_single_loop_for_nor_7_rmff)
    );
  edgeenhancement_core_ee_lines_rsc_0_1_i_1 edgeenhancement_core_ee_lines_rsc_0_1_i_1_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .ee_lines_rsc_0_1_i_q_d(ee_lines_rsc_0_1_i_q_d),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .ee_lines_rsc_0_1_i_oswt(reg_ee_lines_rsc_0_1_i_oswt_cse),
      .ee_lines_rsc_0_1_i_q_d_mxwt(ee_lines_rsc_0_1_i_q_d_mxwt),
      .ee_lines_rsc_0_1_i_we_d_pff(ee_lines_rsc_0_1_i_we_d_iff),
      .ee_lines_rsc_0_1_i_iswt0_1_pff(nl_edgeenhancement_core_ee_lines_rsc_0_1_i_1_inst_ee_lines_rsc_0_1_i_iswt0_1_pff[0:0]),
      .ee_lines_rsc_0_1_i_re_d_pff(ee_lines_rsc_0_1_i_re_d_iff),
      .ee_lines_rsc_0_1_i_oswt_pff(block_refresh_loop_in_single_loop_for_nor_6_rmff)
    );
  edgeenhancement_core_ee_lines_rsc_0_2_i_1 edgeenhancement_core_ee_lines_rsc_0_2_i_1_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .ee_lines_rsc_0_2_i_q_d(ee_lines_rsc_0_2_i_q_d),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .ee_lines_rsc_0_2_i_oswt(reg_ee_lines_rsc_0_2_i_oswt_cse),
      .ee_lines_rsc_0_2_i_q_d_mxwt(ee_lines_rsc_0_2_i_q_d_mxwt),
      .ee_lines_rsc_0_2_i_we_d_pff(ee_lines_rsc_0_2_i_we_d_iff),
      .ee_lines_rsc_0_2_i_iswt0_1_pff(nl_edgeenhancement_core_ee_lines_rsc_0_2_i_1_inst_ee_lines_rsc_0_2_i_iswt0_1_pff[0:0]),
      .ee_lines_rsc_0_2_i_re_d_pff(ee_lines_rsc_0_2_i_re_d_iff),
      .ee_lines_rsc_0_2_i_oswt_pff(block_refresh_loop_in_single_loop_for_nor_5_rmff)
    );
  edgeenhancement_core_ee_lines_rsc_0_3_i_1 edgeenhancement_core_ee_lines_rsc_0_3_i_1_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .ee_lines_rsc_0_3_i_q_d(ee_lines_rsc_0_3_i_q_d),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .ee_lines_rsc_0_3_i_oswt(reg_ee_lines_rsc_0_3_i_oswt_cse),
      .ee_lines_rsc_0_3_i_q_d_mxwt(ee_lines_rsc_0_3_i_q_d_mxwt),
      .ee_lines_rsc_0_3_i_we_d_pff(ee_lines_rsc_0_3_i_we_d_iff),
      .ee_lines_rsc_0_3_i_iswt0_1_pff(nl_edgeenhancement_core_ee_lines_rsc_0_3_i_1_inst_ee_lines_rsc_0_3_i_iswt0_1_pff[0:0]),
      .ee_lines_rsc_0_3_i_re_d_pff(ee_lines_rsc_0_3_i_re_d_iff),
      .ee_lines_rsc_0_3_i_oswt_pff(block_refresh_loop_in_single_loop_for_nor_4_rmff)
    );
  edgeenhancement_core_staller edgeenhancement_core_staller_inst (
      .clk(clk),
      .arst_n(arst_n),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .src_rsci_wen_comp(src_rsci_wen_comp),
      .dst_rsci_wen_comp(dst_rsci_wen_comp)
    );
  assign dst_out_and_11_cse = padding_loop_1_padding_loop_1_nor_itm_1 & and_dcpl_104;
  assign dst_out_and_12_cse = padding_loop_1_padding_loop_1_and_itm_1 & and_dcpl_104;
  assign dst_out_and_13_cse = padding_loop_1_padding_loop_1_and_1_itm_1 & and_dcpl_104;
  assign dst_out_and_14_cse = padding_loop_1_padding_loop_1_and_2_itm_1 & and_dcpl_104;
  assign single_loop_if_1_if_1_and_cse = core_wen & (and_dcpl_94 | and_dcpl_99 |
      and_dcpl_104);
  assign block_refresh_loop_in_single_loop_for_nor_7_rmff = ~(mux_tmp_118 | or_dcpl_143
      | (lfst_exit_eeprocess_for_6_lpi_1_dfm_st_1_2_1[0]));
  assign single_loop_for_mux_rmff = MUX_v_10_2_2((ee_clip_return_5_lpi_1_dfm_1_1[11:2]),
      (ee_clip_return_5_lpi_1_dfm_1_1[9:0]), and_dcpl_106);
  assign block_refresh_loop_in_single_loop_for_nor_6_rmff = ~(mux_tmp_118 | or_dcpl_143
      | (~ (lfst_exit_eeprocess_for_6_lpi_1_dfm_st_1_2_1[0])));
  assign block_refresh_loop_in_single_loop_for_nor_5_rmff = ~(mux_tmp_118 | or_dcpl_148
      | (lfst_exit_eeprocess_for_6_lpi_1_dfm_st_1_2_1[0]));
  assign block_refresh_loop_in_single_loop_for_nor_4_rmff = ~(mux_tmp_118 | or_dcpl_148
      | (~ (lfst_exit_eeprocess_for_6_lpi_1_dfm_st_1_2_1[0])));
  assign eeprocess_sharpen_threhold_b_and_cse = core_wen & (((or_167_cse | lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_1)
      & main_stage_0_2) | and_dcpl_111) & (single_loop_if_1_and_72 | and_dcpl_111);
  assign or_167_cse = (lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_1_0!=2'b00);
  assign nor_22_nl = ~(lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_1 | (~ mux_65_cse));
  assign mux_134_nl = MUX_s_1_2_2(nor_22_nl, single_loop_acc_4_itm_26_1, exitL_exitL_exit_padding_loop_2_sva);
  assign eeprocess_for_6_and_222_cse = core_wen & mux_134_nl;
  assign eeprocess_for_6_and_223_cse = core_wen & (~((~ mux_22_cse) | or_dcpl_100
      | or_dcpl_236 | or_dcpl_228 | or_dcpl_226 | (~ lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_2)));
  assign single_loop_if_1_aelse_mux_1_itm = MUX_s_1_2_2(single_loop_if_1_land_lpi_1,
      single_loop_if_1_if_single_loop_if_1_if_and_tmp, sfi_ee_top_eb_1_lpi_1);
  assign eeprocess_feq_h_and_cse = core_wen & (padding_loop_2_asn_382 | single_loop_if_1_and_36_ssc_1
      | padding_loop_2_asn_384 | single_loop_if_1_and_37_ssc_1 | padding_loop_2_asn_386
      | padding_loop_2_asn_390);
  assign padding_loop_2_or_367_cse = padding_loop_2_asn_382 | padding_loop_2_asn_384
      | padding_loop_2_asn_386;
  assign eeprocess_feq_h_and_2_cse = core_wen & (padding_loop_2_asn_376 | single_loop_if_1_and_36_ssc_1
      | padding_loop_2_asn_378 | single_loop_if_1_and_37_ssc_1 | padding_loop_2_asn_380
      | padding_loop_2_asn_390);
  assign padding_loop_2_or_366_cse = padding_loop_2_asn_376 | padding_loop_2_asn_378
      | padding_loop_2_asn_380;
  assign single_loop_and_230_rgt = eeprocess_for_6_or_537_tmp_1 & single_loop_and_119_tmp_1
      & padding_loop_2_and_60_tmp_1;
  assign eeprocess_for_6_and_227_cse = core_wen & (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1);
  assign padding_loop_2_and_274_cse = core_wen & (~((~ asn_sft_lpi_1) | lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_0
      | or_dcpl_315));
  assign dst_out_and_cse = core_wen & main_stage_0_2 & padding_loop_2_and_155_itm_1;
  assign asn_ee_block_3_4_lpi_1_nand_nl = ~(main_stage_0_3 & padding_loop_2_and_142_itm_2);
  assign ee_block_3_4_lpi_1_mx0 = MUX_v_36_2_2(tmp_lpi_1_dfm_1, ee_block_3_4_lpi_1,
      asn_ee_block_3_4_lpi_1_nand_nl);
  assign asn_ee_block_2_4_lpi_1_nand_nl = ~(main_stage_0_3 & padding_loop_2_and_141_itm_2);
  assign ee_block_2_4_lpi_1_mx0 = MUX_v_36_2_2(tmp_lpi_1_dfm_1, ee_block_2_4_lpi_1,
      asn_ee_block_2_4_lpi_1_nand_nl);
  assign asn_ee_block_1_4_lpi_1_nand_nl = ~(main_stage_0_3 & padding_loop_2_and_140_itm_2);
  assign ee_block_1_4_lpi_1_mx0 = MUX_v_36_2_2(tmp_lpi_1_dfm_1, ee_block_1_4_lpi_1,
      asn_ee_block_1_4_lpi_1_nand_nl);
  assign ee_block_or_nl = (~ main_stage_0_3) | padding_loop_2_nand_itm_1;
  assign ee_block_and_20_nl = eeprocess_for_6_and_154_itm_1 & main_stage_0_3;
  assign ee_block_and_21_nl = eeprocess_for_6_and_208_itm_1 & main_stage_0_3;
  assign ee_block_0_4_lpi_1_mx0 = MUX1HOT_v_36_3_2(ee_block_0_4_lpi_1, block_refresh_loop_in_block_refresh_loop_in_slc_ee_block_36_35_0_1_ctmp_sva_1,
      tmp_lpi_1_dfm_1, {ee_block_or_nl , ee_block_and_20_nl , ee_block_and_21_nl});
  assign tmp_lpi_1_dfm_1 = MUX1HOT_v_36_4_2(ee_lines_rsc_0_0_i_q_d_mxwt, ee_lines_rsc_0_1_i_q_d_mxwt,
      ee_lines_rsc_0_2_i_q_d_mxwt, ee_lines_rsc_0_3_i_q_d_mxwt, {padding_loop_1_padding_loop_1_and_itm_1
      , padding_loop_1_padding_loop_1_and_2_itm_1 , asn_sft_lpi_1_st_2 , padding_loop_1_padding_loop_1_and_1_itm_1});
  assign operator_25_true_not_nl = ~ (operator_24_true_acc_psp_sva_1[17]);
  assign ee_clip_6_else_ee_clip_6_else_and_nl = MUX_v_12_2_2(12'b000000000000, (operator_24_true_acc_psp_sva_1[11:0]),
      operator_25_true_not_nl);
  assign nl_operator_25_true_acc_nl =  -(operator_24_true_acc_psp_sva_1[17:12]);
  assign operator_25_true_acc_nl = nl_operator_25_true_acc_nl[5:0];
  assign ee_clip_6_ee_clip_6_or_nl = MUX_v_12_2_2(ee_clip_6_else_ee_clip_6_else_and_nl,
      12'b111111111111, (readslicef_6_1_5(operator_25_true_acc_nl)));
  assign dst_out_1_35_24_lpi_1_dfm_3 = MUX1HOT_v_12_3_2((ee_block_2_2_lpi_1[35:24]),
      dst_out_1_35_24_lpi_1, ee_clip_6_ee_clip_6_or_nl, {(~ single_loop_if_1_asn_sft_lpi_1_dfm_1)
      , single_loop_if_1_asn_14 , single_loop_if_1_asn_16});
  assign operator_25_true_2_not_nl = ~ (operator_24_true_2_acc_psp_sva_1[17]);
  assign ee_clip_8_else_ee_clip_8_else_and_nl = MUX_v_12_2_2(12'b000000000000, (operator_24_true_2_acc_psp_sva_1[11:0]),
      operator_25_true_2_not_nl);
  assign nl_operator_25_true_2_acc_nl =  -(operator_24_true_2_acc_psp_sva_1[17:12]);
  assign operator_25_true_2_acc_nl = nl_operator_25_true_2_acc_nl[5:0];
  assign ee_clip_8_ee_clip_8_or_nl = MUX_v_12_2_2(ee_clip_8_else_ee_clip_8_else_and_nl,
      12'b111111111111, (readslicef_6_1_5(operator_25_true_2_acc_nl)));
  assign dst_out_1_11_0_lpi_1_dfm_3 = MUX1HOT_v_12_3_2((ee_block_2_2_lpi_1[11:0]),
      dst_out_1_11_0_lpi_1, ee_clip_8_ee_clip_8_or_nl, {(~ single_loop_if_1_asn_sft_lpi_1_dfm_1)
      , single_loop_if_1_asn_14 , single_loop_if_1_asn_16});
  assign operator_25_true_1_not_nl = ~ (operator_24_true_1_acc_psp_sva_1[17]);
  assign ee_clip_7_else_ee_clip_7_else_and_nl = MUX_v_12_2_2(12'b000000000000, (operator_24_true_1_acc_psp_sva_1[11:0]),
      operator_25_true_1_not_nl);
  assign nl_operator_25_true_1_acc_nl =  -(operator_24_true_1_acc_psp_sva_1[17:12]);
  assign operator_25_true_1_acc_nl = nl_operator_25_true_1_acc_nl[5:0];
  assign ee_clip_7_ee_clip_7_or_nl = MUX_v_12_2_2(ee_clip_7_else_ee_clip_7_else_and_nl,
      12'b111111111111, (readslicef_6_1_5(operator_25_true_1_acc_nl)));
  assign dst_out_1_23_12_lpi_1_dfm_3 = MUX1HOT_v_12_3_2((ee_block_2_2_lpi_1[23:12]),
      dst_out_1_23_12_lpi_1, ee_clip_7_ee_clip_7_or_nl, {(~ single_loop_if_1_asn_sft_lpi_1_dfm_1)
      , single_loop_if_1_asn_14 , single_loop_if_1_asn_16});
  assign src_in_lpi_1_dfm_1_mx0 = MUX_v_36_2_2(src_in_lpi_1, src_rsci_idat_mxwt,
      sfi_exit_single_loop_lpi_1_dfm_1);
  assign padding_loop_1_padding_loop_1_nor_itm_mx0w0 = ~((ee_clip_return_5_lpi_1_dfm_1_1[1:0]!=2'b00));
  assign padding_loop_1_padding_loop_1_and_itm_mx0w0 = (ee_clip_return_5_lpi_1_dfm_1_1[1:0]==2'b01);
  assign padding_loop_1_padding_loop_1_and_1_itm_mx0w0 = (ee_clip_return_5_lpi_1_dfm_1_1[1:0]==2'b10);
  assign padding_loop_1_padding_loop_1_and_2_itm_mx0w3 = (ee_clip_return_5_lpi_1_dfm_1_1[1:0]==2'b11);
  assign block_refresh_loop_in_block_refresh_loop_in_slc_ee_block_36_35_0_1_ctmp_sva_1_1
      = MUX_v_36_25_2x0(ee_block_0_1_lpi_1, ee_block_0_2_lpi_1, ee_block_0_3_lpi_1,
      ee_block_0_4_lpi_1_mx0, ee_block_1_0_lpi_1, ee_block_1_1_lpi_1, ee_block_1_2_lpi_1,
      ee_block_1_3_lpi_1, ee_block_1_4_lpi_1_mx0, ee_block_2_0_lpi_1, ee_block_2_1_lpi_1,
      ee_block_2_2_lpi_1, ee_block_2_3_lpi_1, ee_block_2_4_lpi_1_mx0, ee_block_3_0_lpi_1,
      ee_block_3_1_lpi_1, ee_block_3_2_lpi_1, ee_block_3_3_lpi_1, ee_block_3_4_lpi_1_mx0,
      ee_block_4_0_lpi_1, ee_block_4_1_lpi_1, ee_block_4_2_lpi_1, ee_block_4_3_lpi_1,
      ee_block_4_4_lpi_1, eeprocess_for_for_slc_eeprocess_guass_55_5_4_0_cse_sva_1);
  assign eeprocess_bblock_4_4_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_bblock_4_4_11_1_lpi_1, or_dcpl_169);
  assign eeprocess_bblock_4_3_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_bblock_4_3_11_1_lpi_1, or_dcpl_170);
  assign eeprocess_bblock_4_2_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_bblock_4_2_11_1_lpi_1, or_dcpl_171);
  assign eeprocess_bblock_4_1_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_bblock_4_1_11_1_lpi_1, or_dcpl_172);
  assign eeprocess_bblock_4_0_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_bblock_4_0_11_1_lpi_1, or_dcpl_173);
  assign eeprocess_bblock_3_4_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_bblock_3_4_11_1_lpi_1, or_dcpl_174);
  assign eeprocess_bblock_3_3_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_bblock_3_3_11_1_lpi_1, or_dcpl_175);
  assign eeprocess_bblock_3_2_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_bblock_3_2_11_1_lpi_1, or_dcpl_176);
  assign eeprocess_bblock_3_1_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_bblock_3_1_11_1_lpi_1, or_dcpl_177);
  assign eeprocess_bblock_3_0_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_bblock_3_0_11_1_lpi_1, or_dcpl_178);
  assign eeprocess_bblock_2_4_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_bblock_2_4_11_1_lpi_1, or_dcpl_179);
  assign eeprocess_bblock_2_3_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_bblock_2_3_11_1_lpi_1, or_dcpl_180);
  assign eeprocess_bblock_2_1_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_bblock_2_1_11_1_lpi_1, or_dcpl_181);
  assign eeprocess_bblock_2_0_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_bblock_2_0_11_1_lpi_1, or_dcpl_182);
  assign eeprocess_bblock_1_4_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_bblock_1_4_11_1_lpi_1, or_dcpl_183);
  assign eeprocess_bblock_1_3_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_bblock_1_3_11_1_lpi_1, or_dcpl_184);
  assign eeprocess_bblock_1_2_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_bblock_1_2_11_1_lpi_1, or_dcpl_185);
  assign eeprocess_bblock_1_1_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_bblock_1_1_11_1_lpi_1, or_dcpl_186);
  assign eeprocess_bblock_1_0_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_bblock_1_0_11_1_lpi_1, or_dcpl_187);
  assign eeprocess_bblock_0_4_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_bblock_0_4_11_1_lpi_1, or_dcpl_188);
  assign eeprocess_bblock_0_3_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_bblock_0_3_11_1_lpi_1, or_dcpl_189);
  assign eeprocess_bblock_0_2_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_bblock_0_2_11_1_lpi_1, or_dcpl_190);
  assign eeprocess_bblock_0_1_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_bblock_0_1_11_1_lpi_1, or_dcpl_191);
  assign eeprocess_bblock_0_0_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_bblock_0_0_11_1_lpi_1, or_dcpl_192);
  assign eeprocess_gblock_4_4_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1_1[11:1]),
      eeprocess_gblock_4_4_11_1_lpi_1, or_dcpl_169);
  assign eeprocess_gblock_4_3_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1_1[11:1]),
      eeprocess_gblock_4_3_11_1_lpi_1, or_dcpl_170);
  assign eeprocess_gblock_4_2_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1_1[11:1]),
      eeprocess_gblock_4_2_11_1_lpi_1, or_dcpl_171);
  assign eeprocess_gblock_4_1_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1_1[11:1]),
      eeprocess_gblock_4_1_11_1_lpi_1, or_dcpl_172);
  assign eeprocess_gblock_4_0_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1_1[11:1]),
      eeprocess_gblock_4_0_11_1_lpi_1, or_dcpl_173);
  assign eeprocess_gblock_3_4_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1_1[11:1]),
      eeprocess_gblock_3_4_11_1_lpi_1, or_dcpl_174);
  assign eeprocess_gblock_3_3_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1_1[11:1]),
      eeprocess_gblock_3_3_11_1_lpi_1, or_dcpl_175);
  assign eeprocess_gblock_3_2_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1_1[11:1]),
      eeprocess_gblock_3_2_11_1_lpi_1, or_dcpl_176);
  assign eeprocess_gblock_3_1_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1_1[11:1]),
      eeprocess_gblock_3_1_11_1_lpi_1, or_dcpl_177);
  assign eeprocess_gblock_3_0_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1_1[11:1]),
      eeprocess_gblock_3_0_11_1_lpi_1, or_dcpl_178);
  assign eeprocess_gblock_2_4_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1_1[11:1]),
      eeprocess_gblock_2_4_11_1_lpi_1, or_dcpl_179);
  assign eeprocess_gblock_2_3_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1_1[11:1]),
      eeprocess_gblock_2_3_11_1_lpi_1, or_dcpl_180);
  assign eeprocess_gblock_2_1_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1_1[11:1]),
      eeprocess_gblock_2_1_11_1_lpi_1, or_dcpl_181);
  assign eeprocess_gblock_2_0_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1_1[11:1]),
      eeprocess_gblock_2_0_11_1_lpi_1, or_dcpl_182);
  assign eeprocess_gblock_1_4_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1_1[11:1]),
      eeprocess_gblock_1_4_11_1_lpi_1, or_dcpl_183);
  assign eeprocess_gblock_1_3_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1_1[11:1]),
      eeprocess_gblock_1_3_11_1_lpi_1, or_dcpl_184);
  assign eeprocess_gblock_1_2_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1_1[11:1]),
      eeprocess_gblock_1_2_11_1_lpi_1, or_dcpl_185);
  assign eeprocess_gblock_1_1_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1_1[11:1]),
      eeprocess_gblock_1_1_11_1_lpi_1, or_dcpl_186);
  assign eeprocess_gblock_1_0_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1_1[11:1]),
      eeprocess_gblock_1_0_11_1_lpi_1, or_dcpl_187);
  assign eeprocess_gblock_0_4_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1_1[11:1]),
      eeprocess_gblock_0_4_11_1_lpi_1, or_dcpl_188);
  assign eeprocess_gblock_0_3_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1_1[11:1]),
      eeprocess_gblock_0_3_11_1_lpi_1, or_dcpl_189);
  assign eeprocess_gblock_0_2_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1_1[11:1]),
      eeprocess_gblock_0_2_11_1_lpi_1, or_dcpl_190);
  assign eeprocess_gblock_0_1_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1_1[11:1]),
      eeprocess_gblock_0_1_11_1_lpi_1, or_dcpl_191);
  assign eeprocess_gblock_0_0_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1_1[11:1]),
      eeprocess_gblock_0_0_11_1_lpi_1, or_dcpl_192);
  assign eeprocess_rblock_4_4_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_rblock_4_4_11_1_lpi_1, or_dcpl_169);
  assign eeprocess_rblock_4_3_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_rblock_4_3_11_1_lpi_1, or_dcpl_170);
  assign eeprocess_rblock_4_2_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_rblock_4_2_11_1_lpi_1, or_dcpl_171);
  assign eeprocess_rblock_4_1_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_rblock_4_1_11_1_lpi_1, or_dcpl_172);
  assign eeprocess_rblock_4_0_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_rblock_4_0_11_1_lpi_1, or_dcpl_173);
  assign eeprocess_rblock_3_4_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_rblock_3_4_11_1_lpi_1, or_dcpl_174);
  assign eeprocess_rblock_3_3_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_rblock_3_3_11_1_lpi_1, or_dcpl_175);
  assign eeprocess_rblock_3_2_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_rblock_3_2_11_1_lpi_1, or_dcpl_176);
  assign eeprocess_rblock_3_1_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_rblock_3_1_11_1_lpi_1, or_dcpl_177);
  assign eeprocess_rblock_3_0_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_rblock_3_0_11_1_lpi_1, or_dcpl_178);
  assign eeprocess_rblock_2_4_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_rblock_2_4_11_1_lpi_1, or_dcpl_179);
  assign eeprocess_rblock_2_3_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_rblock_2_3_11_1_lpi_1, or_dcpl_180);
  assign eeprocess_rblock_2_1_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_rblock_2_1_11_1_lpi_1, or_dcpl_181);
  assign eeprocess_rblock_2_0_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_rblock_2_0_11_1_lpi_1, or_dcpl_182);
  assign eeprocess_rblock_1_4_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_rblock_1_4_11_1_lpi_1, or_dcpl_183);
  assign eeprocess_rblock_1_3_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_rblock_1_3_11_1_lpi_1, or_dcpl_184);
  assign eeprocess_rblock_1_2_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_rblock_1_2_11_1_lpi_1, or_dcpl_185);
  assign eeprocess_rblock_1_1_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_rblock_1_1_11_1_lpi_1, or_dcpl_186);
  assign eeprocess_rblock_1_0_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_rblock_1_0_11_1_lpi_1, or_dcpl_187);
  assign eeprocess_rblock_0_4_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_rblock_0_4_11_1_lpi_1, or_dcpl_188);
  assign eeprocess_rblock_0_3_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_rblock_0_3_11_1_lpi_1, or_dcpl_189);
  assign eeprocess_rblock_0_2_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_rblock_0_2_11_1_lpi_1, or_dcpl_190);
  assign eeprocess_rblock_0_1_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_rblock_0_1_11_1_lpi_1, or_dcpl_191);
  assign eeprocess_rblock_0_0_11_1_lpi_1_mx0 = MUX_v_11_2_2((operator_36_false_slc_ee_block_36_35_0_psp_sva_1[11:1]),
      eeprocess_rblock_0_0_11_1_lpi_1, or_dcpl_192);
  assign eeprocess_bblock_2_2_11_0_lpi_1_mx0 = MUX_v_12_2_2(operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1,
      eeprocess_bblock_2_2_11_0_lpi_1, or_dcpl_193);
  assign eeprocess_gblock_2_2_11_0_lpi_1_mx0 = MUX_v_12_2_2(operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1_1,
      eeprocess_gblock_2_2_11_0_lpi_1, or_dcpl_193);
  assign eeprocess_rblock_2_2_11_0_lpi_1_mx0 = MUX_v_12_2_2(operator_36_false_slc_ee_block_36_35_0_psp_sva_1,
      eeprocess_rblock_2_2_11_0_lpi_1, or_dcpl_193);
  assign eeprocess_sharpen_threhold_b_and_1_cse = single_loop_if_1_and_72 & main_stage_0_2;
  assign eeprocess_sharpen_threhold_b_mux_nl = MUX_v_23_2_2(eeprocess_sharpen_threhold_b_1_lpi_1,
      eeprocess_sharpen_threhold_b_1_sva_2, eeprocess_sharpen_threhold_b_and_1_cse);
  assign single_loop_if_1_aelse_not_13_nl = ~ sfi_single_loop_if_1_land_lpi_1_dfm_1;
  assign eeprocess_sharpen_threhold_b_1_lpi_1_dfm_mx1w1 = MUX_v_23_2_2(23'b00000000000000000000000,
      eeprocess_sharpen_threhold_b_mux_nl, single_loop_if_1_aelse_not_13_nl);
  assign eeprocess_sharpen_threhold_g_mux_nl = MUX_v_23_2_2(eeprocess_sharpen_threhold_g_1_lpi_1,
      eeprocess_sharpen_threhold_g_1_sva_2, eeprocess_sharpen_threhold_b_and_1_cse);
  assign single_loop_if_1_aelse_not_14_nl = ~ sfi_single_loop_if_1_land_lpi_1_dfm_1;
  assign eeprocess_sharpen_threhold_g_1_lpi_1_dfm_mx1w1 = MUX_v_23_2_2(23'b00000000000000000000000,
      eeprocess_sharpen_threhold_g_mux_nl, single_loop_if_1_aelse_not_14_nl);
  assign eeprocess_sharpen_threhold_r_mux_nl = MUX_v_23_2_2(eeprocess_sharpen_threhold_r_1_lpi_1,
      eeprocess_sharpen_threhold_r_1_sva_2, eeprocess_sharpen_threhold_b_and_1_cse);
  assign single_loop_if_1_aelse_not_11_nl = ~ sfi_single_loop_if_1_land_lpi_1_dfm_1;
  assign eeprocess_sharpen_threhold_r_1_lpi_1_dfm_mx1w1 = MUX_v_23_2_2(23'b00000000000000000000000,
      eeprocess_sharpen_threhold_r_mux_nl, single_loop_if_1_aelse_not_11_nl);
  assign nl_eeprocess_for_for_mul_14_nl = eeprocess_for_for_slc_eeprocess_guass_55_5_4_0_cse_sva_1
      * operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1;
  assign eeprocess_for_for_mul_14_nl = nl_eeprocess_for_for_mul_14_nl[15:0];
  assign nl_eeprocess_sharpen_threhold_b_1_sva_2 = eeprocess_sharpen_threhold_b_1_lpi_1
      + conv_u2s_16_23(eeprocess_for_for_mul_14_nl);
  assign eeprocess_sharpen_threhold_b_1_sva_2 = nl_eeprocess_sharpen_threhold_b_1_sva_2[22:0];
  assign operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1 = MUX_v_12_25_2((ee_block_0_0_lpi_1[11:0]),
      (ee_block_0_1_lpi_1[11:0]), (ee_block_0_2_lpi_1[11:0]), (ee_block_0_3_lpi_1[11:0]),
      (ee_block_0_4_lpi_1_mx0[11:0]), (ee_block_1_0_lpi_1[11:0]), (ee_block_1_1_lpi_1[11:0]),
      (ee_block_1_2_lpi_1[11:0]), (ee_block_1_3_lpi_1[11:0]), (ee_block_1_4_lpi_1_mx0[11:0]),
      (ee_block_2_0_lpi_1[11:0]), (ee_block_2_1_lpi_1[11:0]), (ee_block_2_2_lpi_1[11:0]),
      (ee_block_2_3_lpi_1[11:0]), (ee_block_2_4_lpi_1_mx0[11:0]), (ee_block_3_0_lpi_1[11:0]),
      (ee_block_3_1_lpi_1[11:0]), (ee_block_3_2_lpi_1[11:0]), (ee_block_3_3_lpi_1[11:0]),
      (ee_block_3_4_lpi_1_mx0[11:0]), (ee_block_4_0_lpi_1[11:0]), (ee_block_4_1_lpi_1[11:0]),
      (ee_block_4_2_lpi_1[11:0]), (ee_block_4_3_lpi_1[11:0]), (src_in_lpi_1_dfm_1_mx0[11:0]),
      {eeprocess_for_for_eeprocess_for_for_acc_cse_sva_1_4_2 , eeprocess_for_for_eeprocess_for_for_acc_cse_sva_1_1_0});
  assign nl_eeprocess_for_for_mul_11_nl = eeprocess_for_for_slc_eeprocess_guass_55_5_4_0_cse_sva_1
      * operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1_1;
  assign eeprocess_for_for_mul_11_nl = nl_eeprocess_for_for_mul_11_nl[15:0];
  assign nl_eeprocess_sharpen_threhold_g_1_sva_2 = eeprocess_sharpen_threhold_g_1_lpi_1
      + conv_u2s_16_23(eeprocess_for_for_mul_11_nl);
  assign eeprocess_sharpen_threhold_g_1_sva_2 = nl_eeprocess_sharpen_threhold_g_1_sva_2[22:0];
  assign operator_36_false_1_slc_ee_block_36_35_0_psp_sva_1_1 = MUX_v_12_25_2((ee_block_0_0_lpi_1[23:12]),
      (ee_block_0_1_lpi_1[23:12]), (ee_block_0_2_lpi_1[23:12]), (ee_block_0_3_lpi_1[23:12]),
      (ee_block_0_4_lpi_1_mx0[23:12]), (ee_block_1_0_lpi_1[23:12]), (ee_block_1_1_lpi_1[23:12]),
      (ee_block_1_2_lpi_1[23:12]), (ee_block_1_3_lpi_1[23:12]), (ee_block_1_4_lpi_1_mx0[23:12]),
      (ee_block_2_0_lpi_1[23:12]), (ee_block_2_1_lpi_1[23:12]), (ee_block_2_2_lpi_1[23:12]),
      (ee_block_2_3_lpi_1[23:12]), (ee_block_2_4_lpi_1_mx0[23:12]), (ee_block_3_0_lpi_1[23:12]),
      (ee_block_3_1_lpi_1[23:12]), (ee_block_3_2_lpi_1[23:12]), (ee_block_3_3_lpi_1[23:12]),
      (ee_block_3_4_lpi_1_mx0[23:12]), (ee_block_4_0_lpi_1[23:12]), (ee_block_4_1_lpi_1[23:12]),
      (ee_block_4_2_lpi_1[23:12]), (ee_block_4_3_lpi_1[23:12]), (src_in_lpi_1_dfm_1_mx0[23:12]),
      {eeprocess_for_for_eeprocess_for_for_acc_cse_sva_1_4_2 , eeprocess_for_for_eeprocess_for_for_acc_cse_sva_1_1_0});
  assign nl_eeprocess_for_for_mul_8_nl = eeprocess_for_for_slc_eeprocess_guass_55_5_4_0_cse_sva_1
      * operator_36_false_slc_ee_block_36_35_0_psp_sva_1;
  assign eeprocess_for_for_mul_8_nl = nl_eeprocess_for_for_mul_8_nl[15:0];
  assign nl_eeprocess_sharpen_threhold_r_1_sva_2 = eeprocess_sharpen_threhold_r_1_lpi_1
      + conv_u2s_16_23(eeprocess_for_for_mul_8_nl);
  assign eeprocess_sharpen_threhold_r_1_sva_2 = nl_eeprocess_sharpen_threhold_r_1_sva_2[22:0];
  assign operator_36_false_slc_ee_block_36_35_0_psp_sva_1 = MUX_v_12_25_2((ee_block_0_0_lpi_1[35:24]),
      (ee_block_0_1_lpi_1[35:24]), (ee_block_0_2_lpi_1[35:24]), (ee_block_0_3_lpi_1[35:24]),
      (ee_block_0_4_lpi_1_mx0[35:24]), (ee_block_1_0_lpi_1[35:24]), (ee_block_1_1_lpi_1[35:24]),
      (ee_block_1_2_lpi_1[35:24]), (ee_block_1_3_lpi_1[35:24]), (ee_block_1_4_lpi_1_mx0[35:24]),
      (ee_block_2_0_lpi_1[35:24]), (ee_block_2_1_lpi_1[35:24]), (ee_block_2_2_lpi_1[35:24]),
      (ee_block_2_3_lpi_1[35:24]), (ee_block_2_4_lpi_1_mx0[35:24]), (ee_block_3_0_lpi_1[35:24]),
      (ee_block_3_1_lpi_1[35:24]), (ee_block_3_2_lpi_1[35:24]), (ee_block_3_3_lpi_1[35:24]),
      (ee_block_3_4_lpi_1_mx0[35:24]), (ee_block_4_0_lpi_1[35:24]), (ee_block_4_1_lpi_1[35:24]),
      (ee_block_4_2_lpi_1[35:24]), (ee_block_4_3_lpi_1[35:24]), (src_in_lpi_1_dfm_1_mx0[35:24]),
      {eeprocess_for_for_eeprocess_for_for_acc_cse_sva_1_4_2 , eeprocess_for_for_eeprocess_for_for_acc_cse_sva_1_1_0});
  assign nl_eeprocess_for_for_acc_tmp = conv_u2u_2_3(eeprocess_for_for_acc_16_tmp[3:2])
      + eeprocess_k_1_lpi_1_dfm_1;
  assign eeprocess_for_for_acc_tmp = nl_eeprocess_for_for_acc_tmp[2:0];
  assign nl_operator_24_true_2_acc_psp_sva_1 = conv_s2s_17_18(eeprocess_mul_4_itm_20_3[17:1])
      + conv_u2s_12_18(ee_clip_return_5_lpi_1_dfm_1_1) + conv_u2s_1_18(eeprocess_mul_4_itm_20_3[0]);
  assign operator_24_true_2_acc_psp_sva_1 = nl_operator_24_true_2_acc_psp_sva_1[17:0];
  assign nl_eeprocess_mul_4_nl = $signed(eeprocess_acc_13_itm_1) * $signed(conv_u2s_8_9(ee_top_coeff));
  assign eeprocess_mul_4_nl = nl_eeprocess_mul_4_nl[20:0];
  assign eeprocess_mul_4_itm_20_3 = readslicef_21_18_3(eeprocess_mul_4_nl);
  assign operator_15_true_5_not_nl = ~ (z_out_20[14]);
  assign ee_clip_5_else_ee_clip_5_else_and_nl = MUX_v_12_2_2(12'b000000000000, (z_out_20[11:0]),
      operator_15_true_5_not_nl);
  assign ee_clip_return_5_lpi_1_dfm_1_mx0w0 = MUX_v_12_2_2(ee_clip_5_else_ee_clip_5_else_and_nl,
      12'b111111111111, (z_out_10[2]));
  assign single_loop_if_1_aelse_not_12_nl = ~ sfi_single_loop_if_1_land_lpi_1_dfm_1;
  assign lfst_exit_eeprocess_for_6_lpi_1_dfm_2_1_mx0w0 = MUX_v_2_2_2(2'b00, lfst_exit_eeprocess_for_6_lpi_1_2_1,
      single_loop_if_1_aelse_not_12_nl);
  assign lfst_exit_eeprocess_for_6_lpi_1_dfm_0_mx0w0 = lfst_exit_eeprocess_for_6_lpi_1_0
      & (~ sfi_single_loop_if_1_land_lpi_1_dfm_1);
  assign lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_2_mx0w0 = lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_2
      & lfst_exitL_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_1;
  assign lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_1_0_1 = MUX_v_2_2_2(2'b00,
      lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_1_0, lfst_exitL_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_1);
  assign nl_padding_loop_3_acc_6_nl = ({1'b1 , i_lpi_1}) + conv_u2u_13_14(~ isp_top_frameWidth)
      + 14'b00000000000001;
  assign padding_loop_3_acc_6_nl = nl_padding_loop_3_acc_6_nl[13:0];
  assign padding_loop_3_acc_6_itm_13_1 = readslicef_14_1_13(padding_loop_3_acc_6_nl);
  assign single_loop_and_207_tmp_1 = single_loop_asn_sft_lpi_1 & eeprocess_for_6_equal_tmp_17
      & (~ single_loop_asn_sft_1_lpi_1_dfm_mx0);
  assign single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0 = MUX_s_1_2_2(single_loop_if_1_asn_sft_lpi_1,
      single_loop_if_1_aelse_mux_1_itm, or_dcpl_224);
  assign eeprocess_for_6_or_18_tmp_1 = eeprocess_for_6_equal_tmp_14 | eeprocess_for_6_equal_tmp_13
      | eeprocess_for_6_equal_tmp_12 | eeprocess_for_6_equal_tmp_11 | eeprocess_for_6_equal_tmp_10
      | eeprocess_for_6_equal_tmp_9;
  assign padding_loop_2_equal_tmp_4 = lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1
      & (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_0_1);
  assign padding_loop_2_equal_tmp_5 = lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1
      & lfst_exitL_exit_padding_loop_2_lpi_1_dfm_0_1;
  assign lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1 = lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_1
      & (~ exitL_exitL_exit_padding_loop_2_sva);
  assign lfst_exitL_exit_padding_loop_2_lpi_1_dfm_0_1 = lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_0
      & (~ exitL_exitL_exit_padding_loop_2_sva);
  assign single_loop_equal_1_tmp = count_lpi_1_dfm_1 == isp_top_frameWidth;
  assign padding_loop_2_not_255_nl = ~ exitL_exitL_exit_padding_loop_2_sva;
  assign count_lpi_1_dfm_1 = MUX_v_13_2_2(13'b0000000000000, count_lpi_1, padding_loop_2_not_255_nl);
  assign nl_block_refresh_loop_in_acc_3_tmp = conv_u2u_2_3(l_lpi_1_dfm_1_0_1) + 3'b001;
  assign block_refresh_loop_in_acc_3_tmp = nl_block_refresh_loop_in_acc_3_tmp[2:0];
  assign block_refresh_loop_out_block_refresh_loop_out_block_refresh_loop_out_or_nl
      = lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_2_mx0w0 | (lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_1_0_1!=2'b00);
  assign l_lpi_1_dfm_1_0_1 = MUX_v_2_2_2(2'b00, l_lpi_1_1_0, block_refresh_loop_out_block_refresh_loop_out_block_refresh_loop_out_or_nl);
  assign lfst_exitL_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_1 = lfst_exitL_exitL_exitL_exit_eeprocess_for_6_lpi_1
      & (~ exitL_exitL_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_1);
  assign single_loop_mul_nl = conv_u2u_26_26(isp_top_frameHeight * isp_top_frameWidth);
  assign nl_single_loop_acc_4_nl = ({1'b1 , n_lpi_1_dfm_1}) + conv_u2u_26_27(~ single_loop_mul_nl)
      + 27'b000000000000000000000000001;
  assign single_loop_acc_4_nl = nl_single_loop_acc_4_nl[26:0];
  assign single_loop_acc_4_itm_26_1 = readslicef_27_1_26(single_loop_acc_4_nl);
  assign padding_loop_2_not_256_nl = ~ exitL_exitL_exit_padding_loop_2_sva;
  assign n_lpi_1_dfm_1 = MUX_v_26_2_2(26'b00000000000000000000000000, n_lpi_1, padding_loop_2_not_256_nl);
  assign padding_loop_2_not_317_nl = ~ exitL_exitL_exit_padding_loop_2_sva;
  assign i_1_lpi_1_dfm_3 = MUX_v_13_2_2(13'b0000000000000, i_1_lpi_1, padding_loop_2_not_317_nl);
  assign nl_single_loop_for_1_acc_3_tmp = conv_u2u_2_3(k_3_lpi_1_1_0) + 3'b001;
  assign single_loop_for_1_acc_3_tmp = nl_single_loop_for_1_acc_3_tmp[2:0];
  assign single_loop_and_17_rgt = eeprocess_for_6_equal_tmp_16 & (~ single_loop_asn_sft_1_lpi_1_dfm_mx0)
      & (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1);
  assign exitL_exit_eeprocess_for_6_lpi_1_dfm_1 = ~(((lfst_exit_eeprocess_for_6_lpi_1_dfm_8_2_1_1!=2'b00)
      | lfst_exit_eeprocess_for_6_lpi_1_dfm_8_0_1) & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0);
  assign eeprocess_for_6_or_547_nl = eeprocess_for_6_and_202_ssc_1 | eeprocess_for_6_and_204_ssc_1;
  assign eeprocess_for_6_mux1h_539_tmp = MUX1HOT_v_2_5_2(({1'b0 , exit_eeprocess_for_lpi_1_dfm_3}),
      lfst_exit_eeprocess_for_6_lpi_1_dfm_2_1_mx0w0, 2'b01, 2'b10, (signext_2_1(~
      (operator_3_false_12_acc_tmp[2]))), {eeprocess_for_6_or_tmp_2 , eeprocess_for_6_or_541_tmp
      , eeprocess_for_6_and_200_ssc_1 , eeprocess_for_6_or_547_nl , eeprocess_for_6_equal_tmp_9});
  assign eeprocess_for_6_or_548_nl = eeprocess_for_6_and_206_ssc_1 | eeprocess_for_6_equal_tmp_10;
  assign lfst_exit_eeprocess_for_6_lpi_1_dfm_8_2_1_1 = MUX_v_2_2_2(eeprocess_for_6_mux1h_539_tmp,
      2'b11, eeprocess_for_6_or_548_nl);
  assign eeprocess_for_6_mux1h_236_nl = MUX1HOT_s_1_4_2((~ exit_eeprocess_for_lpi_1_dfm_3),
      lfst_exit_eeprocess_for_6_lpi_1_dfm_0_mx0w0, exit_eeprocess_for_5_lpi_1_dfm_2,
      (~ (operator_3_false_12_acc_tmp[2])), {eeprocess_for_6_or_tmp_2 , eeprocess_for_6_or_541_tmp
      , eeprocess_for_6_equal_tmp_10 , eeprocess_for_6_equal_tmp_9});
  assign lfst_exit_eeprocess_for_6_lpi_1_dfm_8_0_1 = (eeprocess_for_6_mux1h_236_nl
      & (~(eeprocess_for_6_and_202_ssc_1 | eeprocess_for_6_and_206_ssc_1))) | eeprocess_for_6_and_200_ssc_1
      | eeprocess_for_6_and_204_ssc_1;
  assign exit_eeprocess_for_lpi_1_dfm_3 = ~(operator_3_false_4_acc_itm_2_1 | operator_3_false_5_acc_itm_2_1);
  assign nl_eeprocess_k_1_sva_2 = eeprocess_k_1_lpi_1_dfm_1 + 3'b001;
  assign eeprocess_k_1_sva_2 = nl_eeprocess_k_1_sva_2[2:0];
  assign single_loop_if_1_aelse_not_9_nl = ~ sfi_single_loop_if_1_land_lpi_1_dfm_1;
  assign eeprocess_k_1_lpi_1_dfm_1 = MUX_v_3_2_2(3'b000, eeprocess_k_1_lpi_1, single_loop_if_1_aelse_not_9_nl);
  assign nl_operator_3_false_5_acc_nl = eeprocess_l_1_sva_2 + 3'b011;
  assign operator_3_false_5_acc_nl = nl_operator_3_false_5_acc_nl[2:0];
  assign operator_3_false_5_acc_itm_2_1 = readslicef_3_1_2(operator_3_false_5_acc_nl);
  assign nl_eeprocess_l_1_sva_2 = eeprocess_l_1_lpi_1_dfm_2 + 3'b001;
  assign eeprocess_l_1_sva_2 = nl_eeprocess_l_1_sva_2[2:0];
  assign eeprocess_for_eeprocess_for_eeprocess_for_or_nl = (lfst_exit_eeprocess_for_6_lpi_1_dfm_2_1_mx0w0!=2'b00)
      | lfst_exit_eeprocess_for_6_lpi_1_dfm_0_mx0w0;
  assign eeprocess_l_1_lpi_1_dfm_2 = MUX_v_3_2_2(3'b000, eeprocess_l_1_lpi_1, eeprocess_for_eeprocess_for_eeprocess_for_or_nl);
  assign exit_eeprocess_for_1_lpi_1_dfm_2 = (~ operator_3_false_6_acc_itm_2_1) &
      (operator_3_false_2_acc_tmp[2]);
  assign nl_operator_3_false_4_acc_tmp = conv_u2u_2_3(eeprocess_k_3_1_0_lpi_1) +
      3'b001;
  assign operator_3_false_4_acc_tmp = nl_operator_3_false_4_acc_tmp[2:0];
  assign exit_eeprocess_for_3_lpi_1_dfm_2 = (~ operator_3_false_9_acc_itm_2_1) &
      (operator_3_false_6_acc_tmp[2]);
  assign nl_operator_3_false_8_acc_tmp = conv_u2u_2_3(eeprocess_k_5_1_0_lpi_1) +
      3'b001;
  assign operator_3_false_8_acc_tmp = nl_operator_3_false_8_acc_tmp[2:0];
  assign eeprocess_for_6_or_tmp_2 = (lfst_exit_eeprocess_for_6_lpi_1_dfm_0_mx0w0
      & (lfst_exit_eeprocess_for_6_lpi_1_dfm_2_1_mx0w0==2'b00)) | (~((lfst_exit_eeprocess_for_6_lpi_1_dfm_2_1_mx0w0!=2'b00)
      | lfst_exit_eeprocess_for_6_lpi_1_dfm_0_mx0w0));
  assign eeprocess_for_6_or_541_tmp = ((~ exit_eeprocess_for_1_lpi_1_dfm_2) & eeprocess_for_6_equal_tmp_14)
      | ((~ (operator_3_false_4_acc_tmp[2])) & eeprocess_for_6_equal_tmp_13) | ((~
      exit_eeprocess_for_3_lpi_1_dfm_2) & eeprocess_for_6_equal_tmp_12) | ((~ (operator_3_false_8_acc_tmp[2]))
      & eeprocess_for_6_equal_tmp_11);
  assign eeprocess_for_6_and_200_ssc_1 = exit_eeprocess_for_1_lpi_1_dfm_2 & eeprocess_for_6_equal_tmp_14;
  assign eeprocess_for_6_and_202_ssc_1 = (operator_3_false_4_acc_tmp[2]) & eeprocess_for_6_equal_tmp_13;
  assign eeprocess_for_6_and_204_ssc_1 = exit_eeprocess_for_3_lpi_1_dfm_2 & eeprocess_for_6_equal_tmp_12;
  assign eeprocess_for_6_equal_tmp_9 = (lfst_exit_eeprocess_for_6_lpi_1_dfm_2_1_mx0w0==2'b11)
      & lfst_exit_eeprocess_for_6_lpi_1_dfm_0_mx0w0;
  assign eeprocess_for_6_and_206_ssc_1 = (operator_3_false_8_acc_tmp[2]) & eeprocess_for_6_equal_tmp_11;
  assign eeprocess_for_6_equal_tmp_10 = (lfst_exit_eeprocess_for_6_lpi_1_dfm_2_1_mx0w0==2'b11)
      & (~ lfst_exit_eeprocess_for_6_lpi_1_dfm_0_mx0w0);
  assign eeprocess_for_6_equal_tmp_11 = (lfst_exit_eeprocess_for_6_lpi_1_dfm_2_1_mx0w0[1])
      & lfst_exit_eeprocess_for_6_lpi_1_dfm_0_mx0w0 & (~ (lfst_exit_eeprocess_for_6_lpi_1_dfm_2_1_mx0w0[0]));
  assign eeprocess_for_6_equal_tmp_12 = (lfst_exit_eeprocess_for_6_lpi_1_dfm_2_1_mx0w0[1])
      & (~((lfst_exit_eeprocess_for_6_lpi_1_dfm_2_1_mx0w0[0]) | lfst_exit_eeprocess_for_6_lpi_1_dfm_0_mx0w0));
  assign eeprocess_for_6_equal_tmp_13 = (lfst_exit_eeprocess_for_6_lpi_1_dfm_2_1_mx0w0[0])
      & lfst_exit_eeprocess_for_6_lpi_1_dfm_0_mx0w0 & (~ (lfst_exit_eeprocess_for_6_lpi_1_dfm_2_1_mx0w0[1]));
  assign eeprocess_for_6_equal_tmp_14 = (lfst_exit_eeprocess_for_6_lpi_1_dfm_2_1_mx0w0[0])
      & (~((lfst_exit_eeprocess_for_6_lpi_1_dfm_2_1_mx0w0[1]) | lfst_exit_eeprocess_for_6_lpi_1_dfm_0_mx0w0));
  assign sfi_single_loop_if_1_land_lpi_1_dfm_1 = sfi_single_loop_if_1_land_lpi_1
      | (~ lfst_exitL_exit_eeprocess_for_6_lpi_1_dfm_1);
  assign lfst_exitL_exit_eeprocess_for_6_lpi_1_dfm_1 = lfst_exitL_exit_eeprocess_for_6_lpi_1
      & (~ sfi_ee_top_eb_1_lpi_1);
  assign nl_operator_13_false_1_acc_nl = ({1'b1 , (~ (j_lpi_1[12:2]))}) + 12'b000000000001;
  assign operator_13_false_1_acc_nl = nl_operator_13_false_1_acc_nl[11:0];
  assign nl_operator_13_false_acc_nl_1 = ({1'b1 , (~ (i_1_lpi_1_dfm_3[12:2]))}) +
      12'b000000000001;
  assign operator_13_false_acc_nl_1 = nl_operator_13_false_acc_nl_1[11:0];
  assign single_loop_if_1_if_single_loop_if_1_if_and_tmp = (readslicef_12_1_11(operator_13_false_1_acc_nl))
      & (readslicef_12_1_11(operator_13_false_acc_nl_1));
  assign eeprocess_for_6_and_25_rgt = operator_3_false_5_acc_itm_2_1 & (~ eeprocess_for_6_or_18_tmp_1)
      & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0 & single_loop_and_207_tmp_1 & (~
      lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1);
  assign eeprocess_for_1_for_else_eeprocess_for_1_for_else_and_nl = MUX_v_13_2_2(13'b0000000000000,
      (z_out_19[12:0]), (z_out_19[13]));
  assign eeprocess_for_1_for_if_eeprocess_for_1_for_if_acc_1_pmx_lpi_1_dfm_12_0_mx1
      = MUX_v_13_2_2(eeprocess_for_1_for_else_eeprocess_for_1_for_else_and_nl, (z_out_19[12:0]),
      z_out_17[13]);
  assign nl_operator_3_false_6_acc_nl = eeprocess_k_2_sva_2 + 3'b011;
  assign operator_3_false_6_acc_nl = nl_operator_3_false_6_acc_nl[2:0];
  assign operator_3_false_6_acc_itm_2_1 = readslicef_3_1_2(operator_3_false_6_acc_nl);
  assign nl_eeprocess_k_2_sva_2 = eeprocess_k_2_lpi_1 + 3'b001;
  assign eeprocess_k_2_sva_2 = nl_eeprocess_k_2_sva_2[2:0];
  assign single_loop_if_1_and_45_rgt = operator_3_false_2_acc_psp_sva_mx0_2 & single_loop_if_1_and_9_m1c_1
      & single_loop_and_207_tmp_1 & (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1);
  assign eeprocess_feq_h_2_sva_1_13_mx0 = MUX_s_1_2_2((z_out_19[13]), eeprocess_feq_h_2_lpi_1_13,
      or_dcpl_254);
  assign eeprocess_feq_h_2_sva_1_12_0_mx0 = MUX_v_13_2_2(eeprocess_for_1_for_if_eeprocess_for_1_for_if_acc_1_pmx_lpi_1_dfm_12_0_mx1,
      eeprocess_feq_h_2_lpi_1_12_0, or_dcpl_254);
  assign eeprocess_for_6_and_40_rgt = eeprocess_for_6_and_cse_sva_1 & eeprocess_for_6_equal_tmp_9
      & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0 & single_loop_and_207_tmp_1 & (~
      lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1);
  assign eeprocess_for_1_for_and_cse_sva_1 = (eeprocess_l_2_1_0_lpi_1==2'b01);
  assign eeprocess_for_6_and_52_rgt = eeprocess_for_6_and_1_cse_sva_1 & eeprocess_for_6_equal_tmp_9
      & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0 & single_loop_and_207_tmp_1 & (~
      lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1);
  assign eeprocess_for_1_for_and_1_cse_sva_1 = (eeprocess_l_2_1_0_lpi_1==2'b10);
  assign eeprocess_feq_h_1_sva_1_13_mx0 = MUX_s_1_2_2((z_out_19[13]), eeprocess_feq_h_1_lpi_1_13,
      or_dcpl_255);
  assign eeprocess_feq_h_1_sva_1_12_0_mx0 = MUX_v_13_2_2(eeprocess_for_1_for_if_eeprocess_for_1_for_if_acc_1_pmx_lpi_1_dfm_12_0_mx1,
      eeprocess_feq_h_1_lpi_1_12_0, or_dcpl_255);
  assign nl_operator_3_false_2_acc_tmp = conv_u2s_2_3(eeprocess_l_2_1_0_lpi_1) +
      3'b001;
  assign operator_3_false_2_acc_tmp = nl_operator_3_false_2_acc_tmp[2:0];
  assign or_412_nl = or_dcpl_252 | or_dcpl_259 | or_dcpl_256 | or_dcpl_242;
  assign operator_3_false_2_acc_psp_sva_mx0_2 = MUX_s_1_2_2((operator_3_false_2_acc_tmp[2]),
      reg_operator_3_false_2_acc_psp_ftd, or_412_nl);
  assign operator_13_true_1_operator_13_true_1_acc_cse_10_0_sva_1 = MUX_v_11_25_2x0x1x2x3x4(eeprocess_rblock_1_0_11_1_lpi_1_mx0,
      eeprocess_rblock_1_1_11_1_lpi_1_mx0, eeprocess_rblock_1_2_11_1_lpi_1_mx0, eeprocess_rblock_1_3_11_1_lpi_1_mx0,
      eeprocess_rblock_1_4_11_1_lpi_1_mx0, eeprocess_rblock_2_0_11_1_lpi_1_mx0, eeprocess_rblock_2_1_11_1_lpi_1_mx0,
      (eeprocess_rblock_2_2_11_0_lpi_1_mx0[11:1]), eeprocess_rblock_2_3_11_1_lpi_1_mx0,
      eeprocess_rblock_2_4_11_1_lpi_1_mx0, eeprocess_rblock_3_0_11_1_lpi_1_mx0, eeprocess_rblock_3_1_11_1_lpi_1_mx0,
      eeprocess_rblock_3_2_11_1_lpi_1_mx0, eeprocess_rblock_3_3_11_1_lpi_1_mx0, eeprocess_rblock_3_4_11_1_lpi_1_mx0,
      eeprocess_rblock_4_0_11_1_lpi_1_mx0, eeprocess_rblock_4_1_11_1_lpi_1_mx0, eeprocess_rblock_4_2_11_1_lpi_1_mx0,
      eeprocess_rblock_4_3_11_1_lpi_1_mx0, eeprocess_rblock_4_4_11_1_lpi_1_mx0, {z_out_2
      , (z_out_9[1:0])});
  assign eeprocess_for_2_else_if_acc_cse_sva_mx0 = MUX_v_14_2_2(z_out_19, eeprocess_for_2_else_if_acc_cse_sva,
      eeprocess_for_2_acc_2_itm_13_1);
  assign nl_eeprocess_for_2_acc_1_psp_sva_1 = ({1'b1 , (~ operator_14_true_5_slc_eeprocess_result_v_14_13_0_tmp_11_1_sva_1)})
      + conv_u2s_11_12(eeprocess_for_2_asn_24) + 12'b000000000001;
  assign eeprocess_for_2_acc_1_psp_sva_1 = nl_eeprocess_for_2_acc_1_psp_sva_1[11:0];
  assign nl_eeprocess_for_2_acc_2_nl = conv_s2s_13_14(eeprocess_sharpen_threhold_r_1_lpi_1_dfm_mx1w1[22:10])
      - conv_s2s_12_14(eeprocess_for_2_acc_1_psp_sva_1);
  assign eeprocess_for_2_acc_2_nl = nl_eeprocess_for_2_acc_2_nl[13:0];
  assign eeprocess_for_2_acc_2_itm_13_1 = readslicef_14_1_13(eeprocess_for_2_acc_2_nl);
  assign operator_14_true_5_slc_eeprocess_result_v_14_13_0_tmp_11_1_sva_1 = MUX_v_11_4_2(ee_clip_return_11_1_lpi_1,
      eeprocess_result_v_1_11_1_lpi_1, eeprocess_result_v_2_11_1_lpi_1, eeprocess_result_v_3_11_1_lpi_1,
      operator_3_false_4_acc_tmp[1:0]);
  assign single_loop_if_1_aelse_not_10_nl = ~ sfi_single_loop_if_1_land_lpi_1_dfm_1;
  assign eeprocess_result_v_0_11_1_lpi_1_dfm_1 = MUX_v_11_2_2(11'b00000000000, eeprocess_result_v_0_11_1_lpi_1,
      single_loop_if_1_aelse_not_10_nl);
  assign single_loop_if_1_and_25_rgt = eeprocess_for_6_equal_tmp_13 & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0
      & single_loop_asn_sft_lpi_1 & single_loop_and_29_tmp_1 & (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1);
  assign nl_operator_3_false_9_acc_nl = eeprocess_k_4_sva_2 + 3'b011;
  assign operator_3_false_9_acc_nl = nl_operator_3_false_9_acc_nl[2:0];
  assign operator_3_false_9_acc_itm_2_1 = readslicef_3_1_2(operator_3_false_9_acc_nl);
  assign nl_eeprocess_k_4_sva_2 = eeprocess_k_4_lpi_1 + 3'b001;
  assign eeprocess_k_4_sva_2 = nl_eeprocess_k_4_sva_2[2:0];
  assign single_loop_if_1_and_47_rgt = operator_3_false_6_acc_psp_sva_mx0_2 & single_loop_if_1_and_11_m1c_1
      & single_loop_and_207_tmp_1 & (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1);
  assign eeprocess_feq_h_2_sva_5_13_mx0 = MUX_s_1_2_2((z_out_19[13]), eeprocess_feq_h_2_lpi_1_13,
      or_dcpl_275);
  assign eeprocess_feq_h_2_sva_5_12_0_mx0 = MUX_v_13_2_2(eeprocess_for_1_for_if_eeprocess_for_1_for_if_acc_1_pmx_lpi_1_dfm_12_0_mx1,
      eeprocess_feq_h_2_lpi_1_12_0, or_dcpl_275);
  assign eeprocess_for_3_for_and_cse_sva_1 = (eeprocess_l_3_1_0_lpi_1==2'b01);
  assign eeprocess_for_3_for_and_1_cse_sva_1 = (eeprocess_l_3_1_0_lpi_1==2'b10);
  assign eeprocess_feq_h_1_sva_5_13_mx0 = MUX_s_1_2_2((z_out_19[13]), eeprocess_feq_h_1_lpi_1_13,
      or_dcpl_276);
  assign eeprocess_feq_h_1_sva_5_12_0_mx0 = MUX_v_13_2_2(eeprocess_for_1_for_if_eeprocess_for_1_for_if_acc_1_pmx_lpi_1_dfm_12_0_mx1,
      eeprocess_feq_h_1_lpi_1_12_0, or_dcpl_276);
  assign nl_operator_3_false_6_acc_tmp = conv_u2s_2_3(eeprocess_l_3_1_0_lpi_1) +
      3'b001;
  assign operator_3_false_6_acc_tmp = nl_operator_3_false_6_acc_tmp[2:0];
  assign or_430_nl = or_dcpl_252 | or_dcpl_259 | or_dcpl_256 | or_dcpl_270;
  assign operator_3_false_6_acc_psp_sva_mx0_2 = MUX_s_1_2_2((operator_3_false_6_acc_tmp[2]),
      reg_operator_3_false_6_acc_psp_ftd, or_430_nl);
  assign operator_13_true_5_operator_13_true_5_acc_cse_10_0_sva_1 = MUX_v_11_25_2x0x1x2x3x4(eeprocess_gblock_1_0_11_1_lpi_1_mx0,
      eeprocess_gblock_1_1_11_1_lpi_1_mx0, eeprocess_gblock_1_2_11_1_lpi_1_mx0, eeprocess_gblock_1_3_11_1_lpi_1_mx0,
      eeprocess_gblock_1_4_11_1_lpi_1_mx0, eeprocess_gblock_2_0_11_1_lpi_1_mx0, eeprocess_gblock_2_1_11_1_lpi_1_mx0,
      (eeprocess_gblock_2_2_11_0_lpi_1_mx0[11:1]), eeprocess_gblock_2_3_11_1_lpi_1_mx0,
      eeprocess_gblock_2_4_11_1_lpi_1_mx0, eeprocess_gblock_3_0_11_1_lpi_1_mx0, eeprocess_gblock_3_1_11_1_lpi_1_mx0,
      eeprocess_gblock_3_2_11_1_lpi_1_mx0, eeprocess_gblock_3_3_11_1_lpi_1_mx0, eeprocess_gblock_3_4_11_1_lpi_1_mx0,
      eeprocess_gblock_4_0_11_1_lpi_1_mx0, eeprocess_gblock_4_1_11_1_lpi_1_mx0, eeprocess_gblock_4_2_11_1_lpi_1_mx0,
      eeprocess_gblock_4_3_11_1_lpi_1_mx0, eeprocess_gblock_4_4_11_1_lpi_1_mx0, {z_out_2
      , (z_out_9[1:0])});
  assign nl_operator_3_false_12_acc_tmp = conv_u2u_2_3(eeprocess_k_1_0_lpi_1) + 3'b001;
  assign operator_3_false_12_acc_tmp = nl_operator_3_false_12_acc_tmp[2:0];
  assign eeprocess_for_4_else_if_acc_cse_sva_mx0 = MUX_v_14_2_2(z_out_19, eeprocess_for_4_else_if_acc_cse_sva,
      eeprocess_for_4_acc_2_itm_13_1);
  assign nl_eeprocess_for_4_acc_1_psp_sva_1 = ({1'b1 , (~ operator_14_true_17_operator_14_true_17_acc_cse_10_0_sva_1)})
      + conv_u2s_11_12(eeprocess_for_4_asn_24) + 12'b000000000001;
  assign eeprocess_for_4_acc_1_psp_sva_1 = nl_eeprocess_for_4_acc_1_psp_sva_1[11:0];
  assign nl_eeprocess_for_4_acc_2_nl = conv_s2s_13_14(eeprocess_sharpen_threhold_g_1_lpi_1_dfm_mx1w1[22:10])
      - conv_s2s_12_14(eeprocess_for_4_acc_1_psp_sva_1);
  assign eeprocess_for_4_acc_2_nl = nl_eeprocess_for_4_acc_2_nl[13:0];
  assign eeprocess_for_4_acc_2_itm_13_1 = readslicef_14_1_13(eeprocess_for_4_acc_2_nl);
  assign operator_14_true_17_operator_14_true_17_acc_cse_10_0_sva_1 = MUX_v_11_4_2(eeprocess_result_v_4_11_1_lpi_1,
      eeprocess_result_v_1_11_1_lpi_1, eeprocess_result_v_2_11_1_lpi_1, eeprocess_result_v_3_11_1_lpi_1,
      operator_3_false_8_acc_tmp[1:0]);
  assign single_loop_if_1_and_27_rgt = eeprocess_for_6_equal_tmp_11 & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0
      & single_loop_asn_sft_lpi_1 & single_loop_and_29_tmp_1 & (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1);
  assign nl_operator_3_false_12_acc_nl = z_out_11 + 3'b011;
  assign operator_3_false_12_acc_nl = nl_operator_3_false_12_acc_nl[2:0];
  assign exit_eeprocess_for_5_lpi_1_dfm_2 = (~ (readslicef_3_1_2(operator_3_false_12_acc_nl)))
      & (operator_3_false_10_acc_tmp[2]);
  assign single_loop_if_1_and_49_rgt = operator_3_false_10_acc_psp_sva_mx0_2 & single_loop_if_1_and_13_m1c_1
      & single_loop_and_207_tmp_1 & (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1);
  assign eeprocess_feq_h_2_sva_9_13_mx0 = MUX_s_1_2_2((z_out_19[13]), eeprocess_feq_h_2_lpi_1_13,
      or_dcpl_291);
  assign eeprocess_feq_h_2_sva_9_12_0_mx0 = MUX_v_13_2_2(eeprocess_for_1_for_if_eeprocess_for_1_for_if_acc_1_pmx_lpi_1_dfm_12_0_mx1,
      eeprocess_feq_h_2_lpi_1_12_0, or_dcpl_291);
  assign eeprocess_for_5_for_and_cse_sva_1 = (eeprocess_l_1_0_lpi_1==2'b01);
  assign eeprocess_for_5_for_and_1_cse_sva_1 = (eeprocess_l_1_0_lpi_1==2'b10);
  assign eeprocess_feq_h_1_sva_9_13_mx0 = MUX_s_1_2_2((z_out_19[13]), eeprocess_feq_h_1_lpi_1_13,
      or_dcpl_292);
  assign eeprocess_feq_h_1_sva_9_12_0_mx0 = MUX_v_13_2_2(eeprocess_for_1_for_if_eeprocess_for_1_for_if_acc_1_pmx_lpi_1_dfm_12_0_mx1,
      eeprocess_feq_h_1_lpi_1_12_0, or_dcpl_292);
  assign nl_operator_3_false_10_acc_tmp = conv_u2s_2_3(eeprocess_l_1_0_lpi_1) + 3'b001;
  assign operator_3_false_10_acc_tmp = nl_operator_3_false_10_acc_tmp[2:0];
  assign or_447_nl = or_dcpl_252 | or_dcpl_259 | or_dcpl_256 | or_dcpl_293;
  assign operator_3_false_10_acc_psp_sva_mx0_2 = MUX_s_1_2_2((operator_3_false_10_acc_tmp[2]),
      reg_operator_3_false_10_acc_psp_ftd, or_447_nl);
  assign operator_13_true_9_operator_13_true_9_acc_cse_10_0_sva_1 = MUX_v_11_25_2x0x1x2x3x4(eeprocess_bblock_1_0_11_1_lpi_1_mx0,
      eeprocess_bblock_1_1_11_1_lpi_1_mx0, eeprocess_bblock_1_2_11_1_lpi_1_mx0, eeprocess_bblock_1_3_11_1_lpi_1_mx0,
      eeprocess_bblock_1_4_11_1_lpi_1_mx0, eeprocess_bblock_2_0_11_1_lpi_1_mx0, eeprocess_bblock_2_1_11_1_lpi_1_mx0,
      (eeprocess_bblock_2_2_11_0_lpi_1_mx0[11:1]), eeprocess_bblock_2_3_11_1_lpi_1_mx0,
      eeprocess_bblock_2_4_11_1_lpi_1_mx0, eeprocess_bblock_3_0_11_1_lpi_1_mx0, eeprocess_bblock_3_1_11_1_lpi_1_mx0,
      eeprocess_bblock_3_2_11_1_lpi_1_mx0, eeprocess_bblock_3_3_11_1_lpi_1_mx0, eeprocess_bblock_3_4_11_1_lpi_1_mx0,
      eeprocess_bblock_4_0_11_1_lpi_1_mx0, eeprocess_bblock_4_1_11_1_lpi_1_mx0, eeprocess_bblock_4_2_11_1_lpi_1_mx0,
      eeprocess_bblock_4_3_11_1_lpi_1_mx0, eeprocess_bblock_4_4_11_1_lpi_1_mx0, {z_out_2
      , (z_out_9[1:0])});
  assign nl_eeprocess_for_6_acc_1_psp_sva_1 = ({1'b1 , (~ operator_14_true_29_operator_14_true_29_acc_cse_10_0_sva_1)})
      + conv_u2s_11_12(eeprocess_for_6_asn_172) + 12'b000000000001;
  assign eeprocess_for_6_acc_1_psp_sva_1 = nl_eeprocess_for_6_acc_1_psp_sva_1[11:0];
  assign eeprocess_for_6_and_1_cse_sva_1 = (eeprocess_k_1_0_lpi_1==2'b10);
  assign eeprocess_for_6_and_cse_sva_1 = (eeprocess_k_1_0_lpi_1==2'b01);
  assign eeprocess_for_6_else_if_acc_cse_sva_mx0 = MUX_v_14_2_2(z_out_19, eeprocess_for_6_else_if_acc_cse_sva,
      eeprocess_for_6_acc_2_itm_13_1);
  assign eeprocess_for_6_else_if_eeprocess_for_6_else_if_or_1_nl = eeprocess_feq_h_2_lpi_1_13
      | eeprocess_for_6_and_1_cse_sva_1;
  assign eeprocess_for_6_else_else_and_8_nl = eeprocess_feq_h_2_lpi_1_13 & (~ eeprocess_for_6_and_1_cse_sva_1);
  assign eeprocess_feq_h_2_lpi_1_dfm_6_13_1 = MUX1HOT_s_1_4_2(eeprocess_for_6_else_if_eeprocess_for_6_else_if_or_1_nl,
      eeprocess_for_6_else_else_and_8_nl, eeprocess_feq_h_2_lpi_1_13, (z_out_19[13]),
      {eeprocess_for_6_and_3_ssc_1 , eeprocess_for_6_asn_166 , eeprocess_for_6_and_9_ssc_1
      , eeprocess_for_6_asn_168});
  assign or_528_tmp = (or_dcpl_355 & (~ eeprocess_for_6_and_1_cse_sva_1)) | eeprocess_for_6_and_9_ssc_1;
  assign eeprocess_for_6_and_216_nl = eeprocess_for_6_and_3_ssc_1 & (~ or_528_tmp);
  assign and_212_nl = eeprocess_for_6_asn_166 & (~ or_528_tmp);
  assign eeprocess_feq_h_2_lpi_1_dfm_6_12_0_1 = MUX1HOT_v_13_4_2((eeprocess_for_6_else_if_acc_cse_sva_mx0[12:0]),
      (signext_13_1(~ eeprocess_for_6_and_1_cse_sva_1)), (z_out_19[12:0]), eeprocess_feq_h_2_lpi_1_12_0,
      {eeprocess_for_6_and_216_nl , and_212_nl , eeprocess_for_6_asn_168 , or_528_tmp});
  assign nl_eeprocess_for_6_acc_nl = conv_u2s_11_12(eeprocess_for_6_asn_172) + conv_u2s_11_12(operator_14_true_29_operator_14_true_29_acc_cse_10_0_sva_1);
  assign eeprocess_for_6_acc_nl = nl_eeprocess_for_6_acc_nl[11:0];
  assign eeprocess_for_6_acc_itm_11_1_1 = readslicef_12_11_1(eeprocess_for_6_acc_nl);
  assign eeprocess_for_6_else_if_eeprocess_for_6_else_if_or_nl = eeprocess_feq_h_1_lpi_1_13
      | eeprocess_for_6_and_cse_sva_1;
  assign eeprocess_for_6_else_else_and_7_nl = eeprocess_feq_h_1_lpi_1_13 & (~ eeprocess_for_6_and_cse_sva_1);
  assign eeprocess_feq_h_1_lpi_1_dfm_6_13_1 = MUX1HOT_s_1_4_2(eeprocess_for_6_else_if_eeprocess_for_6_else_if_or_nl,
      eeprocess_for_6_else_else_and_7_nl, eeprocess_feq_h_1_lpi_1_13, (z_out_19[13]),
      {eeprocess_for_6_and_3_ssc_1 , eeprocess_for_6_asn_166 , eeprocess_for_6_and_5_ssc_1
      , eeprocess_for_6_asn_170});
  assign or_529_tmp = (or_dcpl_355 & (~ eeprocess_for_6_and_cse_sva_1)) | eeprocess_for_6_and_5_ssc_1;
  assign eeprocess_for_6_and_214_nl = eeprocess_for_6_and_3_ssc_1 & (~ or_529_tmp);
  assign and_210_nl = eeprocess_for_6_asn_166 & (~ or_529_tmp);
  assign eeprocess_feq_h_1_lpi_1_dfm_6_12_0_1 = MUX1HOT_v_13_4_2((eeprocess_for_6_else_if_acc_cse_sva_mx0[12:0]),
      (signext_13_1(~ eeprocess_for_6_and_cse_sva_1)), (z_out_19[12:0]), eeprocess_feq_h_1_lpi_1_12_0,
      {eeprocess_for_6_and_214_nl , and_210_nl , eeprocess_for_6_asn_170 , or_529_tmp});
  assign eeprocess_for_6_and_3_ssc_1 = (eeprocess_for_6_else_if_acc_cse_sva_mx0[13])
      & (~ eeprocess_for_6_acc_2_itm_13_1);
  assign eeprocess_for_6_and_9_ssc_1 = (~ eeprocess_for_6_and_1_cse_sva_1) & eeprocess_for_6_acc_2_itm_13_1;
  assign nl_eeprocess_for_6_acc_2_nl = conv_s2s_13_14(eeprocess_sharpen_threhold_b_1_lpi_1_dfm_mx1w1[22:10])
      - conv_s2s_12_14(eeprocess_for_6_acc_1_psp_sva_1);
  assign eeprocess_for_6_acc_2_nl = nl_eeprocess_for_6_acc_2_nl[13:0];
  assign eeprocess_for_6_acc_2_itm_13_1 = readslicef_14_1_13(eeprocess_for_6_acc_2_nl);
  assign eeprocess_for_6_and_5_ssc_1 = (~ eeprocess_for_6_and_cse_sva_1) & eeprocess_for_6_acc_2_itm_13_1;
  assign operator_14_true_29_operator_14_true_29_acc_cse_10_0_sva_1 = MUX_v_11_4_2(eeprocess_result_v_4_11_1_lpi_1,
      eeprocess_result_v_1_11_1_lpi_1, eeprocess_result_v_2_11_1_lpi_1, eeprocess_result_v_3_11_1_lpi_1,
      operator_3_false_12_acc_tmp[1:0]);
  assign single_loop_if_1_and_21_rgt = eeprocess_for_6_equal_tmp_9 & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0
      & single_loop_asn_sft_lpi_1 & single_loop_and_29_tmp_1 & (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1);
  assign exit_single_loop_lpi_1_dfm_1 = (~ single_loop_acc_4_itm_26_1) & exitL_exitL_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_1;
  assign or_465_nl = or_dcpl_21 | (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_0)
      | exitL_exitL_exit_padding_loop_2_sva;
  assign single_loop_asn_sft_1_lpi_1_dfm_mx0 = MUX_s_1_2_2(single_loop_asn_sft_1_lpi_1,
      exit_single_loop_lpi_1_dfm_1, or_465_nl);
  assign exitL_exitL_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_1 = exitL_exitL_exitL_exitL_exit_eeprocess_for_6_lpi_1
      | padding_loop_2_padding_loop_2_nor_2_cse_1;
  assign padding_loop_2_padding_loop_2_nor_2_cse_1 = ~(lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1
      | lfst_exitL_exit_padding_loop_2_lpi_1_dfm_0_1);
  assign lfst_exit_padding_loop_2_lpi_1_dfm_1_1 = lfst_exit_padding_loop_2_lpi_1_1
      & (~ sfi_ee_top_eb_lpi_1);
  assign lfst_exit_padding_loop_2_lpi_1_dfm_0_1 = lfst_exit_padding_loop_2_lpi_1_0
      & (~ sfi_ee_top_eb_lpi_1);
  assign padding_loop_2_padding_loop_2_and_11_nl = (lfst_exit_padding_loop_2_lpi_1_dfm_3_1_1
      | lfst_exit_padding_loop_2_lpi_1_dfm_3_0_1) & asn_sft_lpi_1;
  assign padding_loop_2_mux_33_nl = MUX_s_1_2_2(padding_loop_2_padding_loop_2_and_11_nl,
      lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1, padding_loop_2_equal_tmp_5);
  assign padding_loop_2_padding_loop_2_or_3_tmp = (padding_loop_2_mux_33_nl & (~
      padding_loop_2_and_29_ssc_1)) | padding_loop_2_and_30_ssc_1;
  assign padding_loop_2_padding_loop_2_or_2_tmp = (lfst_exitL_exit_padding_loop_2_lpi_1_dfm_0_1
      & (~(padding_loop_2_and_30_ssc_1 | padding_loop_2_equal_tmp_4))) | padding_loop_2_and_29_ssc_1;
  assign block_refresh_loop_in_and_43_tmp_1 = block_refresh_loop_in_and_stg_3_4_sva_1
      & (~ block_refresh_loop_in_acc_decb_sva_1_4);
  assign single_loop_if_1_and_15_m1c_1 = eeprocess_for_6_equal_tmp_8_1 & single_loop_if_1_asn_sft_lpi_1_dfm_1;
  assign block_refresh_loop_in_and_stg_3_4_sva_1_1 = block_refresh_loop_in_and_stg_2_4_sva_1
      & (~ (block_refresh_loop_in_acc_psp_mx0w0[1]));
  assign eeprocess_for_6_equal_tmp_15 = (lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_1_0_1[1])
      & (~(lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_2_mx0w0 | (lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_1_0_1[0])));
  assign padding_loop_2_padding_loop_2_nor_28_tmp_1 = ~(single_loop_asn_sft_1_lpi_1_dfm_1
      | padding_loop_2_equal_tmp_1 | padding_loop_2_equal_tmp_3_1);
  assign eeprocess_for_6_or_tmp_3 = eeprocess_for_6_eeprocess_for_6_and_cse_1 | eeprocess_for_6_eeprocess_for_6_nor_2_cse_1;
  assign eeprocess_for_6_equal_tmp_16 = (lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_1_0_1==2'b11)
      & (~ lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_2_mx0w0);
  assign eeprocess_for_6_equal_tmp_17 = lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_2_mx0w0
      & (lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_1_0_1==2'b00);
  assign eeprocess_for_6_nor_tmp_1 = ~(eeprocess_for_6_eeprocess_for_6_and_cse_1
      | eeprocess_for_6_eeprocess_for_6_nor_2_cse_1 | eeprocess_for_6_equal_tmp_15
      | eeprocess_for_6_equal_tmp_16 | eeprocess_for_6_equal_tmp_17);
  assign eeprocess_for_6_or_259_tmp_1 = eeprocess_for_6_equal_tmp_15 | eeprocess_for_6_equal_tmp_16
      | eeprocess_for_6_equal_tmp_17 | eeprocess_for_6_nor_tmp_1;
  assign eeprocess_for_6_eeprocess_for_6_eeprocess_for_6_eeprocess_for_6_single_loop_nor_nl
      = ~(exitL_exit_eeprocess_for_6_lpi_1_dfm_1 | (~ single_loop_asn_sft_lpi_1));
  assign eeprocess_for_6_mux_51_nl = MUX_s_1_2_2(lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_2_mx0w0,
      eeprocess_for_6_eeprocess_for_6_eeprocess_for_6_eeprocess_for_6_single_loop_nor_nl,
      eeprocess_for_6_equal_tmp_17);
  assign lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_5_2_1 = eeprocess_for_6_mux_51_nl
      | eeprocess_for_6_and_212_ssc_1;
  assign padding_loop_2_or_338_tmp_1 = single_loop_asn_sft_1_lpi_1_dfm_mx0 | padding_loop_2_equal_tmp_4
      | padding_loop_2_equal_tmp_5;
  assign eeprocess_for_6_and_219_nl = (~ exit_block_refresh_loop_out_lpi_1_dfm_3)
      & eeprocess_for_6_or_tmp_3;
  assign eeprocess_for_6_and_220_nl = exit_block_refresh_loop_out_lpi_1_dfm_3 & eeprocess_for_6_or_tmp_3;
  assign eeprocess_for_6_or_542_nl = ((~ (single_loop_for_acc_3_tmp[2])) & eeprocess_for_6_equal_tmp_15)
      | ((~ (single_loop_for_1_acc_3_tmp[2])) & eeprocess_for_6_equal_tmp_16) | eeprocess_for_6_nor_tmp_1;
  assign eeprocess_for_6_mux1h_537_nl = MUX1HOT_v_2_3_2(2'b01, 2'b10, lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_1_0_1,
      {eeprocess_for_6_and_219_nl , eeprocess_for_6_and_220_nl , eeprocess_for_6_or_542_nl});
  assign eeprocess_for_6_nor_11_nl = ~(eeprocess_for_6_and_212_ssc_1 | eeprocess_for_6_equal_tmp_17);
  assign eeprocess_for_6_and_218_nl = MUX_v_2_2_2(2'b00, eeprocess_for_6_mux1h_537_nl,
      eeprocess_for_6_nor_11_nl);
  assign eeprocess_for_6_and_210_nl = (single_loop_for_acc_3_tmp[2]) & eeprocess_for_6_equal_tmp_15;
  assign lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_5_1_0_1 = MUX_v_2_2_2(eeprocess_for_6_and_218_nl,
      2'b11, eeprocess_for_6_and_210_nl);
  assign padding_loop_2_or_tmp_2 = (lfst_exitL_exit_padding_loop_2_lpi_1_dfm_0_1
      & (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1)) | padding_loop_2_padding_loop_2_nor_2_cse_1;
  assign single_loop_and_13_cse_1 = eeprocess_for_6_equal_tmp_15 & (~ single_loop_asn_sft_1_lpi_1_dfm_mx0)
      & (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1);
  assign padding_loop_2_padding_loop_2_nor_cse_1 = ~(single_loop_asn_sft_1_lpi_1_dfm_mx0
      | padding_loop_2_equal_tmp_4 | padding_loop_2_equal_tmp_5);
  assign padding_loop_2_padding_loop_3_nand_nl = ~(k_0_lpi_1 & (~ padding_loop_3_acc_6_itm_13_1));
  assign padding_loop_2_mux_32_nl = MUX_s_1_2_2(padding_loop_2_padding_loop_3_nand_nl,
      lfst_exit_padding_loop_2_lpi_1_dfm_1_1, padding_loop_2_equal_tmp_6);
  assign lfst_exit_padding_loop_2_lpi_1_dfm_3_1_1 = (padding_loop_2_mux_32_nl & (~
      padding_loop_2_and_24_ssc_1)) | padding_loop_2_and_25_ssc_1;
  assign lfst_exit_padding_loop_2_lpi_1_dfm_3_0_1 = (lfst_exit_padding_loop_2_lpi_1_dfm_0_1
      & (~(padding_loop_2_and_25_ssc_1 | padding_loop_2_equal_tmp_7))) | padding_loop_2_and_24_ssc_1;
  assign padding_loop_2_equal_tmp_6 = lfst_exit_padding_loop_2_lpi_1_dfm_1_1 & lfst_exit_padding_loop_2_lpi_1_dfm_0_1;
  assign padding_loop_2_or_tmp_3 = (lfst_exit_padding_loop_2_lpi_1_dfm_0_1 & (~ lfst_exit_padding_loop_2_lpi_1_dfm_1_1))
      | (~(lfst_exit_padding_loop_2_lpi_1_dfm_1_1 | lfst_exit_padding_loop_2_lpi_1_dfm_0_1));
  assign padding_loop_2_equal_tmp_7 = lfst_exit_padding_loop_2_lpi_1_dfm_1_1 & (~
      lfst_exit_padding_loop_2_lpi_1_dfm_0_1);
  assign eeprocess_for_for_acc_psp_mx0_2_1 = MUX_v_2_2_2((eeprocess_for_for_acc_tmp[2:1]),
      reg_eeprocess_for_for_acc_psp_ftd, or_dcpl_329);
  assign eeprocess_for_for_and_20_nl = eeprocess_for_for_and_stg_2_0_sva_1 & (~ (eeprocess_for_for_acc_tmp[1]));
  assign eeprocess_for_for_and_stg_3_0_sva_mx0 = MUX_s_1_2_2(eeprocess_for_for_and_20_nl,
      eeprocess_for_for_and_stg_3_0_sva, or_dcpl_329);
  assign eeprocess_for_for_and_19_nl = eeprocess_for_for_and_stg_2_1_sva_mx0w0 &
      (~ (eeprocess_for_for_acc_tmp[1]));
  assign eeprocess_for_for_and_stg_3_1_sva_mx0 = MUX_s_1_2_2(eeprocess_for_for_and_19_nl,
      eeprocess_for_for_and_stg_3_1_sva, or_dcpl_329);
  assign eeprocess_for_for_and_stg_2_1_sva_mx0w0 = eeprocess_for_for_and_stg_1_1_sva_1
      & (~ (eeprocess_for_for_acc_tmp[0]));
  assign eeprocess_for_for_and_stg_2_1_sva_mx0 = MUX_s_1_2_2(eeprocess_for_for_and_stg_2_1_sva_mx0w0,
      eeprocess_for_for_and_stg_2_1_sva, or_dcpl_329);
  assign eeprocess_for_for_and_17_nl = eeprocess_for_for_and_stg_2_2_sva_mx0w0 &
      (~ (eeprocess_for_for_acc_tmp[1]));
  assign eeprocess_for_for_and_stg_3_2_sva_mx0 = MUX_s_1_2_2(eeprocess_for_for_and_17_nl,
      eeprocess_for_for_and_stg_3_2_sva, or_dcpl_329);
  assign eeprocess_for_for_and_stg_2_2_sva_mx0w0 = eeprocess_for_for_and_stg_1_2_sva_1
      & (~ (eeprocess_for_for_acc_tmp[0]));
  assign eeprocess_for_for_and_stg_2_2_sva_mx0 = MUX_s_1_2_2(eeprocess_for_for_and_stg_2_2_sva_mx0w0,
      eeprocess_for_for_and_stg_2_2_sva, or_dcpl_329);
  assign eeprocess_for_for_and_15_nl = eeprocess_for_for_and_stg_2_3_sva_mx0w0 &
      (~ (eeprocess_for_for_acc_tmp[1]));
  assign eeprocess_for_for_and_stg_3_3_sva_mx0 = MUX_s_1_2_2(eeprocess_for_for_and_15_nl,
      eeprocess_for_for_and_stg_3_3_sva, or_dcpl_329);
  assign eeprocess_for_for_and_stg_2_3_sva_mx0w0 = eeprocess_for_for_and_stg_1_3_sva_1
      & (~ (eeprocess_for_for_acc_tmp[0]));
  assign eeprocess_for_for_and_stg_2_3_sva_mx0 = MUX_s_1_2_2(eeprocess_for_for_and_stg_2_3_sva_mx0w0,
      eeprocess_for_for_and_stg_2_3_sva, or_dcpl_329);
  assign eeprocess_for_for_and_13_nl = eeprocess_for_for_and_stg_2_4_sva_mx0w0 &
      (~ (eeprocess_for_for_acc_tmp[1]));
  assign eeprocess_for_for_and_stg_3_4_sva_mx0 = MUX_s_1_2_2(eeprocess_for_for_and_13_nl,
      eeprocess_for_for_and_stg_3_4_sva, or_dcpl_329);
  assign eeprocess_for_for_and_stg_2_4_sva_mx0w0 = eeprocess_for_for_and_stg_1_0_sva_1
      & (eeprocess_for_for_acc_tmp[0]);
  assign eeprocess_for_for_and_stg_2_4_sva_mx0 = MUX_s_1_2_2(eeprocess_for_for_and_stg_2_4_sva_mx0w0,
      eeprocess_for_for_and_stg_2_4_sva, or_dcpl_329);
  assign eeprocess_for_for_and_11_nl = eeprocess_for_for_and_stg_2_5_sva_mx0w0 &
      (~ (eeprocess_for_for_acc_tmp[1]));
  assign eeprocess_for_for_and_stg_3_5_sva_mx0 = MUX_s_1_2_2(eeprocess_for_for_and_11_nl,
      eeprocess_for_for_and_stg_3_5_sva, or_dcpl_329);
  assign eeprocess_for_for_and_stg_2_5_sva_mx0w0 = eeprocess_for_for_and_stg_1_1_sva_1
      & (eeprocess_for_for_acc_tmp[0]);
  assign eeprocess_for_for_and_stg_2_5_sva_mx0 = MUX_s_1_2_2(eeprocess_for_for_and_stg_2_5_sva_mx0w0,
      eeprocess_for_for_and_stg_2_5_sva, or_dcpl_329);
  assign eeprocess_for_for_and_8_nl = eeprocess_for_for_and_stg_2_6_sva_mx0w0 & (~
      (eeprocess_for_for_acc_tmp[1]));
  assign eeprocess_for_for_and_stg_3_6_sva_mx0 = MUX_s_1_2_2(eeprocess_for_for_and_8_nl,
      eeprocess_for_for_and_stg_3_6_sva, or_dcpl_329);
  assign eeprocess_for_for_and_stg_2_6_sva_mx0w0 = eeprocess_for_for_and_stg_1_2_sva_1
      & (eeprocess_for_for_acc_tmp[0]);
  assign eeprocess_for_for_and_stg_2_6_sva_mx0 = MUX_s_1_2_2(eeprocess_for_for_and_stg_2_6_sva_mx0w0,
      eeprocess_for_for_and_stg_2_6_sva, or_dcpl_329);
  assign eeprocess_for_for_and_5_nl = eeprocess_for_for_and_stg_2_7_sva_mx0w0 & (~
      (eeprocess_for_for_acc_tmp[1]));
  assign eeprocess_for_for_and_stg_3_7_sva_mx0 = MUX_s_1_2_2(eeprocess_for_for_and_5_nl,
      eeprocess_for_for_and_stg_3_7_sva, or_dcpl_329);
  assign eeprocess_for_for_and_stg_2_7_sva_mx0w0 = eeprocess_for_for_and_stg_1_3_sva_1
      & (eeprocess_for_for_acc_tmp[0]);
  assign eeprocess_for_for_and_stg_2_7_sva_mx0 = MUX_s_1_2_2(eeprocess_for_for_and_stg_2_7_sva_mx0w0,
      eeprocess_for_for_and_stg_2_7_sva, or_dcpl_329);
  assign eeprocess_for_for_and_2_nl = eeprocess_for_for_and_stg_2_0_sva_1 & (eeprocess_for_for_acc_tmp[1]);
  assign eeprocess_for_for_and_stg_3_8_sva_mx0 = MUX_s_1_2_2(eeprocess_for_for_and_2_nl,
      eeprocess_for_for_and_stg_3_8_sva, or_dcpl_329);
  assign eeprocess_for_5_and_6_tmp_1 = (eeprocess_k_6_lpi_1==3'b011);
  assign eeprocess_for_3_and_6_tmp_1 = (eeprocess_k_4_lpi_1==3'b011);
  assign eeprocess_for_1_and_6_tmp_1 = (eeprocess_k_2_lpi_1==3'b011);
  assign eeprocess_for_5_and_4_tmp_1 = (eeprocess_k_6_lpi_1==3'b010);
  assign eeprocess_for_3_and_4_tmp_1 = (eeprocess_k_4_lpi_1==3'b010);
  assign eeprocess_for_1_and_4_tmp_1 = (eeprocess_k_2_lpi_1==3'b010);
  assign eeprocess_for_5_and_5_tmp_1 = (eeprocess_k_6_lpi_1==3'b001);
  assign eeprocess_for_3_and_5_tmp_1 = (eeprocess_k_4_lpi_1==3'b001);
  assign eeprocess_for_1_and_5_tmp_1 = (eeprocess_k_2_lpi_1==3'b001);
  assign or_449_nl = or_dcpl_264 | or_dcpl_297;
  assign operator_3_false_10_mux_1_nl = MUX_s_1_2_2((operator_3_false_10_acc_tmp[2]),
      reg_operator_3_false_10_acc_psp_ftd, or_449_nl);
  assign eeprocess_for_6_and_129_m1c_1 = operator_3_false_10_mux_1_nl & eeprocess_for_6_equal_tmp_10;
  assign or_433_nl = or_dcpl_264 | or_dcpl_281;
  assign operator_3_false_6_mux_1_nl = MUX_s_1_2_2((operator_3_false_6_acc_tmp[2]),
      reg_operator_3_false_6_acc_psp_ftd, or_433_nl);
  assign eeprocess_for_6_and_127_m1c_1 = operator_3_false_6_mux_1_nl & eeprocess_for_6_equal_tmp_12;
  assign or_416_nl = or_dcpl_264 | lfst_exit_eeprocess_for_6_lpi_1_0 | (lfst_exit_eeprocess_for_6_lpi_1_2_1!=2'b01);
  assign operator_3_false_2_mux_1_nl = MUX_s_1_2_2((operator_3_false_2_acc_tmp[2]),
      reg_operator_3_false_2_acc_psp_ftd, or_416_nl);
  assign eeprocess_for_6_and_125_m1c_1 = operator_3_false_2_mux_1_nl & eeprocess_for_6_equal_tmp_14;
  assign eeprocess_temp_r_not_nl = ~ (z_out_20[14]);
  assign ee_clip_else_ee_clip_else_and_nl = MUX_v_11_2_2(11'b00000000000, (z_out_20[11:1]),
      eeprocess_temp_r_not_nl);
  assign ee_clip_return_11_1_lpi_1_dfm_2 = MUX_v_11_2_2(ee_clip_else_ee_clip_else_and_nl,
      11'b11111111111, (z_out_10[2]));
  assign single_loop_if_1_and_9_m1c_1 = eeprocess_for_6_equal_tmp_14 & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0;
  assign single_loop_if_1_and_8_cse_1 = eeprocess_for_6_or_tmp_2 & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0
      & single_loop_and_207_tmp_1 & (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1);
  assign eeprocess_for_2_and_1_cse_sva_1 = (eeprocess_k_3_1_0_lpi_1==2'b10);
  assign eeprocess_for_2_and_cse_sva_1 = (eeprocess_k_3_1_0_lpi_1==2'b01);
  assign eeprocess_for_2_else_if_eeprocess_for_2_else_if_or_1_nl = eeprocess_feq_h_2_lpi_1_13
      | eeprocess_for_2_and_1_cse_sva_1;
  assign eeprocess_for_2_else_else_and_8_nl = eeprocess_feq_h_2_lpi_1_13 & (~ eeprocess_for_2_and_1_cse_sva_1);
  assign eeprocess_feq_h_2_lpi_1_dfm_2_13_1 = MUX1HOT_s_1_4_2(eeprocess_for_2_else_if_eeprocess_for_2_else_if_or_1_nl,
      eeprocess_for_2_else_else_and_8_nl, eeprocess_feq_h_2_lpi_1_13, (z_out_19[13]),
      {eeprocess_for_2_and_3_ssc_1 , eeprocess_for_2_asn_28 , eeprocess_for_2_and_9_ssc_1
      , eeprocess_for_2_asn_30});
  assign or_531_tmp = (or_dcpl_358 & (~ eeprocess_for_2_and_1_cse_sva_1)) | eeprocess_for_2_and_9_ssc_1;
  assign eeprocess_for_2_and_14_nl = eeprocess_for_2_and_3_ssc_1 & (~ or_531_tmp);
  assign and_208_nl = eeprocess_for_2_asn_28 & (~ or_531_tmp);
  assign eeprocess_feq_h_2_lpi_1_dfm_2_12_0_1 = MUX1HOT_v_13_4_2((eeprocess_for_2_else_if_acc_cse_sva_mx0[12:0]),
      (signext_13_1(~ eeprocess_for_2_and_1_cse_sva_1)), (z_out_19[12:0]), eeprocess_feq_h_2_lpi_1_12_0,
      {eeprocess_for_2_and_14_nl , and_208_nl , eeprocess_for_2_asn_30 , or_531_tmp});
  assign eeprocess_for_2_else_if_eeprocess_for_2_else_if_or_nl = eeprocess_feq_h_1_lpi_1_13
      | eeprocess_for_2_and_cse_sva_1;
  assign eeprocess_for_2_else_else_and_7_nl = eeprocess_feq_h_1_lpi_1_13 & (~ eeprocess_for_2_and_cse_sva_1);
  assign eeprocess_feq_h_1_lpi_1_dfm_2_13_1 = MUX1HOT_s_1_4_2(eeprocess_for_2_else_if_eeprocess_for_2_else_if_or_nl,
      eeprocess_for_2_else_else_and_7_nl, eeprocess_feq_h_1_lpi_1_13, (z_out_19[13]),
      {eeprocess_for_2_and_3_ssc_1 , eeprocess_for_2_asn_28 , eeprocess_for_2_and_5_ssc_1
      , eeprocess_for_2_asn_32});
  assign or_532_tmp = (or_dcpl_358 & (~ eeprocess_for_2_and_cse_sva_1)) | eeprocess_for_2_and_5_ssc_1;
  assign eeprocess_for_2_and_12_nl = eeprocess_for_2_and_3_ssc_1 & (~ or_532_tmp);
  assign and_206_nl = eeprocess_for_2_asn_28 & (~ or_532_tmp);
  assign eeprocess_feq_h_1_lpi_1_dfm_2_12_0_1 = MUX1HOT_v_13_4_2((eeprocess_for_2_else_if_acc_cse_sva_mx0[12:0]),
      (signext_13_1(~ eeprocess_for_2_and_cse_sva_1)), (z_out_19[12:0]), eeprocess_feq_h_1_lpi_1_12_0,
      {eeprocess_for_2_and_12_nl , and_206_nl , eeprocess_for_2_asn_32 , or_532_tmp});
  assign single_loop_if_1_and_11_m1c_1 = eeprocess_for_6_equal_tmp_12 & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0;
  assign single_loop_if_1_and_36_ssc_1 = eeprocess_for_6_equal_tmp_13 & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0
      & single_loop_and_207_tmp_1 & (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1);
  assign eeprocess_for_4_and_1_cse_sva_1 = (eeprocess_k_5_1_0_lpi_1==2'b10);
  assign eeprocess_for_4_and_cse_sva_1 = (eeprocess_k_5_1_0_lpi_1==2'b01);
  assign eeprocess_for_4_else_if_eeprocess_for_4_else_if_or_1_nl = eeprocess_feq_h_2_lpi_1_13
      | eeprocess_for_4_and_1_cse_sva_1;
  assign eeprocess_for_4_else_else_and_8_nl = eeprocess_feq_h_2_lpi_1_13 & (~ eeprocess_for_4_and_1_cse_sva_1);
  assign eeprocess_feq_h_2_lpi_1_dfm_4_13_1 = MUX1HOT_s_1_4_2(eeprocess_for_4_else_if_eeprocess_for_4_else_if_or_1_nl,
      eeprocess_for_4_else_else_and_8_nl, eeprocess_feq_h_2_lpi_1_13, (z_out_19[13]),
      {eeprocess_for_4_and_3_ssc_1 , eeprocess_for_4_asn_28 , eeprocess_for_4_and_9_ssc_1
      , eeprocess_for_4_asn_30});
  assign or_534_tmp = (or_dcpl_361 & (~ eeprocess_for_4_and_1_cse_sva_1)) | eeprocess_for_4_and_9_ssc_1;
  assign eeprocess_for_4_and_14_nl = eeprocess_for_4_and_3_ssc_1 & (~ or_534_tmp);
  assign and_204_nl = eeprocess_for_4_asn_28 & (~ or_534_tmp);
  assign eeprocess_feq_h_2_lpi_1_dfm_4_12_0_1 = MUX1HOT_v_13_4_2((eeprocess_for_4_else_if_acc_cse_sva_mx0[12:0]),
      (signext_13_1(~ eeprocess_for_4_and_1_cse_sva_1)), (z_out_19[12:0]), eeprocess_feq_h_2_lpi_1_12_0,
      {eeprocess_for_4_and_14_nl , and_204_nl , eeprocess_for_4_asn_30 , or_534_tmp});
  assign eeprocess_for_4_else_if_eeprocess_for_4_else_if_or_nl = eeprocess_feq_h_1_lpi_1_13
      | eeprocess_for_4_and_cse_sva_1;
  assign eeprocess_for_4_else_else_and_7_nl = eeprocess_feq_h_1_lpi_1_13 & (~ eeprocess_for_4_and_cse_sva_1);
  assign eeprocess_feq_h_1_lpi_1_dfm_4_13_1 = MUX1HOT_s_1_4_2(eeprocess_for_4_else_if_eeprocess_for_4_else_if_or_nl,
      eeprocess_for_4_else_else_and_7_nl, eeprocess_feq_h_1_lpi_1_13, (z_out_19[13]),
      {eeprocess_for_4_and_3_ssc_1 , eeprocess_for_4_asn_28 , eeprocess_for_4_and_5_ssc_1
      , eeprocess_for_4_asn_32});
  assign or_535_tmp = (or_dcpl_361 & (~ eeprocess_for_4_and_cse_sva_1)) | eeprocess_for_4_and_5_ssc_1;
  assign eeprocess_for_4_and_12_nl = eeprocess_for_4_and_3_ssc_1 & (~ or_535_tmp);
  assign and_202_nl = eeprocess_for_4_asn_28 & (~ or_535_tmp);
  assign eeprocess_feq_h_1_lpi_1_dfm_4_12_0_1 = MUX1HOT_v_13_4_2((eeprocess_for_4_else_if_acc_cse_sva_mx0[12:0]),
      (signext_13_1(~ eeprocess_for_4_and_cse_sva_1)), (z_out_19[12:0]), eeprocess_feq_h_1_lpi_1_12_0,
      {eeprocess_for_4_and_12_nl , and_202_nl , eeprocess_for_4_asn_32 , or_535_tmp});
  assign single_loop_if_1_and_13_m1c_1 = eeprocess_for_6_equal_tmp_10 & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0;
  assign single_loop_if_1_and_37_ssc_1 = eeprocess_for_6_equal_tmp_11 & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0
      & single_loop_and_207_tmp_1 & (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1);
  assign eeprocess_for_6_or_537_tmp_1 = operator_3_false_5_acc_itm_2_1 | eeprocess_for_6_equal_tmp_14
      | eeprocess_for_6_equal_tmp_13 | eeprocess_for_6_equal_tmp_12 | eeprocess_for_6_equal_tmp_11
      | eeprocess_for_6_equal_tmp_10 | eeprocess_for_6_equal_tmp_9;
  assign single_loop_and_119_tmp_1 = single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0 & single_loop_asn_sft_lpi_1;
  assign exitL_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_1 = (~(lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_5_2_1
      | (lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_5_1_0_1!=2'b00))) | single_loop_asn_sft_1_lpi_1_dfm_mx0;
  assign single_loop_and_29_tmp_1 = eeprocess_for_6_equal_tmp_17 & (~ single_loop_asn_sft_1_lpi_1_dfm_mx0);
  assign nl_operator_3_false_acc_nl = k_1_sva_2 + 3'b011;
  assign operator_3_false_acc_nl = nl_operator_3_false_acc_nl[2:0];
  assign exit_block_refresh_loop_out_lpi_1_dfm_3 = (~ (readslicef_3_1_2(operator_3_false_acc_nl)))
      & (block_refresh_loop_in_acc_3_tmp[2]);
  assign nl_k_1_sva_2 = k_1_lpi_1_dfm_1 + 3'b001;
  assign k_1_sva_2 = nl_k_1_sva_2[2:0];
  assign k_1_lpi_1_dfm_1 = MUX_v_3_2_2(3'b000, k_1_lpi_1, lfst_exitL_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_1);
  assign nl_single_loop_for_acc_3_tmp = conv_u2u_2_3(k_2_lpi_1_1_0) + 3'b001;
  assign single_loop_for_acc_3_tmp = nl_single_loop_for_acc_3_tmp[2:0];
  assign eeprocess_for_6_and_212_ssc_1 = (single_loop_for_1_acc_3_tmp[2]) & eeprocess_for_6_equal_tmp_16;
  assign eeprocess_for_6_eeprocess_for_6_and_cse_1 = (lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_1_0_1[0])
      & (~(lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_2_mx0w0 | (lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_1_0_1[1])));
  assign eeprocess_for_6_eeprocess_for_6_nor_2_cse_1 = ~(lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_2_mx0w0
      | (lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_1_0_1!=2'b00));
  assign nl_operator_3_false_1_acc_psp_4_0_sva_1 = conv_u2u_3_5({1'b1 , k_3_lpi_1_1_0})
      + conv_u2u_4_5({k_3_lpi_1_1_0 , 2'b01});
  assign operator_3_false_1_acc_psp_4_0_sva_1 = nl_operator_3_false_1_acc_psp_4_0_sva_1[4:0];
  assign eeprocess_for_3_and_stg_1_0_sva_1 = ~((eeprocess_k_4_lpi_1[1:0]!=2'b00));
  assign eeprocess_for_5_and_stg_1_0_sva_1 = ~((eeprocess_k_6_lpi_1[1:0]!=2'b00));
  assign nl_eeprocess_for_for_acc_16_tmp = conv_u2u_3_4(eeprocess_k_1_lpi_1_dfm_1)
      + conv_u2u_3_4(eeprocess_l_1_lpi_1_dfm_2);
  assign eeprocess_for_for_acc_16_tmp = nl_eeprocess_for_for_acc_16_tmp[3:0];
  assign eeprocess_for_for_and_stg_2_0_sva_1 = eeprocess_for_for_and_stg_1_0_sva_1
      & (~ (eeprocess_for_for_acc_tmp[0]));
  assign eeprocess_for_for_and_stg_1_1_sva_1 = (eeprocess_for_for_acc_16_tmp[1:0]==2'b01);
  assign eeprocess_for_for_and_stg_1_2_sva_1 = (eeprocess_for_for_acc_16_tmp[1:0]==2'b10);
  assign eeprocess_for_for_and_stg_1_3_sva_1 = (eeprocess_for_for_acc_16_tmp[1:0]==2'b11);
  assign eeprocess_for_for_and_stg_1_0_sva_1 = ~((eeprocess_for_for_acc_16_tmp[1:0]!=2'b00));
  assign eeprocess_for_2_and_3_ssc_1 = (eeprocess_for_2_else_if_acc_cse_sva_mx0[13])
      & (~ eeprocess_for_2_acc_2_itm_13_1);
  assign eeprocess_for_2_and_9_ssc_1 = (~ eeprocess_for_2_and_1_cse_sva_1) & eeprocess_for_2_acc_2_itm_13_1;
  assign eeprocess_for_2_and_5_ssc_1 = (~ eeprocess_for_2_and_cse_sva_1) & eeprocess_for_2_acc_2_itm_13_1;
  assign eeprocess_for_4_and_3_ssc_1 = (eeprocess_for_4_else_if_acc_cse_sva_mx0[13])
      & (~ eeprocess_for_4_acc_2_itm_13_1);
  assign eeprocess_for_4_and_9_ssc_1 = (~ eeprocess_for_4_and_1_cse_sva_1) & eeprocess_for_4_acc_2_itm_13_1;
  assign eeprocess_for_4_and_5_ssc_1 = (~ eeprocess_for_4_and_cse_sva_1) & eeprocess_for_4_acc_2_itm_13_1;
  assign nl_eeprocess_mul_3_nl = $signed(z_out_16) * $signed(conv_u2s_8_9(ee_top_coeff));
  assign eeprocess_mul_3_nl = nl_eeprocess_mul_3_nl[20:0];
  assign eeprocess_mul_3_itm_20_3_1 = readslicef_21_18_3(eeprocess_mul_3_nl);
  assign operator_15_true_4_not_nl = ~ (eeprocess_temp_g_lpi_1[14]);
  assign ee_clip_4_else_ee_clip_4_else_and_nl = MUX_v_12_2_2(12'b000000000000, (eeprocess_temp_g_lpi_1[11:0]),
      operator_15_true_4_not_nl);
  assign nl_operator_15_true_4_acc_nl =  -(eeprocess_temp_g_lpi_1[14:12]);
  assign operator_15_true_4_acc_nl = nl_operator_15_true_4_acc_nl[2:0];
  assign ee_clip_return_4_lpi_1_dfm_3 = MUX_v_12_2_2(ee_clip_4_else_ee_clip_4_else_and_nl,
      12'b111111111111, (readslicef_3_1_2(operator_15_true_4_acc_nl)));
  assign nl_eeprocess_mul_2_nl = $signed((z_out_17[12:0])) * $signed(conv_u2s_8_9(ee_top_coeff));
  assign eeprocess_mul_2_nl = nl_eeprocess_mul_2_nl[20:0];
  assign eeprocess_mul_2_itm_20_3_1 = readslicef_21_18_3(eeprocess_mul_2_nl);
  assign operator_15_true_3_not_nl = ~ (eeprocess_temp_r_lpi_1[14]);
  assign ee_clip_3_else_ee_clip_3_else_and_nl = MUX_v_12_2_2(12'b000000000000, (eeprocess_temp_r_lpi_1[11:0]),
      operator_15_true_3_not_nl);
  assign ee_clip_return_3_lpi_1_dfm_3 = MUX_v_12_2_2(ee_clip_3_else_ee_clip_3_else_and_nl,
      12'b111111111111, (z_out_11[2]));
  assign nl_padding_loop_1_acc_3_sdt_sva_1 = conv_u2u_13_14(isp_top_frameWidth) +
      conv_s2u_2_14({1'b1 , k_4_0_lpi_1_dfm_1});
  assign padding_loop_1_acc_3_sdt_sva_1 = nl_padding_loop_1_acc_3_sdt_sva_1[13:0];
  assign k_4_0_lpi_1_dfm_1 = k_4_0_lpi_1 & (~ sfi_ee_top_eb_lpi_1);
  assign padding_loop_2_and_26_rgt = (~ padding_loop_3_acc_6_itm_13_1) & padding_loop_2_equal_tmp_7;
  assign padding_loop_2_and_24_ssc_1 = (~ k_4_0_lpi_1_dfm_1) & padding_loop_2_or_tmp_3;
  assign padding_loop_2_and_25_ssc_1 = k_4_0_lpi_1_dfm_1 & padding_loop_2_or_tmp_3;
  assign padding_loop_2_and_153_itm_1 = single_loop_asn_sft_lpi_1 & eeprocess_for_6_equal_tmp_17
      & (~ single_loop_asn_sft_1_lpi_1_dfm_mx0) & padding_loop_2_or_tmp_2;
  assign padding_loop_2_and_60_tmp_1 = eeprocess_for_6_equal_tmp_17 & (~ single_loop_asn_sft_1_lpi_1_dfm_mx0)
      & padding_loop_2_or_tmp_2;
  assign eeprocess_for_6_and_126_cse_1 = (~ operator_3_false_2_acc_psp_sva_mx0_2)
      & eeprocess_for_6_equal_tmp_14;
  assign eeprocess_for_6_and_128_cse_1 = (~ operator_3_false_6_acc_psp_sva_mx0_2)
      & eeprocess_for_6_equal_tmp_12;
  assign eeprocess_for_6_and_130_cse_1 = (~ operator_3_false_10_acc_psp_sva_mx0_2)
      & eeprocess_for_6_equal_tmp_10;
  assign eeprocess_for_6_eeprocess_for_6_nor_8_cse_1 = ~(eeprocess_for_6_equal_tmp_14
      | eeprocess_for_6_equal_tmp_13 | eeprocess_for_6_equal_tmp_12 | eeprocess_for_6_equal_tmp_11
      | eeprocess_for_6_equal_tmp_10 | eeprocess_for_6_equal_tmp_9);
  assign padding_loop_2_and_29_ssc_1 = (~ exit_single_loop_lpi_1_dfm_1) & padding_loop_2_or_tmp_2;
  assign padding_loop_2_and_30_ssc_1 = exit_single_loop_lpi_1_dfm_1 & padding_loop_2_or_tmp_2;
  assign block_refresh_loop_in_and_stg_3_0_sva_1 = block_refresh_loop_in_and_stg_2_0_sva_1
      & (~ (block_refresh_loop_in_acc_psp_mx0w0[1]));
  assign block_refresh_loop_in_and_stg_2_0_sva_1 = block_refresh_loop_in_and_stg_1_0_sva_1
      & (~ (block_refresh_loop_in_acc_psp_mx0w0[0]));
  assign nl_block_refresh_loop_in_acc_psp_mx0w0 = conv_u2u_2_3(operator_3_false_acc_1_cse_1[3:2])
      + k_1_lpi_1_dfm_1;
  assign block_refresh_loop_in_acc_psp_mx0w0 = nl_block_refresh_loop_in_acc_psp_mx0w0[2:0];
  assign mux_158_nl = MUX_s_1_2_2(mux_65_cse, mux_tmp_119, lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_1_0[1]);
  assign nor_19_nl = ~(lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_1 | (~ mux_158_nl));
  assign mux_159_nl = MUX_s_1_2_2(nor_19_nl, single_loop_acc_4_itm_26_1, exitL_exitL_exit_padding_loop_2_sva);
  assign mux_160_nl = MUX_s_1_2_2(mux_159_nl, mux_tmp_120, lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_2);
  assign block_refresh_loop_in_acc_psp_mx0_2_1 = MUX_v_2_2_2(reg_block_refresh_loop_in_acc_psp_ftd,
      (block_refresh_loop_in_acc_psp_mx0w0[2:1]), mux_160_nl);
  assign block_refresh_loop_in_and_stg_3_1_sva_1 = block_refresh_loop_in_and_stg_1_1_sva_1
      & (block_refresh_loop_in_acc_psp_mx0w0[1:0]==2'b00);
  assign block_refresh_loop_in_and_stg_3_2_sva_1 = block_refresh_loop_in_and_stg_2_2_sva_1
      & (~ (block_refresh_loop_in_acc_psp_mx0w0[1]));
  assign block_refresh_loop_in_and_stg_2_2_sva_1 = block_refresh_loop_in_and_stg_1_2_sva_1
      & (~ (block_refresh_loop_in_acc_psp_mx0w0[0]));
  assign block_refresh_loop_in_and_stg_2_3_sva_1 = block_refresh_loop_in_and_stg_1_3_sva_1
      & (~ (block_refresh_loop_in_acc_psp_mx0w0[0]));
  assign block_refresh_loop_in_and_stg_2_4_sva_1 = block_refresh_loop_in_and_stg_1_0_sva_1
      & (block_refresh_loop_in_acc_psp_mx0w0[0]);
  assign block_refresh_loop_in_and_stg_3_5_sva_1 = block_refresh_loop_in_and_stg_2_5_sva_1
      & (~ (block_refresh_loop_in_acc_psp_mx0w0[1]));
  assign block_refresh_loop_in_and_stg_2_5_sva_1 = block_refresh_loop_in_and_stg_1_1_sva_1
      & (block_refresh_loop_in_acc_psp_mx0w0[0]);
  assign block_refresh_loop_in_and_stg_3_6_sva_1 = block_refresh_loop_in_and_stg_1_2_sva_1
      & (block_refresh_loop_in_acc_psp_mx0w0[1:0]==2'b01);
  assign block_refresh_loop_in_and_stg_3_7_sva_1 = block_refresh_loop_in_and_stg_2_7_sva_1
      & (~ (block_refresh_loop_in_acc_psp_mx0w0[1]));
  assign block_refresh_loop_in_and_stg_2_7_sva_1 = block_refresh_loop_in_and_stg_1_3_sva_1
      & (block_refresh_loop_in_acc_psp_mx0w0[0]);
  assign eeprocess_for_6_eeprocess_for_6_nor_cse_1 = ~(eeprocess_for_6_equal_tmp_15
      | eeprocess_for_6_equal_tmp_16 | eeprocess_for_6_equal_tmp_17 | eeprocess_for_6_nor_tmp_1);
  assign block_refresh_loop_in_and_stg_1_1_sva_1 = (operator_3_false_acc_1_cse_1[1:0]==2'b01);
  assign block_refresh_loop_in_and_stg_1_2_sva_1 = (operator_3_false_acc_1_cse_1[1:0]==2'b10);
  assign block_refresh_loop_in_and_stg_1_3_sva_1 = (operator_3_false_acc_1_cse_1[1:0]==2'b11);
  assign block_refresh_loop_in_and_stg_1_0_sva_1 = ~((operator_3_false_acc_1_cse_1[1:0]!=2'b00));
  assign nl_operator_3_false_acc_1_cse_1 = conv_u2u_3_4(k_1_lpi_1_dfm_1) + conv_u2u_2_4(l_lpi_1_dfm_1_0_1);
  assign operator_3_false_acc_1_cse_1 = nl_operator_3_false_acc_1_cse_1[3:0];
  assign eeprocess_for_1_for_asn_9 = MUX_v_11_20_2(eeprocess_rblock_0_0_11_1_lpi_1_mx0,
      eeprocess_rblock_0_1_11_1_lpi_1_mx0, eeprocess_rblock_0_2_11_1_lpi_1_mx0, eeprocess_rblock_0_3_11_1_lpi_1_mx0,
      eeprocess_rblock_0_4_11_1_lpi_1_mx0, eeprocess_rblock_1_0_11_1_lpi_1_mx0, eeprocess_rblock_1_1_11_1_lpi_1_mx0,
      eeprocess_rblock_1_2_11_1_lpi_1_mx0, eeprocess_rblock_1_3_11_1_lpi_1_mx0, eeprocess_rblock_1_4_11_1_lpi_1_mx0,
      eeprocess_rblock_2_0_11_1_lpi_1_mx0, eeprocess_rblock_2_1_11_1_lpi_1_mx0, (eeprocess_rblock_2_2_11_0_lpi_1_mx0[11:1]),
      eeprocess_rblock_2_3_11_1_lpi_1_mx0, eeprocess_rblock_2_4_11_1_lpi_1_mx0, eeprocess_rblock_3_0_11_1_lpi_1_mx0,
      eeprocess_rblock_3_1_11_1_lpi_1_mx0, eeprocess_rblock_3_2_11_1_lpi_1_mx0, eeprocess_rblock_3_3_11_1_lpi_1_mx0,
      eeprocess_rblock_3_4_11_1_lpi_1_mx0, {z_out_1 , (z_out_3[1:0])});
  assign eeprocess_for_2_asn_24 = MUX_v_11_4_2(eeprocess_result_v_0_11_1_lpi_1_dfm_1,
      eeprocess_result_v_1_11_1_lpi_1, eeprocess_result_v_2_11_1_lpi_1, eeprocess_result_v_3_11_1_lpi_1,
      eeprocess_k_3_1_0_lpi_1);
  assign eeprocess_for_3_for_asn_9 = MUX_v_11_20_2(eeprocess_gblock_0_0_11_1_lpi_1_mx0,
      eeprocess_gblock_0_1_11_1_lpi_1_mx0, eeprocess_gblock_0_2_11_1_lpi_1_mx0, eeprocess_gblock_0_3_11_1_lpi_1_mx0,
      eeprocess_gblock_0_4_11_1_lpi_1_mx0, eeprocess_gblock_1_0_11_1_lpi_1_mx0, eeprocess_gblock_1_1_11_1_lpi_1_mx0,
      eeprocess_gblock_1_2_11_1_lpi_1_mx0, eeprocess_gblock_1_3_11_1_lpi_1_mx0, eeprocess_gblock_1_4_11_1_lpi_1_mx0,
      eeprocess_gblock_2_0_11_1_lpi_1_mx0, eeprocess_gblock_2_1_11_1_lpi_1_mx0, (eeprocess_gblock_2_2_11_0_lpi_1_mx0[11:1]),
      eeprocess_gblock_2_3_11_1_lpi_1_mx0, eeprocess_gblock_2_4_11_1_lpi_1_mx0, eeprocess_gblock_3_0_11_1_lpi_1_mx0,
      eeprocess_gblock_3_1_11_1_lpi_1_mx0, eeprocess_gblock_3_2_11_1_lpi_1_mx0, eeprocess_gblock_3_3_11_1_lpi_1_mx0,
      eeprocess_gblock_3_4_11_1_lpi_1_mx0, {z_out_1 , (z_out_3[1:0])});
  assign eeprocess_for_4_asn_24 = MUX_v_11_4_2(eeprocess_result_v_0_11_1_lpi_1_dfm_1,
      eeprocess_result_v_1_11_1_lpi_1, eeprocess_result_v_2_11_1_lpi_1, eeprocess_result_v_3_11_1_lpi_1,
      eeprocess_k_5_1_0_lpi_1);
  assign eeprocess_for_5_for_asn_9 = MUX_v_11_20_2(eeprocess_bblock_0_0_11_1_lpi_1_mx0,
      eeprocess_bblock_0_1_11_1_lpi_1_mx0, eeprocess_bblock_0_2_11_1_lpi_1_mx0, eeprocess_bblock_0_3_11_1_lpi_1_mx0,
      eeprocess_bblock_0_4_11_1_lpi_1_mx0, eeprocess_bblock_1_0_11_1_lpi_1_mx0, eeprocess_bblock_1_1_11_1_lpi_1_mx0,
      eeprocess_bblock_1_2_11_1_lpi_1_mx0, eeprocess_bblock_1_3_11_1_lpi_1_mx0, eeprocess_bblock_1_4_11_1_lpi_1_mx0,
      eeprocess_bblock_2_0_11_1_lpi_1_mx0, eeprocess_bblock_2_1_11_1_lpi_1_mx0, (eeprocess_bblock_2_2_11_0_lpi_1_mx0[11:1]),
      eeprocess_bblock_2_3_11_1_lpi_1_mx0, eeprocess_bblock_2_4_11_1_lpi_1_mx0, eeprocess_bblock_3_0_11_1_lpi_1_mx0,
      eeprocess_bblock_3_1_11_1_lpi_1_mx0, eeprocess_bblock_3_2_11_1_lpi_1_mx0, eeprocess_bblock_3_3_11_1_lpi_1_mx0,
      eeprocess_bblock_3_4_11_1_lpi_1_mx0, {z_out_1 , (z_out_3[1:0])});
  assign eeprocess_for_6_asn_166 = ~((eeprocess_for_6_else_if_acc_cse_sva_mx0[13])
      | eeprocess_for_6_acc_2_itm_13_1);
  assign eeprocess_for_6_asn_168 = eeprocess_for_6_and_1_cse_sva_1 & eeprocess_for_6_acc_2_itm_13_1;
  assign eeprocess_for_6_asn_170 = eeprocess_for_6_and_cse_sva_1 & eeprocess_for_6_acc_2_itm_13_1;
  assign eeprocess_for_6_asn_172 = MUX_v_11_4_2(eeprocess_result_v_0_11_1_lpi_1_dfm_1,
      eeprocess_result_v_1_11_1_lpi_1, eeprocess_result_v_2_11_1_lpi_1, eeprocess_result_v_3_11_1_lpi_1,
      eeprocess_k_1_0_lpi_1);
  assign single_loop_if_1_asn_14 = ((~ eeprocess_for_6_equal_tmp_8_1) & single_loop_if_1_asn_sft_lpi_1_dfm_1)
      | ((~ operator_3_false_12_acc_cse_sva_1_2) & single_loop_if_1_and_15_m1c_1);
  assign single_loop_if_1_asn_16 = operator_3_false_12_acc_cse_sva_1_2 & single_loop_if_1_and_15_m1c_1;
  assign eeprocess_for_2_asn_28 = ~((eeprocess_for_2_else_if_acc_cse_sva_mx0[13])
      | eeprocess_for_2_acc_2_itm_13_1);
  assign eeprocess_for_2_asn_30 = eeprocess_for_2_and_1_cse_sva_1 & eeprocess_for_2_acc_2_itm_13_1;
  assign eeprocess_for_2_asn_32 = eeprocess_for_2_and_cse_sva_1 & eeprocess_for_2_acc_2_itm_13_1;
  assign eeprocess_for_4_asn_28 = ~((eeprocess_for_4_else_if_acc_cse_sva_mx0[13])
      | eeprocess_for_4_acc_2_itm_13_1);
  assign eeprocess_for_4_asn_30 = eeprocess_for_4_and_1_cse_sva_1 & eeprocess_for_4_acc_2_itm_13_1;
  assign eeprocess_for_4_asn_32 = eeprocess_for_4_and_cse_sva_1 & eeprocess_for_4_acc_2_itm_13_1;
  assign padding_loop_2_asn_376 = eeprocess_for_1_for_and_1_cse_sva_1 & eeprocess_for_6_equal_tmp_14
      & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0 & single_loop_and_207_tmp_1 & (~
      lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1);
  assign padding_loop_2_asn_378 = eeprocess_for_3_for_and_1_cse_sva_1 & eeprocess_for_6_equal_tmp_12
      & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0 & single_loop_and_207_tmp_1 & (~
      lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1);
  assign padding_loop_2_asn_380 = eeprocess_for_5_for_and_1_cse_sva_1 & eeprocess_for_6_equal_tmp_10
      & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0 & single_loop_and_207_tmp_1 & (~
      lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1);
  assign padding_loop_2_asn_382 = eeprocess_for_1_for_and_cse_sva_1 & eeprocess_for_6_equal_tmp_14
      & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0 & single_loop_and_207_tmp_1 & (~
      lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1);
  assign padding_loop_2_asn_384 = eeprocess_for_3_for_and_cse_sva_1 & eeprocess_for_6_equal_tmp_12
      & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0 & single_loop_and_207_tmp_1 & (~
      lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1);
  assign padding_loop_2_asn_386 = eeprocess_for_5_for_and_cse_sva_1 & eeprocess_for_6_equal_tmp_10
      & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0 & single_loop_and_207_tmp_1 & (~
      lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1);
  assign padding_loop_2_asn_390 = eeprocess_for_6_equal_tmp_9 & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0
      & single_loop_and_207_tmp_1 & (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1);
  assign single_loop_if_1_and_72 = (~ eeprocess_for_6_or_13_tmp_1) & single_loop_if_1_asn_sft_lpi_1_dfm_1
      & single_loop_and_213_tmp_1 & (~(padding_loop_2_equal_tmp_1 | padding_loop_2_equal_tmp_3_1));
  assign or_dcpl_21 = (~ lfst_exitL_exitL_exitL_exit_eeprocess_for_6_lpi_1) | exitL_exitL_exitL_exitL_exit_eeprocess_for_6_lpi_1;
  assign mux_21_nl = MUX_s_1_2_2(single_loop_if_1_land_lpi_1, single_loop_if_1_asn_sft_lpi_1,
      lfst_exitL_exit_eeprocess_for_6_lpi_1);
  assign mux_22_cse = MUX_s_1_2_2(mux_21_nl, single_loop_if_1_if_single_loop_if_1_if_and_tmp,
      sfi_ee_top_eb_1_lpi_1);
  assign nor_55_nl = ~(lfst_exitL_exit_eeprocess_for_6_lpi_1 | (~ single_loop_if_1_land_lpi_1));
  assign mux_23_cse = MUX_s_1_2_2(nor_55_nl, single_loop_if_1_if_single_loop_if_1_if_and_tmp,
      sfi_ee_top_eb_1_lpi_1);
  assign or_153_nl = (~ exitL_exitL_exitL_exitL_exit_eeprocess_for_6_lpi_1) | single_loop_acc_4_itm_26_1;
  assign mux_63_nl = MUX_s_1_2_2((~ lfst_exitL_exitL_exitL_exit_eeprocess_for_6_lpi_1),
      single_loop_acc_4_itm_26_1, exitL_exitL_exitL_exitL_exit_eeprocess_for_6_lpi_1);
  assign mux_64_nl = MUX_s_1_2_2(or_153_nl, mux_63_nl, single_loop_asn_sft_1_lpi_1);
  assign mux_65_cse = MUX_s_1_2_2(single_loop_acc_4_itm_26_1, mux_64_nl, lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_0);
  assign or_dcpl_100 = or_dcpl_21 | single_loop_asn_sft_1_lpi_1;
  assign or_214_cse = operator_3_false_4_acc_itm_2_1 | operator_3_false_5_acc_itm_2_1;
  assign or_tmp_115 = exitL_exitL_exit_padding_loop_2_sva | (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_1)
      | lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_0;
  assign and_dcpl_91 = main_stage_0_3 & (~ lfst_exit_padding_loop_2_lpi_1_dfm_st_2_1);
  assign and_dcpl_94 = and_dcpl_91 & lfst_exit_padding_loop_2_lpi_1_dfm_st_2_0 &
      (lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_st_2_1_0==2'b00) & padding_loop_1_padding_loop_1_and_1_itm_1
      & padding_loop_1_padding_loop_1_and_2_itm_1 & (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_st_2_1)
      & asn_sft_lpi_1_st_2;
  assign and_dcpl_99 = and_dcpl_91 & lfst_exit_padding_loop_2_lpi_1_dfm_st_2_0 &
      (lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_st_2_1_0==2'b00) & (~ padding_loop_1_padding_loop_1_and_1_itm_1)
      & (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_st_2_1);
  assign and_dcpl_104 = (~((~((~ lfst_exit_padding_loop_2_lpi_1_dfm_st_2_0) & padding_loop_3_slc_13_svs_st_2))
      & lfst_exit_padding_loop_2_lpi_1_dfm_st_2_1)) & main_stage_0_3 & (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_st_2_0)
      & lfst_exitL_exit_padding_loop_2_lpi_1_dfm_st_2_1 & asn_sft_lpi_1_st_2;
  assign and_dcpl_105 = (~ exitL_exit_eeprocess_for_6_lpi_1_dfm_st_1) & lfst_exitL_exit_padding_loop_2_lpi_1_dfm_st_1_1;
  assign and_dcpl_106 = exitL_exit_eeprocess_for_6_lpi_1_dfm_st_1 & lfst_exitL_exit_padding_loop_2_lpi_1_dfm_st_1_1;
  assign and_dcpl_107 = ~((lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_st_1_1_0[1])
      | lfst_exitL_exit_padding_loop_2_lpi_1_dfm_st_1_1);
  assign and_dcpl_108 = (lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_st_1_1_0[1])
      & (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_st_1_1);
  assign or_dcpl_143 = (~ main_stage_0_2) | (lfst_exit_eeprocess_for_6_lpi_1_dfm_st_1_2_1[1]);
  assign or_288_nl = lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_st_1_2 | (lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_st_1_1_0!=2'b10)
      | single_loop_asn_sft_1_lpi_1_dfm_1;
  assign or_12_nl = lfst_exitL_exit_padding_loop_2_lpi_1_dfm_st_1_0 | (~ asn_sft_lpi_1);
  assign or_11_nl = (~ padding_loop_3_slc_13_svs_st_1) | eeprocess_for_6_equal_tmp_8_1
      | lfst_exitL_exit_padding_loop_2_lpi_1_dfm_st_1_0 | (~ asn_sft_lpi_1);
  assign mux_11_nl = MUX_s_1_2_2(or_12_nl, or_11_nl, exitL_exit_eeprocess_for_6_lpi_1_dfm_st_1);
  assign mux_tmp_118 = MUX_s_1_2_2(or_288_nl, mux_11_nl, lfst_exitL_exit_padding_loop_2_lpi_1_dfm_st_1_1);
  assign or_dcpl_148 = ~(main_stage_0_2 & (lfst_exit_eeprocess_for_6_lpi_1_dfm_st_1_2_1[1]));
  assign or_dcpl_154 = lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_st_1_2 | lfst_exitL_exit_padding_loop_2_lpi_1_dfm_st_1_1;
  assign or_dcpl_157 = (~ main_stage_0_2) | single_loop_asn_sft_1_lpi_1_dfm_1;
  assign or_dcpl_158 = or_dcpl_157 | (lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_st_1_1_0!=2'b11);
  assign or_dcpl_169 = ~(main_stage_0_2 & padding_loop_2_and_254_itm_1);
  assign or_dcpl_170 = ~(main_stage_0_2 & padding_loop_2_and_253_itm_1);
  assign or_dcpl_171 = ~(main_stage_0_2 & padding_loop_2_and_252_itm_1);
  assign or_dcpl_172 = ~(main_stage_0_2 & padding_loop_2_and_251_itm_1);
  assign or_dcpl_173 = ~(main_stage_0_2 & padding_loop_2_and_250_itm_1);
  assign or_dcpl_174 = ~(main_stage_0_2 & padding_loop_2_and_249_itm_1);
  assign or_dcpl_175 = ~(main_stage_0_2 & padding_loop_2_and_248_itm_1);
  assign or_dcpl_176 = ~(main_stage_0_2 & padding_loop_2_and_247_itm_1);
  assign or_dcpl_177 = ~(main_stage_0_2 & padding_loop_2_and_246_itm_1);
  assign or_dcpl_178 = ~(main_stage_0_2 & padding_loop_2_and_245_itm_1);
  assign or_dcpl_179 = ~(main_stage_0_2 & padding_loop_2_and_244_itm_1);
  assign or_dcpl_180 = ~(main_stage_0_2 & padding_loop_2_and_243_itm_1);
  assign or_dcpl_181 = ~(main_stage_0_2 & padding_loop_2_and_242_itm_1);
  assign or_dcpl_182 = ~(main_stage_0_2 & padding_loop_2_and_241_itm_1);
  assign or_dcpl_183 = ~(main_stage_0_2 & padding_loop_2_and_240_itm_1);
  assign or_dcpl_184 = ~(main_stage_0_2 & padding_loop_2_and_239_itm_1);
  assign or_dcpl_185 = ~(main_stage_0_2 & padding_loop_2_and_238_itm_1);
  assign or_dcpl_186 = ~(main_stage_0_2 & padding_loop_2_and_237_itm_1);
  assign or_dcpl_187 = ~(main_stage_0_2 & padding_loop_2_and_236_itm_1);
  assign or_dcpl_188 = ~(main_stage_0_2 & padding_loop_2_and_235_itm_1);
  assign or_dcpl_189 = ~(main_stage_0_2 & padding_loop_2_and_234_itm_1);
  assign or_dcpl_190 = ~(main_stage_0_2 & padding_loop_2_and_233_itm_1);
  assign or_dcpl_191 = ~(main_stage_0_2 & padding_loop_2_and_232_itm_1);
  assign or_dcpl_192 = ~(main_stage_0_2 & padding_loop_2_and_231_itm_1);
  assign or_dcpl_193 = ~(main_stage_0_2 & padding_loop_2_and_180_itm_1);
  assign and_dcpl_111 = ~((lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_1_0!=2'b00)
      | lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_1);
  assign or_dcpl_209 = exitL_exitL_exit_padding_loop_2_sva | (~ lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_2);
  assign and_dcpl_113 = lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_0 & lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_2;
  assign and_dcpl_115 = lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_0 & (lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_1_0[0])
      & (~ lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_2);
  assign and_dcpl_116 = ~((~((~ lfst_exit_padding_loop_2_lpi_1_1) | sfi_ee_top_eb_lpi_1))
      | lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_0);
  assign and_dcpl_118 = (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_0) & lfst_exit_padding_loop_2_lpi_1_1
      & (~ sfi_ee_top_eb_lpi_1);
  assign and_dcpl_120 = lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_0 & (~ (lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_1_0[0]))
      & (~ lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_2);
  assign or_dcpl_224 = (~ lfst_exitL_exit_eeprocess_for_6_lpi_1) | sfi_ee_top_eb_1_lpi_1;
  assign or_369_nl = (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_0) | exitL_exitL_exitL_exitL_exit_eeprocess_for_6_lpi_1;
  assign mux_tmp_119 = MUX_s_1_2_2((~ lfst_exitL_exitL_exitL_exit_eeprocess_for_6_lpi_1),
      single_loop_acc_4_itm_26_1, or_369_nl);
  assign nor_23_nl = ~(lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_1 | (~ mux_tmp_119));
  assign mux_tmp_120 = MUX_s_1_2_2(nor_23_nl, single_loop_acc_4_itm_26_1, exitL_exitL_exit_padding_loop_2_sva);
  assign or_dcpl_226 = exitL_exitL_exit_padding_loop_2_sva | (~ single_loop_asn_sft_lpi_1);
  assign or_dcpl_228 = (lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_1_0[0]) | lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_1;
  assign or_dcpl_236 = (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_0) | (lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_1_0[1]);
  assign or_dcpl_242 = (lfst_exit_eeprocess_for_6_lpi_1_2_1!=2'b01);
  assign or_dcpl_246 = ~(single_loop_if_1_asn_sft_lpi_1 & lfst_exitL_exit_eeprocess_for_6_lpi_1);
  assign or_dcpl_248 = or_dcpl_246 | sfi_ee_top_eb_1_lpi_1 | sfi_single_loop_if_1_land_lpi_1
      | (~ lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_2);
  assign or_dcpl_251 = or_dcpl_100 | or_dcpl_236;
  assign or_dcpl_252 = or_dcpl_251 | or_dcpl_228 | or_dcpl_226;
  assign or_dcpl_254 = (eeprocess_l_2_1_0_lpi_1!=2'b10);
  assign or_dcpl_255 = (eeprocess_l_2_1_0_lpi_1!=2'b01);
  assign or_dcpl_256 = (~ lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_2) | lfst_exit_eeprocess_for_6_lpi_1_0;
  assign or_dcpl_259 = or_dcpl_246 | sfi_single_loop_if_1_land_lpi_1 | sfi_ee_top_eb_1_lpi_1;
  assign or_dcpl_264 = or_dcpl_224 | sfi_single_loop_if_1_land_lpi_1;
  assign or_dcpl_266 = ~(lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_2 & lfst_exit_eeprocess_for_6_lpi_1_0);
  assign or_dcpl_270 = (lfst_exit_eeprocess_for_6_lpi_1_2_1!=2'b10);
  assign or_dcpl_275 = (eeprocess_l_3_1_0_lpi_1!=2'b10);
  assign or_dcpl_276 = (eeprocess_l_3_1_0_lpi_1!=2'b01);
  assign or_dcpl_280 = lfst_exit_eeprocess_for_6_lpi_1_0 | (~ (lfst_exit_eeprocess_for_6_lpi_1_2_1[1]));
  assign or_dcpl_281 = or_dcpl_280 | (lfst_exit_eeprocess_for_6_lpi_1_2_1[0]);
  assign or_dcpl_291 = (eeprocess_l_1_0_lpi_1!=2'b10);
  assign or_dcpl_292 = (eeprocess_l_1_0_lpi_1!=2'b01);
  assign or_dcpl_293 = ~((lfst_exit_eeprocess_for_6_lpi_1_2_1==2'b11));
  assign or_dcpl_297 = or_dcpl_280 | (~ (lfst_exit_eeprocess_for_6_lpi_1_2_1[0]));
  assign or_dcpl_315 = (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_1) | exitL_exitL_exit_padding_loop_2_sva;
  assign and_tmp_16 = or_214_cse & mux_22_cse;
  assign nor_20_nl = ~(sfi_ee_top_eb_1_lpi_1 | or_dcpl_246);
  assign mux_tmp_131 = MUX_s_1_2_2(nor_20_nl, mux_22_cse, or_214_cse);
  assign and_tmp_17 = or_214_cse & mux_23_cse;
  assign or_42_nl = (~((lfst_exit_eeprocess_for_6_lpi_1_2_1!=2'b00))) | sfi_single_loop_if_1_land_lpi_1;
  assign mux_24_nl = MUX_s_1_2_2(mux_23_cse, mux_22_cse, or_42_nl);
  assign or_dcpl_329 = (~ mux_24_nl) | (~ lfst_exitL_exitL_exitL_exit_eeprocess_for_6_lpi_1)
      | exitL_exitL_exitL_exitL_exit_eeprocess_for_6_lpi_1 | single_loop_asn_sft_1_lpi_1
      | (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_0) | or_167_cse | lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_1
      | exitL_exitL_exit_padding_loop_2_sva | (~(single_loop_asn_sft_lpi_1 & lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_2));
  assign nl_operator_3_false_4_acc_nl = eeprocess_k_1_sva_2 + 3'b011;
  assign operator_3_false_4_acc_nl = nl_operator_3_false_4_acc_nl[2:0];
  assign operator_3_false_4_acc_itm_2_1 = readslicef_3_1_2(operator_3_false_4_acc_nl);
  assign ee_lines_rsc_0_0_i_radr_d = {eeprocess_for_for_eeprocess_for_for_acc_cse_sva_1_1_0
      , single_loop_for_mux_rmff};
  assign ee_lines_rsc_0_0_i_wadr_d = {lfst_exit_eeprocess_for_6_lpi_1_dfm_st_1_2_1
      , (ee_clip_return_5_lpi_1_dfm_1_1[11:2])};
  assign ee_lines_rsc_0_0_i_d_d_pff = MUX_v_36_25_2x0x1x2x3x4x5x6x7(ee_block_1_3_lpi_1,
      ee_block_1_4_lpi_1_mx0, ee_block_2_0_lpi_1, ee_block_2_1_lpi_1, ee_block_2_2_lpi_1,
      ee_block_2_3_lpi_1, ee_block_2_4_lpi_1_mx0, ee_block_3_0_lpi_1, ee_block_3_1_lpi_1,
      ee_block_3_2_lpi_1, ee_block_3_3_lpi_1, ee_block_3_4_lpi_1_mx0, ee_block_4_0_lpi_1,
      ee_block_4_1_lpi_1, ee_block_4_2_lpi_1, ee_block_4_3_lpi_1, src_in_lpi_1_dfm_1_mx0,
      {eeprocess_for_for_eeprocess_for_for_acc_cse_sva_1_4_2 , eeprocess_for_for_eeprocess_for_for_acc_cse_sva_1_1_0});
  assign ee_lines_rsc_0_0_i_we_d_pff = ee_lines_rsc_0_0_i_we_d_iff;
  assign ee_lines_rsc_0_0_i_re_d_pff = ee_lines_rsc_0_0_i_re_d_iff;
  assign ee_lines_rsc_0_1_i_radr_d = {eeprocess_for_for_eeprocess_for_for_acc_cse_sva_1_1_0
      , single_loop_for_mux_rmff};
  assign ee_lines_rsc_0_1_i_wadr_d = {lfst_exit_eeprocess_for_6_lpi_1_dfm_st_1_2_1
      , (ee_clip_return_5_lpi_1_dfm_1_1[11:2])};
  assign ee_lines_rsc_0_1_i_we_d_pff = ee_lines_rsc_0_1_i_we_d_iff;
  assign ee_lines_rsc_0_1_i_re_d_pff = ee_lines_rsc_0_1_i_re_d_iff;
  assign ee_lines_rsc_0_2_i_radr_d = {eeprocess_for_for_eeprocess_for_for_acc_cse_sva_1_1_0
      , single_loop_for_mux_rmff};
  assign ee_lines_rsc_0_2_i_wadr_d = {lfst_exit_eeprocess_for_6_lpi_1_dfm_st_1_2_1
      , (ee_clip_return_5_lpi_1_dfm_1_1[11:2])};
  assign ee_lines_rsc_0_2_i_we_d_pff = ee_lines_rsc_0_2_i_we_d_iff;
  assign ee_lines_rsc_0_2_i_re_d_pff = ee_lines_rsc_0_2_i_re_d_iff;
  assign ee_lines_rsc_0_3_i_radr_d = {eeprocess_for_for_eeprocess_for_for_acc_cse_sva_1_1_0
      , single_loop_for_mux_rmff};
  assign ee_lines_rsc_0_3_i_wadr_d = {lfst_exit_eeprocess_for_6_lpi_1_dfm_st_1_2_1
      , (ee_clip_return_5_lpi_1_dfm_1_1[11:2])};
  assign ee_lines_rsc_0_3_i_we_d_pff = ee_lines_rsc_0_3_i_we_d_iff;
  assign ee_lines_rsc_0_3_i_re_d_pff = ee_lines_rsc_0_3_i_re_d_iff;
  assign or_dcpl_334 = (~ single_loop_and_207_tmp_1) | lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1;
  assign and_dcpl_132 = single_loop_and_207_tmp_1 & (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1);
  assign or_dcpl_355 = eeprocess_for_6_asn_166 | eeprocess_for_6_and_3_ssc_1;
  assign or_dcpl_358 = eeprocess_for_2_asn_28 | eeprocess_for_2_and_3_ssc_1;
  assign or_dcpl_361 = eeprocess_for_4_asn_28 | eeprocess_for_4_and_3_ssc_1;
  assign and_381_cse = (lfst_exit_eeprocess_for_6_lpi_1_2_1==2'b10);
  assign and_218_cse = (lfst_exit_eeprocess_for_6_lpi_1_2_1==2'b11);
  assign and_376_cse = (lfst_exit_eeprocess_for_6_lpi_1_2_1[0]) & lfst_exit_eeprocess_for_6_lpi_1_0;
  assign and_231_cse = and_376_cse & (lfst_exit_eeprocess_for_6_lpi_1_2_1[1]);
  assign and_dcpl_186 = ~((lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_1_0[0]) |
      lfst_exit_eeprocess_for_6_lpi_1_0);
  assign and_dcpl_192 = lfst_exit_eeprocess_for_6_lpi_1_0 & (~ (lfst_exit_eeprocess_for_6_lpi_1_2_1[0]));
  assign and_254_cse = and_376_cse & (~ (lfst_exit_eeprocess_for_6_lpi_1_2_1[1]));
  assign and_dcpl_195 = ~(lfst_exit_eeprocess_for_6_lpi_1_0 | (lfst_exit_eeprocess_for_6_lpi_1_2_1[1]));
  assign and_dcpl_197 = (~ lfst_exit_eeprocess_for_6_lpi_1_0) & (lfst_exit_eeprocess_for_6_lpi_1_2_1==2'b10);
  assign and_dcpl_199 = (~ lfst_exit_eeprocess_for_6_lpi_1_0) & (lfst_exit_eeprocess_for_6_lpi_1_2_1==2'b11);
  assign and_dcpl_233 = lfst_exit_eeprocess_for_6_lpi_1_0 & (~ (lfst_exit_eeprocess_for_6_lpi_1_2_1[1]));
  assign and_dcpl_235 = lfst_exit_eeprocess_for_6_lpi_1_0 & (lfst_exit_eeprocess_for_6_lpi_1_2_1==2'b10);
  assign and_dcpl_237 = lfst_exit_eeprocess_for_6_lpi_1_0 & (lfst_exit_eeprocess_for_6_lpi_1_2_1==2'b11);
  assign or_dcpl_365 = (~ lfst_exitL_exitL_exitL_exit_eeprocess_for_6_lpi_1) | exitL_exitL_exitL_exitL_exit_eeprocess_for_6_lpi_1
      | (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_0) | exitL_exitL_exit_padding_loop_2_sva;
  assign and_dcpl_239 = lfst_exitL_exitL_exitL_exit_eeprocess_for_6_lpi_1 & (~ exitL_exitL_exitL_exitL_exit_eeprocess_for_6_lpi_1);
  assign and_dcpl_240 = and_dcpl_239 & lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_0;
  assign and_dcpl_241 = and_dcpl_240 & (~ exitL_exitL_exit_padding_loop_2_sva) &
      lfst_exit_eeprocess_for_6_lpi_1_0;
  assign and_dcpl_244 = ~((~ and_dcpl_240) | exitL_exitL_exit_padding_loop_2_sva
      | lfst_exit_eeprocess_for_6_lpi_1_0 | (lfst_exit_eeprocess_for_6_lpi_1_2_1[1]));
  assign and_dcpl_248 = and_dcpl_239 & lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_0
      & (~ exitL_exitL_exit_padding_loop_2_sva);
  assign nor_89_cse = ~(lfst_exit_eeprocess_for_6_lpi_1_0 | (lfst_exit_eeprocess_for_6_lpi_1_2_1[0]));
  assign and_dcpl_249 = and_dcpl_248 & nor_89_cse & (lfst_exit_eeprocess_for_6_lpi_1_2_1[1]);
  assign and_dcpl_252 = and_dcpl_248 & (~ lfst_exit_eeprocess_for_6_lpi_1_0) & (lfst_exit_eeprocess_for_6_lpi_1_2_1==2'b11);
  assign and_dcpl_256 = lfst_exitL_exitL_exitL_exit_eeprocess_for_6_lpi_1 & (~ exitL_exitL_exitL_exitL_exit_eeprocess_for_6_lpi_1)
      & lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_0 & (~ exitL_exitL_exit_padding_loop_2_sva)
      & lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_2;
  assign or_dcpl_372 = (~((~((~ lfst_exitL_exitL_exitL_exit_eeprocess_for_6_lpi_1)
      | exitL_exitL_exitL_exitL_exit_eeprocess_for_6_lpi_1 | (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_0)))
      | lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_1)) | exitL_exitL_exit_padding_loop_2_sva;
  assign and_dcpl_260 = ~(exitL_exitL_exit_padding_loop_2_sva | lfst_exit_eeprocess_for_6_lpi_1_0);
  assign and_dcpl_264 = and_dcpl_239 & lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_0
      & (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_1);
  assign and_dcpl_265 = and_dcpl_264 & and_dcpl_260 & (~ (lfst_exit_eeprocess_for_6_lpi_1_2_1[1]))
      & (z_out_17[13]);
  assign and_dcpl_268 = and_dcpl_264 & and_dcpl_260 & (~ (lfst_exit_eeprocess_for_6_lpi_1_2_1[1]))
      & (~ (z_out_17[13]));
  assign and_dcpl_270 = (~ exitL_exitL_exit_padding_loop_2_sva) & lfst_exit_eeprocess_for_6_lpi_1_0;
  assign and_dcpl_272 = and_dcpl_264 & and_dcpl_270 & (~ (lfst_exit_eeprocess_for_6_lpi_1_2_1[1]))
      & (~ eeprocess_for_2_acc_2_itm_13_1);
  assign and_dcpl_278 = and_dcpl_239 & lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_0
      & (~(lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_1 | exitL_exitL_exit_padding_loop_2_sva));
  assign and_dcpl_279 = and_dcpl_278 & nor_89_cse & (lfst_exit_eeprocess_for_6_lpi_1_2_1[1])
      & (z_out_17[13]);
  assign and_dcpl_282 = and_dcpl_278 & nor_89_cse & (lfst_exit_eeprocess_for_6_lpi_1_2_1[1])
      & (~ (z_out_17[13]));
  assign and_dcpl_286 = and_dcpl_278 & and_dcpl_192 & (lfst_exit_eeprocess_for_6_lpi_1_2_1[1])
      & (~ eeprocess_for_4_acc_2_itm_13_1);
  assign and_dcpl_288 = (~ lfst_exit_eeprocess_for_6_lpi_1_0) & (lfst_exit_eeprocess_for_6_lpi_1_2_1[0]);
  assign and_dcpl_290 = and_dcpl_278 & and_dcpl_288 & (lfst_exit_eeprocess_for_6_lpi_1_2_1[1])
      & (z_out_17[13]);
  assign and_dcpl_293 = and_dcpl_278 & and_dcpl_288 & (lfst_exit_eeprocess_for_6_lpi_1_2_1[1])
      & (~ (z_out_17[13]));
  assign and_dcpl_297 = and_dcpl_278 & and_376_cse & (lfst_exit_eeprocess_for_6_lpi_1_2_1[1])
      & eeprocess_for_6_acc_2_itm_13_1;
  assign and_dcpl_300 = and_dcpl_278 & and_376_cse & (lfst_exit_eeprocess_for_6_lpi_1_2_1[1])
      & (~ eeprocess_for_6_acc_2_itm_13_1);
  assign and_dcpl_303 = and_dcpl_264 & and_dcpl_270 & (~ (lfst_exit_eeprocess_for_6_lpi_1_2_1[1]))
      & eeprocess_for_2_acc_2_itm_13_1;
  assign and_dcpl_306 = and_dcpl_278 & and_dcpl_192 & (lfst_exit_eeprocess_for_6_lpi_1_2_1[1])
      & eeprocess_for_4_acc_2_itm_13_1;
  assign eeprocess_for_1_for_nor_1_itm = ~(and_dcpl_195 | and_dcpl_197 | and_dcpl_199
      | and_dcpl_233 | and_dcpl_235);
  assign eeprocess_for_4_eeprocess_for_4_mux_cse = MUX_v_11_2_2((z_out_16[11:1]),
      eeprocess_for_6_acc_itm_11_1_1, and_231_cse);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      reg_dst_rsci_oswt_cse <= 1'b0;
      ee_block_3_4_lpi_1 <= 36'b000000000000000000000000000000000000;
      ee_block_2_4_lpi_1 <= 36'b000000000000000000000000000000000000;
      ee_block_1_4_lpi_1 <= 36'b000000000000000000000000000000000000;
      ee_block_0_4_lpi_1 <= 36'b000000000000000000000000000000000000;
      dst_out_1_35_24_lpi_1_dfm_2_1 <= 12'b000000000000;
      dst_out_1_11_0_lpi_1_dfm_2_1 <= 12'b000000000000;
      dst_out_1_23_12_lpi_1_dfm_2_1 <= 12'b000000000000;
      src_in_lpi_1_dfm_1 <= 36'b000000000000000000000000000000000000;
      lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_st_2_1_0 <= 2'b00;
      padding_loop_1_padding_loop_1_nor_itm_1 <= 1'b0;
      padding_loop_1_padding_loop_1_and_itm_1 <= 1'b0;
      padding_loop_1_padding_loop_1_and_1_itm_1 <= 1'b0;
      padding_loop_1_padding_loop_1_and_2_itm_1 <= 1'b0;
      padding_loop_3_slc_13_svs_st_2 <= 1'b0;
      lfst_exit_padding_loop_2_lpi_1_dfm_st_2_1 <= 1'b0;
      lfst_exit_padding_loop_2_lpi_1_dfm_st_2_0 <= 1'b0;
      asn_sft_lpi_1_st_2 <= 1'b0;
      padding_loop_2_and_142_itm_2 <= 1'b0;
      padding_loop_2_and_141_itm_2 <= 1'b0;
      padding_loop_2_and_140_itm_2 <= 1'b0;
      padding_loop_2_nand_itm_1 <= 1'b0;
      block_refresh_loop_in_block_refresh_loop_in_slc_ee_block_36_35_0_1_ctmp_sva_1
          <= 36'b000000000000000000000000000000000000;
      eeprocess_for_6_and_154_itm_1 <= 1'b0;
      eeprocess_for_6_and_208_itm_1 <= 1'b0;
      lfst_exitL_exit_padding_loop_2_lpi_1_dfm_st_2_1 <= 1'b0;
      lfst_exitL_exit_padding_loop_2_lpi_1_dfm_st_2_0 <= 1'b0;
      reg_ee_lines_rsc_0_0_i_oswt_cse <= 1'b0;
      reg_ee_lines_rsc_0_1_i_oswt_cse <= 1'b0;
      reg_ee_lines_rsc_0_2_i_oswt_cse <= 1'b0;
      reg_ee_lines_rsc_0_3_i_oswt_cse <= 1'b0;
      eeprocess_bblock_4_4_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_bblock_4_3_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_bblock_4_2_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_bblock_4_1_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_bblock_4_0_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_bblock_3_4_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_bblock_3_3_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_bblock_3_2_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_bblock_3_1_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_bblock_3_0_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_bblock_2_4_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_bblock_2_3_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_bblock_2_1_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_bblock_2_0_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_bblock_1_4_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_bblock_1_3_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_bblock_1_2_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_bblock_1_1_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_bblock_1_0_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_bblock_0_4_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_bblock_0_3_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_bblock_0_2_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_bblock_0_1_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_bblock_0_0_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_gblock_4_4_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_gblock_4_3_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_gblock_4_2_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_gblock_4_1_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_gblock_4_0_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_gblock_3_4_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_gblock_3_3_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_gblock_3_2_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_gblock_3_1_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_gblock_3_0_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_gblock_2_4_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_gblock_2_3_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_gblock_2_1_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_gblock_2_0_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_gblock_1_4_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_gblock_1_3_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_gblock_1_2_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_gblock_1_1_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_gblock_1_0_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_gblock_0_4_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_gblock_0_3_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_gblock_0_2_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_gblock_0_1_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_gblock_0_0_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_rblock_4_4_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_rblock_4_3_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_rblock_4_2_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_rblock_4_1_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_rblock_4_0_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_rblock_3_4_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_rblock_3_3_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_rblock_3_2_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_rblock_3_1_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_rblock_3_0_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_rblock_2_4_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_rblock_2_3_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_rblock_2_1_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_rblock_2_0_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_rblock_1_4_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_rblock_1_3_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_rblock_1_2_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_rblock_1_1_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_rblock_1_0_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_rblock_0_4_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_rblock_0_3_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_rblock_0_2_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_rblock_0_1_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_rblock_0_0_11_1_lpi_1 <= 11'b00000000000;
      eeprocess_bblock_2_2_11_0_lpi_1 <= 12'b000000000000;
      eeprocess_gblock_2_2_11_0_lpi_1 <= 12'b000000000000;
      eeprocess_rblock_2_2_11_0_lpi_1 <= 12'b000000000000;
      single_loop_for_1_slc_j_11_0_1_itm_1 <= 2'b00;
      eeprocess_for_for_slc_eeprocess_guass_55_5_4_0_cse_sva_1 <= 5'b00000;
      eeprocess_for_for_eeprocess_for_for_acc_cse_sva_1_4_2 <= 3'b000;
      eeprocess_for_for_eeprocess_for_for_acc_cse_sva_1_1_0 <= 2'b00;
      ee_clip_return_5_lpi_1_dfm_1_1 <= 12'b000000000000;
      operator_24_true_1_acc_psp_sva_1 <= 18'b000000000000000000;
      operator_24_true_acc_psp_sva_1 <= 18'b000000000000000000;
      eeprocess_acc_13_itm_1 <= 13'b0000000000000;
      operator_3_false_14_slc_eeprocess_k_2_itm_1 <= 1'b0;
      lfst_exit_eeprocess_for_6_lpi_1_dfm_st_1_2_1 <= 2'b00;
      lfst_exit_eeprocess_for_6_lpi_1_dfm_st_1_0 <= 1'b0;
      lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_st_1_2 <= 1'b0;
      lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_st_1_1_0 <= 2'b00;
      sfi_exit_single_loop_lpi_1_dfm_1 <= 1'b0;
      padding_loop_3_slc_13_svs_st_1 <= 1'b0;
      padding_loop_2_and_254_itm_1 <= 1'b0;
      padding_loop_2_and_253_itm_1 <= 1'b0;
      padding_loop_2_and_252_itm_1 <= 1'b0;
      padding_loop_2_and_251_itm_1 <= 1'b0;
      padding_loop_2_and_250_itm_1 <= 1'b0;
      padding_loop_2_and_249_itm_1 <= 1'b0;
      padding_loop_2_and_248_itm_1 <= 1'b0;
      padding_loop_2_and_247_itm_1 <= 1'b0;
      padding_loop_2_and_246_itm_1 <= 1'b0;
      padding_loop_2_and_245_itm_1 <= 1'b0;
      padding_loop_2_and_244_itm_1 <= 1'b0;
      padding_loop_2_and_243_itm_1 <= 1'b0;
      padding_loop_2_and_242_itm_1 <= 1'b0;
      padding_loop_2_and_241_itm_1 <= 1'b0;
      padding_loop_2_and_240_itm_1 <= 1'b0;
      padding_loop_2_and_239_itm_1 <= 1'b0;
      padding_loop_2_and_238_itm_1 <= 1'b0;
      padding_loop_2_and_237_itm_1 <= 1'b0;
      padding_loop_2_and_236_itm_1 <= 1'b0;
      padding_loop_2_and_235_itm_1 <= 1'b0;
      padding_loop_2_and_234_itm_1 <= 1'b0;
      padding_loop_2_and_233_itm_1 <= 1'b0;
      padding_loop_2_and_232_itm_1 <= 1'b0;
      padding_loop_2_and_231_itm_1 <= 1'b0;
      padding_loop_2_and_180_itm_1 <= 1'b0;
      single_loop_and_213_tmp_1 <= 1'b0;
      single_loop_if_1_asn_sft_lpi_1_dfm_1 <= 1'b0;
      eeprocess_for_6_or_13_tmp_1 <= 1'b0;
      padding_loop_2_equal_tmp_1 <= 1'b0;
      padding_loop_2_equal_tmp_3_1 <= 1'b0;
      lfst_exitL_exit_padding_loop_2_lpi_1_dfm_st_1_1 <= 1'b0;
      lfst_exitL_exit_padding_loop_2_lpi_1_dfm_st_1_0 <= 1'b0;
      reg_src_rsci_oswt_cse <= 1'b0;
      l_lpi_1_1_0 <= 2'b00;
      eeprocess_l_2_1_0_lpi_1 <= 2'b00;
      eeprocess_l_3_1_0_lpi_1 <= 2'b00;
      eeprocess_l_1_0_lpi_1 <= 2'b00;
      i_lpi_1 <= 13'b0000000000000;
      sfi_ee_top_eb_lpi_1 <= 1'b0;
      lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_1 <= 1'b0;
      exitL_exitL_exit_padding_loop_2_sva <= 1'b1;
      lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_0 <= 1'b0;
      i_1_lpi_1 <= 13'b0000000000000;
      n_lpi_1 <= 26'b00000000000000000000000000;
      count_lpi_1 <= 13'b0000000000000;
      main_stage_0_2 <= 1'b0;
      main_stage_0_3 <= 1'b0;
      operator_3_false_12_acc_cse_sva_1_2 <= 1'b0;
      eeprocess_for_6_equal_tmp_8_1 <= 1'b0;
      block_refresh_loop_in_and_stg_3_4_sva_1 <= 1'b0;
      block_refresh_loop_in_acc_decb_sva_1_4 <= 1'b0;
      padding_loop_2_and_54_itm_1 <= 1'b0;
      padding_loop_2_and_53_itm_1 <= 1'b0;
      padding_loop_2_and_52_itm_1 <= 1'b0;
      padding_loop_2_and_51_itm_1 <= 1'b0;
      padding_loop_2_and_50_itm_1 <= 1'b0;
      padding_loop_2_and_49_itm_1 <= 1'b0;
      padding_loop_2_and_48_itm_1 <= 1'b0;
      padding_loop_2_and_47_itm_1 <= 1'b0;
      padding_loop_2_and_46_itm_1 <= 1'b0;
      padding_loop_2_and_45_itm_1 <= 1'b0;
      padding_loop_2_and_44_itm_1 <= 1'b0;
      padding_loop_2_and_43_itm_1 <= 1'b0;
      padding_loop_2_and_42_itm_1 <= 1'b0;
      padding_loop_2_and_41_itm_1 <= 1'b0;
      padding_loop_2_and_40_itm_1 <= 1'b0;
      padding_loop_2_and_39_itm_1 <= 1'b0;
      single_loop_for_nor_tmp_1 <= 1'b0;
      eeprocess_for_6_equal_tmp_1 <= 1'b0;
      eeprocess_for_6_or_tmp_1 <= 1'b0;
      eeprocess_for_6_equal_tmp_1_1 <= 1'b0;
      eeprocess_for_6_equal_tmp_2_1 <= 1'b0;
      eeprocess_for_6_nor_tmp_1_1 <= 1'b0;
      padding_loop_2_and_38_itm_1 <= 1'b0;
      padding_loop_2_and_37_itm_1 <= 1'b0;
      padding_loop_2_and_36_itm_1 <= 1'b0;
      padding_loop_2_and_35_itm_1 <= 1'b0;
      single_loop_asn_sft_1_lpi_1_dfm_1 <= 1'b0;
      padding_loop_2_and_142_itm_1 <= 1'b0;
      padding_loop_2_and_141_itm_1 <= 1'b0;
      padding_loop_2_and_140_itm_1 <= 1'b0;
      eeprocess_for_for_and_stg_3_0_sva <= 1'b0;
      eeprocess_for_for_and_stg_3_1_sva <= 1'b0;
      eeprocess_for_for_and_stg_2_1_sva <= 1'b0;
      eeprocess_for_for_and_stg_3_2_sva <= 1'b0;
      eeprocess_for_for_and_stg_2_2_sva <= 1'b0;
      eeprocess_for_for_and_stg_3_3_sva <= 1'b0;
      eeprocess_for_for_and_stg_2_3_sva <= 1'b0;
      eeprocess_for_for_and_stg_3_4_sva <= 1'b0;
      eeprocess_for_for_and_stg_2_4_sva <= 1'b0;
      eeprocess_for_for_and_stg_3_5_sva <= 1'b0;
      eeprocess_for_for_and_stg_2_5_sva <= 1'b0;
      eeprocess_for_for_and_stg_3_6_sva <= 1'b0;
      eeprocess_for_for_and_stg_2_6_sva <= 1'b0;
      eeprocess_for_for_and_stg_3_7_sva <= 1'b0;
      eeprocess_for_for_and_stg_2_7_sva <= 1'b0;
      eeprocess_for_for_and_stg_3_8_sva <= 1'b0;
      single_loop_if_1_if_1_single_loop_if_1_if_1_or_itm_1 <= 1'b0;
      exitL_exit_eeprocess_for_6_lpi_1_dfm_st_1 <= 1'b0;
      padding_loop_3_padding_loop_3_nor_itm_1 <= 1'b0;
      padding_loop_2_and_155_itm_1 <= 1'b0;
      padding_loop_2_and_143_itm_1 <= 1'b0;
      reg_operator_3_false_2_acc_psp_ftd <= 1'b0;
      reg_operator_3_false_6_acc_psp_ftd <= 1'b0;
      reg_operator_3_false_10_acc_psp_ftd <= 1'b0;
      reg_eeprocess_for_for_acc_psp_ftd <= 2'b00;
      reg_block_refresh_loop_in_acc_psp_ftd <= 2'b00;
    end
    else if ( core_wen ) begin
      reg_dst_rsci_oswt_cse <= mux_126_nl & main_stage_0_3;
      ee_block_3_4_lpi_1 <= ee_block_3_4_lpi_1_mx0;
      ee_block_2_4_lpi_1 <= ee_block_2_4_lpi_1_mx0;
      ee_block_1_4_lpi_1 <= ee_block_1_4_lpi_1_mx0;
      ee_block_0_4_lpi_1 <= ee_block_0_4_lpi_1_mx0;
      dst_out_1_35_24_lpi_1_dfm_2_1 <= dst_out_1_35_24_lpi_1_dfm_3;
      dst_out_1_11_0_lpi_1_dfm_2_1 <= dst_out_1_11_0_lpi_1_dfm_3;
      dst_out_1_23_12_lpi_1_dfm_2_1 <= dst_out_1_23_12_lpi_1_dfm_3;
      src_in_lpi_1_dfm_1 <= src_in_lpi_1_dfm_1_mx0;
      lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_st_2_1_0 <= MUX_v_2_2_2(lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_st_1_1_0,
          lfst_exit_eeprocess_for_6_lpi_1_dfm_st_1_2_1, lfst_exitL_exit_padding_loop_2_lpi_1_dfm_st_1_1);
      padding_loop_1_padding_loop_1_nor_itm_1 <= MUX_s_1_2_2(padding_loop_1_padding_loop_1_nor_itm_mx0w0,
          padding_loop_3_padding_loop_3_nor_itm_1, exitL_exit_eeprocess_for_6_lpi_1_dfm_st_1);
      padding_loop_1_padding_loop_1_and_itm_1 <= MUX1HOT_s_1_3_2(padding_loop_1_padding_loop_1_and_itm_mx0w0,
          operator_3_false_14_slc_eeprocess_k_2_itm_1, padding_loop_1_padding_loop_1_nor_itm_mx0w0,
          {and_dcpl_105 , and_dcpl_106 , (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_st_1_1)});
      padding_loop_1_padding_loop_1_and_1_itm_1 <= MUX1HOT_s_1_4_2(padding_loop_1_padding_loop_1_and_1_itm_mx0w0,
          lfst_exit_eeprocess_for_6_lpi_1_dfm_st_1_0, padding_loop_3_slc_13_svs_st_1,
          padding_loop_1_padding_loop_1_and_2_itm_mx0w3, {and_dcpl_105 , and_dcpl_106
          , and_dcpl_107 , and_dcpl_108});
      padding_loop_1_padding_loop_1_and_2_itm_1 <= MUX1HOT_s_1_4_2(padding_loop_1_padding_loop_1_and_2_itm_mx0w3,
          lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_st_1_2, padding_loop_1_padding_loop_1_and_itm_mx0w0,
          single_loop_if_1_if_1_single_loop_if_1_if_1_or_itm_1, {and_dcpl_105 , and_dcpl_106
          , and_dcpl_108 , and_dcpl_107});
      padding_loop_3_slc_13_svs_st_2 <= padding_loop_3_slc_13_svs_st_1;
      lfst_exit_padding_loop_2_lpi_1_dfm_st_2_1 <= MUX_s_1_2_2(single_loop_asn_sft_1_lpi_1_dfm_1,
          exitL_exit_eeprocess_for_6_lpi_1_dfm_st_1, lfst_exitL_exit_padding_loop_2_lpi_1_dfm_st_1_1);
      lfst_exit_padding_loop_2_lpi_1_dfm_st_2_0 <= MUX_s_1_2_2(lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_st_1_2,
          eeprocess_for_6_equal_tmp_8_1, lfst_exitL_exit_padding_loop_2_lpi_1_dfm_st_1_1);
      asn_sft_lpi_1_st_2 <= MUX1HOT_s_1_3_2(asn_sft_lpi_1, exitL_exit_eeprocess_for_6_lpi_1_dfm_st_1,
          padding_loop_1_padding_loop_1_and_1_itm_mx0w0, {lfst_exitL_exit_padding_loop_2_lpi_1_dfm_st_1_1
          , and_dcpl_107 , and_dcpl_108});
      padding_loop_2_and_142_itm_2 <= padding_loop_2_and_142_itm_1;
      padding_loop_2_and_141_itm_2 <= padding_loop_2_and_141_itm_1;
      padding_loop_2_and_140_itm_2 <= padding_loop_2_and_140_itm_1;
      padding_loop_2_nand_itm_1 <= ~(padding_loop_2_padding_loop_2_nor_28_tmp_1 &
          (~(((~ block_refresh_loop_in_and_43_tmp_1) & eeprocess_for_6_or_tmp_1)
          | eeprocess_for_6_equal_tmp_1_1 | eeprocess_for_6_equal_tmp_2_1 | eeprocess_for_6_nor_tmp_1_1
          | (eeprocess_for_6_equal_tmp_1 & (~ single_loop_for_nor_tmp_1)))));
      block_refresh_loop_in_block_refresh_loop_in_slc_ee_block_36_35_0_1_ctmp_sva_1
          <= block_refresh_loop_in_block_refresh_loop_in_slc_ee_block_36_35_0_1_ctmp_sva_1_1;
      eeprocess_for_6_and_154_itm_1 <= block_refresh_loop_in_and_43_tmp_1 & eeprocess_for_6_or_tmp_1
          & padding_loop_2_padding_loop_2_nor_28_tmp_1;
      eeprocess_for_6_and_208_itm_1 <= single_loop_for_nor_tmp_1 & eeprocess_for_6_equal_tmp_1
          & padding_loop_2_padding_loop_2_nor_28_tmp_1;
      lfst_exitL_exit_padding_loop_2_lpi_1_dfm_st_2_1 <= lfst_exitL_exit_padding_loop_2_lpi_1_dfm_st_1_1;
      lfst_exitL_exit_padding_loop_2_lpi_1_dfm_st_2_0 <= lfst_exitL_exit_padding_loop_2_lpi_1_dfm_st_1_0;
      reg_ee_lines_rsc_0_0_i_oswt_cse <= block_refresh_loop_in_single_loop_for_nor_7_rmff;
      reg_ee_lines_rsc_0_1_i_oswt_cse <= block_refresh_loop_in_single_loop_for_nor_6_rmff;
      reg_ee_lines_rsc_0_2_i_oswt_cse <= block_refresh_loop_in_single_loop_for_nor_5_rmff;
      reg_ee_lines_rsc_0_3_i_oswt_cse <= block_refresh_loop_in_single_loop_for_nor_4_rmff;
      eeprocess_bblock_4_4_11_1_lpi_1 <= eeprocess_bblock_4_4_11_1_lpi_1_mx0;
      eeprocess_bblock_4_3_11_1_lpi_1 <= eeprocess_bblock_4_3_11_1_lpi_1_mx0;
      eeprocess_bblock_4_2_11_1_lpi_1 <= eeprocess_bblock_4_2_11_1_lpi_1_mx0;
      eeprocess_bblock_4_1_11_1_lpi_1 <= eeprocess_bblock_4_1_11_1_lpi_1_mx0;
      eeprocess_bblock_4_0_11_1_lpi_1 <= eeprocess_bblock_4_0_11_1_lpi_1_mx0;
      eeprocess_bblock_3_4_11_1_lpi_1 <= eeprocess_bblock_3_4_11_1_lpi_1_mx0;
      eeprocess_bblock_3_3_11_1_lpi_1 <= eeprocess_bblock_3_3_11_1_lpi_1_mx0;
      eeprocess_bblock_3_2_11_1_lpi_1 <= eeprocess_bblock_3_2_11_1_lpi_1_mx0;
      eeprocess_bblock_3_1_11_1_lpi_1 <= eeprocess_bblock_3_1_11_1_lpi_1_mx0;
      eeprocess_bblock_3_0_11_1_lpi_1 <= eeprocess_bblock_3_0_11_1_lpi_1_mx0;
      eeprocess_bblock_2_4_11_1_lpi_1 <= eeprocess_bblock_2_4_11_1_lpi_1_mx0;
      eeprocess_bblock_2_3_11_1_lpi_1 <= eeprocess_bblock_2_3_11_1_lpi_1_mx0;
      eeprocess_bblock_2_1_11_1_lpi_1 <= eeprocess_bblock_2_1_11_1_lpi_1_mx0;
      eeprocess_bblock_2_0_11_1_lpi_1 <= eeprocess_bblock_2_0_11_1_lpi_1_mx0;
      eeprocess_bblock_1_4_11_1_lpi_1 <= eeprocess_bblock_1_4_11_1_lpi_1_mx0;
      eeprocess_bblock_1_3_11_1_lpi_1 <= eeprocess_bblock_1_3_11_1_lpi_1_mx0;
      eeprocess_bblock_1_2_11_1_lpi_1 <= eeprocess_bblock_1_2_11_1_lpi_1_mx0;
      eeprocess_bblock_1_1_11_1_lpi_1 <= eeprocess_bblock_1_1_11_1_lpi_1_mx0;
      eeprocess_bblock_1_0_11_1_lpi_1 <= eeprocess_bblock_1_0_11_1_lpi_1_mx0;
      eeprocess_bblock_0_4_11_1_lpi_1 <= eeprocess_bblock_0_4_11_1_lpi_1_mx0;
      eeprocess_bblock_0_3_11_1_lpi_1 <= eeprocess_bblock_0_3_11_1_lpi_1_mx0;
      eeprocess_bblock_0_2_11_1_lpi_1 <= eeprocess_bblock_0_2_11_1_lpi_1_mx0;
      eeprocess_bblock_0_1_11_1_lpi_1 <= eeprocess_bblock_0_1_11_1_lpi_1_mx0;
      eeprocess_bblock_0_0_11_1_lpi_1 <= eeprocess_bblock_0_0_11_1_lpi_1_mx0;
      eeprocess_gblock_4_4_11_1_lpi_1 <= eeprocess_gblock_4_4_11_1_lpi_1_mx0;
      eeprocess_gblock_4_3_11_1_lpi_1 <= eeprocess_gblock_4_3_11_1_lpi_1_mx0;
      eeprocess_gblock_4_2_11_1_lpi_1 <= eeprocess_gblock_4_2_11_1_lpi_1_mx0;
      eeprocess_gblock_4_1_11_1_lpi_1 <= eeprocess_gblock_4_1_11_1_lpi_1_mx0;
      eeprocess_gblock_4_0_11_1_lpi_1 <= eeprocess_gblock_4_0_11_1_lpi_1_mx0;
      eeprocess_gblock_3_4_11_1_lpi_1 <= eeprocess_gblock_3_4_11_1_lpi_1_mx0;
      eeprocess_gblock_3_3_11_1_lpi_1 <= eeprocess_gblock_3_3_11_1_lpi_1_mx0;
      eeprocess_gblock_3_2_11_1_lpi_1 <= eeprocess_gblock_3_2_11_1_lpi_1_mx0;
      eeprocess_gblock_3_1_11_1_lpi_1 <= eeprocess_gblock_3_1_11_1_lpi_1_mx0;
      eeprocess_gblock_3_0_11_1_lpi_1 <= eeprocess_gblock_3_0_11_1_lpi_1_mx0;
      eeprocess_gblock_2_4_11_1_lpi_1 <= eeprocess_gblock_2_4_11_1_lpi_1_mx0;
      eeprocess_gblock_2_3_11_1_lpi_1 <= eeprocess_gblock_2_3_11_1_lpi_1_mx0;
      eeprocess_gblock_2_1_11_1_lpi_1 <= eeprocess_gblock_2_1_11_1_lpi_1_mx0;
      eeprocess_gblock_2_0_11_1_lpi_1 <= eeprocess_gblock_2_0_11_1_lpi_1_mx0;
      eeprocess_gblock_1_4_11_1_lpi_1 <= eeprocess_gblock_1_4_11_1_lpi_1_mx0;
      eeprocess_gblock_1_3_11_1_lpi_1 <= eeprocess_gblock_1_3_11_1_lpi_1_mx0;
      eeprocess_gblock_1_2_11_1_lpi_1 <= eeprocess_gblock_1_2_11_1_lpi_1_mx0;
      eeprocess_gblock_1_1_11_1_lpi_1 <= eeprocess_gblock_1_1_11_1_lpi_1_mx0;
      eeprocess_gblock_1_0_11_1_lpi_1 <= eeprocess_gblock_1_0_11_1_lpi_1_mx0;
      eeprocess_gblock_0_4_11_1_lpi_1 <= eeprocess_gblock_0_4_11_1_lpi_1_mx0;
      eeprocess_gblock_0_3_11_1_lpi_1 <= eeprocess_gblock_0_3_11_1_lpi_1_mx0;
      eeprocess_gblock_0_2_11_1_lpi_1 <= eeprocess_gblock_0_2_11_1_lpi_1_mx0;
      eeprocess_gblock_0_1_11_1_lpi_1 <= eeprocess_gblock_0_1_11_1_lpi_1_mx0;
      eeprocess_gblock_0_0_11_1_lpi_1 <= eeprocess_gblock_0_0_11_1_lpi_1_mx0;
      eeprocess_rblock_4_4_11_1_lpi_1 <= eeprocess_rblock_4_4_11_1_lpi_1_mx0;
      eeprocess_rblock_4_3_11_1_lpi_1 <= eeprocess_rblock_4_3_11_1_lpi_1_mx0;
      eeprocess_rblock_4_2_11_1_lpi_1 <= eeprocess_rblock_4_2_11_1_lpi_1_mx0;
      eeprocess_rblock_4_1_11_1_lpi_1 <= eeprocess_rblock_4_1_11_1_lpi_1_mx0;
      eeprocess_rblock_4_0_11_1_lpi_1 <= eeprocess_rblock_4_0_11_1_lpi_1_mx0;
      eeprocess_rblock_3_4_11_1_lpi_1 <= eeprocess_rblock_3_4_11_1_lpi_1_mx0;
      eeprocess_rblock_3_3_11_1_lpi_1 <= eeprocess_rblock_3_3_11_1_lpi_1_mx0;
      eeprocess_rblock_3_2_11_1_lpi_1 <= eeprocess_rblock_3_2_11_1_lpi_1_mx0;
      eeprocess_rblock_3_1_11_1_lpi_1 <= eeprocess_rblock_3_1_11_1_lpi_1_mx0;
      eeprocess_rblock_3_0_11_1_lpi_1 <= eeprocess_rblock_3_0_11_1_lpi_1_mx0;
      eeprocess_rblock_2_4_11_1_lpi_1 <= eeprocess_rblock_2_4_11_1_lpi_1_mx0;
      eeprocess_rblock_2_3_11_1_lpi_1 <= eeprocess_rblock_2_3_11_1_lpi_1_mx0;
      eeprocess_rblock_2_1_11_1_lpi_1 <= eeprocess_rblock_2_1_11_1_lpi_1_mx0;
      eeprocess_rblock_2_0_11_1_lpi_1 <= eeprocess_rblock_2_0_11_1_lpi_1_mx0;
      eeprocess_rblock_1_4_11_1_lpi_1 <= eeprocess_rblock_1_4_11_1_lpi_1_mx0;
      eeprocess_rblock_1_3_11_1_lpi_1 <= eeprocess_rblock_1_3_11_1_lpi_1_mx0;
      eeprocess_rblock_1_2_11_1_lpi_1 <= eeprocess_rblock_1_2_11_1_lpi_1_mx0;
      eeprocess_rblock_1_1_11_1_lpi_1 <= eeprocess_rblock_1_1_11_1_lpi_1_mx0;
      eeprocess_rblock_1_0_11_1_lpi_1 <= eeprocess_rblock_1_0_11_1_lpi_1_mx0;
      eeprocess_rblock_0_4_11_1_lpi_1 <= eeprocess_rblock_0_4_11_1_lpi_1_mx0;
      eeprocess_rblock_0_3_11_1_lpi_1 <= eeprocess_rblock_0_3_11_1_lpi_1_mx0;
      eeprocess_rblock_0_2_11_1_lpi_1 <= eeprocess_rblock_0_2_11_1_lpi_1_mx0;
      eeprocess_rblock_0_1_11_1_lpi_1 <= eeprocess_rblock_0_1_11_1_lpi_1_mx0;
      eeprocess_rblock_0_0_11_1_lpi_1 <= eeprocess_rblock_0_0_11_1_lpi_1_mx0;
      eeprocess_bblock_2_2_11_0_lpi_1 <= eeprocess_bblock_2_2_11_0_lpi_1_mx0;
      eeprocess_gblock_2_2_11_0_lpi_1 <= eeprocess_gblock_2_2_11_0_lpi_1_mx0;
      eeprocess_rblock_2_2_11_0_lpi_1 <= eeprocess_rblock_2_2_11_0_lpi_1_mx0;
      single_loop_for_1_slc_j_11_0_1_itm_1 <= j_lpi_1[1:0];
      eeprocess_for_for_slc_eeprocess_guass_55_5_4_0_cse_sva_1 <= MUX_v_5_2_2(ROM_1i5_1o5_5228d0b702cc16ac60c7d7bb9d7a503b2e_1,
          (z_out_18[4:0]), or_356_nl);
      eeprocess_for_for_eeprocess_for_for_acc_cse_sva_1_4_2 <= MUX_v_3_2_2(z_out_10,
          eeprocess_for_for_acc_tmp, lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_2);
      eeprocess_for_for_eeprocess_for_for_acc_cse_sva_1_1_0 <= MUX1HOT_v_2_5_2((eeprocess_for_for_acc_16_tmp[1:0]),
          (operator_3_false_1_acc_psp_4_0_sva_1[1:0]), padding_loop_1_acc_7_nl, padding_loop_3_acc_5_nl,
          z_out, {and_dcpl_113 , and_dcpl_115 , and_dcpl_116 , and_dcpl_118 , and_dcpl_120});
      ee_clip_return_5_lpi_1_dfm_1_1 <= MUX1HOT_v_12_4_2(ee_clip_return_5_lpi_1_dfm_1_mx0w0,
          (j_lpi_1[11:0]), (padding_loop_1_acc_3_sdt_sva_1[11:0]), ({2'b00 , (i_lpi_1[11:2])}),
          {and_dcpl_113 , and_140_nl , and_dcpl_116 , and_dcpl_118});
      operator_24_true_1_acc_psp_sva_1 <= nl_operator_24_true_1_acc_psp_sva_1[17:0];
      operator_24_true_acc_psp_sva_1 <= nl_operator_24_true_acc_psp_sva_1[17:0];
      eeprocess_acc_13_itm_1 <= nl_eeprocess_acc_13_itm_1[12:0];
      operator_3_false_14_slc_eeprocess_k_2_itm_1 <= MUX_s_1_2_2(padding_loop_3_padding_loop_3_and_nl,
          (operator_3_false_12_acc_tmp[2]), lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_0);
      lfst_exit_eeprocess_for_6_lpi_1_dfm_st_1_2_1 <= MUX1HOT_v_2_5_2(lfst_exit_eeprocess_for_6_lpi_1_dfm_2_1_mx0w0,
          (padding_loop_1_acc_3_sdt_sva_1[1:0]), (i_lpi_1[1:0]), z_out, (j_lpi_1[1:0]),
          {and_dcpl_113 , and_dcpl_116 , and_dcpl_118 , and_dcpl_115 , and_dcpl_120});
      lfst_exit_eeprocess_for_6_lpi_1_dfm_st_1_0 <= MUX_s_1_2_2(padding_loop_3_padding_loop_3_and_1_nl,
          lfst_exit_eeprocess_for_6_lpi_1_dfm_0_mx0w0, lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_0);
      lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_st_1_2 <= MUX_s_1_2_2(lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_2_mx0w0,
          padding_loop_3_padding_loop_3_and_2_nl, lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1);
      lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_st_1_1_0 <= lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_1_0_1;
      sfi_exit_single_loop_lpi_1_dfm_1 <= MUX_s_1_2_2((~ lfst_exitL_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_1),
          sfi_exit_single_loop_lpi_1_dfm, lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1);
      padding_loop_3_slc_13_svs_st_1 <= MUX_s_1_2_2(padding_loop_3_acc_6_itm_13_1,
          single_loop_asn_sft_lpi_1, lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_0);
      padding_loop_2_and_254_itm_1 <= eeprocess_for_for_and_stg_3_8_sva_mx0 & (eeprocess_for_for_acc_psp_mx0_2_1[1])
          & eeprocess_for_6_eeprocess_for_6_nor_8_cse_1 & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0
          & single_loop_asn_sft_lpi_1 & eeprocess_for_6_equal_tmp_17 & (~ single_loop_asn_sft_1_lpi_1_dfm_mx0)
          & padding_loop_2_or_tmp_2;
      padding_loop_2_and_253_itm_1 <= eeprocess_for_for_and_stg_3_7_sva_mx0 & (eeprocess_for_for_acc_psp_mx0_2_1[1])
          & eeprocess_for_6_eeprocess_for_6_nor_8_cse_1 & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0
          & single_loop_asn_sft_lpi_1 & eeprocess_for_6_equal_tmp_17 & (~ single_loop_asn_sft_1_lpi_1_dfm_mx0)
          & padding_loop_2_or_tmp_2;
      padding_loop_2_and_252_itm_1 <= eeprocess_for_for_and_stg_3_6_sva_mx0 & (eeprocess_for_for_acc_psp_mx0_2_1[1])
          & eeprocess_for_6_eeprocess_for_6_nor_8_cse_1 & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0
          & single_loop_asn_sft_lpi_1 & eeprocess_for_6_equal_tmp_17 & (~ single_loop_asn_sft_1_lpi_1_dfm_mx0)
          & padding_loop_2_or_tmp_2;
      padding_loop_2_and_251_itm_1 <= eeprocess_for_for_and_stg_3_5_sva_mx0 & (eeprocess_for_for_acc_psp_mx0_2_1[1])
          & eeprocess_for_6_eeprocess_for_6_nor_8_cse_1 & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0
          & single_loop_asn_sft_lpi_1 & eeprocess_for_6_equal_tmp_17 & (~ single_loop_asn_sft_1_lpi_1_dfm_mx0)
          & padding_loop_2_or_tmp_2;
      padding_loop_2_and_250_itm_1 <= eeprocess_for_for_and_stg_3_4_sva_mx0 & (eeprocess_for_for_acc_psp_mx0_2_1[1])
          & eeprocess_for_6_eeprocess_for_6_nor_8_cse_1 & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0
          & single_loop_asn_sft_lpi_1 & eeprocess_for_6_equal_tmp_17 & (~ single_loop_asn_sft_1_lpi_1_dfm_mx0)
          & padding_loop_2_or_tmp_2;
      padding_loop_2_and_249_itm_1 <= eeprocess_for_for_and_stg_3_3_sva_mx0 & (eeprocess_for_for_acc_psp_mx0_2_1[1])
          & eeprocess_for_6_eeprocess_for_6_nor_8_cse_1 & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0
          & single_loop_asn_sft_lpi_1 & eeprocess_for_6_equal_tmp_17 & (~ single_loop_asn_sft_1_lpi_1_dfm_mx0)
          & padding_loop_2_or_tmp_2;
      padding_loop_2_and_248_itm_1 <= eeprocess_for_for_and_stg_3_2_sva_mx0 & (eeprocess_for_for_acc_psp_mx0_2_1[1])
          & eeprocess_for_6_eeprocess_for_6_nor_8_cse_1 & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0
          & single_loop_asn_sft_lpi_1 & eeprocess_for_6_equal_tmp_17 & (~ single_loop_asn_sft_1_lpi_1_dfm_mx0)
          & padding_loop_2_or_tmp_2;
      padding_loop_2_and_247_itm_1 <= eeprocess_for_for_and_stg_3_1_sva_mx0 & (eeprocess_for_for_acc_psp_mx0_2_1[1])
          & eeprocess_for_6_eeprocess_for_6_nor_8_cse_1 & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0
          & single_loop_asn_sft_lpi_1 & eeprocess_for_6_equal_tmp_17 & (~ single_loop_asn_sft_1_lpi_1_dfm_mx0)
          & padding_loop_2_or_tmp_2;
      padding_loop_2_and_246_itm_1 <= eeprocess_for_for_and_stg_3_0_sva_mx0 & (eeprocess_for_for_acc_psp_mx0_2_1[1])
          & eeprocess_for_6_eeprocess_for_6_nor_8_cse_1 & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0
          & single_loop_asn_sft_lpi_1 & eeprocess_for_6_equal_tmp_17 & (~ single_loop_asn_sft_1_lpi_1_dfm_mx0)
          & padding_loop_2_or_tmp_2;
      padding_loop_2_and_245_itm_1 <= eeprocess_for_for_and_stg_2_7_sva_mx0 & (eeprocess_for_for_acc_psp_mx0_2_1==2'b01)
          & eeprocess_for_6_eeprocess_for_6_nor_8_cse_1 & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0
          & single_loop_asn_sft_lpi_1 & eeprocess_for_6_equal_tmp_17 & (~ single_loop_asn_sft_1_lpi_1_dfm_mx0)
          & padding_loop_2_or_tmp_2;
      padding_loop_2_and_244_itm_1 <= eeprocess_for_for_and_stg_2_6_sva_mx0 & (eeprocess_for_for_acc_psp_mx0_2_1==2'b01)
          & eeprocess_for_6_eeprocess_for_6_nor_8_cse_1 & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0
          & single_loop_asn_sft_lpi_1 & eeprocess_for_6_equal_tmp_17 & (~ single_loop_asn_sft_1_lpi_1_dfm_mx0)
          & padding_loop_2_or_tmp_2;
      padding_loop_2_and_243_itm_1 <= eeprocess_for_for_and_stg_2_5_sva_mx0 & (eeprocess_for_for_acc_psp_mx0_2_1==2'b01)
          & eeprocess_for_6_eeprocess_for_6_nor_8_cse_1 & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0
          & single_loop_asn_sft_lpi_1 & eeprocess_for_6_equal_tmp_17 & (~ single_loop_asn_sft_1_lpi_1_dfm_mx0)
          & padding_loop_2_or_tmp_2;
      padding_loop_2_and_242_itm_1 <= eeprocess_for_for_and_stg_2_3_sva_mx0 & (eeprocess_for_for_acc_psp_mx0_2_1==2'b01)
          & eeprocess_for_6_eeprocess_for_6_nor_8_cse_1 & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0
          & single_loop_asn_sft_lpi_1 & eeprocess_for_6_equal_tmp_17 & (~ single_loop_asn_sft_1_lpi_1_dfm_mx0)
          & padding_loop_2_or_tmp_2;
      padding_loop_2_and_241_itm_1 <= eeprocess_for_for_and_stg_2_2_sva_mx0 & (eeprocess_for_for_acc_psp_mx0_2_1==2'b01)
          & eeprocess_for_6_eeprocess_for_6_nor_8_cse_1 & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0
          & single_loop_asn_sft_lpi_1 & eeprocess_for_6_equal_tmp_17 & (~ single_loop_asn_sft_1_lpi_1_dfm_mx0)
          & padding_loop_2_or_tmp_2;
      padding_loop_2_and_240_itm_1 <= eeprocess_for_for_and_stg_2_1_sva_mx0 & (eeprocess_for_for_acc_psp_mx0_2_1==2'b01)
          & eeprocess_for_6_eeprocess_for_6_nor_8_cse_1 & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0
          & single_loop_asn_sft_lpi_1 & eeprocess_for_6_equal_tmp_17 & (~ single_loop_asn_sft_1_lpi_1_dfm_mx0)
          & padding_loop_2_or_tmp_2;
      padding_loop_2_and_239_itm_1 <= eeprocess_for_for_and_stg_3_8_sva_mx0 & (~
          (eeprocess_for_for_acc_psp_mx0_2_1[1])) & eeprocess_for_6_eeprocess_for_6_nor_8_cse_1
          & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0 & single_loop_asn_sft_lpi_1
          & eeprocess_for_6_equal_tmp_17 & (~ single_loop_asn_sft_1_lpi_1_dfm_mx0)
          & padding_loop_2_or_tmp_2;
      padding_loop_2_and_238_itm_1 <= eeprocess_for_for_and_stg_3_7_sva_mx0 & (~
          (eeprocess_for_for_acc_psp_mx0_2_1[1])) & eeprocess_for_6_eeprocess_for_6_nor_8_cse_1
          & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0 & single_loop_asn_sft_lpi_1
          & eeprocess_for_6_equal_tmp_17 & (~ single_loop_asn_sft_1_lpi_1_dfm_mx0)
          & padding_loop_2_or_tmp_2;
      padding_loop_2_and_237_itm_1 <= eeprocess_for_for_and_stg_3_6_sva_mx0 & (~
          (eeprocess_for_for_acc_psp_mx0_2_1[1])) & eeprocess_for_6_eeprocess_for_6_nor_8_cse_1
          & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0 & single_loop_asn_sft_lpi_1
          & eeprocess_for_6_equal_tmp_17 & (~ single_loop_asn_sft_1_lpi_1_dfm_mx0)
          & padding_loop_2_or_tmp_2;
      padding_loop_2_and_236_itm_1 <= eeprocess_for_for_and_stg_3_5_sva_mx0 & (~
          (eeprocess_for_for_acc_psp_mx0_2_1[1])) & eeprocess_for_6_eeprocess_for_6_nor_8_cse_1
          & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0 & single_loop_asn_sft_lpi_1
          & eeprocess_for_6_equal_tmp_17 & (~ single_loop_asn_sft_1_lpi_1_dfm_mx0)
          & padding_loop_2_or_tmp_2;
      padding_loop_2_and_235_itm_1 <= eeprocess_for_for_and_stg_3_4_sva_mx0 & (~
          (eeprocess_for_for_acc_psp_mx0_2_1[1])) & eeprocess_for_6_eeprocess_for_6_nor_8_cse_1
          & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0 & single_loop_asn_sft_lpi_1
          & eeprocess_for_6_equal_tmp_17 & (~ single_loop_asn_sft_1_lpi_1_dfm_mx0)
          & padding_loop_2_or_tmp_2;
      padding_loop_2_and_234_itm_1 <= eeprocess_for_for_and_stg_3_3_sva_mx0 & (~
          (eeprocess_for_for_acc_psp_mx0_2_1[1])) & eeprocess_for_6_eeprocess_for_6_nor_8_cse_1
          & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0 & single_loop_asn_sft_lpi_1
          & eeprocess_for_6_equal_tmp_17 & (~ single_loop_asn_sft_1_lpi_1_dfm_mx0)
          & padding_loop_2_or_tmp_2;
      padding_loop_2_and_233_itm_1 <= eeprocess_for_for_and_stg_3_2_sva_mx0 & (~
          (eeprocess_for_for_acc_psp_mx0_2_1[1])) & eeprocess_for_6_eeprocess_for_6_nor_8_cse_1
          & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0 & single_loop_asn_sft_lpi_1
          & eeprocess_for_6_equal_tmp_17 & (~ single_loop_asn_sft_1_lpi_1_dfm_mx0)
          & padding_loop_2_or_tmp_2;
      padding_loop_2_and_232_itm_1 <= eeprocess_for_for_and_stg_3_1_sva_mx0 & (~
          (eeprocess_for_for_acc_psp_mx0_2_1[1])) & eeprocess_for_6_eeprocess_for_6_nor_8_cse_1
          & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0 & single_loop_asn_sft_lpi_1
          & eeprocess_for_6_equal_tmp_17 & (~ single_loop_asn_sft_1_lpi_1_dfm_mx0)
          & padding_loop_2_or_tmp_2;
      padding_loop_2_and_231_itm_1 <= eeprocess_for_for_and_stg_3_0_sva_mx0 & (~
          (eeprocess_for_for_acc_psp_mx0_2_1[1])) & eeprocess_for_6_eeprocess_for_6_nor_8_cse_1
          & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0 & single_loop_asn_sft_lpi_1
          & eeprocess_for_6_equal_tmp_17 & (~ single_loop_asn_sft_1_lpi_1_dfm_mx0)
          & padding_loop_2_or_tmp_2;
      padding_loop_2_and_180_itm_1 <= eeprocess_for_for_and_stg_2_4_sva_mx0 & (eeprocess_for_for_acc_psp_mx0_2_1==2'b01)
          & eeprocess_for_6_eeprocess_for_6_nor_8_cse_1 & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0
          & single_loop_asn_sft_lpi_1 & eeprocess_for_6_equal_tmp_17 & (~ single_loop_asn_sft_1_lpi_1_dfm_mx0)
          & padding_loop_2_or_tmp_2;
      single_loop_and_213_tmp_1 <= single_loop_and_207_tmp_1;
      single_loop_if_1_asn_sft_lpi_1_dfm_1 <= single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0;
      eeprocess_for_6_or_13_tmp_1 <= eeprocess_for_6_or_18_tmp_1;
      padding_loop_2_equal_tmp_1 <= padding_loop_2_equal_tmp_4;
      padding_loop_2_equal_tmp_3_1 <= padding_loop_2_equal_tmp_5;
      lfst_exitL_exit_padding_loop_2_lpi_1_dfm_st_1_1 <= lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1;
      lfst_exitL_exit_padding_loop_2_lpi_1_dfm_st_1_0 <= lfst_exitL_exit_padding_loop_2_lpi_1_dfm_0_1;
      reg_src_rsci_oswt_cse <= mux_tmp_120;
      l_lpi_1_1_0 <= MUX_v_2_2_2(2'b00, padding_loop_2_mux_34_nl, eeprocess_for_6_or_550_nl);
      eeprocess_l_2_1_0_lpi_1 <= MUX_v_2_2_2(2'b00, mux_168_nl, nor_82_nl);
      eeprocess_l_3_1_0_lpi_1 <= MUX_v_2_2_2(2'b00, mux_169_nl, nor_81_nl);
      eeprocess_l_1_0_lpi_1 <= MUX_v_2_2_2(2'b00, mux_170_nl, nor_80_nl);
      i_lpi_1 <= MUX_v_13_2_2(13'b0000000000000, mux_167_nl, nand_67_nl);
      sfi_ee_top_eb_lpi_1 <= padding_loop_2_mux_43_nl & (~ padding_loop_2_equal_tmp_4);
      lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_1 <= padding_loop_2_padding_loop_2_or_3_tmp;
      exitL_exitL_exit_padding_loop_2_sva <= ~(padding_loop_2_padding_loop_2_or_3_tmp
          | padding_loop_2_padding_loop_2_or_2_tmp);
      lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_0 <= padding_loop_2_padding_loop_2_or_2_tmp;
      i_1_lpi_1 <= MUX_v_13_2_2(i_1_lpi_1_dfm_3, (z_out_19[12:0]), and_142_nl);
      n_lpi_1 <= MUX_v_26_2_2(z_out_18, n_lpi_1_dfm_1, or_477_nl);
      count_lpi_1 <= MUX_v_13_2_2(count_lpi_1_dfm_1, (z_out_17[12:0]), mux_tmp_120);
      main_stage_0_2 <= 1'b1;
      main_stage_0_3 <= main_stage_0_2;
      operator_3_false_12_acc_cse_sva_1_2 <= operator_3_false_12_acc_tmp[2];
      eeprocess_for_6_equal_tmp_8_1 <= MUX_s_1_2_2(lfst_exit_padding_loop_2_lpi_1_dfm_0_1,
          eeprocess_for_6_equal_tmp_9, lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_0);
      block_refresh_loop_in_and_stg_3_4_sva_1 <= block_refresh_loop_in_and_stg_3_4_sva_1_1;
      block_refresh_loop_in_acc_decb_sva_1_4 <= MUX_s_1_2_2((block_refresh_loop_in_acc_psp_mx0w0[2]),
          (reg_block_refresh_loop_in_acc_psp_ftd[1]), and_149_nl);
      padding_loop_2_and_54_itm_1 <= block_refresh_loop_in_and_stg_3_7_sva_1 & (block_refresh_loop_in_acc_psp_mx0_2_1[1])
          & eeprocess_for_6_eeprocess_for_6_nor_cse_1 & padding_loop_2_padding_loop_2_nor_cse_1;
      padding_loop_2_and_53_itm_1 <= block_refresh_loop_in_and_stg_3_6_sva_1 & (block_refresh_loop_in_acc_psp_mx0_2_1[1])
          & eeprocess_for_6_eeprocess_for_6_nor_cse_1 & padding_loop_2_padding_loop_2_nor_cse_1;
      padding_loop_2_and_52_itm_1 <= block_refresh_loop_in_and_stg_3_5_sva_1 & (block_refresh_loop_in_acc_psp_mx0_2_1[1])
          & eeprocess_for_6_eeprocess_for_6_nor_cse_1 & padding_loop_2_padding_loop_2_nor_cse_1;
      padding_loop_2_and_51_itm_1 <= block_refresh_loop_in_and_stg_3_4_sva_1_1 &
          (block_refresh_loop_in_acc_psp_mx0_2_1[1]) & eeprocess_for_6_eeprocess_for_6_nor_cse_1
          & padding_loop_2_padding_loop_2_nor_cse_1;
      padding_loop_2_and_50_itm_1 <= block_refresh_loop_in_and_stg_3_2_sva_1 & (block_refresh_loop_in_acc_psp_mx0_2_1[1])
          & eeprocess_for_6_eeprocess_for_6_nor_cse_1 & padding_loop_2_padding_loop_2_nor_cse_1;
      padding_loop_2_and_49_itm_1 <= block_refresh_loop_in_and_stg_3_1_sva_1 & (block_refresh_loop_in_acc_psp_mx0_2_1[1])
          & eeprocess_for_6_eeprocess_for_6_nor_cse_1 & padding_loop_2_padding_loop_2_nor_cse_1;
      padding_loop_2_and_48_itm_1 <= block_refresh_loop_in_and_stg_3_0_sva_1 & (block_refresh_loop_in_acc_psp_mx0_2_1[1])
          & eeprocess_for_6_eeprocess_for_6_nor_cse_1 & padding_loop_2_padding_loop_2_nor_cse_1;
      padding_loop_2_and_47_itm_1 <= block_refresh_loop_in_and_stg_2_7_sva_1 & (block_refresh_loop_in_acc_psp_mx0_2_1==2'b01)
          & eeprocess_for_6_eeprocess_for_6_nor_cse_1 & padding_loop_2_padding_loop_2_nor_cse_1;
      padding_loop_2_and_46_itm_1 <= block_refresh_loop_in_and_stg_2_5_sva_1 & (block_refresh_loop_in_acc_psp_mx0_2_1==2'b01)
          & eeprocess_for_6_eeprocess_for_6_nor_cse_1 & padding_loop_2_padding_loop_2_nor_cse_1;
      padding_loop_2_and_45_itm_1 <= block_refresh_loop_in_and_stg_2_4_sva_1 & (block_refresh_loop_in_acc_psp_mx0_2_1==2'b01)
          & eeprocess_for_6_eeprocess_for_6_nor_cse_1 & padding_loop_2_padding_loop_2_nor_cse_1;
      padding_loop_2_and_44_itm_1 <= block_refresh_loop_in_and_stg_2_3_sva_1 & (block_refresh_loop_in_acc_psp_mx0_2_1==2'b01)
          & eeprocess_for_6_eeprocess_for_6_nor_cse_1 & padding_loop_2_padding_loop_2_nor_cse_1;
      padding_loop_2_and_43_itm_1 <= block_refresh_loop_in_and_stg_2_2_sva_1 & (block_refresh_loop_in_acc_psp_mx0_2_1==2'b01)
          & eeprocess_for_6_eeprocess_for_6_nor_cse_1 & padding_loop_2_padding_loop_2_nor_cse_1;
      padding_loop_2_and_42_itm_1 <= block_refresh_loop_in_and_stg_2_0_sva_1 & (block_refresh_loop_in_acc_psp_mx0_2_1[0])
          & eeprocess_for_6_eeprocess_for_6_nor_cse_1 & padding_loop_2_padding_loop_2_nor_cse_1;
      padding_loop_2_and_41_itm_1 <= block_refresh_loop_in_and_stg_3_7_sva_1 & (~
          (block_refresh_loop_in_acc_psp_mx0_2_1[1])) & eeprocess_for_6_eeprocess_for_6_nor_cse_1
          & padding_loop_2_padding_loop_2_nor_cse_1;
      padding_loop_2_and_40_itm_1 <= block_refresh_loop_in_and_stg_3_6_sva_1 & (~
          (block_refresh_loop_in_acc_psp_mx0_2_1[1])) & eeprocess_for_6_eeprocess_for_6_nor_cse_1
          & padding_loop_2_padding_loop_2_nor_cse_1;
      padding_loop_2_and_39_itm_1 <= block_refresh_loop_in_and_stg_3_5_sva_1 & (~
          (block_refresh_loop_in_acc_psp_mx0_2_1[1])) & eeprocess_for_6_eeprocess_for_6_nor_cse_1
          & padding_loop_2_padding_loop_2_nor_cse_1;
      single_loop_for_nor_tmp_1 <= ~((k_2_lpi_1_1_0!=2'b00));
      eeprocess_for_6_equal_tmp_1 <= eeprocess_for_6_equal_tmp_15;
      eeprocess_for_6_or_tmp_1 <= eeprocess_for_6_or_tmp_3;
      eeprocess_for_6_equal_tmp_1_1 <= eeprocess_for_6_equal_tmp_16;
      eeprocess_for_6_equal_tmp_2_1 <= eeprocess_for_6_equal_tmp_17;
      eeprocess_for_6_nor_tmp_1_1 <= eeprocess_for_6_nor_tmp_1;
      padding_loop_2_and_38_itm_1 <= block_refresh_loop_in_and_stg_2_3_sva_1 & (~
          (block_refresh_loop_in_acc_psp_mx0_2_1[0])) & eeprocess_for_6_eeprocess_for_6_nor_cse_1
          & padding_loop_2_padding_loop_2_nor_cse_1;
      padding_loop_2_and_37_itm_1 <= block_refresh_loop_in_and_stg_3_2_sva_1 & (~
          (block_refresh_loop_in_acc_psp_mx0_2_1[1])) & eeprocess_for_6_eeprocess_for_6_nor_cse_1
          & padding_loop_2_padding_loop_2_nor_cse_1;
      padding_loop_2_and_36_itm_1 <= block_refresh_loop_in_and_stg_3_1_sva_1 & (~
          (block_refresh_loop_in_acc_psp_mx0_2_1[1])) & eeprocess_for_6_eeprocess_for_6_nor_cse_1
          & padding_loop_2_padding_loop_2_nor_cse_1;
      padding_loop_2_and_35_itm_1 <= block_refresh_loop_in_and_stg_3_0_sva_1 & (~
          (block_refresh_loop_in_acc_psp_mx0_2_1[1])) & eeprocess_for_6_eeprocess_for_6_nor_cse_1
          & padding_loop_2_padding_loop_2_nor_cse_1;
      single_loop_asn_sft_1_lpi_1_dfm_1 <= single_loop_asn_sft_1_lpi_1_dfm_mx0;
      padding_loop_2_and_142_itm_1 <= (k_2_lpi_1_1_0==2'b11) & eeprocess_for_6_equal_tmp_15
          & (~ single_loop_asn_sft_1_lpi_1_dfm_mx0) & padding_loop_2_or_tmp_2;
      padding_loop_2_and_141_itm_1 <= (k_2_lpi_1_1_0==2'b10) & eeprocess_for_6_equal_tmp_15
          & (~ single_loop_asn_sft_1_lpi_1_dfm_mx0) & padding_loop_2_or_tmp_2;
      padding_loop_2_and_140_itm_1 <= (k_2_lpi_1_1_0==2'b01) & eeprocess_for_6_equal_tmp_15
          & (~ single_loop_asn_sft_1_lpi_1_dfm_mx0) & padding_loop_2_or_tmp_2;
      eeprocess_for_for_and_stg_3_0_sva <= eeprocess_for_for_and_stg_3_0_sva_mx0;
      eeprocess_for_for_and_stg_3_1_sva <= eeprocess_for_for_and_stg_3_1_sva_mx0;
      eeprocess_for_for_and_stg_2_1_sva <= eeprocess_for_for_and_stg_2_1_sva_mx0;
      eeprocess_for_for_and_stg_3_2_sva <= eeprocess_for_for_and_stg_3_2_sva_mx0;
      eeprocess_for_for_and_stg_2_2_sva <= eeprocess_for_for_and_stg_2_2_sva_mx0;
      eeprocess_for_for_and_stg_3_3_sva <= eeprocess_for_for_and_stg_3_3_sva_mx0;
      eeprocess_for_for_and_stg_2_3_sva <= eeprocess_for_for_and_stg_2_3_sva_mx0;
      eeprocess_for_for_and_stg_3_4_sva <= eeprocess_for_for_and_stg_3_4_sva_mx0;
      eeprocess_for_for_and_stg_2_4_sva <= eeprocess_for_for_and_stg_2_4_sva_mx0;
      eeprocess_for_for_and_stg_3_5_sva <= eeprocess_for_for_and_stg_3_5_sva_mx0;
      eeprocess_for_for_and_stg_2_5_sva <= eeprocess_for_for_and_stg_2_5_sva_mx0;
      eeprocess_for_for_and_stg_3_6_sva <= eeprocess_for_for_and_stg_3_6_sva_mx0;
      eeprocess_for_for_and_stg_2_6_sva <= eeprocess_for_for_and_stg_2_6_sva_mx0;
      eeprocess_for_for_and_stg_3_7_sva <= eeprocess_for_for_and_stg_3_7_sva_mx0;
      eeprocess_for_for_and_stg_2_7_sva <= eeprocess_for_for_and_stg_2_7_sva_mx0;
      eeprocess_for_for_and_stg_3_8_sva <= eeprocess_for_for_and_stg_3_8_sva_mx0;
      single_loop_if_1_if_1_single_loop_if_1_if_1_or_itm_1 <= ((~ (readslicef_13_1_12(operator_13_false_acc_nl)))
          & (i_1_lpi_1_dfm_3[1:0]==2'b10)) | (readslicef_14_1_13(operator_13_false_2_acc_nl));
      exitL_exit_eeprocess_for_6_lpi_1_dfm_st_1 <= MUX_s_1_2_2(lfst_exit_padding_loop_2_lpi_1_dfm_1_1,
          exitL_exit_eeprocess_for_6_lpi_1_dfm_1, lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_0);
      padding_loop_3_padding_loop_3_nor_itm_1 <= MUX_s_1_2_2(padding_loop_3_padding_loop_3_nor_nl,
          (~ lfst_exitL_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_1), or_dcpl_315);
      padding_loop_2_and_155_itm_1 <= padding_loop_2_and_153_itm_1;
      padding_loop_2_and_143_itm_1 <= (single_loop_for_acc_3_tmp[2]) & eeprocess_for_6_equal_tmp_15
          & (~ single_loop_asn_sft_1_lpi_1_dfm_mx0) & padding_loop_2_or_tmp_2;
      reg_operator_3_false_2_acc_psp_ftd <= operator_3_false_2_acc_psp_sva_mx0_2;
      reg_operator_3_false_6_acc_psp_ftd <= operator_3_false_6_acc_psp_sva_mx0_2;
      reg_operator_3_false_10_acc_psp_ftd <= operator_3_false_10_acc_psp_sva_mx0_2;
      reg_eeprocess_for_for_acc_psp_ftd <= eeprocess_for_for_acc_psp_mx0_2_1;
      reg_block_refresh_loop_in_acc_psp_ftd <= block_refresh_loop_in_acc_psp_mx0_2_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dst_rsci_idat_35_24 <= 12'b000000000000;
      dst_rsci_idat_11_0 <= 12'b000000000000;
      dst_rsci_idat_23_12 <= 12'b000000000000;
    end
    else if ( single_loop_if_1_if_1_and_cse ) begin
      dst_rsci_idat_35_24 <= MUX1HOT_v_12_6_2(dst_out_1_35_24_lpi_1_dfm_2_1, (src_in_lpi_1_dfm_1[35:24]),
          (ee_lines_rsc_0_0_i_q_d_mxwt[35:24]), (ee_lines_rsc_0_1_i_q_d_mxwt[35:24]),
          (ee_lines_rsc_0_2_i_q_d_mxwt[35:24]), (ee_lines_rsc_0_3_i_q_d_mxwt[35:24]),
          {and_dcpl_94 , and_dcpl_99 , dst_out_and_11_cse , dst_out_and_12_cse ,
          dst_out_and_13_cse , dst_out_and_14_cse});
      dst_rsci_idat_11_0 <= MUX1HOT_v_12_6_2(dst_out_1_11_0_lpi_1_dfm_2_1, (src_in_lpi_1_dfm_1[11:0]),
          (ee_lines_rsc_0_0_i_q_d_mxwt[11:0]), (ee_lines_rsc_0_1_i_q_d_mxwt[11:0]),
          (ee_lines_rsc_0_2_i_q_d_mxwt[11:0]), (ee_lines_rsc_0_3_i_q_d_mxwt[11:0]),
          {and_dcpl_94 , and_dcpl_99 , dst_out_and_11_cse , dst_out_and_12_cse ,
          dst_out_and_13_cse , dst_out_and_14_cse});
      dst_rsci_idat_23_12 <= MUX1HOT_v_12_6_2(dst_out_1_23_12_lpi_1_dfm_2_1, (src_in_lpi_1_dfm_1[23:12]),
          (ee_lines_rsc_0_0_i_q_d_mxwt[23:12]), (ee_lines_rsc_0_1_i_q_d_mxwt[23:12]),
          (ee_lines_rsc_0_2_i_q_d_mxwt[23:12]), (ee_lines_rsc_0_3_i_q_d_mxwt[23:12]),
          {and_dcpl_94 , and_dcpl_99 , dst_out_and_11_cse , dst_out_and_12_cse ,
          dst_out_and_13_cse , dst_out_and_14_cse});
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      eeprocess_sharpen_threhold_b_1_lpi_1 <= 23'b00000000000000000000000;
      eeprocess_sharpen_threhold_g_1_lpi_1 <= 23'b00000000000000000000000;
      eeprocess_sharpen_threhold_r_1_lpi_1 <= 23'b00000000000000000000000;
    end
    else if ( eeprocess_sharpen_threhold_b_and_cse ) begin
      eeprocess_sharpen_threhold_b_1_lpi_1 <= MUX_v_23_2_2(eeprocess_sharpen_threhold_b_1_sva_2,
          eeprocess_sharpen_threhold_b_1_lpi_1_dfm_mx1w1, and_dcpl_111);
      eeprocess_sharpen_threhold_g_1_lpi_1 <= MUX_v_23_2_2(eeprocess_sharpen_threhold_g_1_sva_2,
          eeprocess_sharpen_threhold_g_1_lpi_1_dfm_mx1w1, and_dcpl_111);
      eeprocess_sharpen_threhold_r_1_lpi_1 <= MUX_v_23_2_2(eeprocess_sharpen_threhold_r_1_sva_2,
          eeprocess_sharpen_threhold_r_1_lpi_1_dfm_mx1w1, and_dcpl_111);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ee_block_1_3_lpi_1 <= 36'b000000000000000000000000000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop_2_and_42_itm_1 ) begin
      ee_block_1_3_lpi_1 <= block_refresh_loop_in_block_refresh_loop_in_slc_ee_block_36_35_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ee_block_2_0_lpi_1 <= 36'b000000000000000000000000000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop_2_and_43_itm_1 ) begin
      ee_block_2_0_lpi_1 <= block_refresh_loop_in_block_refresh_loop_in_slc_ee_block_36_35_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ee_block_2_1_lpi_1 <= 36'b000000000000000000000000000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop_2_and_44_itm_1 ) begin
      ee_block_2_1_lpi_1 <= block_refresh_loop_in_block_refresh_loop_in_slc_ee_block_36_35_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ee_block_2_2_lpi_1 <= 36'b000000000000000000000000000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop_2_and_45_itm_1 ) begin
      ee_block_2_2_lpi_1 <= block_refresh_loop_in_block_refresh_loop_in_slc_ee_block_36_35_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ee_block_2_3_lpi_1 <= 36'b000000000000000000000000000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop_2_and_46_itm_1 ) begin
      ee_block_2_3_lpi_1 <= block_refresh_loop_in_block_refresh_loop_in_slc_ee_block_36_35_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ee_block_3_0_lpi_1 <= 36'b000000000000000000000000000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop_2_and_47_itm_1 ) begin
      ee_block_3_0_lpi_1 <= block_refresh_loop_in_block_refresh_loop_in_slc_ee_block_36_35_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ee_block_3_1_lpi_1 <= 36'b000000000000000000000000000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop_2_and_48_itm_1 ) begin
      ee_block_3_1_lpi_1 <= block_refresh_loop_in_block_refresh_loop_in_slc_ee_block_36_35_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ee_block_3_2_lpi_1 <= 36'b000000000000000000000000000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop_2_and_49_itm_1 ) begin
      ee_block_3_2_lpi_1 <= block_refresh_loop_in_block_refresh_loop_in_slc_ee_block_36_35_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ee_block_3_3_lpi_1 <= 36'b000000000000000000000000000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop_2_and_50_itm_1 ) begin
      ee_block_3_3_lpi_1 <= block_refresh_loop_in_block_refresh_loop_in_slc_ee_block_36_35_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ee_block_4_0_lpi_1 <= 36'b000000000000000000000000000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop_2_and_51_itm_1 ) begin
      ee_block_4_0_lpi_1 <= block_refresh_loop_in_block_refresh_loop_in_slc_ee_block_36_35_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ee_block_4_1_lpi_1 <= 36'b000000000000000000000000000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop_2_and_52_itm_1 ) begin
      ee_block_4_1_lpi_1 <= block_refresh_loop_in_block_refresh_loop_in_slc_ee_block_36_35_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ee_block_4_2_lpi_1 <= 36'b000000000000000000000000000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop_2_and_53_itm_1 ) begin
      ee_block_4_2_lpi_1 <= block_refresh_loop_in_block_refresh_loop_in_slc_ee_block_36_35_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ee_block_4_3_lpi_1 <= 36'b000000000000000000000000000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop_2_and_54_itm_1 ) begin
      ee_block_4_3_lpi_1 <= block_refresh_loop_in_block_refresh_loop_in_slc_ee_block_36_35_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ee_block_0_0_lpi_1 <= 36'b000000000000000000000000000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop_2_and_35_itm_1 ) begin
      ee_block_0_0_lpi_1 <= block_refresh_loop_in_block_refresh_loop_in_slc_ee_block_36_35_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ee_block_0_1_lpi_1 <= 36'b000000000000000000000000000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop_2_and_36_itm_1 ) begin
      ee_block_0_1_lpi_1 <= block_refresh_loop_in_block_refresh_loop_in_slc_ee_block_36_35_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ee_block_0_2_lpi_1 <= 36'b000000000000000000000000000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop_2_and_37_itm_1 ) begin
      ee_block_0_2_lpi_1 <= block_refresh_loop_in_block_refresh_loop_in_slc_ee_block_36_35_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ee_block_0_3_lpi_1 <= 36'b000000000000000000000000000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop_2_and_38_itm_1 ) begin
      ee_block_0_3_lpi_1 <= block_refresh_loop_in_block_refresh_loop_in_slc_ee_block_36_35_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ee_block_1_0_lpi_1 <= 36'b000000000000000000000000000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop_2_and_39_itm_1 ) begin
      ee_block_1_0_lpi_1 <= block_refresh_loop_in_block_refresh_loop_in_slc_ee_block_36_35_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ee_block_1_1_lpi_1 <= 36'b000000000000000000000000000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop_2_and_40_itm_1 ) begin
      ee_block_1_1_lpi_1 <= block_refresh_loop_in_block_refresh_loop_in_slc_ee_block_36_35_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ee_block_1_2_lpi_1 <= 36'b000000000000000000000000000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop_2_and_41_itm_1 ) begin
      ee_block_1_2_lpi_1 <= block_refresh_loop_in_block_refresh_loop_in_slc_ee_block_36_35_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      src_in_lpi_1 <= 36'b000000000000000000000000000000000000;
    end
    else if ( core_wen & (~(or_dcpl_157 | padding_loop_2_equal_tmp_1 | padding_loop_2_equal_tmp_3_1
        | (~ sfi_exit_single_loop_lpi_1_dfm_1))) ) begin
      src_in_lpi_1 <= src_rsci_idat_mxwt;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_2 <= 1'b0;
      sfi_exit_single_loop_lpi_1_dfm <= 1'b0;
    end
    else if ( eeprocess_for_6_and_222_cse ) begin
      lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_2 <= lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_5_2_1;
      sfi_exit_single_loop_lpi_1_dfm <= ~ lfst_exitL_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      j_lpi_1 <= 13'b0000000000000;
    end
    else if ( core_wen & mux_tmp_120 ) begin
      j_lpi_1 <= nl_j_lpi_1[12:0];
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      k_3_lpi_1_1_0 <= 2'b00;
    end
    else if ( core_wen & (single_loop_and_13_cse_1 | single_loop_and_17_rgt) ) begin
      k_3_lpi_1_1_0 <= MUX_v_2_2_2(single_loop_for_single_loop_for_and_3_nl, (single_loop_for_1_acc_3_tmp[1:0]),
          single_loop_and_17_rgt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lfst_exit_eeprocess_for_6_lpi_1_0 <= 1'b0;
      lfst_exit_eeprocess_for_6_lpi_1_2_1 <= 2'b00;
    end
    else if ( eeprocess_for_6_and_223_cse ) begin
      lfst_exit_eeprocess_for_6_lpi_1_0 <= lfst_exit_eeprocess_for_6_lpi_1_dfm_8_0_1;
      lfst_exit_eeprocess_for_6_lpi_1_2_1 <= lfst_exit_eeprocess_for_6_lpi_1_dfm_8_2_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      sfi_single_loop_if_1_land_lpi_1 <= 1'b0;
    end
    else if ( core_wen & eeprocess_for_6_equal_tmp_17 & (~ single_loop_asn_sft_1_lpi_1_dfm_mx0)
        & (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1) ) begin
      sfi_single_loop_if_1_land_lpi_1 <= sfi_single_loop_if_1_land_lpi_1 & (~ single_loop_asn_sft_lpi_1);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      single_loop_if_1_land_lpi_1 <= 1'b0;
    end
    else if ( core_wen & sfi_ee_top_eb_1_lpi_1 & single_loop_asn_sft_lpi_1 & eeprocess_for_6_equal_tmp_17
        & (~ single_loop_asn_sft_1_lpi_1_dfm_mx0) & (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1)
        ) begin
      single_loop_if_1_land_lpi_1 <= single_loop_if_1_if_single_loop_if_1_if_and_tmp;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      eeprocess_l_1_lpi_1 <= 3'b000;
    end
    else if ( core_wen & (((~(operator_3_false_5_acc_itm_2_1 | eeprocess_for_6_or_18_tmp_1))
        & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0 & single_loop_and_207_tmp_1 &
        (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1)) | eeprocess_for_6_and_25_rgt)
        ) begin
      eeprocess_l_1_lpi_1 <= MUX_v_3_2_2((signext_3_1(~ operator_3_false_4_acc_itm_2_1)),
          eeprocess_l_1_sva_2, or_505_nl);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      eeprocess_k_2_lpi_1 <= 3'b000;
    end
    else if ( core_wen & (single_loop_if_1_and_8_cse_1 | single_loop_if_1_and_45_rgt)
        ) begin
      eeprocess_k_2_lpi_1 <= MUX_v_3_2_2(eeprocess_for_eeprocess_for_and_1_nl, eeprocess_k_2_sva_2,
          single_loop_if_1_and_45_rgt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      eeprocess_feq_l_1_11_1_lpi_1 <= 11'b00000000000;
    end
    else if ( core_wen & (padding_loop_2_asn_382 | (eeprocess_for_2_and_cse_sva_1
        & eeprocess_for_6_equal_tmp_13 & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0
        & single_loop_and_207_tmp_1 & (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1))
        | padding_loop_2_asn_384 | (eeprocess_for_4_and_cse_sva_1 & eeprocess_for_6_equal_tmp_11
        & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0 & single_loop_and_207_tmp_1 &
        (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1)) | padding_loop_2_asn_386
        | eeprocess_for_6_and_40_rgt) ) begin
      eeprocess_feq_l_1_11_1_lpi_1 <= z_out_4;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      eeprocess_feq_l_2_11_1_lpi_1 <= 11'b00000000000;
    end
    else if ( core_wen & (padding_loop_2_asn_376 | (eeprocess_for_2_and_1_cse_sva_1
        & eeprocess_for_6_equal_tmp_13 & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0
        & single_loop_and_207_tmp_1 & (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1))
        | padding_loop_2_asn_378 | (eeprocess_for_4_and_1_cse_sva_1 & eeprocess_for_6_equal_tmp_11
        & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0 & single_loop_and_207_tmp_1 &
        (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1)) | padding_loop_2_asn_380
        | eeprocess_for_6_and_52_rgt) ) begin
      eeprocess_feq_l_2_11_1_lpi_1 <= z_out_4;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      eeprocess_feq_h_1_lpi_1_13 <= 1'b0;
      eeprocess_feq_h_1_lpi_1_12_0 <= 13'b0000000000000;
    end
    else if ( eeprocess_feq_h_and_cse ) begin
      eeprocess_feq_h_1_lpi_1_13 <= MUX1HOT_s_1_4_2((z_out_19[13]), eeprocess_feq_h_1_lpi_1_dfm_2_13_1,
          eeprocess_feq_h_1_lpi_1_dfm_4_13_1, eeprocess_feq_h_1_lpi_1_dfm_6_13_1,
          {padding_loop_2_or_367_cse , single_loop_if_1_and_36_ssc_1 , single_loop_if_1_and_37_ssc_1
          , padding_loop_2_asn_390});
      eeprocess_feq_h_1_lpi_1_12_0 <= MUX1HOT_v_13_4_2(eeprocess_for_1_for_if_eeprocess_for_1_for_if_acc_1_pmx_lpi_1_dfm_12_0_mx1,
          eeprocess_feq_h_1_lpi_1_dfm_2_12_0_1, eeprocess_feq_h_1_lpi_1_dfm_4_12_0_1,
          eeprocess_feq_h_1_lpi_1_dfm_6_12_0_1, {padding_loop_2_or_367_cse , single_loop_if_1_and_36_ssc_1
          , single_loop_if_1_and_37_ssc_1 , padding_loop_2_asn_390});
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      eeprocess_feq_h_2_lpi_1_13 <= 1'b0;
      eeprocess_feq_h_2_lpi_1_12_0 <= 13'b0000000000000;
    end
    else if ( eeprocess_feq_h_and_2_cse ) begin
      eeprocess_feq_h_2_lpi_1_13 <= MUX1HOT_s_1_4_2((z_out_19[13]), eeprocess_feq_h_2_lpi_1_dfm_2_13_1,
          eeprocess_feq_h_2_lpi_1_dfm_4_13_1, eeprocess_feq_h_2_lpi_1_dfm_6_13_1,
          {padding_loop_2_or_366_cse , single_loop_if_1_and_36_ssc_1 , single_loop_if_1_and_37_ssc_1
          , padding_loop_2_asn_390});
      eeprocess_feq_h_2_lpi_1_12_0 <= MUX1HOT_v_13_4_2(eeprocess_for_1_for_if_eeprocess_for_1_for_if_acc_1_pmx_lpi_1_dfm_12_0_mx1,
          eeprocess_feq_h_2_lpi_1_dfm_2_12_0_1, eeprocess_feq_h_2_lpi_1_dfm_4_12_0_1,
          eeprocess_feq_h_2_lpi_1_dfm_6_12_0_1, {padding_loop_2_or_366_cse , single_loop_if_1_and_36_ssc_1
          , single_loop_if_1_and_37_ssc_1 , padding_loop_2_asn_390});
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      eeprocess_for_2_else_if_acc_cse_sva <= 14'b00000000000000;
    end
    else if ( core_wen & (~(eeprocess_for_2_acc_2_itm_13_1 | or_dcpl_252 | or_dcpl_259
        | or_dcpl_266 | or_dcpl_242)) ) begin
      eeprocess_for_2_else_if_acc_cse_sva <= z_out_19;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      eeprocess_result_v_1_11_1_lpi_1 <= 11'b00000000000;
    end
    else if ( core_wen & ((padding_loop_2_and_60_tmp_1 & single_loop_and_119_tmp_1
        & (~(eeprocess_for_6_or_tmp_2 | eeprocess_for_6_equal_tmp_13 | eeprocess_for_6_equal_tmp_11
        | eeprocess_for_6_equal_tmp_9 | eeprocess_for_6_and_126_cse_1 | eeprocess_for_6_and_128_cse_1
        | eeprocess_for_6_and_130_cse_1 | ((~ eeprocess_for_1_and_5_tmp_1) & eeprocess_for_6_and_125_m1c_1)
        | ((~ eeprocess_for_3_and_5_tmp_1) & eeprocess_for_6_and_127_m1c_1) | ((~
        eeprocess_for_5_and_5_tmp_1) & eeprocess_for_6_and_129_m1c_1)))) | (eeprocess_for_1_and_5_tmp_1
        & eeprocess_for_6_and_125_m1c_1 & single_loop_and_119_tmp_1 & padding_loop_2_and_60_tmp_1)
        | (eeprocess_for_3_and_5_tmp_1 & eeprocess_for_6_and_127_m1c_1 & single_loop_and_119_tmp_1
        & padding_loop_2_and_60_tmp_1) | (eeprocess_for_5_and_5_tmp_1 & eeprocess_for_6_and_129_m1c_1
        & single_loop_and_119_tmp_1 & padding_loop_2_and_60_tmp_1)) ) begin
      eeprocess_result_v_1_11_1_lpi_1 <= ee_clip_return_11_1_lpi_1_dfm_2;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      eeprocess_result_v_2_11_1_lpi_1 <= 11'b00000000000;
    end
    else if ( core_wen & ((padding_loop_2_and_60_tmp_1 & single_loop_and_119_tmp_1
        & (~(eeprocess_for_6_or_tmp_2 | eeprocess_for_6_equal_tmp_13 | eeprocess_for_6_equal_tmp_11
        | eeprocess_for_6_equal_tmp_9 | eeprocess_for_6_and_126_cse_1 | eeprocess_for_6_and_128_cse_1
        | eeprocess_for_6_and_130_cse_1 | ((~ eeprocess_for_1_and_4_tmp_1) & eeprocess_for_6_and_125_m1c_1)
        | ((~ eeprocess_for_3_and_4_tmp_1) & eeprocess_for_6_and_127_m1c_1) | ((~
        eeprocess_for_5_and_4_tmp_1) & eeprocess_for_6_and_129_m1c_1)))) | (eeprocess_for_1_and_4_tmp_1
        & eeprocess_for_6_and_125_m1c_1 & single_loop_and_119_tmp_1 & padding_loop_2_and_60_tmp_1)
        | (eeprocess_for_3_and_4_tmp_1 & eeprocess_for_6_and_127_m1c_1 & single_loop_and_119_tmp_1
        & padding_loop_2_and_60_tmp_1) | (eeprocess_for_5_and_4_tmp_1 & eeprocess_for_6_and_129_m1c_1
        & single_loop_and_119_tmp_1 & padding_loop_2_and_60_tmp_1)) ) begin
      eeprocess_result_v_2_11_1_lpi_1 <= ee_clip_return_11_1_lpi_1_dfm_2;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      eeprocess_result_v_3_11_1_lpi_1 <= 11'b00000000000;
    end
    else if ( core_wen & ((padding_loop_2_and_60_tmp_1 & single_loop_and_119_tmp_1
        & (~(eeprocess_for_6_or_tmp_2 | eeprocess_for_6_equal_tmp_13 | eeprocess_for_6_equal_tmp_11
        | eeprocess_for_6_equal_tmp_9 | eeprocess_for_6_and_126_cse_1 | eeprocess_for_6_and_128_cse_1
        | eeprocess_for_6_and_130_cse_1 | ((~ eeprocess_for_1_and_6_tmp_1) & eeprocess_for_6_and_125_m1c_1)
        | ((~ eeprocess_for_3_and_6_tmp_1) & eeprocess_for_6_and_127_m1c_1) | ((~
        eeprocess_for_5_and_6_tmp_1) & eeprocess_for_6_and_129_m1c_1)))) | (eeprocess_for_1_and_6_tmp_1
        & eeprocess_for_6_and_125_m1c_1 & single_loop_and_119_tmp_1 & padding_loop_2_and_60_tmp_1)
        | (eeprocess_for_3_and_6_tmp_1 & eeprocess_for_6_and_127_m1c_1 & single_loop_and_119_tmp_1
        & padding_loop_2_and_60_tmp_1) | (eeprocess_for_5_and_6_tmp_1 & eeprocess_for_6_and_129_m1c_1
        & single_loop_and_119_tmp_1 & padding_loop_2_and_60_tmp_1)) ) begin
      eeprocess_result_v_3_11_1_lpi_1 <= ee_clip_return_11_1_lpi_1_dfm_2;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      eeprocess_k_3_1_0_lpi_1 <= 2'b00;
    end
    else if ( core_wen & ((eeprocess_for_6_equal_tmp_14 & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0
        & single_loop_asn_sft_lpi_1 & single_loop_and_29_tmp_1 & (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1))
        | single_loop_if_1_and_25_rgt) ) begin
      eeprocess_k_3_1_0_lpi_1 <= MUX_v_2_2_2(eeprocess_for_1_eeprocess_for_1_and_nl,
          (operator_3_false_4_acc_tmp[1:0]), single_loop_if_1_and_25_rgt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ee_clip_return_11_1_lpi_1 <= 11'b00000000000;
    end
    else if ( core_wen & (~(or_dcpl_252 | or_dcpl_248 | (~ (operator_3_false_2_acc_tmp[2]))
        | lfst_exit_eeprocess_for_6_lpi_1_0 | or_dcpl_242)) ) begin
      ee_clip_return_11_1_lpi_1 <= ee_clip_return_11_1_lpi_1_dfm_2;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      eeprocess_k_4_lpi_1 <= 3'b000;
    end
    else if ( core_wen & (single_loop_if_1_and_36_ssc_1 | single_loop_if_1_and_47_rgt)
        ) begin
      eeprocess_k_4_lpi_1 <= MUX_v_3_2_2(eeprocess_for_2_eeprocess_for_2_and_nl,
          eeprocess_k_4_sva_2, single_loop_if_1_and_47_rgt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      eeprocess_for_4_else_if_acc_cse_sva <= 14'b00000000000000;
    end
    else if ( core_wen & (~(eeprocess_for_4_acc_2_itm_13_1 | or_dcpl_252 | or_dcpl_259
        | or_dcpl_266 | or_dcpl_270)) ) begin
      eeprocess_for_4_else_if_acc_cse_sva <= z_out_19;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      eeprocess_result_v_4_11_1_lpi_1 <= 11'b00000000000;
    end
    else if ( core_wen & ((operator_3_false_2_acc_psp_sva_mx0_2 & single_loop_if_1_and_9_m1c_1
        & padding_loop_2_and_153_itm_1) | (eeprocess_for_3_and_stg_1_0_sva_1 & (eeprocess_k_4_lpi_1[2])
        & operator_3_false_6_mux_2_nl & single_loop_if_1_and_11_m1c_1 & padding_loop_2_and_153_itm_1)
        | (eeprocess_for_5_and_stg_1_0_sva_1 & (eeprocess_k_6_lpi_1[2]) & operator_3_false_10_mux_2_nl
        & single_loop_if_1_and_13_m1c_1 & padding_loop_2_and_153_itm_1)) ) begin
      eeprocess_result_v_4_11_1_lpi_1 <= ee_clip_return_11_1_lpi_1_dfm_2;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      eeprocess_k_5_1_0_lpi_1 <= 2'b00;
    end
    else if ( core_wen & ((eeprocess_for_6_equal_tmp_12 & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0
        & single_loop_asn_sft_lpi_1 & single_loop_and_29_tmp_1 & (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1))
        | single_loop_if_1_and_27_rgt) ) begin
      eeprocess_k_5_1_0_lpi_1 <= MUX_v_2_2_2(eeprocess_for_3_eeprocess_for_3_and_nl,
          (operator_3_false_8_acc_tmp[1:0]), single_loop_if_1_and_27_rgt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      eeprocess_k_6_lpi_1 <= 3'b000;
    end
    else if ( core_wen & (single_loop_if_1_and_37_ssc_1 | single_loop_if_1_and_49_rgt)
        ) begin
      eeprocess_k_6_lpi_1 <= MUX_v_3_2_2(eeprocess_for_4_eeprocess_for_4_and_nl,
          z_out_11, single_loop_if_1_and_49_rgt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      eeprocess_for_6_else_if_acc_cse_sva <= 14'b00000000000000;
    end
    else if ( core_wen & (~(eeprocess_for_6_acc_2_itm_13_1 | or_dcpl_252 | or_dcpl_259
        | or_dcpl_266 | or_dcpl_293)) ) begin
      eeprocess_for_6_else_if_acc_cse_sva <= z_out_19;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      eeprocess_temp_g_lpi_1 <= 15'b000000000000000;
    end
    else if ( core_wen & (~(or_dcpl_252 | or_dcpl_248 | (~((operator_3_false_8_acc_tmp[2])
        & lfst_exit_eeprocess_for_6_lpi_1_0)) | or_dcpl_270)) ) begin
      eeprocess_temp_g_lpi_1 <= z_out_20;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      eeprocess_temp_r_lpi_1 <= 15'b000000000000000;
    end
    else if ( core_wen & (~(or_dcpl_252 | or_dcpl_248 | (~((operator_3_false_4_acc_tmp[2])
        & lfst_exit_eeprocess_for_6_lpi_1_0)) | or_dcpl_242)) ) begin
      eeprocess_temp_r_lpi_1 <= z_out_20;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      eeprocess_k_1_0_lpi_1 <= 2'b00;
    end
    else if ( core_wen & ((eeprocess_for_6_equal_tmp_10 & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0
        & single_loop_asn_sft_lpi_1 & single_loop_and_29_tmp_1 & (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1))
        | single_loop_if_1_and_21_rgt) ) begin
      eeprocess_k_1_0_lpi_1 <= MUX_v_2_2_2(eeprocess_for_5_eeprocess_for_5_and_nl,
          (operator_3_false_12_acc_tmp[1:0]), single_loop_if_1_and_21_rgt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      eeprocess_result_v_0_11_1_lpi_1 <= 11'b00000000000;
    end
    else if ( core_wen & (~((~(single_loop_and_207_tmp_1 & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0))
        | lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1)) ) begin
      eeprocess_result_v_0_11_1_lpi_1 <= MUX_v_11_2_2(eeprocess_result_v_0_11_1_lpi_1_dfm_1,
          ee_clip_return_11_1_lpi_1_dfm_2, padding_loop_2_or_368_nl);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      eeprocess_k_1_lpi_1 <= 3'b000;
    end
    else if ( core_wen & (((~ eeprocess_for_6_or_537_tmp_1) & single_loop_and_119_tmp_1
        & padding_loop_2_and_60_tmp_1) | single_loop_and_230_rgt) ) begin
      eeprocess_k_1_lpi_1 <= MUX_v_3_2_2(eeprocess_k_1_sva_2, eeprocess_k_1_lpi_1_dfm_1,
          single_loop_and_230_rgt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      single_loop_if_1_asn_sft_lpi_1 <= 1'b0;
    end
    else if ( core_wen & (~ lfst_exitL_exit_eeprocess_for_6_lpi_1_dfm_1) & single_loop_asn_sft_lpi_1
        & eeprocess_for_6_equal_tmp_17 & (~ single_loop_asn_sft_1_lpi_1_dfm_mx0)
        & (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1) ) begin
      single_loop_if_1_asn_sft_lpi_1 <= single_loop_if_1_aelse_mux_1_itm;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lfst_exitL_exit_eeprocess_for_6_lpi_1 <= 1'b0;
    end
    else if ( core_wen & single_loop_asn_sft_lpi_1 & eeprocess_for_6_equal_tmp_17
        & (~ single_loop_asn_sft_1_lpi_1_dfm_mx0) & (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1)
        ) begin
      lfst_exitL_exit_eeprocess_for_6_lpi_1 <= ~ exitL_exit_eeprocess_for_6_lpi_1_dfm_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      sfi_ee_top_eb_1_lpi_1 <= 1'b0;
    end
    else if ( core_wen & (~(single_loop_asn_sft_1_lpi_1_dfm_mx0 | lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1))
        ) begin
      sfi_ee_top_eb_1_lpi_1 <= eeprocess_for_6_mux_38_nl & (~ eeprocess_for_6_equal_tmp_17);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      single_loop_asn_sft_lpi_1 <= 1'b0;
    end
    else if ( core_wen & (single_loop_for_1_acc_3_tmp[2]) & eeprocess_for_6_equal_tmp_16
        & (~ single_loop_asn_sft_1_lpi_1_dfm_mx0) & (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1)
        ) begin
      single_loop_asn_sft_lpi_1 <= ee_top_eb;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_1_0 <= 2'b00;
      lfst_exitL_exitL_exitL_exit_eeprocess_for_6_lpi_1 <= 1'b0;
      exitL_exitL_exitL_exitL_exit_eeprocess_for_6_lpi_1 <= 1'b0;
    end
    else if ( eeprocess_for_6_and_227_cse ) begin
      lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_1_0 <= lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_5_1_0_1;
      lfst_exitL_exitL_exitL_exit_eeprocess_for_6_lpi_1 <= ~ exitL_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_1;
      exitL_exitL_exitL_exitL_exit_eeprocess_for_6_lpi_1 <= exitL_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      single_loop_asn_sft_1_lpi_1 <= 1'b0;
    end
    else if ( core_wen & (~(lfst_exitL_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_1
        | lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1)) ) begin
      single_loop_asn_sft_1_lpi_1 <= exit_single_loop_lpi_1_dfm_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lfst_exit_padding_loop_2_lpi_1_1 <= 1'b0;
      lfst_exit_padding_loop_2_lpi_1_0 <= 1'b0;
    end
    else if ( padding_loop_2_and_274_cse ) begin
      lfst_exit_padding_loop_2_lpi_1_1 <= lfst_exit_padding_loop_2_lpi_1_dfm_3_1_1;
      lfst_exit_padding_loop_2_lpi_1_0 <= lfst_exit_padding_loop_2_lpi_1_dfm_3_0_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      asn_sft_lpi_1 <= 1'b0;
    end
    else if ( core_wen & exit_single_loop_lpi_1_dfm_1 & (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1)
        ) begin
      asn_sft_lpi_1 <= ee_top_eb;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      ee_block_4_4_lpi_1 <= 36'b000000000000000000000000000000000000;
    end
    else if ( core_wen & main_stage_0_2 & padding_loop_2_and_143_itm_1 ) begin
      ee_block_4_4_lpi_1 <= src_in_lpi_1_dfm_1_mx0;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dst_out_1_11_0_lpi_1 <= 12'b000000000000;
      dst_out_1_23_12_lpi_1 <= 12'b000000000000;
      dst_out_1_35_24_lpi_1 <= 12'b000000000000;
    end
    else if ( dst_out_and_cse ) begin
      dst_out_1_11_0_lpi_1 <= dst_out_1_11_0_lpi_1_dfm_3;
      dst_out_1_23_12_lpi_1 <= dst_out_1_23_12_lpi_1_dfm_3;
      dst_out_1_35_24_lpi_1 <= dst_out_1_35_24_lpi_1_dfm_3;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      k_2_lpi_1_1_0 <= 2'b00;
    end
    else if ( core_wen & ((eeprocess_for_6_or_tmp_3 & (~ single_loop_asn_sft_1_lpi_1_dfm_mx0)
        & (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1)) | single_loop_and_13_cse_1)
        ) begin
      k_2_lpi_1_1_0 <= MUX_v_2_2_2(block_refresh_loop_out_block_refresh_loop_out_and_1_nl,
          (single_loop_for_acc_3_tmp[1:0]), single_loop_and_13_cse_1);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      k_1_lpi_1 <= 3'b000;
    end
    else if ( core_wen & (~ padding_loop_2_or_338_tmp_1) ) begin
      k_1_lpi_1 <= MUX_v_3_2_2(k_1_sva_2, k_1_lpi_1_dfm_1, padding_loop_2_padding_loop_2_nor_65_nl);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      k_0_lpi_1 <= 1'b0;
    end
    else if ( core_wen & (padding_loop_2_or_tmp_3 | padding_loop_2_and_26_rgt) &
        asn_sft_lpi_1 & (~ or_tmp_115) ) begin
      k_0_lpi_1 <= MUX_s_1_2_2(padding_loop_1_padding_loop_1_and_4_nl, (~ k_0_lpi_1),
          and_158_nl);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      k_4_0_lpi_1 <= 1'b0;
    end
    else if ( core_wen & asn_sft_lpi_1 & (~ or_tmp_115) ) begin
      k_4_0_lpi_1 <= MUX_s_1_2_2((~ k_4_0_lpi_1_dfm_1), k_4_0_lpi_1_dfm_1, and_159_nl);
    end
  end
  assign nor_26_nl = ~(lfst_exitL_exit_padding_loop_2_lpi_1_dfm_st_2_1 | padding_loop_1_padding_loop_1_and_1_itm_1
      | (lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_st_2_1_0!=2'b00) | (~ lfst_exit_padding_loop_2_lpi_1_dfm_st_2_0)
      | lfst_exit_padding_loop_2_lpi_1_dfm_st_2_1);
  assign nor_27_nl = ~((~(padding_loop_1_padding_loop_1_and_2_itm_1 | (~ padding_loop_1_padding_loop_1_and_1_itm_1)))
      | (lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_dfm_st_2_1_0!=2'b00) | (~ lfst_exit_padding_loop_2_lpi_1_dfm_st_2_0)
      | lfst_exit_padding_loop_2_lpi_1_dfm_st_2_1);
  assign nor_28_nl = ~(lfst_exitL_exit_padding_loop_2_lpi_1_dfm_st_2_0 | (((~ padding_loop_3_slc_13_svs_st_2)
      | lfst_exit_padding_loop_2_lpi_1_dfm_st_2_0) & lfst_exit_padding_loop_2_lpi_1_dfm_st_2_1));
  assign mux_125_nl = MUX_s_1_2_2(nor_27_nl, nor_28_nl, lfst_exitL_exit_padding_loop_2_lpi_1_dfm_st_2_1);
  assign mux_126_nl = MUX_s_1_2_2(nor_26_nl, mux_125_nl, asn_sft_lpi_1_st_2);
  assign or_356_nl = or_dcpl_21 | (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_0)
      | or_dcpl_209;
  assign nl_padding_loop_1_acc_7_nl = (padding_loop_1_acc_3_sdt_sva_1[13:12]) + 2'b01;
  assign padding_loop_1_acc_7_nl = nl_padding_loop_1_acc_7_nl[1:0];
  assign nl_padding_loop_3_acc_5_nl = ({1'b1 , (i_lpi_1[12])}) + conv_u2u_1_2(k_0_lpi_1);
  assign padding_loop_3_acc_5_nl = nl_padding_loop_3_acc_5_nl[1:0];
  assign and_140_nl = lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_0 & (~ lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_2);
  assign nl_operator_24_true_1_acc_psp_sva_1  = conv_s2s_17_18(eeprocess_mul_3_itm_20_3_1[17:1])
      + conv_u2s_12_18(ee_clip_return_4_lpi_1_dfm_3) + conv_u2s_1_18(eeprocess_mul_3_itm_20_3_1[0]);
  assign nl_operator_24_true_acc_psp_sva_1  = conv_s2s_17_18(eeprocess_mul_2_itm_20_3_1[17:1])
      + conv_u2s_12_18(ee_clip_return_3_lpi_1_dfm_3) + conv_u2s_1_18(eeprocess_mul_2_itm_20_3_1[0]);
  assign nl_eeprocess_acc_13_itm_1  = ({1'b1 , (~ ee_clip_return_5_lpi_1_dfm_1_mx0w0)})
      + conv_u2s_12_13(eeprocess_bblock_2_2_11_0_lpi_1_mx0) + 13'b0000000000001;
  assign padding_loop_3_padding_loop_3_and_nl = (i_lpi_1[1:0]==2'b01);
  assign padding_loop_3_padding_loop_3_and_1_nl = (i_lpi_1[1:0]==2'b10);
  assign padding_loop_3_padding_loop_3_and_2_nl = (i_lpi_1[1:0]==2'b11);
  assign padding_loop_2_or_342_nl = eeprocess_for_6_or_259_tmp_1 | single_loop_asn_sft_1_lpi_1_dfm_mx0
      | lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1;
  assign padding_loop_2_mux_34_nl = MUX_v_2_2_2((block_refresh_loop_in_acc_3_tmp[1:0]),
      l_lpi_1_1_0, padding_loop_2_or_342_nl);
  assign eeprocess_for_6_or_550_nl = (~ (block_refresh_loop_in_acc_3_tmp[2])) | eeprocess_for_6_or_259_tmp_1
      | single_loop_asn_sft_1_lpi_1_dfm_mx0 | lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1;
  assign or_510_nl = (~((~((~ exit_eeprocess_for_lpi_1_dfm_3) & single_loop_if_1_and_8_cse_1))
      & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0 & (~(eeprocess_for_6_equal_tmp_13
      | eeprocess_for_6_equal_tmp_12 | eeprocess_for_6_equal_tmp_11 | eeprocess_for_6_equal_tmp_10
      | eeprocess_for_6_equal_tmp_9)))) | or_dcpl_334;
  assign mux_168_nl = MUX_v_2_2_2((operator_3_false_2_acc_tmp[1:0]), eeprocess_l_2_1_0_lpi_1,
      or_510_nl);
  assign nor_82_nl = ~((and_dcpl_132 & single_loop_if_1_and_9_m1c_1 & operator_3_false_2_acc_psp_sva_mx0_2)
      | (exit_eeprocess_for_lpi_1_dfm_3 & single_loop_if_1_and_8_cse_1));
  assign or_515_nl = (single_loop_if_1_and_36_ssc_1 & (~ (operator_3_false_4_acc_tmp[2])))
      | (~(single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0 & (~(eeprocess_for_6_or_tmp_2
      | eeprocess_for_6_equal_tmp_14 | eeprocess_for_6_equal_tmp_11 | eeprocess_for_6_equal_tmp_10
      | eeprocess_for_6_equal_tmp_9)))) | or_dcpl_334;
  assign mux_169_nl = MUX_v_2_2_2((operator_3_false_6_acc_tmp[1:0]), eeprocess_l_3_1_0_lpi_1,
      or_515_nl);
  assign nor_81_nl = ~((and_dcpl_132 & single_loop_if_1_and_11_m1c_1 & operator_3_false_6_acc_psp_sva_mx0_2)
      | (single_loop_if_1_and_36_ssc_1 & (operator_3_false_4_acc_tmp[2])));
  assign or_520_nl = (single_loop_if_1_and_37_ssc_1 & (~ (operator_3_false_8_acc_tmp[2])))
      | (~(single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0 & (~(eeprocess_for_6_or_tmp_2
      | eeprocess_for_6_equal_tmp_14 | eeprocess_for_6_equal_tmp_13 | eeprocess_for_6_equal_tmp_12
      | eeprocess_for_6_equal_tmp_9)))) | or_dcpl_334;
  assign mux_170_nl = MUX_v_2_2_2((operator_3_false_10_acc_tmp[1:0]), eeprocess_l_1_0_lpi_1,
      or_520_nl);
  assign nor_80_nl = ~((and_dcpl_132 & single_loop_if_1_and_13_m1c_1 & operator_3_false_10_acc_psp_sva_mx0_2)
      | (single_loop_if_1_and_37_ssc_1 & (operator_3_false_8_acc_tmp[2])));
  assign or_525_nl = (~((~(k_0_lpi_1 & padding_loop_2_equal_tmp_7 & (~ padding_loop_3_acc_6_itm_13_1)))
      & asn_sft_lpi_1)) | padding_loop_2_and_24_ssc_1 | (~ padding_loop_2_equal_tmp_4)
      | padding_loop_2_equal_tmp_6;
  assign mux_167_nl = MUX_v_13_2_2((z_out_19[12:0]), i_lpi_1, or_525_nl);
  assign nand_67_nl = ~((((~ k_0_lpi_1) & padding_loop_2_equal_tmp_7 & (~ padding_loop_3_acc_6_itm_13_1))
      | padding_loop_2_and_25_ssc_1) & asn_sft_lpi_1 & padding_loop_2_equal_tmp_4);
  assign single_loop_single_loop_or_2_nl = sfi_ee_top_eb_lpi_1 | exit_single_loop_lpi_1_dfm_1;
  assign padding_loop_2_mux_43_nl = MUX_s_1_2_2(single_loop_single_loop_or_2_nl,
      sfi_ee_top_eb_lpi_1, padding_loop_2_equal_tmp_5);
  assign and_142_nl = mux_tmp_120 & single_loop_equal_1_tmp;
  assign nor_18_nl = ~(operator_3_false_9_acc_itm_2_1 | (~ (operator_3_false_6_acc_tmp[2])));
  assign mux_152_nl = MUX_s_1_2_2(and_tmp_17, mux_tmp_131, nor_18_nl);
  assign mux_153_nl = MUX_s_1_2_2(and_tmp_16, mux_152_nl, lfst_exit_eeprocess_for_6_lpi_1_2_1[1]);
  assign nor_17_nl = ~(operator_3_false_6_acc_itm_2_1 | (~ (operator_3_false_2_acc_tmp[2])));
  assign mux_150_nl = MUX_s_1_2_2(and_tmp_17, mux_tmp_131, nor_17_nl);
  assign mux_151_nl = MUX_s_1_2_2(mux_150_nl, mux_tmp_131, lfst_exit_eeprocess_for_6_lpi_1_2_1[1]);
  assign mux_154_nl = MUX_s_1_2_2(mux_153_nl, mux_151_nl, lfst_exit_eeprocess_for_6_lpi_1_2_1[0]);
  assign mux_147_nl = MUX_s_1_2_2(and_tmp_16, mux_tmp_131, eeprocess_for_6_or_541_tmp);
  assign or_476_nl = (operator_3_false_8_acc_tmp[2]) | eeprocess_for_6_or_541_tmp;
  assign mux_146_nl = MUX_s_1_2_2(and_tmp_17, mux_tmp_131, or_476_nl);
  assign mux_148_nl = MUX_s_1_2_2(mux_147_nl, mux_146_nl, lfst_exit_eeprocess_for_6_lpi_1_2_1[1]);
  assign nor_16_nl = ~((operator_3_false_4_acc_tmp[2]) | (~ eeprocess_for_6_or_541_tmp));
  assign mux_144_nl = MUX_s_1_2_2(and_tmp_17, mux_tmp_131, nor_16_nl);
  assign or_471_nl = (~ (operator_3_false_12_acc_tmp[2])) | eeprocess_for_6_or_541_tmp;
  assign mux_143_nl = MUX_s_1_2_2(and_tmp_17, mux_tmp_131, or_471_nl);
  assign mux_145_nl = MUX_s_1_2_2(mux_144_nl, mux_143_nl, lfst_exit_eeprocess_for_6_lpi_1_2_1[1]);
  assign mux_149_nl = MUX_s_1_2_2(mux_148_nl, mux_145_nl, lfst_exit_eeprocess_for_6_lpi_1_2_1[0]);
  assign mux_155_nl = MUX_s_1_2_2(mux_154_nl, mux_149_nl, lfst_exit_eeprocess_for_6_lpi_1_0);
  assign mux_156_nl = MUX_s_1_2_2(mux_155_nl, and_tmp_16, sfi_single_loop_if_1_land_lpi_1);
  assign or_469_nl = (eeprocess_for_6_mux1h_539_tmp!=2'b00);
  assign mux_157_nl = MUX_s_1_2_2(mux_156_nl, mux_22_cse, or_469_nl);
  assign or_477_nl = (mux_157_nl & single_loop_asn_sft_lpi_1) | or_dcpl_251 | or_dcpl_228
      | or_dcpl_209;
  assign and_149_nl = lfst_exitL_exitL_exitL_exit_eeprocess_for_6_lpi_1 & (~ exitL_exitL_exitL_exitL_exit_eeprocess_for_6_lpi_1)
      & (~ exitL_exitL_exit_padding_loop_2_sva) & ((lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_1_0[1])
      | lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_2) & lfst_exitL_exit_padding_loop_2_lpi_1_dfm_3_0;
  assign nl_operator_13_false_acc_nl = conv_u2u_12_13(j_lpi_1[12:1]) + 13'b1111111111111;
  assign operator_13_false_acc_nl = nl_operator_13_false_acc_nl[12:0];
  assign nl_operator_13_false_2_acc_nl = ({1'b1 , (~ i_1_lpi_1_dfm_3)}) + 14'b00000000000011;
  assign operator_13_false_2_acc_nl = nl_operator_13_false_2_acc_nl[13:0];
  assign padding_loop_3_padding_loop_3_nor_nl = ~((i_lpi_1[1:0]!=2'b00));
  assign single_loop_mux_2_nl = MUX_v_13_2_2(i_1_lpi_1_dfm_3, (z_out_19[12:0]), single_loop_equal_1_tmp);
  assign nl_single_loop_mul_1_nl = single_loop_mux_2_nl * isp_top_frameWidth;
  assign single_loop_mul_1_nl = nl_single_loop_mul_1_nl[12:0];
  assign nl_j_lpi_1  = (n_lpi_1_dfm_1[12:0]) - single_loop_mul_1_nl;
  assign eeprocess_for_6_eeprocess_for_6_eeprocess_for_6_not_33_nl = ~ (single_loop_for_acc_3_tmp[2]);
  assign single_loop_for_single_loop_for_and_3_nl = MUX_v_2_2_2(2'b00, k_3_lpi_1_1_0,
      eeprocess_for_6_eeprocess_for_6_eeprocess_for_6_not_33_nl);
  assign or_505_nl = eeprocess_for_6_and_25_rgt | (~ operator_3_false_4_acc_itm_2_1);
  assign eeprocess_for_eeprocess_for_not_4_nl = ~ exit_eeprocess_for_lpi_1_dfm_3;
  assign eeprocess_for_eeprocess_for_and_1_nl = MUX_v_3_2_2(3'b000, eeprocess_k_2_lpi_1,
      eeprocess_for_eeprocess_for_not_4_nl);
  assign eeprocess_for_6_eeprocess_for_6_eeprocess_for_1_not_1_nl = ~ exit_eeprocess_for_1_lpi_1_dfm_2;
  assign eeprocess_for_1_eeprocess_for_1_and_nl = MUX_v_2_2_2(2'b00, eeprocess_k_3_1_0_lpi_1,
      eeprocess_for_6_eeprocess_for_6_eeprocess_for_1_not_1_nl);
  assign eeprocess_for_6_eeprocess_for_6_eeprocess_for_6_not_37_nl = ~ (operator_3_false_4_acc_tmp[2]);
  assign eeprocess_for_2_eeprocess_for_2_and_nl = MUX_v_3_2_2(3'b000, eeprocess_k_4_lpi_1,
      eeprocess_for_6_eeprocess_for_6_eeprocess_for_6_not_37_nl);
  assign or_434_nl = or_dcpl_259 | or_dcpl_281;
  assign operator_3_false_6_mux_2_nl = MUX_s_1_2_2((operator_3_false_6_acc_tmp[2]),
      reg_operator_3_false_6_acc_psp_ftd, or_434_nl);
  assign or_450_nl = or_dcpl_259 | or_dcpl_297;
  assign operator_3_false_10_mux_2_nl = MUX_s_1_2_2((operator_3_false_10_acc_tmp[2]),
      reg_operator_3_false_10_acc_psp_ftd, or_450_nl);
  assign eeprocess_for_6_eeprocess_for_6_eeprocess_for_3_not_1_nl = ~ exit_eeprocess_for_3_lpi_1_dfm_2;
  assign eeprocess_for_3_eeprocess_for_3_and_nl = MUX_v_2_2_2(2'b00, eeprocess_k_5_1_0_lpi_1,
      eeprocess_for_6_eeprocess_for_6_eeprocess_for_3_not_1_nl);
  assign eeprocess_for_6_eeprocess_for_6_eeprocess_for_6_not_38_nl = ~ (operator_3_false_8_acc_tmp[2]);
  assign eeprocess_for_4_eeprocess_for_4_and_nl = MUX_v_3_2_2(3'b000, eeprocess_k_6_lpi_1,
      eeprocess_for_6_eeprocess_for_6_eeprocess_for_6_not_38_nl);
  assign eeprocess_for_5_not_15_nl = ~ exit_eeprocess_for_5_lpi_1_dfm_2;
  assign eeprocess_for_5_eeprocess_for_5_and_nl = MUX_v_2_2_2(2'b00, eeprocess_k_1_0_lpi_1,
      eeprocess_for_5_not_15_nl);
  assign padding_loop_2_or_368_nl = ((eeprocess_k_2_lpi_1==3'b000) & eeprocess_for_6_and_125_m1c_1
      & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0 & single_loop_and_207_tmp_1 & (~
      lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1)) | (eeprocess_for_3_and_stg_1_0_sva_1
      & (~ (eeprocess_k_4_lpi_1[2])) & eeprocess_for_6_and_127_m1c_1 & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0
      & single_loop_and_207_tmp_1 & (~ lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1))
      | (eeprocess_for_5_and_stg_1_0_sva_1 & (~ (eeprocess_k_6_lpi_1[2])) & eeprocess_for_6_and_129_m1c_1
      & single_loop_if_1_asn_sft_lpi_1_dfm_1_mx0 & single_loop_and_207_tmp_1 & (~
      lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1));
  assign single_loop_for_1_single_loop_for_1_or_nl = sfi_ee_top_eb_1_lpi_1 | (single_loop_for_1_acc_3_tmp[2]);
  assign eeprocess_for_6_mux_38_nl = MUX_s_1_2_2(sfi_ee_top_eb_1_lpi_1, single_loop_for_1_single_loop_for_1_or_nl,
      eeprocess_for_6_equal_tmp_16);
  assign eeprocess_for_6_eeprocess_for_6_block_refresh_loop_out_not_3_nl = ~ exit_block_refresh_loop_out_lpi_1_dfm_3;
  assign block_refresh_loop_out_block_refresh_loop_out_and_1_nl = MUX_v_2_2_2(2'b00,
      k_2_lpi_1_1_0, eeprocess_for_6_eeprocess_for_6_block_refresh_loop_out_not_3_nl);
  assign padding_loop_2_padding_loop_2_nor_65_nl = ~((~((~ (block_refresh_loop_in_acc_3_tmp[2]))
      | eeprocess_for_6_equal_tmp_15 | eeprocess_for_6_equal_tmp_16 | eeprocess_for_6_equal_tmp_17
      | eeprocess_for_6_nor_tmp_1)) | padding_loop_2_or_338_tmp_1);
  assign padding_loop_1_padding_loop_1_and_4_nl = k_0_lpi_1 & (~ k_4_0_lpi_1_dfm_1);
  assign and_158_nl = padding_loop_2_and_26_rgt & asn_sft_lpi_1;
  assign and_159_nl = (padding_loop_2_equal_tmp_7 | padding_loop_2_equal_tmp_6) &
      asn_sft_lpi_1;
  assign single_loop_for_mux_3_nl = MUX_v_2_2_2(k_2_lpi_1_1_0, k_3_lpi_1_1_0, lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_1_0[0]);
  assign nl_z_out = single_loop_for_mux_3_nl + conv_u2u_1_2(j_lpi_1[12]);
  assign z_out = nl_z_out[1:0];
  assign eeprocess_for_1_for_mux1h_13_cse = MUX1HOT_v_2_3_2(eeprocess_l_2_1_0_lpi_1,
      eeprocess_l_3_1_0_lpi_1, eeprocess_l_1_0_lpi_1, {(~ (lfst_exit_eeprocess_for_6_lpi_1_2_1[1]))
      , and_381_cse , and_218_cse});
  assign nl_z_out_1 = conv_u2u_2_3(z_out_3[3:2]) + conv_u2u_2_3(eeprocess_for_1_for_mux1h_13_cse);
  assign z_out_1 = nl_z_out_1[2:0];
  assign eeprocess_for_1_for_mux1h_14_cse = MUX1HOT_v_3_3_2(operator_3_false_2_acc_tmp,
      operator_3_false_6_acc_tmp, operator_3_false_10_acc_tmp, {(~ (lfst_exit_eeprocess_for_6_lpi_1_2_1[1]))
      , and_381_cse , and_218_cse});
  assign nl_z_out_2 = eeprocess_for_1_for_mux1h_14_cse + conv_u2u_2_3(z_out_9[3:2]);
  assign z_out_2 = nl_z_out_2[2:0];
  assign eeprocess_for_1_for_mux1h_15_cse = MUX1HOT_v_3_3_2(eeprocess_k_2_lpi_1,
      eeprocess_k_4_lpi_1, eeprocess_k_6_lpi_1, {(~ (lfst_exit_eeprocess_for_6_lpi_1_2_1[1]))
      , and_381_cse , and_218_cse});
  assign nl_z_out_3 = conv_u2u_3_4(eeprocess_for_1_for_mux1h_15_cse) + conv_u2u_2_4(eeprocess_for_1_for_mux1h_13_cse);
  assign z_out_3 = nl_z_out_3[3:0];
  assign eeprocess_for_1_for_mux1h_17_nl = MUX1HOT_v_11_3_2((~ operator_13_true_1_operator_13_true_1_acc_cse_10_0_sva_1),
      (~ operator_13_true_5_operator_13_true_5_acc_cse_10_0_sva_1), (~ operator_13_true_9_operator_13_true_9_acc_cse_10_0_sva_1),
      {(~ (lfst_exit_eeprocess_for_6_lpi_1_2_1[1])) , and_381_cse , and_218_cse});
  assign eeprocess_for_1_for_mux1h_18_nl = MUX1HOT_v_11_3_2(eeprocess_for_1_for_asn_9,
      eeprocess_for_3_for_asn_9, eeprocess_for_5_for_asn_9, {(~ (lfst_exit_eeprocess_for_6_lpi_1_2_1[1]))
      , and_381_cse , and_218_cse});
  assign nl_acc_4_nl = ({1'b1 , eeprocess_for_1_for_mux1h_17_nl , 1'b1}) + conv_u2u_12_13({eeprocess_for_1_for_mux1h_18_nl
      , 1'b1});
  assign acc_4_nl = nl_acc_4_nl[12:0];
  assign z_out_8 = readslicef_13_12_1(acc_4_nl);
  assign nl_z_out_9 = conv_u2u_3_4(eeprocess_for_1_for_mux1h_15_cse) + conv_u2u_3_4(eeprocess_for_1_for_mux1h_14_cse);
  assign z_out_9 = nl_z_out_9[3:0];
  assign single_loop_for_1_or_1_nl = ((~ (lfst_exitL_exitL_exit_eeprocess_for_6_lpi_1_1_0[0]))
      & lfst_exit_eeprocess_for_6_lpi_1_0) | (and_dcpl_186 & (~ (lfst_exit_eeprocess_for_6_lpi_1_2_1[1])))
      | (and_dcpl_186 & (lfst_exit_eeprocess_for_6_lpi_1_2_1==2'b10)) | (and_dcpl_186
      & (lfst_exit_eeprocess_for_6_lpi_1_2_1==2'b11));
  assign single_loop_for_1_single_loop_for_1_mux_nl = MUX_v_3_2_2((operator_3_false_1_acc_psp_4_0_sva_1[4:2]),
      (~ (z_out_20[14:12])), single_loop_for_1_or_1_nl);
  assign nl_z_out_10 = single_loop_for_1_single_loop_for_1_mux_nl + 3'b001;
  assign z_out_10 = nl_z_out_10[2:0];
  assign eeprocess_for_5_mux_2_nl = MUX_v_3_2_2(eeprocess_k_6_lpi_1, (~ (eeprocess_temp_r_lpi_1[14:12])),
      lfst_exit_eeprocess_for_6_lpi_1_0);
  assign nl_z_out_11 = eeprocess_for_5_mux_2_nl + 3'b001;
  assign z_out_11 = nl_z_out_11[2:0];
  assign eeprocess_for_1_for_eeprocess_for_1_for_or_1_cse = eeprocess_for_1_for_nor_1_itm
      | and_dcpl_237;
  assign eeprocess_for_1_for_eeprocess_for_1_for_eeprocess_for_1_for_nor_1_nl = ~((ee_clip_return_4_lpi_1_dfm_3[11])
      | and_dcpl_195 | and_dcpl_197 | and_dcpl_199 | and_dcpl_233 | and_dcpl_235);
  assign eeprocess_for_1_for_mux1h_21_nl = MUX1HOT_v_11_6_2(eeprocess_for_1_for_asn_9,
      eeprocess_for_3_for_asn_9, eeprocess_for_5_for_asn_9, eeprocess_for_2_asn_24,
      eeprocess_for_4_asn_24, (~ (ee_clip_return_4_lpi_1_dfm_3[10:0])), {and_dcpl_195
      , and_dcpl_197 , and_dcpl_199 , and_dcpl_233 , and_dcpl_235 , and_dcpl_237});
  assign eeprocess_for_1_for_eeprocess_for_1_for_and_4_nl = (eeprocess_gblock_2_2_11_0_lpi_1_mx0[11])
      & eeprocess_for_1_for_nor_1_itm;
  assign eeprocess_for_1_for_mux1h_22_nl = MUX1HOT_v_11_6_2(operator_13_true_1_operator_13_true_1_acc_cse_10_0_sva_1,
      operator_13_true_5_operator_13_true_5_acc_cse_10_0_sva_1, operator_13_true_9_operator_13_true_9_acc_cse_10_0_sva_1,
      operator_14_true_5_slc_eeprocess_result_v_14_13_0_tmp_11_1_sva_1, operator_14_true_17_operator_14_true_17_acc_cse_10_0_sva_1,
      (eeprocess_gblock_2_2_11_0_lpi_1_mx0[10:0]), {and_dcpl_195 , and_dcpl_197 ,
      and_dcpl_199 , and_dcpl_233 , and_dcpl_235 , and_dcpl_237});
  assign nl_acc_12_nl = ({eeprocess_for_1_for_eeprocess_for_1_for_or_1_cse , eeprocess_for_1_for_eeprocess_for_1_for_eeprocess_for_1_for_nor_1_nl
      , eeprocess_for_1_for_mux1h_21_nl , eeprocess_for_1_for_eeprocess_for_1_for_or_1_cse})
      + conv_u2u_13_14({eeprocess_for_1_for_eeprocess_for_1_for_and_4_nl , eeprocess_for_1_for_mux1h_22_nl
      , 1'b1});
  assign acc_12_nl = nl_acc_12_nl[13:0];
  assign z_out_16 = readslicef_14_13_1(acc_12_nl);
  assign single_loop_if_not_3_nl = ~ single_loop_equal_1_tmp;
  assign single_loop_single_loop_and_6_nl = MUX_v_13_2_2(13'b0000000000000, count_lpi_1_dfm_1,
      single_loop_if_not_3_nl);
  assign single_loop_mux1h_2_nl = MUX1HOT_v_13_5_2(single_loop_single_loop_and_6_nl,
      ({1'b1 , (~ ee_clip_return_3_lpi_1_dfm_3)}), (eeprocess_sharpen_threhold_r_1_lpi_1_dfm_mx1w1[22:10]),
      (eeprocess_sharpen_threhold_g_1_lpi_1_dfm_mx1w1[22:10]), (eeprocess_sharpen_threhold_b_1_lpi_1_dfm_mx1w1[22:10]),
      {or_dcpl_365 , and_dcpl_241 , and_dcpl_244 , and_dcpl_249 , and_dcpl_252});
  assign single_loop_or_2_nl = (~ or_dcpl_365) | and_dcpl_241 | and_dcpl_244 | and_dcpl_249
      | and_dcpl_252;
  assign single_loop_or_3_nl = and_dcpl_244 | and_dcpl_249 | and_dcpl_252;
  assign single_loop_mux1h_3_nl = MUX1HOT_v_13_3_2(13'b0000000000001, ({1'b0 , eeprocess_rblock_2_2_11_0_lpi_1_mx0}),
      (signext_13_12(~ z_out_8)), {or_dcpl_365 , and_dcpl_241 , single_loop_or_3_nl});
  assign nl_acc_13_nl = conv_s2u_14_15({single_loop_mux1h_2_nl , single_loop_or_2_nl})
      + conv_s2u_14_15({single_loop_mux1h_3_nl , 1'b1});
  assign acc_13_nl = nl_acc_13_nl[14:0];
  assign z_out_17 = readslicef_15_14_1(acc_13_nl);
  assign operator_3_false_mux_2_nl = MUX_v_26_2_2(({21'b000000000000000000000 , k_1_lpi_1_dfm_1
      , 2'b01}), n_lpi_1_dfm_1, and_dcpl_256);
  assign operator_3_false_mux_3_nl = MUX_v_4_2_2(operator_3_false_acc_1_cse_1, 4'b0001,
      and_dcpl_256);
  assign nl_z_out_18 = operator_3_false_mux_2_nl + conv_u2u_4_26(operator_3_false_mux_3_nl);
  assign z_out_18 = nl_z_out_18[25:0];
  assign padding_loop_3_or_14_nl = and_dcpl_265 | and_dcpl_303;
  assign padding_loop_3_or_15_nl = and_dcpl_268 | and_dcpl_272;
  assign padding_loop_3_or_16_nl = and_dcpl_279 | and_dcpl_306;
  assign padding_loop_3_or_17_nl = and_dcpl_282 | and_dcpl_286;
  assign padding_loop_3_or_18_nl = and_dcpl_290 | and_dcpl_297;
  assign padding_loop_3_or_19_nl = and_dcpl_293 | and_dcpl_300;
  assign padding_loop_3_mux1h_7_nl = MUX1HOT_v_13_8_2(i_lpi_1, i_1_lpi_1_dfm_3, (~
      (eeprocess_sharpen_threhold_r_1_lpi_1_dfm_mx1w1[22:10])), (eeprocess_sharpen_threhold_r_1_lpi_1_dfm_mx1w1[22:10]),
      (~ (eeprocess_sharpen_threhold_g_1_lpi_1_dfm_mx1w1[22:10])), (eeprocess_sharpen_threhold_g_1_lpi_1_dfm_mx1w1[22:10]),
      (~ (eeprocess_sharpen_threhold_b_1_lpi_1_dfm_mx1w1[22:10])), (eeprocess_sharpen_threhold_b_1_lpi_1_dfm_mx1w1[22:10]),
      {lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1 , or_dcpl_372 , padding_loop_3_or_14_nl
      , padding_loop_3_or_15_nl , padding_loop_3_or_16_nl , padding_loop_3_or_17_nl
      , padding_loop_3_or_18_nl , padding_loop_3_or_19_nl});
  assign padding_loop_3_or_20_nl = (~(lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1
      | or_dcpl_372 | and_dcpl_268 | and_dcpl_272 | and_dcpl_282 | and_dcpl_286 |
      and_dcpl_293 | and_dcpl_300)) | and_dcpl_265 | and_dcpl_279 | and_dcpl_290
      | and_dcpl_297 | and_dcpl_303 | and_dcpl_306;
  assign padding_loop_3_or_21_nl = lfst_exitL_exit_padding_loop_2_lpi_1_dfm_1_1 |
      or_dcpl_372;
  assign padding_loop_3_or_22_nl = and_dcpl_265 | and_dcpl_268 | and_dcpl_279 | and_dcpl_282
      | and_dcpl_290 | and_dcpl_293;
  assign padding_loop_3_or_23_nl = and_dcpl_272 | and_dcpl_303;
  assign padding_loop_3_or_24_nl = and_dcpl_286 | and_dcpl_306;
  assign padding_loop_3_or_25_nl = and_dcpl_297 | and_dcpl_300;
  assign padding_loop_3_mux1h_8_nl = MUX1HOT_v_12_5_2(12'b000000000001, z_out_8,
      eeprocess_for_2_acc_1_psp_sva_1, eeprocess_for_4_acc_1_psp_sva_1, eeprocess_for_6_acc_1_psp_sva_1,
      {padding_loop_3_or_21_nl , padding_loop_3_or_22_nl , padding_loop_3_or_23_nl
      , padding_loop_3_or_24_nl , padding_loop_3_or_25_nl});
  assign nl_acc_15_nl = conv_s2u_14_15({padding_loop_3_mux1h_7_nl , padding_loop_3_or_20_nl})
      + conv_s2u_13_15({padding_loop_3_mux1h_8_nl , 1'b1});
  assign acc_15_nl = nl_acc_15_nl[14:0];
  assign z_out_19 = readslicef_15_14_1(acc_15_nl);
  assign eeprocess_for_4_mux1h_4_nl = MUX1HOT_s_1_6_2(eeprocess_for_4_and_cse_sva_1,
      eeprocess_for_2_and_cse_sva_1, eeprocess_for_1_for_and_cse_sva_1, eeprocess_for_3_for_and_cse_sva_1,
      eeprocess_for_5_for_and_cse_sva_1, eeprocess_for_6_and_cse_sva_1, {and_dcpl_192
      , and_254_cse , and_dcpl_195 , and_dcpl_197 , and_dcpl_199 , and_231_cse});
  assign mux_186_nl = MUX_v_11_2_2(eeprocess_feq_l_1_11_1_lpi_1, eeprocess_for_4_eeprocess_for_4_mux_cse,
      eeprocess_for_4_mux1h_4_nl);
  assign eeprocess_for_4_mux1h_5_nl = MUX1HOT_s_1_6_2(eeprocess_for_4_and_1_cse_sva_1,
      eeprocess_for_2_and_1_cse_sva_1, eeprocess_for_1_for_and_1_cse_sva_1, eeprocess_for_3_for_and_1_cse_sva_1,
      eeprocess_for_5_for_and_1_cse_sva_1, eeprocess_for_6_and_1_cse_sva_1, {and_dcpl_192
      , and_254_cse , and_dcpl_195 , and_dcpl_197 , and_dcpl_199 , and_231_cse});
  assign mux_187_nl = MUX_v_11_2_2(eeprocess_feq_l_2_11_1_lpi_1, eeprocess_for_4_eeprocess_for_4_mux_cse,
      eeprocess_for_4_mux1h_5_nl);
  assign operator_14_true_23_mux1h_3_nl = MUX1HOT_s_1_6_2(eeprocess_feq_h_2_lpi_1_dfm_4_13_1,
      eeprocess_feq_h_2_lpi_1_dfm_2_13_1, eeprocess_feq_h_2_sva_1_13_mx0, eeprocess_feq_h_2_sva_5_13_mx0,
      eeprocess_feq_h_2_sva_9_13_mx0, eeprocess_feq_h_2_lpi_1_dfm_6_13_1, {and_dcpl_192
      , and_254_cse , and_dcpl_195 , and_dcpl_197 , and_dcpl_199 , and_231_cse});
  assign operator_14_true_23_mux1h_4_nl = MUX1HOT_v_12_6_2((eeprocess_feq_h_2_lpi_1_dfm_4_12_0_1[12:1]),
      (eeprocess_feq_h_2_lpi_1_dfm_2_12_0_1[12:1]), (eeprocess_feq_h_2_sva_1_12_0_mx0[12:1]),
      (eeprocess_feq_h_2_sva_5_12_0_mx0[12:1]), (eeprocess_feq_h_2_sva_9_12_0_mx0[12:1]),
      (eeprocess_feq_h_2_lpi_1_dfm_6_12_0_1[12:1]), {and_dcpl_192 , and_254_cse ,
      and_dcpl_195 , and_dcpl_197 , and_dcpl_199 , and_231_cse});
  assign operator_14_true_23_and_1_nl = eeprocess_feq_h_2_lpi_1_dfm_4_13_1 & (eeprocess_feq_h_2_lpi_1_dfm_4_12_0_1[0]);
  assign operator_14_true_11_and_1_nl = eeprocess_feq_h_2_lpi_1_dfm_2_13_1 & (eeprocess_feq_h_2_lpi_1_dfm_2_12_0_1[0]);
  assign operator_14_true_3_and_1_nl = eeprocess_feq_h_2_sva_1_13_mx0 & (eeprocess_feq_h_2_sva_1_12_0_mx0[0]);
  assign operator_14_true_15_and_1_nl = eeprocess_feq_h_2_sva_5_13_mx0 & (eeprocess_feq_h_2_sva_5_12_0_mx0[0]);
  assign operator_14_true_27_and_1_nl = eeprocess_feq_h_2_sva_9_13_mx0 & (eeprocess_feq_h_2_sva_9_12_0_mx0[0]);
  assign operator_14_true_35_and_1_nl = eeprocess_feq_h_2_lpi_1_dfm_6_13_1 & (eeprocess_feq_h_2_lpi_1_dfm_6_12_0_1[0]);
  assign operator_14_true_23_mux1h_5_nl = MUX1HOT_s_1_6_2(operator_14_true_23_and_1_nl,
      operator_14_true_11_and_1_nl, operator_14_true_3_and_1_nl, operator_14_true_15_and_1_nl,
      operator_14_true_27_and_1_nl, operator_14_true_35_and_1_nl, {and_dcpl_192 ,
      and_254_cse , and_dcpl_195 , and_dcpl_197 , and_dcpl_199 , and_231_cse});
  assign nl_operator_14_true_23_acc_nl = ({operator_14_true_23_mux1h_3_nl , operator_14_true_23_mux1h_4_nl})
      + conv_u2s_1_13(operator_14_true_23_mux1h_5_nl);
  assign operator_14_true_23_acc_nl = nl_operator_14_true_23_acc_nl[12:0];
  assign operator_14_true_21_mux1h_3_nl = MUX1HOT_s_1_6_2(eeprocess_feq_h_1_lpi_1_dfm_4_13_1,
      eeprocess_feq_h_1_lpi_1_dfm_2_13_1, eeprocess_feq_h_1_sva_1_13_mx0, eeprocess_feq_h_1_sva_5_13_mx0,
      eeprocess_feq_h_1_sva_9_13_mx0, eeprocess_feq_h_1_lpi_1_dfm_6_13_1, {and_dcpl_192
      , and_254_cse , and_dcpl_195 , and_dcpl_197 , and_dcpl_199 , and_231_cse});
  assign operator_14_true_21_mux1h_4_nl = MUX1HOT_v_12_6_2((eeprocess_feq_h_1_lpi_1_dfm_4_12_0_1[12:1]),
      (eeprocess_feq_h_1_lpi_1_dfm_2_12_0_1[12:1]), (eeprocess_feq_h_1_sva_1_12_0_mx0[12:1]),
      (eeprocess_feq_h_1_sva_5_12_0_mx0[12:1]), (eeprocess_feq_h_1_sva_9_12_0_mx0[12:1]),
      (eeprocess_feq_h_1_lpi_1_dfm_6_12_0_1[12:1]), {and_dcpl_192 , and_254_cse ,
      and_dcpl_195 , and_dcpl_197 , and_dcpl_199 , and_231_cse});
  assign operator_14_true_21_and_1_nl = eeprocess_feq_h_1_lpi_1_dfm_4_13_1 & (eeprocess_feq_h_1_lpi_1_dfm_4_12_0_1[0]);
  assign operator_14_true_9_and_1_nl = eeprocess_feq_h_1_lpi_1_dfm_2_13_1 & (eeprocess_feq_h_1_lpi_1_dfm_2_12_0_1[0]);
  assign operator_14_true_1_and_1_nl = eeprocess_feq_h_1_sva_1_13_mx0 & (eeprocess_feq_h_1_sva_1_12_0_mx0[0]);
  assign operator_14_true_13_and_1_nl = eeprocess_feq_h_1_sva_5_13_mx0 & (eeprocess_feq_h_1_sva_5_12_0_mx0[0]);
  assign operator_14_true_25_and_1_nl = eeprocess_feq_h_1_sva_9_13_mx0 & (eeprocess_feq_h_1_sva_9_12_0_mx0[0]);
  assign operator_14_true_33_and_1_nl = eeprocess_feq_h_1_lpi_1_dfm_6_13_1 & (eeprocess_feq_h_1_lpi_1_dfm_6_12_0_1[0]);
  assign operator_14_true_21_mux1h_5_nl = MUX1HOT_s_1_6_2(operator_14_true_21_and_1_nl,
      operator_14_true_9_and_1_nl, operator_14_true_1_and_1_nl, operator_14_true_13_and_1_nl,
      operator_14_true_25_and_1_nl, operator_14_true_33_and_1_nl, {and_dcpl_192 ,
      and_254_cse , and_dcpl_195 , and_dcpl_197 , and_dcpl_199 , and_231_cse});
  assign nl_operator_14_true_21_acc_nl = ({operator_14_true_21_mux1h_3_nl , operator_14_true_21_mux1h_4_nl})
      + conv_u2s_1_13(operator_14_true_21_mux1h_5_nl);
  assign operator_14_true_21_acc_nl = nl_operator_14_true_21_acc_nl[12:0];
  assign nl_z_out_20 = conv_u2u_11_15(mux_186_nl) + conv_u2u_11_15(mux_187_nl) +
      conv_s2u_13_15(operator_14_true_23_acc_nl) + conv_s2u_13_15(operator_14_true_21_acc_nl);
  assign z_out_20 = nl_z_out_20[14:0];
  assign nor_93_nl = ~((~ (eeprocess_l_2_1_0_lpi_1[1])) | (~ (lfst_exit_eeprocess_for_6_lpi_1_2_1[0]))
      | lfst_exit_eeprocess_for_6_lpi_1_0);
  assign mux_176_nl = MUX_s_1_2_2(and_376_cse, (lfst_exit_eeprocess_for_6_lpi_1_2_1[0]),
      eeprocess_l_2_1_0_lpi_1[1]);
  assign mux_177_nl = MUX_s_1_2_2(nor_93_nl, mux_176_nl, eeprocess_k_3_1_0_lpi_1[1]);
  assign nor_94_nl = ~((~ (eeprocess_l_3_1_0_lpi_1[1])) | lfst_exit_eeprocess_for_6_lpi_1_0);
  assign or_540_nl = (eeprocess_l_3_1_0_lpi_1[1]) | lfst_exit_eeprocess_for_6_lpi_1_0;
  assign mux_171_nl = MUX_s_1_2_2(nor_94_nl, or_540_nl, eeprocess_k_5_1_0_lpi_1[1]);
  assign nor_95_nl = ~((~ (eeprocess_l_1_0_lpi_1[1])) | lfst_exit_eeprocess_for_6_lpi_1_0);
  assign or_558_nl = (eeprocess_l_1_0_lpi_1[1]) | lfst_exit_eeprocess_for_6_lpi_1_0;
  assign mux_185_nl = MUX_s_1_2_2(nor_95_nl, or_558_nl, eeprocess_k_1_0_lpi_1[1]);
  assign mux_172_nl = MUX_s_1_2_2(mux_171_nl, mux_185_nl, lfst_exit_eeprocess_for_6_lpi_1_2_1[0]);
  assign mux_178_nl = MUX_s_1_2_2(mux_177_nl, mux_172_nl, lfst_exit_eeprocess_for_6_lpi_1_2_1[1]);
  assign padding_loop_2_mux_62_nl = MUX_s_1_2_2(eeprocess_for_6_and_40_rgt, eeprocess_for_6_and_52_rgt,
      mux_178_nl);
  assign z_out_4 = MUX_v_11_2_2((z_out_16[11:1]), eeprocess_for_6_acc_itm_11_1_1,
      padding_loop_2_mux_62_nl);

  function automatic [0:0] MUX1HOT_s_1_3_2;
    input [0:0] input_2;
    input [0:0] input_1;
    input [0:0] input_0;
    input [2:0] sel;
    reg [0:0] result;
  begin
    result = input_0 & {1{sel[0]}};
    result = result | ( input_1 & {1{sel[1]}});
    result = result | ( input_2 & {1{sel[2]}});
    MUX1HOT_s_1_3_2 = result;
  end
  endfunction


  function automatic [0:0] MUX1HOT_s_1_4_2;
    input [0:0] input_3;
    input [0:0] input_2;
    input [0:0] input_1;
    input [0:0] input_0;
    input [3:0] sel;
    reg [0:0] result;
  begin
    result = input_0 & {1{sel[0]}};
    result = result | ( input_1 & {1{sel[1]}});
    result = result | ( input_2 & {1{sel[2]}});
    result = result | ( input_3 & {1{sel[3]}});
    MUX1HOT_s_1_4_2 = result;
  end
  endfunction


  function automatic [0:0] MUX1HOT_s_1_6_2;
    input [0:0] input_5;
    input [0:0] input_4;
    input [0:0] input_3;
    input [0:0] input_2;
    input [0:0] input_1;
    input [0:0] input_0;
    input [5:0] sel;
    reg [0:0] result;
  begin
    result = input_0 & {1{sel[0]}};
    result = result | ( input_1 & {1{sel[1]}});
    result = result | ( input_2 & {1{sel[2]}});
    result = result | ( input_3 & {1{sel[3]}});
    result = result | ( input_4 & {1{sel[4]}});
    result = result | ( input_5 & {1{sel[5]}});
    MUX1HOT_s_1_6_2 = result;
  end
  endfunction


  function automatic [10:0] MUX1HOT_v_11_3_2;
    input [10:0] input_2;
    input [10:0] input_1;
    input [10:0] input_0;
    input [2:0] sel;
    reg [10:0] result;
  begin
    result = input_0 & {11{sel[0]}};
    result = result | ( input_1 & {11{sel[1]}});
    result = result | ( input_2 & {11{sel[2]}});
    MUX1HOT_v_11_3_2 = result;
  end
  endfunction


  function automatic [10:0] MUX1HOT_v_11_6_2;
    input [10:0] input_5;
    input [10:0] input_4;
    input [10:0] input_3;
    input [10:0] input_2;
    input [10:0] input_1;
    input [10:0] input_0;
    input [5:0] sel;
    reg [10:0] result;
  begin
    result = input_0 & {11{sel[0]}};
    result = result | ( input_1 & {11{sel[1]}});
    result = result | ( input_2 & {11{sel[2]}});
    result = result | ( input_3 & {11{sel[3]}});
    result = result | ( input_4 & {11{sel[4]}});
    result = result | ( input_5 & {11{sel[5]}});
    MUX1HOT_v_11_6_2 = result;
  end
  endfunction


  function automatic [11:0] MUX1HOT_v_12_3_2;
    input [11:0] input_2;
    input [11:0] input_1;
    input [11:0] input_0;
    input [2:0] sel;
    reg [11:0] result;
  begin
    result = input_0 & {12{sel[0]}};
    result = result | ( input_1 & {12{sel[1]}});
    result = result | ( input_2 & {12{sel[2]}});
    MUX1HOT_v_12_3_2 = result;
  end
  endfunction


  function automatic [11:0] MUX1HOT_v_12_4_2;
    input [11:0] input_3;
    input [11:0] input_2;
    input [11:0] input_1;
    input [11:0] input_0;
    input [3:0] sel;
    reg [11:0] result;
  begin
    result = input_0 & {12{sel[0]}};
    result = result | ( input_1 & {12{sel[1]}});
    result = result | ( input_2 & {12{sel[2]}});
    result = result | ( input_3 & {12{sel[3]}});
    MUX1HOT_v_12_4_2 = result;
  end
  endfunction


  function automatic [11:0] MUX1HOT_v_12_5_2;
    input [11:0] input_4;
    input [11:0] input_3;
    input [11:0] input_2;
    input [11:0] input_1;
    input [11:0] input_0;
    input [4:0] sel;
    reg [11:0] result;
  begin
    result = input_0 & {12{sel[0]}};
    result = result | ( input_1 & {12{sel[1]}});
    result = result | ( input_2 & {12{sel[2]}});
    result = result | ( input_3 & {12{sel[3]}});
    result = result | ( input_4 & {12{sel[4]}});
    MUX1HOT_v_12_5_2 = result;
  end
  endfunction


  function automatic [11:0] MUX1HOT_v_12_6_2;
    input [11:0] input_5;
    input [11:0] input_4;
    input [11:0] input_3;
    input [11:0] input_2;
    input [11:0] input_1;
    input [11:0] input_0;
    input [5:0] sel;
    reg [11:0] result;
  begin
    result = input_0 & {12{sel[0]}};
    result = result | ( input_1 & {12{sel[1]}});
    result = result | ( input_2 & {12{sel[2]}});
    result = result | ( input_3 & {12{sel[3]}});
    result = result | ( input_4 & {12{sel[4]}});
    result = result | ( input_5 & {12{sel[5]}});
    MUX1HOT_v_12_6_2 = result;
  end
  endfunction


  function automatic [12:0] MUX1HOT_v_13_3_2;
    input [12:0] input_2;
    input [12:0] input_1;
    input [12:0] input_0;
    input [2:0] sel;
    reg [12:0] result;
  begin
    result = input_0 & {13{sel[0]}};
    result = result | ( input_1 & {13{sel[1]}});
    result = result | ( input_2 & {13{sel[2]}});
    MUX1HOT_v_13_3_2 = result;
  end
  endfunction


  function automatic [12:0] MUX1HOT_v_13_4_2;
    input [12:0] input_3;
    input [12:0] input_2;
    input [12:0] input_1;
    input [12:0] input_0;
    input [3:0] sel;
    reg [12:0] result;
  begin
    result = input_0 & {13{sel[0]}};
    result = result | ( input_1 & {13{sel[1]}});
    result = result | ( input_2 & {13{sel[2]}});
    result = result | ( input_3 & {13{sel[3]}});
    MUX1HOT_v_13_4_2 = result;
  end
  endfunction


  function automatic [12:0] MUX1HOT_v_13_5_2;
    input [12:0] input_4;
    input [12:0] input_3;
    input [12:0] input_2;
    input [12:0] input_1;
    input [12:0] input_0;
    input [4:0] sel;
    reg [12:0] result;
  begin
    result = input_0 & {13{sel[0]}};
    result = result | ( input_1 & {13{sel[1]}});
    result = result | ( input_2 & {13{sel[2]}});
    result = result | ( input_3 & {13{sel[3]}});
    result = result | ( input_4 & {13{sel[4]}});
    MUX1HOT_v_13_5_2 = result;
  end
  endfunction


  function automatic [12:0] MUX1HOT_v_13_8_2;
    input [12:0] input_7;
    input [12:0] input_6;
    input [12:0] input_5;
    input [12:0] input_4;
    input [12:0] input_3;
    input [12:0] input_2;
    input [12:0] input_1;
    input [12:0] input_0;
    input [7:0] sel;
    reg [12:0] result;
  begin
    result = input_0 & {13{sel[0]}};
    result = result | ( input_1 & {13{sel[1]}});
    result = result | ( input_2 & {13{sel[2]}});
    result = result | ( input_3 & {13{sel[3]}});
    result = result | ( input_4 & {13{sel[4]}});
    result = result | ( input_5 & {13{sel[5]}});
    result = result | ( input_6 & {13{sel[6]}});
    result = result | ( input_7 & {13{sel[7]}});
    MUX1HOT_v_13_8_2 = result;
  end
  endfunction


  function automatic [1:0] MUX1HOT_v_2_3_2;
    input [1:0] input_2;
    input [1:0] input_1;
    input [1:0] input_0;
    input [2:0] sel;
    reg [1:0] result;
  begin
    result = input_0 & {2{sel[0]}};
    result = result | ( input_1 & {2{sel[1]}});
    result = result | ( input_2 & {2{sel[2]}});
    MUX1HOT_v_2_3_2 = result;
  end
  endfunction


  function automatic [1:0] MUX1HOT_v_2_5_2;
    input [1:0] input_4;
    input [1:0] input_3;
    input [1:0] input_2;
    input [1:0] input_1;
    input [1:0] input_0;
    input [4:0] sel;
    reg [1:0] result;
  begin
    result = input_0 & {2{sel[0]}};
    result = result | ( input_1 & {2{sel[1]}});
    result = result | ( input_2 & {2{sel[2]}});
    result = result | ( input_3 & {2{sel[3]}});
    result = result | ( input_4 & {2{sel[4]}});
    MUX1HOT_v_2_5_2 = result;
  end
  endfunction


  function automatic [35:0] MUX1HOT_v_36_3_2;
    input [35:0] input_2;
    input [35:0] input_1;
    input [35:0] input_0;
    input [2:0] sel;
    reg [35:0] result;
  begin
    result = input_0 & {36{sel[0]}};
    result = result | ( input_1 & {36{sel[1]}});
    result = result | ( input_2 & {36{sel[2]}});
    MUX1HOT_v_36_3_2 = result;
  end
  endfunction


  function automatic [35:0] MUX1HOT_v_36_4_2;
    input [35:0] input_3;
    input [35:0] input_2;
    input [35:0] input_1;
    input [35:0] input_0;
    input [3:0] sel;
    reg [35:0] result;
  begin
    result = input_0 & {36{sel[0]}};
    result = result | ( input_1 & {36{sel[1]}});
    result = result | ( input_2 & {36{sel[2]}});
    result = result | ( input_3 & {36{sel[3]}});
    MUX1HOT_v_36_4_2 = result;
  end
  endfunction


  function automatic [2:0] MUX1HOT_v_3_3_2;
    input [2:0] input_2;
    input [2:0] input_1;
    input [2:0] input_0;
    input [2:0] sel;
    reg [2:0] result;
  begin
    result = input_0 & {3{sel[0]}};
    result = result | ( input_1 & {3{sel[1]}});
    result = result | ( input_2 & {3{sel[2]}});
    MUX1HOT_v_3_3_2 = result;
  end
  endfunction


  function automatic [0:0] MUX_s_1_2_2;
    input [0:0] input_0;
    input [0:0] input_1;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function automatic [10:0] MUX_v_11_20_2;
    input [10:0] input_0;
    input [10:0] input_1;
    input [10:0] input_2;
    input [10:0] input_3;
    input [10:0] input_4;
    input [10:0] input_5;
    input [10:0] input_6;
    input [10:0] input_7;
    input [10:0] input_8;
    input [10:0] input_9;
    input [10:0] input_10;
    input [10:0] input_11;
    input [10:0] input_12;
    input [10:0] input_13;
    input [10:0] input_14;
    input [10:0] input_15;
    input [10:0] input_16;
    input [10:0] input_17;
    input [10:0] input_18;
    input [10:0] input_19;
    input [4:0] sel;
    reg [10:0] result;
  begin
    case (sel)
      5'b00000 : begin
        result = input_0;
      end
      5'b00001 : begin
        result = input_1;
      end
      5'b00010 : begin
        result = input_2;
      end
      5'b00011 : begin
        result = input_3;
      end
      5'b00100 : begin
        result = input_4;
      end
      5'b00101 : begin
        result = input_5;
      end
      5'b00110 : begin
        result = input_6;
      end
      5'b00111 : begin
        result = input_7;
      end
      5'b01000 : begin
        result = input_8;
      end
      5'b01001 : begin
        result = input_9;
      end
      5'b01010 : begin
        result = input_10;
      end
      5'b01011 : begin
        result = input_11;
      end
      5'b01100 : begin
        result = input_12;
      end
      5'b01101 : begin
        result = input_13;
      end
      5'b01110 : begin
        result = input_14;
      end
      5'b01111 : begin
        result = input_15;
      end
      5'b10000 : begin
        result = input_16;
      end
      5'b10001 : begin
        result = input_17;
      end
      5'b10010 : begin
        result = input_18;
      end
      default : begin
        result = input_19;
      end
    endcase
    MUX_v_11_20_2 = result;
  end
  endfunction


  function automatic [10:0] MUX_v_11_25_2x0x1x2x3x4;
    input [10:0] input_5;
    input [10:0] input_6;
    input [10:0] input_7;
    input [10:0] input_8;
    input [10:0] input_9;
    input [10:0] input_10;
    input [10:0] input_11;
    input [10:0] input_12;
    input [10:0] input_13;
    input [10:0] input_14;
    input [10:0] input_15;
    input [10:0] input_16;
    input [10:0] input_17;
    input [10:0] input_18;
    input [10:0] input_19;
    input [10:0] input_20;
    input [10:0] input_21;
    input [10:0] input_22;
    input [10:0] input_23;
    input [10:0] input_24;
    input [4:0] sel;
    reg [10:0] result;
  begin
    case (sel)
      5'b00101 : begin
        result = input_5;
      end
      5'b00110 : begin
        result = input_6;
      end
      5'b00111 : begin
        result = input_7;
      end
      5'b01000 : begin
        result = input_8;
      end
      5'b01001 : begin
        result = input_9;
      end
      5'b01010 : begin
        result = input_10;
      end
      5'b01011 : begin
        result = input_11;
      end
      5'b01100 : begin
        result = input_12;
      end
      5'b01101 : begin
        result = input_13;
      end
      5'b01110 : begin
        result = input_14;
      end
      5'b01111 : begin
        result = input_15;
      end
      5'b10000 : begin
        result = input_16;
      end
      5'b10001 : begin
        result = input_17;
      end
      5'b10010 : begin
        result = input_18;
      end
      5'b10011 : begin
        result = input_19;
      end
      5'b10100 : begin
        result = input_20;
      end
      5'b10101 : begin
        result = input_21;
      end
      5'b10110 : begin
        result = input_22;
      end
      5'b10111 : begin
        result = input_23;
      end
      default : begin
        result = input_24;
      end
    endcase
    MUX_v_11_25_2x0x1x2x3x4 = result;
  end
  endfunction


  function automatic [10:0] MUX_v_11_2_2;
    input [10:0] input_0;
    input [10:0] input_1;
    input [0:0] sel;
    reg [10:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_11_2_2 = result;
  end
  endfunction


  function automatic [10:0] MUX_v_11_4_2;
    input [10:0] input_0;
    input [10:0] input_1;
    input [10:0] input_2;
    input [10:0] input_3;
    input [1:0] sel;
    reg [10:0] result;
  begin
    case (sel)
      2'b00 : begin
        result = input_0;
      end
      2'b01 : begin
        result = input_1;
      end
      2'b10 : begin
        result = input_2;
      end
      default : begin
        result = input_3;
      end
    endcase
    MUX_v_11_4_2 = result;
  end
  endfunction


  function automatic [11:0] MUX_v_12_25_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [11:0] input_2;
    input [11:0] input_3;
    input [11:0] input_4;
    input [11:0] input_5;
    input [11:0] input_6;
    input [11:0] input_7;
    input [11:0] input_8;
    input [11:0] input_9;
    input [11:0] input_10;
    input [11:0] input_11;
    input [11:0] input_12;
    input [11:0] input_13;
    input [11:0] input_14;
    input [11:0] input_15;
    input [11:0] input_16;
    input [11:0] input_17;
    input [11:0] input_18;
    input [11:0] input_19;
    input [11:0] input_20;
    input [11:0] input_21;
    input [11:0] input_22;
    input [11:0] input_23;
    input [11:0] input_24;
    input [4:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      5'b00000 : begin
        result = input_0;
      end
      5'b00001 : begin
        result = input_1;
      end
      5'b00010 : begin
        result = input_2;
      end
      5'b00011 : begin
        result = input_3;
      end
      5'b00100 : begin
        result = input_4;
      end
      5'b00101 : begin
        result = input_5;
      end
      5'b00110 : begin
        result = input_6;
      end
      5'b00111 : begin
        result = input_7;
      end
      5'b01000 : begin
        result = input_8;
      end
      5'b01001 : begin
        result = input_9;
      end
      5'b01010 : begin
        result = input_10;
      end
      5'b01011 : begin
        result = input_11;
      end
      5'b01100 : begin
        result = input_12;
      end
      5'b01101 : begin
        result = input_13;
      end
      5'b01110 : begin
        result = input_14;
      end
      5'b01111 : begin
        result = input_15;
      end
      5'b10000 : begin
        result = input_16;
      end
      5'b10001 : begin
        result = input_17;
      end
      5'b10010 : begin
        result = input_18;
      end
      5'b10011 : begin
        result = input_19;
      end
      5'b10100 : begin
        result = input_20;
      end
      5'b10101 : begin
        result = input_21;
      end
      5'b10110 : begin
        result = input_22;
      end
      5'b10111 : begin
        result = input_23;
      end
      default : begin
        result = input_24;
      end
    endcase
    MUX_v_12_25_2 = result;
  end
  endfunction


  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [0:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction


  function automatic [12:0] MUX_v_13_2_2;
    input [12:0] input_0;
    input [12:0] input_1;
    input [0:0] sel;
    reg [12:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_13_2_2 = result;
  end
  endfunction


  function automatic [13:0] MUX_v_14_2_2;
    input [13:0] input_0;
    input [13:0] input_1;
    input [0:0] sel;
    reg [13:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_14_2_2 = result;
  end
  endfunction


  function automatic [22:0] MUX_v_23_2_2;
    input [22:0] input_0;
    input [22:0] input_1;
    input [0:0] sel;
    reg [22:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_23_2_2 = result;
  end
  endfunction


  function automatic [25:0] MUX_v_26_2_2;
    input [25:0] input_0;
    input [25:0] input_1;
    input [0:0] sel;
    reg [25:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_26_2_2 = result;
  end
  endfunction


  function automatic [1:0] MUX_v_2_2_2;
    input [1:0] input_0;
    input [1:0] input_1;
    input [0:0] sel;
    reg [1:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_2_2_2 = result;
  end
  endfunction


  function automatic [35:0] MUX_v_36_25_2x0;
    input [35:0] input_1;
    input [35:0] input_2;
    input [35:0] input_3;
    input [35:0] input_4;
    input [35:0] input_5;
    input [35:0] input_6;
    input [35:0] input_7;
    input [35:0] input_8;
    input [35:0] input_9;
    input [35:0] input_10;
    input [35:0] input_11;
    input [35:0] input_12;
    input [35:0] input_13;
    input [35:0] input_14;
    input [35:0] input_15;
    input [35:0] input_16;
    input [35:0] input_17;
    input [35:0] input_18;
    input [35:0] input_19;
    input [35:0] input_20;
    input [35:0] input_21;
    input [35:0] input_22;
    input [35:0] input_23;
    input [35:0] input_24;
    input [4:0] sel;
    reg [35:0] result;
  begin
    case (sel)
      5'b00001 : begin
        result = input_1;
      end
      5'b00010 : begin
        result = input_2;
      end
      5'b00011 : begin
        result = input_3;
      end
      5'b00100 : begin
        result = input_4;
      end
      5'b00101 : begin
        result = input_5;
      end
      5'b00110 : begin
        result = input_6;
      end
      5'b00111 : begin
        result = input_7;
      end
      5'b01000 : begin
        result = input_8;
      end
      5'b01001 : begin
        result = input_9;
      end
      5'b01010 : begin
        result = input_10;
      end
      5'b01011 : begin
        result = input_11;
      end
      5'b01100 : begin
        result = input_12;
      end
      5'b01101 : begin
        result = input_13;
      end
      5'b01110 : begin
        result = input_14;
      end
      5'b01111 : begin
        result = input_15;
      end
      5'b10000 : begin
        result = input_16;
      end
      5'b10001 : begin
        result = input_17;
      end
      5'b10010 : begin
        result = input_18;
      end
      5'b10011 : begin
        result = input_19;
      end
      5'b10100 : begin
        result = input_20;
      end
      5'b10101 : begin
        result = input_21;
      end
      5'b10110 : begin
        result = input_22;
      end
      5'b10111 : begin
        result = input_23;
      end
      default : begin
        result = input_24;
      end
    endcase
    MUX_v_36_25_2x0 = result;
  end
  endfunction


  function automatic [35:0] MUX_v_36_25_2x0x1x2x3x4x5x6x7;
    input [35:0] input_8;
    input [35:0] input_9;
    input [35:0] input_10;
    input [35:0] input_11;
    input [35:0] input_12;
    input [35:0] input_13;
    input [35:0] input_14;
    input [35:0] input_15;
    input [35:0] input_16;
    input [35:0] input_17;
    input [35:0] input_18;
    input [35:0] input_19;
    input [35:0] input_20;
    input [35:0] input_21;
    input [35:0] input_22;
    input [35:0] input_23;
    input [35:0] input_24;
    input [4:0] sel;
    reg [35:0] result;
  begin
    case (sel)
      5'b01000 : begin
        result = input_8;
      end
      5'b01001 : begin
        result = input_9;
      end
      5'b01010 : begin
        result = input_10;
      end
      5'b01011 : begin
        result = input_11;
      end
      5'b01100 : begin
        result = input_12;
      end
      5'b01101 : begin
        result = input_13;
      end
      5'b01110 : begin
        result = input_14;
      end
      5'b01111 : begin
        result = input_15;
      end
      5'b10000 : begin
        result = input_16;
      end
      5'b10001 : begin
        result = input_17;
      end
      5'b10010 : begin
        result = input_18;
      end
      5'b10011 : begin
        result = input_19;
      end
      5'b10100 : begin
        result = input_20;
      end
      5'b10101 : begin
        result = input_21;
      end
      5'b10110 : begin
        result = input_22;
      end
      5'b10111 : begin
        result = input_23;
      end
      default : begin
        result = input_24;
      end
    endcase
    MUX_v_36_25_2x0x1x2x3x4x5x6x7 = result;
  end
  endfunction


  function automatic [35:0] MUX_v_36_2_2;
    input [35:0] input_0;
    input [35:0] input_1;
    input [0:0] sel;
    reg [35:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_36_2_2 = result;
  end
  endfunction


  function automatic [2:0] MUX_v_3_2_2;
    input [2:0] input_0;
    input [2:0] input_1;
    input [0:0] sel;
    reg [2:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_3_2_2 = result;
  end
  endfunction


  function automatic [3:0] MUX_v_4_2_2;
    input [3:0] input_0;
    input [3:0] input_1;
    input [0:0] sel;
    reg [3:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_4_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input [0:0] sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction


  function automatic [10:0] readslicef_12_11_1;
    input [11:0] vector;
    reg [11:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_12_11_1 = tmp[10:0];
  end
  endfunction


  function automatic [0:0] readslicef_12_1_11;
    input [11:0] vector;
    reg [11:0] tmp;
  begin
    tmp = vector >> 11;
    readslicef_12_1_11 = tmp[0:0];
  end
  endfunction


  function automatic [11:0] readslicef_13_12_1;
    input [12:0] vector;
    reg [12:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_13_12_1 = tmp[11:0];
  end
  endfunction


  function automatic [0:0] readslicef_13_1_12;
    input [12:0] vector;
    reg [12:0] tmp;
  begin
    tmp = vector >> 12;
    readslicef_13_1_12 = tmp[0:0];
  end
  endfunction


  function automatic [12:0] readslicef_14_13_1;
    input [13:0] vector;
    reg [13:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_14_13_1 = tmp[12:0];
  end
  endfunction


  function automatic [0:0] readslicef_14_1_13;
    input [13:0] vector;
    reg [13:0] tmp;
  begin
    tmp = vector >> 13;
    readslicef_14_1_13 = tmp[0:0];
  end
  endfunction


  function automatic [13:0] readslicef_15_14_1;
    input [14:0] vector;
    reg [14:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_15_14_1 = tmp[13:0];
  end
  endfunction


  function automatic [17:0] readslicef_21_18_3;
    input [20:0] vector;
    reg [20:0] tmp;
  begin
    tmp = vector >> 3;
    readslicef_21_18_3 = tmp[17:0];
  end
  endfunction


  function automatic [0:0] readslicef_27_1_26;
    input [26:0] vector;
    reg [26:0] tmp;
  begin
    tmp = vector >> 26;
    readslicef_27_1_26 = tmp[0:0];
  end
  endfunction


  function automatic [0:0] readslicef_3_1_2;
    input [2:0] vector;
    reg [2:0] tmp;
  begin
    tmp = vector >> 2;
    readslicef_3_1_2 = tmp[0:0];
  end
  endfunction


  function automatic [0:0] readslicef_6_1_5;
    input [5:0] vector;
    reg [5:0] tmp;
  begin
    tmp = vector >> 5;
    readslicef_6_1_5 = tmp[0:0];
  end
  endfunction


  function automatic [12:0] signext_13_1;
    input [0:0] vector;
  begin
    signext_13_1= {{12{vector[0]}}, vector};
  end
  endfunction


  function automatic [12:0] signext_13_12;
    input [11:0] vector;
  begin
    signext_13_12= {{1{vector[11]}}, vector};
  end
  endfunction


  function automatic [1:0] signext_2_1;
    input [0:0] vector;
  begin
    signext_2_1= {{1{vector[0]}}, vector};
  end
  endfunction


  function automatic [2:0] signext_3_1;
    input [0:0] vector;
  begin
    signext_3_1= {{2{vector[0]}}, vector};
  end
  endfunction


  function automatic [13:0] conv_s2s_12_14 ;
    input [11:0]  vector ;
  begin
    conv_s2s_12_14 = {{2{vector[11]}}, vector};
  end
  endfunction


  function automatic [13:0] conv_s2s_13_14 ;
    input [12:0]  vector ;
  begin
    conv_s2s_13_14 = {vector[12], vector};
  end
  endfunction


  function automatic [17:0] conv_s2s_17_18 ;
    input [16:0]  vector ;
  begin
    conv_s2s_17_18 = {vector[16], vector};
  end
  endfunction


  function automatic [13:0] conv_s2u_2_14 ;
    input [1:0]  vector ;
  begin
    conv_s2u_2_14 = {{12{vector[1]}}, vector};
  end
  endfunction


  function automatic [14:0] conv_s2u_13_15 ;
    input [12:0]  vector ;
  begin
    conv_s2u_13_15 = {{2{vector[12]}}, vector};
  end
  endfunction


  function automatic [14:0] conv_s2u_14_15 ;
    input [13:0]  vector ;
  begin
    conv_s2u_14_15 = {vector[13], vector};
  end
  endfunction


  function automatic [12:0] conv_u2s_1_13 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_13 = {{12{1'b0}}, vector};
  end
  endfunction


  function automatic [17:0] conv_u2s_1_18 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_18 = {{17{1'b0}}, vector};
  end
  endfunction


  function automatic [2:0] conv_u2s_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2s_2_3 =  {1'b0, vector};
  end
  endfunction


  function automatic [8:0] conv_u2s_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2s_8_9 =  {1'b0, vector};
  end
  endfunction


  function automatic [11:0] conv_u2s_11_12 ;
    input [10:0]  vector ;
  begin
    conv_u2s_11_12 =  {1'b0, vector};
  end
  endfunction


  function automatic [12:0] conv_u2s_12_13 ;
    input [11:0]  vector ;
  begin
    conv_u2s_12_13 =  {1'b0, vector};
  end
  endfunction


  function automatic [17:0] conv_u2s_12_18 ;
    input [11:0]  vector ;
  begin
    conv_u2s_12_18 = {{6{1'b0}}, vector};
  end
  endfunction


  function automatic [22:0] conv_u2s_16_23 ;
    input [15:0]  vector ;
  begin
    conv_u2s_16_23 = {{7{1'b0}}, vector};
  end
  endfunction


  function automatic [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction


  function automatic [2:0] conv_u2u_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_3 = {1'b0, vector};
  end
  endfunction


  function automatic [3:0] conv_u2u_2_4 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_4 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [3:0] conv_u2u_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_4 = {1'b0, vector};
  end
  endfunction


  function automatic [4:0] conv_u2u_3_5 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_5 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [4:0] conv_u2u_4_5 ;
    input [3:0]  vector ;
  begin
    conv_u2u_4_5 = {1'b0, vector};
  end
  endfunction


  function automatic [25:0] conv_u2u_4_26 ;
    input [3:0]  vector ;
  begin
    conv_u2u_4_26 = {{22{1'b0}}, vector};
  end
  endfunction


  function automatic [14:0] conv_u2u_11_15 ;
    input [10:0]  vector ;
  begin
    conv_u2u_11_15 = {{4{1'b0}}, vector};
  end
  endfunction


  function automatic [12:0] conv_u2u_12_13 ;
    input [11:0]  vector ;
  begin
    conv_u2u_12_13 = {1'b0, vector};
  end
  endfunction


  function automatic [13:0] conv_u2u_13_14 ;
    input [12:0]  vector ;
  begin
    conv_u2u_13_14 = {1'b0, vector};
  end
  endfunction


  function automatic [25:0] conv_u2u_26_26 ;
    input [25:0]  vector ;
  begin
    conv_u2u_26_26 = vector;
  end
  endfunction


  function automatic [26:0] conv_u2u_26_27 ;
    input [25:0]  vector ;
  begin
    conv_u2u_26_27 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    cmc_core
// ------------------------------------------------------------------


module cmc_core (
  clk, arst_n, top_reg_frameWidth, top_reg_frameHeight, top_reg_blc, cmc_reg_m_nEb,
      cmc_reg_m_nGain, cmc_reg_m_bCFCEnable, cmc_reg_m_bDiscardH, cmc_reg_m_nCFCStrength,
      src_rsc_dat, src_rsc_vld, src_rsc_rdy, dst_rsc_dat, dst_rsc_vld, dst_rsc_rdy
);
  input clk;
  input arst_n;
  input [12:0] top_reg_frameWidth;
  input [12:0] top_reg_frameHeight;
  input [8:0] top_reg_blc;
  input cmc_reg_m_nEb;
  input [191:0] cmc_reg_m_nGain;
  input cmc_reg_m_bCFCEnable;
  input cmc_reg_m_bDiscardH;
  input [4:0] cmc_reg_m_nCFCStrength;
  input [35:0] src_rsc_dat;
  input src_rsc_vld;
  output src_rsc_rdy;
  output [41:0] dst_rsc_dat;
  output dst_rsc_vld;
  input dst_rsc_rdy;


  // Interconnect Declarations
  wire core_wen;
  wire src_rsci_wen_comp;
  wire [35:0] src_rsci_idat_mxwt;
  wire dst_rsci_wen_comp;
  reg [11:0] dst_rsci_idat_41_30;
  reg [1:0] dst_rsci_idat_29_28;
  reg [11:0] dst_rsci_idat_27_16;
  reg [1:0] dst_rsci_idat_15_14;
  reg [11:0] dst_rsci_idat_13_2;
  reg [1:0] dst_rsci_idat_1_0;
  wire or_dcpl_2;
  wire and_dcpl_6;
  wire and_dcpl_9;
  reg exitL_exit_cmc_col_lpi_1_dfm;
  reg exit_cmc_row_lpi_1_dfm;
  reg exitL_exit_cmc_row_sva;
  wire cmc_row_asn_sft_lpi_1_dfm_st_1_mx0;
  reg cmc_row_asn_sft_lpi_1_dfm_st_1;
  reg main_stage_0_2;
  reg cmc_col_not_mdf_sva_st_1;
  wire [19:0] cmc_cal2_acc_6_psp_sva_1;
  wire [20:0] nl_cmc_cal2_acc_6_psp_sva_1;
  wire [19:0] cmc_cal2_acc_6_psp_2_sva_1;
  wire [20:0] nl_cmc_cal2_acc_6_psp_2_sva_1;
  wire [19:0] cmc_cal2_acc_6_psp_1_sva_1;
  wire [20:0] nl_cmc_cal2_acc_6_psp_1_sva_1;
  reg reg_dst_rsci_oswt_cse;
  wire cmc_col_and_1_cse;
  wire cmc_col_and_cse;
  reg reg_src_rsci_oswt_cse;
  wire or_9_cse;
  wire nor_2_cse;
  wire [12:0] z_out;
  wire [13:0] nl_z_out;
  reg [12:0] cmc_row_y_lpi_1_dfm_2;
  reg [12:0] cmc_col_x_lpi_1_dfm_2;
  reg [15:0] cmc_cal1_2_else_else_acc_itm_1;
  wire [16:0] nl_cmc_cal1_2_else_else_acc_itm_1;
  reg [15:0] cmc_cal1_3_else_else_acc_itm_1;
  wire [16:0] nl_cmc_cal1_3_else_else_acc_itm_1;
  reg [15:0] cmc_cal1_1_if_acc_itm_1;
  wire [16:0] nl_cmc_cal1_1_if_acc_itm_1;
  reg [15:0] cmc_cal1_6_if_acc_itm_1;
  wire [16:0] nl_cmc_cal1_6_if_acc_itm_1;
  reg [15:0] cmc_cal1_7_else_else_acc_itm_1;
  wire [16:0] nl_cmc_cal1_7_else_else_acc_itm_1;
  reg [15:0] cmc_cal1_5_else_else_acc_itm_1;
  wire [16:0] nl_cmc_cal1_5_else_else_acc_itm_1;
  reg [15:0] cmc_cal1_10_else_else_acc_itm_1;
  wire [16:0] nl_cmc_cal1_10_else_else_acc_itm_1;
  reg [15:0] cmc_cal1_11_if_acc_itm_1;
  wire [16:0] nl_cmc_cal1_11_if_acc_itm_1;
  reg [15:0] cmc_cal1_9_else_else_acc_itm_1;
  wire [16:0] nl_cmc_cal1_9_else_else_acc_itm_1;
  wire [13:0] cmc_clip_result_lpi_1_dfm_2;
  wire [13:0] cmc_clip_result_2_lpi_1_dfm_2;
  wire [13:0] cmc_clip_result_1_lpi_1_dfm_2;
  wire [12:0] green_sva_1;
  wire [13:0] nl_green_sva_1;
  wire [12:0] blue_sva_1;
  wire [13:0] nl_blue_sva_1;
  wire [12:0] red_sva_1;
  wire [13:0] nl_red_sva_1;
  wire [12:0] cmc_col_x_lpi_1_dfm_3;
  wire [12:0] cmc_row_y_lpi_1_dfm_3;
  wire exit_cmc_row_lpi_1_dfm_1;
  wire [4:0] ratio_4_0_lpi_1_dfm_1;
  wire [20:0] cmc_cal2_3_acc_3_itm_29_9_1;
  wire [20:0] cmc_cal2_2_acc_3_itm_29_9_1;
  wire [20:0] cmc_cal2_1_acc_3_itm_29_9_1;
  wire cmc_col_acc_2_itm_13_1;
  wire cmc_row_acc_2_itm_13;

  wire[0:0] cmc_reg_m_nEb_not_7_nl;
  wire[0:0] cmc_reg_m_nEb_not_8_nl;
  wire[0:0] cmc_reg_m_nEb_not_5_nl;
  wire[20:0] cmc_cal1_10_else_else_mul_nl;
  wire signed [21:0] nl_cmc_cal1_10_else_else_mul_nl;
  wire[20:0] cmc_cal1_11_if_mul_nl;
  wire signed [21:0] nl_cmc_cal1_11_if_mul_nl;
  wire[20:0] cmc_cal1_9_else_else_mul_nl;
  wire signed [21:0] nl_cmc_cal1_9_else_else_mul_nl;
  wire[20:0] cmc_cal1_6_if_mul_nl;
  wire signed [21:0] nl_cmc_cal1_6_if_mul_nl;
  wire[20:0] cmc_cal1_7_else_else_mul_nl;
  wire signed [21:0] nl_cmc_cal1_7_else_else_mul_nl;
  wire[20:0] cmc_cal1_5_else_else_mul_nl;
  wire signed [21:0] nl_cmc_cal1_5_else_else_mul_nl;
  wire[20:0] cmc_cal1_2_else_else_mul_nl;
  wire signed [21:0] nl_cmc_cal1_2_else_else_mul_nl;
  wire[20:0] cmc_cal1_3_else_else_mul_nl;
  wire signed [21:0] nl_cmc_cal1_3_else_else_mul_nl;
  wire[20:0] cmc_cal1_1_if_mul_nl;
  wire signed [21:0] nl_cmc_cal1_1_if_mul_nl;
  wire[0:0] mux_3_nl;
  wire[0:0] or_nl;
  wire[0:0] or_8_nl;
  wire[13:0] cmc_clip_nor_nl;
  wire[5:0] cmc_cal2_3_operator_21_true_acc_nl;
  wire[6:0] nl_cmc_cal2_3_operator_21_true_acc_nl;
  wire[13:0] cmc_clip_nor_1_nl;
  wire[5:0] cmc_cal2_2_operator_21_true_acc_nl;
  wire[6:0] nl_cmc_cal2_2_operator_21_true_acc_nl;
  wire[13:0] cmc_clip_nor_2_nl;
  wire[5:0] cmc_cal2_1_operator_21_true_acc_nl;
  wire[6:0] nl_cmc_cal2_1_operator_21_true_acc_nl;
  wire[16:0] operator_31_true_acc_2_nl;
  wire[17:0] nl_operator_31_true_acc_2_nl;
  wire[9:0] operator_31_true_acc_1_nl;
  wire[10:0] nl_operator_31_true_acc_1_nl;
  wire[16:0] operator_31_true_acc_4_nl;
  wire[17:0] nl_operator_31_true_acc_4_nl;
  wire[9:0] operator_31_true_acc_3_nl;
  wire[10:0] nl_operator_31_true_acc_3_nl;
  wire[16:0] operator_31_true_acc_7_nl;
  wire[17:0] nl_operator_31_true_acc_7_nl;
  wire[9:0] operator_31_true_acc_6_nl;
  wire[10:0] nl_operator_31_true_acc_6_nl;
  wire[29:0] cmc_cal2_3_acc_3_nl;
  wire[30:0] nl_cmc_cal2_3_acc_3_nl;
  wire[28:0] cmc_cal2_acc_11_nl;
  wire[29:0] nl_cmc_cal2_acc_11_nl;
  wire[27:0] cmc_cal2_3_mul_4_nl;
  wire signed [28:0] nl_cmc_cal2_3_mul_4_nl;
  wire[27:0] cmc_cal2_3_mul_5_nl;
  wire signed [28:0] nl_cmc_cal2_3_mul_5_nl;
  wire[27:0] cmc_cal2_3_mul_3_nl;
  wire signed [28:0] nl_cmc_cal2_3_mul_3_nl;
  wire[29:0] cmc_cal2_2_acc_3_nl;
  wire[30:0] nl_cmc_cal2_2_acc_3_nl;
  wire[28:0] cmc_cal2_acc_10_nl;
  wire[29:0] nl_cmc_cal2_acc_10_nl;
  wire[27:0] cmc_cal2_2_mul_4_nl;
  wire signed [28:0] nl_cmc_cal2_2_mul_4_nl;
  wire[27:0] cmc_cal2_2_mul_5_nl;
  wire signed [28:0] nl_cmc_cal2_2_mul_5_nl;
  wire[27:0] cmc_cal2_2_mul_3_nl;
  wire signed [28:0] nl_cmc_cal2_2_mul_3_nl;
  wire[29:0] cmc_cal2_1_acc_3_nl;
  wire[30:0] nl_cmc_cal2_1_acc_3_nl;
  wire[28:0] cmc_cal2_acc_nl;
  wire[29:0] nl_cmc_cal2_acc_nl;
  wire[27:0] cmc_cal2_1_mul_4_nl;
  wire signed [28:0] nl_cmc_cal2_1_mul_4_nl;
  wire[27:0] cmc_cal2_1_mul_5_nl;
  wire signed [28:0] nl_cmc_cal2_1_mul_5_nl;
  wire[27:0] cmc_cal2_1_mul_3_nl;
  wire signed [28:0] nl_cmc_cal2_1_mul_3_nl;
  wire[13:0] cmc_col_acc_2_nl;
  wire[14:0] nl_cmc_col_acc_2_nl;
  wire[0:0] asn_cmc_row_asn_sft_lpi_1_dfm_st_1_nor_nl;
  wire[0:0] cmc_col_cmc_col_cmc_col_cmc_row_not_nl;
  wire[13:0] cmc_row_acc_2_nl;
  wire[14:0] nl_cmc_row_acc_2_nl;
  wire[0:0] cmc_row_not_12_nl;
  wire[12:0] cmc_col_mux_5_nl;

  // Interconnect Declarations for Component Instantiations 
  wire [41:0] nl_cmc_core_dst_rsci_inst_dst_rsci_idat;
  assign nl_cmc_core_dst_rsci_inst_dst_rsci_idat = {dst_rsci_idat_41_30 , dst_rsci_idat_29_28
      , dst_rsci_idat_27_16 , dst_rsci_idat_15_14 , dst_rsci_idat_13_2 , dst_rsci_idat_1_0};
  cmc_core_src_rsci cmc_core_src_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .src_rsc_dat(src_rsc_dat),
      .src_rsc_vld(src_rsc_vld),
      .src_rsc_rdy(src_rsc_rdy),
      .core_wen(core_wen),
      .src_rsci_oswt(reg_src_rsci_oswt_cse),
      .src_rsci_wen_comp(src_rsci_wen_comp),
      .src_rsci_idat_mxwt(src_rsci_idat_mxwt)
    );
  cmc_core_dst_rsci cmc_core_dst_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .dst_rsc_dat(dst_rsc_dat),
      .dst_rsc_vld(dst_rsc_vld),
      .dst_rsc_rdy(dst_rsc_rdy),
      .core_wen(core_wen),
      .dst_rsci_oswt(reg_dst_rsci_oswt_cse),
      .dst_rsci_wen_comp(dst_rsci_wen_comp),
      .dst_rsci_idat(nl_cmc_core_dst_rsci_inst_dst_rsci_idat[41:0])
    );
  cmc_core_staller cmc_core_staller_inst (
      .core_wen(core_wen),
      .src_rsci_wen_comp(src_rsci_wen_comp),
      .dst_rsci_wen_comp(dst_rsci_wen_comp)
    );
  assign cmc_col_and_cse = core_wen & ((and_dcpl_6 & main_stage_0_2 & cmc_reg_m_nEb)
      | and_dcpl_9);
  assign cmc_col_and_1_cse = core_wen & (~ or_dcpl_2);
  assign or_9_cse = exitL_exit_cmc_row_sva | exitL_exit_cmc_col_lpi_1_dfm | exit_cmc_row_lpi_1_dfm;
  assign nl_cmc_cal2_3_operator_21_true_acc_nl = ({1'b1 , (~ (cmc_cal2_acc_6_psp_sva_1[18:14]))})
      + 6'b000001;
  assign cmc_cal2_3_operator_21_true_acc_nl = nl_cmc_cal2_3_operator_21_true_acc_nl[5:0];
  assign cmc_clip_nor_nl = ~(MUX_v_14_2_2((cmc_cal2_acc_6_psp_sva_1[13:0]), 14'b11111111111111,
      (readslicef_6_1_5(cmc_cal2_3_operator_21_true_acc_nl))));
  assign cmc_clip_result_lpi_1_dfm_2 = ~(MUX_v_14_2_2(cmc_clip_nor_nl, 14'b11111111111111,
      (cmc_cal2_acc_6_psp_sva_1[19])));
  assign nl_cmc_cal2_2_operator_21_true_acc_nl = ({1'b1 , (~ (cmc_cal2_acc_6_psp_2_sva_1[18:14]))})
      + 6'b000001;
  assign cmc_cal2_2_operator_21_true_acc_nl = nl_cmc_cal2_2_operator_21_true_acc_nl[5:0];
  assign cmc_clip_nor_1_nl = ~(MUX_v_14_2_2((cmc_cal2_acc_6_psp_2_sva_1[13:0]), 14'b11111111111111,
      (readslicef_6_1_5(cmc_cal2_2_operator_21_true_acc_nl))));
  assign cmc_clip_result_2_lpi_1_dfm_2 = ~(MUX_v_14_2_2(cmc_clip_nor_1_nl, 14'b11111111111111,
      (cmc_cal2_acc_6_psp_2_sva_1[19])));
  assign nl_cmc_cal2_1_operator_21_true_acc_nl = ({1'b1 , (~ (cmc_cal2_acc_6_psp_1_sva_1[18:14]))})
      + 6'b000001;
  assign cmc_cal2_1_operator_21_true_acc_nl = nl_cmc_cal2_1_operator_21_true_acc_nl[5:0];
  assign cmc_clip_nor_2_nl = ~(MUX_v_14_2_2((cmc_cal2_acc_6_psp_1_sva_1[13:0]), 14'b11111111111111,
      (readslicef_6_1_5(cmc_cal2_1_operator_21_true_acc_nl))));
  assign cmc_clip_result_1_lpi_1_dfm_2 = ~(MUX_v_14_2_2(cmc_clip_nor_2_nl, 14'b11111111111111,
      (cmc_cal2_acc_6_psp_1_sva_1[19])));
  assign nl_operator_31_true_acc_1_nl = conv_u2u_9_10({(top_reg_blc[6:0]) , (signext_2_1(~
      cmc_reg_m_bDiscardH))}) + conv_u2u_1_10(cmc_cal2_1_acc_3_itm_29_9_1[0]) + 10'b0000000001;
  assign operator_31_true_acc_1_nl = nl_operator_31_true_acc_1_nl[9:0];
  assign nl_operator_31_true_acc_2_nl = conv_s2s_16_17(cmc_reg_m_nGain[63:48]) +
      conv_u2s_10_17(operator_31_true_acc_1_nl) + 17'b00000000000000001;
  assign operator_31_true_acc_2_nl = nl_operator_31_true_acc_2_nl[16:0];
  assign nl_cmc_cal2_acc_6_psp_1_sva_1 = (cmc_cal2_1_acc_3_itm_29_9_1[20:1]) + conv_s2s_17_20(operator_31_true_acc_2_nl)
      + 20'b00000000000000000001;
  assign cmc_cal2_acc_6_psp_1_sva_1 = nl_cmc_cal2_acc_6_psp_1_sva_1[19:0];
  assign nl_operator_31_true_acc_3_nl = conv_u2u_9_10({(top_reg_blc[6:0]) , (signext_2_1(~
      cmc_reg_m_bDiscardH))}) + conv_u2u_1_10(cmc_cal2_2_acc_3_itm_29_9_1[0]) + 10'b0000000001;
  assign operator_31_true_acc_3_nl = nl_operator_31_true_acc_3_nl[9:0];
  assign nl_operator_31_true_acc_4_nl = conv_s2s_16_17(cmc_reg_m_nGain[127:112])
      + conv_u2s_10_17(operator_31_true_acc_3_nl) + 17'b00000000000000001;
  assign operator_31_true_acc_4_nl = nl_operator_31_true_acc_4_nl[16:0];
  assign nl_cmc_cal2_acc_6_psp_2_sva_1 = (cmc_cal2_2_acc_3_itm_29_9_1[20:1]) + conv_s2s_17_20(operator_31_true_acc_4_nl)
      + 20'b00000000000000000001;
  assign cmc_cal2_acc_6_psp_2_sva_1 = nl_cmc_cal2_acc_6_psp_2_sva_1[19:0];
  assign nl_operator_31_true_acc_6_nl = conv_u2u_9_10({(top_reg_blc[6:0]) , (signext_2_1(~
      cmc_reg_m_bDiscardH))}) + conv_u2u_1_10(cmc_cal2_3_acc_3_itm_29_9_1[0]) + 10'b0000000001;
  assign operator_31_true_acc_6_nl = nl_operator_31_true_acc_6_nl[9:0];
  assign nl_operator_31_true_acc_7_nl = conv_s2s_16_17(cmc_reg_m_nGain[191:176])
      + conv_u2s_10_17(operator_31_true_acc_6_nl) + 17'b00000000000000001;
  assign operator_31_true_acc_7_nl = nl_operator_31_true_acc_7_nl[16:0];
  assign nl_cmc_cal2_acc_6_psp_sva_1 = (cmc_cal2_3_acc_3_itm_29_9_1[20:1]) + conv_s2s_17_20(operator_31_true_acc_7_nl)
      + 20'b00000000000000000001;
  assign cmc_cal2_acc_6_psp_sva_1 = nl_cmc_cal2_acc_6_psp_sva_1[19:0];
  assign nl_cmc_cal2_3_mul_4_nl = $signed(green_sva_1) * $signed(cmc_cal1_10_else_else_acc_itm_1);
  assign cmc_cal2_3_mul_4_nl = nl_cmc_cal2_3_mul_4_nl[27:0];
  assign nl_cmc_cal2_3_mul_5_nl = $signed(blue_sva_1) * $signed(cmc_cal1_11_if_acc_itm_1);
  assign cmc_cal2_3_mul_5_nl = nl_cmc_cal2_3_mul_5_nl[27:0];
  assign nl_cmc_cal2_acc_11_nl = conv_s2s_28_29(cmc_cal2_3_mul_4_nl) + conv_s2s_28_29(cmc_cal2_3_mul_5_nl);
  assign cmc_cal2_acc_11_nl = nl_cmc_cal2_acc_11_nl[28:0];
  assign nl_cmc_cal2_3_mul_3_nl = $signed(red_sva_1) * $signed(cmc_cal1_9_else_else_acc_itm_1);
  assign cmc_cal2_3_mul_3_nl = nl_cmc_cal2_3_mul_3_nl[27:0];
  assign nl_cmc_cal2_3_acc_3_nl = conv_s2u_29_30(cmc_cal2_acc_11_nl) + conv_s2u_28_30(cmc_cal2_3_mul_3_nl);
  assign cmc_cal2_3_acc_3_nl = nl_cmc_cal2_3_acc_3_nl[29:0];
  assign cmc_cal2_3_acc_3_itm_29_9_1 = readslicef_30_21_9(cmc_cal2_3_acc_3_nl);
  assign nl_green_sva_1 = ({1'b1 , (src_rsci_idat_mxwt[23:12])}) + conv_u2s_12_13({3'b111
      , (~ top_reg_blc)}) + 13'b0000000000001;
  assign green_sva_1 = nl_green_sva_1[12:0];
  assign nl_blue_sva_1 = ({1'b1 , (src_rsci_idat_mxwt[11:0])}) + conv_u2s_12_13({3'b111
      , (~ top_reg_blc)}) + 13'b0000000000001;
  assign blue_sva_1 = nl_blue_sva_1[12:0];
  assign nl_red_sva_1 = ({1'b1 , (src_rsci_idat_mxwt[35:24])}) + conv_u2s_12_13({3'b111
      , (~ top_reg_blc)}) + 13'b0000000000001;
  assign red_sva_1 = nl_red_sva_1[12:0];
  assign nl_cmc_cal2_2_mul_4_nl = $signed(green_sva_1) * $signed(cmc_cal1_6_if_acc_itm_1);
  assign cmc_cal2_2_mul_4_nl = nl_cmc_cal2_2_mul_4_nl[27:0];
  assign nl_cmc_cal2_2_mul_5_nl = $signed(blue_sva_1) * $signed(cmc_cal1_7_else_else_acc_itm_1);
  assign cmc_cal2_2_mul_5_nl = nl_cmc_cal2_2_mul_5_nl[27:0];
  assign nl_cmc_cal2_acc_10_nl = conv_s2s_28_29(cmc_cal2_2_mul_4_nl) + conv_s2s_28_29(cmc_cal2_2_mul_5_nl);
  assign cmc_cal2_acc_10_nl = nl_cmc_cal2_acc_10_nl[28:0];
  assign nl_cmc_cal2_2_mul_3_nl = $signed(red_sva_1) * $signed(cmc_cal1_5_else_else_acc_itm_1);
  assign cmc_cal2_2_mul_3_nl = nl_cmc_cal2_2_mul_3_nl[27:0];
  assign nl_cmc_cal2_2_acc_3_nl = conv_s2u_29_30(cmc_cal2_acc_10_nl) + conv_s2u_28_30(cmc_cal2_2_mul_3_nl);
  assign cmc_cal2_2_acc_3_nl = nl_cmc_cal2_2_acc_3_nl[29:0];
  assign cmc_cal2_2_acc_3_itm_29_9_1 = readslicef_30_21_9(cmc_cal2_2_acc_3_nl);
  assign nl_cmc_cal2_1_mul_4_nl = $signed(green_sva_1) * $signed(cmc_cal1_2_else_else_acc_itm_1);
  assign cmc_cal2_1_mul_4_nl = nl_cmc_cal2_1_mul_4_nl[27:0];
  assign nl_cmc_cal2_1_mul_5_nl = $signed(blue_sva_1) * $signed(cmc_cal1_3_else_else_acc_itm_1);
  assign cmc_cal2_1_mul_5_nl = nl_cmc_cal2_1_mul_5_nl[27:0];
  assign nl_cmc_cal2_acc_nl = conv_s2s_28_29(cmc_cal2_1_mul_4_nl) + conv_s2s_28_29(cmc_cal2_1_mul_5_nl);
  assign cmc_cal2_acc_nl = nl_cmc_cal2_acc_nl[28:0];
  assign nl_cmc_cal2_1_mul_3_nl = $signed(red_sva_1) * $signed(cmc_cal1_1_if_acc_itm_1);
  assign cmc_cal2_1_mul_3_nl = nl_cmc_cal2_1_mul_3_nl[27:0];
  assign nl_cmc_cal2_1_acc_3_nl = conv_s2u_29_30(cmc_cal2_acc_nl) + conv_s2u_28_30(cmc_cal2_1_mul_3_nl);
  assign cmc_cal2_1_acc_3_nl = nl_cmc_cal2_1_acc_3_nl[29:0];
  assign cmc_cal2_1_acc_3_itm_29_9_1 = readslicef_30_21_9(cmc_cal2_1_acc_3_nl);
  assign nl_cmc_col_acc_2_nl = ({1'b1 , cmc_col_x_lpi_1_dfm_3}) + conv_u2u_13_14(~
      top_reg_frameWidth) + 14'b00000000000001;
  assign cmc_col_acc_2_nl = nl_cmc_col_acc_2_nl[13:0];
  assign cmc_col_acc_2_itm_13_1 = readslicef_14_1_13(cmc_col_acc_2_nl);
  assign asn_cmc_row_asn_sft_lpi_1_dfm_st_1_nor_nl = ~(exitL_exit_cmc_row_sva | exitL_exit_cmc_col_lpi_1_dfm
      | exit_cmc_row_lpi_1_dfm);
  assign cmc_row_asn_sft_lpi_1_dfm_st_1_mx0 = MUX_s_1_2_2(exit_cmc_row_lpi_1_dfm_1,
      cmc_row_asn_sft_lpi_1_dfm_st_1, asn_cmc_row_asn_sft_lpi_1_dfm_st_1_nor_nl);
  assign cmc_col_cmc_col_cmc_col_cmc_row_not_nl = ~ or_9_cse;
  assign cmc_col_x_lpi_1_dfm_3 = MUX_v_13_2_2(13'b0000000000000, cmc_col_x_lpi_1_dfm_2,
      cmc_col_cmc_col_cmc_col_cmc_row_not_nl);
  assign nl_cmc_row_acc_2_nl = ({1'b1 , cmc_row_y_lpi_1_dfm_3}) + conv_u2u_13_14(~
      top_reg_frameHeight) + 14'b00000000000001;
  assign cmc_row_acc_2_nl = nl_cmc_row_acc_2_nl[13:0];
  assign cmc_row_acc_2_itm_13 = readslicef_14_1_13(cmc_row_acc_2_nl);
  assign cmc_row_not_12_nl = ~ exitL_exit_cmc_row_sva;
  assign cmc_row_y_lpi_1_dfm_3 = MUX_v_13_2_2(13'b0000000000000, cmc_row_y_lpi_1_dfm_2,
      cmc_row_not_12_nl);
  assign exit_cmc_row_lpi_1_dfm_1 = (~ cmc_row_acc_2_itm_13) & or_9_cse;
  assign ratio_4_0_lpi_1_dfm_1 = MUX_v_5_2_2(5'b00000, cmc_reg_m_nCFCStrength, cmc_reg_m_bCFCEnable);
  assign nor_2_cse = ~((~ cmc_row_asn_sft_lpi_1_dfm_st_1) | exit_cmc_row_lpi_1_dfm
      | exitL_exit_cmc_col_lpi_1_dfm | exitL_exit_cmc_row_sva);
  assign or_dcpl_2 = cmc_row_asn_sft_lpi_1_dfm_st_1 | cmc_col_not_mdf_sva_st_1 |
      (~ main_stage_0_2);
  assign and_dcpl_6 = ~(cmc_row_asn_sft_lpi_1_dfm_st_1 | cmc_col_not_mdf_sva_st_1);
  assign and_dcpl_9 = and_dcpl_6 & main_stage_0_2 & (~ cmc_reg_m_nEb);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      reg_dst_rsci_oswt_cse <= 1'b0;
      cmc_cal1_10_else_else_acc_itm_1 <= 16'b0000000000000000;
      cmc_cal1_11_if_acc_itm_1 <= 16'b0000000000000000;
      cmc_cal1_9_else_else_acc_itm_1 <= 16'b0000000000000000;
      cmc_cal1_6_if_acc_itm_1 <= 16'b0000000000000000;
      cmc_cal1_7_else_else_acc_itm_1 <= 16'b0000000000000000;
      cmc_cal1_5_else_else_acc_itm_1 <= 16'b0000000000000000;
      cmc_cal1_2_else_else_acc_itm_1 <= 16'b0000000000000000;
      cmc_cal1_3_else_else_acc_itm_1 <= 16'b0000000000000000;
      cmc_cal1_1_if_acc_itm_1 <= 16'b0000000000000000;
      cmc_col_not_mdf_sva_st_1 <= 1'b0;
      cmc_row_asn_sft_lpi_1_dfm_st_1 <= 1'b0;
      reg_src_rsci_oswt_cse <= 1'b0;
      cmc_col_x_lpi_1_dfm_2 <= 13'b0000000000000;
      exit_cmc_row_lpi_1_dfm <= 1'b0;
      exitL_exit_cmc_col_lpi_1_dfm <= 1'b0;
      exitL_exit_cmc_row_sva <= 1'b1;
      cmc_row_y_lpi_1_dfm_2 <= 13'b0000000000000;
      main_stage_0_2 <= 1'b0;
    end
    else if ( core_wen ) begin
      reg_dst_rsci_oswt_cse <= ~ or_dcpl_2;
      cmc_cal1_10_else_else_acc_itm_1 <= nl_cmc_cal1_10_else_else_acc_itm_1[15:0];
      cmc_cal1_11_if_acc_itm_1 <= nl_cmc_cal1_11_if_acc_itm_1[15:0];
      cmc_cal1_9_else_else_acc_itm_1 <= nl_cmc_cal1_9_else_else_acc_itm_1[15:0];
      cmc_cal1_6_if_acc_itm_1 <= nl_cmc_cal1_6_if_acc_itm_1[15:0];
      cmc_cal1_7_else_else_acc_itm_1 <= nl_cmc_cal1_7_else_else_acc_itm_1[15:0];
      cmc_cal1_5_else_else_acc_itm_1 <= nl_cmc_cal1_5_else_else_acc_itm_1[15:0];
      cmc_cal1_2_else_else_acc_itm_1 <= nl_cmc_cal1_2_else_else_acc_itm_1[15:0];
      cmc_cal1_3_else_else_acc_itm_1 <= nl_cmc_cal1_3_else_else_acc_itm_1[15:0];
      cmc_cal1_1_if_acc_itm_1 <= nl_cmc_cal1_1_if_acc_itm_1[15:0];
      cmc_col_not_mdf_sva_st_1 <= ~ cmc_col_acc_2_itm_13_1;
      cmc_row_asn_sft_lpi_1_dfm_st_1 <= cmc_row_asn_sft_lpi_1_dfm_st_1_mx0;
      reg_src_rsci_oswt_cse <= ~(mux_3_nl | (~ cmc_col_acc_2_itm_13_1));
      cmc_col_x_lpi_1_dfm_2 <= z_out;
      exit_cmc_row_lpi_1_dfm <= exit_cmc_row_lpi_1_dfm_1;
      exitL_exit_cmc_col_lpi_1_dfm <= (~ cmc_col_acc_2_itm_13_1) | cmc_row_asn_sft_lpi_1_dfm_st_1_mx0;
      exitL_exit_cmc_row_sva <= exit_cmc_row_lpi_1_dfm_1;
      cmc_row_y_lpi_1_dfm_2 <= MUX_v_13_2_2(z_out, cmc_row_y_lpi_1_dfm_3, or_8_nl);
      main_stage_0_2 <= 1'b1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dst_rsci_idat_41_30 <= 12'b000000000000;
      dst_rsci_idat_13_2 <= 12'b000000000000;
      dst_rsci_idat_27_16 <= 12'b000000000000;
    end
    else if ( cmc_col_and_cse ) begin
      dst_rsci_idat_41_30 <= MUX_v_12_2_2((cmc_clip_result_1_lpi_1_dfm_2[13:2]),
          (src_rsci_idat_mxwt[35:24]), and_dcpl_9);
      dst_rsci_idat_13_2 <= MUX_v_12_2_2((cmc_clip_result_lpi_1_dfm_2[13:2]), (src_rsci_idat_mxwt[11:0]),
          and_dcpl_9);
      dst_rsci_idat_27_16 <= MUX_v_12_2_2((cmc_clip_result_2_lpi_1_dfm_2[13:2]),
          (src_rsci_idat_mxwt[23:12]), and_dcpl_9);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dst_rsci_idat_1_0 <= 2'b00;
      dst_rsci_idat_29_28 <= 2'b00;
      dst_rsci_idat_15_14 <= 2'b00;
    end
    else if ( cmc_col_and_1_cse ) begin
      dst_rsci_idat_1_0 <= MUX_v_2_2_2((cmc_clip_result_lpi_1_dfm_2[1:0]), 2'b11,
          cmc_reg_m_nEb_not_7_nl);
      dst_rsci_idat_29_28 <= MUX_v_2_2_2((cmc_clip_result_1_lpi_1_dfm_2[1:0]), 2'b11,
          cmc_reg_m_nEb_not_8_nl);
      dst_rsci_idat_15_14 <= MUX_v_2_2_2((cmc_clip_result_2_lpi_1_dfm_2[1:0]), 2'b11,
          cmc_reg_m_nEb_not_5_nl);
    end
  end
  assign nl_cmc_cal1_10_else_else_mul_nl = $signed((cmc_reg_m_nGain[159:144])) *
      $signed(conv_u2s_5_6(ratio_4_0_lpi_1_dfm_1));
  assign cmc_cal1_10_else_else_mul_nl = nl_cmc_cal1_10_else_else_mul_nl[20:0];
  assign nl_cmc_cal1_10_else_else_acc_itm_1  = (cmc_reg_m_nGain[159:144]) - conv_s2s_15_16(readslicef_21_15_6(cmc_cal1_10_else_else_mul_nl));
  assign nl_cmc_cal1_11_if_mul_nl = $signed((cmc_reg_m_nGain[175:160])) * $signed(conv_u2s_5_6(ratio_4_0_lpi_1_dfm_1));
  assign cmc_cal1_11_if_mul_nl = nl_cmc_cal1_11_if_mul_nl[20:0];
  assign nl_cmc_cal1_11_if_acc_itm_1  = (cmc_reg_m_nGain[175:160]) - conv_s2s_15_16(readslicef_21_15_6(cmc_cal1_11_if_mul_nl));
  assign nl_cmc_cal1_9_else_else_mul_nl = $signed((cmc_reg_m_nGain[143:128])) * $signed(conv_u2s_5_6(ratio_4_0_lpi_1_dfm_1));
  assign cmc_cal1_9_else_else_mul_nl = nl_cmc_cal1_9_else_else_mul_nl[20:0];
  assign nl_cmc_cal1_9_else_else_acc_itm_1  = (cmc_reg_m_nGain[143:128]) - conv_s2s_15_16(readslicef_21_15_6(cmc_cal1_9_else_else_mul_nl));
  assign nl_cmc_cal1_6_if_mul_nl = $signed((cmc_reg_m_nGain[95:80])) * $signed(conv_u2s_5_6(ratio_4_0_lpi_1_dfm_1));
  assign cmc_cal1_6_if_mul_nl = nl_cmc_cal1_6_if_mul_nl[20:0];
  assign nl_cmc_cal1_6_if_acc_itm_1  = (cmc_reg_m_nGain[95:80]) - conv_s2s_15_16(readslicef_21_15_6(cmc_cal1_6_if_mul_nl));
  assign nl_cmc_cal1_7_else_else_mul_nl = $signed((cmc_reg_m_nGain[111:96])) * $signed(conv_u2s_5_6(ratio_4_0_lpi_1_dfm_1));
  assign cmc_cal1_7_else_else_mul_nl = nl_cmc_cal1_7_else_else_mul_nl[20:0];
  assign nl_cmc_cal1_7_else_else_acc_itm_1  = (cmc_reg_m_nGain[111:96]) - conv_s2s_15_16(readslicef_21_15_6(cmc_cal1_7_else_else_mul_nl));
  assign nl_cmc_cal1_5_else_else_mul_nl = $signed((cmc_reg_m_nGain[79:64])) * $signed(conv_u2s_5_6(ratio_4_0_lpi_1_dfm_1));
  assign cmc_cal1_5_else_else_mul_nl = nl_cmc_cal1_5_else_else_mul_nl[20:0];
  assign nl_cmc_cal1_5_else_else_acc_itm_1  = (cmc_reg_m_nGain[79:64]) - conv_s2s_15_16(readslicef_21_15_6(cmc_cal1_5_else_else_mul_nl));
  assign nl_cmc_cal1_2_else_else_mul_nl = $signed((cmc_reg_m_nGain[31:16])) * $signed(conv_u2s_5_6(ratio_4_0_lpi_1_dfm_1));
  assign cmc_cal1_2_else_else_mul_nl = nl_cmc_cal1_2_else_else_mul_nl[20:0];
  assign nl_cmc_cal1_2_else_else_acc_itm_1  = (cmc_reg_m_nGain[31:16]) - conv_s2s_15_16(readslicef_21_15_6(cmc_cal1_2_else_else_mul_nl));
  assign nl_cmc_cal1_3_else_else_mul_nl = $signed((cmc_reg_m_nGain[47:32])) * $signed(conv_u2s_5_6(ratio_4_0_lpi_1_dfm_1));
  assign cmc_cal1_3_else_else_mul_nl = nl_cmc_cal1_3_else_else_mul_nl[20:0];
  assign nl_cmc_cal1_3_else_else_acc_itm_1  = (cmc_reg_m_nGain[47:32]) - conv_s2s_15_16(readslicef_21_15_6(cmc_cal1_3_else_else_mul_nl));
  assign nl_cmc_cal1_1_if_mul_nl = $signed((cmc_reg_m_nGain[15:0])) * $signed(conv_u2s_5_6(ratio_4_0_lpi_1_dfm_1));
  assign cmc_cal1_1_if_mul_nl = nl_cmc_cal1_1_if_mul_nl[20:0];
  assign nl_cmc_cal1_1_if_acc_itm_1  = (cmc_reg_m_nGain[15:0]) - conv_s2s_15_16(readslicef_21_15_6(cmc_cal1_1_if_mul_nl));
  assign or_nl = cmc_row_asn_sft_lpi_1_dfm_st_1 | exit_cmc_row_lpi_1_dfm | exitL_exit_cmc_col_lpi_1_dfm
      | exitL_exit_cmc_row_sva;
  assign mux_3_nl = MUX_s_1_2_2(or_nl, nor_2_cse, cmc_row_acc_2_itm_13);
  assign or_8_nl = nor_2_cse | cmc_col_acc_2_itm_13_1;
  assign cmc_reg_m_nEb_not_7_nl = ~ cmc_reg_m_nEb;
  assign cmc_reg_m_nEb_not_8_nl = ~ cmc_reg_m_nEb;
  assign cmc_reg_m_nEb_not_5_nl = ~ cmc_reg_m_nEb;
  assign cmc_col_mux_5_nl = MUX_v_13_2_2(cmc_row_y_lpi_1_dfm_3, cmc_col_x_lpi_1_dfm_3,
      cmc_col_acc_2_itm_13_1);
  assign nl_z_out = cmc_col_mux_5_nl + 13'b0000000000001;
  assign z_out = nl_z_out[12:0];

  function automatic [0:0] MUX_s_1_2_2;
    input [0:0] input_0;
    input [0:0] input_1;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [0:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction


  function automatic [12:0] MUX_v_13_2_2;
    input [12:0] input_0;
    input [12:0] input_1;
    input [0:0] sel;
    reg [12:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_13_2_2 = result;
  end
  endfunction


  function automatic [13:0] MUX_v_14_2_2;
    input [13:0] input_0;
    input [13:0] input_1;
    input [0:0] sel;
    reg [13:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_14_2_2 = result;
  end
  endfunction


  function automatic [1:0] MUX_v_2_2_2;
    input [1:0] input_0;
    input [1:0] input_1;
    input [0:0] sel;
    reg [1:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_2_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input [0:0] sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction


  function automatic [0:0] readslicef_14_1_13;
    input [13:0] vector;
    reg [13:0] tmp;
  begin
    tmp = vector >> 13;
    readslicef_14_1_13 = tmp[0:0];
  end
  endfunction


  function automatic [14:0] readslicef_21_15_6;
    input [20:0] vector;
    reg [20:0] tmp;
  begin
    tmp = vector >> 6;
    readslicef_21_15_6 = tmp[14:0];
  end
  endfunction


  function automatic [20:0] readslicef_30_21_9;
    input [29:0] vector;
    reg [29:0] tmp;
  begin
    tmp = vector >> 9;
    readslicef_30_21_9 = tmp[20:0];
  end
  endfunction


  function automatic [0:0] readslicef_6_1_5;
    input [5:0] vector;
    reg [5:0] tmp;
  begin
    tmp = vector >> 5;
    readslicef_6_1_5 = tmp[0:0];
  end
  endfunction


  function automatic [1:0] signext_2_1;
    input [0:0] vector;
  begin
    signext_2_1= {{1{vector[0]}}, vector};
  end
  endfunction


  function automatic [15:0] conv_s2s_15_16 ;
    input [14:0]  vector ;
  begin
    conv_s2s_15_16 = {vector[14], vector};
  end
  endfunction


  function automatic [16:0] conv_s2s_16_17 ;
    input [15:0]  vector ;
  begin
    conv_s2s_16_17 = {vector[15], vector};
  end
  endfunction


  function automatic [19:0] conv_s2s_17_20 ;
    input [16:0]  vector ;
  begin
    conv_s2s_17_20 = {{3{vector[16]}}, vector};
  end
  endfunction


  function automatic [28:0] conv_s2s_28_29 ;
    input [27:0]  vector ;
  begin
    conv_s2s_28_29 = {vector[27], vector};
  end
  endfunction


  function automatic [29:0] conv_s2u_28_30 ;
    input [27:0]  vector ;
  begin
    conv_s2u_28_30 = {{2{vector[27]}}, vector};
  end
  endfunction


  function automatic [29:0] conv_s2u_29_30 ;
    input [28:0]  vector ;
  begin
    conv_s2u_29_30 = {vector[28], vector};
  end
  endfunction


  function automatic [5:0] conv_u2s_5_6 ;
    input [4:0]  vector ;
  begin
    conv_u2s_5_6 =  {1'b0, vector};
  end
  endfunction


  function automatic [16:0] conv_u2s_10_17 ;
    input [9:0]  vector ;
  begin
    conv_u2s_10_17 = {{7{1'b0}}, vector};
  end
  endfunction


  function automatic [12:0] conv_u2s_12_13 ;
    input [11:0]  vector ;
  begin
    conv_u2s_12_13 =  {1'b0, vector};
  end
  endfunction


  function automatic [9:0] conv_u2u_1_10 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_10 = {{9{1'b0}}, vector};
  end
  endfunction


  function automatic [9:0] conv_u2u_9_10 ;
    input [8:0]  vector ;
  begin
    conv_u2u_9_10 = {1'b0, vector};
  end
  endfunction


  function automatic [13:0] conv_u2u_13_14 ;
    input [12:0]  vector ;
  begin
    conv_u2u_13_14 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    gtm_core
// ------------------------------------------------------------------


module gtm_core (
  clk, arst_n, top_reg_frameWidth, top_reg_frameHeight, gtm_reg_eb, gtm_reg_m_bDitheringEnable,
      gtm_reg_gtmTab, src_rsc_dat, src_rsc_vld, src_rsc_rdy, dst_rsc_dat, dst_rsc_vld,
      dst_rsc_rdy
);
  input clk;
  input arst_n;
  input [12:0] top_reg_frameWidth;
  input [12:0] top_reg_frameHeight;
  input gtm_reg_eb;
  input gtm_reg_m_bDitheringEnable;
  input [1289:0] gtm_reg_gtmTab;
  input [41:0] src_rsc_dat;
  input src_rsc_vld;
  output src_rsc_rdy;
  output [41:0] dst_rsc_dat;
  output dst_rsc_vld;
  input dst_rsc_rdy;


  // Interconnect Declarations
  wire core_wen;
  wire src_rsci_wen_comp;
  wire [41:0] src_rsci_idat_mxwt;
  wire dst_rsci_wen_comp;
  reg [13:0] dst_rsci_idat_41_28;
  reg [13:0] dst_rsci_idat_27_14;
  reg [13:0] dst_rsci_idat_13_0;
  wire gtm_row_gtm_row_or_1_tmp;
  wire or_tmp_1;
  wire and_dcpl_13;
  wire and_dcpl_16;
  wire or_dcpl_8;
  wire or_dcpl_9;
  wire exitL_exitL_exit_gtm_col_lpi_1_dfm_1;
  reg exit_gtm_row_lpi_1_dfm;
  reg exitL_exit_gtm_row_sva;
  wire [15:0] temp3_lpi_1_dfm_1;
  reg gtm_row_y_lpi_1_dfm_1_0;
  wire [9:0] operator_10_false_slc_gtm_reg_gtmTab_10_9_0_sdt_sva_1;
  wire [15:0] temp3_2_lpi_1_dfm_1;
  wire [9:0] operator_10_false_slc_gtm_reg_gtmTab_10_9_0_sdt_2_sva_1;
  wire [15:0] temp3_1_lpi_1_dfm_mx0;
  reg [12:0] gtm_row_y_lpi_1_dfm_2;
  reg [1:0] gtm_cal_if_3_acc_psp_sva_1;
  wire [2:0] nl_gtm_cal_if_3_acc_psp_sva_1;
  reg main_stage_0_2;
  reg gtm_row_asn_sft_lpi_1_dfm_1;
  reg gtm_col_not_mdf_sva_1;
  wire gtm_cal_unequal_tmp_8;
  wire gtm_cal_unequal_tmp_9;
  reg reg_dst_rsci_oswt_cse;
  wire gtm_col_and_cse;
  reg reg_src_rsci_oswt_cse;
  wire and_19_cse;
  wire exit_gtm_row_lpi_1_dfm_1;
  wire seed_and_2_cse;
  wire seed_and_3_cse;
  wire and_dcpl_42;
  wire [16:0] z_out;
  wire [17:0] nl_z_out;
  wire and_dcpl_48;
  wire [16:0] z_out_1;
  wire [17:0] nl_z_out_1;
  wire and_dcpl_54;
  wire [16:0] z_out_2;
  wire [17:0] nl_z_out_2;
  wire [12:0] z_out_3;
  wire [13:0] nl_z_out_3;
  wire [17:0] z_out_4;
  wire [17:0] z_out_5;
  wire [17:0] z_out_6;
  reg [12:0] gtm_col_x_lpi_1_dfm_2;
  reg [4:0] seed_0_lpi_1_dfm_1;
  reg [4:0] seed_1_lpi_1_dfm_1;
  reg [4:0] seed_2_lpi_1_dfm_1;
  reg [4:0] seed_3_lpi_1_dfm_1;
  reg [4:0] seed_4_lpi_1_dfm_1;
  reg [4:0] seed_5_lpi_1_dfm_1;
  reg [4:0] gtm_cal_if_3_mux_itm_1;
  reg [4:0] gtm_cal_2_if_3_gtm_cal_if_3_mux_itm_1;
  wire [12:0] gtm_col_x_lpi_1_dfm_3;
  wire [12:0] gtm_row_y_lpi_1_dfm_3;
  wire [21:0] gtm_cal_if_2_mul_ncse_1_sva_1;
  wire signed [22:0] nl_gtm_cal_if_2_mul_ncse_1_sva_1;
  wire [9:0] operator_10_false_slc_gtm_reg_gtmTab_10_9_0_sdt_1_sva_1;
  wire gtm_cal_unequal_tmp_7;
  wire [21:0] gtm_cal_if_2_mul_ncse_2_sva_1;
  wire signed [22:0] nl_gtm_cal_if_2_mul_ncse_2_sva_1;
  wire [21:0] gtm_cal_if_2_mul_ncse_sva_1;
  wire signed [22:0] nl_gtm_cal_if_2_mul_ncse_sva_1;
  wire [4:0] seed_3_lpi_1_dfm_1_mx0;
  wire [9:0] operator_10_false_1_slc_gtm_reg_gtmTab_10_9_0_sdt_sva_1;
  wire [9:0] operator_10_false_1_slc_gtm_reg_gtmTab_10_9_0_sdt_2_sva_1;
  wire [9:0] operator_10_false_1_slc_gtm_reg_gtmTab_10_9_0_sdt_1_sva_1;
  wire [4:0] seed_4_lpi_1_dfm_4_mx0;
  wire [4:0] seed_1_lpi_1_dfm_mx0;
  wire [4:0] seed_0_lpi_1_dfm_mx0;
  wire gtm_cal_if_3_nor_ssc;
  wire gtm_cal_if_3_and_7_ssc;
  wire gtm_cal_if_3_and_8_ssc;
  wire gtm_cal_if_3_and_10_ssc;
  wire [4:0] gtm_row_gtm_row_gtm_row_mux_cse;
  wire gtm_col_acc_2_itm_13_1;
  wire [17:0] gtm_cal_1_operator_22_true_acc_itm_21_4_1;
  wire [17:0] gtm_cal_2_operator_22_true_acc_itm_21_4_1;
  wire [17:0] gtm_cal_3_operator_22_true_acc_itm_21_4_1;
  wire gtm_row_acc_2_itm_13_1;

  wire[13:0] gtm_clip_gtm_clip_gtm_clip_nor_2_nl;
  wire[13:0] gtm_clip_nor_2_nl;
  wire[13:0] gtm_clip_gtm_clip_gtm_clip_nor_1_nl;
  wire[13:0] gtm_clip_nor_1_nl;
  wire[13:0] gtm_clip_gtm_clip_gtm_clip_nor_nl;
  wire[13:0] gtm_clip_nor_nl;
  wire[0:0] mux_12_nl;
  wire[0:0] nand_nl;
  wire[0:0] or_nl;
  wire[0:0] or_18_nl;
  wire[0:0] or_19_nl;
  wire[13:0] gtm_col_acc_2_nl;
  wire[14:0] nl_gtm_col_acc_2_nl;
  wire[0:0] gtm_col_gtm_col_gtm_col_gtm_col_not_nl;
  wire[0:0] gtm_row_not_18_nl;
  wire[21:0] gtm_cal_1_operator_22_true_acc_nl;
  wire[22:0] nl_gtm_cal_1_operator_22_true_acc_nl;
  wire[14:0] gtm_cal_acc_nl;
  wire[15:0] nl_gtm_cal_acc_nl;
  wire[0:0] gtm_cal_gtm_cal_gtm_cal_or_1_nl;
  wire[21:0] gtm_cal_2_operator_22_true_acc_nl;
  wire[22:0] nl_gtm_cal_2_operator_22_true_acc_nl;
  wire[14:0] gtm_cal_acc_3_nl;
  wire[15:0] nl_gtm_cal_acc_3_nl;
  wire[0:0] gtm_cal_gtm_cal_gtm_cal_or_3_nl;
  wire[21:0] gtm_cal_3_operator_22_true_acc_nl;
  wire[22:0] nl_gtm_cal_3_operator_22_true_acc_nl;
  wire[14:0] gtm_cal_acc_4_nl;
  wire[15:0] nl_gtm_cal_acc_4_nl;
  wire[0:0] gtm_cal_gtm_cal_gtm_cal_or_5_nl;
  wire[0:0] seed_seed_nor_nl;
  wire[0:0] seed_and_5_nl;
  wire[6:0] gtm_cal_3_operator_7_false_acc_nl;
  wire[7:0] nl_gtm_cal_3_operator_7_false_acc_nl;
  wire[6:0] gtm_cal_2_operator_7_false_acc_nl;
  wire[7:0] nl_gtm_cal_2_operator_7_false_acc_nl;
  wire[6:0] gtm_cal_1_operator_7_false_acc_nl;
  wire[7:0] nl_gtm_cal_1_operator_7_false_acc_nl;
  wire[13:0] gtm_row_acc_2_nl;
  wire[14:0] nl_gtm_row_acc_2_nl;
  wire[16:0] operator_33_true_mux_6_nl;
  wire[0:0] operator_33_true_mux_7_nl;
  wire[16:0] operator_33_true_mux_8_nl;
  wire[0:0] operator_33_true_mux_9_nl;
  wire[16:0] operator_33_true_mux_10_nl;
  wire[0:0] operator_33_true_mux_11_nl;
  wire[12:0] gtm_col_mux_3_nl;
  wire[18:0] acc_4_nl;
  wire[19:0] nl_acc_4_nl;
  wire[16:0] gtm_cal_if_3_mux_4_nl;
  wire[14:0] gtm_cal_if_3_acc_10_nl;
  wire[15:0] nl_gtm_cal_if_3_acc_10_nl;
  wire[0:0] gtm_cal_if_3_and_12_nl;
  wire[15:0] gtm_cal_if_3_mux_5_nl;
  wire[18:0] acc_5_nl;
  wire[19:0] nl_acc_5_nl;
  wire[16:0] operator_33_true_1_mux_6_nl;
  wire[14:0] gtm_cal_if_3_acc_11_nl;
  wire[15:0] nl_gtm_cal_if_3_acc_11_nl;
  wire[2:0] gtm_cal_if_3_gtm_cal_if_3_mux1h_3_nl;
  wire[0:0] gtm_cal_if_3_gtm_cal_if_3_mux1h_4_nl;
  wire[0:0] gtm_cal_if_3_gtm_cal_if_3_mux1h_5_nl;
  wire[0:0] operator_33_true_1_and_2_nl;
  wire[15:0] operator_33_true_1_mux_7_nl;
  wire[18:0] acc_6_nl;
  wire[19:0] nl_acc_6_nl;
  wire[16:0] operator_33_true_1_mux_8_nl;
  wire[14:0] gtm_cal_if_3_acc_12_nl;
  wire[15:0] nl_gtm_cal_if_3_acc_12_nl;
  wire[0:0] operator_33_true_1_and_3_nl;
  wire[15:0] operator_33_true_1_mux_9_nl;

  // Interconnect Declarations for Component Instantiations 
  wire [41:0] nl_gtm_core_dst_rsci_inst_dst_rsci_idat;
  assign nl_gtm_core_dst_rsci_inst_dst_rsci_idat = {dst_rsci_idat_41_28 , dst_rsci_idat_27_14
      , dst_rsci_idat_13_0};
  gtm_core_src_rsci gtm_core_src_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .src_rsc_dat(src_rsc_dat),
      .src_rsc_vld(src_rsc_vld),
      .src_rsc_rdy(src_rsc_rdy),
      .core_wen(core_wen),
      .src_rsci_oswt(reg_src_rsci_oswt_cse),
      .src_rsci_wen_comp(src_rsci_wen_comp),
      .src_rsci_idat_mxwt(src_rsci_idat_mxwt)
    );
  gtm_core_dst_rsci gtm_core_dst_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .dst_rsc_dat(dst_rsc_dat),
      .dst_rsc_vld(dst_rsc_vld),
      .dst_rsc_rdy(dst_rsc_rdy),
      .core_wen(core_wen),
      .dst_rsci_oswt(reg_dst_rsci_oswt_cse),
      .dst_rsci_wen_comp(dst_rsci_wen_comp),
      .dst_rsci_idat(nl_gtm_core_dst_rsci_inst_dst_rsci_idat[41:0])
    );
  gtm_core_staller gtm_core_staller_inst (
      .core_wen(core_wen),
      .src_rsci_wen_comp(src_rsci_wen_comp),
      .dst_rsci_wen_comp(dst_rsci_wen_comp)
    );
  assign gtm_col_and_cse = core_wen & ((and_dcpl_13 & main_stage_0_2 & gtm_reg_eb)
      | and_dcpl_16);
  assign gtm_row_gtm_row_gtm_row_mux_cse = MUX_v_5_2_2((z_out_5[4:0]), 5'b01000,
      exitL_exit_gtm_row_sva);
  assign nl_gtm_col_acc_2_nl = ({1'b1 , gtm_col_x_lpi_1_dfm_3}) + conv_u2u_13_14(~
      top_reg_frameWidth) + 14'b00000000000001;
  assign gtm_col_acc_2_nl = nl_gtm_col_acc_2_nl[13:0];
  assign gtm_col_acc_2_itm_13_1 = readslicef_14_1_13(gtm_col_acc_2_nl);
  assign gtm_col_gtm_col_gtm_col_gtm_col_not_nl = ~ exitL_exitL_exit_gtm_col_lpi_1_dfm_1;
  assign gtm_col_x_lpi_1_dfm_3 = MUX_v_13_2_2(13'b0000000000000, gtm_col_x_lpi_1_dfm_2,
      gtm_col_gtm_col_gtm_col_gtm_col_not_nl);
  assign gtm_row_not_18_nl = ~ exitL_exit_gtm_row_sva;
  assign gtm_row_y_lpi_1_dfm_3 = MUX_v_13_2_2(13'b0000000000000, gtm_row_y_lpi_1_dfm_2,
      gtm_row_not_18_nl);
  assign and_19_cse = gtm_row_gtm_row_or_1_tmp & main_stage_0_2;
  assign exit_gtm_row_lpi_1_dfm_1 = (~ gtm_row_acc_2_itm_13_1) & exitL_exitL_exit_gtm_col_lpi_1_dfm_1;
  assign exitL_exitL_exit_gtm_col_lpi_1_dfm_1 = and_19_cse | exit_gtm_row_lpi_1_dfm
      | exitL_exit_gtm_row_sva;
  assign gtm_row_gtm_row_or_1_tmp = gtm_col_not_mdf_sva_1 | gtm_row_asn_sft_lpi_1_dfm_1;
  assign nl_gtm_cal_1_operator_22_true_acc_nl = conv_s2u_15_22(gtm_cal_if_2_mul_ncse_1_sva_1[21:7])
      + gtm_cal_if_2_mul_ncse_1_sva_1;
  assign gtm_cal_1_operator_22_true_acc_nl = nl_gtm_cal_1_operator_22_true_acc_nl[21:0];
  assign gtm_cal_1_operator_22_true_acc_itm_21_4_1 = readslicef_22_18_4(gtm_cal_1_operator_22_true_acc_nl);
  assign gtm_cal_gtm_cal_gtm_cal_or_1_nl = (operator_10_false_1_slc_gtm_reg_gtmTab_10_9_0_sdt_1_sva_1!=10'b0000000000);
  assign nl_gtm_cal_acc_nl = ({1'b1 , operator_10_false_1_slc_gtm_reg_gtmTab_10_9_0_sdt_1_sva_1
      , (signext_3_1(gtm_cal_gtm_cal_gtm_cal_or_1_nl)) , 1'b1}) + conv_u2s_14_15({(~
      operator_10_false_slc_gtm_reg_gtmTab_10_9_0_sdt_1_sva_1) , (signext_4_1(~ gtm_cal_unequal_tmp_7))})
      + 15'b000000000000001;
  assign gtm_cal_acc_nl = nl_gtm_cal_acc_nl[14:0];
  assign nl_gtm_cal_if_2_mul_ncse_1_sva_1 = $signed(gtm_cal_acc_nl) * $signed(conv_u2s_7_8(src_rsci_idat_mxwt[34:28]));
  assign gtm_cal_if_2_mul_ncse_1_sva_1 = nl_gtm_cal_if_2_mul_ncse_1_sva_1[21:0];
  assign operator_10_false_slc_gtm_reg_gtmTab_10_9_0_sdt_1_sva_1 = MUX_v_10_128_2((gtm_reg_gtmTab[9:0]),
      (gtm_reg_gtmTab[19:10]), (gtm_reg_gtmTab[29:20]), (gtm_reg_gtmTab[39:30]),
      (gtm_reg_gtmTab[49:40]), (gtm_reg_gtmTab[59:50]), (gtm_reg_gtmTab[69:60]),
      (gtm_reg_gtmTab[79:70]), (gtm_reg_gtmTab[89:80]), (gtm_reg_gtmTab[99:90]),
      (gtm_reg_gtmTab[109:100]), (gtm_reg_gtmTab[119:110]), (gtm_reg_gtmTab[129:120]),
      (gtm_reg_gtmTab[139:130]), (gtm_reg_gtmTab[149:140]), (gtm_reg_gtmTab[159:150]),
      (gtm_reg_gtmTab[169:160]), (gtm_reg_gtmTab[179:170]), (gtm_reg_gtmTab[189:180]),
      (gtm_reg_gtmTab[199:190]), (gtm_reg_gtmTab[209:200]), (gtm_reg_gtmTab[219:210]),
      (gtm_reg_gtmTab[229:220]), (gtm_reg_gtmTab[239:230]), (gtm_reg_gtmTab[249:240]),
      (gtm_reg_gtmTab[259:250]), (gtm_reg_gtmTab[269:260]), (gtm_reg_gtmTab[279:270]),
      (gtm_reg_gtmTab[289:280]), (gtm_reg_gtmTab[299:290]), (gtm_reg_gtmTab[309:300]),
      (gtm_reg_gtmTab[319:310]), (gtm_reg_gtmTab[329:320]), (gtm_reg_gtmTab[339:330]),
      (gtm_reg_gtmTab[349:340]), (gtm_reg_gtmTab[359:350]), (gtm_reg_gtmTab[369:360]),
      (gtm_reg_gtmTab[379:370]), (gtm_reg_gtmTab[389:380]), (gtm_reg_gtmTab[399:390]),
      (gtm_reg_gtmTab[409:400]), (gtm_reg_gtmTab[419:410]), (gtm_reg_gtmTab[429:420]),
      (gtm_reg_gtmTab[439:430]), (gtm_reg_gtmTab[449:440]), (gtm_reg_gtmTab[459:450]),
      (gtm_reg_gtmTab[469:460]), (gtm_reg_gtmTab[479:470]), (gtm_reg_gtmTab[489:480]),
      (gtm_reg_gtmTab[499:490]), (gtm_reg_gtmTab[509:500]), (gtm_reg_gtmTab[519:510]),
      (gtm_reg_gtmTab[529:520]), (gtm_reg_gtmTab[539:530]), (gtm_reg_gtmTab[549:540]),
      (gtm_reg_gtmTab[559:550]), (gtm_reg_gtmTab[569:560]), (gtm_reg_gtmTab[579:570]),
      (gtm_reg_gtmTab[589:580]), (gtm_reg_gtmTab[599:590]), (gtm_reg_gtmTab[609:600]),
      (gtm_reg_gtmTab[619:610]), (gtm_reg_gtmTab[629:620]), (gtm_reg_gtmTab[639:630]),
      (gtm_reg_gtmTab[649:640]), (gtm_reg_gtmTab[659:650]), (gtm_reg_gtmTab[669:660]),
      (gtm_reg_gtmTab[679:670]), (gtm_reg_gtmTab[689:680]), (gtm_reg_gtmTab[699:690]),
      (gtm_reg_gtmTab[709:700]), (gtm_reg_gtmTab[719:710]), (gtm_reg_gtmTab[729:720]),
      (gtm_reg_gtmTab[739:730]), (gtm_reg_gtmTab[749:740]), (gtm_reg_gtmTab[759:750]),
      (gtm_reg_gtmTab[769:760]), (gtm_reg_gtmTab[779:770]), (gtm_reg_gtmTab[789:780]),
      (gtm_reg_gtmTab[799:790]), (gtm_reg_gtmTab[809:800]), (gtm_reg_gtmTab[819:810]),
      (gtm_reg_gtmTab[829:820]), (gtm_reg_gtmTab[839:830]), (gtm_reg_gtmTab[849:840]),
      (gtm_reg_gtmTab[859:850]), (gtm_reg_gtmTab[869:860]), (gtm_reg_gtmTab[879:870]),
      (gtm_reg_gtmTab[889:880]), (gtm_reg_gtmTab[899:890]), (gtm_reg_gtmTab[909:900]),
      (gtm_reg_gtmTab[919:910]), (gtm_reg_gtmTab[929:920]), (gtm_reg_gtmTab[939:930]),
      (gtm_reg_gtmTab[949:940]), (gtm_reg_gtmTab[959:950]), (gtm_reg_gtmTab[969:960]),
      (gtm_reg_gtmTab[979:970]), (gtm_reg_gtmTab[989:980]), (gtm_reg_gtmTab[999:990]),
      (gtm_reg_gtmTab[1009:1000]), (gtm_reg_gtmTab[1019:1010]), (gtm_reg_gtmTab[1029:1020]),
      (gtm_reg_gtmTab[1039:1030]), (gtm_reg_gtmTab[1049:1040]), (gtm_reg_gtmTab[1059:1050]),
      (gtm_reg_gtmTab[1069:1060]), (gtm_reg_gtmTab[1079:1070]), (gtm_reg_gtmTab[1089:1080]),
      (gtm_reg_gtmTab[1099:1090]), (gtm_reg_gtmTab[1109:1100]), (gtm_reg_gtmTab[1119:1110]),
      (gtm_reg_gtmTab[1129:1120]), (gtm_reg_gtmTab[1139:1130]), (gtm_reg_gtmTab[1149:1140]),
      (gtm_reg_gtmTab[1159:1150]), (gtm_reg_gtmTab[1169:1160]), (gtm_reg_gtmTab[1179:1170]),
      (gtm_reg_gtmTab[1189:1180]), (gtm_reg_gtmTab[1199:1190]), (gtm_reg_gtmTab[1209:1200]),
      (gtm_reg_gtmTab[1219:1210]), (gtm_reg_gtmTab[1229:1220]), (gtm_reg_gtmTab[1239:1230]),
      (gtm_reg_gtmTab[1249:1240]), (gtm_reg_gtmTab[1259:1250]), (gtm_reg_gtmTab[1269:1260]),
      (gtm_reg_gtmTab[1279:1270]), src_rsci_idat_mxwt[41:35]);
  assign gtm_cal_unequal_tmp_7 = (operator_10_false_slc_gtm_reg_gtmTab_10_9_0_sdt_1_sva_1!=10'b0000000000);
  assign temp3_1_lpi_1_dfm_mx0 = MUX_v_16_2_2((z_out_4[15:0]), (z_out_4[17:2]), gtm_reg_m_bDitheringEnable);
  assign nl_gtm_cal_2_operator_22_true_acc_nl = conv_s2u_15_22(gtm_cal_if_2_mul_ncse_2_sva_1[21:7])
      + gtm_cal_if_2_mul_ncse_2_sva_1;
  assign gtm_cal_2_operator_22_true_acc_nl = nl_gtm_cal_2_operator_22_true_acc_nl[21:0];
  assign gtm_cal_2_operator_22_true_acc_itm_21_4_1 = readslicef_22_18_4(gtm_cal_2_operator_22_true_acc_nl);
  assign gtm_cal_gtm_cal_gtm_cal_or_3_nl = (operator_10_false_1_slc_gtm_reg_gtmTab_10_9_0_sdt_2_sva_1!=10'b0000000000);
  assign nl_gtm_cal_acc_3_nl = ({1'b1 , operator_10_false_1_slc_gtm_reg_gtmTab_10_9_0_sdt_2_sva_1
      , (signext_3_1(gtm_cal_gtm_cal_gtm_cal_or_3_nl)) , 1'b1}) + conv_u2s_14_15({(~
      operator_10_false_slc_gtm_reg_gtmTab_10_9_0_sdt_2_sva_1) , (signext_4_1(~ gtm_cal_unequal_tmp_8))})
      + 15'b000000000000001;
  assign gtm_cal_acc_3_nl = nl_gtm_cal_acc_3_nl[14:0];
  assign nl_gtm_cal_if_2_mul_ncse_2_sva_1 = $signed(gtm_cal_acc_3_nl) * $signed(conv_u2s_7_8(src_rsci_idat_mxwt[20:14]));
  assign gtm_cal_if_2_mul_ncse_2_sva_1 = nl_gtm_cal_if_2_mul_ncse_2_sva_1[21:0];
  assign temp3_2_lpi_1_dfm_1 = MUX_v_16_2_2((z_out_6[15:0]), (z_out_6[17:2]), gtm_reg_m_bDitheringEnable);
  assign operator_10_false_slc_gtm_reg_gtmTab_10_9_0_sdt_2_sva_1 = MUX_v_10_128_2((gtm_reg_gtmTab[9:0]),
      (gtm_reg_gtmTab[19:10]), (gtm_reg_gtmTab[29:20]), (gtm_reg_gtmTab[39:30]),
      (gtm_reg_gtmTab[49:40]), (gtm_reg_gtmTab[59:50]), (gtm_reg_gtmTab[69:60]),
      (gtm_reg_gtmTab[79:70]), (gtm_reg_gtmTab[89:80]), (gtm_reg_gtmTab[99:90]),
      (gtm_reg_gtmTab[109:100]), (gtm_reg_gtmTab[119:110]), (gtm_reg_gtmTab[129:120]),
      (gtm_reg_gtmTab[139:130]), (gtm_reg_gtmTab[149:140]), (gtm_reg_gtmTab[159:150]),
      (gtm_reg_gtmTab[169:160]), (gtm_reg_gtmTab[179:170]), (gtm_reg_gtmTab[189:180]),
      (gtm_reg_gtmTab[199:190]), (gtm_reg_gtmTab[209:200]), (gtm_reg_gtmTab[219:210]),
      (gtm_reg_gtmTab[229:220]), (gtm_reg_gtmTab[239:230]), (gtm_reg_gtmTab[249:240]),
      (gtm_reg_gtmTab[259:250]), (gtm_reg_gtmTab[269:260]), (gtm_reg_gtmTab[279:270]),
      (gtm_reg_gtmTab[289:280]), (gtm_reg_gtmTab[299:290]), (gtm_reg_gtmTab[309:300]),
      (gtm_reg_gtmTab[319:310]), (gtm_reg_gtmTab[329:320]), (gtm_reg_gtmTab[339:330]),
      (gtm_reg_gtmTab[349:340]), (gtm_reg_gtmTab[359:350]), (gtm_reg_gtmTab[369:360]),
      (gtm_reg_gtmTab[379:370]), (gtm_reg_gtmTab[389:380]), (gtm_reg_gtmTab[399:390]),
      (gtm_reg_gtmTab[409:400]), (gtm_reg_gtmTab[419:410]), (gtm_reg_gtmTab[429:420]),
      (gtm_reg_gtmTab[439:430]), (gtm_reg_gtmTab[449:440]), (gtm_reg_gtmTab[459:450]),
      (gtm_reg_gtmTab[469:460]), (gtm_reg_gtmTab[479:470]), (gtm_reg_gtmTab[489:480]),
      (gtm_reg_gtmTab[499:490]), (gtm_reg_gtmTab[509:500]), (gtm_reg_gtmTab[519:510]),
      (gtm_reg_gtmTab[529:520]), (gtm_reg_gtmTab[539:530]), (gtm_reg_gtmTab[549:540]),
      (gtm_reg_gtmTab[559:550]), (gtm_reg_gtmTab[569:560]), (gtm_reg_gtmTab[579:570]),
      (gtm_reg_gtmTab[589:580]), (gtm_reg_gtmTab[599:590]), (gtm_reg_gtmTab[609:600]),
      (gtm_reg_gtmTab[619:610]), (gtm_reg_gtmTab[629:620]), (gtm_reg_gtmTab[639:630]),
      (gtm_reg_gtmTab[649:640]), (gtm_reg_gtmTab[659:650]), (gtm_reg_gtmTab[669:660]),
      (gtm_reg_gtmTab[679:670]), (gtm_reg_gtmTab[689:680]), (gtm_reg_gtmTab[699:690]),
      (gtm_reg_gtmTab[709:700]), (gtm_reg_gtmTab[719:710]), (gtm_reg_gtmTab[729:720]),
      (gtm_reg_gtmTab[739:730]), (gtm_reg_gtmTab[749:740]), (gtm_reg_gtmTab[759:750]),
      (gtm_reg_gtmTab[769:760]), (gtm_reg_gtmTab[779:770]), (gtm_reg_gtmTab[789:780]),
      (gtm_reg_gtmTab[799:790]), (gtm_reg_gtmTab[809:800]), (gtm_reg_gtmTab[819:810]),
      (gtm_reg_gtmTab[829:820]), (gtm_reg_gtmTab[839:830]), (gtm_reg_gtmTab[849:840]),
      (gtm_reg_gtmTab[859:850]), (gtm_reg_gtmTab[869:860]), (gtm_reg_gtmTab[879:870]),
      (gtm_reg_gtmTab[889:880]), (gtm_reg_gtmTab[899:890]), (gtm_reg_gtmTab[909:900]),
      (gtm_reg_gtmTab[919:910]), (gtm_reg_gtmTab[929:920]), (gtm_reg_gtmTab[939:930]),
      (gtm_reg_gtmTab[949:940]), (gtm_reg_gtmTab[959:950]), (gtm_reg_gtmTab[969:960]),
      (gtm_reg_gtmTab[979:970]), (gtm_reg_gtmTab[989:980]), (gtm_reg_gtmTab[999:990]),
      (gtm_reg_gtmTab[1009:1000]), (gtm_reg_gtmTab[1019:1010]), (gtm_reg_gtmTab[1029:1020]),
      (gtm_reg_gtmTab[1039:1030]), (gtm_reg_gtmTab[1049:1040]), (gtm_reg_gtmTab[1059:1050]),
      (gtm_reg_gtmTab[1069:1060]), (gtm_reg_gtmTab[1079:1070]), (gtm_reg_gtmTab[1089:1080]),
      (gtm_reg_gtmTab[1099:1090]), (gtm_reg_gtmTab[1109:1100]), (gtm_reg_gtmTab[1119:1110]),
      (gtm_reg_gtmTab[1129:1120]), (gtm_reg_gtmTab[1139:1130]), (gtm_reg_gtmTab[1149:1140]),
      (gtm_reg_gtmTab[1159:1150]), (gtm_reg_gtmTab[1169:1160]), (gtm_reg_gtmTab[1179:1170]),
      (gtm_reg_gtmTab[1189:1180]), (gtm_reg_gtmTab[1199:1190]), (gtm_reg_gtmTab[1209:1200]),
      (gtm_reg_gtmTab[1219:1210]), (gtm_reg_gtmTab[1229:1220]), (gtm_reg_gtmTab[1239:1230]),
      (gtm_reg_gtmTab[1249:1240]), (gtm_reg_gtmTab[1259:1250]), (gtm_reg_gtmTab[1269:1260]),
      (gtm_reg_gtmTab[1279:1270]), src_rsci_idat_mxwt[27:21]);
  assign gtm_cal_unequal_tmp_8 = (operator_10_false_slc_gtm_reg_gtmTab_10_9_0_sdt_2_sva_1!=10'b0000000000);
  assign nl_gtm_cal_3_operator_22_true_acc_nl = conv_s2u_15_22(gtm_cal_if_2_mul_ncse_sva_1[21:7])
      + gtm_cal_if_2_mul_ncse_sva_1;
  assign gtm_cal_3_operator_22_true_acc_nl = nl_gtm_cal_3_operator_22_true_acc_nl[21:0];
  assign gtm_cal_3_operator_22_true_acc_itm_21_4_1 = readslicef_22_18_4(gtm_cal_3_operator_22_true_acc_nl);
  assign gtm_cal_gtm_cal_gtm_cal_or_5_nl = (operator_10_false_1_slc_gtm_reg_gtmTab_10_9_0_sdt_sva_1!=10'b0000000000);
  assign nl_gtm_cal_acc_4_nl = ({1'b1 , operator_10_false_1_slc_gtm_reg_gtmTab_10_9_0_sdt_sva_1
      , (signext_3_1(gtm_cal_gtm_cal_gtm_cal_or_5_nl)) , 1'b1}) + conv_u2s_14_15({(~
      operator_10_false_slc_gtm_reg_gtmTab_10_9_0_sdt_sva_1) , (signext_4_1(~ gtm_cal_unequal_tmp_9))})
      + 15'b000000000000001;
  assign gtm_cal_acc_4_nl = nl_gtm_cal_acc_4_nl[14:0];
  assign nl_gtm_cal_if_2_mul_ncse_sva_1 = $signed(gtm_cal_acc_4_nl) * $signed(conv_u2s_7_8(src_rsci_idat_mxwt[6:0]));
  assign gtm_cal_if_2_mul_ncse_sva_1 = nl_gtm_cal_if_2_mul_ncse_sva_1[21:0];
  assign temp3_lpi_1_dfm_1 = MUX_v_16_2_2((z_out_5[15:0]), (z_out_5[17:2]), gtm_reg_m_bDitheringEnable);
  assign operator_10_false_slc_gtm_reg_gtmTab_10_9_0_sdt_sva_1 = MUX_v_10_128_2((gtm_reg_gtmTab[9:0]),
      (gtm_reg_gtmTab[19:10]), (gtm_reg_gtmTab[29:20]), (gtm_reg_gtmTab[39:30]),
      (gtm_reg_gtmTab[49:40]), (gtm_reg_gtmTab[59:50]), (gtm_reg_gtmTab[69:60]),
      (gtm_reg_gtmTab[79:70]), (gtm_reg_gtmTab[89:80]), (gtm_reg_gtmTab[99:90]),
      (gtm_reg_gtmTab[109:100]), (gtm_reg_gtmTab[119:110]), (gtm_reg_gtmTab[129:120]),
      (gtm_reg_gtmTab[139:130]), (gtm_reg_gtmTab[149:140]), (gtm_reg_gtmTab[159:150]),
      (gtm_reg_gtmTab[169:160]), (gtm_reg_gtmTab[179:170]), (gtm_reg_gtmTab[189:180]),
      (gtm_reg_gtmTab[199:190]), (gtm_reg_gtmTab[209:200]), (gtm_reg_gtmTab[219:210]),
      (gtm_reg_gtmTab[229:220]), (gtm_reg_gtmTab[239:230]), (gtm_reg_gtmTab[249:240]),
      (gtm_reg_gtmTab[259:250]), (gtm_reg_gtmTab[269:260]), (gtm_reg_gtmTab[279:270]),
      (gtm_reg_gtmTab[289:280]), (gtm_reg_gtmTab[299:290]), (gtm_reg_gtmTab[309:300]),
      (gtm_reg_gtmTab[319:310]), (gtm_reg_gtmTab[329:320]), (gtm_reg_gtmTab[339:330]),
      (gtm_reg_gtmTab[349:340]), (gtm_reg_gtmTab[359:350]), (gtm_reg_gtmTab[369:360]),
      (gtm_reg_gtmTab[379:370]), (gtm_reg_gtmTab[389:380]), (gtm_reg_gtmTab[399:390]),
      (gtm_reg_gtmTab[409:400]), (gtm_reg_gtmTab[419:410]), (gtm_reg_gtmTab[429:420]),
      (gtm_reg_gtmTab[439:430]), (gtm_reg_gtmTab[449:440]), (gtm_reg_gtmTab[459:450]),
      (gtm_reg_gtmTab[469:460]), (gtm_reg_gtmTab[479:470]), (gtm_reg_gtmTab[489:480]),
      (gtm_reg_gtmTab[499:490]), (gtm_reg_gtmTab[509:500]), (gtm_reg_gtmTab[519:510]),
      (gtm_reg_gtmTab[529:520]), (gtm_reg_gtmTab[539:530]), (gtm_reg_gtmTab[549:540]),
      (gtm_reg_gtmTab[559:550]), (gtm_reg_gtmTab[569:560]), (gtm_reg_gtmTab[579:570]),
      (gtm_reg_gtmTab[589:580]), (gtm_reg_gtmTab[599:590]), (gtm_reg_gtmTab[609:600]),
      (gtm_reg_gtmTab[619:610]), (gtm_reg_gtmTab[629:620]), (gtm_reg_gtmTab[639:630]),
      (gtm_reg_gtmTab[649:640]), (gtm_reg_gtmTab[659:650]), (gtm_reg_gtmTab[669:660]),
      (gtm_reg_gtmTab[679:670]), (gtm_reg_gtmTab[689:680]), (gtm_reg_gtmTab[699:690]),
      (gtm_reg_gtmTab[709:700]), (gtm_reg_gtmTab[719:710]), (gtm_reg_gtmTab[729:720]),
      (gtm_reg_gtmTab[739:730]), (gtm_reg_gtmTab[749:740]), (gtm_reg_gtmTab[759:750]),
      (gtm_reg_gtmTab[769:760]), (gtm_reg_gtmTab[779:770]), (gtm_reg_gtmTab[789:780]),
      (gtm_reg_gtmTab[799:790]), (gtm_reg_gtmTab[809:800]), (gtm_reg_gtmTab[819:810]),
      (gtm_reg_gtmTab[829:820]), (gtm_reg_gtmTab[839:830]), (gtm_reg_gtmTab[849:840]),
      (gtm_reg_gtmTab[859:850]), (gtm_reg_gtmTab[869:860]), (gtm_reg_gtmTab[879:870]),
      (gtm_reg_gtmTab[889:880]), (gtm_reg_gtmTab[899:890]), (gtm_reg_gtmTab[909:900]),
      (gtm_reg_gtmTab[919:910]), (gtm_reg_gtmTab[929:920]), (gtm_reg_gtmTab[939:930]),
      (gtm_reg_gtmTab[949:940]), (gtm_reg_gtmTab[959:950]), (gtm_reg_gtmTab[969:960]),
      (gtm_reg_gtmTab[979:970]), (gtm_reg_gtmTab[989:980]), (gtm_reg_gtmTab[999:990]),
      (gtm_reg_gtmTab[1009:1000]), (gtm_reg_gtmTab[1019:1010]), (gtm_reg_gtmTab[1029:1020]),
      (gtm_reg_gtmTab[1039:1030]), (gtm_reg_gtmTab[1049:1040]), (gtm_reg_gtmTab[1059:1050]),
      (gtm_reg_gtmTab[1069:1060]), (gtm_reg_gtmTab[1079:1070]), (gtm_reg_gtmTab[1089:1080]),
      (gtm_reg_gtmTab[1099:1090]), (gtm_reg_gtmTab[1109:1100]), (gtm_reg_gtmTab[1119:1110]),
      (gtm_reg_gtmTab[1129:1120]), (gtm_reg_gtmTab[1139:1130]), (gtm_reg_gtmTab[1149:1140]),
      (gtm_reg_gtmTab[1159:1150]), (gtm_reg_gtmTab[1169:1160]), (gtm_reg_gtmTab[1179:1170]),
      (gtm_reg_gtmTab[1189:1180]), (gtm_reg_gtmTab[1199:1190]), (gtm_reg_gtmTab[1209:1200]),
      (gtm_reg_gtmTab[1219:1210]), (gtm_reg_gtmTab[1229:1220]), (gtm_reg_gtmTab[1239:1230]),
      (gtm_reg_gtmTab[1249:1240]), (gtm_reg_gtmTab[1259:1250]), (gtm_reg_gtmTab[1269:1260]),
      (gtm_reg_gtmTab[1279:1270]), src_rsci_idat_mxwt[13:7]);
  assign gtm_cal_unequal_tmp_9 = (operator_10_false_slc_gtm_reg_gtmTab_10_9_0_sdt_sva_1!=10'b0000000000);
  assign seed_seed_nor_nl = ~(or_dcpl_8 | exitL_exit_gtm_row_sva);
  assign seed_and_5_nl = or_dcpl_8 & (~ exitL_exit_gtm_row_sva);
  assign seed_3_lpi_1_dfm_1_mx0 = MUX1HOT_v_5_3_2((z_out_4[4:0]), seed_3_lpi_1_dfm_1,
      5'b01000, {seed_seed_nor_nl , seed_and_5_nl , exitL_exit_gtm_row_sva});
  assign nl_gtm_cal_3_operator_7_false_acc_nl = (src_rsci_idat_mxwt[13:7]) + 7'b0000001;
  assign gtm_cal_3_operator_7_false_acc_nl = nl_gtm_cal_3_operator_7_false_acc_nl[6:0];
  assign operator_10_false_1_slc_gtm_reg_gtmTab_10_9_0_sdt_sva_1 = MUX_v_10_128_2((gtm_reg_gtmTab[1289:1280]),
      (gtm_reg_gtmTab[19:10]), (gtm_reg_gtmTab[29:20]), (gtm_reg_gtmTab[39:30]),
      (gtm_reg_gtmTab[49:40]), (gtm_reg_gtmTab[59:50]), (gtm_reg_gtmTab[69:60]),
      (gtm_reg_gtmTab[79:70]), (gtm_reg_gtmTab[89:80]), (gtm_reg_gtmTab[99:90]),
      (gtm_reg_gtmTab[109:100]), (gtm_reg_gtmTab[119:110]), (gtm_reg_gtmTab[129:120]),
      (gtm_reg_gtmTab[139:130]), (gtm_reg_gtmTab[149:140]), (gtm_reg_gtmTab[159:150]),
      (gtm_reg_gtmTab[169:160]), (gtm_reg_gtmTab[179:170]), (gtm_reg_gtmTab[189:180]),
      (gtm_reg_gtmTab[199:190]), (gtm_reg_gtmTab[209:200]), (gtm_reg_gtmTab[219:210]),
      (gtm_reg_gtmTab[229:220]), (gtm_reg_gtmTab[239:230]), (gtm_reg_gtmTab[249:240]),
      (gtm_reg_gtmTab[259:250]), (gtm_reg_gtmTab[269:260]), (gtm_reg_gtmTab[279:270]),
      (gtm_reg_gtmTab[289:280]), (gtm_reg_gtmTab[299:290]), (gtm_reg_gtmTab[309:300]),
      (gtm_reg_gtmTab[319:310]), (gtm_reg_gtmTab[329:320]), (gtm_reg_gtmTab[339:330]),
      (gtm_reg_gtmTab[349:340]), (gtm_reg_gtmTab[359:350]), (gtm_reg_gtmTab[369:360]),
      (gtm_reg_gtmTab[379:370]), (gtm_reg_gtmTab[389:380]), (gtm_reg_gtmTab[399:390]),
      (gtm_reg_gtmTab[409:400]), (gtm_reg_gtmTab[419:410]), (gtm_reg_gtmTab[429:420]),
      (gtm_reg_gtmTab[439:430]), (gtm_reg_gtmTab[449:440]), (gtm_reg_gtmTab[459:450]),
      (gtm_reg_gtmTab[469:460]), (gtm_reg_gtmTab[479:470]), (gtm_reg_gtmTab[489:480]),
      (gtm_reg_gtmTab[499:490]), (gtm_reg_gtmTab[509:500]), (gtm_reg_gtmTab[519:510]),
      (gtm_reg_gtmTab[529:520]), (gtm_reg_gtmTab[539:530]), (gtm_reg_gtmTab[549:540]),
      (gtm_reg_gtmTab[559:550]), (gtm_reg_gtmTab[569:560]), (gtm_reg_gtmTab[579:570]),
      (gtm_reg_gtmTab[589:580]), (gtm_reg_gtmTab[599:590]), (gtm_reg_gtmTab[609:600]),
      (gtm_reg_gtmTab[619:610]), (gtm_reg_gtmTab[629:620]), (gtm_reg_gtmTab[639:630]),
      (gtm_reg_gtmTab[649:640]), (gtm_reg_gtmTab[659:650]), (gtm_reg_gtmTab[669:660]),
      (gtm_reg_gtmTab[679:670]), (gtm_reg_gtmTab[689:680]), (gtm_reg_gtmTab[699:690]),
      (gtm_reg_gtmTab[709:700]), (gtm_reg_gtmTab[719:710]), (gtm_reg_gtmTab[729:720]),
      (gtm_reg_gtmTab[739:730]), (gtm_reg_gtmTab[749:740]), (gtm_reg_gtmTab[759:750]),
      (gtm_reg_gtmTab[769:760]), (gtm_reg_gtmTab[779:770]), (gtm_reg_gtmTab[789:780]),
      (gtm_reg_gtmTab[799:790]), (gtm_reg_gtmTab[809:800]), (gtm_reg_gtmTab[819:810]),
      (gtm_reg_gtmTab[829:820]), (gtm_reg_gtmTab[839:830]), (gtm_reg_gtmTab[849:840]),
      (gtm_reg_gtmTab[859:850]), (gtm_reg_gtmTab[869:860]), (gtm_reg_gtmTab[879:870]),
      (gtm_reg_gtmTab[889:880]), (gtm_reg_gtmTab[899:890]), (gtm_reg_gtmTab[909:900]),
      (gtm_reg_gtmTab[919:910]), (gtm_reg_gtmTab[929:920]), (gtm_reg_gtmTab[939:930]),
      (gtm_reg_gtmTab[949:940]), (gtm_reg_gtmTab[959:950]), (gtm_reg_gtmTab[969:960]),
      (gtm_reg_gtmTab[979:970]), (gtm_reg_gtmTab[989:980]), (gtm_reg_gtmTab[999:990]),
      (gtm_reg_gtmTab[1009:1000]), (gtm_reg_gtmTab[1019:1010]), (gtm_reg_gtmTab[1029:1020]),
      (gtm_reg_gtmTab[1039:1030]), (gtm_reg_gtmTab[1049:1040]), (gtm_reg_gtmTab[1059:1050]),
      (gtm_reg_gtmTab[1069:1060]), (gtm_reg_gtmTab[1079:1070]), (gtm_reg_gtmTab[1089:1080]),
      (gtm_reg_gtmTab[1099:1090]), (gtm_reg_gtmTab[1109:1100]), (gtm_reg_gtmTab[1119:1110]),
      (gtm_reg_gtmTab[1129:1120]), (gtm_reg_gtmTab[1139:1130]), (gtm_reg_gtmTab[1149:1140]),
      (gtm_reg_gtmTab[1159:1150]), (gtm_reg_gtmTab[1169:1160]), (gtm_reg_gtmTab[1179:1170]),
      (gtm_reg_gtmTab[1189:1180]), (gtm_reg_gtmTab[1199:1190]), (gtm_reg_gtmTab[1209:1200]),
      (gtm_reg_gtmTab[1219:1210]), (gtm_reg_gtmTab[1229:1220]), (gtm_reg_gtmTab[1239:1230]),
      (gtm_reg_gtmTab[1249:1240]), (gtm_reg_gtmTab[1259:1250]), (gtm_reg_gtmTab[1269:1260]),
      (gtm_reg_gtmTab[1279:1270]), gtm_cal_3_operator_7_false_acc_nl);
  assign nl_gtm_cal_2_operator_7_false_acc_nl = (src_rsci_idat_mxwt[27:21]) + 7'b0000001;
  assign gtm_cal_2_operator_7_false_acc_nl = nl_gtm_cal_2_operator_7_false_acc_nl[6:0];
  assign operator_10_false_1_slc_gtm_reg_gtmTab_10_9_0_sdt_2_sva_1 = MUX_v_10_128_2((gtm_reg_gtmTab[1289:1280]),
      (gtm_reg_gtmTab[19:10]), (gtm_reg_gtmTab[29:20]), (gtm_reg_gtmTab[39:30]),
      (gtm_reg_gtmTab[49:40]), (gtm_reg_gtmTab[59:50]), (gtm_reg_gtmTab[69:60]),
      (gtm_reg_gtmTab[79:70]), (gtm_reg_gtmTab[89:80]), (gtm_reg_gtmTab[99:90]),
      (gtm_reg_gtmTab[109:100]), (gtm_reg_gtmTab[119:110]), (gtm_reg_gtmTab[129:120]),
      (gtm_reg_gtmTab[139:130]), (gtm_reg_gtmTab[149:140]), (gtm_reg_gtmTab[159:150]),
      (gtm_reg_gtmTab[169:160]), (gtm_reg_gtmTab[179:170]), (gtm_reg_gtmTab[189:180]),
      (gtm_reg_gtmTab[199:190]), (gtm_reg_gtmTab[209:200]), (gtm_reg_gtmTab[219:210]),
      (gtm_reg_gtmTab[229:220]), (gtm_reg_gtmTab[239:230]), (gtm_reg_gtmTab[249:240]),
      (gtm_reg_gtmTab[259:250]), (gtm_reg_gtmTab[269:260]), (gtm_reg_gtmTab[279:270]),
      (gtm_reg_gtmTab[289:280]), (gtm_reg_gtmTab[299:290]), (gtm_reg_gtmTab[309:300]),
      (gtm_reg_gtmTab[319:310]), (gtm_reg_gtmTab[329:320]), (gtm_reg_gtmTab[339:330]),
      (gtm_reg_gtmTab[349:340]), (gtm_reg_gtmTab[359:350]), (gtm_reg_gtmTab[369:360]),
      (gtm_reg_gtmTab[379:370]), (gtm_reg_gtmTab[389:380]), (gtm_reg_gtmTab[399:390]),
      (gtm_reg_gtmTab[409:400]), (gtm_reg_gtmTab[419:410]), (gtm_reg_gtmTab[429:420]),
      (gtm_reg_gtmTab[439:430]), (gtm_reg_gtmTab[449:440]), (gtm_reg_gtmTab[459:450]),
      (gtm_reg_gtmTab[469:460]), (gtm_reg_gtmTab[479:470]), (gtm_reg_gtmTab[489:480]),
      (gtm_reg_gtmTab[499:490]), (gtm_reg_gtmTab[509:500]), (gtm_reg_gtmTab[519:510]),
      (gtm_reg_gtmTab[529:520]), (gtm_reg_gtmTab[539:530]), (gtm_reg_gtmTab[549:540]),
      (gtm_reg_gtmTab[559:550]), (gtm_reg_gtmTab[569:560]), (gtm_reg_gtmTab[579:570]),
      (gtm_reg_gtmTab[589:580]), (gtm_reg_gtmTab[599:590]), (gtm_reg_gtmTab[609:600]),
      (gtm_reg_gtmTab[619:610]), (gtm_reg_gtmTab[629:620]), (gtm_reg_gtmTab[639:630]),
      (gtm_reg_gtmTab[649:640]), (gtm_reg_gtmTab[659:650]), (gtm_reg_gtmTab[669:660]),
      (gtm_reg_gtmTab[679:670]), (gtm_reg_gtmTab[689:680]), (gtm_reg_gtmTab[699:690]),
      (gtm_reg_gtmTab[709:700]), (gtm_reg_gtmTab[719:710]), (gtm_reg_gtmTab[729:720]),
      (gtm_reg_gtmTab[739:730]), (gtm_reg_gtmTab[749:740]), (gtm_reg_gtmTab[759:750]),
      (gtm_reg_gtmTab[769:760]), (gtm_reg_gtmTab[779:770]), (gtm_reg_gtmTab[789:780]),
      (gtm_reg_gtmTab[799:790]), (gtm_reg_gtmTab[809:800]), (gtm_reg_gtmTab[819:810]),
      (gtm_reg_gtmTab[829:820]), (gtm_reg_gtmTab[839:830]), (gtm_reg_gtmTab[849:840]),
      (gtm_reg_gtmTab[859:850]), (gtm_reg_gtmTab[869:860]), (gtm_reg_gtmTab[879:870]),
      (gtm_reg_gtmTab[889:880]), (gtm_reg_gtmTab[899:890]), (gtm_reg_gtmTab[909:900]),
      (gtm_reg_gtmTab[919:910]), (gtm_reg_gtmTab[929:920]), (gtm_reg_gtmTab[939:930]),
      (gtm_reg_gtmTab[949:940]), (gtm_reg_gtmTab[959:950]), (gtm_reg_gtmTab[969:960]),
      (gtm_reg_gtmTab[979:970]), (gtm_reg_gtmTab[989:980]), (gtm_reg_gtmTab[999:990]),
      (gtm_reg_gtmTab[1009:1000]), (gtm_reg_gtmTab[1019:1010]), (gtm_reg_gtmTab[1029:1020]),
      (gtm_reg_gtmTab[1039:1030]), (gtm_reg_gtmTab[1049:1040]), (gtm_reg_gtmTab[1059:1050]),
      (gtm_reg_gtmTab[1069:1060]), (gtm_reg_gtmTab[1079:1070]), (gtm_reg_gtmTab[1089:1080]),
      (gtm_reg_gtmTab[1099:1090]), (gtm_reg_gtmTab[1109:1100]), (gtm_reg_gtmTab[1119:1110]),
      (gtm_reg_gtmTab[1129:1120]), (gtm_reg_gtmTab[1139:1130]), (gtm_reg_gtmTab[1149:1140]),
      (gtm_reg_gtmTab[1159:1150]), (gtm_reg_gtmTab[1169:1160]), (gtm_reg_gtmTab[1179:1170]),
      (gtm_reg_gtmTab[1189:1180]), (gtm_reg_gtmTab[1199:1190]), (gtm_reg_gtmTab[1209:1200]),
      (gtm_reg_gtmTab[1219:1210]), (gtm_reg_gtmTab[1229:1220]), (gtm_reg_gtmTab[1239:1230]),
      (gtm_reg_gtmTab[1249:1240]), (gtm_reg_gtmTab[1259:1250]), (gtm_reg_gtmTab[1269:1260]),
      (gtm_reg_gtmTab[1279:1270]), gtm_cal_2_operator_7_false_acc_nl);
  assign nl_gtm_cal_1_operator_7_false_acc_nl = (src_rsci_idat_mxwt[41:35]) + 7'b0000001;
  assign gtm_cal_1_operator_7_false_acc_nl = nl_gtm_cal_1_operator_7_false_acc_nl[6:0];
  assign operator_10_false_1_slc_gtm_reg_gtmTab_10_9_0_sdt_1_sva_1 = MUX_v_10_128_2((gtm_reg_gtmTab[1289:1280]),
      (gtm_reg_gtmTab[19:10]), (gtm_reg_gtmTab[29:20]), (gtm_reg_gtmTab[39:30]),
      (gtm_reg_gtmTab[49:40]), (gtm_reg_gtmTab[59:50]), (gtm_reg_gtmTab[69:60]),
      (gtm_reg_gtmTab[79:70]), (gtm_reg_gtmTab[89:80]), (gtm_reg_gtmTab[99:90]),
      (gtm_reg_gtmTab[109:100]), (gtm_reg_gtmTab[119:110]), (gtm_reg_gtmTab[129:120]),
      (gtm_reg_gtmTab[139:130]), (gtm_reg_gtmTab[149:140]), (gtm_reg_gtmTab[159:150]),
      (gtm_reg_gtmTab[169:160]), (gtm_reg_gtmTab[179:170]), (gtm_reg_gtmTab[189:180]),
      (gtm_reg_gtmTab[199:190]), (gtm_reg_gtmTab[209:200]), (gtm_reg_gtmTab[219:210]),
      (gtm_reg_gtmTab[229:220]), (gtm_reg_gtmTab[239:230]), (gtm_reg_gtmTab[249:240]),
      (gtm_reg_gtmTab[259:250]), (gtm_reg_gtmTab[269:260]), (gtm_reg_gtmTab[279:270]),
      (gtm_reg_gtmTab[289:280]), (gtm_reg_gtmTab[299:290]), (gtm_reg_gtmTab[309:300]),
      (gtm_reg_gtmTab[319:310]), (gtm_reg_gtmTab[329:320]), (gtm_reg_gtmTab[339:330]),
      (gtm_reg_gtmTab[349:340]), (gtm_reg_gtmTab[359:350]), (gtm_reg_gtmTab[369:360]),
      (gtm_reg_gtmTab[379:370]), (gtm_reg_gtmTab[389:380]), (gtm_reg_gtmTab[399:390]),
      (gtm_reg_gtmTab[409:400]), (gtm_reg_gtmTab[419:410]), (gtm_reg_gtmTab[429:420]),
      (gtm_reg_gtmTab[439:430]), (gtm_reg_gtmTab[449:440]), (gtm_reg_gtmTab[459:450]),
      (gtm_reg_gtmTab[469:460]), (gtm_reg_gtmTab[479:470]), (gtm_reg_gtmTab[489:480]),
      (gtm_reg_gtmTab[499:490]), (gtm_reg_gtmTab[509:500]), (gtm_reg_gtmTab[519:510]),
      (gtm_reg_gtmTab[529:520]), (gtm_reg_gtmTab[539:530]), (gtm_reg_gtmTab[549:540]),
      (gtm_reg_gtmTab[559:550]), (gtm_reg_gtmTab[569:560]), (gtm_reg_gtmTab[579:570]),
      (gtm_reg_gtmTab[589:580]), (gtm_reg_gtmTab[599:590]), (gtm_reg_gtmTab[609:600]),
      (gtm_reg_gtmTab[619:610]), (gtm_reg_gtmTab[629:620]), (gtm_reg_gtmTab[639:630]),
      (gtm_reg_gtmTab[649:640]), (gtm_reg_gtmTab[659:650]), (gtm_reg_gtmTab[669:660]),
      (gtm_reg_gtmTab[679:670]), (gtm_reg_gtmTab[689:680]), (gtm_reg_gtmTab[699:690]),
      (gtm_reg_gtmTab[709:700]), (gtm_reg_gtmTab[719:710]), (gtm_reg_gtmTab[729:720]),
      (gtm_reg_gtmTab[739:730]), (gtm_reg_gtmTab[749:740]), (gtm_reg_gtmTab[759:750]),
      (gtm_reg_gtmTab[769:760]), (gtm_reg_gtmTab[779:770]), (gtm_reg_gtmTab[789:780]),
      (gtm_reg_gtmTab[799:790]), (gtm_reg_gtmTab[809:800]), (gtm_reg_gtmTab[819:810]),
      (gtm_reg_gtmTab[829:820]), (gtm_reg_gtmTab[839:830]), (gtm_reg_gtmTab[849:840]),
      (gtm_reg_gtmTab[859:850]), (gtm_reg_gtmTab[869:860]), (gtm_reg_gtmTab[879:870]),
      (gtm_reg_gtmTab[889:880]), (gtm_reg_gtmTab[899:890]), (gtm_reg_gtmTab[909:900]),
      (gtm_reg_gtmTab[919:910]), (gtm_reg_gtmTab[929:920]), (gtm_reg_gtmTab[939:930]),
      (gtm_reg_gtmTab[949:940]), (gtm_reg_gtmTab[959:950]), (gtm_reg_gtmTab[969:960]),
      (gtm_reg_gtmTab[979:970]), (gtm_reg_gtmTab[989:980]), (gtm_reg_gtmTab[999:990]),
      (gtm_reg_gtmTab[1009:1000]), (gtm_reg_gtmTab[1019:1010]), (gtm_reg_gtmTab[1029:1020]),
      (gtm_reg_gtmTab[1039:1030]), (gtm_reg_gtmTab[1049:1040]), (gtm_reg_gtmTab[1059:1050]),
      (gtm_reg_gtmTab[1069:1060]), (gtm_reg_gtmTab[1079:1070]), (gtm_reg_gtmTab[1089:1080]),
      (gtm_reg_gtmTab[1099:1090]), (gtm_reg_gtmTab[1109:1100]), (gtm_reg_gtmTab[1119:1110]),
      (gtm_reg_gtmTab[1129:1120]), (gtm_reg_gtmTab[1139:1130]), (gtm_reg_gtmTab[1149:1140]),
      (gtm_reg_gtmTab[1159:1150]), (gtm_reg_gtmTab[1169:1160]), (gtm_reg_gtmTab[1179:1170]),
      (gtm_reg_gtmTab[1189:1180]), (gtm_reg_gtmTab[1199:1190]), (gtm_reg_gtmTab[1209:1200]),
      (gtm_reg_gtmTab[1219:1210]), (gtm_reg_gtmTab[1229:1220]), (gtm_reg_gtmTab[1239:1230]),
      (gtm_reg_gtmTab[1249:1240]), (gtm_reg_gtmTab[1259:1250]), (gtm_reg_gtmTab[1269:1260]),
      (gtm_reg_gtmTab[1279:1270]), gtm_cal_1_operator_7_false_acc_nl);
  assign seed_4_lpi_1_dfm_4_mx0 = MUX_v_5_2_2((z_out_6[4:0]), seed_4_lpi_1_dfm_1,
      or_dcpl_8);
  assign seed_and_2_cse = ~(or_dcpl_9 | exitL_exit_gtm_row_sva);
  assign seed_and_3_cse = or_dcpl_9 & (~ exitL_exit_gtm_row_sva);
  assign seed_1_lpi_1_dfm_mx0 = MUX1HOT_v_5_3_2((z_out_6[4:0]), seed_1_lpi_1_dfm_1,
      5'b01000, {seed_and_2_cse , seed_and_3_cse , exitL_exit_gtm_row_sva});
  assign seed_0_lpi_1_dfm_mx0 = MUX1HOT_v_5_3_2((z_out_4[4:0]), seed_0_lpi_1_dfm_1,
      5'b01000, {seed_and_2_cse , seed_and_3_cse , exitL_exit_gtm_row_sva});
  assign or_tmp_1 = exit_gtm_row_lpi_1_dfm | exitL_exit_gtm_row_sva;
  assign and_dcpl_13 = ~(gtm_col_not_mdf_sva_1 | gtm_row_asn_sft_lpi_1_dfm_1);
  assign and_dcpl_16 = and_dcpl_13 & main_stage_0_2 & (~ gtm_reg_eb);
  assign or_dcpl_8 = gtm_row_gtm_row_or_1_tmp | (~ gtm_row_y_lpi_1_dfm_1_0);
  assign or_dcpl_9 = gtm_row_gtm_row_or_1_tmp | gtm_row_y_lpi_1_dfm_1_0;
  assign nl_gtm_row_acc_2_nl = ({1'b1 , gtm_row_y_lpi_1_dfm_3}) + conv_u2u_13_14(~
      top_reg_frameHeight) + 14'b00000000000001;
  assign gtm_row_acc_2_nl = nl_gtm_row_acc_2_nl[13:0];
  assign gtm_row_acc_2_itm_13_1 = readslicef_14_1_13(gtm_row_acc_2_nl);
  assign and_dcpl_42 = (src_rsci_idat_mxwt[41:35]==7'b1111111);
  assign and_dcpl_48 = (src_rsci_idat_mxwt[13:7]==7'b1111111);
  assign and_dcpl_54 = (src_rsci_idat_mxwt[27:21]==7'b1111111);
  assign gtm_cal_if_3_nor_ssc = ~((gtm_cal_if_3_acc_psp_sva_1[0]) | gtm_row_y_lpi_1_dfm_1_0);
  assign gtm_cal_if_3_and_7_ssc = gtm_row_y_lpi_1_dfm_1_0 & (~ (gtm_cal_if_3_acc_psp_sva_1[0]));
  assign gtm_cal_if_3_and_8_ssc = (gtm_cal_if_3_acc_psp_sva_1[0]) & (~ gtm_row_y_lpi_1_dfm_1_0);
  assign gtm_cal_if_3_and_10_ssc = gtm_row_y_lpi_1_dfm_1_0 & gtm_reg_m_bDitheringEnable
      & (gtm_cal_if_3_acc_psp_sva_1[0]);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      reg_dst_rsci_oswt_cse <= 1'b0;
      reg_src_rsci_oswt_cse <= 1'b0;
      gtm_col_x_lpi_1_dfm_2 <= 13'b0000000000000;
      exit_gtm_row_lpi_1_dfm <= 1'b0;
      exitL_exit_gtm_row_sva <= 1'b1;
      gtm_row_y_lpi_1_dfm_2 <= 13'b0000000000000;
      gtm_cal_if_3_mux_itm_1 <= 5'b00000;
      gtm_cal_2_if_3_gtm_cal_if_3_mux_itm_1 <= 5'b00000;
      seed_4_lpi_1_dfm_1 <= 5'b00000;
      gtm_cal_if_3_acc_psp_sva_1 <= 2'b00;
      gtm_row_y_lpi_1_dfm_1_0 <= 1'b0;
      seed_3_lpi_1_dfm_1 <= 5'b00000;
      gtm_col_not_mdf_sva_1 <= 1'b0;
      main_stage_0_2 <= 1'b0;
      seed_1_lpi_1_dfm_1 <= 5'b00000;
      seed_0_lpi_1_dfm_1 <= 5'b00000;
    end
    else if ( core_wen ) begin
      reg_dst_rsci_oswt_cse <= ~(gtm_row_gtm_row_or_1_tmp | (~ main_stage_0_2));
      reg_src_rsci_oswt_cse <= mux_12_nl & gtm_col_acc_2_itm_13_1;
      gtm_col_x_lpi_1_dfm_2 <= z_out_3;
      exit_gtm_row_lpi_1_dfm <= exit_gtm_row_lpi_1_dfm_1;
      exitL_exit_gtm_row_sva <= exit_gtm_row_lpi_1_dfm_1;
      gtm_row_y_lpi_1_dfm_2 <= MUX_v_13_2_2(z_out_3, gtm_row_y_lpi_1_dfm_3, or_18_nl);
      gtm_cal_if_3_mux_itm_1 <= MUX_v_5_4_2x1x2(seed_0_lpi_1_dfm_mx0, seed_3_lpi_1_dfm_1_mx0,
          signext_2_1(gtm_row_y_lpi_1_dfm_3[0]));
      gtm_cal_2_if_3_gtm_cal_if_3_mux_itm_1 <= MUX_v_5_2_2(seed_4_lpi_1_dfm_4_mx0,
          seed_1_lpi_1_dfm_mx0, or_19_nl);
      seed_4_lpi_1_dfm_1 <= MUX_v_5_2_2(seed_4_lpi_1_dfm_4_mx0, 5'b01000, exitL_exit_gtm_row_sva);
      gtm_cal_if_3_acc_psp_sva_1 <= nl_gtm_cal_if_3_acc_psp_sva_1[1:0];
      gtm_row_y_lpi_1_dfm_1_0 <= gtm_row_y_lpi_1_dfm_3[0];
      seed_3_lpi_1_dfm_1 <= seed_3_lpi_1_dfm_1_mx0;
      gtm_col_not_mdf_sva_1 <= ~ gtm_col_acc_2_itm_13_1;
      main_stage_0_2 <= 1'b1;
      seed_1_lpi_1_dfm_1 <= seed_1_lpi_1_dfm_mx0;
      seed_0_lpi_1_dfm_1 <= seed_0_lpi_1_dfm_mx0;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dst_rsci_idat_41_28 <= 14'b00000000000000;
      dst_rsci_idat_13_0 <= 14'b00000000000000;
      dst_rsci_idat_27_14 <= 14'b00000000000000;
    end
    else if ( gtm_col_and_cse ) begin
      dst_rsci_idat_41_28 <= MUX_v_14_2_2(gtm_clip_gtm_clip_gtm_clip_nor_2_nl, (src_rsci_idat_mxwt[41:28]),
          and_dcpl_16);
      dst_rsci_idat_13_0 <= MUX_v_14_2_2(gtm_clip_gtm_clip_gtm_clip_nor_1_nl, (src_rsci_idat_mxwt[13:0]),
          and_dcpl_16);
      dst_rsci_idat_27_14 <= MUX_v_14_2_2(gtm_clip_gtm_clip_gtm_clip_nor_nl, (src_rsci_idat_mxwt[27:14]),
          and_dcpl_16);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      seed_5_lpi_1_dfm_1 <= 5'b00000;
    end
    else if ( core_wen & (((gtm_cal_if_3_acc_psp_sva_1[1]) & (~ gtm_row_gtm_row_or_1_tmp))
        | exitL_exit_gtm_row_sva) ) begin
      seed_5_lpi_1_dfm_1 <= gtm_row_gtm_row_gtm_row_mux_cse;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      seed_2_lpi_1_dfm_1 <= 5'b00000;
    end
    else if ( core_wen & (((gtm_cal_if_3_acc_psp_sva_1[0]) & (~ gtm_row_gtm_row_or_1_tmp))
        | exitL_exit_gtm_row_sva) ) begin
      seed_2_lpi_1_dfm_1 <= gtm_row_gtm_row_gtm_row_mux_cse;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      gtm_row_asn_sft_lpi_1_dfm_1 <= 1'b0;
    end
    else if ( core_wen & (and_19_cse | or_tmp_1) ) begin
      gtm_row_asn_sft_lpi_1_dfm_1 <= exit_gtm_row_lpi_1_dfm_1;
    end
  end
  assign nand_nl = ~((~ gtm_row_acc_2_itm_13_1) & or_tmp_1);
  assign or_nl = gtm_row_acc_2_itm_13_1 | (~(gtm_row_asn_sft_lpi_1_dfm_1 | gtm_col_not_mdf_sva_1
      | exit_gtm_row_lpi_1_dfm | exitL_exit_gtm_row_sva));
  assign mux_12_nl = MUX_s_1_2_2(nand_nl, or_nl, main_stage_0_2);
  assign or_18_nl = (~(or_tmp_1 | main_stage_0_2)) | gtm_col_acc_2_itm_13_1;
  assign or_19_nl = exitL_exit_gtm_row_sva | (~ (gtm_row_y_lpi_1_dfm_2[0]));
  assign nl_gtm_cal_if_3_acc_psp_sva_1  = conv_u2u_1_2(gtm_row_y_lpi_1_dfm_3[0])
      + 2'b01;
  assign gtm_clip_nor_2_nl = ~(MUX_v_14_2_2((temp3_1_lpi_1_dfm_mx0[13:0]), 14'b11111111111111,
      (temp3_1_lpi_1_dfm_mx0[14])));
  assign gtm_clip_gtm_clip_gtm_clip_nor_2_nl = ~(MUX_v_14_2_2(gtm_clip_nor_2_nl,
      14'b11111111111111, (temp3_1_lpi_1_dfm_mx0[15])));
  assign gtm_clip_nor_1_nl = ~(MUX_v_14_2_2((temp3_lpi_1_dfm_1[13:0]), 14'b11111111111111,
      (temp3_lpi_1_dfm_1[14])));
  assign gtm_clip_gtm_clip_gtm_clip_nor_1_nl = ~(MUX_v_14_2_2(gtm_clip_nor_1_nl,
      14'b11111111111111, (temp3_lpi_1_dfm_1[15])));
  assign gtm_clip_nor_nl = ~(MUX_v_14_2_2((temp3_2_lpi_1_dfm_1[13:0]), 14'b11111111111111,
      (temp3_2_lpi_1_dfm_1[14])));
  assign gtm_clip_gtm_clip_gtm_clip_nor_nl = ~(MUX_v_14_2_2(gtm_clip_nor_nl, 14'b11111111111111,
      (temp3_2_lpi_1_dfm_1[15])));
  assign operator_33_true_mux_6_nl = MUX_v_17_2_2((gtm_cal_if_2_mul_ncse_1_sva_1[21:5]),
      (gtm_cal_1_operator_22_true_acc_itm_21_4_1[17:1]), and_dcpl_42);
  assign operator_33_true_mux_7_nl = MUX_s_1_2_2((gtm_cal_if_2_mul_ncse_1_sva_1[4]),
      (gtm_cal_1_operator_22_true_acc_itm_21_4_1[0]), and_dcpl_42);
  assign nl_z_out = operator_33_true_mux_6_nl + conv_u2u_1_17(operator_33_true_mux_7_nl);
  assign z_out = nl_z_out[16:0];
  assign operator_33_true_mux_8_nl = MUX_v_17_2_2((gtm_cal_if_2_mul_ncse_sva_1[21:5]),
      (gtm_cal_3_operator_22_true_acc_itm_21_4_1[17:1]), and_dcpl_48);
  assign operator_33_true_mux_9_nl = MUX_s_1_2_2((gtm_cal_if_2_mul_ncse_sva_1[4]),
      (gtm_cal_3_operator_22_true_acc_itm_21_4_1[0]), and_dcpl_48);
  assign nl_z_out_1 = operator_33_true_mux_8_nl + conv_u2u_1_17(operator_33_true_mux_9_nl);
  assign z_out_1 = nl_z_out_1[16:0];
  assign operator_33_true_mux_10_nl = MUX_v_17_2_2((gtm_cal_if_2_mul_ncse_2_sva_1[21:5]),
      (gtm_cal_2_operator_22_true_acc_itm_21_4_1[17:1]), and_dcpl_54);
  assign operator_33_true_mux_11_nl = MUX_s_1_2_2((gtm_cal_if_2_mul_ncse_2_sva_1[4]),
      (gtm_cal_2_operator_22_true_acc_itm_21_4_1[0]), and_dcpl_54);
  assign nl_z_out_2 = operator_33_true_mux_10_nl + conv_u2u_1_17(operator_33_true_mux_11_nl);
  assign z_out_2 = nl_z_out_2[16:0];
  assign gtm_col_mux_3_nl = MUX_v_13_2_2(gtm_row_y_lpi_1_dfm_3, gtm_col_x_lpi_1_dfm_3,
      gtm_col_acc_2_itm_13_1);
  assign nl_z_out_3 = gtm_col_mux_3_nl + 13'b0000000000001;
  assign z_out_3 = nl_z_out_3[12:0];
  assign nl_gtm_cal_if_3_acc_10_nl = conv_u2u_14_15({operator_10_false_slc_gtm_reg_gtmTab_10_9_0_sdt_1_sva_1
      , ({{3{gtm_cal_unequal_tmp_7}}, gtm_cal_unequal_tmp_7})}) + conv_u2u_3_15(gtm_cal_if_3_mux_itm_1[4:2]);
  assign gtm_cal_if_3_acc_10_nl = nl_gtm_cal_if_3_acc_10_nl[14:0];
  assign gtm_cal_if_3_mux_4_nl = MUX_v_17_2_2(({3'b000 , operator_10_false_slc_gtm_reg_gtmTab_10_9_0_sdt_1_sva_1
      , ({{3{gtm_cal_unequal_tmp_7}}, gtm_cal_unequal_tmp_7})}), ({gtm_cal_if_3_acc_10_nl
      , (gtm_cal_if_3_mux_itm_1[1:0])}), gtm_reg_m_bDitheringEnable);
  assign gtm_cal_if_3_and_12_nl = (z_out[1]) & (~ gtm_reg_m_bDitheringEnable);
  assign gtm_cal_if_3_mux_5_nl = MUX_v_16_2_2((signext_16_15(z_out[16:2])), (z_out[15:0]),
      gtm_reg_m_bDitheringEnable);
  assign nl_acc_4_nl = conv_u2u_18_19({gtm_cal_if_3_mux_4_nl , gtm_cal_if_3_and_12_nl})
      + conv_s2u_18_19({(z_out[16]) , gtm_cal_if_3_mux_5_nl , 1'b1});
  assign acc_4_nl = nl_acc_4_nl[18:0];
  assign z_out_4 = readslicef_19_18_1(acc_4_nl);
  assign gtm_cal_if_3_gtm_cal_if_3_mux1h_3_nl = MUX1HOT_v_3_4_2((seed_4_lpi_1_dfm_1[4:2]),
      (seed_5_lpi_1_dfm_1[4:2]), (seed_2_lpi_1_dfm_1[4:2]), (z_out_4[4:2]), {gtm_cal_if_3_nor_ssc
      , gtm_cal_if_3_and_7_ssc , gtm_cal_if_3_and_8_ssc , gtm_cal_if_3_and_10_ssc});
  assign nl_gtm_cal_if_3_acc_11_nl = conv_u2u_14_15({operator_10_false_slc_gtm_reg_gtmTab_10_9_0_sdt_sva_1
      , ({{3{gtm_cal_unequal_tmp_9}}, gtm_cal_unequal_tmp_9})}) + conv_u2u_3_15(gtm_cal_if_3_gtm_cal_if_3_mux1h_3_nl);
  assign gtm_cal_if_3_acc_11_nl = nl_gtm_cal_if_3_acc_11_nl[14:0];
  assign gtm_cal_if_3_gtm_cal_if_3_mux1h_4_nl = MUX1HOT_s_1_4_2((seed_4_lpi_1_dfm_1[1]),
      (seed_5_lpi_1_dfm_1[1]), (seed_2_lpi_1_dfm_1[1]), (z_out_4[1]), {gtm_cal_if_3_nor_ssc
      , gtm_cal_if_3_and_7_ssc , gtm_cal_if_3_and_8_ssc , gtm_cal_if_3_and_10_ssc});
  assign gtm_cal_if_3_gtm_cal_if_3_mux1h_5_nl = MUX1HOT_s_1_4_2((seed_4_lpi_1_dfm_1[0]),
      (seed_5_lpi_1_dfm_1[0]), (seed_2_lpi_1_dfm_1[0]), (z_out_4[0]), {gtm_cal_if_3_nor_ssc
      , gtm_cal_if_3_and_7_ssc , gtm_cal_if_3_and_8_ssc , gtm_cal_if_3_and_10_ssc});
  assign operator_33_true_1_mux_6_nl = MUX_v_17_2_2(({3'b000 , operator_10_false_slc_gtm_reg_gtmTab_10_9_0_sdt_sva_1
      , ({{3{gtm_cal_unequal_tmp_9}}, gtm_cal_unequal_tmp_9})}), ({gtm_cal_if_3_acc_11_nl
      , gtm_cal_if_3_gtm_cal_if_3_mux1h_4_nl , gtm_cal_if_3_gtm_cal_if_3_mux1h_5_nl}),
      gtm_reg_m_bDitheringEnable);
  assign operator_33_true_1_and_2_nl = (z_out_1[1]) & (~ gtm_reg_m_bDitheringEnable);
  assign operator_33_true_1_mux_7_nl = MUX_v_16_2_2((signext_16_15(z_out_1[16:2])),
      (z_out_1[15:0]), gtm_reg_m_bDitheringEnable);
  assign nl_acc_5_nl = conv_u2u_18_19({operator_33_true_1_mux_6_nl , operator_33_true_1_and_2_nl})
      + conv_s2u_18_19({(z_out_1[16]) , operator_33_true_1_mux_7_nl , 1'b1});
  assign acc_5_nl = nl_acc_5_nl[18:0];
  assign z_out_5 = readslicef_19_18_1(acc_5_nl);
  assign nl_gtm_cal_if_3_acc_12_nl = conv_u2u_14_15({operator_10_false_slc_gtm_reg_gtmTab_10_9_0_sdt_2_sva_1
      , ({{3{gtm_cal_unequal_tmp_8}}, gtm_cal_unequal_tmp_8})}) + conv_u2u_3_15(gtm_cal_2_if_3_gtm_cal_if_3_mux_itm_1[4:2]);
  assign gtm_cal_if_3_acc_12_nl = nl_gtm_cal_if_3_acc_12_nl[14:0];
  assign operator_33_true_1_mux_8_nl = MUX_v_17_2_2(({3'b000 , operator_10_false_slc_gtm_reg_gtmTab_10_9_0_sdt_2_sva_1
      , ({{3{gtm_cal_unequal_tmp_8}}, gtm_cal_unequal_tmp_8})}), ({gtm_cal_if_3_acc_12_nl
      , (gtm_cal_2_if_3_gtm_cal_if_3_mux_itm_1[1:0])}), gtm_reg_m_bDitheringEnable);
  assign operator_33_true_1_and_3_nl = (z_out_2[1]) & (~ gtm_reg_m_bDitheringEnable);
  assign operator_33_true_1_mux_9_nl = MUX_v_16_2_2((signext_16_15(z_out_2[16:2])),
      (z_out_2[15:0]), gtm_reg_m_bDitheringEnable);
  assign nl_acc_6_nl = conv_u2u_18_19({operator_33_true_1_mux_8_nl , operator_33_true_1_and_3_nl})
      + conv_s2u_18_19({(z_out_2[16]) , operator_33_true_1_mux_9_nl , 1'b1});
  assign acc_6_nl = nl_acc_6_nl[18:0];
  assign z_out_6 = readslicef_19_18_1(acc_6_nl);

  function automatic [0:0] MUX1HOT_s_1_4_2;
    input [0:0] input_3;
    input [0:0] input_2;
    input [0:0] input_1;
    input [0:0] input_0;
    input [3:0] sel;
    reg [0:0] result;
  begin
    result = input_0 & {1{sel[0]}};
    result = result | ( input_1 & {1{sel[1]}});
    result = result | ( input_2 & {1{sel[2]}});
    result = result | ( input_3 & {1{sel[3]}});
    MUX1HOT_s_1_4_2 = result;
  end
  endfunction


  function automatic [2:0] MUX1HOT_v_3_4_2;
    input [2:0] input_3;
    input [2:0] input_2;
    input [2:0] input_1;
    input [2:0] input_0;
    input [3:0] sel;
    reg [2:0] result;
  begin
    result = input_0 & {3{sel[0]}};
    result = result | ( input_1 & {3{sel[1]}});
    result = result | ( input_2 & {3{sel[2]}});
    result = result | ( input_3 & {3{sel[3]}});
    MUX1HOT_v_3_4_2 = result;
  end
  endfunction


  function automatic [4:0] MUX1HOT_v_5_3_2;
    input [4:0] input_2;
    input [4:0] input_1;
    input [4:0] input_0;
    input [2:0] sel;
    reg [4:0] result;
  begin
    result = input_0 & {5{sel[0]}};
    result = result | ( input_1 & {5{sel[1]}});
    result = result | ( input_2 & {5{sel[2]}});
    MUX1HOT_v_5_3_2 = result;
  end
  endfunction


  function automatic [0:0] MUX_s_1_2_2;
    input [0:0] input_0;
    input [0:0] input_1;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [9:0] MUX_v_10_128_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [9:0] input_2;
    input [9:0] input_3;
    input [9:0] input_4;
    input [9:0] input_5;
    input [9:0] input_6;
    input [9:0] input_7;
    input [9:0] input_8;
    input [9:0] input_9;
    input [9:0] input_10;
    input [9:0] input_11;
    input [9:0] input_12;
    input [9:0] input_13;
    input [9:0] input_14;
    input [9:0] input_15;
    input [9:0] input_16;
    input [9:0] input_17;
    input [9:0] input_18;
    input [9:0] input_19;
    input [9:0] input_20;
    input [9:0] input_21;
    input [9:0] input_22;
    input [9:0] input_23;
    input [9:0] input_24;
    input [9:0] input_25;
    input [9:0] input_26;
    input [9:0] input_27;
    input [9:0] input_28;
    input [9:0] input_29;
    input [9:0] input_30;
    input [9:0] input_31;
    input [9:0] input_32;
    input [9:0] input_33;
    input [9:0] input_34;
    input [9:0] input_35;
    input [9:0] input_36;
    input [9:0] input_37;
    input [9:0] input_38;
    input [9:0] input_39;
    input [9:0] input_40;
    input [9:0] input_41;
    input [9:0] input_42;
    input [9:0] input_43;
    input [9:0] input_44;
    input [9:0] input_45;
    input [9:0] input_46;
    input [9:0] input_47;
    input [9:0] input_48;
    input [9:0] input_49;
    input [9:0] input_50;
    input [9:0] input_51;
    input [9:0] input_52;
    input [9:0] input_53;
    input [9:0] input_54;
    input [9:0] input_55;
    input [9:0] input_56;
    input [9:0] input_57;
    input [9:0] input_58;
    input [9:0] input_59;
    input [9:0] input_60;
    input [9:0] input_61;
    input [9:0] input_62;
    input [9:0] input_63;
    input [9:0] input_64;
    input [9:0] input_65;
    input [9:0] input_66;
    input [9:0] input_67;
    input [9:0] input_68;
    input [9:0] input_69;
    input [9:0] input_70;
    input [9:0] input_71;
    input [9:0] input_72;
    input [9:0] input_73;
    input [9:0] input_74;
    input [9:0] input_75;
    input [9:0] input_76;
    input [9:0] input_77;
    input [9:0] input_78;
    input [9:0] input_79;
    input [9:0] input_80;
    input [9:0] input_81;
    input [9:0] input_82;
    input [9:0] input_83;
    input [9:0] input_84;
    input [9:0] input_85;
    input [9:0] input_86;
    input [9:0] input_87;
    input [9:0] input_88;
    input [9:0] input_89;
    input [9:0] input_90;
    input [9:0] input_91;
    input [9:0] input_92;
    input [9:0] input_93;
    input [9:0] input_94;
    input [9:0] input_95;
    input [9:0] input_96;
    input [9:0] input_97;
    input [9:0] input_98;
    input [9:0] input_99;
    input [9:0] input_100;
    input [9:0] input_101;
    input [9:0] input_102;
    input [9:0] input_103;
    input [9:0] input_104;
    input [9:0] input_105;
    input [9:0] input_106;
    input [9:0] input_107;
    input [9:0] input_108;
    input [9:0] input_109;
    input [9:0] input_110;
    input [9:0] input_111;
    input [9:0] input_112;
    input [9:0] input_113;
    input [9:0] input_114;
    input [9:0] input_115;
    input [9:0] input_116;
    input [9:0] input_117;
    input [9:0] input_118;
    input [9:0] input_119;
    input [9:0] input_120;
    input [9:0] input_121;
    input [9:0] input_122;
    input [9:0] input_123;
    input [9:0] input_124;
    input [9:0] input_125;
    input [9:0] input_126;
    input [9:0] input_127;
    input [6:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      7'b0000000 : begin
        result = input_0;
      end
      7'b0000001 : begin
        result = input_1;
      end
      7'b0000010 : begin
        result = input_2;
      end
      7'b0000011 : begin
        result = input_3;
      end
      7'b0000100 : begin
        result = input_4;
      end
      7'b0000101 : begin
        result = input_5;
      end
      7'b0000110 : begin
        result = input_6;
      end
      7'b0000111 : begin
        result = input_7;
      end
      7'b0001000 : begin
        result = input_8;
      end
      7'b0001001 : begin
        result = input_9;
      end
      7'b0001010 : begin
        result = input_10;
      end
      7'b0001011 : begin
        result = input_11;
      end
      7'b0001100 : begin
        result = input_12;
      end
      7'b0001101 : begin
        result = input_13;
      end
      7'b0001110 : begin
        result = input_14;
      end
      7'b0001111 : begin
        result = input_15;
      end
      7'b0010000 : begin
        result = input_16;
      end
      7'b0010001 : begin
        result = input_17;
      end
      7'b0010010 : begin
        result = input_18;
      end
      7'b0010011 : begin
        result = input_19;
      end
      7'b0010100 : begin
        result = input_20;
      end
      7'b0010101 : begin
        result = input_21;
      end
      7'b0010110 : begin
        result = input_22;
      end
      7'b0010111 : begin
        result = input_23;
      end
      7'b0011000 : begin
        result = input_24;
      end
      7'b0011001 : begin
        result = input_25;
      end
      7'b0011010 : begin
        result = input_26;
      end
      7'b0011011 : begin
        result = input_27;
      end
      7'b0011100 : begin
        result = input_28;
      end
      7'b0011101 : begin
        result = input_29;
      end
      7'b0011110 : begin
        result = input_30;
      end
      7'b0011111 : begin
        result = input_31;
      end
      7'b0100000 : begin
        result = input_32;
      end
      7'b0100001 : begin
        result = input_33;
      end
      7'b0100010 : begin
        result = input_34;
      end
      7'b0100011 : begin
        result = input_35;
      end
      7'b0100100 : begin
        result = input_36;
      end
      7'b0100101 : begin
        result = input_37;
      end
      7'b0100110 : begin
        result = input_38;
      end
      7'b0100111 : begin
        result = input_39;
      end
      7'b0101000 : begin
        result = input_40;
      end
      7'b0101001 : begin
        result = input_41;
      end
      7'b0101010 : begin
        result = input_42;
      end
      7'b0101011 : begin
        result = input_43;
      end
      7'b0101100 : begin
        result = input_44;
      end
      7'b0101101 : begin
        result = input_45;
      end
      7'b0101110 : begin
        result = input_46;
      end
      7'b0101111 : begin
        result = input_47;
      end
      7'b0110000 : begin
        result = input_48;
      end
      7'b0110001 : begin
        result = input_49;
      end
      7'b0110010 : begin
        result = input_50;
      end
      7'b0110011 : begin
        result = input_51;
      end
      7'b0110100 : begin
        result = input_52;
      end
      7'b0110101 : begin
        result = input_53;
      end
      7'b0110110 : begin
        result = input_54;
      end
      7'b0110111 : begin
        result = input_55;
      end
      7'b0111000 : begin
        result = input_56;
      end
      7'b0111001 : begin
        result = input_57;
      end
      7'b0111010 : begin
        result = input_58;
      end
      7'b0111011 : begin
        result = input_59;
      end
      7'b0111100 : begin
        result = input_60;
      end
      7'b0111101 : begin
        result = input_61;
      end
      7'b0111110 : begin
        result = input_62;
      end
      7'b0111111 : begin
        result = input_63;
      end
      7'b1000000 : begin
        result = input_64;
      end
      7'b1000001 : begin
        result = input_65;
      end
      7'b1000010 : begin
        result = input_66;
      end
      7'b1000011 : begin
        result = input_67;
      end
      7'b1000100 : begin
        result = input_68;
      end
      7'b1000101 : begin
        result = input_69;
      end
      7'b1000110 : begin
        result = input_70;
      end
      7'b1000111 : begin
        result = input_71;
      end
      7'b1001000 : begin
        result = input_72;
      end
      7'b1001001 : begin
        result = input_73;
      end
      7'b1001010 : begin
        result = input_74;
      end
      7'b1001011 : begin
        result = input_75;
      end
      7'b1001100 : begin
        result = input_76;
      end
      7'b1001101 : begin
        result = input_77;
      end
      7'b1001110 : begin
        result = input_78;
      end
      7'b1001111 : begin
        result = input_79;
      end
      7'b1010000 : begin
        result = input_80;
      end
      7'b1010001 : begin
        result = input_81;
      end
      7'b1010010 : begin
        result = input_82;
      end
      7'b1010011 : begin
        result = input_83;
      end
      7'b1010100 : begin
        result = input_84;
      end
      7'b1010101 : begin
        result = input_85;
      end
      7'b1010110 : begin
        result = input_86;
      end
      7'b1010111 : begin
        result = input_87;
      end
      7'b1011000 : begin
        result = input_88;
      end
      7'b1011001 : begin
        result = input_89;
      end
      7'b1011010 : begin
        result = input_90;
      end
      7'b1011011 : begin
        result = input_91;
      end
      7'b1011100 : begin
        result = input_92;
      end
      7'b1011101 : begin
        result = input_93;
      end
      7'b1011110 : begin
        result = input_94;
      end
      7'b1011111 : begin
        result = input_95;
      end
      7'b1100000 : begin
        result = input_96;
      end
      7'b1100001 : begin
        result = input_97;
      end
      7'b1100010 : begin
        result = input_98;
      end
      7'b1100011 : begin
        result = input_99;
      end
      7'b1100100 : begin
        result = input_100;
      end
      7'b1100101 : begin
        result = input_101;
      end
      7'b1100110 : begin
        result = input_102;
      end
      7'b1100111 : begin
        result = input_103;
      end
      7'b1101000 : begin
        result = input_104;
      end
      7'b1101001 : begin
        result = input_105;
      end
      7'b1101010 : begin
        result = input_106;
      end
      7'b1101011 : begin
        result = input_107;
      end
      7'b1101100 : begin
        result = input_108;
      end
      7'b1101101 : begin
        result = input_109;
      end
      7'b1101110 : begin
        result = input_110;
      end
      7'b1101111 : begin
        result = input_111;
      end
      7'b1110000 : begin
        result = input_112;
      end
      7'b1110001 : begin
        result = input_113;
      end
      7'b1110010 : begin
        result = input_114;
      end
      7'b1110011 : begin
        result = input_115;
      end
      7'b1110100 : begin
        result = input_116;
      end
      7'b1110101 : begin
        result = input_117;
      end
      7'b1110110 : begin
        result = input_118;
      end
      7'b1110111 : begin
        result = input_119;
      end
      7'b1111000 : begin
        result = input_120;
      end
      7'b1111001 : begin
        result = input_121;
      end
      7'b1111010 : begin
        result = input_122;
      end
      7'b1111011 : begin
        result = input_123;
      end
      7'b1111100 : begin
        result = input_124;
      end
      7'b1111101 : begin
        result = input_125;
      end
      7'b1111110 : begin
        result = input_126;
      end
      default : begin
        result = input_127;
      end
    endcase
    MUX_v_10_128_2 = result;
  end
  endfunction


  function automatic [12:0] MUX_v_13_2_2;
    input [12:0] input_0;
    input [12:0] input_1;
    input [0:0] sel;
    reg [12:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_13_2_2 = result;
  end
  endfunction


  function automatic [13:0] MUX_v_14_2_2;
    input [13:0] input_0;
    input [13:0] input_1;
    input [0:0] sel;
    reg [13:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_14_2_2 = result;
  end
  endfunction


  function automatic [15:0] MUX_v_16_2_2;
    input [15:0] input_0;
    input [15:0] input_1;
    input [0:0] sel;
    reg [15:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_16_2_2 = result;
  end
  endfunction


  function automatic [16:0] MUX_v_17_2_2;
    input [16:0] input_0;
    input [16:0] input_1;
    input [0:0] sel;
    reg [16:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_17_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input [0:0] sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_4_2x1x2;
    input [4:0] input_0;
    input [4:0] input_3;
    input [1:0] sel;
    reg [4:0] result;
  begin
    case (sel)
      2'b00 : begin
        result = input_0;
      end
      default : begin
        result = input_3;
      end
    endcase
    MUX_v_5_4_2x1x2 = result;
  end
  endfunction


  function automatic [0:0] readslicef_14_1_13;
    input [13:0] vector;
    reg [13:0] tmp;
  begin
    tmp = vector >> 13;
    readslicef_14_1_13 = tmp[0:0];
  end
  endfunction


  function automatic [17:0] readslicef_19_18_1;
    input [18:0] vector;
    reg [18:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_19_18_1 = tmp[17:0];
  end
  endfunction


  function automatic [17:0] readslicef_22_18_4;
    input [21:0] vector;
    reg [21:0] tmp;
  begin
    tmp = vector >> 4;
    readslicef_22_18_4 = tmp[17:0];
  end
  endfunction


  function automatic [15:0] signext_16_15;
    input [14:0] vector;
  begin
    signext_16_15= {{1{vector[14]}}, vector};
  end
  endfunction


  function automatic [1:0] signext_2_1;
    input [0:0] vector;
  begin
    signext_2_1= {{1{vector[0]}}, vector};
  end
  endfunction


  function automatic [2:0] signext_3_1;
    input [0:0] vector;
  begin
    signext_3_1= {{2{vector[0]}}, vector};
  end
  endfunction


  function automatic [3:0] signext_4_1;
    input [0:0] vector;
  begin
    signext_4_1= {{3{vector[0]}}, vector};
  end
  endfunction


  function automatic [21:0] conv_s2u_15_22 ;
    input [14:0]  vector ;
  begin
    conv_s2u_15_22 = {{7{vector[14]}}, vector};
  end
  endfunction


  function automatic [18:0] conv_s2u_18_19 ;
    input [17:0]  vector ;
  begin
    conv_s2u_18_19 = {vector[17], vector};
  end
  endfunction


  function automatic [7:0] conv_u2s_7_8 ;
    input [6:0]  vector ;
  begin
    conv_u2s_7_8 =  {1'b0, vector};
  end
  endfunction


  function automatic [14:0] conv_u2s_14_15 ;
    input [13:0]  vector ;
  begin
    conv_u2s_14_15 =  {1'b0, vector};
  end
  endfunction


  function automatic [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction


  function automatic [16:0] conv_u2u_1_17 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_17 = {{16{1'b0}}, vector};
  end
  endfunction


  function automatic [14:0] conv_u2u_3_15 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_15 = {{12{1'b0}}, vector};
  end
  endfunction


  function automatic [13:0] conv_u2u_13_14 ;
    input [12:0]  vector ;
  begin
    conv_u2u_13_14 = {1'b0, vector};
  end
  endfunction


  function automatic [14:0] conv_u2u_14_15 ;
    input [13:0]  vector ;
  begin
    conv_u2u_14_15 = {1'b0, vector};
  end
  endfunction


  function automatic [18:0] conv_u2u_18_19 ;
    input [17:0]  vector ;
  begin
    conv_u2u_18_19 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    csc_core
// ------------------------------------------------------------------


module csc_core (
  clk, arst_n, top_reg_frameWidth, top_reg_frameHeight, csc_reg_m_nEb, csc_reg_coeff,
      src_rsc_dat, src_rsc_vld, src_rsc_rdy, dst_rsc_dat, dst_rsc_vld, dst_rsc_rdy
);
  input clk;
  input arst_n;
  input [12:0] top_reg_frameWidth;
  input [12:0] top_reg_frameHeight;
  input csc_reg_m_nEb;
  input [131:0] csc_reg_coeff;
  input [41:0] src_rsc_dat;
  input src_rsc_vld;
  output src_rsc_rdy;
  output [29:0] dst_rsc_dat;
  output dst_rsc_vld;
  input dst_rsc_rdy;


  // Interconnect Declarations
  wire core_wen;
  wire src_rsci_wen_comp;
  wire [35:0] src_rsci_idat_mxwt;
  wire dst_rsci_wen_comp;
  reg [9:0] dst_rsci_idat_29_20;
  reg [9:0] dst_rsci_idat_19_10;
  reg [9:0] dst_rsci_idat_9_0;
  wire csc_row_csc_row_or_1_tmp;
  wire or_tmp_1;
  wire and_dcpl_5;
  wire and_dcpl_8;
  wire not_tmp_16;
  wire or_dcpl_9;
  wire exitL_exitL_exit_csc_col_lpi_1_dfm_1;
  reg exit_csc_row_lpi_1_dfm;
  reg exitL_exit_csc_row_sva;
  wire [12:0] tmp_w_2_12_0_sva_1;
  wire [13:0] nl_tmp_w_2_12_0_sva_1;
  reg csc_cal1_acc_psp_sva_1_0;
  wire [12:0] tmp_w_1_12_0_sva_1;
  wire [13:0] nl_tmp_w_1_12_0_sva_1;
  wire [12:0] tmp_w_0_12_0_sva_1;
  wire [13:0] nl_tmp_w_0_12_0_sva_1;
  reg [12:0] csc_row_y_lpi_1_dfm_2;
  wire csc_row_asn_sft_lpi_1_dfm_mx0;
  reg main_stage_0_2;
  reg csc_row_asn_sft_lpi_1_dfm_1;
  reg csc_col_not_mdf_sva_1;
  reg csc_row_and_8_itm_1;
  reg csc_row_and_6_itm_1;
  wire [12:0] csc_cal2_ac_int_cctor_sva_1;
  wire [14:0] nl_csc_cal2_ac_int_cctor_sva_1;
  wire [12:0] csc_cal2_ac_int_cctor_2_sva_1;
  wire [14:0] nl_csc_cal2_ac_int_cctor_2_sva_1;
  wire [12:0] csc_cal2_ac_int_cctor_1_sva_1;
  wire [14:0] nl_csc_cal2_ac_int_cctor_1_sva_1;
  wire [12:0] csc_row_y_lpi_1_dfm_3;
  reg reg_dst_rsci_oswt_cse;
  wire csc_col_and_cse;
  reg reg_src_rsci_oswt_cse;
  reg reg_csc_row_y_lpi_1_dfm_1_0_cse;
  wire and_10_cse;
  wire csc_row_and_8_cse;
  wire seed_and_2_cse;
  wire seed_and_3_cse;
  wire [12:0] z_out;
  wire [13:0] nl_z_out;
  reg [12:0] csc_col_x_lpi_1_dfm_2;
  reg [3:0] seed_0_lpi_1_dfm_1;
  reg [3:0] seed_5_lpi_1_dfm_1;
  reg [3:0] seed_1_1_lpi_1_dfm_1;
  reg [3:0] seed_2_1_lpi_1_dfm_1;
  reg [3:0] seed_3_1_lpi_1_dfm_1;
  reg [3:0] seed_4_1_lpi_1_dfm_1;
  reg [3:0] csc_cal1_mux_itm_1;
  reg [3:0] csc_cal1_2_csc_cal1_mux_itm_1;
  wire [12:0] csc_col_x_lpi_1_dfm_3;
  wire exit_csc_row_lpi_1_dfm_1;
  wire [9:0] mgc_1023_1_pmx_1_lpi_1_dfm_1;
  wire [9:0] mgc_1023_1_pmx_2_lpi_1_dfm_1;
  wire [9:0] mgc_1023_1_pmx_lpi_1_dfm_1;
  wire [3:0] seed_3_1_lpi_1_dfm_1_mx0;
  wire csc_cal1_and_m1c_1;
  wire [3:0] seed_1_1_lpi_1_dfm_mx0;
  wire [3:0] seed_0_lpi_1_dfm_mx0;
  wire [3:0] seed_4_1_lpi_1_mx0;
  wire [3:0] csc_row_csc_row_csc_row_mux_cse;
  wire csc_col_acc_2_itm_13_1;
  wire csc_row_acc_2_itm_13;
  wire [13:0] csc_cal2_3_acc_3_itm_22_9_1;
  wire [13:0] csc_cal2_2_acc_3_itm_22_9_1;
  wire [13:0] csc_cal2_1_acc_3_itm_22_9_1;

  wire[9:0] csc_clip_csc_clip_csc_clip_nor_2_nl;
  wire[9:0] csc_clip_nor_2_nl;
  wire[2:0] csc_cal2_1_operator_13_true_acc_nl;
  wire[3:0] nl_csc_cal2_1_operator_13_true_acc_nl;
  wire[9:0] csc_clip_csc_clip_csc_clip_nor_1_nl;
  wire[9:0] csc_clip_nor_1_nl;
  wire[2:0] csc_cal2_3_operator_13_true_acc_nl;
  wire[3:0] nl_csc_cal2_3_operator_13_true_acc_nl;
  wire[9:0] csc_clip_csc_clip_csc_clip_nor_nl;
  wire[9:0] csc_clip_nor_nl;
  wire[2:0] csc_cal2_2_operator_13_true_acc_nl;
  wire[3:0] nl_csc_cal2_2_operator_13_true_acc_nl;
  wire[0:0] mux_11_nl;
  wire[0:0] mux_10_nl;
  wire[0:0] or_nl;
  wire[0:0] or_16_nl;
  wire[0:0] or_17_nl;
  wire[13:0] csc_col_acc_2_nl;
  wire[14:0] nl_csc_col_acc_2_nl;
  wire[0:0] csc_col_csc_col_csc_col_csc_col_not_nl;
  wire[13:0] csc_row_acc_2_nl;
  wire[14:0] nl_csc_row_acc_2_nl;
  wire[0:0] csc_row_not_18_nl;
  wire[0:0] or_15_nl;
  wire[22:0] csc_cal2_3_acc_3_nl;
  wire[24:0] nl_csc_cal2_3_acc_3_nl;
  wire[20:0] csc_cal2_3_mul_3_nl;
  wire signed [21:0] nl_csc_cal2_3_mul_3_nl;
  wire[20:0] csc_cal2_3_mul_4_nl;
  wire signed [21:0] nl_csc_cal2_3_mul_4_nl;
  wire[20:0] csc_cal2_3_mul_5_nl;
  wire signed [21:0] nl_csc_cal2_3_mul_5_nl;
  wire[22:0] csc_cal2_2_acc_3_nl;
  wire[24:0] nl_csc_cal2_2_acc_3_nl;
  wire[20:0] csc_cal2_2_mul_3_nl;
  wire signed [21:0] nl_csc_cal2_2_mul_3_nl;
  wire[20:0] csc_cal2_2_mul_4_nl;
  wire signed [21:0] nl_csc_cal2_2_mul_4_nl;
  wire[20:0] csc_cal2_2_mul_5_nl;
  wire signed [21:0] nl_csc_cal2_2_mul_5_nl;
  wire[22:0] csc_cal2_1_acc_3_nl;
  wire[24:0] nl_csc_cal2_1_acc_3_nl;
  wire[20:0] csc_cal2_1_mul_3_nl;
  wire signed [21:0] nl_csc_cal2_1_mul_3_nl;
  wire[20:0] csc_cal2_1_mul_4_nl;
  wire signed [21:0] nl_csc_cal2_1_mul_4_nl;
  wire[20:0] csc_cal2_1_mul_5_nl;
  wire signed [21:0] nl_csc_cal2_1_mul_5_nl;
  wire[3:0] csc_cal1_mux1h_nl;
  wire[0:0] csc_cal1_and_7_nl;
  wire[0:0] csc_cal1_and_8_nl;
  wire[0:0] csc_row_csc_row_nor_nl;
  wire[12:0] csc_col_mux_4_nl;

  // Interconnect Declarations for Component Instantiations 
  wire [29:0] nl_csc_core_dst_rsci_inst_dst_rsci_idat;
  assign nl_csc_core_dst_rsci_inst_dst_rsci_idat = {dst_rsci_idat_29_20 , dst_rsci_idat_19_10
      , dst_rsci_idat_9_0};
  csc_core_src_rsci csc_core_src_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .src_rsc_dat(src_rsc_dat),
      .src_rsc_vld(src_rsc_vld),
      .src_rsc_rdy(src_rsc_rdy),
      .core_wen(core_wen),
      .src_rsci_oswt(reg_src_rsci_oswt_cse),
      .src_rsci_wen_comp(src_rsci_wen_comp),
      .src_rsci_idat_mxwt(src_rsci_idat_mxwt)
    );
  csc_core_dst_rsci csc_core_dst_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .dst_rsc_dat(dst_rsc_dat),
      .dst_rsc_vld(dst_rsc_vld),
      .dst_rsc_rdy(dst_rsc_rdy),
      .core_wen(core_wen),
      .dst_rsci_oswt(reg_dst_rsci_oswt_cse),
      .dst_rsci_wen_comp(dst_rsci_wen_comp),
      .dst_rsci_idat(nl_csc_core_dst_rsci_inst_dst_rsci_idat[29:0])
    );
  csc_core_staller csc_core_staller_inst (
      .core_wen(core_wen),
      .src_rsci_wen_comp(src_rsci_wen_comp),
      .dst_rsci_wen_comp(dst_rsci_wen_comp)
    );
  assign csc_col_and_cse = core_wen & ((and_dcpl_5 & main_stage_0_2 & csc_reg_m_nEb)
      | and_dcpl_8);
  assign csc_row_and_8_cse = csc_row_and_8_itm_1 & (~ exitL_exit_csc_row_sva);
  assign csc_row_csc_row_csc_row_mux_cse = MUX_v_4_2_2((tmp_w_2_12_0_sva_1[3:0]),
      4'b0100, exitL_exit_csc_row_sva);
  assign nl_csc_col_acc_2_nl = ({1'b1 , csc_col_x_lpi_1_dfm_3}) + conv_u2u_13_14(~
      top_reg_frameWidth) + 14'b00000000000001;
  assign csc_col_acc_2_nl = nl_csc_col_acc_2_nl[13:0];
  assign csc_col_acc_2_itm_13_1 = readslicef_14_1_13(csc_col_acc_2_nl);
  assign csc_col_csc_col_csc_col_csc_col_not_nl = ~ exitL_exitL_exit_csc_col_lpi_1_dfm_1;
  assign csc_col_x_lpi_1_dfm_3 = MUX_v_13_2_2(13'b0000000000000, csc_col_x_lpi_1_dfm_2,
      csc_col_csc_col_csc_col_csc_col_not_nl);
  assign nl_csc_row_acc_2_nl = ({1'b1 , csc_row_y_lpi_1_dfm_3}) + conv_u2u_13_14(~
      top_reg_frameHeight) + 14'b00000000000001;
  assign csc_row_acc_2_nl = nl_csc_row_acc_2_nl[13:0];
  assign csc_row_acc_2_itm_13 = readslicef_14_1_13(csc_row_acc_2_nl);
  assign csc_row_not_18_nl = ~ exitL_exit_csc_row_sva;
  assign csc_row_y_lpi_1_dfm_3 = MUX_v_13_2_2(13'b0000000000000, csc_row_y_lpi_1_dfm_2,
      csc_row_not_18_nl);
  assign and_10_cse = csc_row_csc_row_or_1_tmp & main_stage_0_2;
  assign or_15_nl = and_10_cse | or_tmp_1;
  assign csc_row_asn_sft_lpi_1_dfm_mx0 = MUX_s_1_2_2(csc_row_asn_sft_lpi_1_dfm_1,
      exit_csc_row_lpi_1_dfm_1, or_15_nl);
  assign exit_csc_row_lpi_1_dfm_1 = (~ csc_row_acc_2_itm_13) & exitL_exitL_exit_csc_col_lpi_1_dfm_1;
  assign exitL_exitL_exit_csc_col_lpi_1_dfm_1 = and_10_cse | exit_csc_row_lpi_1_dfm
      | exitL_exit_csc_row_sva;
  assign csc_row_csc_row_or_1_tmp = csc_col_not_mdf_sva_1 | csc_row_asn_sft_lpi_1_dfm_1;
  assign nl_csc_cal2_ac_int_cctor_1_sva_1 = (csc_cal2_1_acc_3_itm_22_9_1[13:1]) +
      conv_s2s_11_13(csc_reg_coeff[43:33]) + conv_u2s_1_13(csc_cal2_1_acc_3_itm_22_9_1[0]);
  assign csc_cal2_ac_int_cctor_1_sva_1 = nl_csc_cal2_ac_int_cctor_1_sva_1[12:0];
  assign nl_csc_cal2_ac_int_cctor_2_sva_1 = (csc_cal2_2_acc_3_itm_22_9_1[13:1]) +
      conv_s2s_11_13(csc_reg_coeff[87:77]) + conv_u2s_1_13(csc_cal2_2_acc_3_itm_22_9_1[0]);
  assign csc_cal2_ac_int_cctor_2_sva_1 = nl_csc_cal2_ac_int_cctor_2_sva_1[12:0];
  assign nl_csc_cal2_ac_int_cctor_sva_1 = (csc_cal2_3_acc_3_itm_22_9_1[13:1]) + conv_s2s_11_13(csc_reg_coeff[131:121])
      + conv_u2s_1_13(csc_cal2_3_acc_3_itm_22_9_1[0]);
  assign csc_cal2_ac_int_cctor_sva_1 = nl_csc_cal2_ac_int_cctor_sva_1[12:0];
  assign nl_csc_cal2_3_mul_3_nl = $signed(conv_u2s_10_11(mgc_1023_1_pmx_lpi_1_dfm_1))
      * $signed((csc_reg_coeff[98:88]));
  assign csc_cal2_3_mul_3_nl = nl_csc_cal2_3_mul_3_nl[20:0];
  assign nl_csc_cal2_3_mul_4_nl = $signed(conv_u2s_10_11(mgc_1023_1_pmx_1_lpi_1_dfm_1))
      * $signed((csc_reg_coeff[109:99]));
  assign csc_cal2_3_mul_4_nl = nl_csc_cal2_3_mul_4_nl[20:0];
  assign nl_csc_cal2_3_mul_5_nl = $signed(conv_u2s_10_11(mgc_1023_1_pmx_2_lpi_1_dfm_1))
      * $signed((csc_reg_coeff[120:110]));
  assign csc_cal2_3_mul_5_nl = nl_csc_cal2_3_mul_5_nl[20:0];
  assign nl_csc_cal2_3_acc_3_nl = conv_s2s_21_23(csc_cal2_3_mul_3_nl) + conv_s2s_21_23(csc_cal2_3_mul_4_nl)
      + conv_s2s_21_23(csc_cal2_3_mul_5_nl);
  assign csc_cal2_3_acc_3_nl = nl_csc_cal2_3_acc_3_nl[22:0];
  assign csc_cal2_3_acc_3_itm_22_9_1 = readslicef_23_14_9(csc_cal2_3_acc_3_nl);
  assign mgc_1023_1_pmx_1_lpi_1_dfm_1 = MUX_v_10_2_2((tmp_w_1_12_0_sva_1[11:2]),
      10'b1111111111, (tmp_w_1_12_0_sva_1[12]));
  assign mgc_1023_1_pmx_2_lpi_1_dfm_1 = MUX_v_10_2_2((tmp_w_2_12_0_sva_1[11:2]),
      10'b1111111111, (tmp_w_2_12_0_sva_1[12]));
  assign mgc_1023_1_pmx_lpi_1_dfm_1 = MUX_v_10_2_2((tmp_w_0_12_0_sva_1[11:2]), 10'b1111111111,
      (tmp_w_0_12_0_sva_1[12]));
  assign nl_csc_cal2_2_mul_3_nl = $signed(conv_u2s_10_11(mgc_1023_1_pmx_lpi_1_dfm_1))
      * $signed((csc_reg_coeff[54:44]));
  assign csc_cal2_2_mul_3_nl = nl_csc_cal2_2_mul_3_nl[20:0];
  assign nl_csc_cal2_2_mul_4_nl = $signed(conv_u2s_10_11(mgc_1023_1_pmx_1_lpi_1_dfm_1))
      * $signed((csc_reg_coeff[65:55]));
  assign csc_cal2_2_mul_4_nl = nl_csc_cal2_2_mul_4_nl[20:0];
  assign nl_csc_cal2_2_mul_5_nl = $signed(conv_u2s_10_11(mgc_1023_1_pmx_2_lpi_1_dfm_1))
      * $signed((csc_reg_coeff[76:66]));
  assign csc_cal2_2_mul_5_nl = nl_csc_cal2_2_mul_5_nl[20:0];
  assign nl_csc_cal2_2_acc_3_nl = conv_s2s_21_23(csc_cal2_2_mul_3_nl) + conv_s2s_21_23(csc_cal2_2_mul_4_nl)
      + conv_s2s_21_23(csc_cal2_2_mul_5_nl);
  assign csc_cal2_2_acc_3_nl = nl_csc_cal2_2_acc_3_nl[22:0];
  assign csc_cal2_2_acc_3_itm_22_9_1 = readslicef_23_14_9(csc_cal2_2_acc_3_nl);
  assign nl_csc_cal2_1_mul_3_nl = $signed(conv_u2s_10_11(mgc_1023_1_pmx_lpi_1_dfm_1))
      * $signed((csc_reg_coeff[10:0]));
  assign csc_cal2_1_mul_3_nl = nl_csc_cal2_1_mul_3_nl[20:0];
  assign nl_csc_cal2_1_mul_4_nl = $signed(conv_u2s_10_11(mgc_1023_1_pmx_1_lpi_1_dfm_1))
      * $signed((csc_reg_coeff[21:11]));
  assign csc_cal2_1_mul_4_nl = nl_csc_cal2_1_mul_4_nl[20:0];
  assign nl_csc_cal2_1_mul_5_nl = $signed(conv_u2s_10_11(mgc_1023_1_pmx_2_lpi_1_dfm_1))
      * $signed((csc_reg_coeff[32:22]));
  assign csc_cal2_1_mul_5_nl = nl_csc_cal2_1_mul_5_nl[20:0];
  assign nl_csc_cal2_1_acc_3_nl = conv_s2s_21_23(csc_cal2_1_mul_3_nl) + conv_s2s_21_23(csc_cal2_1_mul_4_nl)
      + conv_s2s_21_23(csc_cal2_1_mul_5_nl);
  assign csc_cal2_1_acc_3_nl = nl_csc_cal2_1_acc_3_nl[22:0];
  assign csc_cal2_1_acc_3_itm_22_9_1 = readslicef_23_14_9(csc_cal2_1_acc_3_nl);
  assign csc_cal1_and_7_nl = reg_csc_row_y_lpi_1_dfm_1_0_cse & (~ csc_cal1_acc_psp_sva_1_0);
  assign csc_cal1_and_8_nl = csc_cal1_acc_psp_sva_1_0 & (~ reg_csc_row_y_lpi_1_dfm_1_0_cse);
  assign csc_cal1_mux1h_nl = MUX1HOT_v_4_4_2(seed_5_lpi_1_dfm_1, seed_2_1_lpi_1_dfm_1,
      seed_3_1_lpi_1_dfm_1, (tmp_w_0_12_0_sva_1[3:0]), {csc_cal1_and_7_nl , csc_cal1_and_8_nl
      , csc_cal1_and_m1c_1 , csc_cal1_and_m1c_1});
  assign nl_tmp_w_2_12_0_sva_1 = conv_u2u_12_13(src_rsci_idat_mxwt[11:0]) + conv_u2u_4_13(csc_cal1_mux1h_nl);
  assign tmp_w_2_12_0_sva_1 = nl_tmp_w_2_12_0_sva_1[12:0];
  assign nl_tmp_w_1_12_0_sva_1 = conv_u2u_12_13(src_rsci_idat_mxwt[23:12]) + conv_u2u_4_13(csc_cal1_2_csc_cal1_mux_itm_1);
  assign tmp_w_1_12_0_sva_1 = nl_tmp_w_1_12_0_sva_1[12:0];
  assign csc_row_csc_row_nor_nl = ~(csc_row_and_8_itm_1 | exitL_exit_csc_row_sva);
  assign seed_3_1_lpi_1_dfm_1_mx0 = MUX1HOT_v_4_3_2(seed_3_1_lpi_1_dfm_1, (tmp_w_0_12_0_sva_1[3:0]),
      4'b0100, {csc_row_csc_row_nor_nl , csc_row_and_8_cse , exitL_exit_csc_row_sva});
  assign csc_cal1_and_m1c_1 = csc_cal1_acc_psp_sva_1_0 & reg_csc_row_y_lpi_1_dfm_1_0_cse;
  assign nl_tmp_w_0_12_0_sva_1 = conv_u2u_12_13(src_rsci_idat_mxwt[35:24]) + conv_u2u_4_13(csc_cal1_mux_itm_1);
  assign tmp_w_0_12_0_sva_1 = nl_tmp_w_0_12_0_sva_1[12:0];
  assign seed_and_2_cse = ~(or_dcpl_9 | exitL_exit_csc_row_sva);
  assign seed_and_3_cse = or_dcpl_9 & (~ exitL_exit_csc_row_sva);
  assign seed_1_1_lpi_1_dfm_mx0 = MUX1HOT_v_4_3_2((tmp_w_1_12_0_sva_1[3:0]), seed_1_1_lpi_1_dfm_1,
      4'b0100, {seed_and_2_cse , seed_and_3_cse , exitL_exit_csc_row_sva});
  assign seed_0_lpi_1_dfm_mx0 = MUX1HOT_v_4_3_2((tmp_w_0_12_0_sva_1[3:0]), seed_0_lpi_1_dfm_1,
      4'b0100, {seed_and_2_cse , seed_and_3_cse , exitL_exit_csc_row_sva});
  assign seed_4_1_lpi_1_mx0 = MUX_v_4_2_2(seed_4_1_lpi_1_dfm_1, (tmp_w_1_12_0_sva_1[3:0]),
      csc_row_and_8_itm_1);
  assign or_tmp_1 = exit_csc_row_lpi_1_dfm | exitL_exit_csc_row_sva;
  assign and_dcpl_5 = ~(csc_col_not_mdf_sva_1 | csc_row_asn_sft_lpi_1_dfm_1);
  assign and_dcpl_8 = and_dcpl_5 & main_stage_0_2 & (~ csc_reg_m_nEb);
  assign not_tmp_16 = ~(main_stage_0_2 | exit_csc_row_lpi_1_dfm | exitL_exit_csc_row_sva);
  assign or_dcpl_9 = csc_row_csc_row_or_1_tmp | reg_csc_row_y_lpi_1_dfm_1_0_cse;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      reg_dst_rsci_oswt_cse <= 1'b0;
      reg_src_rsci_oswt_cse <= 1'b0;
      csc_col_x_lpi_1_dfm_2 <= 13'b0000000000000;
      exit_csc_row_lpi_1_dfm <= 1'b0;
      exitL_exit_csc_row_sva <= 1'b1;
      csc_row_y_lpi_1_dfm_2 <= 13'b0000000000000;
      seed_4_1_lpi_1_dfm_1 <= 4'b0000;
      reg_csc_row_y_lpi_1_dfm_1_0_cse <= 1'b0;
      csc_cal1_acc_psp_sva_1_0 <= 1'b0;
      seed_3_1_lpi_1_dfm_1 <= 4'b0000;
      csc_cal1_2_csc_cal1_mux_itm_1 <= 4'b0000;
      csc_cal1_mux_itm_1 <= 4'b0000;
      csc_row_asn_sft_lpi_1_dfm_1 <= 1'b0;
      csc_col_not_mdf_sva_1 <= 1'b0;
      main_stage_0_2 <= 1'b0;
      csc_row_and_8_itm_1 <= 1'b0;
      csc_row_and_6_itm_1 <= 1'b0;
      seed_1_1_lpi_1_dfm_1 <= 4'b0000;
      seed_0_lpi_1_dfm_1 <= 4'b0000;
    end
    else if ( core_wen ) begin
      reg_dst_rsci_oswt_cse <= ~(csc_row_csc_row_or_1_tmp | (~ main_stage_0_2));
      reg_src_rsci_oswt_cse <= ~(mux_11_nl | (~ csc_col_acc_2_itm_13_1));
      csc_col_x_lpi_1_dfm_2 <= z_out;
      exit_csc_row_lpi_1_dfm <= exit_csc_row_lpi_1_dfm_1;
      exitL_exit_csc_row_sva <= exit_csc_row_lpi_1_dfm_1;
      csc_row_y_lpi_1_dfm_2 <= MUX_v_13_2_2(z_out, csc_row_y_lpi_1_dfm_3, or_16_nl);
      seed_4_1_lpi_1_dfm_1 <= MUX_v_4_2_2(seed_4_1_lpi_1_mx0, 4'b0100, exitL_exit_csc_row_sva);
      reg_csc_row_y_lpi_1_dfm_1_0_cse <= csc_row_y_lpi_1_dfm_3[0];
      csc_cal1_acc_psp_sva_1_0 <= ~ (csc_row_y_lpi_1_dfm_3[0]);
      seed_3_1_lpi_1_dfm_1 <= seed_3_1_lpi_1_dfm_1_mx0;
      csc_cal1_2_csc_cal1_mux_itm_1 <= MUX_v_4_2_2(seed_4_1_lpi_1_mx0, seed_1_1_lpi_1_dfm_mx0,
          or_17_nl);
      csc_cal1_mux_itm_1 <= MUX_v_4_4_2x1x2(seed_0_lpi_1_dfm_mx0, seed_3_1_lpi_1_dfm_1_mx0,
          signext_2_1(csc_row_y_lpi_1_dfm_3[0]));
      csc_row_asn_sft_lpi_1_dfm_1 <= csc_row_asn_sft_lpi_1_dfm_mx0;
      csc_col_not_mdf_sva_1 <= ~ csc_col_acc_2_itm_13_1;
      main_stage_0_2 <= 1'b1;
      csc_row_and_8_itm_1 <= (csc_row_y_lpi_1_dfm_3[0]) & csc_col_acc_2_itm_13_1
          & (~ csc_row_asn_sft_lpi_1_dfm_mx0);
      csc_row_and_6_itm_1 <= ~((csc_row_y_lpi_1_dfm_3[0]) | (~ csc_col_acc_2_itm_13_1)
          | csc_row_asn_sft_lpi_1_dfm_mx0);
      seed_1_1_lpi_1_dfm_1 <= seed_1_1_lpi_1_dfm_mx0;
      seed_0_lpi_1_dfm_1 <= seed_0_lpi_1_dfm_mx0;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dst_rsci_idat_29_20 <= 10'b0000000000;
      dst_rsci_idat_9_0 <= 10'b0000000000;
      dst_rsci_idat_19_10 <= 10'b0000000000;
    end
    else if ( csc_col_and_cse ) begin
      dst_rsci_idat_29_20 <= MUX_v_10_2_2(csc_clip_csc_clip_csc_clip_nor_2_nl, mgc_1023_1_pmx_lpi_1_dfm_1,
          and_dcpl_8);
      dst_rsci_idat_9_0 <= MUX_v_10_2_2(csc_clip_csc_clip_csc_clip_nor_1_nl, mgc_1023_1_pmx_2_lpi_1_dfm_1,
          and_dcpl_8);
      dst_rsci_idat_19_10 <= MUX_v_10_2_2(csc_clip_csc_clip_csc_clip_nor_nl, mgc_1023_1_pmx_1_lpi_1_dfm_1,
          and_dcpl_8);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      seed_5_lpi_1_dfm_1 <= 4'b0000;
    end
    else if ( core_wen & (csc_row_and_8_cse | exitL_exit_csc_row_sva) ) begin
      seed_5_lpi_1_dfm_1 <= csc_row_csc_row_csc_row_mux_cse;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      seed_2_1_lpi_1_dfm_1 <= 4'b0000;
    end
    else if ( core_wen & (csc_row_and_6_itm_1 | exitL_exit_csc_row_sva) ) begin
      seed_2_1_lpi_1_dfm_1 <= csc_row_csc_row_csc_row_mux_cse;
    end
  end
  assign or_nl = exit_csc_row_lpi_1_dfm | exitL_exit_csc_row_sva | csc_row_asn_sft_lpi_1_dfm_1
      | csc_col_not_mdf_sva_1;
  assign mux_10_nl = MUX_s_1_2_2(or_tmp_1, or_nl, main_stage_0_2);
  assign mux_11_nl = MUX_s_1_2_2(mux_10_nl, not_tmp_16, csc_row_acc_2_itm_13);
  assign or_16_nl = not_tmp_16 | csc_col_acc_2_itm_13_1;
  assign or_17_nl = exitL_exit_csc_row_sva | (~ (csc_row_y_lpi_1_dfm_2[0]));
  assign nl_csc_cal2_1_operator_13_true_acc_nl = ({1'b1 , (~ (csc_cal2_ac_int_cctor_1_sva_1[11:10]))})
      + 3'b001;
  assign csc_cal2_1_operator_13_true_acc_nl = nl_csc_cal2_1_operator_13_true_acc_nl[2:0];
  assign csc_clip_nor_2_nl = ~(MUX_v_10_2_2((csc_cal2_ac_int_cctor_1_sva_1[9:0]),
      10'b1111111111, (readslicef_3_1_2(csc_cal2_1_operator_13_true_acc_nl))));
  assign csc_clip_csc_clip_csc_clip_nor_2_nl = ~(MUX_v_10_2_2(csc_clip_nor_2_nl,
      10'b1111111111, (csc_cal2_ac_int_cctor_1_sva_1[12])));
  assign nl_csc_cal2_3_operator_13_true_acc_nl = ({1'b1 , (~ (csc_cal2_ac_int_cctor_sva_1[11:10]))})
      + 3'b001;
  assign csc_cal2_3_operator_13_true_acc_nl = nl_csc_cal2_3_operator_13_true_acc_nl[2:0];
  assign csc_clip_nor_1_nl = ~(MUX_v_10_2_2((csc_cal2_ac_int_cctor_sva_1[9:0]), 10'b1111111111,
      (readslicef_3_1_2(csc_cal2_3_operator_13_true_acc_nl))));
  assign csc_clip_csc_clip_csc_clip_nor_1_nl = ~(MUX_v_10_2_2(csc_clip_nor_1_nl,
      10'b1111111111, (csc_cal2_ac_int_cctor_sva_1[12])));
  assign nl_csc_cal2_2_operator_13_true_acc_nl = ({1'b1 , (~ (csc_cal2_ac_int_cctor_2_sva_1[11:10]))})
      + 3'b001;
  assign csc_cal2_2_operator_13_true_acc_nl = nl_csc_cal2_2_operator_13_true_acc_nl[2:0];
  assign csc_clip_nor_nl = ~(MUX_v_10_2_2((csc_cal2_ac_int_cctor_2_sva_1[9:0]), 10'b1111111111,
      (readslicef_3_1_2(csc_cal2_2_operator_13_true_acc_nl))));
  assign csc_clip_csc_clip_csc_clip_nor_nl = ~(MUX_v_10_2_2(csc_clip_nor_nl, 10'b1111111111,
      (csc_cal2_ac_int_cctor_2_sva_1[12])));
  assign csc_col_mux_4_nl = MUX_v_13_2_2(csc_row_y_lpi_1_dfm_3, csc_col_x_lpi_1_dfm_3,
      csc_col_acc_2_itm_13_1);
  assign nl_z_out = csc_col_mux_4_nl + 13'b0000000000001;
  assign z_out = nl_z_out[12:0];

  function automatic [3:0] MUX1HOT_v_4_3_2;
    input [3:0] input_2;
    input [3:0] input_1;
    input [3:0] input_0;
    input [2:0] sel;
    reg [3:0] result;
  begin
    result = input_0 & {4{sel[0]}};
    result = result | ( input_1 & {4{sel[1]}});
    result = result | ( input_2 & {4{sel[2]}});
    MUX1HOT_v_4_3_2 = result;
  end
  endfunction


  function automatic [3:0] MUX1HOT_v_4_4_2;
    input [3:0] input_3;
    input [3:0] input_2;
    input [3:0] input_1;
    input [3:0] input_0;
    input [3:0] sel;
    reg [3:0] result;
  begin
    result = input_0 & {4{sel[0]}};
    result = result | ( input_1 & {4{sel[1]}});
    result = result | ( input_2 & {4{sel[2]}});
    result = result | ( input_3 & {4{sel[3]}});
    MUX1HOT_v_4_4_2 = result;
  end
  endfunction


  function automatic [0:0] MUX_s_1_2_2;
    input [0:0] input_0;
    input [0:0] input_1;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function automatic [12:0] MUX_v_13_2_2;
    input [12:0] input_0;
    input [12:0] input_1;
    input [0:0] sel;
    reg [12:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_13_2_2 = result;
  end
  endfunction


  function automatic [3:0] MUX_v_4_2_2;
    input [3:0] input_0;
    input [3:0] input_1;
    input [0:0] sel;
    reg [3:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_4_2_2 = result;
  end
  endfunction


  function automatic [3:0] MUX_v_4_4_2x1x2;
    input [3:0] input_0;
    input [3:0] input_3;
    input [1:0] sel;
    reg [3:0] result;
  begin
    case (sel)
      2'b00 : begin
        result = input_0;
      end
      default : begin
        result = input_3;
      end
    endcase
    MUX_v_4_4_2x1x2 = result;
  end
  endfunction


  function automatic [0:0] readslicef_14_1_13;
    input [13:0] vector;
    reg [13:0] tmp;
  begin
    tmp = vector >> 13;
    readslicef_14_1_13 = tmp[0:0];
  end
  endfunction


  function automatic [13:0] readslicef_23_14_9;
    input [22:0] vector;
    reg [22:0] tmp;
  begin
    tmp = vector >> 9;
    readslicef_23_14_9 = tmp[13:0];
  end
  endfunction


  function automatic [0:0] readslicef_3_1_2;
    input [2:0] vector;
    reg [2:0] tmp;
  begin
    tmp = vector >> 2;
    readslicef_3_1_2 = tmp[0:0];
  end
  endfunction


  function automatic [1:0] signext_2_1;
    input [0:0] vector;
  begin
    signext_2_1= {{1{vector[0]}}, vector};
  end
  endfunction


  function automatic [12:0] conv_s2s_11_13 ;
    input [10:0]  vector ;
  begin
    conv_s2s_11_13 = {{2{vector[10]}}, vector};
  end
  endfunction


  function automatic [22:0] conv_s2s_21_23 ;
    input [20:0]  vector ;
  begin
    conv_s2s_21_23 = {{2{vector[20]}}, vector};
  end
  endfunction


  function automatic [12:0] conv_u2s_1_13 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_13 = {{12{1'b0}}, vector};
  end
  endfunction


  function automatic [10:0] conv_u2s_10_11 ;
    input [9:0]  vector ;
  begin
    conv_u2s_10_11 =  {1'b0, vector};
  end
  endfunction


  function automatic [12:0] conv_u2u_4_13 ;
    input [3:0]  vector ;
  begin
    conv_u2u_4_13 = {{9{1'b0}}, vector};
  end
  endfunction


  function automatic [12:0] conv_u2u_12_13 ;
    input [11:0]  vector ;
  begin
    conv_u2u_12_13 = {1'b0, vector};
  end
  endfunction


  function automatic [13:0] conv_u2u_13_14 ;
    input [12:0]  vector ;
  begin
    conv_u2u_13_14 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    yfc_core
// ------------------------------------------------------------------


module yfc_core (
  clk, arst_n, top_reg_frameWidth, top_reg_frameHeight, yfc_reg_m_nEb, yfc_reg_yuvpattern,
      src_rsc_dat, src_rsc_vld, src_rsc_rdy, y_dst_rsc_dat, y_dst_rsc_vld, y_dst_rsc_rdy,
      u_dst_rsc_dat, u_dst_rsc_vld, u_dst_rsc_rdy, v_dst_rsc_dat, v_dst_rsc_vld,
      v_dst_rsc_rdy, u_linebuffer_rsci_d_d, u_linebuffer_rsci_q_d, v_linebuffer_rsci_d_d,
      v_linebuffer_rsci_q_d, u_linebuffer_rsci_radr_d_pff, u_linebuffer_rsci_we_d_pff,
      u_linebuffer_rsci_re_d_pff, v_linebuffer_rsci_we_d_pff, v_linebuffer_rsci_re_d_pff
);
  input clk;
  input arst_n;
  input [12:0] top_reg_frameWidth;
  input [12:0] top_reg_frameHeight;
  input yfc_reg_m_nEb;
  input yfc_reg_yuvpattern;
  input [29:0] src_rsc_dat;
  input src_rsc_vld;
  output src_rsc_rdy;
  output [9:0] y_dst_rsc_dat;
  output y_dst_rsc_vld;
  input y_dst_rsc_rdy;
  output [9:0] u_dst_rsc_dat;
  output u_dst_rsc_vld;
  input u_dst_rsc_rdy;
  output [9:0] v_dst_rsc_dat;
  output v_dst_rsc_vld;
  input v_dst_rsc_rdy;
  output [9:0] u_linebuffer_rsci_d_d;
  input [9:0] u_linebuffer_rsci_q_d;
  output [9:0] v_linebuffer_rsci_d_d;
  input [9:0] v_linebuffer_rsci_q_d;
  output [11:0] u_linebuffer_rsci_radr_d_pff;
  output u_linebuffer_rsci_we_d_pff;
  output u_linebuffer_rsci_re_d_pff;
  output v_linebuffer_rsci_we_d_pff;
  output v_linebuffer_rsci_re_d_pff;


  // Interconnect Declarations
  wire core_wen;
  wire core_wten;
  wire src_rsci_wen_comp;
  wire [29:0] src_rsci_idat_mxwt;
  wire y_dst_rsci_wen_comp;
  reg [9:0] y_dst_rsci_idat;
  wire u_dst_rsci_wen_comp;
  reg [9:0] u_dst_rsci_idat;
  wire v_dst_rsci_wen_comp;
  reg [9:0] v_dst_rsci_idat;
  wire [9:0] u_linebuffer_rsci_q_d_mxwt;
  wire [9:0] v_linebuffer_rsci_q_d_mxwt;
  wire yfc_row_yfc_row_or_1_tmp;
  wire or_dcpl_5;
  wire and_dcpl_28;
  wire and_dcpl_30;
  wire and_dcpl_35;
  wire and_dcpl_37;
  wire and_dcpl_38;
  wire and_dcpl_40;
  wire or_dcpl_10;
  reg exit_yfc_row_lpi_1_dfm;
  reg exitL_exit_yfc_row_sva;
  reg [12:0] yfc_row_y_lpi_1_dfm_2;
  reg [12:0] yfc_col_x_lpi_1_dfm_2;
  wire [13:0] nl_yfc_col_x_lpi_1_dfm_2;
  wire yfc_row_yfc_row_nor_3_cse_1;
  reg yfc_reg_m_nEb_not_tmp_1;
  reg yfc_col_x_lpi_1_dfm_2_0;
  reg operator_13_false_1_operator_13_false_1_slc_yfc_row_y_0_33_itm_2;
  reg yfc_col_not_mdf_sva_1;
  reg yfc_row_asn_sft_lpi_1_dfm_1;
  reg operator_13_false_1_operator_13_false_1_slc_yfc_row_y_0_33_itm_1;
  reg operator_13_false_2_operator_13_false_2_slc_yfc_col_x_0_33_itm_1;
  reg main_stage_0_2;
  reg main_stage_0_3;
  reg operator_13_false_2_operator_13_false_2_slc_yfc_col_x_0_33_itm_2;
  reg [11:0] yfc_col_x_lpi_1_dfm_1_11_0;
  reg reg_v_dst_rsci_oswt_cse;
  wire yfc_col_if_if_else_and_cse;
  reg reg_y_dst_rsci_oswt_cse;
  wire v_tmp_422_and_cse;
  wire v_tmp_422_and_1_cse;
  wire v_tmp_420_and_1_cse;
  wire v_tmp_420_and_2_cse;
  reg reg_v_linebuffer_rsci_oswt_cse;
  reg reg_src_rsci_oswt_cse;
  reg reg_yfc_col_not_mdf_sva_st_2_cse;
  reg reg_yfc_row_asn_sft_lpi_1_dfm_st_2_cse;
  wire exit_yfc_row_lpi_1_dfm_1;
  wire or_43_rgt;
  wire u_linebuffer_rsci_we_d_iff;
  wire yfc_col_if_if_if_yfc_col_if_else_if_if_nor_1_rmff;
  wire u_linebuffer_rsci_re_d_iff;
  wire yfc_col_if_if_if_yfc_col_if_else_if_if_nor_rmff;
  wire v_linebuffer_rsci_we_d_iff;
  wire v_linebuffer_rsci_re_d_iff;
  wire [10:0] z_out;
  wire [11:0] nl_z_out;
  wire [10:0] z_out_1;
  wire [11:0] nl_z_out_1;
  reg u_tmp_420_11_lpi_1_dfm_6;
  reg [10:0] u_tmp_420_10_0_lpi_1_dfm_6;
  reg v_tmp_420_11_lpi_1_dfm_6;
  reg [10:0] v_tmp_420_10_0_lpi_1_dfm_6;
  reg [29:0] src_t_sva_1;
  reg [9:0] yfc_col_if_if_else_slc_yfc_col_if_if_else_ac_int_cctor_10_1_itm_1;
  reg [9:0] yfc_col_if_if_else_slc_yfc_col_if_if_else_ac_int_cctor_1_10_1_itm_1;
  wire [11:0] yfc_col_if_else_if_else_else_ac_int_cctor_1_sva_1;
  wire [12:0] nl_yfc_col_if_else_if_else_else_ac_int_cctor_1_sva_1;
  wire [11:0] yfc_col_if_else_if_else_else_ac_int_cctor_sva_1;
  wire [12:0] nl_yfc_col_if_else_if_else_else_ac_int_cctor_sva_1;
  wire [12:0] yfc_row_y_lpi_1_dfm_3;
  wire [12:0] yfc_col_x_lpi_1_dfm_3;
  wire yfc_col_if_asn_27;
  wire v_tmp_420_and_3_cse;
  wire v_tmp_420_and_4_cse;
  wire operator_13_false_2_and_cse;
  wire yfc_col_acc_2_itm_13_1;
  wire yfc_row_acc_2_itm_13;

  wire[9:0] v_tmp_422_v_tmp_422_mux1h_nl;
  wire[9:0] u_tmp_422_u_tmp_422_mux1h_nl;
  wire[0:0] yfc_col_if_if_yfc_col_if_if_and_2_nl;
  wire[0:0] mux_17_nl;
  wire[0:0] mux_16_nl;
  wire[0:0] nor_17_nl;
  wire[0:0] or_nl;
  wire[0:0] or_45_nl;
  wire[12:0] yfc_row_acc_1_nl;
  wire[13:0] nl_yfc_row_acc_1_nl;
  wire[0:0] or_41_nl;
  wire[0:0] yfc_col_if_if_yfc_col_if_if_and_nl;
  wire[0:0] yfc_row_not_20_nl;
  wire[13:0] yfc_col_acc_2_nl;
  wire[14:0] nl_yfc_col_acc_2_nl;
  wire[0:0] yfc_col_yfc_col_yfc_col_not_nl;
  wire[13:0] yfc_row_acc_2_nl;
  wire[14:0] nl_yfc_row_acc_2_nl;
  wire[0:0] yfc_col_if_else_if_else_if_yfc_col_if_else_if_else_if_and_2_nl;
  wire[9:0] yfc_col_if_else_if_else_if_mux_4_nl;
  wire[9:0] yfc_col_if_else_if_else_if_mux_5_nl;
  wire[0:0] yfc_col_if_else_if_else_if_yfc_col_if_else_if_else_if_and_3_nl;
  wire[9:0] yfc_col_if_else_if_else_if_mux_6_nl;
  wire[9:0] yfc_col_if_else_if_else_if_mux_7_nl;

  // Interconnect Declarations for Component Instantiations 
  yfc_core_src_rsci yfc_core_src_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .src_rsc_dat(src_rsc_dat),
      .src_rsc_vld(src_rsc_vld),
      .src_rsc_rdy(src_rsc_rdy),
      .core_wen(core_wen),
      .src_rsci_oswt(reg_src_rsci_oswt_cse),
      .src_rsci_wen_comp(src_rsci_wen_comp),
      .src_rsci_idat_mxwt(src_rsci_idat_mxwt)
    );
  yfc_core_y_dst_rsci yfc_core_y_dst_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .y_dst_rsc_dat(y_dst_rsc_dat),
      .y_dst_rsc_vld(y_dst_rsc_vld),
      .y_dst_rsc_rdy(y_dst_rsc_rdy),
      .core_wen(core_wen),
      .y_dst_rsci_oswt(reg_y_dst_rsci_oswt_cse),
      .y_dst_rsci_wen_comp(y_dst_rsci_wen_comp),
      .y_dst_rsci_idat(y_dst_rsci_idat)
    );
  yfc_core_u_dst_rsci yfc_core_u_dst_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .u_dst_rsc_dat(u_dst_rsc_dat),
      .u_dst_rsc_vld(u_dst_rsc_vld),
      .u_dst_rsc_rdy(u_dst_rsc_rdy),
      .core_wen(core_wen),
      .u_dst_rsci_oswt(reg_v_dst_rsci_oswt_cse),
      .u_dst_rsci_wen_comp(u_dst_rsci_wen_comp),
      .u_dst_rsci_idat(u_dst_rsci_idat)
    );
  yfc_core_v_dst_rsci yfc_core_v_dst_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .v_dst_rsc_dat(v_dst_rsc_dat),
      .v_dst_rsc_vld(v_dst_rsc_vld),
      .v_dst_rsc_rdy(v_dst_rsc_rdy),
      .core_wen(core_wen),
      .v_dst_rsci_oswt(reg_v_dst_rsci_oswt_cse),
      .v_dst_rsci_wen_comp(v_dst_rsci_wen_comp),
      .v_dst_rsci_idat(v_dst_rsci_idat)
    );
  yfc_core_u_linebuffer_rsci_1 yfc_core_u_linebuffer_rsci_1_inst (
      .clk(clk),
      .arst_n(arst_n),
      .u_linebuffer_rsci_q_d(u_linebuffer_rsci_q_d),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .u_linebuffer_rsci_oswt(reg_v_linebuffer_rsci_oswt_cse),
      .u_linebuffer_rsci_q_d_mxwt(u_linebuffer_rsci_q_d_mxwt),
      .u_linebuffer_rsci_we_d_pff(u_linebuffer_rsci_we_d_iff),
      .u_linebuffer_rsci_iswt0_1_pff(yfc_col_if_if_if_yfc_col_if_else_if_if_nor_1_rmff),
      .u_linebuffer_rsci_re_d_pff(u_linebuffer_rsci_re_d_iff),
      .u_linebuffer_rsci_oswt_pff(yfc_col_if_if_if_yfc_col_if_else_if_if_nor_rmff)
    );
  yfc_core_v_linebuffer_rsci_1 yfc_core_v_linebuffer_rsci_1_inst (
      .clk(clk),
      .arst_n(arst_n),
      .v_linebuffer_rsci_q_d(v_linebuffer_rsci_q_d),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .v_linebuffer_rsci_oswt(reg_v_linebuffer_rsci_oswt_cse),
      .v_linebuffer_rsci_q_d_mxwt(v_linebuffer_rsci_q_d_mxwt),
      .v_linebuffer_rsci_we_d_pff(v_linebuffer_rsci_we_d_iff),
      .v_linebuffer_rsci_iswt0_1_pff(yfc_col_if_if_if_yfc_col_if_else_if_if_nor_1_rmff),
      .v_linebuffer_rsci_re_d_pff(v_linebuffer_rsci_re_d_iff),
      .v_linebuffer_rsci_oswt_pff(yfc_col_if_if_if_yfc_col_if_else_if_if_nor_rmff)
    );
  yfc_core_staller yfc_core_staller_inst (
      .clk(clk),
      .arst_n(arst_n),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .src_rsci_wen_comp(src_rsci_wen_comp),
      .y_dst_rsci_wen_comp(y_dst_rsci_wen_comp),
      .u_dst_rsci_wen_comp(u_dst_rsci_wen_comp),
      .v_dst_rsci_wen_comp(v_dst_rsci_wen_comp)
    );
  assign yfc_col_if_if_else_and_cse = core_wen & (and_dcpl_30 | and_dcpl_35 | and_dcpl_37);
  assign v_tmp_420_and_3_cse = core_wen & (~((~ operator_13_false_1_operator_13_false_1_slc_yfc_row_y_0_33_itm_2)
      | yfc_reg_m_nEb_not_tmp_1 | reg_yfc_col_not_mdf_sva_st_2_cse | (~ main_stage_0_3)
      | reg_yfc_row_asn_sft_lpi_1_dfm_st_2_cse));
  assign v_tmp_422_and_cse = (~ yfc_col_if_asn_27) & main_stage_0_2;
  assign v_tmp_422_and_1_cse = yfc_col_if_asn_27 & main_stage_0_2;
  assign v_tmp_420_and_1_cse = (~ yfc_col_x_lpi_1_dfm_2_0) & operator_13_false_1_operator_13_false_1_slc_yfc_row_y_0_33_itm_2
      & yfc_row_yfc_row_nor_3_cse_1 & and_dcpl_38;
  assign v_tmp_420_and_2_cse = yfc_col_x_lpi_1_dfm_2_0 & operator_13_false_1_operator_13_false_1_slc_yfc_row_y_0_33_itm_2
      & yfc_row_yfc_row_nor_3_cse_1 & and_dcpl_38;
  assign v_tmp_420_and_4_cse = core_wen & (v_tmp_420_and_1_cse | v_tmp_420_and_2_cse
      | (~ yfc_reg_yuvpattern));
  assign operator_13_false_2_and_cse = core_wen & (yfc_reg_yuvpattern | and_dcpl_40);
  assign yfc_col_if_if_if_yfc_col_if_else_if_if_nor_1_rmff = ~(yfc_row_yfc_row_or_1_tmp
      | operator_13_false_1_operator_13_false_1_slc_yfc_row_y_0_33_itm_1 | or_dcpl_10);
  assign yfc_col_if_if_if_yfc_col_if_else_if_if_nor_rmff = ~(yfc_row_yfc_row_or_1_tmp
      | (~ operator_13_false_1_operator_13_false_1_slc_yfc_row_y_0_33_itm_1) | or_dcpl_10);
  assign or_43_rgt = (yfc_row_yfc_row_or_1_tmp & main_stage_0_2) | exit_yfc_row_lpi_1_dfm
      | exitL_exit_yfc_row_sva;
  assign nl_yfc_col_if_else_if_else_else_ac_int_cctor_1_sva_1 = conv_u2u_11_12(z_out)
      + ({v_tmp_420_11_lpi_1_dfm_6 , v_tmp_420_10_0_lpi_1_dfm_6});
  assign yfc_col_if_else_if_else_else_ac_int_cctor_1_sva_1 = nl_yfc_col_if_else_if_else_else_ac_int_cctor_1_sva_1[11:0];
  assign nl_yfc_col_if_else_if_else_else_ac_int_cctor_sva_1 = conv_u2u_11_12(z_out_1)
      + ({u_tmp_420_11_lpi_1_dfm_6 , u_tmp_420_10_0_lpi_1_dfm_6});
  assign yfc_col_if_else_if_else_else_ac_int_cctor_sva_1 = nl_yfc_col_if_else_if_else_else_ac_int_cctor_sva_1[11:0];
  assign yfc_row_not_20_nl = ~ exitL_exit_yfc_row_sva;
  assign yfc_row_y_lpi_1_dfm_3 = MUX_v_13_2_2(13'b0000000000000, yfc_row_y_lpi_1_dfm_2,
      yfc_row_not_20_nl);
  assign nl_yfc_col_acc_2_nl = ({1'b1 , yfc_col_x_lpi_1_dfm_3}) + conv_u2u_13_14(~
      top_reg_frameWidth) + 14'b00000000000001;
  assign yfc_col_acc_2_nl = nl_yfc_col_acc_2_nl[13:0];
  assign yfc_col_acc_2_itm_13_1 = readslicef_14_1_13(yfc_col_acc_2_nl);
  assign yfc_col_yfc_col_yfc_col_not_nl = ~ or_43_rgt;
  assign yfc_col_x_lpi_1_dfm_3 = MUX_v_13_2_2(13'b0000000000000, yfc_col_x_lpi_1_dfm_2,
      yfc_col_yfc_col_yfc_col_not_nl);
  assign exit_yfc_row_lpi_1_dfm_1 = (~ yfc_row_acc_2_itm_13) & or_43_rgt;
  assign nl_yfc_row_acc_2_nl = ({1'b1 , yfc_row_y_lpi_1_dfm_3}) + conv_u2u_13_14(~
      top_reg_frameHeight) + 14'b00000000000001;
  assign yfc_row_acc_2_nl = nl_yfc_row_acc_2_nl[13:0];
  assign yfc_row_acc_2_itm_13 = readslicef_14_1_13(yfc_row_acc_2_nl);
  assign yfc_row_yfc_row_or_1_tmp = yfc_col_not_mdf_sva_1 | yfc_row_asn_sft_lpi_1_dfm_1;
  assign yfc_row_yfc_row_nor_3_cse_1 = ~(yfc_reg_m_nEb_not_tmp_1 | reg_yfc_col_not_mdf_sva_st_2_cse
      | reg_yfc_row_asn_sft_lpi_1_dfm_st_2_cse);
  assign yfc_col_if_asn_27 = (yfc_col_x_lpi_1_dfm_1_11_0[0]) & (~ yfc_reg_yuvpattern);
  assign or_dcpl_5 = (~ main_stage_0_3) | reg_yfc_col_not_mdf_sva_st_2_cse | reg_yfc_row_asn_sft_lpi_1_dfm_st_2_cse;
  assign and_dcpl_28 = main_stage_0_3 & (~ reg_yfc_col_not_mdf_sva_st_2_cse);
  assign and_dcpl_30 = and_dcpl_28 & (~ reg_yfc_row_asn_sft_lpi_1_dfm_st_2_cse) &
      yfc_reg_m_nEb & operator_13_false_1_operator_13_false_1_slc_yfc_row_y_0_33_itm_2
      & (~ yfc_reg_yuvpattern);
  assign and_dcpl_35 = and_dcpl_28 & (~ reg_yfc_row_asn_sft_lpi_1_dfm_st_2_cse) &
      yfc_reg_m_nEb & operator_13_false_1_operator_13_false_1_slc_yfc_row_y_0_33_itm_2
      & yfc_reg_yuvpattern & operator_13_false_2_operator_13_false_2_slc_yfc_col_x_0_33_itm_2;
  assign and_dcpl_37 = and_dcpl_28 & (~ reg_yfc_row_asn_sft_lpi_1_dfm_st_2_cse) &
      (~ yfc_reg_m_nEb);
  assign and_dcpl_38 = main_stage_0_3 & yfc_reg_yuvpattern;
  assign and_dcpl_40 = main_stage_0_2 & (~ yfc_reg_yuvpattern);
  assign or_dcpl_10 = ~(main_stage_0_2 & yfc_reg_m_nEb & yfc_reg_yuvpattern);
  assign u_linebuffer_rsci_radr_d_pff = yfc_col_x_lpi_1_dfm_1_11_0;
  assign u_linebuffer_rsci_d_d = src_rsci_idat_mxwt[19:10];
  assign u_linebuffer_rsci_we_d_pff = u_linebuffer_rsci_we_d_iff;
  assign u_linebuffer_rsci_re_d_pff = u_linebuffer_rsci_re_d_iff;
  assign v_linebuffer_rsci_d_d = src_rsci_idat_mxwt[9:0];
  assign v_linebuffer_rsci_we_d_pff = v_linebuffer_rsci_we_d_iff;
  assign v_linebuffer_rsci_re_d_pff = v_linebuffer_rsci_re_d_iff;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      reg_v_dst_rsci_oswt_cse <= 1'b0;
      reg_y_dst_rsci_oswt_cse <= 1'b0;
      yfc_col_if_if_else_slc_yfc_col_if_if_else_ac_int_cctor_1_10_1_itm_1 <= 10'b0000000000;
      yfc_col_if_if_else_slc_yfc_col_if_if_else_ac_int_cctor_10_1_itm_1 <= 10'b0000000000;
      src_t_sva_1 <= 30'b000000000000000000000000000000;
      operator_13_false_1_operator_13_false_1_slc_yfc_row_y_0_33_itm_2 <= 1'b0;
      reg_yfc_col_not_mdf_sva_st_2_cse <= 1'b0;
      reg_yfc_row_asn_sft_lpi_1_dfm_st_2_cse <= 1'b0;
      reg_v_linebuffer_rsci_oswt_cse <= 1'b0;
      reg_src_rsci_oswt_cse <= 1'b0;
      yfc_col_x_lpi_1_dfm_2 <= 13'b0000000000000;
      exitL_exit_yfc_row_sva <= 1'b1;
      yfc_row_y_lpi_1_dfm_2 <= 13'b0000000000000;
      exit_yfc_row_lpi_1_dfm <= 1'b0;
      yfc_col_x_lpi_1_dfm_1_11_0 <= 12'b000000000000;
      operator_13_false_1_operator_13_false_1_slc_yfc_row_y_0_33_itm_1 <= 1'b0;
      yfc_col_not_mdf_sva_1 <= 1'b0;
      main_stage_0_2 <= 1'b0;
      main_stage_0_3 <= 1'b0;
      yfc_col_x_lpi_1_dfm_2_0 <= 1'b0;
      yfc_reg_m_nEb_not_tmp_1 <= 1'b0;
    end
    else if ( core_wen ) begin
      reg_v_dst_rsci_oswt_cse <= ~(((~((~(yfc_reg_yuvpattern & (~ operator_13_false_2_operator_13_false_2_slc_yfc_col_x_0_33_itm_2)))
          & operator_13_false_1_operator_13_false_1_slc_yfc_row_y_0_33_itm_2)) &
          yfc_reg_m_nEb) | or_dcpl_5);
      reg_y_dst_rsci_oswt_cse <= ~ or_dcpl_5;
      yfc_col_if_if_else_slc_yfc_col_if_if_else_ac_int_cctor_1_10_1_itm_1 <= z_out[10:1];
      yfc_col_if_if_else_slc_yfc_col_if_if_else_ac_int_cctor_10_1_itm_1 <= z_out_1[10:1];
      src_t_sva_1 <= src_rsci_idat_mxwt;
      operator_13_false_1_operator_13_false_1_slc_yfc_row_y_0_33_itm_2 <= operator_13_false_1_operator_13_false_1_slc_yfc_row_y_0_33_itm_1;
      reg_yfc_col_not_mdf_sva_st_2_cse <= yfc_col_not_mdf_sva_1;
      reg_yfc_row_asn_sft_lpi_1_dfm_st_2_cse <= yfc_row_asn_sft_lpi_1_dfm_1;
      reg_v_linebuffer_rsci_oswt_cse <= yfc_col_if_if_if_yfc_col_if_else_if_if_nor_rmff;
      reg_src_rsci_oswt_cse <= mux_17_nl & yfc_col_acc_2_itm_13_1;
      yfc_col_x_lpi_1_dfm_2 <= nl_yfc_col_x_lpi_1_dfm_2[12:0];
      exitL_exit_yfc_row_sva <= exit_yfc_row_lpi_1_dfm_1;
      yfc_row_y_lpi_1_dfm_2 <= MUX_v_13_2_2(yfc_row_acc_1_nl, yfc_row_y_lpi_1_dfm_3,
          or_41_nl);
      exit_yfc_row_lpi_1_dfm <= exit_yfc_row_lpi_1_dfm_1;
      yfc_col_x_lpi_1_dfm_1_11_0 <= yfc_col_x_lpi_1_dfm_3[11:0];
      operator_13_false_1_operator_13_false_1_slc_yfc_row_y_0_33_itm_1 <= MUX_s_1_2_2((yfc_col_x_lpi_1_dfm_3[0]),
          (yfc_row_y_lpi_1_dfm_3[0]), yfc_reg_yuvpattern);
      yfc_col_not_mdf_sva_1 <= ~ yfc_col_acc_2_itm_13_1;
      main_stage_0_2 <= 1'b1;
      main_stage_0_3 <= main_stage_0_2;
      yfc_col_x_lpi_1_dfm_2_0 <= yfc_col_x_lpi_1_dfm_1_11_0[0];
      yfc_reg_m_nEb_not_tmp_1 <= ~ yfc_reg_m_nEb;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      v_dst_rsci_idat <= 10'b0000000000;
      u_dst_rsci_idat <= 10'b0000000000;
    end
    else if ( yfc_col_if_if_else_and_cse ) begin
      v_dst_rsci_idat <= MUX1HOT_v_10_3_2(yfc_col_if_if_else_slc_yfc_col_if_if_else_ac_int_cctor_1_10_1_itm_1,
          (yfc_col_if_else_if_else_else_ac_int_cctor_1_sva_1[11:2]), (src_t_sva_1[9:0]),
          {and_dcpl_30 , and_dcpl_35 , and_dcpl_37});
      u_dst_rsci_idat <= MUX1HOT_v_10_3_2(yfc_col_if_if_else_slc_yfc_col_if_if_else_ac_int_cctor_10_1_itm_1,
          (yfc_col_if_else_if_else_else_ac_int_cctor_sva_1[11:2]), (src_t_sva_1[19:10]),
          {and_dcpl_30 , and_dcpl_35 , and_dcpl_37});
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      y_dst_rsci_idat <= 10'b0000000000;
    end
    else if ( core_wen & (~ or_dcpl_5) ) begin
      y_dst_rsci_idat <= src_t_sva_1[29:20];
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      v_tmp_420_11_lpi_1_dfm_6 <= 1'b0;
      u_tmp_420_11_lpi_1_dfm_6 <= 1'b0;
    end
    else if ( v_tmp_420_and_3_cse ) begin
      v_tmp_420_11_lpi_1_dfm_6 <= (yfc_col_if_else_if_else_else_ac_int_cctor_1_sva_1[11])
          & yfc_col_x_lpi_1_dfm_2_0;
      u_tmp_420_11_lpi_1_dfm_6 <= (yfc_col_if_else_if_else_else_ac_int_cctor_sva_1[11])
          & yfc_col_x_lpi_1_dfm_2_0;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      v_tmp_420_10_0_lpi_1_dfm_6 <= 11'b00000000000;
      u_tmp_420_10_0_lpi_1_dfm_6 <= 11'b00000000000;
    end
    else if ( v_tmp_420_and_4_cse ) begin
      v_tmp_420_10_0_lpi_1_dfm_6 <= MUX1HOT_v_11_3_2(z_out, (yfc_col_if_else_if_else_else_ac_int_cctor_1_sva_1[10:0]),
          ({1'b0 , v_tmp_422_v_tmp_422_mux1h_nl}), {v_tmp_420_and_1_cse , v_tmp_420_and_2_cse
          , (~ yfc_reg_yuvpattern)});
      u_tmp_420_10_0_lpi_1_dfm_6 <= MUX1HOT_v_11_3_2(z_out_1, (yfc_col_if_else_if_else_else_ac_int_cctor_sva_1[10:0]),
          ({1'b0 , u_tmp_422_u_tmp_422_mux1h_nl}), {v_tmp_420_and_1_cse , v_tmp_420_and_2_cse
          , (~ yfc_reg_yuvpattern)});
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      operator_13_false_2_operator_13_false_2_slc_yfc_col_x_0_33_itm_2 <= 1'b0;
      operator_13_false_2_operator_13_false_2_slc_yfc_col_x_0_33_itm_1 <= 1'b0;
    end
    else if ( operator_13_false_2_and_cse ) begin
      operator_13_false_2_operator_13_false_2_slc_yfc_col_x_0_33_itm_2 <= MUX_s_1_2_2(operator_13_false_2_operator_13_false_2_slc_yfc_col_x_0_33_itm_1,
          yfc_col_if_if_yfc_col_if_if_and_2_nl, and_dcpl_40);
      operator_13_false_2_operator_13_false_2_slc_yfc_col_x_0_33_itm_1 <= MUX_s_1_2_2((yfc_col_x_lpi_1_dfm_3[0]),
          yfc_col_if_if_yfc_col_if_if_and_nl, and_dcpl_40);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      yfc_row_asn_sft_lpi_1_dfm_1 <= 1'b0;
    end
    else if ( core_wen & or_43_rgt ) begin
      yfc_row_asn_sft_lpi_1_dfm_1 <= exit_yfc_row_lpi_1_dfm_1;
    end
  end
  assign nor_17_nl = ~(exit_yfc_row_lpi_1_dfm | exitL_exit_yfc_row_sva);
  assign or_nl = exitL_exit_yfc_row_sva | exit_yfc_row_lpi_1_dfm;
  assign mux_16_nl = MUX_s_1_2_2(nor_17_nl, or_nl, yfc_row_acc_2_itm_13);
  assign or_45_nl = yfc_row_acc_2_itm_13 | (~(yfc_col_not_mdf_sva_1 | yfc_row_asn_sft_lpi_1_dfm_1
      | exit_yfc_row_lpi_1_dfm | exitL_exit_yfc_row_sva));
  assign mux_17_nl = MUX_s_1_2_2(mux_16_nl, or_45_nl, main_stage_0_2);
  assign nl_yfc_col_x_lpi_1_dfm_2  = yfc_col_x_lpi_1_dfm_3 + 13'b0000000000001;
  assign nl_yfc_row_acc_1_nl = yfc_row_y_lpi_1_dfm_3 + 13'b0000000000001;
  assign yfc_row_acc_1_nl = nl_yfc_row_acc_1_nl[12:0];
  assign or_41_nl = (~(exit_yfc_row_lpi_1_dfm | exitL_exit_yfc_row_sva | main_stage_0_2))
      | yfc_col_acc_2_itm_13_1;
  assign v_tmp_422_v_tmp_422_mux1h_nl = MUX1HOT_v_10_3_2((v_tmp_420_10_0_lpi_1_dfm_6[9:0]),
      (src_rsci_idat_mxwt[9:0]), (z_out[9:0]), {(~ main_stage_0_2) , v_tmp_422_and_cse
      , v_tmp_422_and_1_cse});
  assign u_tmp_422_u_tmp_422_mux1h_nl = MUX1HOT_v_10_3_2((u_tmp_420_10_0_lpi_1_dfm_6[9:0]),
      (src_rsci_idat_mxwt[19:10]), (z_out_1[9:0]), {(~ main_stage_0_2) , v_tmp_422_and_cse
      , v_tmp_422_and_1_cse});
  assign yfc_col_if_if_yfc_col_if_if_and_2_nl = (z_out[10]) & (yfc_col_x_lpi_1_dfm_1_11_0[0]);
  assign yfc_col_if_if_yfc_col_if_if_and_nl = (z_out_1[10]) & (yfc_col_x_lpi_1_dfm_1_11_0[0]);
  assign yfc_col_if_else_if_else_if_yfc_col_if_else_if_else_if_and_2_nl = operator_13_false_2_operator_13_false_2_slc_yfc_col_x_0_33_itm_2
      & (~ yfc_reg_yuvpattern);
  assign yfc_col_if_else_if_else_if_mux_4_nl = MUX_v_10_2_2((v_tmp_420_10_0_lpi_1_dfm_6[9:0]),
      (src_t_sva_1[9:0]), yfc_reg_yuvpattern);
  assign yfc_col_if_else_if_else_if_mux_5_nl = MUX_v_10_2_2((src_rsci_idat_mxwt[9:0]),
      v_linebuffer_rsci_q_d_mxwt, yfc_reg_yuvpattern);
  assign nl_z_out = ({yfc_col_if_else_if_else_if_yfc_col_if_else_if_else_if_and_2_nl
      , yfc_col_if_else_if_else_if_mux_4_nl}) + conv_u2u_10_11(yfc_col_if_else_if_else_if_mux_5_nl);
  assign z_out = nl_z_out[10:0];
  assign yfc_col_if_else_if_else_if_yfc_col_if_else_if_else_if_and_3_nl = operator_13_false_2_operator_13_false_2_slc_yfc_col_x_0_33_itm_1
      & (~ yfc_reg_yuvpattern);
  assign yfc_col_if_else_if_else_if_mux_6_nl = MUX_v_10_2_2((u_tmp_420_10_0_lpi_1_dfm_6[9:0]),
      (src_t_sva_1[19:10]), yfc_reg_yuvpattern);
  assign yfc_col_if_else_if_else_if_mux_7_nl = MUX_v_10_2_2((src_rsci_idat_mxwt[19:10]),
      u_linebuffer_rsci_q_d_mxwt, yfc_reg_yuvpattern);
  assign nl_z_out_1 = ({yfc_col_if_else_if_else_if_yfc_col_if_else_if_else_if_and_3_nl
      , yfc_col_if_else_if_else_if_mux_6_nl}) + conv_u2u_10_11(yfc_col_if_else_if_else_if_mux_7_nl);
  assign z_out_1 = nl_z_out_1[10:0];

  function automatic [9:0] MUX1HOT_v_10_3_2;
    input [9:0] input_2;
    input [9:0] input_1;
    input [9:0] input_0;
    input [2:0] sel;
    reg [9:0] result;
  begin
    result = input_0 & {10{sel[0]}};
    result = result | ( input_1 & {10{sel[1]}});
    result = result | ( input_2 & {10{sel[2]}});
    MUX1HOT_v_10_3_2 = result;
  end
  endfunction


  function automatic [10:0] MUX1HOT_v_11_3_2;
    input [10:0] input_2;
    input [10:0] input_1;
    input [10:0] input_0;
    input [2:0] sel;
    reg [10:0] result;
  begin
    result = input_0 & {11{sel[0]}};
    result = result | ( input_1 & {11{sel[1]}});
    result = result | ( input_2 & {11{sel[2]}});
    MUX1HOT_v_11_3_2 = result;
  end
  endfunction


  function automatic [0:0] MUX_s_1_2_2;
    input [0:0] input_0;
    input [0:0] input_1;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function automatic [12:0] MUX_v_13_2_2;
    input [12:0] input_0;
    input [12:0] input_1;
    input [0:0] sel;
    reg [12:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_13_2_2 = result;
  end
  endfunction


  function automatic [0:0] readslicef_14_1_13;
    input [13:0] vector;
    reg [13:0] tmp;
  begin
    tmp = vector >> 13;
    readslicef_14_1_13 = tmp[0:0];
  end
  endfunction


  function automatic [10:0] conv_u2u_10_11 ;
    input [9:0]  vector ;
  begin
    conv_u2u_10_11 = {1'b0, vector};
  end
  endfunction


  function automatic [11:0] conv_u2u_11_12 ;
    input [10:0]  vector ;
  begin
    conv_u2u_11_12 = {1'b0, vector};
  end
  endfunction


  function automatic [13:0] conv_u2u_13_14 ;
    input [12:0]  vector ;
  begin
    conv_u2u_13_14 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns_core
// ------------------------------------------------------------------


module yuv444dns_core (
  clk, arst_n, top_reg_frameWidth, top_reg_frameHeight, yuvdns_reg_eb, yuvdns_reg_ysigma2,
      yuvdns_reg_uvsigma2, yuvdns_reg_yH2, yuvdns_reg_yinvH2, yuvdns_reg_uvH2, yuvdns_reg_uvinvH2,
      src_y_rsc_dat, src_y_rsc_vld, src_y_rsc_rdy, src_u_rsc_dat, src_u_rsc_vld,
      src_u_rsc_rdy, src_v_rsc_dat, src_v_rsc_vld, src_v_rsc_rdy, dst_y_rsc_dat,
      dst_y_rsc_vld, dst_y_rsc_rdy, dst_u_rsc_dat, dst_u_rsc_vld, dst_u_rsc_rdy,
      dst_v_rsc_dat, dst_v_rsc_vld, dst_v_rsc_rdy, ylineBuf_rsc_0_0_i_adra_d, ylineBuf_rsc_0_0_i_da_d,
      ylineBuf_rsc_0_0_i_ena_d, ylineBuf_rsc_0_0_i_wea_d, ylineBuf_rsc_0_0_i_qa_d,
      ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d, ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d,
      ylineBuf_rsc_1_0_i_adra_d, ylineBuf_rsc_1_0_i_da_d, ylineBuf_rsc_1_0_i_ena_d,
      ylineBuf_rsc_1_0_i_wea_d, ylineBuf_rsc_1_0_i_qa_d, ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, ylineBuf_rsc_2_0_i_adra_d,
      ylineBuf_rsc_2_0_i_da_d, ylineBuf_rsc_2_0_i_ena_d, ylineBuf_rsc_2_0_i_wea_d,
      ylineBuf_rsc_2_0_i_qa_d, ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, ylineBuf_rsc_3_0_i_adra_d,
      ylineBuf_rsc_3_0_i_da_d, ylineBuf_rsc_3_0_i_ena_d, ylineBuf_rsc_3_0_i_wea_d,
      ylineBuf_rsc_3_0_i_qa_d, ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, ylineBuf_rsc_4_0_i_adra_d,
      ylineBuf_rsc_4_0_i_da_d, ylineBuf_rsc_4_0_i_ena_d, ylineBuf_rsc_4_0_i_wea_d,
      ylineBuf_rsc_4_0_i_qa_d, ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, ylineBuf_rsc_5_0_i_adra_d,
      ylineBuf_rsc_5_0_i_da_d, ylineBuf_rsc_5_0_i_ena_d, ylineBuf_rsc_5_0_i_wea_d,
      ylineBuf_rsc_5_0_i_qa_d, ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, ylineBuf_rsc_6_0_i_adra_d,
      ylineBuf_rsc_6_0_i_da_d, ylineBuf_rsc_6_0_i_ena_d, ylineBuf_rsc_6_0_i_wea_d,
      ylineBuf_rsc_6_0_i_qa_d, ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, ylineBuf_rsc_7_0_i_adra_d,
      ylineBuf_rsc_7_0_i_da_d, ylineBuf_rsc_7_0_i_ena_d, ylineBuf_rsc_7_0_i_wea_d,
      ylineBuf_rsc_7_0_i_qa_d, ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, ulineBuf_rsc_0_0_i_adra_d,
      ulineBuf_rsc_0_0_i_da_d, ulineBuf_rsc_0_0_i_ena_d, ulineBuf_rsc_0_0_i_wea_d,
      ulineBuf_rsc_0_0_i_qa_d, ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, ulineBuf_rsc_1_0_i_adra_d,
      ulineBuf_rsc_1_0_i_da_d, ulineBuf_rsc_1_0_i_ena_d, ulineBuf_rsc_1_0_i_wea_d,
      ulineBuf_rsc_1_0_i_qa_d, ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, ulineBuf_rsc_2_0_i_adra_d,
      ulineBuf_rsc_2_0_i_da_d, ulineBuf_rsc_2_0_i_ena_d, ulineBuf_rsc_2_0_i_wea_d,
      ulineBuf_rsc_2_0_i_qa_d, ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, ulineBuf_rsc_3_0_i_adra_d,
      ulineBuf_rsc_3_0_i_da_d, ulineBuf_rsc_3_0_i_ena_d, ulineBuf_rsc_3_0_i_wea_d,
      ulineBuf_rsc_3_0_i_qa_d, ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, ulineBuf_rsc_4_0_i_adra_d,
      ulineBuf_rsc_4_0_i_da_d, ulineBuf_rsc_4_0_i_ena_d, ulineBuf_rsc_4_0_i_wea_d,
      ulineBuf_rsc_4_0_i_qa_d, ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, ulineBuf_rsc_5_0_i_adra_d,
      ulineBuf_rsc_5_0_i_da_d, ulineBuf_rsc_5_0_i_ena_d, ulineBuf_rsc_5_0_i_wea_d,
      ulineBuf_rsc_5_0_i_qa_d, ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, ulineBuf_rsc_6_0_i_adra_d,
      ulineBuf_rsc_6_0_i_da_d, ulineBuf_rsc_6_0_i_ena_d, ulineBuf_rsc_6_0_i_wea_d,
      ulineBuf_rsc_6_0_i_qa_d, ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, ulineBuf_rsc_7_0_i_adra_d,
      ulineBuf_rsc_7_0_i_da_d, ulineBuf_rsc_7_0_i_ena_d, ulineBuf_rsc_7_0_i_wea_d,
      ulineBuf_rsc_7_0_i_qa_d, ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, vlineBuf_rsc_0_0_i_adra_d,
      vlineBuf_rsc_0_0_i_da_d, vlineBuf_rsc_0_0_i_ena_d, vlineBuf_rsc_0_0_i_wea_d,
      vlineBuf_rsc_0_0_i_qa_d, vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, vlineBuf_rsc_1_0_i_adra_d,
      vlineBuf_rsc_1_0_i_da_d, vlineBuf_rsc_1_0_i_ena_d, vlineBuf_rsc_1_0_i_wea_d,
      vlineBuf_rsc_1_0_i_qa_d, vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, vlineBuf_rsc_2_0_i_adra_d,
      vlineBuf_rsc_2_0_i_da_d, vlineBuf_rsc_2_0_i_ena_d, vlineBuf_rsc_2_0_i_wea_d,
      vlineBuf_rsc_2_0_i_qa_d, vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, vlineBuf_rsc_3_0_i_adra_d,
      vlineBuf_rsc_3_0_i_da_d, vlineBuf_rsc_3_0_i_ena_d, vlineBuf_rsc_3_0_i_wea_d,
      vlineBuf_rsc_3_0_i_qa_d, vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, vlineBuf_rsc_4_0_i_adra_d,
      vlineBuf_rsc_4_0_i_da_d, vlineBuf_rsc_4_0_i_ena_d, vlineBuf_rsc_4_0_i_wea_d,
      vlineBuf_rsc_4_0_i_qa_d, vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, vlineBuf_rsc_5_0_i_adra_d,
      vlineBuf_rsc_5_0_i_da_d, vlineBuf_rsc_5_0_i_ena_d, vlineBuf_rsc_5_0_i_wea_d,
      vlineBuf_rsc_5_0_i_qa_d, vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, vlineBuf_rsc_6_0_i_adra_d,
      vlineBuf_rsc_6_0_i_da_d, vlineBuf_rsc_6_0_i_ena_d, vlineBuf_rsc_6_0_i_wea_d,
      vlineBuf_rsc_6_0_i_qa_d, vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, vlineBuf_rsc_7_0_i_adra_d,
      vlineBuf_rsc_7_0_i_da_d, vlineBuf_rsc_7_0_i_ena_d, vlineBuf_rsc_7_0_i_wea_d,
      vlineBuf_rsc_7_0_i_qa_d, vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d
);
  input clk;
  input arst_n;
  input [12:0] top_reg_frameWidth;
  input [12:0] top_reg_frameHeight;
  input yuvdns_reg_eb;
  input [13:0] yuvdns_reg_ysigma2;
  input [13:0] yuvdns_reg_uvsigma2;
  input [13:0] yuvdns_reg_yH2;
  input [17:0] yuvdns_reg_yinvH2;
  input [13:0] yuvdns_reg_uvH2;
  input [17:0] yuvdns_reg_uvinvH2;
  input [9:0] src_y_rsc_dat;
  input src_y_rsc_vld;
  output src_y_rsc_rdy;
  input [9:0] src_u_rsc_dat;
  input src_u_rsc_vld;
  output src_u_rsc_rdy;
  input [9:0] src_v_rsc_dat;
  input src_v_rsc_vld;
  output src_v_rsc_rdy;
  output [9:0] dst_y_rsc_dat;
  output dst_y_rsc_vld;
  input dst_y_rsc_rdy;
  output [9:0] dst_u_rsc_dat;
  output dst_u_rsc_vld;
  input dst_u_rsc_rdy;
  output [9:0] dst_v_rsc_dat;
  output dst_v_rsc_vld;
  input dst_v_rsc_rdy;
  output [11:0] ylineBuf_rsc_0_0_i_adra_d;
  output [9:0] ylineBuf_rsc_0_0_i_da_d;
  output [1:0] ylineBuf_rsc_0_0_i_ena_d;
  output [1:0] ylineBuf_rsc_0_0_i_wea_d;
  input [19:0] ylineBuf_rsc_0_0_i_qa_d;
  output [1:0] ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  output [11:0] ylineBuf_rsc_1_0_i_adra_d;
  output [9:0] ylineBuf_rsc_1_0_i_da_d;
  output [1:0] ylineBuf_rsc_1_0_i_ena_d;
  output [1:0] ylineBuf_rsc_1_0_i_wea_d;
  input [19:0] ylineBuf_rsc_1_0_i_qa_d;
  output [1:0] ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  output [11:0] ylineBuf_rsc_2_0_i_adra_d;
  output [9:0] ylineBuf_rsc_2_0_i_da_d;
  output [1:0] ylineBuf_rsc_2_0_i_ena_d;
  output [1:0] ylineBuf_rsc_2_0_i_wea_d;
  input [19:0] ylineBuf_rsc_2_0_i_qa_d;
  output [1:0] ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  output [11:0] ylineBuf_rsc_3_0_i_adra_d;
  output [9:0] ylineBuf_rsc_3_0_i_da_d;
  output [1:0] ylineBuf_rsc_3_0_i_ena_d;
  output [1:0] ylineBuf_rsc_3_0_i_wea_d;
  input [19:0] ylineBuf_rsc_3_0_i_qa_d;
  output [1:0] ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  output [11:0] ylineBuf_rsc_4_0_i_adra_d;
  output [9:0] ylineBuf_rsc_4_0_i_da_d;
  output [1:0] ylineBuf_rsc_4_0_i_ena_d;
  output [1:0] ylineBuf_rsc_4_0_i_wea_d;
  input [19:0] ylineBuf_rsc_4_0_i_qa_d;
  output [1:0] ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  output [11:0] ylineBuf_rsc_5_0_i_adra_d;
  output [9:0] ylineBuf_rsc_5_0_i_da_d;
  output [1:0] ylineBuf_rsc_5_0_i_ena_d;
  output [1:0] ylineBuf_rsc_5_0_i_wea_d;
  input [19:0] ylineBuf_rsc_5_0_i_qa_d;
  output [1:0] ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  output [11:0] ylineBuf_rsc_6_0_i_adra_d;
  output [9:0] ylineBuf_rsc_6_0_i_da_d;
  output [1:0] ylineBuf_rsc_6_0_i_ena_d;
  output [1:0] ylineBuf_rsc_6_0_i_wea_d;
  input [19:0] ylineBuf_rsc_6_0_i_qa_d;
  output [1:0] ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  output [11:0] ylineBuf_rsc_7_0_i_adra_d;
  output [9:0] ylineBuf_rsc_7_0_i_da_d;
  output [1:0] ylineBuf_rsc_7_0_i_ena_d;
  output [1:0] ylineBuf_rsc_7_0_i_wea_d;
  input [19:0] ylineBuf_rsc_7_0_i_qa_d;
  output [1:0] ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  output [11:0] ulineBuf_rsc_0_0_i_adra_d;
  output [9:0] ulineBuf_rsc_0_0_i_da_d;
  output [1:0] ulineBuf_rsc_0_0_i_ena_d;
  output [1:0] ulineBuf_rsc_0_0_i_wea_d;
  input [19:0] ulineBuf_rsc_0_0_i_qa_d;
  output [1:0] ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  output [11:0] ulineBuf_rsc_1_0_i_adra_d;
  output [9:0] ulineBuf_rsc_1_0_i_da_d;
  output [1:0] ulineBuf_rsc_1_0_i_ena_d;
  output [1:0] ulineBuf_rsc_1_0_i_wea_d;
  input [19:0] ulineBuf_rsc_1_0_i_qa_d;
  output [1:0] ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  output [11:0] ulineBuf_rsc_2_0_i_adra_d;
  output [9:0] ulineBuf_rsc_2_0_i_da_d;
  output [1:0] ulineBuf_rsc_2_0_i_ena_d;
  output [1:0] ulineBuf_rsc_2_0_i_wea_d;
  input [19:0] ulineBuf_rsc_2_0_i_qa_d;
  output [1:0] ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  output [11:0] ulineBuf_rsc_3_0_i_adra_d;
  output [9:0] ulineBuf_rsc_3_0_i_da_d;
  output [1:0] ulineBuf_rsc_3_0_i_ena_d;
  output [1:0] ulineBuf_rsc_3_0_i_wea_d;
  input [19:0] ulineBuf_rsc_3_0_i_qa_d;
  output [1:0] ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  output [11:0] ulineBuf_rsc_4_0_i_adra_d;
  output [9:0] ulineBuf_rsc_4_0_i_da_d;
  output [1:0] ulineBuf_rsc_4_0_i_ena_d;
  output [1:0] ulineBuf_rsc_4_0_i_wea_d;
  input [19:0] ulineBuf_rsc_4_0_i_qa_d;
  output [1:0] ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  output [11:0] ulineBuf_rsc_5_0_i_adra_d;
  output [9:0] ulineBuf_rsc_5_0_i_da_d;
  output [1:0] ulineBuf_rsc_5_0_i_ena_d;
  output [1:0] ulineBuf_rsc_5_0_i_wea_d;
  input [19:0] ulineBuf_rsc_5_0_i_qa_d;
  output [1:0] ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  output [11:0] ulineBuf_rsc_6_0_i_adra_d;
  output [9:0] ulineBuf_rsc_6_0_i_da_d;
  output [1:0] ulineBuf_rsc_6_0_i_ena_d;
  output [1:0] ulineBuf_rsc_6_0_i_wea_d;
  input [19:0] ulineBuf_rsc_6_0_i_qa_d;
  output [1:0] ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  output [11:0] ulineBuf_rsc_7_0_i_adra_d;
  output [9:0] ulineBuf_rsc_7_0_i_da_d;
  output [1:0] ulineBuf_rsc_7_0_i_ena_d;
  output [1:0] ulineBuf_rsc_7_0_i_wea_d;
  input [19:0] ulineBuf_rsc_7_0_i_qa_d;
  output [1:0] ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  output [11:0] vlineBuf_rsc_0_0_i_adra_d;
  output [9:0] vlineBuf_rsc_0_0_i_da_d;
  output [1:0] vlineBuf_rsc_0_0_i_ena_d;
  output [1:0] vlineBuf_rsc_0_0_i_wea_d;
  input [19:0] vlineBuf_rsc_0_0_i_qa_d;
  output [1:0] vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  output [11:0] vlineBuf_rsc_1_0_i_adra_d;
  output [9:0] vlineBuf_rsc_1_0_i_da_d;
  output [1:0] vlineBuf_rsc_1_0_i_ena_d;
  output [1:0] vlineBuf_rsc_1_0_i_wea_d;
  input [19:0] vlineBuf_rsc_1_0_i_qa_d;
  output [1:0] vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  output [11:0] vlineBuf_rsc_2_0_i_adra_d;
  output [9:0] vlineBuf_rsc_2_0_i_da_d;
  output [1:0] vlineBuf_rsc_2_0_i_ena_d;
  output [1:0] vlineBuf_rsc_2_0_i_wea_d;
  input [19:0] vlineBuf_rsc_2_0_i_qa_d;
  output [1:0] vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  output [11:0] vlineBuf_rsc_3_0_i_adra_d;
  output [9:0] vlineBuf_rsc_3_0_i_da_d;
  output [1:0] vlineBuf_rsc_3_0_i_ena_d;
  output [1:0] vlineBuf_rsc_3_0_i_wea_d;
  input [19:0] vlineBuf_rsc_3_0_i_qa_d;
  output [1:0] vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  output [11:0] vlineBuf_rsc_4_0_i_adra_d;
  output [9:0] vlineBuf_rsc_4_0_i_da_d;
  output [1:0] vlineBuf_rsc_4_0_i_ena_d;
  output [1:0] vlineBuf_rsc_4_0_i_wea_d;
  input [19:0] vlineBuf_rsc_4_0_i_qa_d;
  output [1:0] vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  output [11:0] vlineBuf_rsc_5_0_i_adra_d;
  output [9:0] vlineBuf_rsc_5_0_i_da_d;
  output [1:0] vlineBuf_rsc_5_0_i_ena_d;
  output [1:0] vlineBuf_rsc_5_0_i_wea_d;
  input [19:0] vlineBuf_rsc_5_0_i_qa_d;
  output [1:0] vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  output [11:0] vlineBuf_rsc_6_0_i_adra_d;
  output [9:0] vlineBuf_rsc_6_0_i_da_d;
  output [1:0] vlineBuf_rsc_6_0_i_ena_d;
  output [1:0] vlineBuf_rsc_6_0_i_wea_d;
  input [19:0] vlineBuf_rsc_6_0_i_qa_d;
  output [1:0] vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  output [11:0] vlineBuf_rsc_7_0_i_adra_d;
  output [9:0] vlineBuf_rsc_7_0_i_da_d;
  output [1:0] vlineBuf_rsc_7_0_i_ena_d;
  output [1:0] vlineBuf_rsc_7_0_i_wea_d;
  input [19:0] vlineBuf_rsc_7_0_i_qa_d;
  output [1:0] vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;


  // Interconnect Declarations
  wire core_wen;
  wire core_wten;
  wire src_y_rsci_wen_comp;
  wire [9:0] src_y_rsci_idat_mxwt;
  wire src_u_rsci_wen_comp;
  wire [9:0] src_u_rsci_idat_mxwt;
  wire src_v_rsci_wen_comp;
  wire [9:0] src_v_rsci_idat_mxwt;
  wire dst_y_rsci_wen_comp;
  reg [9:0] dst_y_rsci_idat;
  wire dst_u_rsci_wen_comp;
  reg [9:0] dst_u_rsci_idat;
  wire dst_v_rsci_wen_comp;
  reg [9:0] dst_v_rsci_idat;
  wire [9:0] ylineBuf_rsc_0_0_i_qa_d_mxwt;
  wire [9:0] ylineBuf_rsc_1_0_i_qa_d_mxwt;
  wire [9:0] ylineBuf_rsc_2_0_i_qa_d_mxwt;
  wire [9:0] ylineBuf_rsc_3_0_i_qa_d_mxwt;
  wire [9:0] ylineBuf_rsc_4_0_i_qa_d_mxwt;
  wire [9:0] ylineBuf_rsc_5_0_i_qa_d_mxwt;
  wire [9:0] ylineBuf_rsc_6_0_i_qa_d_mxwt;
  wire [9:0] ylineBuf_rsc_7_0_i_qa_d_mxwt;
  wire [9:0] ulineBuf_rsc_0_0_i_qa_d_mxwt;
  wire [9:0] ulineBuf_rsc_1_0_i_qa_d_mxwt;
  wire [9:0] ulineBuf_rsc_2_0_i_qa_d_mxwt;
  wire [9:0] ulineBuf_rsc_3_0_i_qa_d_mxwt;
  wire [9:0] ulineBuf_rsc_4_0_i_qa_d_mxwt;
  wire [9:0] ulineBuf_rsc_5_0_i_qa_d_mxwt;
  wire [9:0] ulineBuf_rsc_6_0_i_qa_d_mxwt;
  wire [9:0] ulineBuf_rsc_7_0_i_qa_d_mxwt;
  wire [9:0] vlineBuf_rsc_0_0_i_qa_d_mxwt;
  wire [9:0] vlineBuf_rsc_1_0_i_qa_d_mxwt;
  wire [9:0] vlineBuf_rsc_2_0_i_qa_d_mxwt;
  wire [9:0] vlineBuf_rsc_3_0_i_qa_d_mxwt;
  wire [9:0] vlineBuf_rsc_4_0_i_qa_d_mxwt;
  wire [9:0] vlineBuf_rsc_5_0_i_qa_d_mxwt;
  wire [9:0] vlineBuf_rsc_6_0_i_qa_d_mxwt;
  wire [9:0] vlineBuf_rsc_7_0_i_qa_d_mxwt;
  wire [3:0] in_window_loop_acc_9_tmp;
  wire [4:0] nl_in_window_loop_acc_9_tmp;
  wire [3:0] window_read_acc_tmp;
  wire [4:0] nl_window_read_acc_tmp;
  wire [3:0] nlm_row_loop_2_acc_tmp;
  wire [4:0] nl_nlm_row_loop_2_acc_tmp;
  wire [3:0] nlm_row_loop_1_acc_tmp;
  wire [4:0] nl_nlm_row_loop_1_acc_tmp;
  wire [3:0] nlm_row_loop_acc_tmp;
  wire [4:0] nl_nlm_row_loop_acc_tmp;
  wire [3:0] nlm_col_loop_2_acc_tmp;
  wire [4:0] nl_nlm_col_loop_2_acc_tmp;
  wire [3:0] nlm_col_loop_1_acc_tmp;
  wire [4:0] nl_nlm_col_loop_1_acc_tmp;
  wire [3:0] nlm_col_loop_acc_tmp;
  wire [4:0] nl_nlm_col_loop_acc_tmp;
  wire [2:0] lines_read_acc_tmp;
  wire [3:0] nl_lines_read_acc_tmp;
  wire [2:0] addon_loop_1_acc_6_tmp;
  wire [3:0] nl_addon_loop_1_acc_6_tmp;
  wire [3:0] in_window_loop_acc_tmp;
  wire [4:0] nl_in_window_loop_acc_tmp;
  wire [4:0] operator_4_false_acc_1_tmp;
  wire [5:0] nl_operator_4_false_acc_1_tmp;
  wire nor_tmp;
  wire and_dcpl_73;
  wire and_dcpl_80;
  wire and_tmp_3;
  wire or_dcpl_66;
  wire or_tmp_81;
  wire and_tmp_20;
  wire and_tmp_21;
  wire or_tmp_108;
  wire and_dcpl_171;
  wire and_dcpl_172;
  wire and_dcpl_173;
  wire and_dcpl_175;
  wire or_dcpl_91;
  wire or_dcpl_92;
  wire or_dcpl_94;
  wire or_dcpl_97;
  wire or_dcpl_98;
  wire or_dcpl_99;
  wire or_dcpl_102;
  wire or_dcpl_105;
  wire or_dcpl_108;
  wire or_dcpl_111;
  wire or_dcpl_114;
  wire and_dcpl_201;
  wire and_dcpl_202;
  wire or_tmp_112;
  wire mux_tmp_125;
  wire mux_tmp_127;
  wire or_dcpl_125;
  wire or_dcpl_126;
  wire or_dcpl_130;
  wire or_dcpl_136;
  wire or_dcpl_138;
  wire or_tmp_122;
  wire mux_tmp_132;
  wire or_dcpl_141;
  wire or_dcpl_143;
  wire or_dcpl_145;
  wire or_dcpl_146;
  wire or_dcpl_152;
  wire or_dcpl_156;
  wire not_tmp_179;
  wire or_dcpl_160;
  wire or_dcpl_166;
  wire or_dcpl_167;
  wire or_dcpl_168;
  wire or_dcpl_171;
  wire or_dcpl_178;
  wire or_dcpl_186;
  wire or_dcpl_188;
  wire or_dcpl_190;
  wire and_dcpl_204;
  wire and_dcpl_208;
  wire and_dcpl_213;
  wire and_dcpl_214;
  wire and_dcpl_215;
  wire and_dcpl_218;
  wire or_dcpl_196;
  wire or_dcpl_201;
  wire or_dcpl_202;
  wire or_dcpl_203;
  wire and_dcpl_224;
  wire and_dcpl_225;
  wire or_tmp_152;
  wire and_tmp_28;
  wire and_tmp_29;
  wire lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_5_2_1;
  wire [1:0] lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_5_1_0_1;
  wire yuvdns_col_asn_sft_lpi_1_dfm_mx0;
  wire lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_2_1;
  wire exit_nlm_row_loop_lpi_1_dfm_3;
  wire nlm_row_loop_equal_tmp_3;
  wire nlm_row_loop_or_tmp_1;
  wire nlm_row_loop_and_253_ssc_1;
  wire [1:0] lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_1_0_1;
  wire nlm_row_loop_equal_tmp_4;
  wire nlm_row_loop_equal_tmp_5;
  wire nlm_row_loop_nor_tmp_1;
  wire exit_out_window_loop_lpi_1_dfm_3;
  wire nlm_col_loop_and_1_svs_1;
  wire [2:0] nlm_row_loop_2_j_lpi_1_dfm_2_0_mx0;
  wire [2:0] nlm_col_loop_2_i_lpi_1_dfm_2_0_mx0;
  wire [2:0] nlm_row_loop_1_j_lpi_1_dfm_2_0_mx0;
  wire [2:0] nlm_col_loop_1_i_lpi_1_dfm_2_0_mx0;
  wire [2:0] nlm_row_loop_j_lpi_1_dfm_2_0_mx0;
  wire [2:0] nlm_col_loop_i_lpi_1_dfm_2_0_mx0;
  reg lfst_exit_nlm_row_loop_lpi_1;
  wire nlm_row_loop_nlm_row_loop_and_cse_1;
  wire nlm_row_loop_nlm_row_loop_nor_1_cse_1;
  reg lfst_exitL_exit_nlm_row_loop_lpi_1_2;
  reg [1:0] lfst_exitL_exit_nlm_row_loop_lpi_1_1_0;
  reg sfi_yuvdns_reg_eb_lpi_1;
  wire lfst_exitL_exitL_exit_nlm_row_loop_lpi_1_dfm_1;
  reg lfst_exitL_exitL_exit_nlm_row_loop_lpi_1;
  wire sfi_exit_yuvdns_col_lpi_1_dfm_1;
  reg sfi_exit_yuvdns_col_lpi_1;
  wire lfst_exitL_exitL_exitL_exit_nlm_row_loop_lpi_1_dfm_1;
  reg lfst_exitL_exitL_exitL_exit_nlm_row_loop_lpi_1;
  wire exitL_exitL_exitL_exitL_exit_nlm_row_loop_lpi_1_dfm_1;
  reg exitL_exitL_exitL_exitL_exit_nlm_row_loop_lpi_1;
  reg lfst_exit_yuvdns_col_lpi_1;
  wire lfst_exitL_exit_yuvdns_col_lpi_1_dfm_1;
  reg lfst_exitL_exit_yuvdns_col_lpi_1;
  wire exitL_exitL_exit_yuvdns_col_lpi_1_dfm_1;
  reg exitL_exitL_exit_yuvdns_col_lpi_1;
  wire addon_loop_2_addon_loop_2_nor_1_cse_1;
  wire lfst_exit_addon_loop_2_lpi_1_dfm_1_1;
  wire lfst_exit_addon_loop_2_lpi_1_dfm_0_1;
  reg lfst_exit_addon_loop_2_lpi_1_dfm_4_1;
  reg lfst_exit_addon_loop_2_lpi_1_dfm_4_0;
  reg [12:0] yuvdns_row_row_lpi_1;
  reg window_read_and_stg_3_8_sva_2;
  reg nlm_row_loop_equal_tmp_2;
  wire yuvdns_col_and_11_tmp_1;
  wire addon_loop_2_addon_loop_2_nor_250_tmp_1;
  reg in_window_loop_and_187_cse_sva_1;
  reg nlm_row_loop_or_tmp_2;
  reg addon_loop_2_equal_tmp_2;
  reg addon_loop_2_equal_tmp_1_2;
  reg yuvdns_col_asn_sft_lpi_1_dfm_2;
  reg nlm_row_loop_equal_tmp_2_2;
  wire [13:0] yuvdns_nlm_2_totalweight_1_lpi_1_dfm_1_mx0;
  wire [7:0] yuvdns_nlm_2_maxweight_lpi_1_dfm_2_mx0;
  wire [13:0] yuvdns_nlm_1_totalweight_1_lpi_1_dfm_1_mx0;
  wire [7:0] yuvdns_nlm_1_maxweight_lpi_1_dfm_2_mx0;
  wire [13:0] yuvdns_nlm_totalweight_1_lpi_1_dfm_1_mx0;
  wire [7:0] yuvdns_nlm_maxweight_lpi_1_dfm_2_mx0;
  wire lfst_exit_addon_loop_2_lpi_1_dfm_4_1_1;
  wire lfst_exit_addon_loop_2_lpi_1_dfm_4_0_1;
  wire addon_loop_2_addon_loop_2_nor_242_cse_1;
  wire yuvdns_and_m1c_1;
  wire exit_nlm_row_loop_sva_2_mx1;
  wire yuvdns_and_3_m1c_1;
  wire yuvdns_col_and_245_tmp_1;
  reg yuvdns_asn_sft_lpi_1;
  wire yuvdns_row_or_tmp_1;
  wire yuvdns_row_asn_sft_lpi_1_dfm_mx0;
  wire addon_loop_2_equal_tmp_2_1;
  wire addon_loop_2_equal_tmp_3;
  wire addon_loop_2_addon_loop_2_for_nand_psp_mx0;
  wire addon_loop_2_and_460_ssc_1;
  wire addon_loop_2_and_461_ssc_1;
  wire addon_loop_2_addon_loop_2_for_nand_psp_mx0w0;
  wire exit_yuvdns_row_lpi_1_dfm_1;
  wire addon_loop_2_or_tmp_1;
  wire exit_yuvdns_col_lpi_1_dfm_1;
  wire yuvdns_col_asn_sft_1_lpi_1_dfm_mx0;
  wire exitL_exitL_exit_nlm_row_loop_lpi_1_dfm_1;
  wire [3:0] out_window_loop_i_sva_2;
  wire [4:0] nl_out_window_loop_i_sva_2;
  reg [2:0] window_read_i_2_0_lpi_1;
  wire lines_read_or_tmp_1;
  wire lines_read_equal_tmp_8;
  reg [12:0] addon_loop_2_for_j_lpi_1;
  wire in_window_loop_and_187_cse_sva_1_1;
  reg nlm_row_loop_or_tmp_1_1;
  reg window_read_and_stg_3_8_sva_1;
  reg nlm_row_loop_equal_tmp_1;
  reg nlm_row_loop_equal_tmp_1_1;
  reg nlm_row_loop_equal_tmp_2_1;
  reg nlm_row_loop_nor_tmp_1_1;
  reg in_window_loop_and_stg_5_8_sva_1;
  reg mgc_2147483647_3_dfmergeen_1_lpi_1_dfm_2_st_1_1;
  wire [12:0] yuvdns_col_col_lpi_1_dfm_1;
  wire in_window_loop_and_stg_5_15_sva_mx0;
  wire nlm_row_loop_nlm_row_loop_nor_3_cse_1;
  wire in_window_loop_and_stg_5_14_sva_mx0;
  wire in_window_loop_and_stg_5_13_sva_mx0;
  wire in_window_loop_and_stg_5_12_sva_mx0;
  wire in_window_loop_and_stg_5_11_sva_mx0;
  wire in_window_loop_and_stg_5_10_sva_mx0;
  wire in_window_loop_and_stg_5_9_sva_mx0;
  wire in_window_loop_and_stg_5_8_sva_mx0;
  wire in_window_loop_and_stg_5_6_sva_mx0;
  wire in_window_loop_and_stg_5_5_sva_mx0;
  wire in_window_loop_and_stg_5_4_sva_mx0;
  wire in_window_loop_and_stg_5_3_sva_mx0;
  wire in_window_loop_and_stg_5_2_sva_mx0;
  wire in_window_loop_and_stg_5_1_sva_mx0;
  wire in_window_loop_and_stg_5_0_sva_mx0;
  wire in_window_loop_and_stg_4_31_sva_mx0;
  wire in_window_loop_and_stg_4_29_sva_mx0;
  wire in_window_loop_and_stg_4_28_sva_mx0;
  wire in_window_loop_and_stg_4_27_sva_mx0;
  wire in_window_loop_and_stg_3_10_sva_mx0;
  wire in_window_loop_and_stg_4_25_sva_mx0;
  wire in_window_loop_and_stg_4_24_sva_mx0;
  wire in_window_loop_and_stg_4_23_sva_mx0;
  wire in_window_loop_and_stg_4_22_sva_mx0;
  wire in_window_loop_and_stg_4_20_sva_mx0;
  wire in_window_loop_and_stg_4_19_sva_mx0;
  wire in_window_loop_and_stg_4_18_sva_mx0;
  wire in_window_loop_and_stg_3_1_sva_mx0;
  wire in_window_loop_and_stg_4_16_sva_mx0;
  wire in_window_loop_and_stg_4_15_sva_mx0;
  wire in_window_loop_and_stg_4_14_sva_mx0;
  wire in_window_loop_and_stg_4_13_sva_mx0;
  wire in_window_loop_and_stg_4_11_sva_mx0;
  wire in_window_loop_and_stg_4_10_sva_mx0;
  wire in_window_loop_and_stg_4_9_sva_mx0;
  wire in_window_loop_and_stg_4_8_sva_mx0;
  wire in_window_loop_and_stg_4_7_sva_mx0;
  wire in_window_loop_and_stg_4_6_sva_mx0;
  wire in_window_loop_and_stg_4_5_sva_mx0;
  wire in_window_loop_and_stg_4_4_sva_mx0;
  wire in_window_loop_and_stg_4_2_sva_mx0;
  wire in_window_loop_and_stg_4_1_sva_mx0;
  wire in_window_loop_and_stg_4_0_sva_mx0;
  wire in_window_loop_and_stg_3_14_sva_mx0;
  wire in_window_loop_and_stg_3_5_sva_mx0;
  wire [12:0] yuvdns_row_row_lpi_1_dfm_1;
  wire in_window_loop_and_stg_3_0_sva_1;
  wire in_window_loop_and_stg_3_2_sva_1;
  wire in_window_loop_and_stg_3_3_sva_1;
  wire in_window_loop_and_stg_3_4_sva_1;
  wire in_window_loop_and_stg_3_6_sva_1;
  wire in_window_loop_and_stg_3_7_sva_1;
  wire in_window_loop_and_stg_3_8_sva_1;
  wire in_window_loop_and_stg_3_9_sva_1;
  wire in_window_loop_and_stg_3_11_sva_1;
  wire in_window_loop_and_stg_3_12_sva_1;
  wire in_window_loop_and_stg_3_13_sva_1;
  wire in_window_loop_and_stg_3_15_sva_1;
  wire in_window_loop_and_stg_4_0_sva_mx0w0;
  wire in_window_loop_and_stg_2_0_sva_1;
  wire in_window_loop_and_stg_4_1_sva_mx0w0;
  wire in_window_loop_and_stg_3_1_sva_mx0w0;
  wire in_window_loop_and_stg_2_1_sva_1;
  wire in_window_loop_and_stg_4_2_sva_mx0w0;
  wire in_window_loop_and_stg_2_2_sva_1;
  wire in_window_loop_and_stg_2_3_sva_1;
  wire in_window_loop_and_stg_4_4_sva_mx0w0;
  wire in_window_loop_and_stg_2_4_sva_1;
  wire in_window_loop_and_stg_4_5_sva_mx0w0;
  wire in_window_loop_and_stg_3_5_sva_mx0w0;
  wire in_window_loop_and_stg_2_5_sva_1;
  wire in_window_loop_and_stg_4_6_sva_mx0w0;
  wire in_window_loop_and_stg_2_6_sva_1;
  wire in_window_loop_and_stg_2_7_sva_1;
  wire in_window_loop_and_stg_4_8_sva_mx0w0;
  wire in_window_loop_and_stg_1_0_sva_1;
  wire in_window_loop_and_stg_4_9_sva_mx0w0;
  wire in_window_loop_and_stg_1_1_sva_1;
  wire in_window_loop_and_stg_4_10_sva_mx0w0;
  wire in_window_loop_and_stg_3_10_sva_mx0w0;
  wire in_window_loop_and_stg_1_2_sva_1;
  wire in_window_loop_and_stg_4_11_sva_mx0w0;
  wire in_window_loop_and_stg_1_3_sva_1;
  wire in_window_loop_and_stg_4_13_sva_mx0w0;
  wire in_window_loop_and_stg_4_14_sva_mx0w0;
  wire in_window_loop_and_stg_3_14_sva_mx0w0;
  wire in_window_loop_and_stg_4_15_sva_mx0w0;
  wire window_read_and_stg_1_0_sva_1;
  wire window_read_and_stg_1_2_sva_1;
  wire window_read_and_stg_1_1_sva_1;
  reg sfi_yuvdns_land_lpi_1;
  wire addon_loop_2_or_578_tmp_1;
  reg addon_loop_2_and_698_itm_1;
  reg main_stage_0_2;
  reg window_read_and_stg_3_14_sva_1;
  reg yuvdns_col_asn_sft_lpi_1_dfm_1;
  reg addon_loop_2_equal_tmp_1_1;
  reg addon_loop_2_equal_tmp_1;
  reg yuvdns_row_asn_sft_lpi_1_dfm_1;
  reg window_read_and_stg_3_5_sva_1;
  reg window_read_and_stg_4_3_sva_1;
  reg window_read_and_stg_3_10_sva_1;
  reg window_read_and_stg_3_1_sva_1;
  reg window_read_and_stg_3_12_sva_1;
  reg [1:0] lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_st_1_1_0;
  reg addon_loop_2_for_addon_loop_2_for_and_20_itm_1;
  reg yuvdns_col_asn_sft_1_lpi_1_dfm_1;
  reg lfst_exit_addon_loop_2_lpi_1_dfm_st_1_1;
  reg addon_loop_2_and_509_itm_1;
  reg window_read_window_read_nor_5_itm_1;
  reg nlm_col_loop_lor_lpi_1_dfm_st_1;
  reg addon_loop_2_for_addon_loop_2_for_nor_2_itm_1;
  reg addon_loop_2_for_slc_13_svs_st_1;
  reg addon_loop_2_for_addon_loop_2_for_and_18_itm_1;
  reg addon_loop_2_and_740_itm_1;
  reg addon_loop_2_for_addon_loop_2_for_and_19_itm_1;
  reg yuvdns_col_if_1_yuvdns_col_if_1_or_itm_1;
  reg lfst_exit_addon_loop_2_lpi_1_dfm_st_1_0;
  reg [2:0] lines_read_acc_cse_sva_st_2_1;
  reg yuvdns_col_asn_sft_1_lpi_1;
  reg yuvdns_row_asn_sft_lpi_1;
  reg exitL_exit_addon_loop_2_sva;
  reg yuvdns_col_asn_sft_lpi_1;
  reg main_stage_0_3;
  reg addon_loop_2_for_addon_loop_2_for_and_20_itm_2;
  reg yuvdns_col_if_1_yuvdns_col_if_1_or_itm_2;
  reg lfst_exit_addon_loop_2_lpi_1_dfm_st_2_1;
  reg lfst_exit_addon_loop_2_lpi_1_dfm_st_2_0;
  reg addon_loop_2_for_slc_13_svs_st_2;
  reg addon_loop_2_and_653_itm_2;
  reg addon_loop_2_and_714_itm_2;
  reg window_read_and_stg_3_14_sva_2;
  reg window_read_and_stg_3_5_sva_2;
  reg window_read_and_stg_3_12_sva_2;
  reg window_read_and_stg_4_3_sva_2;
  reg window_read_and_stg_3_10_sva_2;
  reg window_read_and_stg_3_1_sva_2;
  reg nlm_col_loop_lor_lpi_1_dfm_2;
  reg nlm_col_loop_2_lor_lpi_1_dfm_2;
  reg sfi_exit_yuvdns_col_lpi_1_dfm_1_1;
  reg [2:0] addon_loop_2_for_acc_8_cse_sva_st_2_1;
  reg [12:0] yuvdns_col_col_lpi_1_dfm_1_1;
  reg operator_4_false_3_slc_operator_4_false_3_acc_3_svs_1;
  reg addon_loop_2_and_674_itm_1;
  reg addon_loop_2_and_675_itm_1;
  reg addon_loop_2_and_676_itm_1;
  reg addon_loop_2_and_677_itm_1;
  reg addon_loop_2_and_678_itm_1;
  reg addon_loop_2_and_679_itm_1;
  reg addon_loop_2_and_680_itm_1;
  reg addon_loop_2_and_633_itm_1;
  reg addon_loop_2_and_634_itm_1;
  reg addon_loop_2_and_635_itm_1;
  reg addon_loop_2_and_636_itm_1;
  reg addon_loop_2_and_637_itm_1;
  reg addon_loop_2_and_638_itm_1;
  reg addon_loop_2_and_639_itm_1;
  reg addon_loop_2_and_640_itm_1;
  reg addon_loop_2_and_641_itm_1;
  reg addon_loop_2_and_642_itm_1;
  reg addon_loop_2_and_643_itm_1;
  reg addon_loop_2_and_644_itm_1;
  reg addon_loop_2_and_645_itm_1;
  reg addon_loop_2_and_646_itm_1;
  reg addon_loop_2_and_647_itm_1;
  reg addon_loop_2_and_648_itm_1;
  reg addon_loop_2_and_649_itm_1;
  reg addon_loop_2_and_650_itm_1;
  reg addon_loop_2_and_651_itm_1;
  reg addon_loop_2_and_652_itm_1;
  reg addon_loop_2_and_654_itm_1;
  reg addon_loop_2_and_655_itm_1;
  reg addon_loop_2_and_656_itm_1;
  reg addon_loop_2_and_657_itm_1;
  reg addon_loop_2_and_658_itm_1;
  reg addon_loop_2_and_659_itm_1;
  reg addon_loop_2_and_660_itm_1;
  reg addon_loop_2_and_661_itm_1;
  reg addon_loop_2_and_662_itm_1;
  reg addon_loop_2_and_663_itm_1;
  reg addon_loop_2_and_664_itm_1;
  reg addon_loop_2_and_665_itm_1;
  reg addon_loop_2_and_666_itm_1;
  reg addon_loop_2_and_667_itm_1;
  reg addon_loop_2_and_668_itm_1;
  reg addon_loop_2_and_669_itm_1;
  reg addon_loop_2_and_670_itm_1;
  reg addon_loop_2_and_671_itm_1;
  reg addon_loop_2_and_672_itm_1;
  reg addon_loop_2_and_673_itm_1;
  reg addon_loop_2_and_681_itm_1;
  reg addon_loop_2_and_682_itm_1;
  reg addon_loop_2_and_683_itm_1;
  reg addon_loop_2_and_684_itm_1;
  reg addon_loop_2_and_685_itm_1;
  reg addon_loop_2_and_686_itm_1;
  reg addon_loop_2_and_687_itm_1;
  reg addon_loop_2_and_688_itm_1;
  reg addon_loop_2_and_632_itm_1;
  reg addon_loop_2_and_625_itm_1;
  reg addon_loop_2_and_626_itm_1;
  reg addon_loop_2_and_627_itm_1;
  reg addon_loop_2_and_628_itm_1;
  reg addon_loop_2_and_629_itm_1;
  reg addon_loop_2_and_630_itm_1;
  reg addon_loop_2_and_631_itm_1;
  reg addon_loop_2_and_617_itm_1;
  reg addon_loop_2_and_618_itm_1;
  reg addon_loop_2_and_619_itm_1;
  reg addon_loop_2_and_620_itm_1;
  reg addon_loop_2_and_621_itm_1;
  reg addon_loop_2_and_622_itm_1;
  reg addon_loop_2_and_623_itm_1;
  reg addon_loop_2_and_624_itm_1;
  wire [20:0] yuvdns_nlm_2_diff_lpi_1_dfm_1;
  reg [9:0] vWindow_5_5_lpi_1;
  reg [9:0] vWindow_5_4_lpi_1;
  reg [9:0] vWindow_5_3_lpi_1;
  reg [9:0] vWindow_4_5_lpi_1;
  wire [9:0] vWindow_4_4_lpi_1_mx0;
  reg [9:0] vWindow_4_3_lpi_1;
  reg [9:0] vWindow_3_5_lpi_1;
  reg [9:0] vWindow_3_4_lpi_1;
  reg [9:0] vWindow_3_3_lpi_1;
  wire [20:0] yuvdns_nlm_1_diff_lpi_1_dfm_1;
  reg [9:0] uWindow_5_5_lpi_1;
  reg [9:0] uWindow_5_4_lpi_1;
  reg [9:0] uWindow_5_3_lpi_1;
  reg [9:0] uWindow_4_5_lpi_1;
  wire [9:0] uWindow_4_4_lpi_1_mx0;
  reg [9:0] uWindow_4_3_lpi_1;
  reg [9:0] uWindow_3_5_lpi_1;
  reg [9:0] uWindow_3_4_lpi_1;
  reg [9:0] uWindow_3_3_lpi_1;
  wire [20:0] yuvdns_nlm_diff_lpi_1_dfm_1;
  reg [9:0] yWindow_5_5_lpi_1;
  reg [9:0] yWindow_5_4_lpi_1;
  reg [9:0] yWindow_5_3_lpi_1;
  reg [9:0] yWindow_4_5_lpi_1;
  wire [9:0] yWindow_4_4_lpi_1_mx0;
  reg [9:0] yWindow_4_3_lpi_1;
  reg [9:0] yWindow_3_5_lpi_1;
  reg [9:0] yWindow_3_4_lpi_1;
  reg [9:0] yWindow_3_3_lpi_1;
  reg [7:0] yuvdns_nlm_2_maxweight_lpi_1_dfm_1;
  wire [7:0] yuvdns_nlm_2_weight_lpi_1_dfm_2;
  reg [7:0] yuvdns_nlm_1_maxweight_lpi_1_dfm_1;
  wire [7:0] yuvdns_nlm_1_weight_lpi_1_dfm_2;
  reg [7:0] yuvdns_nlm_maxweight_lpi_1_dfm_1;
  wire [7:0] yuvdns_nlm_weight_lpi_1_dfm_2;
  wire [28:0] operator_32_false_2_acc_psp_sva_1;
  wire [29:0] nl_operator_32_false_2_acc_psp_sva_1;
  wire [28:0] operator_32_false_1_acc_psp_sva_1;
  wire [29:0] nl_operator_32_false_1_acc_psp_sva_1;
  wire [28:0] operator_32_false_acc_psp_sva_1;
  wire [29:0] nl_operator_32_false_acc_psp_sva_1;
  wire exit_nlm_row_loop_sva_2_mx0w0;
  reg exit_nlm_row_loop_sva_2;
  wire sfi_yuvdns_reg_eb_lpi_1_dfm_1;
  reg [2:0] addon_loop_2_for_acc_8_cse_sva_st_2_2;
  wire [2:0] in_window_loop_acc_psp_mx0_3_1;
  wire [9:0] yuvdns_abs_a_26_9_0_sva_1;
  wire [9:0] nlm_col_loop_2_if_ac_int_cctor_7_9_0_sva_1;
  wire [9:0] yuvdns_abs_a_24_9_0_sva_1;
  wire [9:0] yuvdns_abs_a_23_9_0_sva_1;
  wire [9:0] nlm_col_loop_2_if_ac_int_cctor_4_9_0_sva_mx0w1;
  wire [9:0] yuvdns_abs_a_21_9_0_sva_1;
  wire [9:0] yuvdns_abs_a_20_9_0_sva_1;
  wire [9:0] yuvdns_abs_a_19_9_0_sva_1;
  wire [9:0] yuvdns_abs_a_18_9_0_sva_1;
  wire [9:0] yuvdns_abs_a_17_9_0_sva_1;
  wire [9:0] nlm_col_loop_1_if_ac_int_cctor_7_9_0_sva_1;
  wire [9:0] yuvdns_abs_a_15_9_0_sva_1;
  wire [9:0] yuvdns_abs_a_14_9_0_sva_1;
  wire [9:0] nlm_col_loop_1_if_ac_int_cctor_4_9_0_sva_mx0w1;
  wire [9:0] yuvdns_abs_a_12_9_0_sva_1;
  wire [9:0] yuvdns_abs_a_11_9_0_sva_1;
  wire [9:0] yuvdns_abs_a_10_9_0_sva_1;
  wire [9:0] yuvdns_abs_a_9_9_0_sva_1;
  wire [9:0] yuvdns_abs_a_8_9_0_sva_1;
  wire [9:0] nlm_col_loop_if_ac_int_cctor_7_9_0_sva_1;
  wire [9:0] yuvdns_abs_a_6_9_0_sva_1;
  wire [9:0] yuvdns_abs_a_5_9_0_sva_1;
  wire [9:0] nlm_col_loop_if_ac_int_cctor_4_9_0_sva_mx0w1;
  wire [9:0] yuvdns_abs_a_3_9_0_sva_1;
  wire [9:0] yuvdns_abs_a_2_9_0_sva_1;
  wire [9:0] yuvdns_abs_a_1_9_0_sva_1;
  wire [9:0] yuvdns_abs_a_9_0_sva_1;
  wire [13:0] yuvdns_nlm_2_totalweight_sva_2;
  wire [14:0] nl_yuvdns_nlm_2_totalweight_sva_2;
  wire [13:0] yuvdns_nlm_1_totalweight_sva_2;
  wire [14:0] nl_yuvdns_nlm_1_totalweight_sva_2;
  wire [13:0] yuvdns_nlm_totalweight_sva_2;
  wire [14:0] nl_yuvdns_nlm_totalweight_sva_2;
  wire yuvdns_col_and_266_cse_1;
  wire yuvdns_col_and_268_rgt;
  wire yuvdns_col_and_323_rgt;
  reg [2:0] reg_in_window_loop_acc_psp_ftd;
  wire and_269_tmp;
  wire yuvdns_row_yuvdns_row_nor_tmp;
  reg reg_dst_v_rsci_oswt_cse;
  wire yuvdns_col_if_1_and_cse;
  wire yuvdns_col_if_1_and_15_cse;
  wire yuvdns_col_if_1_and_16_cse;
  wire yuvdns_col_if_1_and_17_cse;
  wire yuvdns_col_if_1_and_18_cse;
  wire yuvdns_col_if_1_and_19_cse;
  wire yuvdns_col_if_1_and_20_cse;
  wire v_dst_t_and_cse;
  reg reg_yuvdns_col_asn_sft_1_lpi_1_dfm_2_cse;
  reg reg_yuvdns_row_asn_sft_lpi_1_dfm_st_2_cse;
  reg reg_ylineBuf_rsc_0_0_i_oswt_cse;
  reg reg_ylineBuf_rsc_1_0_i_oswt_cse;
  reg reg_ylineBuf_rsc_2_0_i_oswt_cse;
  reg reg_ylineBuf_rsc_3_0_i_oswt_cse;
  reg reg_ylineBuf_rsc_4_0_i_oswt_cse;
  reg reg_ylineBuf_rsc_5_0_i_oswt_cse;
  reg reg_ylineBuf_rsc_6_0_i_oswt_cse;
  reg reg_ylineBuf_rsc_7_0_i_oswt_cse;
  wire vWindow_and_cse;
  wire vWindow_and_1_cse;
  wire vWindow_and_2_cse;
  wire vWindow_and_3_cse;
  wire vWindow_and_4_cse;
  wire vWindow_and_5_cse;
  wire vWindow_and_6_cse;
  wire vWindow_and_7_cse;
  wire vWindow_and_8_cse;
  wire vWindow_and_9_cse;
  wire vWindow_and_10_cse;
  wire vWindow_and_11_cse;
  wire vWindow_and_12_cse;
  wire vWindow_and_13_cse;
  wire vWindow_and_14_cse;
  wire vWindow_and_15_cse;
  wire vWindow_and_16_cse;
  wire vWindow_and_17_cse;
  wire vWindow_and_18_cse;
  wire vWindow_and_19_cse;
  wire vWindow_and_20_cse;
  wire vWindow_and_21_cse;
  wire vWindow_and_22_cse;
  wire vWindow_and_23_cse;
  wire vWindow_and_24_cse;
  wire vWindow_and_25_cse;
  wire vWindow_and_26_cse;
  wire vWindow_and_27_cse;
  wire vWindow_and_28_cse;
  wire vWindow_and_29_cse;
  wire vWindow_and_30_cse;
  wire vWindow_and_31_cse;
  wire vWindow_and_32_cse;
  wire vWindow_and_33_cse;
  wire vWindow_and_34_cse;
  wire vWindow_and_35_cse;
  wire vWindow_and_36_cse;
  wire vWindow_and_37_cse;
  wire vWindow_and_38_cse;
  wire vWindow_and_39_cse;
  wire vWindow_and_40_cse;
  wire vWindow_and_41_cse;
  wire vWindow_and_42_cse;
  wire vWindow_and_43_cse;
  wire vWindow_and_44_cse;
  wire vWindow_and_45_cse;
  wire vWindow_and_46_cse;
  wire yWindow_and_47_cse;
  wire yWindow_and_48_cse;
  wire yWindow_and_49_cse;
  wire yWindow_and_50_cse;
  wire yWindow_and_51_cse;
  wire yWindow_and_52_cse;
  wire yWindow_and_53_cse;
  wire yWindow_and_54_cse;
  wire yWindow_and_55_cse;
  wire yWindow_and_56_cse;
  wire yWindow_and_57_cse;
  wire yWindow_and_58_cse;
  wire yWindow_and_59_cse;
  wire yWindow_and_60_cse;
  wire yWindow_and_61_cse;
  wire yWindow_and_62_cse;
  wire yWindow_and_63_cse;
  wire yWindow_and_64_cse;
  wire yWindow_and_65_cse;
  wire yWindow_and_66_cse;
  wire yWindow_and_67_cse;
  wire yWindow_and_68_cse;
  wire yWindow_and_69_cse;
  wire or_92_cse;
  wire v_t_and_cse;
  reg reg_src_v_rsci_oswt_cse;
  wire nlm_row_loop_and_266_cse;
  wire yuvdns_col_and_cse;
  reg reg_addon_loop_2_and_740_itm_2_cse;
  wire nor_22_cse;
  wire vWindow_or_cse;
  wire vWindow_and_70_cse;
  wire vWindow_and_71_cse;
  wire and_292_cse;
  wire or_54_cse;
  wire nor_88_cse;
  wire or_487_cse;
  wire yuvdns_col_and_312_tmp_1;
  wire nlm_row_loop_or_547_tmp_1;
  reg [2:0] operator_3_false_return_2_0_sva_1;
  wire yuvdns_reg_eb_and_cse;
  wire asn_yuvdns_nlm_2_totalvalue_1_lpi_1_nand_cse;
  wire nand_124_cse;
  wire mux_167_cse;
  wire addon_loop_1_and_16_cse;
  wire addon_loop_1_and_17_cse;
  wire addon_loop_1_and_18_cse;
  wire addon_loop_1_and_19_cse;
  wire addon_loop_1_and_20_cse;
  wire addon_loop_1_and_21_cse;
  wire addon_loop_1_and_22_cse;
  wire addon_loop_1_and_23_cse;
  wire [11:0] ylineBuf_rsc_0_0_i_adra_d_reg;
  wire [11:0] window_read_mux_4_rmff;
  wire [9:0] ylineBuf_rsc_0_0_i_da_d_reg;
  wire [1:0] ylineBuf_rsc_0_0_i_ena_d_reg;
  wire window_read_window_read_nor_23_rmff;
  wire [1:0] ylineBuf_rsc_0_0_i_wea_d_reg;
  wire window_read_window_read_nor_5_rmff;
  wire [1:0] ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  wire window_read_window_read_nor_19_rmff;
  wire [1:0] ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  wire [11:0] ylineBuf_rsc_1_0_i_adra_d_reg;
  wire [11:0] window_read_mux_8_rmff;
  wire [9:0] ylineBuf_rsc_1_0_i_da_d_reg;
  wire [1:0] ylineBuf_rsc_1_0_i_ena_d_reg;
  wire window_read_window_read_and_24_rmff;
  wire [1:0] ylineBuf_rsc_1_0_i_wea_d_reg;
  wire window_read_window_read_nor_11_rmff;
  wire [1:0] ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  wire window_read_window_read_nor_18_rmff;
  wire [1:0] ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  wire [11:0] ylineBuf_rsc_2_0_i_adra_d_reg;
  wire [9:0] ylineBuf_rsc_2_0_i_da_d_reg;
  wire [1:0] ylineBuf_rsc_2_0_i_ena_d_reg;
  wire window_read_window_read_nor_22_rmff;
  wire [1:0] ylineBuf_rsc_2_0_i_wea_d_reg;
  wire window_read_window_read_nor_10_rmff;
  wire [1:0] ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  wire window_read_window_read_nor_17_rmff;
  wire [1:0] ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  wire [11:0] ylineBuf_rsc_3_0_i_adra_d_reg;
  wire [9:0] ylineBuf_rsc_3_0_i_da_d_reg;
  wire [1:0] ylineBuf_rsc_3_0_i_ena_d_reg;
  wire window_read_window_read_nor_21_rmff;
  wire [1:0] ylineBuf_rsc_3_0_i_wea_d_reg;
  wire window_read_window_read_nor_9_rmff;
  wire [1:0] ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  wire window_read_window_read_nor_16_rmff;
  wire [1:0] ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  wire [11:0] ylineBuf_rsc_4_0_i_adra_d_reg;
  wire [11:0] window_read_mux_18_rmff;
  wire [9:0] ylineBuf_rsc_4_0_i_da_d_reg;
  wire [1:0] ylineBuf_rsc_4_0_i_ena_d_reg;
  wire window_read_window_read_and_23_rmff;
  wire [1:0] ylineBuf_rsc_4_0_i_wea_d_reg;
  wire window_read_window_read_nor_8_rmff;
  wire [1:0] ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  wire window_read_window_read_nor_15_rmff;
  wire [1:0] ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  wire [11:0] ylineBuf_rsc_5_0_i_adra_d_reg;
  wire [11:0] window_read_mux_22_rmff;
  wire [9:0] ylineBuf_rsc_5_0_i_da_d_reg;
  wire [1:0] ylineBuf_rsc_5_0_i_ena_d_reg;
  wire window_read_window_read_and_22_rmff;
  wire [1:0] ylineBuf_rsc_5_0_i_wea_d_reg;
  wire window_read_window_read_nor_7_rmff;
  wire [1:0] ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  wire window_read_window_read_nor_14_rmff;
  wire [1:0] ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  wire [11:0] ylineBuf_rsc_6_0_i_adra_d_reg;
  wire [11:0] window_read_mux_26_rmff;
  wire [9:0] ylineBuf_rsc_6_0_i_da_d_reg;
  wire [1:0] ylineBuf_rsc_6_0_i_ena_d_reg;
  wire window_read_window_read_and_rmff;
  wire [1:0] ylineBuf_rsc_6_0_i_wea_d_reg;
  wire window_read_window_read_nor_6_rmff;
  wire [1:0] ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  wire window_read_window_read_nor_13_rmff;
  wire [1:0] ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  wire [11:0] ylineBuf_rsc_7_0_i_adra_d_reg;
  wire [11:0] window_read_mux_30_rmff;
  wire [9:0] ylineBuf_rsc_7_0_i_da_d_reg;
  wire [1:0] ylineBuf_rsc_7_0_i_ena_d_reg;
  wire window_read_window_read_nor_20_rmff;
  wire [1:0] ylineBuf_rsc_7_0_i_wea_d_reg;
  wire window_read_window_read_nor_4_rmff;
  wire [1:0] ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  wire window_read_window_read_nor_12_rmff;
  wire [1:0] ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  wire [11:0] ulineBuf_rsc_0_0_i_adra_d_reg;
  wire [9:0] ulineBuf_rsc_0_0_i_da_d_reg;
  wire [1:0] ulineBuf_rsc_0_0_i_ena_d_reg;
  wire [1:0] ulineBuf_rsc_0_0_i_wea_d_reg;
  wire [1:0] ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  wire [1:0] ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  wire [11:0] ulineBuf_rsc_1_0_i_adra_d_reg;
  wire [9:0] ulineBuf_rsc_1_0_i_da_d_reg;
  wire [1:0] ulineBuf_rsc_1_0_i_ena_d_reg;
  wire [1:0] ulineBuf_rsc_1_0_i_wea_d_reg;
  wire [1:0] ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  wire [1:0] ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  wire [11:0] ulineBuf_rsc_2_0_i_adra_d_reg;
  wire [9:0] ulineBuf_rsc_2_0_i_da_d_reg;
  wire [1:0] ulineBuf_rsc_2_0_i_ena_d_reg;
  wire [1:0] ulineBuf_rsc_2_0_i_wea_d_reg;
  wire [1:0] ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  wire [1:0] ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  wire [11:0] ulineBuf_rsc_3_0_i_adra_d_reg;
  wire [9:0] ulineBuf_rsc_3_0_i_da_d_reg;
  wire [1:0] ulineBuf_rsc_3_0_i_ena_d_reg;
  wire [1:0] ulineBuf_rsc_3_0_i_wea_d_reg;
  wire [1:0] ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  wire [1:0] ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  wire [11:0] ulineBuf_rsc_4_0_i_adra_d_reg;
  wire [9:0] ulineBuf_rsc_4_0_i_da_d_reg;
  wire [1:0] ulineBuf_rsc_4_0_i_ena_d_reg;
  wire [1:0] ulineBuf_rsc_4_0_i_wea_d_reg;
  wire [1:0] ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  wire [1:0] ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  wire [11:0] ulineBuf_rsc_5_0_i_adra_d_reg;
  wire [9:0] ulineBuf_rsc_5_0_i_da_d_reg;
  wire [1:0] ulineBuf_rsc_5_0_i_ena_d_reg;
  wire [1:0] ulineBuf_rsc_5_0_i_wea_d_reg;
  wire [1:0] ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  wire [1:0] ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  wire [11:0] ulineBuf_rsc_6_0_i_adra_d_reg;
  wire [9:0] ulineBuf_rsc_6_0_i_da_d_reg;
  wire [1:0] ulineBuf_rsc_6_0_i_ena_d_reg;
  wire [1:0] ulineBuf_rsc_6_0_i_wea_d_reg;
  wire [1:0] ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  wire [1:0] ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  wire [11:0] ulineBuf_rsc_7_0_i_adra_d_reg;
  wire [9:0] ulineBuf_rsc_7_0_i_da_d_reg;
  wire [1:0] ulineBuf_rsc_7_0_i_ena_d_reg;
  wire [1:0] ulineBuf_rsc_7_0_i_wea_d_reg;
  wire [1:0] ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  wire [1:0] ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  wire [11:0] vlineBuf_rsc_0_0_i_adra_d_reg;
  wire [9:0] vlineBuf_rsc_0_0_i_da_d_reg;
  wire [1:0] vlineBuf_rsc_0_0_i_ena_d_reg;
  wire [1:0] vlineBuf_rsc_0_0_i_wea_d_reg;
  wire [1:0] vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  wire [1:0] vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  wire [11:0] vlineBuf_rsc_1_0_i_adra_d_reg;
  wire [9:0] vlineBuf_rsc_1_0_i_da_d_reg;
  wire [1:0] vlineBuf_rsc_1_0_i_ena_d_reg;
  wire [1:0] vlineBuf_rsc_1_0_i_wea_d_reg;
  wire [1:0] vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  wire [1:0] vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  wire [11:0] vlineBuf_rsc_2_0_i_adra_d_reg;
  wire [9:0] vlineBuf_rsc_2_0_i_da_d_reg;
  wire [1:0] vlineBuf_rsc_2_0_i_ena_d_reg;
  wire [1:0] vlineBuf_rsc_2_0_i_wea_d_reg;
  wire [1:0] vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  wire [1:0] vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  wire [11:0] vlineBuf_rsc_3_0_i_adra_d_reg;
  wire [9:0] vlineBuf_rsc_3_0_i_da_d_reg;
  wire [1:0] vlineBuf_rsc_3_0_i_ena_d_reg;
  wire [1:0] vlineBuf_rsc_3_0_i_wea_d_reg;
  wire [1:0] vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  wire [1:0] vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  wire [11:0] vlineBuf_rsc_4_0_i_adra_d_reg;
  wire [9:0] vlineBuf_rsc_4_0_i_da_d_reg;
  wire [1:0] vlineBuf_rsc_4_0_i_ena_d_reg;
  wire [1:0] vlineBuf_rsc_4_0_i_wea_d_reg;
  wire [1:0] vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  wire [1:0] vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  wire [11:0] vlineBuf_rsc_5_0_i_adra_d_reg;
  wire [9:0] vlineBuf_rsc_5_0_i_da_d_reg;
  wire [1:0] vlineBuf_rsc_5_0_i_ena_d_reg;
  wire [1:0] vlineBuf_rsc_5_0_i_wea_d_reg;
  wire [1:0] vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  wire [1:0] vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  wire [11:0] vlineBuf_rsc_6_0_i_adra_d_reg;
  wire [9:0] vlineBuf_rsc_6_0_i_da_d_reg;
  wire [1:0] vlineBuf_rsc_6_0_i_ena_d_reg;
  wire [1:0] vlineBuf_rsc_6_0_i_wea_d_reg;
  wire [1:0] vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  wire [1:0] vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  wire [11:0] vlineBuf_rsc_7_0_i_adra_d_reg;
  wire [9:0] vlineBuf_rsc_7_0_i_da_d_reg;
  wire [1:0] vlineBuf_rsc_7_0_i_ena_d_reg;
  wire [1:0] vlineBuf_rsc_7_0_i_wea_d_reg;
  wire [1:0] vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  wire [1:0] vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  wire [9:0] y_t_lpi_1_dfm_1_mx0;
  wire [9:0] lines_read_lines_read_slc_yWindow_10_9_0_1_cmx_sva_1;
  wire [9:0] u_t_lpi_1_dfm_1_mx0;
  wire [9:0] lines_read_lines_read_slc_uWindow_10_9_0_1_cmx_sva_1;
  wire [9:0] v_t_lpi_1_dfm_1_mx0;
  wire [9:0] lines_read_lines_read_slc_vWindow_10_9_0_1_cmx_sva_1;
  wire mux_164_itm;
  wire [2:0] z_out_3;
  wire [3:0] nl_z_out_3;
  wire [3:0] z_out_4;
  wire [4:0] nl_z_out_4;
  wire [3:0] z_out_5;
  wire [4:0] nl_z_out_5;
  wire [5:0] z_out_6;
  wire [6:0] nl_z_out_6;
  wire [3:0] z_out_7;
  wire [4:0] nl_z_out_7;
  wire or_dcpl_389;
  wire [6:0] z_out_8;
  wire [7:0] nl_z_out_8;
  wire [10:0] z_out_9;
  wire [11:0] nl_z_out_9;
  wire [10:0] z_out_10;
  wire [11:0] nl_z_out_10;
  wire [12:0] z_out_11;
  wire [13:0] nl_z_out_11;
  wire [9:0] z_out_12;
  wire [9:0] z_out_13;
  wire [9:0] z_out_14;
  wire [9:0] z_out_15;
  wire [9:0] z_out_16;
  wire [9:0] z_out_17;
  wire [9:0] z_out_18;
  wire [9:0] z_out_19;
  wire [9:0] z_out_20;
  wire [9:0] z_out_21;
  wire [9:0] z_out_22;
  wire [9:0] z_out_23;
  wire [9:0] z_out_24;
  wire [9:0] z_out_25;
  wire [9:0] z_out_26;
  wire [9:0] z_out_27;
  wire [9:0] z_out_28;
  wire [9:0] z_out_29;
  wire [9:0] z_out_30;
  wire [9:0] z_out_31;
  wire [9:0] z_out_32;
  wire [9:0] z_out_33;
  wire [9:0] z_out_34;
  wire [9:0] z_out_35;
  wire [9:0] z_out_36;
  wire [9:0] z_out_37;
  wire [9:0] z_out_38;
  wire [21:0] z_out_39;
  wire [22:0] nl_z_out_39;
  wire [21:0] z_out_40;
  wire [22:0] nl_z_out_40;
  wire [21:0] z_out_41;
  wire [22:0] nl_z_out_41;
  reg [9:0] yWindow_4_4_lpi_1;
  reg [9:0] yWindow_4_2_lpi_1;
  reg [9:0] yWindow_4_6_lpi_1;
  reg [9:0] yWindow_4_1_lpi_1;
  reg [9:0] yWindow_4_7_lpi_1;
  reg [9:0] yWindow_4_0_lpi_1;
  reg [9:0] yWindow_4_8_lpi_1;
  reg [9:0] yWindow_3_8_lpi_1;
  reg [9:0] yWindow_5_0_lpi_1;
  reg [9:0] yWindow_3_7_lpi_1;
  reg [9:0] yWindow_5_1_lpi_1;
  reg [9:0] yWindow_3_6_lpi_1;
  reg [9:0] yWindow_5_2_lpi_1;
  reg [9:0] yWindow_3_2_lpi_1;
  reg [9:0] yWindow_5_6_lpi_1;
  reg [9:0] yWindow_3_1_lpi_1;
  reg [9:0] yWindow_5_7_lpi_1;
  reg [9:0] yWindow_3_0_lpi_1;
  reg [9:0] yWindow_5_8_lpi_1;
  reg [9:0] yWindow_2_8_lpi_1;
  reg [9:0] yWindow_6_0_lpi_1;
  reg [9:0] yWindow_2_7_lpi_1;
  reg [9:0] yWindow_6_1_lpi_1;
  reg [9:0] yWindow_2_6_lpi_1;
  reg [9:0] yWindow_6_2_lpi_1;
  reg [9:0] yWindow_2_5_lpi_1;
  reg [9:0] yWindow_6_3_lpi_1;
  reg [9:0] yWindow_2_4_lpi_1;
  reg [9:0] yWindow_6_4_lpi_1;
  reg [9:0] yWindow_2_3_lpi_1;
  reg [9:0] yWindow_6_5_lpi_1;
  reg [9:0] yWindow_2_2_lpi_1;
  reg [9:0] yWindow_6_6_lpi_1;
  reg [9:0] yWindow_2_1_lpi_1;
  reg [9:0] yWindow_6_7_lpi_1;
  reg [9:0] yWindow_2_0_lpi_1;
  reg [9:0] yWindow_6_8_lpi_1;
  reg [9:0] yWindow_1_8_lpi_1;
  reg [9:0] yWindow_7_0_lpi_1;
  reg [9:0] yWindow_1_7_lpi_1;
  reg [9:0] yWindow_7_1_lpi_1;
  reg [9:0] yWindow_1_6_lpi_1;
  reg [9:0] yWindow_7_2_lpi_1;
  reg [9:0] yWindow_1_5_lpi_1;
  reg [9:0] yWindow_7_3_lpi_1;
  reg [9:0] yWindow_1_4_lpi_1;
  reg [9:0] yWindow_7_4_lpi_1;
  reg [9:0] yWindow_1_3_lpi_1;
  reg [9:0] yWindow_7_5_lpi_1;
  reg [9:0] yWindow_1_2_lpi_1;
  reg [9:0] yWindow_7_6_lpi_1;
  reg [9:0] yWindow_1_1_lpi_1;
  reg [9:0] yWindow_7_7_lpi_1;
  reg [9:0] yWindow_1_0_lpi_1;
  reg [9:0] yWindow_7_8_lpi_1;
  reg [9:0] yWindow_0_8_lpi_1;
  reg [9:0] yWindow_8_0_lpi_1;
  reg [9:0] yWindow_0_7_lpi_1;
  reg [9:0] yWindow_8_1_lpi_1;
  reg [9:0] yWindow_0_6_lpi_1;
  reg [9:0] yWindow_8_2_lpi_1;
  reg [9:0] yWindow_0_5_lpi_1;
  reg [9:0] yWindow_8_3_lpi_1;
  reg [9:0] yWindow_0_4_lpi_1;
  reg [9:0] yWindow_8_4_lpi_1;
  reg [9:0] yWindow_0_3_lpi_1;
  reg [9:0] yWindow_8_5_lpi_1;
  reg [9:0] yWindow_0_2_lpi_1;
  reg [9:0] yWindow_8_6_lpi_1;
  reg [9:0] yWindow_0_1_lpi_1;
  reg [9:0] yWindow_8_7_lpi_1;
  reg [9:0] yWindow_0_0_lpi_1;
  reg [9:0] yWindow_8_8_lpi_1;
  reg [9:0] uWindow_4_4_lpi_1;
  reg [9:0] uWindow_4_2_lpi_1;
  reg [9:0] uWindow_4_6_lpi_1;
  reg [9:0] uWindow_4_1_lpi_1;
  reg [9:0] uWindow_4_7_lpi_1;
  reg [9:0] uWindow_4_0_lpi_1;
  reg [9:0] uWindow_4_8_lpi_1;
  reg [9:0] uWindow_3_8_lpi_1;
  reg [9:0] uWindow_5_0_lpi_1;
  reg [9:0] uWindow_3_7_lpi_1;
  reg [9:0] uWindow_5_1_lpi_1;
  reg [9:0] uWindow_3_6_lpi_1;
  reg [9:0] uWindow_5_2_lpi_1;
  reg [9:0] uWindow_3_2_lpi_1;
  reg [9:0] uWindow_5_6_lpi_1;
  reg [9:0] uWindow_3_1_lpi_1;
  reg [9:0] uWindow_5_7_lpi_1;
  reg [9:0] uWindow_3_0_lpi_1;
  reg [9:0] uWindow_5_8_lpi_1;
  reg [9:0] uWindow_2_8_lpi_1;
  reg [9:0] uWindow_6_0_lpi_1;
  reg [9:0] uWindow_2_7_lpi_1;
  reg [9:0] uWindow_6_1_lpi_1;
  reg [9:0] uWindow_2_6_lpi_1;
  reg [9:0] uWindow_6_2_lpi_1;
  reg [9:0] uWindow_2_5_lpi_1;
  reg [9:0] uWindow_6_3_lpi_1;
  reg [9:0] uWindow_2_4_lpi_1;
  reg [9:0] uWindow_6_4_lpi_1;
  reg [9:0] uWindow_2_3_lpi_1;
  reg [9:0] uWindow_6_5_lpi_1;
  reg [9:0] uWindow_2_2_lpi_1;
  reg [9:0] uWindow_6_6_lpi_1;
  reg [9:0] uWindow_2_1_lpi_1;
  reg [9:0] uWindow_6_7_lpi_1;
  reg [9:0] uWindow_2_0_lpi_1;
  reg [9:0] uWindow_6_8_lpi_1;
  reg [9:0] uWindow_1_8_lpi_1;
  reg [9:0] uWindow_7_0_lpi_1;
  reg [9:0] uWindow_1_7_lpi_1;
  reg [9:0] uWindow_7_1_lpi_1;
  reg [9:0] uWindow_1_6_lpi_1;
  reg [9:0] uWindow_7_2_lpi_1;
  reg [9:0] uWindow_1_5_lpi_1;
  reg [9:0] uWindow_7_3_lpi_1;
  reg [9:0] uWindow_1_4_lpi_1;
  reg [9:0] uWindow_7_4_lpi_1;
  reg [9:0] uWindow_1_3_lpi_1;
  reg [9:0] uWindow_7_5_lpi_1;
  reg [9:0] uWindow_1_2_lpi_1;
  reg [9:0] uWindow_7_6_lpi_1;
  reg [9:0] uWindow_1_1_lpi_1;
  reg [9:0] uWindow_7_7_lpi_1;
  reg [9:0] uWindow_1_0_lpi_1;
  reg [9:0] uWindow_7_8_lpi_1;
  reg [9:0] uWindow_0_8_lpi_1;
  reg [9:0] uWindow_8_0_lpi_1;
  reg [9:0] uWindow_0_7_lpi_1;
  reg [9:0] uWindow_8_1_lpi_1;
  reg [9:0] uWindow_0_6_lpi_1;
  reg [9:0] uWindow_8_2_lpi_1;
  reg [9:0] uWindow_0_5_lpi_1;
  reg [9:0] uWindow_8_3_lpi_1;
  reg [9:0] uWindow_0_4_lpi_1;
  reg [9:0] uWindow_8_4_lpi_1;
  reg [9:0] uWindow_0_3_lpi_1;
  reg [9:0] uWindow_8_5_lpi_1;
  reg [9:0] uWindow_0_2_lpi_1;
  reg [9:0] uWindow_8_6_lpi_1;
  reg [9:0] uWindow_0_1_lpi_1;
  reg [9:0] uWindow_8_7_lpi_1;
  reg [9:0] uWindow_0_0_lpi_1;
  reg [9:0] uWindow_8_8_lpi_1;
  reg [9:0] vWindow_4_4_lpi_1;
  reg [9:0] vWindow_4_2_lpi_1;
  reg [9:0] vWindow_4_6_lpi_1;
  reg [9:0] vWindow_4_1_lpi_1;
  reg [9:0] vWindow_4_7_lpi_1;
  reg [9:0] vWindow_4_0_lpi_1;
  reg [9:0] vWindow_4_8_lpi_1;
  reg [9:0] vWindow_3_8_lpi_1;
  reg [9:0] vWindow_5_0_lpi_1;
  reg [9:0] vWindow_3_7_lpi_1;
  reg [9:0] vWindow_5_1_lpi_1;
  reg [9:0] vWindow_3_6_lpi_1;
  reg [9:0] vWindow_5_2_lpi_1;
  reg [9:0] vWindow_3_2_lpi_1;
  reg [9:0] vWindow_5_6_lpi_1;
  reg [9:0] vWindow_3_1_lpi_1;
  reg [9:0] vWindow_5_7_lpi_1;
  reg [9:0] vWindow_3_0_lpi_1;
  reg [9:0] vWindow_5_8_lpi_1;
  reg [9:0] vWindow_2_8_lpi_1;
  reg [9:0] vWindow_6_0_lpi_1;
  reg [9:0] vWindow_2_7_lpi_1;
  reg [9:0] vWindow_6_1_lpi_1;
  reg [9:0] vWindow_2_6_lpi_1;
  reg [9:0] vWindow_6_2_lpi_1;
  reg [9:0] vWindow_2_5_lpi_1;
  reg [9:0] vWindow_6_3_lpi_1;
  reg [9:0] vWindow_2_4_lpi_1;
  reg [9:0] vWindow_6_4_lpi_1;
  reg [9:0] vWindow_2_3_lpi_1;
  reg [9:0] vWindow_6_5_lpi_1;
  reg [9:0] vWindow_2_2_lpi_1;
  reg [9:0] vWindow_6_6_lpi_1;
  reg [9:0] vWindow_2_1_lpi_1;
  reg [9:0] vWindow_6_7_lpi_1;
  reg [9:0] vWindow_2_0_lpi_1;
  reg [9:0] vWindow_6_8_lpi_1;
  reg [9:0] vWindow_1_8_lpi_1;
  reg [9:0] vWindow_7_0_lpi_1;
  reg [9:0] vWindow_1_7_lpi_1;
  reg [9:0] vWindow_7_1_lpi_1;
  reg [9:0] vWindow_1_6_lpi_1;
  reg [9:0] vWindow_7_2_lpi_1;
  reg [9:0] vWindow_1_5_lpi_1;
  reg [9:0] vWindow_7_3_lpi_1;
  reg [9:0] vWindow_1_4_lpi_1;
  reg [9:0] vWindow_7_4_lpi_1;
  reg [9:0] vWindow_1_3_lpi_1;
  reg [9:0] vWindow_7_5_lpi_1;
  reg [9:0] vWindow_1_2_lpi_1;
  reg [9:0] vWindow_7_6_lpi_1;
  reg [9:0] vWindow_1_1_lpi_1;
  reg [9:0] vWindow_7_7_lpi_1;
  reg [9:0] vWindow_1_0_lpi_1;
  reg [9:0] vWindow_7_8_lpi_1;
  reg [9:0] vWindow_0_8_lpi_1;
  reg [9:0] vWindow_8_0_lpi_1;
  reg [9:0] vWindow_0_7_lpi_1;
  reg [9:0] vWindow_8_1_lpi_1;
  reg [9:0] vWindow_0_6_lpi_1;
  reg [9:0] vWindow_8_2_lpi_1;
  reg [9:0] vWindow_0_5_lpi_1;
  reg [9:0] vWindow_8_3_lpi_1;
  reg [9:0] vWindow_0_4_lpi_1;
  reg [9:0] vWindow_8_4_lpi_1;
  reg [9:0] vWindow_0_3_lpi_1;
  reg [9:0] vWindow_8_5_lpi_1;
  reg [9:0] vWindow_0_2_lpi_1;
  reg [9:0] vWindow_8_6_lpi_1;
  reg [9:0] vWindow_0_1_lpi_1;
  reg [9:0] vWindow_8_7_lpi_1;
  reg [9:0] vWindow_0_0_lpi_1;
  reg [9:0] vWindow_8_8_lpi_1;
  reg [9:0] y_t_lpi_1;
  reg [9:0] u_t_lpi_1;
  reg [9:0] v_t_lpi_1;
  reg [3:0] out_window_loop_i_lpi_1;
  reg [2:0] lines_read_i_2_0_lpi_1;
  reg [7:0] yuvdns_nlm_maxweight_lpi_1;
  reg [13:0] yuvdns_nlm_totalweight_1_lpi_1;
  reg [24:0] yuvdns_nlm_totalvalue_1_lpi_1;
  reg [7:0] yuvdns_nlm_1_maxweight_lpi_1;
  reg [13:0] yuvdns_nlm_1_totalweight_1_lpi_1;
  reg [24:0] yuvdns_nlm_1_totalvalue_1_lpi_1;
  reg [7:0] yuvdns_nlm_2_maxweight_lpi_1;
  reg [13:0] yuvdns_nlm_2_totalweight_1_lpi_1;
  reg [24:0] yuvdns_nlm_2_totalvalue_1_lpi_1;
  reg [9:0] y_dst_t_1_lpi_1;
  reg [9:0] u_dst_t_1_lpi_1;
  reg [9:0] v_dst_t_1_lpi_1;
  reg in_window_loop_and_stg_4_15_sva;
  reg in_window_loop_and_stg_5_15_sva;
  reg in_window_loop_and_stg_3_14_sva;
  reg in_window_loop_and_stg_4_14_sva;
  reg in_window_loop_and_stg_5_14_sva;
  reg in_window_loop_and_stg_4_13_sva;
  reg in_window_loop_and_stg_5_13_sva;
  reg in_window_loop_and_stg_5_12_sva;
  reg in_window_loop_and_stg_4_11_sva;
  reg in_window_loop_and_stg_5_11_sva;
  reg in_window_loop_and_stg_3_10_sva;
  reg in_window_loop_and_stg_4_10_sva;
  reg in_window_loop_and_stg_5_10_sva;
  reg in_window_loop_and_stg_4_9_sva;
  reg in_window_loop_and_stg_5_9_sva;
  reg in_window_loop_and_stg_4_8_sva;
  reg in_window_loop_and_stg_5_8_sva;
  reg in_window_loop_and_stg_4_7_sva;
  reg in_window_loop_and_stg_4_6_sva;
  reg in_window_loop_and_stg_5_6_sva;
  reg in_window_loop_and_stg_3_5_sva;
  reg in_window_loop_and_stg_4_5_sva;
  reg in_window_loop_and_stg_5_5_sva;
  reg in_window_loop_and_stg_4_4_sva;
  reg in_window_loop_and_stg_5_4_sva;
  reg in_window_loop_and_stg_5_3_sva;
  reg in_window_loop_and_stg_4_2_sva;
  reg in_window_loop_and_stg_5_2_sva;
  reg in_window_loop_and_stg_3_1_sva;
  reg in_window_loop_and_stg_4_1_sva;
  reg in_window_loop_and_stg_5_1_sva;
  reg in_window_loop_and_stg_4_0_sva;
  reg in_window_loop_and_stg_5_0_sva;
  reg in_window_loop_and_stg_4_31_sva;
  reg in_window_loop_and_stg_4_29_sva;
  reg in_window_loop_and_stg_4_28_sva;
  reg in_window_loop_and_stg_4_27_sva;
  reg in_window_loop_and_stg_4_25_sva;
  reg in_window_loop_and_stg_4_24_sva;
  reg in_window_loop_and_stg_4_23_sva;
  reg in_window_loop_and_stg_4_22_sva;
  reg in_window_loop_and_stg_4_20_sva;
  reg in_window_loop_and_stg_4_19_sva;
  reg in_window_loop_and_stg_4_18_sva;
  reg in_window_loop_and_stg_4_16_sva;
  reg [9:0] v_t_lpi_1_dfm_1;
  reg [9:0] u_t_lpi_1_dfm_1;
  reg [9:0] y_t_lpi_1_dfm_1;
  reg [9:0] in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1;
  reg [9:0] in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1;
  reg [9:0] in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1;
  reg [13:0] yuvdns_nlm_totalweight_1_lpi_1_dfm_1;
  reg [24:0] yuvdns_nlm_totalvalue_1_lpi_1_dfm_1;
  reg [13:0] yuvdns_nlm_1_totalweight_1_lpi_1_dfm_1;
  reg [24:0] yuvdns_nlm_1_totalvalue_1_lpi_1_dfm_1;
  reg [13:0] yuvdns_nlm_2_totalweight_1_lpi_1_dfm_1;
  reg [24:0] yuvdns_nlm_2_totalvalue_1_lpi_1_dfm_1;
  reg yuvdns_col_and_281_m1c_1;
  reg yuvdns_col_and_281_m1c_2;
  reg window_read_window_read_nor_5_itm_2;
  reg window_read_window_read_and_20_itm_1;
  reg [5:0] nlm_col_loop_if_nlm_col_loop_if_acc_itm_1;
  wire [6:0] nl_nlm_col_loop_if_nlm_col_loop_if_acc_itm_1;
  reg [2:0] nlm_col_loop_if_acc_41_itm_1;
  wire [3:0] nl_nlm_col_loop_if_acc_41_itm_1;
  reg [2:0] nlm_col_loop_if_slc_nlm_col_loop_if_acc_31_sdt_2_0_itm_1;
  reg [5:0] nlm_col_loop_if_nlm_col_loop_if_acc_4_itm_1;
  wire [6:0] nl_nlm_col_loop_if_nlm_col_loop_if_acc_4_itm_1;
  reg [6:0] nlm_col_loop_if_nlm_col_loop_if_acc_6_itm_1;
  wire [7:0] nl_nlm_col_loop_if_nlm_col_loop_if_acc_6_itm_1;
  reg [3:0] nlm_col_loop_if_acc_42_itm_1;
  reg [2:0] nlm_col_loop_if_slc_nlm_col_loop_if_acc_32_sdt_2_0_itm_1;
  reg [6:0] nlm_col_loop_if_nlm_col_loop_if_acc_10_itm_1;
  wire [7:0] nl_nlm_col_loop_if_nlm_col_loop_if_acc_10_itm_1;
  reg [6:0] nlm_col_loop_if_nlm_col_loop_if_acc_12_itm_1;
  wire [7:0] nl_nlm_col_loop_if_nlm_col_loop_if_acc_12_itm_1;
  reg [3:0] nlm_col_loop_if_acc_43_itm_1;
  reg [2:0] nlm_col_loop_if_slc_nlm_col_loop_if_acc_33_sdt_2_0_itm_1;
  reg [6:0] nlm_col_loop_if_nlm_col_loop_if_acc_16_itm_1;
  reg [7:0] nlm_col_loop_if_else_1_mux_itm_1;
  reg [3:0] nlm_col_loop_1_if_acc_42_itm_1;
  wire [4:0] nl_nlm_col_loop_1_if_acc_42_itm_1;
  reg [3:0] nlm_col_loop_1_if_acc_43_itm_1;
  reg [2:0] nlm_col_loop_1_if_slc_nlm_col_loop_1_if_acc_33_sdt_2_0_itm_1;
  reg [7:0] nlm_col_loop_1_if_else_1_mux_itm_1;
  reg [5:0] nlm_col_loop_2_if_nlm_col_loop_2_if_acc_itm_1;
  wire [6:0] nl_nlm_col_loop_2_if_nlm_col_loop_2_if_acc_itm_1;
  reg [2:0] nlm_col_loop_2_if_acc_41_itm_1;
  wire [3:0] nl_nlm_col_loop_2_if_acc_41_itm_1;
  reg [2:0] nlm_col_loop_2_if_slc_nlm_col_loop_2_if_acc_31_sdt_2_0_itm_1;
  reg [5:0] nlm_col_loop_2_if_nlm_col_loop_2_if_acc_4_itm_1;
  wire [6:0] nl_nlm_col_loop_2_if_nlm_col_loop_2_if_acc_4_itm_1;
  reg [6:0] nlm_col_loop_2_if_nlm_col_loop_2_if_acc_6_itm_1;
  wire [7:0] nl_nlm_col_loop_2_if_nlm_col_loop_2_if_acc_6_itm_1;
  reg [3:0] nlm_col_loop_2_if_acc_42_itm_1;
  wire [4:0] nl_nlm_col_loop_2_if_acc_42_itm_1;
  reg [2:0] nlm_col_loop_2_if_slc_nlm_col_loop_2_if_acc_32_sdt_2_0_itm_1;
  reg [6:0] nlm_col_loop_2_if_nlm_col_loop_2_if_acc_10_itm_1;
  reg [6:0] nlm_col_loop_2_if_nlm_col_loop_2_if_acc_12_itm_1;
  wire [7:0] nl_nlm_col_loop_2_if_nlm_col_loop_2_if_acc_12_itm_1;
  reg [3:0] nlm_col_loop_2_if_acc_43_itm_1;
  wire [4:0] nl_nlm_col_loop_2_if_acc_43_itm_1;
  reg [2:0] nlm_col_loop_2_if_slc_nlm_col_loop_2_if_acc_33_sdt_2_0_itm_1;
  reg [6:0] nlm_col_loop_2_if_nlm_col_loop_2_if_acc_16_itm_1;
  wire [7:0] nl_nlm_col_loop_2_if_nlm_col_loop_2_if_acc_16_itm_1;
  reg [7:0] nlm_col_loop_2_if_else_1_mux_itm_1;
  reg yuvdns_col_and_280_itm_1;
  reg yuvdns_col_and_280_itm_2;
  reg [9:0] addon_loop_1_addon_loop_1_mux_itm_1;
  reg [9:0] addon_loop_1_addon_loop_1_mux_1_itm_1;
  reg [9:0] addon_loop_1_addon_loop_1_mux_2_itm_1;
  reg [11:0] addon_loop_2_for_slc_addon_loop_2_for_j_11_0_7_itm_1;
  reg [11:0] addon_loop_2_for_slc_addon_loop_2_for_j_11_0_8_itm_1;
  reg [11:0] addon_loop_2_for_slc_addon_loop_2_for_j_11_0_11_itm_1;
  reg [11:0] addon_loop_2_for_slc_addon_loop_2_for_j_11_0_12_itm_1;
  reg [11:0] addon_loop_2_for_slc_addon_loop_2_for_j_11_0_13_itm_1;
  reg [11:0] addon_loop_2_for_slc_addon_loop_2_for_j_11_0_3_itm_1;
  reg addon_loop_2_for_addon_loop_2_for_nor_2_itm_2;
  reg addon_loop_2_for_addon_loop_2_for_and_18_itm_2;
  reg addon_loop_2_for_addon_loop_2_for_and_19_itm_2;
  reg yuvdns_col_nor_4_itm_1;
  reg [2:0] in_window_loop_j_lpi_1_2_0;
  reg [2:0] nlm_row_loop_j_lpi_1_2_0;
  reg [2:0] nlm_row_loop_1_j_lpi_1_2_0;
  reg [2:0] nlm_row_loop_2_j_lpi_1_2_0;
  reg [2:0] nlm_col_loop_i_lpi_1_2_0;
  reg [2:0] nlm_col_loop_1_i_lpi_1_2_0;
  reg [2:0] nlm_col_loop_2_i_lpi_1_2_0;
  reg [1:0] addon_loop_1_i_lpi_1_1_0;
  reg addon_loop_2_addon_loop_2_for_nand_psp;
  wire [9:0] vWindow_0_8_lpi_1_mx0;
  wire [9:0] uWindow_0_8_lpi_1_mx0;
  wire [9:0] yWindow_0_8_lpi_1_mx0;
  wire [9:0] vWindow_7_8_lpi_1_mx0;
  wire [9:0] vWindow_6_8_lpi_1_mx0;
  wire [9:0] vWindow_5_8_lpi_1_mx0;
  wire [9:0] vWindow_4_8_lpi_1_mx0;
  wire [9:0] vWindow_3_8_lpi_1_mx0;
  wire [9:0] vWindow_2_8_lpi_1_mx0;
  wire [9:0] vWindow_1_8_lpi_1_mx0;
  wire [9:0] uWindow_7_8_lpi_1_mx0;
  wire [9:0] uWindow_6_8_lpi_1_mx0;
  wire [9:0] uWindow_5_8_lpi_1_mx0;
  wire [9:0] uWindow_4_8_lpi_1_mx0;
  wire [9:0] uWindow_3_8_lpi_1_mx0;
  wire [9:0] uWindow_2_8_lpi_1_mx0;
  wire [9:0] uWindow_1_8_lpi_1_mx0;
  wire [9:0] yWindow_7_8_lpi_1_mx0;
  wire [9:0] yWindow_6_8_lpi_1_mx0;
  wire [9:0] yWindow_5_8_lpi_1_mx0;
  wire [9:0] yWindow_4_8_lpi_1_mx0;
  wire [9:0] yWindow_3_8_lpi_1_mx0;
  wire [9:0] yWindow_2_8_lpi_1_mx0;
  wire [9:0] yWindow_1_8_lpi_1_mx0;
  wire [9:0] tmp_4_lpi_1_dfm_1;
  wire [9:0] tmp_2_lpi_1_dfm_1;
  wire [9:0] tmp_lpi_1_dfm_1;
  wire [9:0] in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
  wire [9:0] in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
  wire [9:0] in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
  wire yuvdns_nlm_2_yuvdns_nlm_2_yuvdns_nlm_2_or_tmp_1;
  wire yuvdns_nlm_1_yuvdns_nlm_1_yuvdns_nlm_1_or_tmp_1;
  wire yuvdns_nlm_yuvdns_nlm_yuvdns_nlm_or_tmp_1;
  wire [24:0] yuvdns_nlm_totalvalue_1_lpi_1_dfm_1_mx0;
  wire [24:0] yuvdns_nlm_1_totalvalue_1_lpi_1_dfm_1_mx0;
  wire [24:0] yuvdns_nlm_2_totalvalue_1_lpi_1_dfm_1_mx0;
  wire [9:0] v_dst_t_1_lpi_1_dfm_4;
  wire [9:0] u_dst_t_1_lpi_1_dfm_4;
  wire [9:0] y_dst_t_1_lpi_1_dfm_4;
  wire [3:0] out_window_loop_i_lpi_1_dfm_1;
  wire [2:0] in_window_loop_j_lpi_1_dfm_2_0_1;
  wire [2:0] lines_read_i_2_0_sva_2;
  wire [3:0] nl_lines_read_i_2_0_sva_2;
  wire [24:0] yuvdns_nlm_2_totalvalue_1_lpi_1_mx0;
  wire [13:0] yuvdns_nlm_2_totalweight_1_lpi_1_mx0;
  wire [24:0] yuvdns_nlm_1_totalvalue_1_lpi_1_mx0;
  wire [13:0] yuvdns_nlm_1_totalweight_1_lpi_1_mx0;
  wire [24:0] yuvdns_nlm_totalvalue_1_lpi_1_mx0;
  wire [13:0] yuvdns_nlm_totalweight_1_lpi_1_mx0;
  wire [7:0] yuvdns_nlm_2_maxweight_lpi_1_mx0;
  wire [7:0] yuvdns_nlm_1_maxweight_lpi_1_mx0;
  wire [7:0] yuvdns_nlm_maxweight_lpi_1_mx0;
  wire in_window_loop_and_stg_5_8_sva_mx0w0;
  wire nlm_row_loop_or_245_tmp_1;
  wire exitL_exitL_exitL_exit_nlm_row_loop_lpi_1_dfm_1;
  wire exitL_exit_yuvdns_col_lpi_1_dfm_1;
  wire [3:0] nlm_col_loop_if_acc_33_sdt_3_0_1;
  wire [4:0] nl_nlm_col_loop_if_acc_33_sdt_3_0_1;
  wire [3:0] nlm_col_loop_if_acc_31_sdt_1;
  wire [4:0] nl_nlm_col_loop_if_acc_31_sdt_1;
  wire [3:0] nlm_col_loop_1_if_acc_33_sdt_3_0_1;
  wire [4:0] nl_nlm_col_loop_1_if_acc_33_sdt_3_0_1;
  wire [3:0] nlm_col_loop_1_if_acc_32_sdt_1;
  wire [4:0] nl_nlm_col_loop_1_if_acc_32_sdt_1;
  wire [3:0] nlm_col_loop_1_if_acc_31_sdt_1;
  wire [4:0] nl_nlm_col_loop_1_if_acc_31_sdt_1;
  wire [2:0] operator_4_false_6_acc_psp_1_sva_1;
  wire [3:0] nl_operator_4_false_6_acc_psp_1_sva_1;
  wire [3:0] nlm_col_loop_2_if_acc_33_sdt_3_0_1;
  wire [4:0] nl_nlm_col_loop_2_if_acc_33_sdt_3_0_1;
  wire [3:0] nlm_col_loop_2_if_acc_32_sdt_1;
  wire [4:0] nl_nlm_col_loop_2_if_acc_32_sdt_1;
  wire [3:0] nlm_col_loop_2_if_acc_31_sdt_1;
  wire [4:0] nl_nlm_col_loop_2_if_acc_31_sdt_1;
  wire [2:0] operator_4_false_12_acc_psp_1_sva_1;
  wire [3:0] nl_operator_4_false_12_acc_psp_1_sva_1;
  wire window_read_asn_57;
  wire window_read_asn_59;
  wire window_read_asn_61;
  wire addon_loop_2_asn_875;
  wire addon_loop_2_asn_881;
  wire yuvdns_col_or_11;
  wire nlm_col_loop_1_if_exs_3_0;
  wire [6:0] ROM_1i4_1o7_79be7b8354f3336325ccc8204e2443072e_3;
  wire [7:0] ROM_1i3_1o8_a9da8dd3d4c2cabf7072e520d048f3072e_3;
  wire [6:0] ROM_1i4_1o7_79be7b8354f3336325ccc8204e2443072e_4;
  wire [7:0] ROM_1i3_1o8_a9da8dd3d4c2cabf7072e520d048f3072e_4;
  wire [6:0] ROM_1i4_1o7_79be7b8354f3336325ccc8204e2443072e_5;
  wire [7:0] ROM_1i3_1o8_a9da8dd3d4c2cabf7072e520d048f3072e_5;
  wire addon_loop_1_i_addon_loop_1_i_nor_rgt;
  wire addon_loop_1_i_or_rgt;
  wire addon_loop_1_i_and_3_rgt;
  wire addon_loop_2_and_743_cse;
  wire window_read_window_read_and_6_cse;
  wire window_read_window_read_and_5_cse;
  wire window_read_window_read_and_4_cse;
  wire window_read_window_read_nor_3_cse;
  wire nlm_col_loop_if_nlm_col_loop_if_nlm_col_loop_if_or_cse;
  wire yWindow_and_cse;
  wire nlm_col_loop_2_i_and_cse;
  wire nlm_row_loop_2_j_and_cse;
  wire vWindow_and_73_cse;
  wire and_324_cse;
  wire and_338_cse;
  wire and_352_cse;
  wire nlm_col_loop_if_else_1_if_acc_itm_21_1;
  wire nlm_col_loop_1_if_else_1_if_acc_itm_21_1;
  wire nlm_col_loop_2_if_else_1_if_acc_itm_21_1;
  wire operator_4_false_3_acc_itm_3_1;
  wire yuvdns_abs_acc_itm_10_1;
  wire yuvdns_abs_1_acc_itm_10_1;
  wire yuvdns_abs_2_acc_itm_10_1;
  wire yuvdns_abs_3_acc_itm_10_1;
  wire yuvdns_abs_4_acc_itm_10_1;
  wire yuvdns_abs_5_acc_itm_10_1;
  wire yuvdns_abs_6_acc_itm_10_1;
  wire yuvdns_abs_7_acc_itm_10_1;
  wire yuvdns_abs_8_acc_itm_10_1;
  wire [20:0] nlm_col_loop_if_acc_itm_23_3_1;
  wire yuvdns_abs_9_acc_itm_10_1;
  wire yuvdns_abs_10_acc_itm_10_1;
  wire yuvdns_abs_11_acc_itm_10_1;
  wire yuvdns_abs_12_acc_itm_10_1;
  wire yuvdns_abs_13_acc_itm_10_1;
  wire yuvdns_abs_14_acc_itm_10_1;
  wire yuvdns_abs_15_acc_itm_10_1;
  wire yuvdns_abs_16_acc_itm_10_1;
  wire yuvdns_abs_17_acc_itm_10_1;
  wire [20:0] nlm_col_loop_1_if_acc_itm_23_3_1;
  wire yuvdns_abs_18_acc_itm_10_1;
  wire yuvdns_abs_19_acc_itm_10_1;
  wire yuvdns_abs_20_acc_itm_10_1;
  wire yuvdns_abs_21_acc_itm_10_1;
  wire yuvdns_abs_22_acc_itm_10_1;
  wire yuvdns_abs_23_acc_itm_10_1;
  wire yuvdns_abs_24_acc_itm_10_1;
  wire yuvdns_abs_25_acc_itm_10_1;
  wire yuvdns_abs_26_acc_itm_10_1;
  wire [20:0] nlm_col_loop_2_if_acc_itm_23_3_1;
  wire addon_loop_2_for_acc_14_itm_13_1;
  wire yuvdns_col_acc_2_itm_13_1;
  wire yuvdns_row_acc_2_itm_13_1;
  wire [27:0] z_out_41_14;
  wire [27:0] z_out_1_41_14;
  wire [27:0] z_out_2_41_14;
  wire nor_176_cse;

  wire[0:0] mux_124_nl;
  wire[0:0] mux_123_nl;
  wire[0:0] nor_114_nl;
  wire[21:0] nlm_col_loop_if_else_1_if_acc_nl;
  wire[22:0] nl_nlm_col_loop_if_else_1_if_acc_nl;
  wire[0:0] asn_nlm_col_loop_if_else_1_mux_itm_1_nand_nl;
  wire[21:0] nlm_col_loop_1_if_else_1_if_acc_nl;
  wire[22:0] nl_nlm_col_loop_1_if_else_1_if_acc_nl;
  wire[0:0] or_228_nl;
  wire[21:0] nlm_col_loop_2_if_else_1_if_acc_nl;
  wire[22:0] nl_nlm_col_loop_2_if_else_1_if_acc_nl;
  wire[0:0] or_230_nl;
  wire[0:0] and_227_nl;
  wire[0:0] mux_129_nl;
  wire[0:0] mux_128_nl;
  wire[0:0] or_240_nl;
  wire[0:0] mux_126_nl;
  wire[0:0] or_235_nl;
  wire[0:0] or_234_nl;
  wire[0:0] mux_131_nl;
  wire[0:0] and_279_nl;
  wire[0:0] mux_130_nl;
  wire[0:0] nor_98_nl;
  wire[0:0] nor_99_nl;
  wire[0:0] nor_100_nl;
  wire[0:0] mux_134_nl;
  wire[0:0] mux_133_nl;
  wire[0:0] or_259_nl;
  wire[0:0] mux_136_nl;
  wire[0:0] or_274_nl;
  wire[0:0] mux_135_nl;
  wire[0:0] mux_138_nl;
  wire[0:0] and_278_nl;
  wire[0:0] mux_137_nl;
  wire[0:0] nor_95_nl;
  wire[0:0] nor_96_nl;
  wire[0:0] nor_97_nl;
  wire[0:0] mux_140_nl;
  wire[0:0] and_277_nl;
  wire[0:0] mux_139_nl;
  wire[0:0] nor_92_nl;
  wire[0:0] nor_93_nl;
  wire[0:0] and_nl;
  wire[0:0] mux_142_nl;
  wire[0:0] and_276_nl;
  wire[0:0] mux_141_nl;
  wire[0:0] nor_89_nl;
  wire[0:0] nor_90_nl;
  wire[0:0] nor_91_nl;
  wire[0:0] mux_145_nl;
  wire[0:0] or_485_nl;
  wire[0:0] mux_144_nl;
  wire[0:0] nand_79_nl;
  wire[0:0] mux_143_nl;
  wire[0:0] and_275_nl;
  wire[0:0] yuvdns_col_if_yuvdns_col_if_yuvdns_col_if_yuvdns_col_if_nand_nl;
  wire[3:0] operator_4_false_5_acc_nl;
  wire[4:0] nl_operator_4_false_5_acc_nl;
  wire[3:0] operator_4_false_4_acc_nl;
  wire[4:0] nl_operator_4_false_4_acc_nl;
  wire[3:0] operator_4_false_1_acc_nl;
  wire[4:0] nl_operator_4_false_1_acc_nl;
  wire[3:0] operator_4_false_17_acc_nl;
  wire[4:0] nl_operator_4_false_17_acc_nl;
  wire[6:0] nlm_col_loop_2_if_nlm_col_loop_2_if_acc_10_nl;
  wire[7:0] nl_nlm_col_loop_2_if_nlm_col_loop_2_if_acc_10_nl;
  wire[0:0] or_421_nl;
  wire[3:0] operator_4_false_16_acc_nl;
  wire[4:0] nl_operator_4_false_16_acc_nl;
  wire[3:0] operator_4_false_13_acc_nl;
  wire[4:0] nl_operator_4_false_13_acc_nl;
  wire[0:0] nlm_col_loop_if_nlm_col_loop_if_or_nl;
  wire[6:0] nlm_col_loop_1_if_nlm_col_loop_1_if_acc_6_nl;
  wire[7:0] nl_nlm_col_loop_1_if_nlm_col_loop_1_if_acc_6_nl;
  wire[3:0] operator_4_false_10_acc_nl;
  wire[4:0] nl_operator_4_false_10_acc_nl;
  wire[6:0] nlm_col_loop_1_if_nlm_col_loop_1_if_acc_10_nl;
  wire[7:0] nl_nlm_col_loop_1_if_nlm_col_loop_1_if_acc_10_nl;
  wire[6:0] nlm_col_loop_1_if_nlm_col_loop_1_if_acc_12_nl;
  wire[7:0] nl_nlm_col_loop_1_if_nlm_col_loop_1_if_acc_12_nl;
  wire[3:0] operator_4_false_11_acc_nl;
  wire[4:0] nl_operator_4_false_11_acc_nl;
  wire[6:0] nlm_col_loop_1_if_nlm_col_loop_1_if_acc_16_nl;
  wire[7:0] nl_nlm_col_loop_1_if_nlm_col_loop_1_if_acc_16_nl;
  wire[5:0] nlm_col_loop_1_if_nlm_col_loop_1_if_acc_4_nl;
  wire[6:0] nl_nlm_col_loop_1_if_nlm_col_loop_1_if_acc_4_nl;
  wire[0:0] and_244_nl;
  wire[0:0] nlm_col_loop_2_if_nlm_col_loop_2_if_or_nl;
  wire[0:0] nor_nl;
  wire[0:0] mux_150_nl;
  wire[0:0] mux_149_nl;
  wire[0:0] mux_148_nl;
  wire[0:0] mux_147_nl;
  wire[0:0] mux_146_nl;
  wire[0:0] or_428_nl;
  wire[0:0] and_298_nl;
  wire[0:0] mux_175_nl;
  wire[0:0] mux_174_nl;
  wire[0:0] mux_173_nl;
  wire[0:0] mux_171_nl;
  wire[0:0] mux_170_nl;
  wire[0:0] mux_169_nl;
  wire[0:0] mux_168_nl;
  wire[2:0] addon_loop_2_mux_247_nl;
  wire[0:0] yuvdns_col_and_272_nl;
  wire[0:0] nlm_row_loop_nand_nl;
  wire[2:0] out_window_loop_out_window_loop_and_1_nl;
  wire[0:0] nlm_row_loop_nlm_row_loop_out_window_loop_not_3_nl;
  wire[2:0] window_read_window_read_and_21_nl;
  wire[0:0] nlm_row_loop_nlm_row_loop_nlm_row_loop_not_12_nl;
  wire[0:0] nlm_row_loop_mux_28_nl;
  wire[0:0] lines_read_lines_read_or_nl;
  wire[0:0] addon_loop_2_for_j_addon_loop_2_for_j_nor_nl;
  wire[0:0] addon_loop_2_for_j_or_nl;
  wire[0:0] addon_loop_2_for_j_and_1_nl;
  wire[0:0] or_472_nl;
  wire[0:0] yuvdns_col_if_yuvdns_col_if_yuvdns_col_if_or_5_nl;
  wire[11:0] operator_13_false_3_acc_nl;
  wire[12:0] nl_operator_13_false_3_acc_nl;
  wire[13:0] operator_13_false_2_acc_nl;
  wire[14:0] nl_operator_13_false_2_acc_nl;
  wire[0:0] nlm_col_loop_1_if_nlm_col_loop_1_if_or_nl;
  wire[0:0] window_read_window_read_and_2_nl;
  wire[0:0] nand_119_nl;
  wire[8:0] nlm_col_loop_if_if_2_acc_nl;
  wire[9:0] nl_nlm_col_loop_if_if_2_acc_nl;
  wire[0:0] nand_118_nl;
  wire[8:0] nlm_col_loop_1_if_if_2_acc_nl;
  wire[9:0] nl_nlm_col_loop_1_if_if_2_acc_nl;
  wire[0:0] nand_117_nl;
  wire[8:0] nlm_col_loop_2_if_if_2_acc_nl;
  wire[9:0] nl_nlm_col_loop_2_if_if_2_acc_nl;
  wire[24:0] nlm_col_loop_if_acc_30_nl;
  wire[25:0] nl_nlm_col_loop_if_acc_30_nl;
  wire[17:0] nlm_col_loop_if_mul_28_nl;
  wire[24:0] nlm_col_loop_1_if_acc_30_nl;
  wire[25:0] nl_nlm_col_loop_1_if_acc_30_nl;
  wire[17:0] nlm_col_loop_1_if_mul_28_nl;
  wire[24:0] nlm_col_loop_2_if_acc_30_nl;
  wire[25:0] nl_nlm_col_loop_2_if_acc_30_nl;
  wire[17:0] nlm_col_loop_2_if_mul_28_nl;
  wire[13:0] nlm_col_loop_2_if_acc_28_nl;
  wire[14:0] nl_nlm_col_loop_2_if_acc_28_nl;
  wire[13:0] nlm_col_loop_1_if_acc_28_nl;
  wire[14:0] nl_nlm_col_loop_1_if_acc_28_nl;
  wire[13:0] nlm_col_loop_if_acc_28_nl;
  wire[14:0] nl_nlm_col_loop_if_acc_28_nl;
  wire[9:0] yuvdns_nlm_2_else_div_nl;
  wire[24:0] yuvdns_nlm_2_acc_2_nl;
  wire[25:0] nl_yuvdns_nlm_2_acc_2_nl;
  wire[17:0] yuvdns_nlm_2_mul_1_nl;
  wire[0:0] yuvdns_col_or_9_nl;
  wire[0:0] nlm_row_loop_and_260_nl;
  wire[9:0] yuvdns_nlm_1_else_div_nl;
  wire[24:0] yuvdns_nlm_1_acc_2_nl;
  wire[25:0] nl_yuvdns_nlm_1_acc_2_nl;
  wire[17:0] yuvdns_nlm_1_mul_1_nl;
  wire[0:0] yuvdns_col_or_7_nl;
  wire[0:0] nlm_row_loop_and_258_nl;
  wire[9:0] yuvdns_nlm_else_div_nl;
  wire[24:0] yuvdns_nlm_acc_2_nl;
  wire[25:0] nl_yuvdns_nlm_acc_2_nl;
  wire[17:0] yuvdns_nlm_mul_1_nl;
  wire[0:0] yuvdns_col_or_5_nl;
  wire[0:0] nlm_row_loop_and_256_nl;
  wire[3:0] operator_4_false_3_acc_nl;
  wire[4:0] nl_operator_4_false_3_acc_nl;
  wire[10:0] yuvdns_abs_acc_nl;
  wire[11:0] nl_yuvdns_abs_acc_nl;
  wire[10:0] yuvdns_abs_1_acc_nl;
  wire[11:0] nl_yuvdns_abs_1_acc_nl;
  wire[10:0] yuvdns_abs_2_acc_nl;
  wire[11:0] nl_yuvdns_abs_2_acc_nl;
  wire[10:0] yuvdns_abs_3_acc_nl;
  wire[11:0] nl_yuvdns_abs_3_acc_nl;
  wire[10:0] yuvdns_abs_4_acc_nl;
  wire[11:0] nl_yuvdns_abs_4_acc_nl;
  wire[10:0] yuvdns_abs_5_acc_nl;
  wire[11:0] nl_yuvdns_abs_5_acc_nl;
  wire[10:0] yuvdns_abs_6_acc_nl;
  wire[11:0] nl_yuvdns_abs_6_acc_nl;
  wire[10:0] yuvdns_abs_7_acc_nl;
  wire[11:0] nl_yuvdns_abs_7_acc_nl;
  wire[10:0] yuvdns_abs_8_acc_nl;
  wire[11:0] nl_yuvdns_abs_8_acc_nl;
  wire[23:0] nlm_col_loop_if_acc_nl;
  wire[27:0] nl_nlm_col_loop_if_acc_nl;
  wire[19:0] nlm_col_loop_if_mul_11_nl;
  wire[19:0] nlm_col_loop_if_mul_14_nl;
  wire[19:0] nlm_col_loop_if_mul_2_nl;
  wire[19:0] nlm_col_loop_if_mul_23_nl;
  wire[19:0] nlm_col_loop_if_mul_26_nl;
  wire[19:0] nlm_col_loop_if_mul_5_nl;
  wire[19:0] nlm_col_loop_if_mul_8_nl;
  wire[19:0] nlm_col_loop_if_mul_17_nl;
  wire[19:0] nlm_col_loop_if_mul_20_nl;
  wire[20:0] nlm_col_loop_if_else_acc_nl;
  wire[21:0] nl_nlm_col_loop_if_else_acc_nl;
  wire[0:0] nlm_col_loop_if_if_not_nl;
  wire[21:0] nlm_col_loop_if_acc_26_nl;
  wire[22:0] nl_nlm_col_loop_if_acc_26_nl;
  wire[10:0] yuvdns_abs_9_acc_nl;
  wire[11:0] nl_yuvdns_abs_9_acc_nl;
  wire[10:0] yuvdns_abs_10_acc_nl;
  wire[11:0] nl_yuvdns_abs_10_acc_nl;
  wire[10:0] yuvdns_abs_11_acc_nl;
  wire[11:0] nl_yuvdns_abs_11_acc_nl;
  wire[10:0] yuvdns_abs_12_acc_nl;
  wire[11:0] nl_yuvdns_abs_12_acc_nl;
  wire[10:0] yuvdns_abs_13_acc_nl;
  wire[11:0] nl_yuvdns_abs_13_acc_nl;
  wire[10:0] yuvdns_abs_14_acc_nl;
  wire[11:0] nl_yuvdns_abs_14_acc_nl;
  wire[10:0] yuvdns_abs_15_acc_nl;
  wire[11:0] nl_yuvdns_abs_15_acc_nl;
  wire[10:0] yuvdns_abs_16_acc_nl;
  wire[11:0] nl_yuvdns_abs_16_acc_nl;
  wire[10:0] yuvdns_abs_17_acc_nl;
  wire[11:0] nl_yuvdns_abs_17_acc_nl;
  wire[23:0] nlm_col_loop_1_if_acc_nl;
  wire[27:0] nl_nlm_col_loop_1_if_acc_nl;
  wire[19:0] nlm_col_loop_1_if_mul_11_nl;
  wire[19:0] nlm_col_loop_1_if_mul_14_nl;
  wire[19:0] nlm_col_loop_1_if_mul_2_nl;
  wire[19:0] nlm_col_loop_1_if_mul_23_nl;
  wire[19:0] nlm_col_loop_1_if_mul_26_nl;
  wire[19:0] nlm_col_loop_1_if_mul_5_nl;
  wire[19:0] nlm_col_loop_1_if_mul_8_nl;
  wire[19:0] nlm_col_loop_1_if_mul_17_nl;
  wire[19:0] nlm_col_loop_1_if_mul_20_nl;
  wire[20:0] nlm_col_loop_1_if_else_acc_nl;
  wire[21:0] nl_nlm_col_loop_1_if_else_acc_nl;
  wire[0:0] nlm_col_loop_1_if_if_not_nl;
  wire[21:0] nlm_col_loop_1_if_acc_26_nl;
  wire[22:0] nl_nlm_col_loop_1_if_acc_26_nl;
  wire[10:0] yuvdns_abs_18_acc_nl;
  wire[11:0] nl_yuvdns_abs_18_acc_nl;
  wire[10:0] yuvdns_abs_19_acc_nl;
  wire[11:0] nl_yuvdns_abs_19_acc_nl;
  wire[10:0] yuvdns_abs_20_acc_nl;
  wire[11:0] nl_yuvdns_abs_20_acc_nl;
  wire[10:0] yuvdns_abs_21_acc_nl;
  wire[11:0] nl_yuvdns_abs_21_acc_nl;
  wire[10:0] yuvdns_abs_22_acc_nl;
  wire[11:0] nl_yuvdns_abs_22_acc_nl;
  wire[10:0] yuvdns_abs_23_acc_nl;
  wire[11:0] nl_yuvdns_abs_23_acc_nl;
  wire[10:0] yuvdns_abs_24_acc_nl;
  wire[11:0] nl_yuvdns_abs_24_acc_nl;
  wire[10:0] yuvdns_abs_25_acc_nl;
  wire[11:0] nl_yuvdns_abs_25_acc_nl;
  wire[10:0] yuvdns_abs_26_acc_nl;
  wire[11:0] nl_yuvdns_abs_26_acc_nl;
  wire[23:0] nlm_col_loop_2_if_acc_nl;
  wire[27:0] nl_nlm_col_loop_2_if_acc_nl;
  wire[19:0] nlm_col_loop_2_if_mul_11_nl;
  wire[19:0] nlm_col_loop_2_if_mul_14_nl;
  wire[19:0] nlm_col_loop_2_if_mul_2_nl;
  wire[19:0] nlm_col_loop_2_if_mul_23_nl;
  wire[19:0] nlm_col_loop_2_if_mul_26_nl;
  wire[19:0] nlm_col_loop_2_if_mul_5_nl;
  wire[19:0] nlm_col_loop_2_if_mul_8_nl;
  wire[19:0] nlm_col_loop_2_if_mul_17_nl;
  wire[19:0] nlm_col_loop_2_if_mul_20_nl;
  wire[20:0] nlm_col_loop_2_if_else_acc_nl;
  wire[21:0] nl_nlm_col_loop_2_if_else_acc_nl;
  wire[0:0] nlm_col_loop_2_if_if_not_nl;
  wire[21:0] nlm_col_loop_2_if_acc_26_nl;
  wire[22:0] nl_nlm_col_loop_2_if_acc_26_nl;
  wire[0:0] yuvdns_reg_eb_not_3_nl;
  wire[13:0] addon_loop_2_for_acc_14_nl;
  wire[14:0] nl_addon_loop_2_for_acc_14_nl;
  wire[0:0] addon_loop_2_not_554_nl;
  wire[0:0] nlm_row_loop_mux_26_nl;
  wire[0:0] nlm_row_loop_yuvdns_nor_nl;
  wire[1:0] nlm_row_loop_and_nl;
  wire[1:0] nlm_row_loop_mux1h_527_nl;
  wire[0:0] nlm_row_loop_and_263_nl;
  wire[0:0] nlm_row_loop_and_264_nl;
  wire[0:0] nlm_row_loop_or_548_nl;
  wire[0:0] nlm_row_loop_nor_7_nl;
  wire[0:0] nlm_row_loop_and_262_nl;
  wire[0:0] yuvdns_reg_eb_not_5_nl;
  wire[0:0] out_window_loop_out_window_loop_out_window_loop_or_nl;
  wire[0:0] and_264_nl;
  wire[13:0] yuvdns_col_acc_2_nl;
  wire[14:0] nl_yuvdns_col_acc_2_nl;
  wire[0:0] or_446_nl;
  wire[13:0] yuvdns_row_acc_2_nl;
  wire[14:0] nl_yuvdns_row_acc_2_nl;
  wire[0:0] nlm_row_loop_mux_nl;
  wire[0:0] nand_127_nl;
  wire[0:0] or_466_nl;
  wire[0:0] or_469_nl;
  wire[0:0] addon_loop_2_mux_250_nl;
  wire[0:0] or_483_nl;
  wire[0:0] in_window_loop_and_90_nl;
  wire[0:0] in_window_loop_and_86_nl;
  wire[0:0] in_window_loop_and_84_nl;
  wire[0:0] in_window_loop_and_82_nl;
  wire[0:0] in_window_loop_and_78_nl;
  wire[0:0] in_window_loop_and_76_nl;
  wire[0:0] in_window_loop_and_74_nl;
  wire[0:0] in_window_loop_and_72_nl;
  wire[0:0] in_window_loop_and_68_nl;
  wire[0:0] in_window_loop_and_66_nl;
  wire[0:0] in_window_loop_and_64_nl;
  wire[0:0] in_window_loop_and_60_nl;
  wire[0:0] in_window_loop_and_59_nl;
  wire[0:0] in_window_loop_and_56_nl;
  wire[0:0] in_window_loop_and_53_nl;
  wire[0:0] in_window_loop_and_50_nl;
  wire[0:0] in_window_loop_and_47_nl;
  wire[0:0] in_window_loop_and_44_nl;
  wire[0:0] in_window_loop_and_41_nl;
  wire[0:0] in_window_loop_and_37_nl;
  wire[0:0] in_window_loop_and_31_nl;
  wire[0:0] in_window_loop_and_27_nl;
  wire[0:0] in_window_loop_and_23_nl;
  wire[0:0] in_window_loop_and_19_nl;
  wire[0:0] in_window_loop_and_14_nl;
  wire[0:0] in_window_loop_and_9_nl;
  wire[0:0] in_window_loop_and_4_nl;
  wire[0:0] mux_20_nl;
  wire[0:0] or_53_nl;
  wire[0:0] nor_87_nl;
  wire[0:0] nor_86_nl;
  wire[0:0] or_263_nl;
  wire[0:0] or_262_nl;
  wire[0:0] mux_153_nl;
  wire[0:0] mux_161_nl;
  wire[0:0] mux_163_nl;
  wire[0:0] mux_162_nl;
  wire[0:0] mux_160_nl;
  wire[0:0] mux_159_nl;
  wire[0:0] mux_158_nl;
  wire[0:0] mux_157_nl;
  wire[0:0] mux_156_nl;
  wire[0:0] mux_155_nl;
  wire[0:0] or_76_nl;
  wire[41:0] mul_nl;
  wire[0:0] nlm_col_loop_if_else_1_if_nlm_col_loop_if_else_1_if_and_1_nl;
  wire[23:0] nlm_col_loop_if_else_1_if_mux_2_nl;
  wire[41:0] mul_1_nl;
  wire[0:0] nlm_col_loop_1_if_else_1_if_nlm_col_loop_1_if_else_1_if_and_1_nl;
  wire[23:0] nlm_col_loop_1_if_else_1_if_mux_2_nl;
  wire[41:0] mul_2_nl;
  wire[0:0] nlm_col_loop_2_if_else_1_if_nlm_col_loop_2_if_else_1_if_and_1_nl;
  wire[23:0] nlm_col_loop_2_if_else_1_if_mux_2_nl;
  wire[2:0] nlm_col_loop_1_if_mux1h_7_nl;
  wire[0:0] nlm_col_loop_1_if_mux1h_8_nl;
  wire[2:0] operator_3_false_mux_2_nl;
  wire[2:0] operator_3_false_mux_3_nl;
  wire[2:0] nlm_col_loop_if_mux_17_nl;
  wire[0:0] nlm_col_loop_if_or_2_nl;
  wire[2:0] operator_4_false_7_mux_3_nl;
  wire[4:0] operator_4_false_7_mux_4_nl;
  wire[3:0] operator_4_false_7_acc_1_nl;
  wire[4:0] nl_operator_4_false_7_acc_1_nl;
  wire[3:0] operator_4_false_operator_4_false_or_1_nl;
  wire[0:0] and_423_nl;
  wire[2:0] operator_4_false_or_1_nl;
  wire[0:0] or_604_nl;
  wire[3:0] operator_4_false_11_mux_3_nl;
  wire[4:0] operator_4_false_11_mux_4_nl;
  wire[5:0] nlm_col_loop_if_nlm_col_loop_if_nlm_col_loop_if_nor_1_nl;
  wire[3:0] nlm_col_loop_if_mux_18_nl;
  wire[0:0] nlm_col_loop_if_or_3_nl;
  wire[5:0] nlm_col_loop_1_if_nlm_col_loop_1_if_nlm_col_loop_1_if_nor_1_nl;
  wire[3:0] nlm_col_loop_1_if_mux_16_nl;
  wire[0:0] nlm_col_loop_1_if_or_1_nl;
  wire[12:0] addon_loop_2_for_mux1h_45_nl;
  wire[0:0] mux_176_nl;
  wire[0:0] nor_174_nl;
  wire[0:0] nor_177_nl;
  wire[10:0] acc_9_nl;
  wire[11:0] nl_acc_9_nl;
  wire[9:0] yuvdns_abs_else_mux_2_nl;
  wire[9:0] yuvdns_abs_else_mux_3_nl;
  wire[10:0] acc_10_nl;
  wire[11:0] nl_acc_10_nl;
  wire[9:0] yuvdns_abs_23_else_mux_2_nl;
  wire[9:0] yuvdns_abs_23_else_mux_3_nl;
  wire[10:0] acc_11_nl;
  wire[11:0] nl_acc_11_nl;
  wire[9:0] yuvdns_abs_1_else_mux_2_nl;
  wire[9:0] yuvdns_abs_1_else_mux_3_nl;
  wire[10:0] acc_12_nl;
  wire[11:0] nl_acc_12_nl;
  wire[9:0] yuvdns_abs_26_else_mux_2_nl;
  wire[9:0] yuvdns_abs_26_else_mux_3_nl;
  wire[10:0] acc_13_nl;
  wire[11:0] nl_acc_13_nl;
  wire[9:0] yuvdns_abs_2_else_mux_2_nl;
  wire[9:0] yuvdns_abs_2_else_mux_3_nl;
  wire[10:0] acc_14_nl;
  wire[11:0] nl_acc_14_nl;
  wire[9:0] yuvdns_abs_16_else_mux_2_nl;
  wire[9:0] yuvdns_abs_16_else_mux_3_nl;
  wire[10:0] acc_15_nl;
  wire[11:0] nl_acc_15_nl;
  wire[9:0] yuvdns_abs_3_else_mux_2_nl;
  wire[9:0] yuvdns_abs_3_else_mux_3_nl;
  wire[10:0] acc_16_nl;
  wire[11:0] nl_acc_16_nl;
  wire[9:0] yuvdns_abs_22_else_mux_2_nl;
  wire[9:0] yuvdns_abs_22_else_mux_3_nl;
  wire[10:0] acc_17_nl;
  wire[11:0] nl_acc_17_nl;
  wire[9:0] yuvdns_abs_4_else_mux_2_nl;
  wire[9:0] yuvdns_abs_4_else_mux_3_nl;
  wire[10:0] acc_18_nl;
  wire[11:0] nl_acc_18_nl;
  wire[9:0] yuvdns_abs_21_else_mux_2_nl;
  wire[9:0] yuvdns_abs_21_else_mux_3_nl;
  wire[10:0] acc_19_nl;
  wire[11:0] nl_acc_19_nl;
  wire[9:0] yuvdns_abs_5_else_mux_2_nl;
  wire[9:0] yuvdns_abs_5_else_mux_3_nl;
  wire[10:0] acc_20_nl;
  wire[11:0] nl_acc_20_nl;
  wire[9:0] yuvdns_abs_24_else_mux_2_nl;
  wire[9:0] yuvdns_abs_24_else_mux_3_nl;
  wire[10:0] acc_21_nl;
  wire[11:0] nl_acc_21_nl;
  wire[9:0] yuvdns_abs_6_else_mux_2_nl;
  wire[9:0] yuvdns_abs_6_else_mux_3_nl;
  wire[10:0] acc_22_nl;
  wire[11:0] nl_acc_22_nl;
  wire[9:0] yuvdns_abs_20_else_mux_2_nl;
  wire[9:0] yuvdns_abs_20_else_mux_3_nl;
  wire[10:0] acc_23_nl;
  wire[11:0] nl_acc_23_nl;
  wire[9:0] yuvdns_abs_7_else_mux_2_nl;
  wire[9:0] yuvdns_abs_7_else_mux_3_nl;
  wire[10:0] acc_24_nl;
  wire[11:0] nl_acc_24_nl;
  wire[9:0] yuvdns_abs_15_else_mux_2_nl;
  wire[9:0] yuvdns_abs_15_else_mux_3_nl;
  wire[10:0] acc_25_nl;
  wire[11:0] nl_acc_25_nl;
  wire[9:0] yuvdns_abs_8_else_mux_2_nl;
  wire[9:0] yuvdns_abs_8_else_mux_3_nl;
  wire[10:0] acc_26_nl;
  wire[11:0] nl_acc_26_nl;
  wire[9:0] yuvdns_abs_17_else_mux_2_nl;
  wire[9:0] yuvdns_abs_17_else_mux_3_nl;
  wire[10:0] acc_27_nl;
  wire[11:0] nl_acc_27_nl;
  wire[9:0] yuvdns_abs_9_else_mux_2_nl;
  wire[9:0] yuvdns_abs_9_else_mux_3_nl;
  wire[10:0] acc_28_nl;
  wire[11:0] nl_acc_28_nl;
  wire[9:0] yuvdns_abs_19_else_mux_2_nl;
  wire[9:0] yuvdns_abs_19_else_mux_3_nl;
  wire[10:0] acc_29_nl;
  wire[11:0] nl_acc_29_nl;
  wire[9:0] yuvdns_abs_10_else_mux_2_nl;
  wire[9:0] yuvdns_abs_10_else_mux_3_nl;
  wire[10:0] acc_30_nl;
  wire[11:0] nl_acc_30_nl;
  wire[9:0] yuvdns_abs_25_else_mux_2_nl;
  wire[9:0] yuvdns_abs_25_else_mux_3_nl;
  wire[10:0] acc_31_nl;
  wire[11:0] nl_acc_31_nl;
  wire[9:0] yuvdns_abs_11_else_mux_2_nl;
  wire[9:0] yuvdns_abs_11_else_mux_3_nl;
  wire[10:0] acc_32_nl;
  wire[11:0] nl_acc_32_nl;
  wire[9:0] yuvdns_abs_14_else_mux_2_nl;
  wire[9:0] yuvdns_abs_14_else_mux_3_nl;
  wire[10:0] acc_33_nl;
  wire[11:0] nl_acc_33_nl;
  wire[9:0] yuvdns_abs_12_else_mux_2_nl;
  wire[9:0] yuvdns_abs_12_else_mux_3_nl;
  wire[10:0] acc_34_nl;
  wire[11:0] nl_acc_34_nl;
  wire[9:0] yuvdns_abs_18_else_mux_2_nl;
  wire[9:0] yuvdns_abs_18_else_mux_3_nl;
  wire[10:0] acc_35_nl;
  wire[11:0] nl_acc_35_nl;
  wire[9:0] yuvdns_abs_13_else_mux_2_nl;
  wire[9:0] yuvdns_abs_13_else_mux_3_nl;
  wire[20:0] operator_21_false_mux_2_nl;
  wire[18:0] operator_21_false_mux_3_nl;
  wire[20:0] operator_21_false_2_mux_2_nl;
  wire[18:0] operator_21_false_2_mux_3_nl;
  wire[20:0] operator_21_false_4_mux_2_nl;
  wire[18:0] operator_21_false_4_mux_3_nl;

  // Interconnect Declarations for Component Instantiations 
  wire[28:0] operator_32_false_acc_nl;
  wire[29:0] nl_operator_32_false_acc_nl;
  wire [3:0] nl_U_ROM_1i4_1o7_79be7b8354f3336325ccc8204e2443072e_rg_I_1;
  assign nl_operator_32_false_acc_nl = ({1'b1 , (signext_28_25(~ (operator_32_false_acc_psp_sva_1[28:4])))})
      + 29'b00000000000000000000000000001;
  assign operator_32_false_acc_nl = nl_operator_32_false_acc_nl[28:0];
  assign nl_U_ROM_1i4_1o7_79be7b8354f3336325ccc8204e2443072e_rg_I_1 = MUX_v_4_2_2((operator_32_false_acc_psp_sva_1[3:0]),
      4'b1111, (readslicef_29_1_28(operator_32_false_acc_nl)));
  wire [2:0] nl_U_ROM_1i3_1o8_a9da8dd3d4c2cabf7072e520d048f3072e_rg_I_1;
  assign nl_U_ROM_1i3_1o8_a9da8dd3d4c2cabf7072e520d048f3072e_rg_I_1 = z_out_41_14[2:0];
  wire[28:0] operator_32_false_1_acc_nl;
  wire[29:0] nl_operator_32_false_1_acc_nl;
  wire [3:0] nl_U_ROM_1i4_1o7_79be7b8354f3336325ccc8204e2443072e_1_rg_I_1;
  assign nl_operator_32_false_1_acc_nl = ({1'b1 , (signext_28_25(~ (operator_32_false_1_acc_psp_sva_1[28:4])))})
      + 29'b00000000000000000000000000001;
  assign operator_32_false_1_acc_nl = nl_operator_32_false_1_acc_nl[28:0];
  assign nl_U_ROM_1i4_1o7_79be7b8354f3336325ccc8204e2443072e_1_rg_I_1 = MUX_v_4_2_2((operator_32_false_1_acc_psp_sva_1[3:0]),
      4'b1111, (readslicef_29_1_28(operator_32_false_1_acc_nl)));
  wire [2:0] nl_U_ROM_1i3_1o8_a9da8dd3d4c2cabf7072e520d048f3072e_1_rg_I_1;
  assign nl_U_ROM_1i3_1o8_a9da8dd3d4c2cabf7072e520d048f3072e_1_rg_I_1 = z_out_1_41_14[2:0];
  wire[28:0] operator_32_false_2_acc_nl;
  wire[29:0] nl_operator_32_false_2_acc_nl;
  wire [3:0] nl_U_ROM_1i4_1o7_79be7b8354f3336325ccc8204e2443072e_2_rg_I_1;
  assign nl_operator_32_false_2_acc_nl = ({1'b1 , (signext_28_25(~ (operator_32_false_2_acc_psp_sva_1[28:4])))})
      + 29'b00000000000000000000000000001;
  assign operator_32_false_2_acc_nl = nl_operator_32_false_2_acc_nl[28:0];
  assign nl_U_ROM_1i4_1o7_79be7b8354f3336325ccc8204e2443072e_2_rg_I_1 = MUX_v_4_2_2((operator_32_false_2_acc_psp_sva_1[3:0]),
      4'b1111, (readslicef_29_1_28(operator_32_false_2_acc_nl)));
  wire [2:0] nl_U_ROM_1i3_1o8_a9da8dd3d4c2cabf7072e520d048f3072e_2_rg_I_1;
  assign nl_U_ROM_1i3_1o8_a9da8dd3d4c2cabf7072e520d048f3072e_2_rg_I_1 = z_out_2_41_14[2:0];
  wire [23:0] nl_yuv444dns_core_ylineBuf_rsc_0_0_i_1_inst_ylineBuf_rsc_0_0_i_adra_d_core;
  assign nl_yuv444dns_core_ylineBuf_rsc_0_0_i_1_inst_ylineBuf_rsc_0_0_i_adra_d_core
      = {12'b000000000000 , window_read_mux_4_rmff};
  wire[9:0] lines_read_mux_26_nl;
  wire [19:0] nl_yuv444dns_core_ylineBuf_rsc_0_0_i_1_inst_ylineBuf_rsc_0_0_i_da_d_core;
  assign lines_read_mux_26_nl = MUX_v_10_2_2(y_t_lpi_1_dfm_1_mx0, lines_read_lines_read_slc_yWindow_10_9_0_1_cmx_sva_1,
      or_dcpl_190);
  assign nl_yuv444dns_core_ylineBuf_rsc_0_0_i_1_inst_ylineBuf_rsc_0_0_i_da_d_core
      = {10'b0000000000 , lines_read_mux_26_nl};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_0_0_i_1_inst_ylineBuf_rsc_0_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_0_0_i_1_inst_ylineBuf_rsc_0_0_i_ena_d_core_psct
      = {1'b0 , window_read_window_read_nor_23_rmff};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_0_0_i_1_inst_ylineBuf_rsc_0_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_0_0_i_1_inst_ylineBuf_rsc_0_0_i_wea_d_core_psct
      = {1'b0 , window_read_window_read_nor_5_rmff};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_0_0_i_1_inst_ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_0_0_i_1_inst_ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_19_rmff};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_0_0_i_1_inst_ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_0_0_i_1_inst_ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_5_rmff};
  wire [23:0] nl_yuv444dns_core_ylineBuf_rsc_1_0_i_1_inst_ylineBuf_rsc_1_0_i_adra_d_core;
  assign nl_yuv444dns_core_ylineBuf_rsc_1_0_i_1_inst_ylineBuf_rsc_1_0_i_adra_d_core
      = {12'b000000000000 , window_read_mux_8_rmff};
  wire [19:0] nl_yuv444dns_core_ylineBuf_rsc_1_0_i_1_inst_ylineBuf_rsc_1_0_i_da_d_core;
  assign nl_yuv444dns_core_ylineBuf_rsc_1_0_i_1_inst_ylineBuf_rsc_1_0_i_da_d_core
      = {10'b0000000000 , lines_read_lines_read_slc_yWindow_10_9_0_1_cmx_sva_1};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_1_0_i_1_inst_ylineBuf_rsc_1_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_1_0_i_1_inst_ylineBuf_rsc_1_0_i_ena_d_core_psct
      = {1'b0 , window_read_window_read_and_24_rmff};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_1_0_i_1_inst_ylineBuf_rsc_1_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_1_0_i_1_inst_ylineBuf_rsc_1_0_i_wea_d_core_psct
      = {1'b0 , window_read_window_read_nor_11_rmff};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_1_0_i_1_inst_ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_1_0_i_1_inst_ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_18_rmff};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_1_0_i_1_inst_ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_1_0_i_1_inst_ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_11_rmff};
  wire [23:0] nl_yuv444dns_core_ylineBuf_rsc_2_0_i_1_inst_ylineBuf_rsc_2_0_i_adra_d_core;
  assign nl_yuv444dns_core_ylineBuf_rsc_2_0_i_1_inst_ylineBuf_rsc_2_0_i_adra_d_core
      = {12'b000000000000 , (yuvdns_col_col_lpi_1_dfm_1_1[11:0])};
  wire [19:0] nl_yuv444dns_core_ylineBuf_rsc_2_0_i_1_inst_ylineBuf_rsc_2_0_i_da_d_core;
  assign nl_yuv444dns_core_ylineBuf_rsc_2_0_i_1_inst_ylineBuf_rsc_2_0_i_da_d_core
      = {10'b0000000000 , lines_read_lines_read_slc_yWindow_10_9_0_1_cmx_sva_1};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_2_0_i_1_inst_ylineBuf_rsc_2_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_2_0_i_1_inst_ylineBuf_rsc_2_0_i_ena_d_core_psct
      = {1'b0 , window_read_window_read_nor_22_rmff};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_2_0_i_1_inst_ylineBuf_rsc_2_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_2_0_i_1_inst_ylineBuf_rsc_2_0_i_wea_d_core_psct
      = {1'b0 , window_read_window_read_nor_10_rmff};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_2_0_i_1_inst_ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_2_0_i_1_inst_ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_17_rmff};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_2_0_i_1_inst_ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_2_0_i_1_inst_ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_10_rmff};
  wire [23:0] nl_yuv444dns_core_ylineBuf_rsc_3_0_i_1_inst_ylineBuf_rsc_3_0_i_adra_d_core;
  assign nl_yuv444dns_core_ylineBuf_rsc_3_0_i_1_inst_ylineBuf_rsc_3_0_i_adra_d_core
      = {12'b000000000000 , (yuvdns_col_col_lpi_1_dfm_1_1[11:0])};
  wire [19:0] nl_yuv444dns_core_ylineBuf_rsc_3_0_i_1_inst_ylineBuf_rsc_3_0_i_da_d_core;
  assign nl_yuv444dns_core_ylineBuf_rsc_3_0_i_1_inst_ylineBuf_rsc_3_0_i_da_d_core
      = {10'b0000000000 , lines_read_lines_read_slc_yWindow_10_9_0_1_cmx_sva_1};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_3_0_i_1_inst_ylineBuf_rsc_3_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_3_0_i_1_inst_ylineBuf_rsc_3_0_i_ena_d_core_psct
      = {1'b0 , window_read_window_read_nor_21_rmff};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_3_0_i_1_inst_ylineBuf_rsc_3_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_3_0_i_1_inst_ylineBuf_rsc_3_0_i_wea_d_core_psct
      = {1'b0 , window_read_window_read_nor_9_rmff};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_3_0_i_1_inst_ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_3_0_i_1_inst_ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_16_rmff};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_3_0_i_1_inst_ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_3_0_i_1_inst_ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_9_rmff};
  wire [23:0] nl_yuv444dns_core_ylineBuf_rsc_4_0_i_1_inst_ylineBuf_rsc_4_0_i_adra_d_core;
  assign nl_yuv444dns_core_ylineBuf_rsc_4_0_i_1_inst_ylineBuf_rsc_4_0_i_adra_d_core
      = {12'b000000000000 , window_read_mux_18_rmff};
  wire [19:0] nl_yuv444dns_core_ylineBuf_rsc_4_0_i_1_inst_ylineBuf_rsc_4_0_i_da_d_core;
  assign nl_yuv444dns_core_ylineBuf_rsc_4_0_i_1_inst_ylineBuf_rsc_4_0_i_da_d_core
      = {10'b0000000000 , lines_read_lines_read_slc_yWindow_10_9_0_1_cmx_sva_1};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_4_0_i_1_inst_ylineBuf_rsc_4_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_4_0_i_1_inst_ylineBuf_rsc_4_0_i_ena_d_core_psct
      = {1'b0 , window_read_window_read_and_23_rmff};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_4_0_i_1_inst_ylineBuf_rsc_4_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_4_0_i_1_inst_ylineBuf_rsc_4_0_i_wea_d_core_psct
      = {1'b0 , window_read_window_read_nor_8_rmff};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_4_0_i_1_inst_ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_4_0_i_1_inst_ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_15_rmff};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_4_0_i_1_inst_ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_4_0_i_1_inst_ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_8_rmff};
  wire [23:0] nl_yuv444dns_core_ylineBuf_rsc_5_0_i_1_inst_ylineBuf_rsc_5_0_i_adra_d_core;
  assign nl_yuv444dns_core_ylineBuf_rsc_5_0_i_1_inst_ylineBuf_rsc_5_0_i_adra_d_core
      = {12'b000000000000 , window_read_mux_22_rmff};
  wire [19:0] nl_yuv444dns_core_ylineBuf_rsc_5_0_i_1_inst_ylineBuf_rsc_5_0_i_da_d_core;
  assign nl_yuv444dns_core_ylineBuf_rsc_5_0_i_1_inst_ylineBuf_rsc_5_0_i_da_d_core
      = {10'b0000000000 , lines_read_lines_read_slc_yWindow_10_9_0_1_cmx_sva_1};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_5_0_i_1_inst_ylineBuf_rsc_5_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_5_0_i_1_inst_ylineBuf_rsc_5_0_i_ena_d_core_psct
      = {1'b0 , window_read_window_read_and_22_rmff};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_5_0_i_1_inst_ylineBuf_rsc_5_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_5_0_i_1_inst_ylineBuf_rsc_5_0_i_wea_d_core_psct
      = {1'b0 , window_read_window_read_nor_7_rmff};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_5_0_i_1_inst_ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_5_0_i_1_inst_ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_14_rmff};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_5_0_i_1_inst_ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_5_0_i_1_inst_ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_7_rmff};
  wire [23:0] nl_yuv444dns_core_ylineBuf_rsc_6_0_i_1_inst_ylineBuf_rsc_6_0_i_adra_d_core;
  assign nl_yuv444dns_core_ylineBuf_rsc_6_0_i_1_inst_ylineBuf_rsc_6_0_i_adra_d_core
      = {12'b000000000000 , window_read_mux_26_rmff};
  wire [19:0] nl_yuv444dns_core_ylineBuf_rsc_6_0_i_1_inst_ylineBuf_rsc_6_0_i_da_d_core;
  assign nl_yuv444dns_core_ylineBuf_rsc_6_0_i_1_inst_ylineBuf_rsc_6_0_i_da_d_core
      = {10'b0000000000 , lines_read_lines_read_slc_yWindow_10_9_0_1_cmx_sva_1};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_6_0_i_1_inst_ylineBuf_rsc_6_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_6_0_i_1_inst_ylineBuf_rsc_6_0_i_ena_d_core_psct
      = {1'b0 , window_read_window_read_and_rmff};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_6_0_i_1_inst_ylineBuf_rsc_6_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_6_0_i_1_inst_ylineBuf_rsc_6_0_i_wea_d_core_psct
      = {1'b0 , window_read_window_read_nor_6_rmff};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_6_0_i_1_inst_ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_6_0_i_1_inst_ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_13_rmff};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_6_0_i_1_inst_ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_6_0_i_1_inst_ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_6_rmff};
  wire [23:0] nl_yuv444dns_core_ylineBuf_rsc_7_0_i_1_inst_ylineBuf_rsc_7_0_i_adra_d_core;
  assign nl_yuv444dns_core_ylineBuf_rsc_7_0_i_1_inst_ylineBuf_rsc_7_0_i_adra_d_core
      = {12'b000000000000 , window_read_mux_30_rmff};
  wire[9:0] lines_read_mux_27_nl;
  wire [19:0] nl_yuv444dns_core_ylineBuf_rsc_7_0_i_1_inst_ylineBuf_rsc_7_0_i_da_d_core;
  assign lines_read_mux_27_nl = MUX_v_10_2_2(lines_read_lines_read_slc_yWindow_10_9_0_1_cmx_sva_1,
      y_t_lpi_1_dfm_1_mx0, and_dcpl_204);
  assign nl_yuv444dns_core_ylineBuf_rsc_7_0_i_1_inst_ylineBuf_rsc_7_0_i_da_d_core
      = {10'b0000000000 , lines_read_mux_27_nl};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_7_0_i_1_inst_ylineBuf_rsc_7_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_7_0_i_1_inst_ylineBuf_rsc_7_0_i_ena_d_core_psct
      = {1'b0 , window_read_window_read_nor_20_rmff};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_7_0_i_1_inst_ylineBuf_rsc_7_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_7_0_i_1_inst_ylineBuf_rsc_7_0_i_wea_d_core_psct
      = {1'b0 , window_read_window_read_nor_4_rmff};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_7_0_i_1_inst_ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_7_0_i_1_inst_ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_12_rmff};
  wire [1:0] nl_yuv444dns_core_ylineBuf_rsc_7_0_i_1_inst_ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ylineBuf_rsc_7_0_i_1_inst_ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_4_rmff};
  wire [23:0] nl_yuv444dns_core_ulineBuf_rsc_0_0_i_1_inst_ulineBuf_rsc_0_0_i_adra_d_core;
  assign nl_yuv444dns_core_ulineBuf_rsc_0_0_i_1_inst_ulineBuf_rsc_0_0_i_adra_d_core
      = {12'b000000000000 , window_read_mux_4_rmff};
  wire[9:0] lines_read_mux_24_nl;
  wire [19:0] nl_yuv444dns_core_ulineBuf_rsc_0_0_i_1_inst_ulineBuf_rsc_0_0_i_da_d_core;
  assign lines_read_mux_24_nl = MUX_v_10_2_2(u_t_lpi_1_dfm_1_mx0, lines_read_lines_read_slc_uWindow_10_9_0_1_cmx_sva_1,
      or_dcpl_190);
  assign nl_yuv444dns_core_ulineBuf_rsc_0_0_i_1_inst_ulineBuf_rsc_0_0_i_da_d_core
      = {10'b0000000000 , lines_read_mux_24_nl};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_0_0_i_1_inst_ulineBuf_rsc_0_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_0_0_i_1_inst_ulineBuf_rsc_0_0_i_ena_d_core_psct
      = {1'b0 , window_read_window_read_nor_23_rmff};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_0_0_i_1_inst_ulineBuf_rsc_0_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_0_0_i_1_inst_ulineBuf_rsc_0_0_i_wea_d_core_psct
      = {1'b0 , window_read_window_read_nor_5_rmff};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_0_0_i_1_inst_ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_0_0_i_1_inst_ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_19_rmff};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_0_0_i_1_inst_ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_0_0_i_1_inst_ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_5_rmff};
  wire [23:0] nl_yuv444dns_core_ulineBuf_rsc_1_0_i_1_inst_ulineBuf_rsc_1_0_i_adra_d_core;
  assign nl_yuv444dns_core_ulineBuf_rsc_1_0_i_1_inst_ulineBuf_rsc_1_0_i_adra_d_core
      = {12'b000000000000 , window_read_mux_8_rmff};
  wire [19:0] nl_yuv444dns_core_ulineBuf_rsc_1_0_i_1_inst_ulineBuf_rsc_1_0_i_da_d_core;
  assign nl_yuv444dns_core_ulineBuf_rsc_1_0_i_1_inst_ulineBuf_rsc_1_0_i_da_d_core
      = {10'b0000000000 , lines_read_lines_read_slc_uWindow_10_9_0_1_cmx_sva_1};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_1_0_i_1_inst_ulineBuf_rsc_1_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_1_0_i_1_inst_ulineBuf_rsc_1_0_i_ena_d_core_psct
      = {1'b0 , window_read_window_read_and_24_rmff};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_1_0_i_1_inst_ulineBuf_rsc_1_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_1_0_i_1_inst_ulineBuf_rsc_1_0_i_wea_d_core_psct
      = {1'b0 , window_read_window_read_nor_11_rmff};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_1_0_i_1_inst_ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_1_0_i_1_inst_ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_18_rmff};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_1_0_i_1_inst_ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_1_0_i_1_inst_ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_11_rmff};
  wire [23:0] nl_yuv444dns_core_ulineBuf_rsc_2_0_i_1_inst_ulineBuf_rsc_2_0_i_adra_d_core;
  assign nl_yuv444dns_core_ulineBuf_rsc_2_0_i_1_inst_ulineBuf_rsc_2_0_i_adra_d_core
      = {12'b000000000000 , (yuvdns_col_col_lpi_1_dfm_1_1[11:0])};
  wire [19:0] nl_yuv444dns_core_ulineBuf_rsc_2_0_i_1_inst_ulineBuf_rsc_2_0_i_da_d_core;
  assign nl_yuv444dns_core_ulineBuf_rsc_2_0_i_1_inst_ulineBuf_rsc_2_0_i_da_d_core
      = {10'b0000000000 , lines_read_lines_read_slc_uWindow_10_9_0_1_cmx_sva_1};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_2_0_i_1_inst_ulineBuf_rsc_2_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_2_0_i_1_inst_ulineBuf_rsc_2_0_i_ena_d_core_psct
      = {1'b0 , window_read_window_read_nor_22_rmff};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_2_0_i_1_inst_ulineBuf_rsc_2_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_2_0_i_1_inst_ulineBuf_rsc_2_0_i_wea_d_core_psct
      = {1'b0 , window_read_window_read_nor_10_rmff};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_2_0_i_1_inst_ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_2_0_i_1_inst_ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_17_rmff};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_2_0_i_1_inst_ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_2_0_i_1_inst_ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_10_rmff};
  wire [23:0] nl_yuv444dns_core_ulineBuf_rsc_3_0_i_1_inst_ulineBuf_rsc_3_0_i_adra_d_core;
  assign nl_yuv444dns_core_ulineBuf_rsc_3_0_i_1_inst_ulineBuf_rsc_3_0_i_adra_d_core
      = {12'b000000000000 , (yuvdns_col_col_lpi_1_dfm_1_1[11:0])};
  wire [19:0] nl_yuv444dns_core_ulineBuf_rsc_3_0_i_1_inst_ulineBuf_rsc_3_0_i_da_d_core;
  assign nl_yuv444dns_core_ulineBuf_rsc_3_0_i_1_inst_ulineBuf_rsc_3_0_i_da_d_core
      = {10'b0000000000 , lines_read_lines_read_slc_uWindow_10_9_0_1_cmx_sva_1};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_3_0_i_1_inst_ulineBuf_rsc_3_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_3_0_i_1_inst_ulineBuf_rsc_3_0_i_ena_d_core_psct
      = {1'b0 , window_read_window_read_nor_21_rmff};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_3_0_i_1_inst_ulineBuf_rsc_3_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_3_0_i_1_inst_ulineBuf_rsc_3_0_i_wea_d_core_psct
      = {1'b0 , window_read_window_read_nor_9_rmff};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_3_0_i_1_inst_ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_3_0_i_1_inst_ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_16_rmff};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_3_0_i_1_inst_ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_3_0_i_1_inst_ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_9_rmff};
  wire [23:0] nl_yuv444dns_core_ulineBuf_rsc_4_0_i_1_inst_ulineBuf_rsc_4_0_i_adra_d_core;
  assign nl_yuv444dns_core_ulineBuf_rsc_4_0_i_1_inst_ulineBuf_rsc_4_0_i_adra_d_core
      = {12'b000000000000 , window_read_mux_18_rmff};
  wire [19:0] nl_yuv444dns_core_ulineBuf_rsc_4_0_i_1_inst_ulineBuf_rsc_4_0_i_da_d_core;
  assign nl_yuv444dns_core_ulineBuf_rsc_4_0_i_1_inst_ulineBuf_rsc_4_0_i_da_d_core
      = {10'b0000000000 , lines_read_lines_read_slc_uWindow_10_9_0_1_cmx_sva_1};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_4_0_i_1_inst_ulineBuf_rsc_4_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_4_0_i_1_inst_ulineBuf_rsc_4_0_i_ena_d_core_psct
      = {1'b0 , window_read_window_read_and_23_rmff};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_4_0_i_1_inst_ulineBuf_rsc_4_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_4_0_i_1_inst_ulineBuf_rsc_4_0_i_wea_d_core_psct
      = {1'b0 , window_read_window_read_nor_8_rmff};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_4_0_i_1_inst_ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_4_0_i_1_inst_ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_15_rmff};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_4_0_i_1_inst_ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_4_0_i_1_inst_ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_8_rmff};
  wire [23:0] nl_yuv444dns_core_ulineBuf_rsc_5_0_i_1_inst_ulineBuf_rsc_5_0_i_adra_d_core;
  assign nl_yuv444dns_core_ulineBuf_rsc_5_0_i_1_inst_ulineBuf_rsc_5_0_i_adra_d_core
      = {12'b000000000000 , window_read_mux_22_rmff};
  wire [19:0] nl_yuv444dns_core_ulineBuf_rsc_5_0_i_1_inst_ulineBuf_rsc_5_0_i_da_d_core;
  assign nl_yuv444dns_core_ulineBuf_rsc_5_0_i_1_inst_ulineBuf_rsc_5_0_i_da_d_core
      = {10'b0000000000 , lines_read_lines_read_slc_uWindow_10_9_0_1_cmx_sva_1};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_5_0_i_1_inst_ulineBuf_rsc_5_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_5_0_i_1_inst_ulineBuf_rsc_5_0_i_ena_d_core_psct
      = {1'b0 , window_read_window_read_and_22_rmff};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_5_0_i_1_inst_ulineBuf_rsc_5_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_5_0_i_1_inst_ulineBuf_rsc_5_0_i_wea_d_core_psct
      = {1'b0 , window_read_window_read_nor_7_rmff};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_5_0_i_1_inst_ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_5_0_i_1_inst_ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_14_rmff};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_5_0_i_1_inst_ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_5_0_i_1_inst_ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_7_rmff};
  wire [23:0] nl_yuv444dns_core_ulineBuf_rsc_6_0_i_1_inst_ulineBuf_rsc_6_0_i_adra_d_core;
  assign nl_yuv444dns_core_ulineBuf_rsc_6_0_i_1_inst_ulineBuf_rsc_6_0_i_adra_d_core
      = {12'b000000000000 , window_read_mux_26_rmff};
  wire [19:0] nl_yuv444dns_core_ulineBuf_rsc_6_0_i_1_inst_ulineBuf_rsc_6_0_i_da_d_core;
  assign nl_yuv444dns_core_ulineBuf_rsc_6_0_i_1_inst_ulineBuf_rsc_6_0_i_da_d_core
      = {10'b0000000000 , lines_read_lines_read_slc_uWindow_10_9_0_1_cmx_sva_1};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_6_0_i_1_inst_ulineBuf_rsc_6_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_6_0_i_1_inst_ulineBuf_rsc_6_0_i_ena_d_core_psct
      = {1'b0 , window_read_window_read_and_rmff};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_6_0_i_1_inst_ulineBuf_rsc_6_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_6_0_i_1_inst_ulineBuf_rsc_6_0_i_wea_d_core_psct
      = {1'b0 , window_read_window_read_nor_6_rmff};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_6_0_i_1_inst_ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_6_0_i_1_inst_ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_13_rmff};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_6_0_i_1_inst_ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_6_0_i_1_inst_ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_6_rmff};
  wire [23:0] nl_yuv444dns_core_ulineBuf_rsc_7_0_i_1_inst_ulineBuf_rsc_7_0_i_adra_d_core;
  assign nl_yuv444dns_core_ulineBuf_rsc_7_0_i_1_inst_ulineBuf_rsc_7_0_i_adra_d_core
      = {12'b000000000000 , window_read_mux_30_rmff};
  wire[9:0] lines_read_mux_25_nl;
  wire [19:0] nl_yuv444dns_core_ulineBuf_rsc_7_0_i_1_inst_ulineBuf_rsc_7_0_i_da_d_core;
  assign lines_read_mux_25_nl = MUX_v_10_2_2(lines_read_lines_read_slc_uWindow_10_9_0_1_cmx_sva_1,
      u_t_lpi_1_dfm_1_mx0, and_dcpl_204);
  assign nl_yuv444dns_core_ulineBuf_rsc_7_0_i_1_inst_ulineBuf_rsc_7_0_i_da_d_core
      = {10'b0000000000 , lines_read_mux_25_nl};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_7_0_i_1_inst_ulineBuf_rsc_7_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_7_0_i_1_inst_ulineBuf_rsc_7_0_i_ena_d_core_psct
      = {1'b0 , window_read_window_read_nor_20_rmff};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_7_0_i_1_inst_ulineBuf_rsc_7_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_7_0_i_1_inst_ulineBuf_rsc_7_0_i_wea_d_core_psct
      = {1'b0 , window_read_window_read_nor_4_rmff};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_7_0_i_1_inst_ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_7_0_i_1_inst_ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_12_rmff};
  wire [1:0] nl_yuv444dns_core_ulineBuf_rsc_7_0_i_1_inst_ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_ulineBuf_rsc_7_0_i_1_inst_ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_4_rmff};
  wire [23:0] nl_yuv444dns_core_vlineBuf_rsc_0_0_i_1_inst_vlineBuf_rsc_0_0_i_adra_d_core;
  assign nl_yuv444dns_core_vlineBuf_rsc_0_0_i_1_inst_vlineBuf_rsc_0_0_i_adra_d_core
      = {12'b000000000000 , window_read_mux_4_rmff};
  wire[9:0] lines_read_mux_22_nl;
  wire [19:0] nl_yuv444dns_core_vlineBuf_rsc_0_0_i_1_inst_vlineBuf_rsc_0_0_i_da_d_core;
  assign lines_read_mux_22_nl = MUX_v_10_2_2(v_t_lpi_1_dfm_1_mx0, lines_read_lines_read_slc_vWindow_10_9_0_1_cmx_sva_1,
      or_dcpl_190);
  assign nl_yuv444dns_core_vlineBuf_rsc_0_0_i_1_inst_vlineBuf_rsc_0_0_i_da_d_core
      = {10'b0000000000 , lines_read_mux_22_nl};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_0_0_i_1_inst_vlineBuf_rsc_0_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_0_0_i_1_inst_vlineBuf_rsc_0_0_i_ena_d_core_psct
      = {1'b0 , window_read_window_read_nor_23_rmff};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_0_0_i_1_inst_vlineBuf_rsc_0_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_0_0_i_1_inst_vlineBuf_rsc_0_0_i_wea_d_core_psct
      = {1'b0 , window_read_window_read_nor_5_rmff};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_0_0_i_1_inst_vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_0_0_i_1_inst_vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_19_rmff};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_0_0_i_1_inst_vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_0_0_i_1_inst_vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_5_rmff};
  wire [23:0] nl_yuv444dns_core_vlineBuf_rsc_1_0_i_1_inst_vlineBuf_rsc_1_0_i_adra_d_core;
  assign nl_yuv444dns_core_vlineBuf_rsc_1_0_i_1_inst_vlineBuf_rsc_1_0_i_adra_d_core
      = {12'b000000000000 , window_read_mux_8_rmff};
  wire [19:0] nl_yuv444dns_core_vlineBuf_rsc_1_0_i_1_inst_vlineBuf_rsc_1_0_i_da_d_core;
  assign nl_yuv444dns_core_vlineBuf_rsc_1_0_i_1_inst_vlineBuf_rsc_1_0_i_da_d_core
      = {10'b0000000000 , lines_read_lines_read_slc_vWindow_10_9_0_1_cmx_sva_1};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_1_0_i_1_inst_vlineBuf_rsc_1_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_1_0_i_1_inst_vlineBuf_rsc_1_0_i_ena_d_core_psct
      = {1'b0 , window_read_window_read_and_24_rmff};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_1_0_i_1_inst_vlineBuf_rsc_1_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_1_0_i_1_inst_vlineBuf_rsc_1_0_i_wea_d_core_psct
      = {1'b0 , window_read_window_read_nor_11_rmff};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_1_0_i_1_inst_vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_1_0_i_1_inst_vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_18_rmff};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_1_0_i_1_inst_vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_1_0_i_1_inst_vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_11_rmff};
  wire [23:0] nl_yuv444dns_core_vlineBuf_rsc_2_0_i_1_inst_vlineBuf_rsc_2_0_i_adra_d_core;
  assign nl_yuv444dns_core_vlineBuf_rsc_2_0_i_1_inst_vlineBuf_rsc_2_0_i_adra_d_core
      = {12'b000000000000 , (yuvdns_col_col_lpi_1_dfm_1_1[11:0])};
  wire [19:0] nl_yuv444dns_core_vlineBuf_rsc_2_0_i_1_inst_vlineBuf_rsc_2_0_i_da_d_core;
  assign nl_yuv444dns_core_vlineBuf_rsc_2_0_i_1_inst_vlineBuf_rsc_2_0_i_da_d_core
      = {10'b0000000000 , lines_read_lines_read_slc_vWindow_10_9_0_1_cmx_sva_1};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_2_0_i_1_inst_vlineBuf_rsc_2_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_2_0_i_1_inst_vlineBuf_rsc_2_0_i_ena_d_core_psct
      = {1'b0 , window_read_window_read_nor_22_rmff};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_2_0_i_1_inst_vlineBuf_rsc_2_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_2_0_i_1_inst_vlineBuf_rsc_2_0_i_wea_d_core_psct
      = {1'b0 , window_read_window_read_nor_10_rmff};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_2_0_i_1_inst_vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_2_0_i_1_inst_vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_17_rmff};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_2_0_i_1_inst_vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_2_0_i_1_inst_vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_10_rmff};
  wire [23:0] nl_yuv444dns_core_vlineBuf_rsc_3_0_i_1_inst_vlineBuf_rsc_3_0_i_adra_d_core;
  assign nl_yuv444dns_core_vlineBuf_rsc_3_0_i_1_inst_vlineBuf_rsc_3_0_i_adra_d_core
      = {12'b000000000000 , (yuvdns_col_col_lpi_1_dfm_1_1[11:0])};
  wire [19:0] nl_yuv444dns_core_vlineBuf_rsc_3_0_i_1_inst_vlineBuf_rsc_3_0_i_da_d_core;
  assign nl_yuv444dns_core_vlineBuf_rsc_3_0_i_1_inst_vlineBuf_rsc_3_0_i_da_d_core
      = {10'b0000000000 , lines_read_lines_read_slc_vWindow_10_9_0_1_cmx_sva_1};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_3_0_i_1_inst_vlineBuf_rsc_3_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_3_0_i_1_inst_vlineBuf_rsc_3_0_i_ena_d_core_psct
      = {1'b0 , window_read_window_read_nor_21_rmff};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_3_0_i_1_inst_vlineBuf_rsc_3_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_3_0_i_1_inst_vlineBuf_rsc_3_0_i_wea_d_core_psct
      = {1'b0 , window_read_window_read_nor_9_rmff};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_3_0_i_1_inst_vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_3_0_i_1_inst_vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_16_rmff};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_3_0_i_1_inst_vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_3_0_i_1_inst_vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_9_rmff};
  wire [23:0] nl_yuv444dns_core_vlineBuf_rsc_4_0_i_1_inst_vlineBuf_rsc_4_0_i_adra_d_core;
  assign nl_yuv444dns_core_vlineBuf_rsc_4_0_i_1_inst_vlineBuf_rsc_4_0_i_adra_d_core
      = {12'b000000000000 , window_read_mux_18_rmff};
  wire [19:0] nl_yuv444dns_core_vlineBuf_rsc_4_0_i_1_inst_vlineBuf_rsc_4_0_i_da_d_core;
  assign nl_yuv444dns_core_vlineBuf_rsc_4_0_i_1_inst_vlineBuf_rsc_4_0_i_da_d_core
      = {10'b0000000000 , lines_read_lines_read_slc_vWindow_10_9_0_1_cmx_sva_1};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_4_0_i_1_inst_vlineBuf_rsc_4_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_4_0_i_1_inst_vlineBuf_rsc_4_0_i_ena_d_core_psct
      = {1'b0 , window_read_window_read_and_23_rmff};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_4_0_i_1_inst_vlineBuf_rsc_4_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_4_0_i_1_inst_vlineBuf_rsc_4_0_i_wea_d_core_psct
      = {1'b0 , window_read_window_read_nor_8_rmff};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_4_0_i_1_inst_vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_4_0_i_1_inst_vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_15_rmff};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_4_0_i_1_inst_vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_4_0_i_1_inst_vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_8_rmff};
  wire [23:0] nl_yuv444dns_core_vlineBuf_rsc_5_0_i_1_inst_vlineBuf_rsc_5_0_i_adra_d_core;
  assign nl_yuv444dns_core_vlineBuf_rsc_5_0_i_1_inst_vlineBuf_rsc_5_0_i_adra_d_core
      = {12'b000000000000 , window_read_mux_22_rmff};
  wire [19:0] nl_yuv444dns_core_vlineBuf_rsc_5_0_i_1_inst_vlineBuf_rsc_5_0_i_da_d_core;
  assign nl_yuv444dns_core_vlineBuf_rsc_5_0_i_1_inst_vlineBuf_rsc_5_0_i_da_d_core
      = {10'b0000000000 , lines_read_lines_read_slc_vWindow_10_9_0_1_cmx_sva_1};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_5_0_i_1_inst_vlineBuf_rsc_5_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_5_0_i_1_inst_vlineBuf_rsc_5_0_i_ena_d_core_psct
      = {1'b0 , window_read_window_read_and_22_rmff};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_5_0_i_1_inst_vlineBuf_rsc_5_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_5_0_i_1_inst_vlineBuf_rsc_5_0_i_wea_d_core_psct
      = {1'b0 , window_read_window_read_nor_7_rmff};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_5_0_i_1_inst_vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_5_0_i_1_inst_vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_14_rmff};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_5_0_i_1_inst_vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_5_0_i_1_inst_vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_7_rmff};
  wire [23:0] nl_yuv444dns_core_vlineBuf_rsc_6_0_i_1_inst_vlineBuf_rsc_6_0_i_adra_d_core;
  assign nl_yuv444dns_core_vlineBuf_rsc_6_0_i_1_inst_vlineBuf_rsc_6_0_i_adra_d_core
      = {12'b000000000000 , window_read_mux_26_rmff};
  wire [19:0] nl_yuv444dns_core_vlineBuf_rsc_6_0_i_1_inst_vlineBuf_rsc_6_0_i_da_d_core;
  assign nl_yuv444dns_core_vlineBuf_rsc_6_0_i_1_inst_vlineBuf_rsc_6_0_i_da_d_core
      = {10'b0000000000 , lines_read_lines_read_slc_vWindow_10_9_0_1_cmx_sva_1};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_6_0_i_1_inst_vlineBuf_rsc_6_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_6_0_i_1_inst_vlineBuf_rsc_6_0_i_ena_d_core_psct
      = {1'b0 , window_read_window_read_and_rmff};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_6_0_i_1_inst_vlineBuf_rsc_6_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_6_0_i_1_inst_vlineBuf_rsc_6_0_i_wea_d_core_psct
      = {1'b0 , window_read_window_read_nor_6_rmff};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_6_0_i_1_inst_vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_6_0_i_1_inst_vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_13_rmff};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_6_0_i_1_inst_vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_6_0_i_1_inst_vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_6_rmff};
  wire [23:0] nl_yuv444dns_core_vlineBuf_rsc_7_0_i_1_inst_vlineBuf_rsc_7_0_i_adra_d_core;
  assign nl_yuv444dns_core_vlineBuf_rsc_7_0_i_1_inst_vlineBuf_rsc_7_0_i_adra_d_core
      = {12'b000000000000 , window_read_mux_30_rmff};
  wire[9:0] lines_read_mux_23_nl;
  wire [19:0] nl_yuv444dns_core_vlineBuf_rsc_7_0_i_1_inst_vlineBuf_rsc_7_0_i_da_d_core;
  assign lines_read_mux_23_nl = MUX_v_10_2_2(lines_read_lines_read_slc_vWindow_10_9_0_1_cmx_sva_1,
      v_t_lpi_1_dfm_1_mx0, and_dcpl_204);
  assign nl_yuv444dns_core_vlineBuf_rsc_7_0_i_1_inst_vlineBuf_rsc_7_0_i_da_d_core
      = {10'b0000000000 , lines_read_mux_23_nl};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_7_0_i_1_inst_vlineBuf_rsc_7_0_i_ena_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_7_0_i_1_inst_vlineBuf_rsc_7_0_i_ena_d_core_psct
      = {1'b0 , window_read_window_read_nor_20_rmff};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_7_0_i_1_inst_vlineBuf_rsc_7_0_i_wea_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_7_0_i_1_inst_vlineBuf_rsc_7_0_i_wea_d_core_psct
      = {1'b0 , window_read_window_read_nor_4_rmff};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_7_0_i_1_inst_vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_7_0_i_1_inst_vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_12_rmff};
  wire [1:0] nl_yuv444dns_core_vlineBuf_rsc_7_0_i_1_inst_vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_yuv444dns_core_vlineBuf_rsc_7_0_i_1_inst_vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , window_read_window_read_nor_4_rmff};
  ROM_1i4_1o7_ab819f6fc5c1b5b5d6d171217034e827af  U_ROM_1i4_1o7_79be7b8354f3336325ccc8204e2443072e_rg
      (
      .I_1(nl_U_ROM_1i4_1o7_79be7b8354f3336325ccc8204e2443072e_rg_I_1[3:0]),
      .O_1(ROM_1i4_1o7_79be7b8354f3336325ccc8204e2443072e_3)
    );
  ROM_1i3_1o8_e0c0f449934cd8722d44be65e633d2faaf  U_ROM_1i3_1o8_a9da8dd3d4c2cabf7072e520d048f3072e_rg
      (
      .I_1(nl_U_ROM_1i3_1o8_a9da8dd3d4c2cabf7072e520d048f3072e_rg_I_1[2:0]),
      .O_1(ROM_1i3_1o8_a9da8dd3d4c2cabf7072e520d048f3072e_3)
    );
  ROM_1i4_1o7_ab819f6fc5c1b5b5d6d171217034e827af  U_ROM_1i4_1o7_79be7b8354f3336325ccc8204e2443072e_1_rg
      (
      .I_1(nl_U_ROM_1i4_1o7_79be7b8354f3336325ccc8204e2443072e_1_rg_I_1[3:0]),
      .O_1(ROM_1i4_1o7_79be7b8354f3336325ccc8204e2443072e_4)
    );
  ROM_1i3_1o8_e0c0f449934cd8722d44be65e633d2faaf  U_ROM_1i3_1o8_a9da8dd3d4c2cabf7072e520d048f3072e_1_rg
      (
      .I_1(nl_U_ROM_1i3_1o8_a9da8dd3d4c2cabf7072e520d048f3072e_1_rg_I_1[2:0]),
      .O_1(ROM_1i3_1o8_a9da8dd3d4c2cabf7072e520d048f3072e_4)
    );
  ROM_1i4_1o7_ab819f6fc5c1b5b5d6d171217034e827af  U_ROM_1i4_1o7_79be7b8354f3336325ccc8204e2443072e_2_rg
      (
      .I_1(nl_U_ROM_1i4_1o7_79be7b8354f3336325ccc8204e2443072e_2_rg_I_1[3:0]),
      .O_1(ROM_1i4_1o7_79be7b8354f3336325ccc8204e2443072e_5)
    );
  ROM_1i3_1o8_e0c0f449934cd8722d44be65e633d2faaf  U_ROM_1i3_1o8_a9da8dd3d4c2cabf7072e520d048f3072e_2_rg
      (
      .I_1(nl_U_ROM_1i3_1o8_a9da8dd3d4c2cabf7072e520d048f3072e_2_rg_I_1[2:0]),
      .O_1(ROM_1i3_1o8_a9da8dd3d4c2cabf7072e520d048f3072e_5)
    );
  yuv444dns_core_src_y_rsci yuv444dns_core_src_y_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .src_y_rsc_dat(src_y_rsc_dat),
      .src_y_rsc_vld(src_y_rsc_vld),
      .src_y_rsc_rdy(src_y_rsc_rdy),
      .core_wen(core_wen),
      .src_y_rsci_oswt(reg_src_v_rsci_oswt_cse),
      .src_y_rsci_wen_comp(src_y_rsci_wen_comp),
      .src_y_rsci_idat_mxwt(src_y_rsci_idat_mxwt)
    );
  yuv444dns_core_src_u_rsci yuv444dns_core_src_u_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .src_u_rsc_dat(src_u_rsc_dat),
      .src_u_rsc_vld(src_u_rsc_vld),
      .src_u_rsc_rdy(src_u_rsc_rdy),
      .core_wen(core_wen),
      .src_u_rsci_oswt(reg_src_v_rsci_oswt_cse),
      .src_u_rsci_wen_comp(src_u_rsci_wen_comp),
      .src_u_rsci_idat_mxwt(src_u_rsci_idat_mxwt)
    );
  yuv444dns_core_src_v_rsci yuv444dns_core_src_v_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .src_v_rsc_dat(src_v_rsc_dat),
      .src_v_rsc_vld(src_v_rsc_vld),
      .src_v_rsc_rdy(src_v_rsc_rdy),
      .core_wen(core_wen),
      .src_v_rsci_oswt(reg_src_v_rsci_oswt_cse),
      .src_v_rsci_wen_comp(src_v_rsci_wen_comp),
      .src_v_rsci_idat_mxwt(src_v_rsci_idat_mxwt)
    );
  yuv444dns_core_dst_y_rsci yuv444dns_core_dst_y_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .dst_y_rsc_dat(dst_y_rsc_dat),
      .dst_y_rsc_vld(dst_y_rsc_vld),
      .dst_y_rsc_rdy(dst_y_rsc_rdy),
      .core_wen(core_wen),
      .dst_y_rsci_oswt(reg_dst_v_rsci_oswt_cse),
      .dst_y_rsci_wen_comp(dst_y_rsci_wen_comp),
      .dst_y_rsci_idat(dst_y_rsci_idat)
    );
  yuv444dns_core_dst_u_rsci yuv444dns_core_dst_u_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .dst_u_rsc_dat(dst_u_rsc_dat),
      .dst_u_rsc_vld(dst_u_rsc_vld),
      .dst_u_rsc_rdy(dst_u_rsc_rdy),
      .core_wen(core_wen),
      .dst_u_rsci_oswt(reg_dst_v_rsci_oswt_cse),
      .dst_u_rsci_wen_comp(dst_u_rsci_wen_comp),
      .dst_u_rsci_idat(dst_u_rsci_idat)
    );
  yuv444dns_core_dst_v_rsci yuv444dns_core_dst_v_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .dst_v_rsc_dat(dst_v_rsc_dat),
      .dst_v_rsc_vld(dst_v_rsc_vld),
      .dst_v_rsc_rdy(dst_v_rsc_rdy),
      .core_wen(core_wen),
      .dst_v_rsci_oswt(reg_dst_v_rsci_oswt_cse),
      .dst_v_rsci_wen_comp(dst_v_rsci_wen_comp),
      .dst_v_rsci_idat(dst_v_rsci_idat)
    );
  yuv444dns_core_ylineBuf_rsc_0_0_i_1 yuv444dns_core_ylineBuf_rsc_0_0_i_1_inst (
      .clk(clk),
      .arst_n(arst_n),
      .ylineBuf_rsc_0_0_i_adra_d(ylineBuf_rsc_0_0_i_adra_d_reg),
      .ylineBuf_rsc_0_0_i_da_d(ylineBuf_rsc_0_0_i_da_d_reg),
      .ylineBuf_rsc_0_0_i_ena_d(ylineBuf_rsc_0_0_i_ena_d_reg),
      .ylineBuf_rsc_0_0_i_wea_d(ylineBuf_rsc_0_0_i_wea_d_reg),
      .ylineBuf_rsc_0_0_i_qa_d(ylineBuf_rsc_0_0_i_qa_d),
      .ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg),
      .ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .ylineBuf_rsc_0_0_i_oswt(reg_ylineBuf_rsc_0_0_i_oswt_cse),
      .ylineBuf_rsc_0_0_i_adra_d_core(nl_yuv444dns_core_ylineBuf_rsc_0_0_i_1_inst_ylineBuf_rsc_0_0_i_adra_d_core[23:0]),
      .ylineBuf_rsc_0_0_i_da_d_core(nl_yuv444dns_core_ylineBuf_rsc_0_0_i_1_inst_ylineBuf_rsc_0_0_i_da_d_core[19:0]),
      .ylineBuf_rsc_0_0_i_ena_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_0_0_i_1_inst_ylineBuf_rsc_0_0_i_ena_d_core_psct[1:0]),
      .ylineBuf_rsc_0_0_i_wea_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_0_0_i_1_inst_ylineBuf_rsc_0_0_i_wea_d_core_psct[1:0]),
      .ylineBuf_rsc_0_0_i_qa_d_mxwt(ylineBuf_rsc_0_0_i_qa_d_mxwt),
      .ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_0_0_i_1_inst_ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_0_0_i_1_inst_ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .ylineBuf_rsc_0_0_i_oswt_pff(window_read_window_read_nor_23_rmff)
    );
  yuv444dns_core_ylineBuf_rsc_1_0_i_1 yuv444dns_core_ylineBuf_rsc_1_0_i_1_inst (
      .clk(clk),
      .arst_n(arst_n),
      .ylineBuf_rsc_1_0_i_adra_d(ylineBuf_rsc_1_0_i_adra_d_reg),
      .ylineBuf_rsc_1_0_i_da_d(ylineBuf_rsc_1_0_i_da_d_reg),
      .ylineBuf_rsc_1_0_i_ena_d(ylineBuf_rsc_1_0_i_ena_d_reg),
      .ylineBuf_rsc_1_0_i_wea_d(ylineBuf_rsc_1_0_i_wea_d_reg),
      .ylineBuf_rsc_1_0_i_qa_d(ylineBuf_rsc_1_0_i_qa_d),
      .ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg),
      .ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .ylineBuf_rsc_1_0_i_oswt(reg_ylineBuf_rsc_1_0_i_oswt_cse),
      .ylineBuf_rsc_1_0_i_adra_d_core(nl_yuv444dns_core_ylineBuf_rsc_1_0_i_1_inst_ylineBuf_rsc_1_0_i_adra_d_core[23:0]),
      .ylineBuf_rsc_1_0_i_da_d_core(nl_yuv444dns_core_ylineBuf_rsc_1_0_i_1_inst_ylineBuf_rsc_1_0_i_da_d_core[19:0]),
      .ylineBuf_rsc_1_0_i_ena_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_1_0_i_1_inst_ylineBuf_rsc_1_0_i_ena_d_core_psct[1:0]),
      .ylineBuf_rsc_1_0_i_wea_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_1_0_i_1_inst_ylineBuf_rsc_1_0_i_wea_d_core_psct[1:0]),
      .ylineBuf_rsc_1_0_i_qa_d_mxwt(ylineBuf_rsc_1_0_i_qa_d_mxwt),
      .ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_1_0_i_1_inst_ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_1_0_i_1_inst_ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .ylineBuf_rsc_1_0_i_oswt_pff(window_read_window_read_and_24_rmff)
    );
  yuv444dns_core_ylineBuf_rsc_2_0_i_1 yuv444dns_core_ylineBuf_rsc_2_0_i_1_inst (
      .clk(clk),
      .arst_n(arst_n),
      .ylineBuf_rsc_2_0_i_adra_d(ylineBuf_rsc_2_0_i_adra_d_reg),
      .ylineBuf_rsc_2_0_i_da_d(ylineBuf_rsc_2_0_i_da_d_reg),
      .ylineBuf_rsc_2_0_i_ena_d(ylineBuf_rsc_2_0_i_ena_d_reg),
      .ylineBuf_rsc_2_0_i_wea_d(ylineBuf_rsc_2_0_i_wea_d_reg),
      .ylineBuf_rsc_2_0_i_qa_d(ylineBuf_rsc_2_0_i_qa_d),
      .ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg),
      .ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .ylineBuf_rsc_2_0_i_oswt(reg_ylineBuf_rsc_2_0_i_oswt_cse),
      .ylineBuf_rsc_2_0_i_adra_d_core(nl_yuv444dns_core_ylineBuf_rsc_2_0_i_1_inst_ylineBuf_rsc_2_0_i_adra_d_core[23:0]),
      .ylineBuf_rsc_2_0_i_da_d_core(nl_yuv444dns_core_ylineBuf_rsc_2_0_i_1_inst_ylineBuf_rsc_2_0_i_da_d_core[19:0]),
      .ylineBuf_rsc_2_0_i_ena_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_2_0_i_1_inst_ylineBuf_rsc_2_0_i_ena_d_core_psct[1:0]),
      .ylineBuf_rsc_2_0_i_wea_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_2_0_i_1_inst_ylineBuf_rsc_2_0_i_wea_d_core_psct[1:0]),
      .ylineBuf_rsc_2_0_i_qa_d_mxwt(ylineBuf_rsc_2_0_i_qa_d_mxwt),
      .ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_2_0_i_1_inst_ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_2_0_i_1_inst_ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .ylineBuf_rsc_2_0_i_oswt_pff(window_read_window_read_nor_22_rmff)
    );
  yuv444dns_core_ylineBuf_rsc_3_0_i_1 yuv444dns_core_ylineBuf_rsc_3_0_i_1_inst (
      .clk(clk),
      .arst_n(arst_n),
      .ylineBuf_rsc_3_0_i_adra_d(ylineBuf_rsc_3_0_i_adra_d_reg),
      .ylineBuf_rsc_3_0_i_da_d(ylineBuf_rsc_3_0_i_da_d_reg),
      .ylineBuf_rsc_3_0_i_ena_d(ylineBuf_rsc_3_0_i_ena_d_reg),
      .ylineBuf_rsc_3_0_i_wea_d(ylineBuf_rsc_3_0_i_wea_d_reg),
      .ylineBuf_rsc_3_0_i_qa_d(ylineBuf_rsc_3_0_i_qa_d),
      .ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg),
      .ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .ylineBuf_rsc_3_0_i_oswt(reg_ylineBuf_rsc_3_0_i_oswt_cse),
      .ylineBuf_rsc_3_0_i_adra_d_core(nl_yuv444dns_core_ylineBuf_rsc_3_0_i_1_inst_ylineBuf_rsc_3_0_i_adra_d_core[23:0]),
      .ylineBuf_rsc_3_0_i_da_d_core(nl_yuv444dns_core_ylineBuf_rsc_3_0_i_1_inst_ylineBuf_rsc_3_0_i_da_d_core[19:0]),
      .ylineBuf_rsc_3_0_i_ena_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_3_0_i_1_inst_ylineBuf_rsc_3_0_i_ena_d_core_psct[1:0]),
      .ylineBuf_rsc_3_0_i_wea_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_3_0_i_1_inst_ylineBuf_rsc_3_0_i_wea_d_core_psct[1:0]),
      .ylineBuf_rsc_3_0_i_qa_d_mxwt(ylineBuf_rsc_3_0_i_qa_d_mxwt),
      .ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_3_0_i_1_inst_ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_3_0_i_1_inst_ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .ylineBuf_rsc_3_0_i_oswt_pff(window_read_window_read_nor_21_rmff)
    );
  yuv444dns_core_ylineBuf_rsc_4_0_i_1 yuv444dns_core_ylineBuf_rsc_4_0_i_1_inst (
      .clk(clk),
      .arst_n(arst_n),
      .ylineBuf_rsc_4_0_i_adra_d(ylineBuf_rsc_4_0_i_adra_d_reg),
      .ylineBuf_rsc_4_0_i_da_d(ylineBuf_rsc_4_0_i_da_d_reg),
      .ylineBuf_rsc_4_0_i_ena_d(ylineBuf_rsc_4_0_i_ena_d_reg),
      .ylineBuf_rsc_4_0_i_wea_d(ylineBuf_rsc_4_0_i_wea_d_reg),
      .ylineBuf_rsc_4_0_i_qa_d(ylineBuf_rsc_4_0_i_qa_d),
      .ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg),
      .ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .ylineBuf_rsc_4_0_i_oswt(reg_ylineBuf_rsc_4_0_i_oswt_cse),
      .ylineBuf_rsc_4_0_i_adra_d_core(nl_yuv444dns_core_ylineBuf_rsc_4_0_i_1_inst_ylineBuf_rsc_4_0_i_adra_d_core[23:0]),
      .ylineBuf_rsc_4_0_i_da_d_core(nl_yuv444dns_core_ylineBuf_rsc_4_0_i_1_inst_ylineBuf_rsc_4_0_i_da_d_core[19:0]),
      .ylineBuf_rsc_4_0_i_ena_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_4_0_i_1_inst_ylineBuf_rsc_4_0_i_ena_d_core_psct[1:0]),
      .ylineBuf_rsc_4_0_i_wea_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_4_0_i_1_inst_ylineBuf_rsc_4_0_i_wea_d_core_psct[1:0]),
      .ylineBuf_rsc_4_0_i_qa_d_mxwt(ylineBuf_rsc_4_0_i_qa_d_mxwt),
      .ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_4_0_i_1_inst_ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_4_0_i_1_inst_ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .ylineBuf_rsc_4_0_i_oswt_pff(window_read_window_read_and_23_rmff)
    );
  yuv444dns_core_ylineBuf_rsc_5_0_i_1 yuv444dns_core_ylineBuf_rsc_5_0_i_1_inst (
      .clk(clk),
      .arst_n(arst_n),
      .ylineBuf_rsc_5_0_i_adra_d(ylineBuf_rsc_5_0_i_adra_d_reg),
      .ylineBuf_rsc_5_0_i_da_d(ylineBuf_rsc_5_0_i_da_d_reg),
      .ylineBuf_rsc_5_0_i_ena_d(ylineBuf_rsc_5_0_i_ena_d_reg),
      .ylineBuf_rsc_5_0_i_wea_d(ylineBuf_rsc_5_0_i_wea_d_reg),
      .ylineBuf_rsc_5_0_i_qa_d(ylineBuf_rsc_5_0_i_qa_d),
      .ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg),
      .ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .ylineBuf_rsc_5_0_i_oswt(reg_ylineBuf_rsc_5_0_i_oswt_cse),
      .ylineBuf_rsc_5_0_i_adra_d_core(nl_yuv444dns_core_ylineBuf_rsc_5_0_i_1_inst_ylineBuf_rsc_5_0_i_adra_d_core[23:0]),
      .ylineBuf_rsc_5_0_i_da_d_core(nl_yuv444dns_core_ylineBuf_rsc_5_0_i_1_inst_ylineBuf_rsc_5_0_i_da_d_core[19:0]),
      .ylineBuf_rsc_5_0_i_ena_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_5_0_i_1_inst_ylineBuf_rsc_5_0_i_ena_d_core_psct[1:0]),
      .ylineBuf_rsc_5_0_i_wea_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_5_0_i_1_inst_ylineBuf_rsc_5_0_i_wea_d_core_psct[1:0]),
      .ylineBuf_rsc_5_0_i_qa_d_mxwt(ylineBuf_rsc_5_0_i_qa_d_mxwt),
      .ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_5_0_i_1_inst_ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_5_0_i_1_inst_ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .ylineBuf_rsc_5_0_i_oswt_pff(window_read_window_read_and_22_rmff)
    );
  yuv444dns_core_ylineBuf_rsc_6_0_i_1 yuv444dns_core_ylineBuf_rsc_6_0_i_1_inst (
      .clk(clk),
      .arst_n(arst_n),
      .ylineBuf_rsc_6_0_i_adra_d(ylineBuf_rsc_6_0_i_adra_d_reg),
      .ylineBuf_rsc_6_0_i_da_d(ylineBuf_rsc_6_0_i_da_d_reg),
      .ylineBuf_rsc_6_0_i_ena_d(ylineBuf_rsc_6_0_i_ena_d_reg),
      .ylineBuf_rsc_6_0_i_wea_d(ylineBuf_rsc_6_0_i_wea_d_reg),
      .ylineBuf_rsc_6_0_i_qa_d(ylineBuf_rsc_6_0_i_qa_d),
      .ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg),
      .ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .ylineBuf_rsc_6_0_i_oswt(reg_ylineBuf_rsc_6_0_i_oswt_cse),
      .ylineBuf_rsc_6_0_i_adra_d_core(nl_yuv444dns_core_ylineBuf_rsc_6_0_i_1_inst_ylineBuf_rsc_6_0_i_adra_d_core[23:0]),
      .ylineBuf_rsc_6_0_i_da_d_core(nl_yuv444dns_core_ylineBuf_rsc_6_0_i_1_inst_ylineBuf_rsc_6_0_i_da_d_core[19:0]),
      .ylineBuf_rsc_6_0_i_ena_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_6_0_i_1_inst_ylineBuf_rsc_6_0_i_ena_d_core_psct[1:0]),
      .ylineBuf_rsc_6_0_i_wea_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_6_0_i_1_inst_ylineBuf_rsc_6_0_i_wea_d_core_psct[1:0]),
      .ylineBuf_rsc_6_0_i_qa_d_mxwt(ylineBuf_rsc_6_0_i_qa_d_mxwt),
      .ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_6_0_i_1_inst_ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_6_0_i_1_inst_ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .ylineBuf_rsc_6_0_i_oswt_pff(window_read_window_read_and_rmff)
    );
  yuv444dns_core_ylineBuf_rsc_7_0_i_1 yuv444dns_core_ylineBuf_rsc_7_0_i_1_inst (
      .clk(clk),
      .arst_n(arst_n),
      .ylineBuf_rsc_7_0_i_adra_d(ylineBuf_rsc_7_0_i_adra_d_reg),
      .ylineBuf_rsc_7_0_i_da_d(ylineBuf_rsc_7_0_i_da_d_reg),
      .ylineBuf_rsc_7_0_i_ena_d(ylineBuf_rsc_7_0_i_ena_d_reg),
      .ylineBuf_rsc_7_0_i_wea_d(ylineBuf_rsc_7_0_i_wea_d_reg),
      .ylineBuf_rsc_7_0_i_qa_d(ylineBuf_rsc_7_0_i_qa_d),
      .ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg),
      .ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .ylineBuf_rsc_7_0_i_oswt(reg_ylineBuf_rsc_7_0_i_oswt_cse),
      .ylineBuf_rsc_7_0_i_adra_d_core(nl_yuv444dns_core_ylineBuf_rsc_7_0_i_1_inst_ylineBuf_rsc_7_0_i_adra_d_core[23:0]),
      .ylineBuf_rsc_7_0_i_da_d_core(nl_yuv444dns_core_ylineBuf_rsc_7_0_i_1_inst_ylineBuf_rsc_7_0_i_da_d_core[19:0]),
      .ylineBuf_rsc_7_0_i_ena_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_7_0_i_1_inst_ylineBuf_rsc_7_0_i_ena_d_core_psct[1:0]),
      .ylineBuf_rsc_7_0_i_wea_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_7_0_i_1_inst_ylineBuf_rsc_7_0_i_wea_d_core_psct[1:0]),
      .ylineBuf_rsc_7_0_i_qa_d_mxwt(ylineBuf_rsc_7_0_i_qa_d_mxwt),
      .ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_7_0_i_1_inst_ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_ylineBuf_rsc_7_0_i_1_inst_ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .ylineBuf_rsc_7_0_i_oswt_pff(window_read_window_read_nor_20_rmff)
    );
  yuv444dns_core_ulineBuf_rsc_0_0_i_1 yuv444dns_core_ulineBuf_rsc_0_0_i_1_inst (
      .clk(clk),
      .arst_n(arst_n),
      .ulineBuf_rsc_0_0_i_adra_d(ulineBuf_rsc_0_0_i_adra_d_reg),
      .ulineBuf_rsc_0_0_i_da_d(ulineBuf_rsc_0_0_i_da_d_reg),
      .ulineBuf_rsc_0_0_i_ena_d(ulineBuf_rsc_0_0_i_ena_d_reg),
      .ulineBuf_rsc_0_0_i_wea_d(ulineBuf_rsc_0_0_i_wea_d_reg),
      .ulineBuf_rsc_0_0_i_qa_d(ulineBuf_rsc_0_0_i_qa_d),
      .ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg),
      .ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .ulineBuf_rsc_0_0_i_oswt(reg_ylineBuf_rsc_0_0_i_oswt_cse),
      .ulineBuf_rsc_0_0_i_adra_d_core(nl_yuv444dns_core_ulineBuf_rsc_0_0_i_1_inst_ulineBuf_rsc_0_0_i_adra_d_core[23:0]),
      .ulineBuf_rsc_0_0_i_da_d_core(nl_yuv444dns_core_ulineBuf_rsc_0_0_i_1_inst_ulineBuf_rsc_0_0_i_da_d_core[19:0]),
      .ulineBuf_rsc_0_0_i_ena_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_0_0_i_1_inst_ulineBuf_rsc_0_0_i_ena_d_core_psct[1:0]),
      .ulineBuf_rsc_0_0_i_wea_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_0_0_i_1_inst_ulineBuf_rsc_0_0_i_wea_d_core_psct[1:0]),
      .ulineBuf_rsc_0_0_i_qa_d_mxwt(ulineBuf_rsc_0_0_i_qa_d_mxwt),
      .ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_0_0_i_1_inst_ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_0_0_i_1_inst_ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .ulineBuf_rsc_0_0_i_oswt_pff(window_read_window_read_nor_23_rmff)
    );
  yuv444dns_core_ulineBuf_rsc_1_0_i_1 yuv444dns_core_ulineBuf_rsc_1_0_i_1_inst (
      .clk(clk),
      .arst_n(arst_n),
      .ulineBuf_rsc_1_0_i_adra_d(ulineBuf_rsc_1_0_i_adra_d_reg),
      .ulineBuf_rsc_1_0_i_da_d(ulineBuf_rsc_1_0_i_da_d_reg),
      .ulineBuf_rsc_1_0_i_ena_d(ulineBuf_rsc_1_0_i_ena_d_reg),
      .ulineBuf_rsc_1_0_i_wea_d(ulineBuf_rsc_1_0_i_wea_d_reg),
      .ulineBuf_rsc_1_0_i_qa_d(ulineBuf_rsc_1_0_i_qa_d),
      .ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg),
      .ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .ulineBuf_rsc_1_0_i_oswt(reg_ylineBuf_rsc_1_0_i_oswt_cse),
      .ulineBuf_rsc_1_0_i_adra_d_core(nl_yuv444dns_core_ulineBuf_rsc_1_0_i_1_inst_ulineBuf_rsc_1_0_i_adra_d_core[23:0]),
      .ulineBuf_rsc_1_0_i_da_d_core(nl_yuv444dns_core_ulineBuf_rsc_1_0_i_1_inst_ulineBuf_rsc_1_0_i_da_d_core[19:0]),
      .ulineBuf_rsc_1_0_i_ena_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_1_0_i_1_inst_ulineBuf_rsc_1_0_i_ena_d_core_psct[1:0]),
      .ulineBuf_rsc_1_0_i_wea_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_1_0_i_1_inst_ulineBuf_rsc_1_0_i_wea_d_core_psct[1:0]),
      .ulineBuf_rsc_1_0_i_qa_d_mxwt(ulineBuf_rsc_1_0_i_qa_d_mxwt),
      .ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_1_0_i_1_inst_ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_1_0_i_1_inst_ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .ulineBuf_rsc_1_0_i_oswt_pff(window_read_window_read_and_24_rmff)
    );
  yuv444dns_core_ulineBuf_rsc_2_0_i_1 yuv444dns_core_ulineBuf_rsc_2_0_i_1_inst (
      .clk(clk),
      .arst_n(arst_n),
      .ulineBuf_rsc_2_0_i_adra_d(ulineBuf_rsc_2_0_i_adra_d_reg),
      .ulineBuf_rsc_2_0_i_da_d(ulineBuf_rsc_2_0_i_da_d_reg),
      .ulineBuf_rsc_2_0_i_ena_d(ulineBuf_rsc_2_0_i_ena_d_reg),
      .ulineBuf_rsc_2_0_i_wea_d(ulineBuf_rsc_2_0_i_wea_d_reg),
      .ulineBuf_rsc_2_0_i_qa_d(ulineBuf_rsc_2_0_i_qa_d),
      .ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg),
      .ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .ulineBuf_rsc_2_0_i_oswt(reg_ylineBuf_rsc_2_0_i_oswt_cse),
      .ulineBuf_rsc_2_0_i_adra_d_core(nl_yuv444dns_core_ulineBuf_rsc_2_0_i_1_inst_ulineBuf_rsc_2_0_i_adra_d_core[23:0]),
      .ulineBuf_rsc_2_0_i_da_d_core(nl_yuv444dns_core_ulineBuf_rsc_2_0_i_1_inst_ulineBuf_rsc_2_0_i_da_d_core[19:0]),
      .ulineBuf_rsc_2_0_i_ena_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_2_0_i_1_inst_ulineBuf_rsc_2_0_i_ena_d_core_psct[1:0]),
      .ulineBuf_rsc_2_0_i_wea_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_2_0_i_1_inst_ulineBuf_rsc_2_0_i_wea_d_core_psct[1:0]),
      .ulineBuf_rsc_2_0_i_qa_d_mxwt(ulineBuf_rsc_2_0_i_qa_d_mxwt),
      .ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_2_0_i_1_inst_ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_2_0_i_1_inst_ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .ulineBuf_rsc_2_0_i_oswt_pff(window_read_window_read_nor_22_rmff)
    );
  yuv444dns_core_ulineBuf_rsc_3_0_i_1 yuv444dns_core_ulineBuf_rsc_3_0_i_1_inst (
      .clk(clk),
      .arst_n(arst_n),
      .ulineBuf_rsc_3_0_i_adra_d(ulineBuf_rsc_3_0_i_adra_d_reg),
      .ulineBuf_rsc_3_0_i_da_d(ulineBuf_rsc_3_0_i_da_d_reg),
      .ulineBuf_rsc_3_0_i_ena_d(ulineBuf_rsc_3_0_i_ena_d_reg),
      .ulineBuf_rsc_3_0_i_wea_d(ulineBuf_rsc_3_0_i_wea_d_reg),
      .ulineBuf_rsc_3_0_i_qa_d(ulineBuf_rsc_3_0_i_qa_d),
      .ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg),
      .ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .ulineBuf_rsc_3_0_i_oswt(reg_ylineBuf_rsc_3_0_i_oswt_cse),
      .ulineBuf_rsc_3_0_i_adra_d_core(nl_yuv444dns_core_ulineBuf_rsc_3_0_i_1_inst_ulineBuf_rsc_3_0_i_adra_d_core[23:0]),
      .ulineBuf_rsc_3_0_i_da_d_core(nl_yuv444dns_core_ulineBuf_rsc_3_0_i_1_inst_ulineBuf_rsc_3_0_i_da_d_core[19:0]),
      .ulineBuf_rsc_3_0_i_ena_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_3_0_i_1_inst_ulineBuf_rsc_3_0_i_ena_d_core_psct[1:0]),
      .ulineBuf_rsc_3_0_i_wea_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_3_0_i_1_inst_ulineBuf_rsc_3_0_i_wea_d_core_psct[1:0]),
      .ulineBuf_rsc_3_0_i_qa_d_mxwt(ulineBuf_rsc_3_0_i_qa_d_mxwt),
      .ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_3_0_i_1_inst_ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_3_0_i_1_inst_ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .ulineBuf_rsc_3_0_i_oswt_pff(window_read_window_read_nor_21_rmff)
    );
  yuv444dns_core_ulineBuf_rsc_4_0_i_1 yuv444dns_core_ulineBuf_rsc_4_0_i_1_inst (
      .clk(clk),
      .arst_n(arst_n),
      .ulineBuf_rsc_4_0_i_adra_d(ulineBuf_rsc_4_0_i_adra_d_reg),
      .ulineBuf_rsc_4_0_i_da_d(ulineBuf_rsc_4_0_i_da_d_reg),
      .ulineBuf_rsc_4_0_i_ena_d(ulineBuf_rsc_4_0_i_ena_d_reg),
      .ulineBuf_rsc_4_0_i_wea_d(ulineBuf_rsc_4_0_i_wea_d_reg),
      .ulineBuf_rsc_4_0_i_qa_d(ulineBuf_rsc_4_0_i_qa_d),
      .ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg),
      .ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .ulineBuf_rsc_4_0_i_oswt(reg_ylineBuf_rsc_4_0_i_oswt_cse),
      .ulineBuf_rsc_4_0_i_adra_d_core(nl_yuv444dns_core_ulineBuf_rsc_4_0_i_1_inst_ulineBuf_rsc_4_0_i_adra_d_core[23:0]),
      .ulineBuf_rsc_4_0_i_da_d_core(nl_yuv444dns_core_ulineBuf_rsc_4_0_i_1_inst_ulineBuf_rsc_4_0_i_da_d_core[19:0]),
      .ulineBuf_rsc_4_0_i_ena_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_4_0_i_1_inst_ulineBuf_rsc_4_0_i_ena_d_core_psct[1:0]),
      .ulineBuf_rsc_4_0_i_wea_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_4_0_i_1_inst_ulineBuf_rsc_4_0_i_wea_d_core_psct[1:0]),
      .ulineBuf_rsc_4_0_i_qa_d_mxwt(ulineBuf_rsc_4_0_i_qa_d_mxwt),
      .ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_4_0_i_1_inst_ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_4_0_i_1_inst_ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .ulineBuf_rsc_4_0_i_oswt_pff(window_read_window_read_and_23_rmff)
    );
  yuv444dns_core_ulineBuf_rsc_5_0_i_1 yuv444dns_core_ulineBuf_rsc_5_0_i_1_inst (
      .clk(clk),
      .arst_n(arst_n),
      .ulineBuf_rsc_5_0_i_adra_d(ulineBuf_rsc_5_0_i_adra_d_reg),
      .ulineBuf_rsc_5_0_i_da_d(ulineBuf_rsc_5_0_i_da_d_reg),
      .ulineBuf_rsc_5_0_i_ena_d(ulineBuf_rsc_5_0_i_ena_d_reg),
      .ulineBuf_rsc_5_0_i_wea_d(ulineBuf_rsc_5_0_i_wea_d_reg),
      .ulineBuf_rsc_5_0_i_qa_d(ulineBuf_rsc_5_0_i_qa_d),
      .ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg),
      .ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .ulineBuf_rsc_5_0_i_oswt(reg_ylineBuf_rsc_5_0_i_oswt_cse),
      .ulineBuf_rsc_5_0_i_adra_d_core(nl_yuv444dns_core_ulineBuf_rsc_5_0_i_1_inst_ulineBuf_rsc_5_0_i_adra_d_core[23:0]),
      .ulineBuf_rsc_5_0_i_da_d_core(nl_yuv444dns_core_ulineBuf_rsc_5_0_i_1_inst_ulineBuf_rsc_5_0_i_da_d_core[19:0]),
      .ulineBuf_rsc_5_0_i_ena_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_5_0_i_1_inst_ulineBuf_rsc_5_0_i_ena_d_core_psct[1:0]),
      .ulineBuf_rsc_5_0_i_wea_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_5_0_i_1_inst_ulineBuf_rsc_5_0_i_wea_d_core_psct[1:0]),
      .ulineBuf_rsc_5_0_i_qa_d_mxwt(ulineBuf_rsc_5_0_i_qa_d_mxwt),
      .ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_5_0_i_1_inst_ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_5_0_i_1_inst_ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .ulineBuf_rsc_5_0_i_oswt_pff(window_read_window_read_and_22_rmff)
    );
  yuv444dns_core_ulineBuf_rsc_6_0_i_1 yuv444dns_core_ulineBuf_rsc_6_0_i_1_inst (
      .clk(clk),
      .arst_n(arst_n),
      .ulineBuf_rsc_6_0_i_adra_d(ulineBuf_rsc_6_0_i_adra_d_reg),
      .ulineBuf_rsc_6_0_i_da_d(ulineBuf_rsc_6_0_i_da_d_reg),
      .ulineBuf_rsc_6_0_i_ena_d(ulineBuf_rsc_6_0_i_ena_d_reg),
      .ulineBuf_rsc_6_0_i_wea_d(ulineBuf_rsc_6_0_i_wea_d_reg),
      .ulineBuf_rsc_6_0_i_qa_d(ulineBuf_rsc_6_0_i_qa_d),
      .ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg),
      .ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .ulineBuf_rsc_6_0_i_oswt(reg_ylineBuf_rsc_6_0_i_oswt_cse),
      .ulineBuf_rsc_6_0_i_adra_d_core(nl_yuv444dns_core_ulineBuf_rsc_6_0_i_1_inst_ulineBuf_rsc_6_0_i_adra_d_core[23:0]),
      .ulineBuf_rsc_6_0_i_da_d_core(nl_yuv444dns_core_ulineBuf_rsc_6_0_i_1_inst_ulineBuf_rsc_6_0_i_da_d_core[19:0]),
      .ulineBuf_rsc_6_0_i_ena_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_6_0_i_1_inst_ulineBuf_rsc_6_0_i_ena_d_core_psct[1:0]),
      .ulineBuf_rsc_6_0_i_wea_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_6_0_i_1_inst_ulineBuf_rsc_6_0_i_wea_d_core_psct[1:0]),
      .ulineBuf_rsc_6_0_i_qa_d_mxwt(ulineBuf_rsc_6_0_i_qa_d_mxwt),
      .ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_6_0_i_1_inst_ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_6_0_i_1_inst_ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .ulineBuf_rsc_6_0_i_oswt_pff(window_read_window_read_and_rmff)
    );
  yuv444dns_core_ulineBuf_rsc_7_0_i_1 yuv444dns_core_ulineBuf_rsc_7_0_i_1_inst (
      .clk(clk),
      .arst_n(arst_n),
      .ulineBuf_rsc_7_0_i_adra_d(ulineBuf_rsc_7_0_i_adra_d_reg),
      .ulineBuf_rsc_7_0_i_da_d(ulineBuf_rsc_7_0_i_da_d_reg),
      .ulineBuf_rsc_7_0_i_ena_d(ulineBuf_rsc_7_0_i_ena_d_reg),
      .ulineBuf_rsc_7_0_i_wea_d(ulineBuf_rsc_7_0_i_wea_d_reg),
      .ulineBuf_rsc_7_0_i_qa_d(ulineBuf_rsc_7_0_i_qa_d),
      .ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg),
      .ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .ulineBuf_rsc_7_0_i_oswt(reg_ylineBuf_rsc_7_0_i_oswt_cse),
      .ulineBuf_rsc_7_0_i_adra_d_core(nl_yuv444dns_core_ulineBuf_rsc_7_0_i_1_inst_ulineBuf_rsc_7_0_i_adra_d_core[23:0]),
      .ulineBuf_rsc_7_0_i_da_d_core(nl_yuv444dns_core_ulineBuf_rsc_7_0_i_1_inst_ulineBuf_rsc_7_0_i_da_d_core[19:0]),
      .ulineBuf_rsc_7_0_i_ena_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_7_0_i_1_inst_ulineBuf_rsc_7_0_i_ena_d_core_psct[1:0]),
      .ulineBuf_rsc_7_0_i_wea_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_7_0_i_1_inst_ulineBuf_rsc_7_0_i_wea_d_core_psct[1:0]),
      .ulineBuf_rsc_7_0_i_qa_d_mxwt(ulineBuf_rsc_7_0_i_qa_d_mxwt),
      .ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_7_0_i_1_inst_ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_ulineBuf_rsc_7_0_i_1_inst_ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .ulineBuf_rsc_7_0_i_oswt_pff(window_read_window_read_nor_20_rmff)
    );
  yuv444dns_core_vlineBuf_rsc_0_0_i_1 yuv444dns_core_vlineBuf_rsc_0_0_i_1_inst (
      .clk(clk),
      .arst_n(arst_n),
      .vlineBuf_rsc_0_0_i_adra_d(vlineBuf_rsc_0_0_i_adra_d_reg),
      .vlineBuf_rsc_0_0_i_da_d(vlineBuf_rsc_0_0_i_da_d_reg),
      .vlineBuf_rsc_0_0_i_ena_d(vlineBuf_rsc_0_0_i_ena_d_reg),
      .vlineBuf_rsc_0_0_i_wea_d(vlineBuf_rsc_0_0_i_wea_d_reg),
      .vlineBuf_rsc_0_0_i_qa_d(vlineBuf_rsc_0_0_i_qa_d),
      .vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg),
      .vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .vlineBuf_rsc_0_0_i_oswt(reg_ylineBuf_rsc_0_0_i_oswt_cse),
      .vlineBuf_rsc_0_0_i_adra_d_core(nl_yuv444dns_core_vlineBuf_rsc_0_0_i_1_inst_vlineBuf_rsc_0_0_i_adra_d_core[23:0]),
      .vlineBuf_rsc_0_0_i_da_d_core(nl_yuv444dns_core_vlineBuf_rsc_0_0_i_1_inst_vlineBuf_rsc_0_0_i_da_d_core[19:0]),
      .vlineBuf_rsc_0_0_i_ena_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_0_0_i_1_inst_vlineBuf_rsc_0_0_i_ena_d_core_psct[1:0]),
      .vlineBuf_rsc_0_0_i_wea_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_0_0_i_1_inst_vlineBuf_rsc_0_0_i_wea_d_core_psct[1:0]),
      .vlineBuf_rsc_0_0_i_qa_d_mxwt(vlineBuf_rsc_0_0_i_qa_d_mxwt),
      .vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_0_0_i_1_inst_vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_0_0_i_1_inst_vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .vlineBuf_rsc_0_0_i_oswt_pff(window_read_window_read_nor_23_rmff)
    );
  yuv444dns_core_vlineBuf_rsc_1_0_i_1 yuv444dns_core_vlineBuf_rsc_1_0_i_1_inst (
      .clk(clk),
      .arst_n(arst_n),
      .vlineBuf_rsc_1_0_i_adra_d(vlineBuf_rsc_1_0_i_adra_d_reg),
      .vlineBuf_rsc_1_0_i_da_d(vlineBuf_rsc_1_0_i_da_d_reg),
      .vlineBuf_rsc_1_0_i_ena_d(vlineBuf_rsc_1_0_i_ena_d_reg),
      .vlineBuf_rsc_1_0_i_wea_d(vlineBuf_rsc_1_0_i_wea_d_reg),
      .vlineBuf_rsc_1_0_i_qa_d(vlineBuf_rsc_1_0_i_qa_d),
      .vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg),
      .vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .vlineBuf_rsc_1_0_i_oswt(reg_ylineBuf_rsc_1_0_i_oswt_cse),
      .vlineBuf_rsc_1_0_i_adra_d_core(nl_yuv444dns_core_vlineBuf_rsc_1_0_i_1_inst_vlineBuf_rsc_1_0_i_adra_d_core[23:0]),
      .vlineBuf_rsc_1_0_i_da_d_core(nl_yuv444dns_core_vlineBuf_rsc_1_0_i_1_inst_vlineBuf_rsc_1_0_i_da_d_core[19:0]),
      .vlineBuf_rsc_1_0_i_ena_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_1_0_i_1_inst_vlineBuf_rsc_1_0_i_ena_d_core_psct[1:0]),
      .vlineBuf_rsc_1_0_i_wea_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_1_0_i_1_inst_vlineBuf_rsc_1_0_i_wea_d_core_psct[1:0]),
      .vlineBuf_rsc_1_0_i_qa_d_mxwt(vlineBuf_rsc_1_0_i_qa_d_mxwt),
      .vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_1_0_i_1_inst_vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_1_0_i_1_inst_vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .vlineBuf_rsc_1_0_i_oswt_pff(window_read_window_read_and_24_rmff)
    );
  yuv444dns_core_vlineBuf_rsc_2_0_i_1 yuv444dns_core_vlineBuf_rsc_2_0_i_1_inst (
      .clk(clk),
      .arst_n(arst_n),
      .vlineBuf_rsc_2_0_i_adra_d(vlineBuf_rsc_2_0_i_adra_d_reg),
      .vlineBuf_rsc_2_0_i_da_d(vlineBuf_rsc_2_0_i_da_d_reg),
      .vlineBuf_rsc_2_0_i_ena_d(vlineBuf_rsc_2_0_i_ena_d_reg),
      .vlineBuf_rsc_2_0_i_wea_d(vlineBuf_rsc_2_0_i_wea_d_reg),
      .vlineBuf_rsc_2_0_i_qa_d(vlineBuf_rsc_2_0_i_qa_d),
      .vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg),
      .vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .vlineBuf_rsc_2_0_i_oswt(reg_ylineBuf_rsc_2_0_i_oswt_cse),
      .vlineBuf_rsc_2_0_i_adra_d_core(nl_yuv444dns_core_vlineBuf_rsc_2_0_i_1_inst_vlineBuf_rsc_2_0_i_adra_d_core[23:0]),
      .vlineBuf_rsc_2_0_i_da_d_core(nl_yuv444dns_core_vlineBuf_rsc_2_0_i_1_inst_vlineBuf_rsc_2_0_i_da_d_core[19:0]),
      .vlineBuf_rsc_2_0_i_ena_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_2_0_i_1_inst_vlineBuf_rsc_2_0_i_ena_d_core_psct[1:0]),
      .vlineBuf_rsc_2_0_i_wea_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_2_0_i_1_inst_vlineBuf_rsc_2_0_i_wea_d_core_psct[1:0]),
      .vlineBuf_rsc_2_0_i_qa_d_mxwt(vlineBuf_rsc_2_0_i_qa_d_mxwt),
      .vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_2_0_i_1_inst_vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_2_0_i_1_inst_vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .vlineBuf_rsc_2_0_i_oswt_pff(window_read_window_read_nor_22_rmff)
    );
  yuv444dns_core_vlineBuf_rsc_3_0_i_1 yuv444dns_core_vlineBuf_rsc_3_0_i_1_inst (
      .clk(clk),
      .arst_n(arst_n),
      .vlineBuf_rsc_3_0_i_adra_d(vlineBuf_rsc_3_0_i_adra_d_reg),
      .vlineBuf_rsc_3_0_i_da_d(vlineBuf_rsc_3_0_i_da_d_reg),
      .vlineBuf_rsc_3_0_i_ena_d(vlineBuf_rsc_3_0_i_ena_d_reg),
      .vlineBuf_rsc_3_0_i_wea_d(vlineBuf_rsc_3_0_i_wea_d_reg),
      .vlineBuf_rsc_3_0_i_qa_d(vlineBuf_rsc_3_0_i_qa_d),
      .vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg),
      .vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .vlineBuf_rsc_3_0_i_oswt(reg_ylineBuf_rsc_3_0_i_oswt_cse),
      .vlineBuf_rsc_3_0_i_adra_d_core(nl_yuv444dns_core_vlineBuf_rsc_3_0_i_1_inst_vlineBuf_rsc_3_0_i_adra_d_core[23:0]),
      .vlineBuf_rsc_3_0_i_da_d_core(nl_yuv444dns_core_vlineBuf_rsc_3_0_i_1_inst_vlineBuf_rsc_3_0_i_da_d_core[19:0]),
      .vlineBuf_rsc_3_0_i_ena_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_3_0_i_1_inst_vlineBuf_rsc_3_0_i_ena_d_core_psct[1:0]),
      .vlineBuf_rsc_3_0_i_wea_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_3_0_i_1_inst_vlineBuf_rsc_3_0_i_wea_d_core_psct[1:0]),
      .vlineBuf_rsc_3_0_i_qa_d_mxwt(vlineBuf_rsc_3_0_i_qa_d_mxwt),
      .vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_3_0_i_1_inst_vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_3_0_i_1_inst_vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .vlineBuf_rsc_3_0_i_oswt_pff(window_read_window_read_nor_21_rmff)
    );
  yuv444dns_core_vlineBuf_rsc_4_0_i_1 yuv444dns_core_vlineBuf_rsc_4_0_i_1_inst (
      .clk(clk),
      .arst_n(arst_n),
      .vlineBuf_rsc_4_0_i_adra_d(vlineBuf_rsc_4_0_i_adra_d_reg),
      .vlineBuf_rsc_4_0_i_da_d(vlineBuf_rsc_4_0_i_da_d_reg),
      .vlineBuf_rsc_4_0_i_ena_d(vlineBuf_rsc_4_0_i_ena_d_reg),
      .vlineBuf_rsc_4_0_i_wea_d(vlineBuf_rsc_4_0_i_wea_d_reg),
      .vlineBuf_rsc_4_0_i_qa_d(vlineBuf_rsc_4_0_i_qa_d),
      .vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg),
      .vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .vlineBuf_rsc_4_0_i_oswt(reg_ylineBuf_rsc_4_0_i_oswt_cse),
      .vlineBuf_rsc_4_0_i_adra_d_core(nl_yuv444dns_core_vlineBuf_rsc_4_0_i_1_inst_vlineBuf_rsc_4_0_i_adra_d_core[23:0]),
      .vlineBuf_rsc_4_0_i_da_d_core(nl_yuv444dns_core_vlineBuf_rsc_4_0_i_1_inst_vlineBuf_rsc_4_0_i_da_d_core[19:0]),
      .vlineBuf_rsc_4_0_i_ena_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_4_0_i_1_inst_vlineBuf_rsc_4_0_i_ena_d_core_psct[1:0]),
      .vlineBuf_rsc_4_0_i_wea_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_4_0_i_1_inst_vlineBuf_rsc_4_0_i_wea_d_core_psct[1:0]),
      .vlineBuf_rsc_4_0_i_qa_d_mxwt(vlineBuf_rsc_4_0_i_qa_d_mxwt),
      .vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_4_0_i_1_inst_vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_4_0_i_1_inst_vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .vlineBuf_rsc_4_0_i_oswt_pff(window_read_window_read_and_23_rmff)
    );
  yuv444dns_core_vlineBuf_rsc_5_0_i_1 yuv444dns_core_vlineBuf_rsc_5_0_i_1_inst (
      .clk(clk),
      .arst_n(arst_n),
      .vlineBuf_rsc_5_0_i_adra_d(vlineBuf_rsc_5_0_i_adra_d_reg),
      .vlineBuf_rsc_5_0_i_da_d(vlineBuf_rsc_5_0_i_da_d_reg),
      .vlineBuf_rsc_5_0_i_ena_d(vlineBuf_rsc_5_0_i_ena_d_reg),
      .vlineBuf_rsc_5_0_i_wea_d(vlineBuf_rsc_5_0_i_wea_d_reg),
      .vlineBuf_rsc_5_0_i_qa_d(vlineBuf_rsc_5_0_i_qa_d),
      .vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg),
      .vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .vlineBuf_rsc_5_0_i_oswt(reg_ylineBuf_rsc_5_0_i_oswt_cse),
      .vlineBuf_rsc_5_0_i_adra_d_core(nl_yuv444dns_core_vlineBuf_rsc_5_0_i_1_inst_vlineBuf_rsc_5_0_i_adra_d_core[23:0]),
      .vlineBuf_rsc_5_0_i_da_d_core(nl_yuv444dns_core_vlineBuf_rsc_5_0_i_1_inst_vlineBuf_rsc_5_0_i_da_d_core[19:0]),
      .vlineBuf_rsc_5_0_i_ena_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_5_0_i_1_inst_vlineBuf_rsc_5_0_i_ena_d_core_psct[1:0]),
      .vlineBuf_rsc_5_0_i_wea_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_5_0_i_1_inst_vlineBuf_rsc_5_0_i_wea_d_core_psct[1:0]),
      .vlineBuf_rsc_5_0_i_qa_d_mxwt(vlineBuf_rsc_5_0_i_qa_d_mxwt),
      .vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_5_0_i_1_inst_vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_5_0_i_1_inst_vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .vlineBuf_rsc_5_0_i_oswt_pff(window_read_window_read_and_22_rmff)
    );
  yuv444dns_core_vlineBuf_rsc_6_0_i_1 yuv444dns_core_vlineBuf_rsc_6_0_i_1_inst (
      .clk(clk),
      .arst_n(arst_n),
      .vlineBuf_rsc_6_0_i_adra_d(vlineBuf_rsc_6_0_i_adra_d_reg),
      .vlineBuf_rsc_6_0_i_da_d(vlineBuf_rsc_6_0_i_da_d_reg),
      .vlineBuf_rsc_6_0_i_ena_d(vlineBuf_rsc_6_0_i_ena_d_reg),
      .vlineBuf_rsc_6_0_i_wea_d(vlineBuf_rsc_6_0_i_wea_d_reg),
      .vlineBuf_rsc_6_0_i_qa_d(vlineBuf_rsc_6_0_i_qa_d),
      .vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg),
      .vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .vlineBuf_rsc_6_0_i_oswt(reg_ylineBuf_rsc_6_0_i_oswt_cse),
      .vlineBuf_rsc_6_0_i_adra_d_core(nl_yuv444dns_core_vlineBuf_rsc_6_0_i_1_inst_vlineBuf_rsc_6_0_i_adra_d_core[23:0]),
      .vlineBuf_rsc_6_0_i_da_d_core(nl_yuv444dns_core_vlineBuf_rsc_6_0_i_1_inst_vlineBuf_rsc_6_0_i_da_d_core[19:0]),
      .vlineBuf_rsc_6_0_i_ena_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_6_0_i_1_inst_vlineBuf_rsc_6_0_i_ena_d_core_psct[1:0]),
      .vlineBuf_rsc_6_0_i_wea_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_6_0_i_1_inst_vlineBuf_rsc_6_0_i_wea_d_core_psct[1:0]),
      .vlineBuf_rsc_6_0_i_qa_d_mxwt(vlineBuf_rsc_6_0_i_qa_d_mxwt),
      .vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_6_0_i_1_inst_vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_6_0_i_1_inst_vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .vlineBuf_rsc_6_0_i_oswt_pff(window_read_window_read_and_rmff)
    );
  yuv444dns_core_vlineBuf_rsc_7_0_i_1 yuv444dns_core_vlineBuf_rsc_7_0_i_1_inst (
      .clk(clk),
      .arst_n(arst_n),
      .vlineBuf_rsc_7_0_i_adra_d(vlineBuf_rsc_7_0_i_adra_d_reg),
      .vlineBuf_rsc_7_0_i_da_d(vlineBuf_rsc_7_0_i_da_d_reg),
      .vlineBuf_rsc_7_0_i_ena_d(vlineBuf_rsc_7_0_i_ena_d_reg),
      .vlineBuf_rsc_7_0_i_wea_d(vlineBuf_rsc_7_0_i_wea_d_reg),
      .vlineBuf_rsc_7_0_i_qa_d(vlineBuf_rsc_7_0_i_qa_d),
      .vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg),
      .vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .vlineBuf_rsc_7_0_i_oswt(reg_ylineBuf_rsc_7_0_i_oswt_cse),
      .vlineBuf_rsc_7_0_i_adra_d_core(nl_yuv444dns_core_vlineBuf_rsc_7_0_i_1_inst_vlineBuf_rsc_7_0_i_adra_d_core[23:0]),
      .vlineBuf_rsc_7_0_i_da_d_core(nl_yuv444dns_core_vlineBuf_rsc_7_0_i_1_inst_vlineBuf_rsc_7_0_i_da_d_core[19:0]),
      .vlineBuf_rsc_7_0_i_ena_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_7_0_i_1_inst_vlineBuf_rsc_7_0_i_ena_d_core_psct[1:0]),
      .vlineBuf_rsc_7_0_i_wea_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_7_0_i_1_inst_vlineBuf_rsc_7_0_i_wea_d_core_psct[1:0]),
      .vlineBuf_rsc_7_0_i_qa_d_mxwt(vlineBuf_rsc_7_0_i_qa_d_mxwt),
      .vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_7_0_i_1_inst_vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_yuv444dns_core_vlineBuf_rsc_7_0_i_1_inst_vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .vlineBuf_rsc_7_0_i_oswt_pff(window_read_window_read_nor_20_rmff)
    );
  yuv444dns_core_staller yuv444dns_core_staller_inst (
      .clk(clk),
      .arst_n(arst_n),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .src_y_rsci_wen_comp(src_y_rsci_wen_comp),
      .src_u_rsci_wen_comp(src_u_rsci_wen_comp),
      .src_v_rsci_wen_comp(src_v_rsci_wen_comp),
      .dst_y_rsci_wen_comp(dst_y_rsci_wen_comp),
      .dst_u_rsci_wen_comp(dst_u_rsci_wen_comp),
      .dst_v_rsci_wen_comp(dst_v_rsci_wen_comp)
    );
  assign yuvdns_col_if_1_and_cse = addon_loop_2_for_addon_loop_2_for_nor_2_itm_2
      & and_dcpl_175;
  assign yuvdns_col_if_1_and_15_cse = window_read_asn_57 & and_dcpl_175;
  assign yuvdns_col_if_1_and_16_cse = window_read_asn_61 & and_dcpl_175;
  assign yuvdns_col_if_1_and_17_cse = addon_loop_2_for_addon_loop_2_for_and_18_itm_2
      & and_dcpl_175;
  assign yuvdns_col_if_1_and_18_cse = addon_loop_2_for_addon_loop_2_for_and_19_itm_2
      & and_dcpl_175;
  assign yuvdns_col_if_1_and_19_cse = addon_loop_2_for_addon_loop_2_for_and_20_itm_2
      & and_dcpl_175;
  assign yuvdns_col_if_1_and_20_cse = core_wen & (and_dcpl_171 | and_dcpl_173 | and_dcpl_175);
  assign nl_nlm_col_loop_if_else_1_if_acc_nl = ({8'b10000000 , yuvdns_reg_yH2}) +
      conv_u2u_21_22(~ yuvdns_nlm_diff_lpi_1_dfm_1) + 22'b0000000000000000000001;
  assign nlm_col_loop_if_else_1_if_acc_nl = nl_nlm_col_loop_if_else_1_if_acc_nl[21:0];
  assign nlm_col_loop_if_else_1_if_acc_itm_21_1 = readslicef_22_1_21(nlm_col_loop_if_else_1_if_acc_nl);
  assign nl_nlm_col_loop_1_if_else_1_if_acc_nl = ({8'b10000000 , yuvdns_reg_uvH2})
      + conv_u2u_21_22(~ yuvdns_nlm_1_diff_lpi_1_dfm_1) + 22'b0000000000000000000001;
  assign nlm_col_loop_1_if_else_1_if_acc_nl = nl_nlm_col_loop_1_if_else_1_if_acc_nl[21:0];
  assign nlm_col_loop_1_if_else_1_if_acc_itm_21_1 = readslicef_22_1_21(nlm_col_loop_1_if_else_1_if_acc_nl);
  assign nl_nlm_col_loop_2_if_else_1_if_acc_nl = ({8'b10000000 , yuvdns_reg_uvH2})
      + conv_u2u_21_22(~ yuvdns_nlm_2_diff_lpi_1_dfm_1) + 22'b0000000000000000000001;
  assign nlm_col_loop_2_if_else_1_if_acc_nl = nl_nlm_col_loop_2_if_else_1_if_acc_nl[21:0];
  assign nlm_col_loop_2_if_else_1_if_acc_itm_21_1 = readslicef_22_1_21(nlm_col_loop_2_if_else_1_if_acc_nl);
  assign v_dst_t_and_cse = core_wen & (~(or_dcpl_97 | addon_loop_2_equal_tmp_1_2
      | reg_yuvdns_row_asn_sft_lpi_1_dfm_st_2_cse | reg_yuvdns_col_asn_sft_1_lpi_1_dfm_2_cse));
  assign addon_loop_1_and_16_cse = (~((operator_3_false_return_2_0_sva_1!=3'b100)))
      & lfst_exit_addon_loop_2_lpi_1_dfm_st_1_1;
  assign addon_loop_1_and_17_cse = (operator_3_false_return_2_0_sva_1[0]) & (~((operator_3_false_return_2_0_sva_1[2:1]!=2'b10)))
      & lfst_exit_addon_loop_2_lpi_1_dfm_st_1_1;
  assign addon_loop_1_and_18_cse = (operator_3_false_return_2_0_sva_1[1]) & (~((~
      (operator_3_false_return_2_0_sva_1[2])) | (operator_3_false_return_2_0_sva_1[0])))
      & lfst_exit_addon_loop_2_lpi_1_dfm_st_1_1;
  assign addon_loop_1_and_19_cse = (operator_3_false_return_2_0_sva_1==3'b111) &
      lfst_exit_addon_loop_2_lpi_1_dfm_st_1_1;
  assign addon_loop_1_and_20_cse = (operator_3_false_return_2_0_sva_1==3'b000) &
      lfst_exit_addon_loop_2_lpi_1_dfm_st_1_1;
  assign addon_loop_1_and_21_cse = (operator_3_false_return_2_0_sva_1==3'b001) &
      lfst_exit_addon_loop_2_lpi_1_dfm_st_1_1;
  assign addon_loop_1_and_22_cse = (operator_3_false_return_2_0_sva_1==3'b010) &
      lfst_exit_addon_loop_2_lpi_1_dfm_st_1_1;
  assign addon_loop_1_and_23_cse = (operator_3_false_return_2_0_sva_1==3'b011) &
      lfst_exit_addon_loop_2_lpi_1_dfm_st_1_1;
  assign or_240_nl = (addon_loop_2_for_acc_8_cse_sva_st_2_1[2:1]!=2'b00) | (~ mux_tmp_127);
  assign or_235_nl = (addon_loop_2_for_acc_8_cse_sva_st_2_1[2:1]!=2'b00);
  assign mux_126_nl = MUX_s_1_2_2((~ mux_tmp_125), or_tmp_112, or_235_nl);
  assign mux_128_nl = MUX_s_1_2_2(or_240_nl, mux_126_nl, mgc_2147483647_3_dfmergeen_1_lpi_1_dfm_2_st_1_1);
  assign or_234_nl = (~ mgc_2147483647_3_dfmergeen_1_lpi_1_dfm_2_st_1_1) | lfst_exit_addon_loop_2_lpi_1_dfm_st_1_1
      | (lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_st_1_1_0!=2'b11) | addon_loop_2_for_addon_loop_2_for_and_20_itm_1
      | (~ yuvdns_col_asn_sft_lpi_1_dfm_1) | yuvdns_col_asn_sft_1_lpi_1_dfm_1 | yuvdns_row_asn_sft_lpi_1_dfm_1;
  assign mux_129_nl = MUX_s_1_2_2(mux_128_nl, or_234_nl, addon_loop_2_for_acc_8_cse_sva_st_2_1[0]);
  assign window_read_window_read_nor_23_rmff = ~(mux_129_nl | (~ main_stage_0_2));
  assign window_read_window_read_nor_19_rmff = ~((~ mux_tmp_127) | or_dcpl_126 |
      or_dcpl_125);
  assign window_read_mux_4_rmff = MUX_v_12_2_2((yuvdns_col_col_lpi_1_dfm_1_1[11:0]),
      addon_loop_2_for_slc_addon_loop_2_for_j_11_0_7_itm_1, lfst_exit_addon_loop_2_lpi_1_dfm_st_1_1);
  assign nor_98_nl = ~((addon_loop_2_for_acc_8_cse_sva_st_2_1!=3'b001));
  assign nor_99_nl = ~((lines_read_acc_cse_sva_st_2_1!=3'b001));
  assign mux_130_nl = MUX_s_1_2_2(nor_98_nl, nor_99_nl, lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_st_1_1_0[0]);
  assign and_279_nl = nor_88_cse & mux_130_nl;
  assign nor_100_nl = ~((~ lfst_exit_addon_loop_2_lpi_1_dfm_st_1_0) | (~ addon_loop_2_for_slc_13_svs_st_1)
      | (addon_loop_2_for_acc_8_cse_sva_st_2_1!=3'b001));
  assign mux_131_nl = MUX_s_1_2_2(and_279_nl, nor_100_nl, lfst_exit_addon_loop_2_lpi_1_dfm_st_1_1);
  assign window_read_window_read_and_24_rmff = mux_131_nl & main_stage_0_2;
  assign window_read_window_read_nor_18_rmff = ~((~ mux_tmp_127) | or_dcpl_126 |
      or_dcpl_130);
  assign window_read_mux_8_rmff = MUX_v_12_2_2((yuvdns_col_col_lpi_1_dfm_1_1[11:0]),
      addon_loop_2_for_slc_addon_loop_2_for_j_11_0_8_itm_1, lfst_exit_addon_loop_2_lpi_1_dfm_st_1_1);
  assign mux_133_nl = MUX_s_1_2_2(mux_tmp_132, or_tmp_122, addon_loop_2_for_acc_8_cse_sva_st_2_1[0]);
  assign or_259_nl = (addon_loop_2_for_acc_8_cse_sva_st_2_1!=3'b010) | (lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_st_1_1_0[0]);
  assign mux_134_nl = MUX_s_1_2_2(mux_133_nl, or_259_nl, lines_read_acc_cse_sva_st_2_1[0]);
  assign window_read_window_read_nor_22_rmff = ~(mux_134_nl | or_dcpl_138);
  assign window_read_window_read_nor_17_rmff = ~(or_dcpl_146 | or_dcpl_141 | or_dcpl_125);
  assign or_274_nl = (addon_loop_2_for_acc_8_cse_sva_st_2_1!=3'b011) | (lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_st_1_1_0[0]);
  assign mux_135_nl = MUX_s_1_2_2(or_tmp_122, mux_tmp_132, addon_loop_2_for_acc_8_cse_sva_st_2_1[0]);
  assign mux_136_nl = MUX_s_1_2_2(or_274_nl, mux_135_nl, lines_read_acc_cse_sva_st_2_1[0]);
  assign window_read_window_read_nor_21_rmff = ~(mux_136_nl | or_dcpl_138);
  assign window_read_window_read_nor_16_rmff = ~(or_dcpl_146 | or_dcpl_141 | or_dcpl_130);
  assign nor_95_nl = ~((addon_loop_2_for_acc_8_cse_sva_st_2_1!=3'b100));
  assign nor_96_nl = ~((lines_read_acc_cse_sva_st_2_1!=3'b100));
  assign mux_137_nl = MUX_s_1_2_2(nor_95_nl, nor_96_nl, lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_st_1_1_0[0]);
  assign and_278_nl = nor_88_cse & mux_137_nl;
  assign nor_97_nl = ~((~ lfst_exit_addon_loop_2_lpi_1_dfm_st_1_0) | (~ addon_loop_2_for_slc_13_svs_st_1)
      | (addon_loop_2_for_acc_8_cse_sva_st_2_1!=3'b100));
  assign mux_138_nl = MUX_s_1_2_2(and_278_nl, nor_97_nl, lfst_exit_addon_loop_2_lpi_1_dfm_st_1_1);
  assign window_read_window_read_and_23_rmff = mux_138_nl & main_stage_0_2;
  assign window_read_window_read_nor_15_rmff = ~((~ mux_tmp_127) | or_dcpl_126 |
      or_dcpl_152);
  assign window_read_mux_18_rmff = MUX_v_12_2_2((yuvdns_col_col_lpi_1_dfm_1_1[11:0]),
      addon_loop_2_for_slc_addon_loop_2_for_j_11_0_11_itm_1, lfst_exit_addon_loop_2_lpi_1_dfm_st_1_1);
  assign nor_92_nl = ~((addon_loop_2_for_acc_8_cse_sva_st_2_1!=3'b101));
  assign nor_93_nl = ~((lines_read_acc_cse_sva_st_2_1!=3'b101));
  assign mux_139_nl = MUX_s_1_2_2(nor_92_nl, nor_93_nl, lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_st_1_1_0[0]);
  assign and_277_nl = nor_88_cse & mux_139_nl;
  assign and_nl = lfst_exit_addon_loop_2_lpi_1_dfm_st_1_0 & addon_loop_2_for_slc_13_svs_st_1
      & (addon_loop_2_for_acc_8_cse_sva_st_2_1==3'b101);
  assign mux_140_nl = MUX_s_1_2_2(and_277_nl, and_nl, lfst_exit_addon_loop_2_lpi_1_dfm_st_1_1);
  assign window_read_window_read_and_22_rmff = mux_140_nl & main_stage_0_2;
  assign window_read_window_read_nor_14_rmff = ~((~ mux_tmp_127) | or_dcpl_126 |
      or_dcpl_156);
  assign window_read_mux_22_rmff = MUX_v_12_2_2((yuvdns_col_col_lpi_1_dfm_1_1[11:0]),
      addon_loop_2_for_slc_addon_loop_2_for_j_11_0_12_itm_1, lfst_exit_addon_loop_2_lpi_1_dfm_st_1_1);
  assign nor_89_nl = ~((addon_loop_2_for_acc_8_cse_sva_st_2_1[0]) | not_tmp_179);
  assign nor_90_nl = ~((lines_read_acc_cse_sva_st_2_1!=3'b110));
  assign mux_141_nl = MUX_s_1_2_2(nor_89_nl, nor_90_nl, lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_st_1_1_0[0]);
  assign and_276_nl = nor_88_cse & mux_141_nl;
  assign nor_91_nl = ~((~ lfst_exit_addon_loop_2_lpi_1_dfm_st_1_0) | (~ addon_loop_2_for_slc_13_svs_st_1)
      | (addon_loop_2_for_acc_8_cse_sva_st_2_1[0]) | not_tmp_179);
  assign mux_142_nl = MUX_s_1_2_2(and_276_nl, nor_91_nl, lfst_exit_addon_loop_2_lpi_1_dfm_st_1_1);
  assign window_read_window_read_and_rmff = mux_142_nl & main_stage_0_2;
  assign window_read_window_read_nor_13_rmff = ~((~ mux_tmp_127) | or_dcpl_160 |
      or_dcpl_152);
  assign window_read_mux_26_rmff = MUX_v_12_2_2((yuvdns_col_col_lpi_1_dfm_1_1[11:0]),
      addon_loop_2_for_slc_addon_loop_2_for_j_11_0_13_itm_1, lfst_exit_addon_loop_2_lpi_1_dfm_st_1_1);
  assign or_485_nl = (~ in_window_loop_and_stg_5_8_sva_1) | lfst_exit_addon_loop_2_lpi_1_dfm_st_1_1
      | (lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_st_1_1_0!=2'b11) | addon_loop_2_for_addon_loop_2_for_and_20_itm_1
      | (~ yuvdns_col_asn_sft_lpi_1_dfm_1) | yuvdns_col_asn_sft_1_lpi_1_dfm_1 | yuvdns_row_asn_sft_lpi_1_dfm_1;
  assign nand_79_nl = ~((addon_loop_2_for_acc_8_cse_sva_st_2_1[2:1]==2'b11) & mux_tmp_127);
  assign and_275_nl = (addon_loop_2_for_acc_8_cse_sva_st_2_1[2:1]==2'b11);
  assign mux_143_nl = MUX_s_1_2_2(or_tmp_112, (~ mux_tmp_125), and_275_nl);
  assign mux_144_nl = MUX_s_1_2_2(nand_79_nl, mux_143_nl, in_window_loop_and_stg_5_8_sva_1);
  assign mux_145_nl = MUX_s_1_2_2(or_485_nl, mux_144_nl, addon_loop_2_for_acc_8_cse_sva_st_2_1[0]);
  assign window_read_window_read_nor_20_rmff = ~(mux_145_nl | (~ main_stage_0_2));
  assign window_read_window_read_nor_12_rmff = ~((~ mux_tmp_127) | or_dcpl_160 |
      or_dcpl_156);
  assign window_read_mux_30_rmff = MUX_v_12_2_2((yuvdns_col_col_lpi_1_dfm_1_1[11:0]),
      addon_loop_2_for_slc_addon_loop_2_for_j_11_0_3_itm_1, lfst_exit_addon_loop_2_lpi_1_dfm_st_1_1);
  assign window_read_window_read_nor_11_rmff = ~(or_dcpl_146 | or_dcpl_168 | or_dcpl_166);
  assign window_read_window_read_nor_10_rmff = ~(or_dcpl_146 | or_dcpl_168 | or_dcpl_171);
  assign window_read_window_read_nor_9_rmff = ~(or_dcpl_146 | or_dcpl_168 | (lines_read_acc_cse_sva_st_2_1[1:0]!=2'b11));
  assign window_read_window_read_nor_8_rmff = ~(or_dcpl_146 | or_dcpl_178 | (lines_read_acc_cse_sva_st_2_1[1:0]!=2'b00));
  assign window_read_window_read_nor_7_rmff = ~(or_dcpl_146 | or_dcpl_178 | or_dcpl_166);
  assign window_read_window_read_nor_6_rmff = ~(or_dcpl_146 | or_dcpl_178 | or_dcpl_171);
  assign window_read_window_read_nor_5_rmff = ~(or_dcpl_188 | or_dcpl_186 | lfst_exit_addon_loop_2_lpi_1_dfm_st_1_1
      | (~ mgc_2147483647_3_dfmergeen_1_lpi_1_dfm_2_st_1_1));
  assign window_read_window_read_nor_4_rmff = ~(or_dcpl_188 | or_dcpl_186 | lfst_exit_addon_loop_2_lpi_1_dfm_st_1_1
      | (~ in_window_loop_and_stg_5_8_sva_1));
  assign vWindow_and_cse = core_wen & main_stage_0_2 & addon_loop_2_and_674_itm_1;
  assign vWindow_and_1_cse = core_wen & main_stage_0_2 & addon_loop_2_and_675_itm_1;
  assign vWindow_and_2_cse = core_wen & main_stage_0_2 & addon_loop_2_and_676_itm_1;
  assign vWindow_and_3_cse = core_wen & main_stage_0_2 & addon_loop_2_and_677_itm_1;
  assign vWindow_and_4_cse = core_wen & main_stage_0_2 & addon_loop_2_and_678_itm_1;
  assign vWindow_and_5_cse = core_wen & main_stage_0_2 & addon_loop_2_and_679_itm_1;
  assign vWindow_and_6_cse = core_wen & main_stage_0_2 & addon_loop_2_and_680_itm_1;
  assign vWindow_and_7_cse = core_wen & main_stage_0_2 & addon_loop_2_and_633_itm_1;
  assign vWindow_and_8_cse = core_wen & main_stage_0_2 & addon_loop_2_and_634_itm_1;
  assign vWindow_and_9_cse = core_wen & main_stage_0_2 & addon_loop_2_and_635_itm_1;
  assign vWindow_and_10_cse = core_wen & main_stage_0_2 & addon_loop_2_and_636_itm_1;
  assign vWindow_and_11_cse = core_wen & main_stage_0_2 & addon_loop_2_and_637_itm_1;
  assign vWindow_and_12_cse = core_wen & main_stage_0_2 & addon_loop_2_and_638_itm_1;
  assign vWindow_and_13_cse = core_wen & main_stage_0_2 & addon_loop_2_and_639_itm_1;
  assign vWindow_and_14_cse = core_wen & main_stage_0_2 & addon_loop_2_and_640_itm_1;
  assign vWindow_and_15_cse = core_wen & main_stage_0_2 & addon_loop_2_and_641_itm_1;
  assign vWindow_and_16_cse = core_wen & main_stage_0_2 & addon_loop_2_and_642_itm_1;
  assign vWindow_and_17_cse = core_wen & main_stage_0_2 & addon_loop_2_and_643_itm_1;
  assign vWindow_and_18_cse = core_wen & main_stage_0_2 & addon_loop_2_and_644_itm_1;
  assign vWindow_and_19_cse = core_wen & main_stage_0_2 & addon_loop_2_and_645_itm_1;
  assign vWindow_and_20_cse = core_wen & main_stage_0_2 & addon_loop_2_and_646_itm_1;
  assign vWindow_and_21_cse = core_wen & main_stage_0_2 & addon_loop_2_and_647_itm_1;
  assign vWindow_and_22_cse = core_wen & main_stage_0_2 & addon_loop_2_and_648_itm_1;
  assign vWindow_and_23_cse = core_wen & main_stage_0_2 & addon_loop_2_and_649_itm_1;
  assign vWindow_and_24_cse = core_wen & main_stage_0_2 & addon_loop_2_and_650_itm_1;
  assign vWindow_and_25_cse = core_wen & main_stage_0_2 & addon_loop_2_and_651_itm_1;
  assign vWindow_and_26_cse = core_wen & main_stage_0_2 & addon_loop_2_and_652_itm_1;
  assign vWindow_and_27_cse = core_wen & main_stage_0_2 & addon_loop_2_and_654_itm_1;
  assign vWindow_and_28_cse = core_wen & main_stage_0_2 & addon_loop_2_and_655_itm_1;
  assign vWindow_and_29_cse = core_wen & main_stage_0_2 & addon_loop_2_and_656_itm_1;
  assign vWindow_and_30_cse = core_wen & main_stage_0_2 & addon_loop_2_and_657_itm_1;
  assign vWindow_and_31_cse = core_wen & main_stage_0_2 & addon_loop_2_and_658_itm_1;
  assign vWindow_and_32_cse = core_wen & main_stage_0_2 & addon_loop_2_and_659_itm_1;
  assign vWindow_and_33_cse = core_wen & main_stage_0_2 & addon_loop_2_and_660_itm_1;
  assign vWindow_and_34_cse = core_wen & main_stage_0_2 & addon_loop_2_and_661_itm_1;
  assign vWindow_and_35_cse = core_wen & main_stage_0_2 & addon_loop_2_and_662_itm_1;
  assign vWindow_and_36_cse = core_wen & main_stage_0_2 & addon_loop_2_and_663_itm_1;
  assign vWindow_and_37_cse = core_wen & main_stage_0_2 & addon_loop_2_and_664_itm_1;
  assign vWindow_and_38_cse = core_wen & main_stage_0_2 & addon_loop_2_and_665_itm_1;
  assign vWindow_and_39_cse = core_wen & main_stage_0_2 & addon_loop_2_and_666_itm_1;
  assign vWindow_and_40_cse = core_wen & main_stage_0_2 & addon_loop_2_and_667_itm_1;
  assign vWindow_and_41_cse = core_wen & main_stage_0_2 & addon_loop_2_and_668_itm_1;
  assign vWindow_and_42_cse = core_wen & main_stage_0_2 & addon_loop_2_and_669_itm_1;
  assign vWindow_and_43_cse = core_wen & main_stage_0_2 & addon_loop_2_and_670_itm_1;
  assign vWindow_and_44_cse = core_wen & main_stage_0_2 & addon_loop_2_and_671_itm_1;
  assign vWindow_and_45_cse = core_wen & main_stage_0_2 & addon_loop_2_and_672_itm_1;
  assign vWindow_and_46_cse = core_wen & main_stage_0_2 & addon_loop_2_and_673_itm_1;
  assign yWindow_and_47_cse = core_wen & main_stage_0_2 & addon_loop_2_and_681_itm_1;
  assign yWindow_and_48_cse = core_wen & main_stage_0_2 & addon_loop_2_and_682_itm_1;
  assign yWindow_and_49_cse = core_wen & main_stage_0_2 & addon_loop_2_and_683_itm_1;
  assign yWindow_and_50_cse = core_wen & main_stage_0_2 & addon_loop_2_and_684_itm_1;
  assign yWindow_and_51_cse = core_wen & main_stage_0_2 & addon_loop_2_and_685_itm_1;
  assign yWindow_and_52_cse = core_wen & main_stage_0_2 & addon_loop_2_and_686_itm_1;
  assign yWindow_and_53_cse = core_wen & main_stage_0_2 & addon_loop_2_and_687_itm_1;
  assign yWindow_and_54_cse = core_wen & main_stage_0_2 & addon_loop_2_and_688_itm_1;
  assign yWindow_and_55_cse = core_wen & main_stage_0_2 & addon_loop_2_and_632_itm_1;
  assign yWindow_and_56_cse = core_wen & main_stage_0_2 & addon_loop_2_and_625_itm_1;
  assign yWindow_and_57_cse = core_wen & main_stage_0_2 & addon_loop_2_and_626_itm_1;
  assign yWindow_and_58_cse = core_wen & main_stage_0_2 & addon_loop_2_and_627_itm_1;
  assign yWindow_and_59_cse = core_wen & main_stage_0_2 & addon_loop_2_and_628_itm_1;
  assign yWindow_and_60_cse = core_wen & main_stage_0_2 & addon_loop_2_and_629_itm_1;
  assign yWindow_and_61_cse = core_wen & main_stage_0_2 & addon_loop_2_and_630_itm_1;
  assign yWindow_and_62_cse = core_wen & main_stage_0_2 & addon_loop_2_and_631_itm_1;
  assign yWindow_and_cse = core_wen & main_stage_0_2 & addon_loop_2_and_617_itm_1;
  assign yWindow_and_63_cse = core_wen & main_stage_0_2 & addon_loop_2_and_618_itm_1;
  assign yWindow_and_64_cse = core_wen & main_stage_0_2 & addon_loop_2_and_619_itm_1;
  assign yWindow_and_65_cse = core_wen & main_stage_0_2 & addon_loop_2_and_620_itm_1;
  assign yWindow_and_66_cse = core_wen & main_stage_0_2 & addon_loop_2_and_621_itm_1;
  assign yWindow_and_67_cse = core_wen & main_stage_0_2 & addon_loop_2_and_622_itm_1;
  assign yWindow_and_68_cse = core_wen & main_stage_0_2 & addon_loop_2_and_623_itm_1;
  assign yWindow_and_69_cse = core_wen & main_stage_0_2 & addon_loop_2_and_624_itm_1;
  assign or_92_cse = (~ lfst_exitL_exitL_exit_nlm_row_loop_lpi_1) | sfi_exit_yuvdns_col_lpi_1;
  assign window_read_window_read_and_5_cse = (z_out_3==3'b110);
  assign nor_22_cse = ~(exitL_exitL_exitL_exitL_exit_nlm_row_loop_lpi_1 | (~ lfst_exit_yuvdns_col_lpi_1));
  assign v_t_and_cse = core_wen & (~((~ main_stage_0_2) | addon_loop_2_equal_tmp_1_1
      | addon_loop_2_equal_tmp_1 | yuvdns_col_asn_sft_1_lpi_1_dfm_1 | yuvdns_row_asn_sft_lpi_1_dfm_1
      | (~ sfi_exit_yuvdns_col_lpi_1_dfm_1_1)));
  assign window_read_window_read_and_4_cse = (z_out_3==3'b101);
  assign and_298_nl = yuvdns_reg_eb & yuvdns_col_acc_2_itm_13_1 & yuvdns_row_acc_2_itm_13_1;
  assign mux_167_cse = MUX_s_1_2_2((~ or_tmp_152), or_54_cse, and_298_nl);
  assign mux_168_nl = MUX_s_1_2_2(and_tmp_3, mux_167_cse, yuvdns_col_asn_sft_lpi_1);
  assign mux_169_nl = MUX_s_1_2_2(mux_168_nl, and_tmp_28, or_92_cse);
  assign mux_170_nl = MUX_s_1_2_2(mux_169_nl, and_tmp_3, yuvdns_col_asn_sft_1_lpi_1);
  assign mux_171_nl = MUX_s_1_2_2(and_tmp_28, mux_170_nl, lfst_exitL_exitL_exitL_exit_nlm_row_loop_lpi_1);
  assign mux_173_nl = MUX_s_1_2_2(and_tmp_29, mux_171_nl, nor_22_cse);
  assign mux_174_nl = MUX_s_1_2_2(mux_173_nl, and_tmp_3, yuvdns_row_asn_sft_lpi_1);
  assign mux_175_nl = MUX_s_1_2_2(and_tmp_29, mux_174_nl, lfst_exitL_exit_yuvdns_col_lpi_1);
  assign nlm_row_loop_and_266_cse = core_wen & mux_175_nl;
  assign yuvdns_reg_eb_and_cse = core_wen & (~(yuvdns_row_asn_sft_lpi_1_dfm_mx0 |
      lfst_exit_addon_loop_2_lpi_1_dfm_1_1));
  assign yuvdns_col_and_cse = core_wen & (~ lfst_exit_addon_loop_2_lpi_1_dfm_1_1);
  assign nlm_col_loop_2_i_and_cse = core_wen & (((yuvdns_and_m1c_1 | (exit_nlm_row_loop_sva_2_mx1
      & yuvdns_and_3_m1c_1)) & yuvdns_col_and_245_tmp_1 & (~ yuvdns_row_or_tmp_1)
      & (~ lfst_exit_addon_loop_2_lpi_1_dfm_1_1)) | addon_loop_2_asn_875);
  assign nlm_row_loop_2_j_and_cse = core_wen & ((sfi_yuvdns_land_lpi_1 & yuvdns_and_m1c_1
      & yuvdns_col_and_245_tmp_1 & (~ yuvdns_row_or_tmp_1) & (~ lfst_exit_addon_loop_2_lpi_1_dfm_1_1))
      | addon_loop_2_asn_881);
  assign and_292_cse = yuvdns_col_acc_2_itm_13_1 & yuvdns_row_acc_2_itm_13_1;
  assign addon_loop_2_and_743_cse = (~ addon_loop_2_for_acc_14_itm_13_1) & addon_loop_2_equal_tmp_3;
  assign vWindow_and_73_cse = core_wen & main_stage_0_2 & addon_loop_2_and_698_itm_1;
  assign window_read_window_read_and_6_cse = (z_out_3==3'b111);
  assign window_read_window_read_nor_3_cse = ~((z_out_3!=3'b000));
  assign addon_loop_1_i_addon_loop_1_i_nor_rgt = ~(addon_loop_2_equal_tmp_2_1 | and_269_tmp);
  assign addon_loop_1_i_or_rgt = (addon_loop_2_equal_tmp_2_1 & (~ and_269_tmp)) |
      addon_loop_2_and_743_cse;
  assign addon_loop_1_i_and_3_rgt = addon_loop_2_equal_tmp_2_1 & and_269_tmp;
  assign vWindow_or_cse = ~(main_stage_0_3 & addon_loop_2_addon_loop_2_nor_250_tmp_1
      & yuvdns_col_and_11_tmp_1 & yuvdns_col_nor_4_itm_1);
  assign vWindow_and_70_cse = in_window_loop_and_187_cse_sva_1 & nlm_row_loop_or_tmp_2
      & yuvdns_col_and_11_tmp_1 & addon_loop_2_addon_loop_2_nor_250_tmp_1 & main_stage_0_3;
  assign vWindow_and_71_cse = window_read_and_stg_3_8_sva_2 & nlm_row_loop_equal_tmp_2
      & yuvdns_col_and_11_tmp_1 & addon_loop_2_addon_loop_2_nor_250_tmp_1 & main_stage_0_3;
  assign vWindow_0_8_lpi_1_mx0 = MUX1HOT_v_10_3_2(vWindow_0_8_lpi_1, in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1,
      tmp_4_lpi_1_dfm_1, {vWindow_or_cse , vWindow_and_70_cse , vWindow_and_71_cse});
  assign uWindow_0_8_lpi_1_mx0 = MUX1HOT_v_10_3_2(uWindow_0_8_lpi_1, in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1,
      tmp_2_lpi_1_dfm_1, {vWindow_or_cse , vWindow_and_70_cse , vWindow_and_71_cse});
  assign yWindow_0_8_lpi_1_mx0 = MUX1HOT_v_10_3_2(yWindow_0_8_lpi_1, in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1,
      tmp_lpi_1_dfm_1, {vWindow_or_cse , vWindow_and_70_cse , vWindow_and_71_cse});
  assign yWindow_4_4_lpi_1_mx0 = MUX_v_10_2_2(in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1,
      yWindow_4_4_lpi_1, or_dcpl_91);
  assign uWindow_4_4_lpi_1_mx0 = MUX_v_10_2_2(in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1,
      uWindow_4_4_lpi_1, or_dcpl_91);
  assign vWindow_4_4_lpi_1_mx0 = MUX_v_10_2_2(in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1,
      vWindow_4_4_lpi_1, or_dcpl_91);
  assign vWindow_7_8_lpi_1_mx0 = MUX_v_10_2_2(tmp_4_lpi_1_dfm_1, vWindow_7_8_lpi_1,
      or_dcpl_92);
  assign vWindow_6_8_lpi_1_mx0 = MUX_v_10_2_2(tmp_4_lpi_1_dfm_1, vWindow_6_8_lpi_1,
      or_dcpl_99);
  assign vWindow_5_8_lpi_1_mx0 = MUX_v_10_2_2(tmp_4_lpi_1_dfm_1, vWindow_5_8_lpi_1,
      or_dcpl_102);
  assign vWindow_4_8_lpi_1_mx0 = MUX_v_10_2_2(tmp_4_lpi_1_dfm_1, vWindow_4_8_lpi_1,
      or_dcpl_105);
  assign vWindow_3_8_lpi_1_mx0 = MUX_v_10_2_2(tmp_4_lpi_1_dfm_1, vWindow_3_8_lpi_1,
      or_dcpl_108);
  assign vWindow_2_8_lpi_1_mx0 = MUX_v_10_2_2(tmp_4_lpi_1_dfm_1, vWindow_2_8_lpi_1,
      or_dcpl_111);
  assign vWindow_1_8_lpi_1_mx0 = MUX_v_10_2_2(tmp_4_lpi_1_dfm_1, vWindow_1_8_lpi_1,
      or_dcpl_114);
  assign uWindow_7_8_lpi_1_mx0 = MUX_v_10_2_2(tmp_2_lpi_1_dfm_1, uWindow_7_8_lpi_1,
      or_dcpl_92);
  assign uWindow_6_8_lpi_1_mx0 = MUX_v_10_2_2(tmp_2_lpi_1_dfm_1, uWindow_6_8_lpi_1,
      or_dcpl_99);
  assign uWindow_5_8_lpi_1_mx0 = MUX_v_10_2_2(tmp_2_lpi_1_dfm_1, uWindow_5_8_lpi_1,
      or_dcpl_102);
  assign uWindow_4_8_lpi_1_mx0 = MUX_v_10_2_2(tmp_2_lpi_1_dfm_1, uWindow_4_8_lpi_1,
      or_dcpl_105);
  assign uWindow_3_8_lpi_1_mx0 = MUX_v_10_2_2(tmp_2_lpi_1_dfm_1, uWindow_3_8_lpi_1,
      or_dcpl_108);
  assign uWindow_2_8_lpi_1_mx0 = MUX_v_10_2_2(tmp_2_lpi_1_dfm_1, uWindow_2_8_lpi_1,
      or_dcpl_111);
  assign uWindow_1_8_lpi_1_mx0 = MUX_v_10_2_2(tmp_2_lpi_1_dfm_1, uWindow_1_8_lpi_1,
      or_dcpl_114);
  assign yWindow_7_8_lpi_1_mx0 = MUX_v_10_2_2(tmp_lpi_1_dfm_1, yWindow_7_8_lpi_1,
      or_dcpl_92);
  assign yWindow_6_8_lpi_1_mx0 = MUX_v_10_2_2(tmp_lpi_1_dfm_1, yWindow_6_8_lpi_1,
      or_dcpl_99);
  assign yWindow_5_8_lpi_1_mx0 = MUX_v_10_2_2(tmp_lpi_1_dfm_1, yWindow_5_8_lpi_1,
      or_dcpl_102);
  assign yWindow_4_8_lpi_1_mx0 = MUX_v_10_2_2(tmp_lpi_1_dfm_1, yWindow_4_8_lpi_1,
      or_dcpl_105);
  assign yWindow_3_8_lpi_1_mx0 = MUX_v_10_2_2(tmp_lpi_1_dfm_1, yWindow_3_8_lpi_1,
      or_dcpl_108);
  assign yWindow_2_8_lpi_1_mx0 = MUX_v_10_2_2(tmp_lpi_1_dfm_1, yWindow_2_8_lpi_1,
      or_dcpl_111);
  assign yWindow_1_8_lpi_1_mx0 = MUX_v_10_2_2(tmp_lpi_1_dfm_1, yWindow_1_8_lpi_1,
      or_dcpl_114);
  assign tmp_4_lpi_1_dfm_1 = MUX1HOT_v_10_8_2(vlineBuf_rsc_0_0_i_qa_d_mxwt, vlineBuf_rsc_1_0_i_qa_d_mxwt,
      vlineBuf_rsc_2_0_i_qa_d_mxwt, vlineBuf_rsc_3_0_i_qa_d_mxwt, vlineBuf_rsc_4_0_i_qa_d_mxwt,
      vlineBuf_rsc_5_0_i_qa_d_mxwt, vlineBuf_rsc_6_0_i_qa_d_mxwt, vlineBuf_rsc_7_0_i_qa_d_mxwt,
      {window_read_window_read_nor_5_itm_2 , window_read_asn_57 , window_read_asn_59
      , addon_loop_2_for_addon_loop_2_for_and_19_itm_2 , window_read_asn_61 , addon_loop_2_for_slc_13_svs_st_2
      , nlm_col_loop_2_lor_lpi_1_dfm_2 , nlm_col_loop_lor_lpi_1_dfm_2});
  assign tmp_2_lpi_1_dfm_1 = MUX1HOT_v_10_8_2(ulineBuf_rsc_0_0_i_qa_d_mxwt, ulineBuf_rsc_1_0_i_qa_d_mxwt,
      ulineBuf_rsc_2_0_i_qa_d_mxwt, ulineBuf_rsc_3_0_i_qa_d_mxwt, ulineBuf_rsc_4_0_i_qa_d_mxwt,
      ulineBuf_rsc_5_0_i_qa_d_mxwt, ulineBuf_rsc_6_0_i_qa_d_mxwt, ulineBuf_rsc_7_0_i_qa_d_mxwt,
      {window_read_window_read_nor_5_itm_2 , window_read_asn_57 , window_read_asn_59
      , addon_loop_2_for_addon_loop_2_for_and_19_itm_2 , window_read_asn_61 , addon_loop_2_for_slc_13_svs_st_2
      , nlm_col_loop_2_lor_lpi_1_dfm_2 , nlm_col_loop_lor_lpi_1_dfm_2});
  assign tmp_lpi_1_dfm_1 = MUX1HOT_v_10_8_2(ylineBuf_rsc_0_0_i_qa_d_mxwt, ylineBuf_rsc_1_0_i_qa_d_mxwt,
      ylineBuf_rsc_2_0_i_qa_d_mxwt, ylineBuf_rsc_3_0_i_qa_d_mxwt, ylineBuf_rsc_4_0_i_qa_d_mxwt,
      ylineBuf_rsc_5_0_i_qa_d_mxwt, ylineBuf_rsc_6_0_i_qa_d_mxwt, ylineBuf_rsc_7_0_i_qa_d_mxwt,
      {window_read_window_read_nor_5_itm_2 , window_read_asn_57 , window_read_asn_59
      , addon_loop_2_for_addon_loop_2_for_and_19_itm_2 , window_read_asn_61 , addon_loop_2_for_slc_13_svs_st_2
      , nlm_col_loop_2_lor_lpi_1_dfm_2 , nlm_col_loop_lor_lpi_1_dfm_2});
  assign in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1 = MUX_v_10_81_2x0(vWindow_0_1_lpi_1,
      vWindow_0_2_lpi_1, vWindow_0_3_lpi_1, vWindow_0_4_lpi_1, vWindow_0_5_lpi_1,
      vWindow_0_6_lpi_1, vWindow_0_7_lpi_1, vWindow_0_8_lpi_1_mx0, vWindow_1_0_lpi_1,
      vWindow_1_1_lpi_1, vWindow_1_2_lpi_1, vWindow_1_3_lpi_1, vWindow_1_4_lpi_1,
      vWindow_1_5_lpi_1, vWindow_1_6_lpi_1, vWindow_1_7_lpi_1, vWindow_1_8_lpi_1_mx0,
      vWindow_2_0_lpi_1, vWindow_2_1_lpi_1, vWindow_2_2_lpi_1, vWindow_2_3_lpi_1,
      vWindow_2_4_lpi_1, vWindow_2_5_lpi_1, vWindow_2_6_lpi_1, vWindow_2_7_lpi_1,
      vWindow_2_8_lpi_1_mx0, vWindow_3_0_lpi_1, vWindow_3_1_lpi_1, vWindow_3_2_lpi_1,
      vWindow_3_3_lpi_1, vWindow_3_4_lpi_1, vWindow_3_5_lpi_1, vWindow_3_6_lpi_1,
      vWindow_3_7_lpi_1, vWindow_3_8_lpi_1_mx0, vWindow_4_0_lpi_1, vWindow_4_1_lpi_1,
      vWindow_4_2_lpi_1, vWindow_4_3_lpi_1, vWindow_4_4_lpi_1_mx0, vWindow_4_5_lpi_1,
      vWindow_4_6_lpi_1, vWindow_4_7_lpi_1, vWindow_4_8_lpi_1_mx0, vWindow_5_0_lpi_1,
      vWindow_5_1_lpi_1, vWindow_5_2_lpi_1, vWindow_5_3_lpi_1, vWindow_5_4_lpi_1,
      vWindow_5_5_lpi_1, vWindow_5_6_lpi_1, vWindow_5_7_lpi_1, vWindow_5_8_lpi_1_mx0,
      vWindow_6_0_lpi_1, vWindow_6_1_lpi_1, vWindow_6_2_lpi_1, vWindow_6_3_lpi_1,
      vWindow_6_4_lpi_1, vWindow_6_5_lpi_1, vWindow_6_6_lpi_1, vWindow_6_7_lpi_1,
      vWindow_6_8_lpi_1_mx0, vWindow_7_0_lpi_1, vWindow_7_1_lpi_1, vWindow_7_2_lpi_1,
      vWindow_7_3_lpi_1, vWindow_7_4_lpi_1, vWindow_7_5_lpi_1, vWindow_7_6_lpi_1,
      vWindow_7_7_lpi_1, vWindow_7_8_lpi_1_mx0, vWindow_8_0_lpi_1, vWindow_8_1_lpi_1,
      vWindow_8_2_lpi_1, vWindow_8_3_lpi_1, vWindow_8_4_lpi_1, vWindow_8_5_lpi_1,
      vWindow_8_6_lpi_1, vWindow_8_7_lpi_1, vWindow_8_8_lpi_1, nlm_col_loop_2_if_nlm_col_loop_2_if_acc_10_itm_1);
  assign in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1 = MUX_v_10_81_2x0(uWindow_0_1_lpi_1,
      uWindow_0_2_lpi_1, uWindow_0_3_lpi_1, uWindow_0_4_lpi_1, uWindow_0_5_lpi_1,
      uWindow_0_6_lpi_1, uWindow_0_7_lpi_1, uWindow_0_8_lpi_1_mx0, uWindow_1_0_lpi_1,
      uWindow_1_1_lpi_1, uWindow_1_2_lpi_1, uWindow_1_3_lpi_1, uWindow_1_4_lpi_1,
      uWindow_1_5_lpi_1, uWindow_1_6_lpi_1, uWindow_1_7_lpi_1, uWindow_1_8_lpi_1_mx0,
      uWindow_2_0_lpi_1, uWindow_2_1_lpi_1, uWindow_2_2_lpi_1, uWindow_2_3_lpi_1,
      uWindow_2_4_lpi_1, uWindow_2_5_lpi_1, uWindow_2_6_lpi_1, uWindow_2_7_lpi_1,
      uWindow_2_8_lpi_1_mx0, uWindow_3_0_lpi_1, uWindow_3_1_lpi_1, uWindow_3_2_lpi_1,
      uWindow_3_3_lpi_1, uWindow_3_4_lpi_1, uWindow_3_5_lpi_1, uWindow_3_6_lpi_1,
      uWindow_3_7_lpi_1, uWindow_3_8_lpi_1_mx0, uWindow_4_0_lpi_1, uWindow_4_1_lpi_1,
      uWindow_4_2_lpi_1, uWindow_4_3_lpi_1, uWindow_4_4_lpi_1_mx0, uWindow_4_5_lpi_1,
      uWindow_4_6_lpi_1, uWindow_4_7_lpi_1, uWindow_4_8_lpi_1_mx0, uWindow_5_0_lpi_1,
      uWindow_5_1_lpi_1, uWindow_5_2_lpi_1, uWindow_5_3_lpi_1, uWindow_5_4_lpi_1,
      uWindow_5_5_lpi_1, uWindow_5_6_lpi_1, uWindow_5_7_lpi_1, uWindow_5_8_lpi_1_mx0,
      uWindow_6_0_lpi_1, uWindow_6_1_lpi_1, uWindow_6_2_lpi_1, uWindow_6_3_lpi_1,
      uWindow_6_4_lpi_1, uWindow_6_5_lpi_1, uWindow_6_6_lpi_1, uWindow_6_7_lpi_1,
      uWindow_6_8_lpi_1_mx0, uWindow_7_0_lpi_1, uWindow_7_1_lpi_1, uWindow_7_2_lpi_1,
      uWindow_7_3_lpi_1, uWindow_7_4_lpi_1, uWindow_7_5_lpi_1, uWindow_7_6_lpi_1,
      uWindow_7_7_lpi_1, uWindow_7_8_lpi_1_mx0, uWindow_8_0_lpi_1, uWindow_8_1_lpi_1,
      uWindow_8_2_lpi_1, uWindow_8_3_lpi_1, uWindow_8_4_lpi_1, uWindow_8_5_lpi_1,
      uWindow_8_6_lpi_1, uWindow_8_7_lpi_1, uWindow_8_8_lpi_1, nlm_col_loop_2_if_nlm_col_loop_2_if_acc_10_itm_1);
  assign in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1 = MUX_v_10_81_2x0(yWindow_0_1_lpi_1,
      yWindow_0_2_lpi_1, yWindow_0_3_lpi_1, yWindow_0_4_lpi_1, yWindow_0_5_lpi_1,
      yWindow_0_6_lpi_1, yWindow_0_7_lpi_1, yWindow_0_8_lpi_1_mx0, yWindow_1_0_lpi_1,
      yWindow_1_1_lpi_1, yWindow_1_2_lpi_1, yWindow_1_3_lpi_1, yWindow_1_4_lpi_1,
      yWindow_1_5_lpi_1, yWindow_1_6_lpi_1, yWindow_1_7_lpi_1, yWindow_1_8_lpi_1_mx0,
      yWindow_2_0_lpi_1, yWindow_2_1_lpi_1, yWindow_2_2_lpi_1, yWindow_2_3_lpi_1,
      yWindow_2_4_lpi_1, yWindow_2_5_lpi_1, yWindow_2_6_lpi_1, yWindow_2_7_lpi_1,
      yWindow_2_8_lpi_1_mx0, yWindow_3_0_lpi_1, yWindow_3_1_lpi_1, yWindow_3_2_lpi_1,
      yWindow_3_3_lpi_1, yWindow_3_4_lpi_1, yWindow_3_5_lpi_1, yWindow_3_6_lpi_1,
      yWindow_3_7_lpi_1, yWindow_3_8_lpi_1_mx0, yWindow_4_0_lpi_1, yWindow_4_1_lpi_1,
      yWindow_4_2_lpi_1, yWindow_4_3_lpi_1, yWindow_4_4_lpi_1_mx0, yWindow_4_5_lpi_1,
      yWindow_4_6_lpi_1, yWindow_4_7_lpi_1, yWindow_4_8_lpi_1_mx0, yWindow_5_0_lpi_1,
      yWindow_5_1_lpi_1, yWindow_5_2_lpi_1, yWindow_5_3_lpi_1, yWindow_5_4_lpi_1,
      yWindow_5_5_lpi_1, yWindow_5_6_lpi_1, yWindow_5_7_lpi_1, yWindow_5_8_lpi_1_mx0,
      yWindow_6_0_lpi_1, yWindow_6_1_lpi_1, yWindow_6_2_lpi_1, yWindow_6_3_lpi_1,
      yWindow_6_4_lpi_1, yWindow_6_5_lpi_1, yWindow_6_6_lpi_1, yWindow_6_7_lpi_1,
      yWindow_6_8_lpi_1_mx0, yWindow_7_0_lpi_1, yWindow_7_1_lpi_1, yWindow_7_2_lpi_1,
      yWindow_7_3_lpi_1, yWindow_7_4_lpi_1, yWindow_7_5_lpi_1, yWindow_7_6_lpi_1,
      yWindow_7_7_lpi_1, yWindow_7_8_lpi_1_mx0, yWindow_8_0_lpi_1, yWindow_8_1_lpi_1,
      yWindow_8_2_lpi_1, yWindow_8_3_lpi_1, yWindow_8_4_lpi_1, yWindow_8_5_lpi_1,
      yWindow_8_6_lpi_1, yWindow_8_7_lpi_1, yWindow_8_8_lpi_1, nlm_col_loop_2_if_nlm_col_loop_2_if_acc_10_itm_1);
  assign yuvdns_col_and_11_tmp_1 = yuvdns_col_asn_sft_lpi_1_dfm_2 & (~ reg_yuvdns_col_asn_sft_1_lpi_1_dfm_2_cse);
  assign yuvdns_nlm_2_yuvdns_nlm_2_yuvdns_nlm_2_or_tmp_1 = (yuvdns_nlm_2_totalweight_sva_2!=14'b00000000000000);
  assign yuvdns_nlm_1_yuvdns_nlm_1_yuvdns_nlm_1_or_tmp_1 = (yuvdns_nlm_1_totalweight_sva_2!=14'b00000000000000);
  assign yuvdns_nlm_yuvdns_nlm_yuvdns_nlm_or_tmp_1 = (yuvdns_nlm_totalweight_sva_2!=14'b00000000000000);
  assign nlm_col_loop_if_nlm_col_loop_if_nlm_col_loop_if_or_cse = (yuvdns_reg_yH2!=14'b00000000000000);
  assign yuvdns_nlm_weight_lpi_1_dfm_2 = MUX_v_8_2_2(8'b00000000, nlm_col_loop_if_else_1_mux_itm_1,
      nlm_col_loop_if_nlm_col_loop_if_nlm_col_loop_if_or_cse);
  assign nl_nlm_col_loop_if_if_2_acc_nl = ({1'b1 , yuvdns_nlm_maxweight_lpi_1_dfm_1})
      + conv_u2u_8_9(~ yuvdns_nlm_weight_lpi_1_dfm_2) + 9'b000000001;
  assign nlm_col_loop_if_if_2_acc_nl = nl_nlm_col_loop_if_if_2_acc_nl[8:0];
  assign nand_119_nl = ~(nlm_col_loop_lor_lpi_1_dfm_2 & (readslicef_9_1_8(nlm_col_loop_if_if_2_acc_nl)));
  assign yuvdns_nlm_maxweight_lpi_1_dfm_2_mx0 = MUX_v_8_2_2(yuvdns_nlm_weight_lpi_1_dfm_2,
      yuvdns_nlm_maxweight_lpi_1_dfm_1, nand_119_nl);
  assign yuvdns_nlm_1_weight_lpi_1_dfm_2 = MUX_v_8_2_2(8'b00000000, nlm_col_loop_1_if_else_1_mux_itm_1,
      nlm_col_loop_1_if_exs_3_0);
  assign nl_nlm_col_loop_1_if_if_2_acc_nl = ({1'b1 , yuvdns_nlm_1_maxweight_lpi_1_dfm_1})
      + conv_u2u_8_9(~ yuvdns_nlm_1_weight_lpi_1_dfm_2) + 9'b000000001;
  assign nlm_col_loop_1_if_if_2_acc_nl = nl_nlm_col_loop_1_if_if_2_acc_nl[8:0];
  assign nand_118_nl = ~(addon_loop_2_for_slc_13_svs_st_2 & (readslicef_9_1_8(nlm_col_loop_1_if_if_2_acc_nl)));
  assign yuvdns_nlm_1_maxweight_lpi_1_dfm_2_mx0 = MUX_v_8_2_2(yuvdns_nlm_1_weight_lpi_1_dfm_2,
      yuvdns_nlm_1_maxweight_lpi_1_dfm_1, nand_118_nl);
  assign yuvdns_nlm_2_weight_lpi_1_dfm_2 = MUX_v_8_2_2(8'b00000000, nlm_col_loop_2_if_else_1_mux_itm_1,
      nlm_col_loop_1_if_exs_3_0);
  assign nl_nlm_col_loop_2_if_if_2_acc_nl = ({1'b1 , yuvdns_nlm_2_maxweight_lpi_1_dfm_1})
      + conv_u2u_8_9(~ yuvdns_nlm_2_weight_lpi_1_dfm_2) + 9'b000000001;
  assign nlm_col_loop_2_if_if_2_acc_nl = nl_nlm_col_loop_2_if_if_2_acc_nl[8:0];
  assign nand_117_nl = ~(nlm_col_loop_2_lor_lpi_1_dfm_2 & (readslicef_9_1_8(nlm_col_loop_2_if_if_2_acc_nl)));
  assign yuvdns_nlm_2_maxweight_lpi_1_dfm_2_mx0 = MUX_v_8_2_2(yuvdns_nlm_2_weight_lpi_1_dfm_2,
      yuvdns_nlm_2_maxweight_lpi_1_dfm_1, nand_117_nl);
  assign nl_yuvdns_nlm_totalweight_sva_2 = yuvdns_nlm_totalweight_1_lpi_1_dfm_1_mx0
      + conv_u2u_8_14(yuvdns_nlm_maxweight_lpi_1_dfm_2_mx0);
  assign yuvdns_nlm_totalweight_sva_2 = nl_yuvdns_nlm_totalweight_sva_2[13:0];
  assign nl_yuvdns_nlm_1_totalweight_sva_2 = yuvdns_nlm_1_totalweight_1_lpi_1_dfm_1_mx0
      + conv_u2u_8_14(yuvdns_nlm_1_maxweight_lpi_1_dfm_2_mx0);
  assign yuvdns_nlm_1_totalweight_sva_2 = nl_yuvdns_nlm_1_totalweight_sva_2[13:0];
  assign nl_yuvdns_nlm_2_totalweight_sva_2 = yuvdns_nlm_2_totalweight_1_lpi_1_dfm_1_mx0
      + conv_u2u_8_14(yuvdns_nlm_2_maxweight_lpi_1_dfm_2_mx0);
  assign yuvdns_nlm_2_totalweight_sva_2 = nl_yuvdns_nlm_2_totalweight_sva_2[13:0];
  assign nlm_col_loop_if_mul_28_nl = conv_u2u_18_18(addon_loop_1_addon_loop_1_mux_itm_1
      * yuvdns_nlm_weight_lpi_1_dfm_2);
  assign nl_nlm_col_loop_if_acc_30_nl = yuvdns_nlm_totalvalue_1_lpi_1_dfm_1 + conv_u2u_18_25(nlm_col_loop_if_mul_28_nl);
  assign nlm_col_loop_if_acc_30_nl = nl_nlm_col_loop_if_acc_30_nl[24:0];
  assign yuvdns_nlm_totalvalue_1_lpi_1_dfm_1_mx0 = MUX_v_25_2_2(yuvdns_nlm_totalvalue_1_lpi_1_dfm_1,
      nlm_col_loop_if_acc_30_nl, nlm_col_loop_lor_lpi_1_dfm_2);
  assign nlm_col_loop_1_if_mul_28_nl = conv_u2u_18_18(addon_loop_1_addon_loop_1_mux_1_itm_1
      * yuvdns_nlm_1_weight_lpi_1_dfm_2);
  assign nl_nlm_col_loop_1_if_acc_30_nl = yuvdns_nlm_1_totalvalue_1_lpi_1_dfm_1 +
      conv_u2u_18_25(nlm_col_loop_1_if_mul_28_nl);
  assign nlm_col_loop_1_if_acc_30_nl = nl_nlm_col_loop_1_if_acc_30_nl[24:0];
  assign yuvdns_nlm_1_totalvalue_1_lpi_1_dfm_1_mx0 = MUX_v_25_2_2(yuvdns_nlm_1_totalvalue_1_lpi_1_dfm_1,
      nlm_col_loop_1_if_acc_30_nl, addon_loop_2_for_slc_13_svs_st_2);
  assign nlm_col_loop_2_if_mul_28_nl = conv_u2u_18_18(addon_loop_1_addon_loop_1_mux_2_itm_1
      * yuvdns_nlm_2_weight_lpi_1_dfm_2);
  assign nl_nlm_col_loop_2_if_acc_30_nl = yuvdns_nlm_2_totalvalue_1_lpi_1_dfm_1 +
      conv_u2u_18_25(nlm_col_loop_2_if_mul_28_nl);
  assign nlm_col_loop_2_if_acc_30_nl = nl_nlm_col_loop_2_if_acc_30_nl[24:0];
  assign yuvdns_nlm_2_totalvalue_1_lpi_1_dfm_1_mx0 = MUX_v_25_2_2(yuvdns_nlm_2_totalvalue_1_lpi_1_dfm_1,
      nlm_col_loop_2_if_acc_30_nl, nlm_col_loop_2_lor_lpi_1_dfm_2);
  assign nl_nlm_col_loop_2_if_acc_28_nl = yuvdns_nlm_2_totalweight_1_lpi_1_dfm_1
      + conv_u2u_8_14(yuvdns_nlm_2_weight_lpi_1_dfm_2);
  assign nlm_col_loop_2_if_acc_28_nl = nl_nlm_col_loop_2_if_acc_28_nl[13:0];
  assign yuvdns_nlm_2_totalweight_1_lpi_1_dfm_1_mx0 = MUX_v_14_2_2(yuvdns_nlm_2_totalweight_1_lpi_1_dfm_1,
      nlm_col_loop_2_if_acc_28_nl, nlm_col_loop_2_lor_lpi_1_dfm_2);
  assign nl_nlm_col_loop_1_if_acc_28_nl = yuvdns_nlm_1_totalweight_1_lpi_1_dfm_1
      + conv_u2u_8_14(yuvdns_nlm_1_weight_lpi_1_dfm_2);
  assign nlm_col_loop_1_if_acc_28_nl = nl_nlm_col_loop_1_if_acc_28_nl[13:0];
  assign yuvdns_nlm_1_totalweight_1_lpi_1_dfm_1_mx0 = MUX_v_14_2_2(yuvdns_nlm_1_totalweight_1_lpi_1_dfm_1,
      nlm_col_loop_1_if_acc_28_nl, addon_loop_2_for_slc_13_svs_st_2);
  assign nl_nlm_col_loop_if_acc_28_nl = yuvdns_nlm_totalweight_1_lpi_1_dfm_1 + conv_u2u_8_14(yuvdns_nlm_weight_lpi_1_dfm_2);
  assign nlm_col_loop_if_acc_28_nl = nl_nlm_col_loop_if_acc_28_nl[13:0];
  assign yuvdns_nlm_totalweight_1_lpi_1_dfm_1_mx0 = MUX_v_14_2_2(yuvdns_nlm_totalweight_1_lpi_1_dfm_1,
      nlm_col_loop_if_acc_28_nl, nlm_col_loop_lor_lpi_1_dfm_2);
  assign yuvdns_nlm_2_mul_1_nl = conv_u2u_18_18(vWindow_4_4_lpi_1 * yuvdns_nlm_2_maxweight_lpi_1_dfm_2_mx0);
  assign nl_yuvdns_nlm_2_acc_2_nl = yuvdns_nlm_2_totalvalue_1_lpi_1_dfm_1_mx0 + conv_u2u_18_25(yuvdns_nlm_2_mul_1_nl);
  assign yuvdns_nlm_2_acc_2_nl = nl_yuvdns_nlm_2_acc_2_nl[24:0];
  assign yuvdns_nlm_2_else_div_nl = div_10_u25_u14(yuvdns_nlm_2_acc_2_nl, yuvdns_nlm_2_totalweight_sva_2);
  assign yuvdns_col_or_9_nl = yuvdns_col_and_280_itm_2 | ((~ yuvdns_nlm_2_yuvdns_nlm_2_yuvdns_nlm_2_or_tmp_1)
      & addon_loop_2_for_addon_loop_2_for_and_18_itm_2 & yuvdns_col_and_281_m1c_2);
  assign nlm_row_loop_and_260_nl = yuvdns_nlm_2_yuvdns_nlm_2_yuvdns_nlm_2_or_tmp_1
      & addon_loop_2_for_addon_loop_2_for_and_18_itm_2 & yuvdns_col_and_281_m1c_2;
  assign v_dst_t_1_lpi_1_dfm_4 = MUX1HOT_v_10_4_2(v_t_lpi_1_dfm_1, v_dst_t_1_lpi_1,
      vWindow_4_4_lpi_1, yuvdns_nlm_2_else_div_nl, {(~ yuvdns_col_asn_sft_lpi_1_dfm_2)
      , yuvdns_col_or_11 , yuvdns_col_or_9_nl , nlm_row_loop_and_260_nl});
  assign yuvdns_nlm_1_mul_1_nl = conv_u2u_18_18(uWindow_4_4_lpi_1 * yuvdns_nlm_1_maxweight_lpi_1_dfm_2_mx0);
  assign nl_yuvdns_nlm_1_acc_2_nl = yuvdns_nlm_1_totalvalue_1_lpi_1_dfm_1_mx0 + conv_u2u_18_25(yuvdns_nlm_1_mul_1_nl);
  assign yuvdns_nlm_1_acc_2_nl = nl_yuvdns_nlm_1_acc_2_nl[24:0];
  assign yuvdns_nlm_1_else_div_nl = div_10_u25_u14(yuvdns_nlm_1_acc_2_nl, yuvdns_nlm_1_totalweight_sva_2);
  assign yuvdns_col_or_7_nl = yuvdns_col_and_280_itm_2 | ((~ yuvdns_nlm_1_yuvdns_nlm_1_yuvdns_nlm_1_or_tmp_1)
      & addon_loop_2_for_addon_loop_2_for_and_18_itm_2 & yuvdns_col_and_281_m1c_2);
  assign nlm_row_loop_and_258_nl = yuvdns_nlm_1_yuvdns_nlm_1_yuvdns_nlm_1_or_tmp_1
      & addon_loop_2_for_addon_loop_2_for_and_18_itm_2 & yuvdns_col_and_281_m1c_2;
  assign u_dst_t_1_lpi_1_dfm_4 = MUX1HOT_v_10_4_2(u_t_lpi_1_dfm_1, u_dst_t_1_lpi_1,
      uWindow_4_4_lpi_1, yuvdns_nlm_1_else_div_nl, {(~ yuvdns_col_asn_sft_lpi_1_dfm_2)
      , yuvdns_col_or_11 , yuvdns_col_or_7_nl , nlm_row_loop_and_258_nl});
  assign yuvdns_nlm_mul_1_nl = conv_u2u_18_18(yWindow_4_4_lpi_1 * yuvdns_nlm_maxweight_lpi_1_dfm_2_mx0);
  assign nl_yuvdns_nlm_acc_2_nl = yuvdns_nlm_totalvalue_1_lpi_1_dfm_1_mx0 + conv_u2u_18_25(yuvdns_nlm_mul_1_nl);
  assign yuvdns_nlm_acc_2_nl = nl_yuvdns_nlm_acc_2_nl[24:0];
  assign yuvdns_nlm_else_div_nl = div_10_u25_u14(yuvdns_nlm_acc_2_nl, yuvdns_nlm_totalweight_sva_2);
  assign yuvdns_col_or_5_nl = yuvdns_col_and_280_itm_2 | ((~ yuvdns_nlm_yuvdns_nlm_yuvdns_nlm_or_tmp_1)
      & addon_loop_2_for_addon_loop_2_for_and_18_itm_2 & yuvdns_col_and_281_m1c_2);
  assign nlm_row_loop_and_256_nl = yuvdns_nlm_yuvdns_nlm_yuvdns_nlm_or_tmp_1 & addon_loop_2_for_addon_loop_2_for_and_18_itm_2
      & yuvdns_col_and_281_m1c_2;
  assign y_dst_t_1_lpi_1_dfm_4 = MUX1HOT_v_10_4_2(y_t_lpi_1_dfm_1, y_dst_t_1_lpi_1,
      yWindow_4_4_lpi_1, yuvdns_nlm_else_div_nl, {(~ yuvdns_col_asn_sft_lpi_1_dfm_2)
      , yuvdns_col_or_11 , yuvdns_col_or_5_nl , nlm_row_loop_and_256_nl});
  assign v_t_lpi_1_dfm_1_mx0 = MUX_v_10_2_2(v_t_lpi_1, src_v_rsci_idat_mxwt, sfi_exit_yuvdns_col_lpi_1_dfm_1_1);
  assign u_t_lpi_1_dfm_1_mx0 = MUX_v_10_2_2(u_t_lpi_1, src_u_rsci_idat_mxwt, sfi_exit_yuvdns_col_lpi_1_dfm_1_1);
  assign y_t_lpi_1_dfm_1_mx0 = MUX_v_10_2_2(y_t_lpi_1, src_y_rsci_idat_mxwt, sfi_exit_yuvdns_col_lpi_1_dfm_1_1);
  assign nlm_col_loop_2_if_ac_int_cctor_4_9_0_sva_mx0w1 = MUX_v_10_71_2(vWindow_0_0_lpi_1,
      vWindow_0_1_lpi_1, vWindow_0_2_lpi_1, vWindow_0_3_lpi_1, vWindow_0_4_lpi_1,
      vWindow_0_5_lpi_1, vWindow_0_6_lpi_1, vWindow_0_7_lpi_1, vWindow_0_8_lpi_1_mx0,
      vWindow_1_0_lpi_1, vWindow_1_1_lpi_1, vWindow_1_2_lpi_1, vWindow_1_3_lpi_1,
      vWindow_1_4_lpi_1, vWindow_1_5_lpi_1, vWindow_1_6_lpi_1, vWindow_1_7_lpi_1,
      vWindow_1_8_lpi_1_mx0, vWindow_2_0_lpi_1, vWindow_2_1_lpi_1, vWindow_2_2_lpi_1,
      vWindow_2_3_lpi_1, vWindow_2_4_lpi_1, vWindow_2_5_lpi_1, vWindow_2_6_lpi_1,
      vWindow_2_7_lpi_1, vWindow_2_8_lpi_1_mx0, vWindow_3_0_lpi_1, vWindow_3_1_lpi_1,
      vWindow_3_2_lpi_1, vWindow_3_3_lpi_1, vWindow_3_4_lpi_1, vWindow_3_5_lpi_1,
      vWindow_3_6_lpi_1, vWindow_3_7_lpi_1, vWindow_3_8_lpi_1_mx0, vWindow_4_0_lpi_1,
      vWindow_4_1_lpi_1, vWindow_4_2_lpi_1, vWindow_4_3_lpi_1, vWindow_4_4_lpi_1_mx0,
      vWindow_4_5_lpi_1, vWindow_4_6_lpi_1, vWindow_4_7_lpi_1, vWindow_4_8_lpi_1_mx0,
      vWindow_5_0_lpi_1, vWindow_5_1_lpi_1, vWindow_5_2_lpi_1, vWindow_5_3_lpi_1,
      vWindow_5_4_lpi_1, vWindow_5_5_lpi_1, vWindow_5_6_lpi_1, vWindow_5_7_lpi_1,
      vWindow_5_8_lpi_1_mx0, vWindow_6_0_lpi_1, vWindow_6_1_lpi_1, vWindow_6_2_lpi_1,
      vWindow_6_3_lpi_1, vWindow_6_4_lpi_1, vWindow_6_5_lpi_1, vWindow_6_6_lpi_1,
      vWindow_6_7_lpi_1, vWindow_6_8_lpi_1_mx0, vWindow_7_0_lpi_1, vWindow_7_1_lpi_1,
      vWindow_7_2_lpi_1, vWindow_7_3_lpi_1, vWindow_7_4_lpi_1, vWindow_7_5_lpi_1,
      vWindow_7_6_lpi_1, vWindow_7_7_lpi_1, {nlm_col_loop_2_if_acc_42_itm_1 , nlm_col_loop_2_if_slc_nlm_col_loop_2_if_acc_32_sdt_2_0_itm_1});
  assign nlm_col_loop_1_if_ac_int_cctor_4_9_0_sva_mx0w1 = MUX_v_10_71_2(uWindow_0_0_lpi_1,
      uWindow_0_1_lpi_1, uWindow_0_2_lpi_1, uWindow_0_3_lpi_1, uWindow_0_4_lpi_1,
      uWindow_0_5_lpi_1, uWindow_0_6_lpi_1, uWindow_0_7_lpi_1, uWindow_0_8_lpi_1_mx0,
      uWindow_1_0_lpi_1, uWindow_1_1_lpi_1, uWindow_1_2_lpi_1, uWindow_1_3_lpi_1,
      uWindow_1_4_lpi_1, uWindow_1_5_lpi_1, uWindow_1_6_lpi_1, uWindow_1_7_lpi_1,
      uWindow_1_8_lpi_1_mx0, uWindow_2_0_lpi_1, uWindow_2_1_lpi_1, uWindow_2_2_lpi_1,
      uWindow_2_3_lpi_1, uWindow_2_4_lpi_1, uWindow_2_5_lpi_1, uWindow_2_6_lpi_1,
      uWindow_2_7_lpi_1, uWindow_2_8_lpi_1_mx0, uWindow_3_0_lpi_1, uWindow_3_1_lpi_1,
      uWindow_3_2_lpi_1, uWindow_3_3_lpi_1, uWindow_3_4_lpi_1, uWindow_3_5_lpi_1,
      uWindow_3_6_lpi_1, uWindow_3_7_lpi_1, uWindow_3_8_lpi_1_mx0, uWindow_4_0_lpi_1,
      uWindow_4_1_lpi_1, uWindow_4_2_lpi_1, uWindow_4_3_lpi_1, uWindow_4_4_lpi_1_mx0,
      uWindow_4_5_lpi_1, uWindow_4_6_lpi_1, uWindow_4_7_lpi_1, uWindow_4_8_lpi_1_mx0,
      uWindow_5_0_lpi_1, uWindow_5_1_lpi_1, uWindow_5_2_lpi_1, uWindow_5_3_lpi_1,
      uWindow_5_4_lpi_1, uWindow_5_5_lpi_1, uWindow_5_6_lpi_1, uWindow_5_7_lpi_1,
      uWindow_5_8_lpi_1_mx0, uWindow_6_0_lpi_1, uWindow_6_1_lpi_1, uWindow_6_2_lpi_1,
      uWindow_6_3_lpi_1, uWindow_6_4_lpi_1, uWindow_6_5_lpi_1, uWindow_6_6_lpi_1,
      uWindow_6_7_lpi_1, uWindow_6_8_lpi_1_mx0, uWindow_7_0_lpi_1, uWindow_7_1_lpi_1,
      uWindow_7_2_lpi_1, uWindow_7_3_lpi_1, uWindow_7_4_lpi_1, uWindow_7_5_lpi_1,
      uWindow_7_6_lpi_1, uWindow_7_7_lpi_1, {nlm_col_loop_1_if_acc_42_itm_1 , operator_3_false_return_2_0_sva_1});
  assign nlm_col_loop_if_ac_int_cctor_4_9_0_sva_mx0w1 = MUX_v_10_71_2(yWindow_0_0_lpi_1,
      yWindow_0_1_lpi_1, yWindow_0_2_lpi_1, yWindow_0_3_lpi_1, yWindow_0_4_lpi_1,
      yWindow_0_5_lpi_1, yWindow_0_6_lpi_1, yWindow_0_7_lpi_1, yWindow_0_8_lpi_1_mx0,
      yWindow_1_0_lpi_1, yWindow_1_1_lpi_1, yWindow_1_2_lpi_1, yWindow_1_3_lpi_1,
      yWindow_1_4_lpi_1, yWindow_1_5_lpi_1, yWindow_1_6_lpi_1, yWindow_1_7_lpi_1,
      yWindow_1_8_lpi_1_mx0, yWindow_2_0_lpi_1, yWindow_2_1_lpi_1, yWindow_2_2_lpi_1,
      yWindow_2_3_lpi_1, yWindow_2_4_lpi_1, yWindow_2_5_lpi_1, yWindow_2_6_lpi_1,
      yWindow_2_7_lpi_1, yWindow_2_8_lpi_1_mx0, yWindow_3_0_lpi_1, yWindow_3_1_lpi_1,
      yWindow_3_2_lpi_1, yWindow_3_3_lpi_1, yWindow_3_4_lpi_1, yWindow_3_5_lpi_1,
      yWindow_3_6_lpi_1, yWindow_3_7_lpi_1, yWindow_3_8_lpi_1_mx0, yWindow_4_0_lpi_1,
      yWindow_4_1_lpi_1, yWindow_4_2_lpi_1, yWindow_4_3_lpi_1, yWindow_4_4_lpi_1_mx0,
      yWindow_4_5_lpi_1, yWindow_4_6_lpi_1, yWindow_4_7_lpi_1, yWindow_4_8_lpi_1_mx0,
      yWindow_5_0_lpi_1, yWindow_5_1_lpi_1, yWindow_5_2_lpi_1, yWindow_5_3_lpi_1,
      yWindow_5_4_lpi_1, yWindow_5_5_lpi_1, yWindow_5_6_lpi_1, yWindow_5_7_lpi_1,
      yWindow_5_8_lpi_1_mx0, yWindow_6_0_lpi_1, yWindow_6_1_lpi_1, yWindow_6_2_lpi_1,
      yWindow_6_3_lpi_1, yWindow_6_4_lpi_1, yWindow_6_5_lpi_1, yWindow_6_6_lpi_1,
      yWindow_6_7_lpi_1, yWindow_6_8_lpi_1_mx0, yWindow_7_0_lpi_1, yWindow_7_1_lpi_1,
      yWindow_7_2_lpi_1, yWindow_7_3_lpi_1, yWindow_7_4_lpi_1, yWindow_7_5_lpi_1,
      yWindow_7_6_lpi_1, yWindow_7_7_lpi_1, {nlm_col_loop_if_acc_42_itm_1 , nlm_col_loop_if_slc_nlm_col_loop_if_acc_32_sdt_2_0_itm_1});
  assign addon_loop_2_addon_loop_2_nor_250_tmp_1 = ~(reg_yuvdns_row_asn_sft_lpi_1_dfm_st_2_cse
      | addon_loop_2_equal_tmp_2 | addon_loop_2_equal_tmp_1_2);
  assign in_window_loop_and_187_cse_sva_1_1 = in_window_loop_and_stg_5_8_sva_1 &
      (~ mgc_2147483647_3_dfmergeen_1_lpi_1_dfm_2_st_1_1);
  assign lines_read_lines_read_slc_yWindow_10_9_0_1_cmx_sva_1 = MUX_v_10_64_2x8x9x10x11x12x13x14x15x16(yWindow_7_1_lpi_1,
      yWindow_7_2_lpi_1, yWindow_7_3_lpi_1, yWindow_7_4_lpi_1, yWindow_7_5_lpi_1,
      yWindow_7_6_lpi_1, yWindow_7_7_lpi_1, yWindow_7_8_lpi_1_mx0, yWindow_1_8_lpi_1_mx0,
      yWindow_2_0_lpi_1, yWindow_2_1_lpi_1, yWindow_2_2_lpi_1, yWindow_2_3_lpi_1,
      yWindow_2_4_lpi_1, yWindow_2_5_lpi_1, yWindow_2_6_lpi_1, yWindow_2_7_lpi_1,
      yWindow_2_8_lpi_1_mx0, yWindow_3_0_lpi_1, yWindow_3_1_lpi_1, yWindow_3_2_lpi_1,
      yWindow_3_3_lpi_1, yWindow_3_4_lpi_1, yWindow_3_5_lpi_1, yWindow_3_6_lpi_1,
      yWindow_3_7_lpi_1, yWindow_3_8_lpi_1_mx0, yWindow_4_0_lpi_1, yWindow_4_1_lpi_1,
      yWindow_4_2_lpi_1, yWindow_4_3_lpi_1, yWindow_4_4_lpi_1_mx0, yWindow_4_5_lpi_1,
      yWindow_4_6_lpi_1, yWindow_4_7_lpi_1, yWindow_4_8_lpi_1_mx0, yWindow_5_0_lpi_1,
      yWindow_5_1_lpi_1, yWindow_5_2_lpi_1, yWindow_5_3_lpi_1, yWindow_5_4_lpi_1,
      yWindow_5_5_lpi_1, yWindow_5_6_lpi_1, yWindow_5_7_lpi_1, yWindow_5_8_lpi_1_mx0,
      yWindow_6_0_lpi_1, yWindow_6_1_lpi_1, yWindow_6_2_lpi_1, yWindow_6_3_lpi_1,
      yWindow_6_4_lpi_1, yWindow_6_5_lpi_1, yWindow_6_6_lpi_1, yWindow_6_7_lpi_1,
      yWindow_6_8_lpi_1_mx0, yWindow_7_0_lpi_1, {addon_loop_2_for_acc_8_cse_sva_st_2_1
      , operator_3_false_return_2_0_sva_1});
  assign lines_read_lines_read_slc_uWindow_10_9_0_1_cmx_sva_1 = MUX_v_10_64_2x8x9x10x11x12x13x14x15x16(uWindow_7_1_lpi_1,
      uWindow_7_2_lpi_1, uWindow_7_3_lpi_1, uWindow_7_4_lpi_1, uWindow_7_5_lpi_1,
      uWindow_7_6_lpi_1, uWindow_7_7_lpi_1, uWindow_7_8_lpi_1_mx0, uWindow_1_8_lpi_1_mx0,
      uWindow_2_0_lpi_1, uWindow_2_1_lpi_1, uWindow_2_2_lpi_1, uWindow_2_3_lpi_1,
      uWindow_2_4_lpi_1, uWindow_2_5_lpi_1, uWindow_2_6_lpi_1, uWindow_2_7_lpi_1,
      uWindow_2_8_lpi_1_mx0, uWindow_3_0_lpi_1, uWindow_3_1_lpi_1, uWindow_3_2_lpi_1,
      uWindow_3_3_lpi_1, uWindow_3_4_lpi_1, uWindow_3_5_lpi_1, uWindow_3_6_lpi_1,
      uWindow_3_7_lpi_1, uWindow_3_8_lpi_1_mx0, uWindow_4_0_lpi_1, uWindow_4_1_lpi_1,
      uWindow_4_2_lpi_1, uWindow_4_3_lpi_1, uWindow_4_4_lpi_1_mx0, uWindow_4_5_lpi_1,
      uWindow_4_6_lpi_1, uWindow_4_7_lpi_1, uWindow_4_8_lpi_1_mx0, uWindow_5_0_lpi_1,
      uWindow_5_1_lpi_1, uWindow_5_2_lpi_1, uWindow_5_3_lpi_1, uWindow_5_4_lpi_1,
      uWindow_5_5_lpi_1, uWindow_5_6_lpi_1, uWindow_5_7_lpi_1, uWindow_5_8_lpi_1_mx0,
      uWindow_6_0_lpi_1, uWindow_6_1_lpi_1, uWindow_6_2_lpi_1, uWindow_6_3_lpi_1,
      uWindow_6_4_lpi_1, uWindow_6_5_lpi_1, uWindow_6_6_lpi_1, uWindow_6_7_lpi_1,
      uWindow_6_8_lpi_1_mx0, uWindow_7_0_lpi_1, {addon_loop_2_for_acc_8_cse_sva_st_2_1
      , operator_3_false_return_2_0_sva_1});
  assign lines_read_lines_read_slc_vWindow_10_9_0_1_cmx_sva_1 = MUX_v_10_64_2x8x9x10x11x12x13x14x15x16(vWindow_7_1_lpi_1,
      vWindow_7_2_lpi_1, vWindow_7_3_lpi_1, vWindow_7_4_lpi_1, vWindow_7_5_lpi_1,
      vWindow_7_6_lpi_1, vWindow_7_7_lpi_1, vWindow_7_8_lpi_1_mx0, vWindow_1_8_lpi_1_mx0,
      vWindow_2_0_lpi_1, vWindow_2_1_lpi_1, vWindow_2_2_lpi_1, vWindow_2_3_lpi_1,
      vWindow_2_4_lpi_1, vWindow_2_5_lpi_1, vWindow_2_6_lpi_1, vWindow_2_7_lpi_1,
      vWindow_2_8_lpi_1_mx0, vWindow_3_0_lpi_1, vWindow_3_1_lpi_1, vWindow_3_2_lpi_1,
      vWindow_3_3_lpi_1, vWindow_3_4_lpi_1, vWindow_3_5_lpi_1, vWindow_3_6_lpi_1,
      vWindow_3_7_lpi_1, vWindow_3_8_lpi_1_mx0, vWindow_4_0_lpi_1, vWindow_4_1_lpi_1,
      vWindow_4_2_lpi_1, vWindow_4_3_lpi_1, vWindow_4_4_lpi_1_mx0, vWindow_4_5_lpi_1,
      vWindow_4_6_lpi_1, vWindow_4_7_lpi_1, vWindow_4_8_lpi_1_mx0, vWindow_5_0_lpi_1,
      vWindow_5_1_lpi_1, vWindow_5_2_lpi_1, vWindow_5_3_lpi_1, vWindow_5_4_lpi_1,
      vWindow_5_5_lpi_1, vWindow_5_6_lpi_1, vWindow_5_7_lpi_1, vWindow_5_8_lpi_1_mx0,
      vWindow_6_0_lpi_1, vWindow_6_1_lpi_1, vWindow_6_2_lpi_1, vWindow_6_3_lpi_1,
      vWindow_6_4_lpi_1, vWindow_6_5_lpi_1, vWindow_6_6_lpi_1, vWindow_6_7_lpi_1,
      vWindow_6_8_lpi_1_mx0, vWindow_7_0_lpi_1, {addon_loop_2_for_acc_8_cse_sva_st_2_1
      , operator_3_false_return_2_0_sva_1});
  assign yuvdns_col_col_lpi_1_dfm_1 = MUX_v_13_2_2(13'b0000000000000, addon_loop_2_for_j_lpi_1,
      lfst_exitL_exit_yuvdns_col_lpi_1_dfm_1);
  assign nl_operator_4_false_3_acc_nl = ({1'b1 , lines_read_i_2_0_sva_2}) + 4'b0001;
  assign operator_4_false_3_acc_nl = nl_operator_4_false_3_acc_nl[3:0];
  assign operator_4_false_3_acc_itm_3_1 = readslicef_4_1_3(operator_4_false_3_acc_nl);
  assign nl_lines_read_acc_tmp = lines_read_i_2_0_lpi_1 + conv_u2u_1_3(yuvdns_col_col_lpi_1_dfm_1[12]);
  assign lines_read_acc_tmp = nl_lines_read_acc_tmp[2:0];
  assign nl_yuvdns_abs_acc_nl = ({1'b1 , (~ yuvdns_abs_a_9_0_sva_1)}) + conv_u2s_10_11(yWindow_3_3_lpi_1)
      + 11'b00000000001;
  assign yuvdns_abs_acc_nl = nl_yuvdns_abs_acc_nl[10:0];
  assign yuvdns_abs_acc_itm_10_1 = readslicef_11_1_10(yuvdns_abs_acc_nl);
  assign yuvdns_abs_a_9_0_sva_1 = MUX_v_10_61_2(yWindow_0_0_lpi_1, yWindow_0_1_lpi_1,
      yWindow_0_2_lpi_1, yWindow_0_3_lpi_1, yWindow_0_4_lpi_1, yWindow_0_5_lpi_1,
      yWindow_0_6_lpi_1, yWindow_0_7_lpi_1, yWindow_0_8_lpi_1_mx0, yWindow_1_0_lpi_1,
      yWindow_1_1_lpi_1, yWindow_1_2_lpi_1, yWindow_1_3_lpi_1, yWindow_1_4_lpi_1,
      yWindow_1_5_lpi_1, yWindow_1_6_lpi_1, yWindow_1_7_lpi_1, yWindow_1_8_lpi_1_mx0,
      yWindow_2_0_lpi_1, yWindow_2_1_lpi_1, yWindow_2_2_lpi_1, yWindow_2_3_lpi_1,
      yWindow_2_4_lpi_1, yWindow_2_5_lpi_1, yWindow_2_6_lpi_1, yWindow_2_7_lpi_1,
      yWindow_2_8_lpi_1_mx0, yWindow_3_0_lpi_1, yWindow_3_1_lpi_1, yWindow_3_2_lpi_1,
      yWindow_3_3_lpi_1, yWindow_3_4_lpi_1, yWindow_3_5_lpi_1, yWindow_3_6_lpi_1,
      yWindow_3_7_lpi_1, yWindow_3_8_lpi_1_mx0, yWindow_4_0_lpi_1, yWindow_4_1_lpi_1,
      yWindow_4_2_lpi_1, yWindow_4_3_lpi_1, yWindow_4_4_lpi_1_mx0, yWindow_4_5_lpi_1,
      yWindow_4_6_lpi_1, yWindow_4_7_lpi_1, yWindow_4_8_lpi_1_mx0, yWindow_5_0_lpi_1,
      yWindow_5_1_lpi_1, yWindow_5_2_lpi_1, yWindow_5_3_lpi_1, yWindow_5_4_lpi_1,
      yWindow_5_5_lpi_1, yWindow_5_6_lpi_1, yWindow_5_7_lpi_1, yWindow_5_8_lpi_1_mx0,
      yWindow_6_0_lpi_1, yWindow_6_1_lpi_1, yWindow_6_2_lpi_1, yWindow_6_3_lpi_1,
      yWindow_6_4_lpi_1, yWindow_6_5_lpi_1, yWindow_6_6_lpi_1, nlm_col_loop_if_nlm_col_loop_if_acc_itm_1);
  assign nl_yuvdns_abs_1_acc_nl = ({1'b1 , (~ yuvdns_abs_a_1_9_0_sva_1)}) + conv_u2s_10_11(yWindow_3_4_lpi_1)
      + 11'b00000000001;
  assign yuvdns_abs_1_acc_nl = nl_yuvdns_abs_1_acc_nl[10:0];
  assign yuvdns_abs_1_acc_itm_10_1 = readslicef_11_1_10(yuvdns_abs_1_acc_nl);
  assign yuvdns_abs_a_1_9_0_sva_1 = MUX_v_10_62_2x0(yWindow_0_1_lpi_1, yWindow_0_2_lpi_1,
      yWindow_0_3_lpi_1, yWindow_0_4_lpi_1, yWindow_0_5_lpi_1, yWindow_0_6_lpi_1,
      yWindow_0_7_lpi_1, yWindow_0_8_lpi_1_mx0, yWindow_1_0_lpi_1, yWindow_1_1_lpi_1,
      yWindow_1_2_lpi_1, yWindow_1_3_lpi_1, yWindow_1_4_lpi_1, yWindow_1_5_lpi_1,
      yWindow_1_6_lpi_1, yWindow_1_7_lpi_1, yWindow_1_8_lpi_1_mx0, yWindow_2_0_lpi_1,
      yWindow_2_1_lpi_1, yWindow_2_2_lpi_1, yWindow_2_3_lpi_1, yWindow_2_4_lpi_1,
      yWindow_2_5_lpi_1, yWindow_2_6_lpi_1, yWindow_2_7_lpi_1, yWindow_2_8_lpi_1_mx0,
      yWindow_3_0_lpi_1, yWindow_3_1_lpi_1, yWindow_3_2_lpi_1, yWindow_3_3_lpi_1,
      yWindow_3_4_lpi_1, yWindow_3_5_lpi_1, yWindow_3_6_lpi_1, yWindow_3_7_lpi_1,
      yWindow_3_8_lpi_1_mx0, yWindow_4_0_lpi_1, yWindow_4_1_lpi_1, yWindow_4_2_lpi_1,
      yWindow_4_3_lpi_1, yWindow_4_4_lpi_1_mx0, yWindow_4_5_lpi_1, yWindow_4_6_lpi_1,
      yWindow_4_7_lpi_1, yWindow_4_8_lpi_1_mx0, yWindow_5_0_lpi_1, yWindow_5_1_lpi_1,
      yWindow_5_2_lpi_1, yWindow_5_3_lpi_1, yWindow_5_4_lpi_1, yWindow_5_5_lpi_1,
      yWindow_5_6_lpi_1, yWindow_5_7_lpi_1, yWindow_5_8_lpi_1_mx0, yWindow_6_0_lpi_1,
      yWindow_6_1_lpi_1, yWindow_6_2_lpi_1, yWindow_6_3_lpi_1, yWindow_6_4_lpi_1,
      yWindow_6_5_lpi_1, yWindow_6_6_lpi_1, yWindow_6_7_lpi_1, {nlm_col_loop_if_acc_41_itm_1
      , nlm_col_loop_if_slc_nlm_col_loop_if_acc_31_sdt_2_0_itm_1});
  assign nl_yuvdns_abs_2_acc_nl = ({1'b1 , (~ yuvdns_abs_a_2_9_0_sva_1)}) + conv_u2s_10_11(yWindow_3_5_lpi_1)
      + 11'b00000000001;
  assign yuvdns_abs_2_acc_nl = nl_yuvdns_abs_2_acc_nl[10:0];
  assign yuvdns_abs_2_acc_itm_10_1 = readslicef_11_1_10(yuvdns_abs_2_acc_nl);
  assign yuvdns_abs_a_2_9_0_sva_1 = MUX_v_10_63_2x0x1(yWindow_0_2_lpi_1, yWindow_0_3_lpi_1,
      yWindow_0_4_lpi_1, yWindow_0_5_lpi_1, yWindow_0_6_lpi_1, yWindow_0_7_lpi_1,
      yWindow_0_8_lpi_1_mx0, yWindow_1_0_lpi_1, yWindow_1_1_lpi_1, yWindow_1_2_lpi_1,
      yWindow_1_3_lpi_1, yWindow_1_4_lpi_1, yWindow_1_5_lpi_1, yWindow_1_6_lpi_1,
      yWindow_1_7_lpi_1, yWindow_1_8_lpi_1_mx0, yWindow_2_0_lpi_1, yWindow_2_1_lpi_1,
      yWindow_2_2_lpi_1, yWindow_2_3_lpi_1, yWindow_2_4_lpi_1, yWindow_2_5_lpi_1,
      yWindow_2_6_lpi_1, yWindow_2_7_lpi_1, yWindow_2_8_lpi_1_mx0, yWindow_3_0_lpi_1,
      yWindow_3_1_lpi_1, yWindow_3_2_lpi_1, yWindow_3_3_lpi_1, yWindow_3_4_lpi_1,
      yWindow_3_5_lpi_1, yWindow_3_6_lpi_1, yWindow_3_7_lpi_1, yWindow_3_8_lpi_1_mx0,
      yWindow_4_0_lpi_1, yWindow_4_1_lpi_1, yWindow_4_2_lpi_1, yWindow_4_3_lpi_1,
      yWindow_4_4_lpi_1_mx0, yWindow_4_5_lpi_1, yWindow_4_6_lpi_1, yWindow_4_7_lpi_1,
      yWindow_4_8_lpi_1_mx0, yWindow_5_0_lpi_1, yWindow_5_1_lpi_1, yWindow_5_2_lpi_1,
      yWindow_5_3_lpi_1, yWindow_5_4_lpi_1, yWindow_5_5_lpi_1, yWindow_5_6_lpi_1,
      yWindow_5_7_lpi_1, yWindow_5_8_lpi_1_mx0, yWindow_6_0_lpi_1, yWindow_6_1_lpi_1,
      yWindow_6_2_lpi_1, yWindow_6_3_lpi_1, yWindow_6_4_lpi_1, yWindow_6_5_lpi_1,
      yWindow_6_6_lpi_1, yWindow_6_7_lpi_1, yWindow_6_8_lpi_1_mx0, nlm_col_loop_if_nlm_col_loop_if_acc_4_itm_1);
  assign nl_yuvdns_abs_3_acc_nl = ({1'b1 , (~ yuvdns_abs_a_3_9_0_sva_1)}) + conv_u2s_10_11(yWindow_4_3_lpi_1)
      + 11'b00000000001;
  assign yuvdns_abs_3_acc_nl = nl_yuvdns_abs_3_acc_nl[10:0];
  assign yuvdns_abs_3_acc_itm_10_1 = readslicef_11_1_10(yuvdns_abs_3_acc_nl);
  assign yuvdns_abs_a_3_9_0_sva_1 = MUX_v_10_70_2x0x1x2x3x4x5x6(yWindow_0_7_lpi_1,
      yWindow_0_8_lpi_1_mx0, yWindow_1_0_lpi_1, yWindow_1_1_lpi_1, yWindow_1_2_lpi_1,
      yWindow_1_3_lpi_1, yWindow_1_4_lpi_1, yWindow_1_5_lpi_1, yWindow_1_6_lpi_1,
      yWindow_1_7_lpi_1, yWindow_1_8_lpi_1_mx0, yWindow_2_0_lpi_1, yWindow_2_1_lpi_1,
      yWindow_2_2_lpi_1, yWindow_2_3_lpi_1, yWindow_2_4_lpi_1, yWindow_2_5_lpi_1,
      yWindow_2_6_lpi_1, yWindow_2_7_lpi_1, yWindow_2_8_lpi_1_mx0, yWindow_3_0_lpi_1,
      yWindow_3_1_lpi_1, yWindow_3_2_lpi_1, yWindow_3_3_lpi_1, yWindow_3_4_lpi_1,
      yWindow_3_5_lpi_1, yWindow_3_6_lpi_1, yWindow_3_7_lpi_1, yWindow_3_8_lpi_1_mx0,
      yWindow_4_0_lpi_1, yWindow_4_1_lpi_1, yWindow_4_2_lpi_1, yWindow_4_3_lpi_1,
      yWindow_4_4_lpi_1_mx0, yWindow_4_5_lpi_1, yWindow_4_6_lpi_1, yWindow_4_7_lpi_1,
      yWindow_4_8_lpi_1_mx0, yWindow_5_0_lpi_1, yWindow_5_1_lpi_1, yWindow_5_2_lpi_1,
      yWindow_5_3_lpi_1, yWindow_5_4_lpi_1, yWindow_5_5_lpi_1, yWindow_5_6_lpi_1,
      yWindow_5_7_lpi_1, yWindow_5_8_lpi_1_mx0, yWindow_6_0_lpi_1, yWindow_6_1_lpi_1,
      yWindow_6_2_lpi_1, yWindow_6_3_lpi_1, yWindow_6_4_lpi_1, yWindow_6_5_lpi_1,
      yWindow_6_6_lpi_1, yWindow_6_7_lpi_1, yWindow_6_8_lpi_1_mx0, yWindow_7_0_lpi_1,
      yWindow_7_1_lpi_1, yWindow_7_2_lpi_1, yWindow_7_3_lpi_1, yWindow_7_4_lpi_1,
      yWindow_7_5_lpi_1, yWindow_7_6_lpi_1, nlm_col_loop_if_nlm_col_loop_if_acc_6_itm_1);
  assign nl_yuvdns_abs_4_acc_nl = ({1'b1 , (~ nlm_col_loop_if_ac_int_cctor_4_9_0_sva_mx0w1)})
      + conv_u2s_10_11(yWindow_4_4_lpi_1_mx0) + 11'b00000000001;
  assign yuvdns_abs_4_acc_nl = nl_yuvdns_abs_4_acc_nl[10:0];
  assign yuvdns_abs_4_acc_itm_10_1 = readslicef_11_1_10(yuvdns_abs_4_acc_nl);
  assign nl_yuvdns_abs_5_acc_nl = ({1'b1 , (~ yuvdns_abs_a_5_9_0_sva_1)}) + conv_u2s_10_11(yWindow_4_5_lpi_1)
      + 11'b00000000001;
  assign yuvdns_abs_5_acc_nl = nl_yuvdns_abs_5_acc_nl[10:0];
  assign yuvdns_abs_5_acc_itm_10_1 = readslicef_11_1_10(yuvdns_abs_5_acc_nl);
  assign yuvdns_abs_a_5_9_0_sva_1 = MUX_v_10_72_2x0x1x2x3x4x5x6x7x8(yWindow_1_0_lpi_1,
      yWindow_1_1_lpi_1, yWindow_1_2_lpi_1, yWindow_1_3_lpi_1, yWindow_1_4_lpi_1,
      yWindow_1_5_lpi_1, yWindow_1_6_lpi_1, yWindow_1_7_lpi_1, yWindow_1_8_lpi_1_mx0,
      yWindow_2_0_lpi_1, yWindow_2_1_lpi_1, yWindow_2_2_lpi_1, yWindow_2_3_lpi_1,
      yWindow_2_4_lpi_1, yWindow_2_5_lpi_1, yWindow_2_6_lpi_1, yWindow_2_7_lpi_1,
      yWindow_2_8_lpi_1_mx0, yWindow_3_0_lpi_1, yWindow_3_1_lpi_1, yWindow_3_2_lpi_1,
      yWindow_3_3_lpi_1, yWindow_3_4_lpi_1, yWindow_3_5_lpi_1, yWindow_3_6_lpi_1,
      yWindow_3_7_lpi_1, yWindow_3_8_lpi_1_mx0, yWindow_4_0_lpi_1, yWindow_4_1_lpi_1,
      yWindow_4_2_lpi_1, yWindow_4_3_lpi_1, yWindow_4_4_lpi_1_mx0, yWindow_4_5_lpi_1,
      yWindow_4_6_lpi_1, yWindow_4_7_lpi_1, yWindow_4_8_lpi_1_mx0, yWindow_5_0_lpi_1,
      yWindow_5_1_lpi_1, yWindow_5_2_lpi_1, yWindow_5_3_lpi_1, yWindow_5_4_lpi_1,
      yWindow_5_5_lpi_1, yWindow_5_6_lpi_1, yWindow_5_7_lpi_1, yWindow_5_8_lpi_1_mx0,
      yWindow_6_0_lpi_1, yWindow_6_1_lpi_1, yWindow_6_2_lpi_1, yWindow_6_3_lpi_1,
      yWindow_6_4_lpi_1, yWindow_6_5_lpi_1, yWindow_6_6_lpi_1, yWindow_6_7_lpi_1,
      yWindow_6_8_lpi_1_mx0, yWindow_7_0_lpi_1, yWindow_7_1_lpi_1, yWindow_7_2_lpi_1,
      yWindow_7_3_lpi_1, yWindow_7_4_lpi_1, yWindow_7_5_lpi_1, yWindow_7_6_lpi_1,
      yWindow_7_7_lpi_1, yWindow_7_8_lpi_1_mx0, nlm_col_loop_if_nlm_col_loop_if_acc_10_itm_1);
  assign nl_yuvdns_abs_6_acc_nl = ({1'b1 , (~ yuvdns_abs_a_6_9_0_sva_1)}) + conv_u2s_10_11(yWindow_5_3_lpi_1)
      + 11'b00000000001;
  assign yuvdns_abs_6_acc_nl = nl_yuvdns_abs_6_acc_nl[10:0];
  assign yuvdns_abs_6_acc_itm_10_1 = readslicef_11_1_10(yuvdns_abs_6_acc_nl);
  assign yuvdns_abs_a_6_9_0_sva_1 = MUX_v_10_79_2x0x1x2x3x4x5x6x7x8x9x10x11x12x13x14x15x16(yWindow_1_8_lpi_1_mx0,
      yWindow_2_0_lpi_1, yWindow_2_1_lpi_1, yWindow_2_2_lpi_1, yWindow_2_3_lpi_1,
      yWindow_2_4_lpi_1, yWindow_2_5_lpi_1, yWindow_2_6_lpi_1, yWindow_2_7_lpi_1,
      yWindow_2_8_lpi_1_mx0, yWindow_3_0_lpi_1, yWindow_3_1_lpi_1, yWindow_3_2_lpi_1,
      yWindow_3_3_lpi_1, yWindow_3_4_lpi_1, yWindow_3_5_lpi_1, yWindow_3_6_lpi_1,
      yWindow_3_7_lpi_1, yWindow_3_8_lpi_1_mx0, yWindow_4_0_lpi_1, yWindow_4_1_lpi_1,
      yWindow_4_2_lpi_1, yWindow_4_3_lpi_1, yWindow_4_4_lpi_1_mx0, yWindow_4_5_lpi_1,
      yWindow_4_6_lpi_1, yWindow_4_7_lpi_1, yWindow_4_8_lpi_1_mx0, yWindow_5_0_lpi_1,
      yWindow_5_1_lpi_1, yWindow_5_2_lpi_1, yWindow_5_3_lpi_1, yWindow_5_4_lpi_1,
      yWindow_5_5_lpi_1, yWindow_5_6_lpi_1, yWindow_5_7_lpi_1, yWindow_5_8_lpi_1_mx0,
      yWindow_6_0_lpi_1, yWindow_6_1_lpi_1, yWindow_6_2_lpi_1, yWindow_6_3_lpi_1,
      yWindow_6_4_lpi_1, yWindow_6_5_lpi_1, yWindow_6_6_lpi_1, yWindow_6_7_lpi_1,
      yWindow_6_8_lpi_1_mx0, yWindow_7_0_lpi_1, yWindow_7_1_lpi_1, yWindow_7_2_lpi_1,
      yWindow_7_3_lpi_1, yWindow_7_4_lpi_1, yWindow_7_5_lpi_1, yWindow_7_6_lpi_1,
      yWindow_7_7_lpi_1, yWindow_7_8_lpi_1_mx0, yWindow_8_0_lpi_1, yWindow_8_1_lpi_1,
      yWindow_8_2_lpi_1, yWindow_8_3_lpi_1, yWindow_8_4_lpi_1, yWindow_8_5_lpi_1,
      yWindow_8_6_lpi_1, nlm_col_loop_if_nlm_col_loop_if_acc_12_itm_1);
  assign nl_yuvdns_abs_7_acc_nl = ({1'b1 , (~ nlm_col_loop_if_ac_int_cctor_7_9_0_sva_1)})
      + conv_u2s_10_11(yWindow_5_4_lpi_1) + 11'b00000000001;
  assign yuvdns_abs_7_acc_nl = nl_yuvdns_abs_7_acc_nl[10:0];
  assign yuvdns_abs_7_acc_itm_10_1 = readslicef_11_1_10(yuvdns_abs_7_acc_nl);
  assign nlm_col_loop_if_ac_int_cctor_7_9_0_sva_1 = MUX_v_10_80_2x0x1x2x3x4x5x6x7x8x9x10x11x12x13x14x15(yWindow_1_7_lpi_1,
      yWindow_1_8_lpi_1_mx0, yWindow_2_0_lpi_1, yWindow_2_1_lpi_1, yWindow_2_2_lpi_1,
      yWindow_2_3_lpi_1, yWindow_2_4_lpi_1, yWindow_2_5_lpi_1, yWindow_2_6_lpi_1,
      yWindow_2_7_lpi_1, yWindow_2_8_lpi_1_mx0, yWindow_3_0_lpi_1, yWindow_3_1_lpi_1,
      yWindow_3_2_lpi_1, yWindow_3_3_lpi_1, yWindow_3_4_lpi_1, yWindow_3_5_lpi_1,
      yWindow_3_6_lpi_1, yWindow_3_7_lpi_1, yWindow_3_8_lpi_1_mx0, yWindow_4_0_lpi_1,
      yWindow_4_1_lpi_1, yWindow_4_2_lpi_1, yWindow_4_3_lpi_1, yWindow_4_4_lpi_1_mx0,
      yWindow_4_5_lpi_1, yWindow_4_6_lpi_1, yWindow_4_7_lpi_1, yWindow_4_8_lpi_1_mx0,
      yWindow_5_0_lpi_1, yWindow_5_1_lpi_1, yWindow_5_2_lpi_1, yWindow_5_3_lpi_1,
      yWindow_5_4_lpi_1, yWindow_5_5_lpi_1, yWindow_5_6_lpi_1, yWindow_5_7_lpi_1,
      yWindow_5_8_lpi_1_mx0, yWindow_6_0_lpi_1, yWindow_6_1_lpi_1, yWindow_6_2_lpi_1,
      yWindow_6_3_lpi_1, yWindow_6_4_lpi_1, yWindow_6_5_lpi_1, yWindow_6_6_lpi_1,
      yWindow_6_7_lpi_1, yWindow_6_8_lpi_1_mx0, yWindow_7_0_lpi_1, yWindow_7_1_lpi_1,
      yWindow_7_2_lpi_1, yWindow_7_3_lpi_1, yWindow_7_4_lpi_1, yWindow_7_5_lpi_1,
      yWindow_7_6_lpi_1, yWindow_7_7_lpi_1, yWindow_7_8_lpi_1_mx0, yWindow_8_0_lpi_1,
      yWindow_8_1_lpi_1, yWindow_8_2_lpi_1, yWindow_8_3_lpi_1, yWindow_8_4_lpi_1,
      yWindow_8_5_lpi_1, yWindow_8_6_lpi_1, yWindow_8_7_lpi_1, {nlm_col_loop_if_acc_43_itm_1
      , nlm_col_loop_if_slc_nlm_col_loop_if_acc_33_sdt_2_0_itm_1});
  assign nl_yuvdns_abs_8_acc_nl = ({1'b1 , (~ yuvdns_abs_a_8_9_0_sva_1)}) + conv_u2s_10_11(yWindow_5_5_lpi_1)
      + 11'b00000000001;
  assign yuvdns_abs_8_acc_nl = nl_yuvdns_abs_8_acc_nl[10:0];
  assign yuvdns_abs_8_acc_itm_10_1 = readslicef_11_1_10(yuvdns_abs_8_acc_nl);
  assign yuvdns_abs_a_8_9_0_sva_1 = MUX_v_10_81_2x0x1x2x3x4x5x6x7x8x9x10x11x12x13x14x15x16x17x18(yWindow_2_1_lpi_1,
      yWindow_2_2_lpi_1, yWindow_2_3_lpi_1, yWindow_2_4_lpi_1, yWindow_2_5_lpi_1,
      yWindow_2_6_lpi_1, yWindow_2_7_lpi_1, yWindow_2_8_lpi_1_mx0, yWindow_3_0_lpi_1,
      yWindow_3_1_lpi_1, yWindow_3_2_lpi_1, yWindow_3_3_lpi_1, yWindow_3_4_lpi_1,
      yWindow_3_5_lpi_1, yWindow_3_6_lpi_1, yWindow_3_7_lpi_1, yWindow_3_8_lpi_1_mx0,
      yWindow_4_0_lpi_1, yWindow_4_1_lpi_1, yWindow_4_2_lpi_1, yWindow_4_3_lpi_1,
      yWindow_4_4_lpi_1_mx0, yWindow_4_5_lpi_1, yWindow_4_6_lpi_1, yWindow_4_7_lpi_1,
      yWindow_4_8_lpi_1_mx0, yWindow_5_0_lpi_1, yWindow_5_1_lpi_1, yWindow_5_2_lpi_1,
      yWindow_5_3_lpi_1, yWindow_5_4_lpi_1, yWindow_5_5_lpi_1, yWindow_5_6_lpi_1,
      yWindow_5_7_lpi_1, yWindow_5_8_lpi_1_mx0, yWindow_6_0_lpi_1, yWindow_6_1_lpi_1,
      yWindow_6_2_lpi_1, yWindow_6_3_lpi_1, yWindow_6_4_lpi_1, yWindow_6_5_lpi_1,
      yWindow_6_6_lpi_1, yWindow_6_7_lpi_1, yWindow_6_8_lpi_1_mx0, yWindow_7_0_lpi_1,
      yWindow_7_1_lpi_1, yWindow_7_2_lpi_1, yWindow_7_3_lpi_1, yWindow_7_4_lpi_1,
      yWindow_7_5_lpi_1, yWindow_7_6_lpi_1, yWindow_7_7_lpi_1, yWindow_7_8_lpi_1_mx0,
      yWindow_8_0_lpi_1, yWindow_8_1_lpi_1, yWindow_8_2_lpi_1, yWindow_8_3_lpi_1,
      yWindow_8_4_lpi_1, yWindow_8_5_lpi_1, yWindow_8_6_lpi_1, yWindow_8_7_lpi_1,
      y_t_lpi_1_dfm_1_mx0, nlm_col_loop_if_nlm_col_loop_if_acc_16_itm_1);
  assign nlm_col_loop_if_mul_11_nl = conv_u2u_20_20(z_out_18 * z_out_18);
  assign nlm_col_loop_if_mul_14_nl = conv_u2u_20_20(z_out_20 * z_out_20);
  assign nlm_col_loop_if_mul_2_nl = conv_u2u_20_20(z_out_12 * z_out_12);
  assign nlm_col_loop_if_mul_23_nl = conv_u2u_20_20(z_out_26 * z_out_26);
  assign nlm_col_loop_if_mul_26_nl = conv_u2u_20_20(z_out_28 * z_out_28);
  assign nlm_col_loop_if_mul_5_nl = conv_u2u_20_20(z_out_14 * z_out_14);
  assign nlm_col_loop_if_mul_8_nl = conv_u2u_20_20(z_out_16 * z_out_16);
  assign nlm_col_loop_if_mul_17_nl = conv_u2u_20_20(z_out_22 * z_out_22);
  assign nlm_col_loop_if_mul_20_nl = conv_u2u_20_20(z_out_24 * z_out_24);
  assign nl_nlm_col_loop_if_acc_nl = conv_u2u_20_24(nlm_col_loop_if_mul_11_nl) +
      conv_u2u_20_24(nlm_col_loop_if_mul_14_nl) + conv_u2u_20_24(nlm_col_loop_if_mul_2_nl)
      + conv_u2u_20_24(nlm_col_loop_if_mul_23_nl) + conv_u2u_20_24(nlm_col_loop_if_mul_26_nl)
      + conv_u2u_20_24(nlm_col_loop_if_mul_5_nl) + conv_u2u_20_24(nlm_col_loop_if_mul_8_nl)
      + conv_u2u_20_24(nlm_col_loop_if_mul_17_nl) + conv_u2u_20_24(nlm_col_loop_if_mul_20_nl);
  assign nlm_col_loop_if_acc_nl = nl_nlm_col_loop_if_acc_nl[23:0];
  assign nlm_col_loop_if_acc_itm_23_3_1 = readslicef_24_21_3(nlm_col_loop_if_acc_nl);
  assign nl_nlm_col_loop_if_else_acc_nl = nlm_col_loop_if_acc_itm_23_3_1 + conv_s2u_16_21({1'b1
      , (~ yuvdns_reg_ysigma2) , 1'b1}) + 21'b000000000000000000001;
  assign nlm_col_loop_if_else_acc_nl = nl_nlm_col_loop_if_else_acc_nl[20:0];
  assign nl_nlm_col_loop_if_acc_26_nl = conv_u2s_21_22(nlm_col_loop_if_acc_itm_23_3_1)
      + conv_s2s_16_22({1'b1 , (~ yuvdns_reg_ysigma2) , 1'b1}) + 22'b0000000000000000000001;
  assign nlm_col_loop_if_acc_26_nl = nl_nlm_col_loop_if_acc_26_nl[21:0];
  assign nlm_col_loop_if_if_not_nl = ~ (readslicef_22_1_21(nlm_col_loop_if_acc_26_nl));
  assign yuvdns_nlm_diff_lpi_1_dfm_1 = MUX_v_21_2_2(21'b000000000000000000000, nlm_col_loop_if_else_acc_nl,
      nlm_col_loop_if_if_not_nl);
  assign nl_yuvdns_abs_9_acc_nl = ({1'b1 , (~ yuvdns_abs_a_9_9_0_sva_1)}) + conv_u2s_10_11(uWindow_3_3_lpi_1)
      + 11'b00000000001;
  assign yuvdns_abs_9_acc_nl = nl_yuvdns_abs_9_acc_nl[10:0];
  assign yuvdns_abs_9_acc_itm_10_1 = readslicef_11_1_10(yuvdns_abs_9_acc_nl);
  assign yuvdns_abs_a_9_9_0_sva_1 = MUX_v_10_61_2(uWindow_0_0_lpi_1, uWindow_0_1_lpi_1,
      uWindow_0_2_lpi_1, uWindow_0_3_lpi_1, uWindow_0_4_lpi_1, uWindow_0_5_lpi_1,
      uWindow_0_6_lpi_1, uWindow_0_7_lpi_1, uWindow_0_8_lpi_1_mx0, uWindow_1_0_lpi_1,
      uWindow_1_1_lpi_1, uWindow_1_2_lpi_1, uWindow_1_3_lpi_1, uWindow_1_4_lpi_1,
      uWindow_1_5_lpi_1, uWindow_1_6_lpi_1, uWindow_1_7_lpi_1, uWindow_1_8_lpi_1_mx0,
      uWindow_2_0_lpi_1, uWindow_2_1_lpi_1, uWindow_2_2_lpi_1, uWindow_2_3_lpi_1,
      uWindow_2_4_lpi_1, uWindow_2_5_lpi_1, uWindow_2_6_lpi_1, uWindow_2_7_lpi_1,
      uWindow_2_8_lpi_1_mx0, uWindow_3_0_lpi_1, uWindow_3_1_lpi_1, uWindow_3_2_lpi_1,
      uWindow_3_3_lpi_1, uWindow_3_4_lpi_1, uWindow_3_5_lpi_1, uWindow_3_6_lpi_1,
      uWindow_3_7_lpi_1, uWindow_3_8_lpi_1_mx0, uWindow_4_0_lpi_1, uWindow_4_1_lpi_1,
      uWindow_4_2_lpi_1, uWindow_4_3_lpi_1, uWindow_4_4_lpi_1_mx0, uWindow_4_5_lpi_1,
      uWindow_4_6_lpi_1, uWindow_4_7_lpi_1, uWindow_4_8_lpi_1_mx0, uWindow_5_0_lpi_1,
      uWindow_5_1_lpi_1, uWindow_5_2_lpi_1, uWindow_5_3_lpi_1, uWindow_5_4_lpi_1,
      uWindow_5_5_lpi_1, uWindow_5_6_lpi_1, uWindow_5_7_lpi_1, uWindow_5_8_lpi_1_mx0,
      uWindow_6_0_lpi_1, uWindow_6_1_lpi_1, uWindow_6_2_lpi_1, uWindow_6_3_lpi_1,
      uWindow_6_4_lpi_1, uWindow_6_5_lpi_1, uWindow_6_6_lpi_1, addon_loop_2_for_slc_addon_loop_2_for_j_11_0_8_itm_1[5:0]);
  assign nl_yuvdns_abs_10_acc_nl = ({1'b1 , (~ yuvdns_abs_a_10_9_0_sva_1)}) + conv_u2s_10_11(uWindow_3_4_lpi_1)
      + 11'b00000000001;
  assign yuvdns_abs_10_acc_nl = nl_yuvdns_abs_10_acc_nl[10:0];
  assign yuvdns_abs_10_acc_itm_10_1 = readslicef_11_1_10(yuvdns_abs_10_acc_nl);
  assign yuvdns_abs_a_10_9_0_sva_1 = MUX_v_10_62_2x0(uWindow_0_1_lpi_1, uWindow_0_2_lpi_1,
      uWindow_0_3_lpi_1, uWindow_0_4_lpi_1, uWindow_0_5_lpi_1, uWindow_0_6_lpi_1,
      uWindow_0_7_lpi_1, uWindow_0_8_lpi_1_mx0, uWindow_1_0_lpi_1, uWindow_1_1_lpi_1,
      uWindow_1_2_lpi_1, uWindow_1_3_lpi_1, uWindow_1_4_lpi_1, uWindow_1_5_lpi_1,
      uWindow_1_6_lpi_1, uWindow_1_7_lpi_1, uWindow_1_8_lpi_1_mx0, uWindow_2_0_lpi_1,
      uWindow_2_1_lpi_1, uWindow_2_2_lpi_1, uWindow_2_3_lpi_1, uWindow_2_4_lpi_1,
      uWindow_2_5_lpi_1, uWindow_2_6_lpi_1, uWindow_2_7_lpi_1, uWindow_2_8_lpi_1_mx0,
      uWindow_3_0_lpi_1, uWindow_3_1_lpi_1, uWindow_3_2_lpi_1, uWindow_3_3_lpi_1,
      uWindow_3_4_lpi_1, uWindow_3_5_lpi_1, uWindow_3_6_lpi_1, uWindow_3_7_lpi_1,
      uWindow_3_8_lpi_1_mx0, uWindow_4_0_lpi_1, uWindow_4_1_lpi_1, uWindow_4_2_lpi_1,
      uWindow_4_3_lpi_1, uWindow_4_4_lpi_1_mx0, uWindow_4_5_lpi_1, uWindow_4_6_lpi_1,
      uWindow_4_7_lpi_1, uWindow_4_8_lpi_1_mx0, uWindow_5_0_lpi_1, uWindow_5_1_lpi_1,
      uWindow_5_2_lpi_1, uWindow_5_3_lpi_1, uWindow_5_4_lpi_1, uWindow_5_5_lpi_1,
      uWindow_5_6_lpi_1, uWindow_5_7_lpi_1, uWindow_5_8_lpi_1_mx0, uWindow_6_0_lpi_1,
      uWindow_6_1_lpi_1, uWindow_6_2_lpi_1, uWindow_6_3_lpi_1, uWindow_6_4_lpi_1,
      uWindow_6_5_lpi_1, uWindow_6_6_lpi_1, uWindow_6_7_lpi_1, {addon_loop_2_for_acc_8_cse_sva_st_2_1
      , lines_read_acc_cse_sva_st_2_1});
  assign nl_yuvdns_abs_11_acc_nl = ({1'b1 , (~ yuvdns_abs_a_11_9_0_sva_1)}) + conv_u2s_10_11(uWindow_3_5_lpi_1)
      + 11'b00000000001;
  assign yuvdns_abs_11_acc_nl = nl_yuvdns_abs_11_acc_nl[10:0];
  assign yuvdns_abs_11_acc_itm_10_1 = readslicef_11_1_10(yuvdns_abs_11_acc_nl);
  assign yuvdns_abs_a_11_9_0_sva_1 = MUX_v_10_63_2x0x1(uWindow_0_2_lpi_1, uWindow_0_3_lpi_1,
      uWindow_0_4_lpi_1, uWindow_0_5_lpi_1, uWindow_0_6_lpi_1, uWindow_0_7_lpi_1,
      uWindow_0_8_lpi_1_mx0, uWindow_1_0_lpi_1, uWindow_1_1_lpi_1, uWindow_1_2_lpi_1,
      uWindow_1_3_lpi_1, uWindow_1_4_lpi_1, uWindow_1_5_lpi_1, uWindow_1_6_lpi_1,
      uWindow_1_7_lpi_1, uWindow_1_8_lpi_1_mx0, uWindow_2_0_lpi_1, uWindow_2_1_lpi_1,
      uWindow_2_2_lpi_1, uWindow_2_3_lpi_1, uWindow_2_4_lpi_1, uWindow_2_5_lpi_1,
      uWindow_2_6_lpi_1, uWindow_2_7_lpi_1, uWindow_2_8_lpi_1_mx0, uWindow_3_0_lpi_1,
      uWindow_3_1_lpi_1, uWindow_3_2_lpi_1, uWindow_3_3_lpi_1, uWindow_3_4_lpi_1,
      uWindow_3_5_lpi_1, uWindow_3_6_lpi_1, uWindow_3_7_lpi_1, uWindow_3_8_lpi_1_mx0,
      uWindow_4_0_lpi_1, uWindow_4_1_lpi_1, uWindow_4_2_lpi_1, uWindow_4_3_lpi_1,
      uWindow_4_4_lpi_1_mx0, uWindow_4_5_lpi_1, uWindow_4_6_lpi_1, uWindow_4_7_lpi_1,
      uWindow_4_8_lpi_1_mx0, uWindow_5_0_lpi_1, uWindow_5_1_lpi_1, uWindow_5_2_lpi_1,
      uWindow_5_3_lpi_1, uWindow_5_4_lpi_1, uWindow_5_5_lpi_1, uWindow_5_6_lpi_1,
      uWindow_5_7_lpi_1, uWindow_5_8_lpi_1_mx0, uWindow_6_0_lpi_1, uWindow_6_1_lpi_1,
      uWindow_6_2_lpi_1, uWindow_6_3_lpi_1, uWindow_6_4_lpi_1, uWindow_6_5_lpi_1,
      uWindow_6_6_lpi_1, uWindow_6_7_lpi_1, uWindow_6_8_lpi_1_mx0, addon_loop_2_for_slc_addon_loop_2_for_j_11_0_3_itm_1[5:0]);
  assign nl_yuvdns_abs_12_acc_nl = ({1'b1 , (~ yuvdns_abs_a_12_9_0_sva_1)}) + conv_u2s_10_11(uWindow_4_3_lpi_1)
      + 11'b00000000001;
  assign yuvdns_abs_12_acc_nl = nl_yuvdns_abs_12_acc_nl[10:0];
  assign yuvdns_abs_12_acc_itm_10_1 = readslicef_11_1_10(yuvdns_abs_12_acc_nl);
  assign yuvdns_abs_a_12_9_0_sva_1 = MUX_v_10_70_2x0x1x2x3x4x5x6(uWindow_0_7_lpi_1,
      uWindow_0_8_lpi_1_mx0, uWindow_1_0_lpi_1, uWindow_1_1_lpi_1, uWindow_1_2_lpi_1,
      uWindow_1_3_lpi_1, uWindow_1_4_lpi_1, uWindow_1_5_lpi_1, uWindow_1_6_lpi_1,
      uWindow_1_7_lpi_1, uWindow_1_8_lpi_1_mx0, uWindow_2_0_lpi_1, uWindow_2_1_lpi_1,
      uWindow_2_2_lpi_1, uWindow_2_3_lpi_1, uWindow_2_4_lpi_1, uWindow_2_5_lpi_1,
      uWindow_2_6_lpi_1, uWindow_2_7_lpi_1, uWindow_2_8_lpi_1_mx0, uWindow_3_0_lpi_1,
      uWindow_3_1_lpi_1, uWindow_3_2_lpi_1, uWindow_3_3_lpi_1, uWindow_3_4_lpi_1,
      uWindow_3_5_lpi_1, uWindow_3_6_lpi_1, uWindow_3_7_lpi_1, uWindow_3_8_lpi_1_mx0,
      uWindow_4_0_lpi_1, uWindow_4_1_lpi_1, uWindow_4_2_lpi_1, uWindow_4_3_lpi_1,
      uWindow_4_4_lpi_1_mx0, uWindow_4_5_lpi_1, uWindow_4_6_lpi_1, uWindow_4_7_lpi_1,
      uWindow_4_8_lpi_1_mx0, uWindow_5_0_lpi_1, uWindow_5_1_lpi_1, uWindow_5_2_lpi_1,
      uWindow_5_3_lpi_1, uWindow_5_4_lpi_1, uWindow_5_5_lpi_1, uWindow_5_6_lpi_1,
      uWindow_5_7_lpi_1, uWindow_5_8_lpi_1_mx0, uWindow_6_0_lpi_1, uWindow_6_1_lpi_1,
      uWindow_6_2_lpi_1, uWindow_6_3_lpi_1, uWindow_6_4_lpi_1, uWindow_6_5_lpi_1,
      uWindow_6_6_lpi_1, uWindow_6_7_lpi_1, uWindow_6_8_lpi_1_mx0, uWindow_7_0_lpi_1,
      uWindow_7_1_lpi_1, uWindow_7_2_lpi_1, uWindow_7_3_lpi_1, uWindow_7_4_lpi_1,
      uWindow_7_5_lpi_1, uWindow_7_6_lpi_1, addon_loop_2_for_slc_addon_loop_2_for_j_11_0_7_itm_1[6:0]);
  assign nl_yuvdns_abs_13_acc_nl = ({1'b1 , (~ nlm_col_loop_1_if_ac_int_cctor_4_9_0_sva_mx0w1)})
      + conv_u2s_10_11(uWindow_4_4_lpi_1_mx0) + 11'b00000000001;
  assign yuvdns_abs_13_acc_nl = nl_yuvdns_abs_13_acc_nl[10:0];
  assign yuvdns_abs_13_acc_itm_10_1 = readslicef_11_1_10(yuvdns_abs_13_acc_nl);
  assign nl_yuvdns_abs_14_acc_nl = ({1'b1 , (~ yuvdns_abs_a_14_9_0_sva_1)}) + conv_u2s_10_11(uWindow_4_5_lpi_1)
      + 11'b00000000001;
  assign yuvdns_abs_14_acc_nl = nl_yuvdns_abs_14_acc_nl[10:0];
  assign yuvdns_abs_14_acc_itm_10_1 = readslicef_11_1_10(yuvdns_abs_14_acc_nl);
  assign yuvdns_abs_a_14_9_0_sva_1 = MUX_v_10_72_2x0x1x2x3x4x5x6x7x8(uWindow_1_0_lpi_1,
      uWindow_1_1_lpi_1, uWindow_1_2_lpi_1, uWindow_1_3_lpi_1, uWindow_1_4_lpi_1,
      uWindow_1_5_lpi_1, uWindow_1_6_lpi_1, uWindow_1_7_lpi_1, uWindow_1_8_lpi_1_mx0,
      uWindow_2_0_lpi_1, uWindow_2_1_lpi_1, uWindow_2_2_lpi_1, uWindow_2_3_lpi_1,
      uWindow_2_4_lpi_1, uWindow_2_5_lpi_1, uWindow_2_6_lpi_1, uWindow_2_7_lpi_1,
      uWindow_2_8_lpi_1_mx0, uWindow_3_0_lpi_1, uWindow_3_1_lpi_1, uWindow_3_2_lpi_1,
      uWindow_3_3_lpi_1, uWindow_3_4_lpi_1, uWindow_3_5_lpi_1, uWindow_3_6_lpi_1,
      uWindow_3_7_lpi_1, uWindow_3_8_lpi_1_mx0, uWindow_4_0_lpi_1, uWindow_4_1_lpi_1,
      uWindow_4_2_lpi_1, uWindow_4_3_lpi_1, uWindow_4_4_lpi_1_mx0, uWindow_4_5_lpi_1,
      uWindow_4_6_lpi_1, uWindow_4_7_lpi_1, uWindow_4_8_lpi_1_mx0, uWindow_5_0_lpi_1,
      uWindow_5_1_lpi_1, uWindow_5_2_lpi_1, uWindow_5_3_lpi_1, uWindow_5_4_lpi_1,
      uWindow_5_5_lpi_1, uWindow_5_6_lpi_1, uWindow_5_7_lpi_1, uWindow_5_8_lpi_1_mx0,
      uWindow_6_0_lpi_1, uWindow_6_1_lpi_1, uWindow_6_2_lpi_1, uWindow_6_3_lpi_1,
      uWindow_6_4_lpi_1, uWindow_6_5_lpi_1, uWindow_6_6_lpi_1, uWindow_6_7_lpi_1,
      uWindow_6_8_lpi_1_mx0, uWindow_7_0_lpi_1, uWindow_7_1_lpi_1, uWindow_7_2_lpi_1,
      uWindow_7_3_lpi_1, uWindow_7_4_lpi_1, uWindow_7_5_lpi_1, uWindow_7_6_lpi_1,
      uWindow_7_7_lpi_1, uWindow_7_8_lpi_1_mx0, addon_loop_2_for_slc_addon_loop_2_for_j_11_0_11_itm_1[6:0]);
  assign nl_yuvdns_abs_15_acc_nl = ({1'b1 , (~ yuvdns_abs_a_15_9_0_sva_1)}) + conv_u2s_10_11(uWindow_5_3_lpi_1)
      + 11'b00000000001;
  assign yuvdns_abs_15_acc_nl = nl_yuvdns_abs_15_acc_nl[10:0];
  assign yuvdns_abs_15_acc_itm_10_1 = readslicef_11_1_10(yuvdns_abs_15_acc_nl);
  assign yuvdns_abs_a_15_9_0_sva_1 = MUX_v_10_79_2x0x1x2x3x4x5x6x7x8x9x10x11x12x13x14x15x16(uWindow_1_8_lpi_1_mx0,
      uWindow_2_0_lpi_1, uWindow_2_1_lpi_1, uWindow_2_2_lpi_1, uWindow_2_3_lpi_1,
      uWindow_2_4_lpi_1, uWindow_2_5_lpi_1, uWindow_2_6_lpi_1, uWindow_2_7_lpi_1,
      uWindow_2_8_lpi_1_mx0, uWindow_3_0_lpi_1, uWindow_3_1_lpi_1, uWindow_3_2_lpi_1,
      uWindow_3_3_lpi_1, uWindow_3_4_lpi_1, uWindow_3_5_lpi_1, uWindow_3_6_lpi_1,
      uWindow_3_7_lpi_1, uWindow_3_8_lpi_1_mx0, uWindow_4_0_lpi_1, uWindow_4_1_lpi_1,
      uWindow_4_2_lpi_1, uWindow_4_3_lpi_1, uWindow_4_4_lpi_1_mx0, uWindow_4_5_lpi_1,
      uWindow_4_6_lpi_1, uWindow_4_7_lpi_1, uWindow_4_8_lpi_1_mx0, uWindow_5_0_lpi_1,
      uWindow_5_1_lpi_1, uWindow_5_2_lpi_1, uWindow_5_3_lpi_1, uWindow_5_4_lpi_1,
      uWindow_5_5_lpi_1, uWindow_5_6_lpi_1, uWindow_5_7_lpi_1, uWindow_5_8_lpi_1_mx0,
      uWindow_6_0_lpi_1, uWindow_6_1_lpi_1, uWindow_6_2_lpi_1, uWindow_6_3_lpi_1,
      uWindow_6_4_lpi_1, uWindow_6_5_lpi_1, uWindow_6_6_lpi_1, uWindow_6_7_lpi_1,
      uWindow_6_8_lpi_1_mx0, uWindow_7_0_lpi_1, uWindow_7_1_lpi_1, uWindow_7_2_lpi_1,
      uWindow_7_3_lpi_1, uWindow_7_4_lpi_1, uWindow_7_5_lpi_1, uWindow_7_6_lpi_1,
      uWindow_7_7_lpi_1, uWindow_7_8_lpi_1_mx0, uWindow_8_0_lpi_1, uWindow_8_1_lpi_1,
      uWindow_8_2_lpi_1, uWindow_8_3_lpi_1, uWindow_8_4_lpi_1, uWindow_8_5_lpi_1,
      uWindow_8_6_lpi_1, addon_loop_2_for_slc_addon_loop_2_for_j_11_0_12_itm_1[6:0]);
  assign nl_yuvdns_abs_16_acc_nl = ({1'b1 , (~ nlm_col_loop_1_if_ac_int_cctor_7_9_0_sva_1)})
      + conv_u2s_10_11(uWindow_5_4_lpi_1) + 11'b00000000001;
  assign yuvdns_abs_16_acc_nl = nl_yuvdns_abs_16_acc_nl[10:0];
  assign yuvdns_abs_16_acc_itm_10_1 = readslicef_11_1_10(yuvdns_abs_16_acc_nl);
  assign nlm_col_loop_1_if_ac_int_cctor_7_9_0_sva_1 = MUX_v_10_80_2x0x1x2x3x4x5x6x7x8x9x10x11x12x13x14x15(uWindow_1_7_lpi_1,
      uWindow_1_8_lpi_1_mx0, uWindow_2_0_lpi_1, uWindow_2_1_lpi_1, uWindow_2_2_lpi_1,
      uWindow_2_3_lpi_1, uWindow_2_4_lpi_1, uWindow_2_5_lpi_1, uWindow_2_6_lpi_1,
      uWindow_2_7_lpi_1, uWindow_2_8_lpi_1_mx0, uWindow_3_0_lpi_1, uWindow_3_1_lpi_1,
      uWindow_3_2_lpi_1, uWindow_3_3_lpi_1, uWindow_3_4_lpi_1, uWindow_3_5_lpi_1,
      uWindow_3_6_lpi_1, uWindow_3_7_lpi_1, uWindow_3_8_lpi_1_mx0, uWindow_4_0_lpi_1,
      uWindow_4_1_lpi_1, uWindow_4_2_lpi_1, uWindow_4_3_lpi_1, uWindow_4_4_lpi_1_mx0,
      uWindow_4_5_lpi_1, uWindow_4_6_lpi_1, uWindow_4_7_lpi_1, uWindow_4_8_lpi_1_mx0,
      uWindow_5_0_lpi_1, uWindow_5_1_lpi_1, uWindow_5_2_lpi_1, uWindow_5_3_lpi_1,
      uWindow_5_4_lpi_1, uWindow_5_5_lpi_1, uWindow_5_6_lpi_1, uWindow_5_7_lpi_1,
      uWindow_5_8_lpi_1_mx0, uWindow_6_0_lpi_1, uWindow_6_1_lpi_1, uWindow_6_2_lpi_1,
      uWindow_6_3_lpi_1, uWindow_6_4_lpi_1, uWindow_6_5_lpi_1, uWindow_6_6_lpi_1,
      uWindow_6_7_lpi_1, uWindow_6_8_lpi_1_mx0, uWindow_7_0_lpi_1, uWindow_7_1_lpi_1,
      uWindow_7_2_lpi_1, uWindow_7_3_lpi_1, uWindow_7_4_lpi_1, uWindow_7_5_lpi_1,
      uWindow_7_6_lpi_1, uWindow_7_7_lpi_1, uWindow_7_8_lpi_1_mx0, uWindow_8_0_lpi_1,
      uWindow_8_1_lpi_1, uWindow_8_2_lpi_1, uWindow_8_3_lpi_1, uWindow_8_4_lpi_1,
      uWindow_8_5_lpi_1, uWindow_8_6_lpi_1, uWindow_8_7_lpi_1, {nlm_col_loop_1_if_acc_43_itm_1
      , nlm_col_loop_1_if_slc_nlm_col_loop_1_if_acc_33_sdt_2_0_itm_1});
  assign nl_yuvdns_abs_17_acc_nl = ({1'b1 , (~ yuvdns_abs_a_17_9_0_sva_1)}) + conv_u2s_10_11(uWindow_5_5_lpi_1)
      + 11'b00000000001;
  assign yuvdns_abs_17_acc_nl = nl_yuvdns_abs_17_acc_nl[10:0];
  assign yuvdns_abs_17_acc_itm_10_1 = readslicef_11_1_10(yuvdns_abs_17_acc_nl);
  assign yuvdns_abs_a_17_9_0_sva_1 = MUX_v_10_81_2x0x1x2x3x4x5x6x7x8x9x10x11x12x13x14x15x16x17x18(uWindow_2_1_lpi_1,
      uWindow_2_2_lpi_1, uWindow_2_3_lpi_1, uWindow_2_4_lpi_1, uWindow_2_5_lpi_1,
      uWindow_2_6_lpi_1, uWindow_2_7_lpi_1, uWindow_2_8_lpi_1_mx0, uWindow_3_0_lpi_1,
      uWindow_3_1_lpi_1, uWindow_3_2_lpi_1, uWindow_3_3_lpi_1, uWindow_3_4_lpi_1,
      uWindow_3_5_lpi_1, uWindow_3_6_lpi_1, uWindow_3_7_lpi_1, uWindow_3_8_lpi_1_mx0,
      uWindow_4_0_lpi_1, uWindow_4_1_lpi_1, uWindow_4_2_lpi_1, uWindow_4_3_lpi_1,
      uWindow_4_4_lpi_1_mx0, uWindow_4_5_lpi_1, uWindow_4_6_lpi_1, uWindow_4_7_lpi_1,
      uWindow_4_8_lpi_1_mx0, uWindow_5_0_lpi_1, uWindow_5_1_lpi_1, uWindow_5_2_lpi_1,
      uWindow_5_3_lpi_1, uWindow_5_4_lpi_1, uWindow_5_5_lpi_1, uWindow_5_6_lpi_1,
      uWindow_5_7_lpi_1, uWindow_5_8_lpi_1_mx0, uWindow_6_0_lpi_1, uWindow_6_1_lpi_1,
      uWindow_6_2_lpi_1, uWindow_6_3_lpi_1, uWindow_6_4_lpi_1, uWindow_6_5_lpi_1,
      uWindow_6_6_lpi_1, uWindow_6_7_lpi_1, uWindow_6_8_lpi_1_mx0, uWindow_7_0_lpi_1,
      uWindow_7_1_lpi_1, uWindow_7_2_lpi_1, uWindow_7_3_lpi_1, uWindow_7_4_lpi_1,
      uWindow_7_5_lpi_1, uWindow_7_6_lpi_1, uWindow_7_7_lpi_1, uWindow_7_8_lpi_1_mx0,
      uWindow_8_0_lpi_1, uWindow_8_1_lpi_1, uWindow_8_2_lpi_1, uWindow_8_3_lpi_1,
      uWindow_8_4_lpi_1, uWindow_8_5_lpi_1, uWindow_8_6_lpi_1, uWindow_8_7_lpi_1,
      u_t_lpi_1_dfm_1_mx0, addon_loop_2_for_slc_addon_loop_2_for_j_11_0_13_itm_1[6:0]);
  assign nlm_col_loop_1_if_mul_11_nl = conv_u2u_20_20(z_out_36 * z_out_36);
  assign nlm_col_loop_1_if_mul_14_nl = conv_u2u_20_20(z_out_38 * z_out_38);
  assign nlm_col_loop_1_if_mul_2_nl = conv_u2u_20_20(z_out_30 * z_out_30);
  assign nlm_col_loop_1_if_mul_23_nl = conv_u2u_20_20(z_out_17 * z_out_17);
  assign nlm_col_loop_1_if_mul_26_nl = conv_u2u_20_20(z_out_29 * z_out_29);
  assign nlm_col_loop_1_if_mul_5_nl = conv_u2u_20_20(z_out_32 * z_out_32);
  assign nlm_col_loop_1_if_mul_8_nl = conv_u2u_20_20(z_out_34 * z_out_34);
  assign nlm_col_loop_1_if_mul_17_nl = conv_u2u_20_20(z_out_35 * z_out_35);
  assign nlm_col_loop_1_if_mul_20_nl = conv_u2u_20_20(z_out_27 * z_out_27);
  assign nl_nlm_col_loop_1_if_acc_nl = conv_u2u_20_24(nlm_col_loop_1_if_mul_11_nl)
      + conv_u2u_20_24(nlm_col_loop_1_if_mul_14_nl) + conv_u2u_20_24(nlm_col_loop_1_if_mul_2_nl)
      + conv_u2u_20_24(nlm_col_loop_1_if_mul_23_nl) + conv_u2u_20_24(nlm_col_loop_1_if_mul_26_nl)
      + conv_u2u_20_24(nlm_col_loop_1_if_mul_5_nl) + conv_u2u_20_24(nlm_col_loop_1_if_mul_8_nl)
      + conv_u2u_20_24(nlm_col_loop_1_if_mul_17_nl) + conv_u2u_20_24(nlm_col_loop_1_if_mul_20_nl);
  assign nlm_col_loop_1_if_acc_nl = nl_nlm_col_loop_1_if_acc_nl[23:0];
  assign nlm_col_loop_1_if_acc_itm_23_3_1 = readslicef_24_21_3(nlm_col_loop_1_if_acc_nl);
  assign nl_nlm_col_loop_1_if_else_acc_nl = nlm_col_loop_1_if_acc_itm_23_3_1 + conv_s2u_16_21({1'b1
      , (~ yuvdns_reg_uvsigma2) , 1'b1}) + 21'b000000000000000000001;
  assign nlm_col_loop_1_if_else_acc_nl = nl_nlm_col_loop_1_if_else_acc_nl[20:0];
  assign nl_nlm_col_loop_1_if_acc_26_nl = conv_u2s_21_22(nlm_col_loop_1_if_acc_itm_23_3_1)
      + conv_s2s_16_22({1'b1 , (~ yuvdns_reg_uvsigma2) , 1'b1}) + 22'b0000000000000000000001;
  assign nlm_col_loop_1_if_acc_26_nl = nl_nlm_col_loop_1_if_acc_26_nl[21:0];
  assign nlm_col_loop_1_if_if_not_nl = ~ (readslicef_22_1_21(nlm_col_loop_1_if_acc_26_nl));
  assign yuvdns_nlm_1_diff_lpi_1_dfm_1 = MUX_v_21_2_2(21'b000000000000000000000,
      nlm_col_loop_1_if_else_acc_nl, nlm_col_loop_1_if_if_not_nl);
  assign nl_yuvdns_abs_18_acc_nl = ({1'b1 , (~ yuvdns_abs_a_18_9_0_sva_1)}) + conv_u2s_10_11(vWindow_3_3_lpi_1)
      + 11'b00000000001;
  assign yuvdns_abs_18_acc_nl = nl_yuvdns_abs_18_acc_nl[10:0];
  assign yuvdns_abs_18_acc_itm_10_1 = readslicef_11_1_10(yuvdns_abs_18_acc_nl);
  assign yuvdns_abs_a_18_9_0_sva_1 = MUX_v_10_61_2(vWindow_0_0_lpi_1, vWindow_0_1_lpi_1,
      vWindow_0_2_lpi_1, vWindow_0_3_lpi_1, vWindow_0_4_lpi_1, vWindow_0_5_lpi_1,
      vWindow_0_6_lpi_1, vWindow_0_7_lpi_1, vWindow_0_8_lpi_1_mx0, vWindow_1_0_lpi_1,
      vWindow_1_1_lpi_1, vWindow_1_2_lpi_1, vWindow_1_3_lpi_1, vWindow_1_4_lpi_1,
      vWindow_1_5_lpi_1, vWindow_1_6_lpi_1, vWindow_1_7_lpi_1, vWindow_1_8_lpi_1_mx0,
      vWindow_2_0_lpi_1, vWindow_2_1_lpi_1, vWindow_2_2_lpi_1, vWindow_2_3_lpi_1,
      vWindow_2_4_lpi_1, vWindow_2_5_lpi_1, vWindow_2_6_lpi_1, vWindow_2_7_lpi_1,
      vWindow_2_8_lpi_1_mx0, vWindow_3_0_lpi_1, vWindow_3_1_lpi_1, vWindow_3_2_lpi_1,
      vWindow_3_3_lpi_1, vWindow_3_4_lpi_1, vWindow_3_5_lpi_1, vWindow_3_6_lpi_1,
      vWindow_3_7_lpi_1, vWindow_3_8_lpi_1_mx0, vWindow_4_0_lpi_1, vWindow_4_1_lpi_1,
      vWindow_4_2_lpi_1, vWindow_4_3_lpi_1, vWindow_4_4_lpi_1_mx0, vWindow_4_5_lpi_1,
      vWindow_4_6_lpi_1, vWindow_4_7_lpi_1, vWindow_4_8_lpi_1_mx0, vWindow_5_0_lpi_1,
      vWindow_5_1_lpi_1, vWindow_5_2_lpi_1, vWindow_5_3_lpi_1, vWindow_5_4_lpi_1,
      vWindow_5_5_lpi_1, vWindow_5_6_lpi_1, vWindow_5_7_lpi_1, vWindow_5_8_lpi_1_mx0,
      vWindow_6_0_lpi_1, vWindow_6_1_lpi_1, vWindow_6_2_lpi_1, vWindow_6_3_lpi_1,
      vWindow_6_4_lpi_1, vWindow_6_5_lpi_1, vWindow_6_6_lpi_1, nlm_col_loop_2_if_nlm_col_loop_2_if_acc_itm_1);
  assign nl_yuvdns_abs_19_acc_nl = ({1'b1 , (~ yuvdns_abs_a_19_9_0_sva_1)}) + conv_u2s_10_11(vWindow_3_4_lpi_1)
      + 11'b00000000001;
  assign yuvdns_abs_19_acc_nl = nl_yuvdns_abs_19_acc_nl[10:0];
  assign yuvdns_abs_19_acc_itm_10_1 = readslicef_11_1_10(yuvdns_abs_19_acc_nl);
  assign yuvdns_abs_a_19_9_0_sva_1 = MUX_v_10_62_2x0(vWindow_0_1_lpi_1, vWindow_0_2_lpi_1,
      vWindow_0_3_lpi_1, vWindow_0_4_lpi_1, vWindow_0_5_lpi_1, vWindow_0_6_lpi_1,
      vWindow_0_7_lpi_1, vWindow_0_8_lpi_1_mx0, vWindow_1_0_lpi_1, vWindow_1_1_lpi_1,
      vWindow_1_2_lpi_1, vWindow_1_3_lpi_1, vWindow_1_4_lpi_1, vWindow_1_5_lpi_1,
      vWindow_1_6_lpi_1, vWindow_1_7_lpi_1, vWindow_1_8_lpi_1_mx0, vWindow_2_0_lpi_1,
      vWindow_2_1_lpi_1, vWindow_2_2_lpi_1, vWindow_2_3_lpi_1, vWindow_2_4_lpi_1,
      vWindow_2_5_lpi_1, vWindow_2_6_lpi_1, vWindow_2_7_lpi_1, vWindow_2_8_lpi_1_mx0,
      vWindow_3_0_lpi_1, vWindow_3_1_lpi_1, vWindow_3_2_lpi_1, vWindow_3_3_lpi_1,
      vWindow_3_4_lpi_1, vWindow_3_5_lpi_1, vWindow_3_6_lpi_1, vWindow_3_7_lpi_1,
      vWindow_3_8_lpi_1_mx0, vWindow_4_0_lpi_1, vWindow_4_1_lpi_1, vWindow_4_2_lpi_1,
      vWindow_4_3_lpi_1, vWindow_4_4_lpi_1_mx0, vWindow_4_5_lpi_1, vWindow_4_6_lpi_1,
      vWindow_4_7_lpi_1, vWindow_4_8_lpi_1_mx0, vWindow_5_0_lpi_1, vWindow_5_1_lpi_1,
      vWindow_5_2_lpi_1, vWindow_5_3_lpi_1, vWindow_5_4_lpi_1, vWindow_5_5_lpi_1,
      vWindow_5_6_lpi_1, vWindow_5_7_lpi_1, vWindow_5_8_lpi_1_mx0, vWindow_6_0_lpi_1,
      vWindow_6_1_lpi_1, vWindow_6_2_lpi_1, vWindow_6_3_lpi_1, vWindow_6_4_lpi_1,
      vWindow_6_5_lpi_1, vWindow_6_6_lpi_1, vWindow_6_7_lpi_1, {nlm_col_loop_2_if_acc_41_itm_1
      , nlm_col_loop_2_if_slc_nlm_col_loop_2_if_acc_31_sdt_2_0_itm_1});
  assign nl_yuvdns_abs_20_acc_nl = ({1'b1 , (~ yuvdns_abs_a_20_9_0_sva_1)}) + conv_u2s_10_11(vWindow_3_5_lpi_1)
      + 11'b00000000001;
  assign yuvdns_abs_20_acc_nl = nl_yuvdns_abs_20_acc_nl[10:0];
  assign yuvdns_abs_20_acc_itm_10_1 = readslicef_11_1_10(yuvdns_abs_20_acc_nl);
  assign yuvdns_abs_a_20_9_0_sva_1 = MUX_v_10_63_2x0x1(vWindow_0_2_lpi_1, vWindow_0_3_lpi_1,
      vWindow_0_4_lpi_1, vWindow_0_5_lpi_1, vWindow_0_6_lpi_1, vWindow_0_7_lpi_1,
      vWindow_0_8_lpi_1_mx0, vWindow_1_0_lpi_1, vWindow_1_1_lpi_1, vWindow_1_2_lpi_1,
      vWindow_1_3_lpi_1, vWindow_1_4_lpi_1, vWindow_1_5_lpi_1, vWindow_1_6_lpi_1,
      vWindow_1_7_lpi_1, vWindow_1_8_lpi_1_mx0, vWindow_2_0_lpi_1, vWindow_2_1_lpi_1,
      vWindow_2_2_lpi_1, vWindow_2_3_lpi_1, vWindow_2_4_lpi_1, vWindow_2_5_lpi_1,
      vWindow_2_6_lpi_1, vWindow_2_7_lpi_1, vWindow_2_8_lpi_1_mx0, vWindow_3_0_lpi_1,
      vWindow_3_1_lpi_1, vWindow_3_2_lpi_1, vWindow_3_3_lpi_1, vWindow_3_4_lpi_1,
      vWindow_3_5_lpi_1, vWindow_3_6_lpi_1, vWindow_3_7_lpi_1, vWindow_3_8_lpi_1_mx0,
      vWindow_4_0_lpi_1, vWindow_4_1_lpi_1, vWindow_4_2_lpi_1, vWindow_4_3_lpi_1,
      vWindow_4_4_lpi_1_mx0, vWindow_4_5_lpi_1, vWindow_4_6_lpi_1, vWindow_4_7_lpi_1,
      vWindow_4_8_lpi_1_mx0, vWindow_5_0_lpi_1, vWindow_5_1_lpi_1, vWindow_5_2_lpi_1,
      vWindow_5_3_lpi_1, vWindow_5_4_lpi_1, vWindow_5_5_lpi_1, vWindow_5_6_lpi_1,
      vWindow_5_7_lpi_1, vWindow_5_8_lpi_1_mx0, vWindow_6_0_lpi_1, vWindow_6_1_lpi_1,
      vWindow_6_2_lpi_1, vWindow_6_3_lpi_1, vWindow_6_4_lpi_1, vWindow_6_5_lpi_1,
      vWindow_6_6_lpi_1, vWindow_6_7_lpi_1, vWindow_6_8_lpi_1_mx0, nlm_col_loop_2_if_nlm_col_loop_2_if_acc_4_itm_1);
  assign nl_yuvdns_abs_21_acc_nl = ({1'b1 , (~ yuvdns_abs_a_21_9_0_sva_1)}) + conv_u2s_10_11(vWindow_4_3_lpi_1)
      + 11'b00000000001;
  assign yuvdns_abs_21_acc_nl = nl_yuvdns_abs_21_acc_nl[10:0];
  assign yuvdns_abs_21_acc_itm_10_1 = readslicef_11_1_10(yuvdns_abs_21_acc_nl);
  assign yuvdns_abs_a_21_9_0_sva_1 = MUX_v_10_70_2x0x1x2x3x4x5x6(vWindow_0_7_lpi_1,
      vWindow_0_8_lpi_1_mx0, vWindow_1_0_lpi_1, vWindow_1_1_lpi_1, vWindow_1_2_lpi_1,
      vWindow_1_3_lpi_1, vWindow_1_4_lpi_1, vWindow_1_5_lpi_1, vWindow_1_6_lpi_1,
      vWindow_1_7_lpi_1, vWindow_1_8_lpi_1_mx0, vWindow_2_0_lpi_1, vWindow_2_1_lpi_1,
      vWindow_2_2_lpi_1, vWindow_2_3_lpi_1, vWindow_2_4_lpi_1, vWindow_2_5_lpi_1,
      vWindow_2_6_lpi_1, vWindow_2_7_lpi_1, vWindow_2_8_lpi_1_mx0, vWindow_3_0_lpi_1,
      vWindow_3_1_lpi_1, vWindow_3_2_lpi_1, vWindow_3_3_lpi_1, vWindow_3_4_lpi_1,
      vWindow_3_5_lpi_1, vWindow_3_6_lpi_1, vWindow_3_7_lpi_1, vWindow_3_8_lpi_1_mx0,
      vWindow_4_0_lpi_1, vWindow_4_1_lpi_1, vWindow_4_2_lpi_1, vWindow_4_3_lpi_1,
      vWindow_4_4_lpi_1_mx0, vWindow_4_5_lpi_1, vWindow_4_6_lpi_1, vWindow_4_7_lpi_1,
      vWindow_4_8_lpi_1_mx0, vWindow_5_0_lpi_1, vWindow_5_1_lpi_1, vWindow_5_2_lpi_1,
      vWindow_5_3_lpi_1, vWindow_5_4_lpi_1, vWindow_5_5_lpi_1, vWindow_5_6_lpi_1,
      vWindow_5_7_lpi_1, vWindow_5_8_lpi_1_mx0, vWindow_6_0_lpi_1, vWindow_6_1_lpi_1,
      vWindow_6_2_lpi_1, vWindow_6_3_lpi_1, vWindow_6_4_lpi_1, vWindow_6_5_lpi_1,
      vWindow_6_6_lpi_1, vWindow_6_7_lpi_1, vWindow_6_8_lpi_1_mx0, vWindow_7_0_lpi_1,
      vWindow_7_1_lpi_1, vWindow_7_2_lpi_1, vWindow_7_3_lpi_1, vWindow_7_4_lpi_1,
      vWindow_7_5_lpi_1, vWindow_7_6_lpi_1, nlm_col_loop_2_if_nlm_col_loop_2_if_acc_6_itm_1);
  assign nl_yuvdns_abs_22_acc_nl = ({1'b1 , (~ nlm_col_loop_2_if_ac_int_cctor_4_9_0_sva_mx0w1)})
      + conv_u2s_10_11(vWindow_4_4_lpi_1_mx0) + 11'b00000000001;
  assign yuvdns_abs_22_acc_nl = nl_yuvdns_abs_22_acc_nl[10:0];
  assign yuvdns_abs_22_acc_itm_10_1 = readslicef_11_1_10(yuvdns_abs_22_acc_nl);
  assign nl_yuvdns_abs_23_acc_nl = ({1'b1 , (~ yuvdns_abs_a_23_9_0_sva_1)}) + conv_u2s_10_11(vWindow_4_5_lpi_1)
      + 11'b00000000001;
  assign yuvdns_abs_23_acc_nl = nl_yuvdns_abs_23_acc_nl[10:0];
  assign yuvdns_abs_23_acc_itm_10_1 = readslicef_11_1_10(yuvdns_abs_23_acc_nl);
  assign yuvdns_abs_a_23_9_0_sva_1 = MUX_v_10_72_2x0x1x2x3x4x5x6x7x8(vWindow_1_0_lpi_1,
      vWindow_1_1_lpi_1, vWindow_1_2_lpi_1, vWindow_1_3_lpi_1, vWindow_1_4_lpi_1,
      vWindow_1_5_lpi_1, vWindow_1_6_lpi_1, vWindow_1_7_lpi_1, vWindow_1_8_lpi_1_mx0,
      vWindow_2_0_lpi_1, vWindow_2_1_lpi_1, vWindow_2_2_lpi_1, vWindow_2_3_lpi_1,
      vWindow_2_4_lpi_1, vWindow_2_5_lpi_1, vWindow_2_6_lpi_1, vWindow_2_7_lpi_1,
      vWindow_2_8_lpi_1_mx0, vWindow_3_0_lpi_1, vWindow_3_1_lpi_1, vWindow_3_2_lpi_1,
      vWindow_3_3_lpi_1, vWindow_3_4_lpi_1, vWindow_3_5_lpi_1, vWindow_3_6_lpi_1,
      vWindow_3_7_lpi_1, vWindow_3_8_lpi_1_mx0, vWindow_4_0_lpi_1, vWindow_4_1_lpi_1,
      vWindow_4_2_lpi_1, vWindow_4_3_lpi_1, vWindow_4_4_lpi_1_mx0, vWindow_4_5_lpi_1,
      vWindow_4_6_lpi_1, vWindow_4_7_lpi_1, vWindow_4_8_lpi_1_mx0, vWindow_5_0_lpi_1,
      vWindow_5_1_lpi_1, vWindow_5_2_lpi_1, vWindow_5_3_lpi_1, vWindow_5_4_lpi_1,
      vWindow_5_5_lpi_1, vWindow_5_6_lpi_1, vWindow_5_7_lpi_1, vWindow_5_8_lpi_1_mx0,
      vWindow_6_0_lpi_1, vWindow_6_1_lpi_1, vWindow_6_2_lpi_1, vWindow_6_3_lpi_1,
      vWindow_6_4_lpi_1, vWindow_6_5_lpi_1, vWindow_6_6_lpi_1, vWindow_6_7_lpi_1,
      vWindow_6_8_lpi_1_mx0, vWindow_7_0_lpi_1, vWindow_7_1_lpi_1, vWindow_7_2_lpi_1,
      vWindow_7_3_lpi_1, vWindow_7_4_lpi_1, vWindow_7_5_lpi_1, vWindow_7_6_lpi_1,
      vWindow_7_7_lpi_1, vWindow_7_8_lpi_1_mx0, nlm_col_loop_2_if_nlm_col_loop_2_if_acc_10_itm_1);
  assign nl_yuvdns_abs_24_acc_nl = ({1'b1 , (~ yuvdns_abs_a_24_9_0_sva_1)}) + conv_u2s_10_11(vWindow_5_3_lpi_1)
      + 11'b00000000001;
  assign yuvdns_abs_24_acc_nl = nl_yuvdns_abs_24_acc_nl[10:0];
  assign yuvdns_abs_24_acc_itm_10_1 = readslicef_11_1_10(yuvdns_abs_24_acc_nl);
  assign yuvdns_abs_a_24_9_0_sva_1 = MUX_v_10_79_2x0x1x2x3x4x5x6x7x8x9x10x11x12x13x14x15x16(vWindow_1_8_lpi_1_mx0,
      vWindow_2_0_lpi_1, vWindow_2_1_lpi_1, vWindow_2_2_lpi_1, vWindow_2_3_lpi_1,
      vWindow_2_4_lpi_1, vWindow_2_5_lpi_1, vWindow_2_6_lpi_1, vWindow_2_7_lpi_1,
      vWindow_2_8_lpi_1_mx0, vWindow_3_0_lpi_1, vWindow_3_1_lpi_1, vWindow_3_2_lpi_1,
      vWindow_3_3_lpi_1, vWindow_3_4_lpi_1, vWindow_3_5_lpi_1, vWindow_3_6_lpi_1,
      vWindow_3_7_lpi_1, vWindow_3_8_lpi_1_mx0, vWindow_4_0_lpi_1, vWindow_4_1_lpi_1,
      vWindow_4_2_lpi_1, vWindow_4_3_lpi_1, vWindow_4_4_lpi_1_mx0, vWindow_4_5_lpi_1,
      vWindow_4_6_lpi_1, vWindow_4_7_lpi_1, vWindow_4_8_lpi_1_mx0, vWindow_5_0_lpi_1,
      vWindow_5_1_lpi_1, vWindow_5_2_lpi_1, vWindow_5_3_lpi_1, vWindow_5_4_lpi_1,
      vWindow_5_5_lpi_1, vWindow_5_6_lpi_1, vWindow_5_7_lpi_1, vWindow_5_8_lpi_1_mx0,
      vWindow_6_0_lpi_1, vWindow_6_1_lpi_1, vWindow_6_2_lpi_1, vWindow_6_3_lpi_1,
      vWindow_6_4_lpi_1, vWindow_6_5_lpi_1, vWindow_6_6_lpi_1, vWindow_6_7_lpi_1,
      vWindow_6_8_lpi_1_mx0, vWindow_7_0_lpi_1, vWindow_7_1_lpi_1, vWindow_7_2_lpi_1,
      vWindow_7_3_lpi_1, vWindow_7_4_lpi_1, vWindow_7_5_lpi_1, vWindow_7_6_lpi_1,
      vWindow_7_7_lpi_1, vWindow_7_8_lpi_1_mx0, vWindow_8_0_lpi_1, vWindow_8_1_lpi_1,
      vWindow_8_2_lpi_1, vWindow_8_3_lpi_1, vWindow_8_4_lpi_1, vWindow_8_5_lpi_1,
      vWindow_8_6_lpi_1, nlm_col_loop_2_if_nlm_col_loop_2_if_acc_12_itm_1);
  assign nl_yuvdns_abs_25_acc_nl = ({1'b1 , (~ nlm_col_loop_2_if_ac_int_cctor_7_9_0_sva_1)})
      + conv_u2s_10_11(vWindow_5_4_lpi_1) + 11'b00000000001;
  assign yuvdns_abs_25_acc_nl = nl_yuvdns_abs_25_acc_nl[10:0];
  assign yuvdns_abs_25_acc_itm_10_1 = readslicef_11_1_10(yuvdns_abs_25_acc_nl);
  assign nlm_col_loop_2_if_ac_int_cctor_7_9_0_sva_1 = MUX_v_10_80_2x0x1x2x3x4x5x6x7x8x9x10x11x12x13x14x15(vWindow_1_7_lpi_1,
      vWindow_1_8_lpi_1_mx0, vWindow_2_0_lpi_1, vWindow_2_1_lpi_1, vWindow_2_2_lpi_1,
      vWindow_2_3_lpi_1, vWindow_2_4_lpi_1, vWindow_2_5_lpi_1, vWindow_2_6_lpi_1,
      vWindow_2_7_lpi_1, vWindow_2_8_lpi_1_mx0, vWindow_3_0_lpi_1, vWindow_3_1_lpi_1,
      vWindow_3_2_lpi_1, vWindow_3_3_lpi_1, vWindow_3_4_lpi_1, vWindow_3_5_lpi_1,
      vWindow_3_6_lpi_1, vWindow_3_7_lpi_1, vWindow_3_8_lpi_1_mx0, vWindow_4_0_lpi_1,
      vWindow_4_1_lpi_1, vWindow_4_2_lpi_1, vWindow_4_3_lpi_1, vWindow_4_4_lpi_1_mx0,
      vWindow_4_5_lpi_1, vWindow_4_6_lpi_1, vWindow_4_7_lpi_1, vWindow_4_8_lpi_1_mx0,
      vWindow_5_0_lpi_1, vWindow_5_1_lpi_1, vWindow_5_2_lpi_1, vWindow_5_3_lpi_1,
      vWindow_5_4_lpi_1, vWindow_5_5_lpi_1, vWindow_5_6_lpi_1, vWindow_5_7_lpi_1,
      vWindow_5_8_lpi_1_mx0, vWindow_6_0_lpi_1, vWindow_6_1_lpi_1, vWindow_6_2_lpi_1,
      vWindow_6_3_lpi_1, vWindow_6_4_lpi_1, vWindow_6_5_lpi_1, vWindow_6_6_lpi_1,
      vWindow_6_7_lpi_1, vWindow_6_8_lpi_1_mx0, vWindow_7_0_lpi_1, vWindow_7_1_lpi_1,
      vWindow_7_2_lpi_1, vWindow_7_3_lpi_1, vWindow_7_4_lpi_1, vWindow_7_5_lpi_1,
      vWindow_7_6_lpi_1, vWindow_7_7_lpi_1, vWindow_7_8_lpi_1_mx0, vWindow_8_0_lpi_1,
      vWindow_8_1_lpi_1, vWindow_8_2_lpi_1, vWindow_8_3_lpi_1, vWindow_8_4_lpi_1,
      vWindow_8_5_lpi_1, vWindow_8_6_lpi_1, vWindow_8_7_lpi_1, {nlm_col_loop_2_if_acc_43_itm_1
      , nlm_col_loop_2_if_slc_nlm_col_loop_2_if_acc_33_sdt_2_0_itm_1});
  assign nl_yuvdns_abs_26_acc_nl = ({1'b1 , (~ yuvdns_abs_a_26_9_0_sva_1)}) + conv_u2s_10_11(vWindow_5_5_lpi_1)
      + 11'b00000000001;
  assign yuvdns_abs_26_acc_nl = nl_yuvdns_abs_26_acc_nl[10:0];
  assign yuvdns_abs_26_acc_itm_10_1 = readslicef_11_1_10(yuvdns_abs_26_acc_nl);
  assign yuvdns_abs_a_26_9_0_sva_1 = MUX_v_10_81_2x0x1x2x3x4x5x6x7x8x9x10x11x12x13x14x15x16x17x18(vWindow_2_1_lpi_1,
      vWindow_2_2_lpi_1, vWindow_2_3_lpi_1, vWindow_2_4_lpi_1, vWindow_2_5_lpi_1,
      vWindow_2_6_lpi_1, vWindow_2_7_lpi_1, vWindow_2_8_lpi_1_mx0, vWindow_3_0_lpi_1,
      vWindow_3_1_lpi_1, vWindow_3_2_lpi_1, vWindow_3_3_lpi_1, vWindow_3_4_lpi_1,
      vWindow_3_5_lpi_1, vWindow_3_6_lpi_1, vWindow_3_7_lpi_1, vWindow_3_8_lpi_1_mx0,
      vWindow_4_0_lpi_1, vWindow_4_1_lpi_1, vWindow_4_2_lpi_1, vWindow_4_3_lpi_1,
      vWindow_4_4_lpi_1_mx0, vWindow_4_5_lpi_1, vWindow_4_6_lpi_1, vWindow_4_7_lpi_1,
      vWindow_4_8_lpi_1_mx0, vWindow_5_0_lpi_1, vWindow_5_1_lpi_1, vWindow_5_2_lpi_1,
      vWindow_5_3_lpi_1, vWindow_5_4_lpi_1, vWindow_5_5_lpi_1, vWindow_5_6_lpi_1,
      vWindow_5_7_lpi_1, vWindow_5_8_lpi_1_mx0, vWindow_6_0_lpi_1, vWindow_6_1_lpi_1,
      vWindow_6_2_lpi_1, vWindow_6_3_lpi_1, vWindow_6_4_lpi_1, vWindow_6_5_lpi_1,
      vWindow_6_6_lpi_1, vWindow_6_7_lpi_1, vWindow_6_8_lpi_1_mx0, vWindow_7_0_lpi_1,
      vWindow_7_1_lpi_1, vWindow_7_2_lpi_1, vWindow_7_3_lpi_1, vWindow_7_4_lpi_1,
      vWindow_7_5_lpi_1, vWindow_7_6_lpi_1, vWindow_7_7_lpi_1, vWindow_7_8_lpi_1_mx0,
      vWindow_8_0_lpi_1, vWindow_8_1_lpi_1, vWindow_8_2_lpi_1, vWindow_8_3_lpi_1,
      vWindow_8_4_lpi_1, vWindow_8_5_lpi_1, vWindow_8_6_lpi_1, vWindow_8_7_lpi_1,
      v_t_lpi_1_dfm_1_mx0, nlm_col_loop_2_if_nlm_col_loop_2_if_acc_16_itm_1);
  assign nlm_col_loop_2_if_mul_11_nl = conv_u2u_20_20(z_out_21 * z_out_21);
  assign nlm_col_loop_2_if_mul_14_nl = conv_u2u_20_20(z_out_19 * z_out_19);
  assign nlm_col_loop_2_if_mul_2_nl = conv_u2u_20_20(z_out_37 * z_out_37);
  assign nlm_col_loop_2_if_mul_23_nl = conv_u2u_20_20(z_out_33 * z_out_33);
  assign nlm_col_loop_2_if_mul_26_nl = conv_u2u_20_20(z_out_15 * z_out_15);
  assign nlm_col_loop_2_if_mul_5_nl = conv_u2u_20_20(z_out_31 * z_out_31);
  assign nlm_col_loop_2_if_mul_8_nl = conv_u2u_20_20(z_out_25 * z_out_25);
  assign nlm_col_loop_2_if_mul_17_nl = conv_u2u_20_20(z_out_13 * z_out_13);
  assign nlm_col_loop_2_if_mul_20_nl = conv_u2u_20_20(z_out_23 * z_out_23);
  assign nl_nlm_col_loop_2_if_acc_nl = conv_u2u_20_24(nlm_col_loop_2_if_mul_11_nl)
      + conv_u2u_20_24(nlm_col_loop_2_if_mul_14_nl) + conv_u2u_20_24(nlm_col_loop_2_if_mul_2_nl)
      + conv_u2u_20_24(nlm_col_loop_2_if_mul_23_nl) + conv_u2u_20_24(nlm_col_loop_2_if_mul_26_nl)
      + conv_u2u_20_24(nlm_col_loop_2_if_mul_5_nl) + conv_u2u_20_24(nlm_col_loop_2_if_mul_8_nl)
      + conv_u2u_20_24(nlm_col_loop_2_if_mul_17_nl) + conv_u2u_20_24(nlm_col_loop_2_if_mul_20_nl);
  assign nlm_col_loop_2_if_acc_nl = nl_nlm_col_loop_2_if_acc_nl[23:0];
  assign nlm_col_loop_2_if_acc_itm_23_3_1 = readslicef_24_21_3(nlm_col_loop_2_if_acc_nl);
  assign nl_nlm_col_loop_2_if_else_acc_nl = nlm_col_loop_2_if_acc_itm_23_3_1 + conv_s2u_16_21({1'b1
      , (~ yuvdns_reg_uvsigma2) , 1'b1}) + 21'b000000000000000000001;
  assign nlm_col_loop_2_if_else_acc_nl = nl_nlm_col_loop_2_if_else_acc_nl[20:0];
  assign nl_nlm_col_loop_2_if_acc_26_nl = conv_u2s_21_22(nlm_col_loop_2_if_acc_itm_23_3_1)
      + conv_s2s_16_22({1'b1 , (~ yuvdns_reg_uvsigma2) , 1'b1}) + 22'b0000000000000000000001;
  assign nlm_col_loop_2_if_acc_26_nl = nl_nlm_col_loop_2_if_acc_26_nl[21:0];
  assign nlm_col_loop_2_if_if_not_nl = ~ (readslicef_22_1_21(nlm_col_loop_2_if_acc_26_nl));
  assign yuvdns_nlm_2_diff_lpi_1_dfm_1 = MUX_v_21_2_2(21'b000000000000000000000,
      nlm_col_loop_2_if_else_acc_nl, nlm_col_loop_2_if_if_not_nl);
  assign yuvdns_reg_eb_not_3_nl = ~ sfi_yuvdns_reg_eb_lpi_1_dfm_1;
  assign lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_1_0_1 = MUX_v_2_2_2(2'b00, lfst_exitL_exit_nlm_row_loop_lpi_1_1_0,
      yuvdns_reg_eb_not_3_nl);
  assign sfi_exit_yuvdns_col_lpi_1_dfm_1 = sfi_exit_yuvdns_col_lpi_1 | (~ lfst_exitL_exitL_exitL_exit_nlm_row_loop_lpi_1_dfm_1);
  assign nl_addon_loop_2_for_acc_14_nl = ({1'b1 , addon_loop_2_for_j_lpi_1}) + conv_u2u_13_14(~
      top_reg_frameWidth) + 14'b00000000000001;
  assign addon_loop_2_for_acc_14_nl = nl_addon_loop_2_for_acc_14_nl[13:0];
  assign addon_loop_2_for_acc_14_itm_13_1 = readslicef_14_1_13(addon_loop_2_for_acc_14_nl);
  assign lfst_exit_addon_loop_2_lpi_1_dfm_1_1 = lfst_exit_addon_loop_2_lpi_1_dfm_4_1
      & (~ exitL_exit_addon_loop_2_sva);
  assign lfst_exit_addon_loop_2_lpi_1_dfm_0_1 = lfst_exit_addon_loop_2_lpi_1_dfm_4_0
      & (~ exitL_exit_addon_loop_2_sva);
  assign addon_loop_2_not_554_nl = ~ exitL_exit_addon_loop_2_sva;
  assign yuvdns_row_row_lpi_1_dfm_1 = MUX_v_13_2_2(13'b0000000000000, yuvdns_row_row_lpi_1,
      addon_loop_2_not_554_nl);
  assign nlm_row_loop_yuvdns_nor_nl = ~(exit_nlm_row_loop_lpi_1_dfm_3 | (~ yuvdns_asn_sft_lpi_1));
  assign nlm_row_loop_mux_26_nl = MUX_s_1_2_2(lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_2_1,
      nlm_row_loop_yuvdns_nor_nl, nlm_row_loop_equal_tmp_3);
  assign lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_5_2_1 = nlm_row_loop_mux_26_nl |
      nlm_row_loop_and_253_ssc_1;
  assign nlm_row_loop_and_263_nl = (~ exit_out_window_loop_lpi_1_dfm_3) & nlm_row_loop_or_tmp_1;
  assign nlm_row_loop_and_264_nl = exit_out_window_loop_lpi_1_dfm_3 & nlm_row_loop_or_tmp_1;
  assign nlm_row_loop_or_548_nl = ((~ (window_read_acc_tmp[3])) & nlm_row_loop_equal_tmp_4)
      | (operator_4_false_3_acc_itm_3_1 & nlm_row_loop_equal_tmp_5) | nlm_row_loop_nor_tmp_1;
  assign nlm_row_loop_mux1h_527_nl = MUX1HOT_v_2_3_2(2'b01, 2'b10, lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_1_0_1,
      {nlm_row_loop_and_263_nl , nlm_row_loop_and_264_nl , nlm_row_loop_or_548_nl});
  assign nlm_row_loop_nor_7_nl = ~(nlm_row_loop_and_253_ssc_1 | nlm_row_loop_equal_tmp_3);
  assign nlm_row_loop_and_nl = MUX_v_2_2_2(2'b00, nlm_row_loop_mux1h_527_nl, nlm_row_loop_nor_7_nl);
  assign nlm_row_loop_and_262_nl = (window_read_acc_tmp[3]) & nlm_row_loop_equal_tmp_4;
  assign lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_5_1_0_1 = MUX_v_2_2_2(nlm_row_loop_and_nl,
      2'b11, nlm_row_loop_and_262_nl);
  assign exit_out_window_loop_lpi_1_dfm_3 = (~ (z_out_7[3])) & (in_window_loop_acc_9_tmp[3]);
  assign nl_out_window_loop_i_sva_2 = out_window_loop_i_lpi_1_dfm_1 + 4'b0001;
  assign out_window_loop_i_sva_2 = nl_out_window_loop_i_sva_2[3:0];
  assign yuvdns_reg_eb_not_5_nl = ~ sfi_yuvdns_reg_eb_lpi_1_dfm_1;
  assign out_window_loop_i_lpi_1_dfm_1 = MUX_v_4_2_2(4'b0000, out_window_loop_i_lpi_1,
      yuvdns_reg_eb_not_5_nl);
  assign nl_in_window_loop_acc_9_tmp = conv_u2u_3_4(in_window_loop_j_lpi_1_dfm_2_0_1)
      + 4'b0001;
  assign in_window_loop_acc_9_tmp = nl_in_window_loop_acc_9_tmp[3:0];
  assign out_window_loop_out_window_loop_out_window_loop_or_nl = lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_2_1
      | (lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_1_0_1!=2'b00);
  assign in_window_loop_j_lpi_1_dfm_2_0_1 = MUX_v_3_2_2(3'b000, in_window_loop_j_lpi_1_2_0,
      out_window_loop_out_window_loop_out_window_loop_or_nl);
  assign lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_2_1 = lfst_exitL_exit_nlm_row_loop_lpi_1_2
      & (~ sfi_yuvdns_reg_eb_lpi_1_dfm_1);
  assign nlm_row_loop_equal_tmp_3 = lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_2_1 &
      (lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_1_0_1==2'b00);
  assign nlm_row_loop_or_tmp_1 = nlm_row_loop_nlm_row_loop_and_cse_1 | nlm_row_loop_nlm_row_loop_nor_1_cse_1;
  assign nlm_row_loop_and_253_ssc_1 = (~ operator_4_false_3_acc_itm_3_1) & nlm_row_loop_equal_tmp_5;
  assign nl_window_read_acc_tmp = conv_u2u_3_4(window_read_i_2_0_lpi_1) + 4'b0001;
  assign window_read_acc_tmp = nl_window_read_acc_tmp[3:0];
  assign nlm_row_loop_equal_tmp_4 = (lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_1_0_1[1])
      & (~(lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_2_1 | (lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_1_0_1[0])));
  assign nlm_row_loop_equal_tmp_5 = (lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_1_0_1==2'b11)
      & (~ lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_2_1);
  assign nlm_row_loop_nor_tmp_1 = ~(nlm_row_loop_nlm_row_loop_and_cse_1 | nlm_row_loop_nlm_row_loop_nor_1_cse_1
      | nlm_row_loop_equal_tmp_4 | nlm_row_loop_equal_tmp_5 | nlm_row_loop_equal_tmp_3);
  assign nlm_row_loop_nlm_row_loop_and_cse_1 = (lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_1_0_1[0])
      & (~(lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_2_1 | (lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_1_0_1[1])));
  assign nlm_row_loop_nlm_row_loop_nor_1_cse_1 = ~(lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_2_1
      | (lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_1_0_1!=2'b00));
  assign sfi_yuvdns_reg_eb_lpi_1_dfm_1 = sfi_yuvdns_reg_eb_lpi_1 | (~ lfst_exitL_exitL_exit_nlm_row_loop_lpi_1_dfm_1);
  assign lfst_exitL_exitL_exit_nlm_row_loop_lpi_1_dfm_1 = lfst_exitL_exitL_exit_nlm_row_loop_lpi_1
      & (~ sfi_exit_yuvdns_col_lpi_1_dfm_1);
  assign and_264_nl = and_dcpl_213 & and_dcpl_80 & lfst_exit_addon_loop_2_lpi_1_dfm_4_0
      & lfst_exitL_exitL_exitL_exit_nlm_row_loop_lpi_1 & (~ sfi_exit_yuvdns_col_lpi_1)
      & lfst_exitL_exitL_exit_nlm_row_loop_lpi_1;
  assign yuvdns_col_asn_sft_lpi_1_dfm_mx0 = MUX_s_1_2_2(yuvdns_reg_eb, yuvdns_col_asn_sft_lpi_1,
      and_264_nl);
  assign exitL_exitL_exit_nlm_row_loop_lpi_1_dfm_1 = ~((lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_5_2_1
      | (lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_5_1_0_1!=2'b00)) & yuvdns_col_asn_sft_lpi_1_dfm_mx0);
  assign lfst_exitL_exitL_exitL_exit_nlm_row_loop_lpi_1_dfm_1 = lfst_exitL_exitL_exitL_exit_nlm_row_loop_lpi_1
      & (~ exitL_exitL_exitL_exitL_exit_nlm_row_loop_lpi_1_dfm_1);
  assign nl_yuvdns_col_acc_2_nl = ({1'b1 , yuvdns_col_col_lpi_1_dfm_1}) + conv_u2u_13_14(~
      top_reg_frameWidth) + 14'b00000000000001;
  assign yuvdns_col_acc_2_nl = nl_yuvdns_col_acc_2_nl[13:0];
  assign yuvdns_col_acc_2_itm_13_1 = readslicef_14_1_13(yuvdns_col_acc_2_nl);
  assign exit_yuvdns_col_lpi_1_dfm_1 = (~ yuvdns_col_acc_2_itm_13_1) & exitL_exitL_exitL_exitL_exit_nlm_row_loop_lpi_1_dfm_1;
  assign or_446_nl = or_dcpl_66 | (~ lfst_exitL_exit_yuvdns_col_lpi_1) | exitL_exitL_exitL_exitL_exit_nlm_row_loop_lpi_1
      | (~ lfst_exit_yuvdns_col_lpi_1) | (~ lfst_exit_addon_loop_2_lpi_1_dfm_4_0)
      | (~ lfst_exitL_exitL_exitL_exit_nlm_row_loop_lpi_1);
  assign yuvdns_col_asn_sft_1_lpi_1_dfm_mx0 = MUX_s_1_2_2(yuvdns_col_asn_sft_1_lpi_1,
      exit_yuvdns_col_lpi_1_dfm_1, or_446_nl);
  assign exitL_exitL_exitL_exitL_exit_nlm_row_loop_lpi_1_dfm_1 = exitL_exitL_exitL_exitL_exit_nlm_row_loop_lpi_1
      | (~(lfst_exit_yuvdns_col_lpi_1 & lfst_exitL_exit_yuvdns_col_lpi_1_dfm_1));
  assign lfst_exitL_exit_yuvdns_col_lpi_1_dfm_1 = lfst_exitL_exit_yuvdns_col_lpi_1
      & (~ exitL_exitL_exit_yuvdns_col_lpi_1_dfm_1);
  assign nl_yuvdns_row_acc_2_nl = ({1'b1 , yuvdns_row_row_lpi_1_dfm_1}) + conv_u2u_13_14(~
      top_reg_frameHeight) + 14'b00000000000001;
  assign yuvdns_row_acc_2_nl = nl_yuvdns_row_acc_2_nl[13:0];
  assign yuvdns_row_acc_2_itm_13_1 = readslicef_14_1_13(yuvdns_row_acc_2_nl);
  assign nl_lines_read_i_2_0_sva_2 = lines_read_i_2_0_lpi_1 + 3'b001;
  assign lines_read_i_2_0_sva_2 = nl_lines_read_i_2_0_sva_2[2:0];
  assign yuvdns_col_and_268_rgt = nlm_row_loop_equal_tmp_5 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
      & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & (~ addon_loop_2_or_578_tmp_1);
  assign nand_127_nl = ~((nlm_col_loop_acc_tmp[3]) & (nlm_col_loop_1_acc_tmp[3])
      & (nlm_col_loop_2_acc_tmp[3]));
  assign nlm_row_loop_mux_nl = MUX_s_1_2_2(exit_nlm_row_loop_sva_2_mx0w0, exit_nlm_row_loop_sva_2,
      nand_127_nl);
  assign exit_nlm_row_loop_lpi_1_dfm_3 = nlm_row_loop_mux_nl & nlm_col_loop_and_1_svs_1;
  assign exit_nlm_row_loop_sva_2_mx0w0 = (nlm_row_loop_acc_tmp[3]) & (nlm_row_loop_1_acc_tmp[3])
      & (nlm_row_loop_2_acc_tmp[3]);
  assign or_466_nl = or_dcpl_201 | yuvdns_row_asn_sft_lpi_1 | exitL_exitL_exitL_exitL_exit_nlm_row_loop_lpi_1
      | (~ lfst_exit_yuvdns_col_lpi_1) | (~ lfst_exit_addon_loop_2_lpi_1_dfm_4_0)
      | (~ lfst_exitL_exitL_exitL_exit_nlm_row_loop_lpi_1) | yuvdns_col_asn_sft_1_lpi_1
      | sfi_exit_yuvdns_col_lpi_1 | (~ lfst_exitL_exitL_exit_nlm_row_loop_lpi_1)
      | (~ yuvdns_col_asn_sft_lpi_1) | sfi_yuvdns_reg_eb_lpi_1 | (lfst_exitL_exit_nlm_row_loop_lpi_1_1_0!=2'b00)
      | (~ yuvdns_asn_sft_lpi_1) | (~ lfst_exitL_exit_nlm_row_loop_lpi_1_2) | lfst_exit_addon_loop_2_lpi_1_dfm_4_1
      | (~ (nlm_col_loop_acc_tmp[3])) | (~ (nlm_col_loop_1_acc_tmp[3])) | (~ (nlm_col_loop_2_acc_tmp[3]));
  assign exit_nlm_row_loop_sva_2_mx1 = MUX_s_1_2_2(exit_nlm_row_loop_sva_2_mx0w0,
      exit_nlm_row_loop_sva_2, or_466_nl);
  assign nl_nlm_row_loop_acc_tmp = conv_u2u_3_4(nlm_row_loop_j_lpi_1_dfm_2_0_mx0)
      + 4'b0001;
  assign nlm_row_loop_acc_tmp = nl_nlm_row_loop_acc_tmp[3:0];
  assign nl_nlm_row_loop_1_acc_tmp = conv_u2u_3_4(nlm_row_loop_1_j_lpi_1_dfm_2_0_mx0)
      + 4'b0001;
  assign nlm_row_loop_1_acc_tmp = nl_nlm_row_loop_1_acc_tmp[3:0];
  assign nl_nlm_row_loop_2_acc_tmp = conv_u2u_3_4(nlm_row_loop_2_j_lpi_1_dfm_2_0_mx0)
      + 4'b0001;
  assign nlm_row_loop_2_acc_tmp = nl_nlm_row_loop_2_acc_tmp[3:0];
  assign nlm_row_loop_2_j_lpi_1_dfm_2_0_mx0 = MUX_v_3_2_2(nlm_row_loop_2_j_lpi_1_2_0,
      3'b001, sfi_yuvdns_land_lpi_1);
  assign nlm_row_loop_1_j_lpi_1_dfm_2_0_mx0 = MUX_v_3_2_2(nlm_row_loop_1_j_lpi_1_2_0,
      3'b001, sfi_yuvdns_land_lpi_1);
  assign nlm_row_loop_j_lpi_1_dfm_2_0_mx0 = MUX_v_3_2_2(nlm_row_loop_j_lpi_1_2_0,
      3'b001, sfi_yuvdns_land_lpi_1);
  assign nlm_col_loop_and_1_svs_1 = (nlm_col_loop_acc_tmp[3]) & (nlm_col_loop_1_acc_tmp[3])
      & (nlm_col_loop_2_acc_tmp[3]);
  assign nl_nlm_col_loop_acc_tmp = conv_u2u_3_4(nlm_col_loop_i_lpi_1_dfm_2_0_mx0)
      + 4'b0001;
  assign nlm_col_loop_acc_tmp = nl_nlm_col_loop_acc_tmp[3:0];
  assign nl_nlm_col_loop_1_acc_tmp = conv_u2u_3_4(nlm_col_loop_1_i_lpi_1_dfm_2_0_mx0)
      + 4'b0001;
  assign nlm_col_loop_1_acc_tmp = nl_nlm_col_loop_1_acc_tmp[3:0];
  assign nl_nlm_col_loop_2_acc_tmp = conv_u2u_3_4(nlm_col_loop_2_i_lpi_1_dfm_2_0_mx0)
      + 4'b0001;
  assign nlm_col_loop_2_acc_tmp = nl_nlm_col_loop_2_acc_tmp[3:0];
  assign nlm_col_loop_2_i_lpi_1_dfm_2_0_mx0 = MUX_v_3_2_2(nlm_col_loop_2_i_lpi_1_2_0,
      3'b001, or_487_cse);
  assign nlm_col_loop_1_i_lpi_1_dfm_2_0_mx0 = MUX_v_3_2_2(nlm_col_loop_1_i_lpi_1_2_0,
      3'b001, or_487_cse);
  assign nlm_col_loop_i_lpi_1_dfm_2_0_mx0 = MUX_v_3_2_2(nlm_col_loop_i_lpi_1_2_0,
      3'b001, or_487_cse);
  assign yuvdns_col_and_323_rgt = nlm_row_loop_or_547_tmp_1 & yuvdns_col_and_312_tmp_1
      & (~ addon_loop_2_or_578_tmp_1);
  assign or_469_nl = or_dcpl_66 | (~(lfst_exitL_exit_yuvdns_col_lpi_1 & lfst_exit_addon_loop_2_lpi_1_dfm_4_0));
  assign yuvdns_row_asn_sft_lpi_1_dfm_mx0 = MUX_s_1_2_2(yuvdns_row_asn_sft_lpi_1,
      exit_yuvdns_row_lpi_1_dfm_1, or_469_nl);
  assign exit_yuvdns_row_lpi_1_dfm_1 = (~ yuvdns_row_acc_2_itm_13_1) & exitL_exitL_exit_yuvdns_col_lpi_1_dfm_1;
  assign exitL_exitL_exit_yuvdns_col_lpi_1_dfm_1 = exitL_exitL_exit_yuvdns_col_lpi_1
      | addon_loop_2_addon_loop_2_nor_1_cse_1;
  assign addon_loop_2_addon_loop_2_nor_1_cse_1 = ~(lfst_exit_addon_loop_2_lpi_1_dfm_1_1
      | lfst_exit_addon_loop_2_lpi_1_dfm_0_1);
  assign lfst_exit_addon_loop_2_lpi_1_dfm_4_1_1 = (addon_loop_2_addon_loop_2_for_nand_psp_mx0
      & (~ addon_loop_2_and_460_ssc_1)) | addon_loop_2_and_461_ssc_1 | addon_loop_2_equal_tmp_2_1;
  assign addon_loop_2_mux_250_nl = MUX_s_1_2_2((addon_loop_1_acc_6_tmp[2]), addon_loop_2_addon_loop_2_for_nand_psp_mx0w0,
      addon_loop_2_equal_tmp_3);
  assign lfst_exit_addon_loop_2_lpi_1_dfm_4_0_1 = (addon_loop_2_mux_250_nl & (~ addon_loop_2_and_461_ssc_1))
      | addon_loop_2_and_460_ssc_1;
  assign asn_yuvdns_nlm_2_totalvalue_1_lpi_1_nand_cse = ~(main_stage_0_3 & reg_addon_loop_2_and_740_itm_2_cse);
  assign yuvdns_nlm_2_totalvalue_1_lpi_1_mx0 = MUX_v_25_2_2(yuvdns_nlm_2_totalvalue_1_lpi_1_dfm_1_mx0,
      yuvdns_nlm_2_totalvalue_1_lpi_1, asn_yuvdns_nlm_2_totalvalue_1_lpi_1_nand_cse);
  assign yuvdns_nlm_2_totalweight_1_lpi_1_mx0 = MUX_v_14_2_2(yuvdns_nlm_2_totalweight_1_lpi_1_dfm_1_mx0,
      yuvdns_nlm_2_totalweight_1_lpi_1, asn_yuvdns_nlm_2_totalvalue_1_lpi_1_nand_cse);
  assign yuvdns_nlm_1_totalvalue_1_lpi_1_mx0 = MUX_v_25_2_2(yuvdns_nlm_1_totalvalue_1_lpi_1_dfm_1_mx0,
      yuvdns_nlm_1_totalvalue_1_lpi_1, asn_yuvdns_nlm_2_totalvalue_1_lpi_1_nand_cse);
  assign yuvdns_nlm_1_totalweight_1_lpi_1_mx0 = MUX_v_14_2_2(yuvdns_nlm_1_totalweight_1_lpi_1_dfm_1_mx0,
      yuvdns_nlm_1_totalweight_1_lpi_1, asn_yuvdns_nlm_2_totalvalue_1_lpi_1_nand_cse);
  assign yuvdns_nlm_totalvalue_1_lpi_1_mx0 = MUX_v_25_2_2(yuvdns_nlm_totalvalue_1_lpi_1_dfm_1_mx0,
      yuvdns_nlm_totalvalue_1_lpi_1, asn_yuvdns_nlm_2_totalvalue_1_lpi_1_nand_cse);
  assign yuvdns_nlm_totalweight_1_lpi_1_mx0 = MUX_v_14_2_2(yuvdns_nlm_totalweight_1_lpi_1_dfm_1_mx0,
      yuvdns_nlm_totalweight_1_lpi_1, asn_yuvdns_nlm_2_totalvalue_1_lpi_1_nand_cse);
  assign yuvdns_nlm_2_maxweight_lpi_1_mx0 = MUX_v_8_2_2(yuvdns_nlm_2_maxweight_lpi_1_dfm_2_mx0,
      yuvdns_nlm_2_maxweight_lpi_1, asn_yuvdns_nlm_2_totalvalue_1_lpi_1_nand_cse);
  assign yuvdns_nlm_1_maxweight_lpi_1_mx0 = MUX_v_8_2_2(yuvdns_nlm_1_maxweight_lpi_1_dfm_2_mx0,
      yuvdns_nlm_1_maxweight_lpi_1, asn_yuvdns_nlm_2_totalvalue_1_lpi_1_nand_cse);
  assign yuvdns_nlm_maxweight_lpi_1_mx0 = MUX_v_8_2_2(yuvdns_nlm_maxweight_lpi_1_dfm_2_mx0,
      yuvdns_nlm_maxweight_lpi_1, asn_yuvdns_nlm_2_totalvalue_1_lpi_1_nand_cse);
  assign in_window_loop_and_stg_5_8_sva_mx0w0 = in_window_loop_and_stg_4_8_sva_mx0w0
      & (~ (in_window_loop_acc_tmp[2]));
  assign nl_operator_32_false_acc_psp_sva_1 = conv_u2s_28_29(z_out_41_14) + 29'b11111111111111111111111111011;
  assign operator_32_false_acc_psp_sva_1 = nl_operator_32_false_acc_psp_sva_1[28:0];
  assign nl_operator_32_false_1_acc_psp_sva_1 = conv_u2s_28_29(z_out_1_41_14) + 29'b11111111111111111111111111011;
  assign operator_32_false_1_acc_psp_sva_1 = nl_operator_32_false_1_acc_psp_sva_1[28:0];
  assign nl_operator_32_false_2_acc_psp_sva_1 = conv_u2s_28_29(z_out_2_41_14) + 29'b11111111111111111111111111011;
  assign operator_32_false_2_acc_psp_sva_1 = nl_operator_32_false_2_acc_psp_sva_1[28:0];
  assign addon_loop_2_equal_tmp_2_1 = lfst_exit_addon_loop_2_lpi_1_dfm_1_1 & (~ lfst_exit_addon_loop_2_lpi_1_dfm_0_1);
  assign addon_loop_2_equal_tmp_3 = lfst_exit_addon_loop_2_lpi_1_dfm_1_1 & lfst_exit_addon_loop_2_lpi_1_dfm_0_1;
  assign yuvdns_row_or_tmp_1 = yuvdns_col_asn_sft_1_lpi_1_dfm_mx0 | yuvdns_row_asn_sft_lpi_1_dfm_mx0;
  assign nlm_row_loop_or_245_tmp_1 = nlm_row_loop_equal_tmp_4 | nlm_row_loop_equal_tmp_5
      | nlm_row_loop_equal_tmp_3 | nlm_row_loop_nor_tmp_1;
  assign addon_loop_2_or_tmp_1 = (lfst_exit_addon_loop_2_lpi_1_dfm_0_1 & (~ lfst_exit_addon_loop_2_lpi_1_dfm_1_1))
      | addon_loop_2_addon_loop_2_nor_1_cse_1;
  assign yuvdns_col_and_245_tmp_1 = nlm_row_loop_equal_tmp_3 & yuvdns_col_asn_sft_lpi_1_dfm_mx0;
  assign exitL_exitL_exitL_exit_nlm_row_loop_lpi_1_dfm_1 = exitL_exitL_exit_nlm_row_loop_lpi_1_dfm_1
      | yuvdns_col_asn_sft_1_lpi_1_dfm_mx0;
  assign yuvdns_and_3_m1c_1 = nlm_col_loop_and_1_svs_1 & yuvdns_asn_sft_lpi_1;
  assign yuvdns_and_m1c_1 = (~ nlm_col_loop_and_1_svs_1) & yuvdns_asn_sft_lpi_1;
  assign nlm_row_loop_or_547_tmp_1 = (~ (in_window_loop_acc_9_tmp[3])) | nlm_row_loop_equal_tmp_4
      | nlm_row_loop_equal_tmp_5 | nlm_row_loop_equal_tmp_3 | nlm_row_loop_nor_tmp_1;
  assign yuvdns_col_and_312_tmp_1 = yuvdns_col_asn_sft_lpi_1_dfm_mx0 & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0);
  assign exitL_exit_yuvdns_col_lpi_1_dfm_1 = exit_yuvdns_col_lpi_1_dfm_1 | yuvdns_row_asn_sft_lpi_1_dfm_mx0;
  assign addon_loop_2_addon_loop_2_nor_242_cse_1 = ~(yuvdns_row_asn_sft_lpi_1_dfm_mx0
      | addon_loop_2_equal_tmp_2_1 | addon_loop_2_equal_tmp_3);
  assign addon_loop_2_or_578_tmp_1 = yuvdns_row_asn_sft_lpi_1_dfm_mx0 | addon_loop_2_equal_tmp_2_1
      | addon_loop_2_equal_tmp_3;
  assign yuvdns_col_and_266_cse_1 = nlm_row_loop_equal_tmp_4 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
      & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & (~ addon_loop_2_or_578_tmp_1);
  assign nl_addon_loop_1_acc_6_tmp = conv_u2u_2_3(addon_loop_1_i_lpi_1_1_0) + 3'b001;
  assign addon_loop_1_acc_6_tmp = nl_addon_loop_1_acc_6_tmp[2:0];
  assign lines_read_or_tmp_1 = ((lines_read_acc_tmp==3'b001)) | ((lines_read_acc_tmp==3'b010))
      | ((lines_read_acc_tmp==3'b011)) | ((lines_read_acc_tmp==3'b100)) | ((lines_read_acc_tmp==3'b101))
      | ((lines_read_acc_tmp==3'b110)) | lines_read_equal_tmp_8;
  assign lines_read_equal_tmp_8 = (lines_read_acc_tmp==3'b111);
  assign nl_nlm_col_loop_if_acc_33_sdt_3_0_1 = nlm_row_loop_acc_tmp + conv_u2u_3_4(nlm_col_loop_i_lpi_1_dfm_2_0_mx0);
  assign nlm_col_loop_if_acc_33_sdt_3_0_1 = nl_nlm_col_loop_if_acc_33_sdt_3_0_1[3:0];
  assign nl_nlm_col_loop_if_acc_31_sdt_1 = conv_u2u_3_4(nlm_col_loop_i_lpi_1_dfm_2_0_mx0)
      + conv_u2u_3_4(z_out_7[2:0]);
  assign nlm_col_loop_if_acc_31_sdt_1 = nl_nlm_col_loop_if_acc_31_sdt_1[3:0];
  assign nl_nlm_col_loop_1_if_acc_33_sdt_3_0_1 = nlm_row_loop_1_acc_tmp + conv_u2u_3_4(nlm_col_loop_1_i_lpi_1_dfm_2_0_mx0);
  assign nlm_col_loop_1_if_acc_33_sdt_3_0_1 = nl_nlm_col_loop_1_if_acc_33_sdt_3_0_1[3:0];
  assign nl_nlm_col_loop_1_if_acc_32_sdt_1 = conv_u2u_3_4(nlm_row_loop_1_j_lpi_1_dfm_2_0_mx0)
      + conv_u2u_3_4(nlm_col_loop_1_i_lpi_1_dfm_2_0_mx0);
  assign nlm_col_loop_1_if_acc_32_sdt_1 = nl_nlm_col_loop_1_if_acc_32_sdt_1[3:0];
  assign nl_nlm_col_loop_1_if_acc_31_sdt_1 = conv_u2u_3_4(nlm_col_loop_1_i_lpi_1_dfm_2_0_mx0)
      + conv_u2u_3_4(operator_4_false_6_acc_psp_1_sva_1);
  assign nlm_col_loop_1_if_acc_31_sdt_1 = nl_nlm_col_loop_1_if_acc_31_sdt_1[3:0];
  assign nl_operator_4_false_6_acc_psp_1_sva_1 = nlm_row_loop_1_j_lpi_1_dfm_2_0_mx0
      + 3'b111;
  assign operator_4_false_6_acc_psp_1_sva_1 = nl_operator_4_false_6_acc_psp_1_sva_1[2:0];
  assign nl_nlm_col_loop_2_if_acc_33_sdt_3_0_1 = nlm_row_loop_2_acc_tmp + conv_u2u_3_4(nlm_col_loop_2_i_lpi_1_dfm_2_0_mx0);
  assign nlm_col_loop_2_if_acc_33_sdt_3_0_1 = nl_nlm_col_loop_2_if_acc_33_sdt_3_0_1[3:0];
  assign nl_nlm_col_loop_2_if_acc_32_sdt_1 = conv_u2u_3_4(nlm_row_loop_2_j_lpi_1_dfm_2_0_mx0)
      + conv_u2u_3_4(nlm_col_loop_2_i_lpi_1_dfm_2_0_mx0);
  assign nlm_col_loop_2_if_acc_32_sdt_1 = nl_nlm_col_loop_2_if_acc_32_sdt_1[3:0];
  assign nl_nlm_col_loop_2_if_acc_31_sdt_1 = conv_u2u_3_4(nlm_col_loop_2_i_lpi_1_dfm_2_0_mx0)
      + conv_u2u_3_4(operator_4_false_12_acc_psp_1_sva_1);
  assign nlm_col_loop_2_if_acc_31_sdt_1 = nl_nlm_col_loop_2_if_acc_31_sdt_1[3:0];
  assign nl_operator_4_false_12_acc_psp_1_sva_1 = nlm_row_loop_2_j_lpi_1_dfm_2_0_mx0
      + 3'b111;
  assign operator_4_false_12_acc_psp_1_sva_1 = nl_operator_4_false_12_acc_psp_1_sva_1[2:0];
  assign addon_loop_2_addon_loop_2_for_nand_psp_mx0w0 = ~((addon_loop_1_acc_6_tmp[2])
      & (~ addon_loop_2_for_acc_14_itm_13_1));
  assign or_483_nl = exitL_exit_addon_loop_2_sva | (~ lfst_exit_addon_loop_2_lpi_1_dfm_4_0)
      | (~ lfst_exit_addon_loop_2_lpi_1_dfm_4_1);
  assign addon_loop_2_addon_loop_2_for_nand_psp_mx0 = MUX_s_1_2_2(addon_loop_2_addon_loop_2_for_nand_psp_mx0w0,
      addon_loop_2_addon_loop_2_for_nand_psp, or_483_nl);
  assign addon_loop_2_and_460_ssc_1 = (~ exit_yuvdns_row_lpi_1_dfm_1) & addon_loop_2_or_tmp_1;
  assign addon_loop_2_and_461_ssc_1 = exit_yuvdns_row_lpi_1_dfm_1 & addon_loop_2_or_tmp_1;
  assign in_window_loop_and_90_nl = in_window_loop_and_stg_3_0_sva_1 & (in_window_loop_acc_tmp[1]);
  assign in_window_loop_and_stg_4_16_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_4_16_sva,
      in_window_loop_and_90_nl, mux_164_itm);
  assign nl_in_window_loop_acc_tmp = conv_u2u_2_4(operator_4_false_acc_1_tmp[4:3])
      + out_window_loop_i_lpi_1_dfm_1;
  assign in_window_loop_acc_tmp = nl_in_window_loop_acc_tmp[3:0];
  assign in_window_loop_acc_psp_mx0_3_1 = MUX_v_3_2_2(reg_in_window_loop_acc_psp_ftd,
      (in_window_loop_acc_tmp[3:1]), mux_164_itm);
  assign in_window_loop_and_86_nl = in_window_loop_and_stg_3_2_sva_1 & (in_window_loop_acc_tmp[1]);
  assign in_window_loop_and_stg_4_18_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_4_18_sva,
      in_window_loop_and_86_nl, mux_164_itm);
  assign in_window_loop_and_84_nl = in_window_loop_and_stg_3_3_sva_1 & (in_window_loop_acc_tmp[1]);
  assign in_window_loop_and_stg_4_19_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_4_19_sva,
      in_window_loop_and_84_nl, mux_164_itm);
  assign in_window_loop_and_82_nl = in_window_loop_and_stg_3_4_sva_1 & (in_window_loop_acc_tmp[1]);
  assign in_window_loop_and_stg_4_20_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_4_20_sva,
      in_window_loop_and_82_nl, mux_164_itm);
  assign in_window_loop_and_78_nl = in_window_loop_and_stg_3_6_sva_1 & (in_window_loop_acc_tmp[1]);
  assign in_window_loop_and_stg_4_22_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_4_22_sva,
      in_window_loop_and_78_nl, mux_164_itm);
  assign in_window_loop_and_76_nl = in_window_loop_and_stg_3_7_sva_1 & (in_window_loop_acc_tmp[1]);
  assign in_window_loop_and_stg_4_23_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_4_23_sva,
      in_window_loop_and_76_nl, mux_164_itm);
  assign in_window_loop_and_74_nl = in_window_loop_and_stg_3_8_sva_1 & (in_window_loop_acc_tmp[1]);
  assign in_window_loop_and_stg_4_24_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_4_24_sva,
      in_window_loop_and_74_nl, mux_164_itm);
  assign in_window_loop_and_72_nl = in_window_loop_and_stg_3_9_sva_1 & (in_window_loop_acc_tmp[1]);
  assign in_window_loop_and_stg_4_25_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_4_25_sva,
      in_window_loop_and_72_nl, mux_164_itm);
  assign in_window_loop_and_68_nl = in_window_loop_and_stg_3_11_sva_1 & (in_window_loop_acc_tmp[1]);
  assign in_window_loop_and_stg_4_27_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_4_27_sva,
      in_window_loop_and_68_nl, mux_164_itm);
  assign in_window_loop_and_66_nl = in_window_loop_and_stg_3_12_sva_1 & (in_window_loop_acc_tmp[1]);
  assign in_window_loop_and_stg_4_28_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_4_28_sva,
      in_window_loop_and_66_nl, mux_164_itm);
  assign in_window_loop_and_64_nl = in_window_loop_and_stg_3_13_sva_1 & (in_window_loop_acc_tmp[1]);
  assign in_window_loop_and_stg_4_29_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_4_29_sva,
      in_window_loop_and_64_nl, mux_164_itm);
  assign in_window_loop_and_60_nl = in_window_loop_and_stg_3_15_sva_1 & (in_window_loop_acc_tmp[1]);
  assign in_window_loop_and_stg_4_31_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_4_31_sva,
      in_window_loop_and_60_nl, mux_164_itm);
  assign in_window_loop_and_59_nl = in_window_loop_and_stg_4_0_sva_mx0w0 & (~ (in_window_loop_acc_tmp[2]));
  assign in_window_loop_and_stg_5_0_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_5_0_sva,
      in_window_loop_and_59_nl, mux_164_itm);
  assign in_window_loop_and_stg_4_0_sva_mx0w0 = in_window_loop_and_stg_3_0_sva_1
      & (~ (in_window_loop_acc_tmp[1]));
  assign in_window_loop_and_stg_4_0_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_4_0_sva,
      in_window_loop_and_stg_4_0_sva_mx0w0, mux_164_itm);
  assign in_window_loop_and_56_nl = in_window_loop_and_stg_4_1_sva_mx0w0 & (~ (in_window_loop_acc_tmp[2]));
  assign in_window_loop_and_stg_5_1_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_5_1_sva,
      in_window_loop_and_56_nl, mux_164_itm);
  assign in_window_loop_and_stg_4_1_sva_mx0w0 = in_window_loop_and_stg_3_1_sva_mx0w0
      & (~ (in_window_loop_acc_tmp[1]));
  assign in_window_loop_and_stg_4_1_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_4_1_sva,
      in_window_loop_and_stg_4_1_sva_mx0w0, mux_164_itm);
  assign in_window_loop_and_stg_3_1_sva_mx0w0 = in_window_loop_and_stg_2_1_sva_1
      & (~ (in_window_loop_acc_tmp[0]));
  assign in_window_loop_and_stg_3_1_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_3_1_sva,
      in_window_loop_and_stg_3_1_sva_mx0w0, mux_164_itm);
  assign in_window_loop_and_53_nl = in_window_loop_and_stg_4_2_sva_mx0w0 & (~ (in_window_loop_acc_tmp[2]));
  assign in_window_loop_and_stg_5_2_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_5_2_sva,
      in_window_loop_and_53_nl, mux_164_itm);
  assign in_window_loop_and_stg_4_2_sva_mx0w0 = in_window_loop_and_stg_3_2_sva_1
      & (~ (in_window_loop_acc_tmp[1]));
  assign in_window_loop_and_stg_4_2_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_4_2_sva,
      in_window_loop_and_stg_4_2_sva_mx0w0, mux_164_itm);
  assign in_window_loop_and_50_nl = in_window_loop_and_stg_3_3_sva_1 & (in_window_loop_acc_tmp[2:1]==2'b00);
  assign in_window_loop_and_stg_5_3_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_5_3_sva,
      in_window_loop_and_50_nl, mux_164_itm);
  assign in_window_loop_and_47_nl = in_window_loop_and_stg_4_4_sva_mx0w0 & (~ (in_window_loop_acc_tmp[2]));
  assign in_window_loop_and_stg_5_4_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_5_4_sva,
      in_window_loop_and_47_nl, mux_164_itm);
  assign in_window_loop_and_stg_4_4_sva_mx0w0 = in_window_loop_and_stg_3_4_sva_1
      & (~ (in_window_loop_acc_tmp[1]));
  assign in_window_loop_and_stg_4_4_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_4_4_sva,
      in_window_loop_and_stg_4_4_sva_mx0w0, mux_164_itm);
  assign in_window_loop_and_44_nl = in_window_loop_and_stg_4_5_sva_mx0w0 & (~ (in_window_loop_acc_tmp[2]));
  assign in_window_loop_and_stg_5_5_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_5_5_sva,
      in_window_loop_and_44_nl, mux_164_itm);
  assign in_window_loop_and_stg_4_5_sva_mx0w0 = in_window_loop_and_stg_3_5_sva_mx0w0
      & (~ (in_window_loop_acc_tmp[1]));
  assign in_window_loop_and_stg_4_5_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_4_5_sva,
      in_window_loop_and_stg_4_5_sva_mx0w0, mux_164_itm);
  assign in_window_loop_and_stg_3_5_sva_mx0w0 = in_window_loop_and_stg_2_5_sva_1
      & (~ (in_window_loop_acc_tmp[0]));
  assign in_window_loop_and_stg_3_5_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_3_5_sva,
      in_window_loop_and_stg_3_5_sva_mx0w0, mux_164_itm);
  assign in_window_loop_and_41_nl = in_window_loop_and_stg_4_6_sva_mx0w0 & (~ (in_window_loop_acc_tmp[2]));
  assign in_window_loop_and_stg_5_6_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_5_6_sva,
      in_window_loop_and_41_nl, mux_164_itm);
  assign in_window_loop_and_stg_4_6_sva_mx0w0 = in_window_loop_and_stg_3_6_sva_1
      & (~ (in_window_loop_acc_tmp[1]));
  assign in_window_loop_and_stg_4_6_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_4_6_sva,
      in_window_loop_and_stg_4_6_sva_mx0w0, mux_164_itm);
  assign in_window_loop_and_37_nl = in_window_loop_and_stg_3_7_sva_1 & (~ (in_window_loop_acc_tmp[1]));
  assign in_window_loop_and_stg_4_7_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_4_7_sva,
      in_window_loop_and_37_nl, mux_164_itm);
  assign in_window_loop_and_stg_5_8_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_5_8_sva,
      in_window_loop_and_stg_5_8_sva_mx0w0, mux_164_itm);
  assign in_window_loop_and_stg_4_8_sva_mx0w0 = in_window_loop_and_stg_3_8_sva_1
      & (~ (in_window_loop_acc_tmp[1]));
  assign in_window_loop_and_stg_4_8_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_4_8_sva,
      in_window_loop_and_stg_4_8_sva_mx0w0, mux_164_itm);
  assign in_window_loop_and_31_nl = in_window_loop_and_stg_4_9_sva_mx0w0 & (~ (in_window_loop_acc_tmp[2]));
  assign in_window_loop_and_stg_5_9_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_5_9_sva,
      in_window_loop_and_31_nl, mux_164_itm);
  assign in_window_loop_and_stg_4_9_sva_mx0w0 = in_window_loop_and_stg_3_9_sva_1
      & (~ (in_window_loop_acc_tmp[1]));
  assign in_window_loop_and_stg_4_9_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_4_9_sva,
      in_window_loop_and_stg_4_9_sva_mx0w0, mux_164_itm);
  assign in_window_loop_and_27_nl = in_window_loop_and_stg_4_10_sva_mx0w0 & (~ (in_window_loop_acc_tmp[2]));
  assign in_window_loop_and_stg_5_10_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_5_10_sva,
      in_window_loop_and_27_nl, mux_164_itm);
  assign in_window_loop_and_stg_4_10_sva_mx0w0 = in_window_loop_and_stg_3_10_sva_mx0w0
      & (~ (in_window_loop_acc_tmp[1]));
  assign in_window_loop_and_stg_4_10_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_4_10_sva,
      in_window_loop_and_stg_4_10_sva_mx0w0, mux_164_itm);
  assign in_window_loop_and_stg_3_10_sva_mx0w0 = in_window_loop_and_stg_2_2_sva_1
      & (in_window_loop_acc_tmp[0]);
  assign in_window_loop_and_stg_3_10_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_3_10_sva,
      in_window_loop_and_stg_3_10_sva_mx0w0, mux_164_itm);
  assign in_window_loop_and_23_nl = in_window_loop_and_stg_4_11_sva_mx0w0 & (~ (in_window_loop_acc_tmp[2]));
  assign in_window_loop_and_stg_5_11_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_5_11_sva,
      in_window_loop_and_23_nl, mux_164_itm);
  assign in_window_loop_and_stg_4_11_sva_mx0w0 = in_window_loop_and_stg_3_11_sva_1
      & (~ (in_window_loop_acc_tmp[1]));
  assign in_window_loop_and_stg_4_11_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_4_11_sva,
      in_window_loop_and_stg_4_11_sva_mx0w0, mux_164_itm);
  assign in_window_loop_and_19_nl = in_window_loop_and_stg_3_12_sva_1 & (in_window_loop_acc_tmp[2:1]==2'b00);
  assign in_window_loop_and_stg_5_12_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_5_12_sva,
      in_window_loop_and_19_nl, mux_164_itm);
  assign in_window_loop_and_14_nl = in_window_loop_and_stg_4_13_sva_mx0w0 & (~ (in_window_loop_acc_tmp[2]));
  assign in_window_loop_and_stg_5_13_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_5_13_sva,
      in_window_loop_and_14_nl, mux_164_itm);
  assign in_window_loop_and_stg_4_13_sva_mx0w0 = in_window_loop_and_stg_3_13_sva_1
      & (~ (in_window_loop_acc_tmp[1]));
  assign in_window_loop_and_stg_4_13_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_4_13_sva,
      in_window_loop_and_stg_4_13_sva_mx0w0, mux_164_itm);
  assign in_window_loop_and_9_nl = in_window_loop_and_stg_4_14_sva_mx0w0 & (~ (in_window_loop_acc_tmp[2]));
  assign in_window_loop_and_stg_5_14_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_5_14_sva,
      in_window_loop_and_9_nl, mux_164_itm);
  assign in_window_loop_and_stg_4_14_sva_mx0w0 = in_window_loop_and_stg_3_14_sva_mx0w0
      & (~ (in_window_loop_acc_tmp[1]));
  assign in_window_loop_and_stg_4_14_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_4_14_sva,
      in_window_loop_and_stg_4_14_sva_mx0w0, mux_164_itm);
  assign in_window_loop_and_stg_3_14_sva_mx0w0 = in_window_loop_and_stg_2_6_sva_1
      & (in_window_loop_acc_tmp[0]);
  assign in_window_loop_and_stg_3_14_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_3_14_sva,
      in_window_loop_and_stg_3_14_sva_mx0w0, mux_164_itm);
  assign in_window_loop_and_4_nl = in_window_loop_and_stg_4_15_sva_mx0w0 & (~ (in_window_loop_acc_tmp[2]));
  assign in_window_loop_and_stg_5_15_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_5_15_sva,
      in_window_loop_and_4_nl, mux_164_itm);
  assign in_window_loop_and_stg_4_15_sva_mx0w0 = in_window_loop_and_stg_3_15_sva_1
      & (~ (in_window_loop_acc_tmp[1]));
  assign in_window_loop_and_stg_4_15_sva_mx0 = MUX_s_1_2_2(in_window_loop_and_stg_4_15_sva,
      in_window_loop_and_stg_4_15_sva_mx0w0, mux_164_itm);
  assign nlm_row_loop_nlm_row_loop_nor_3_cse_1 = ~(nlm_row_loop_equal_tmp_4 | nlm_row_loop_equal_tmp_5
      | nlm_row_loop_equal_tmp_3 | nlm_row_loop_nor_tmp_1);
  assign in_window_loop_and_stg_3_0_sva_1 = in_window_loop_and_stg_2_0_sva_1 & (~
      (in_window_loop_acc_tmp[0]));
  assign in_window_loop_and_stg_3_2_sva_1 = in_window_loop_and_stg_2_2_sva_1 & (~
      (in_window_loop_acc_tmp[0]));
  assign in_window_loop_and_stg_3_3_sva_1 = in_window_loop_and_stg_2_3_sva_1 & (~
      (in_window_loop_acc_tmp[0]));
  assign in_window_loop_and_stg_3_4_sva_1 = in_window_loop_and_stg_2_4_sva_1 & (~
      (in_window_loop_acc_tmp[0]));
  assign in_window_loop_and_stg_3_6_sva_1 = in_window_loop_and_stg_2_6_sva_1 & (~
      (in_window_loop_acc_tmp[0]));
  assign in_window_loop_and_stg_3_7_sva_1 = in_window_loop_and_stg_2_7_sva_1 & (~
      (in_window_loop_acc_tmp[0]));
  assign in_window_loop_and_stg_3_8_sva_1 = in_window_loop_and_stg_2_0_sva_1 & (in_window_loop_acc_tmp[0]);
  assign in_window_loop_and_stg_3_9_sva_1 = in_window_loop_and_stg_2_1_sva_1 & (in_window_loop_acc_tmp[0]);
  assign in_window_loop_and_stg_3_11_sva_1 = in_window_loop_and_stg_2_3_sva_1 & (in_window_loop_acc_tmp[0]);
  assign in_window_loop_and_stg_3_12_sva_1 = in_window_loop_and_stg_2_4_sva_1 & (in_window_loop_acc_tmp[0]);
  assign in_window_loop_and_stg_3_13_sva_1 = in_window_loop_and_stg_2_5_sva_1 & (in_window_loop_acc_tmp[0]);
  assign in_window_loop_and_stg_3_15_sva_1 = in_window_loop_and_stg_2_7_sva_1 & (in_window_loop_acc_tmp[0]);
  assign in_window_loop_and_stg_2_0_sva_1 = in_window_loop_and_stg_1_0_sva_1 & (~
      (operator_4_false_acc_1_tmp[2]));
  assign in_window_loop_and_stg_2_1_sva_1 = in_window_loop_and_stg_1_1_sva_1 & (~
      (operator_4_false_acc_1_tmp[2]));
  assign in_window_loop_and_stg_2_2_sva_1 = in_window_loop_and_stg_1_2_sva_1 & (~
      (operator_4_false_acc_1_tmp[2]));
  assign in_window_loop_and_stg_2_3_sva_1 = in_window_loop_and_stg_1_3_sva_1 & (~
      (operator_4_false_acc_1_tmp[2]));
  assign in_window_loop_and_stg_2_4_sva_1 = in_window_loop_and_stg_1_0_sva_1 & (operator_4_false_acc_1_tmp[2]);
  assign in_window_loop_and_stg_2_5_sva_1 = in_window_loop_and_stg_1_1_sva_1 & (operator_4_false_acc_1_tmp[2]);
  assign in_window_loop_and_stg_2_6_sva_1 = in_window_loop_and_stg_1_2_sva_1 & (operator_4_false_acc_1_tmp[2]);
  assign in_window_loop_and_stg_2_7_sva_1 = in_window_loop_and_stg_1_3_sva_1 & (operator_4_false_acc_1_tmp[2]);
  assign in_window_loop_and_stg_1_0_sva_1 = ~((operator_4_false_acc_1_tmp[1:0]!=2'b00));
  assign nl_operator_4_false_acc_1_tmp = conv_u2u_4_5(out_window_loop_i_lpi_1_dfm_1)
      + conv_u2u_3_5(in_window_loop_j_lpi_1_dfm_2_0_1);
  assign operator_4_false_acc_1_tmp = nl_operator_4_false_acc_1_tmp[4:0];
  assign in_window_loop_and_stg_1_1_sva_1 = (operator_4_false_acc_1_tmp[1:0]==2'b01);
  assign in_window_loop_and_stg_1_2_sva_1 = (operator_4_false_acc_1_tmp[1:0]==2'b10);
  assign in_window_loop_and_stg_1_3_sva_1 = (operator_4_false_acc_1_tmp[1:0]==2'b11);
  assign window_read_and_stg_1_0_sva_1 = ~((window_read_i_2_0_lpi_1[1:0]!=2'b00));
  assign window_read_and_stg_1_2_sva_1 = (window_read_i_2_0_lpi_1[1:0]==2'b10);
  assign window_read_and_stg_1_1_sva_1 = (window_read_i_2_0_lpi_1[1:0]==2'b01);
  assign nlm_col_loop_1_if_exs_3_0 = (yuvdns_reg_uvH2!=14'b00000000000000);
  assign window_read_asn_57 = (addon_loop_2_for_acc_8_cse_sva_st_2_2==3'b001);
  assign window_read_asn_59 = (addon_loop_2_for_acc_8_cse_sva_st_2_2==3'b010);
  assign window_read_asn_61 = (addon_loop_2_for_acc_8_cse_sva_st_2_2==3'b100);
  assign addon_loop_2_asn_875 = (~ exit_nlm_row_loop_sva_2_mx1) & yuvdns_and_3_m1c_1
      & yuvdns_col_and_245_tmp_1 & (~ yuvdns_row_or_tmp_1) & (~ lfst_exit_addon_loop_2_lpi_1_dfm_1_1);
  assign addon_loop_2_asn_881 = nlm_col_loop_and_1_svs_1 & yuvdns_asn_sft_lpi_1 &
      yuvdns_col_and_245_tmp_1 & (~ yuvdns_row_or_tmp_1) & (~ lfst_exit_addon_loop_2_lpi_1_dfm_1_1);
  assign yuvdns_col_or_11 = ((~ nlm_row_loop_equal_tmp_2_2) & yuvdns_col_asn_sft_lpi_1_dfm_2)
      | ((~ addon_loop_2_for_addon_loop_2_for_and_18_itm_2) & yuvdns_col_and_281_m1c_2);
  assign nor_tmp = addon_loop_2_for_slc_13_svs_st_1 & lfst_exit_addon_loop_2_lpi_1_dfm_st_1_0;
  assign and_dcpl_73 = (~ sfi_yuvdns_reg_eb_lpi_1) & (lfst_exitL_exit_nlm_row_loop_lpi_1_1_0[1]);
  assign and_dcpl_80 = (~ exitL_exitL_exitL_exitL_exit_nlm_row_loop_lpi_1) & lfst_exit_yuvdns_col_lpi_1;
  assign or_54_cse = (~ lfst_exit_addon_loop_2_lpi_1_dfm_4_1) | exitL_exit_addon_loop_2_sva;
  assign or_53_nl = exitL_exitL_exit_yuvdns_col_lpi_1 | (~ lfst_exit_addon_loop_2_lpi_1_dfm_4_0)
      | exitL_exit_addon_loop_2_sva;
  assign mux_20_nl = MUX_s_1_2_2(or_53_nl, exitL_exit_addon_loop_2_sva, lfst_exit_addon_loop_2_lpi_1_dfm_4_1);
  assign and_tmp_3 = yuvdns_reg_eb & yuvdns_col_acc_2_itm_13_1 & yuvdns_row_acc_2_itm_13_1
      & mux_20_nl;
  assign or_dcpl_66 = exitL_exit_addon_loop_2_sva | exitL_exitL_exit_yuvdns_col_lpi_1;
  assign or_487_cse = (~ lfst_exit_nlm_row_loop_lpi_1) | sfi_yuvdns_land_lpi_1;
  assign or_tmp_81 = (~ lfst_exit_addon_loop_2_lpi_1_dfm_4_0) | exitL_exitL_exit_yuvdns_col_lpi_1;
  assign nand_124_cse = ~((~(yuvdns_col_acc_2_itm_13_1 & yuvdns_row_acc_2_itm_13_1))
      & or_tmp_81);
  assign and_tmp_20 = yuvdns_col_acc_2_itm_13_1 & yuvdns_row_acc_2_itm_13_1 & or_tmp_81;
  assign and_tmp_21 = yuvdns_col_acc_2_itm_13_1 & (yuvdns_row_acc_2_itm_13_1 | (~
      or_tmp_81));
  assign or_tmp_108 = lfst_exit_addon_loop_2_lpi_1_dfm_st_2_1 | (~((~ addon_loop_2_for_addon_loop_2_for_and_20_itm_2)
      | (~ yuvdns_col_if_1_yuvdns_col_if_1_or_itm_2) | reg_yuvdns_col_asn_sft_1_lpi_1_dfm_2_cse
      | reg_yuvdns_row_asn_sft_lpi_1_dfm_st_2_cse));
  assign and_dcpl_171 = main_stage_0_3 & (~ reg_yuvdns_row_asn_sft_lpi_1_dfm_st_2_cse)
      & (~ reg_yuvdns_col_asn_sft_1_lpi_1_dfm_2_cse) & yuvdns_col_if_1_yuvdns_col_if_1_or_itm_2
      & addon_loop_2_for_addon_loop_2_for_and_20_itm_2 & (~ lfst_exit_addon_loop_2_lpi_1_dfm_st_2_1);
  assign and_dcpl_172 = main_stage_0_3 & lfst_exit_addon_loop_2_lpi_1_dfm_st_2_1;
  assign and_dcpl_173 = and_dcpl_172 & (~ lfst_exit_addon_loop_2_lpi_1_dfm_st_2_0);
  assign and_dcpl_175 = and_dcpl_172 & lfst_exit_addon_loop_2_lpi_1_dfm_st_2_0 &
      addon_loop_2_for_slc_13_svs_st_2;
  assign or_dcpl_91 = ~(main_stage_0_3 & addon_loop_2_and_653_itm_2);
  assign or_dcpl_92 = ~(main_stage_0_3 & addon_loop_2_and_714_itm_2);
  assign or_dcpl_94 = reg_yuvdns_col_asn_sft_1_lpi_1_dfm_2_cse | (~ yuvdns_col_asn_sft_lpi_1_dfm_2);
  assign or_dcpl_97 = (~ main_stage_0_3) | addon_loop_2_equal_tmp_2;
  assign or_dcpl_98 = or_dcpl_97 | addon_loop_2_equal_tmp_1_2 | reg_yuvdns_row_asn_sft_lpi_1_dfm_st_2_cse;
  assign or_dcpl_99 = or_dcpl_98 | or_dcpl_94 | (~ nlm_row_loop_equal_tmp_2) | (~
      window_read_and_stg_3_14_sva_2);
  assign or_dcpl_102 = or_dcpl_98 | or_dcpl_94 | (~(nlm_row_loop_equal_tmp_2 & window_read_and_stg_3_5_sva_2));
  assign or_dcpl_105 = or_dcpl_98 | or_dcpl_94 | (~(nlm_row_loop_equal_tmp_2 & window_read_and_stg_3_12_sva_2));
  assign or_dcpl_108 = or_dcpl_98 | or_dcpl_94 | (~(nlm_row_loop_equal_tmp_2 & window_read_and_stg_4_3_sva_2));
  assign or_dcpl_111 = or_dcpl_98 | or_dcpl_94 | (~(nlm_row_loop_equal_tmp_2 & window_read_and_stg_3_10_sva_2));
  assign or_dcpl_114 = or_dcpl_98 | or_dcpl_94 | (~(nlm_row_loop_equal_tmp_2 & window_read_and_stg_3_1_sva_2));
  assign and_dcpl_201 = (yuvdns_reg_uvH2==14'b00000000000000);
  assign and_dcpl_202 = ~((lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_st_1_1_0[1]) |
      lfst_exit_addon_loop_2_lpi_1_dfm_st_1_1);
  assign or_tmp_112 = lfst_exit_addon_loop_2_lpi_1_dfm_st_1_1 | (lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_st_1_1_0!=2'b11)
      | addon_loop_2_for_addon_loop_2_for_and_20_itm_1 | (~ yuvdns_col_asn_sft_lpi_1_dfm_1)
      | yuvdns_col_asn_sft_1_lpi_1_dfm_1 | yuvdns_row_asn_sft_lpi_1_dfm_1;
  assign nor_88_cse = ~((~ (lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_st_1_1_0[1]))
      | addon_loop_2_for_addon_loop_2_for_and_20_itm_1 | (~ yuvdns_col_asn_sft_lpi_1_dfm_1)
      | yuvdns_col_asn_sft_1_lpi_1_dfm_1 | yuvdns_row_asn_sft_lpi_1_dfm_1);
  assign mux_tmp_125 = MUX_s_1_2_2(nor_88_cse, nor_tmp, lfst_exit_addon_loop_2_lpi_1_dfm_st_1_1);
  assign nor_87_nl = ~((lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_st_1_1_0!=2'b10) |
      addon_loop_2_for_addon_loop_2_for_and_20_itm_1 | (~ yuvdns_col_asn_sft_lpi_1_dfm_1)
      | yuvdns_col_asn_sft_1_lpi_1_dfm_1 | yuvdns_row_asn_sft_lpi_1_dfm_1);
  assign mux_tmp_127 = MUX_s_1_2_2(nor_87_nl, nor_tmp, lfst_exit_addon_loop_2_lpi_1_dfm_st_1_1);
  assign or_dcpl_125 = (addon_loop_2_for_acc_8_cse_sva_st_2_1[2]) | (addon_loop_2_for_acc_8_cse_sva_st_2_1[0]);
  assign or_dcpl_126 = (~ main_stage_0_2) | (addon_loop_2_for_acc_8_cse_sva_st_2_1[1]);
  assign or_dcpl_130 = (addon_loop_2_for_acc_8_cse_sva_st_2_1[2]) | (~ (addon_loop_2_for_acc_8_cse_sva_st_2_1[0]));
  assign or_dcpl_136 = (~ main_stage_0_2) | yuvdns_row_asn_sft_lpi_1_dfm_1;
  assign or_dcpl_138 = or_dcpl_136 | yuvdns_col_asn_sft_1_lpi_1_dfm_1 | (~ yuvdns_col_asn_sft_lpi_1_dfm_1)
      | addon_loop_2_for_addon_loop_2_for_and_20_itm_1 | (~ (lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_st_1_1_0[1]))
      | lfst_exit_addon_loop_2_lpi_1_dfm_st_1_1;
  assign or_tmp_122 = (lines_read_acc_cse_sva_st_2_1[2:1]!=2'b01) | (~ (lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_st_1_1_0[0]));
  assign nor_86_nl = ~((~((addon_loop_2_for_acc_8_cse_sva_st_2_1[2:1]!=2'b01))) |
      (lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_st_1_1_0[0]));
  assign or_263_nl = (addon_loop_2_for_acc_8_cse_sva_st_2_1[2:1]!=2'b01) | (lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_st_1_1_0[0]);
  assign or_262_nl = (lines_read_acc_cse_sva_st_2_1[2:1]!=2'b01);
  assign mux_tmp_132 = MUX_s_1_2_2(nor_86_nl, or_263_nl, or_262_nl);
  assign or_dcpl_141 = (lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_st_1_1_0[0]) | lfst_exit_addon_loop_2_lpi_1_dfm_st_1_1
      | (~ (addon_loop_2_for_acc_8_cse_sva_st_2_1[1]));
  assign or_dcpl_143 = (~ yuvdns_col_asn_sft_lpi_1_dfm_1) | addon_loop_2_for_addon_loop_2_for_and_20_itm_1;
  assign or_dcpl_145 = or_dcpl_136 | yuvdns_col_asn_sft_1_lpi_1_dfm_1;
  assign or_dcpl_146 = or_dcpl_145 | or_dcpl_143 | (~ (lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_st_1_1_0[1]));
  assign or_dcpl_152 = (~ (addon_loop_2_for_acc_8_cse_sva_st_2_1[2])) | (addon_loop_2_for_acc_8_cse_sva_st_2_1[0]);
  assign or_dcpl_156 = ~((addon_loop_2_for_acc_8_cse_sva_st_2_1[2]) & (addon_loop_2_for_acc_8_cse_sva_st_2_1[0]));
  assign not_tmp_179 = ~((addon_loop_2_for_acc_8_cse_sva_st_2_1[2:1]==2'b11));
  assign or_dcpl_160 = ~(main_stage_0_2 & (addon_loop_2_for_acc_8_cse_sva_st_2_1[1]));
  assign or_dcpl_166 = (lines_read_acc_cse_sva_st_2_1[1:0]!=2'b01);
  assign or_dcpl_167 = (~ (lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_st_1_1_0[0])) |
      lfst_exit_addon_loop_2_lpi_1_dfm_st_1_1;
  assign or_dcpl_168 = or_dcpl_167 | (lines_read_acc_cse_sva_st_2_1[2]);
  assign or_dcpl_171 = (lines_read_acc_cse_sva_st_2_1[1:0]!=2'b10);
  assign or_dcpl_178 = or_dcpl_167 | (~ (lines_read_acc_cse_sva_st_2_1[2]));
  assign or_dcpl_186 = ~((lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_st_1_1_0==2'b11));
  assign or_dcpl_188 = or_dcpl_145 | or_dcpl_143;
  assign or_dcpl_190 = operator_4_false_3_slc_operator_4_false_3_acc_3_svs_1 | (~
      (yuvdns_col_col_lpi_1_dfm_1_1[12]));
  assign and_dcpl_204 = ~(operator_4_false_3_slc_operator_4_false_3_acc_3_svs_1 |
      (yuvdns_col_col_lpi_1_dfm_1_1[12]));
  assign and_dcpl_208 = lfst_exitL_exitL_exitL_exit_nlm_row_loop_lpi_1 & (~ sfi_exit_yuvdns_col_lpi_1)
      & lfst_exitL_exitL_exit_nlm_row_loop_lpi_1;
  assign and_dcpl_213 = (~ exitL_exit_addon_loop_2_sva) & (~ exitL_exitL_exit_yuvdns_col_lpi_1)
      & lfst_exitL_exit_yuvdns_col_lpi_1;
  assign and_dcpl_214 = and_dcpl_213 & and_dcpl_80 & lfst_exit_addon_loop_2_lpi_1_dfm_4_0;
  assign and_dcpl_215 = and_dcpl_214 & and_dcpl_208 & and_dcpl_73 & (~ operator_4_false_3_acc_itm_3_1);
  assign and_dcpl_218 = and_dcpl_214 & and_dcpl_208 & and_dcpl_73 & operator_4_false_3_acc_itm_3_1;
  assign or_dcpl_196 = (~ lfst_exitL_exitL_exitL_exit_nlm_row_loop_lpi_1) | sfi_exit_yuvdns_col_lpi_1
      | (~ lfst_exitL_exitL_exit_nlm_row_loop_lpi_1);
  assign or_dcpl_201 = or_dcpl_66 | (~ lfst_exitL_exit_yuvdns_col_lpi_1);
  assign or_dcpl_202 = or_dcpl_201 | exitL_exitL_exitL_exitL_exit_nlm_row_loop_lpi_1
      | (~ lfst_exit_yuvdns_col_lpi_1) | (~ lfst_exit_addon_loop_2_lpi_1_dfm_4_0);
  assign or_dcpl_203 = or_dcpl_202 | or_dcpl_196 | sfi_yuvdns_reg_eb_lpi_1 | (~ (lfst_exitL_exit_nlm_row_loop_lpi_1_1_0[1]));
  assign and_dcpl_224 = ~((lfst_exitL_exit_nlm_row_loop_lpi_1_1_0[1]) | lfst_exit_addon_loop_2_lpi_1_dfm_4_1);
  assign and_dcpl_225 = (lfst_exitL_exit_nlm_row_loop_lpi_1_1_0[1]) & (~ lfst_exit_addon_loop_2_lpi_1_dfm_4_1);
  assign or_tmp_152 = lfst_exit_addon_loop_2_lpi_1_dfm_4_1 | exitL_exitL_exit_yuvdns_col_lpi_1
      | (~ lfst_exit_addon_loop_2_lpi_1_dfm_4_0) | exitL_exit_addon_loop_2_sva;
  assign mux_153_nl = MUX_s_1_2_2((~ or_tmp_152), or_54_cse, and_292_cse);
  assign and_tmp_28 = yuvdns_reg_eb & mux_153_nl;
  assign mux_161_nl = MUX_s_1_2_2((~ or_tmp_152), or_54_cse, yuvdns_row_acc_2_itm_13_1);
  assign and_tmp_29 = yuvdns_reg_eb & yuvdns_col_acc_2_itm_13_1 & mux_161_nl;
  assign or_76_nl = lfst_exitL_exit_nlm_row_loop_lpi_1_2 | (lfst_exitL_exit_nlm_row_loop_lpi_1_1_0[1]);
  assign mux_155_nl = MUX_s_1_2_2(mux_167_cse, and_tmp_3, or_76_nl);
  assign mux_156_nl = MUX_s_1_2_2(mux_155_nl, mux_167_cse, sfi_yuvdns_reg_eb_lpi_1);
  assign mux_157_nl = MUX_s_1_2_2(and_tmp_3, mux_156_nl, yuvdns_col_asn_sft_lpi_1);
  assign mux_158_nl = MUX_s_1_2_2(mux_157_nl, and_tmp_28, or_92_cse);
  assign mux_159_nl = MUX_s_1_2_2(mux_158_nl, and_tmp_3, yuvdns_col_asn_sft_1_lpi_1);
  assign mux_160_nl = MUX_s_1_2_2(and_tmp_28, mux_159_nl, lfst_exitL_exitL_exitL_exit_nlm_row_loop_lpi_1);
  assign mux_162_nl = MUX_s_1_2_2(and_tmp_29, mux_160_nl, nor_22_cse);
  assign mux_163_nl = MUX_s_1_2_2(mux_162_nl, and_tmp_3, yuvdns_row_asn_sft_lpi_1);
  assign mux_164_itm = MUX_s_1_2_2(and_tmp_29, mux_163_nl, lfst_exitL_exit_yuvdns_col_lpi_1);
  assign yuvdns_row_yuvdns_row_nor_tmp = ~((~ exitL_exitL_exit_nlm_row_loop_lpi_1_dfm_1)
      | yuvdns_col_asn_sft_1_lpi_1_dfm_mx0 | yuvdns_row_asn_sft_lpi_1_dfm_mx0 | lfst_exit_addon_loop_2_lpi_1_dfm_1_1);
  assign and_269_tmp = lfst_exit_addon_loop_2_lpi_1_dfm_1_1 & (lfst_exit_addon_loop_2_lpi_1_dfm_4_0
      | (addon_loop_1_acc_6_tmp[2]));
  assign ylineBuf_rsc_0_0_i_ena_d = ylineBuf_rsc_0_0_i_ena_d_reg;
  assign ylineBuf_rsc_0_0_i_wea_d = ylineBuf_rsc_0_0_i_wea_d_reg;
  assign ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  assign ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  assign ylineBuf_rsc_1_0_i_ena_d = ylineBuf_rsc_1_0_i_ena_d_reg;
  assign ylineBuf_rsc_1_0_i_wea_d = ylineBuf_rsc_1_0_i_wea_d_reg;
  assign ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  assign ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  assign ylineBuf_rsc_2_0_i_ena_d = ylineBuf_rsc_2_0_i_ena_d_reg;
  assign ylineBuf_rsc_2_0_i_wea_d = ylineBuf_rsc_2_0_i_wea_d_reg;
  assign ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  assign ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  assign ylineBuf_rsc_3_0_i_ena_d = ylineBuf_rsc_3_0_i_ena_d_reg;
  assign ylineBuf_rsc_3_0_i_wea_d = ylineBuf_rsc_3_0_i_wea_d_reg;
  assign ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  assign ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  assign ylineBuf_rsc_4_0_i_ena_d = ylineBuf_rsc_4_0_i_ena_d_reg;
  assign ylineBuf_rsc_4_0_i_wea_d = ylineBuf_rsc_4_0_i_wea_d_reg;
  assign ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  assign ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  assign ylineBuf_rsc_5_0_i_ena_d = ylineBuf_rsc_5_0_i_ena_d_reg;
  assign ylineBuf_rsc_5_0_i_wea_d = ylineBuf_rsc_5_0_i_wea_d_reg;
  assign ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  assign ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  assign ylineBuf_rsc_6_0_i_ena_d = ylineBuf_rsc_6_0_i_ena_d_reg;
  assign ylineBuf_rsc_6_0_i_wea_d = ylineBuf_rsc_6_0_i_wea_d_reg;
  assign ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  assign ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  assign ylineBuf_rsc_7_0_i_ena_d = ylineBuf_rsc_7_0_i_ena_d_reg;
  assign ylineBuf_rsc_7_0_i_wea_d = ylineBuf_rsc_7_0_i_wea_d_reg;
  assign ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  assign ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  assign ulineBuf_rsc_0_0_i_ena_d = ulineBuf_rsc_0_0_i_ena_d_reg;
  assign ulineBuf_rsc_0_0_i_wea_d = ulineBuf_rsc_0_0_i_wea_d_reg;
  assign ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  assign ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  assign ulineBuf_rsc_1_0_i_ena_d = ulineBuf_rsc_1_0_i_ena_d_reg;
  assign ulineBuf_rsc_1_0_i_wea_d = ulineBuf_rsc_1_0_i_wea_d_reg;
  assign ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  assign ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  assign ulineBuf_rsc_2_0_i_ena_d = ulineBuf_rsc_2_0_i_ena_d_reg;
  assign ulineBuf_rsc_2_0_i_wea_d = ulineBuf_rsc_2_0_i_wea_d_reg;
  assign ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  assign ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  assign ulineBuf_rsc_3_0_i_ena_d = ulineBuf_rsc_3_0_i_ena_d_reg;
  assign ulineBuf_rsc_3_0_i_wea_d = ulineBuf_rsc_3_0_i_wea_d_reg;
  assign ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  assign ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  assign ulineBuf_rsc_4_0_i_ena_d = ulineBuf_rsc_4_0_i_ena_d_reg;
  assign ulineBuf_rsc_4_0_i_wea_d = ulineBuf_rsc_4_0_i_wea_d_reg;
  assign ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  assign ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  assign ulineBuf_rsc_5_0_i_ena_d = ulineBuf_rsc_5_0_i_ena_d_reg;
  assign ulineBuf_rsc_5_0_i_wea_d = ulineBuf_rsc_5_0_i_wea_d_reg;
  assign ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  assign ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  assign ulineBuf_rsc_6_0_i_ena_d = ulineBuf_rsc_6_0_i_ena_d_reg;
  assign ulineBuf_rsc_6_0_i_wea_d = ulineBuf_rsc_6_0_i_wea_d_reg;
  assign ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  assign ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  assign ulineBuf_rsc_7_0_i_ena_d = ulineBuf_rsc_7_0_i_ena_d_reg;
  assign ulineBuf_rsc_7_0_i_wea_d = ulineBuf_rsc_7_0_i_wea_d_reg;
  assign ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  assign ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  assign vlineBuf_rsc_0_0_i_ena_d = vlineBuf_rsc_0_0_i_ena_d_reg;
  assign vlineBuf_rsc_0_0_i_wea_d = vlineBuf_rsc_0_0_i_wea_d_reg;
  assign vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  assign vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  assign vlineBuf_rsc_1_0_i_ena_d = vlineBuf_rsc_1_0_i_ena_d_reg;
  assign vlineBuf_rsc_1_0_i_wea_d = vlineBuf_rsc_1_0_i_wea_d_reg;
  assign vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  assign vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  assign vlineBuf_rsc_2_0_i_ena_d = vlineBuf_rsc_2_0_i_ena_d_reg;
  assign vlineBuf_rsc_2_0_i_wea_d = vlineBuf_rsc_2_0_i_wea_d_reg;
  assign vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  assign vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  assign vlineBuf_rsc_3_0_i_ena_d = vlineBuf_rsc_3_0_i_ena_d_reg;
  assign vlineBuf_rsc_3_0_i_wea_d = vlineBuf_rsc_3_0_i_wea_d_reg;
  assign vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  assign vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  assign vlineBuf_rsc_4_0_i_ena_d = vlineBuf_rsc_4_0_i_ena_d_reg;
  assign vlineBuf_rsc_4_0_i_wea_d = vlineBuf_rsc_4_0_i_wea_d_reg;
  assign vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  assign vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  assign vlineBuf_rsc_5_0_i_ena_d = vlineBuf_rsc_5_0_i_ena_d_reg;
  assign vlineBuf_rsc_5_0_i_wea_d = vlineBuf_rsc_5_0_i_wea_d_reg;
  assign vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  assign vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  assign vlineBuf_rsc_6_0_i_ena_d = vlineBuf_rsc_6_0_i_ena_d_reg;
  assign vlineBuf_rsc_6_0_i_wea_d = vlineBuf_rsc_6_0_i_wea_d_reg;
  assign vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  assign vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  assign vlineBuf_rsc_7_0_i_ena_d = vlineBuf_rsc_7_0_i_ena_d_reg;
  assign vlineBuf_rsc_7_0_i_wea_d = vlineBuf_rsc_7_0_i_wea_d_reg;
  assign vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  assign vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  assign ylineBuf_rsc_0_0_i_adra_d = ylineBuf_rsc_0_0_i_adra_d_reg;
  assign ylineBuf_rsc_0_0_i_da_d = ylineBuf_rsc_0_0_i_da_d_reg;
  assign ylineBuf_rsc_1_0_i_adra_d = ylineBuf_rsc_1_0_i_adra_d_reg;
  assign ylineBuf_rsc_1_0_i_da_d = ylineBuf_rsc_1_0_i_da_d_reg;
  assign ylineBuf_rsc_2_0_i_adra_d = ylineBuf_rsc_2_0_i_adra_d_reg;
  assign ylineBuf_rsc_2_0_i_da_d = ylineBuf_rsc_2_0_i_da_d_reg;
  assign ylineBuf_rsc_3_0_i_adra_d = ylineBuf_rsc_3_0_i_adra_d_reg;
  assign ylineBuf_rsc_3_0_i_da_d = ylineBuf_rsc_3_0_i_da_d_reg;
  assign ylineBuf_rsc_4_0_i_adra_d = ylineBuf_rsc_4_0_i_adra_d_reg;
  assign ylineBuf_rsc_4_0_i_da_d = ylineBuf_rsc_4_0_i_da_d_reg;
  assign ylineBuf_rsc_5_0_i_adra_d = ylineBuf_rsc_5_0_i_adra_d_reg;
  assign ylineBuf_rsc_5_0_i_da_d = ylineBuf_rsc_5_0_i_da_d_reg;
  assign ylineBuf_rsc_6_0_i_adra_d = ylineBuf_rsc_6_0_i_adra_d_reg;
  assign ylineBuf_rsc_6_0_i_da_d = ylineBuf_rsc_6_0_i_da_d_reg;
  assign ylineBuf_rsc_7_0_i_adra_d = ylineBuf_rsc_7_0_i_adra_d_reg;
  assign ylineBuf_rsc_7_0_i_da_d = ylineBuf_rsc_7_0_i_da_d_reg;
  assign ulineBuf_rsc_0_0_i_adra_d = ulineBuf_rsc_0_0_i_adra_d_reg;
  assign ulineBuf_rsc_0_0_i_da_d = ulineBuf_rsc_0_0_i_da_d_reg;
  assign ulineBuf_rsc_1_0_i_adra_d = ulineBuf_rsc_1_0_i_adra_d_reg;
  assign ulineBuf_rsc_1_0_i_da_d = ulineBuf_rsc_1_0_i_da_d_reg;
  assign ulineBuf_rsc_2_0_i_adra_d = ulineBuf_rsc_2_0_i_adra_d_reg;
  assign ulineBuf_rsc_2_0_i_da_d = ulineBuf_rsc_2_0_i_da_d_reg;
  assign ulineBuf_rsc_3_0_i_adra_d = ulineBuf_rsc_3_0_i_adra_d_reg;
  assign ulineBuf_rsc_3_0_i_da_d = ulineBuf_rsc_3_0_i_da_d_reg;
  assign ulineBuf_rsc_4_0_i_adra_d = ulineBuf_rsc_4_0_i_adra_d_reg;
  assign ulineBuf_rsc_4_0_i_da_d = ulineBuf_rsc_4_0_i_da_d_reg;
  assign ulineBuf_rsc_5_0_i_adra_d = ulineBuf_rsc_5_0_i_adra_d_reg;
  assign ulineBuf_rsc_5_0_i_da_d = ulineBuf_rsc_5_0_i_da_d_reg;
  assign ulineBuf_rsc_6_0_i_adra_d = ulineBuf_rsc_6_0_i_adra_d_reg;
  assign ulineBuf_rsc_6_0_i_da_d = ulineBuf_rsc_6_0_i_da_d_reg;
  assign ulineBuf_rsc_7_0_i_adra_d = ulineBuf_rsc_7_0_i_adra_d_reg;
  assign ulineBuf_rsc_7_0_i_da_d = ulineBuf_rsc_7_0_i_da_d_reg;
  assign vlineBuf_rsc_0_0_i_adra_d = vlineBuf_rsc_0_0_i_adra_d_reg;
  assign vlineBuf_rsc_0_0_i_da_d = vlineBuf_rsc_0_0_i_da_d_reg;
  assign vlineBuf_rsc_1_0_i_adra_d = vlineBuf_rsc_1_0_i_adra_d_reg;
  assign vlineBuf_rsc_1_0_i_da_d = vlineBuf_rsc_1_0_i_da_d_reg;
  assign vlineBuf_rsc_2_0_i_adra_d = vlineBuf_rsc_2_0_i_adra_d_reg;
  assign vlineBuf_rsc_2_0_i_da_d = vlineBuf_rsc_2_0_i_da_d_reg;
  assign vlineBuf_rsc_3_0_i_adra_d = vlineBuf_rsc_3_0_i_adra_d_reg;
  assign vlineBuf_rsc_3_0_i_da_d = vlineBuf_rsc_3_0_i_da_d_reg;
  assign vlineBuf_rsc_4_0_i_adra_d = vlineBuf_rsc_4_0_i_adra_d_reg;
  assign vlineBuf_rsc_4_0_i_da_d = vlineBuf_rsc_4_0_i_da_d_reg;
  assign vlineBuf_rsc_5_0_i_adra_d = vlineBuf_rsc_5_0_i_adra_d_reg;
  assign vlineBuf_rsc_5_0_i_da_d = vlineBuf_rsc_5_0_i_da_d_reg;
  assign vlineBuf_rsc_6_0_i_adra_d = vlineBuf_rsc_6_0_i_adra_d_reg;
  assign vlineBuf_rsc_6_0_i_da_d = vlineBuf_rsc_6_0_i_da_d_reg;
  assign vlineBuf_rsc_7_0_i_adra_d = vlineBuf_rsc_7_0_i_adra_d_reg;
  assign vlineBuf_rsc_7_0_i_da_d = vlineBuf_rsc_7_0_i_da_d_reg;
  assign and_324_cse = nlm_col_loop_if_nlm_col_loop_if_nlm_col_loop_if_or_cse & nlm_col_loop_if_else_1_if_acc_itm_21_1;
  assign and_338_cse = nlm_col_loop_1_if_exs_3_0 & nlm_col_loop_1_if_else_1_if_acc_itm_21_1;
  assign and_352_cse = nlm_col_loop_1_if_exs_3_0 & nlm_col_loop_2_if_else_1_if_acc_itm_21_1;
  assign or_dcpl_389 = (~ lfst_exitL_exitL_exitL_exit_nlm_row_loop_lpi_1) | sfi_exit_yuvdns_col_lpi_1
      | (~ lfst_exitL_exitL_exit_nlm_row_loop_lpi_1) | sfi_yuvdns_reg_eb_lpi_1 |
      (~ lfst_exit_yuvdns_col_lpi_1) | exitL_exitL_exitL_exitL_exit_nlm_row_loop_lpi_1
      | (~ lfst_exitL_exit_yuvdns_col_lpi_1) | exitL_exitL_exit_yuvdns_col_lpi_1
      | (~ lfst_exit_addon_loop_2_lpi_1_dfm_4_0) | exitL_exit_addon_loop_2_sva |
      (~ lfst_exitL_exit_nlm_row_loop_lpi_1_2);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      reg_dst_v_rsci_oswt_cse <= 1'b0;
      vWindow_0_8_lpi_1 <= 10'b0000000000;
      uWindow_0_8_lpi_1 <= 10'b0000000000;
      yWindow_0_8_lpi_1 <= 10'b0000000000;
      yWindow_4_4_lpi_1 <= 10'b0000000000;
      uWindow_4_4_lpi_1 <= 10'b0000000000;
      vWindow_4_4_lpi_1 <= 10'b0000000000;
      vWindow_7_8_lpi_1 <= 10'b0000000000;
      vWindow_6_8_lpi_1 <= 10'b0000000000;
      vWindow_5_8_lpi_1 <= 10'b0000000000;
      vWindow_4_8_lpi_1 <= 10'b0000000000;
      vWindow_3_8_lpi_1 <= 10'b0000000000;
      vWindow_2_8_lpi_1 <= 10'b0000000000;
      vWindow_1_8_lpi_1 <= 10'b0000000000;
      uWindow_7_8_lpi_1 <= 10'b0000000000;
      uWindow_6_8_lpi_1 <= 10'b0000000000;
      uWindow_5_8_lpi_1 <= 10'b0000000000;
      uWindow_4_8_lpi_1 <= 10'b0000000000;
      uWindow_3_8_lpi_1 <= 10'b0000000000;
      uWindow_2_8_lpi_1 <= 10'b0000000000;
      uWindow_1_8_lpi_1 <= 10'b0000000000;
      yWindow_7_8_lpi_1 <= 10'b0000000000;
      yWindow_6_8_lpi_1 <= 10'b0000000000;
      yWindow_5_8_lpi_1 <= 10'b0000000000;
      yWindow_4_8_lpi_1 <= 10'b0000000000;
      yWindow_3_8_lpi_1 <= 10'b0000000000;
      yWindow_2_8_lpi_1 <= 10'b0000000000;
      yWindow_1_8_lpi_1 <= 10'b0000000000;
      in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1 <= 10'b0000000000;
      in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1 <= 10'b0000000000;
      in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1 <= 10'b0000000000;
      window_read_window_read_nor_5_itm_2 <= 1'b0;
      yuvdns_nlm_maxweight_lpi_1_dfm_1 <= 8'b00000000;
      yuvdns_nlm_totalvalue_1_lpi_1_dfm_1 <= 25'b0000000000000000000000000;
      yuvdns_nlm_totalweight_1_lpi_1_dfm_1 <= 14'b00000000000000;
      nlm_col_loop_if_else_1_mux_itm_1 <= 8'b00000000;
      yuvdns_nlm_1_maxweight_lpi_1_dfm_1 <= 8'b00000000;
      yuvdns_nlm_1_totalvalue_1_lpi_1_dfm_1 <= 25'b0000000000000000000000000;
      yuvdns_nlm_1_totalweight_1_lpi_1_dfm_1 <= 14'b00000000000000;
      nlm_col_loop_1_if_else_1_mux_itm_1 <= 8'b00000000;
      yuvdns_nlm_2_maxweight_lpi_1_dfm_1 <= 8'b00000000;
      yuvdns_nlm_2_totalvalue_1_lpi_1_dfm_1 <= 25'b0000000000000000000000000;
      yuvdns_nlm_2_totalweight_1_lpi_1_dfm_1 <= 14'b00000000000000;
      nlm_col_loop_2_if_else_1_mux_itm_1 <= 8'b00000000;
      nlm_col_loop_2_lor_lpi_1_dfm_2 <= 1'b0;
      nlm_col_loop_lor_lpi_1_dfm_2 <= 1'b0;
      yuvdns_col_if_1_yuvdns_col_if_1_or_itm_2 <= 1'b0;
      v_t_lpi_1_dfm_1 <= 10'b0000000000;
      yuvdns_col_asn_sft_lpi_1_dfm_2 <= 1'b0;
      yuvdns_col_and_281_m1c_2 <= 1'b0;
      yuvdns_col_and_280_itm_2 <= 1'b0;
      u_t_lpi_1_dfm_1 <= 10'b0000000000;
      y_t_lpi_1_dfm_1 <= 10'b0000000000;
      nlm_row_loop_equal_tmp_2_2 <= 1'b0;
      reg_yuvdns_col_asn_sft_1_lpi_1_dfm_2_cse <= 1'b0;
      reg_yuvdns_row_asn_sft_lpi_1_dfm_st_2_cse <= 1'b0;
      addon_loop_1_addon_loop_1_mux_2_itm_1 <= 10'b0000000000;
      addon_loop_1_addon_loop_1_mux_1_itm_1 <= 10'b0000000000;
      addon_loop_1_addon_loop_1_mux_itm_1 <= 10'b0000000000;
      addon_loop_2_for_addon_loop_2_for_nor_2_itm_2 <= 1'b0;
      addon_loop_2_for_addon_loop_2_for_and_18_itm_2 <= 1'b0;
      addon_loop_2_for_addon_loop_2_for_and_19_itm_2 <= 1'b0;
      addon_loop_2_for_addon_loop_2_for_and_20_itm_2 <= 1'b0;
      addon_loop_2_for_acc_8_cse_sva_st_2_2 <= 3'b000;
      addon_loop_2_for_slc_13_svs_st_2 <= 1'b0;
      addon_loop_2_and_714_itm_2 <= 1'b0;
      addon_loop_2_and_653_itm_2 <= 1'b0;
      yuvdns_col_nor_4_itm_1 <= 1'b0;
      window_read_and_stg_3_14_sva_2 <= 1'b0;
      nlm_row_loop_equal_tmp_2 <= 1'b0;
      window_read_and_stg_3_5_sva_2 <= 1'b0;
      window_read_and_stg_3_12_sva_2 <= 1'b0;
      window_read_and_stg_4_3_sva_2 <= 1'b0;
      window_read_and_stg_3_10_sva_2 <= 1'b0;
      window_read_and_stg_3_1_sva_2 <= 1'b0;
      window_read_and_stg_3_8_sva_2 <= 1'b0;
      in_window_loop_and_187_cse_sva_1 <= 1'b0;
      nlm_row_loop_or_tmp_2 <= 1'b0;
      addon_loop_2_equal_tmp_2 <= 1'b0;
      addon_loop_2_equal_tmp_1_2 <= 1'b0;
      lfst_exit_addon_loop_2_lpi_1_dfm_st_2_1 <= 1'b0;
      lfst_exit_addon_loop_2_lpi_1_dfm_st_2_0 <= 1'b0;
      reg_ylineBuf_rsc_0_0_i_oswt_cse <= 1'b0;
      reg_ylineBuf_rsc_1_0_i_oswt_cse <= 1'b0;
      reg_ylineBuf_rsc_2_0_i_oswt_cse <= 1'b0;
      reg_ylineBuf_rsc_3_0_i_oswt_cse <= 1'b0;
      reg_ylineBuf_rsc_4_0_i_oswt_cse <= 1'b0;
      reg_ylineBuf_rsc_5_0_i_oswt_cse <= 1'b0;
      reg_ylineBuf_rsc_6_0_i_oswt_cse <= 1'b0;
      reg_ylineBuf_rsc_7_0_i_oswt_cse <= 1'b0;
      yuvdns_col_col_lpi_1_dfm_1_1 <= 13'b0000000000000;
      operator_4_false_3_slc_operator_4_false_3_acc_3_svs_1 <= 1'b0;
      mgc_2147483647_3_dfmergeen_1_lpi_1_dfm_2_st_1_1 <= 1'b0;
      lines_read_acc_cse_sva_st_2_1 <= 3'b000;
      nlm_col_loop_if_nlm_col_loop_if_acc_16_itm_1 <= 7'b0000000;
      nlm_col_loop_if_acc_43_itm_1 <= 4'b0000;
      nlm_col_loop_if_slc_nlm_col_loop_if_acc_33_sdt_2_0_itm_1 <= 3'b000;
      nlm_col_loop_if_nlm_col_loop_if_acc_12_itm_1 <= 7'b0000000;
      nlm_col_loop_if_nlm_col_loop_if_acc_10_itm_1 <= 7'b0000000;
      nlm_col_loop_if_acc_42_itm_1 <= 4'b0000;
      nlm_col_loop_if_slc_nlm_col_loop_if_acc_32_sdt_2_0_itm_1 <= 3'b000;
      nlm_col_loop_if_nlm_col_loop_if_acc_6_itm_1 <= 7'b0000000;
      nlm_col_loop_if_nlm_col_loop_if_acc_4_itm_1 <= 6'b000000;
      nlm_col_loop_if_acc_41_itm_1 <= 3'b000;
      nlm_col_loop_if_slc_nlm_col_loop_if_acc_31_sdt_2_0_itm_1 <= 3'b000;
      nlm_col_loop_if_nlm_col_loop_if_acc_itm_1 <= 6'b000000;
      nlm_col_loop_1_if_acc_43_itm_1 <= 4'b0000;
      nlm_col_loop_1_if_slc_nlm_col_loop_1_if_acc_33_sdt_2_0_itm_1 <= 3'b000;
      nlm_col_loop_1_if_acc_42_itm_1 <= 4'b0000;
      nlm_col_loop_2_if_nlm_col_loop_2_if_acc_16_itm_1 <= 7'b0000000;
      nlm_col_loop_2_if_acc_43_itm_1 <= 4'b0000;
      nlm_col_loop_2_if_slc_nlm_col_loop_2_if_acc_33_sdt_2_0_itm_1 <= 3'b000;
      nlm_col_loop_2_if_nlm_col_loop_2_if_acc_12_itm_1 <= 7'b0000000;
      nlm_col_loop_2_if_nlm_col_loop_2_if_acc_10_itm_1 <= 7'b0000000;
      nlm_col_loop_2_if_acc_42_itm_1 <= 4'b0000;
      nlm_col_loop_2_if_slc_nlm_col_loop_2_if_acc_32_sdt_2_0_itm_1 <= 3'b000;
      nlm_col_loop_2_if_nlm_col_loop_2_if_acc_6_itm_1 <= 7'b0000000;
      nlm_col_loop_2_if_nlm_col_loop_2_if_acc_4_itm_1 <= 6'b000000;
      nlm_col_loop_2_if_acc_41_itm_1 <= 3'b000;
      nlm_col_loop_2_if_slc_nlm_col_loop_2_if_acc_31_sdt_2_0_itm_1 <= 3'b000;
      nlm_col_loop_2_if_nlm_col_loop_2_if_acc_itm_1 <= 6'b000000;
      nlm_col_loop_lor_lpi_1_dfm_st_1 <= 1'b0;
      lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_st_1_1_0 <= 2'b00;
      sfi_exit_yuvdns_col_lpi_1_dfm_1_1 <= 1'b0;
      addon_loop_2_for_slc_addon_loop_2_for_j_11_0_7_itm_1 <= 12'b000000000000;
      addon_loop_2_for_slc_addon_loop_2_for_j_11_0_8_itm_1 <= 12'b000000000000;
      addon_loop_2_for_slc_addon_loop_2_for_j_11_0_11_itm_1 <= 12'b000000000000;
      addon_loop_2_for_slc_addon_loop_2_for_j_11_0_12_itm_1 <= 12'b000000000000;
      addon_loop_2_for_slc_addon_loop_2_for_j_11_0_13_itm_1 <= 12'b000000000000;
      addon_loop_2_for_slc_addon_loop_2_for_j_11_0_3_itm_1 <= 12'b000000000000;
      addon_loop_2_for_acc_8_cse_sva_st_2_1 <= 3'b000;
      addon_loop_2_for_slc_13_svs_st_1 <= 1'b0;
      lfst_exit_addon_loop_2_lpi_1_dfm_st_1_1 <= 1'b0;
      lfst_exit_addon_loop_2_lpi_1_dfm_st_1_0 <= 1'b0;
      reg_src_v_rsci_oswt_cse <= 1'b0;
      in_window_loop_j_lpi_1_2_0 <= 3'b000;
      exit_nlm_row_loop_sva_2 <= 1'b0;
      addon_loop_2_for_j_lpi_1 <= 13'b0000000000000;
      lfst_exit_addon_loop_2_lpi_1_dfm_4_1 <= 1'b0;
      exitL_exit_addon_loop_2_sva <= 1'b1;
      lfst_exit_addon_loop_2_lpi_1_dfm_4_0 <= 1'b0;
      yuvdns_row_row_lpi_1 <= 13'b0000000000000;
      main_stage_0_2 <= 1'b0;
      main_stage_0_3 <= 1'b0;
      yuvdns_nlm_2_totalvalue_1_lpi_1 <= 25'b0000000000000000000000000;
      yuvdns_nlm_2_totalweight_1_lpi_1 <= 14'b00000000000000;
      yuvdns_nlm_1_totalvalue_1_lpi_1 <= 25'b0000000000000000000000000;
      yuvdns_nlm_1_totalweight_1_lpi_1 <= 14'b00000000000000;
      yuvdns_nlm_totalvalue_1_lpi_1 <= 25'b0000000000000000000000000;
      yuvdns_nlm_totalweight_1_lpi_1 <= 14'b00000000000000;
      yuvdns_nlm_2_maxweight_lpi_1 <= 8'b00000000;
      yuvdns_nlm_1_maxweight_lpi_1 <= 8'b00000000;
      yuvdns_nlm_maxweight_lpi_1 <= 8'b00000000;
      reg_addon_loop_2_and_740_itm_2_cse <= 1'b0;
      in_window_loop_and_stg_5_8_sva_1 <= 1'b0;
      operator_3_false_return_2_0_sva_1 <= 3'b000;
      addon_loop_2_and_688_itm_1 <= 1'b0;
      addon_loop_2_and_687_itm_1 <= 1'b0;
      addon_loop_2_and_686_itm_1 <= 1'b0;
      addon_loop_2_and_685_itm_1 <= 1'b0;
      addon_loop_2_and_684_itm_1 <= 1'b0;
      addon_loop_2_and_683_itm_1 <= 1'b0;
      addon_loop_2_and_682_itm_1 <= 1'b0;
      addon_loop_2_and_681_itm_1 <= 1'b0;
      addon_loop_2_and_680_itm_1 <= 1'b0;
      addon_loop_2_and_679_itm_1 <= 1'b0;
      addon_loop_2_and_678_itm_1 <= 1'b0;
      addon_loop_2_and_677_itm_1 <= 1'b0;
      addon_loop_2_and_676_itm_1 <= 1'b0;
      addon_loop_2_and_675_itm_1 <= 1'b0;
      addon_loop_2_and_674_itm_1 <= 1'b0;
      addon_loop_2_and_673_itm_1 <= 1'b0;
      addon_loop_2_and_672_itm_1 <= 1'b0;
      addon_loop_2_and_671_itm_1 <= 1'b0;
      addon_loop_2_and_670_itm_1 <= 1'b0;
      addon_loop_2_and_669_itm_1 <= 1'b0;
      addon_loop_2_and_668_itm_1 <= 1'b0;
      addon_loop_2_and_667_itm_1 <= 1'b0;
      addon_loop_2_and_666_itm_1 <= 1'b0;
      addon_loop_2_and_665_itm_1 <= 1'b0;
      addon_loop_2_and_664_itm_1 <= 1'b0;
      addon_loop_2_and_663_itm_1 <= 1'b0;
      addon_loop_2_and_662_itm_1 <= 1'b0;
      addon_loop_2_and_661_itm_1 <= 1'b0;
      addon_loop_2_and_660_itm_1 <= 1'b0;
      addon_loop_2_and_659_itm_1 <= 1'b0;
      addon_loop_2_and_658_itm_1 <= 1'b0;
      addon_loop_2_and_657_itm_1 <= 1'b0;
      addon_loop_2_and_656_itm_1 <= 1'b0;
      addon_loop_2_and_655_itm_1 <= 1'b0;
      addon_loop_2_and_654_itm_1 <= 1'b0;
      addon_loop_2_and_652_itm_1 <= 1'b0;
      addon_loop_2_and_651_itm_1 <= 1'b0;
      addon_loop_2_and_650_itm_1 <= 1'b0;
      addon_loop_2_and_649_itm_1 <= 1'b0;
      addon_loop_2_and_648_itm_1 <= 1'b0;
      addon_loop_2_and_647_itm_1 <= 1'b0;
      addon_loop_2_and_646_itm_1 <= 1'b0;
      addon_loop_2_and_645_itm_1 <= 1'b0;
      addon_loop_2_and_644_itm_1 <= 1'b0;
      addon_loop_2_and_643_itm_1 <= 1'b0;
      addon_loop_2_and_642_itm_1 <= 1'b0;
      addon_loop_2_and_641_itm_1 <= 1'b0;
      addon_loop_2_and_640_itm_1 <= 1'b0;
      addon_loop_2_and_639_itm_1 <= 1'b0;
      addon_loop_2_and_638_itm_1 <= 1'b0;
      addon_loop_2_and_637_itm_1 <= 1'b0;
      addon_loop_2_and_636_itm_1 <= 1'b0;
      addon_loop_2_and_635_itm_1 <= 1'b0;
      addon_loop_2_and_634_itm_1 <= 1'b0;
      addon_loop_2_and_633_itm_1 <= 1'b0;
      addon_loop_2_and_632_itm_1 <= 1'b0;
      addon_loop_2_and_631_itm_1 <= 1'b0;
      addon_loop_2_and_630_itm_1 <= 1'b0;
      addon_loop_2_and_629_itm_1 <= 1'b0;
      addon_loop_2_and_628_itm_1 <= 1'b0;
      addon_loop_2_and_627_itm_1 <= 1'b0;
      addon_loop_2_and_626_itm_1 <= 1'b0;
      addon_loop_2_and_625_itm_1 <= 1'b0;
      addon_loop_2_and_624_itm_1 <= 1'b0;
      addon_loop_2_and_623_itm_1 <= 1'b0;
      addon_loop_2_and_622_itm_1 <= 1'b0;
      addon_loop_2_and_621_itm_1 <= 1'b0;
      addon_loop_2_and_620_itm_1 <= 1'b0;
      addon_loop_2_and_619_itm_1 <= 1'b0;
      addon_loop_2_and_618_itm_1 <= 1'b0;
      addon_loop_2_and_617_itm_1 <= 1'b0;
      nlm_row_loop_or_tmp_1_1 <= 1'b0;
      window_read_and_stg_3_8_sva_1 <= 1'b0;
      nlm_row_loop_equal_tmp_1 <= 1'b0;
      nlm_row_loop_equal_tmp_1_1 <= 1'b0;
      nlm_row_loop_equal_tmp_2_1 <= 1'b0;
      nlm_row_loop_nor_tmp_1_1 <= 1'b0;
      yuvdns_col_asn_sft_1_lpi_1_dfm_1 <= 1'b0;
      yuvdns_row_asn_sft_lpi_1_dfm_1 <= 1'b0;
      addon_loop_2_equal_tmp_1 <= 1'b0;
      addon_loop_2_equal_tmp_1_1 <= 1'b0;
      window_read_window_read_and_20_itm_1 <= 1'b0;
      window_read_window_read_nor_5_itm_1 <= 1'b0;
      yuvdns_col_asn_sft_lpi_1_dfm_1 <= 1'b0;
      window_read_and_stg_3_5_sva_1 <= 1'b0;
      window_read_and_stg_4_3_sva_1 <= 1'b0;
      window_read_and_stg_3_1_sva_1 <= 1'b0;
      window_read_and_stg_3_14_sva_1 <= 1'b0;
      window_read_and_stg_3_12_sva_1 <= 1'b0;
      window_read_and_stg_3_10_sva_1 <= 1'b0;
      addon_loop_2_and_698_itm_1 <= 1'b0;
      addon_loop_2_and_509_itm_1 <= 1'b0;
      addon_loop_2_addon_loop_2_for_nand_psp <= 1'b0;
      yuvdns_col_if_1_yuvdns_col_if_1_or_itm_1 <= 1'b0;
      addon_loop_2_for_addon_loop_2_for_and_20_itm_1 <= 1'b0;
      addon_loop_2_for_addon_loop_2_for_and_19_itm_1 <= 1'b0;
      addon_loop_2_for_addon_loop_2_for_and_18_itm_1 <= 1'b0;
      addon_loop_2_for_addon_loop_2_for_nor_2_itm_1 <= 1'b0;
      yuvdns_col_and_280_itm_1 <= 1'b0;
      yuvdns_col_and_281_m1c_1 <= 1'b0;
      in_window_loop_and_stg_4_16_sva <= 1'b0;
      in_window_loop_and_stg_4_18_sva <= 1'b0;
      in_window_loop_and_stg_4_19_sva <= 1'b0;
      in_window_loop_and_stg_4_20_sva <= 1'b0;
      in_window_loop_and_stg_4_22_sva <= 1'b0;
      in_window_loop_and_stg_4_23_sva <= 1'b0;
      in_window_loop_and_stg_4_24_sva <= 1'b0;
      in_window_loop_and_stg_4_25_sva <= 1'b0;
      in_window_loop_and_stg_4_27_sva <= 1'b0;
      in_window_loop_and_stg_4_28_sva <= 1'b0;
      in_window_loop_and_stg_4_29_sva <= 1'b0;
      in_window_loop_and_stg_4_31_sva <= 1'b0;
      in_window_loop_and_stg_5_0_sva <= 1'b0;
      in_window_loop_and_stg_4_0_sva <= 1'b0;
      in_window_loop_and_stg_5_1_sva <= 1'b0;
      in_window_loop_and_stg_4_1_sva <= 1'b0;
      in_window_loop_and_stg_3_1_sva <= 1'b0;
      in_window_loop_and_stg_5_2_sva <= 1'b0;
      in_window_loop_and_stg_4_2_sva <= 1'b0;
      in_window_loop_and_stg_5_3_sva <= 1'b0;
      in_window_loop_and_stg_5_4_sva <= 1'b0;
      in_window_loop_and_stg_4_4_sva <= 1'b0;
      in_window_loop_and_stg_5_5_sva <= 1'b0;
      in_window_loop_and_stg_4_5_sva <= 1'b0;
      in_window_loop_and_stg_3_5_sva <= 1'b0;
      in_window_loop_and_stg_5_6_sva <= 1'b0;
      in_window_loop_and_stg_4_6_sva <= 1'b0;
      in_window_loop_and_stg_4_7_sva <= 1'b0;
      in_window_loop_and_stg_5_8_sva <= 1'b0;
      in_window_loop_and_stg_4_8_sva <= 1'b0;
      in_window_loop_and_stg_5_9_sva <= 1'b0;
      in_window_loop_and_stg_4_9_sva <= 1'b0;
      in_window_loop_and_stg_5_10_sva <= 1'b0;
      in_window_loop_and_stg_4_10_sva <= 1'b0;
      in_window_loop_and_stg_3_10_sva <= 1'b0;
      in_window_loop_and_stg_5_11_sva <= 1'b0;
      in_window_loop_and_stg_4_11_sva <= 1'b0;
      in_window_loop_and_stg_5_12_sva <= 1'b0;
      in_window_loop_and_stg_5_13_sva <= 1'b0;
      in_window_loop_and_stg_4_13_sva <= 1'b0;
      in_window_loop_and_stg_5_14_sva <= 1'b0;
      in_window_loop_and_stg_4_14_sva <= 1'b0;
      in_window_loop_and_stg_3_14_sva <= 1'b0;
      in_window_loop_and_stg_5_15_sva <= 1'b0;
      in_window_loop_and_stg_4_15_sva <= 1'b0;
      addon_loop_2_and_740_itm_1 <= 1'b0;
      reg_in_window_loop_acc_psp_ftd <= 3'b000;
    end
    else if ( core_wen ) begin
      reg_dst_v_rsci_oswt_cse <= mux_124_nl & main_stage_0_3;
      vWindow_0_8_lpi_1 <= vWindow_0_8_lpi_1_mx0;
      uWindow_0_8_lpi_1 <= uWindow_0_8_lpi_1_mx0;
      yWindow_0_8_lpi_1 <= yWindow_0_8_lpi_1_mx0;
      yWindow_4_4_lpi_1 <= yWindow_4_4_lpi_1_mx0;
      uWindow_4_4_lpi_1 <= uWindow_4_4_lpi_1_mx0;
      vWindow_4_4_lpi_1 <= vWindow_4_4_lpi_1_mx0;
      vWindow_7_8_lpi_1 <= vWindow_7_8_lpi_1_mx0;
      vWindow_6_8_lpi_1 <= vWindow_6_8_lpi_1_mx0;
      vWindow_5_8_lpi_1 <= vWindow_5_8_lpi_1_mx0;
      vWindow_4_8_lpi_1 <= vWindow_4_8_lpi_1_mx0;
      vWindow_3_8_lpi_1 <= vWindow_3_8_lpi_1_mx0;
      vWindow_2_8_lpi_1 <= vWindow_2_8_lpi_1_mx0;
      vWindow_1_8_lpi_1 <= vWindow_1_8_lpi_1_mx0;
      uWindow_7_8_lpi_1 <= uWindow_7_8_lpi_1_mx0;
      uWindow_6_8_lpi_1 <= uWindow_6_8_lpi_1_mx0;
      uWindow_5_8_lpi_1 <= uWindow_5_8_lpi_1_mx0;
      uWindow_4_8_lpi_1 <= uWindow_4_8_lpi_1_mx0;
      uWindow_3_8_lpi_1 <= uWindow_3_8_lpi_1_mx0;
      uWindow_2_8_lpi_1 <= uWindow_2_8_lpi_1_mx0;
      uWindow_1_8_lpi_1 <= uWindow_1_8_lpi_1_mx0;
      yWindow_7_8_lpi_1 <= yWindow_7_8_lpi_1_mx0;
      yWindow_6_8_lpi_1 <= yWindow_6_8_lpi_1_mx0;
      yWindow_5_8_lpi_1 <= yWindow_5_8_lpi_1_mx0;
      yWindow_4_8_lpi_1 <= yWindow_4_8_lpi_1_mx0;
      yWindow_3_8_lpi_1 <= yWindow_3_8_lpi_1_mx0;
      yWindow_2_8_lpi_1 <= yWindow_2_8_lpi_1_mx0;
      yWindow_1_8_lpi_1 <= yWindow_1_8_lpi_1_mx0;
      in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
      window_read_window_read_nor_5_itm_2 <= window_read_window_read_nor_5_itm_1;
      yuvdns_nlm_maxweight_lpi_1_dfm_1 <= MUX_v_8_2_2(8'b00000000, yuvdns_nlm_maxweight_lpi_1_mx0,
          window_read_window_read_and_20_itm_1);
      yuvdns_nlm_totalvalue_1_lpi_1_dfm_1 <= MUX_v_25_2_2(25'b0000000000000000000000000,
          yuvdns_nlm_totalvalue_1_lpi_1_mx0, window_read_window_read_and_20_itm_1);
      yuvdns_nlm_totalweight_1_lpi_1_dfm_1 <= MUX_v_14_2_2(14'b00000000000000, yuvdns_nlm_totalweight_1_lpi_1_mx0,
          window_read_window_read_and_20_itm_1);
      nlm_col_loop_if_else_1_mux_itm_1 <= MUX_v_8_2_2(({1'b0 , ROM_1i4_1o7_79be7b8354f3336325ccc8204e2443072e_3}),
          ROM_1i3_1o8_a9da8dd3d4c2cabf7072e520d048f3072e_3, asn_nlm_col_loop_if_else_1_mux_itm_1_nand_nl);
      yuvdns_nlm_1_maxweight_lpi_1_dfm_1 <= MUX_v_8_2_2(8'b00000000, yuvdns_nlm_1_maxweight_lpi_1_mx0,
          window_read_window_read_and_20_itm_1);
      yuvdns_nlm_1_totalvalue_1_lpi_1_dfm_1 <= MUX_v_25_2_2(25'b0000000000000000000000000,
          yuvdns_nlm_1_totalvalue_1_lpi_1_mx0, window_read_window_read_and_20_itm_1);
      yuvdns_nlm_1_totalweight_1_lpi_1_dfm_1 <= MUX_v_14_2_2(14'b00000000000000,
          yuvdns_nlm_1_totalweight_1_lpi_1_mx0, window_read_window_read_and_20_itm_1);
      nlm_col_loop_1_if_else_1_mux_itm_1 <= MUX_v_8_2_2(({1'b0 , ROM_1i4_1o7_79be7b8354f3336325ccc8204e2443072e_4}),
          ROM_1i3_1o8_a9da8dd3d4c2cabf7072e520d048f3072e_4, or_228_nl);
      yuvdns_nlm_2_maxweight_lpi_1_dfm_1 <= MUX_v_8_2_2(8'b00000000, yuvdns_nlm_2_maxweight_lpi_1_mx0,
          window_read_window_read_and_20_itm_1);
      yuvdns_nlm_2_totalvalue_1_lpi_1_dfm_1 <= MUX_v_25_2_2(25'b0000000000000000000000000,
          yuvdns_nlm_2_totalvalue_1_lpi_1_mx0, window_read_window_read_and_20_itm_1);
      yuvdns_nlm_2_totalweight_1_lpi_1_dfm_1 <= MUX_v_14_2_2(14'b00000000000000,
          yuvdns_nlm_2_totalweight_1_lpi_1_mx0, window_read_window_read_and_20_itm_1);
      nlm_col_loop_2_if_else_1_mux_itm_1 <= MUX_v_8_2_2(({1'b0 , ROM_1i4_1o7_79be7b8354f3336325ccc8204e2443072e_5}),
          ROM_1i3_1o8_a9da8dd3d4c2cabf7072e520d048f3072e_5, or_230_nl);
      nlm_col_loop_2_lor_lpi_1_dfm_2 <= MUX_s_1_2_2(addon_loop_2_for_slc_13_svs_st_1,
          nlm_col_loop_lor_lpi_1_dfm_st_1, lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_st_1_1_0[1]);
      nlm_col_loop_lor_lpi_1_dfm_2 <= MUX_s_1_2_2(nlm_col_loop_lor_lpi_1_dfm_st_1,
          window_read_window_read_and_20_itm_1, lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_st_1_1_0[1]);
      yuvdns_col_if_1_yuvdns_col_if_1_or_itm_2 <= yuvdns_col_if_1_yuvdns_col_if_1_or_itm_1;
      v_t_lpi_1_dfm_1 <= v_t_lpi_1_dfm_1_mx0;
      yuvdns_col_asn_sft_lpi_1_dfm_2 <= yuvdns_col_asn_sft_lpi_1_dfm_1;
      yuvdns_col_and_281_m1c_2 <= yuvdns_col_and_281_m1c_1;
      yuvdns_col_and_280_itm_2 <= yuvdns_col_and_280_itm_1;
      u_t_lpi_1_dfm_1 <= u_t_lpi_1_dfm_1_mx0;
      y_t_lpi_1_dfm_1 <= y_t_lpi_1_dfm_1_mx0;
      nlm_row_loop_equal_tmp_2_2 <= nlm_row_loop_equal_tmp_2_1;
      reg_yuvdns_col_asn_sft_1_lpi_1_dfm_2_cse <= yuvdns_col_asn_sft_1_lpi_1_dfm_1;
      reg_yuvdns_row_asn_sft_lpi_1_dfm_st_2_cse <= yuvdns_row_asn_sft_lpi_1_dfm_1;
      addon_loop_1_addon_loop_1_mux_2_itm_1 <= MUX1HOT_v_10_9_2(nlm_col_loop_2_if_ac_int_cctor_4_9_0_sva_mx0w1,
          vWindow_4_4_lpi_1_mx0, vWindow_4_5_lpi_1, vWindow_4_6_lpi_1, vWindow_4_7_lpi_1,
          vWindow_4_8_lpi_1_mx0, vWindow_5_0_lpi_1, vWindow_5_1_lpi_1, vWindow_5_2_lpi_1,
          {(~ lfst_exit_addon_loop_2_lpi_1_dfm_st_1_1) , addon_loop_1_and_16_cse
          , addon_loop_1_and_17_cse , addon_loop_1_and_18_cse , addon_loop_1_and_19_cse
          , addon_loop_1_and_20_cse , addon_loop_1_and_21_cse , addon_loop_1_and_22_cse
          , addon_loop_1_and_23_cse});
      addon_loop_1_addon_loop_1_mux_1_itm_1 <= MUX1HOT_v_10_9_2(nlm_col_loop_1_if_ac_int_cctor_4_9_0_sva_mx0w1,
          uWindow_4_4_lpi_1_mx0, uWindow_4_5_lpi_1, uWindow_4_6_lpi_1, uWindow_4_7_lpi_1,
          uWindow_4_8_lpi_1_mx0, uWindow_5_0_lpi_1, uWindow_5_1_lpi_1, uWindow_5_2_lpi_1,
          {(~ lfst_exit_addon_loop_2_lpi_1_dfm_st_1_1) , addon_loop_1_and_16_cse
          , addon_loop_1_and_17_cse , addon_loop_1_and_18_cse , addon_loop_1_and_19_cse
          , addon_loop_1_and_20_cse , addon_loop_1_and_21_cse , addon_loop_1_and_22_cse
          , addon_loop_1_and_23_cse});
      addon_loop_1_addon_loop_1_mux_itm_1 <= MUX1HOT_v_10_9_2(nlm_col_loop_if_ac_int_cctor_4_9_0_sva_mx0w1,
          yWindow_4_4_lpi_1_mx0, yWindow_4_5_lpi_1, yWindow_4_6_lpi_1, yWindow_4_7_lpi_1,
          yWindow_4_8_lpi_1_mx0, yWindow_5_0_lpi_1, yWindow_5_1_lpi_1, yWindow_5_2_lpi_1,
          {(~ lfst_exit_addon_loop_2_lpi_1_dfm_st_1_1) , addon_loop_1_and_16_cse
          , addon_loop_1_and_17_cse , addon_loop_1_and_18_cse , addon_loop_1_and_19_cse
          , addon_loop_1_and_20_cse , addon_loop_1_and_21_cse , addon_loop_1_and_22_cse
          , addon_loop_1_and_23_cse});
      addon_loop_2_for_addon_loop_2_for_nor_2_itm_2 <= MUX_s_1_2_2(addon_loop_2_for_addon_loop_2_for_and_20_itm_1,
          addon_loop_2_for_addon_loop_2_for_nor_2_itm_1, lfst_exit_addon_loop_2_lpi_1_dfm_st_1_1);
      addon_loop_2_for_addon_loop_2_for_and_18_itm_2 <= addon_loop_2_for_addon_loop_2_for_and_18_itm_1;
      addon_loop_2_for_addon_loop_2_for_and_19_itm_2 <= MUX1HOT_s_1_3_2(addon_loop_2_for_addon_loop_2_for_and_19_itm_1,
          addon_loop_2_for_addon_loop_2_for_and_18_itm_1, addon_loop_2_for_addon_loop_2_for_nor_2_itm_1,
          {lfst_exit_addon_loop_2_lpi_1_dfm_st_1_1 , and_dcpl_202 , and_227_nl});
      addon_loop_2_for_addon_loop_2_for_and_20_itm_2 <= MUX_s_1_2_2(addon_loop_2_for_addon_loop_2_for_and_19_itm_1,
          addon_loop_2_for_addon_loop_2_for_and_20_itm_1, lfst_exit_addon_loop_2_lpi_1_dfm_st_1_1);
      addon_loop_2_for_acc_8_cse_sva_st_2_2 <= addon_loop_2_for_acc_8_cse_sva_st_2_1;
      addon_loop_2_for_slc_13_svs_st_2 <= MUX_s_1_2_2(addon_loop_2_for_slc_13_svs_st_1,
          addon_loop_2_for_addon_loop_2_for_nor_2_itm_1, and_dcpl_202);
      addon_loop_2_and_714_itm_2 <= addon_loop_2_and_698_itm_1;
      addon_loop_2_and_653_itm_2 <= addon_loop_2_and_509_itm_1;
      yuvdns_col_nor_4_itm_1 <= ~(((~ in_window_loop_and_187_cse_sva_1_1) & nlm_row_loop_or_tmp_1_1)
          | ((~ window_read_and_stg_3_8_sva_1) & nlm_row_loop_equal_tmp_1) | nlm_row_loop_equal_tmp_1_1
          | nlm_row_loop_equal_tmp_2_1 | nlm_row_loop_nor_tmp_1_1);
      window_read_and_stg_3_14_sva_2 <= window_read_and_stg_3_14_sva_1;
      nlm_row_loop_equal_tmp_2 <= nlm_row_loop_equal_tmp_1;
      window_read_and_stg_3_5_sva_2 <= window_read_and_stg_3_5_sva_1;
      window_read_and_stg_3_12_sva_2 <= window_read_and_stg_3_12_sva_1;
      window_read_and_stg_4_3_sva_2 <= window_read_and_stg_4_3_sva_1;
      window_read_and_stg_3_10_sva_2 <= window_read_and_stg_3_10_sva_1;
      window_read_and_stg_3_1_sva_2 <= window_read_and_stg_3_1_sva_1;
      window_read_and_stg_3_8_sva_2 <= window_read_and_stg_3_8_sva_1;
      in_window_loop_and_187_cse_sva_1 <= in_window_loop_and_187_cse_sva_1_1;
      nlm_row_loop_or_tmp_2 <= nlm_row_loop_or_tmp_1_1;
      addon_loop_2_equal_tmp_2 <= addon_loop_2_equal_tmp_1;
      addon_loop_2_equal_tmp_1_2 <= addon_loop_2_equal_tmp_1_1;
      lfst_exit_addon_loop_2_lpi_1_dfm_st_2_1 <= lfst_exit_addon_loop_2_lpi_1_dfm_st_1_1;
      lfst_exit_addon_loop_2_lpi_1_dfm_st_2_0 <= lfst_exit_addon_loop_2_lpi_1_dfm_st_1_0;
      reg_ylineBuf_rsc_0_0_i_oswt_cse <= window_read_window_read_nor_23_rmff;
      reg_ylineBuf_rsc_1_0_i_oswt_cse <= window_read_window_read_and_24_rmff;
      reg_ylineBuf_rsc_2_0_i_oswt_cse <= window_read_window_read_nor_22_rmff;
      reg_ylineBuf_rsc_3_0_i_oswt_cse <= window_read_window_read_nor_21_rmff;
      reg_ylineBuf_rsc_4_0_i_oswt_cse <= window_read_window_read_and_23_rmff;
      reg_ylineBuf_rsc_5_0_i_oswt_cse <= window_read_window_read_and_22_rmff;
      reg_ylineBuf_rsc_6_0_i_oswt_cse <= window_read_window_read_and_rmff;
      reg_ylineBuf_rsc_7_0_i_oswt_cse <= window_read_window_read_nor_20_rmff;
      yuvdns_col_col_lpi_1_dfm_1_1 <= yuvdns_col_col_lpi_1_dfm_1;
      operator_4_false_3_slc_operator_4_false_3_acc_3_svs_1 <= operator_4_false_3_acc_itm_3_1;
      mgc_2147483647_3_dfmergeen_1_lpi_1_dfm_2_st_1_1 <= MUX1HOT_s_1_3_2(yuvdns_col_if_yuvdns_col_if_yuvdns_col_if_yuvdns_col_if_nand_nl,
          (~ lines_read_or_tmp_1), (in_window_loop_acc_tmp[3]), {and_dcpl_215 , and_dcpl_218
          , or_dcpl_203});
      lines_read_acc_cse_sva_st_2_1 <= MUX_v_3_2_2((nlm_col_loop_1_if_acc_31_sdt_1[2:0]),
          lines_read_acc_tmp, lfst_exitL_exit_nlm_row_loop_lpi_1_1_0[1]);
      nlm_col_loop_if_nlm_col_loop_if_acc_16_itm_1 <= z_out_8;
      nlm_col_loop_if_acc_43_itm_1 <= z_out_9[3:0];
      nlm_col_loop_if_slc_nlm_col_loop_if_acc_33_sdt_2_0_itm_1 <= nlm_col_loop_if_acc_33_sdt_3_0_1[2:0];
      nlm_col_loop_if_nlm_col_loop_if_acc_12_itm_1 <= nl_nlm_col_loop_if_nlm_col_loop_if_acc_12_itm_1[6:0];
      nlm_col_loop_if_nlm_col_loop_if_acc_10_itm_1 <= nl_nlm_col_loop_if_nlm_col_loop_if_acc_10_itm_1[6:0];
      nlm_col_loop_if_acc_42_itm_1 <= z_out_5;
      nlm_col_loop_if_slc_nlm_col_loop_if_acc_32_sdt_2_0_itm_1 <= z_out_4[2:0];
      nlm_col_loop_if_nlm_col_loop_if_acc_6_itm_1 <= nl_nlm_col_loop_if_nlm_col_loop_if_acc_6_itm_1[6:0];
      nlm_col_loop_if_nlm_col_loop_if_acc_4_itm_1 <= nl_nlm_col_loop_if_nlm_col_loop_if_acc_4_itm_1[5:0];
      nlm_col_loop_if_acc_41_itm_1 <= nl_nlm_col_loop_if_acc_41_itm_1[2:0];
      nlm_col_loop_if_slc_nlm_col_loop_if_acc_31_sdt_2_0_itm_1 <= nlm_col_loop_if_acc_31_sdt_1[2:0];
      nlm_col_loop_if_nlm_col_loop_if_acc_itm_1 <= nl_nlm_col_loop_if_nlm_col_loop_if_acc_itm_1[5:0];
      nlm_col_loop_1_if_acc_43_itm_1 <= z_out_10[3:0];
      nlm_col_loop_1_if_slc_nlm_col_loop_1_if_acc_33_sdt_2_0_itm_1 <= nlm_col_loop_1_if_acc_33_sdt_3_0_1[2:0];
      nlm_col_loop_1_if_acc_42_itm_1 <= nl_nlm_col_loop_1_if_acc_42_itm_1[3:0];
      nlm_col_loop_2_if_nlm_col_loop_2_if_acc_16_itm_1 <= nl_nlm_col_loop_2_if_nlm_col_loop_2_if_acc_16_itm_1[6:0];
      nlm_col_loop_2_if_acc_43_itm_1 <= nl_nlm_col_loop_2_if_acc_43_itm_1[3:0];
      nlm_col_loop_2_if_slc_nlm_col_loop_2_if_acc_33_sdt_2_0_itm_1 <= nlm_col_loop_2_if_acc_33_sdt_3_0_1[2:0];
      nlm_col_loop_2_if_nlm_col_loop_2_if_acc_12_itm_1 <= nl_nlm_col_loop_2_if_nlm_col_loop_2_if_acc_12_itm_1[6:0];
      nlm_col_loop_2_if_nlm_col_loop_2_if_acc_10_itm_1 <= MUX_v_7_2_2(nlm_col_loop_2_if_nlm_col_loop_2_if_acc_10_nl,
          z_out_8, or_421_nl);
      nlm_col_loop_2_if_acc_42_itm_1 <= nl_nlm_col_loop_2_if_acc_42_itm_1[3:0];
      nlm_col_loop_2_if_slc_nlm_col_loop_2_if_acc_32_sdt_2_0_itm_1 <= nlm_col_loop_2_if_acc_32_sdt_1[2:0];
      nlm_col_loop_2_if_nlm_col_loop_2_if_acc_6_itm_1 <= nl_nlm_col_loop_2_if_nlm_col_loop_2_if_acc_6_itm_1[6:0];
      nlm_col_loop_2_if_nlm_col_loop_2_if_acc_4_itm_1 <= nl_nlm_col_loop_2_if_nlm_col_loop_2_if_acc_4_itm_1[5:0];
      nlm_col_loop_2_if_acc_41_itm_1 <= nl_nlm_col_loop_2_if_acc_41_itm_1[2:0];
      nlm_col_loop_2_if_slc_nlm_col_loop_2_if_acc_31_sdt_2_0_itm_1 <= nlm_col_loop_2_if_acc_31_sdt_1[2:0];
      nlm_col_loop_2_if_nlm_col_loop_2_if_acc_itm_1 <= nl_nlm_col_loop_2_if_nlm_col_loop_2_if_acc_itm_1[5:0];
      nlm_col_loop_lor_lpi_1_dfm_st_1 <= MUX_s_1_2_2(nlm_col_loop_if_nlm_col_loop_if_or_nl,
          window_read_window_read_and_5_cse, lfst_exitL_exit_nlm_row_loop_lpi_1_1_0[1]);
      lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_st_1_1_0 <= lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_1_0_1;
      sfi_exit_yuvdns_col_lpi_1_dfm_1_1 <= sfi_exit_yuvdns_col_lpi_1_dfm_1;
      addon_loop_2_for_slc_addon_loop_2_for_j_11_0_7_itm_1 <= MUX_v_12_2_2(({5'b00000
          , nlm_col_loop_1_if_nlm_col_loop_1_if_acc_6_nl}), (addon_loop_2_for_j_lpi_1[11:0]),
          lfst_exit_addon_loop_2_lpi_1_dfm_4_1);
      addon_loop_2_for_slc_addon_loop_2_for_j_11_0_8_itm_1 <= MUX_v_12_2_2(({6'b000000
          , z_out_6}), (addon_loop_2_for_j_lpi_1[11:0]), lfst_exit_addon_loop_2_lpi_1_dfm_4_1);
      addon_loop_2_for_slc_addon_loop_2_for_j_11_0_11_itm_1 <= MUX_v_12_2_2(({5'b00000
          , nlm_col_loop_1_if_nlm_col_loop_1_if_acc_10_nl}), (addon_loop_2_for_j_lpi_1[11:0]),
          lfst_exit_addon_loop_2_lpi_1_dfm_4_1);
      addon_loop_2_for_slc_addon_loop_2_for_j_11_0_12_itm_1 <= MUX_v_12_2_2(({5'b00000
          , nlm_col_loop_1_if_nlm_col_loop_1_if_acc_12_nl}), (addon_loop_2_for_j_lpi_1[11:0]),
          lfst_exit_addon_loop_2_lpi_1_dfm_4_1);
      addon_loop_2_for_slc_addon_loop_2_for_j_11_0_13_itm_1 <= MUX_v_12_2_2(({5'b00000
          , nlm_col_loop_1_if_nlm_col_loop_1_if_acc_16_nl}), (addon_loop_2_for_j_lpi_1[11:0]),
          lfst_exit_addon_loop_2_lpi_1_dfm_4_1);
      addon_loop_2_for_slc_addon_loop_2_for_j_11_0_3_itm_1 <= MUX_v_12_2_2(({6'b000000
          , nlm_col_loop_1_if_nlm_col_loop_1_if_acc_4_nl}), (addon_loop_2_for_j_lpi_1[11:0]),
          lfst_exit_addon_loop_2_lpi_1_dfm_4_1);
      addon_loop_2_for_acc_8_cse_sva_st_2_1 <= MUX_v_3_2_2(z_out_3, (z_out_5[2:0]),
          and_244_nl);
      addon_loop_2_for_slc_13_svs_st_1 <= MUX1HOT_s_1_3_2(addon_loop_2_for_acc_14_itm_13_1,
          nlm_col_loop_2_if_nlm_col_loop_2_if_or_nl, window_read_window_read_and_4_cse,
          {lfst_exit_addon_loop_2_lpi_1_dfm_4_1 , and_dcpl_224 , and_dcpl_225});
      lfst_exit_addon_loop_2_lpi_1_dfm_st_1_1 <= lfst_exit_addon_loop_2_lpi_1_dfm_1_1;
      lfst_exit_addon_loop_2_lpi_1_dfm_st_1_0 <= lfst_exit_addon_loop_2_lpi_1_dfm_0_1;
      reg_src_v_rsci_oswt_cse <= MUX_s_1_2_2(nor_nl, and_292_cse, exitL_exit_addon_loop_2_sva);
      in_window_loop_j_lpi_1_2_0 <= MUX_v_3_2_2(3'b000, addon_loop_2_mux_247_nl,
          nlm_row_loop_nand_nl);
      exit_nlm_row_loop_sva_2 <= exit_nlm_row_loop_sva_2_mx1;
      addon_loop_2_for_j_lpi_1 <= MUX1HOT_v_13_4_2((signext_13_1(~ (addon_loop_1_acc_6_tmp[2]))),
          (signext_13_1(addon_loop_1_acc_6_tmp[2])), z_out_11, yuvdns_col_col_lpi_1_dfm_1,
          {addon_loop_2_for_j_addon_loop_2_for_j_nor_nl , addon_loop_2_and_743_cse
          , addon_loop_2_for_j_or_nl , addon_loop_2_for_j_and_1_nl});
      lfst_exit_addon_loop_2_lpi_1_dfm_4_1 <= lfst_exit_addon_loop_2_lpi_1_dfm_4_1_1;
      exitL_exit_addon_loop_2_sva <= ~(lfst_exit_addon_loop_2_lpi_1_dfm_4_1_1 | lfst_exit_addon_loop_2_lpi_1_dfm_4_0_1);
      lfst_exit_addon_loop_2_lpi_1_dfm_4_0 <= lfst_exit_addon_loop_2_lpi_1_dfm_4_0_1;
      yuvdns_row_row_lpi_1 <= MUX_v_13_2_2(z_out_11, yuvdns_row_row_lpi_1_dfm_1,
          or_472_nl);
      main_stage_0_2 <= 1'b1;
      main_stage_0_3 <= main_stage_0_2;
      yuvdns_nlm_2_totalvalue_1_lpi_1 <= yuvdns_nlm_2_totalvalue_1_lpi_1_mx0;
      yuvdns_nlm_2_totalweight_1_lpi_1 <= yuvdns_nlm_2_totalweight_1_lpi_1_mx0;
      yuvdns_nlm_1_totalvalue_1_lpi_1 <= yuvdns_nlm_1_totalvalue_1_lpi_1_mx0;
      yuvdns_nlm_1_totalweight_1_lpi_1 <= yuvdns_nlm_1_totalweight_1_lpi_1_mx0;
      yuvdns_nlm_totalvalue_1_lpi_1 <= yuvdns_nlm_totalvalue_1_lpi_1_mx0;
      yuvdns_nlm_totalweight_1_lpi_1 <= yuvdns_nlm_totalweight_1_lpi_1_mx0;
      yuvdns_nlm_2_maxweight_lpi_1 <= yuvdns_nlm_2_maxweight_lpi_1_mx0;
      yuvdns_nlm_1_maxweight_lpi_1 <= yuvdns_nlm_1_maxweight_lpi_1_mx0;
      yuvdns_nlm_maxweight_lpi_1 <= yuvdns_nlm_maxweight_lpi_1_mx0;
      reg_addon_loop_2_and_740_itm_2_cse <= addon_loop_2_and_740_itm_1;
      in_window_loop_and_stg_5_8_sva_1 <= MUX1HOT_s_1_3_2(in_window_loop_and_stg_5_8_sva_mx0w0,
          lines_read_equal_tmp_8, yuvdns_col_if_yuvdns_col_if_yuvdns_col_if_or_5_nl,
          {or_dcpl_203 , and_dcpl_218 , and_dcpl_215});
      operator_3_false_return_2_0_sva_1 <= MUX1HOT_v_3_3_2((z_out_4[2:0]), (z_out_6[2:0]),
          (nlm_col_loop_1_if_acc_32_sdt_1[2:0]), {lfst_exit_addon_loop_2_lpi_1_dfm_4_1
          , and_dcpl_225 , and_dcpl_224});
      addon_loop_2_and_688_itm_1 <= in_window_loop_and_stg_5_15_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2])
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_687_itm_1 <= in_window_loop_and_stg_5_14_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2])
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_686_itm_1 <= in_window_loop_and_stg_5_13_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2])
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_685_itm_1 <= in_window_loop_and_stg_5_12_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2])
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_684_itm_1 <= in_window_loop_and_stg_5_11_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2])
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_683_itm_1 <= in_window_loop_and_stg_5_10_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2])
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_682_itm_1 <= in_window_loop_and_stg_5_9_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2])
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_681_itm_1 <= in_window_loop_and_stg_5_8_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2])
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_680_itm_1 <= in_window_loop_and_stg_5_6_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2])
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_679_itm_1 <= in_window_loop_and_stg_5_5_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2])
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_678_itm_1 <= in_window_loop_and_stg_5_4_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2])
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_677_itm_1 <= in_window_loop_and_stg_5_3_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2])
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_676_itm_1 <= in_window_loop_and_stg_5_2_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2])
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_675_itm_1 <= in_window_loop_and_stg_5_1_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2])
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_674_itm_1 <= in_window_loop_and_stg_5_0_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2])
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_673_itm_1 <= in_window_loop_and_stg_4_31_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2:1]==2'b01)
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_672_itm_1 <= in_window_loop_and_stg_4_29_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2:1]==2'b01)
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_671_itm_1 <= in_window_loop_and_stg_4_28_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2:1]==2'b01)
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_670_itm_1 <= in_window_loop_and_stg_4_27_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2:1]==2'b01)
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_669_itm_1 <= in_window_loop_and_stg_3_10_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1==3'b011)
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_668_itm_1 <= in_window_loop_and_stg_4_25_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2:1]==2'b01)
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_667_itm_1 <= in_window_loop_and_stg_4_24_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2:1]==2'b01)
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_666_itm_1 <= in_window_loop_and_stg_4_23_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2:1]==2'b01)
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_665_itm_1 <= in_window_loop_and_stg_4_22_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2:1]==2'b01)
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_664_itm_1 <= in_window_loop_and_stg_4_20_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2:1]==2'b01)
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_663_itm_1 <= in_window_loop_and_stg_4_19_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2:1]==2'b01)
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_662_itm_1 <= in_window_loop_and_stg_4_18_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2:1]==2'b01)
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_661_itm_1 <= in_window_loop_and_stg_3_1_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1==3'b011)
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_660_itm_1 <= in_window_loop_and_stg_4_16_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2:1]==2'b01)
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_659_itm_1 <= in_window_loop_and_stg_4_15_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2:1]==2'b01)
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_658_itm_1 <= in_window_loop_and_stg_4_14_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2:1]==2'b01)
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_657_itm_1 <= in_window_loop_and_stg_4_13_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2:1]==2'b01)
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_656_itm_1 <= in_window_loop_and_stg_4_11_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2:1]==2'b01)
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_655_itm_1 <= in_window_loop_and_stg_4_10_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2:1]==2'b01)
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_654_itm_1 <= in_window_loop_and_stg_4_9_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2:1]==2'b01)
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_652_itm_1 <= in_window_loop_and_stg_4_7_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2:1]==2'b01)
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_651_itm_1 <= in_window_loop_and_stg_4_6_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2:1]==2'b01)
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_650_itm_1 <= in_window_loop_and_stg_4_5_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2:1]==2'b01)
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_649_itm_1 <= in_window_loop_and_stg_4_4_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2:1]==2'b01)
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_648_itm_1 <= in_window_loop_and_stg_4_2_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2:1]==2'b01)
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_647_itm_1 <= in_window_loop_and_stg_4_1_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2:1]==2'b01)
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_646_itm_1 <= in_window_loop_and_stg_4_0_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2:1]==2'b01)
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_645_itm_1 <= in_window_loop_and_stg_4_31_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2:1]==2'b00)
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_644_itm_1 <= in_window_loop_and_stg_3_14_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1==3'b001)
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_643_itm_1 <= in_window_loop_and_stg_4_29_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2:1]==2'b00)
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_642_itm_1 <= in_window_loop_and_stg_4_28_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2:1]==2'b00)
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_641_itm_1 <= in_window_loop_and_stg_4_27_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2:1]==2'b00)
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_640_itm_1 <= in_window_loop_and_stg_4_25_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2:1]==2'b00)
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_639_itm_1 <= in_window_loop_and_stg_4_24_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2:1]==2'b00)
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_638_itm_1 <= in_window_loop_and_stg_4_23_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2:1]==2'b00)
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_637_itm_1 <= in_window_loop_and_stg_4_22_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2:1]==2'b00)
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_636_itm_1 <= in_window_loop_and_stg_3_5_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1==3'b001)
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_635_itm_1 <= in_window_loop_and_stg_4_20_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2:1]==2'b00)
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_634_itm_1 <= in_window_loop_and_stg_4_19_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2:1]==2'b00)
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_633_itm_1 <= in_window_loop_and_stg_4_18_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2:1]==2'b00)
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_632_itm_1 <= in_window_loop_and_stg_4_16_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2:1]==2'b00)
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_631_itm_1 <= in_window_loop_and_stg_5_15_sva_mx0 & (~ (in_window_loop_acc_psp_mx0_3_1[2]))
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_630_itm_1 <= in_window_loop_and_stg_5_14_sva_mx0 & (~ (in_window_loop_acc_psp_mx0_3_1[2]))
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_629_itm_1 <= in_window_loop_and_stg_5_13_sva_mx0 & (~ (in_window_loop_acc_psp_mx0_3_1[2]))
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_628_itm_1 <= in_window_loop_and_stg_5_12_sva_mx0 & (~ (in_window_loop_acc_psp_mx0_3_1[2]))
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_627_itm_1 <= in_window_loop_and_stg_5_11_sva_mx0 & (~ (in_window_loop_acc_psp_mx0_3_1[2]))
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_626_itm_1 <= in_window_loop_and_stg_5_10_sva_mx0 & (~ (in_window_loop_acc_psp_mx0_3_1[2]))
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_625_itm_1 <= in_window_loop_and_stg_5_9_sva_mx0 & (~ (in_window_loop_acc_psp_mx0_3_1[2]))
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_624_itm_1 <= in_window_loop_and_stg_4_7_sva_mx0 & (~ (in_window_loop_acc_psp_mx0_3_1[1]))
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_623_itm_1 <= in_window_loop_and_stg_5_6_sva_mx0 & (~ (in_window_loop_acc_psp_mx0_3_1[2]))
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_622_itm_1 <= in_window_loop_and_stg_5_5_sva_mx0 & (~ (in_window_loop_acc_psp_mx0_3_1[2]))
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_621_itm_1 <= in_window_loop_and_stg_5_4_sva_mx0 & (~ (in_window_loop_acc_psp_mx0_3_1[2]))
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_620_itm_1 <= in_window_loop_and_stg_5_3_sva_mx0 & (~ (in_window_loop_acc_psp_mx0_3_1[2]))
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_619_itm_1 <= in_window_loop_and_stg_5_2_sva_mx0 & (~ (in_window_loop_acc_psp_mx0_3_1[2]))
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_618_itm_1 <= in_window_loop_and_stg_5_1_sva_mx0 & (~ (in_window_loop_acc_psp_mx0_3_1[2]))
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_617_itm_1 <= in_window_loop_and_stg_5_0_sva_mx0 & (~ (in_window_loop_acc_psp_mx0_3_1[2]))
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      nlm_row_loop_or_tmp_1_1 <= nlm_row_loop_or_tmp_1;
      window_read_and_stg_3_8_sva_1 <= window_read_and_stg_1_0_sva_1 & (~ (window_read_i_2_0_lpi_1[2]));
      nlm_row_loop_equal_tmp_1 <= nlm_row_loop_equal_tmp_4;
      nlm_row_loop_equal_tmp_1_1 <= nlm_row_loop_equal_tmp_5;
      nlm_row_loop_equal_tmp_2_1 <= nlm_row_loop_equal_tmp_3;
      nlm_row_loop_nor_tmp_1_1 <= nlm_row_loop_nor_tmp_1;
      yuvdns_col_asn_sft_1_lpi_1_dfm_1 <= yuvdns_col_asn_sft_1_lpi_1_dfm_mx0;
      yuvdns_row_asn_sft_lpi_1_dfm_1 <= yuvdns_row_asn_sft_lpi_1_dfm_mx0;
      addon_loop_2_equal_tmp_1 <= addon_loop_2_equal_tmp_2_1;
      addon_loop_2_equal_tmp_1_1 <= addon_loop_2_equal_tmp_3;
      window_read_window_read_and_20_itm_1 <= MUX_s_1_2_2((~ sfi_yuvdns_land_lpi_1),
          window_read_window_read_and_6_cse, lfst_exitL_exit_nlm_row_loop_lpi_1_1_0[1]);
      window_read_window_read_nor_5_itm_1 <= MUX_s_1_2_2(yuvdns_asn_sft_lpi_1, window_read_window_read_nor_3_cse,
          lfst_exitL_exit_nlm_row_loop_lpi_1_1_0[1]);
      yuvdns_col_asn_sft_lpi_1_dfm_1 <= yuvdns_col_asn_sft_lpi_1_dfm_mx0;
      window_read_and_stg_3_5_sva_1 <= window_read_and_stg_1_1_sva_1 & (window_read_i_2_0_lpi_1[2]);
      window_read_and_stg_4_3_sva_1 <= (window_read_i_2_0_lpi_1==3'b011);
      window_read_and_stg_3_1_sva_1 <= window_read_and_stg_1_1_sva_1 & (~ (window_read_i_2_0_lpi_1[2]));
      window_read_and_stg_3_14_sva_1 <= window_read_and_stg_1_2_sva_1 & (window_read_i_2_0_lpi_1[2]);
      window_read_and_stg_3_12_sva_1 <= window_read_and_stg_1_0_sva_1 & (window_read_i_2_0_lpi_1[2]);
      window_read_and_stg_3_10_sva_1 <= window_read_and_stg_1_2_sva_1 & (~ (window_read_i_2_0_lpi_1[2]));
      addon_loop_2_and_698_itm_1 <= (window_read_acc_tmp[3]) & nlm_row_loop_equal_tmp_4
          & yuvdns_col_asn_sft_lpi_1_dfm_mx0 & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0)
          & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_and_509_itm_1 <= in_window_loop_and_stg_4_8_sva_mx0 & (in_window_loop_acc_psp_mx0_3_1[2:1]==2'b01)
          & nlm_row_loop_nlm_row_loop_nor_3_cse_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
          & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & addon_loop_2_addon_loop_2_nor_242_cse_1;
      addon_loop_2_addon_loop_2_for_nand_psp <= addon_loop_2_addon_loop_2_for_nand_psp_mx0;
      yuvdns_col_if_1_yuvdns_col_if_1_or_itm_1 <= ((readslicef_12_1_11(operator_13_false_3_acc_nl))
          & (yuvdns_row_row_lpi_1_dfm_1[2:0]==3'b100)) | (readslicef_14_1_13(operator_13_false_2_acc_nl));
      addon_loop_2_for_addon_loop_2_for_and_20_itm_1 <= MUX_s_1_2_2(window_read_window_read_and_6_cse,
          lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_2_1, or_54_cse);
      addon_loop_2_for_addon_loop_2_for_and_19_itm_1 <= MUX_s_1_2_2(window_read_window_read_and_5_cse,
          exitL_exitL_exit_nlm_row_loop_lpi_1_dfm_1, or_54_cse);
      addon_loop_2_for_addon_loop_2_for_and_18_itm_1 <= MUX_s_1_2_2(exit_nlm_row_loop_lpi_1_dfm_3,
          window_read_window_read_and_4_cse, lfst_exit_addon_loop_2_lpi_1_dfm_4_1);
      addon_loop_2_for_addon_loop_2_for_nor_2_itm_1 <= MUX1HOT_s_1_3_2(window_read_window_read_nor_3_cse,
          nlm_col_loop_1_if_nlm_col_loop_1_if_or_nl, window_read_window_read_and_2_nl,
          {lfst_exit_addon_loop_2_lpi_1_dfm_4_1 , and_dcpl_224 , and_dcpl_225});
      yuvdns_col_and_280_itm_1 <= (~ yuvdns_asn_sft_lpi_1) & yuvdns_col_and_245_tmp_1;
      yuvdns_col_and_281_m1c_1 <= yuvdns_asn_sft_lpi_1 & yuvdns_col_and_245_tmp_1;
      in_window_loop_and_stg_4_16_sva <= in_window_loop_and_stg_4_16_sva_mx0;
      in_window_loop_and_stg_4_18_sva <= in_window_loop_and_stg_4_18_sva_mx0;
      in_window_loop_and_stg_4_19_sva <= in_window_loop_and_stg_4_19_sva_mx0;
      in_window_loop_and_stg_4_20_sva <= in_window_loop_and_stg_4_20_sva_mx0;
      in_window_loop_and_stg_4_22_sva <= in_window_loop_and_stg_4_22_sva_mx0;
      in_window_loop_and_stg_4_23_sva <= in_window_loop_and_stg_4_23_sva_mx0;
      in_window_loop_and_stg_4_24_sva <= in_window_loop_and_stg_4_24_sva_mx0;
      in_window_loop_and_stg_4_25_sva <= in_window_loop_and_stg_4_25_sva_mx0;
      in_window_loop_and_stg_4_27_sva <= in_window_loop_and_stg_4_27_sva_mx0;
      in_window_loop_and_stg_4_28_sva <= in_window_loop_and_stg_4_28_sva_mx0;
      in_window_loop_and_stg_4_29_sva <= in_window_loop_and_stg_4_29_sva_mx0;
      in_window_loop_and_stg_4_31_sva <= in_window_loop_and_stg_4_31_sva_mx0;
      in_window_loop_and_stg_5_0_sva <= in_window_loop_and_stg_5_0_sva_mx0;
      in_window_loop_and_stg_4_0_sva <= in_window_loop_and_stg_4_0_sva_mx0;
      in_window_loop_and_stg_5_1_sva <= in_window_loop_and_stg_5_1_sva_mx0;
      in_window_loop_and_stg_4_1_sva <= in_window_loop_and_stg_4_1_sva_mx0;
      in_window_loop_and_stg_3_1_sva <= in_window_loop_and_stg_3_1_sva_mx0;
      in_window_loop_and_stg_5_2_sva <= in_window_loop_and_stg_5_2_sva_mx0;
      in_window_loop_and_stg_4_2_sva <= in_window_loop_and_stg_4_2_sva_mx0;
      in_window_loop_and_stg_5_3_sva <= in_window_loop_and_stg_5_3_sva_mx0;
      in_window_loop_and_stg_5_4_sva <= in_window_loop_and_stg_5_4_sva_mx0;
      in_window_loop_and_stg_4_4_sva <= in_window_loop_and_stg_4_4_sva_mx0;
      in_window_loop_and_stg_5_5_sva <= in_window_loop_and_stg_5_5_sva_mx0;
      in_window_loop_and_stg_4_5_sva <= in_window_loop_and_stg_4_5_sva_mx0;
      in_window_loop_and_stg_3_5_sva <= in_window_loop_and_stg_3_5_sva_mx0;
      in_window_loop_and_stg_5_6_sva <= in_window_loop_and_stg_5_6_sva_mx0;
      in_window_loop_and_stg_4_6_sva <= in_window_loop_and_stg_4_6_sva_mx0;
      in_window_loop_and_stg_4_7_sva <= in_window_loop_and_stg_4_7_sva_mx0;
      in_window_loop_and_stg_5_8_sva <= in_window_loop_and_stg_5_8_sva_mx0;
      in_window_loop_and_stg_4_8_sva <= in_window_loop_and_stg_4_8_sva_mx0;
      in_window_loop_and_stg_5_9_sva <= in_window_loop_and_stg_5_9_sva_mx0;
      in_window_loop_and_stg_4_9_sva <= in_window_loop_and_stg_4_9_sva_mx0;
      in_window_loop_and_stg_5_10_sva <= in_window_loop_and_stg_5_10_sva_mx0;
      in_window_loop_and_stg_4_10_sva <= in_window_loop_and_stg_4_10_sva_mx0;
      in_window_loop_and_stg_3_10_sva <= in_window_loop_and_stg_3_10_sva_mx0;
      in_window_loop_and_stg_5_11_sva <= in_window_loop_and_stg_5_11_sva_mx0;
      in_window_loop_and_stg_4_11_sva <= in_window_loop_and_stg_4_11_sva_mx0;
      in_window_loop_and_stg_5_12_sva <= in_window_loop_and_stg_5_12_sva_mx0;
      in_window_loop_and_stg_5_13_sva <= in_window_loop_and_stg_5_13_sva_mx0;
      in_window_loop_and_stg_4_13_sva <= in_window_loop_and_stg_4_13_sva_mx0;
      in_window_loop_and_stg_5_14_sva <= in_window_loop_and_stg_5_14_sva_mx0;
      in_window_loop_and_stg_4_14_sva <= in_window_loop_and_stg_4_14_sva_mx0;
      in_window_loop_and_stg_3_14_sva <= in_window_loop_and_stg_3_14_sva_mx0;
      in_window_loop_and_stg_5_15_sva <= in_window_loop_and_stg_5_15_sva_mx0;
      in_window_loop_and_stg_4_15_sva <= in_window_loop_and_stg_4_15_sva_mx0;
      addon_loop_2_and_740_itm_1 <= yuvdns_asn_sft_lpi_1 & nlm_row_loop_equal_tmp_3
          & yuvdns_col_asn_sft_lpi_1_dfm_mx0 & (~(yuvdns_col_asn_sft_1_lpi_1_dfm_mx0
          | yuvdns_row_asn_sft_lpi_1_dfm_mx0)) & addon_loop_2_or_tmp_1;
      reg_in_window_loop_acc_psp_ftd <= in_window_loop_acc_psp_mx0_3_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dst_v_rsci_idat <= 10'b0000000000;
      dst_u_rsci_idat <= 10'b0000000000;
      dst_y_rsci_idat <= 10'b0000000000;
    end
    else if ( yuvdns_col_if_1_and_20_cse ) begin
      dst_v_rsci_idat <= MUX1HOT_v_10_8_2(v_dst_t_1_lpi_1_dfm_4, addon_loop_1_addon_loop_1_mux_2_itm_1,
          vlineBuf_rsc_0_0_i_qa_d_mxwt, vlineBuf_rsc_1_0_i_qa_d_mxwt, vlineBuf_rsc_4_0_i_qa_d_mxwt,
          vlineBuf_rsc_5_0_i_qa_d_mxwt, vlineBuf_rsc_6_0_i_qa_d_mxwt, vlineBuf_rsc_7_0_i_qa_d_mxwt,
          {and_dcpl_171 , and_dcpl_173 , yuvdns_col_if_1_and_cse , yuvdns_col_if_1_and_15_cse
          , yuvdns_col_if_1_and_16_cse , yuvdns_col_if_1_and_17_cse , yuvdns_col_if_1_and_18_cse
          , yuvdns_col_if_1_and_19_cse});
      dst_u_rsci_idat <= MUX1HOT_v_10_8_2(u_dst_t_1_lpi_1_dfm_4, addon_loop_1_addon_loop_1_mux_1_itm_1,
          ulineBuf_rsc_0_0_i_qa_d_mxwt, ulineBuf_rsc_1_0_i_qa_d_mxwt, ulineBuf_rsc_4_0_i_qa_d_mxwt,
          ulineBuf_rsc_5_0_i_qa_d_mxwt, ulineBuf_rsc_6_0_i_qa_d_mxwt, ulineBuf_rsc_7_0_i_qa_d_mxwt,
          {and_dcpl_171 , and_dcpl_173 , yuvdns_col_if_1_and_cse , yuvdns_col_if_1_and_15_cse
          , yuvdns_col_if_1_and_16_cse , yuvdns_col_if_1_and_17_cse , yuvdns_col_if_1_and_18_cse
          , yuvdns_col_if_1_and_19_cse});
      dst_y_rsci_idat <= MUX1HOT_v_10_8_2(y_dst_t_1_lpi_1_dfm_4, addon_loop_1_addon_loop_1_mux_itm_1,
          ylineBuf_rsc_0_0_i_qa_d_mxwt, ylineBuf_rsc_1_0_i_qa_d_mxwt, ylineBuf_rsc_4_0_i_qa_d_mxwt,
          ylineBuf_rsc_5_0_i_qa_d_mxwt, ylineBuf_rsc_6_0_i_qa_d_mxwt, ylineBuf_rsc_7_0_i_qa_d_mxwt,
          {and_dcpl_171 , and_dcpl_173 , yuvdns_col_if_1_and_cse , yuvdns_col_if_1_and_15_cse
          , yuvdns_col_if_1_and_16_cse , yuvdns_col_if_1_and_17_cse , yuvdns_col_if_1_and_18_cse
          , yuvdns_col_if_1_and_19_cse});
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      v_dst_t_1_lpi_1 <= 10'b0000000000;
      u_dst_t_1_lpi_1 <= 10'b0000000000;
      y_dst_t_1_lpi_1 <= 10'b0000000000;
    end
    else if ( v_dst_t_and_cse ) begin
      v_dst_t_1_lpi_1 <= v_dst_t_1_lpi_1_dfm_4;
      u_dst_t_1_lpi_1 <= u_dst_t_1_lpi_1_dfm_4;
      y_dst_t_1_lpi_1 <= y_dst_t_1_lpi_1_dfm_4;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_7_1_lpi_1 <= 10'b0000000000;
      uWindow_7_1_lpi_1 <= 10'b0000000000;
      yWindow_7_1_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_cse ) begin
      vWindow_7_1_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_7_1_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_7_1_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_7_2_lpi_1 <= 10'b0000000000;
      uWindow_7_2_lpi_1 <= 10'b0000000000;
      yWindow_7_2_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_1_cse ) begin
      vWindow_7_2_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_7_2_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_7_2_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_7_3_lpi_1 <= 10'b0000000000;
      uWindow_7_3_lpi_1 <= 10'b0000000000;
      yWindow_7_3_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_2_cse ) begin
      vWindow_7_3_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_7_3_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_7_3_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_7_4_lpi_1 <= 10'b0000000000;
      uWindow_7_4_lpi_1 <= 10'b0000000000;
      yWindow_7_4_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_3_cse ) begin
      vWindow_7_4_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_7_4_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_7_4_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_7_5_lpi_1 <= 10'b0000000000;
      uWindow_7_5_lpi_1 <= 10'b0000000000;
      yWindow_7_5_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_4_cse ) begin
      vWindow_7_5_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_7_5_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_7_5_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_7_6_lpi_1 <= 10'b0000000000;
      uWindow_7_6_lpi_1 <= 10'b0000000000;
      yWindow_7_6_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_5_cse ) begin
      vWindow_7_6_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_7_6_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_7_6_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_7_7_lpi_1 <= 10'b0000000000;
      uWindow_7_7_lpi_1 <= 10'b0000000000;
      yWindow_7_7_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_6_cse ) begin
      vWindow_7_7_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_7_7_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_7_7_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_2_0_lpi_1 <= 10'b0000000000;
      uWindow_2_0_lpi_1 <= 10'b0000000000;
      yWindow_2_0_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_7_cse ) begin
      vWindow_2_0_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_2_0_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_2_0_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_2_1_lpi_1 <= 10'b0000000000;
      uWindow_2_1_lpi_1 <= 10'b0000000000;
      yWindow_2_1_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_8_cse ) begin
      vWindow_2_1_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_2_1_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_2_1_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_2_2_lpi_1 <= 10'b0000000000;
      uWindow_2_2_lpi_1 <= 10'b0000000000;
      yWindow_2_2_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_9_cse ) begin
      vWindow_2_2_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_2_2_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_2_2_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_2_3_lpi_1 <= 10'b0000000000;
      uWindow_2_3_lpi_1 <= 10'b0000000000;
      yWindow_2_3_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_10_cse ) begin
      vWindow_2_3_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_2_3_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_2_3_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_2_4_lpi_1 <= 10'b0000000000;
      uWindow_2_4_lpi_1 <= 10'b0000000000;
      yWindow_2_4_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_11_cse ) begin
      vWindow_2_4_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_2_4_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_2_4_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_2_5_lpi_1 <= 10'b0000000000;
      uWindow_2_5_lpi_1 <= 10'b0000000000;
      yWindow_2_5_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_12_cse ) begin
      vWindow_2_5_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_2_5_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_2_5_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_2_6_lpi_1 <= 10'b0000000000;
      uWindow_2_6_lpi_1 <= 10'b0000000000;
      yWindow_2_6_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_13_cse ) begin
      vWindow_2_6_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_2_6_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_2_6_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_2_7_lpi_1 <= 10'b0000000000;
      uWindow_2_7_lpi_1 <= 10'b0000000000;
      yWindow_2_7_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_14_cse ) begin
      vWindow_2_7_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_2_7_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_2_7_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_3_0_lpi_1 <= 10'b0000000000;
      uWindow_3_0_lpi_1 <= 10'b0000000000;
      yWindow_3_0_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_15_cse ) begin
      vWindow_3_0_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_3_0_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_3_0_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_3_1_lpi_1 <= 10'b0000000000;
      uWindow_3_1_lpi_1 <= 10'b0000000000;
      yWindow_3_1_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_16_cse ) begin
      vWindow_3_1_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_3_1_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_3_1_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_3_2_lpi_1 <= 10'b0000000000;
      uWindow_3_2_lpi_1 <= 10'b0000000000;
      yWindow_3_2_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_17_cse ) begin
      vWindow_3_2_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_3_2_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_3_2_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_3_3_lpi_1 <= 10'b0000000000;
      uWindow_3_3_lpi_1 <= 10'b0000000000;
      yWindow_3_3_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_18_cse ) begin
      vWindow_3_3_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_3_3_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_3_3_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_3_4_lpi_1 <= 10'b0000000000;
      uWindow_3_4_lpi_1 <= 10'b0000000000;
      yWindow_3_4_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_19_cse ) begin
      vWindow_3_4_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_3_4_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_3_4_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_3_5_lpi_1 <= 10'b0000000000;
      uWindow_3_5_lpi_1 <= 10'b0000000000;
      yWindow_3_5_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_20_cse ) begin
      vWindow_3_5_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_3_5_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_3_5_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_3_6_lpi_1 <= 10'b0000000000;
      uWindow_3_6_lpi_1 <= 10'b0000000000;
      yWindow_3_6_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_21_cse ) begin
      vWindow_3_6_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_3_6_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_3_6_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_3_7_lpi_1 <= 10'b0000000000;
      uWindow_3_7_lpi_1 <= 10'b0000000000;
      yWindow_3_7_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_22_cse ) begin
      vWindow_3_7_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_3_7_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_3_7_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_4_0_lpi_1 <= 10'b0000000000;
      uWindow_4_0_lpi_1 <= 10'b0000000000;
      yWindow_4_0_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_23_cse ) begin
      vWindow_4_0_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_4_0_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_4_0_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_4_1_lpi_1 <= 10'b0000000000;
      uWindow_4_1_lpi_1 <= 10'b0000000000;
      yWindow_4_1_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_24_cse ) begin
      vWindow_4_1_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_4_1_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_4_1_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_4_2_lpi_1 <= 10'b0000000000;
      uWindow_4_2_lpi_1 <= 10'b0000000000;
      yWindow_4_2_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_25_cse ) begin
      vWindow_4_2_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_4_2_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_4_2_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_4_3_lpi_1 <= 10'b0000000000;
      uWindow_4_3_lpi_1 <= 10'b0000000000;
      yWindow_4_3_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_26_cse ) begin
      vWindow_4_3_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_4_3_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_4_3_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_4_5_lpi_1 <= 10'b0000000000;
      uWindow_4_5_lpi_1 <= 10'b0000000000;
      yWindow_4_5_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_27_cse ) begin
      vWindow_4_5_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_4_5_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_4_5_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_4_6_lpi_1 <= 10'b0000000000;
      uWindow_4_6_lpi_1 <= 10'b0000000000;
      yWindow_4_6_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_28_cse ) begin
      vWindow_4_6_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_4_6_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_4_6_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_4_7_lpi_1 <= 10'b0000000000;
      uWindow_4_7_lpi_1 <= 10'b0000000000;
      yWindow_4_7_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_29_cse ) begin
      vWindow_4_7_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_4_7_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_4_7_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_5_0_lpi_1 <= 10'b0000000000;
      uWindow_5_0_lpi_1 <= 10'b0000000000;
      yWindow_5_0_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_30_cse ) begin
      vWindow_5_0_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_5_0_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_5_0_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_5_1_lpi_1 <= 10'b0000000000;
      uWindow_5_1_lpi_1 <= 10'b0000000000;
      yWindow_5_1_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_31_cse ) begin
      vWindow_5_1_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_5_1_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_5_1_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_5_2_lpi_1 <= 10'b0000000000;
      uWindow_5_2_lpi_1 <= 10'b0000000000;
      yWindow_5_2_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_32_cse ) begin
      vWindow_5_2_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_5_2_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_5_2_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_5_3_lpi_1 <= 10'b0000000000;
      uWindow_5_3_lpi_1 <= 10'b0000000000;
      yWindow_5_3_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_33_cse ) begin
      vWindow_5_3_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_5_3_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_5_3_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_5_4_lpi_1 <= 10'b0000000000;
      uWindow_5_4_lpi_1 <= 10'b0000000000;
      yWindow_5_4_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_34_cse ) begin
      vWindow_5_4_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_5_4_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_5_4_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_5_5_lpi_1 <= 10'b0000000000;
      uWindow_5_5_lpi_1 <= 10'b0000000000;
      yWindow_5_5_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_35_cse ) begin
      vWindow_5_5_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_5_5_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_5_5_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_5_6_lpi_1 <= 10'b0000000000;
      uWindow_5_6_lpi_1 <= 10'b0000000000;
      yWindow_5_6_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_36_cse ) begin
      vWindow_5_6_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_5_6_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_5_6_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_5_7_lpi_1 <= 10'b0000000000;
      uWindow_5_7_lpi_1 <= 10'b0000000000;
      yWindow_5_7_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_37_cse ) begin
      vWindow_5_7_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_5_7_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_5_7_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_6_0_lpi_1 <= 10'b0000000000;
      uWindow_6_0_lpi_1 <= 10'b0000000000;
      yWindow_6_0_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_38_cse ) begin
      vWindow_6_0_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_6_0_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_6_0_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_6_1_lpi_1 <= 10'b0000000000;
      uWindow_6_1_lpi_1 <= 10'b0000000000;
      yWindow_6_1_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_39_cse ) begin
      vWindow_6_1_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_6_1_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_6_1_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_6_2_lpi_1 <= 10'b0000000000;
      uWindow_6_2_lpi_1 <= 10'b0000000000;
      yWindow_6_2_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_40_cse ) begin
      vWindow_6_2_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_6_2_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_6_2_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_6_3_lpi_1 <= 10'b0000000000;
      uWindow_6_3_lpi_1 <= 10'b0000000000;
      yWindow_6_3_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_41_cse ) begin
      vWindow_6_3_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_6_3_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_6_3_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_6_4_lpi_1 <= 10'b0000000000;
      uWindow_6_4_lpi_1 <= 10'b0000000000;
      yWindow_6_4_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_42_cse ) begin
      vWindow_6_4_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_6_4_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_6_4_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_6_5_lpi_1 <= 10'b0000000000;
      uWindow_6_5_lpi_1 <= 10'b0000000000;
      yWindow_6_5_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_43_cse ) begin
      vWindow_6_5_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_6_5_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_6_5_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_6_6_lpi_1 <= 10'b0000000000;
      uWindow_6_6_lpi_1 <= 10'b0000000000;
      yWindow_6_6_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_44_cse ) begin
      vWindow_6_6_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_6_6_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_6_6_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_6_7_lpi_1 <= 10'b0000000000;
      uWindow_6_7_lpi_1 <= 10'b0000000000;
      yWindow_6_7_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_45_cse ) begin
      vWindow_6_7_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_6_7_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_6_7_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_7_0_lpi_1 <= 10'b0000000000;
      uWindow_7_0_lpi_1 <= 10'b0000000000;
      yWindow_7_0_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_46_cse ) begin
      vWindow_7_0_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_7_0_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      yWindow_7_0_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      yWindow_8_0_lpi_1 <= 10'b0000000000;
      uWindow_8_0_lpi_1 <= 10'b0000000000;
      vWindow_8_0_lpi_1 <= 10'b0000000000;
    end
    else if ( yWindow_and_47_cse ) begin
      yWindow_8_0_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_8_0_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      vWindow_8_0_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      yWindow_8_1_lpi_1 <= 10'b0000000000;
      uWindow_8_1_lpi_1 <= 10'b0000000000;
      vWindow_8_1_lpi_1 <= 10'b0000000000;
    end
    else if ( yWindow_and_48_cse ) begin
      yWindow_8_1_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_8_1_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      vWindow_8_1_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      yWindow_8_2_lpi_1 <= 10'b0000000000;
      uWindow_8_2_lpi_1 <= 10'b0000000000;
      vWindow_8_2_lpi_1 <= 10'b0000000000;
    end
    else if ( yWindow_and_49_cse ) begin
      yWindow_8_2_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_8_2_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      vWindow_8_2_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      yWindow_8_3_lpi_1 <= 10'b0000000000;
      uWindow_8_3_lpi_1 <= 10'b0000000000;
      vWindow_8_3_lpi_1 <= 10'b0000000000;
    end
    else if ( yWindow_and_50_cse ) begin
      yWindow_8_3_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_8_3_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      vWindow_8_3_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      yWindow_8_4_lpi_1 <= 10'b0000000000;
      uWindow_8_4_lpi_1 <= 10'b0000000000;
      vWindow_8_4_lpi_1 <= 10'b0000000000;
    end
    else if ( yWindow_and_51_cse ) begin
      yWindow_8_4_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_8_4_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      vWindow_8_4_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      yWindow_8_5_lpi_1 <= 10'b0000000000;
      uWindow_8_5_lpi_1 <= 10'b0000000000;
      vWindow_8_5_lpi_1 <= 10'b0000000000;
    end
    else if ( yWindow_and_52_cse ) begin
      yWindow_8_5_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_8_5_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      vWindow_8_5_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      yWindow_8_6_lpi_1 <= 10'b0000000000;
      uWindow_8_6_lpi_1 <= 10'b0000000000;
      vWindow_8_6_lpi_1 <= 10'b0000000000;
    end
    else if ( yWindow_and_53_cse ) begin
      yWindow_8_6_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_8_6_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      vWindow_8_6_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      yWindow_8_7_lpi_1 <= 10'b0000000000;
      uWindow_8_7_lpi_1 <= 10'b0000000000;
      vWindow_8_7_lpi_1 <= 10'b0000000000;
    end
    else if ( yWindow_and_54_cse ) begin
      yWindow_8_7_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_8_7_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      vWindow_8_7_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      yWindow_1_7_lpi_1 <= 10'b0000000000;
      uWindow_1_7_lpi_1 <= 10'b0000000000;
      vWindow_1_7_lpi_1 <= 10'b0000000000;
    end
    else if ( yWindow_and_55_cse ) begin
      yWindow_1_7_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_1_7_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      vWindow_1_7_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      yWindow_1_0_lpi_1 <= 10'b0000000000;
      uWindow_1_0_lpi_1 <= 10'b0000000000;
      vWindow_1_0_lpi_1 <= 10'b0000000000;
    end
    else if ( yWindow_and_56_cse ) begin
      yWindow_1_0_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_1_0_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      vWindow_1_0_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      yWindow_1_1_lpi_1 <= 10'b0000000000;
      uWindow_1_1_lpi_1 <= 10'b0000000000;
      vWindow_1_1_lpi_1 <= 10'b0000000000;
    end
    else if ( yWindow_and_57_cse ) begin
      yWindow_1_1_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_1_1_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      vWindow_1_1_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      yWindow_1_2_lpi_1 <= 10'b0000000000;
      uWindow_1_2_lpi_1 <= 10'b0000000000;
      vWindow_1_2_lpi_1 <= 10'b0000000000;
    end
    else if ( yWindow_and_58_cse ) begin
      yWindow_1_2_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_1_2_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      vWindow_1_2_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      yWindow_1_3_lpi_1 <= 10'b0000000000;
      uWindow_1_3_lpi_1 <= 10'b0000000000;
      vWindow_1_3_lpi_1 <= 10'b0000000000;
    end
    else if ( yWindow_and_59_cse ) begin
      yWindow_1_3_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_1_3_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      vWindow_1_3_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      yWindow_1_4_lpi_1 <= 10'b0000000000;
      uWindow_1_4_lpi_1 <= 10'b0000000000;
      vWindow_1_4_lpi_1 <= 10'b0000000000;
    end
    else if ( yWindow_and_60_cse ) begin
      yWindow_1_4_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_1_4_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      vWindow_1_4_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      yWindow_1_5_lpi_1 <= 10'b0000000000;
      uWindow_1_5_lpi_1 <= 10'b0000000000;
      vWindow_1_5_lpi_1 <= 10'b0000000000;
    end
    else if ( yWindow_and_61_cse ) begin
      yWindow_1_5_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_1_5_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      vWindow_1_5_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      yWindow_1_6_lpi_1 <= 10'b0000000000;
      uWindow_1_6_lpi_1 <= 10'b0000000000;
      vWindow_1_6_lpi_1 <= 10'b0000000000;
    end
    else if ( yWindow_and_62_cse ) begin
      yWindow_1_6_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_1_6_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      vWindow_1_6_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      yWindow_0_0_lpi_1 <= 10'b0000000000;
      uWindow_0_0_lpi_1 <= 10'b0000000000;
      vWindow_0_0_lpi_1 <= 10'b0000000000;
    end
    else if ( yWindow_and_cse ) begin
      yWindow_0_0_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_0_0_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      vWindow_0_0_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      yWindow_0_1_lpi_1 <= 10'b0000000000;
      uWindow_0_1_lpi_1 <= 10'b0000000000;
      vWindow_0_1_lpi_1 <= 10'b0000000000;
    end
    else if ( yWindow_and_63_cse ) begin
      yWindow_0_1_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_0_1_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      vWindow_0_1_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      yWindow_0_2_lpi_1 <= 10'b0000000000;
      uWindow_0_2_lpi_1 <= 10'b0000000000;
      vWindow_0_2_lpi_1 <= 10'b0000000000;
    end
    else if ( yWindow_and_64_cse ) begin
      yWindow_0_2_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_0_2_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      vWindow_0_2_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      yWindow_0_3_lpi_1 <= 10'b0000000000;
      uWindow_0_3_lpi_1 <= 10'b0000000000;
      vWindow_0_3_lpi_1 <= 10'b0000000000;
    end
    else if ( yWindow_and_65_cse ) begin
      yWindow_0_3_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_0_3_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      vWindow_0_3_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      yWindow_0_4_lpi_1 <= 10'b0000000000;
      uWindow_0_4_lpi_1 <= 10'b0000000000;
      vWindow_0_4_lpi_1 <= 10'b0000000000;
    end
    else if ( yWindow_and_66_cse ) begin
      yWindow_0_4_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_0_4_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      vWindow_0_4_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      yWindow_0_5_lpi_1 <= 10'b0000000000;
      uWindow_0_5_lpi_1 <= 10'b0000000000;
      vWindow_0_5_lpi_1 <= 10'b0000000000;
    end
    else if ( yWindow_and_67_cse ) begin
      yWindow_0_5_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_0_5_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      vWindow_0_5_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      yWindow_0_6_lpi_1 <= 10'b0000000000;
      uWindow_0_6_lpi_1 <= 10'b0000000000;
      vWindow_0_6_lpi_1 <= 10'b0000000000;
    end
    else if ( yWindow_and_68_cse ) begin
      yWindow_0_6_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_0_6_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      vWindow_0_6_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      yWindow_0_7_lpi_1 <= 10'b0000000000;
      uWindow_0_7_lpi_1 <= 10'b0000000000;
      vWindow_0_7_lpi_1 <= 10'b0000000000;
    end
    else if ( yWindow_and_69_cse ) begin
      yWindow_0_7_lpi_1 <= in_window_loop_in_window_loop_slc_yWindow_10_9_0_1_ctmp_sva_1_1;
      uWindow_0_7_lpi_1 <= in_window_loop_in_window_loop_slc_uWindow_10_9_0_1_ctmp_sva_1_1;
      vWindow_0_7_lpi_1 <= in_window_loop_in_window_loop_slc_vWindow_10_9_0_1_ctmp_sva_1_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      v_t_lpi_1 <= 10'b0000000000;
      u_t_lpi_1 <= 10'b0000000000;
      y_t_lpi_1 <= 10'b0000000000;
    end
    else if ( v_t_and_cse ) begin
      v_t_lpi_1 <= src_v_rsci_idat_mxwt;
      u_t_lpi_1 <= src_u_rsci_idat_mxwt;
      y_t_lpi_1 <= src_y_rsci_idat_mxwt;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lfst_exitL_exit_nlm_row_loop_lpi_1_2 <= 1'b0;
      lfst_exitL_exit_nlm_row_loop_lpi_1_1_0 <= 2'b00;
    end
    else if ( nlm_row_loop_and_266_cse ) begin
      lfst_exitL_exit_nlm_row_loop_lpi_1_2 <= lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_5_2_1;
      lfst_exitL_exit_nlm_row_loop_lpi_1_1_0 <= lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_5_1_0_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      sfi_yuvdns_reg_eb_lpi_1 <= 1'b0;
      lfst_exitL_exitL_exitL_exit_nlm_row_loop_lpi_1 <= 1'b0;
      exitL_exitL_exitL_exitL_exit_nlm_row_loop_lpi_1 <= 1'b0;
      lfst_exit_yuvdns_col_lpi_1 <= 1'b0;
    end
    else if ( yuvdns_reg_eb_and_cse ) begin
      sfi_yuvdns_reg_eb_lpi_1 <= sfi_yuvdns_reg_eb_lpi_1 & yuvdns_col_asn_sft_1_lpi_1_dfm_mx0;
      lfst_exitL_exitL_exitL_exit_nlm_row_loop_lpi_1 <= ~ exitL_exitL_exitL_exit_nlm_row_loop_lpi_1_dfm_1;
      exitL_exitL_exitL_exitL_exit_nlm_row_loop_lpi_1 <= exitL_exitL_exitL_exit_nlm_row_loop_lpi_1_dfm_1;
      lfst_exit_yuvdns_col_lpi_1 <= ~ exit_yuvdns_col_lpi_1_dfm_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lfst_exitL_exitL_exit_nlm_row_loop_lpi_1 <= 1'b0;
    end
    else if ( core_wen & (~(yuvdns_col_asn_sft_1_lpi_1_dfm_mx0 | yuvdns_row_asn_sft_lpi_1_dfm_mx0
        | lfst_exit_addon_loop_2_lpi_1_dfm_1_1)) ) begin
      lfst_exitL_exitL_exit_nlm_row_loop_lpi_1 <= ~ exitL_exitL_exit_nlm_row_loop_lpi_1_dfm_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      sfi_exit_yuvdns_col_lpi_1 <= 1'b0;
      lfst_exitL_exit_yuvdns_col_lpi_1 <= 1'b0;
      exitL_exitL_exit_yuvdns_col_lpi_1 <= 1'b0;
    end
    else if ( yuvdns_col_and_cse ) begin
      sfi_exit_yuvdns_col_lpi_1 <= sfi_exit_yuvdns_col_lpi_1 & yuvdns_row_asn_sft_lpi_1_dfm_mx0;
      lfst_exitL_exit_yuvdns_col_lpi_1 <= ~ exitL_exit_yuvdns_col_lpi_1_dfm_1;
      exitL_exitL_exit_yuvdns_col_lpi_1 <= exitL_exit_yuvdns_col_lpi_1_dfm_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      window_read_i_2_0_lpi_1 <= 3'b000;
    end
    else if ( core_wen & ((nlm_row_loop_or_tmp_1 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
        & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & (~ addon_loop_2_or_578_tmp_1))
        | yuvdns_col_and_266_cse_1) ) begin
      window_read_i_2_0_lpi_1 <= MUX_v_3_2_2(out_window_loop_out_window_loop_and_1_nl,
          (window_read_acc_tmp[2:0]), yuvdns_col_and_266_cse_1);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lines_read_i_2_0_lpi_1 <= 3'b000;
    end
    else if ( core_wen & (yuvdns_col_and_266_cse_1 | yuvdns_col_and_268_rgt) ) begin
      lines_read_i_2_0_lpi_1 <= MUX_v_3_2_2(window_read_window_read_and_21_nl, lines_read_i_2_0_sva_2,
          yuvdns_col_and_268_rgt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      nlm_col_loop_2_i_lpi_1_2_0 <= 3'b000;
      nlm_col_loop_1_i_lpi_1_2_0 <= 3'b000;
      nlm_col_loop_i_lpi_1_2_0 <= 3'b000;
    end
    else if ( nlm_col_loop_2_i_and_cse ) begin
      nlm_col_loop_2_i_lpi_1_2_0 <= MUX_v_3_2_2((nlm_col_loop_2_acc_tmp[2:0]), 3'b001,
          addon_loop_2_asn_875);
      nlm_col_loop_1_i_lpi_1_2_0 <= MUX_v_3_2_2((nlm_col_loop_1_acc_tmp[2:0]), 3'b001,
          addon_loop_2_asn_875);
      nlm_col_loop_i_lpi_1_2_0 <= MUX_v_3_2_2((nlm_col_loop_acc_tmp[2:0]), 3'b001,
          addon_loop_2_asn_875);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lfst_exit_nlm_row_loop_lpi_1 <= 1'b0;
    end
    else if ( core_wen & yuvdns_asn_sft_lpi_1 & nlm_row_loop_equal_tmp_3 & yuvdns_col_asn_sft_lpi_1_dfm_mx0
        & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0) & (~ yuvdns_row_asn_sft_lpi_1_dfm_mx0)
        & (~ lfst_exit_addon_loop_2_lpi_1_dfm_1_1) ) begin
      lfst_exit_nlm_row_loop_lpi_1 <= ~ exit_nlm_row_loop_lpi_1_dfm_3;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      sfi_yuvdns_land_lpi_1 <= 1'b0;
    end
    else if ( core_wen & (~((~ yuvdns_col_asn_sft_lpi_1_dfm_mx0) | yuvdns_col_asn_sft_1_lpi_1_dfm_mx0
        | yuvdns_row_asn_sft_lpi_1_dfm_mx0 | lfst_exit_addon_loop_2_lpi_1_dfm_1_1))
        ) begin
      sfi_yuvdns_land_lpi_1 <= nlm_row_loop_mux_28_nl & (~ nlm_row_loop_equal_tmp_3);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      nlm_row_loop_2_j_lpi_1_2_0 <= 3'b000;
      nlm_row_loop_1_j_lpi_1_2_0 <= 3'b000;
      nlm_row_loop_j_lpi_1_2_0 <= 3'b000;
    end
    else if ( nlm_row_loop_2_j_and_cse ) begin
      nlm_row_loop_2_j_lpi_1_2_0 <= MUX_v_3_2_2(3'b001, (nlm_row_loop_2_acc_tmp[2:0]),
          addon_loop_2_asn_881);
      nlm_row_loop_1_j_lpi_1_2_0 <= MUX_v_3_2_2(3'b001, (nlm_row_loop_1_acc_tmp[2:0]),
          addon_loop_2_asn_881);
      nlm_row_loop_j_lpi_1_2_0 <= MUX_v_3_2_2(3'b001, (nlm_row_loop_acc_tmp[2:0]),
          addon_loop_2_asn_881);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      yuvdns_asn_sft_lpi_1 <= 1'b0;
    end
    else if ( core_wen & (~ operator_4_false_3_acc_itm_3_1) & nlm_row_loop_equal_tmp_5
        & yuvdns_col_asn_sft_lpi_1_dfm_mx0 & (~ yuvdns_col_asn_sft_1_lpi_1_dfm_mx0)
        & (~ yuvdns_row_asn_sft_lpi_1_dfm_mx0) & (~ lfst_exit_addon_loop_2_lpi_1_dfm_1_1)
        ) begin
      yuvdns_asn_sft_lpi_1 <= (z_out_9[10]) & (z_out_10[10]);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      out_window_loop_i_lpi_1 <= 4'b0000;
    end
    else if ( core_wen & (((~ nlm_row_loop_or_547_tmp_1) & yuvdns_col_and_312_tmp_1
        & (~ addon_loop_2_or_578_tmp_1)) | yuvdns_col_and_323_rgt) ) begin
      out_window_loop_i_lpi_1 <= MUX_v_4_2_2(out_window_loop_i_sva_2, out_window_loop_i_lpi_1_dfm_1,
          yuvdns_col_and_323_rgt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      yuvdns_col_asn_sft_lpi_1 <= 1'b0;
    end
    else if ( core_wen & (~(lfst_exitL_exitL_exit_nlm_row_loop_lpi_1_dfm_1 | yuvdns_col_asn_sft_1_lpi_1_dfm_mx0
        | yuvdns_row_asn_sft_lpi_1_dfm_mx0 | lfst_exit_addon_loop_2_lpi_1_dfm_1_1))
        ) begin
      yuvdns_col_asn_sft_lpi_1 <= yuvdns_reg_eb;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      yuvdns_col_asn_sft_1_lpi_1 <= 1'b0;
    end
    else if ( core_wen & ((~ lfst_exitL_exitL_exitL_exit_nlm_row_loop_lpi_1_dfm_1)
        | yuvdns_row_asn_sft_lpi_1_dfm_mx0) ) begin
      yuvdns_col_asn_sft_1_lpi_1 <= exit_yuvdns_col_lpi_1_dfm_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      yuvdns_row_asn_sft_lpi_1 <= 1'b0;
    end
    else if ( core_wen & (~ lfst_exitL_exit_yuvdns_col_lpi_1_dfm_1) ) begin
      yuvdns_row_asn_sft_lpi_1 <= exit_yuvdns_row_lpi_1_dfm_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vWindow_8_8_lpi_1 <= 10'b0000000000;
      uWindow_8_8_lpi_1 <= 10'b0000000000;
      yWindow_8_8_lpi_1 <= 10'b0000000000;
    end
    else if ( vWindow_and_73_cse ) begin
      vWindow_8_8_lpi_1 <= v_t_lpi_1_dfm_1_mx0;
      uWindow_8_8_lpi_1 <= u_t_lpi_1_dfm_1_mx0;
      yWindow_8_8_lpi_1 <= y_t_lpi_1_dfm_1_mx0;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      addon_loop_1_i_lpi_1_1_0 <= 2'b00;
    end
    else if ( core_wen & (addon_loop_1_i_addon_loop_1_i_nor_rgt | addon_loop_1_i_or_rgt
        | addon_loop_1_i_and_3_rgt) ) begin
      addon_loop_1_i_lpi_1_1_0 <= MUX1HOT_v_2_3_2((signext_2_1(~ exit_yuvdns_row_lpi_1_dfm_1)),
          (addon_loop_1_acc_6_tmp[1:0]), (signext_2_1(~ (addon_loop_1_acc_6_tmp[2]))),
          {addon_loop_1_i_addon_loop_1_i_nor_rgt , addon_loop_1_i_or_rgt , addon_loop_1_i_and_3_rgt});
    end
  end
  assign nor_114_nl = ~(lfst_exit_addon_loop_2_lpi_1_dfm_st_2_1 | (~ addon_loop_2_for_addon_loop_2_for_and_20_itm_2)
      | (~ yuvdns_col_if_1_yuvdns_col_if_1_or_itm_2) | reg_yuvdns_col_asn_sft_1_lpi_1_dfm_2_cse
      | reg_yuvdns_row_asn_sft_lpi_1_dfm_st_2_cse);
  assign mux_123_nl = MUX_s_1_2_2(or_tmp_108, nor_114_nl, lfst_exit_addon_loop_2_lpi_1_dfm_st_2_0);
  assign mux_124_nl = MUX_s_1_2_2(mux_123_nl, or_tmp_108, addon_loop_2_for_slc_13_svs_st_2);
  assign asn_nlm_col_loop_if_else_1_mux_itm_1_nand_nl = ~((~((yuvdns_reg_yH2==14'b00000000000000)))
      & nlm_col_loop_if_else_1_if_acc_itm_21_1);
  assign or_228_nl = and_dcpl_201 | (~ nlm_col_loop_1_if_else_1_if_acc_itm_21_1);
  assign or_230_nl = and_dcpl_201 | (~ nlm_col_loop_2_if_else_1_if_acc_itm_21_1);
  assign and_227_nl = (lfst_exitL_exit_nlm_row_loop_lpi_1_dfm_st_1_1_0[1]) & (~ lfst_exit_addon_loop_2_lpi_1_dfm_st_1_1);
  assign yuvdns_col_if_yuvdns_col_if_yuvdns_col_if_yuvdns_col_if_nand_nl = ~(lines_read_or_tmp_1
      & (~ (yuvdns_col_col_lpi_1_dfm_1[12])));
  assign nl_operator_4_false_5_acc_nl = ({1'b1 , nlm_col_loop_i_lpi_1_dfm_2_0_mx0})
      + nlm_row_loop_acc_tmp;
  assign operator_4_false_5_acc_nl = nl_operator_4_false_5_acc_nl[3:0];
  assign nl_nlm_col_loop_if_nlm_col_loop_if_acc_12_itm_1  = conv_s2u_4_7(operator_4_false_5_acc_nl)
      + ({nlm_row_loop_acc_tmp , 3'b111});
  assign nl_nlm_col_loop_if_nlm_col_loop_if_acc_10_itm_1  = conv_u2u_4_7(z_out_4)
      + conv_u2u_6_7({nlm_row_loop_j_lpi_1_dfm_2_0_mx0 , 3'b001});
  assign nl_operator_4_false_4_acc_nl = ({1'b1 , nlm_row_loop_j_lpi_1_dfm_2_0_mx0})
      + conv_u2s_3_4(nlm_col_loop_i_lpi_1_dfm_2_0_mx0);
  assign operator_4_false_4_acc_nl = nl_operator_4_false_4_acc_nl[3:0];
  assign nl_nlm_col_loop_if_nlm_col_loop_if_acc_6_itm_1  = conv_s2u_4_7(operator_4_false_4_acc_nl)
      + conv_u2u_6_7({nlm_row_loop_j_lpi_1_dfm_2_0_mx0 , 3'b111});
  assign nl_nlm_col_loop_if_nlm_col_loop_if_acc_4_itm_1  = conv_u2u_4_6(nlm_col_loop_if_acc_31_sdt_1)
      + ({(z_out_7[2:0]) , 3'b001});
  assign nl_nlm_col_loop_if_acc_41_itm_1  = conv_u2u_1_3(nlm_col_loop_if_acc_31_sdt_1[3])
      + (z_out_7[2:0]);
  assign nl_operator_4_false_1_acc_nl = ({1'b1 , nlm_col_loop_i_lpi_1_dfm_2_0_mx0})
      + conv_u2s_3_4(z_out_7[2:0]);
  assign operator_4_false_1_acc_nl = nl_operator_4_false_1_acc_nl[3:0];
  assign nl_nlm_col_loop_if_nlm_col_loop_if_acc_itm_1  = conv_s2u_4_6(operator_4_false_1_acc_nl)
      + ({(z_out_7[2:0]) , 3'b111});
  assign nl_nlm_col_loop_1_if_acc_42_itm_1  = conv_u2u_1_4(nlm_col_loop_1_if_acc_32_sdt_1[3])
      + conv_u2u_3_4(nlm_row_loop_1_j_lpi_1_dfm_2_0_mx0);
  assign nl_nlm_col_loop_2_if_nlm_col_loop_2_if_acc_16_itm_1  = conv_u2u_4_7(nlm_col_loop_2_if_acc_33_sdt_3_0_1)
      + ({nlm_row_loop_2_acc_tmp , 3'b001});
  assign nl_nlm_col_loop_2_if_acc_43_itm_1  = conv_u2u_1_4(nlm_col_loop_2_if_acc_33_sdt_3_0_1[3])
      + nlm_row_loop_2_acc_tmp;
  assign nl_operator_4_false_17_acc_nl = ({1'b1 , nlm_col_loop_2_i_lpi_1_dfm_2_0_mx0})
      + nlm_row_loop_2_acc_tmp;
  assign operator_4_false_17_acc_nl = nl_operator_4_false_17_acc_nl[3:0];
  assign nl_nlm_col_loop_2_if_nlm_col_loop_2_if_acc_12_itm_1  = conv_s2u_4_7(operator_4_false_17_acc_nl)
      + ({nlm_row_loop_2_acc_tmp , 3'b111});
  assign nl_nlm_col_loop_2_if_nlm_col_loop_2_if_acc_10_nl = conv_u2u_4_7(nlm_col_loop_2_if_acc_32_sdt_1)
      + conv_u2u_6_7({nlm_row_loop_2_j_lpi_1_dfm_2_0_mx0 , 3'b001});
  assign nlm_col_loop_2_if_nlm_col_loop_2_if_acc_10_nl = nl_nlm_col_loop_2_if_nlm_col_loop_2_if_acc_10_nl[6:0];
  assign or_421_nl = or_dcpl_202 | or_dcpl_196 | sfi_yuvdns_reg_eb_lpi_1 | (~ lfst_exitL_exit_nlm_row_loop_lpi_1_2);
  assign nl_nlm_col_loop_2_if_acc_42_itm_1  = conv_u2u_1_4(nlm_col_loop_2_if_acc_32_sdt_1[3])
      + conv_u2u_3_4(nlm_row_loop_2_j_lpi_1_dfm_2_0_mx0);
  assign nl_operator_4_false_16_acc_nl = ({1'b1 , nlm_row_loop_2_j_lpi_1_dfm_2_0_mx0})
      + conv_u2s_3_4(nlm_col_loop_2_i_lpi_1_dfm_2_0_mx0);
  assign operator_4_false_16_acc_nl = nl_operator_4_false_16_acc_nl[3:0];
  assign nl_nlm_col_loop_2_if_nlm_col_loop_2_if_acc_6_itm_1  = conv_s2u_4_7(operator_4_false_16_acc_nl)
      + conv_u2u_6_7({nlm_row_loop_2_j_lpi_1_dfm_2_0_mx0 , 3'b111});
  assign nl_nlm_col_loop_2_if_nlm_col_loop_2_if_acc_4_itm_1  = conv_u2u_4_6(nlm_col_loop_2_if_acc_31_sdt_1)
      + ({operator_4_false_12_acc_psp_1_sva_1 , 3'b001});
  assign nl_nlm_col_loop_2_if_acc_41_itm_1  = conv_u2u_1_3(nlm_col_loop_2_if_acc_31_sdt_1[3])
      + operator_4_false_12_acc_psp_1_sva_1;
  assign nl_operator_4_false_13_acc_nl = ({1'b1 , nlm_col_loop_2_i_lpi_1_dfm_2_0_mx0})
      + conv_u2s_3_4(operator_4_false_12_acc_psp_1_sva_1);
  assign operator_4_false_13_acc_nl = nl_operator_4_false_13_acc_nl[3:0];
  assign nl_nlm_col_loop_2_if_nlm_col_loop_2_if_acc_itm_1  = conv_s2u_4_6(operator_4_false_13_acc_nl)
      + ({operator_4_false_12_acc_psp_1_sva_1 , 3'b111});
  assign nlm_col_loop_if_nlm_col_loop_if_or_nl = (~((nlm_row_loop_j_lpi_1_dfm_2_0_mx0==3'b100)))
      | (~((nlm_col_loop_i_lpi_1_dfm_2_0_mx0==3'b100)));
  assign nl_operator_4_false_10_acc_nl = ({1'b1 , nlm_row_loop_1_j_lpi_1_dfm_2_0_mx0})
      + conv_u2s_3_4(nlm_col_loop_1_i_lpi_1_dfm_2_0_mx0);
  assign operator_4_false_10_acc_nl = nl_operator_4_false_10_acc_nl[3:0];
  assign nl_nlm_col_loop_1_if_nlm_col_loop_1_if_acc_6_nl = conv_s2u_4_7(operator_4_false_10_acc_nl)
      + conv_u2u_6_7({nlm_row_loop_1_j_lpi_1_dfm_2_0_mx0 , 3'b111});
  assign nlm_col_loop_1_if_nlm_col_loop_1_if_acc_6_nl = nl_nlm_col_loop_1_if_nlm_col_loop_1_if_acc_6_nl[6:0];
  assign nl_nlm_col_loop_1_if_nlm_col_loop_1_if_acc_10_nl = conv_u2u_4_7(nlm_col_loop_1_if_acc_32_sdt_1)
      + conv_u2u_6_7({nlm_row_loop_1_j_lpi_1_dfm_2_0_mx0 , 3'b001});
  assign nlm_col_loop_1_if_nlm_col_loop_1_if_acc_10_nl = nl_nlm_col_loop_1_if_nlm_col_loop_1_if_acc_10_nl[6:0];
  assign nl_operator_4_false_11_acc_nl = ({1'b1 , nlm_col_loop_1_i_lpi_1_dfm_2_0_mx0})
      + nlm_row_loop_1_acc_tmp;
  assign operator_4_false_11_acc_nl = nl_operator_4_false_11_acc_nl[3:0];
  assign nl_nlm_col_loop_1_if_nlm_col_loop_1_if_acc_12_nl = conv_s2u_4_7(operator_4_false_11_acc_nl)
      + ({nlm_row_loop_1_acc_tmp , 3'b111});
  assign nlm_col_loop_1_if_nlm_col_loop_1_if_acc_12_nl = nl_nlm_col_loop_1_if_nlm_col_loop_1_if_acc_12_nl[6:0];
  assign nl_nlm_col_loop_1_if_nlm_col_loop_1_if_acc_16_nl = conv_u2u_4_7(nlm_col_loop_1_if_acc_33_sdt_3_0_1)
      + ({nlm_row_loop_1_acc_tmp , 3'b001});
  assign nlm_col_loop_1_if_nlm_col_loop_1_if_acc_16_nl = nl_nlm_col_loop_1_if_nlm_col_loop_1_if_acc_16_nl[6:0];
  assign nl_nlm_col_loop_1_if_nlm_col_loop_1_if_acc_4_nl = conv_u2u_4_6(nlm_col_loop_1_if_acc_31_sdt_1)
      + ({operator_4_false_6_acc_psp_1_sva_1 , 3'b001});
  assign nlm_col_loop_1_if_nlm_col_loop_1_if_acc_4_nl = nl_nlm_col_loop_1_if_nlm_col_loop_1_if_acc_4_nl[5:0];
  assign and_244_nl = (lfst_exitL_exit_nlm_row_loop_lpi_1_1_0[0]) & (~ lfst_exit_addon_loop_2_lpi_1_dfm_4_1);
  assign nlm_col_loop_2_if_nlm_col_loop_2_if_or_nl = (~((nlm_row_loop_2_j_lpi_1_dfm_2_0_mx0==3'b100)))
      | (~((nlm_col_loop_2_i_lpi_1_dfm_2_0_mx0==3'b100)));
  assign or_428_nl = (~ sfi_exit_yuvdns_col_lpi_1) | yuvdns_col_asn_sft_1_lpi_1;
  assign mux_146_nl = MUX_s_1_2_2(nand_124_cse, and_tmp_20, or_428_nl);
  assign mux_147_nl = MUX_s_1_2_2(nand_124_cse, mux_146_nl, lfst_exitL_exitL_exitL_exit_nlm_row_loop_lpi_1);
  assign mux_148_nl = MUX_s_1_2_2(and_tmp_21, mux_147_nl, nor_22_cse);
  assign mux_149_nl = MUX_s_1_2_2(mux_148_nl, and_tmp_20, yuvdns_row_asn_sft_lpi_1);
  assign mux_150_nl = MUX_s_1_2_2(and_tmp_21, mux_149_nl, lfst_exitL_exit_yuvdns_col_lpi_1);
  assign nor_nl = ~(lfst_exit_addon_loop_2_lpi_1_dfm_4_1 | (~ mux_150_nl));
  assign yuvdns_col_and_272_nl = (~((in_window_loop_acc_9_tmp[3]) | nlm_row_loop_or_245_tmp_1))
      & yuvdns_col_asn_sft_lpi_1_dfm_mx0 & (~ yuvdns_row_or_tmp_1) & (~ lfst_exit_addon_loop_2_lpi_1_dfm_1_1);
  assign addon_loop_2_mux_247_nl = MUX_v_3_2_2(in_window_loop_j_lpi_1_2_0, (in_window_loop_acc_9_tmp[2:0]),
      yuvdns_col_and_272_nl);
  assign nlm_row_loop_nand_nl = ~((in_window_loop_acc_9_tmp[3]) & (~ nlm_row_loop_or_245_tmp_1)
      & yuvdns_col_asn_sft_lpi_1_dfm_mx0 & (~ yuvdns_row_or_tmp_1) & (~ lfst_exit_addon_loop_2_lpi_1_dfm_1_1));
  assign addon_loop_2_for_j_addon_loop_2_for_j_nor_nl = ~(addon_loop_2_equal_tmp_3
      | or_54_cse);
  assign addon_loop_2_for_j_or_nl = (addon_loop_2_for_acc_14_itm_13_1 & addon_loop_2_equal_tmp_3)
      | yuvdns_row_yuvdns_row_nor_tmp;
  assign addon_loop_2_for_j_and_1_nl = (~ yuvdns_row_yuvdns_row_nor_tmp) & or_54_cse;
  assign or_472_nl = ((~((~(and_dcpl_80 | yuvdns_row_asn_sft_lpi_1)) | exitL_exit_addon_loop_2_sva))
      & (~ exitL_exitL_exit_yuvdns_col_lpi_1) & lfst_exitL_exit_yuvdns_col_lpi_1
      & lfst_exit_addon_loop_2_lpi_1_dfm_4_0) | yuvdns_col_acc_2_itm_13_1;
  assign yuvdns_col_if_yuvdns_col_if_yuvdns_col_if_or_5_nl = lines_read_equal_tmp_8
      | (~ (yuvdns_col_col_lpi_1_dfm_1[12]));
  assign nl_operator_13_false_3_acc_nl = ({1'b1 , (~ (yuvdns_col_col_lpi_1_dfm_1[12:2]))})
      + 12'b000000000001;
  assign operator_13_false_3_acc_nl = nl_operator_13_false_3_acc_nl[11:0];
  assign nl_operator_13_false_2_acc_nl = ({1'b1 , (~ yuvdns_row_row_lpi_1_dfm_1)})
      + 14'b00000000000101;
  assign operator_13_false_2_acc_nl = nl_operator_13_false_2_acc_nl[13:0];
  assign nlm_col_loop_1_if_nlm_col_loop_1_if_or_nl = (~((nlm_row_loop_1_j_lpi_1_dfm_2_0_mx0==3'b100)))
      | (~((nlm_col_loop_1_i_lpi_1_dfm_2_0_mx0==3'b100)));
  assign window_read_window_read_and_2_nl = (z_out_3==3'b011);
  assign nlm_row_loop_nlm_row_loop_out_window_loop_not_3_nl = ~ exit_out_window_loop_lpi_1_dfm_3;
  assign out_window_loop_out_window_loop_and_1_nl = MUX_v_3_2_2(3'b000, window_read_i_2_0_lpi_1,
      nlm_row_loop_nlm_row_loop_out_window_loop_not_3_nl);
  assign nlm_row_loop_nlm_row_loop_nlm_row_loop_not_12_nl = ~ (window_read_acc_tmp[3]);
  assign window_read_window_read_and_21_nl = MUX_v_3_2_2(3'b000, lines_read_i_2_0_lpi_1,
      nlm_row_loop_nlm_row_loop_nlm_row_loop_not_12_nl);
  assign lines_read_lines_read_or_nl = sfi_yuvdns_land_lpi_1 | (~ operator_4_false_3_acc_itm_3_1);
  assign nlm_row_loop_mux_28_nl = MUX_s_1_2_2(sfi_yuvdns_land_lpi_1, lines_read_lines_read_or_nl,
      nlm_row_loop_equal_tmp_5);
  assign nlm_col_loop_if_else_1_if_nlm_col_loop_if_else_1_if_and_1_nl = (yuvdns_reg_yinvH2[17])
      & and_324_cse;
  assign nlm_col_loop_if_else_1_if_mux_2_nl = MUX_v_24_2_2(({7'b0000000 , (z_out_39[16:0])}),
      ({z_out_39 , (yuvdns_nlm_diff_lpi_1_dfm_1[1:0])}), and_324_cse);
  assign mul_nl = conv_u2u_42_42(({nlm_col_loop_if_else_1_if_nlm_col_loop_if_else_1_if_and_1_nl
      , (yuvdns_reg_yinvH2[16:0])}) * nlm_col_loop_if_else_1_if_mux_2_nl);
  assign z_out_41_14 = readslicef_42_28_14(mul_nl);
  assign nlm_col_loop_1_if_else_1_if_nlm_col_loop_1_if_else_1_if_and_1_nl = (yuvdns_reg_uvinvH2[17])
      & and_338_cse;
  assign nlm_col_loop_1_if_else_1_if_mux_2_nl = MUX_v_24_2_2(({7'b0000000 , (z_out_40[16:0])}),
      ({z_out_40 , (yuvdns_nlm_1_diff_lpi_1_dfm_1[1:0])}), and_338_cse);
  assign mul_1_nl = conv_u2u_42_42(({nlm_col_loop_1_if_else_1_if_nlm_col_loop_1_if_else_1_if_and_1_nl
      , (yuvdns_reg_uvinvH2[16:0])}) * nlm_col_loop_1_if_else_1_if_mux_2_nl);
  assign z_out_1_41_14 = readslicef_42_28_14(mul_1_nl);
  assign nlm_col_loop_2_if_else_1_if_nlm_col_loop_2_if_else_1_if_and_1_nl = (yuvdns_reg_uvinvH2[17])
      & and_352_cse;
  assign nlm_col_loop_2_if_else_1_if_mux_2_nl = MUX_v_24_2_2(({7'b0000000 , (z_out_41[16:0])}),
      ({z_out_41 , (yuvdns_nlm_2_diff_lpi_1_dfm_1[1:0])}), and_352_cse);
  assign mul_2_nl = conv_u2u_42_42(({nlm_col_loop_2_if_else_1_if_nlm_col_loop_2_if_else_1_if_and_1_nl
      , (yuvdns_reg_uvinvH2[16:0])}) * nlm_col_loop_2_if_else_1_if_mux_2_nl);
  assign z_out_2_41_14 = readslicef_42_28_14(mul_2_nl);
  assign nlm_col_loop_1_if_mux1h_7_nl = MUX1HOT_v_3_3_2(operator_4_false_6_acc_psp_1_sva_1,
      ({1'b1 , addon_loop_1_i_lpi_1_1_0}), window_read_i_2_0_lpi_1, {and_dcpl_224
      , lfst_exit_addon_loop_2_lpi_1_dfm_4_1 , and_dcpl_225});
  assign nlm_col_loop_1_if_mux1h_8_nl = MUX1HOT_s_1_3_2((nlm_col_loop_1_if_acc_31_sdt_1[3]),
      (addon_loop_2_for_j_lpi_1[12]), (yuvdns_col_col_lpi_1_dfm_1[12]), {and_dcpl_224
      , lfst_exit_addon_loop_2_lpi_1_dfm_4_1 , and_dcpl_225});
  assign nl_z_out_3 = nlm_col_loop_1_if_mux1h_7_nl + conv_u2u_1_3(nlm_col_loop_1_if_mux1h_8_nl);
  assign z_out_3 = nl_z_out_3[2:0];
  assign operator_3_false_mux_2_nl = MUX_v_3_2_2(({1'b1 , addon_loop_1_i_lpi_1_1_0}),
      nlm_row_loop_j_lpi_1_dfm_2_0_mx0, lfst_exit_addon_loop_2_lpi_1_dfm_4_0);
  assign operator_3_false_mux_3_nl = MUX_v_3_2_2(3'b001, nlm_col_loop_i_lpi_1_dfm_2_0_mx0,
      lfst_exit_addon_loop_2_lpi_1_dfm_4_0);
  assign nl_z_out_4 = conv_u2u_3_4(operator_3_false_mux_2_nl) + conv_u2u_3_4(operator_3_false_mux_3_nl);
  assign z_out_4 = nl_z_out_4[3:0];
  assign nlm_col_loop_if_mux_17_nl = MUX_v_3_2_2(nlm_row_loop_j_lpi_1_dfm_2_0_mx0,
      (z_out_6[5:3]), lfst_exitL_exit_nlm_row_loop_lpi_1_1_0[1]);
  assign nlm_col_loop_if_or_2_nl = (z_out_4[3]) | (lfst_exitL_exit_nlm_row_loop_lpi_1_1_0[1]);
  assign nl_z_out_5 = conv_u2u_3_4(nlm_col_loop_if_mux_17_nl) + conv_u2u_1_4(nlm_col_loop_if_or_2_nl);
  assign z_out_5 = nl_z_out_5[3:0];
  assign operator_4_false_7_mux_3_nl = MUX_v_3_2_2(operator_4_false_6_acc_psp_1_sva_1,
      lines_read_i_2_0_lpi_1, lfst_exitL_exit_nlm_row_loop_lpi_1_1_0[1]);
  assign nl_operator_4_false_7_acc_1_nl = ({1'b1 , nlm_col_loop_1_i_lpi_1_dfm_2_0_mx0})
      + conv_u2s_3_4(operator_4_false_6_acc_psp_1_sva_1);
  assign operator_4_false_7_acc_1_nl = nl_operator_4_false_7_acc_1_nl[3:0];
  assign operator_4_false_7_mux_4_nl = MUX_v_5_2_2((signext_5_4(operator_4_false_7_acc_1_nl)),
      ({2'b01 , lines_read_i_2_0_lpi_1}), lfst_exitL_exit_nlm_row_loop_lpi_1_1_0[1]);
  assign nl_z_out_6 = ({operator_4_false_7_mux_3_nl , (signext_3_2({(~ (lfst_exitL_exit_nlm_row_loop_lpi_1_1_0[1]))
      , 1'b1}))}) + conv_s2u_5_6(operator_4_false_7_mux_4_nl);
  assign z_out_6 = nl_z_out_6[5:0];
  assign and_423_nl = (~ sfi_exit_yuvdns_col_lpi_1) & lfst_exitL_exitL_exit_nlm_row_loop_lpi_1
      & lfst_exitL_exitL_exitL_exit_nlm_row_loop_lpi_1 & (~ sfi_yuvdns_reg_eb_lpi_1)
      & lfst_exit_yuvdns_col_lpi_1 & (~ exitL_exitL_exitL_exitL_exit_nlm_row_loop_lpi_1)
      & lfst_exitL_exit_yuvdns_col_lpi_1 & (~ exitL_exitL_exit_yuvdns_col_lpi_1)
      & lfst_exit_addon_loop_2_lpi_1_dfm_4_0 & (~ exitL_exit_addon_loop_2_sva) &
      (lfst_exitL_exit_nlm_row_loop_lpi_1_1_0==2'b00) & lfst_exitL_exit_nlm_row_loop_lpi_1_2;
  assign operator_4_false_operator_4_false_or_1_nl = MUX_v_4_2_2(out_window_loop_i_sva_2,
      4'b1111, and_423_nl);
  assign or_604_nl = sfi_exit_yuvdns_col_lpi_1 | (~ lfst_exitL_exitL_exit_nlm_row_loop_lpi_1)
      | (~ lfst_exitL_exitL_exitL_exit_nlm_row_loop_lpi_1) | sfi_yuvdns_reg_eb_lpi_1
      | (~ lfst_exit_yuvdns_col_lpi_1) | exitL_exitL_exitL_exitL_exit_nlm_row_loop_lpi_1
      | (~ lfst_exitL_exit_yuvdns_col_lpi_1) | exitL_exitL_exit_yuvdns_col_lpi_1
      | (~ lfst_exit_addon_loop_2_lpi_1_dfm_4_0) | exitL_exit_addon_loop_2_sva |
      (lfst_exitL_exit_nlm_row_loop_lpi_1_1_0!=2'b00) | (~ lfst_exitL_exit_nlm_row_loop_lpi_1_2);
  assign operator_4_false_or_1_nl = MUX_v_3_2_2(nlm_row_loop_j_lpi_1_dfm_2_0_mx0,
      3'b111, or_604_nl);
  assign nl_z_out_7 = operator_4_false_operator_4_false_or_1_nl + conv_u2u_3_4(operator_4_false_or_1_nl);
  assign z_out_7 = nl_z_out_7[3:0];
  assign operator_4_false_11_mux_3_nl = MUX_v_4_2_2(nlm_row_loop_acc_tmp, out_window_loop_i_lpi_1_dfm_1,
      or_dcpl_389);
  assign operator_4_false_11_mux_4_nl = MUX_v_5_2_2(({1'b0 , nlm_col_loop_if_acc_33_sdt_3_0_1}),
      operator_4_false_acc_1_tmp, or_dcpl_389);
  assign nl_z_out_8 = ({operator_4_false_11_mux_3_nl , 3'b001}) + conv_u2u_5_7(operator_4_false_11_mux_4_nl);
  assign z_out_8 = nl_z_out_8[6:0];
  assign nlm_col_loop_if_nlm_col_loop_if_nlm_col_loop_if_nor_1_nl = ~(MUX_v_6_2_2((yuvdns_col_col_lpi_1_dfm_1[12:7]),
      6'b111111, lfst_exitL_exit_nlm_row_loop_lpi_1_2));
  assign nlm_col_loop_if_mux_18_nl = MUX_v_4_2_2((~ (yuvdns_col_col_lpi_1_dfm_1[6:3])),
      nlm_row_loop_acc_tmp, lfst_exitL_exit_nlm_row_loop_lpi_1_2);
  assign nlm_col_loop_if_or_3_nl = (nlm_col_loop_if_acc_33_sdt_3_0_1[3]) | (~ lfst_exitL_exit_nlm_row_loop_lpi_1_2);
  assign nl_z_out_9 = ({(~ lfst_exitL_exit_nlm_row_loop_lpi_1_2) , nlm_col_loop_if_nlm_col_loop_if_nlm_col_loop_if_nor_1_nl
      , nlm_col_loop_if_mux_18_nl}) + conv_u2u_1_11(nlm_col_loop_if_or_3_nl);
  assign z_out_9 = nl_z_out_9[10:0];
  assign nlm_col_loop_1_if_nlm_col_loop_1_if_nlm_col_loop_1_if_nor_1_nl = ~(MUX_v_6_2_2((yuvdns_row_row_lpi_1_dfm_1[12:7]),
      6'b111111, lfst_exitL_exit_nlm_row_loop_lpi_1_2));
  assign nlm_col_loop_1_if_mux_16_nl = MUX_v_4_2_2((~ (yuvdns_row_row_lpi_1_dfm_1[6:3])),
      nlm_row_loop_1_acc_tmp, lfst_exitL_exit_nlm_row_loop_lpi_1_2);
  assign nlm_col_loop_1_if_or_1_nl = (nlm_col_loop_1_if_acc_33_sdt_3_0_1[3]) | (~
      lfst_exitL_exit_nlm_row_loop_lpi_1_2);
  assign nl_z_out_10 = ({(~ lfst_exitL_exit_nlm_row_loop_lpi_1_2) , nlm_col_loop_1_if_nlm_col_loop_1_if_nlm_col_loop_1_if_nor_1_nl
      , nlm_col_loop_1_if_mux_16_nl}) + conv_u2u_1_11(nlm_col_loop_1_if_or_1_nl);
  assign z_out_10 = nl_z_out_10[10:0];
  assign nor_176_cse = ~((~ lfst_exit_addon_loop_2_lpi_1_dfm_4_0) | exitL_exitL_exit_yuvdns_col_lpi_1
      | (~ lfst_exitL_exit_yuvdns_col_lpi_1) | exitL_exitL_exitL_exitL_exit_nlm_row_loop_lpi_1
      | (~ lfst_exit_yuvdns_col_lpi_1));
  assign nor_174_nl = ~(lfst_exit_addon_loop_2_lpi_1_dfm_4_1 | (~(nor_176_cse | yuvdns_col_acc_2_itm_13_1)));
  assign mux_176_nl = MUX_s_1_2_2(nor_174_nl, yuvdns_col_acc_2_itm_13_1, exitL_exit_addon_loop_2_sva);
  assign nor_177_nl = ~((~((~(nor_176_cse | lfst_exit_addon_loop_2_lpi_1_dfm_4_1))
      | exitL_exit_addon_loop_2_sva)) | yuvdns_col_acc_2_itm_13_1);
  assign addon_loop_2_for_mux1h_45_nl = MUX1HOT_v_13_3_2(addon_loop_2_for_j_lpi_1,
      yuvdns_col_col_lpi_1_dfm_1, yuvdns_row_row_lpi_1_dfm_1, {lfst_exit_addon_loop_2_lpi_1_dfm_1_1
      , mux_176_nl , nor_177_nl});
  assign nl_z_out_11 = addon_loop_2_for_mux1h_45_nl + 13'b0000000000001;
  assign z_out_11 = nl_z_out_11[12:0];
  assign yuvdns_abs_else_mux_2_nl = MUX_v_10_2_2(yWindow_3_3_lpi_1, yuvdns_abs_a_9_0_sva_1,
      yuvdns_abs_acc_itm_10_1);
  assign yuvdns_abs_else_mux_3_nl = MUX_v_10_2_2((~ yuvdns_abs_a_9_0_sva_1), (~ yWindow_3_3_lpi_1),
      yuvdns_abs_acc_itm_10_1);
  assign nl_acc_9_nl = ({yuvdns_abs_else_mux_2_nl , 1'b1}) + ({yuvdns_abs_else_mux_3_nl
      , 1'b1});
  assign acc_9_nl = nl_acc_9_nl[10:0];
  assign z_out_12 = readslicef_11_10_1(acc_9_nl);
  assign yuvdns_abs_23_else_mux_2_nl = MUX_v_10_2_2(vWindow_4_5_lpi_1, yuvdns_abs_a_23_9_0_sva_1,
      yuvdns_abs_23_acc_itm_10_1);
  assign yuvdns_abs_23_else_mux_3_nl = MUX_v_10_2_2((~ yuvdns_abs_a_23_9_0_sva_1),
      (~ vWindow_4_5_lpi_1), yuvdns_abs_23_acc_itm_10_1);
  assign nl_acc_10_nl = ({yuvdns_abs_23_else_mux_2_nl , 1'b1}) + ({yuvdns_abs_23_else_mux_3_nl
      , 1'b1});
  assign acc_10_nl = nl_acc_10_nl[10:0];
  assign z_out_13 = readslicef_11_10_1(acc_10_nl);
  assign yuvdns_abs_1_else_mux_2_nl = MUX_v_10_2_2(yWindow_3_4_lpi_1, yuvdns_abs_a_1_9_0_sva_1,
      yuvdns_abs_1_acc_itm_10_1);
  assign yuvdns_abs_1_else_mux_3_nl = MUX_v_10_2_2((~ yuvdns_abs_a_1_9_0_sva_1),
      (~ yWindow_3_4_lpi_1), yuvdns_abs_1_acc_itm_10_1);
  assign nl_acc_11_nl = ({yuvdns_abs_1_else_mux_2_nl , 1'b1}) + ({yuvdns_abs_1_else_mux_3_nl
      , 1'b1});
  assign acc_11_nl = nl_acc_11_nl[10:0];
  assign z_out_14 = readslicef_11_10_1(acc_11_nl);
  assign yuvdns_abs_26_else_mux_2_nl = MUX_v_10_2_2(vWindow_5_5_lpi_1, yuvdns_abs_a_26_9_0_sva_1,
      yuvdns_abs_26_acc_itm_10_1);
  assign yuvdns_abs_26_else_mux_3_nl = MUX_v_10_2_2((~ yuvdns_abs_a_26_9_0_sva_1),
      (~ vWindow_5_5_lpi_1), yuvdns_abs_26_acc_itm_10_1);
  assign nl_acc_12_nl = ({yuvdns_abs_26_else_mux_2_nl , 1'b1}) + ({yuvdns_abs_26_else_mux_3_nl
      , 1'b1});
  assign acc_12_nl = nl_acc_12_nl[10:0];
  assign z_out_15 = readslicef_11_10_1(acc_12_nl);
  assign yuvdns_abs_2_else_mux_2_nl = MUX_v_10_2_2(yWindow_3_5_lpi_1, yuvdns_abs_a_2_9_0_sva_1,
      yuvdns_abs_2_acc_itm_10_1);
  assign yuvdns_abs_2_else_mux_3_nl = MUX_v_10_2_2((~ yuvdns_abs_a_2_9_0_sva_1),
      (~ yWindow_3_5_lpi_1), yuvdns_abs_2_acc_itm_10_1);
  assign nl_acc_13_nl = ({yuvdns_abs_2_else_mux_2_nl , 1'b1}) + ({yuvdns_abs_2_else_mux_3_nl
      , 1'b1});
  assign acc_13_nl = nl_acc_13_nl[10:0];
  assign z_out_16 = readslicef_11_10_1(acc_13_nl);
  assign yuvdns_abs_16_else_mux_2_nl = MUX_v_10_2_2(uWindow_5_4_lpi_1, nlm_col_loop_1_if_ac_int_cctor_7_9_0_sva_1,
      yuvdns_abs_16_acc_itm_10_1);
  assign yuvdns_abs_16_else_mux_3_nl = MUX_v_10_2_2((~ nlm_col_loop_1_if_ac_int_cctor_7_9_0_sva_1),
      (~ uWindow_5_4_lpi_1), yuvdns_abs_16_acc_itm_10_1);
  assign nl_acc_14_nl = ({yuvdns_abs_16_else_mux_2_nl , 1'b1}) + ({yuvdns_abs_16_else_mux_3_nl
      , 1'b1});
  assign acc_14_nl = nl_acc_14_nl[10:0];
  assign z_out_17 = readslicef_11_10_1(acc_14_nl);
  assign yuvdns_abs_3_else_mux_2_nl = MUX_v_10_2_2(yWindow_4_3_lpi_1, yuvdns_abs_a_3_9_0_sva_1,
      yuvdns_abs_3_acc_itm_10_1);
  assign yuvdns_abs_3_else_mux_3_nl = MUX_v_10_2_2((~ yuvdns_abs_a_3_9_0_sva_1),
      (~ yWindow_4_3_lpi_1), yuvdns_abs_3_acc_itm_10_1);
  assign nl_acc_15_nl = ({yuvdns_abs_3_else_mux_2_nl , 1'b1}) + ({yuvdns_abs_3_else_mux_3_nl
      , 1'b1});
  assign acc_15_nl = nl_acc_15_nl[10:0];
  assign z_out_18 = readslicef_11_10_1(acc_15_nl);
  assign yuvdns_abs_22_else_mux_2_nl = MUX_v_10_2_2(vWindow_4_4_lpi_1_mx0, nlm_col_loop_2_if_ac_int_cctor_4_9_0_sva_mx0w1,
      yuvdns_abs_22_acc_itm_10_1);
  assign yuvdns_abs_22_else_mux_3_nl = MUX_v_10_2_2((~ nlm_col_loop_2_if_ac_int_cctor_4_9_0_sva_mx0w1),
      (~ vWindow_4_4_lpi_1_mx0), yuvdns_abs_22_acc_itm_10_1);
  assign nl_acc_16_nl = ({yuvdns_abs_22_else_mux_2_nl , 1'b1}) + ({yuvdns_abs_22_else_mux_3_nl
      , 1'b1});
  assign acc_16_nl = nl_acc_16_nl[10:0];
  assign z_out_19 = readslicef_11_10_1(acc_16_nl);
  assign yuvdns_abs_4_else_mux_2_nl = MUX_v_10_2_2(yWindow_4_4_lpi_1_mx0, nlm_col_loop_if_ac_int_cctor_4_9_0_sva_mx0w1,
      yuvdns_abs_4_acc_itm_10_1);
  assign yuvdns_abs_4_else_mux_3_nl = MUX_v_10_2_2((~ nlm_col_loop_if_ac_int_cctor_4_9_0_sva_mx0w1),
      (~ yWindow_4_4_lpi_1_mx0), yuvdns_abs_4_acc_itm_10_1);
  assign nl_acc_17_nl = ({yuvdns_abs_4_else_mux_2_nl , 1'b1}) + ({yuvdns_abs_4_else_mux_3_nl
      , 1'b1});
  assign acc_17_nl = nl_acc_17_nl[10:0];
  assign z_out_20 = readslicef_11_10_1(acc_17_nl);
  assign yuvdns_abs_21_else_mux_2_nl = MUX_v_10_2_2(vWindow_4_3_lpi_1, yuvdns_abs_a_21_9_0_sva_1,
      yuvdns_abs_21_acc_itm_10_1);
  assign yuvdns_abs_21_else_mux_3_nl = MUX_v_10_2_2((~ yuvdns_abs_a_21_9_0_sva_1),
      (~ vWindow_4_3_lpi_1), yuvdns_abs_21_acc_itm_10_1);
  assign nl_acc_18_nl = ({yuvdns_abs_21_else_mux_2_nl , 1'b1}) + ({yuvdns_abs_21_else_mux_3_nl
      , 1'b1});
  assign acc_18_nl = nl_acc_18_nl[10:0];
  assign z_out_21 = readslicef_11_10_1(acc_18_nl);
  assign yuvdns_abs_5_else_mux_2_nl = MUX_v_10_2_2(yWindow_4_5_lpi_1, yuvdns_abs_a_5_9_0_sva_1,
      yuvdns_abs_5_acc_itm_10_1);
  assign yuvdns_abs_5_else_mux_3_nl = MUX_v_10_2_2((~ yuvdns_abs_a_5_9_0_sva_1),
      (~ yWindow_4_5_lpi_1), yuvdns_abs_5_acc_itm_10_1);
  assign nl_acc_19_nl = ({yuvdns_abs_5_else_mux_2_nl , 1'b1}) + ({yuvdns_abs_5_else_mux_3_nl
      , 1'b1});
  assign acc_19_nl = nl_acc_19_nl[10:0];
  assign z_out_22 = readslicef_11_10_1(acc_19_nl);
  assign yuvdns_abs_24_else_mux_2_nl = MUX_v_10_2_2(vWindow_5_3_lpi_1, yuvdns_abs_a_24_9_0_sva_1,
      yuvdns_abs_24_acc_itm_10_1);
  assign yuvdns_abs_24_else_mux_3_nl = MUX_v_10_2_2((~ yuvdns_abs_a_24_9_0_sva_1),
      (~ vWindow_5_3_lpi_1), yuvdns_abs_24_acc_itm_10_1);
  assign nl_acc_20_nl = ({yuvdns_abs_24_else_mux_2_nl , 1'b1}) + ({yuvdns_abs_24_else_mux_3_nl
      , 1'b1});
  assign acc_20_nl = nl_acc_20_nl[10:0];
  assign z_out_23 = readslicef_11_10_1(acc_20_nl);
  assign yuvdns_abs_6_else_mux_2_nl = MUX_v_10_2_2(yWindow_5_3_lpi_1, yuvdns_abs_a_6_9_0_sva_1,
      yuvdns_abs_6_acc_itm_10_1);
  assign yuvdns_abs_6_else_mux_3_nl = MUX_v_10_2_2((~ yuvdns_abs_a_6_9_0_sva_1),
      (~ yWindow_5_3_lpi_1), yuvdns_abs_6_acc_itm_10_1);
  assign nl_acc_21_nl = ({yuvdns_abs_6_else_mux_2_nl , 1'b1}) + ({yuvdns_abs_6_else_mux_3_nl
      , 1'b1});
  assign acc_21_nl = nl_acc_21_nl[10:0];
  assign z_out_24 = readslicef_11_10_1(acc_21_nl);
  assign yuvdns_abs_20_else_mux_2_nl = MUX_v_10_2_2(vWindow_3_5_lpi_1, yuvdns_abs_a_20_9_0_sva_1,
      yuvdns_abs_20_acc_itm_10_1);
  assign yuvdns_abs_20_else_mux_3_nl = MUX_v_10_2_2((~ yuvdns_abs_a_20_9_0_sva_1),
      (~ vWindow_3_5_lpi_1), yuvdns_abs_20_acc_itm_10_1);
  assign nl_acc_22_nl = ({yuvdns_abs_20_else_mux_2_nl , 1'b1}) + ({yuvdns_abs_20_else_mux_3_nl
      , 1'b1});
  assign acc_22_nl = nl_acc_22_nl[10:0];
  assign z_out_25 = readslicef_11_10_1(acc_22_nl);
  assign yuvdns_abs_7_else_mux_2_nl = MUX_v_10_2_2(yWindow_5_4_lpi_1, nlm_col_loop_if_ac_int_cctor_7_9_0_sva_1,
      yuvdns_abs_7_acc_itm_10_1);
  assign yuvdns_abs_7_else_mux_3_nl = MUX_v_10_2_2((~ nlm_col_loop_if_ac_int_cctor_7_9_0_sva_1),
      (~ yWindow_5_4_lpi_1), yuvdns_abs_7_acc_itm_10_1);
  assign nl_acc_23_nl = ({yuvdns_abs_7_else_mux_2_nl , 1'b1}) + ({yuvdns_abs_7_else_mux_3_nl
      , 1'b1});
  assign acc_23_nl = nl_acc_23_nl[10:0];
  assign z_out_26 = readslicef_11_10_1(acc_23_nl);
  assign yuvdns_abs_15_else_mux_2_nl = MUX_v_10_2_2(uWindow_5_3_lpi_1, yuvdns_abs_a_15_9_0_sva_1,
      yuvdns_abs_15_acc_itm_10_1);
  assign yuvdns_abs_15_else_mux_3_nl = MUX_v_10_2_2((~ yuvdns_abs_a_15_9_0_sva_1),
      (~ uWindow_5_3_lpi_1), yuvdns_abs_15_acc_itm_10_1);
  assign nl_acc_24_nl = ({yuvdns_abs_15_else_mux_2_nl , 1'b1}) + ({yuvdns_abs_15_else_mux_3_nl
      , 1'b1});
  assign acc_24_nl = nl_acc_24_nl[10:0];
  assign z_out_27 = readslicef_11_10_1(acc_24_nl);
  assign yuvdns_abs_8_else_mux_2_nl = MUX_v_10_2_2(yWindow_5_5_lpi_1, yuvdns_abs_a_8_9_0_sva_1,
      yuvdns_abs_8_acc_itm_10_1);
  assign yuvdns_abs_8_else_mux_3_nl = MUX_v_10_2_2((~ yuvdns_abs_a_8_9_0_sva_1),
      (~ yWindow_5_5_lpi_1), yuvdns_abs_8_acc_itm_10_1);
  assign nl_acc_25_nl = ({yuvdns_abs_8_else_mux_2_nl , 1'b1}) + ({yuvdns_abs_8_else_mux_3_nl
      , 1'b1});
  assign acc_25_nl = nl_acc_25_nl[10:0];
  assign z_out_28 = readslicef_11_10_1(acc_25_nl);
  assign yuvdns_abs_17_else_mux_2_nl = MUX_v_10_2_2(uWindow_5_5_lpi_1, yuvdns_abs_a_17_9_0_sva_1,
      yuvdns_abs_17_acc_itm_10_1);
  assign yuvdns_abs_17_else_mux_3_nl = MUX_v_10_2_2((~ yuvdns_abs_a_17_9_0_sva_1),
      (~ uWindow_5_5_lpi_1), yuvdns_abs_17_acc_itm_10_1);
  assign nl_acc_26_nl = ({yuvdns_abs_17_else_mux_2_nl , 1'b1}) + ({yuvdns_abs_17_else_mux_3_nl
      , 1'b1});
  assign acc_26_nl = nl_acc_26_nl[10:0];
  assign z_out_29 = readslicef_11_10_1(acc_26_nl);
  assign yuvdns_abs_9_else_mux_2_nl = MUX_v_10_2_2(uWindow_3_3_lpi_1, yuvdns_abs_a_9_9_0_sva_1,
      yuvdns_abs_9_acc_itm_10_1);
  assign yuvdns_abs_9_else_mux_3_nl = MUX_v_10_2_2((~ yuvdns_abs_a_9_9_0_sva_1),
      (~ uWindow_3_3_lpi_1), yuvdns_abs_9_acc_itm_10_1);
  assign nl_acc_27_nl = ({yuvdns_abs_9_else_mux_2_nl , 1'b1}) + ({yuvdns_abs_9_else_mux_3_nl
      , 1'b1});
  assign acc_27_nl = nl_acc_27_nl[10:0];
  assign z_out_30 = readslicef_11_10_1(acc_27_nl);
  assign yuvdns_abs_19_else_mux_2_nl = MUX_v_10_2_2(vWindow_3_4_lpi_1, yuvdns_abs_a_19_9_0_sva_1,
      yuvdns_abs_19_acc_itm_10_1);
  assign yuvdns_abs_19_else_mux_3_nl = MUX_v_10_2_2((~ yuvdns_abs_a_19_9_0_sva_1),
      (~ vWindow_3_4_lpi_1), yuvdns_abs_19_acc_itm_10_1);
  assign nl_acc_28_nl = ({yuvdns_abs_19_else_mux_2_nl , 1'b1}) + ({yuvdns_abs_19_else_mux_3_nl
      , 1'b1});
  assign acc_28_nl = nl_acc_28_nl[10:0];
  assign z_out_31 = readslicef_11_10_1(acc_28_nl);
  assign yuvdns_abs_10_else_mux_2_nl = MUX_v_10_2_2(uWindow_3_4_lpi_1, yuvdns_abs_a_10_9_0_sva_1,
      yuvdns_abs_10_acc_itm_10_1);
  assign yuvdns_abs_10_else_mux_3_nl = MUX_v_10_2_2((~ yuvdns_abs_a_10_9_0_sva_1),
      (~ uWindow_3_4_lpi_1), yuvdns_abs_10_acc_itm_10_1);
  assign nl_acc_29_nl = ({yuvdns_abs_10_else_mux_2_nl , 1'b1}) + ({yuvdns_abs_10_else_mux_3_nl
      , 1'b1});
  assign acc_29_nl = nl_acc_29_nl[10:0];
  assign z_out_32 = readslicef_11_10_1(acc_29_nl);
  assign yuvdns_abs_25_else_mux_2_nl = MUX_v_10_2_2(vWindow_5_4_lpi_1, nlm_col_loop_2_if_ac_int_cctor_7_9_0_sva_1,
      yuvdns_abs_25_acc_itm_10_1);
  assign yuvdns_abs_25_else_mux_3_nl = MUX_v_10_2_2((~ nlm_col_loop_2_if_ac_int_cctor_7_9_0_sva_1),
      (~ vWindow_5_4_lpi_1), yuvdns_abs_25_acc_itm_10_1);
  assign nl_acc_30_nl = ({yuvdns_abs_25_else_mux_2_nl , 1'b1}) + ({yuvdns_abs_25_else_mux_3_nl
      , 1'b1});
  assign acc_30_nl = nl_acc_30_nl[10:0];
  assign z_out_33 = readslicef_11_10_1(acc_30_nl);
  assign yuvdns_abs_11_else_mux_2_nl = MUX_v_10_2_2(uWindow_3_5_lpi_1, yuvdns_abs_a_11_9_0_sva_1,
      yuvdns_abs_11_acc_itm_10_1);
  assign yuvdns_abs_11_else_mux_3_nl = MUX_v_10_2_2((~ yuvdns_abs_a_11_9_0_sva_1),
      (~ uWindow_3_5_lpi_1), yuvdns_abs_11_acc_itm_10_1);
  assign nl_acc_31_nl = ({yuvdns_abs_11_else_mux_2_nl , 1'b1}) + ({yuvdns_abs_11_else_mux_3_nl
      , 1'b1});
  assign acc_31_nl = nl_acc_31_nl[10:0];
  assign z_out_34 = readslicef_11_10_1(acc_31_nl);
  assign yuvdns_abs_14_else_mux_2_nl = MUX_v_10_2_2(uWindow_4_5_lpi_1, yuvdns_abs_a_14_9_0_sva_1,
      yuvdns_abs_14_acc_itm_10_1);
  assign yuvdns_abs_14_else_mux_3_nl = MUX_v_10_2_2((~ yuvdns_abs_a_14_9_0_sva_1),
      (~ uWindow_4_5_lpi_1), yuvdns_abs_14_acc_itm_10_1);
  assign nl_acc_32_nl = ({yuvdns_abs_14_else_mux_2_nl , 1'b1}) + ({yuvdns_abs_14_else_mux_3_nl
      , 1'b1});
  assign acc_32_nl = nl_acc_32_nl[10:0];
  assign z_out_35 = readslicef_11_10_1(acc_32_nl);
  assign yuvdns_abs_12_else_mux_2_nl = MUX_v_10_2_2(uWindow_4_3_lpi_1, yuvdns_abs_a_12_9_0_sva_1,
      yuvdns_abs_12_acc_itm_10_1);
  assign yuvdns_abs_12_else_mux_3_nl = MUX_v_10_2_2((~ yuvdns_abs_a_12_9_0_sva_1),
      (~ uWindow_4_3_lpi_1), yuvdns_abs_12_acc_itm_10_1);
  assign nl_acc_33_nl = ({yuvdns_abs_12_else_mux_2_nl , 1'b1}) + ({yuvdns_abs_12_else_mux_3_nl
      , 1'b1});
  assign acc_33_nl = nl_acc_33_nl[10:0];
  assign z_out_36 = readslicef_11_10_1(acc_33_nl);
  assign yuvdns_abs_18_else_mux_2_nl = MUX_v_10_2_2(vWindow_3_3_lpi_1, yuvdns_abs_a_18_9_0_sva_1,
      yuvdns_abs_18_acc_itm_10_1);
  assign yuvdns_abs_18_else_mux_3_nl = MUX_v_10_2_2((~ yuvdns_abs_a_18_9_0_sva_1),
      (~ vWindow_3_3_lpi_1), yuvdns_abs_18_acc_itm_10_1);
  assign nl_acc_34_nl = ({yuvdns_abs_18_else_mux_2_nl , 1'b1}) + ({yuvdns_abs_18_else_mux_3_nl
      , 1'b1});
  assign acc_34_nl = nl_acc_34_nl[10:0];
  assign z_out_37 = readslicef_11_10_1(acc_34_nl);
  assign yuvdns_abs_13_else_mux_2_nl = MUX_v_10_2_2(uWindow_4_4_lpi_1_mx0, nlm_col_loop_1_if_ac_int_cctor_4_9_0_sva_mx0w1,
      yuvdns_abs_13_acc_itm_10_1);
  assign yuvdns_abs_13_else_mux_3_nl = MUX_v_10_2_2((~ nlm_col_loop_1_if_ac_int_cctor_4_9_0_sva_mx0w1),
      (~ uWindow_4_4_lpi_1_mx0), yuvdns_abs_13_acc_itm_10_1);
  assign nl_acc_35_nl = ({yuvdns_abs_13_else_mux_2_nl , 1'b1}) + ({yuvdns_abs_13_else_mux_3_nl
      , 1'b1});
  assign acc_35_nl = nl_acc_35_nl[10:0];
  assign z_out_38 = readslicef_11_10_1(acc_35_nl);
  assign operator_21_false_mux_2_nl = MUX_v_21_2_2(({4'b0000 , (yuvdns_nlm_diff_lpi_1_dfm_1[13:0])
      , 3'b001}), yuvdns_nlm_diff_lpi_1_dfm_1, and_324_cse);
  assign operator_21_false_mux_3_nl = MUX_v_19_2_2(({2'b00 , (~ (yuvdns_nlm_diff_lpi_1_dfm_1[16:0]))}),
      (yuvdns_nlm_diff_lpi_1_dfm_1[20:2]), and_324_cse);
  assign nl_z_out_39 = conv_u2u_21_22(operator_21_false_mux_2_nl) + conv_u2u_19_22(operator_21_false_mux_3_nl);
  assign z_out_39 = nl_z_out_39[21:0];
  assign operator_21_false_2_mux_2_nl = MUX_v_21_2_2(({4'b0000 , (yuvdns_nlm_1_diff_lpi_1_dfm_1[13:0])
      , 3'b001}), yuvdns_nlm_1_diff_lpi_1_dfm_1, and_338_cse);
  assign operator_21_false_2_mux_3_nl = MUX_v_19_2_2(({2'b00 , (~ (yuvdns_nlm_1_diff_lpi_1_dfm_1[16:0]))}),
      (yuvdns_nlm_1_diff_lpi_1_dfm_1[20:2]), and_338_cse);
  assign nl_z_out_40 = conv_u2u_21_22(operator_21_false_2_mux_2_nl) + conv_u2u_19_22(operator_21_false_2_mux_3_nl);
  assign z_out_40 = nl_z_out_40[21:0];
  assign operator_21_false_4_mux_2_nl = MUX_v_21_2_2(({4'b0000 , (yuvdns_nlm_2_diff_lpi_1_dfm_1[13:0])
      , 3'b001}), yuvdns_nlm_2_diff_lpi_1_dfm_1, and_352_cse);
  assign operator_21_false_4_mux_3_nl = MUX_v_19_2_2(({2'b00 , (~ (yuvdns_nlm_2_diff_lpi_1_dfm_1[16:0]))}),
      (yuvdns_nlm_2_diff_lpi_1_dfm_1[20:2]), and_352_cse);
  assign nl_z_out_41 = conv_u2u_21_22(operator_21_false_4_mux_2_nl) + conv_u2u_19_22(operator_21_false_4_mux_3_nl);
  assign z_out_41 = nl_z_out_41[21:0];

  function automatic [9:0] div_10_u25_u14;
    input [24:0] l;
    input [13:0] r;
    reg [24:0] rdiv;
    reg [14:0] diff;
    reg [15:0] diff_tmp;
    reg [38:0] lbuf;
    integer i; 
  begin
    lbuf = 39'b0;
    lbuf[24:0] = l;
    for(i=24; i>=0; i=i-1)
    begin
      diff_tmp = (lbuf[38:24] - {1'b0,r});
      diff = diff_tmp[14:0];
      rdiv[i] = ~diff[14];
      if(diff[14] == 0)
        lbuf[38:24] = diff;
      lbuf[38:1] = lbuf[37:0];
    end
    div_10_u25_u14 = rdiv[9:0];
  end
  endfunction


  function automatic [0:0] MUX1HOT_s_1_3_2;
    input [0:0] input_2;
    input [0:0] input_1;
    input [0:0] input_0;
    input [2:0] sel;
    reg [0:0] result;
  begin
    result = input_0 & {1{sel[0]}};
    result = result | ( input_1 & {1{sel[1]}});
    result = result | ( input_2 & {1{sel[2]}});
    MUX1HOT_s_1_3_2 = result;
  end
  endfunction


  function automatic [9:0] MUX1HOT_v_10_3_2;
    input [9:0] input_2;
    input [9:0] input_1;
    input [9:0] input_0;
    input [2:0] sel;
    reg [9:0] result;
  begin
    result = input_0 & {10{sel[0]}};
    result = result | ( input_1 & {10{sel[1]}});
    result = result | ( input_2 & {10{sel[2]}});
    MUX1HOT_v_10_3_2 = result;
  end
  endfunction


  function automatic [9:0] MUX1HOT_v_10_4_2;
    input [9:0] input_3;
    input [9:0] input_2;
    input [9:0] input_1;
    input [9:0] input_0;
    input [3:0] sel;
    reg [9:0] result;
  begin
    result = input_0 & {10{sel[0]}};
    result = result | ( input_1 & {10{sel[1]}});
    result = result | ( input_2 & {10{sel[2]}});
    result = result | ( input_3 & {10{sel[3]}});
    MUX1HOT_v_10_4_2 = result;
  end
  endfunction


  function automatic [9:0] MUX1HOT_v_10_8_2;
    input [9:0] input_7;
    input [9:0] input_6;
    input [9:0] input_5;
    input [9:0] input_4;
    input [9:0] input_3;
    input [9:0] input_2;
    input [9:0] input_1;
    input [9:0] input_0;
    input [7:0] sel;
    reg [9:0] result;
  begin
    result = input_0 & {10{sel[0]}};
    result = result | ( input_1 & {10{sel[1]}});
    result = result | ( input_2 & {10{sel[2]}});
    result = result | ( input_3 & {10{sel[3]}});
    result = result | ( input_4 & {10{sel[4]}});
    result = result | ( input_5 & {10{sel[5]}});
    result = result | ( input_6 & {10{sel[6]}});
    result = result | ( input_7 & {10{sel[7]}});
    MUX1HOT_v_10_8_2 = result;
  end
  endfunction


  function automatic [9:0] MUX1HOT_v_10_9_2;
    input [9:0] input_8;
    input [9:0] input_7;
    input [9:0] input_6;
    input [9:0] input_5;
    input [9:0] input_4;
    input [9:0] input_3;
    input [9:0] input_2;
    input [9:0] input_1;
    input [9:0] input_0;
    input [8:0] sel;
    reg [9:0] result;
  begin
    result = input_0 & {10{sel[0]}};
    result = result | ( input_1 & {10{sel[1]}});
    result = result | ( input_2 & {10{sel[2]}});
    result = result | ( input_3 & {10{sel[3]}});
    result = result | ( input_4 & {10{sel[4]}});
    result = result | ( input_5 & {10{sel[5]}});
    result = result | ( input_6 & {10{sel[6]}});
    result = result | ( input_7 & {10{sel[7]}});
    result = result | ( input_8 & {10{sel[8]}});
    MUX1HOT_v_10_9_2 = result;
  end
  endfunction


  function automatic [12:0] MUX1HOT_v_13_3_2;
    input [12:0] input_2;
    input [12:0] input_1;
    input [12:0] input_0;
    input [2:0] sel;
    reg [12:0] result;
  begin
    result = input_0 & {13{sel[0]}};
    result = result | ( input_1 & {13{sel[1]}});
    result = result | ( input_2 & {13{sel[2]}});
    MUX1HOT_v_13_3_2 = result;
  end
  endfunction


  function automatic [12:0] MUX1HOT_v_13_4_2;
    input [12:0] input_3;
    input [12:0] input_2;
    input [12:0] input_1;
    input [12:0] input_0;
    input [3:0] sel;
    reg [12:0] result;
  begin
    result = input_0 & {13{sel[0]}};
    result = result | ( input_1 & {13{sel[1]}});
    result = result | ( input_2 & {13{sel[2]}});
    result = result | ( input_3 & {13{sel[3]}});
    MUX1HOT_v_13_4_2 = result;
  end
  endfunction


  function automatic [1:0] MUX1HOT_v_2_3_2;
    input [1:0] input_2;
    input [1:0] input_1;
    input [1:0] input_0;
    input [2:0] sel;
    reg [1:0] result;
  begin
    result = input_0 & {2{sel[0]}};
    result = result | ( input_1 & {2{sel[1]}});
    result = result | ( input_2 & {2{sel[2]}});
    MUX1HOT_v_2_3_2 = result;
  end
  endfunction


  function automatic [2:0] MUX1HOT_v_3_3_2;
    input [2:0] input_2;
    input [2:0] input_1;
    input [2:0] input_0;
    input [2:0] sel;
    reg [2:0] result;
  begin
    result = input_0 & {3{sel[0]}};
    result = result | ( input_1 & {3{sel[1]}});
    result = result | ( input_2 & {3{sel[2]}});
    MUX1HOT_v_3_3_2 = result;
  end
  endfunction


  function automatic [0:0] MUX_s_1_2_2;
    input [0:0] input_0;
    input [0:0] input_1;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function automatic [9:0] MUX_v_10_61_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [9:0] input_2;
    input [9:0] input_3;
    input [9:0] input_4;
    input [9:0] input_5;
    input [9:0] input_6;
    input [9:0] input_7;
    input [9:0] input_8;
    input [9:0] input_9;
    input [9:0] input_10;
    input [9:0] input_11;
    input [9:0] input_12;
    input [9:0] input_13;
    input [9:0] input_14;
    input [9:0] input_15;
    input [9:0] input_16;
    input [9:0] input_17;
    input [9:0] input_18;
    input [9:0] input_19;
    input [9:0] input_20;
    input [9:0] input_21;
    input [9:0] input_22;
    input [9:0] input_23;
    input [9:0] input_24;
    input [9:0] input_25;
    input [9:0] input_26;
    input [9:0] input_27;
    input [9:0] input_28;
    input [9:0] input_29;
    input [9:0] input_30;
    input [9:0] input_31;
    input [9:0] input_32;
    input [9:0] input_33;
    input [9:0] input_34;
    input [9:0] input_35;
    input [9:0] input_36;
    input [9:0] input_37;
    input [9:0] input_38;
    input [9:0] input_39;
    input [9:0] input_40;
    input [9:0] input_41;
    input [9:0] input_42;
    input [9:0] input_43;
    input [9:0] input_44;
    input [9:0] input_45;
    input [9:0] input_46;
    input [9:0] input_47;
    input [9:0] input_48;
    input [9:0] input_49;
    input [9:0] input_50;
    input [9:0] input_51;
    input [9:0] input_52;
    input [9:0] input_53;
    input [9:0] input_54;
    input [9:0] input_55;
    input [9:0] input_56;
    input [9:0] input_57;
    input [9:0] input_58;
    input [9:0] input_59;
    input [9:0] input_60;
    input [5:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      6'b000000 : begin
        result = input_0;
      end
      6'b000001 : begin
        result = input_1;
      end
      6'b000010 : begin
        result = input_2;
      end
      6'b000011 : begin
        result = input_3;
      end
      6'b000100 : begin
        result = input_4;
      end
      6'b000101 : begin
        result = input_5;
      end
      6'b000110 : begin
        result = input_6;
      end
      6'b000111 : begin
        result = input_7;
      end
      6'b001000 : begin
        result = input_8;
      end
      6'b001001 : begin
        result = input_9;
      end
      6'b001010 : begin
        result = input_10;
      end
      6'b001011 : begin
        result = input_11;
      end
      6'b001100 : begin
        result = input_12;
      end
      6'b001101 : begin
        result = input_13;
      end
      6'b001110 : begin
        result = input_14;
      end
      6'b001111 : begin
        result = input_15;
      end
      6'b010000 : begin
        result = input_16;
      end
      6'b010001 : begin
        result = input_17;
      end
      6'b010010 : begin
        result = input_18;
      end
      6'b010011 : begin
        result = input_19;
      end
      6'b010100 : begin
        result = input_20;
      end
      6'b010101 : begin
        result = input_21;
      end
      6'b010110 : begin
        result = input_22;
      end
      6'b010111 : begin
        result = input_23;
      end
      6'b011000 : begin
        result = input_24;
      end
      6'b011001 : begin
        result = input_25;
      end
      6'b011010 : begin
        result = input_26;
      end
      6'b011011 : begin
        result = input_27;
      end
      6'b011100 : begin
        result = input_28;
      end
      6'b011101 : begin
        result = input_29;
      end
      6'b011110 : begin
        result = input_30;
      end
      6'b011111 : begin
        result = input_31;
      end
      6'b100000 : begin
        result = input_32;
      end
      6'b100001 : begin
        result = input_33;
      end
      6'b100010 : begin
        result = input_34;
      end
      6'b100011 : begin
        result = input_35;
      end
      6'b100100 : begin
        result = input_36;
      end
      6'b100101 : begin
        result = input_37;
      end
      6'b100110 : begin
        result = input_38;
      end
      6'b100111 : begin
        result = input_39;
      end
      6'b101000 : begin
        result = input_40;
      end
      6'b101001 : begin
        result = input_41;
      end
      6'b101010 : begin
        result = input_42;
      end
      6'b101011 : begin
        result = input_43;
      end
      6'b101100 : begin
        result = input_44;
      end
      6'b101101 : begin
        result = input_45;
      end
      6'b101110 : begin
        result = input_46;
      end
      6'b101111 : begin
        result = input_47;
      end
      6'b110000 : begin
        result = input_48;
      end
      6'b110001 : begin
        result = input_49;
      end
      6'b110010 : begin
        result = input_50;
      end
      6'b110011 : begin
        result = input_51;
      end
      6'b110100 : begin
        result = input_52;
      end
      6'b110101 : begin
        result = input_53;
      end
      6'b110110 : begin
        result = input_54;
      end
      6'b110111 : begin
        result = input_55;
      end
      6'b111000 : begin
        result = input_56;
      end
      6'b111001 : begin
        result = input_57;
      end
      6'b111010 : begin
        result = input_58;
      end
      6'b111011 : begin
        result = input_59;
      end
      default : begin
        result = input_60;
      end
    endcase
    MUX_v_10_61_2 = result;
  end
  endfunction


  function automatic [9:0] MUX_v_10_62_2x0;
    input [9:0] input_1;
    input [9:0] input_2;
    input [9:0] input_3;
    input [9:0] input_4;
    input [9:0] input_5;
    input [9:0] input_6;
    input [9:0] input_7;
    input [9:0] input_8;
    input [9:0] input_9;
    input [9:0] input_10;
    input [9:0] input_11;
    input [9:0] input_12;
    input [9:0] input_13;
    input [9:0] input_14;
    input [9:0] input_15;
    input [9:0] input_16;
    input [9:0] input_17;
    input [9:0] input_18;
    input [9:0] input_19;
    input [9:0] input_20;
    input [9:0] input_21;
    input [9:0] input_22;
    input [9:0] input_23;
    input [9:0] input_24;
    input [9:0] input_25;
    input [9:0] input_26;
    input [9:0] input_27;
    input [9:0] input_28;
    input [9:0] input_29;
    input [9:0] input_30;
    input [9:0] input_31;
    input [9:0] input_32;
    input [9:0] input_33;
    input [9:0] input_34;
    input [9:0] input_35;
    input [9:0] input_36;
    input [9:0] input_37;
    input [9:0] input_38;
    input [9:0] input_39;
    input [9:0] input_40;
    input [9:0] input_41;
    input [9:0] input_42;
    input [9:0] input_43;
    input [9:0] input_44;
    input [9:0] input_45;
    input [9:0] input_46;
    input [9:0] input_47;
    input [9:0] input_48;
    input [9:0] input_49;
    input [9:0] input_50;
    input [9:0] input_51;
    input [9:0] input_52;
    input [9:0] input_53;
    input [9:0] input_54;
    input [9:0] input_55;
    input [9:0] input_56;
    input [9:0] input_57;
    input [9:0] input_58;
    input [9:0] input_59;
    input [9:0] input_60;
    input [9:0] input_61;
    input [5:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      6'b000001 : begin
        result = input_1;
      end
      6'b000010 : begin
        result = input_2;
      end
      6'b000011 : begin
        result = input_3;
      end
      6'b000100 : begin
        result = input_4;
      end
      6'b000101 : begin
        result = input_5;
      end
      6'b000110 : begin
        result = input_6;
      end
      6'b000111 : begin
        result = input_7;
      end
      6'b001000 : begin
        result = input_8;
      end
      6'b001001 : begin
        result = input_9;
      end
      6'b001010 : begin
        result = input_10;
      end
      6'b001011 : begin
        result = input_11;
      end
      6'b001100 : begin
        result = input_12;
      end
      6'b001101 : begin
        result = input_13;
      end
      6'b001110 : begin
        result = input_14;
      end
      6'b001111 : begin
        result = input_15;
      end
      6'b010000 : begin
        result = input_16;
      end
      6'b010001 : begin
        result = input_17;
      end
      6'b010010 : begin
        result = input_18;
      end
      6'b010011 : begin
        result = input_19;
      end
      6'b010100 : begin
        result = input_20;
      end
      6'b010101 : begin
        result = input_21;
      end
      6'b010110 : begin
        result = input_22;
      end
      6'b010111 : begin
        result = input_23;
      end
      6'b011000 : begin
        result = input_24;
      end
      6'b011001 : begin
        result = input_25;
      end
      6'b011010 : begin
        result = input_26;
      end
      6'b011011 : begin
        result = input_27;
      end
      6'b011100 : begin
        result = input_28;
      end
      6'b011101 : begin
        result = input_29;
      end
      6'b011110 : begin
        result = input_30;
      end
      6'b011111 : begin
        result = input_31;
      end
      6'b100000 : begin
        result = input_32;
      end
      6'b100001 : begin
        result = input_33;
      end
      6'b100010 : begin
        result = input_34;
      end
      6'b100011 : begin
        result = input_35;
      end
      6'b100100 : begin
        result = input_36;
      end
      6'b100101 : begin
        result = input_37;
      end
      6'b100110 : begin
        result = input_38;
      end
      6'b100111 : begin
        result = input_39;
      end
      6'b101000 : begin
        result = input_40;
      end
      6'b101001 : begin
        result = input_41;
      end
      6'b101010 : begin
        result = input_42;
      end
      6'b101011 : begin
        result = input_43;
      end
      6'b101100 : begin
        result = input_44;
      end
      6'b101101 : begin
        result = input_45;
      end
      6'b101110 : begin
        result = input_46;
      end
      6'b101111 : begin
        result = input_47;
      end
      6'b110000 : begin
        result = input_48;
      end
      6'b110001 : begin
        result = input_49;
      end
      6'b110010 : begin
        result = input_50;
      end
      6'b110011 : begin
        result = input_51;
      end
      6'b110100 : begin
        result = input_52;
      end
      6'b110101 : begin
        result = input_53;
      end
      6'b110110 : begin
        result = input_54;
      end
      6'b110111 : begin
        result = input_55;
      end
      6'b111000 : begin
        result = input_56;
      end
      6'b111001 : begin
        result = input_57;
      end
      6'b111010 : begin
        result = input_58;
      end
      6'b111011 : begin
        result = input_59;
      end
      6'b111100 : begin
        result = input_60;
      end
      default : begin
        result = input_61;
      end
    endcase
    MUX_v_10_62_2x0 = result;
  end
  endfunction


  function automatic [9:0] MUX_v_10_63_2x0x1;
    input [9:0] input_2;
    input [9:0] input_3;
    input [9:0] input_4;
    input [9:0] input_5;
    input [9:0] input_6;
    input [9:0] input_7;
    input [9:0] input_8;
    input [9:0] input_9;
    input [9:0] input_10;
    input [9:0] input_11;
    input [9:0] input_12;
    input [9:0] input_13;
    input [9:0] input_14;
    input [9:0] input_15;
    input [9:0] input_16;
    input [9:0] input_17;
    input [9:0] input_18;
    input [9:0] input_19;
    input [9:0] input_20;
    input [9:0] input_21;
    input [9:0] input_22;
    input [9:0] input_23;
    input [9:0] input_24;
    input [9:0] input_25;
    input [9:0] input_26;
    input [9:0] input_27;
    input [9:0] input_28;
    input [9:0] input_29;
    input [9:0] input_30;
    input [9:0] input_31;
    input [9:0] input_32;
    input [9:0] input_33;
    input [9:0] input_34;
    input [9:0] input_35;
    input [9:0] input_36;
    input [9:0] input_37;
    input [9:0] input_38;
    input [9:0] input_39;
    input [9:0] input_40;
    input [9:0] input_41;
    input [9:0] input_42;
    input [9:0] input_43;
    input [9:0] input_44;
    input [9:0] input_45;
    input [9:0] input_46;
    input [9:0] input_47;
    input [9:0] input_48;
    input [9:0] input_49;
    input [9:0] input_50;
    input [9:0] input_51;
    input [9:0] input_52;
    input [9:0] input_53;
    input [9:0] input_54;
    input [9:0] input_55;
    input [9:0] input_56;
    input [9:0] input_57;
    input [9:0] input_58;
    input [9:0] input_59;
    input [9:0] input_60;
    input [9:0] input_61;
    input [9:0] input_62;
    input [5:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      6'b000010 : begin
        result = input_2;
      end
      6'b000011 : begin
        result = input_3;
      end
      6'b000100 : begin
        result = input_4;
      end
      6'b000101 : begin
        result = input_5;
      end
      6'b000110 : begin
        result = input_6;
      end
      6'b000111 : begin
        result = input_7;
      end
      6'b001000 : begin
        result = input_8;
      end
      6'b001001 : begin
        result = input_9;
      end
      6'b001010 : begin
        result = input_10;
      end
      6'b001011 : begin
        result = input_11;
      end
      6'b001100 : begin
        result = input_12;
      end
      6'b001101 : begin
        result = input_13;
      end
      6'b001110 : begin
        result = input_14;
      end
      6'b001111 : begin
        result = input_15;
      end
      6'b010000 : begin
        result = input_16;
      end
      6'b010001 : begin
        result = input_17;
      end
      6'b010010 : begin
        result = input_18;
      end
      6'b010011 : begin
        result = input_19;
      end
      6'b010100 : begin
        result = input_20;
      end
      6'b010101 : begin
        result = input_21;
      end
      6'b010110 : begin
        result = input_22;
      end
      6'b010111 : begin
        result = input_23;
      end
      6'b011000 : begin
        result = input_24;
      end
      6'b011001 : begin
        result = input_25;
      end
      6'b011010 : begin
        result = input_26;
      end
      6'b011011 : begin
        result = input_27;
      end
      6'b011100 : begin
        result = input_28;
      end
      6'b011101 : begin
        result = input_29;
      end
      6'b011110 : begin
        result = input_30;
      end
      6'b011111 : begin
        result = input_31;
      end
      6'b100000 : begin
        result = input_32;
      end
      6'b100001 : begin
        result = input_33;
      end
      6'b100010 : begin
        result = input_34;
      end
      6'b100011 : begin
        result = input_35;
      end
      6'b100100 : begin
        result = input_36;
      end
      6'b100101 : begin
        result = input_37;
      end
      6'b100110 : begin
        result = input_38;
      end
      6'b100111 : begin
        result = input_39;
      end
      6'b101000 : begin
        result = input_40;
      end
      6'b101001 : begin
        result = input_41;
      end
      6'b101010 : begin
        result = input_42;
      end
      6'b101011 : begin
        result = input_43;
      end
      6'b101100 : begin
        result = input_44;
      end
      6'b101101 : begin
        result = input_45;
      end
      6'b101110 : begin
        result = input_46;
      end
      6'b101111 : begin
        result = input_47;
      end
      6'b110000 : begin
        result = input_48;
      end
      6'b110001 : begin
        result = input_49;
      end
      6'b110010 : begin
        result = input_50;
      end
      6'b110011 : begin
        result = input_51;
      end
      6'b110100 : begin
        result = input_52;
      end
      6'b110101 : begin
        result = input_53;
      end
      6'b110110 : begin
        result = input_54;
      end
      6'b110111 : begin
        result = input_55;
      end
      6'b111000 : begin
        result = input_56;
      end
      6'b111001 : begin
        result = input_57;
      end
      6'b111010 : begin
        result = input_58;
      end
      6'b111011 : begin
        result = input_59;
      end
      6'b111100 : begin
        result = input_60;
      end
      6'b111101 : begin
        result = input_61;
      end
      default : begin
        result = input_62;
      end
    endcase
    MUX_v_10_63_2x0x1 = result;
  end
  endfunction


  function automatic [9:0] MUX_v_10_64_2x8x9x10x11x12x13x14x15x16;
    input [9:0] input_0;
    input [9:0] input_1;
    input [9:0] input_2;
    input [9:0] input_3;
    input [9:0] input_4;
    input [9:0] input_5;
    input [9:0] input_6;
    input [9:0] input_7;
    input [9:0] input_17;
    input [9:0] input_18;
    input [9:0] input_19;
    input [9:0] input_20;
    input [9:0] input_21;
    input [9:0] input_22;
    input [9:0] input_23;
    input [9:0] input_24;
    input [9:0] input_25;
    input [9:0] input_26;
    input [9:0] input_27;
    input [9:0] input_28;
    input [9:0] input_29;
    input [9:0] input_30;
    input [9:0] input_31;
    input [9:0] input_32;
    input [9:0] input_33;
    input [9:0] input_34;
    input [9:0] input_35;
    input [9:0] input_36;
    input [9:0] input_37;
    input [9:0] input_38;
    input [9:0] input_39;
    input [9:0] input_40;
    input [9:0] input_41;
    input [9:0] input_42;
    input [9:0] input_43;
    input [9:0] input_44;
    input [9:0] input_45;
    input [9:0] input_46;
    input [9:0] input_47;
    input [9:0] input_48;
    input [9:0] input_49;
    input [9:0] input_50;
    input [9:0] input_51;
    input [9:0] input_52;
    input [9:0] input_53;
    input [9:0] input_54;
    input [9:0] input_55;
    input [9:0] input_56;
    input [9:0] input_57;
    input [9:0] input_58;
    input [9:0] input_59;
    input [9:0] input_60;
    input [9:0] input_61;
    input [9:0] input_62;
    input [9:0] input_63;
    input [5:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      6'b000000 : begin
        result = input_0;
      end
      6'b000001 : begin
        result = input_1;
      end
      6'b000010 : begin
        result = input_2;
      end
      6'b000011 : begin
        result = input_3;
      end
      6'b000100 : begin
        result = input_4;
      end
      6'b000101 : begin
        result = input_5;
      end
      6'b000110 : begin
        result = input_6;
      end
      6'b000111 : begin
        result = input_7;
      end
      6'b010001 : begin
        result = input_17;
      end
      6'b010010 : begin
        result = input_18;
      end
      6'b010011 : begin
        result = input_19;
      end
      6'b010100 : begin
        result = input_20;
      end
      6'b010101 : begin
        result = input_21;
      end
      6'b010110 : begin
        result = input_22;
      end
      6'b010111 : begin
        result = input_23;
      end
      6'b011000 : begin
        result = input_24;
      end
      6'b011001 : begin
        result = input_25;
      end
      6'b011010 : begin
        result = input_26;
      end
      6'b011011 : begin
        result = input_27;
      end
      6'b011100 : begin
        result = input_28;
      end
      6'b011101 : begin
        result = input_29;
      end
      6'b011110 : begin
        result = input_30;
      end
      6'b011111 : begin
        result = input_31;
      end
      6'b100000 : begin
        result = input_32;
      end
      6'b100001 : begin
        result = input_33;
      end
      6'b100010 : begin
        result = input_34;
      end
      6'b100011 : begin
        result = input_35;
      end
      6'b100100 : begin
        result = input_36;
      end
      6'b100101 : begin
        result = input_37;
      end
      6'b100110 : begin
        result = input_38;
      end
      6'b100111 : begin
        result = input_39;
      end
      6'b101000 : begin
        result = input_40;
      end
      6'b101001 : begin
        result = input_41;
      end
      6'b101010 : begin
        result = input_42;
      end
      6'b101011 : begin
        result = input_43;
      end
      6'b101100 : begin
        result = input_44;
      end
      6'b101101 : begin
        result = input_45;
      end
      6'b101110 : begin
        result = input_46;
      end
      6'b101111 : begin
        result = input_47;
      end
      6'b110000 : begin
        result = input_48;
      end
      6'b110001 : begin
        result = input_49;
      end
      6'b110010 : begin
        result = input_50;
      end
      6'b110011 : begin
        result = input_51;
      end
      6'b110100 : begin
        result = input_52;
      end
      6'b110101 : begin
        result = input_53;
      end
      6'b110110 : begin
        result = input_54;
      end
      6'b110111 : begin
        result = input_55;
      end
      6'b111000 : begin
        result = input_56;
      end
      6'b111001 : begin
        result = input_57;
      end
      6'b111010 : begin
        result = input_58;
      end
      6'b111011 : begin
        result = input_59;
      end
      6'b111100 : begin
        result = input_60;
      end
      6'b111101 : begin
        result = input_61;
      end
      6'b111110 : begin
        result = input_62;
      end
      default : begin
        result = input_63;
      end
    endcase
    MUX_v_10_64_2x8x9x10x11x12x13x14x15x16 = result;
  end
  endfunction


  function automatic [9:0] MUX_v_10_70_2x0x1x2x3x4x5x6;
    input [9:0] input_7;
    input [9:0] input_8;
    input [9:0] input_9;
    input [9:0] input_10;
    input [9:0] input_11;
    input [9:0] input_12;
    input [9:0] input_13;
    input [9:0] input_14;
    input [9:0] input_15;
    input [9:0] input_16;
    input [9:0] input_17;
    input [9:0] input_18;
    input [9:0] input_19;
    input [9:0] input_20;
    input [9:0] input_21;
    input [9:0] input_22;
    input [9:0] input_23;
    input [9:0] input_24;
    input [9:0] input_25;
    input [9:0] input_26;
    input [9:0] input_27;
    input [9:0] input_28;
    input [9:0] input_29;
    input [9:0] input_30;
    input [9:0] input_31;
    input [9:0] input_32;
    input [9:0] input_33;
    input [9:0] input_34;
    input [9:0] input_35;
    input [9:0] input_36;
    input [9:0] input_37;
    input [9:0] input_38;
    input [9:0] input_39;
    input [9:0] input_40;
    input [9:0] input_41;
    input [9:0] input_42;
    input [9:0] input_43;
    input [9:0] input_44;
    input [9:0] input_45;
    input [9:0] input_46;
    input [9:0] input_47;
    input [9:0] input_48;
    input [9:0] input_49;
    input [9:0] input_50;
    input [9:0] input_51;
    input [9:0] input_52;
    input [9:0] input_53;
    input [9:0] input_54;
    input [9:0] input_55;
    input [9:0] input_56;
    input [9:0] input_57;
    input [9:0] input_58;
    input [9:0] input_59;
    input [9:0] input_60;
    input [9:0] input_61;
    input [9:0] input_62;
    input [9:0] input_63;
    input [9:0] input_64;
    input [9:0] input_65;
    input [9:0] input_66;
    input [9:0] input_67;
    input [9:0] input_68;
    input [9:0] input_69;
    input [6:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      7'b0000111 : begin
        result = input_7;
      end
      7'b0001000 : begin
        result = input_8;
      end
      7'b0001001 : begin
        result = input_9;
      end
      7'b0001010 : begin
        result = input_10;
      end
      7'b0001011 : begin
        result = input_11;
      end
      7'b0001100 : begin
        result = input_12;
      end
      7'b0001101 : begin
        result = input_13;
      end
      7'b0001110 : begin
        result = input_14;
      end
      7'b0001111 : begin
        result = input_15;
      end
      7'b0010000 : begin
        result = input_16;
      end
      7'b0010001 : begin
        result = input_17;
      end
      7'b0010010 : begin
        result = input_18;
      end
      7'b0010011 : begin
        result = input_19;
      end
      7'b0010100 : begin
        result = input_20;
      end
      7'b0010101 : begin
        result = input_21;
      end
      7'b0010110 : begin
        result = input_22;
      end
      7'b0010111 : begin
        result = input_23;
      end
      7'b0011000 : begin
        result = input_24;
      end
      7'b0011001 : begin
        result = input_25;
      end
      7'b0011010 : begin
        result = input_26;
      end
      7'b0011011 : begin
        result = input_27;
      end
      7'b0011100 : begin
        result = input_28;
      end
      7'b0011101 : begin
        result = input_29;
      end
      7'b0011110 : begin
        result = input_30;
      end
      7'b0011111 : begin
        result = input_31;
      end
      7'b0100000 : begin
        result = input_32;
      end
      7'b0100001 : begin
        result = input_33;
      end
      7'b0100010 : begin
        result = input_34;
      end
      7'b0100011 : begin
        result = input_35;
      end
      7'b0100100 : begin
        result = input_36;
      end
      7'b0100101 : begin
        result = input_37;
      end
      7'b0100110 : begin
        result = input_38;
      end
      7'b0100111 : begin
        result = input_39;
      end
      7'b0101000 : begin
        result = input_40;
      end
      7'b0101001 : begin
        result = input_41;
      end
      7'b0101010 : begin
        result = input_42;
      end
      7'b0101011 : begin
        result = input_43;
      end
      7'b0101100 : begin
        result = input_44;
      end
      7'b0101101 : begin
        result = input_45;
      end
      7'b0101110 : begin
        result = input_46;
      end
      7'b0101111 : begin
        result = input_47;
      end
      7'b0110000 : begin
        result = input_48;
      end
      7'b0110001 : begin
        result = input_49;
      end
      7'b0110010 : begin
        result = input_50;
      end
      7'b0110011 : begin
        result = input_51;
      end
      7'b0110100 : begin
        result = input_52;
      end
      7'b0110101 : begin
        result = input_53;
      end
      7'b0110110 : begin
        result = input_54;
      end
      7'b0110111 : begin
        result = input_55;
      end
      7'b0111000 : begin
        result = input_56;
      end
      7'b0111001 : begin
        result = input_57;
      end
      7'b0111010 : begin
        result = input_58;
      end
      7'b0111011 : begin
        result = input_59;
      end
      7'b0111100 : begin
        result = input_60;
      end
      7'b0111101 : begin
        result = input_61;
      end
      7'b0111110 : begin
        result = input_62;
      end
      7'b0111111 : begin
        result = input_63;
      end
      7'b1000000 : begin
        result = input_64;
      end
      7'b1000001 : begin
        result = input_65;
      end
      7'b1000010 : begin
        result = input_66;
      end
      7'b1000011 : begin
        result = input_67;
      end
      7'b1000100 : begin
        result = input_68;
      end
      default : begin
        result = input_69;
      end
    endcase
    MUX_v_10_70_2x0x1x2x3x4x5x6 = result;
  end
  endfunction


  function automatic [9:0] MUX_v_10_71_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [9:0] input_2;
    input [9:0] input_3;
    input [9:0] input_4;
    input [9:0] input_5;
    input [9:0] input_6;
    input [9:0] input_7;
    input [9:0] input_8;
    input [9:0] input_9;
    input [9:0] input_10;
    input [9:0] input_11;
    input [9:0] input_12;
    input [9:0] input_13;
    input [9:0] input_14;
    input [9:0] input_15;
    input [9:0] input_16;
    input [9:0] input_17;
    input [9:0] input_18;
    input [9:0] input_19;
    input [9:0] input_20;
    input [9:0] input_21;
    input [9:0] input_22;
    input [9:0] input_23;
    input [9:0] input_24;
    input [9:0] input_25;
    input [9:0] input_26;
    input [9:0] input_27;
    input [9:0] input_28;
    input [9:0] input_29;
    input [9:0] input_30;
    input [9:0] input_31;
    input [9:0] input_32;
    input [9:0] input_33;
    input [9:0] input_34;
    input [9:0] input_35;
    input [9:0] input_36;
    input [9:0] input_37;
    input [9:0] input_38;
    input [9:0] input_39;
    input [9:0] input_40;
    input [9:0] input_41;
    input [9:0] input_42;
    input [9:0] input_43;
    input [9:0] input_44;
    input [9:0] input_45;
    input [9:0] input_46;
    input [9:0] input_47;
    input [9:0] input_48;
    input [9:0] input_49;
    input [9:0] input_50;
    input [9:0] input_51;
    input [9:0] input_52;
    input [9:0] input_53;
    input [9:0] input_54;
    input [9:0] input_55;
    input [9:0] input_56;
    input [9:0] input_57;
    input [9:0] input_58;
    input [9:0] input_59;
    input [9:0] input_60;
    input [9:0] input_61;
    input [9:0] input_62;
    input [9:0] input_63;
    input [9:0] input_64;
    input [9:0] input_65;
    input [9:0] input_66;
    input [9:0] input_67;
    input [9:0] input_68;
    input [9:0] input_69;
    input [9:0] input_70;
    input [6:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      7'b0000000 : begin
        result = input_0;
      end
      7'b0000001 : begin
        result = input_1;
      end
      7'b0000010 : begin
        result = input_2;
      end
      7'b0000011 : begin
        result = input_3;
      end
      7'b0000100 : begin
        result = input_4;
      end
      7'b0000101 : begin
        result = input_5;
      end
      7'b0000110 : begin
        result = input_6;
      end
      7'b0000111 : begin
        result = input_7;
      end
      7'b0001000 : begin
        result = input_8;
      end
      7'b0001001 : begin
        result = input_9;
      end
      7'b0001010 : begin
        result = input_10;
      end
      7'b0001011 : begin
        result = input_11;
      end
      7'b0001100 : begin
        result = input_12;
      end
      7'b0001101 : begin
        result = input_13;
      end
      7'b0001110 : begin
        result = input_14;
      end
      7'b0001111 : begin
        result = input_15;
      end
      7'b0010000 : begin
        result = input_16;
      end
      7'b0010001 : begin
        result = input_17;
      end
      7'b0010010 : begin
        result = input_18;
      end
      7'b0010011 : begin
        result = input_19;
      end
      7'b0010100 : begin
        result = input_20;
      end
      7'b0010101 : begin
        result = input_21;
      end
      7'b0010110 : begin
        result = input_22;
      end
      7'b0010111 : begin
        result = input_23;
      end
      7'b0011000 : begin
        result = input_24;
      end
      7'b0011001 : begin
        result = input_25;
      end
      7'b0011010 : begin
        result = input_26;
      end
      7'b0011011 : begin
        result = input_27;
      end
      7'b0011100 : begin
        result = input_28;
      end
      7'b0011101 : begin
        result = input_29;
      end
      7'b0011110 : begin
        result = input_30;
      end
      7'b0011111 : begin
        result = input_31;
      end
      7'b0100000 : begin
        result = input_32;
      end
      7'b0100001 : begin
        result = input_33;
      end
      7'b0100010 : begin
        result = input_34;
      end
      7'b0100011 : begin
        result = input_35;
      end
      7'b0100100 : begin
        result = input_36;
      end
      7'b0100101 : begin
        result = input_37;
      end
      7'b0100110 : begin
        result = input_38;
      end
      7'b0100111 : begin
        result = input_39;
      end
      7'b0101000 : begin
        result = input_40;
      end
      7'b0101001 : begin
        result = input_41;
      end
      7'b0101010 : begin
        result = input_42;
      end
      7'b0101011 : begin
        result = input_43;
      end
      7'b0101100 : begin
        result = input_44;
      end
      7'b0101101 : begin
        result = input_45;
      end
      7'b0101110 : begin
        result = input_46;
      end
      7'b0101111 : begin
        result = input_47;
      end
      7'b0110000 : begin
        result = input_48;
      end
      7'b0110001 : begin
        result = input_49;
      end
      7'b0110010 : begin
        result = input_50;
      end
      7'b0110011 : begin
        result = input_51;
      end
      7'b0110100 : begin
        result = input_52;
      end
      7'b0110101 : begin
        result = input_53;
      end
      7'b0110110 : begin
        result = input_54;
      end
      7'b0110111 : begin
        result = input_55;
      end
      7'b0111000 : begin
        result = input_56;
      end
      7'b0111001 : begin
        result = input_57;
      end
      7'b0111010 : begin
        result = input_58;
      end
      7'b0111011 : begin
        result = input_59;
      end
      7'b0111100 : begin
        result = input_60;
      end
      7'b0111101 : begin
        result = input_61;
      end
      7'b0111110 : begin
        result = input_62;
      end
      7'b0111111 : begin
        result = input_63;
      end
      7'b1000000 : begin
        result = input_64;
      end
      7'b1000001 : begin
        result = input_65;
      end
      7'b1000010 : begin
        result = input_66;
      end
      7'b1000011 : begin
        result = input_67;
      end
      7'b1000100 : begin
        result = input_68;
      end
      7'b1000101 : begin
        result = input_69;
      end
      default : begin
        result = input_70;
      end
    endcase
    MUX_v_10_71_2 = result;
  end
  endfunction


  function automatic [9:0] MUX_v_10_72_2x0x1x2x3x4x5x6x7x8;
    input [9:0] input_9;
    input [9:0] input_10;
    input [9:0] input_11;
    input [9:0] input_12;
    input [9:0] input_13;
    input [9:0] input_14;
    input [9:0] input_15;
    input [9:0] input_16;
    input [9:0] input_17;
    input [9:0] input_18;
    input [9:0] input_19;
    input [9:0] input_20;
    input [9:0] input_21;
    input [9:0] input_22;
    input [9:0] input_23;
    input [9:0] input_24;
    input [9:0] input_25;
    input [9:0] input_26;
    input [9:0] input_27;
    input [9:0] input_28;
    input [9:0] input_29;
    input [9:0] input_30;
    input [9:0] input_31;
    input [9:0] input_32;
    input [9:0] input_33;
    input [9:0] input_34;
    input [9:0] input_35;
    input [9:0] input_36;
    input [9:0] input_37;
    input [9:0] input_38;
    input [9:0] input_39;
    input [9:0] input_40;
    input [9:0] input_41;
    input [9:0] input_42;
    input [9:0] input_43;
    input [9:0] input_44;
    input [9:0] input_45;
    input [9:0] input_46;
    input [9:0] input_47;
    input [9:0] input_48;
    input [9:0] input_49;
    input [9:0] input_50;
    input [9:0] input_51;
    input [9:0] input_52;
    input [9:0] input_53;
    input [9:0] input_54;
    input [9:0] input_55;
    input [9:0] input_56;
    input [9:0] input_57;
    input [9:0] input_58;
    input [9:0] input_59;
    input [9:0] input_60;
    input [9:0] input_61;
    input [9:0] input_62;
    input [9:0] input_63;
    input [9:0] input_64;
    input [9:0] input_65;
    input [9:0] input_66;
    input [9:0] input_67;
    input [9:0] input_68;
    input [9:0] input_69;
    input [9:0] input_70;
    input [9:0] input_71;
    input [6:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      7'b0001001 : begin
        result = input_9;
      end
      7'b0001010 : begin
        result = input_10;
      end
      7'b0001011 : begin
        result = input_11;
      end
      7'b0001100 : begin
        result = input_12;
      end
      7'b0001101 : begin
        result = input_13;
      end
      7'b0001110 : begin
        result = input_14;
      end
      7'b0001111 : begin
        result = input_15;
      end
      7'b0010000 : begin
        result = input_16;
      end
      7'b0010001 : begin
        result = input_17;
      end
      7'b0010010 : begin
        result = input_18;
      end
      7'b0010011 : begin
        result = input_19;
      end
      7'b0010100 : begin
        result = input_20;
      end
      7'b0010101 : begin
        result = input_21;
      end
      7'b0010110 : begin
        result = input_22;
      end
      7'b0010111 : begin
        result = input_23;
      end
      7'b0011000 : begin
        result = input_24;
      end
      7'b0011001 : begin
        result = input_25;
      end
      7'b0011010 : begin
        result = input_26;
      end
      7'b0011011 : begin
        result = input_27;
      end
      7'b0011100 : begin
        result = input_28;
      end
      7'b0011101 : begin
        result = input_29;
      end
      7'b0011110 : begin
        result = input_30;
      end
      7'b0011111 : begin
        result = input_31;
      end
      7'b0100000 : begin
        result = input_32;
      end
      7'b0100001 : begin
        result = input_33;
      end
      7'b0100010 : begin
        result = input_34;
      end
      7'b0100011 : begin
        result = input_35;
      end
      7'b0100100 : begin
        result = input_36;
      end
      7'b0100101 : begin
        result = input_37;
      end
      7'b0100110 : begin
        result = input_38;
      end
      7'b0100111 : begin
        result = input_39;
      end
      7'b0101000 : begin
        result = input_40;
      end
      7'b0101001 : begin
        result = input_41;
      end
      7'b0101010 : begin
        result = input_42;
      end
      7'b0101011 : begin
        result = input_43;
      end
      7'b0101100 : begin
        result = input_44;
      end
      7'b0101101 : begin
        result = input_45;
      end
      7'b0101110 : begin
        result = input_46;
      end
      7'b0101111 : begin
        result = input_47;
      end
      7'b0110000 : begin
        result = input_48;
      end
      7'b0110001 : begin
        result = input_49;
      end
      7'b0110010 : begin
        result = input_50;
      end
      7'b0110011 : begin
        result = input_51;
      end
      7'b0110100 : begin
        result = input_52;
      end
      7'b0110101 : begin
        result = input_53;
      end
      7'b0110110 : begin
        result = input_54;
      end
      7'b0110111 : begin
        result = input_55;
      end
      7'b0111000 : begin
        result = input_56;
      end
      7'b0111001 : begin
        result = input_57;
      end
      7'b0111010 : begin
        result = input_58;
      end
      7'b0111011 : begin
        result = input_59;
      end
      7'b0111100 : begin
        result = input_60;
      end
      7'b0111101 : begin
        result = input_61;
      end
      7'b0111110 : begin
        result = input_62;
      end
      7'b0111111 : begin
        result = input_63;
      end
      7'b1000000 : begin
        result = input_64;
      end
      7'b1000001 : begin
        result = input_65;
      end
      7'b1000010 : begin
        result = input_66;
      end
      7'b1000011 : begin
        result = input_67;
      end
      7'b1000100 : begin
        result = input_68;
      end
      7'b1000101 : begin
        result = input_69;
      end
      7'b1000110 : begin
        result = input_70;
      end
      default : begin
        result = input_71;
      end
    endcase
    MUX_v_10_72_2x0x1x2x3x4x5x6x7x8 = result;
  end
  endfunction


  function automatic [9:0] MUX_v_10_79_2x0x1x2x3x4x5x6x7x8x9x10x11x12x13x14x15x16;
    input [9:0] input_17;
    input [9:0] input_18;
    input [9:0] input_19;
    input [9:0] input_20;
    input [9:0] input_21;
    input [9:0] input_22;
    input [9:0] input_23;
    input [9:0] input_24;
    input [9:0] input_25;
    input [9:0] input_26;
    input [9:0] input_27;
    input [9:0] input_28;
    input [9:0] input_29;
    input [9:0] input_30;
    input [9:0] input_31;
    input [9:0] input_32;
    input [9:0] input_33;
    input [9:0] input_34;
    input [9:0] input_35;
    input [9:0] input_36;
    input [9:0] input_37;
    input [9:0] input_38;
    input [9:0] input_39;
    input [9:0] input_40;
    input [9:0] input_41;
    input [9:0] input_42;
    input [9:0] input_43;
    input [9:0] input_44;
    input [9:0] input_45;
    input [9:0] input_46;
    input [9:0] input_47;
    input [9:0] input_48;
    input [9:0] input_49;
    input [9:0] input_50;
    input [9:0] input_51;
    input [9:0] input_52;
    input [9:0] input_53;
    input [9:0] input_54;
    input [9:0] input_55;
    input [9:0] input_56;
    input [9:0] input_57;
    input [9:0] input_58;
    input [9:0] input_59;
    input [9:0] input_60;
    input [9:0] input_61;
    input [9:0] input_62;
    input [9:0] input_63;
    input [9:0] input_64;
    input [9:0] input_65;
    input [9:0] input_66;
    input [9:0] input_67;
    input [9:0] input_68;
    input [9:0] input_69;
    input [9:0] input_70;
    input [9:0] input_71;
    input [9:0] input_72;
    input [9:0] input_73;
    input [9:0] input_74;
    input [9:0] input_75;
    input [9:0] input_76;
    input [9:0] input_77;
    input [9:0] input_78;
    input [6:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      7'b0010001 : begin
        result = input_17;
      end
      7'b0010010 : begin
        result = input_18;
      end
      7'b0010011 : begin
        result = input_19;
      end
      7'b0010100 : begin
        result = input_20;
      end
      7'b0010101 : begin
        result = input_21;
      end
      7'b0010110 : begin
        result = input_22;
      end
      7'b0010111 : begin
        result = input_23;
      end
      7'b0011000 : begin
        result = input_24;
      end
      7'b0011001 : begin
        result = input_25;
      end
      7'b0011010 : begin
        result = input_26;
      end
      7'b0011011 : begin
        result = input_27;
      end
      7'b0011100 : begin
        result = input_28;
      end
      7'b0011101 : begin
        result = input_29;
      end
      7'b0011110 : begin
        result = input_30;
      end
      7'b0011111 : begin
        result = input_31;
      end
      7'b0100000 : begin
        result = input_32;
      end
      7'b0100001 : begin
        result = input_33;
      end
      7'b0100010 : begin
        result = input_34;
      end
      7'b0100011 : begin
        result = input_35;
      end
      7'b0100100 : begin
        result = input_36;
      end
      7'b0100101 : begin
        result = input_37;
      end
      7'b0100110 : begin
        result = input_38;
      end
      7'b0100111 : begin
        result = input_39;
      end
      7'b0101000 : begin
        result = input_40;
      end
      7'b0101001 : begin
        result = input_41;
      end
      7'b0101010 : begin
        result = input_42;
      end
      7'b0101011 : begin
        result = input_43;
      end
      7'b0101100 : begin
        result = input_44;
      end
      7'b0101101 : begin
        result = input_45;
      end
      7'b0101110 : begin
        result = input_46;
      end
      7'b0101111 : begin
        result = input_47;
      end
      7'b0110000 : begin
        result = input_48;
      end
      7'b0110001 : begin
        result = input_49;
      end
      7'b0110010 : begin
        result = input_50;
      end
      7'b0110011 : begin
        result = input_51;
      end
      7'b0110100 : begin
        result = input_52;
      end
      7'b0110101 : begin
        result = input_53;
      end
      7'b0110110 : begin
        result = input_54;
      end
      7'b0110111 : begin
        result = input_55;
      end
      7'b0111000 : begin
        result = input_56;
      end
      7'b0111001 : begin
        result = input_57;
      end
      7'b0111010 : begin
        result = input_58;
      end
      7'b0111011 : begin
        result = input_59;
      end
      7'b0111100 : begin
        result = input_60;
      end
      7'b0111101 : begin
        result = input_61;
      end
      7'b0111110 : begin
        result = input_62;
      end
      7'b0111111 : begin
        result = input_63;
      end
      7'b1000000 : begin
        result = input_64;
      end
      7'b1000001 : begin
        result = input_65;
      end
      7'b1000010 : begin
        result = input_66;
      end
      7'b1000011 : begin
        result = input_67;
      end
      7'b1000100 : begin
        result = input_68;
      end
      7'b1000101 : begin
        result = input_69;
      end
      7'b1000110 : begin
        result = input_70;
      end
      7'b1000111 : begin
        result = input_71;
      end
      7'b1001000 : begin
        result = input_72;
      end
      7'b1001001 : begin
        result = input_73;
      end
      7'b1001010 : begin
        result = input_74;
      end
      7'b1001011 : begin
        result = input_75;
      end
      7'b1001100 : begin
        result = input_76;
      end
      7'b1001101 : begin
        result = input_77;
      end
      default : begin
        result = input_78;
      end
    endcase
    MUX_v_10_79_2x0x1x2x3x4x5x6x7x8x9x10x11x12x13x14x15x16 = result;
  end
  endfunction


  function automatic [9:0] MUX_v_10_80_2x0x1x2x3x4x5x6x7x8x9x10x11x12x13x14x15;
    input [9:0] input_16;
    input [9:0] input_17;
    input [9:0] input_18;
    input [9:0] input_19;
    input [9:0] input_20;
    input [9:0] input_21;
    input [9:0] input_22;
    input [9:0] input_23;
    input [9:0] input_24;
    input [9:0] input_25;
    input [9:0] input_26;
    input [9:0] input_27;
    input [9:0] input_28;
    input [9:0] input_29;
    input [9:0] input_30;
    input [9:0] input_31;
    input [9:0] input_32;
    input [9:0] input_33;
    input [9:0] input_34;
    input [9:0] input_35;
    input [9:0] input_36;
    input [9:0] input_37;
    input [9:0] input_38;
    input [9:0] input_39;
    input [9:0] input_40;
    input [9:0] input_41;
    input [9:0] input_42;
    input [9:0] input_43;
    input [9:0] input_44;
    input [9:0] input_45;
    input [9:0] input_46;
    input [9:0] input_47;
    input [9:0] input_48;
    input [9:0] input_49;
    input [9:0] input_50;
    input [9:0] input_51;
    input [9:0] input_52;
    input [9:0] input_53;
    input [9:0] input_54;
    input [9:0] input_55;
    input [9:0] input_56;
    input [9:0] input_57;
    input [9:0] input_58;
    input [9:0] input_59;
    input [9:0] input_60;
    input [9:0] input_61;
    input [9:0] input_62;
    input [9:0] input_63;
    input [9:0] input_64;
    input [9:0] input_65;
    input [9:0] input_66;
    input [9:0] input_67;
    input [9:0] input_68;
    input [9:0] input_69;
    input [9:0] input_70;
    input [9:0] input_71;
    input [9:0] input_72;
    input [9:0] input_73;
    input [9:0] input_74;
    input [9:0] input_75;
    input [9:0] input_76;
    input [9:0] input_77;
    input [9:0] input_78;
    input [9:0] input_79;
    input [6:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      7'b0010000 : begin
        result = input_16;
      end
      7'b0010001 : begin
        result = input_17;
      end
      7'b0010010 : begin
        result = input_18;
      end
      7'b0010011 : begin
        result = input_19;
      end
      7'b0010100 : begin
        result = input_20;
      end
      7'b0010101 : begin
        result = input_21;
      end
      7'b0010110 : begin
        result = input_22;
      end
      7'b0010111 : begin
        result = input_23;
      end
      7'b0011000 : begin
        result = input_24;
      end
      7'b0011001 : begin
        result = input_25;
      end
      7'b0011010 : begin
        result = input_26;
      end
      7'b0011011 : begin
        result = input_27;
      end
      7'b0011100 : begin
        result = input_28;
      end
      7'b0011101 : begin
        result = input_29;
      end
      7'b0011110 : begin
        result = input_30;
      end
      7'b0011111 : begin
        result = input_31;
      end
      7'b0100000 : begin
        result = input_32;
      end
      7'b0100001 : begin
        result = input_33;
      end
      7'b0100010 : begin
        result = input_34;
      end
      7'b0100011 : begin
        result = input_35;
      end
      7'b0100100 : begin
        result = input_36;
      end
      7'b0100101 : begin
        result = input_37;
      end
      7'b0100110 : begin
        result = input_38;
      end
      7'b0100111 : begin
        result = input_39;
      end
      7'b0101000 : begin
        result = input_40;
      end
      7'b0101001 : begin
        result = input_41;
      end
      7'b0101010 : begin
        result = input_42;
      end
      7'b0101011 : begin
        result = input_43;
      end
      7'b0101100 : begin
        result = input_44;
      end
      7'b0101101 : begin
        result = input_45;
      end
      7'b0101110 : begin
        result = input_46;
      end
      7'b0101111 : begin
        result = input_47;
      end
      7'b0110000 : begin
        result = input_48;
      end
      7'b0110001 : begin
        result = input_49;
      end
      7'b0110010 : begin
        result = input_50;
      end
      7'b0110011 : begin
        result = input_51;
      end
      7'b0110100 : begin
        result = input_52;
      end
      7'b0110101 : begin
        result = input_53;
      end
      7'b0110110 : begin
        result = input_54;
      end
      7'b0110111 : begin
        result = input_55;
      end
      7'b0111000 : begin
        result = input_56;
      end
      7'b0111001 : begin
        result = input_57;
      end
      7'b0111010 : begin
        result = input_58;
      end
      7'b0111011 : begin
        result = input_59;
      end
      7'b0111100 : begin
        result = input_60;
      end
      7'b0111101 : begin
        result = input_61;
      end
      7'b0111110 : begin
        result = input_62;
      end
      7'b0111111 : begin
        result = input_63;
      end
      7'b1000000 : begin
        result = input_64;
      end
      7'b1000001 : begin
        result = input_65;
      end
      7'b1000010 : begin
        result = input_66;
      end
      7'b1000011 : begin
        result = input_67;
      end
      7'b1000100 : begin
        result = input_68;
      end
      7'b1000101 : begin
        result = input_69;
      end
      7'b1000110 : begin
        result = input_70;
      end
      7'b1000111 : begin
        result = input_71;
      end
      7'b1001000 : begin
        result = input_72;
      end
      7'b1001001 : begin
        result = input_73;
      end
      7'b1001010 : begin
        result = input_74;
      end
      7'b1001011 : begin
        result = input_75;
      end
      7'b1001100 : begin
        result = input_76;
      end
      7'b1001101 : begin
        result = input_77;
      end
      7'b1001110 : begin
        result = input_78;
      end
      default : begin
        result = input_79;
      end
    endcase
    MUX_v_10_80_2x0x1x2x3x4x5x6x7x8x9x10x11x12x13x14x15 = result;
  end
  endfunction


  function automatic [9:0] MUX_v_10_81_2x0;
    input [9:0] input_1;
    input [9:0] input_2;
    input [9:0] input_3;
    input [9:0] input_4;
    input [9:0] input_5;
    input [9:0] input_6;
    input [9:0] input_7;
    input [9:0] input_8;
    input [9:0] input_9;
    input [9:0] input_10;
    input [9:0] input_11;
    input [9:0] input_12;
    input [9:0] input_13;
    input [9:0] input_14;
    input [9:0] input_15;
    input [9:0] input_16;
    input [9:0] input_17;
    input [9:0] input_18;
    input [9:0] input_19;
    input [9:0] input_20;
    input [9:0] input_21;
    input [9:0] input_22;
    input [9:0] input_23;
    input [9:0] input_24;
    input [9:0] input_25;
    input [9:0] input_26;
    input [9:0] input_27;
    input [9:0] input_28;
    input [9:0] input_29;
    input [9:0] input_30;
    input [9:0] input_31;
    input [9:0] input_32;
    input [9:0] input_33;
    input [9:0] input_34;
    input [9:0] input_35;
    input [9:0] input_36;
    input [9:0] input_37;
    input [9:0] input_38;
    input [9:0] input_39;
    input [9:0] input_40;
    input [9:0] input_41;
    input [9:0] input_42;
    input [9:0] input_43;
    input [9:0] input_44;
    input [9:0] input_45;
    input [9:0] input_46;
    input [9:0] input_47;
    input [9:0] input_48;
    input [9:0] input_49;
    input [9:0] input_50;
    input [9:0] input_51;
    input [9:0] input_52;
    input [9:0] input_53;
    input [9:0] input_54;
    input [9:0] input_55;
    input [9:0] input_56;
    input [9:0] input_57;
    input [9:0] input_58;
    input [9:0] input_59;
    input [9:0] input_60;
    input [9:0] input_61;
    input [9:0] input_62;
    input [9:0] input_63;
    input [9:0] input_64;
    input [9:0] input_65;
    input [9:0] input_66;
    input [9:0] input_67;
    input [9:0] input_68;
    input [9:0] input_69;
    input [9:0] input_70;
    input [9:0] input_71;
    input [9:0] input_72;
    input [9:0] input_73;
    input [9:0] input_74;
    input [9:0] input_75;
    input [9:0] input_76;
    input [9:0] input_77;
    input [9:0] input_78;
    input [9:0] input_79;
    input [9:0] input_80;
    input [6:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      7'b0000001 : begin
        result = input_1;
      end
      7'b0000010 : begin
        result = input_2;
      end
      7'b0000011 : begin
        result = input_3;
      end
      7'b0000100 : begin
        result = input_4;
      end
      7'b0000101 : begin
        result = input_5;
      end
      7'b0000110 : begin
        result = input_6;
      end
      7'b0000111 : begin
        result = input_7;
      end
      7'b0001000 : begin
        result = input_8;
      end
      7'b0001001 : begin
        result = input_9;
      end
      7'b0001010 : begin
        result = input_10;
      end
      7'b0001011 : begin
        result = input_11;
      end
      7'b0001100 : begin
        result = input_12;
      end
      7'b0001101 : begin
        result = input_13;
      end
      7'b0001110 : begin
        result = input_14;
      end
      7'b0001111 : begin
        result = input_15;
      end
      7'b0010000 : begin
        result = input_16;
      end
      7'b0010001 : begin
        result = input_17;
      end
      7'b0010010 : begin
        result = input_18;
      end
      7'b0010011 : begin
        result = input_19;
      end
      7'b0010100 : begin
        result = input_20;
      end
      7'b0010101 : begin
        result = input_21;
      end
      7'b0010110 : begin
        result = input_22;
      end
      7'b0010111 : begin
        result = input_23;
      end
      7'b0011000 : begin
        result = input_24;
      end
      7'b0011001 : begin
        result = input_25;
      end
      7'b0011010 : begin
        result = input_26;
      end
      7'b0011011 : begin
        result = input_27;
      end
      7'b0011100 : begin
        result = input_28;
      end
      7'b0011101 : begin
        result = input_29;
      end
      7'b0011110 : begin
        result = input_30;
      end
      7'b0011111 : begin
        result = input_31;
      end
      7'b0100000 : begin
        result = input_32;
      end
      7'b0100001 : begin
        result = input_33;
      end
      7'b0100010 : begin
        result = input_34;
      end
      7'b0100011 : begin
        result = input_35;
      end
      7'b0100100 : begin
        result = input_36;
      end
      7'b0100101 : begin
        result = input_37;
      end
      7'b0100110 : begin
        result = input_38;
      end
      7'b0100111 : begin
        result = input_39;
      end
      7'b0101000 : begin
        result = input_40;
      end
      7'b0101001 : begin
        result = input_41;
      end
      7'b0101010 : begin
        result = input_42;
      end
      7'b0101011 : begin
        result = input_43;
      end
      7'b0101100 : begin
        result = input_44;
      end
      7'b0101101 : begin
        result = input_45;
      end
      7'b0101110 : begin
        result = input_46;
      end
      7'b0101111 : begin
        result = input_47;
      end
      7'b0110000 : begin
        result = input_48;
      end
      7'b0110001 : begin
        result = input_49;
      end
      7'b0110010 : begin
        result = input_50;
      end
      7'b0110011 : begin
        result = input_51;
      end
      7'b0110100 : begin
        result = input_52;
      end
      7'b0110101 : begin
        result = input_53;
      end
      7'b0110110 : begin
        result = input_54;
      end
      7'b0110111 : begin
        result = input_55;
      end
      7'b0111000 : begin
        result = input_56;
      end
      7'b0111001 : begin
        result = input_57;
      end
      7'b0111010 : begin
        result = input_58;
      end
      7'b0111011 : begin
        result = input_59;
      end
      7'b0111100 : begin
        result = input_60;
      end
      7'b0111101 : begin
        result = input_61;
      end
      7'b0111110 : begin
        result = input_62;
      end
      7'b0111111 : begin
        result = input_63;
      end
      7'b1000000 : begin
        result = input_64;
      end
      7'b1000001 : begin
        result = input_65;
      end
      7'b1000010 : begin
        result = input_66;
      end
      7'b1000011 : begin
        result = input_67;
      end
      7'b1000100 : begin
        result = input_68;
      end
      7'b1000101 : begin
        result = input_69;
      end
      7'b1000110 : begin
        result = input_70;
      end
      7'b1000111 : begin
        result = input_71;
      end
      7'b1001000 : begin
        result = input_72;
      end
      7'b1001001 : begin
        result = input_73;
      end
      7'b1001010 : begin
        result = input_74;
      end
      7'b1001011 : begin
        result = input_75;
      end
      7'b1001100 : begin
        result = input_76;
      end
      7'b1001101 : begin
        result = input_77;
      end
      7'b1001110 : begin
        result = input_78;
      end
      7'b1001111 : begin
        result = input_79;
      end
      default : begin
        result = input_80;
      end
    endcase
    MUX_v_10_81_2x0 = result;
  end
  endfunction


  function automatic [9:0] MUX_v_10_81_2x0x1x2x3x4x5x6x7x8x9x10x11x12x13x14x15x16x17x18;
    input [9:0] input_19;
    input [9:0] input_20;
    input [9:0] input_21;
    input [9:0] input_22;
    input [9:0] input_23;
    input [9:0] input_24;
    input [9:0] input_25;
    input [9:0] input_26;
    input [9:0] input_27;
    input [9:0] input_28;
    input [9:0] input_29;
    input [9:0] input_30;
    input [9:0] input_31;
    input [9:0] input_32;
    input [9:0] input_33;
    input [9:0] input_34;
    input [9:0] input_35;
    input [9:0] input_36;
    input [9:0] input_37;
    input [9:0] input_38;
    input [9:0] input_39;
    input [9:0] input_40;
    input [9:0] input_41;
    input [9:0] input_42;
    input [9:0] input_43;
    input [9:0] input_44;
    input [9:0] input_45;
    input [9:0] input_46;
    input [9:0] input_47;
    input [9:0] input_48;
    input [9:0] input_49;
    input [9:0] input_50;
    input [9:0] input_51;
    input [9:0] input_52;
    input [9:0] input_53;
    input [9:0] input_54;
    input [9:0] input_55;
    input [9:0] input_56;
    input [9:0] input_57;
    input [9:0] input_58;
    input [9:0] input_59;
    input [9:0] input_60;
    input [9:0] input_61;
    input [9:0] input_62;
    input [9:0] input_63;
    input [9:0] input_64;
    input [9:0] input_65;
    input [9:0] input_66;
    input [9:0] input_67;
    input [9:0] input_68;
    input [9:0] input_69;
    input [9:0] input_70;
    input [9:0] input_71;
    input [9:0] input_72;
    input [9:0] input_73;
    input [9:0] input_74;
    input [9:0] input_75;
    input [9:0] input_76;
    input [9:0] input_77;
    input [9:0] input_78;
    input [9:0] input_79;
    input [9:0] input_80;
    input [6:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      7'b0010011 : begin
        result = input_19;
      end
      7'b0010100 : begin
        result = input_20;
      end
      7'b0010101 : begin
        result = input_21;
      end
      7'b0010110 : begin
        result = input_22;
      end
      7'b0010111 : begin
        result = input_23;
      end
      7'b0011000 : begin
        result = input_24;
      end
      7'b0011001 : begin
        result = input_25;
      end
      7'b0011010 : begin
        result = input_26;
      end
      7'b0011011 : begin
        result = input_27;
      end
      7'b0011100 : begin
        result = input_28;
      end
      7'b0011101 : begin
        result = input_29;
      end
      7'b0011110 : begin
        result = input_30;
      end
      7'b0011111 : begin
        result = input_31;
      end
      7'b0100000 : begin
        result = input_32;
      end
      7'b0100001 : begin
        result = input_33;
      end
      7'b0100010 : begin
        result = input_34;
      end
      7'b0100011 : begin
        result = input_35;
      end
      7'b0100100 : begin
        result = input_36;
      end
      7'b0100101 : begin
        result = input_37;
      end
      7'b0100110 : begin
        result = input_38;
      end
      7'b0100111 : begin
        result = input_39;
      end
      7'b0101000 : begin
        result = input_40;
      end
      7'b0101001 : begin
        result = input_41;
      end
      7'b0101010 : begin
        result = input_42;
      end
      7'b0101011 : begin
        result = input_43;
      end
      7'b0101100 : begin
        result = input_44;
      end
      7'b0101101 : begin
        result = input_45;
      end
      7'b0101110 : begin
        result = input_46;
      end
      7'b0101111 : begin
        result = input_47;
      end
      7'b0110000 : begin
        result = input_48;
      end
      7'b0110001 : begin
        result = input_49;
      end
      7'b0110010 : begin
        result = input_50;
      end
      7'b0110011 : begin
        result = input_51;
      end
      7'b0110100 : begin
        result = input_52;
      end
      7'b0110101 : begin
        result = input_53;
      end
      7'b0110110 : begin
        result = input_54;
      end
      7'b0110111 : begin
        result = input_55;
      end
      7'b0111000 : begin
        result = input_56;
      end
      7'b0111001 : begin
        result = input_57;
      end
      7'b0111010 : begin
        result = input_58;
      end
      7'b0111011 : begin
        result = input_59;
      end
      7'b0111100 : begin
        result = input_60;
      end
      7'b0111101 : begin
        result = input_61;
      end
      7'b0111110 : begin
        result = input_62;
      end
      7'b0111111 : begin
        result = input_63;
      end
      7'b1000000 : begin
        result = input_64;
      end
      7'b1000001 : begin
        result = input_65;
      end
      7'b1000010 : begin
        result = input_66;
      end
      7'b1000011 : begin
        result = input_67;
      end
      7'b1000100 : begin
        result = input_68;
      end
      7'b1000101 : begin
        result = input_69;
      end
      7'b1000110 : begin
        result = input_70;
      end
      7'b1000111 : begin
        result = input_71;
      end
      7'b1001000 : begin
        result = input_72;
      end
      7'b1001001 : begin
        result = input_73;
      end
      7'b1001010 : begin
        result = input_74;
      end
      7'b1001011 : begin
        result = input_75;
      end
      7'b1001100 : begin
        result = input_76;
      end
      7'b1001101 : begin
        result = input_77;
      end
      7'b1001110 : begin
        result = input_78;
      end
      7'b1001111 : begin
        result = input_79;
      end
      default : begin
        result = input_80;
      end
    endcase
    MUX_v_10_81_2x0x1x2x3x4x5x6x7x8x9x10x11x12x13x14x15x16x17x18 = result;
  end
  endfunction


  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [0:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction


  function automatic [12:0] MUX_v_13_2_2;
    input [12:0] input_0;
    input [12:0] input_1;
    input [0:0] sel;
    reg [12:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_13_2_2 = result;
  end
  endfunction


  function automatic [13:0] MUX_v_14_2_2;
    input [13:0] input_0;
    input [13:0] input_1;
    input [0:0] sel;
    reg [13:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_14_2_2 = result;
  end
  endfunction


  function automatic [18:0] MUX_v_19_2_2;
    input [18:0] input_0;
    input [18:0] input_1;
    input [0:0] sel;
    reg [18:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_19_2_2 = result;
  end
  endfunction


  function automatic [20:0] MUX_v_21_2_2;
    input [20:0] input_0;
    input [20:0] input_1;
    input [0:0] sel;
    reg [20:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_21_2_2 = result;
  end
  endfunction


  function automatic [23:0] MUX_v_24_2_2;
    input [23:0] input_0;
    input [23:0] input_1;
    input [0:0] sel;
    reg [23:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_24_2_2 = result;
  end
  endfunction


  function automatic [24:0] MUX_v_25_2_2;
    input [24:0] input_0;
    input [24:0] input_1;
    input [0:0] sel;
    reg [24:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_25_2_2 = result;
  end
  endfunction


  function automatic [1:0] MUX_v_2_2_2;
    input [1:0] input_0;
    input [1:0] input_1;
    input [0:0] sel;
    reg [1:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_2_2_2 = result;
  end
  endfunction


  function automatic [2:0] MUX_v_3_2_2;
    input [2:0] input_0;
    input [2:0] input_1;
    input [0:0] sel;
    reg [2:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_3_2_2 = result;
  end
  endfunction


  function automatic [3:0] MUX_v_4_2_2;
    input [3:0] input_0;
    input [3:0] input_1;
    input [0:0] sel;
    reg [3:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_4_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input [0:0] sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction


  function automatic [5:0] MUX_v_6_2_2;
    input [5:0] input_0;
    input [5:0] input_1;
    input [0:0] sel;
    reg [5:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_6_2_2 = result;
  end
  endfunction


  function automatic [6:0] MUX_v_7_2_2;
    input [6:0] input_0;
    input [6:0] input_1;
    input [0:0] sel;
    reg [6:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_7_2_2 = result;
  end
  endfunction


  function automatic [7:0] MUX_v_8_2_2;
    input [7:0] input_0;
    input [7:0] input_1;
    input [0:0] sel;
    reg [7:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_8_2_2 = result;
  end
  endfunction


  function automatic [9:0] readslicef_11_10_1;
    input [10:0] vector;
    reg [10:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_11_10_1 = tmp[9:0];
  end
  endfunction


  function automatic [0:0] readslicef_11_1_10;
    input [10:0] vector;
    reg [10:0] tmp;
  begin
    tmp = vector >> 10;
    readslicef_11_1_10 = tmp[0:0];
  end
  endfunction


  function automatic [0:0] readslicef_12_1_11;
    input [11:0] vector;
    reg [11:0] tmp;
  begin
    tmp = vector >> 11;
    readslicef_12_1_11 = tmp[0:0];
  end
  endfunction


  function automatic [0:0] readslicef_14_1_13;
    input [13:0] vector;
    reg [13:0] tmp;
  begin
    tmp = vector >> 13;
    readslicef_14_1_13 = tmp[0:0];
  end
  endfunction


  function automatic [0:0] readslicef_22_1_21;
    input [21:0] vector;
    reg [21:0] tmp;
  begin
    tmp = vector >> 21;
    readslicef_22_1_21 = tmp[0:0];
  end
  endfunction


  function automatic [20:0] readslicef_24_21_3;
    input [23:0] vector;
    reg [23:0] tmp;
  begin
    tmp = vector >> 3;
    readslicef_24_21_3 = tmp[20:0];
  end
  endfunction


  function automatic [0:0] readslicef_29_1_28;
    input [28:0] vector;
    reg [28:0] tmp;
  begin
    tmp = vector >> 28;
    readslicef_29_1_28 = tmp[0:0];
  end
  endfunction


  function automatic [27:0] readslicef_42_28_14;
    input [41:0] vector;
    reg [41:0] tmp;
  begin
    tmp = vector >> 14;
    readslicef_42_28_14 = tmp[27:0];
  end
  endfunction


  function automatic [0:0] readslicef_4_1_3;
    input [3:0] vector;
    reg [3:0] tmp;
  begin
    tmp = vector >> 3;
    readslicef_4_1_3 = tmp[0:0];
  end
  endfunction


  function automatic [0:0] readslicef_9_1_8;
    input [8:0] vector;
    reg [8:0] tmp;
  begin
    tmp = vector >> 8;
    readslicef_9_1_8 = tmp[0:0];
  end
  endfunction


  function automatic [12:0] signext_13_1;
    input [0:0] vector;
  begin
    signext_13_1= {{12{vector[0]}}, vector};
  end
  endfunction


  function automatic [27:0] signext_28_25;
    input [24:0] vector;
  begin
    signext_28_25= {{3{vector[24]}}, vector};
  end
  endfunction


  function automatic [1:0] signext_2_1;
    input [0:0] vector;
  begin
    signext_2_1= {{1{vector[0]}}, vector};
  end
  endfunction


  function automatic [2:0] signext_3_2;
    input [1:0] vector;
  begin
    signext_3_2= {{1{vector[1]}}, vector};
  end
  endfunction


  function automatic [4:0] signext_5_4;
    input [3:0] vector;
  begin
    signext_5_4= {{1{vector[3]}}, vector};
  end
  endfunction


  function automatic [21:0] conv_s2s_16_22 ;
    input [15:0]  vector ;
  begin
    conv_s2s_16_22 = {{6{vector[15]}}, vector};
  end
  endfunction


  function automatic [5:0] conv_s2u_4_6 ;
    input [3:0]  vector ;
  begin
    conv_s2u_4_6 = {{2{vector[3]}}, vector};
  end
  endfunction


  function automatic [6:0] conv_s2u_4_7 ;
    input [3:0]  vector ;
  begin
    conv_s2u_4_7 = {{3{vector[3]}}, vector};
  end
  endfunction


  function automatic [5:0] conv_s2u_5_6 ;
    input [4:0]  vector ;
  begin
    conv_s2u_5_6 = {vector[4], vector};
  end
  endfunction


  function automatic [20:0] conv_s2u_16_21 ;
    input [15:0]  vector ;
  begin
    conv_s2u_16_21 = {{5{vector[15]}}, vector};
  end
  endfunction


  function automatic [3:0] conv_u2s_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2s_3_4 =  {1'b0, vector};
  end
  endfunction


  function automatic [10:0] conv_u2s_10_11 ;
    input [9:0]  vector ;
  begin
    conv_u2s_10_11 =  {1'b0, vector};
  end
  endfunction


  function automatic [21:0] conv_u2s_21_22 ;
    input [20:0]  vector ;
  begin
    conv_u2s_21_22 =  {1'b0, vector};
  end
  endfunction


  function automatic [28:0] conv_u2s_28_29 ;
    input [27:0]  vector ;
  begin
    conv_u2s_28_29 =  {1'b0, vector};
  end
  endfunction


  function automatic [2:0] conv_u2u_1_3 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_3 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [3:0] conv_u2u_1_4 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_4 = {{3{1'b0}}, vector};
  end
  endfunction


  function automatic [10:0] conv_u2u_1_11 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_11 = {{10{1'b0}}, vector};
  end
  endfunction


  function automatic [2:0] conv_u2u_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_3 = {1'b0, vector};
  end
  endfunction


  function automatic [3:0] conv_u2u_2_4 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_4 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [3:0] conv_u2u_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_4 = {1'b0, vector};
  end
  endfunction


  function automatic [4:0] conv_u2u_3_5 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_5 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [4:0] conv_u2u_4_5 ;
    input [3:0]  vector ;
  begin
    conv_u2u_4_5 = {1'b0, vector};
  end
  endfunction


  function automatic [5:0] conv_u2u_4_6 ;
    input [3:0]  vector ;
  begin
    conv_u2u_4_6 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [6:0] conv_u2u_4_7 ;
    input [3:0]  vector ;
  begin
    conv_u2u_4_7 = {{3{1'b0}}, vector};
  end
  endfunction


  function automatic [6:0] conv_u2u_5_7 ;
    input [4:0]  vector ;
  begin
    conv_u2u_5_7 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [6:0] conv_u2u_6_7 ;
    input [5:0]  vector ;
  begin
    conv_u2u_6_7 = {1'b0, vector};
  end
  endfunction


  function automatic [8:0] conv_u2u_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_9 = {1'b0, vector};
  end
  endfunction


  function automatic [13:0] conv_u2u_8_14 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_14 = {{6{1'b0}}, vector};
  end
  endfunction


  function automatic [13:0] conv_u2u_13_14 ;
    input [12:0]  vector ;
  begin
    conv_u2u_13_14 = {1'b0, vector};
  end
  endfunction


  function automatic [17:0] conv_u2u_18_18 ;
    input [17:0]  vector ;
  begin
    conv_u2u_18_18 = vector;
  end
  endfunction


  function automatic [24:0] conv_u2u_18_25 ;
    input [17:0]  vector ;
  begin
    conv_u2u_18_25 = {{7{1'b0}}, vector};
  end
  endfunction


  function automatic [21:0] conv_u2u_19_22 ;
    input [18:0]  vector ;
  begin
    conv_u2u_19_22 = {{3{1'b0}}, vector};
  end
  endfunction


  function automatic [19:0] conv_u2u_20_20 ;
    input [19:0]  vector ;
  begin
    conv_u2u_20_20 = vector;
  end
  endfunction


  function automatic [23:0] conv_u2u_20_24 ;
    input [19:0]  vector ;
  begin
    conv_u2u_20_24 = {{4{1'b0}}, vector};
  end
  endfunction


  function automatic [21:0] conv_u2u_21_22 ;
    input [20:0]  vector ;
  begin
    conv_u2u_21_22 = {1'b0, vector};
  end
  endfunction


  function automatic [41:0] conv_u2u_42_42 ;
    input [41:0]  vector ;
  begin
    conv_u2u_42_42 = vector;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown_core
// ------------------------------------------------------------------


module scaledown_core (
  clk, arst_n, top_reg_frameWidth, top_reg_frameHeight, scaledown_reg_m_nEb, scaledown_reg_yuvpattern,
      scaledown_reg_times, y_src_rsc_dat, y_src_rsc_vld, y_src_rsc_rdy, u_src_rsc_dat,
      u_src_rsc_vld, u_src_rsc_rdy, v_src_rsc_dat, v_src_rsc_vld, v_src_rsc_rdy,
      y_dst_rsc_dat, y_dst_rsc_vld, y_dst_rsc_rdy, u_dst_rsc_dat, u_dst_rsc_vld,
      u_dst_rsc_rdy, v_dst_rsc_dat, v_dst_rsc_vld, v_dst_rsc_rdy, y_linebuffer_rsc_0_0_i_adra_d,
      y_linebuffer_rsc_0_0_i_da_d, y_linebuffer_rsc_0_0_i_ena_d, y_linebuffer_rsc_0_0_i_wea_d,
      y_linebuffer_rsc_0_0_i_qa_d, y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, y_linebuffer_rsc_1_0_i_adra_d,
      y_linebuffer_rsc_1_0_i_da_d, y_linebuffer_rsc_1_0_i_ena_d, y_linebuffer_rsc_1_0_i_wea_d,
      y_linebuffer_rsc_1_0_i_qa_d, y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, y_linebuffer_rsc_2_0_i_adra_d,
      y_linebuffer_rsc_2_0_i_da_d, y_linebuffer_rsc_2_0_i_ena_d, y_linebuffer_rsc_2_0_i_wea_d,
      y_linebuffer_rsc_2_0_i_qa_d, y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, u_linebuffer_rsc_0_0_i_adra_d,
      u_linebuffer_rsc_0_0_i_da_d, u_linebuffer_rsc_0_0_i_ena_d, u_linebuffer_rsc_0_0_i_wea_d,
      u_linebuffer_rsc_0_0_i_qa_d, u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, u_linebuffer_rsc_1_0_i_adra_d,
      u_linebuffer_rsc_1_0_i_da_d, u_linebuffer_rsc_1_0_i_ena_d, u_linebuffer_rsc_1_0_i_wea_d,
      u_linebuffer_rsc_1_0_i_qa_d, u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, u_linebuffer_rsc_2_0_i_adra_d,
      u_linebuffer_rsc_2_0_i_da_d, u_linebuffer_rsc_2_0_i_ena_d, u_linebuffer_rsc_2_0_i_wea_d,
      u_linebuffer_rsc_2_0_i_qa_d, u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, v_linebuffer_rsc_0_0_i_adra_d,
      v_linebuffer_rsc_0_0_i_da_d, v_linebuffer_rsc_0_0_i_ena_d, v_linebuffer_rsc_0_0_i_wea_d,
      v_linebuffer_rsc_0_0_i_qa_d, v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, v_linebuffer_rsc_1_0_i_adra_d,
      v_linebuffer_rsc_1_0_i_da_d, v_linebuffer_rsc_1_0_i_ena_d, v_linebuffer_rsc_1_0_i_wea_d,
      v_linebuffer_rsc_1_0_i_qa_d, v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d, v_linebuffer_rsc_2_0_i_adra_d,
      v_linebuffer_rsc_2_0_i_da_d, v_linebuffer_rsc_2_0_i_ena_d, v_linebuffer_rsc_2_0_i_wea_d,
      v_linebuffer_rsc_2_0_i_qa_d, v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d,
      v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d
);
  input clk;
  input arst_n;
  input [12:0] top_reg_frameWidth;
  input [12:0] top_reg_frameHeight;
  input scaledown_reg_m_nEb;
  input [1:0] scaledown_reg_yuvpattern;
  input [4:0] scaledown_reg_times;
  input [9:0] y_src_rsc_dat;
  input y_src_rsc_vld;
  output y_src_rsc_rdy;
  input [9:0] u_src_rsc_dat;
  input u_src_rsc_vld;
  output u_src_rsc_rdy;
  input [9:0] v_src_rsc_dat;
  input v_src_rsc_vld;
  output v_src_rsc_rdy;
  output [9:0] y_dst_rsc_dat;
  output y_dst_rsc_vld;
  input y_dst_rsc_rdy;
  output [9:0] u_dst_rsc_dat;
  output u_dst_rsc_vld;
  input u_dst_rsc_rdy;
  output [9:0] v_dst_rsc_dat;
  output v_dst_rsc_vld;
  input v_dst_rsc_rdy;
  output [11:0] y_linebuffer_rsc_0_0_i_adra_d;
  output [9:0] y_linebuffer_rsc_0_0_i_da_d;
  output [1:0] y_linebuffer_rsc_0_0_i_ena_d;
  output [1:0] y_linebuffer_rsc_0_0_i_wea_d;
  input [19:0] y_linebuffer_rsc_0_0_i_qa_d;
  output [1:0] y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  output [23:0] y_linebuffer_rsc_1_0_i_adra_d;
  output [9:0] y_linebuffer_rsc_1_0_i_da_d;
  output [1:0] y_linebuffer_rsc_1_0_i_ena_d;
  output [1:0] y_linebuffer_rsc_1_0_i_wea_d;
  input [19:0] y_linebuffer_rsc_1_0_i_qa_d;
  output [1:0] y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  output [23:0] y_linebuffer_rsc_2_0_i_adra_d;
  output [9:0] y_linebuffer_rsc_2_0_i_da_d;
  output [1:0] y_linebuffer_rsc_2_0_i_ena_d;
  output [1:0] y_linebuffer_rsc_2_0_i_wea_d;
  input [19:0] y_linebuffer_rsc_2_0_i_qa_d;
  output [1:0] y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  output [11:0] u_linebuffer_rsc_0_0_i_adra_d;
  output [9:0] u_linebuffer_rsc_0_0_i_da_d;
  output [1:0] u_linebuffer_rsc_0_0_i_ena_d;
  output [1:0] u_linebuffer_rsc_0_0_i_wea_d;
  input [19:0] u_linebuffer_rsc_0_0_i_qa_d;
  output [1:0] u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  output [23:0] u_linebuffer_rsc_1_0_i_adra_d;
  output [9:0] u_linebuffer_rsc_1_0_i_da_d;
  output [1:0] u_linebuffer_rsc_1_0_i_ena_d;
  output [1:0] u_linebuffer_rsc_1_0_i_wea_d;
  input [19:0] u_linebuffer_rsc_1_0_i_qa_d;
  output [1:0] u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  output [23:0] u_linebuffer_rsc_2_0_i_adra_d;
  output [9:0] u_linebuffer_rsc_2_0_i_da_d;
  output [1:0] u_linebuffer_rsc_2_0_i_ena_d;
  output [1:0] u_linebuffer_rsc_2_0_i_wea_d;
  input [19:0] u_linebuffer_rsc_2_0_i_qa_d;
  output [1:0] u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  output [11:0] v_linebuffer_rsc_0_0_i_adra_d;
  output [9:0] v_linebuffer_rsc_0_0_i_da_d;
  output [1:0] v_linebuffer_rsc_0_0_i_ena_d;
  output [1:0] v_linebuffer_rsc_0_0_i_wea_d;
  input [19:0] v_linebuffer_rsc_0_0_i_qa_d;
  output [1:0] v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  output [23:0] v_linebuffer_rsc_1_0_i_adra_d;
  output [9:0] v_linebuffer_rsc_1_0_i_da_d;
  output [1:0] v_linebuffer_rsc_1_0_i_ena_d;
  output [1:0] v_linebuffer_rsc_1_0_i_wea_d;
  input [19:0] v_linebuffer_rsc_1_0_i_qa_d;
  output [1:0] v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  output [23:0] v_linebuffer_rsc_2_0_i_adra_d;
  output [9:0] v_linebuffer_rsc_2_0_i_da_d;
  output [1:0] v_linebuffer_rsc_2_0_i_ena_d;
  output [1:0] v_linebuffer_rsc_2_0_i_wea_d;
  input [19:0] v_linebuffer_rsc_2_0_i_qa_d;
  output [1:0] v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  output [1:0] v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;


  // Interconnect Declarations
  wire core_wen;
  wire core_wten;
  wire y_src_rsci_wen_comp;
  wire [9:0] y_src_rsci_idat_mxwt;
  wire u_src_rsci_wen_comp;
  wire [9:0] u_src_rsci_idat_mxwt;
  wire v_src_rsci_wen_comp;
  wire [9:0] v_src_rsci_idat_mxwt;
  wire y_dst_rsci_wen_comp;
  reg [9:0] y_dst_rsci_idat;
  wire u_dst_rsci_wen_comp;
  reg [9:0] u_dst_rsci_idat;
  wire v_dst_rsci_wen_comp;
  reg [9:0] v_dst_rsci_idat;
  wire [9:0] y_linebuffer_rsc_0_0_i_qa_d_mxwt;
  wire [19:0] y_linebuffer_rsc_1_0_i_qa_d_mxwt;
  wire [19:0] y_linebuffer_rsc_2_0_i_qa_d_mxwt;
  wire [9:0] u_linebuffer_rsc_0_0_i_qa_d_mxwt;
  wire [19:0] u_linebuffer_rsc_1_0_i_qa_d_mxwt;
  wire [19:0] u_linebuffer_rsc_2_0_i_qa_d_mxwt;
  wire [9:0] v_linebuffer_rsc_0_0_i_qa_d_mxwt;
  wire [19:0] v_linebuffer_rsc_1_0_i_qa_d_mxwt;
  wire [19:0] v_linebuffer_rsc_2_0_i_qa_d_mxwt;
  wire scaledown_row_scaledown_row_or_1_tmp;
  wire [1:0] scaledown_col_if_if_else_if_else_else_else_if_acc_tmp;
  wire [2:0] nl_scaledown_col_if_if_else_if_else_else_else_if_acc_tmp;
  wire or_dcpl_6;
  wire or_dcpl_7;
  wire or_dcpl_10;
  wire or_dcpl_29;
  wire or_dcpl_30;
  wire or_dcpl_32;
  wire and_tmp_13;
  wire or_dcpl_35;
  wire and_dcpl_17;
  wire and_dcpl_33;
  wire and_dcpl_35;
  wire or_dcpl_41;
  wire or_dcpl_45;
  wire or_dcpl_48;
  wire or_dcpl_49;
  wire or_dcpl_50;
  wire or_dcpl_54;
  wire or_dcpl_55;
  wire or_dcpl_56;
  wire or_dcpl_58;
  wire or_dcpl_60;
  wire or_dcpl_64;
  wire or_dcpl_70;
  wire or_dcpl_71;
  wire xor_dcpl;
  wire and_dcpl_36;
  wire and_dcpl_39;
  wire and_dcpl_41;
  wire or_dcpl_76;
  wire or_tmp_82;
  wire mux_tmp_34;
  wire mux_tmp_35;
  wire nand_tmp_6;
  wire or_tmp_84;
  wire mux_tmp_37;
  wire and_dcpl_44;
  wire or_dcpl_95;
  wire or_dcpl_101;
  wire or_dcpl_117;
  wire exitL_exitL_exit_scaledown_col_lpi_1_dfm_1;
  reg exit_scaledown_row_lpi_1_dfm;
  reg exitL_exit_scaledown_row_sva;
  reg [12:0] scaledown_col_x_lpi_1_dfm_2;
  reg [12:0] scaledown_row_y_lpi_1_dfm_2;
  wire scaledown_col_if_if_if_and_ssc_1;
  wire scaledown_col_if_if_and_16_ssc_1;
  wire scaledown_col_if_if_else_if_else_else_else_and_1_m1c_1;
  wire scaledown_col_if_if_and_10_m1c_1;
  wire scaledown_row_scaledown_row_nor_1_tmp_1;
  wire scaledown_col_if_if_else_if_else_else_else_else_unequal_tmp_1;
  wire scaledown_col_if_if_else_if_else_else_else_unequal_tmp_1;
  wire scaledown_col_if_if_equal_tmp_3;
  wire scaledown_col_scaledown_col_nand_tmp_1;
  reg scaledown_row_asn_sft_lpi_1_dfm_st_2;
  reg [1:0] scaledown_row_y_lpi_1_dfm_1_1_0;
  reg main_stage_0_2;
  reg scaledown_row_asn_sft_lpi_1_dfm_1;
  reg scaledown_col_not_mdf_sva_1;
  reg [12:0] scaledown_col_x_lpi_1_dfm_1;
  reg operator_13_false_operator_13_false_slc_scaledown_row_y_0_33_itm;
  reg main_stage_0_3;
  reg operator_13_false_1_operator_13_false_1_slc_scaledown_col_x_0_33_itm;
  reg [1:0] scaledown_col_x_lpi_1_dfm_2_1_0;
  reg [1:0] scaledown_row_y_lpi_1_dfm_2_1_0;
  reg [1:0] scaledown_col_if_if_else_if_else_else_else_if_acc_ncse_sva;
  wire [12:0] scaledown_col_x_lpi_1_dfm_3;
  wire exit_scaledown_row_lpi_1_dfm_1;
  reg reg_v_dst_rsci_oswt_cse;
  reg reg_v_src_rsci_oswt_cse;
  reg reg_scaledown_col_not_mdf_sva_st_2_cse;
  wire or_55_cse;
  wire or_56_cse;
  wire and_70_cse;
  wire or_166_cse;
  reg reg_v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct_1_cse_1;
  reg reg_v_linebuffer_rsc_2_0_i_ena_d_core_psct_0_cse_1;
  reg reg_v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct_1_cse_1;
  reg reg_v_linebuffer_rsc_1_0_i_ena_d_core_psct_0_cse_1;
  reg reg_v_linebuffer_rsc_0_0_i_ena_d_core_psct_0_cse_1;
  wire [11:0] y_linebuffer_rsc_0_0_i_adra_d_reg;
  wire [9:0] y_linebuffer_rsc_0_0_i_da_d_reg;
  wire [1:0] y_linebuffer_rsc_0_0_i_ena_d_reg;
  wire [1:0] y_linebuffer_rsc_0_0_i_wea_d_reg;
  wire [1:0] y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  wire [1:0] y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  wire [1:0] scaledown_col_if_if_if_if_mux1h_7_rmff;
  wire [9:0] y_linebuffer_rsc_1_0_i_da_d_reg;
  wire [1:0] y_linebuffer_rsc_1_0_i_ena_d_reg;
  wire [1:0] y_linebuffer_rsc_1_0_i_wea_d_reg;
  wire [1:0] y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  wire [1:0] y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  wire [1:0] scaledown_col_if_if_else_if_else_if_mux1h_4_rmff;
  wire [9:0] y_linebuffer_rsc_2_0_i_da_d_reg;
  wire [1:0] y_linebuffer_rsc_2_0_i_ena_d_reg;
  wire [1:0] y_linebuffer_rsc_2_0_i_wea_d_reg;
  wire [1:0] y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  wire [1:0] y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  wire [11:0] u_linebuffer_rsc_0_0_i_adra_d_reg;
  wire [9:0] u_linebuffer_rsc_0_0_i_da_d_reg;
  wire [1:0] u_linebuffer_rsc_0_0_i_ena_d_reg;
  wire [1:0] u_linebuffer_rsc_0_0_i_wea_d_reg;
  wire [1:0] u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  wire [1:0] u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  wire [9:0] u_linebuffer_rsc_1_0_i_da_d_reg;
  wire [1:0] u_linebuffer_rsc_1_0_i_ena_d_reg;
  wire [1:0] u_linebuffer_rsc_1_0_i_wea_d_reg;
  wire [1:0] u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  wire [1:0] u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  wire [9:0] u_linebuffer_rsc_2_0_i_da_d_reg;
  wire [1:0] u_linebuffer_rsc_2_0_i_ena_d_reg;
  wire [1:0] u_linebuffer_rsc_2_0_i_wea_d_reg;
  wire [1:0] u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  wire [1:0] u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  wire [11:0] v_linebuffer_rsc_0_0_i_adra_d_reg;
  wire [9:0] v_linebuffer_rsc_0_0_i_da_d_reg;
  wire [1:0] v_linebuffer_rsc_0_0_i_ena_d_reg;
  wire [1:0] v_linebuffer_rsc_0_0_i_wea_d_reg;
  wire [1:0] v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  wire [1:0] v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  wire [9:0] v_linebuffer_rsc_1_0_i_da_d_reg;
  wire [1:0] v_linebuffer_rsc_1_0_i_ena_d_reg;
  wire [1:0] v_linebuffer_rsc_1_0_i_wea_d_reg;
  wire [1:0] v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  wire [1:0] v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  wire [9:0] v_linebuffer_rsc_2_0_i_da_d_reg;
  wire [1:0] v_linebuffer_rsc_2_0_i_ena_d_reg;
  wire [1:0] v_linebuffer_rsc_2_0_i_wea_d_reg;
  wire [1:0] v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  wire [1:0] v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  wire scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_else_if_else_if_nor_1_itm;
  wire scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_else_if_else_if_nor_itm;
  wire scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_else_if_else_if_nor_2_itm;
  wire scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_3_itm;
  wire scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_2_itm;
  wire scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_6_itm;
  wire scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_5_itm;
  wire scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_1_itm;
  wire scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_itm;
  wire scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_4_itm;
  wire [12:0] z_out;
  wire [13:0] nl_z_out;
  wire [10:0] z_out_1;
  wire [11:0] nl_z_out_1;
  wire [10:0] z_out_2;
  wire [11:0] nl_z_out_2;
  wire [10:0] z_out_3;
  wire [11:0] nl_z_out_3;
  wire [13:0] z_out_4;
  wire [14:0] nl_z_out_4;
  wire [13:0] z_out_5;
  wire [14:0] nl_z_out_5;
  wire [13:0] z_out_6;
  wire [14:0] nl_z_out_6;
  reg [9:0] y_t_sva_1;
  reg [9:0] u_t_sva_1;
  reg [9:0] v_t_sva_1;
  reg scaledown_col_x_lpi_1_dfm_2_12;
  reg [10:0] scaledown_col_if_if_if_else_if_acc_ncse;
  reg [10:0] scaledown_col_if_if_if_else_if_acc_1_ncse;
  reg [10:0] scaledown_col_if_if_if_else_if_acc_2_ncse;
  wire scaledown_col_if_if_else_if_else_else_else_if_scaledown_col_if_if_else_if_else_else_else_if_and_1_cse_1;
  wire [12:0] scaledown_row_y_lpi_1_dfm_3;
  wire [11:0] scaledown_col_if_if_else_if_else_else_else_else_else_else_acc_28;
  wire [13:0] nl_scaledown_col_if_if_else_if_else_else_else_else_else_else_acc_28;
  wire [11:0] scaledown_col_if_if_else_if_else_else_else_else_else_else_acc_30;
  wire [13:0] nl_scaledown_col_if_if_else_if_else_else_else_else_else_else_acc_30;
  wire [11:0] scaledown_col_if_if_else_if_else_else_else_else_else_else_acc_32;
  wire [13:0] nl_scaledown_col_if_if_else_if_else_else_else_else_else_else_acc_32;
  wire scaledown_row_exs_6_0;
  wire v_tmp_and_ssc;
  reg [1:0] reg_v_tmp_13_0_ftd;
  reg [11:0] reg_v_tmp_13_0_ftd_1;
  reg [1:0] reg_u_tmp_13_0_ftd;
  reg [11:0] reg_u_tmp_13_0_ftd_1;
  reg [1:0] reg_y_tmp_13_0_ftd;
  reg [11:0] reg_y_tmp_13_0_ftd_1;
  reg reg_scaledown_col_if_if_else_if_else_else_slc_scaledown_row_y_1_0_ftd;
  wire scaledown_row_or_11_cse;
  wire scaledown_col_if_if_if_else_if_and_cse;
  wire operator_13_false_5_and_cse;
  wire operator_13_false_1_and_cse;
  reg [1:0] reg_scaledown_col_if_if_else_if_else_else_else_else_slc_scaledown_col_x_1_0_cse;
  reg [1:0] reg_scaledown_col_if_if_else_if_else_slc_scaledown_row_y_1_0_cse;
  wire v_tmp_and_1_cse;
  wire scaledown_row_acc_2_itm_13;
  wire scaledown_col_acc_2_itm_13_1;
  wire scaledown_col_if_if_if_else_if_and_7_cse;
  wire scaledown_col_if_if_if_else_if_and_8_cse;

  wire[1:0] scaledown_row_scaledown_row_scaledown_row_mux_2_nl;
  wire[10:0] scaledown_col_if_if_if_else_if_mux_nl;
  wire[1:0] scaledown_row_scaledown_row_scaledown_row_mux_1_nl;
  wire[10:0] scaledown_col_if_if_if_else_if_mux_4_nl;
  wire[1:0] scaledown_row_scaledown_row_scaledown_row_mux_nl;
  wire[10:0] scaledown_col_if_if_if_else_if_mux_7_nl;
  wire[0:0] mux_31_nl;
  wire[0:0] or_125_nl;
  wire[0:0] mux_32_nl;
  wire[1:0] scaledown_col_if_if_if_if_and_nl;
  wire[1:0] scaledown_col_if_if_if_if_mux1h_nl;
  wire[0:0] and_56_nl;
  wire[0:0] and_58_nl;
  wire[0:0] mux_33_nl;
  wire[0:0] or_154_nl;
  wire[0:0] or_73_nl;
  wire[0:0] and_60_nl;
  wire[0:0] mux_36_nl;
  wire[0:0] or_159_nl;
  wire[0:0] mux_39_nl;
  wire[0:0] mux_38_nl;
  wire[0:0] or_169_nl;
  wire[0:0] mux_42_nl;
  wire[0:0] mux_41_nl;
  wire[0:0] mux_40_nl;
  wire[0:0] or_180_nl;
  wire[1:0] scaledown_col_if_if_if_if_and_1_nl;
  wire[1:0] scaledown_col_if_if_if_if_mux1h_6_nl;
  wire[0:0] or_183_nl;
  wire[0:0] and_64_nl;
  wire[0:0] and_65_nl;
  wire[0:0] scaledown_col_if_if_if_if_nand_nl;
  wire[0:0] and_66_nl;
  wire[0:0] mux_43_nl;
  wire[0:0] or_201_nl;
  wire[0:0] scaledown_col_scaledown_col_scaledown_col_scaledown_col_not_nl;
  wire[13:0] scaledown_row_acc_2_nl;
  wire[14:0] nl_scaledown_row_acc_2_nl;
  wire[0:0] scaledown_row_not_15_nl;
  wire[9:0] scaledown_col_if_if_else_if_else_else_else_else_else_else_scaledown_col_if_if_else_if_else_else_else_else_else_else_mux_3_nl;
  wire[9:0] scaledown_col_if_if_else_if_else_else_else_else_else_else_scaledown_col_if_if_else_if_else_else_else_else_else_else_mux_5_nl;
  wire[9:0] scaledown_col_if_if_else_if_else_else_else_else_else_else_scaledown_col_if_if_else_if_else_else_else_else_else_else_mux_7_nl;
  wire[0:0] mux_28_nl;
  wire[0:0] nand_7_nl;
  wire[0:0] mux_27_nl;
  wire[0:0] nor_10_nl;
  wire[0:0] or_100_nl;
  wire[13:0] scaledown_col_acc_2_nl;
  wire[14:0] nl_scaledown_col_acc_2_nl;
  wire[12:0] scaledown_col_mux_4_nl;
  wire[9:0] scaledown_col_if_if_if_else_if_mux1h_7_nl;
  wire[9:0] scaledown_col_if_if_if_else_if_mux1h_6_nl;
  wire[0:0] scaledown_col_if_if_if_else_if_and_5_nl;
  wire[0:0] scaledown_col_if_if_if_else_if_and_6_nl;
  wire[9:0] scaledown_col_if_if_if_else_if_mux1h_nl;
  wire[11:0] scaledown_col_if_if_if_else_else_mux_3_nl;
  wire[11:0] scaledown_col_if_if_if_else_else_mux_4_nl;
  wire[11:0] scaledown_col_if_if_if_else_else_mux_5_nl;

  // Interconnect Declarations for Component Instantiations 
  wire [23:0] nl_scaledown_core_y_linebuffer_rsc_0_0_i_1_inst_y_linebuffer_rsc_0_0_i_adra_d_core;
  assign nl_scaledown_core_y_linebuffer_rsc_0_0_i_1_inst_y_linebuffer_rsc_0_0_i_adra_d_core
      = {12'b000000000000 , (scaledown_col_x_lpi_1_dfm_1[11:0])};
  wire [19:0] nl_scaledown_core_y_linebuffer_rsc_0_0_i_1_inst_y_linebuffer_rsc_0_0_i_da_d_core;
  assign nl_scaledown_core_y_linebuffer_rsc_0_0_i_1_inst_y_linebuffer_rsc_0_0_i_da_d_core
      = {10'b0000000000 , y_src_rsci_idat_mxwt};
  wire [1:0] nl_scaledown_core_y_linebuffer_rsc_0_0_i_1_inst_y_linebuffer_rsc_0_0_i_ena_d_core_psct;
  assign nl_scaledown_core_y_linebuffer_rsc_0_0_i_1_inst_y_linebuffer_rsc_0_0_i_ena_d_core_psct
      = {1'b0 , scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_4_itm};
  wire [1:0] nl_scaledown_core_y_linebuffer_rsc_0_0_i_1_inst_y_linebuffer_rsc_0_0_i_wea_d_core_psct;
  assign nl_scaledown_core_y_linebuffer_rsc_0_0_i_1_inst_y_linebuffer_rsc_0_0_i_wea_d_core_psct
      = {1'b0 , scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_1_itm};
  wire [1:0] nl_scaledown_core_y_linebuffer_rsc_0_0_i_1_inst_y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_scaledown_core_y_linebuffer_rsc_0_0_i_1_inst_y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_itm};
  wire [1:0] nl_scaledown_core_y_linebuffer_rsc_0_0_i_1_inst_y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_scaledown_core_y_linebuffer_rsc_0_0_i_1_inst_y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_1_itm};
  wire [19:0] nl_scaledown_core_y_linebuffer_rsc_1_0_i_1_inst_y_linebuffer_rsc_1_0_i_da_d_core;
  assign nl_scaledown_core_y_linebuffer_rsc_1_0_i_1_inst_y_linebuffer_rsc_1_0_i_da_d_core
      = {10'b0000000000 , y_src_rsci_idat_mxwt};
  wire [1:0] nl_scaledown_core_y_linebuffer_rsc_1_0_i_1_inst_y_linebuffer_rsc_1_0_i_ena_d_core_psct;
  assign nl_scaledown_core_y_linebuffer_rsc_1_0_i_1_inst_y_linebuffer_rsc_1_0_i_ena_d_core_psct
      = {scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_6_itm
      , scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_5_itm};
  wire [1:0] nl_scaledown_core_y_linebuffer_rsc_1_0_i_1_inst_y_linebuffer_rsc_1_0_i_wea_d_core_psct;
  assign nl_scaledown_core_y_linebuffer_rsc_1_0_i_1_inst_y_linebuffer_rsc_1_0_i_wea_d_core_psct
      = {1'b0 , scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_3_itm};
  wire [1:0] nl_scaledown_core_y_linebuffer_rsc_1_0_i_1_inst_y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_scaledown_core_y_linebuffer_rsc_1_0_i_1_inst_y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_6_itm
      , scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_2_itm};
  wire [1:0] nl_scaledown_core_y_linebuffer_rsc_1_0_i_1_inst_y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_scaledown_core_y_linebuffer_rsc_1_0_i_1_inst_y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_3_itm};
  wire [19:0] nl_scaledown_core_y_linebuffer_rsc_2_0_i_1_inst_y_linebuffer_rsc_2_0_i_da_d_core;
  assign nl_scaledown_core_y_linebuffer_rsc_2_0_i_1_inst_y_linebuffer_rsc_2_0_i_da_d_core
      = {10'b0000000000 , y_src_rsci_idat_mxwt};
  wire [1:0] nl_scaledown_core_y_linebuffer_rsc_2_0_i_1_inst_y_linebuffer_rsc_2_0_i_ena_d_core_psct;
  assign nl_scaledown_core_y_linebuffer_rsc_2_0_i_1_inst_y_linebuffer_rsc_2_0_i_ena_d_core_psct
      = {(~ or_dcpl_70) , scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_else_if_else_if_nor_2_itm};
  wire [1:0] nl_scaledown_core_y_linebuffer_rsc_2_0_i_1_inst_y_linebuffer_rsc_2_0_i_wea_d_core_psct;
  assign nl_scaledown_core_y_linebuffer_rsc_2_0_i_1_inst_y_linebuffer_rsc_2_0_i_wea_d_core_psct
      = {1'b0 , scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_else_if_else_if_nor_1_itm};
  wire [1:0] nl_scaledown_core_y_linebuffer_rsc_2_0_i_1_inst_y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_scaledown_core_y_linebuffer_rsc_2_0_i_1_inst_y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {(~ or_dcpl_70) , scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_else_if_else_if_nor_itm};
  wire [1:0] nl_scaledown_core_y_linebuffer_rsc_2_0_i_1_inst_y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_scaledown_core_y_linebuffer_rsc_2_0_i_1_inst_y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_else_if_else_if_nor_1_itm};
  wire [0:0] nl_scaledown_core_y_linebuffer_rsc_2_0_i_1_inst_y_linebuffer_rsc_2_0_i_oswt_1_pff;
  assign nl_scaledown_core_y_linebuffer_rsc_2_0_i_1_inst_y_linebuffer_rsc_2_0_i_oswt_1_pff
      = ~ or_dcpl_70;
  wire [23:0] nl_scaledown_core_u_linebuffer_rsc_0_0_i_1_inst_u_linebuffer_rsc_0_0_i_adra_d_core;
  assign nl_scaledown_core_u_linebuffer_rsc_0_0_i_1_inst_u_linebuffer_rsc_0_0_i_adra_d_core
      = {12'b000000000000 , (scaledown_col_x_lpi_1_dfm_1[11:0])};
  wire [19:0] nl_scaledown_core_u_linebuffer_rsc_0_0_i_1_inst_u_linebuffer_rsc_0_0_i_da_d_core;
  assign nl_scaledown_core_u_linebuffer_rsc_0_0_i_1_inst_u_linebuffer_rsc_0_0_i_da_d_core
      = {10'b0000000000 , u_src_rsci_idat_mxwt};
  wire [1:0] nl_scaledown_core_u_linebuffer_rsc_0_0_i_1_inst_u_linebuffer_rsc_0_0_i_ena_d_core_psct;
  assign nl_scaledown_core_u_linebuffer_rsc_0_0_i_1_inst_u_linebuffer_rsc_0_0_i_ena_d_core_psct
      = {1'b0 , scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_4_itm};
  wire [1:0] nl_scaledown_core_u_linebuffer_rsc_0_0_i_1_inst_u_linebuffer_rsc_0_0_i_wea_d_core_psct;
  assign nl_scaledown_core_u_linebuffer_rsc_0_0_i_1_inst_u_linebuffer_rsc_0_0_i_wea_d_core_psct
      = {1'b0 , scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_1_itm};
  wire [1:0] nl_scaledown_core_u_linebuffer_rsc_0_0_i_1_inst_u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_scaledown_core_u_linebuffer_rsc_0_0_i_1_inst_u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_itm};
  wire [1:0] nl_scaledown_core_u_linebuffer_rsc_0_0_i_1_inst_u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_scaledown_core_u_linebuffer_rsc_0_0_i_1_inst_u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_1_itm};
  wire [19:0] nl_scaledown_core_u_linebuffer_rsc_1_0_i_1_inst_u_linebuffer_rsc_1_0_i_da_d_core;
  assign nl_scaledown_core_u_linebuffer_rsc_1_0_i_1_inst_u_linebuffer_rsc_1_0_i_da_d_core
      = {10'b0000000000 , u_src_rsci_idat_mxwt};
  wire [1:0] nl_scaledown_core_u_linebuffer_rsc_1_0_i_1_inst_u_linebuffer_rsc_1_0_i_ena_d_core_psct;
  assign nl_scaledown_core_u_linebuffer_rsc_1_0_i_1_inst_u_linebuffer_rsc_1_0_i_ena_d_core_psct
      = {scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_6_itm
      , scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_5_itm};
  wire [1:0] nl_scaledown_core_u_linebuffer_rsc_1_0_i_1_inst_u_linebuffer_rsc_1_0_i_wea_d_core_psct;
  assign nl_scaledown_core_u_linebuffer_rsc_1_0_i_1_inst_u_linebuffer_rsc_1_0_i_wea_d_core_psct
      = {1'b0 , scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_3_itm};
  wire [1:0] nl_scaledown_core_u_linebuffer_rsc_1_0_i_1_inst_u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_scaledown_core_u_linebuffer_rsc_1_0_i_1_inst_u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_6_itm
      , scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_2_itm};
  wire [1:0] nl_scaledown_core_u_linebuffer_rsc_1_0_i_1_inst_u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_scaledown_core_u_linebuffer_rsc_1_0_i_1_inst_u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_3_itm};
  wire [19:0] nl_scaledown_core_u_linebuffer_rsc_2_0_i_1_inst_u_linebuffer_rsc_2_0_i_da_d_core;
  assign nl_scaledown_core_u_linebuffer_rsc_2_0_i_1_inst_u_linebuffer_rsc_2_0_i_da_d_core
      = {10'b0000000000 , u_src_rsci_idat_mxwt};
  wire [1:0] nl_scaledown_core_u_linebuffer_rsc_2_0_i_1_inst_u_linebuffer_rsc_2_0_i_ena_d_core_psct;
  assign nl_scaledown_core_u_linebuffer_rsc_2_0_i_1_inst_u_linebuffer_rsc_2_0_i_ena_d_core_psct
      = {(~ or_dcpl_70) , scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_else_if_else_if_nor_2_itm};
  wire [1:0] nl_scaledown_core_u_linebuffer_rsc_2_0_i_1_inst_u_linebuffer_rsc_2_0_i_wea_d_core_psct;
  assign nl_scaledown_core_u_linebuffer_rsc_2_0_i_1_inst_u_linebuffer_rsc_2_0_i_wea_d_core_psct
      = {1'b0 , scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_else_if_else_if_nor_1_itm};
  wire [1:0] nl_scaledown_core_u_linebuffer_rsc_2_0_i_1_inst_u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_scaledown_core_u_linebuffer_rsc_2_0_i_1_inst_u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {(~ or_dcpl_70) , scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_else_if_else_if_nor_itm};
  wire [1:0] nl_scaledown_core_u_linebuffer_rsc_2_0_i_1_inst_u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_scaledown_core_u_linebuffer_rsc_2_0_i_1_inst_u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_else_if_else_if_nor_1_itm};
  wire [0:0] nl_scaledown_core_u_linebuffer_rsc_2_0_i_1_inst_u_linebuffer_rsc_2_0_i_oswt_1_pff;
  assign nl_scaledown_core_u_linebuffer_rsc_2_0_i_1_inst_u_linebuffer_rsc_2_0_i_oswt_1_pff
      = ~ or_dcpl_70;
  wire [23:0] nl_scaledown_core_v_linebuffer_rsc_0_0_i_1_inst_v_linebuffer_rsc_0_0_i_adra_d_core;
  assign nl_scaledown_core_v_linebuffer_rsc_0_0_i_1_inst_v_linebuffer_rsc_0_0_i_adra_d_core
      = {12'b000000000000 , (scaledown_col_x_lpi_1_dfm_1[11:0])};
  wire [19:0] nl_scaledown_core_v_linebuffer_rsc_0_0_i_1_inst_v_linebuffer_rsc_0_0_i_da_d_core;
  assign nl_scaledown_core_v_linebuffer_rsc_0_0_i_1_inst_v_linebuffer_rsc_0_0_i_da_d_core
      = {10'b0000000000 , v_src_rsci_idat_mxwt};
  wire [1:0] nl_scaledown_core_v_linebuffer_rsc_0_0_i_1_inst_v_linebuffer_rsc_0_0_i_ena_d_core_psct;
  assign nl_scaledown_core_v_linebuffer_rsc_0_0_i_1_inst_v_linebuffer_rsc_0_0_i_ena_d_core_psct
      = {1'b0 , scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_4_itm};
  wire [1:0] nl_scaledown_core_v_linebuffer_rsc_0_0_i_1_inst_v_linebuffer_rsc_0_0_i_wea_d_core_psct;
  assign nl_scaledown_core_v_linebuffer_rsc_0_0_i_1_inst_v_linebuffer_rsc_0_0_i_wea_d_core_psct
      = {1'b0 , scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_1_itm};
  wire [1:0] nl_scaledown_core_v_linebuffer_rsc_0_0_i_1_inst_v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_scaledown_core_v_linebuffer_rsc_0_0_i_1_inst_v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {1'b0 , scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_itm};
  wire [1:0] nl_scaledown_core_v_linebuffer_rsc_0_0_i_1_inst_v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_scaledown_core_v_linebuffer_rsc_0_0_i_1_inst_v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_1_itm};
  wire [19:0] nl_scaledown_core_v_linebuffer_rsc_1_0_i_1_inst_v_linebuffer_rsc_1_0_i_da_d_core;
  assign nl_scaledown_core_v_linebuffer_rsc_1_0_i_1_inst_v_linebuffer_rsc_1_0_i_da_d_core
      = {10'b0000000000 , v_src_rsci_idat_mxwt};
  wire [1:0] nl_scaledown_core_v_linebuffer_rsc_1_0_i_1_inst_v_linebuffer_rsc_1_0_i_ena_d_core_psct;
  assign nl_scaledown_core_v_linebuffer_rsc_1_0_i_1_inst_v_linebuffer_rsc_1_0_i_ena_d_core_psct
      = {scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_6_itm
      , scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_5_itm};
  wire [1:0] nl_scaledown_core_v_linebuffer_rsc_1_0_i_1_inst_v_linebuffer_rsc_1_0_i_wea_d_core_psct;
  assign nl_scaledown_core_v_linebuffer_rsc_1_0_i_1_inst_v_linebuffer_rsc_1_0_i_wea_d_core_psct
      = {1'b0 , scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_3_itm};
  wire [1:0] nl_scaledown_core_v_linebuffer_rsc_1_0_i_1_inst_v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_scaledown_core_v_linebuffer_rsc_1_0_i_1_inst_v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_6_itm
      , scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_2_itm};
  wire [1:0] nl_scaledown_core_v_linebuffer_rsc_1_0_i_1_inst_v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_scaledown_core_v_linebuffer_rsc_1_0_i_1_inst_v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_3_itm};
  wire [19:0] nl_scaledown_core_v_linebuffer_rsc_2_0_i_1_inst_v_linebuffer_rsc_2_0_i_da_d_core;
  assign nl_scaledown_core_v_linebuffer_rsc_2_0_i_1_inst_v_linebuffer_rsc_2_0_i_da_d_core
      = {10'b0000000000 , v_src_rsci_idat_mxwt};
  wire [1:0] nl_scaledown_core_v_linebuffer_rsc_2_0_i_1_inst_v_linebuffer_rsc_2_0_i_ena_d_core_psct;
  assign nl_scaledown_core_v_linebuffer_rsc_2_0_i_1_inst_v_linebuffer_rsc_2_0_i_ena_d_core_psct
      = {(~ or_dcpl_70) , scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_else_if_else_if_nor_2_itm};
  wire [1:0] nl_scaledown_core_v_linebuffer_rsc_2_0_i_1_inst_v_linebuffer_rsc_2_0_i_wea_d_core_psct;
  assign nl_scaledown_core_v_linebuffer_rsc_2_0_i_1_inst_v_linebuffer_rsc_2_0_i_wea_d_core_psct
      = {1'b0 , scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_else_if_else_if_nor_1_itm};
  wire [1:0] nl_scaledown_core_v_linebuffer_rsc_2_0_i_1_inst_v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct;
  assign nl_scaledown_core_v_linebuffer_rsc_2_0_i_1_inst_v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct
      = {(~ or_dcpl_70) , scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_else_if_else_if_nor_itm};
  wire [1:0] nl_scaledown_core_v_linebuffer_rsc_2_0_i_1_inst_v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct;
  assign nl_scaledown_core_v_linebuffer_rsc_2_0_i_1_inst_v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct
      = {1'b0 , scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_else_if_else_if_nor_1_itm};
  wire [0:0] nl_scaledown_core_v_linebuffer_rsc_2_0_i_1_inst_v_linebuffer_rsc_2_0_i_oswt_1_pff;
  assign nl_scaledown_core_v_linebuffer_rsc_2_0_i_1_inst_v_linebuffer_rsc_2_0_i_oswt_1_pff
      = ~ or_dcpl_70;
  scaledown_core_y_src_rsci scaledown_core_y_src_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .y_src_rsc_dat(y_src_rsc_dat),
      .y_src_rsc_vld(y_src_rsc_vld),
      .y_src_rsc_rdy(y_src_rsc_rdy),
      .core_wen(core_wen),
      .y_src_rsci_oswt(reg_v_src_rsci_oswt_cse),
      .y_src_rsci_wen_comp(y_src_rsci_wen_comp),
      .y_src_rsci_idat_mxwt(y_src_rsci_idat_mxwt)
    );
  scaledown_core_u_src_rsci scaledown_core_u_src_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .u_src_rsc_dat(u_src_rsc_dat),
      .u_src_rsc_vld(u_src_rsc_vld),
      .u_src_rsc_rdy(u_src_rsc_rdy),
      .core_wen(core_wen),
      .u_src_rsci_oswt(reg_v_src_rsci_oswt_cse),
      .u_src_rsci_wen_comp(u_src_rsci_wen_comp),
      .u_src_rsci_idat_mxwt(u_src_rsci_idat_mxwt)
    );
  scaledown_core_v_src_rsci scaledown_core_v_src_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .v_src_rsc_dat(v_src_rsc_dat),
      .v_src_rsc_vld(v_src_rsc_vld),
      .v_src_rsc_rdy(v_src_rsc_rdy),
      .core_wen(core_wen),
      .v_src_rsci_oswt(reg_v_src_rsci_oswt_cse),
      .v_src_rsci_wen_comp(v_src_rsci_wen_comp),
      .v_src_rsci_idat_mxwt(v_src_rsci_idat_mxwt)
    );
  scaledown_core_y_dst_rsci scaledown_core_y_dst_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .y_dst_rsc_dat(y_dst_rsc_dat),
      .y_dst_rsc_vld(y_dst_rsc_vld),
      .y_dst_rsc_rdy(y_dst_rsc_rdy),
      .core_wen(core_wen),
      .y_dst_rsci_oswt(reg_v_dst_rsci_oswt_cse),
      .y_dst_rsci_wen_comp(y_dst_rsci_wen_comp),
      .y_dst_rsci_idat(y_dst_rsci_idat)
    );
  scaledown_core_u_dst_rsci scaledown_core_u_dst_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .u_dst_rsc_dat(u_dst_rsc_dat),
      .u_dst_rsc_vld(u_dst_rsc_vld),
      .u_dst_rsc_rdy(u_dst_rsc_rdy),
      .core_wen(core_wen),
      .u_dst_rsci_oswt(reg_v_dst_rsci_oswt_cse),
      .u_dst_rsci_wen_comp(u_dst_rsci_wen_comp),
      .u_dst_rsci_idat(u_dst_rsci_idat)
    );
  scaledown_core_v_dst_rsci scaledown_core_v_dst_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .v_dst_rsc_dat(v_dst_rsc_dat),
      .v_dst_rsc_vld(v_dst_rsc_vld),
      .v_dst_rsc_rdy(v_dst_rsc_rdy),
      .core_wen(core_wen),
      .v_dst_rsci_oswt(reg_v_dst_rsci_oswt_cse),
      .v_dst_rsci_wen_comp(v_dst_rsci_wen_comp),
      .v_dst_rsci_idat(v_dst_rsci_idat)
    );
  scaledown_core_y_linebuffer_rsc_0_0_i_1 scaledown_core_y_linebuffer_rsc_0_0_i_1_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .y_linebuffer_rsc_0_0_i_adra_d(y_linebuffer_rsc_0_0_i_adra_d_reg),
      .y_linebuffer_rsc_0_0_i_da_d(y_linebuffer_rsc_0_0_i_da_d_reg),
      .y_linebuffer_rsc_0_0_i_ena_d(y_linebuffer_rsc_0_0_i_ena_d_reg),
      .y_linebuffer_rsc_0_0_i_wea_d(y_linebuffer_rsc_0_0_i_wea_d_reg),
      .y_linebuffer_rsc_0_0_i_qa_d(y_linebuffer_rsc_0_0_i_qa_d),
      .y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg),
      .y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .y_linebuffer_rsc_0_0_i_oswt(reg_v_linebuffer_rsc_0_0_i_ena_d_core_psct_0_cse_1),
      .y_linebuffer_rsc_0_0_i_adra_d_core(nl_scaledown_core_y_linebuffer_rsc_0_0_i_1_inst_y_linebuffer_rsc_0_0_i_adra_d_core[23:0]),
      .y_linebuffer_rsc_0_0_i_da_d_core(nl_scaledown_core_y_linebuffer_rsc_0_0_i_1_inst_y_linebuffer_rsc_0_0_i_da_d_core[19:0]),
      .y_linebuffer_rsc_0_0_i_ena_d_core_psct(nl_scaledown_core_y_linebuffer_rsc_0_0_i_1_inst_y_linebuffer_rsc_0_0_i_ena_d_core_psct[1:0]),
      .y_linebuffer_rsc_0_0_i_wea_d_core_psct(nl_scaledown_core_y_linebuffer_rsc_0_0_i_1_inst_y_linebuffer_rsc_0_0_i_wea_d_core_psct[1:0]),
      .y_linebuffer_rsc_0_0_i_qa_d_mxwt(y_linebuffer_rsc_0_0_i_qa_d_mxwt),
      .y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_scaledown_core_y_linebuffer_rsc_0_0_i_1_inst_y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_scaledown_core_y_linebuffer_rsc_0_0_i_1_inst_y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .y_linebuffer_rsc_0_0_i_oswt_pff(scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_4_itm)
    );
  scaledown_core_y_linebuffer_rsc_1_0_i_1 scaledown_core_y_linebuffer_rsc_1_0_i_1_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .y_linebuffer_rsc_1_0_i_da_d(y_linebuffer_rsc_1_0_i_da_d_reg),
      .y_linebuffer_rsc_1_0_i_ena_d(y_linebuffer_rsc_1_0_i_ena_d_reg),
      .y_linebuffer_rsc_1_0_i_wea_d(y_linebuffer_rsc_1_0_i_wea_d_reg),
      .y_linebuffer_rsc_1_0_i_qa_d(y_linebuffer_rsc_1_0_i_qa_d),
      .y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg),
      .y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .y_linebuffer_rsc_1_0_i_oswt(reg_v_linebuffer_rsc_1_0_i_ena_d_core_psct_0_cse_1),
      .y_linebuffer_rsc_1_0_i_oswt_1(reg_v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct_1_cse_1),
      .y_linebuffer_rsc_1_0_i_da_d_core(nl_scaledown_core_y_linebuffer_rsc_1_0_i_1_inst_y_linebuffer_rsc_1_0_i_da_d_core[19:0]),
      .y_linebuffer_rsc_1_0_i_ena_d_core_psct(nl_scaledown_core_y_linebuffer_rsc_1_0_i_1_inst_y_linebuffer_rsc_1_0_i_ena_d_core_psct[1:0]),
      .y_linebuffer_rsc_1_0_i_wea_d_core_psct(nl_scaledown_core_y_linebuffer_rsc_1_0_i_1_inst_y_linebuffer_rsc_1_0_i_wea_d_core_psct[1:0]),
      .y_linebuffer_rsc_1_0_i_qa_d_mxwt(y_linebuffer_rsc_1_0_i_qa_d_mxwt),
      .y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_scaledown_core_y_linebuffer_rsc_1_0_i_1_inst_y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_scaledown_core_y_linebuffer_rsc_1_0_i_1_inst_y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .y_linebuffer_rsc_1_0_i_oswt_1_pff(scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_6_itm),
      .y_linebuffer_rsc_1_0_i_oswt_pff(scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_5_itm)
    );
  scaledown_core_y_linebuffer_rsc_2_0_i_1 scaledown_core_y_linebuffer_rsc_2_0_i_1_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .y_linebuffer_rsc_2_0_i_da_d(y_linebuffer_rsc_2_0_i_da_d_reg),
      .y_linebuffer_rsc_2_0_i_ena_d(y_linebuffer_rsc_2_0_i_ena_d_reg),
      .y_linebuffer_rsc_2_0_i_wea_d(y_linebuffer_rsc_2_0_i_wea_d_reg),
      .y_linebuffer_rsc_2_0_i_qa_d(y_linebuffer_rsc_2_0_i_qa_d),
      .y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg),
      .y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .y_linebuffer_rsc_2_0_i_oswt(reg_v_linebuffer_rsc_2_0_i_ena_d_core_psct_0_cse_1),
      .y_linebuffer_rsc_2_0_i_oswt_1(reg_v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct_1_cse_1),
      .y_linebuffer_rsc_2_0_i_da_d_core(nl_scaledown_core_y_linebuffer_rsc_2_0_i_1_inst_y_linebuffer_rsc_2_0_i_da_d_core[19:0]),
      .y_linebuffer_rsc_2_0_i_ena_d_core_psct(nl_scaledown_core_y_linebuffer_rsc_2_0_i_1_inst_y_linebuffer_rsc_2_0_i_ena_d_core_psct[1:0]),
      .y_linebuffer_rsc_2_0_i_wea_d_core_psct(nl_scaledown_core_y_linebuffer_rsc_2_0_i_1_inst_y_linebuffer_rsc_2_0_i_wea_d_core_psct[1:0]),
      .y_linebuffer_rsc_2_0_i_qa_d_mxwt(y_linebuffer_rsc_2_0_i_qa_d_mxwt),
      .y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_scaledown_core_y_linebuffer_rsc_2_0_i_1_inst_y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_scaledown_core_y_linebuffer_rsc_2_0_i_1_inst_y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .y_linebuffer_rsc_2_0_i_oswt_1_pff(nl_scaledown_core_y_linebuffer_rsc_2_0_i_1_inst_y_linebuffer_rsc_2_0_i_oswt_1_pff[0:0]),
      .y_linebuffer_rsc_2_0_i_oswt_pff(scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_else_if_else_if_nor_2_itm)
    );
  scaledown_core_u_linebuffer_rsc_0_0_i_1 scaledown_core_u_linebuffer_rsc_0_0_i_1_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .u_linebuffer_rsc_0_0_i_adra_d(u_linebuffer_rsc_0_0_i_adra_d_reg),
      .u_linebuffer_rsc_0_0_i_da_d(u_linebuffer_rsc_0_0_i_da_d_reg),
      .u_linebuffer_rsc_0_0_i_ena_d(u_linebuffer_rsc_0_0_i_ena_d_reg),
      .u_linebuffer_rsc_0_0_i_wea_d(u_linebuffer_rsc_0_0_i_wea_d_reg),
      .u_linebuffer_rsc_0_0_i_qa_d(u_linebuffer_rsc_0_0_i_qa_d),
      .u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg),
      .u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .u_linebuffer_rsc_0_0_i_oswt(reg_v_linebuffer_rsc_0_0_i_ena_d_core_psct_0_cse_1),
      .u_linebuffer_rsc_0_0_i_adra_d_core(nl_scaledown_core_u_linebuffer_rsc_0_0_i_1_inst_u_linebuffer_rsc_0_0_i_adra_d_core[23:0]),
      .u_linebuffer_rsc_0_0_i_da_d_core(nl_scaledown_core_u_linebuffer_rsc_0_0_i_1_inst_u_linebuffer_rsc_0_0_i_da_d_core[19:0]),
      .u_linebuffer_rsc_0_0_i_ena_d_core_psct(nl_scaledown_core_u_linebuffer_rsc_0_0_i_1_inst_u_linebuffer_rsc_0_0_i_ena_d_core_psct[1:0]),
      .u_linebuffer_rsc_0_0_i_wea_d_core_psct(nl_scaledown_core_u_linebuffer_rsc_0_0_i_1_inst_u_linebuffer_rsc_0_0_i_wea_d_core_psct[1:0]),
      .u_linebuffer_rsc_0_0_i_qa_d_mxwt(u_linebuffer_rsc_0_0_i_qa_d_mxwt),
      .u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_scaledown_core_u_linebuffer_rsc_0_0_i_1_inst_u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_scaledown_core_u_linebuffer_rsc_0_0_i_1_inst_u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .u_linebuffer_rsc_0_0_i_oswt_pff(scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_4_itm)
    );
  scaledown_core_u_linebuffer_rsc_1_0_i_1 scaledown_core_u_linebuffer_rsc_1_0_i_1_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .u_linebuffer_rsc_1_0_i_da_d(u_linebuffer_rsc_1_0_i_da_d_reg),
      .u_linebuffer_rsc_1_0_i_ena_d(u_linebuffer_rsc_1_0_i_ena_d_reg),
      .u_linebuffer_rsc_1_0_i_wea_d(u_linebuffer_rsc_1_0_i_wea_d_reg),
      .u_linebuffer_rsc_1_0_i_qa_d(u_linebuffer_rsc_1_0_i_qa_d),
      .u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg),
      .u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .u_linebuffer_rsc_1_0_i_oswt(reg_v_linebuffer_rsc_1_0_i_ena_d_core_psct_0_cse_1),
      .u_linebuffer_rsc_1_0_i_oswt_1(reg_v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct_1_cse_1),
      .u_linebuffer_rsc_1_0_i_da_d_core(nl_scaledown_core_u_linebuffer_rsc_1_0_i_1_inst_u_linebuffer_rsc_1_0_i_da_d_core[19:0]),
      .u_linebuffer_rsc_1_0_i_ena_d_core_psct(nl_scaledown_core_u_linebuffer_rsc_1_0_i_1_inst_u_linebuffer_rsc_1_0_i_ena_d_core_psct[1:0]),
      .u_linebuffer_rsc_1_0_i_wea_d_core_psct(nl_scaledown_core_u_linebuffer_rsc_1_0_i_1_inst_u_linebuffer_rsc_1_0_i_wea_d_core_psct[1:0]),
      .u_linebuffer_rsc_1_0_i_qa_d_mxwt(u_linebuffer_rsc_1_0_i_qa_d_mxwt),
      .u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_scaledown_core_u_linebuffer_rsc_1_0_i_1_inst_u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_scaledown_core_u_linebuffer_rsc_1_0_i_1_inst_u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .u_linebuffer_rsc_1_0_i_oswt_1_pff(scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_6_itm),
      .u_linebuffer_rsc_1_0_i_oswt_pff(scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_5_itm)
    );
  scaledown_core_u_linebuffer_rsc_2_0_i_1 scaledown_core_u_linebuffer_rsc_2_0_i_1_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .u_linebuffer_rsc_2_0_i_da_d(u_linebuffer_rsc_2_0_i_da_d_reg),
      .u_linebuffer_rsc_2_0_i_ena_d(u_linebuffer_rsc_2_0_i_ena_d_reg),
      .u_linebuffer_rsc_2_0_i_wea_d(u_linebuffer_rsc_2_0_i_wea_d_reg),
      .u_linebuffer_rsc_2_0_i_qa_d(u_linebuffer_rsc_2_0_i_qa_d),
      .u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg),
      .u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .u_linebuffer_rsc_2_0_i_oswt(reg_v_linebuffer_rsc_2_0_i_ena_d_core_psct_0_cse_1),
      .u_linebuffer_rsc_2_0_i_oswt_1(reg_v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct_1_cse_1),
      .u_linebuffer_rsc_2_0_i_da_d_core(nl_scaledown_core_u_linebuffer_rsc_2_0_i_1_inst_u_linebuffer_rsc_2_0_i_da_d_core[19:0]),
      .u_linebuffer_rsc_2_0_i_ena_d_core_psct(nl_scaledown_core_u_linebuffer_rsc_2_0_i_1_inst_u_linebuffer_rsc_2_0_i_ena_d_core_psct[1:0]),
      .u_linebuffer_rsc_2_0_i_wea_d_core_psct(nl_scaledown_core_u_linebuffer_rsc_2_0_i_1_inst_u_linebuffer_rsc_2_0_i_wea_d_core_psct[1:0]),
      .u_linebuffer_rsc_2_0_i_qa_d_mxwt(u_linebuffer_rsc_2_0_i_qa_d_mxwt),
      .u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_scaledown_core_u_linebuffer_rsc_2_0_i_1_inst_u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_scaledown_core_u_linebuffer_rsc_2_0_i_1_inst_u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .u_linebuffer_rsc_2_0_i_oswt_1_pff(nl_scaledown_core_u_linebuffer_rsc_2_0_i_1_inst_u_linebuffer_rsc_2_0_i_oswt_1_pff[0:0]),
      .u_linebuffer_rsc_2_0_i_oswt_pff(scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_else_if_else_if_nor_2_itm)
    );
  scaledown_core_v_linebuffer_rsc_0_0_i_1 scaledown_core_v_linebuffer_rsc_0_0_i_1_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .v_linebuffer_rsc_0_0_i_adra_d(v_linebuffer_rsc_0_0_i_adra_d_reg),
      .v_linebuffer_rsc_0_0_i_da_d(v_linebuffer_rsc_0_0_i_da_d_reg),
      .v_linebuffer_rsc_0_0_i_ena_d(v_linebuffer_rsc_0_0_i_ena_d_reg),
      .v_linebuffer_rsc_0_0_i_wea_d(v_linebuffer_rsc_0_0_i_wea_d_reg),
      .v_linebuffer_rsc_0_0_i_qa_d(v_linebuffer_rsc_0_0_i_qa_d),
      .v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg),
      .v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .v_linebuffer_rsc_0_0_i_oswt(reg_v_linebuffer_rsc_0_0_i_ena_d_core_psct_0_cse_1),
      .v_linebuffer_rsc_0_0_i_adra_d_core(nl_scaledown_core_v_linebuffer_rsc_0_0_i_1_inst_v_linebuffer_rsc_0_0_i_adra_d_core[23:0]),
      .v_linebuffer_rsc_0_0_i_da_d_core(nl_scaledown_core_v_linebuffer_rsc_0_0_i_1_inst_v_linebuffer_rsc_0_0_i_da_d_core[19:0]),
      .v_linebuffer_rsc_0_0_i_ena_d_core_psct(nl_scaledown_core_v_linebuffer_rsc_0_0_i_1_inst_v_linebuffer_rsc_0_0_i_ena_d_core_psct[1:0]),
      .v_linebuffer_rsc_0_0_i_wea_d_core_psct(nl_scaledown_core_v_linebuffer_rsc_0_0_i_1_inst_v_linebuffer_rsc_0_0_i_wea_d_core_psct[1:0]),
      .v_linebuffer_rsc_0_0_i_qa_d_mxwt(v_linebuffer_rsc_0_0_i_qa_d_mxwt),
      .v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_scaledown_core_v_linebuffer_rsc_0_0_i_1_inst_v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_scaledown_core_v_linebuffer_rsc_0_0_i_1_inst_v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .v_linebuffer_rsc_0_0_i_oswt_pff(scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_4_itm)
    );
  scaledown_core_v_linebuffer_rsc_1_0_i_1 scaledown_core_v_linebuffer_rsc_1_0_i_1_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .v_linebuffer_rsc_1_0_i_da_d(v_linebuffer_rsc_1_0_i_da_d_reg),
      .v_linebuffer_rsc_1_0_i_ena_d(v_linebuffer_rsc_1_0_i_ena_d_reg),
      .v_linebuffer_rsc_1_0_i_wea_d(v_linebuffer_rsc_1_0_i_wea_d_reg),
      .v_linebuffer_rsc_1_0_i_qa_d(v_linebuffer_rsc_1_0_i_qa_d),
      .v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg),
      .v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .v_linebuffer_rsc_1_0_i_oswt(reg_v_linebuffer_rsc_1_0_i_ena_d_core_psct_0_cse_1),
      .v_linebuffer_rsc_1_0_i_oswt_1(reg_v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct_1_cse_1),
      .v_linebuffer_rsc_1_0_i_da_d_core(nl_scaledown_core_v_linebuffer_rsc_1_0_i_1_inst_v_linebuffer_rsc_1_0_i_da_d_core[19:0]),
      .v_linebuffer_rsc_1_0_i_ena_d_core_psct(nl_scaledown_core_v_linebuffer_rsc_1_0_i_1_inst_v_linebuffer_rsc_1_0_i_ena_d_core_psct[1:0]),
      .v_linebuffer_rsc_1_0_i_wea_d_core_psct(nl_scaledown_core_v_linebuffer_rsc_1_0_i_1_inst_v_linebuffer_rsc_1_0_i_wea_d_core_psct[1:0]),
      .v_linebuffer_rsc_1_0_i_qa_d_mxwt(v_linebuffer_rsc_1_0_i_qa_d_mxwt),
      .v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_scaledown_core_v_linebuffer_rsc_1_0_i_1_inst_v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_scaledown_core_v_linebuffer_rsc_1_0_i_1_inst_v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .v_linebuffer_rsc_1_0_i_oswt_1_pff(scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_6_itm),
      .v_linebuffer_rsc_1_0_i_oswt_pff(scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_5_itm)
    );
  scaledown_core_v_linebuffer_rsc_2_0_i_1 scaledown_core_v_linebuffer_rsc_2_0_i_1_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .v_linebuffer_rsc_2_0_i_da_d(v_linebuffer_rsc_2_0_i_da_d_reg),
      .v_linebuffer_rsc_2_0_i_ena_d(v_linebuffer_rsc_2_0_i_ena_d_reg),
      .v_linebuffer_rsc_2_0_i_wea_d(v_linebuffer_rsc_2_0_i_wea_d_reg),
      .v_linebuffer_rsc_2_0_i_qa_d(v_linebuffer_rsc_2_0_i_qa_d),
      .v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg),
      .v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .v_linebuffer_rsc_2_0_i_oswt(reg_v_linebuffer_rsc_2_0_i_ena_d_core_psct_0_cse_1),
      .v_linebuffer_rsc_2_0_i_oswt_1(reg_v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct_1_cse_1),
      .v_linebuffer_rsc_2_0_i_da_d_core(nl_scaledown_core_v_linebuffer_rsc_2_0_i_1_inst_v_linebuffer_rsc_2_0_i_da_d_core[19:0]),
      .v_linebuffer_rsc_2_0_i_ena_d_core_psct(nl_scaledown_core_v_linebuffer_rsc_2_0_i_1_inst_v_linebuffer_rsc_2_0_i_ena_d_core_psct[1:0]),
      .v_linebuffer_rsc_2_0_i_wea_d_core_psct(nl_scaledown_core_v_linebuffer_rsc_2_0_i_1_inst_v_linebuffer_rsc_2_0_i_wea_d_core_psct[1:0]),
      .v_linebuffer_rsc_2_0_i_qa_d_mxwt(v_linebuffer_rsc_2_0_i_qa_d_mxwt),
      .v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct(nl_scaledown_core_v_linebuffer_rsc_2_0_i_1_inst_v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct[1:0]),
      .v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct(nl_scaledown_core_v_linebuffer_rsc_2_0_i_1_inst_v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_core_psct[1:0]),
      .v_linebuffer_rsc_2_0_i_oswt_1_pff(nl_scaledown_core_v_linebuffer_rsc_2_0_i_1_inst_v_linebuffer_rsc_2_0_i_oswt_1_pff[0:0]),
      .v_linebuffer_rsc_2_0_i_oswt_pff(scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_else_if_else_if_nor_2_itm)
    );
  scaledown_core_staller scaledown_core_staller_inst (
      .clk(clk),
      .arst_n(arst_n),
      .core_wen(core_wen),
      .core_wten(core_wten),
      .y_src_rsci_wen_comp(y_src_rsci_wen_comp),
      .u_src_rsci_wen_comp(u_src_rsci_wen_comp),
      .v_src_rsci_wen_comp(v_src_rsci_wen_comp),
      .y_dst_rsci_wen_comp(y_dst_rsci_wen_comp),
      .u_dst_rsci_wen_comp(u_dst_rsci_wen_comp),
      .v_dst_rsci_wen_comp(v_dst_rsci_wen_comp)
    );
  assign scaledown_col_if_if_if_else_if_and_cse = core_wen & (~(or_dcpl_45 | or_dcpl_41
      | (~ operator_13_false_operator_13_false_slc_scaledown_row_y_0_33_itm) | or_dcpl_29));
  assign scaledown_row_or_11_cse = ((scaledown_col_x_lpi_1_dfm_2_1_0[0]) & (scaledown_row_y_lpi_1_dfm_2_1_0[0])
      & scaledown_col_if_if_equal_tmp_3 & (~ scaledown_col_scaledown_col_nand_tmp_1)
      & scaledown_row_scaledown_row_nor_1_tmp_1) | ((~ scaledown_col_if_if_else_if_else_else_else_else_unequal_tmp_1)
      & scaledown_col_if_if_and_10_m1c_1 & (~ scaledown_col_scaledown_col_nand_tmp_1)
      & scaledown_row_scaledown_row_nor_1_tmp_1) | ((~ (scaledown_col_x_lpi_1_dfm_2_1_0[0]))
      & scaledown_col_if_if_else_if_else_else_else_and_1_m1c_1 & scaledown_col_if_if_and_10_m1c_1
      & (~ scaledown_col_scaledown_col_nand_tmp_1) & scaledown_row_scaledown_row_nor_1_tmp_1)
      | ((scaledown_col_x_lpi_1_dfm_2_1_0[0]) & scaledown_col_if_if_else_if_else_else_else_and_1_m1c_1
      & scaledown_col_if_if_and_10_m1c_1 & (~ scaledown_col_scaledown_col_nand_tmp_1)
      & scaledown_row_scaledown_row_nor_1_tmp_1);
  assign v_tmp_and_ssc = core_wen & main_stage_0_3;
  assign v_tmp_and_1_cse = v_tmp_and_ssc & (scaledown_col_if_if_if_and_ssc_1 | scaledown_row_or_11_cse
      | scaledown_col_if_if_and_16_ssc_1);
  assign or_125_nl = (scaledown_col_if_if_else_if_else_else_else_if_acc_tmp[0]) |
      (scaledown_row_y_lpi_1_dfm_1_1_0[1]);
  assign mux_31_nl = MUX_s_1_2_2((~ (scaledown_row_y_lpi_1_dfm_1_1_0[1])), or_125_nl,
      scaledown_row_y_lpi_1_dfm_1_1_0[0]);
  assign scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_else_if_else_if_nor_1_itm
      = ~(or_dcpl_56 | or_dcpl_50 | mux_31_nl);
  assign scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_else_if_else_if_nor_itm
      = ~(or_dcpl_55 | or_dcpl_64 | scaledown_row_scaledown_row_or_1_tmp | or_dcpl_60
      | or_dcpl_58 | (~ (scaledown_row_y_lpi_1_dfm_1_1_0[0])));
  assign mux_32_nl = MUX_s_1_2_2((~ (scaledown_row_y_lpi_1_dfm_1_1_0[1])), or_dcpl_58,
      scaledown_row_y_lpi_1_dfm_1_1_0[0]);
  assign scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_else_if_else_if_nor_2_itm
      = ~(mux_32_nl | or_dcpl_55 | or_dcpl_64 | or_dcpl_71);
  assign and_56_nl = and_70_cse & and_dcpl_36;
  assign and_58_nl = and_70_cse & and_dcpl_39;
  assign scaledown_col_if_if_if_if_mux1h_nl = MUX1HOT_v_2_3_2((scaledown_col_x_lpi_1_dfm_1[1:0]),
      2'b01, 2'b10, {xor_dcpl , and_56_nl , and_58_nl});
  assign or_154_nl = (scaledown_row_y_lpi_1_dfm_1_1_0!=2'b00);
  assign or_73_nl = (scaledown_col_x_lpi_1_dfm_1[1:0]!=2'b00);
  assign mux_33_nl = MUX_s_1_2_2(xor_dcpl, or_154_nl, or_73_nl);
  assign scaledown_col_if_if_if_if_and_nl = MUX_v_2_2_2(2'b00, scaledown_col_if_if_if_if_mux1h_nl,
      mux_33_nl);
  assign and_60_nl = and_70_cse & and_dcpl_41;
  assign scaledown_col_if_if_else_if_else_if_mux1h_4_rmff = MUX_v_2_2_2(scaledown_col_if_if_if_if_and_nl,
      2'b11, and_60_nl);
  assign or_159_nl = (scaledown_col_if_if_else_if_else_else_else_if_acc_tmp[1]) |
      (scaledown_row_y_lpi_1_dfm_1_1_0[1]) | (scaledown_reg_times[2:1]!=2'b10);
  assign mux_36_nl = MUX_s_1_2_2(nand_tmp_6, or_159_nl, scaledown_row_y_lpi_1_dfm_1_1_0[0]);
  assign scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_3_itm
      = ~(mux_36_nl | or_dcpl_10 | or_dcpl_76 | or_dcpl_71);
  assign or_169_nl = (~ (scaledown_row_y_lpi_1_dfm_1_1_0[1])) | (scaledown_reg_times[2:1]!=2'b10);
  assign mux_38_nl = MUX_s_1_2_2(or_169_nl, mux_tmp_37, scaledown_col_x_lpi_1_dfm_1[12]);
  assign mux_39_nl = MUX_s_1_2_2(mux_38_nl, or_tmp_84, or_166_cse);
  assign scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_2_itm
      = ~(mux_39_nl | or_dcpl_10 | or_dcpl_76 | scaledown_row_scaledown_row_or_1_tmp
      | (~ main_stage_0_2) | (~ (scaledown_row_y_lpi_1_dfm_1_1_0[0])));
  assign scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_6_itm
      = ~(or_dcpl_56 | or_dcpl_50 | (~ (scaledown_row_y_lpi_1_dfm_1_1_0[1])) | (~
      (scaledown_col_x_lpi_1_dfm_1[12])) | (~ (scaledown_row_y_lpi_1_dfm_1_1_0[0])));
  assign or_180_nl = (scaledown_reg_times[2:1]!=2'b10);
  assign mux_40_nl = MUX_s_1_2_2(or_180_nl, mux_tmp_34, scaledown_col_x_lpi_1_dfm_1[12]);
  assign mux_41_nl = MUX_s_1_2_2(mux_40_nl, or_tmp_84, or_166_cse);
  assign mux_42_nl = MUX_s_1_2_2(nand_tmp_6, mux_41_nl, scaledown_row_y_lpi_1_dfm_1_1_0[0]);
  assign scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_5_itm
      = ~(mux_42_nl | (scaledown_reg_yuvpattern!=2'b00) | (scaledown_reg_times[4])
      | or_dcpl_30 | or_dcpl_50);
  assign or_183_nl = (scaledown_reg_times[1]) | (~ (scaledown_row_y_lpi_1_dfm_1_1_0[1]));
  assign and_64_nl = and_dcpl_44 & and_dcpl_36;
  assign and_65_nl = and_dcpl_44 & and_dcpl_39;
  assign scaledown_col_if_if_if_if_mux1h_6_nl = MUX1HOT_v_2_3_2((scaledown_col_x_lpi_1_dfm_1[1:0]),
      2'b01, 2'b10, {or_183_nl , and_64_nl , and_65_nl});
  assign scaledown_col_if_if_if_if_nand_nl = ~(and_dcpl_44 & (scaledown_col_x_lpi_1_dfm_1[1:0]==2'b00));
  assign scaledown_col_if_if_if_if_and_1_nl = MUX_v_2_2_2(2'b00, scaledown_col_if_if_if_if_mux1h_6_nl,
      scaledown_col_if_if_if_if_nand_nl);
  assign and_66_nl = and_dcpl_44 & and_dcpl_41;
  assign scaledown_col_if_if_if_if_mux1h_7_rmff = MUX_v_2_2_2(scaledown_col_if_if_if_if_and_1_nl,
      2'b11, and_66_nl);
  assign scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_1_itm
      = ~(or_dcpl_101 | mux_tmp_35 | (scaledown_reg_times[3]) | or_dcpl_95 | (scaledown_row_y_lpi_1_dfm_1_1_0[0]));
  assign scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_itm
      = ~(or_dcpl_101 | mux_tmp_37 | (scaledown_reg_times[3]) | or_dcpl_95 | (~ (scaledown_row_y_lpi_1_dfm_1_1_0[0])));
  assign mux_43_nl = MUX_s_1_2_2(mux_tmp_35, mux_tmp_37, scaledown_row_y_lpi_1_dfm_1_1_0[0]);
  assign scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_4_itm
      = ~(mux_43_nl | or_dcpl_32 | or_dcpl_30 | or_dcpl_49 | or_dcpl_48 | (scaledown_col_x_lpi_1_dfm_1[12]));
  assign or_55_cse = (reg_scaledown_col_if_if_else_if_else_slc_scaledown_row_y_1_0_cse!=2'b00);
  assign operator_13_false_5_and_cse = core_wen & (~ or_dcpl_117);
  assign operator_13_false_1_and_cse = core_wen & (~(or_dcpl_45 | or_dcpl_41 | scaledown_col_not_mdf_sva_1
      | or_dcpl_48));
  assign scaledown_col_if_if_else_if_else_else_else_if_scaledown_col_if_if_else_if_else_else_else_if_and_1_cse_1
      = (scaledown_col_if_if_else_if_else_else_else_if_acc_ncse_sva==2'b10);
  assign scaledown_col_scaledown_col_scaledown_col_scaledown_col_not_nl = ~ exitL_exitL_exit_scaledown_col_lpi_1_dfm_1;
  assign scaledown_col_x_lpi_1_dfm_3 = MUX_v_13_2_2(13'b0000000000000, scaledown_col_x_lpi_1_dfm_2,
      scaledown_col_scaledown_col_scaledown_col_scaledown_col_not_nl);
  assign nl_scaledown_row_acc_2_nl = ({1'b1 , scaledown_row_y_lpi_1_dfm_3}) + conv_u2u_13_14(~
      top_reg_frameHeight) + 14'b00000000000001;
  assign scaledown_row_acc_2_nl = nl_scaledown_row_acc_2_nl[13:0];
  assign scaledown_row_acc_2_itm_13 = readslicef_14_1_13(scaledown_row_acc_2_nl);
  assign scaledown_row_not_15_nl = ~ exitL_exit_scaledown_row_sva;
  assign scaledown_row_y_lpi_1_dfm_3 = MUX_v_13_2_2(13'b0000000000000, scaledown_row_y_lpi_1_dfm_2,
      scaledown_row_not_15_nl);
  assign or_166_cse = (scaledown_col_if_if_else_if_else_else_else_if_acc_tmp!=2'b01);
  assign exit_scaledown_row_lpi_1_dfm_1 = (~ scaledown_row_acc_2_itm_13) & exitL_exitL_exit_scaledown_col_lpi_1_dfm_1;
  assign scaledown_row_scaledown_row_or_1_tmp = scaledown_col_not_mdf_sva_1 | scaledown_row_asn_sft_lpi_1_dfm_1;
  assign exitL_exitL_exit_scaledown_col_lpi_1_dfm_1 = (scaledown_row_scaledown_row_or_1_tmp
      & main_stage_0_2) | exit_scaledown_row_lpi_1_dfm | exitL_exit_scaledown_row_sva;
  assign nl_scaledown_col_if_if_else_if_else_else_else_if_acc_tmp = conv_u2u_1_2(scaledown_col_x_lpi_1_dfm_1[12])
      + 2'b01;
  assign scaledown_col_if_if_else_if_else_else_else_if_acc_tmp = nl_scaledown_col_if_if_else_if_else_else_else_if_acc_tmp[1:0];
  assign scaledown_col_if_if_else_if_else_else_else_else_else_else_scaledown_col_if_if_else_if_else_else_else_else_else_else_mux_3_nl
      = MUX_v_10_2_2((v_linebuffer_rsc_1_0_i_qa_d_mxwt[9:0]), (v_linebuffer_rsc_2_0_i_qa_d_mxwt[9:0]),
      scaledown_col_if_if_else_if_else_else_else_if_scaledown_col_if_if_else_if_else_else_else_if_and_1_cse_1);
  assign nl_scaledown_col_if_if_else_if_else_else_else_else_else_else_acc_28 = conv_u2u_11_12(z_out_1)
      + conv_u2u_10_12(scaledown_col_if_if_else_if_else_else_else_else_else_else_scaledown_col_if_if_else_if_else_else_else_else_else_else_mux_3_nl)
      + conv_u2u_10_12(v_linebuffer_rsc_2_0_i_qa_d_mxwt[19:10]);
  assign scaledown_col_if_if_else_if_else_else_else_else_else_else_acc_28 = nl_scaledown_col_if_if_else_if_else_else_else_else_else_else_acc_28[11:0];
  assign scaledown_col_if_if_else_if_else_else_else_else_else_else_scaledown_col_if_if_else_if_else_else_else_else_else_else_mux_5_nl
      = MUX_v_10_2_2((u_linebuffer_rsc_1_0_i_qa_d_mxwt[9:0]), (u_linebuffer_rsc_2_0_i_qa_d_mxwt[9:0]),
      scaledown_col_if_if_else_if_else_else_else_if_scaledown_col_if_if_else_if_else_else_else_if_and_1_cse_1);
  assign nl_scaledown_col_if_if_else_if_else_else_else_else_else_else_acc_30 = conv_u2u_11_12(z_out_2)
      + conv_u2u_10_12(scaledown_col_if_if_else_if_else_else_else_else_else_else_scaledown_col_if_if_else_if_else_else_else_else_else_else_mux_5_nl)
      + conv_u2u_10_12(u_linebuffer_rsc_2_0_i_qa_d_mxwt[19:10]);
  assign scaledown_col_if_if_else_if_else_else_else_else_else_else_acc_30 = nl_scaledown_col_if_if_else_if_else_else_else_else_else_else_acc_30[11:0];
  assign scaledown_col_if_if_else_if_else_else_else_else_else_else_scaledown_col_if_if_else_if_else_else_else_else_else_else_mux_7_nl
      = MUX_v_10_2_2((y_linebuffer_rsc_1_0_i_qa_d_mxwt[9:0]), (y_linebuffer_rsc_2_0_i_qa_d_mxwt[9:0]),
      scaledown_col_if_if_else_if_else_else_else_if_scaledown_col_if_if_else_if_else_else_else_if_and_1_cse_1);
  assign nl_scaledown_col_if_if_else_if_else_else_else_else_else_else_acc_32 = conv_u2u_11_12(z_out_3)
      + conv_u2u_10_12(scaledown_col_if_if_else_if_else_else_else_else_else_else_scaledown_col_if_if_else_if_else_else_else_else_else_else_mux_7_nl)
      + conv_u2u_10_12(y_linebuffer_rsc_2_0_i_qa_d_mxwt[19:10]);
  assign scaledown_col_if_if_else_if_else_else_else_else_else_else_acc_32 = nl_scaledown_col_if_if_else_if_else_else_else_else_else_else_acc_32[11:0];
  assign scaledown_col_if_if_else_if_else_else_else_else_unequal_tmp_1 = ~((scaledown_col_x_lpi_1_dfm_2_1_0==2'b01));
  assign scaledown_col_if_if_else_if_else_else_else_and_1_m1c_1 = scaledown_col_if_if_else_if_else_else_else_else_unequal_tmp_1
      & scaledown_col_if_if_else_if_else_else_else_unequal_tmp_1;
  assign scaledown_col_if_if_else_if_else_else_else_unequal_tmp_1 = (scaledown_col_x_lpi_1_dfm_2_1_0!=2'b00);
  assign scaledown_col_if_if_and_10_m1c_1 = (~((scaledown_row_y_lpi_1_dfm_2_1_0==2'b10)))
      & (~((scaledown_row_y_lpi_1_dfm_2_1_0==2'b01))) & ((scaledown_row_y_lpi_1_dfm_2_1_0!=2'b00))
      & (scaledown_reg_times==5'b00100);
  assign scaledown_col_if_if_equal_tmp_3 = (scaledown_reg_times==5'b00010);
  assign scaledown_col_scaledown_col_nand_tmp_1 = ~((scaledown_reg_yuvpattern==2'b00)
      & scaledown_reg_m_nEb);
  assign scaledown_col_if_if_if_and_ssc_1 = (~ (scaledown_col_x_lpi_1_dfm_2_1_0[0]))
      & (scaledown_row_y_lpi_1_dfm_2_1_0[0]) & scaledown_col_if_if_equal_tmp_3 &
      (~ scaledown_col_scaledown_col_nand_tmp_1) & scaledown_row_scaledown_row_nor_1_tmp_1;
  assign scaledown_col_if_if_and_16_ssc_1 = (~ scaledown_col_if_if_else_if_else_else_else_unequal_tmp_1)
      & scaledown_col_if_if_and_10_m1c_1 & (~ scaledown_col_scaledown_col_nand_tmp_1)
      & scaledown_row_scaledown_row_nor_1_tmp_1;
  assign scaledown_row_scaledown_row_nor_1_tmp_1 = ~(reg_scaledown_col_not_mdf_sva_st_2_cse
      | scaledown_row_asn_sft_lpi_1_dfm_st_2);
  assign scaledown_row_exs_6_0 = ~(scaledown_col_if_if_if_and_ssc_1 | scaledown_col_if_if_and_16_ssc_1);
  assign or_dcpl_6 = (scaledown_reg_times[1]) | (~ scaledown_reg_m_nEb);
  assign or_dcpl_7 = (scaledown_reg_times[0]) | (~ (scaledown_reg_times[2]));
  assign or_dcpl_10 = (scaledown_reg_yuvpattern!=2'b00);
  assign or_56_cse = (~ reg_scaledown_col_if_if_else_if_else_else_slc_scaledown_row_y_1_0_ftd)
      | (reg_scaledown_col_if_if_else_if_else_slc_scaledown_row_y_1_0_cse[0]);
  assign and_70_cse = (scaledown_row_y_lpi_1_dfm_1_1_0==2'b11);
  assign or_dcpl_29 = (~ main_stage_0_3) | scaledown_row_asn_sft_lpi_1_dfm_st_2 |
      reg_scaledown_col_not_mdf_sva_st_2_cse;
  assign or_dcpl_30 = (scaledown_reg_times[3]) | (scaledown_reg_times[0]);
  assign or_dcpl_32 = or_dcpl_10 | (scaledown_reg_times[4]);
  assign and_tmp_13 = or_56_cse & (reg_scaledown_col_if_if_else_if_else_else_else_else_slc_scaledown_col_x_1_0_cse==2'b11);
  assign nor_10_nl = ~((reg_scaledown_col_if_if_else_if_else_slc_scaledown_row_y_1_0_cse[0])
      | (~ and_tmp_13));
  assign mux_27_nl = MUX_s_1_2_2(nor_10_nl, and_tmp_13, reg_scaledown_col_if_if_else_if_else_slc_scaledown_row_y_1_0_cse[1]);
  assign nand_7_nl = ~((scaledown_reg_times[2]) & or_55_cse & mux_27_nl);
  assign or_100_nl = (scaledown_reg_times[2]) | (~(operator_13_false_1_operator_13_false_1_slc_scaledown_col_x_0_33_itm
      & operator_13_false_operator_13_false_slc_scaledown_row_y_0_33_itm));
  assign mux_28_nl = MUX_s_1_2_2(nand_7_nl, or_100_nl, scaledown_reg_times[1]);
  assign or_dcpl_35 = ((mux_28_nl | or_dcpl_32 | or_dcpl_30) & scaledown_reg_m_nEb)
      | or_dcpl_29;
  assign and_dcpl_17 = (scaledown_reg_yuvpattern==2'b00) & (scaledown_reg_times==5'b00010)
      & scaledown_reg_m_nEb & operator_13_false_operator_13_false_slc_scaledown_row_y_0_33_itm
      & operator_13_false_1_operator_13_false_1_slc_scaledown_col_x_0_33_itm & main_stage_0_3
      & (~ scaledown_row_asn_sft_lpi_1_dfm_st_2) & (~ reg_scaledown_col_not_mdf_sva_st_2_cse);
  assign and_dcpl_33 = or_55_cse & ((reg_scaledown_col_if_if_else_if_else_slc_scaledown_row_y_1_0_cse!=2'b01))
      & or_56_cse & (reg_scaledown_col_if_if_else_if_else_else_else_else_slc_scaledown_col_x_1_0_cse[1])
      & (scaledown_reg_yuvpattern==2'b00) & (scaledown_reg_times==5'b00100) & scaledown_reg_m_nEb
      & (reg_scaledown_col_if_if_else_if_else_else_else_else_slc_scaledown_col_x_1_0_cse[0])
      & main_stage_0_3 & scaledown_row_scaledown_row_nor_1_tmp_1;
  assign and_dcpl_35 = (~ scaledown_reg_m_nEb) & main_stage_0_3 & scaledown_row_scaledown_row_nor_1_tmp_1;
  assign or_dcpl_41 = ~((scaledown_reg_times[1]) & scaledown_reg_m_nEb);
  assign or_dcpl_45 = or_dcpl_32 | or_dcpl_30 | (scaledown_reg_times[2]);
  assign or_dcpl_48 = scaledown_row_asn_sft_lpi_1_dfm_1 | (~ main_stage_0_2);
  assign or_dcpl_49 = (~ scaledown_reg_m_nEb) | scaledown_col_not_mdf_sva_1;
  assign or_dcpl_50 = or_dcpl_49 | or_dcpl_48;
  assign or_dcpl_54 = (scaledown_reg_times[4:3]!=2'b00);
  assign or_dcpl_55 = or_dcpl_10 | or_dcpl_54;
  assign or_dcpl_56 = or_dcpl_55 | or_dcpl_7 | (scaledown_reg_times[1]);
  assign or_dcpl_58 = (scaledown_col_if_if_else_if_else_else_else_if_acc_tmp!=2'b10);
  assign or_dcpl_60 = ~(main_stage_0_2 & (scaledown_row_y_lpi_1_dfm_1_1_0[1]));
  assign or_dcpl_64 = or_dcpl_7 | or_dcpl_6;
  assign or_dcpl_70 = or_dcpl_56 | or_dcpl_49 | scaledown_row_asn_sft_lpi_1_dfm_1
      | or_dcpl_60 | (~ (scaledown_row_y_lpi_1_dfm_1_1_0[0]));
  assign or_dcpl_71 = scaledown_row_scaledown_row_or_1_tmp | (~ main_stage_0_2);
  assign xor_dcpl = (scaledown_row_y_lpi_1_dfm_1_1_0[1]) ^ (scaledown_row_y_lpi_1_dfm_1_1_0[0]);
  assign and_dcpl_36 = (scaledown_col_x_lpi_1_dfm_1[1:0]==2'b01);
  assign and_dcpl_39 = (scaledown_col_x_lpi_1_dfm_1[1:0]==2'b10);
  assign and_dcpl_41 = (scaledown_col_x_lpi_1_dfm_1[1:0]==2'b11);
  assign or_dcpl_76 = or_dcpl_54 | (scaledown_reg_times[0]) | (~ scaledown_reg_m_nEb);
  assign or_tmp_82 = (scaledown_reg_times[2:1]!=2'b01);
  assign mux_tmp_34 = MUX_s_1_2_2((~ (scaledown_reg_times[2])), (scaledown_reg_times[2]),
      scaledown_reg_times[1]);
  assign mux_tmp_35 = MUX_s_1_2_2(mux_tmp_34, or_tmp_82, scaledown_row_y_lpi_1_dfm_1_1_0[1]);
  assign nand_tmp_6 = ~((scaledown_col_x_lpi_1_dfm_1[12]) & (~ mux_tmp_35));
  assign or_tmp_84 = (~ (scaledown_col_x_lpi_1_dfm_1[12])) | (scaledown_reg_times[2:1]!=2'b01);
  assign mux_tmp_37 = MUX_s_1_2_2(or_tmp_82, mux_tmp_34, scaledown_row_y_lpi_1_dfm_1_1_0[1]);
  assign and_dcpl_44 = (~ (scaledown_reg_times[1])) & (scaledown_row_y_lpi_1_dfm_1_1_0[1]);
  assign or_dcpl_95 = (scaledown_reg_times[0]) | (scaledown_col_x_lpi_1_dfm_1[12]);
  assign or_dcpl_101 = or_dcpl_10 | (scaledown_reg_times[4]) | (~ scaledown_reg_m_nEb)
      | or_dcpl_71;
  assign or_dcpl_117 = or_dcpl_32 | or_dcpl_30 | (~ (scaledown_reg_times[2])) | or_dcpl_6
      | scaledown_col_not_mdf_sva_1 | or_dcpl_48;
  assign nl_scaledown_col_acc_2_nl = ({1'b1 , scaledown_col_x_lpi_1_dfm_3}) + conv_u2u_13_14(~
      top_reg_frameWidth) + 14'b00000000000001;
  assign scaledown_col_acc_2_nl = nl_scaledown_col_acc_2_nl[13:0];
  assign scaledown_col_acc_2_itm_13_1 = readslicef_14_1_13(scaledown_col_acc_2_nl);
  assign y_linebuffer_rsc_0_0_i_ena_d = y_linebuffer_rsc_0_0_i_ena_d_reg;
  assign y_linebuffer_rsc_0_0_i_wea_d = y_linebuffer_rsc_0_0_i_wea_d_reg;
  assign y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  assign y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  assign y_linebuffer_rsc_1_0_i_adra_d = {(scaledown_col_x_lpi_1_dfm_1[11:0]) , (scaledown_col_x_lpi_1_dfm_1[11:2])
      , scaledown_col_if_if_if_if_mux1h_7_rmff};
  assign y_linebuffer_rsc_1_0_i_ena_d = y_linebuffer_rsc_1_0_i_ena_d_reg;
  assign y_linebuffer_rsc_1_0_i_wea_d = y_linebuffer_rsc_1_0_i_wea_d_reg;
  assign y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  assign y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  assign y_linebuffer_rsc_2_0_i_adra_d = {(scaledown_col_x_lpi_1_dfm_1[11:0]) , (scaledown_col_x_lpi_1_dfm_1[11:2])
      , scaledown_col_if_if_else_if_else_if_mux1h_4_rmff};
  assign y_linebuffer_rsc_2_0_i_ena_d = y_linebuffer_rsc_2_0_i_ena_d_reg;
  assign y_linebuffer_rsc_2_0_i_wea_d = y_linebuffer_rsc_2_0_i_wea_d_reg;
  assign y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  assign y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  assign u_linebuffer_rsc_0_0_i_ena_d = u_linebuffer_rsc_0_0_i_ena_d_reg;
  assign u_linebuffer_rsc_0_0_i_wea_d = u_linebuffer_rsc_0_0_i_wea_d_reg;
  assign u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  assign u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  assign u_linebuffer_rsc_1_0_i_adra_d = {(scaledown_col_x_lpi_1_dfm_1[11:0]) , (scaledown_col_x_lpi_1_dfm_1[11:2])
      , scaledown_col_if_if_if_if_mux1h_7_rmff};
  assign u_linebuffer_rsc_1_0_i_ena_d = u_linebuffer_rsc_1_0_i_ena_d_reg;
  assign u_linebuffer_rsc_1_0_i_wea_d = u_linebuffer_rsc_1_0_i_wea_d_reg;
  assign u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  assign u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  assign u_linebuffer_rsc_2_0_i_adra_d = {(scaledown_col_x_lpi_1_dfm_1[11:0]) , (scaledown_col_x_lpi_1_dfm_1[11:2])
      , scaledown_col_if_if_else_if_else_if_mux1h_4_rmff};
  assign u_linebuffer_rsc_2_0_i_ena_d = u_linebuffer_rsc_2_0_i_ena_d_reg;
  assign u_linebuffer_rsc_2_0_i_wea_d = u_linebuffer_rsc_2_0_i_wea_d_reg;
  assign u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  assign u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  assign v_linebuffer_rsc_0_0_i_ena_d = v_linebuffer_rsc_0_0_i_ena_d_reg;
  assign v_linebuffer_rsc_0_0_i_wea_d = v_linebuffer_rsc_0_0_i_wea_d_reg;
  assign v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  assign v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  assign v_linebuffer_rsc_1_0_i_adra_d = {(scaledown_col_x_lpi_1_dfm_1[11:0]) , (scaledown_col_x_lpi_1_dfm_1[11:2])
      , scaledown_col_if_if_if_if_mux1h_7_rmff};
  assign v_linebuffer_rsc_1_0_i_ena_d = v_linebuffer_rsc_1_0_i_ena_d_reg;
  assign v_linebuffer_rsc_1_0_i_wea_d = v_linebuffer_rsc_1_0_i_wea_d_reg;
  assign v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  assign v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  assign v_linebuffer_rsc_2_0_i_adra_d = {(scaledown_col_x_lpi_1_dfm_1[11:0]) , (scaledown_col_x_lpi_1_dfm_1[11:2])
      , scaledown_col_if_if_else_if_else_if_mux1h_4_rmff};
  assign v_linebuffer_rsc_2_0_i_ena_d = v_linebuffer_rsc_2_0_i_ena_d_reg;
  assign v_linebuffer_rsc_2_0_i_wea_d = v_linebuffer_rsc_2_0_i_wea_d_reg;
  assign v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d = v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_reg;
  assign v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d = v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d_reg;
  assign y_linebuffer_rsc_0_0_i_adra_d = y_linebuffer_rsc_0_0_i_adra_d_reg;
  assign y_linebuffer_rsc_0_0_i_da_d = y_linebuffer_rsc_0_0_i_da_d_reg;
  assign y_linebuffer_rsc_1_0_i_da_d = y_linebuffer_rsc_1_0_i_da_d_reg;
  assign y_linebuffer_rsc_2_0_i_da_d = y_linebuffer_rsc_2_0_i_da_d_reg;
  assign u_linebuffer_rsc_0_0_i_adra_d = u_linebuffer_rsc_0_0_i_adra_d_reg;
  assign u_linebuffer_rsc_0_0_i_da_d = u_linebuffer_rsc_0_0_i_da_d_reg;
  assign u_linebuffer_rsc_1_0_i_da_d = u_linebuffer_rsc_1_0_i_da_d_reg;
  assign u_linebuffer_rsc_2_0_i_da_d = u_linebuffer_rsc_2_0_i_da_d_reg;
  assign v_linebuffer_rsc_0_0_i_adra_d = v_linebuffer_rsc_0_0_i_adra_d_reg;
  assign v_linebuffer_rsc_0_0_i_da_d = v_linebuffer_rsc_0_0_i_da_d_reg;
  assign v_linebuffer_rsc_1_0_i_da_d = v_linebuffer_rsc_1_0_i_da_d_reg;
  assign v_linebuffer_rsc_2_0_i_da_d = v_linebuffer_rsc_2_0_i_da_d_reg;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      reg_v_dst_rsci_oswt_cse <= 1'b0;
      v_dst_rsci_idat <= 10'b0000000000;
      u_dst_rsci_idat <= 10'b0000000000;
      y_dst_rsci_idat <= 10'b0000000000;
      v_t_sva_1 <= 10'b0000000000;
      scaledown_col_x_lpi_1_dfm_2_12 <= 1'b0;
      u_t_sva_1 <= 10'b0000000000;
      y_t_sva_1 <= 10'b0000000000;
      reg_scaledown_col_not_mdf_sva_st_2_cse <= 1'b0;
      scaledown_row_asn_sft_lpi_1_dfm_st_2 <= 1'b0;
      reg_v_src_rsci_oswt_cse <= 1'b0;
      scaledown_col_x_lpi_1_dfm_2 <= 13'b0000000000000;
      reg_v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct_1_cse_1
          <= 1'b0;
      reg_v_linebuffer_rsc_2_0_i_ena_d_core_psct_0_cse_1 <= 1'b0;
      reg_v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct_1_cse_1
          <= 1'b0;
      reg_v_linebuffer_rsc_1_0_i_ena_d_core_psct_0_cse_1 <= 1'b0;
      reg_v_linebuffer_rsc_0_0_i_ena_d_core_psct_0_cse_1 <= 1'b0;
      exit_scaledown_row_lpi_1_dfm <= 1'b0;
      exitL_exit_scaledown_row_sva <= 1'b1;
      scaledown_row_y_lpi_1_dfm_2 <= 13'b0000000000000;
      scaledown_row_asn_sft_lpi_1_dfm_1 <= 1'b0;
      scaledown_col_not_mdf_sva_1 <= 1'b0;
      scaledown_col_x_lpi_1_dfm_1 <= 13'b0000000000000;
      scaledown_row_y_lpi_1_dfm_1_1_0 <= 2'b00;
      main_stage_0_2 <= 1'b0;
      main_stage_0_3 <= 1'b0;
      scaledown_col_x_lpi_1_dfm_2_1_0 <= 2'b00;
      scaledown_row_y_lpi_1_dfm_2_1_0 <= 2'b00;
    end
    else if ( core_wen ) begin
      reg_v_dst_rsci_oswt_cse <= ~ or_dcpl_35;
      v_dst_rsci_idat <= MUX1HOT_v_10_4_2((z_out_4[11:2]), (z_out_4[13:4]), v_t_sva_1,
          v_dst_rsci_idat, {and_dcpl_17 , and_dcpl_33 , and_dcpl_35 , or_dcpl_35});
      u_dst_rsci_idat <= MUX1HOT_v_10_4_2((z_out_5[11:2]), (z_out_5[13:4]), u_t_sva_1,
          u_dst_rsci_idat, {and_dcpl_17 , and_dcpl_33 , and_dcpl_35 , or_dcpl_35});
      y_dst_rsci_idat <= MUX1HOT_v_10_4_2((z_out_6[11:2]), (z_out_6[13:4]), y_t_sva_1,
          y_dst_rsci_idat, {and_dcpl_17 , and_dcpl_33 , and_dcpl_35 , or_dcpl_35});
      v_t_sva_1 <= v_src_rsci_idat_mxwt;
      scaledown_col_x_lpi_1_dfm_2_12 <= scaledown_col_x_lpi_1_dfm_1[12];
      u_t_sva_1 <= u_src_rsci_idat_mxwt;
      y_t_sva_1 <= y_src_rsci_idat_mxwt;
      reg_scaledown_col_not_mdf_sva_st_2_cse <= scaledown_col_not_mdf_sva_1;
      scaledown_row_asn_sft_lpi_1_dfm_st_2 <= scaledown_row_asn_sft_lpi_1_dfm_1;
      reg_v_src_rsci_oswt_cse <= (~((~ scaledown_row_acc_2_itm_13) & exitL_exitL_exit_scaledown_col_lpi_1_dfm_1))
          & scaledown_col_acc_2_itm_13_1;
      scaledown_col_x_lpi_1_dfm_2 <= z_out;
      reg_v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct_1_cse_1
          <= ~ or_dcpl_70;
      reg_v_linebuffer_rsc_2_0_i_ena_d_core_psct_0_cse_1 <= scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_else_if_else_if_nor_2_itm;
      reg_v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d_core_psct_1_cse_1
          <= scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_6_itm;
      reg_v_linebuffer_rsc_1_0_i_ena_d_core_psct_0_cse_1 <= scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_5_itm;
      reg_v_linebuffer_rsc_0_0_i_ena_d_core_psct_0_cse_1 <= scaledown_col_if_if_else_if_else_else_else_else_if_scaledown_col_if_if_if_if_nor_4_itm;
      exit_scaledown_row_lpi_1_dfm <= exit_scaledown_row_lpi_1_dfm_1;
      exitL_exit_scaledown_row_sva <= exit_scaledown_row_lpi_1_dfm_1;
      scaledown_row_y_lpi_1_dfm_2 <= MUX_v_13_2_2(z_out, scaledown_row_y_lpi_1_dfm_3,
          or_201_nl);
      scaledown_row_asn_sft_lpi_1_dfm_1 <= MUX_s_1_2_2(scaledown_row_asn_sft_lpi_1_dfm_1,
          exit_scaledown_row_lpi_1_dfm_1, exitL_exitL_exit_scaledown_col_lpi_1_dfm_1);
      scaledown_col_not_mdf_sva_1 <= ~ scaledown_col_acc_2_itm_13_1;
      scaledown_col_x_lpi_1_dfm_1 <= scaledown_col_x_lpi_1_dfm_3;
      scaledown_row_y_lpi_1_dfm_1_1_0 <= scaledown_row_y_lpi_1_dfm_3[1:0];
      main_stage_0_2 <= 1'b1;
      main_stage_0_3 <= main_stage_0_2;
      scaledown_col_x_lpi_1_dfm_2_1_0 <= scaledown_col_x_lpi_1_dfm_1[1:0];
      scaledown_row_y_lpi_1_dfm_2_1_0 <= scaledown_row_y_lpi_1_dfm_1_1_0;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      scaledown_col_if_if_if_else_if_acc_2_ncse <= 11'b00000000000;
      scaledown_col_if_if_if_else_if_acc_1_ncse <= 11'b00000000000;
      scaledown_col_if_if_if_else_if_acc_ncse <= 11'b00000000000;
    end
    else if ( scaledown_col_if_if_if_else_if_and_cse ) begin
      scaledown_col_if_if_if_else_if_acc_2_ncse <= z_out_1;
      scaledown_col_if_if_if_else_if_acc_1_ncse <= z_out_2;
      scaledown_col_if_if_if_else_if_acc_ncse <= z_out_3;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      reg_v_tmp_13_0_ftd <= 2'b00;
      reg_u_tmp_13_0_ftd <= 2'b00;
      reg_y_tmp_13_0_ftd <= 2'b00;
    end
    else if ( v_tmp_and_ssc ) begin
      reg_v_tmp_13_0_ftd <= MUX_v_2_2_2(2'b00, scaledown_row_scaledown_row_scaledown_row_mux_2_nl,
          scaledown_row_exs_6_0);
      reg_u_tmp_13_0_ftd <= MUX_v_2_2_2(2'b00, scaledown_row_scaledown_row_scaledown_row_mux_1_nl,
          scaledown_row_exs_6_0);
      reg_y_tmp_13_0_ftd <= MUX_v_2_2_2(2'b00, scaledown_row_scaledown_row_scaledown_row_mux_nl,
          scaledown_row_exs_6_0);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      reg_v_tmp_13_0_ftd_1 <= 12'b000000000000;
      reg_u_tmp_13_0_ftd_1 <= 12'b000000000000;
      reg_y_tmp_13_0_ftd_1 <= 12'b000000000000;
    end
    else if ( v_tmp_and_1_cse ) begin
      reg_v_tmp_13_0_ftd_1 <= MUX1HOT_v_12_3_2(({1'b0 , scaledown_col_if_if_if_else_if_mux_nl}),
          (z_out_4[11:0]), scaledown_col_if_if_else_if_else_else_else_else_else_else_acc_28,
          {scaledown_col_if_if_if_and_ssc_1 , scaledown_row_or_11_cse , scaledown_col_if_if_and_16_ssc_1});
      reg_u_tmp_13_0_ftd_1 <= MUX1HOT_v_12_3_2(({1'b0 , scaledown_col_if_if_if_else_if_mux_4_nl}),
          (z_out_5[11:0]), scaledown_col_if_if_else_if_else_else_else_else_else_else_acc_30,
          {scaledown_col_if_if_if_and_ssc_1 , scaledown_row_or_11_cse , scaledown_col_if_if_and_16_ssc_1});
      reg_y_tmp_13_0_ftd_1 <= MUX1HOT_v_12_3_2(({1'b0 , scaledown_col_if_if_if_else_if_mux_7_nl}),
          (z_out_6[11:0]), scaledown_col_if_if_else_if_else_else_else_else_else_else_acc_32,
          {scaledown_col_if_if_if_and_ssc_1 , scaledown_row_or_11_cse , scaledown_col_if_if_and_16_ssc_1});
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      scaledown_col_if_if_else_if_else_else_else_if_acc_ncse_sva <= 2'b00;
    end
    else if ( core_wen & (~ or_dcpl_70) ) begin
      scaledown_col_if_if_else_if_else_else_else_if_acc_ncse_sva <= scaledown_col_if_if_else_if_else_else_else_if_acc_tmp;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      reg_scaledown_col_if_if_else_if_else_else_else_else_slc_scaledown_col_x_1_0_cse
          <= 2'b00;
      reg_scaledown_col_if_if_else_if_else_else_slc_scaledown_row_y_1_0_ftd <= 1'b0;
      reg_scaledown_col_if_if_else_if_else_slc_scaledown_row_y_1_0_cse <= 2'b00;
    end
    else if ( operator_13_false_5_and_cse ) begin
      reg_scaledown_col_if_if_else_if_else_else_else_else_slc_scaledown_col_x_1_0_cse
          <= scaledown_col_x_lpi_1_dfm_1[1:0];
      reg_scaledown_col_if_if_else_if_else_else_slc_scaledown_row_y_1_0_ftd <= ~
          or_dcpl_117;
      reg_scaledown_col_if_if_else_if_else_slc_scaledown_row_y_1_0_cse <= scaledown_row_y_lpi_1_dfm_1_1_0;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      operator_13_false_1_operator_13_false_1_slc_scaledown_col_x_0_33_itm <= 1'b0;
      operator_13_false_operator_13_false_slc_scaledown_row_y_0_33_itm <= 1'b0;
    end
    else if ( operator_13_false_1_and_cse ) begin
      operator_13_false_1_operator_13_false_1_slc_scaledown_col_x_0_33_itm <= scaledown_col_x_lpi_1_dfm_1[0];
      operator_13_false_operator_13_false_slc_scaledown_row_y_0_33_itm <= scaledown_row_y_lpi_1_dfm_1_1_0[0];
    end
  end
  assign or_201_nl = (~(main_stage_0_2 | exit_scaledown_row_lpi_1_dfm | exitL_exit_scaledown_row_sva))
      | scaledown_col_acc_2_itm_13_1;
  assign scaledown_row_scaledown_row_scaledown_row_mux_2_nl = MUX_v_2_2_2(reg_v_tmp_13_0_ftd,
      (z_out_4[13:12]), scaledown_row_or_11_cse);
  assign scaledown_row_scaledown_row_scaledown_row_mux_1_nl = MUX_v_2_2_2(reg_u_tmp_13_0_ftd,
      (z_out_5[13:12]), scaledown_row_or_11_cse);
  assign scaledown_row_scaledown_row_scaledown_row_mux_nl = MUX_v_2_2_2(reg_y_tmp_13_0_ftd,
      (z_out_6[13:12]), scaledown_row_or_11_cse);
  assign scaledown_col_if_if_if_else_if_mux_nl = MUX_v_11_2_2(scaledown_col_if_if_if_else_if_acc_2_ncse,
      z_out_1, operator_13_false_operator_13_false_slc_scaledown_row_y_0_33_itm);
  assign scaledown_col_if_if_if_else_if_mux_4_nl = MUX_v_11_2_2(scaledown_col_if_if_if_else_if_acc_1_ncse,
      z_out_2, operator_13_false_operator_13_false_slc_scaledown_row_y_0_33_itm);
  assign scaledown_col_if_if_if_else_if_mux_7_nl = MUX_v_11_2_2(scaledown_col_if_if_if_else_if_acc_ncse,
      z_out_3, operator_13_false_operator_13_false_slc_scaledown_row_y_0_33_itm);
  assign scaledown_col_mux_4_nl = MUX_v_13_2_2(scaledown_row_y_lpi_1_dfm_3, scaledown_col_x_lpi_1_dfm_3,
      scaledown_col_acc_2_itm_13_1);
  assign nl_z_out = scaledown_col_mux_4_nl + 13'b0000000000001;
  assign z_out = nl_z_out[12:0];
  assign scaledown_col_if_if_if_else_if_and_7_cse = (~ (scaledown_reg_times[1]))
      & scaledown_col_x_lpi_1_dfm_2_12;
  assign scaledown_col_if_if_if_else_if_and_8_cse = (scaledown_reg_times[1]) & scaledown_col_x_lpi_1_dfm_2_12;
  assign scaledown_col_if_if_if_else_if_mux1h_7_nl = MUX1HOT_v_10_3_2(v_linebuffer_rsc_0_0_i_qa_d_mxwt,
      (v_linebuffer_rsc_1_0_i_qa_d_mxwt[19:10]), (v_linebuffer_rsc_1_0_i_qa_d_mxwt[9:0]),
      {(~ scaledown_col_x_lpi_1_dfm_2_12) , scaledown_col_if_if_if_else_if_and_7_cse
      , scaledown_col_if_if_if_else_if_and_8_cse});
  assign nl_z_out_1 = conv_u2u_10_11(v_t_sva_1) + conv_u2u_10_11(scaledown_col_if_if_if_else_if_mux1h_7_nl);
  assign z_out_1 = nl_z_out_1[10:0];
  assign scaledown_col_if_if_if_else_if_and_5_nl = (~ (scaledown_reg_times[2])) &
      scaledown_col_x_lpi_1_dfm_2_12;
  assign scaledown_col_if_if_if_else_if_and_6_nl = (scaledown_reg_times[2]) & scaledown_col_x_lpi_1_dfm_2_12;
  assign scaledown_col_if_if_if_else_if_mux1h_6_nl = MUX1HOT_v_10_3_2(u_linebuffer_rsc_0_0_i_qa_d_mxwt,
      (u_linebuffer_rsc_1_0_i_qa_d_mxwt[9:0]), (u_linebuffer_rsc_1_0_i_qa_d_mxwt[19:10]),
      {(~ scaledown_col_x_lpi_1_dfm_2_12) , scaledown_col_if_if_if_else_if_and_5_nl
      , scaledown_col_if_if_if_else_if_and_6_nl});
  assign nl_z_out_2 = conv_u2u_10_11(u_t_sva_1) + conv_u2u_10_11(scaledown_col_if_if_if_else_if_mux1h_6_nl);
  assign z_out_2 = nl_z_out_2[10:0];
  assign scaledown_col_if_if_if_else_if_mux1h_nl = MUX1HOT_v_10_3_2(y_linebuffer_rsc_0_0_i_qa_d_mxwt,
      (y_linebuffer_rsc_1_0_i_qa_d_mxwt[19:10]), (y_linebuffer_rsc_1_0_i_qa_d_mxwt[9:0]),
      {(~ scaledown_col_x_lpi_1_dfm_2_12) , scaledown_col_if_if_if_else_if_and_7_cse
      , scaledown_col_if_if_if_else_if_and_8_cse});
  assign nl_z_out_3 = conv_u2u_10_11(y_t_sva_1) + conv_u2u_10_11(scaledown_col_if_if_if_else_if_mux1h_nl);
  assign z_out_3 = nl_z_out_3[10:0];
  assign scaledown_col_if_if_if_else_else_mux_3_nl = MUX_v_12_2_2(({1'b0 , z_out_1}),
      scaledown_col_if_if_else_if_else_else_else_else_else_else_acc_28, scaledown_reg_times[2]);
  assign nl_z_out_4 = ({reg_v_tmp_13_0_ftd , reg_v_tmp_13_0_ftd_1}) + conv_u2u_12_14(scaledown_col_if_if_if_else_else_mux_3_nl);
  assign z_out_4 = nl_z_out_4[13:0];
  assign scaledown_col_if_if_if_else_else_mux_4_nl = MUX_v_12_2_2(scaledown_col_if_if_else_if_else_else_else_else_else_else_acc_30,
      ({1'b0 , z_out_2}), scaledown_reg_times[1]);
  assign nl_z_out_5 = ({reg_u_tmp_13_0_ftd , reg_u_tmp_13_0_ftd_1}) + conv_u2u_12_14(scaledown_col_if_if_if_else_else_mux_4_nl);
  assign z_out_5 = nl_z_out_5[13:0];
  assign scaledown_col_if_if_if_else_else_mux_5_nl = MUX_v_12_2_2(({1'b0 , z_out_3}),
      scaledown_col_if_if_else_if_else_else_else_else_else_else_acc_32, scaledown_reg_times[2]);
  assign nl_z_out_6 = ({reg_y_tmp_13_0_ftd , reg_y_tmp_13_0_ftd_1}) + conv_u2u_12_14(scaledown_col_if_if_if_else_else_mux_5_nl);
  assign z_out_6 = nl_z_out_6[13:0];

  function automatic [9:0] MUX1HOT_v_10_3_2;
    input [9:0] input_2;
    input [9:0] input_1;
    input [9:0] input_0;
    input [2:0] sel;
    reg [9:0] result;
  begin
    result = input_0 & {10{sel[0]}};
    result = result | ( input_1 & {10{sel[1]}});
    result = result | ( input_2 & {10{sel[2]}});
    MUX1HOT_v_10_3_2 = result;
  end
  endfunction


  function automatic [9:0] MUX1HOT_v_10_4_2;
    input [9:0] input_3;
    input [9:0] input_2;
    input [9:0] input_1;
    input [9:0] input_0;
    input [3:0] sel;
    reg [9:0] result;
  begin
    result = input_0 & {10{sel[0]}};
    result = result | ( input_1 & {10{sel[1]}});
    result = result | ( input_2 & {10{sel[2]}});
    result = result | ( input_3 & {10{sel[3]}});
    MUX1HOT_v_10_4_2 = result;
  end
  endfunction


  function automatic [11:0] MUX1HOT_v_12_3_2;
    input [11:0] input_2;
    input [11:0] input_1;
    input [11:0] input_0;
    input [2:0] sel;
    reg [11:0] result;
  begin
    result = input_0 & {12{sel[0]}};
    result = result | ( input_1 & {12{sel[1]}});
    result = result | ( input_2 & {12{sel[2]}});
    MUX1HOT_v_12_3_2 = result;
  end
  endfunction


  function automatic [1:0] MUX1HOT_v_2_3_2;
    input [1:0] input_2;
    input [1:0] input_1;
    input [1:0] input_0;
    input [2:0] sel;
    reg [1:0] result;
  begin
    result = input_0 & {2{sel[0]}};
    result = result | ( input_1 & {2{sel[1]}});
    result = result | ( input_2 & {2{sel[2]}});
    MUX1HOT_v_2_3_2 = result;
  end
  endfunction


  function automatic [0:0] MUX_s_1_2_2;
    input [0:0] input_0;
    input [0:0] input_1;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function automatic [10:0] MUX_v_11_2_2;
    input [10:0] input_0;
    input [10:0] input_1;
    input [0:0] sel;
    reg [10:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_11_2_2 = result;
  end
  endfunction


  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input [0:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction


  function automatic [12:0] MUX_v_13_2_2;
    input [12:0] input_0;
    input [12:0] input_1;
    input [0:0] sel;
    reg [12:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_13_2_2 = result;
  end
  endfunction


  function automatic [1:0] MUX_v_2_2_2;
    input [1:0] input_0;
    input [1:0] input_1;
    input [0:0] sel;
    reg [1:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_2_2_2 = result;
  end
  endfunction


  function automatic [0:0] readslicef_14_1_13;
    input [13:0] vector;
    reg [13:0] tmp;
  begin
    tmp = vector >> 13;
    readslicef_14_1_13 = tmp[0:0];
  end
  endfunction


  function automatic [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction


  function automatic [10:0] conv_u2u_10_11 ;
    input [9:0]  vector ;
  begin
    conv_u2u_10_11 = {1'b0, vector};
  end
  endfunction


  function automatic [11:0] conv_u2u_10_12 ;
    input [9:0]  vector ;
  begin
    conv_u2u_10_12 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [11:0] conv_u2u_11_12 ;
    input [10:0]  vector ;
  begin
    conv_u2u_11_12 = {1'b0, vector};
  end
  endfunction


  function automatic [13:0] conv_u2u_12_14 ;
    input [11:0]  vector ;
  begin
    conv_u2u_12_14 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [13:0] conv_u2u_13_14 ;
    input [12:0]  vector ;
  begin
    conv_u2u_13_14 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    crop_core
// ------------------------------------------------------------------


module crop_core (
  clk, arst_n, top_reg_frameWidth, top_reg_frameHeight, crop_reg_m_nEb, crop_reg_upper_left_x,
      crop_reg_upper_left_y, crop_reg_lower_right_x, crop_reg_lower_right_y, crop_reg_yuvpattern,
      y_src_rsc_dat, y_src_rsc_vld, y_src_rsc_rdy, u_src_rsc_dat, u_src_rsc_vld,
      u_src_rsc_rdy, v_src_rsc_dat, v_src_rsc_vld, v_src_rsc_rdy, y_dst_rsc_dat,
      y_dst_rsc_vld, y_dst_rsc_rdy, u_dst_rsc_dat, u_dst_rsc_vld, u_dst_rsc_rdy,
      v_dst_rsc_dat, v_dst_rsc_vld, v_dst_rsc_rdy
);
  input clk;
  input arst_n;
  input [12:0] top_reg_frameWidth;
  input [12:0] top_reg_frameHeight;
  input crop_reg_m_nEb;
  input [12:0] crop_reg_upper_left_x;
  input [12:0] crop_reg_upper_left_y;
  input [12:0] crop_reg_lower_right_x;
  input [12:0] crop_reg_lower_right_y;
  input [1:0] crop_reg_yuvpattern;
  input [9:0] y_src_rsc_dat;
  input y_src_rsc_vld;
  output y_src_rsc_rdy;
  input [9:0] u_src_rsc_dat;
  input u_src_rsc_vld;
  output u_src_rsc_rdy;
  input [9:0] v_src_rsc_dat;
  input v_src_rsc_vld;
  output v_src_rsc_rdy;
  output [9:0] y_dst_rsc_dat;
  output y_dst_rsc_vld;
  input y_dst_rsc_rdy;
  output [9:0] u_dst_rsc_dat;
  output u_dst_rsc_vld;
  input u_dst_rsc_rdy;
  output [9:0] v_dst_rsc_dat;
  output v_dst_rsc_vld;
  input v_dst_rsc_rdy;


  // Interconnect Declarations
  wire core_wen;
  wire y_src_rsci_wen_comp;
  wire [9:0] y_src_rsci_idat_mxwt;
  wire u_src_rsci_wen_comp;
  wire [9:0] u_src_rsci_idat_mxwt;
  wire v_src_rsci_wen_comp;
  wire [9:0] v_src_rsci_idat_mxwt;
  wire y_dst_rsci_wen_comp;
  reg [9:0] y_dst_rsci_idat;
  wire u_dst_rsci_wen_comp;
  reg [9:0] u_dst_rsci_idat;
  wire v_dst_rsci_wen_comp;
  reg [9:0] v_dst_rsci_idat;
  wire or_tmp_1;
  wire and_dcpl_14;
  wire and_dcpl_15;
  wire and_dcpl_18;
  wire and_dcpl_27;
  wire or_dcpl_11;
  wire mux_tmp_3;
  wire [12:0] crop_row_y_lpi_1_dfm_3;
  reg [12:0] crop_col_x_lpi_1_dfm_2;
  wire exitL_exit_crop_col_lpi_1_dfm_mx0;
  wire exitL_exitL_exit_crop_col_lpi_1_dfm_1;
  reg exit_crop_row_lpi_1_dfm;
  reg exitL_exit_crop_row_sva;
  reg [12:0] crop_row_y_lpi_1_dfm_2;
  reg main_stage_0_2;
  reg crop_row_asn_sft_lpi_1_dfm_1;
  reg crop_col_not_mdf_sva_1;
  reg crop_col_else_else_if_if_1_if_crop_col_else_else_if_if_1_if_and_2_itm_1;
  reg operator_13_false_1_operator_13_false_1_slc_crop_col_x_0_itm_1;
  wire [12:0] crop_col_x_lpi_1_dfm_3;
  wire exit_crop_row_lpi_1_dfm_1;
  reg reg_v_dst_rsci_oswt_cse;
  wire crop_col_if_if_if_and_cse;
  reg reg_y_dst_rsci_oswt_cse;
  reg reg_v_src_rsci_oswt_cse;
  reg reg_y_src_rsci_oswt_cse;
  reg reg_crop_col_else_else_if_lor_lpi_1_dfm_st_1_1_cse;
  wire or_33_cse;
  wire nor_7_cse;
  wire or_3_cse;
  wire [12:0] z_out;
  wire [13:0] nl_z_out;
  wire crop_col_acc_2_itm_13_1;
  wire crop_row_acc_2_itm_13_1;

  wire[0:0] mux_6_nl;
  wire[0:0] and_30_nl;
  wire[0:0] or_11_nl;
  wire[0:0] mux_11_nl;
  wire[0:0] mux_10_nl;
  wire[0:0] mux_9_nl;
  wire[0:0] mux_8_nl;
  wire[0:0] nand_1_nl;
  wire[0:0] or_nl;
  wire[0:0] or_20_nl;
  wire[0:0] mux_13_nl;
  wire[0:0] or_31_nl;
  wire[13:0] crop_col_else_else_if_if_1_aelse_2_acc_1_nl;
  wire[14:0] nl_crop_col_else_else_if_if_1_aelse_2_acc_1_nl;
  wire[13:0] crop_col_if_if_aelse_1_acc_1_nl;
  wire[14:0] nl_crop_col_if_if_aelse_1_acc_1_nl;
  wire[13:0] crop_col_else_if_if_1_aelse_acc_1_nl;
  wire[14:0] nl_crop_col_else_if_if_1_aelse_acc_1_nl;
  wire[13:0] crop_col_else_if_if_1_if_acc_1_nl;
  wire[14:0] nl_crop_col_else_if_if_1_if_acc_1_nl;
  wire[0:0] crop_col_crop_col_crop_col_crop_col_not_nl;
  wire[0:0] crop_row_not_14_nl;
  wire[13:0] crop_col_acc_2_nl;
  wire[14:0] nl_crop_col_acc_2_nl;
  wire[13:0] crop_row_acc_2_nl;
  wire[14:0] nl_crop_row_acc_2_nl;
  wire[12:0] crop_col_mux_3_nl;

  // Interconnect Declarations for Component Instantiations 
  crop_core_y_src_rsci crop_core_y_src_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .y_src_rsc_dat(y_src_rsc_dat),
      .y_src_rsc_vld(y_src_rsc_vld),
      .y_src_rsc_rdy(y_src_rsc_rdy),
      .core_wen(core_wen),
      .y_src_rsci_oswt(reg_y_src_rsci_oswt_cse),
      .y_src_rsci_wen_comp(y_src_rsci_wen_comp),
      .y_src_rsci_idat_mxwt(y_src_rsci_idat_mxwt)
    );
  crop_core_u_src_rsci crop_core_u_src_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .u_src_rsc_dat(u_src_rsc_dat),
      .u_src_rsc_vld(u_src_rsc_vld),
      .u_src_rsc_rdy(u_src_rsc_rdy),
      .core_wen(core_wen),
      .u_src_rsci_oswt(reg_v_src_rsci_oswt_cse),
      .u_src_rsci_wen_comp(u_src_rsci_wen_comp),
      .u_src_rsci_idat_mxwt(u_src_rsci_idat_mxwt)
    );
  crop_core_v_src_rsci crop_core_v_src_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .v_src_rsc_dat(v_src_rsc_dat),
      .v_src_rsc_vld(v_src_rsc_vld),
      .v_src_rsc_rdy(v_src_rsc_rdy),
      .core_wen(core_wen),
      .v_src_rsci_oswt(reg_v_src_rsci_oswt_cse),
      .v_src_rsci_wen_comp(v_src_rsci_wen_comp),
      .v_src_rsci_idat_mxwt(v_src_rsci_idat_mxwt)
    );
  crop_core_y_dst_rsci crop_core_y_dst_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .y_dst_rsc_dat(y_dst_rsc_dat),
      .y_dst_rsc_vld(y_dst_rsc_vld),
      .y_dst_rsc_rdy(y_dst_rsc_rdy),
      .core_wen(core_wen),
      .y_dst_rsci_oswt(reg_y_dst_rsci_oswt_cse),
      .y_dst_rsci_wen_comp(y_dst_rsci_wen_comp),
      .y_dst_rsci_idat(y_dst_rsci_idat)
    );
  crop_core_u_dst_rsci crop_core_u_dst_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .u_dst_rsc_dat(u_dst_rsc_dat),
      .u_dst_rsc_vld(u_dst_rsc_vld),
      .u_dst_rsc_rdy(u_dst_rsc_rdy),
      .core_wen(core_wen),
      .u_dst_rsci_oswt(reg_v_dst_rsci_oswt_cse),
      .u_dst_rsci_wen_comp(u_dst_rsci_wen_comp),
      .u_dst_rsci_idat(u_dst_rsci_idat)
    );
  crop_core_v_dst_rsci crop_core_v_dst_rsci_inst (
      .clk(clk),
      .arst_n(arst_n),
      .v_dst_rsc_dat(v_dst_rsc_dat),
      .v_dst_rsc_vld(v_dst_rsc_vld),
      .v_dst_rsc_rdy(v_dst_rsc_rdy),
      .core_wen(core_wen),
      .v_dst_rsci_oswt(reg_v_dst_rsci_oswt_cse),
      .v_dst_rsci_wen_comp(v_dst_rsci_wen_comp),
      .v_dst_rsci_idat(v_dst_rsci_idat)
    );
  crop_core_staller crop_core_staller_inst (
      .core_wen(core_wen),
      .y_src_rsci_wen_comp(y_src_rsci_wen_comp),
      .u_src_rsci_wen_comp(u_src_rsci_wen_comp),
      .v_src_rsci_wen_comp(v_src_rsci_wen_comp),
      .y_dst_rsci_wen_comp(y_dst_rsci_wen_comp),
      .u_dst_rsci_wen_comp(u_dst_rsci_wen_comp),
      .v_dst_rsci_wen_comp(v_dst_rsci_wen_comp)
    );
  assign crop_col_if_if_if_and_cse = core_wen & (~((~(and_dcpl_18 & and_dcpl_15 &
      (~ (crop_reg_yuvpattern[0])))) & (~(and_dcpl_18 & and_dcpl_15 & operator_13_false_1_operator_13_false_1_slc_crop_col_x_0_itm_1
      & (crop_reg_yuvpattern[0]))) & (~(and_dcpl_18 & main_stage_0_2 & (crop_reg_yuvpattern[1])
      & (~ reg_crop_col_else_else_if_lor_lpi_1_dfm_st_1_1_cse) & (~ (crop_reg_yuvpattern[0]))))));
  assign or_33_cse = crop_col_not_mdf_sva_1 | crop_row_asn_sft_lpi_1_dfm_1;
  assign crop_col_crop_col_crop_col_crop_col_not_nl = ~ exitL_exitL_exit_crop_col_lpi_1_dfm_1;
  assign crop_col_x_lpi_1_dfm_3 = MUX_v_13_2_2(13'b0000000000000, crop_col_x_lpi_1_dfm_2,
      crop_col_crop_col_crop_col_crop_col_not_nl);
  assign crop_row_not_14_nl = ~ exitL_exit_crop_row_sva;
  assign crop_row_y_lpi_1_dfm_3 = MUX_v_13_2_2(13'b0000000000000, crop_row_y_lpi_1_dfm_2,
      crop_row_not_14_nl);
  assign nl_crop_col_acc_2_nl = ({1'b1 , crop_col_x_lpi_1_dfm_3}) + conv_u2u_13_14(~
      top_reg_frameWidth) + 14'b00000000000001;
  assign crop_col_acc_2_nl = nl_crop_col_acc_2_nl[13:0];
  assign crop_col_acc_2_itm_13_1 = readslicef_14_1_13(crop_col_acc_2_nl);
  assign exit_crop_row_lpi_1_dfm_1 = (~ crop_row_acc_2_itm_13_1) & exitL_exitL_exit_crop_col_lpi_1_dfm_1;
  assign exitL_exitL_exit_crop_col_lpi_1_dfm_1 = exitL_exit_crop_col_lpi_1_dfm_mx0
      | exit_crop_row_lpi_1_dfm | exitL_exit_crop_row_sva;
  assign exitL_exit_crop_col_lpi_1_dfm_mx0 = or_33_cse & main_stage_0_2;
  assign or_tmp_1 = exit_crop_row_lpi_1_dfm | exitL_exit_crop_row_sva;
  assign nor_7_cse = ~(exit_crop_row_lpi_1_dfm | exitL_exit_crop_row_sva | main_stage_0_2);
  assign or_3_cse = or_tmp_1 | exitL_exit_crop_col_lpi_1_dfm_mx0;
  assign and_dcpl_14 = crop_reg_m_nEb & (~ crop_col_else_else_if_if_1_if_crop_col_else_else_if_if_1_if_and_2_itm_1);
  assign and_dcpl_15 = main_stage_0_2 & (~ (crop_reg_yuvpattern[1]));
  assign and_dcpl_18 = (~(crop_col_not_mdf_sva_1 | crop_row_asn_sft_lpi_1_dfm_1))
      & ((~ crop_reg_m_nEb) | crop_col_else_else_if_if_1_if_crop_col_else_else_if_if_1_if_and_2_itm_1);
  assign and_dcpl_27 = (crop_reg_yuvpattern==2'b11);
  assign or_dcpl_11 = or_33_cse | and_dcpl_14 | and_dcpl_27 | (~ main_stage_0_2);
  assign mux_tmp_3 = MUX_s_1_2_2((~ main_stage_0_2), main_stage_0_2, or_33_cse);
  assign nl_crop_row_acc_2_nl = ({1'b1 , crop_row_y_lpi_1_dfm_3}) + conv_u2u_13_14(~
      top_reg_frameHeight) + 14'b00000000000001;
  assign crop_row_acc_2_nl = nl_crop_row_acc_2_nl[13:0];
  assign crop_row_acc_2_itm_13_1 = readslicef_14_1_13(crop_row_acc_2_nl);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      reg_v_dst_rsci_oswt_cse <= 1'b0;
      reg_y_dst_rsci_oswt_cse <= 1'b0;
      reg_v_src_rsci_oswt_cse <= 1'b0;
      reg_y_src_rsci_oswt_cse <= 1'b0;
      crop_col_x_lpi_1_dfm_2 <= 13'b0000000000000;
      exitL_exit_crop_row_sva <= 1'b1;
      crop_row_y_lpi_1_dfm_2 <= 13'b0000000000000;
      exit_crop_row_lpi_1_dfm <= 1'b0;
      operator_13_false_1_operator_13_false_1_slc_crop_col_x_0_itm_1 <= 1'b0;
      reg_crop_col_else_else_if_lor_lpi_1_dfm_st_1_1_cse <= 1'b0;
      crop_col_else_else_if_if_1_if_crop_col_else_else_if_if_1_if_and_2_itm_1 <=
          1'b0;
      crop_col_not_mdf_sva_1 <= 1'b0;
      main_stage_0_2 <= 1'b0;
    end
    else if ( core_wen ) begin
      reg_v_dst_rsci_oswt_cse <= ~(mux_6_nl | crop_col_not_mdf_sva_1 | crop_row_asn_sft_lpi_1_dfm_1
          | (~ main_stage_0_2) | and_dcpl_14);
      reg_y_dst_rsci_oswt_cse <= ~ or_dcpl_11;
      reg_v_src_rsci_oswt_cse <= ~(mux_11_nl | (~ crop_col_acc_2_itm_13_1));
      reg_y_src_rsci_oswt_cse <= ~(mux_13_nl | and_dcpl_27 | (~ crop_col_acc_2_itm_13_1));
      crop_col_x_lpi_1_dfm_2 <= z_out;
      exitL_exit_crop_row_sva <= exit_crop_row_lpi_1_dfm_1;
      crop_row_y_lpi_1_dfm_2 <= MUX_v_13_2_2(z_out, crop_row_y_lpi_1_dfm_3, or_31_nl);
      exit_crop_row_lpi_1_dfm <= exit_crop_row_lpi_1_dfm_1;
      operator_13_false_1_operator_13_false_1_slc_crop_col_x_0_itm_1 <= crop_col_x_lpi_1_dfm_3[0];
      reg_crop_col_else_else_if_lor_lpi_1_dfm_st_1_1_cse <= ~((crop_col_x_lpi_1_dfm_3[0])
          & (crop_row_y_lpi_1_dfm_3[0]));
      crop_col_else_else_if_if_1_if_crop_col_else_else_if_if_1_if_and_2_itm_1 <=
          (readslicef_14_1_13(crop_col_else_else_if_if_1_aelse_2_acc_1_nl)) & (~
          (readslicef_14_1_13(crop_col_if_if_aelse_1_acc_1_nl))) & (readslicef_14_1_13(crop_col_else_if_if_1_aelse_acc_1_nl))
          & (~ (readslicef_14_1_13(crop_col_else_if_if_1_if_acc_1_nl)));
      crop_col_not_mdf_sva_1 <= ~ crop_col_acc_2_itm_13_1;
      main_stage_0_2 <= 1'b1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      v_dst_rsci_idat <= 10'b0000000000;
      u_dst_rsci_idat <= 10'b0000000000;
    end
    else if ( crop_col_if_if_if_and_cse ) begin
      v_dst_rsci_idat <= v_src_rsci_idat_mxwt;
      u_dst_rsci_idat <= u_src_rsci_idat_mxwt;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      y_dst_rsci_idat <= 10'b0000000000;
    end
    else if ( core_wen & (~ or_dcpl_11) ) begin
      y_dst_rsci_idat <= y_src_rsci_idat_mxwt;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      crop_row_asn_sft_lpi_1_dfm_1 <= 1'b0;
    end
    else if ( core_wen & or_3_cse ) begin
      crop_row_asn_sft_lpi_1_dfm_1 <= exit_crop_row_lpi_1_dfm_1;
    end
  end
  assign and_30_nl = reg_crop_col_else_else_if_lor_lpi_1_dfm_st_1_1_cse & (crop_reg_yuvpattern[1]);
  assign or_11_nl = (~ operator_13_false_1_operator_13_false_1_slc_crop_col_x_0_itm_1)
      | (crop_reg_yuvpattern[1]);
  assign mux_6_nl = MUX_s_1_2_2(and_30_nl, or_11_nl, crop_reg_yuvpattern[0]);
  assign mux_8_nl = MUX_s_1_2_2(mux_tmp_3, (~ main_stage_0_2), crop_row_acc_2_itm_13_1);
  assign nand_1_nl = ~((crop_col_x_lpi_1_dfm_2[0]) & (~ mux_tmp_3));
  assign mux_9_nl = MUX_s_1_2_2(mux_8_nl, nand_1_nl, crop_reg_yuvpattern[0]);
  assign or_nl = (~ (crop_row_y_lpi_1_dfm_2[0])) | (crop_reg_yuvpattern[0]) | (~
      (crop_col_x_lpi_1_dfm_2[0])) | mux_tmp_3;
  assign mux_10_nl = MUX_s_1_2_2(mux_9_nl, or_nl, crop_reg_yuvpattern[1]);
  assign or_20_nl = (crop_reg_yuvpattern!=2'b00) | (~ crop_row_acc_2_itm_13_1);
  assign mux_11_nl = MUX_s_1_2_2(mux_10_nl, or_20_nl, or_tmp_1);
  assign mux_13_nl = MUX_s_1_2_2(or_3_cse, nor_7_cse, crop_row_acc_2_itm_13_1);
  assign or_31_nl = nor_7_cse | crop_col_acc_2_itm_13_1;
  assign nl_crop_col_else_else_if_if_1_aelse_2_acc_1_nl = ({1'b1 , crop_col_x_lpi_1_dfm_3})
      + conv_u2u_13_14(~ crop_reg_lower_right_x) + 14'b00000000000001;
  assign crop_col_else_else_if_if_1_aelse_2_acc_1_nl = nl_crop_col_else_else_if_if_1_aelse_2_acc_1_nl[13:0];
  assign nl_crop_col_if_if_aelse_1_acc_1_nl = ({1'b1 , crop_col_x_lpi_1_dfm_3}) +
      conv_u2u_13_14(~ crop_reg_upper_left_x) + 14'b00000000000001;
  assign crop_col_if_if_aelse_1_acc_1_nl = nl_crop_col_if_if_aelse_1_acc_1_nl[13:0];
  assign nl_crop_col_else_if_if_1_aelse_acc_1_nl = ({1'b1 , crop_row_y_lpi_1_dfm_3})
      + conv_u2u_13_14(~ crop_reg_lower_right_y) + 14'b00000000000001;
  assign crop_col_else_if_if_1_aelse_acc_1_nl = nl_crop_col_else_if_if_1_aelse_acc_1_nl[13:0];
  assign nl_crop_col_else_if_if_1_if_acc_1_nl = ({1'b1 , crop_row_y_lpi_1_dfm_3})
      + conv_u2u_13_14(~ crop_reg_upper_left_y) + 14'b00000000000001;
  assign crop_col_else_if_if_1_if_acc_1_nl = nl_crop_col_else_if_if_1_if_acc_1_nl[13:0];
  assign crop_col_mux_3_nl = MUX_v_13_2_2(crop_row_y_lpi_1_dfm_3, crop_col_x_lpi_1_dfm_3,
      crop_col_acc_2_itm_13_1);
  assign nl_z_out = crop_col_mux_3_nl + 13'b0000000000001;
  assign z_out = nl_z_out[12:0];

  function automatic [0:0] MUX_s_1_2_2;
    input [0:0] input_0;
    input [0:0] input_1;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [12:0] MUX_v_13_2_2;
    input [12:0] input_0;
    input [12:0] input_1;
    input [0:0] sel;
    reg [12:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_13_2_2 = result;
  end
  endfunction


  function automatic [0:0] readslicef_14_1_13;
    input [13:0] vector;
    reg [13:0] tmp;
  begin
    tmp = vector >> 13;
    readslicef_14_1_13 = tmp[0:0];
  end
  endfunction


  function automatic [13:0] conv_u2u_13_14 ;
    input [12:0]  vector ;
  begin
    conv_u2u_13_14 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    tpg
// ------------------------------------------------------------------


module tpg (
  clk, arst_n, top_reg_frameWidth, top_reg_frameHeight, top_reg_inputFormat, top_reg_imgPattern,
      top_reg_pipeMode, top_reg_blc, top_reg_shadowEb, top_reg_binningFrameWidth,
      top_reg_binningFrameHeight, top_reg_scalerFrameWidth, top_reg_scalerFrameHeight,
      tpg_reg_m_bTPG_en, tpg_reg_m_nWidth, tpg_reg_m_nHeight, tpg_reg_m_nCFAPattern,
      tpg_reg_m_bRollingEnable, tpg_reg_m_bSensor_timing_en, tpg_reg_m_nVBlank_num,
      tpg_reg_m_nHBlank_num, tpg_reg_m_valid_blank, tpg_reg_m_nID, src_rsc_dat, src_rsc_vld,
      src_rsc_rdy, dst_rsc_dat, dst_rsc_vld, dst_rsc_rdy
);
  input clk;
  input arst_n;
  input [12:0] top_reg_frameWidth;
  input [12:0] top_reg_frameHeight;
  input top_reg_inputFormat;
  input [1:0] top_reg_imgPattern;
  input [1:0] top_reg_pipeMode;
  input [8:0] top_reg_blc;
  input top_reg_shadowEb;
  input [12:0] top_reg_binningFrameWidth;
  input [12:0] top_reg_binningFrameHeight;
  input [12:0] top_reg_scalerFrameWidth;
  input [12:0] top_reg_scalerFrameHeight;
  input tpg_reg_m_bTPG_en;
  input [12:0] tpg_reg_m_nWidth;
  input [12:0] tpg_reg_m_nHeight;
  input [1:0] tpg_reg_m_nCFAPattern;
  input tpg_reg_m_bRollingEnable;
  input tpg_reg_m_bSensor_timing_en;
  input [11:0] tpg_reg_m_nVBlank_num;
  input [11:0] tpg_reg_m_nHBlank_num;
  input [7:0] tpg_reg_m_valid_blank;
  input [2:0] tpg_reg_m_nID;
  input [11:0] src_rsc_dat;
  input src_rsc_vld;
  output src_rsc_rdy;
  output [11:0] dst_rsc_dat;
  output dst_rsc_vld;
  input dst_rsc_rdy;



  // Interconnect Declarations for Component Instantiations 
  tpg_core tpg_core_inst (
      .clk(clk),
      .arst_n(arst_n),
      .top_reg_frameWidth(top_reg_frameWidth),
      .top_reg_frameHeight(top_reg_frameHeight),
      .top_reg_imgPattern(top_reg_imgPattern),
      .tpg_reg_m_bTPG_en(tpg_reg_m_bTPG_en),
      .src_rsc_dat(src_rsc_dat),
      .src_rsc_vld(src_rsc_vld),
      .src_rsc_rdy(src_rsc_rdy),
      .dst_rsc_dat(dst_rsc_dat),
      .dst_rsc_vld(dst_rsc_vld),
      .dst_rsc_rdy(dst_rsc_rdy)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dgain
// ------------------------------------------------------------------


module dgain (
  clk, arst_n, top_reg_frameWidth, top_reg_frameHeight, top_reg_inputFormat, top_reg_imgPattern,
      top_reg_pipeMode, top_reg_blc, top_reg_shadowEb, top_reg_binningFrameWidth,
      top_reg_binningFrameHeight, top_reg_scalerFrameWidth, top_reg_scalerFrameHeight,
      dgain_reg_m_nEb, dgain_reg_m_nBlcR, dgain_reg_m_nBlcGr, dgain_reg_m_nBlcGb,
      dgain_reg_m_nBlcB, dgain_reg_m_nR, dgain_reg_m_nGr, dgain_reg_m_nGb, dgain_reg_m_nB,
      src_rsc_dat, src_rsc_vld, src_rsc_rdy, dst_rsc_dat, dst_rsc_vld, dst_rsc_rdy
);
  input clk;
  input arst_n;
  input [12:0] top_reg_frameWidth;
  input [12:0] top_reg_frameHeight;
  input top_reg_inputFormat;
  input [1:0] top_reg_imgPattern;
  input [1:0] top_reg_pipeMode;
  input [8:0] top_reg_blc;
  input top_reg_shadowEb;
  input [12:0] top_reg_binningFrameWidth;
  input [12:0] top_reg_binningFrameHeight;
  input [12:0] top_reg_scalerFrameWidth;
  input [12:0] top_reg_scalerFrameHeight;
  input dgain_reg_m_nEb;
  input [8:0] dgain_reg_m_nBlcR;
  input [8:0] dgain_reg_m_nBlcGr;
  input [8:0] dgain_reg_m_nBlcGb;
  input [8:0] dgain_reg_m_nBlcB;
  input [19:0] dgain_reg_m_nR;
  input [19:0] dgain_reg_m_nGr;
  input [19:0] dgain_reg_m_nGb;
  input [19:0] dgain_reg_m_nB;
  input [11:0] src_rsc_dat;
  input src_rsc_vld;
  output src_rsc_rdy;
  output [11:0] dst_rsc_dat;
  output dst_rsc_vld;
  input dst_rsc_rdy;



  // Interconnect Declarations for Component Instantiations 
  dgain_core dgain_core_inst (
      .clk(clk),
      .arst_n(arst_n),
      .top_reg_frameWidth(top_reg_frameWidth),
      .top_reg_frameHeight(top_reg_frameHeight),
      .top_reg_imgPattern(top_reg_imgPattern),
      .top_reg_blc(top_reg_blc),
      .dgain_reg_m_nEb(dgain_reg_m_nEb),
      .dgain_reg_m_nBlcR(dgain_reg_m_nBlcR),
      .dgain_reg_m_nBlcGr(dgain_reg_m_nBlcGr),
      .dgain_reg_m_nBlcGb(dgain_reg_m_nBlcGb),
      .dgain_reg_m_nBlcB(dgain_reg_m_nBlcB),
      .dgain_reg_m_nR(dgain_reg_m_nR),
      .dgain_reg_m_nGr(dgain_reg_m_nGr),
      .dgain_reg_m_nGb(dgain_reg_m_nGb),
      .dgain_reg_m_nB(dgain_reg_m_nB),
      .src_rsc_dat(src_rsc_dat),
      .src_rsc_vld(src_rsc_vld),
      .src_rsc_rdy(src_rsc_rdy),
      .dst_rsc_dat(dst_rsc_dat),
      .dst_rsc_vld(dst_rsc_vld),
      .dst_rsc_rdy(dst_rsc_rdy)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    lsc
// ------------------------------------------------------------------


module lsc (
  clk, arst_n, topRegister_frameWidth, topRegister_frameHeight, topRegister_inputFormat,
      topRegister_imgPattern, topRegister_pipeMode, topRegister_blc, topRegister_shadowEb,
      topRegister_binningFrameWidth, topRegister_binningFrameHeight, topRegister_scalerFrameWidth,
      topRegister_scalerFrameHeight, lscRegister_eb, lscRegister_rGain, lscRegister_GrGain,
      lscRegister_GbGain, lscRegister_bGain, lscRegister_blockHeight, lscRegister_blockWidth,
      lscRegister_blockWidth_1, lscRegister_blockHeight_1, src_rsc_dat, src_rsc_vld,
      src_rsc_rdy, dst_rsc_dat, dst_rsc_vld, dst_rsc_rdy
);
  input clk;
  input arst_n;
  input [12:0] topRegister_frameWidth;
  input [12:0] topRegister_frameHeight;
  input topRegister_inputFormat;
  input [1:0] topRegister_imgPattern;
  input [1:0] topRegister_pipeMode;
  input [8:0] topRegister_blc;
  input topRegister_shadowEb;
  input [12:0] topRegister_binningFrameWidth;
  input [12:0] topRegister_binningFrameHeight;
  input [12:0] topRegister_scalerFrameWidth;
  input [12:0] topRegister_scalerFrameHeight;
  input lscRegister_eb;
  input [2872:0] lscRegister_rGain;
  input [2872:0] lscRegister_GrGain;
  input [2872:0] lscRegister_GbGain;
  input [2872:0] lscRegister_bGain;
  input [8:0] lscRegister_blockHeight;
  input [8:0] lscRegister_blockWidth;
  input [13:0] lscRegister_blockWidth_1;
  input [9:0] lscRegister_blockHeight_1;
  input [11:0] src_rsc_dat;
  input src_rsc_vld;
  output src_rsc_rdy;
  output [11:0] dst_rsc_dat;
  output dst_rsc_vld;
  input dst_rsc_rdy;



  // Interconnect Declarations for Component Instantiations 
  lsc_core lsc_core_inst (
      .clk(clk),
      .arst_n(arst_n),
      .topRegister_frameWidth(topRegister_frameWidth),
      .topRegister_frameHeight(topRegister_frameHeight),
      .topRegister_imgPattern(topRegister_imgPattern),
      .topRegister_blc(topRegister_blc),
      .lscRegister_eb(lscRegister_eb),
      .lscRegister_rGain(lscRegister_rGain),
      .lscRegister_GrGain(lscRegister_GrGain),
      .lscRegister_GbGain(lscRegister_GbGain),
      .lscRegister_bGain(lscRegister_bGain),
      .lscRegister_blockHeight(lscRegister_blockHeight),
      .lscRegister_blockWidth(lscRegister_blockWidth),
      .lscRegister_blockWidth_1(lscRegister_blockWidth_1),
      .lscRegister_blockHeight_1(lscRegister_blockHeight_1),
      .src_rsc_dat(src_rsc_dat),
      .src_rsc_vld(src_rsc_vld),
      .src_rsc_rdy(src_rsc_rdy),
      .dst_rsc_dat(dst_rsc_dat),
      .dst_rsc_vld(dst_rsc_vld),
      .dst_rsc_rdy(dst_rsc_rdy)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dpc
// ------------------------------------------------------------------


module dpc (
  clk, arst_n, top_reg_frameWidth, top_reg_frameHeight, top_reg_inputFormat, top_reg_imgPattern,
      top_reg_pipeMode, top_reg_blc, top_reg_shadowEb, top_reg_binningFrameWidth,
      top_reg_binningFrameHeight, top_reg_scalerFrameWidth, top_reg_scalerFrameHeight,
      dpc_reg_eb, dpc_reg_th_w, dpc_reg_th_b, src_rsc_dat, src_rsc_vld, src_rsc_rdy,
      dst_rsc_dat, dst_rsc_vld, dst_rsc_rdy
);
  input clk;
  input arst_n;
  input [12:0] top_reg_frameWidth;
  input [12:0] top_reg_frameHeight;
  input top_reg_inputFormat;
  input [1:0] top_reg_imgPattern;
  input [1:0] top_reg_pipeMode;
  input [8:0] top_reg_blc;
  input top_reg_shadowEb;
  input [12:0] top_reg_binningFrameWidth;
  input [12:0] top_reg_binningFrameHeight;
  input [12:0] top_reg_scalerFrameWidth;
  input [12:0] top_reg_scalerFrameHeight;
  input dpc_reg_eb;
  input [10:0] dpc_reg_th_w;
  input [10:0] dpc_reg_th_b;
  input [11:0] src_rsc_dat;
  input src_rsc_vld;
  output src_rsc_rdy;
  output [11:0] dst_rsc_dat;
  output dst_rsc_vld;
  input dst_rsc_rdy;


  // Interconnect Declarations
  wire [13:0] lineBuffer_rsci_radr_d;
  wire [13:0] lineBuffer_rsci_wadr_d;
  wire [11:0] lineBuffer_rsci_d_d;
  wire [11:0] lineBuffer_rsci_q_d;
  wire lineBuffer_rsc_we;
  wire [11:0] lineBuffer_rsc_d;
  wire [13:0] lineBuffer_rsc_wadr;
  wire [11:0] lineBuffer_rsc_q;
  wire lineBuffer_rsc_re;
  wire [13:0] lineBuffer_rsc_radr;
  wire lineBuffer_rsci_we_d_iff;
  wire lineBuffer_rsci_re_d_iff;


  // Interconnect Declarations for Component Instantiations 
  ccs_ram_sync_1R1W #(.data_width(32'sd12),
  .addr_width(32'sd14),
  .depth(32'sd16384)) lineBuffer_rsc_comp (
      .radr(lineBuffer_rsc_radr),
      .wadr(lineBuffer_rsc_wadr),
      .d(lineBuffer_rsc_d),
      .we(lineBuffer_rsc_we),
      .re(lineBuffer_rsc_re),
      .clk(clk),
      .q(lineBuffer_rsc_q)
    );
  dpc_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_87_12_14_16384_16384_12_5_gen lineBuffer_rsci
      (
      .we(lineBuffer_rsc_we),
      .d(lineBuffer_rsc_d),
      .wadr(lineBuffer_rsc_wadr),
      .q(lineBuffer_rsc_q),
      .re(lineBuffer_rsc_re),
      .radr(lineBuffer_rsc_radr),
      .radr_d(lineBuffer_rsci_radr_d),
      .wadr_d(lineBuffer_rsci_wadr_d),
      .d_d(lineBuffer_rsci_d_d),
      .we_d(lineBuffer_rsci_we_d_iff),
      .re_d(lineBuffer_rsci_re_d_iff),
      .q_d(lineBuffer_rsci_q_d),
      .port_0_r_ram_ir_internal_RMASK_B_d(lineBuffer_rsci_re_d_iff),
      .port_1_w_ram_ir_internal_WMASK_B_d(lineBuffer_rsci_we_d_iff)
    );
  dpc_core dpc_core_inst (
      .clk(clk),
      .arst_n(arst_n),
      .top_reg_frameWidth(top_reg_frameWidth),
      .top_reg_frameHeight(top_reg_frameHeight),
      .top_reg_imgPattern(top_reg_imgPattern),
      .dpc_reg_eb(dpc_reg_eb),
      .dpc_reg_th_w(dpc_reg_th_w),
      .dpc_reg_th_b(dpc_reg_th_b),
      .src_rsc_dat(src_rsc_dat),
      .src_rsc_vld(src_rsc_vld),
      .src_rsc_rdy(src_rsc_rdy),
      .dst_rsc_dat(dst_rsc_dat),
      .dst_rsc_vld(dst_rsc_vld),
      .dst_rsc_rdy(dst_rsc_rdy),
      .lineBuffer_rsci_radr_d(lineBuffer_rsci_radr_d),
      .lineBuffer_rsci_wadr_d(lineBuffer_rsci_wadr_d),
      .lineBuffer_rsci_d_d(lineBuffer_rsci_d_d),
      .lineBuffer_rsci_q_d(lineBuffer_rsci_q_d),
      .lineBuffer_rsci_we_d_pff(lineBuffer_rsci_we_d_iff),
      .lineBuffer_rsci_re_d_pff(lineBuffer_rsci_re_d_iff)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_rawdns
// ------------------------------------------------------------------


module isp_rawdns (
  clk, arst_n, top_reg_frameWidth, top_reg_frameHeight, top_reg_inputFormat, top_reg_imgPattern,
      top_reg_pipeMode, top_reg_blc, top_reg_shadowEb, top_reg_binningFrameWidth,
      top_reg_binningFrameHeight, top_reg_scalerFrameWidth, top_reg_scalerFrameHeight,
      rawdns_reg_sigma, rawdns_reg_eb, rawdns_reg_Filterpara, rawdns_reg_invksigma2,
      src_rsc_dat, src_rsc_vld, src_rsc_rdy, dst_rsc_dat, dst_rsc_vld, dst_rsc_rdy
);
  input clk;
  input arst_n;
  input [12:0] top_reg_frameWidth;
  input [12:0] top_reg_frameHeight;
  input top_reg_inputFormat;
  input [1:0] top_reg_imgPattern;
  input [1:0] top_reg_pipeMode;
  input [8:0] top_reg_blc;
  input top_reg_shadowEb;
  input [12:0] top_reg_binningFrameWidth;
  input [12:0] top_reg_binningFrameHeight;
  input [12:0] top_reg_scalerFrameWidth;
  input [12:0] top_reg_scalerFrameHeight;
  input [5:0] rawdns_reg_sigma;
  input rawdns_reg_eb;
  input [6:0] rawdns_reg_Filterpara;
  input [11:0] rawdns_reg_invksigma2;
  input [11:0] src_rsc_dat;
  input src_rsc_vld;
  output src_rsc_rdy;
  output [11:0] dst_rsc_dat;
  output dst_rsc_vld;
  input dst_rsc_rdy;


  // Interconnect Declarations
  wire [11:0] rawdns_lines_rsc_0_0_i_q_d;
  wire [11:0] rawdns_lines_rsc_0_1_i_q_d;
  wire [11:0] rawdns_lines_rsc_0_2_i_q_d;
  wire [11:0] rawdns_lines_rsc_0_3_i_q_d;
  wire [11:0] rawdns_lines_rsc_0_4_i_q_d;
  wire [11:0] rawdns_lines_rsc_0_5_i_q_d;
  wire [11:0] rawdns_lines_rsc_0_6_i_q_d;
  wire [11:0] rawdns_lines_rsc_0_7_i_q_d;
  wire [11:0] rawdns_lines_rsc_0_8_i_q_d;
  wire [11:0] rawdns_lines_rsc_0_9_i_q_d;
  wire rawdns_lines_rsc_0_0_we;
  wire [11:0] rawdns_lines_rsc_0_0_d;
  wire [11:0] rawdns_lines_rsc_0_0_wadr;
  wire [11:0] rawdns_lines_rsc_0_0_q;
  wire rawdns_lines_rsc_0_0_re;
  wire [11:0] rawdns_lines_rsc_0_0_radr;
  wire rawdns_lines_rsc_0_1_we;
  wire [11:0] rawdns_lines_rsc_0_1_d;
  wire [11:0] rawdns_lines_rsc_0_1_wadr;
  wire [11:0] rawdns_lines_rsc_0_1_q;
  wire rawdns_lines_rsc_0_1_re;
  wire [11:0] rawdns_lines_rsc_0_1_radr;
  wire rawdns_lines_rsc_0_2_we;
  wire [11:0] rawdns_lines_rsc_0_2_d;
  wire [11:0] rawdns_lines_rsc_0_2_wadr;
  wire [11:0] rawdns_lines_rsc_0_2_q;
  wire rawdns_lines_rsc_0_2_re;
  wire [11:0] rawdns_lines_rsc_0_2_radr;
  wire rawdns_lines_rsc_0_3_we;
  wire [11:0] rawdns_lines_rsc_0_3_d;
  wire [11:0] rawdns_lines_rsc_0_3_wadr;
  wire [11:0] rawdns_lines_rsc_0_3_q;
  wire rawdns_lines_rsc_0_3_re;
  wire [11:0] rawdns_lines_rsc_0_3_radr;
  wire rawdns_lines_rsc_0_4_we;
  wire [11:0] rawdns_lines_rsc_0_4_d;
  wire [11:0] rawdns_lines_rsc_0_4_wadr;
  wire [11:0] rawdns_lines_rsc_0_4_q;
  wire rawdns_lines_rsc_0_4_re;
  wire [11:0] rawdns_lines_rsc_0_4_radr;
  wire rawdns_lines_rsc_0_5_we;
  wire [11:0] rawdns_lines_rsc_0_5_d;
  wire [11:0] rawdns_lines_rsc_0_5_wadr;
  wire [11:0] rawdns_lines_rsc_0_5_q;
  wire rawdns_lines_rsc_0_5_re;
  wire [11:0] rawdns_lines_rsc_0_5_radr;
  wire rawdns_lines_rsc_0_6_we;
  wire [11:0] rawdns_lines_rsc_0_6_d;
  wire [11:0] rawdns_lines_rsc_0_6_wadr;
  wire [11:0] rawdns_lines_rsc_0_6_q;
  wire rawdns_lines_rsc_0_6_re;
  wire [11:0] rawdns_lines_rsc_0_6_radr;
  wire rawdns_lines_rsc_0_7_we;
  wire [11:0] rawdns_lines_rsc_0_7_d;
  wire [11:0] rawdns_lines_rsc_0_7_wadr;
  wire [11:0] rawdns_lines_rsc_0_7_q;
  wire rawdns_lines_rsc_0_7_re;
  wire [11:0] rawdns_lines_rsc_0_7_radr;
  wire rawdns_lines_rsc_0_8_we;
  wire [11:0] rawdns_lines_rsc_0_8_d;
  wire [11:0] rawdns_lines_rsc_0_8_wadr;
  wire [11:0] rawdns_lines_rsc_0_8_q;
  wire rawdns_lines_rsc_0_8_re;
  wire [11:0] rawdns_lines_rsc_0_8_radr;
  wire rawdns_lines_rsc_0_9_we;
  wire [11:0] rawdns_lines_rsc_0_9_d;
  wire [11:0] rawdns_lines_rsc_0_9_wadr;
  wire [11:0] rawdns_lines_rsc_0_9_q;
  wire rawdns_lines_rsc_0_9_re;
  wire [11:0] rawdns_lines_rsc_0_9_radr;
  wire [11:0] rawdns_lines_rsc_0_0_i_radr_d_iff;
  wire [11:0] rawdns_lines_rsc_0_0_i_d_d_iff;
  wire rawdns_lines_rsc_0_0_i_we_d_iff;
  wire rawdns_lines_rsc_0_0_i_re_d_iff;
  wire rawdns_lines_rsc_0_1_i_we_d_iff;
  wire rawdns_lines_rsc_0_1_i_re_d_iff;
  wire rawdns_lines_rsc_0_2_i_we_d_iff;
  wire rawdns_lines_rsc_0_2_i_re_d_iff;
  wire rawdns_lines_rsc_0_3_i_we_d_iff;
  wire rawdns_lines_rsc_0_3_i_re_d_iff;
  wire rawdns_lines_rsc_0_4_i_we_d_iff;
  wire rawdns_lines_rsc_0_4_i_re_d_iff;
  wire rawdns_lines_rsc_0_5_i_we_d_iff;
  wire rawdns_lines_rsc_0_5_i_re_d_iff;
  wire rawdns_lines_rsc_0_6_i_we_d_iff;
  wire rawdns_lines_rsc_0_6_i_re_d_iff;
  wire rawdns_lines_rsc_0_7_i_we_d_iff;
  wire rawdns_lines_rsc_0_7_i_re_d_iff;
  wire rawdns_lines_rsc_0_8_i_we_d_iff;
  wire rawdns_lines_rsc_0_8_i_re_d_iff;
  wire rawdns_lines_rsc_0_9_i_we_d_iff;
  wire rawdns_lines_rsc_0_9_i_re_d_iff;


  // Interconnect Declarations for Component Instantiations 
  ccs_ram_sync_1R1W #(.data_width(32'sd12),
  .addr_width(32'sd12),
  .depth(32'sd4096)) rawdns_lines_rsc_0_0_comp (
      .radr(rawdns_lines_rsc_0_0_radr),
      .wadr(rawdns_lines_rsc_0_0_wadr),
      .d(rawdns_lines_rsc_0_0_d),
      .we(rawdns_lines_rsc_0_0_we),
      .re(rawdns_lines_rsc_0_0_re),
      .clk(clk),
      .q(rawdns_lines_rsc_0_0_q)
    );
  ccs_ram_sync_1R1W #(.data_width(32'sd12),
  .addr_width(32'sd12),
  .depth(32'sd4096)) rawdns_lines_rsc_0_1_comp (
      .radr(rawdns_lines_rsc_0_1_radr),
      .wadr(rawdns_lines_rsc_0_1_wadr),
      .d(rawdns_lines_rsc_0_1_d),
      .we(rawdns_lines_rsc_0_1_we),
      .re(rawdns_lines_rsc_0_1_re),
      .clk(clk),
      .q(rawdns_lines_rsc_0_1_q)
    );
  ccs_ram_sync_1R1W #(.data_width(32'sd12),
  .addr_width(32'sd12),
  .depth(32'sd4096)) rawdns_lines_rsc_0_2_comp (
      .radr(rawdns_lines_rsc_0_2_radr),
      .wadr(rawdns_lines_rsc_0_2_wadr),
      .d(rawdns_lines_rsc_0_2_d),
      .we(rawdns_lines_rsc_0_2_we),
      .re(rawdns_lines_rsc_0_2_re),
      .clk(clk),
      .q(rawdns_lines_rsc_0_2_q)
    );
  ccs_ram_sync_1R1W #(.data_width(32'sd12),
  .addr_width(32'sd12),
  .depth(32'sd4096)) rawdns_lines_rsc_0_3_comp (
      .radr(rawdns_lines_rsc_0_3_radr),
      .wadr(rawdns_lines_rsc_0_3_wadr),
      .d(rawdns_lines_rsc_0_3_d),
      .we(rawdns_lines_rsc_0_3_we),
      .re(rawdns_lines_rsc_0_3_re),
      .clk(clk),
      .q(rawdns_lines_rsc_0_3_q)
    );
  ccs_ram_sync_1R1W #(.data_width(32'sd12),
  .addr_width(32'sd12),
  .depth(32'sd4096)) rawdns_lines_rsc_0_4_comp (
      .radr(rawdns_lines_rsc_0_4_radr),
      .wadr(rawdns_lines_rsc_0_4_wadr),
      .d(rawdns_lines_rsc_0_4_d),
      .we(rawdns_lines_rsc_0_4_we),
      .re(rawdns_lines_rsc_0_4_re),
      .clk(clk),
      .q(rawdns_lines_rsc_0_4_q)
    );
  ccs_ram_sync_1R1W #(.data_width(32'sd12),
  .addr_width(32'sd12),
  .depth(32'sd4096)) rawdns_lines_rsc_0_5_comp (
      .radr(rawdns_lines_rsc_0_5_radr),
      .wadr(rawdns_lines_rsc_0_5_wadr),
      .d(rawdns_lines_rsc_0_5_d),
      .we(rawdns_lines_rsc_0_5_we),
      .re(rawdns_lines_rsc_0_5_re),
      .clk(clk),
      .q(rawdns_lines_rsc_0_5_q)
    );
  ccs_ram_sync_1R1W #(.data_width(32'sd12),
  .addr_width(32'sd12),
  .depth(32'sd4096)) rawdns_lines_rsc_0_6_comp (
      .radr(rawdns_lines_rsc_0_6_radr),
      .wadr(rawdns_lines_rsc_0_6_wadr),
      .d(rawdns_lines_rsc_0_6_d),
      .we(rawdns_lines_rsc_0_6_we),
      .re(rawdns_lines_rsc_0_6_re),
      .clk(clk),
      .q(rawdns_lines_rsc_0_6_q)
    );
  ccs_ram_sync_1R1W #(.data_width(32'sd12),
  .addr_width(32'sd12),
  .depth(32'sd4096)) rawdns_lines_rsc_0_7_comp (
      .radr(rawdns_lines_rsc_0_7_radr),
      .wadr(rawdns_lines_rsc_0_7_wadr),
      .d(rawdns_lines_rsc_0_7_d),
      .we(rawdns_lines_rsc_0_7_we),
      .re(rawdns_lines_rsc_0_7_re),
      .clk(clk),
      .q(rawdns_lines_rsc_0_7_q)
    );
  ccs_ram_sync_1R1W #(.data_width(32'sd12),
  .addr_width(32'sd12),
  .depth(32'sd4096)) rawdns_lines_rsc_0_8_comp (
      .radr(rawdns_lines_rsc_0_8_radr),
      .wadr(rawdns_lines_rsc_0_8_wadr),
      .d(rawdns_lines_rsc_0_8_d),
      .we(rawdns_lines_rsc_0_8_we),
      .re(rawdns_lines_rsc_0_8_re),
      .clk(clk),
      .q(rawdns_lines_rsc_0_8_q)
    );
  ccs_ram_sync_1R1W #(.data_width(32'sd12),
  .addr_width(32'sd12),
  .depth(32'sd4096)) rawdns_lines_rsc_0_9_comp (
      .radr(rawdns_lines_rsc_0_9_radr),
      .wadr(rawdns_lines_rsc_0_9_wadr),
      .d(rawdns_lines_rsc_0_9_d),
      .we(rawdns_lines_rsc_0_9_we),
      .re(rawdns_lines_rsc_0_9_re),
      .clk(clk),
      .q(rawdns_lines_rsc_0_9_q)
    );
  isp_rawdns_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_544_12_12_4096_4096_12_5_gen
      rawdns_lines_rsc_0_0_i (
      .we(rawdns_lines_rsc_0_0_we),
      .d(rawdns_lines_rsc_0_0_d),
      .wadr(rawdns_lines_rsc_0_0_wadr),
      .q(rawdns_lines_rsc_0_0_q),
      .re(rawdns_lines_rsc_0_0_re),
      .radr(rawdns_lines_rsc_0_0_radr),
      .radr_d(rawdns_lines_rsc_0_0_i_radr_d_iff),
      .wadr_d(rawdns_lines_rsc_0_0_i_radr_d_iff),
      .d_d(rawdns_lines_rsc_0_0_i_d_d_iff),
      .we_d(rawdns_lines_rsc_0_0_i_we_d_iff),
      .re_d(rawdns_lines_rsc_0_0_i_re_d_iff),
      .q_d(rawdns_lines_rsc_0_0_i_q_d),
      .port_0_r_ram_ir_internal_RMASK_B_d(rawdns_lines_rsc_0_0_i_re_d_iff),
      .port_1_w_ram_ir_internal_WMASK_B_d(rawdns_lines_rsc_0_0_i_we_d_iff)
    );
  isp_rawdns_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_545_12_12_4096_4096_12_5_gen
      rawdns_lines_rsc_0_1_i (
      .we(rawdns_lines_rsc_0_1_we),
      .d(rawdns_lines_rsc_0_1_d),
      .wadr(rawdns_lines_rsc_0_1_wadr),
      .q(rawdns_lines_rsc_0_1_q),
      .re(rawdns_lines_rsc_0_1_re),
      .radr(rawdns_lines_rsc_0_1_radr),
      .radr_d(rawdns_lines_rsc_0_0_i_radr_d_iff),
      .wadr_d(rawdns_lines_rsc_0_0_i_radr_d_iff),
      .d_d(rawdns_lines_rsc_0_0_i_d_d_iff),
      .we_d(rawdns_lines_rsc_0_1_i_we_d_iff),
      .re_d(rawdns_lines_rsc_0_1_i_re_d_iff),
      .q_d(rawdns_lines_rsc_0_1_i_q_d),
      .port_0_r_ram_ir_internal_RMASK_B_d(rawdns_lines_rsc_0_1_i_re_d_iff),
      .port_1_w_ram_ir_internal_WMASK_B_d(rawdns_lines_rsc_0_1_i_we_d_iff)
    );
  isp_rawdns_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_546_12_12_4096_4096_12_5_gen
      rawdns_lines_rsc_0_2_i (
      .we(rawdns_lines_rsc_0_2_we),
      .d(rawdns_lines_rsc_0_2_d),
      .wadr(rawdns_lines_rsc_0_2_wadr),
      .q(rawdns_lines_rsc_0_2_q),
      .re(rawdns_lines_rsc_0_2_re),
      .radr(rawdns_lines_rsc_0_2_radr),
      .radr_d(rawdns_lines_rsc_0_0_i_radr_d_iff),
      .wadr_d(rawdns_lines_rsc_0_0_i_radr_d_iff),
      .d_d(rawdns_lines_rsc_0_0_i_d_d_iff),
      .we_d(rawdns_lines_rsc_0_2_i_we_d_iff),
      .re_d(rawdns_lines_rsc_0_2_i_re_d_iff),
      .q_d(rawdns_lines_rsc_0_2_i_q_d),
      .port_0_r_ram_ir_internal_RMASK_B_d(rawdns_lines_rsc_0_2_i_re_d_iff),
      .port_1_w_ram_ir_internal_WMASK_B_d(rawdns_lines_rsc_0_2_i_we_d_iff)
    );
  isp_rawdns_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_547_12_12_4096_4096_12_5_gen
      rawdns_lines_rsc_0_3_i (
      .we(rawdns_lines_rsc_0_3_we),
      .d(rawdns_lines_rsc_0_3_d),
      .wadr(rawdns_lines_rsc_0_3_wadr),
      .q(rawdns_lines_rsc_0_3_q),
      .re(rawdns_lines_rsc_0_3_re),
      .radr(rawdns_lines_rsc_0_3_radr),
      .radr_d(rawdns_lines_rsc_0_0_i_radr_d_iff),
      .wadr_d(rawdns_lines_rsc_0_0_i_radr_d_iff),
      .d_d(rawdns_lines_rsc_0_0_i_d_d_iff),
      .we_d(rawdns_lines_rsc_0_3_i_we_d_iff),
      .re_d(rawdns_lines_rsc_0_3_i_re_d_iff),
      .q_d(rawdns_lines_rsc_0_3_i_q_d),
      .port_0_r_ram_ir_internal_RMASK_B_d(rawdns_lines_rsc_0_3_i_re_d_iff),
      .port_1_w_ram_ir_internal_WMASK_B_d(rawdns_lines_rsc_0_3_i_we_d_iff)
    );
  isp_rawdns_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_548_12_12_4096_4096_12_5_gen
      rawdns_lines_rsc_0_4_i (
      .we(rawdns_lines_rsc_0_4_we),
      .d(rawdns_lines_rsc_0_4_d),
      .wadr(rawdns_lines_rsc_0_4_wadr),
      .q(rawdns_lines_rsc_0_4_q),
      .re(rawdns_lines_rsc_0_4_re),
      .radr(rawdns_lines_rsc_0_4_radr),
      .radr_d(rawdns_lines_rsc_0_0_i_radr_d_iff),
      .wadr_d(rawdns_lines_rsc_0_0_i_radr_d_iff),
      .d_d(rawdns_lines_rsc_0_0_i_d_d_iff),
      .we_d(rawdns_lines_rsc_0_4_i_we_d_iff),
      .re_d(rawdns_lines_rsc_0_4_i_re_d_iff),
      .q_d(rawdns_lines_rsc_0_4_i_q_d),
      .port_0_r_ram_ir_internal_RMASK_B_d(rawdns_lines_rsc_0_4_i_re_d_iff),
      .port_1_w_ram_ir_internal_WMASK_B_d(rawdns_lines_rsc_0_4_i_we_d_iff)
    );
  isp_rawdns_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_549_12_12_4096_4096_12_5_gen
      rawdns_lines_rsc_0_5_i (
      .we(rawdns_lines_rsc_0_5_we),
      .d(rawdns_lines_rsc_0_5_d),
      .wadr(rawdns_lines_rsc_0_5_wadr),
      .q(rawdns_lines_rsc_0_5_q),
      .re(rawdns_lines_rsc_0_5_re),
      .radr(rawdns_lines_rsc_0_5_radr),
      .radr_d(rawdns_lines_rsc_0_0_i_radr_d_iff),
      .wadr_d(rawdns_lines_rsc_0_0_i_radr_d_iff),
      .d_d(rawdns_lines_rsc_0_0_i_d_d_iff),
      .we_d(rawdns_lines_rsc_0_5_i_we_d_iff),
      .re_d(rawdns_lines_rsc_0_5_i_re_d_iff),
      .q_d(rawdns_lines_rsc_0_5_i_q_d),
      .port_0_r_ram_ir_internal_RMASK_B_d(rawdns_lines_rsc_0_5_i_re_d_iff),
      .port_1_w_ram_ir_internal_WMASK_B_d(rawdns_lines_rsc_0_5_i_we_d_iff)
    );
  isp_rawdns_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_550_12_12_4096_4096_12_5_gen
      rawdns_lines_rsc_0_6_i (
      .we(rawdns_lines_rsc_0_6_we),
      .d(rawdns_lines_rsc_0_6_d),
      .wadr(rawdns_lines_rsc_0_6_wadr),
      .q(rawdns_lines_rsc_0_6_q),
      .re(rawdns_lines_rsc_0_6_re),
      .radr(rawdns_lines_rsc_0_6_radr),
      .radr_d(rawdns_lines_rsc_0_0_i_radr_d_iff),
      .wadr_d(rawdns_lines_rsc_0_0_i_radr_d_iff),
      .d_d(rawdns_lines_rsc_0_0_i_d_d_iff),
      .we_d(rawdns_lines_rsc_0_6_i_we_d_iff),
      .re_d(rawdns_lines_rsc_0_6_i_re_d_iff),
      .q_d(rawdns_lines_rsc_0_6_i_q_d),
      .port_0_r_ram_ir_internal_RMASK_B_d(rawdns_lines_rsc_0_6_i_re_d_iff),
      .port_1_w_ram_ir_internal_WMASK_B_d(rawdns_lines_rsc_0_6_i_we_d_iff)
    );
  isp_rawdns_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_551_12_12_4096_4096_12_5_gen
      rawdns_lines_rsc_0_7_i (
      .we(rawdns_lines_rsc_0_7_we),
      .d(rawdns_lines_rsc_0_7_d),
      .wadr(rawdns_lines_rsc_0_7_wadr),
      .q(rawdns_lines_rsc_0_7_q),
      .re(rawdns_lines_rsc_0_7_re),
      .radr(rawdns_lines_rsc_0_7_radr),
      .radr_d(rawdns_lines_rsc_0_0_i_radr_d_iff),
      .wadr_d(rawdns_lines_rsc_0_0_i_radr_d_iff),
      .d_d(rawdns_lines_rsc_0_0_i_d_d_iff),
      .we_d(rawdns_lines_rsc_0_7_i_we_d_iff),
      .re_d(rawdns_lines_rsc_0_7_i_re_d_iff),
      .q_d(rawdns_lines_rsc_0_7_i_q_d),
      .port_0_r_ram_ir_internal_RMASK_B_d(rawdns_lines_rsc_0_7_i_re_d_iff),
      .port_1_w_ram_ir_internal_WMASK_B_d(rawdns_lines_rsc_0_7_i_we_d_iff)
    );
  isp_rawdns_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_552_12_12_4096_4096_12_5_gen
      rawdns_lines_rsc_0_8_i (
      .we(rawdns_lines_rsc_0_8_we),
      .d(rawdns_lines_rsc_0_8_d),
      .wadr(rawdns_lines_rsc_0_8_wadr),
      .q(rawdns_lines_rsc_0_8_q),
      .re(rawdns_lines_rsc_0_8_re),
      .radr(rawdns_lines_rsc_0_8_radr),
      .radr_d(rawdns_lines_rsc_0_0_i_radr_d_iff),
      .wadr_d(rawdns_lines_rsc_0_0_i_radr_d_iff),
      .d_d(rawdns_lines_rsc_0_0_i_d_d_iff),
      .we_d(rawdns_lines_rsc_0_8_i_we_d_iff),
      .re_d(rawdns_lines_rsc_0_8_i_re_d_iff),
      .q_d(rawdns_lines_rsc_0_8_i_q_d),
      .port_0_r_ram_ir_internal_RMASK_B_d(rawdns_lines_rsc_0_8_i_re_d_iff),
      .port_1_w_ram_ir_internal_WMASK_B_d(rawdns_lines_rsc_0_8_i_we_d_iff)
    );
  isp_rawdns_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_553_12_12_4096_4096_12_5_gen
      rawdns_lines_rsc_0_9_i (
      .we(rawdns_lines_rsc_0_9_we),
      .d(rawdns_lines_rsc_0_9_d),
      .wadr(rawdns_lines_rsc_0_9_wadr),
      .q(rawdns_lines_rsc_0_9_q),
      .re(rawdns_lines_rsc_0_9_re),
      .radr(rawdns_lines_rsc_0_9_radr),
      .radr_d(rawdns_lines_rsc_0_0_i_radr_d_iff),
      .wadr_d(rawdns_lines_rsc_0_0_i_radr_d_iff),
      .d_d(rawdns_lines_rsc_0_0_i_d_d_iff),
      .we_d(rawdns_lines_rsc_0_9_i_we_d_iff),
      .re_d(rawdns_lines_rsc_0_9_i_re_d_iff),
      .q_d(rawdns_lines_rsc_0_9_i_q_d),
      .port_0_r_ram_ir_internal_RMASK_B_d(rawdns_lines_rsc_0_9_i_re_d_iff),
      .port_1_w_ram_ir_internal_WMASK_B_d(rawdns_lines_rsc_0_9_i_we_d_iff)
    );
  isp_rawdns_core isp_rawdns_core_inst (
      .clk(clk),
      .arst_n(arst_n),
      .top_reg_frameWidth(top_reg_frameWidth),
      .top_reg_frameHeight(top_reg_frameHeight),
      .rawdns_reg_sigma(rawdns_reg_sigma),
      .rawdns_reg_eb(rawdns_reg_eb),
      .rawdns_reg_Filterpara(rawdns_reg_Filterpara),
      .rawdns_reg_invksigma2(rawdns_reg_invksigma2),
      .src_rsc_dat(src_rsc_dat),
      .src_rsc_vld(src_rsc_vld),
      .src_rsc_rdy(src_rsc_rdy),
      .dst_rsc_dat(dst_rsc_dat),
      .dst_rsc_vld(dst_rsc_vld),
      .dst_rsc_rdy(dst_rsc_rdy),
      .rawdns_lines_rsc_0_0_i_q_d(rawdns_lines_rsc_0_0_i_q_d),
      .rawdns_lines_rsc_0_1_i_q_d(rawdns_lines_rsc_0_1_i_q_d),
      .rawdns_lines_rsc_0_2_i_q_d(rawdns_lines_rsc_0_2_i_q_d),
      .rawdns_lines_rsc_0_3_i_q_d(rawdns_lines_rsc_0_3_i_q_d),
      .rawdns_lines_rsc_0_4_i_q_d(rawdns_lines_rsc_0_4_i_q_d),
      .rawdns_lines_rsc_0_5_i_q_d(rawdns_lines_rsc_0_5_i_q_d),
      .rawdns_lines_rsc_0_6_i_q_d(rawdns_lines_rsc_0_6_i_q_d),
      .rawdns_lines_rsc_0_7_i_q_d(rawdns_lines_rsc_0_7_i_q_d),
      .rawdns_lines_rsc_0_8_i_q_d(rawdns_lines_rsc_0_8_i_q_d),
      .rawdns_lines_rsc_0_9_i_q_d(rawdns_lines_rsc_0_9_i_q_d),
      .rawdns_lines_rsc_0_0_i_radr_d_pff(rawdns_lines_rsc_0_0_i_radr_d_iff),
      .rawdns_lines_rsc_0_0_i_d_d_pff(rawdns_lines_rsc_0_0_i_d_d_iff),
      .rawdns_lines_rsc_0_0_i_we_d_pff(rawdns_lines_rsc_0_0_i_we_d_iff),
      .rawdns_lines_rsc_0_0_i_re_d_pff(rawdns_lines_rsc_0_0_i_re_d_iff),
      .rawdns_lines_rsc_0_1_i_we_d_pff(rawdns_lines_rsc_0_1_i_we_d_iff),
      .rawdns_lines_rsc_0_1_i_re_d_pff(rawdns_lines_rsc_0_1_i_re_d_iff),
      .rawdns_lines_rsc_0_2_i_we_d_pff(rawdns_lines_rsc_0_2_i_we_d_iff),
      .rawdns_lines_rsc_0_2_i_re_d_pff(rawdns_lines_rsc_0_2_i_re_d_iff),
      .rawdns_lines_rsc_0_3_i_we_d_pff(rawdns_lines_rsc_0_3_i_we_d_iff),
      .rawdns_lines_rsc_0_3_i_re_d_pff(rawdns_lines_rsc_0_3_i_re_d_iff),
      .rawdns_lines_rsc_0_4_i_we_d_pff(rawdns_lines_rsc_0_4_i_we_d_iff),
      .rawdns_lines_rsc_0_4_i_re_d_pff(rawdns_lines_rsc_0_4_i_re_d_iff),
      .rawdns_lines_rsc_0_5_i_we_d_pff(rawdns_lines_rsc_0_5_i_we_d_iff),
      .rawdns_lines_rsc_0_5_i_re_d_pff(rawdns_lines_rsc_0_5_i_re_d_iff),
      .rawdns_lines_rsc_0_6_i_we_d_pff(rawdns_lines_rsc_0_6_i_we_d_iff),
      .rawdns_lines_rsc_0_6_i_re_d_pff(rawdns_lines_rsc_0_6_i_re_d_iff),
      .rawdns_lines_rsc_0_7_i_we_d_pff(rawdns_lines_rsc_0_7_i_we_d_iff),
      .rawdns_lines_rsc_0_7_i_re_d_pff(rawdns_lines_rsc_0_7_i_re_d_iff),
      .rawdns_lines_rsc_0_8_i_we_d_pff(rawdns_lines_rsc_0_8_i_we_d_iff),
      .rawdns_lines_rsc_0_8_i_re_d_pff(rawdns_lines_rsc_0_8_i_re_d_iff),
      .rawdns_lines_rsc_0_9_i_we_d_pff(rawdns_lines_rsc_0_9_i_we_d_iff),
      .rawdns_lines_rsc_0_9_i_re_d_pff(rawdns_lines_rsc_0_9_i_re_d_iff)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    awb
// ------------------------------------------------------------------


module awb (
  clk, arst_n, top_reg_frameWidth, top_reg_frameHeight, top_reg_inputFormat, top_reg_imgPattern,
      top_reg_pipeMode, top_reg_blc, top_reg_shadowEb, top_reg_binningFrameWidth,
      top_reg_binningFrameHeight, top_reg_scalerFrameWidth, top_reg_scalerFrameHeight,
      awb_reg_m_nEb, awb_reg_r_gain_rsc_dat, awb_reg_r_gain_rsc_triosy_lz, awb_reg_g_gain_rsc_dat,
      awb_reg_g_gain_rsc_triosy_lz, awb_reg_b_gain_rsc_dat, awb_reg_b_gain_rsc_triosy_lz,
      awb_reg_coeff, src_rsc_dat, src_rsc_vld, src_rsc_rdy, dst_rsc_dat, dst_rsc_vld,
      dst_rsc_rdy
);
  input clk;
  input arst_n;
  input [12:0] top_reg_frameWidth;
  input [12:0] top_reg_frameHeight;
  input top_reg_inputFormat;
  input [1:0] top_reg_imgPattern;
  input [1:0] top_reg_pipeMode;
  input [8:0] top_reg_blc;
  input top_reg_shadowEb;
  input [12:0] top_reg_binningFrameWidth;
  input [12:0] top_reg_binningFrameHeight;
  input [12:0] top_reg_scalerFrameWidth;
  input [12:0] top_reg_scalerFrameHeight;
  input awb_reg_m_nEb;
  output [14:0] awb_reg_r_gain_rsc_dat;
  output awb_reg_r_gain_rsc_triosy_lz;
  output [14:0] awb_reg_g_gain_rsc_dat;
  output awb_reg_g_gain_rsc_triosy_lz;
  output [14:0] awb_reg_b_gain_rsc_dat;
  output awb_reg_b_gain_rsc_triosy_lz;
  input [4:0] awb_reg_coeff;
  input [11:0] src_rsc_dat;
  input src_rsc_vld;
  output src_rsc_rdy;
  output [11:0] dst_rsc_dat;
  output dst_rsc_vld;
  input dst_rsc_rdy;


  // Interconnect Declarations
  wire [14:0] awb_reg_r_gain_rsci_idat;
  wire [14:0] awb_reg_b_gain_rsci_idat;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_v1 #(.rscid(32'sd122),
  .width(32'sd15)) awb_reg_r_gain_rsci (
      .idat(awb_reg_r_gain_rsci_idat),
      .dat(awb_reg_r_gain_rsc_dat)
    );
  ccs_out_v1 #(.rscid(32'sd123),
  .width(32'sd15)) awb_reg_g_gain_rsci (
      .idat(15'b100000000000000),
      .dat(awb_reg_g_gain_rsc_dat)
    );
  ccs_out_v1 #(.rscid(32'sd124),
  .width(32'sd15)) awb_reg_b_gain_rsci (
      .idat(awb_reg_b_gain_rsci_idat),
      .dat(awb_reg_b_gain_rsc_dat)
    );
  awb_core awb_core_inst (
      .clk(clk),
      .arst_n(arst_n),
      .top_reg_frameWidth(top_reg_frameWidth),
      .top_reg_frameHeight(top_reg_frameHeight),
      .top_reg_imgPattern(top_reg_imgPattern),
      .awb_reg_m_nEb(awb_reg_m_nEb),
      .awb_reg_r_gain_rsc_triosy_lz(awb_reg_r_gain_rsc_triosy_lz),
      .awb_reg_g_gain_rsc_triosy_lz(awb_reg_g_gain_rsc_triosy_lz),
      .awb_reg_b_gain_rsc_triosy_lz(awb_reg_b_gain_rsc_triosy_lz),
      .awb_reg_coeff(awb_reg_coeff),
      .src_rsc_dat(src_rsc_dat),
      .src_rsc_vld(src_rsc_vld),
      .src_rsc_rdy(src_rsc_rdy),
      .dst_rsc_dat(dst_rsc_dat),
      .dst_rsc_vld(dst_rsc_vld),
      .dst_rsc_rdy(dst_rsc_rdy),
      .awb_reg_r_gain_rsci_idat(awb_reg_r_gain_rsci_idat),
      .awb_reg_b_gain_rsci_idat(awb_reg_b_gain_rsci_idat)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    wbc
// ------------------------------------------------------------------


module wbc (
  clk, arst_n, top_reg_frameWidth, top_reg_frameHeight, top_reg_inputFormat, top_reg_imgPattern,
      top_reg_pipeMode, top_reg_blc, top_reg_shadowEb, top_reg_binningFrameWidth,
      top_reg_binningFrameHeight, top_reg_scalerFrameWidth, top_reg_scalerFrameHeight,
      wbc_reg_m_nEb, wbc_reg_m_nR, wbc_reg_m_nGr, wbc_reg_m_nGb, wbc_reg_m_nB, src_rsc_dat,
      src_rsc_vld, src_rsc_rdy, dst_rsc_dat, dst_rsc_vld, dst_rsc_rdy
);
  input clk;
  input arst_n;
  input [12:0] top_reg_frameWidth;
  input [12:0] top_reg_frameHeight;
  input top_reg_inputFormat;
  input [1:0] top_reg_imgPattern;
  input [1:0] top_reg_pipeMode;
  input [8:0] top_reg_blc;
  input top_reg_shadowEb;
  input [12:0] top_reg_binningFrameWidth;
  input [12:0] top_reg_binningFrameHeight;
  input [12:0] top_reg_scalerFrameWidth;
  input [12:0] top_reg_scalerFrameHeight;
  input wbc_reg_m_nEb;
  input [14:0] wbc_reg_m_nR;
  input [14:0] wbc_reg_m_nGr;
  input [14:0] wbc_reg_m_nGb;
  input [14:0] wbc_reg_m_nB;
  input [11:0] src_rsc_dat;
  input src_rsc_vld;
  output src_rsc_rdy;
  output [11:0] dst_rsc_dat;
  output dst_rsc_vld;
  input dst_rsc_rdy;



  // Interconnect Declarations for Component Instantiations 
  wbc_core wbc_core_inst (
      .clk(clk),
      .arst_n(arst_n),
      .top_reg_frameWidth(top_reg_frameWidth),
      .top_reg_frameHeight(top_reg_frameHeight),
      .top_reg_imgPattern(top_reg_imgPattern),
      .top_reg_blc(top_reg_blc),
      .wbc_reg_m_nEb(wbc_reg_m_nEb),
      .wbc_reg_m_nR(wbc_reg_m_nR),
      .wbc_reg_m_nGr(wbc_reg_m_nGr),
      .wbc_reg_m_nGb(wbc_reg_m_nGb),
      .wbc_reg_m_nB(wbc_reg_m_nB),
      .src_rsc_dat(src_rsc_dat),
      .src_rsc_vld(src_rsc_vld),
      .src_rsc_rdy(src_rsc_rdy),
      .dst_rsc_dat(dst_rsc_dat),
      .dst_rsc_vld(dst_rsc_vld),
      .dst_rsc_rdy(dst_rsc_rdy)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    greenbalance2
// ------------------------------------------------------------------


module greenbalance2 (
  clk, arst_n, top_reg_frameWidth, top_reg_frameHeight, top_reg_inputFormat, top_reg_imgPattern,
      top_reg_pipeMode, top_reg_blc, top_reg_shadowEb, top_reg_binningFrameWidth,
      top_reg_binningFrameHeight, top_reg_scalerFrameWidth, top_reg_scalerFrameHeight,
      gb_reg_eb, gb_reg_win_size, gb_reg_Lbound, gb_reg_Hbound, gb_reg_threhold,
      src_rsc_dat, src_rsc_vld, src_rsc_rdy, dst_rsc_dat, dst_rsc_vld, dst_rsc_rdy
);
  input clk;
  input arst_n;
  input [12:0] top_reg_frameWidth;
  input [12:0] top_reg_frameHeight;
  input top_reg_inputFormat;
  input [1:0] top_reg_imgPattern;
  input [1:0] top_reg_pipeMode;
  input [8:0] top_reg_blc;
  input top_reg_shadowEb;
  input [12:0] top_reg_binningFrameWidth;
  input [12:0] top_reg_binningFrameHeight;
  input [12:0] top_reg_scalerFrameWidth;
  input [12:0] top_reg_scalerFrameHeight;
  input gb_reg_eb;
  input [3:0] gb_reg_win_size;
  input [3:0] gb_reg_Lbound;
  input [5:0] gb_reg_Hbound;
  input [9:0] gb_reg_threhold;
  input [11:0] src_rsc_dat;
  input src_rsc_vld;
  output src_rsc_rdy;
  output [11:0] dst_rsc_dat;
  output dst_rsc_vld;
  input dst_rsc_rdy;


  // Interconnect Declarations
  wire [11:0] gb_lines_rsc_0_0_i_q_d;
  wire [11:0] gb_lines_rsc_0_1_i_q_d;
  wire [11:0] gb_lines_rsc_0_2_i_q_d;
  wire [11:0] gb_lines_rsc_0_3_i_q_d;
  wire [11:0] gb_lines_rsc_0_4_i_q_d;
  wire [11:0] gb_lines_rsc_0_5_i_q_d;
  wire gb_lines_rsc_0_0_we;
  wire [11:0] gb_lines_rsc_0_0_d;
  wire [11:0] gb_lines_rsc_0_0_wadr;
  wire [11:0] gb_lines_rsc_0_0_q;
  wire gb_lines_rsc_0_0_re;
  wire [11:0] gb_lines_rsc_0_0_radr;
  wire gb_lines_rsc_0_1_we;
  wire [11:0] gb_lines_rsc_0_1_d;
  wire [11:0] gb_lines_rsc_0_1_wadr;
  wire [11:0] gb_lines_rsc_0_1_q;
  wire gb_lines_rsc_0_1_re;
  wire [11:0] gb_lines_rsc_0_1_radr;
  wire gb_lines_rsc_0_2_we;
  wire [11:0] gb_lines_rsc_0_2_d;
  wire [11:0] gb_lines_rsc_0_2_wadr;
  wire [11:0] gb_lines_rsc_0_2_q;
  wire gb_lines_rsc_0_2_re;
  wire [11:0] gb_lines_rsc_0_2_radr;
  wire gb_lines_rsc_0_3_we;
  wire [11:0] gb_lines_rsc_0_3_d;
  wire [11:0] gb_lines_rsc_0_3_wadr;
  wire [11:0] gb_lines_rsc_0_3_q;
  wire gb_lines_rsc_0_3_re;
  wire [11:0] gb_lines_rsc_0_3_radr;
  wire gb_lines_rsc_0_4_we;
  wire [11:0] gb_lines_rsc_0_4_d;
  wire [11:0] gb_lines_rsc_0_4_wadr;
  wire [11:0] gb_lines_rsc_0_4_q;
  wire gb_lines_rsc_0_4_re;
  wire [11:0] gb_lines_rsc_0_4_radr;
  wire gb_lines_rsc_0_5_we;
  wire [11:0] gb_lines_rsc_0_5_d;
  wire [11:0] gb_lines_rsc_0_5_wadr;
  wire [11:0] gb_lines_rsc_0_5_q;
  wire gb_lines_rsc_0_5_re;
  wire [11:0] gb_lines_rsc_0_5_radr;
  wire [11:0] gb_lines_rsc_0_0_i_radr_d_iff;
  wire [11:0] gb_lines_rsc_0_0_i_d_d_iff;
  wire gb_lines_rsc_0_0_i_we_d_iff;
  wire gb_lines_rsc_0_0_i_re_d_iff;
  wire gb_lines_rsc_0_1_i_we_d_iff;
  wire gb_lines_rsc_0_1_i_re_d_iff;
  wire gb_lines_rsc_0_2_i_we_d_iff;
  wire gb_lines_rsc_0_2_i_re_d_iff;
  wire gb_lines_rsc_0_3_i_we_d_iff;
  wire gb_lines_rsc_0_3_i_re_d_iff;
  wire gb_lines_rsc_0_4_i_we_d_iff;
  wire gb_lines_rsc_0_4_i_re_d_iff;
  wire gb_lines_rsc_0_5_i_we_d_iff;
  wire gb_lines_rsc_0_5_i_re_d_iff;


  // Interconnect Declarations for Component Instantiations 
  ccs_ram_sync_1R1W #(.data_width(32'sd12),
  .addr_width(32'sd12),
  .depth(32'sd4096)) gb_lines_rsc_0_0_comp (
      .radr(gb_lines_rsc_0_0_radr),
      .wadr(gb_lines_rsc_0_0_wadr),
      .d(gb_lines_rsc_0_0_d),
      .we(gb_lines_rsc_0_0_we),
      .re(gb_lines_rsc_0_0_re),
      .clk(clk),
      .q(gb_lines_rsc_0_0_q)
    );
  ccs_ram_sync_1R1W #(.data_width(32'sd12),
  .addr_width(32'sd12),
  .depth(32'sd4096)) gb_lines_rsc_0_1_comp (
      .radr(gb_lines_rsc_0_1_radr),
      .wadr(gb_lines_rsc_0_1_wadr),
      .d(gb_lines_rsc_0_1_d),
      .we(gb_lines_rsc_0_1_we),
      .re(gb_lines_rsc_0_1_re),
      .clk(clk),
      .q(gb_lines_rsc_0_1_q)
    );
  ccs_ram_sync_1R1W #(.data_width(32'sd12),
  .addr_width(32'sd12),
  .depth(32'sd4096)) gb_lines_rsc_0_2_comp (
      .radr(gb_lines_rsc_0_2_radr),
      .wadr(gb_lines_rsc_0_2_wadr),
      .d(gb_lines_rsc_0_2_d),
      .we(gb_lines_rsc_0_2_we),
      .re(gb_lines_rsc_0_2_re),
      .clk(clk),
      .q(gb_lines_rsc_0_2_q)
    );
  ccs_ram_sync_1R1W #(.data_width(32'sd12),
  .addr_width(32'sd12),
  .depth(32'sd4096)) gb_lines_rsc_0_3_comp (
      .radr(gb_lines_rsc_0_3_radr),
      .wadr(gb_lines_rsc_0_3_wadr),
      .d(gb_lines_rsc_0_3_d),
      .we(gb_lines_rsc_0_3_we),
      .re(gb_lines_rsc_0_3_re),
      .clk(clk),
      .q(gb_lines_rsc_0_3_q)
    );
  ccs_ram_sync_1R1W #(.data_width(32'sd12),
  .addr_width(32'sd12),
  .depth(32'sd4096)) gb_lines_rsc_0_4_comp (
      .radr(gb_lines_rsc_0_4_radr),
      .wadr(gb_lines_rsc_0_4_wadr),
      .d(gb_lines_rsc_0_4_d),
      .we(gb_lines_rsc_0_4_we),
      .re(gb_lines_rsc_0_4_re),
      .clk(clk),
      .q(gb_lines_rsc_0_4_q)
    );
  ccs_ram_sync_1R1W #(.data_width(32'sd12),
  .addr_width(32'sd12),
  .depth(32'sd4096)) gb_lines_rsc_0_5_comp (
      .radr(gb_lines_rsc_0_5_radr),
      .wadr(gb_lines_rsc_0_5_wadr),
      .d(gb_lines_rsc_0_5_d),
      .we(gb_lines_rsc_0_5_we),
      .re(gb_lines_rsc_0_5_re),
      .clk(clk),
      .q(gb_lines_rsc_0_5_q)
    );
  greenbalance2_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_554_12_12_4096_4096_12_5_gen
      gb_lines_rsc_0_0_i (
      .we(gb_lines_rsc_0_0_we),
      .d(gb_lines_rsc_0_0_d),
      .wadr(gb_lines_rsc_0_0_wadr),
      .q(gb_lines_rsc_0_0_q),
      .re(gb_lines_rsc_0_0_re),
      .radr(gb_lines_rsc_0_0_radr),
      .radr_d(gb_lines_rsc_0_0_i_radr_d_iff),
      .wadr_d(gb_lines_rsc_0_0_i_radr_d_iff),
      .d_d(gb_lines_rsc_0_0_i_d_d_iff),
      .we_d(gb_lines_rsc_0_0_i_we_d_iff),
      .re_d(gb_lines_rsc_0_0_i_re_d_iff),
      .q_d(gb_lines_rsc_0_0_i_q_d),
      .port_0_r_ram_ir_internal_RMASK_B_d(gb_lines_rsc_0_0_i_re_d_iff),
      .port_1_w_ram_ir_internal_WMASK_B_d(gb_lines_rsc_0_0_i_we_d_iff)
    );
  greenbalance2_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_555_12_12_4096_4096_12_5_gen
      gb_lines_rsc_0_1_i (
      .we(gb_lines_rsc_0_1_we),
      .d(gb_lines_rsc_0_1_d),
      .wadr(gb_lines_rsc_0_1_wadr),
      .q(gb_lines_rsc_0_1_q),
      .re(gb_lines_rsc_0_1_re),
      .radr(gb_lines_rsc_0_1_radr),
      .radr_d(gb_lines_rsc_0_0_i_radr_d_iff),
      .wadr_d(gb_lines_rsc_0_0_i_radr_d_iff),
      .d_d(gb_lines_rsc_0_0_i_d_d_iff),
      .we_d(gb_lines_rsc_0_1_i_we_d_iff),
      .re_d(gb_lines_rsc_0_1_i_re_d_iff),
      .q_d(gb_lines_rsc_0_1_i_q_d),
      .port_0_r_ram_ir_internal_RMASK_B_d(gb_lines_rsc_0_1_i_re_d_iff),
      .port_1_w_ram_ir_internal_WMASK_B_d(gb_lines_rsc_0_1_i_we_d_iff)
    );
  greenbalance2_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_556_12_12_4096_4096_12_5_gen
      gb_lines_rsc_0_2_i (
      .we(gb_lines_rsc_0_2_we),
      .d(gb_lines_rsc_0_2_d),
      .wadr(gb_lines_rsc_0_2_wadr),
      .q(gb_lines_rsc_0_2_q),
      .re(gb_lines_rsc_0_2_re),
      .radr(gb_lines_rsc_0_2_radr),
      .radr_d(gb_lines_rsc_0_0_i_radr_d_iff),
      .wadr_d(gb_lines_rsc_0_0_i_radr_d_iff),
      .d_d(gb_lines_rsc_0_0_i_d_d_iff),
      .we_d(gb_lines_rsc_0_2_i_we_d_iff),
      .re_d(gb_lines_rsc_0_2_i_re_d_iff),
      .q_d(gb_lines_rsc_0_2_i_q_d),
      .port_0_r_ram_ir_internal_RMASK_B_d(gb_lines_rsc_0_2_i_re_d_iff),
      .port_1_w_ram_ir_internal_WMASK_B_d(gb_lines_rsc_0_2_i_we_d_iff)
    );
  greenbalance2_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_557_12_12_4096_4096_12_5_gen
      gb_lines_rsc_0_3_i (
      .we(gb_lines_rsc_0_3_we),
      .d(gb_lines_rsc_0_3_d),
      .wadr(gb_lines_rsc_0_3_wadr),
      .q(gb_lines_rsc_0_3_q),
      .re(gb_lines_rsc_0_3_re),
      .radr(gb_lines_rsc_0_3_radr),
      .radr_d(gb_lines_rsc_0_0_i_radr_d_iff),
      .wadr_d(gb_lines_rsc_0_0_i_radr_d_iff),
      .d_d(gb_lines_rsc_0_0_i_d_d_iff),
      .we_d(gb_lines_rsc_0_3_i_we_d_iff),
      .re_d(gb_lines_rsc_0_3_i_re_d_iff),
      .q_d(gb_lines_rsc_0_3_i_q_d),
      .port_0_r_ram_ir_internal_RMASK_B_d(gb_lines_rsc_0_3_i_re_d_iff),
      .port_1_w_ram_ir_internal_WMASK_B_d(gb_lines_rsc_0_3_i_we_d_iff)
    );
  greenbalance2_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_558_12_12_4096_4096_12_5_gen
      gb_lines_rsc_0_4_i (
      .we(gb_lines_rsc_0_4_we),
      .d(gb_lines_rsc_0_4_d),
      .wadr(gb_lines_rsc_0_4_wadr),
      .q(gb_lines_rsc_0_4_q),
      .re(gb_lines_rsc_0_4_re),
      .radr(gb_lines_rsc_0_4_radr),
      .radr_d(gb_lines_rsc_0_0_i_radr_d_iff),
      .wadr_d(gb_lines_rsc_0_0_i_radr_d_iff),
      .d_d(gb_lines_rsc_0_0_i_d_d_iff),
      .we_d(gb_lines_rsc_0_4_i_we_d_iff),
      .re_d(gb_lines_rsc_0_4_i_re_d_iff),
      .q_d(gb_lines_rsc_0_4_i_q_d),
      .port_0_r_ram_ir_internal_RMASK_B_d(gb_lines_rsc_0_4_i_re_d_iff),
      .port_1_w_ram_ir_internal_WMASK_B_d(gb_lines_rsc_0_4_i_we_d_iff)
    );
  greenbalance2_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_559_12_12_4096_4096_12_5_gen
      gb_lines_rsc_0_5_i (
      .we(gb_lines_rsc_0_5_we),
      .d(gb_lines_rsc_0_5_d),
      .wadr(gb_lines_rsc_0_5_wadr),
      .q(gb_lines_rsc_0_5_q),
      .re(gb_lines_rsc_0_5_re),
      .radr(gb_lines_rsc_0_5_radr),
      .radr_d(gb_lines_rsc_0_0_i_radr_d_iff),
      .wadr_d(gb_lines_rsc_0_0_i_radr_d_iff),
      .d_d(gb_lines_rsc_0_0_i_d_d_iff),
      .we_d(gb_lines_rsc_0_5_i_we_d_iff),
      .re_d(gb_lines_rsc_0_5_i_re_d_iff),
      .q_d(gb_lines_rsc_0_5_i_q_d),
      .port_0_r_ram_ir_internal_RMASK_B_d(gb_lines_rsc_0_5_i_re_d_iff),
      .port_1_w_ram_ir_internal_WMASK_B_d(gb_lines_rsc_0_5_i_we_d_iff)
    );
  greenbalance2_core greenbalance2_core_inst (
      .clk(clk),
      .arst_n(arst_n),
      .top_reg_frameWidth(top_reg_frameWidth),
      .top_reg_frameHeight(top_reg_frameHeight),
      .top_reg_imgPattern(top_reg_imgPattern),
      .gb_reg_eb(gb_reg_eb),
      .gb_reg_Lbound(gb_reg_Lbound),
      .gb_reg_Hbound(gb_reg_Hbound),
      .gb_reg_threhold(gb_reg_threhold),
      .src_rsc_dat(src_rsc_dat),
      .src_rsc_vld(src_rsc_vld),
      .src_rsc_rdy(src_rsc_rdy),
      .dst_rsc_dat(dst_rsc_dat),
      .dst_rsc_vld(dst_rsc_vld),
      .dst_rsc_rdy(dst_rsc_rdy),
      .gb_lines_rsc_0_0_i_q_d(gb_lines_rsc_0_0_i_q_d),
      .gb_lines_rsc_0_1_i_q_d(gb_lines_rsc_0_1_i_q_d),
      .gb_lines_rsc_0_2_i_q_d(gb_lines_rsc_0_2_i_q_d),
      .gb_lines_rsc_0_3_i_q_d(gb_lines_rsc_0_3_i_q_d),
      .gb_lines_rsc_0_4_i_q_d(gb_lines_rsc_0_4_i_q_d),
      .gb_lines_rsc_0_5_i_q_d(gb_lines_rsc_0_5_i_q_d),
      .gb_lines_rsc_0_0_i_radr_d_pff(gb_lines_rsc_0_0_i_radr_d_iff),
      .gb_lines_rsc_0_0_i_d_d_pff(gb_lines_rsc_0_0_i_d_d_iff),
      .gb_lines_rsc_0_0_i_we_d_pff(gb_lines_rsc_0_0_i_we_d_iff),
      .gb_lines_rsc_0_0_i_re_d_pff(gb_lines_rsc_0_0_i_re_d_iff),
      .gb_lines_rsc_0_1_i_we_d_pff(gb_lines_rsc_0_1_i_we_d_iff),
      .gb_lines_rsc_0_1_i_re_d_pff(gb_lines_rsc_0_1_i_re_d_iff),
      .gb_lines_rsc_0_2_i_we_d_pff(gb_lines_rsc_0_2_i_we_d_iff),
      .gb_lines_rsc_0_2_i_re_d_pff(gb_lines_rsc_0_2_i_re_d_iff),
      .gb_lines_rsc_0_3_i_we_d_pff(gb_lines_rsc_0_3_i_we_d_iff),
      .gb_lines_rsc_0_3_i_re_d_pff(gb_lines_rsc_0_3_i_re_d_iff),
      .gb_lines_rsc_0_4_i_we_d_pff(gb_lines_rsc_0_4_i_we_d_iff),
      .gb_lines_rsc_0_4_i_re_d_pff(gb_lines_rsc_0_4_i_re_d_iff),
      .gb_lines_rsc_0_5_i_we_d_pff(gb_lines_rsc_0_5_i_we_d_iff),
      .gb_lines_rsc_0_5_i_re_d_pff(gb_lines_rsc_0_5_i_re_d_iff)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    demosaic
// ------------------------------------------------------------------


module demosaic (
  clk, arst_n, top_reg_frameWidth, top_reg_frameHeight, top_reg_inputFormat, top_reg_imgPattern,
      top_reg_pipeMode, top_reg_blc, top_reg_shadowEb, top_reg_binningFrameWidth,
      top_reg_binningFrameHeight, top_reg_scalerFrameWidth, top_reg_scalerFrameHeight,
      demosaic_reg_eb, src_rsc_dat, src_rsc_vld, src_rsc_rdy, dst_rsc_dat, dst_rsc_vld,
      dst_rsc_rdy
);
  input clk;
  input arst_n;
  input [12:0] top_reg_frameWidth;
  input [12:0] top_reg_frameHeight;
  input top_reg_inputFormat;
  input [1:0] top_reg_imgPattern;
  input [1:0] top_reg_pipeMode;
  input [8:0] top_reg_blc;
  input top_reg_shadowEb;
  input [12:0] top_reg_binningFrameWidth;
  input [12:0] top_reg_binningFrameHeight;
  input [12:0] top_reg_scalerFrameWidth;
  input [12:0] top_reg_scalerFrameHeight;
  input demosaic_reg_eb;
  input [11:0] src_rsc_dat;
  input src_rsc_vld;
  output src_rsc_rdy;
  output [35:0] dst_rsc_dat;
  output dst_rsc_vld;
  input dst_rsc_rdy;


  // Interconnect Declarations
  wire [11:0] lineBuf_rsc_0_0_i_radr_d;
  wire [11:0] lineBuf_rsc_0_0_i_wadr_d;
  wire [11:0] lineBuf_rsc_0_0_i_q_d;
  wire [11:0] lineBuf_rsc_0_1_i_radr_d;
  wire [11:0] lineBuf_rsc_0_1_i_wadr_d;
  wire [11:0] lineBuf_rsc_0_1_i_q_d;
  wire [11:0] lineBuf_rsc_0_2_i_radr_d;
  wire [11:0] lineBuf_rsc_0_2_i_wadr_d;
  wire [11:0] lineBuf_rsc_0_2_i_q_d;
  wire [11:0] lineBuf_rsc_0_3_i_radr_d;
  wire [11:0] lineBuf_rsc_0_3_i_wadr_d;
  wire [11:0] lineBuf_rsc_0_3_i_q_d;
  wire lineBuf_rsc_0_0_we;
  wire [11:0] lineBuf_rsc_0_0_d;
  wire [11:0] lineBuf_rsc_0_0_wadr;
  wire [11:0] lineBuf_rsc_0_0_q;
  wire lineBuf_rsc_0_0_re;
  wire [11:0] lineBuf_rsc_0_0_radr;
  wire lineBuf_rsc_0_1_we;
  wire [11:0] lineBuf_rsc_0_1_d;
  wire [11:0] lineBuf_rsc_0_1_wadr;
  wire [11:0] lineBuf_rsc_0_1_q;
  wire lineBuf_rsc_0_1_re;
  wire [11:0] lineBuf_rsc_0_1_radr;
  wire lineBuf_rsc_0_2_we;
  wire [11:0] lineBuf_rsc_0_2_d;
  wire [11:0] lineBuf_rsc_0_2_wadr;
  wire [11:0] lineBuf_rsc_0_2_q;
  wire lineBuf_rsc_0_2_re;
  wire [11:0] lineBuf_rsc_0_2_radr;
  wire lineBuf_rsc_0_3_we;
  wire [11:0] lineBuf_rsc_0_3_d;
  wire [11:0] lineBuf_rsc_0_3_wadr;
  wire [11:0] lineBuf_rsc_0_3_q;
  wire lineBuf_rsc_0_3_re;
  wire [11:0] lineBuf_rsc_0_3_radr;
  wire [11:0] lineBuf_rsc_0_0_i_d_d_iff;
  wire lineBuf_rsc_0_0_i_we_d_iff;
  wire lineBuf_rsc_0_0_i_re_d_iff;
  wire lineBuf_rsc_0_1_i_we_d_iff;
  wire lineBuf_rsc_0_1_i_re_d_iff;
  wire lineBuf_rsc_0_2_i_we_d_iff;
  wire lineBuf_rsc_0_2_i_re_d_iff;
  wire lineBuf_rsc_0_3_i_we_d_iff;
  wire lineBuf_rsc_0_3_i_re_d_iff;


  // Interconnect Declarations for Component Instantiations 
  ccs_ram_sync_1R1W #(.data_width(32'sd12),
  .addr_width(32'sd12),
  .depth(32'sd4096)) lineBuf_rsc_0_0_comp (
      .radr(lineBuf_rsc_0_0_radr),
      .wadr(lineBuf_rsc_0_0_wadr),
      .d(lineBuf_rsc_0_0_d),
      .we(lineBuf_rsc_0_0_we),
      .re(lineBuf_rsc_0_0_re),
      .clk(clk),
      .q(lineBuf_rsc_0_0_q)
    );
  ccs_ram_sync_1R1W #(.data_width(32'sd12),
  .addr_width(32'sd12),
  .depth(32'sd4096)) lineBuf_rsc_0_1_comp (
      .radr(lineBuf_rsc_0_1_radr),
      .wadr(lineBuf_rsc_0_1_wadr),
      .d(lineBuf_rsc_0_1_d),
      .we(lineBuf_rsc_0_1_we),
      .re(lineBuf_rsc_0_1_re),
      .clk(clk),
      .q(lineBuf_rsc_0_1_q)
    );
  ccs_ram_sync_1R1W #(.data_width(32'sd12),
  .addr_width(32'sd12),
  .depth(32'sd4096)) lineBuf_rsc_0_2_comp (
      .radr(lineBuf_rsc_0_2_radr),
      .wadr(lineBuf_rsc_0_2_wadr),
      .d(lineBuf_rsc_0_2_d),
      .we(lineBuf_rsc_0_2_we),
      .re(lineBuf_rsc_0_2_re),
      .clk(clk),
      .q(lineBuf_rsc_0_2_q)
    );
  ccs_ram_sync_1R1W #(.data_width(32'sd12),
  .addr_width(32'sd12),
  .depth(32'sd4096)) lineBuf_rsc_0_3_comp (
      .radr(lineBuf_rsc_0_3_radr),
      .wadr(lineBuf_rsc_0_3_wadr),
      .d(lineBuf_rsc_0_3_d),
      .we(lineBuf_rsc_0_3_we),
      .re(lineBuf_rsc_0_3_re),
      .clk(clk),
      .q(lineBuf_rsc_0_3_q)
    );
  demosaic_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_560_12_12_4096_4096_12_5_gen lineBuf_rsc_0_0_i
      (
      .we(lineBuf_rsc_0_0_we),
      .d(lineBuf_rsc_0_0_d),
      .wadr(lineBuf_rsc_0_0_wadr),
      .q(lineBuf_rsc_0_0_q),
      .re(lineBuf_rsc_0_0_re),
      .radr(lineBuf_rsc_0_0_radr),
      .radr_d(lineBuf_rsc_0_0_i_radr_d),
      .wadr_d(lineBuf_rsc_0_0_i_wadr_d),
      .d_d(lineBuf_rsc_0_0_i_d_d_iff),
      .we_d(lineBuf_rsc_0_0_i_we_d_iff),
      .re_d(lineBuf_rsc_0_0_i_re_d_iff),
      .q_d(lineBuf_rsc_0_0_i_q_d),
      .port_0_r_ram_ir_internal_RMASK_B_d(lineBuf_rsc_0_0_i_re_d_iff),
      .port_1_w_ram_ir_internal_WMASK_B_d(lineBuf_rsc_0_0_i_we_d_iff)
    );
  demosaic_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_561_12_12_4096_4096_12_5_gen lineBuf_rsc_0_1_i
      (
      .we(lineBuf_rsc_0_1_we),
      .d(lineBuf_rsc_0_1_d),
      .wadr(lineBuf_rsc_0_1_wadr),
      .q(lineBuf_rsc_0_1_q),
      .re(lineBuf_rsc_0_1_re),
      .radr(lineBuf_rsc_0_1_radr),
      .radr_d(lineBuf_rsc_0_1_i_radr_d),
      .wadr_d(lineBuf_rsc_0_1_i_wadr_d),
      .d_d(lineBuf_rsc_0_0_i_d_d_iff),
      .we_d(lineBuf_rsc_0_1_i_we_d_iff),
      .re_d(lineBuf_rsc_0_1_i_re_d_iff),
      .q_d(lineBuf_rsc_0_1_i_q_d),
      .port_0_r_ram_ir_internal_RMASK_B_d(lineBuf_rsc_0_1_i_re_d_iff),
      .port_1_w_ram_ir_internal_WMASK_B_d(lineBuf_rsc_0_1_i_we_d_iff)
    );
  demosaic_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_562_12_12_4096_4096_12_5_gen lineBuf_rsc_0_2_i
      (
      .we(lineBuf_rsc_0_2_we),
      .d(lineBuf_rsc_0_2_d),
      .wadr(lineBuf_rsc_0_2_wadr),
      .q(lineBuf_rsc_0_2_q),
      .re(lineBuf_rsc_0_2_re),
      .radr(lineBuf_rsc_0_2_radr),
      .radr_d(lineBuf_rsc_0_2_i_radr_d),
      .wadr_d(lineBuf_rsc_0_2_i_wadr_d),
      .d_d(lineBuf_rsc_0_0_i_d_d_iff),
      .we_d(lineBuf_rsc_0_2_i_we_d_iff),
      .re_d(lineBuf_rsc_0_2_i_re_d_iff),
      .q_d(lineBuf_rsc_0_2_i_q_d),
      .port_0_r_ram_ir_internal_RMASK_B_d(lineBuf_rsc_0_2_i_re_d_iff),
      .port_1_w_ram_ir_internal_WMASK_B_d(lineBuf_rsc_0_2_i_we_d_iff)
    );
  demosaic_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_563_12_12_4096_4096_12_5_gen lineBuf_rsc_0_3_i
      (
      .we(lineBuf_rsc_0_3_we),
      .d(lineBuf_rsc_0_3_d),
      .wadr(lineBuf_rsc_0_3_wadr),
      .q(lineBuf_rsc_0_3_q),
      .re(lineBuf_rsc_0_3_re),
      .radr(lineBuf_rsc_0_3_radr),
      .radr_d(lineBuf_rsc_0_3_i_radr_d),
      .wadr_d(lineBuf_rsc_0_3_i_wadr_d),
      .d_d(lineBuf_rsc_0_0_i_d_d_iff),
      .we_d(lineBuf_rsc_0_3_i_we_d_iff),
      .re_d(lineBuf_rsc_0_3_i_re_d_iff),
      .q_d(lineBuf_rsc_0_3_i_q_d),
      .port_0_r_ram_ir_internal_RMASK_B_d(lineBuf_rsc_0_3_i_re_d_iff),
      .port_1_w_ram_ir_internal_WMASK_B_d(lineBuf_rsc_0_3_i_we_d_iff)
    );
  demosaic_core demosaic_core_inst (
      .clk(clk),
      .arst_n(arst_n),
      .top_reg_frameWidth(top_reg_frameWidth),
      .top_reg_frameHeight(top_reg_frameHeight),
      .top_reg_imgPattern(top_reg_imgPattern),
      .demosaic_reg_eb(demosaic_reg_eb),
      .src_rsc_dat(src_rsc_dat),
      .src_rsc_vld(src_rsc_vld),
      .src_rsc_rdy(src_rsc_rdy),
      .dst_rsc_dat(dst_rsc_dat),
      .dst_rsc_vld(dst_rsc_vld),
      .dst_rsc_rdy(dst_rsc_rdy),
      .lineBuf_rsc_0_0_i_radr_d(lineBuf_rsc_0_0_i_radr_d),
      .lineBuf_rsc_0_0_i_wadr_d(lineBuf_rsc_0_0_i_wadr_d),
      .lineBuf_rsc_0_0_i_q_d(lineBuf_rsc_0_0_i_q_d),
      .lineBuf_rsc_0_1_i_radr_d(lineBuf_rsc_0_1_i_radr_d),
      .lineBuf_rsc_0_1_i_wadr_d(lineBuf_rsc_0_1_i_wadr_d),
      .lineBuf_rsc_0_1_i_q_d(lineBuf_rsc_0_1_i_q_d),
      .lineBuf_rsc_0_2_i_radr_d(lineBuf_rsc_0_2_i_radr_d),
      .lineBuf_rsc_0_2_i_wadr_d(lineBuf_rsc_0_2_i_wadr_d),
      .lineBuf_rsc_0_2_i_q_d(lineBuf_rsc_0_2_i_q_d),
      .lineBuf_rsc_0_3_i_radr_d(lineBuf_rsc_0_3_i_radr_d),
      .lineBuf_rsc_0_3_i_wadr_d(lineBuf_rsc_0_3_i_wadr_d),
      .lineBuf_rsc_0_3_i_q_d(lineBuf_rsc_0_3_i_q_d),
      .lineBuf_rsc_0_0_i_d_d_pff(lineBuf_rsc_0_0_i_d_d_iff),
      .lineBuf_rsc_0_0_i_we_d_pff(lineBuf_rsc_0_0_i_we_d_iff),
      .lineBuf_rsc_0_0_i_re_d_pff(lineBuf_rsc_0_0_i_re_d_iff),
      .lineBuf_rsc_0_1_i_we_d_pff(lineBuf_rsc_0_1_i_we_d_iff),
      .lineBuf_rsc_0_1_i_re_d_pff(lineBuf_rsc_0_1_i_re_d_iff),
      .lineBuf_rsc_0_2_i_we_d_pff(lineBuf_rsc_0_2_i_we_d_iff),
      .lineBuf_rsc_0_2_i_re_d_pff(lineBuf_rsc_0_2_i_re_d_iff),
      .lineBuf_rsc_0_3_i_we_d_pff(lineBuf_rsc_0_3_i_we_d_iff),
      .lineBuf_rsc_0_3_i_re_d_pff(lineBuf_rsc_0_3_i_re_d_iff)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    edgeenhancement
// ------------------------------------------------------------------


module edgeenhancement (
  clk, arst_n, isp_top_frameWidth, isp_top_frameHeight, isp_top_inputFormat, isp_top_imgPattern,
      isp_top_pipeMode, isp_top_blc, isp_top_shadowEb, isp_top_binningFrameWidth,
      isp_top_binningFrameHeight, isp_top_scalerFrameWidth, isp_top_scalerFrameHeight,
      ee_top_eb, ee_top_coeff, src_rsc_dat, src_rsc_vld, src_rsc_rdy, dst_rsc_dat,
      dst_rsc_vld, dst_rsc_rdy
);
  input clk;
  input arst_n;
  input [12:0] isp_top_frameWidth;
  input [12:0] isp_top_frameHeight;
  input isp_top_inputFormat;
  input [1:0] isp_top_imgPattern;
  input [1:0] isp_top_pipeMode;
  input [8:0] isp_top_blc;
  input isp_top_shadowEb;
  input [12:0] isp_top_binningFrameWidth;
  input [12:0] isp_top_binningFrameHeight;
  input [12:0] isp_top_scalerFrameWidth;
  input [12:0] isp_top_scalerFrameHeight;
  input ee_top_eb;
  input [7:0] ee_top_coeff;
  input [35:0] src_rsc_dat;
  input src_rsc_vld;
  output src_rsc_rdy;
  output [35:0] dst_rsc_dat;
  output dst_rsc_vld;
  input dst_rsc_rdy;


  // Interconnect Declarations
  wire [11:0] ee_lines_rsc_0_0_i_radr_d;
  wire [11:0] ee_lines_rsc_0_0_i_wadr_d;
  wire [35:0] ee_lines_rsc_0_0_i_q_d;
  wire [11:0] ee_lines_rsc_0_1_i_radr_d;
  wire [11:0] ee_lines_rsc_0_1_i_wadr_d;
  wire [35:0] ee_lines_rsc_0_1_i_q_d;
  wire [11:0] ee_lines_rsc_0_2_i_radr_d;
  wire [11:0] ee_lines_rsc_0_2_i_wadr_d;
  wire [35:0] ee_lines_rsc_0_2_i_q_d;
  wire [11:0] ee_lines_rsc_0_3_i_radr_d;
  wire [11:0] ee_lines_rsc_0_3_i_wadr_d;
  wire [35:0] ee_lines_rsc_0_3_i_q_d;
  wire ee_lines_rsc_0_0_we;
  wire [35:0] ee_lines_rsc_0_0_d;
  wire [11:0] ee_lines_rsc_0_0_wadr;
  wire [35:0] ee_lines_rsc_0_0_q;
  wire ee_lines_rsc_0_0_re;
  wire [11:0] ee_lines_rsc_0_0_radr;
  wire ee_lines_rsc_0_1_we;
  wire [35:0] ee_lines_rsc_0_1_d;
  wire [11:0] ee_lines_rsc_0_1_wadr;
  wire [35:0] ee_lines_rsc_0_1_q;
  wire ee_lines_rsc_0_1_re;
  wire [11:0] ee_lines_rsc_0_1_radr;
  wire ee_lines_rsc_0_2_we;
  wire [35:0] ee_lines_rsc_0_2_d;
  wire [11:0] ee_lines_rsc_0_2_wadr;
  wire [35:0] ee_lines_rsc_0_2_q;
  wire ee_lines_rsc_0_2_re;
  wire [11:0] ee_lines_rsc_0_2_radr;
  wire ee_lines_rsc_0_3_we;
  wire [35:0] ee_lines_rsc_0_3_d;
  wire [11:0] ee_lines_rsc_0_3_wadr;
  wire [35:0] ee_lines_rsc_0_3_q;
  wire ee_lines_rsc_0_3_re;
  wire [11:0] ee_lines_rsc_0_3_radr;
  wire [35:0] ee_lines_rsc_0_0_i_d_d_iff;
  wire ee_lines_rsc_0_0_i_we_d_iff;
  wire ee_lines_rsc_0_0_i_re_d_iff;
  wire ee_lines_rsc_0_1_i_we_d_iff;
  wire ee_lines_rsc_0_1_i_re_d_iff;
  wire ee_lines_rsc_0_2_i_we_d_iff;
  wire ee_lines_rsc_0_2_i_re_d_iff;
  wire ee_lines_rsc_0_3_i_we_d_iff;
  wire ee_lines_rsc_0_3_i_re_d_iff;


  // Interconnect Declarations for Component Instantiations 
  ccs_ram_sync_1R1W #(.data_width(32'sd36),
  .addr_width(32'sd12),
  .depth(32'sd4096)) ee_lines_rsc_0_0_comp (
      .radr(ee_lines_rsc_0_0_radr),
      .wadr(ee_lines_rsc_0_0_wadr),
      .d(ee_lines_rsc_0_0_d),
      .we(ee_lines_rsc_0_0_we),
      .re(ee_lines_rsc_0_0_re),
      .clk(clk),
      .q(ee_lines_rsc_0_0_q)
    );
  ccs_ram_sync_1R1W #(.data_width(32'sd36),
  .addr_width(32'sd12),
  .depth(32'sd4096)) ee_lines_rsc_0_1_comp (
      .radr(ee_lines_rsc_0_1_radr),
      .wadr(ee_lines_rsc_0_1_wadr),
      .d(ee_lines_rsc_0_1_d),
      .we(ee_lines_rsc_0_1_we),
      .re(ee_lines_rsc_0_1_re),
      .clk(clk),
      .q(ee_lines_rsc_0_1_q)
    );
  ccs_ram_sync_1R1W #(.data_width(32'sd36),
  .addr_width(32'sd12),
  .depth(32'sd4096)) ee_lines_rsc_0_2_comp (
      .radr(ee_lines_rsc_0_2_radr),
      .wadr(ee_lines_rsc_0_2_wadr),
      .d(ee_lines_rsc_0_2_d),
      .we(ee_lines_rsc_0_2_we),
      .re(ee_lines_rsc_0_2_re),
      .clk(clk),
      .q(ee_lines_rsc_0_2_q)
    );
  ccs_ram_sync_1R1W #(.data_width(32'sd36),
  .addr_width(32'sd12),
  .depth(32'sd4096)) ee_lines_rsc_0_3_comp (
      .radr(ee_lines_rsc_0_3_radr),
      .wadr(ee_lines_rsc_0_3_wadr),
      .d(ee_lines_rsc_0_3_d),
      .we(ee_lines_rsc_0_3_we),
      .re(ee_lines_rsc_0_3_re),
      .clk(clk),
      .q(ee_lines_rsc_0_3_q)
    );
  edgeenhancement_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_564_36_12_4096_4096_36_5_gen
      ee_lines_rsc_0_0_i (
      .we(ee_lines_rsc_0_0_we),
      .d(ee_lines_rsc_0_0_d),
      .wadr(ee_lines_rsc_0_0_wadr),
      .q(ee_lines_rsc_0_0_q),
      .re(ee_lines_rsc_0_0_re),
      .radr(ee_lines_rsc_0_0_radr),
      .radr_d(ee_lines_rsc_0_0_i_radr_d),
      .wadr_d(ee_lines_rsc_0_0_i_wadr_d),
      .d_d(ee_lines_rsc_0_0_i_d_d_iff),
      .we_d(ee_lines_rsc_0_0_i_we_d_iff),
      .re_d(ee_lines_rsc_0_0_i_re_d_iff),
      .q_d(ee_lines_rsc_0_0_i_q_d),
      .port_0_r_ram_ir_internal_RMASK_B_d(ee_lines_rsc_0_0_i_re_d_iff),
      .port_1_w_ram_ir_internal_WMASK_B_d(ee_lines_rsc_0_0_i_we_d_iff)
    );
  edgeenhancement_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_565_36_12_4096_4096_36_5_gen
      ee_lines_rsc_0_1_i (
      .we(ee_lines_rsc_0_1_we),
      .d(ee_lines_rsc_0_1_d),
      .wadr(ee_lines_rsc_0_1_wadr),
      .q(ee_lines_rsc_0_1_q),
      .re(ee_lines_rsc_0_1_re),
      .radr(ee_lines_rsc_0_1_radr),
      .radr_d(ee_lines_rsc_0_1_i_radr_d),
      .wadr_d(ee_lines_rsc_0_1_i_wadr_d),
      .d_d(ee_lines_rsc_0_0_i_d_d_iff),
      .we_d(ee_lines_rsc_0_1_i_we_d_iff),
      .re_d(ee_lines_rsc_0_1_i_re_d_iff),
      .q_d(ee_lines_rsc_0_1_i_q_d),
      .port_0_r_ram_ir_internal_RMASK_B_d(ee_lines_rsc_0_1_i_re_d_iff),
      .port_1_w_ram_ir_internal_WMASK_B_d(ee_lines_rsc_0_1_i_we_d_iff)
    );
  edgeenhancement_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_566_36_12_4096_4096_36_5_gen
      ee_lines_rsc_0_2_i (
      .we(ee_lines_rsc_0_2_we),
      .d(ee_lines_rsc_0_2_d),
      .wadr(ee_lines_rsc_0_2_wadr),
      .q(ee_lines_rsc_0_2_q),
      .re(ee_lines_rsc_0_2_re),
      .radr(ee_lines_rsc_0_2_radr),
      .radr_d(ee_lines_rsc_0_2_i_radr_d),
      .wadr_d(ee_lines_rsc_0_2_i_wadr_d),
      .d_d(ee_lines_rsc_0_0_i_d_d_iff),
      .we_d(ee_lines_rsc_0_2_i_we_d_iff),
      .re_d(ee_lines_rsc_0_2_i_re_d_iff),
      .q_d(ee_lines_rsc_0_2_i_q_d),
      .port_0_r_ram_ir_internal_RMASK_B_d(ee_lines_rsc_0_2_i_re_d_iff),
      .port_1_w_ram_ir_internal_WMASK_B_d(ee_lines_rsc_0_2_i_we_d_iff)
    );
  edgeenhancement_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_567_36_12_4096_4096_36_5_gen
      ee_lines_rsc_0_3_i (
      .we(ee_lines_rsc_0_3_we),
      .d(ee_lines_rsc_0_3_d),
      .wadr(ee_lines_rsc_0_3_wadr),
      .q(ee_lines_rsc_0_3_q),
      .re(ee_lines_rsc_0_3_re),
      .radr(ee_lines_rsc_0_3_radr),
      .radr_d(ee_lines_rsc_0_3_i_radr_d),
      .wadr_d(ee_lines_rsc_0_3_i_wadr_d),
      .d_d(ee_lines_rsc_0_0_i_d_d_iff),
      .we_d(ee_lines_rsc_0_3_i_we_d_iff),
      .re_d(ee_lines_rsc_0_3_i_re_d_iff),
      .q_d(ee_lines_rsc_0_3_i_q_d),
      .port_0_r_ram_ir_internal_RMASK_B_d(ee_lines_rsc_0_3_i_re_d_iff),
      .port_1_w_ram_ir_internal_WMASK_B_d(ee_lines_rsc_0_3_i_we_d_iff)
    );
  edgeenhancement_core edgeenhancement_core_inst (
      .clk(clk),
      .arst_n(arst_n),
      .isp_top_frameWidth(isp_top_frameWidth),
      .isp_top_frameHeight(isp_top_frameHeight),
      .ee_top_eb(ee_top_eb),
      .ee_top_coeff(ee_top_coeff),
      .src_rsc_dat(src_rsc_dat),
      .src_rsc_vld(src_rsc_vld),
      .src_rsc_rdy(src_rsc_rdy),
      .dst_rsc_dat(dst_rsc_dat),
      .dst_rsc_vld(dst_rsc_vld),
      .dst_rsc_rdy(dst_rsc_rdy),
      .ee_lines_rsc_0_0_i_radr_d(ee_lines_rsc_0_0_i_radr_d),
      .ee_lines_rsc_0_0_i_wadr_d(ee_lines_rsc_0_0_i_wadr_d),
      .ee_lines_rsc_0_0_i_q_d(ee_lines_rsc_0_0_i_q_d),
      .ee_lines_rsc_0_1_i_radr_d(ee_lines_rsc_0_1_i_radr_d),
      .ee_lines_rsc_0_1_i_wadr_d(ee_lines_rsc_0_1_i_wadr_d),
      .ee_lines_rsc_0_1_i_q_d(ee_lines_rsc_0_1_i_q_d),
      .ee_lines_rsc_0_2_i_radr_d(ee_lines_rsc_0_2_i_radr_d),
      .ee_lines_rsc_0_2_i_wadr_d(ee_lines_rsc_0_2_i_wadr_d),
      .ee_lines_rsc_0_2_i_q_d(ee_lines_rsc_0_2_i_q_d),
      .ee_lines_rsc_0_3_i_radr_d(ee_lines_rsc_0_3_i_radr_d),
      .ee_lines_rsc_0_3_i_wadr_d(ee_lines_rsc_0_3_i_wadr_d),
      .ee_lines_rsc_0_3_i_q_d(ee_lines_rsc_0_3_i_q_d),
      .ee_lines_rsc_0_0_i_d_d_pff(ee_lines_rsc_0_0_i_d_d_iff),
      .ee_lines_rsc_0_0_i_we_d_pff(ee_lines_rsc_0_0_i_we_d_iff),
      .ee_lines_rsc_0_0_i_re_d_pff(ee_lines_rsc_0_0_i_re_d_iff),
      .ee_lines_rsc_0_1_i_we_d_pff(ee_lines_rsc_0_1_i_we_d_iff),
      .ee_lines_rsc_0_1_i_re_d_pff(ee_lines_rsc_0_1_i_re_d_iff),
      .ee_lines_rsc_0_2_i_we_d_pff(ee_lines_rsc_0_2_i_we_d_iff),
      .ee_lines_rsc_0_2_i_re_d_pff(ee_lines_rsc_0_2_i_re_d_iff),
      .ee_lines_rsc_0_3_i_we_d_pff(ee_lines_rsc_0_3_i_we_d_iff),
      .ee_lines_rsc_0_3_i_re_d_pff(ee_lines_rsc_0_3_i_re_d_iff)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    cmc
// ------------------------------------------------------------------


module cmc (
  clk, arst_n, top_reg_frameWidth, top_reg_frameHeight, top_reg_inputFormat, top_reg_imgPattern,
      top_reg_pipeMode, top_reg_blc, top_reg_shadowEb, top_reg_binningFrameWidth,
      top_reg_binningFrameHeight, top_reg_scalerFrameWidth, top_reg_scalerFrameHeight,
      cmc_reg_m_nEb, cmc_reg_m_nGain, cmc_reg_m_bCFCEnable, cmc_reg_m_bDiscardH,
      cmc_reg_m_pHueRange, cmc_reg_m_nHueBandShift, cmc_reg_m_nEdgeThre, cmc_reg_m_nEdgeBandShift,
      cmc_reg_m_nCFCStrength, src_rsc_dat, src_rsc_vld, src_rsc_rdy, dst_rsc_dat,
      dst_rsc_vld, dst_rsc_rdy
);
  input clk;
  input arst_n;
  input [12:0] top_reg_frameWidth;
  input [12:0] top_reg_frameHeight;
  input top_reg_inputFormat;
  input [1:0] top_reg_imgPattern;
  input [1:0] top_reg_pipeMode;
  input [8:0] top_reg_blc;
  input top_reg_shadowEb;
  input [12:0] top_reg_binningFrameWidth;
  input [12:0] top_reg_binningFrameHeight;
  input [12:0] top_reg_scalerFrameWidth;
  input [12:0] top_reg_scalerFrameHeight;
  input cmc_reg_m_nEb;
  input [191:0] cmc_reg_m_nGain;
  input cmc_reg_m_bCFCEnable;
  input cmc_reg_m_bDiscardH;
  input [17:0] cmc_reg_m_pHueRange;
  input [2:0] cmc_reg_m_nHueBandShift;
  input [7:0] cmc_reg_m_nEdgeThre;
  input [2:0] cmc_reg_m_nEdgeBandShift;
  input [4:0] cmc_reg_m_nCFCStrength;
  input [35:0] src_rsc_dat;
  input src_rsc_vld;
  output src_rsc_rdy;
  output [41:0] dst_rsc_dat;
  output dst_rsc_vld;
  input dst_rsc_rdy;



  // Interconnect Declarations for Component Instantiations 
  cmc_core cmc_core_inst (
      .clk(clk),
      .arst_n(arst_n),
      .top_reg_frameWidth(top_reg_frameWidth),
      .top_reg_frameHeight(top_reg_frameHeight),
      .top_reg_blc(top_reg_blc),
      .cmc_reg_m_nEb(cmc_reg_m_nEb),
      .cmc_reg_m_nGain(cmc_reg_m_nGain),
      .cmc_reg_m_bCFCEnable(cmc_reg_m_bCFCEnable),
      .cmc_reg_m_bDiscardH(cmc_reg_m_bDiscardH),
      .cmc_reg_m_nCFCStrength(cmc_reg_m_nCFCStrength),
      .src_rsc_dat(src_rsc_dat),
      .src_rsc_vld(src_rsc_vld),
      .src_rsc_rdy(src_rsc_rdy),
      .dst_rsc_dat(dst_rsc_dat),
      .dst_rsc_vld(dst_rsc_vld),
      .dst_rsc_rdy(dst_rsc_rdy)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    gtm
// ------------------------------------------------------------------


module gtm (
  clk, arst_n, top_reg_frameWidth, top_reg_frameHeight, top_reg_inputFormat, top_reg_imgPattern,
      top_reg_pipeMode, top_reg_blc, top_reg_shadowEb, top_reg_binningFrameWidth,
      top_reg_binningFrameHeight, top_reg_scalerFrameWidth, top_reg_scalerFrameHeight,
      gtm_reg_eb, gtm_reg_m_bDitheringEnable, gtm_reg_gtmTab, src_rsc_dat, src_rsc_vld,
      src_rsc_rdy, dst_rsc_dat, dst_rsc_vld, dst_rsc_rdy
);
  input clk;
  input arst_n;
  input [12:0] top_reg_frameWidth;
  input [12:0] top_reg_frameHeight;
  input top_reg_inputFormat;
  input [1:0] top_reg_imgPattern;
  input [1:0] top_reg_pipeMode;
  input [8:0] top_reg_blc;
  input top_reg_shadowEb;
  input [12:0] top_reg_binningFrameWidth;
  input [12:0] top_reg_binningFrameHeight;
  input [12:0] top_reg_scalerFrameWidth;
  input [12:0] top_reg_scalerFrameHeight;
  input gtm_reg_eb;
  input gtm_reg_m_bDitheringEnable;
  input [1289:0] gtm_reg_gtmTab;
  input [41:0] src_rsc_dat;
  input src_rsc_vld;
  output src_rsc_rdy;
  output [41:0] dst_rsc_dat;
  output dst_rsc_vld;
  input dst_rsc_rdy;



  // Interconnect Declarations for Component Instantiations 
  gtm_core gtm_core_inst (
      .clk(clk),
      .arst_n(arst_n),
      .top_reg_frameWidth(top_reg_frameWidth),
      .top_reg_frameHeight(top_reg_frameHeight),
      .gtm_reg_eb(gtm_reg_eb),
      .gtm_reg_m_bDitheringEnable(gtm_reg_m_bDitheringEnable),
      .gtm_reg_gtmTab(gtm_reg_gtmTab),
      .src_rsc_dat(src_rsc_dat),
      .src_rsc_vld(src_rsc_vld),
      .src_rsc_rdy(src_rsc_rdy),
      .dst_rsc_dat(dst_rsc_dat),
      .dst_rsc_vld(dst_rsc_vld),
      .dst_rsc_rdy(dst_rsc_rdy)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    csc
// ------------------------------------------------------------------


module csc (
  clk, arst_n, top_reg_frameWidth, top_reg_frameHeight, top_reg_inputFormat, top_reg_imgPattern,
      top_reg_pipeMode, top_reg_blc, top_reg_shadowEb, top_reg_binningFrameWidth,
      top_reg_binningFrameHeight, top_reg_scalerFrameWidth, top_reg_scalerFrameHeight,
      csc_reg_m_nEb, csc_reg_coeff, src_rsc_dat, src_rsc_vld, src_rsc_rdy, dst_rsc_dat,
      dst_rsc_vld, dst_rsc_rdy
);
  input clk;
  input arst_n;
  input [12:0] top_reg_frameWidth;
  input [12:0] top_reg_frameHeight;
  input top_reg_inputFormat;
  input [1:0] top_reg_imgPattern;
  input [1:0] top_reg_pipeMode;
  input [8:0] top_reg_blc;
  input top_reg_shadowEb;
  input [12:0] top_reg_binningFrameWidth;
  input [12:0] top_reg_binningFrameHeight;
  input [12:0] top_reg_scalerFrameWidth;
  input [12:0] top_reg_scalerFrameHeight;
  input csc_reg_m_nEb;
  input [131:0] csc_reg_coeff;
  input [41:0] src_rsc_dat;
  input src_rsc_vld;
  output src_rsc_rdy;
  output [29:0] dst_rsc_dat;
  output dst_rsc_vld;
  input dst_rsc_rdy;



  // Interconnect Declarations for Component Instantiations 
  csc_core csc_core_inst (
      .clk(clk),
      .arst_n(arst_n),
      .top_reg_frameWidth(top_reg_frameWidth),
      .top_reg_frameHeight(top_reg_frameHeight),
      .csc_reg_m_nEb(csc_reg_m_nEb),
      .csc_reg_coeff(csc_reg_coeff),
      .src_rsc_dat(src_rsc_dat),
      .src_rsc_vld(src_rsc_vld),
      .src_rsc_rdy(src_rsc_rdy),
      .dst_rsc_dat(dst_rsc_dat),
      .dst_rsc_vld(dst_rsc_vld),
      .dst_rsc_rdy(dst_rsc_rdy)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yfc
// ------------------------------------------------------------------


module yfc (
  clk, arst_n, top_reg_frameWidth, top_reg_frameHeight, top_reg_inputFormat, top_reg_imgPattern,
      top_reg_pipeMode, top_reg_blc, top_reg_shadowEb, top_reg_binningFrameWidth,
      top_reg_binningFrameHeight, top_reg_scalerFrameWidth, top_reg_scalerFrameHeight,
      yfc_reg_m_nEb, yfc_reg_yuvpattern, src_rsc_dat, src_rsc_vld, src_rsc_rdy, y_dst_rsc_dat,
      y_dst_rsc_vld, y_dst_rsc_rdy, u_dst_rsc_dat, u_dst_rsc_vld, u_dst_rsc_rdy,
      v_dst_rsc_dat, v_dst_rsc_vld, v_dst_rsc_rdy
);
  input clk;
  input arst_n;
  input [12:0] top_reg_frameWidth;
  input [12:0] top_reg_frameHeight;
  input top_reg_inputFormat;
  input [1:0] top_reg_imgPattern;
  input [1:0] top_reg_pipeMode;
  input [8:0] top_reg_blc;
  input top_reg_shadowEb;
  input [12:0] top_reg_binningFrameWidth;
  input [12:0] top_reg_binningFrameHeight;
  input [12:0] top_reg_scalerFrameWidth;
  input [12:0] top_reg_scalerFrameHeight;
  input yfc_reg_m_nEb;
  input yfc_reg_yuvpattern;
  input [29:0] src_rsc_dat;
  input src_rsc_vld;
  output src_rsc_rdy;
  output [9:0] y_dst_rsc_dat;
  output y_dst_rsc_vld;
  input y_dst_rsc_rdy;
  output [9:0] u_dst_rsc_dat;
  output u_dst_rsc_vld;
  input u_dst_rsc_rdy;
  output [9:0] v_dst_rsc_dat;
  output v_dst_rsc_vld;
  input v_dst_rsc_rdy;


  // Interconnect Declarations
  wire [9:0] u_linebuffer_rsci_d_d;
  wire [9:0] u_linebuffer_rsci_q_d;
  wire [9:0] v_linebuffer_rsci_d_d;
  wire [9:0] v_linebuffer_rsci_q_d;
  wire u_linebuffer_rsc_we;
  wire [9:0] u_linebuffer_rsc_d;
  wire [11:0] u_linebuffer_rsc_wadr;
  wire [9:0] u_linebuffer_rsc_q;
  wire u_linebuffer_rsc_re;
  wire [11:0] u_linebuffer_rsc_radr;
  wire v_linebuffer_rsc_we;
  wire [9:0] v_linebuffer_rsc_d;
  wire [11:0] v_linebuffer_rsc_wadr;
  wire [9:0] v_linebuffer_rsc_q;
  wire v_linebuffer_rsc_re;
  wire [11:0] v_linebuffer_rsc_radr;
  wire [11:0] u_linebuffer_rsci_radr_d_iff;
  wire u_linebuffer_rsci_we_d_iff;
  wire u_linebuffer_rsci_re_d_iff;
  wire v_linebuffer_rsci_we_d_iff;
  wire v_linebuffer_rsci_re_d_iff;


  // Interconnect Declarations for Component Instantiations 
  ccs_ram_sync_1R1W #(.data_width(32'sd10),
  .addr_width(32'sd12),
  .depth(32'sd4096)) u_linebuffer_rsc_comp (
      .radr(u_linebuffer_rsc_radr),
      .wadr(u_linebuffer_rsc_wadr),
      .d(u_linebuffer_rsc_d),
      .we(u_linebuffer_rsc_we),
      .re(u_linebuffer_rsc_re),
      .clk(clk),
      .q(u_linebuffer_rsc_q)
    );
  ccs_ram_sync_1R1W #(.data_width(32'sd10),
  .addr_width(32'sd12),
  .depth(32'sd4096)) v_linebuffer_rsc_comp (
      .radr(v_linebuffer_rsc_radr),
      .wadr(v_linebuffer_rsc_wadr),
      .d(v_linebuffer_rsc_d),
      .we(v_linebuffer_rsc_we),
      .re(v_linebuffer_rsc_re),
      .clk(clk),
      .q(v_linebuffer_rsc_q)
    );
  yfc_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_294_10_12_4096_4096_10_5_gen u_linebuffer_rsci
      (
      .we(u_linebuffer_rsc_we),
      .d(u_linebuffer_rsc_d),
      .wadr(u_linebuffer_rsc_wadr),
      .q(u_linebuffer_rsc_q),
      .re(u_linebuffer_rsc_re),
      .radr(u_linebuffer_rsc_radr),
      .radr_d(u_linebuffer_rsci_radr_d_iff),
      .wadr_d(u_linebuffer_rsci_radr_d_iff),
      .d_d(u_linebuffer_rsci_d_d),
      .we_d(u_linebuffer_rsci_we_d_iff),
      .re_d(u_linebuffer_rsci_re_d_iff),
      .q_d(u_linebuffer_rsci_q_d),
      .port_0_r_ram_ir_internal_RMASK_B_d(u_linebuffer_rsci_re_d_iff),
      .port_1_w_ram_ir_internal_WMASK_B_d(u_linebuffer_rsci_we_d_iff)
    );
  yfc_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_295_10_12_4096_4096_10_5_gen v_linebuffer_rsci
      (
      .we(v_linebuffer_rsc_we),
      .d(v_linebuffer_rsc_d),
      .wadr(v_linebuffer_rsc_wadr),
      .q(v_linebuffer_rsc_q),
      .re(v_linebuffer_rsc_re),
      .radr(v_linebuffer_rsc_radr),
      .radr_d(u_linebuffer_rsci_radr_d_iff),
      .wadr_d(u_linebuffer_rsci_radr_d_iff),
      .d_d(v_linebuffer_rsci_d_d),
      .we_d(v_linebuffer_rsci_we_d_iff),
      .re_d(v_linebuffer_rsci_re_d_iff),
      .q_d(v_linebuffer_rsci_q_d),
      .port_0_r_ram_ir_internal_RMASK_B_d(v_linebuffer_rsci_re_d_iff),
      .port_1_w_ram_ir_internal_WMASK_B_d(v_linebuffer_rsci_we_d_iff)
    );
  yfc_core yfc_core_inst (
      .clk(clk),
      .arst_n(arst_n),
      .top_reg_frameWidth(top_reg_frameWidth),
      .top_reg_frameHeight(top_reg_frameHeight),
      .yfc_reg_m_nEb(yfc_reg_m_nEb),
      .yfc_reg_yuvpattern(yfc_reg_yuvpattern),
      .src_rsc_dat(src_rsc_dat),
      .src_rsc_vld(src_rsc_vld),
      .src_rsc_rdy(src_rsc_rdy),
      .y_dst_rsc_dat(y_dst_rsc_dat),
      .y_dst_rsc_vld(y_dst_rsc_vld),
      .y_dst_rsc_rdy(y_dst_rsc_rdy),
      .u_dst_rsc_dat(u_dst_rsc_dat),
      .u_dst_rsc_vld(u_dst_rsc_vld),
      .u_dst_rsc_rdy(u_dst_rsc_rdy),
      .v_dst_rsc_dat(v_dst_rsc_dat),
      .v_dst_rsc_vld(v_dst_rsc_vld),
      .v_dst_rsc_rdy(v_dst_rsc_rdy),
      .u_linebuffer_rsci_d_d(u_linebuffer_rsci_d_d),
      .u_linebuffer_rsci_q_d(u_linebuffer_rsci_q_d),
      .v_linebuffer_rsci_d_d(v_linebuffer_rsci_d_d),
      .v_linebuffer_rsci_q_d(v_linebuffer_rsci_q_d),
      .u_linebuffer_rsci_radr_d_pff(u_linebuffer_rsci_radr_d_iff),
      .u_linebuffer_rsci_we_d_pff(u_linebuffer_rsci_we_d_iff),
      .u_linebuffer_rsci_re_d_pff(u_linebuffer_rsci_re_d_iff),
      .v_linebuffer_rsci_we_d_pff(v_linebuffer_rsci_we_d_iff),
      .v_linebuffer_rsci_re_d_pff(v_linebuffer_rsci_re_d_iff)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    yuv444dns
// ------------------------------------------------------------------


module yuv444dns (
  clk, arst_n, top_reg_frameWidth, top_reg_frameHeight, top_reg_inputFormat, top_reg_imgPattern,
      top_reg_pipeMode, top_reg_blc, top_reg_shadowEb, top_reg_binningFrameWidth,
      top_reg_binningFrameHeight, top_reg_scalerFrameWidth, top_reg_scalerFrameHeight,
      yuvdns_reg_eb, yuvdns_reg_ysigma2, yuvdns_reg_yinvsigma2, yuvdns_reg_uvsigma2,
      yuvdns_reg_uvinvsigma2, yuvdns_reg_yfilt, yuvdns_reg_uvfilt, yuvdns_reg_yinvfilt,
      yuvdns_reg_uvinvfilt, yuvdns_reg_yH2, yuvdns_reg_yinvH2, yuvdns_reg_uvH2, yuvdns_reg_uvinvH2,
      src_y_rsc_dat, src_y_rsc_vld, src_y_rsc_rdy, src_u_rsc_dat, src_u_rsc_vld,
      src_u_rsc_rdy, src_v_rsc_dat, src_v_rsc_vld, src_v_rsc_rdy, dst_y_rsc_dat,
      dst_y_rsc_vld, dst_y_rsc_rdy, dst_u_rsc_dat, dst_u_rsc_vld, dst_u_rsc_rdy,
      dst_v_rsc_dat, dst_v_rsc_vld, dst_v_rsc_rdy
);
  input clk;
  input arst_n;
  input [12:0] top_reg_frameWidth;
  input [12:0] top_reg_frameHeight;
  input top_reg_inputFormat;
  input [1:0] top_reg_imgPattern;
  input [1:0] top_reg_pipeMode;
  input [8:0] top_reg_blc;
  input top_reg_shadowEb;
  input [12:0] top_reg_binningFrameWidth;
  input [12:0] top_reg_binningFrameHeight;
  input [12:0] top_reg_scalerFrameWidth;
  input [12:0] top_reg_scalerFrameHeight;
  input yuvdns_reg_eb;
  input [13:0] yuvdns_reg_ysigma2;
  input [9:0] yuvdns_reg_yinvsigma2;
  input [13:0] yuvdns_reg_uvsigma2;
  input [9:0] yuvdns_reg_uvinvsigma2;
  input [3:0] yuvdns_reg_yfilt;
  input [3:0] yuvdns_reg_uvfilt;
  input [4:0] yuvdns_reg_yinvfilt;
  input [4:0] yuvdns_reg_uvinvfilt;
  input [13:0] yuvdns_reg_yH2;
  input [17:0] yuvdns_reg_yinvH2;
  input [13:0] yuvdns_reg_uvH2;
  input [17:0] yuvdns_reg_uvinvH2;
  input [9:0] src_y_rsc_dat;
  input src_y_rsc_vld;
  output src_y_rsc_rdy;
  input [9:0] src_u_rsc_dat;
  input src_u_rsc_vld;
  output src_u_rsc_rdy;
  input [9:0] src_v_rsc_dat;
  input src_v_rsc_vld;
  output src_v_rsc_rdy;
  output [9:0] dst_y_rsc_dat;
  output dst_y_rsc_vld;
  input dst_y_rsc_rdy;
  output [9:0] dst_u_rsc_dat;
  output dst_u_rsc_vld;
  input dst_u_rsc_rdy;
  output [9:0] dst_v_rsc_dat;
  output dst_v_rsc_vld;
  input dst_v_rsc_rdy;


  // Interconnect Declarations
  wire [11:0] ylineBuf_rsc_0_0_i_adra_d;
  wire [9:0] ylineBuf_rsc_0_0_i_da_d;
  wire [1:0] ylineBuf_rsc_0_0_i_ena_d;
  wire [1:0] ylineBuf_rsc_0_0_i_wea_d;
  wire [19:0] ylineBuf_rsc_0_0_i_qa_d;
  wire [1:0] ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  wire [1:0] ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  wire [11:0] ylineBuf_rsc_1_0_i_adra_d;
  wire [9:0] ylineBuf_rsc_1_0_i_da_d;
  wire [1:0] ylineBuf_rsc_1_0_i_ena_d;
  wire [1:0] ylineBuf_rsc_1_0_i_wea_d;
  wire [19:0] ylineBuf_rsc_1_0_i_qa_d;
  wire [1:0] ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  wire [1:0] ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  wire [11:0] ylineBuf_rsc_2_0_i_adra_d;
  wire [9:0] ylineBuf_rsc_2_0_i_da_d;
  wire [1:0] ylineBuf_rsc_2_0_i_ena_d;
  wire [1:0] ylineBuf_rsc_2_0_i_wea_d;
  wire [19:0] ylineBuf_rsc_2_0_i_qa_d;
  wire [1:0] ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  wire [1:0] ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  wire [11:0] ylineBuf_rsc_3_0_i_adra_d;
  wire [9:0] ylineBuf_rsc_3_0_i_da_d;
  wire [1:0] ylineBuf_rsc_3_0_i_ena_d;
  wire [1:0] ylineBuf_rsc_3_0_i_wea_d;
  wire [19:0] ylineBuf_rsc_3_0_i_qa_d;
  wire [1:0] ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  wire [1:0] ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  wire [11:0] ylineBuf_rsc_4_0_i_adra_d;
  wire [9:0] ylineBuf_rsc_4_0_i_da_d;
  wire [1:0] ylineBuf_rsc_4_0_i_ena_d;
  wire [1:0] ylineBuf_rsc_4_0_i_wea_d;
  wire [19:0] ylineBuf_rsc_4_0_i_qa_d;
  wire [1:0] ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  wire [1:0] ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  wire [11:0] ylineBuf_rsc_5_0_i_adra_d;
  wire [9:0] ylineBuf_rsc_5_0_i_da_d;
  wire [1:0] ylineBuf_rsc_5_0_i_ena_d;
  wire [1:0] ylineBuf_rsc_5_0_i_wea_d;
  wire [19:0] ylineBuf_rsc_5_0_i_qa_d;
  wire [1:0] ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  wire [1:0] ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  wire [11:0] ylineBuf_rsc_6_0_i_adra_d;
  wire [9:0] ylineBuf_rsc_6_0_i_da_d;
  wire [1:0] ylineBuf_rsc_6_0_i_ena_d;
  wire [1:0] ylineBuf_rsc_6_0_i_wea_d;
  wire [19:0] ylineBuf_rsc_6_0_i_qa_d;
  wire [1:0] ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  wire [1:0] ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  wire [11:0] ylineBuf_rsc_7_0_i_adra_d;
  wire [9:0] ylineBuf_rsc_7_0_i_da_d;
  wire [1:0] ylineBuf_rsc_7_0_i_ena_d;
  wire [1:0] ylineBuf_rsc_7_0_i_wea_d;
  wire [19:0] ylineBuf_rsc_7_0_i_qa_d;
  wire [1:0] ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  wire [1:0] ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  wire [11:0] ulineBuf_rsc_0_0_i_adra_d;
  wire [9:0] ulineBuf_rsc_0_0_i_da_d;
  wire [1:0] ulineBuf_rsc_0_0_i_ena_d;
  wire [1:0] ulineBuf_rsc_0_0_i_wea_d;
  wire [19:0] ulineBuf_rsc_0_0_i_qa_d;
  wire [1:0] ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  wire [1:0] ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  wire [11:0] ulineBuf_rsc_1_0_i_adra_d;
  wire [9:0] ulineBuf_rsc_1_0_i_da_d;
  wire [1:0] ulineBuf_rsc_1_0_i_ena_d;
  wire [1:0] ulineBuf_rsc_1_0_i_wea_d;
  wire [19:0] ulineBuf_rsc_1_0_i_qa_d;
  wire [1:0] ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  wire [1:0] ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  wire [11:0] ulineBuf_rsc_2_0_i_adra_d;
  wire [9:0] ulineBuf_rsc_2_0_i_da_d;
  wire [1:0] ulineBuf_rsc_2_0_i_ena_d;
  wire [1:0] ulineBuf_rsc_2_0_i_wea_d;
  wire [19:0] ulineBuf_rsc_2_0_i_qa_d;
  wire [1:0] ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  wire [1:0] ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  wire [11:0] ulineBuf_rsc_3_0_i_adra_d;
  wire [9:0] ulineBuf_rsc_3_0_i_da_d;
  wire [1:0] ulineBuf_rsc_3_0_i_ena_d;
  wire [1:0] ulineBuf_rsc_3_0_i_wea_d;
  wire [19:0] ulineBuf_rsc_3_0_i_qa_d;
  wire [1:0] ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  wire [1:0] ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  wire [11:0] ulineBuf_rsc_4_0_i_adra_d;
  wire [9:0] ulineBuf_rsc_4_0_i_da_d;
  wire [1:0] ulineBuf_rsc_4_0_i_ena_d;
  wire [1:0] ulineBuf_rsc_4_0_i_wea_d;
  wire [19:0] ulineBuf_rsc_4_0_i_qa_d;
  wire [1:0] ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  wire [1:0] ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  wire [11:0] ulineBuf_rsc_5_0_i_adra_d;
  wire [9:0] ulineBuf_rsc_5_0_i_da_d;
  wire [1:0] ulineBuf_rsc_5_0_i_ena_d;
  wire [1:0] ulineBuf_rsc_5_0_i_wea_d;
  wire [19:0] ulineBuf_rsc_5_0_i_qa_d;
  wire [1:0] ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  wire [1:0] ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  wire [11:0] ulineBuf_rsc_6_0_i_adra_d;
  wire [9:0] ulineBuf_rsc_6_0_i_da_d;
  wire [1:0] ulineBuf_rsc_6_0_i_ena_d;
  wire [1:0] ulineBuf_rsc_6_0_i_wea_d;
  wire [19:0] ulineBuf_rsc_6_0_i_qa_d;
  wire [1:0] ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  wire [1:0] ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  wire [11:0] ulineBuf_rsc_7_0_i_adra_d;
  wire [9:0] ulineBuf_rsc_7_0_i_da_d;
  wire [1:0] ulineBuf_rsc_7_0_i_ena_d;
  wire [1:0] ulineBuf_rsc_7_0_i_wea_d;
  wire [19:0] ulineBuf_rsc_7_0_i_qa_d;
  wire [1:0] ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  wire [1:0] ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  wire [11:0] vlineBuf_rsc_0_0_i_adra_d;
  wire [9:0] vlineBuf_rsc_0_0_i_da_d;
  wire [1:0] vlineBuf_rsc_0_0_i_ena_d;
  wire [1:0] vlineBuf_rsc_0_0_i_wea_d;
  wire [19:0] vlineBuf_rsc_0_0_i_qa_d;
  wire [1:0] vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  wire [1:0] vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  wire [11:0] vlineBuf_rsc_1_0_i_adra_d;
  wire [9:0] vlineBuf_rsc_1_0_i_da_d;
  wire [1:0] vlineBuf_rsc_1_0_i_ena_d;
  wire [1:0] vlineBuf_rsc_1_0_i_wea_d;
  wire [19:0] vlineBuf_rsc_1_0_i_qa_d;
  wire [1:0] vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  wire [1:0] vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  wire [11:0] vlineBuf_rsc_2_0_i_adra_d;
  wire [9:0] vlineBuf_rsc_2_0_i_da_d;
  wire [1:0] vlineBuf_rsc_2_0_i_ena_d;
  wire [1:0] vlineBuf_rsc_2_0_i_wea_d;
  wire [19:0] vlineBuf_rsc_2_0_i_qa_d;
  wire [1:0] vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  wire [1:0] vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  wire [11:0] vlineBuf_rsc_3_0_i_adra_d;
  wire [9:0] vlineBuf_rsc_3_0_i_da_d;
  wire [1:0] vlineBuf_rsc_3_0_i_ena_d;
  wire [1:0] vlineBuf_rsc_3_0_i_wea_d;
  wire [19:0] vlineBuf_rsc_3_0_i_qa_d;
  wire [1:0] vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  wire [1:0] vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  wire [11:0] vlineBuf_rsc_4_0_i_adra_d;
  wire [9:0] vlineBuf_rsc_4_0_i_da_d;
  wire [1:0] vlineBuf_rsc_4_0_i_ena_d;
  wire [1:0] vlineBuf_rsc_4_0_i_wea_d;
  wire [19:0] vlineBuf_rsc_4_0_i_qa_d;
  wire [1:0] vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  wire [1:0] vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  wire [11:0] vlineBuf_rsc_5_0_i_adra_d;
  wire [9:0] vlineBuf_rsc_5_0_i_da_d;
  wire [1:0] vlineBuf_rsc_5_0_i_ena_d;
  wire [1:0] vlineBuf_rsc_5_0_i_wea_d;
  wire [19:0] vlineBuf_rsc_5_0_i_qa_d;
  wire [1:0] vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  wire [1:0] vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  wire [11:0] vlineBuf_rsc_6_0_i_adra_d;
  wire [9:0] vlineBuf_rsc_6_0_i_da_d;
  wire [1:0] vlineBuf_rsc_6_0_i_ena_d;
  wire [1:0] vlineBuf_rsc_6_0_i_wea_d;
  wire [19:0] vlineBuf_rsc_6_0_i_qa_d;
  wire [1:0] vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  wire [1:0] vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  wire [11:0] vlineBuf_rsc_7_0_i_adra_d;
  wire [9:0] vlineBuf_rsc_7_0_i_da_d;
  wire [1:0] vlineBuf_rsc_7_0_i_ena_d;
  wire [1:0] vlineBuf_rsc_7_0_i_wea_d;
  wire [19:0] vlineBuf_rsc_7_0_i_qa_d;
  wire [1:0] vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  wire [1:0] vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  wire [9:0] ylineBuf_rsc_0_0_qb;
  wire ylineBuf_rsc_0_0_web;
  wire ylineBuf_rsc_0_0_enb;
  wire [9:0] ylineBuf_rsc_0_0_db;
  wire [11:0] ylineBuf_rsc_0_0_adrb;
  wire [9:0] ylineBuf_rsc_0_0_qa;
  wire ylineBuf_rsc_0_0_wea;
  wire ylineBuf_rsc_0_0_ena;
  wire [9:0] ylineBuf_rsc_0_0_da;
  wire [11:0] ylineBuf_rsc_0_0_adra;
  wire [9:0] ylineBuf_rsc_1_0_qb;
  wire ylineBuf_rsc_1_0_web;
  wire ylineBuf_rsc_1_0_enb;
  wire [9:0] ylineBuf_rsc_1_0_db;
  wire [11:0] ylineBuf_rsc_1_0_adrb;
  wire [9:0] ylineBuf_rsc_1_0_qa;
  wire ylineBuf_rsc_1_0_wea;
  wire ylineBuf_rsc_1_0_ena;
  wire [9:0] ylineBuf_rsc_1_0_da;
  wire [11:0] ylineBuf_rsc_1_0_adra;
  wire [9:0] ylineBuf_rsc_2_0_qb;
  wire ylineBuf_rsc_2_0_web;
  wire ylineBuf_rsc_2_0_enb;
  wire [9:0] ylineBuf_rsc_2_0_db;
  wire [11:0] ylineBuf_rsc_2_0_adrb;
  wire [9:0] ylineBuf_rsc_2_0_qa;
  wire ylineBuf_rsc_2_0_wea;
  wire ylineBuf_rsc_2_0_ena;
  wire [9:0] ylineBuf_rsc_2_0_da;
  wire [11:0] ylineBuf_rsc_2_0_adra;
  wire [9:0] ylineBuf_rsc_3_0_qb;
  wire ylineBuf_rsc_3_0_web;
  wire ylineBuf_rsc_3_0_enb;
  wire [9:0] ylineBuf_rsc_3_0_db;
  wire [11:0] ylineBuf_rsc_3_0_adrb;
  wire [9:0] ylineBuf_rsc_3_0_qa;
  wire ylineBuf_rsc_3_0_wea;
  wire ylineBuf_rsc_3_0_ena;
  wire [9:0] ylineBuf_rsc_3_0_da;
  wire [11:0] ylineBuf_rsc_3_0_adra;
  wire [9:0] ylineBuf_rsc_4_0_qb;
  wire ylineBuf_rsc_4_0_web;
  wire ylineBuf_rsc_4_0_enb;
  wire [9:0] ylineBuf_rsc_4_0_db;
  wire [11:0] ylineBuf_rsc_4_0_adrb;
  wire [9:0] ylineBuf_rsc_4_0_qa;
  wire ylineBuf_rsc_4_0_wea;
  wire ylineBuf_rsc_4_0_ena;
  wire [9:0] ylineBuf_rsc_4_0_da;
  wire [11:0] ylineBuf_rsc_4_0_adra;
  wire [9:0] ylineBuf_rsc_5_0_qb;
  wire ylineBuf_rsc_5_0_web;
  wire ylineBuf_rsc_5_0_enb;
  wire [9:0] ylineBuf_rsc_5_0_db;
  wire [11:0] ylineBuf_rsc_5_0_adrb;
  wire [9:0] ylineBuf_rsc_5_0_qa;
  wire ylineBuf_rsc_5_0_wea;
  wire ylineBuf_rsc_5_0_ena;
  wire [9:0] ylineBuf_rsc_5_0_da;
  wire [11:0] ylineBuf_rsc_5_0_adra;
  wire [9:0] ylineBuf_rsc_6_0_qb;
  wire ylineBuf_rsc_6_0_web;
  wire ylineBuf_rsc_6_0_enb;
  wire [9:0] ylineBuf_rsc_6_0_db;
  wire [11:0] ylineBuf_rsc_6_0_adrb;
  wire [9:0] ylineBuf_rsc_6_0_qa;
  wire ylineBuf_rsc_6_0_wea;
  wire ylineBuf_rsc_6_0_ena;
  wire [9:0] ylineBuf_rsc_6_0_da;
  wire [11:0] ylineBuf_rsc_6_0_adra;
  wire [9:0] ylineBuf_rsc_7_0_qb;
  wire ylineBuf_rsc_7_0_web;
  wire ylineBuf_rsc_7_0_enb;
  wire [9:0] ylineBuf_rsc_7_0_db;
  wire [11:0] ylineBuf_rsc_7_0_adrb;
  wire [9:0] ylineBuf_rsc_7_0_qa;
  wire ylineBuf_rsc_7_0_wea;
  wire ylineBuf_rsc_7_0_ena;
  wire [9:0] ylineBuf_rsc_7_0_da;
  wire [11:0] ylineBuf_rsc_7_0_adra;
  wire [9:0] ulineBuf_rsc_0_0_qb;
  wire ulineBuf_rsc_0_0_web;
  wire ulineBuf_rsc_0_0_enb;
  wire [9:0] ulineBuf_rsc_0_0_db;
  wire [11:0] ulineBuf_rsc_0_0_adrb;
  wire [9:0] ulineBuf_rsc_0_0_qa;
  wire ulineBuf_rsc_0_0_wea;
  wire ulineBuf_rsc_0_0_ena;
  wire [9:0] ulineBuf_rsc_0_0_da;
  wire [11:0] ulineBuf_rsc_0_0_adra;
  wire [9:0] ulineBuf_rsc_1_0_qb;
  wire ulineBuf_rsc_1_0_web;
  wire ulineBuf_rsc_1_0_enb;
  wire [9:0] ulineBuf_rsc_1_0_db;
  wire [11:0] ulineBuf_rsc_1_0_adrb;
  wire [9:0] ulineBuf_rsc_1_0_qa;
  wire ulineBuf_rsc_1_0_wea;
  wire ulineBuf_rsc_1_0_ena;
  wire [9:0] ulineBuf_rsc_1_0_da;
  wire [11:0] ulineBuf_rsc_1_0_adra;
  wire [9:0] ulineBuf_rsc_2_0_qb;
  wire ulineBuf_rsc_2_0_web;
  wire ulineBuf_rsc_2_0_enb;
  wire [9:0] ulineBuf_rsc_2_0_db;
  wire [11:0] ulineBuf_rsc_2_0_adrb;
  wire [9:0] ulineBuf_rsc_2_0_qa;
  wire ulineBuf_rsc_2_0_wea;
  wire ulineBuf_rsc_2_0_ena;
  wire [9:0] ulineBuf_rsc_2_0_da;
  wire [11:0] ulineBuf_rsc_2_0_adra;
  wire [9:0] ulineBuf_rsc_3_0_qb;
  wire ulineBuf_rsc_3_0_web;
  wire ulineBuf_rsc_3_0_enb;
  wire [9:0] ulineBuf_rsc_3_0_db;
  wire [11:0] ulineBuf_rsc_3_0_adrb;
  wire [9:0] ulineBuf_rsc_3_0_qa;
  wire ulineBuf_rsc_3_0_wea;
  wire ulineBuf_rsc_3_0_ena;
  wire [9:0] ulineBuf_rsc_3_0_da;
  wire [11:0] ulineBuf_rsc_3_0_adra;
  wire [9:0] ulineBuf_rsc_4_0_qb;
  wire ulineBuf_rsc_4_0_web;
  wire ulineBuf_rsc_4_0_enb;
  wire [9:0] ulineBuf_rsc_4_0_db;
  wire [11:0] ulineBuf_rsc_4_0_adrb;
  wire [9:0] ulineBuf_rsc_4_0_qa;
  wire ulineBuf_rsc_4_0_wea;
  wire ulineBuf_rsc_4_0_ena;
  wire [9:0] ulineBuf_rsc_4_0_da;
  wire [11:0] ulineBuf_rsc_4_0_adra;
  wire [9:0] ulineBuf_rsc_5_0_qb;
  wire ulineBuf_rsc_5_0_web;
  wire ulineBuf_rsc_5_0_enb;
  wire [9:0] ulineBuf_rsc_5_0_db;
  wire [11:0] ulineBuf_rsc_5_0_adrb;
  wire [9:0] ulineBuf_rsc_5_0_qa;
  wire ulineBuf_rsc_5_0_wea;
  wire ulineBuf_rsc_5_0_ena;
  wire [9:0] ulineBuf_rsc_5_0_da;
  wire [11:0] ulineBuf_rsc_5_0_adra;
  wire [9:0] ulineBuf_rsc_6_0_qb;
  wire ulineBuf_rsc_6_0_web;
  wire ulineBuf_rsc_6_0_enb;
  wire [9:0] ulineBuf_rsc_6_0_db;
  wire [11:0] ulineBuf_rsc_6_0_adrb;
  wire [9:0] ulineBuf_rsc_6_0_qa;
  wire ulineBuf_rsc_6_0_wea;
  wire ulineBuf_rsc_6_0_ena;
  wire [9:0] ulineBuf_rsc_6_0_da;
  wire [11:0] ulineBuf_rsc_6_0_adra;
  wire [9:0] ulineBuf_rsc_7_0_qb;
  wire ulineBuf_rsc_7_0_web;
  wire ulineBuf_rsc_7_0_enb;
  wire [9:0] ulineBuf_rsc_7_0_db;
  wire [11:0] ulineBuf_rsc_7_0_adrb;
  wire [9:0] ulineBuf_rsc_7_0_qa;
  wire ulineBuf_rsc_7_0_wea;
  wire ulineBuf_rsc_7_0_ena;
  wire [9:0] ulineBuf_rsc_7_0_da;
  wire [11:0] ulineBuf_rsc_7_0_adra;
  wire [9:0] vlineBuf_rsc_0_0_qb;
  wire vlineBuf_rsc_0_0_web;
  wire vlineBuf_rsc_0_0_enb;
  wire [9:0] vlineBuf_rsc_0_0_db;
  wire [11:0] vlineBuf_rsc_0_0_adrb;
  wire [9:0] vlineBuf_rsc_0_0_qa;
  wire vlineBuf_rsc_0_0_wea;
  wire vlineBuf_rsc_0_0_ena;
  wire [9:0] vlineBuf_rsc_0_0_da;
  wire [11:0] vlineBuf_rsc_0_0_adra;
  wire [9:0] vlineBuf_rsc_1_0_qb;
  wire vlineBuf_rsc_1_0_web;
  wire vlineBuf_rsc_1_0_enb;
  wire [9:0] vlineBuf_rsc_1_0_db;
  wire [11:0] vlineBuf_rsc_1_0_adrb;
  wire [9:0] vlineBuf_rsc_1_0_qa;
  wire vlineBuf_rsc_1_0_wea;
  wire vlineBuf_rsc_1_0_ena;
  wire [9:0] vlineBuf_rsc_1_0_da;
  wire [11:0] vlineBuf_rsc_1_0_adra;
  wire [9:0] vlineBuf_rsc_2_0_qb;
  wire vlineBuf_rsc_2_0_web;
  wire vlineBuf_rsc_2_0_enb;
  wire [9:0] vlineBuf_rsc_2_0_db;
  wire [11:0] vlineBuf_rsc_2_0_adrb;
  wire [9:0] vlineBuf_rsc_2_0_qa;
  wire vlineBuf_rsc_2_0_wea;
  wire vlineBuf_rsc_2_0_ena;
  wire [9:0] vlineBuf_rsc_2_0_da;
  wire [11:0] vlineBuf_rsc_2_0_adra;
  wire [9:0] vlineBuf_rsc_3_0_qb;
  wire vlineBuf_rsc_3_0_web;
  wire vlineBuf_rsc_3_0_enb;
  wire [9:0] vlineBuf_rsc_3_0_db;
  wire [11:0] vlineBuf_rsc_3_0_adrb;
  wire [9:0] vlineBuf_rsc_3_0_qa;
  wire vlineBuf_rsc_3_0_wea;
  wire vlineBuf_rsc_3_0_ena;
  wire [9:0] vlineBuf_rsc_3_0_da;
  wire [11:0] vlineBuf_rsc_3_0_adra;
  wire [9:0] vlineBuf_rsc_4_0_qb;
  wire vlineBuf_rsc_4_0_web;
  wire vlineBuf_rsc_4_0_enb;
  wire [9:0] vlineBuf_rsc_4_0_db;
  wire [11:0] vlineBuf_rsc_4_0_adrb;
  wire [9:0] vlineBuf_rsc_4_0_qa;
  wire vlineBuf_rsc_4_0_wea;
  wire vlineBuf_rsc_4_0_ena;
  wire [9:0] vlineBuf_rsc_4_0_da;
  wire [11:0] vlineBuf_rsc_4_0_adra;
  wire [9:0] vlineBuf_rsc_5_0_qb;
  wire vlineBuf_rsc_5_0_web;
  wire vlineBuf_rsc_5_0_enb;
  wire [9:0] vlineBuf_rsc_5_0_db;
  wire [11:0] vlineBuf_rsc_5_0_adrb;
  wire [9:0] vlineBuf_rsc_5_0_qa;
  wire vlineBuf_rsc_5_0_wea;
  wire vlineBuf_rsc_5_0_ena;
  wire [9:0] vlineBuf_rsc_5_0_da;
  wire [11:0] vlineBuf_rsc_5_0_adra;
  wire [9:0] vlineBuf_rsc_6_0_qb;
  wire vlineBuf_rsc_6_0_web;
  wire vlineBuf_rsc_6_0_enb;
  wire [9:0] vlineBuf_rsc_6_0_db;
  wire [11:0] vlineBuf_rsc_6_0_adrb;
  wire [9:0] vlineBuf_rsc_6_0_qa;
  wire vlineBuf_rsc_6_0_wea;
  wire vlineBuf_rsc_6_0_ena;
  wire [9:0] vlineBuf_rsc_6_0_da;
  wire [11:0] vlineBuf_rsc_6_0_adra;
  wire [9:0] vlineBuf_rsc_7_0_qb;
  wire vlineBuf_rsc_7_0_web;
  wire vlineBuf_rsc_7_0_enb;
  wire [9:0] vlineBuf_rsc_7_0_db;
  wire [11:0] vlineBuf_rsc_7_0_adrb;
  wire [9:0] vlineBuf_rsc_7_0_qa;
  wire vlineBuf_rsc_7_0_wea;
  wire vlineBuf_rsc_7_0_ena;
  wire [9:0] vlineBuf_rsc_7_0_da;
  wire [11:0] vlineBuf_rsc_7_0_adra;


  // Interconnect Declarations for Component Instantiations 
  wire [23:0] nl_ylineBuf_rsc_0_0_i_adra_d;
  assign nl_ylineBuf_rsc_0_0_i_adra_d = {12'b000000000000 , ylineBuf_rsc_0_0_i_adra_d};
  wire [19:0] nl_ylineBuf_rsc_0_0_i_da_d;
  assign nl_ylineBuf_rsc_0_0_i_da_d = {10'b0000000000 , ylineBuf_rsc_0_0_i_da_d};
  wire [23:0] nl_ylineBuf_rsc_1_0_i_adra_d;
  assign nl_ylineBuf_rsc_1_0_i_adra_d = {12'b000000000000 , ylineBuf_rsc_1_0_i_adra_d};
  wire [19:0] nl_ylineBuf_rsc_1_0_i_da_d;
  assign nl_ylineBuf_rsc_1_0_i_da_d = {10'b0000000000 , ylineBuf_rsc_1_0_i_da_d};
  wire [23:0] nl_ylineBuf_rsc_2_0_i_adra_d;
  assign nl_ylineBuf_rsc_2_0_i_adra_d = {12'b000000000000 , ylineBuf_rsc_2_0_i_adra_d};
  wire [19:0] nl_ylineBuf_rsc_2_0_i_da_d;
  assign nl_ylineBuf_rsc_2_0_i_da_d = {10'b0000000000 , ylineBuf_rsc_2_0_i_da_d};
  wire [23:0] nl_ylineBuf_rsc_3_0_i_adra_d;
  assign nl_ylineBuf_rsc_3_0_i_adra_d = {12'b000000000000 , ylineBuf_rsc_3_0_i_adra_d};
  wire [19:0] nl_ylineBuf_rsc_3_0_i_da_d;
  assign nl_ylineBuf_rsc_3_0_i_da_d = {10'b0000000000 , ylineBuf_rsc_3_0_i_da_d};
  wire [23:0] nl_ylineBuf_rsc_4_0_i_adra_d;
  assign nl_ylineBuf_rsc_4_0_i_adra_d = {12'b000000000000 , ylineBuf_rsc_4_0_i_adra_d};
  wire [19:0] nl_ylineBuf_rsc_4_0_i_da_d;
  assign nl_ylineBuf_rsc_4_0_i_da_d = {10'b0000000000 , ylineBuf_rsc_4_0_i_da_d};
  wire [23:0] nl_ylineBuf_rsc_5_0_i_adra_d;
  assign nl_ylineBuf_rsc_5_0_i_adra_d = {12'b000000000000 , ylineBuf_rsc_5_0_i_adra_d};
  wire [19:0] nl_ylineBuf_rsc_5_0_i_da_d;
  assign nl_ylineBuf_rsc_5_0_i_da_d = {10'b0000000000 , ylineBuf_rsc_5_0_i_da_d};
  wire [23:0] nl_ylineBuf_rsc_6_0_i_adra_d;
  assign nl_ylineBuf_rsc_6_0_i_adra_d = {12'b000000000000 , ylineBuf_rsc_6_0_i_adra_d};
  wire [19:0] nl_ylineBuf_rsc_6_0_i_da_d;
  assign nl_ylineBuf_rsc_6_0_i_da_d = {10'b0000000000 , ylineBuf_rsc_6_0_i_da_d};
  wire [23:0] nl_ylineBuf_rsc_7_0_i_adra_d;
  assign nl_ylineBuf_rsc_7_0_i_adra_d = {12'b000000000000 , ylineBuf_rsc_7_0_i_adra_d};
  wire [19:0] nl_ylineBuf_rsc_7_0_i_da_d;
  assign nl_ylineBuf_rsc_7_0_i_da_d = {10'b0000000000 , ylineBuf_rsc_7_0_i_da_d};
  wire [23:0] nl_ulineBuf_rsc_0_0_i_adra_d;
  assign nl_ulineBuf_rsc_0_0_i_adra_d = {12'b000000000000 , ulineBuf_rsc_0_0_i_adra_d};
  wire [19:0] nl_ulineBuf_rsc_0_0_i_da_d;
  assign nl_ulineBuf_rsc_0_0_i_da_d = {10'b0000000000 , ulineBuf_rsc_0_0_i_da_d};
  wire [23:0] nl_ulineBuf_rsc_1_0_i_adra_d;
  assign nl_ulineBuf_rsc_1_0_i_adra_d = {12'b000000000000 , ulineBuf_rsc_1_0_i_adra_d};
  wire [19:0] nl_ulineBuf_rsc_1_0_i_da_d;
  assign nl_ulineBuf_rsc_1_0_i_da_d = {10'b0000000000 , ulineBuf_rsc_1_0_i_da_d};
  wire [23:0] nl_ulineBuf_rsc_2_0_i_adra_d;
  assign nl_ulineBuf_rsc_2_0_i_adra_d = {12'b000000000000 , ulineBuf_rsc_2_0_i_adra_d};
  wire [19:0] nl_ulineBuf_rsc_2_0_i_da_d;
  assign nl_ulineBuf_rsc_2_0_i_da_d = {10'b0000000000 , ulineBuf_rsc_2_0_i_da_d};
  wire [23:0] nl_ulineBuf_rsc_3_0_i_adra_d;
  assign nl_ulineBuf_rsc_3_0_i_adra_d = {12'b000000000000 , ulineBuf_rsc_3_0_i_adra_d};
  wire [19:0] nl_ulineBuf_rsc_3_0_i_da_d;
  assign nl_ulineBuf_rsc_3_0_i_da_d = {10'b0000000000 , ulineBuf_rsc_3_0_i_da_d};
  wire [23:0] nl_ulineBuf_rsc_4_0_i_adra_d;
  assign nl_ulineBuf_rsc_4_0_i_adra_d = {12'b000000000000 , ulineBuf_rsc_4_0_i_adra_d};
  wire [19:0] nl_ulineBuf_rsc_4_0_i_da_d;
  assign nl_ulineBuf_rsc_4_0_i_da_d = {10'b0000000000 , ulineBuf_rsc_4_0_i_da_d};
  wire [23:0] nl_ulineBuf_rsc_5_0_i_adra_d;
  assign nl_ulineBuf_rsc_5_0_i_adra_d = {12'b000000000000 , ulineBuf_rsc_5_0_i_adra_d};
  wire [19:0] nl_ulineBuf_rsc_5_0_i_da_d;
  assign nl_ulineBuf_rsc_5_0_i_da_d = {10'b0000000000 , ulineBuf_rsc_5_0_i_da_d};
  wire [23:0] nl_ulineBuf_rsc_6_0_i_adra_d;
  assign nl_ulineBuf_rsc_6_0_i_adra_d = {12'b000000000000 , ulineBuf_rsc_6_0_i_adra_d};
  wire [19:0] nl_ulineBuf_rsc_6_0_i_da_d;
  assign nl_ulineBuf_rsc_6_0_i_da_d = {10'b0000000000 , ulineBuf_rsc_6_0_i_da_d};
  wire [23:0] nl_ulineBuf_rsc_7_0_i_adra_d;
  assign nl_ulineBuf_rsc_7_0_i_adra_d = {12'b000000000000 , ulineBuf_rsc_7_0_i_adra_d};
  wire [19:0] nl_ulineBuf_rsc_7_0_i_da_d;
  assign nl_ulineBuf_rsc_7_0_i_da_d = {10'b0000000000 , ulineBuf_rsc_7_0_i_da_d};
  wire [23:0] nl_vlineBuf_rsc_0_0_i_adra_d;
  assign nl_vlineBuf_rsc_0_0_i_adra_d = {12'b000000000000 , vlineBuf_rsc_0_0_i_adra_d};
  wire [19:0] nl_vlineBuf_rsc_0_0_i_da_d;
  assign nl_vlineBuf_rsc_0_0_i_da_d = {10'b0000000000 , vlineBuf_rsc_0_0_i_da_d};
  wire [23:0] nl_vlineBuf_rsc_1_0_i_adra_d;
  assign nl_vlineBuf_rsc_1_0_i_adra_d = {12'b000000000000 , vlineBuf_rsc_1_0_i_adra_d};
  wire [19:0] nl_vlineBuf_rsc_1_0_i_da_d;
  assign nl_vlineBuf_rsc_1_0_i_da_d = {10'b0000000000 , vlineBuf_rsc_1_0_i_da_d};
  wire [23:0] nl_vlineBuf_rsc_2_0_i_adra_d;
  assign nl_vlineBuf_rsc_2_0_i_adra_d = {12'b000000000000 , vlineBuf_rsc_2_0_i_adra_d};
  wire [19:0] nl_vlineBuf_rsc_2_0_i_da_d;
  assign nl_vlineBuf_rsc_2_0_i_da_d = {10'b0000000000 , vlineBuf_rsc_2_0_i_da_d};
  wire [23:0] nl_vlineBuf_rsc_3_0_i_adra_d;
  assign nl_vlineBuf_rsc_3_0_i_adra_d = {12'b000000000000 , vlineBuf_rsc_3_0_i_adra_d};
  wire [19:0] nl_vlineBuf_rsc_3_0_i_da_d;
  assign nl_vlineBuf_rsc_3_0_i_da_d = {10'b0000000000 , vlineBuf_rsc_3_0_i_da_d};
  wire [23:0] nl_vlineBuf_rsc_4_0_i_adra_d;
  assign nl_vlineBuf_rsc_4_0_i_adra_d = {12'b000000000000 , vlineBuf_rsc_4_0_i_adra_d};
  wire [19:0] nl_vlineBuf_rsc_4_0_i_da_d;
  assign nl_vlineBuf_rsc_4_0_i_da_d = {10'b0000000000 , vlineBuf_rsc_4_0_i_da_d};
  wire [23:0] nl_vlineBuf_rsc_5_0_i_adra_d;
  assign nl_vlineBuf_rsc_5_0_i_adra_d = {12'b000000000000 , vlineBuf_rsc_5_0_i_adra_d};
  wire [19:0] nl_vlineBuf_rsc_5_0_i_da_d;
  assign nl_vlineBuf_rsc_5_0_i_da_d = {10'b0000000000 , vlineBuf_rsc_5_0_i_da_d};
  wire [23:0] nl_vlineBuf_rsc_6_0_i_adra_d;
  assign nl_vlineBuf_rsc_6_0_i_adra_d = {12'b000000000000 , vlineBuf_rsc_6_0_i_adra_d};
  wire [19:0] nl_vlineBuf_rsc_6_0_i_da_d;
  assign nl_vlineBuf_rsc_6_0_i_da_d = {10'b0000000000 , vlineBuf_rsc_6_0_i_da_d};
  wire [23:0] nl_vlineBuf_rsc_7_0_i_adra_d;
  assign nl_vlineBuf_rsc_7_0_i_adra_d = {12'b000000000000 , vlineBuf_rsc_7_0_i_adra_d};
  wire [19:0] nl_vlineBuf_rsc_7_0_i_da_d;
  assign nl_vlineBuf_rsc_7_0_i_da_d = {10'b0000000000 , vlineBuf_rsc_7_0_i_da_d};
  ccs_ram_sync_dualport #(.data_width(32'sd10),
  .addr_width(32'sd12),
  .depth(32'sd4096)) ylineBuf_rsc_0_0_comp (
      .adra(ylineBuf_rsc_0_0_adra),
      .adrb(ylineBuf_rsc_0_0_adrb),
      .da(ylineBuf_rsc_0_0_da),
      .db(ylineBuf_rsc_0_0_db),
      .ena(ylineBuf_rsc_0_0_ena),
      .enb(ylineBuf_rsc_0_0_enb),
      .wea(ylineBuf_rsc_0_0_wea),
      .web(ylineBuf_rsc_0_0_web),
      .clk(clk),
      .qa(ylineBuf_rsc_0_0_qa),
      .qb(ylineBuf_rsc_0_0_qb)
    );
  ccs_ram_sync_dualport #(.data_width(32'sd10),
  .addr_width(32'sd12),
  .depth(32'sd4096)) ylineBuf_rsc_1_0_comp (
      .adra(ylineBuf_rsc_1_0_adra),
      .adrb(ylineBuf_rsc_1_0_adrb),
      .da(ylineBuf_rsc_1_0_da),
      .db(ylineBuf_rsc_1_0_db),
      .ena(ylineBuf_rsc_1_0_ena),
      .enb(ylineBuf_rsc_1_0_enb),
      .wea(ylineBuf_rsc_1_0_wea),
      .web(ylineBuf_rsc_1_0_web),
      .clk(clk),
      .qa(ylineBuf_rsc_1_0_qa),
      .qb(ylineBuf_rsc_1_0_qb)
    );
  ccs_ram_sync_dualport #(.data_width(32'sd10),
  .addr_width(32'sd12),
  .depth(32'sd4096)) ylineBuf_rsc_2_0_comp (
      .adra(ylineBuf_rsc_2_0_adra),
      .adrb(ylineBuf_rsc_2_0_adrb),
      .da(ylineBuf_rsc_2_0_da),
      .db(ylineBuf_rsc_2_0_db),
      .ena(ylineBuf_rsc_2_0_ena),
      .enb(ylineBuf_rsc_2_0_enb),
      .wea(ylineBuf_rsc_2_0_wea),
      .web(ylineBuf_rsc_2_0_web),
      .clk(clk),
      .qa(ylineBuf_rsc_2_0_qa),
      .qb(ylineBuf_rsc_2_0_qb)
    );
  ccs_ram_sync_dualport #(.data_width(32'sd10),
  .addr_width(32'sd12),
  .depth(32'sd4096)) ylineBuf_rsc_3_0_comp (
      .adra(ylineBuf_rsc_3_0_adra),
      .adrb(ylineBuf_rsc_3_0_adrb),
      .da(ylineBuf_rsc_3_0_da),
      .db(ylineBuf_rsc_3_0_db),
      .ena(ylineBuf_rsc_3_0_ena),
      .enb(ylineBuf_rsc_3_0_enb),
      .wea(ylineBuf_rsc_3_0_wea),
      .web(ylineBuf_rsc_3_0_web),
      .clk(clk),
      .qa(ylineBuf_rsc_3_0_qa),
      .qb(ylineBuf_rsc_3_0_qb)
    );
  ccs_ram_sync_dualport #(.data_width(32'sd10),
  .addr_width(32'sd12),
  .depth(32'sd4096)) ylineBuf_rsc_4_0_comp (
      .adra(ylineBuf_rsc_4_0_adra),
      .adrb(ylineBuf_rsc_4_0_adrb),
      .da(ylineBuf_rsc_4_0_da),
      .db(ylineBuf_rsc_4_0_db),
      .ena(ylineBuf_rsc_4_0_ena),
      .enb(ylineBuf_rsc_4_0_enb),
      .wea(ylineBuf_rsc_4_0_wea),
      .web(ylineBuf_rsc_4_0_web),
      .clk(clk),
      .qa(ylineBuf_rsc_4_0_qa),
      .qb(ylineBuf_rsc_4_0_qb)
    );
  ccs_ram_sync_dualport #(.data_width(32'sd10),
  .addr_width(32'sd12),
  .depth(32'sd4096)) ylineBuf_rsc_5_0_comp (
      .adra(ylineBuf_rsc_5_0_adra),
      .adrb(ylineBuf_rsc_5_0_adrb),
      .da(ylineBuf_rsc_5_0_da),
      .db(ylineBuf_rsc_5_0_db),
      .ena(ylineBuf_rsc_5_0_ena),
      .enb(ylineBuf_rsc_5_0_enb),
      .wea(ylineBuf_rsc_5_0_wea),
      .web(ylineBuf_rsc_5_0_web),
      .clk(clk),
      .qa(ylineBuf_rsc_5_0_qa),
      .qb(ylineBuf_rsc_5_0_qb)
    );
  ccs_ram_sync_dualport #(.data_width(32'sd10),
  .addr_width(32'sd12),
  .depth(32'sd4096)) ylineBuf_rsc_6_0_comp (
      .adra(ylineBuf_rsc_6_0_adra),
      .adrb(ylineBuf_rsc_6_0_adrb),
      .da(ylineBuf_rsc_6_0_da),
      .db(ylineBuf_rsc_6_0_db),
      .ena(ylineBuf_rsc_6_0_ena),
      .enb(ylineBuf_rsc_6_0_enb),
      .wea(ylineBuf_rsc_6_0_wea),
      .web(ylineBuf_rsc_6_0_web),
      .clk(clk),
      .qa(ylineBuf_rsc_6_0_qa),
      .qb(ylineBuf_rsc_6_0_qb)
    );
  ccs_ram_sync_dualport #(.data_width(32'sd10),
  .addr_width(32'sd12),
  .depth(32'sd4096)) ylineBuf_rsc_7_0_comp (
      .adra(ylineBuf_rsc_7_0_adra),
      .adrb(ylineBuf_rsc_7_0_adrb),
      .da(ylineBuf_rsc_7_0_da),
      .db(ylineBuf_rsc_7_0_db),
      .ena(ylineBuf_rsc_7_0_ena),
      .enb(ylineBuf_rsc_7_0_enb),
      .wea(ylineBuf_rsc_7_0_wea),
      .web(ylineBuf_rsc_7_0_web),
      .clk(clk),
      .qa(ylineBuf_rsc_7_0_qa),
      .qb(ylineBuf_rsc_7_0_qb)
    );
  ccs_ram_sync_dualport #(.data_width(32'sd10),
  .addr_width(32'sd12),
  .depth(32'sd4096)) ulineBuf_rsc_0_0_comp (
      .adra(ulineBuf_rsc_0_0_adra),
      .adrb(ulineBuf_rsc_0_0_adrb),
      .da(ulineBuf_rsc_0_0_da),
      .db(ulineBuf_rsc_0_0_db),
      .ena(ulineBuf_rsc_0_0_ena),
      .enb(ulineBuf_rsc_0_0_enb),
      .wea(ulineBuf_rsc_0_0_wea),
      .web(ulineBuf_rsc_0_0_web),
      .clk(clk),
      .qa(ulineBuf_rsc_0_0_qa),
      .qb(ulineBuf_rsc_0_0_qb)
    );
  ccs_ram_sync_dualport #(.data_width(32'sd10),
  .addr_width(32'sd12),
  .depth(32'sd4096)) ulineBuf_rsc_1_0_comp (
      .adra(ulineBuf_rsc_1_0_adra),
      .adrb(ulineBuf_rsc_1_0_adrb),
      .da(ulineBuf_rsc_1_0_da),
      .db(ulineBuf_rsc_1_0_db),
      .ena(ulineBuf_rsc_1_0_ena),
      .enb(ulineBuf_rsc_1_0_enb),
      .wea(ulineBuf_rsc_1_0_wea),
      .web(ulineBuf_rsc_1_0_web),
      .clk(clk),
      .qa(ulineBuf_rsc_1_0_qa),
      .qb(ulineBuf_rsc_1_0_qb)
    );
  ccs_ram_sync_dualport #(.data_width(32'sd10),
  .addr_width(32'sd12),
  .depth(32'sd4096)) ulineBuf_rsc_2_0_comp (
      .adra(ulineBuf_rsc_2_0_adra),
      .adrb(ulineBuf_rsc_2_0_adrb),
      .da(ulineBuf_rsc_2_0_da),
      .db(ulineBuf_rsc_2_0_db),
      .ena(ulineBuf_rsc_2_0_ena),
      .enb(ulineBuf_rsc_2_0_enb),
      .wea(ulineBuf_rsc_2_0_wea),
      .web(ulineBuf_rsc_2_0_web),
      .clk(clk),
      .qa(ulineBuf_rsc_2_0_qa),
      .qb(ulineBuf_rsc_2_0_qb)
    );
  ccs_ram_sync_dualport #(.data_width(32'sd10),
  .addr_width(32'sd12),
  .depth(32'sd4096)) ulineBuf_rsc_3_0_comp (
      .adra(ulineBuf_rsc_3_0_adra),
      .adrb(ulineBuf_rsc_3_0_adrb),
      .da(ulineBuf_rsc_3_0_da),
      .db(ulineBuf_rsc_3_0_db),
      .ena(ulineBuf_rsc_3_0_ena),
      .enb(ulineBuf_rsc_3_0_enb),
      .wea(ulineBuf_rsc_3_0_wea),
      .web(ulineBuf_rsc_3_0_web),
      .clk(clk),
      .qa(ulineBuf_rsc_3_0_qa),
      .qb(ulineBuf_rsc_3_0_qb)
    );
  ccs_ram_sync_dualport #(.data_width(32'sd10),
  .addr_width(32'sd12),
  .depth(32'sd4096)) ulineBuf_rsc_4_0_comp (
      .adra(ulineBuf_rsc_4_0_adra),
      .adrb(ulineBuf_rsc_4_0_adrb),
      .da(ulineBuf_rsc_4_0_da),
      .db(ulineBuf_rsc_4_0_db),
      .ena(ulineBuf_rsc_4_0_ena),
      .enb(ulineBuf_rsc_4_0_enb),
      .wea(ulineBuf_rsc_4_0_wea),
      .web(ulineBuf_rsc_4_0_web),
      .clk(clk),
      .qa(ulineBuf_rsc_4_0_qa),
      .qb(ulineBuf_rsc_4_0_qb)
    );
  ccs_ram_sync_dualport #(.data_width(32'sd10),
  .addr_width(32'sd12),
  .depth(32'sd4096)) ulineBuf_rsc_5_0_comp (
      .adra(ulineBuf_rsc_5_0_adra),
      .adrb(ulineBuf_rsc_5_0_adrb),
      .da(ulineBuf_rsc_5_0_da),
      .db(ulineBuf_rsc_5_0_db),
      .ena(ulineBuf_rsc_5_0_ena),
      .enb(ulineBuf_rsc_5_0_enb),
      .wea(ulineBuf_rsc_5_0_wea),
      .web(ulineBuf_rsc_5_0_web),
      .clk(clk),
      .qa(ulineBuf_rsc_5_0_qa),
      .qb(ulineBuf_rsc_5_0_qb)
    );
  ccs_ram_sync_dualport #(.data_width(32'sd10),
  .addr_width(32'sd12),
  .depth(32'sd4096)) ulineBuf_rsc_6_0_comp (
      .adra(ulineBuf_rsc_6_0_adra),
      .adrb(ulineBuf_rsc_6_0_adrb),
      .da(ulineBuf_rsc_6_0_da),
      .db(ulineBuf_rsc_6_0_db),
      .ena(ulineBuf_rsc_6_0_ena),
      .enb(ulineBuf_rsc_6_0_enb),
      .wea(ulineBuf_rsc_6_0_wea),
      .web(ulineBuf_rsc_6_0_web),
      .clk(clk),
      .qa(ulineBuf_rsc_6_0_qa),
      .qb(ulineBuf_rsc_6_0_qb)
    );
  ccs_ram_sync_dualport #(.data_width(32'sd10),
  .addr_width(32'sd12),
  .depth(32'sd4096)) ulineBuf_rsc_7_0_comp (
      .adra(ulineBuf_rsc_7_0_adra),
      .adrb(ulineBuf_rsc_7_0_adrb),
      .da(ulineBuf_rsc_7_0_da),
      .db(ulineBuf_rsc_7_0_db),
      .ena(ulineBuf_rsc_7_0_ena),
      .enb(ulineBuf_rsc_7_0_enb),
      .wea(ulineBuf_rsc_7_0_wea),
      .web(ulineBuf_rsc_7_0_web),
      .clk(clk),
      .qa(ulineBuf_rsc_7_0_qa),
      .qb(ulineBuf_rsc_7_0_qb)
    );
  ccs_ram_sync_dualport #(.data_width(32'sd10),
  .addr_width(32'sd12),
  .depth(32'sd4096)) vlineBuf_rsc_0_0_comp (
      .adra(vlineBuf_rsc_0_0_adra),
      .adrb(vlineBuf_rsc_0_0_adrb),
      .da(vlineBuf_rsc_0_0_da),
      .db(vlineBuf_rsc_0_0_db),
      .ena(vlineBuf_rsc_0_0_ena),
      .enb(vlineBuf_rsc_0_0_enb),
      .wea(vlineBuf_rsc_0_0_wea),
      .web(vlineBuf_rsc_0_0_web),
      .clk(clk),
      .qa(vlineBuf_rsc_0_0_qa),
      .qb(vlineBuf_rsc_0_0_qb)
    );
  ccs_ram_sync_dualport #(.data_width(32'sd10),
  .addr_width(32'sd12),
  .depth(32'sd4096)) vlineBuf_rsc_1_0_comp (
      .adra(vlineBuf_rsc_1_0_adra),
      .adrb(vlineBuf_rsc_1_0_adrb),
      .da(vlineBuf_rsc_1_0_da),
      .db(vlineBuf_rsc_1_0_db),
      .ena(vlineBuf_rsc_1_0_ena),
      .enb(vlineBuf_rsc_1_0_enb),
      .wea(vlineBuf_rsc_1_0_wea),
      .web(vlineBuf_rsc_1_0_web),
      .clk(clk),
      .qa(vlineBuf_rsc_1_0_qa),
      .qb(vlineBuf_rsc_1_0_qb)
    );
  ccs_ram_sync_dualport #(.data_width(32'sd10),
  .addr_width(32'sd12),
  .depth(32'sd4096)) vlineBuf_rsc_2_0_comp (
      .adra(vlineBuf_rsc_2_0_adra),
      .adrb(vlineBuf_rsc_2_0_adrb),
      .da(vlineBuf_rsc_2_0_da),
      .db(vlineBuf_rsc_2_0_db),
      .ena(vlineBuf_rsc_2_0_ena),
      .enb(vlineBuf_rsc_2_0_enb),
      .wea(vlineBuf_rsc_2_0_wea),
      .web(vlineBuf_rsc_2_0_web),
      .clk(clk),
      .qa(vlineBuf_rsc_2_0_qa),
      .qb(vlineBuf_rsc_2_0_qb)
    );
  ccs_ram_sync_dualport #(.data_width(32'sd10),
  .addr_width(32'sd12),
  .depth(32'sd4096)) vlineBuf_rsc_3_0_comp (
      .adra(vlineBuf_rsc_3_0_adra),
      .adrb(vlineBuf_rsc_3_0_adrb),
      .da(vlineBuf_rsc_3_0_da),
      .db(vlineBuf_rsc_3_0_db),
      .ena(vlineBuf_rsc_3_0_ena),
      .enb(vlineBuf_rsc_3_0_enb),
      .wea(vlineBuf_rsc_3_0_wea),
      .web(vlineBuf_rsc_3_0_web),
      .clk(clk),
      .qa(vlineBuf_rsc_3_0_qa),
      .qb(vlineBuf_rsc_3_0_qb)
    );
  ccs_ram_sync_dualport #(.data_width(32'sd10),
  .addr_width(32'sd12),
  .depth(32'sd4096)) vlineBuf_rsc_4_0_comp (
      .adra(vlineBuf_rsc_4_0_adra),
      .adrb(vlineBuf_rsc_4_0_adrb),
      .da(vlineBuf_rsc_4_0_da),
      .db(vlineBuf_rsc_4_0_db),
      .ena(vlineBuf_rsc_4_0_ena),
      .enb(vlineBuf_rsc_4_0_enb),
      .wea(vlineBuf_rsc_4_0_wea),
      .web(vlineBuf_rsc_4_0_web),
      .clk(clk),
      .qa(vlineBuf_rsc_4_0_qa),
      .qb(vlineBuf_rsc_4_0_qb)
    );
  ccs_ram_sync_dualport #(.data_width(32'sd10),
  .addr_width(32'sd12),
  .depth(32'sd4096)) vlineBuf_rsc_5_0_comp (
      .adra(vlineBuf_rsc_5_0_adra),
      .adrb(vlineBuf_rsc_5_0_adrb),
      .da(vlineBuf_rsc_5_0_da),
      .db(vlineBuf_rsc_5_0_db),
      .ena(vlineBuf_rsc_5_0_ena),
      .enb(vlineBuf_rsc_5_0_enb),
      .wea(vlineBuf_rsc_5_0_wea),
      .web(vlineBuf_rsc_5_0_web),
      .clk(clk),
      .qa(vlineBuf_rsc_5_0_qa),
      .qb(vlineBuf_rsc_5_0_qb)
    );
  ccs_ram_sync_dualport #(.data_width(32'sd10),
  .addr_width(32'sd12),
  .depth(32'sd4096)) vlineBuf_rsc_6_0_comp (
      .adra(vlineBuf_rsc_6_0_adra),
      .adrb(vlineBuf_rsc_6_0_adrb),
      .da(vlineBuf_rsc_6_0_da),
      .db(vlineBuf_rsc_6_0_db),
      .ena(vlineBuf_rsc_6_0_ena),
      .enb(vlineBuf_rsc_6_0_enb),
      .wea(vlineBuf_rsc_6_0_wea),
      .web(vlineBuf_rsc_6_0_web),
      .clk(clk),
      .qa(vlineBuf_rsc_6_0_qa),
      .qb(vlineBuf_rsc_6_0_qb)
    );
  ccs_ram_sync_dualport #(.data_width(32'sd10),
  .addr_width(32'sd12),
  .depth(32'sd4096)) vlineBuf_rsc_7_0_comp (
      .adra(vlineBuf_rsc_7_0_adra),
      .adrb(vlineBuf_rsc_7_0_adrb),
      .da(vlineBuf_rsc_7_0_da),
      .db(vlineBuf_rsc_7_0_db),
      .ena(vlineBuf_rsc_7_0_ena),
      .enb(vlineBuf_rsc_7_0_enb),
      .wea(vlineBuf_rsc_7_0_wea),
      .web(vlineBuf_rsc_7_0_web),
      .clk(clk),
      .qa(vlineBuf_rsc_7_0_qa),
      .qb(vlineBuf_rsc_7_0_qb)
    );
  yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_568_10_12_4096_4096_10_5_gen
      ylineBuf_rsc_0_0_i (
      .qb(ylineBuf_rsc_0_0_qb),
      .web(ylineBuf_rsc_0_0_web),
      .enb(ylineBuf_rsc_0_0_enb),
      .db(ylineBuf_rsc_0_0_db),
      .adrb(ylineBuf_rsc_0_0_adrb),
      .qa(ylineBuf_rsc_0_0_qa),
      .wea(ylineBuf_rsc_0_0_wea),
      .ena(ylineBuf_rsc_0_0_ena),
      .da(ylineBuf_rsc_0_0_da),
      .adra(ylineBuf_rsc_0_0_adra),
      .adra_d(nl_ylineBuf_rsc_0_0_i_adra_d[23:0]),
      .da_d(nl_ylineBuf_rsc_0_0_i_da_d[19:0]),
      .ena_d(ylineBuf_rsc_0_0_i_ena_d),
      .wea_d(ylineBuf_rsc_0_0_i_wea_d),
      .qa_d(ylineBuf_rsc_0_0_i_qa_d),
      .port_0_rw_ram_ir_internal_RMASK_B_d(ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .port_0_rw_ram_ir_internal_WMASK_B_d(ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d)
    );
  yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_569_10_12_4096_4096_10_5_gen
      ylineBuf_rsc_1_0_i (
      .qb(ylineBuf_rsc_1_0_qb),
      .web(ylineBuf_rsc_1_0_web),
      .enb(ylineBuf_rsc_1_0_enb),
      .db(ylineBuf_rsc_1_0_db),
      .adrb(ylineBuf_rsc_1_0_adrb),
      .qa(ylineBuf_rsc_1_0_qa),
      .wea(ylineBuf_rsc_1_0_wea),
      .ena(ylineBuf_rsc_1_0_ena),
      .da(ylineBuf_rsc_1_0_da),
      .adra(ylineBuf_rsc_1_0_adra),
      .adra_d(nl_ylineBuf_rsc_1_0_i_adra_d[23:0]),
      .da_d(nl_ylineBuf_rsc_1_0_i_da_d[19:0]),
      .ena_d(ylineBuf_rsc_1_0_i_ena_d),
      .wea_d(ylineBuf_rsc_1_0_i_wea_d),
      .qa_d(ylineBuf_rsc_1_0_i_qa_d),
      .port_0_rw_ram_ir_internal_RMASK_B_d(ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .port_0_rw_ram_ir_internal_WMASK_B_d(ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d)
    );
  yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_570_10_12_4096_4096_10_5_gen
      ylineBuf_rsc_2_0_i (
      .qb(ylineBuf_rsc_2_0_qb),
      .web(ylineBuf_rsc_2_0_web),
      .enb(ylineBuf_rsc_2_0_enb),
      .db(ylineBuf_rsc_2_0_db),
      .adrb(ylineBuf_rsc_2_0_adrb),
      .qa(ylineBuf_rsc_2_0_qa),
      .wea(ylineBuf_rsc_2_0_wea),
      .ena(ylineBuf_rsc_2_0_ena),
      .da(ylineBuf_rsc_2_0_da),
      .adra(ylineBuf_rsc_2_0_adra),
      .adra_d(nl_ylineBuf_rsc_2_0_i_adra_d[23:0]),
      .da_d(nl_ylineBuf_rsc_2_0_i_da_d[19:0]),
      .ena_d(ylineBuf_rsc_2_0_i_ena_d),
      .wea_d(ylineBuf_rsc_2_0_i_wea_d),
      .qa_d(ylineBuf_rsc_2_0_i_qa_d),
      .port_0_rw_ram_ir_internal_RMASK_B_d(ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .port_0_rw_ram_ir_internal_WMASK_B_d(ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d)
    );
  yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_571_10_12_4096_4096_10_5_gen
      ylineBuf_rsc_3_0_i (
      .qb(ylineBuf_rsc_3_0_qb),
      .web(ylineBuf_rsc_3_0_web),
      .enb(ylineBuf_rsc_3_0_enb),
      .db(ylineBuf_rsc_3_0_db),
      .adrb(ylineBuf_rsc_3_0_adrb),
      .qa(ylineBuf_rsc_3_0_qa),
      .wea(ylineBuf_rsc_3_0_wea),
      .ena(ylineBuf_rsc_3_0_ena),
      .da(ylineBuf_rsc_3_0_da),
      .adra(ylineBuf_rsc_3_0_adra),
      .adra_d(nl_ylineBuf_rsc_3_0_i_adra_d[23:0]),
      .da_d(nl_ylineBuf_rsc_3_0_i_da_d[19:0]),
      .ena_d(ylineBuf_rsc_3_0_i_ena_d),
      .wea_d(ylineBuf_rsc_3_0_i_wea_d),
      .qa_d(ylineBuf_rsc_3_0_i_qa_d),
      .port_0_rw_ram_ir_internal_RMASK_B_d(ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .port_0_rw_ram_ir_internal_WMASK_B_d(ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d)
    );
  yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_572_10_12_4096_4096_10_5_gen
      ylineBuf_rsc_4_0_i (
      .qb(ylineBuf_rsc_4_0_qb),
      .web(ylineBuf_rsc_4_0_web),
      .enb(ylineBuf_rsc_4_0_enb),
      .db(ylineBuf_rsc_4_0_db),
      .adrb(ylineBuf_rsc_4_0_adrb),
      .qa(ylineBuf_rsc_4_0_qa),
      .wea(ylineBuf_rsc_4_0_wea),
      .ena(ylineBuf_rsc_4_0_ena),
      .da(ylineBuf_rsc_4_0_da),
      .adra(ylineBuf_rsc_4_0_adra),
      .adra_d(nl_ylineBuf_rsc_4_0_i_adra_d[23:0]),
      .da_d(nl_ylineBuf_rsc_4_0_i_da_d[19:0]),
      .ena_d(ylineBuf_rsc_4_0_i_ena_d),
      .wea_d(ylineBuf_rsc_4_0_i_wea_d),
      .qa_d(ylineBuf_rsc_4_0_i_qa_d),
      .port_0_rw_ram_ir_internal_RMASK_B_d(ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .port_0_rw_ram_ir_internal_WMASK_B_d(ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d)
    );
  yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_573_10_12_4096_4096_10_5_gen
      ylineBuf_rsc_5_0_i (
      .qb(ylineBuf_rsc_5_0_qb),
      .web(ylineBuf_rsc_5_0_web),
      .enb(ylineBuf_rsc_5_0_enb),
      .db(ylineBuf_rsc_5_0_db),
      .adrb(ylineBuf_rsc_5_0_adrb),
      .qa(ylineBuf_rsc_5_0_qa),
      .wea(ylineBuf_rsc_5_0_wea),
      .ena(ylineBuf_rsc_5_0_ena),
      .da(ylineBuf_rsc_5_0_da),
      .adra(ylineBuf_rsc_5_0_adra),
      .adra_d(nl_ylineBuf_rsc_5_0_i_adra_d[23:0]),
      .da_d(nl_ylineBuf_rsc_5_0_i_da_d[19:0]),
      .ena_d(ylineBuf_rsc_5_0_i_ena_d),
      .wea_d(ylineBuf_rsc_5_0_i_wea_d),
      .qa_d(ylineBuf_rsc_5_0_i_qa_d),
      .port_0_rw_ram_ir_internal_RMASK_B_d(ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .port_0_rw_ram_ir_internal_WMASK_B_d(ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d)
    );
  yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_574_10_12_4096_4096_10_5_gen
      ylineBuf_rsc_6_0_i (
      .qb(ylineBuf_rsc_6_0_qb),
      .web(ylineBuf_rsc_6_0_web),
      .enb(ylineBuf_rsc_6_0_enb),
      .db(ylineBuf_rsc_6_0_db),
      .adrb(ylineBuf_rsc_6_0_adrb),
      .qa(ylineBuf_rsc_6_0_qa),
      .wea(ylineBuf_rsc_6_0_wea),
      .ena(ylineBuf_rsc_6_0_ena),
      .da(ylineBuf_rsc_6_0_da),
      .adra(ylineBuf_rsc_6_0_adra),
      .adra_d(nl_ylineBuf_rsc_6_0_i_adra_d[23:0]),
      .da_d(nl_ylineBuf_rsc_6_0_i_da_d[19:0]),
      .ena_d(ylineBuf_rsc_6_0_i_ena_d),
      .wea_d(ylineBuf_rsc_6_0_i_wea_d),
      .qa_d(ylineBuf_rsc_6_0_i_qa_d),
      .port_0_rw_ram_ir_internal_RMASK_B_d(ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .port_0_rw_ram_ir_internal_WMASK_B_d(ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d)
    );
  yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_575_10_12_4096_4096_10_5_gen
      ylineBuf_rsc_7_0_i (
      .qb(ylineBuf_rsc_7_0_qb),
      .web(ylineBuf_rsc_7_0_web),
      .enb(ylineBuf_rsc_7_0_enb),
      .db(ylineBuf_rsc_7_0_db),
      .adrb(ylineBuf_rsc_7_0_adrb),
      .qa(ylineBuf_rsc_7_0_qa),
      .wea(ylineBuf_rsc_7_0_wea),
      .ena(ylineBuf_rsc_7_0_ena),
      .da(ylineBuf_rsc_7_0_da),
      .adra(ylineBuf_rsc_7_0_adra),
      .adra_d(nl_ylineBuf_rsc_7_0_i_adra_d[23:0]),
      .da_d(nl_ylineBuf_rsc_7_0_i_da_d[19:0]),
      .ena_d(ylineBuf_rsc_7_0_i_ena_d),
      .wea_d(ylineBuf_rsc_7_0_i_wea_d),
      .qa_d(ylineBuf_rsc_7_0_i_qa_d),
      .port_0_rw_ram_ir_internal_RMASK_B_d(ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .port_0_rw_ram_ir_internal_WMASK_B_d(ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d)
    );
  yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_576_10_12_4096_4096_10_5_gen
      ulineBuf_rsc_0_0_i (
      .qb(ulineBuf_rsc_0_0_qb),
      .web(ulineBuf_rsc_0_0_web),
      .enb(ulineBuf_rsc_0_0_enb),
      .db(ulineBuf_rsc_0_0_db),
      .adrb(ulineBuf_rsc_0_0_adrb),
      .qa(ulineBuf_rsc_0_0_qa),
      .wea(ulineBuf_rsc_0_0_wea),
      .ena(ulineBuf_rsc_0_0_ena),
      .da(ulineBuf_rsc_0_0_da),
      .adra(ulineBuf_rsc_0_0_adra),
      .adra_d(nl_ulineBuf_rsc_0_0_i_adra_d[23:0]),
      .da_d(nl_ulineBuf_rsc_0_0_i_da_d[19:0]),
      .ena_d(ulineBuf_rsc_0_0_i_ena_d),
      .wea_d(ulineBuf_rsc_0_0_i_wea_d),
      .qa_d(ulineBuf_rsc_0_0_i_qa_d),
      .port_0_rw_ram_ir_internal_RMASK_B_d(ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .port_0_rw_ram_ir_internal_WMASK_B_d(ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d)
    );
  yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_577_10_12_4096_4096_10_5_gen
      ulineBuf_rsc_1_0_i (
      .qb(ulineBuf_rsc_1_0_qb),
      .web(ulineBuf_rsc_1_0_web),
      .enb(ulineBuf_rsc_1_0_enb),
      .db(ulineBuf_rsc_1_0_db),
      .adrb(ulineBuf_rsc_1_0_adrb),
      .qa(ulineBuf_rsc_1_0_qa),
      .wea(ulineBuf_rsc_1_0_wea),
      .ena(ulineBuf_rsc_1_0_ena),
      .da(ulineBuf_rsc_1_0_da),
      .adra(ulineBuf_rsc_1_0_adra),
      .adra_d(nl_ulineBuf_rsc_1_0_i_adra_d[23:0]),
      .da_d(nl_ulineBuf_rsc_1_0_i_da_d[19:0]),
      .ena_d(ulineBuf_rsc_1_0_i_ena_d),
      .wea_d(ulineBuf_rsc_1_0_i_wea_d),
      .qa_d(ulineBuf_rsc_1_0_i_qa_d),
      .port_0_rw_ram_ir_internal_RMASK_B_d(ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .port_0_rw_ram_ir_internal_WMASK_B_d(ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d)
    );
  yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_578_10_12_4096_4096_10_5_gen
      ulineBuf_rsc_2_0_i (
      .qb(ulineBuf_rsc_2_0_qb),
      .web(ulineBuf_rsc_2_0_web),
      .enb(ulineBuf_rsc_2_0_enb),
      .db(ulineBuf_rsc_2_0_db),
      .adrb(ulineBuf_rsc_2_0_adrb),
      .qa(ulineBuf_rsc_2_0_qa),
      .wea(ulineBuf_rsc_2_0_wea),
      .ena(ulineBuf_rsc_2_0_ena),
      .da(ulineBuf_rsc_2_0_da),
      .adra(ulineBuf_rsc_2_0_adra),
      .adra_d(nl_ulineBuf_rsc_2_0_i_adra_d[23:0]),
      .da_d(nl_ulineBuf_rsc_2_0_i_da_d[19:0]),
      .ena_d(ulineBuf_rsc_2_0_i_ena_d),
      .wea_d(ulineBuf_rsc_2_0_i_wea_d),
      .qa_d(ulineBuf_rsc_2_0_i_qa_d),
      .port_0_rw_ram_ir_internal_RMASK_B_d(ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .port_0_rw_ram_ir_internal_WMASK_B_d(ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d)
    );
  yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_579_10_12_4096_4096_10_5_gen
      ulineBuf_rsc_3_0_i (
      .qb(ulineBuf_rsc_3_0_qb),
      .web(ulineBuf_rsc_3_0_web),
      .enb(ulineBuf_rsc_3_0_enb),
      .db(ulineBuf_rsc_3_0_db),
      .adrb(ulineBuf_rsc_3_0_adrb),
      .qa(ulineBuf_rsc_3_0_qa),
      .wea(ulineBuf_rsc_3_0_wea),
      .ena(ulineBuf_rsc_3_0_ena),
      .da(ulineBuf_rsc_3_0_da),
      .adra(ulineBuf_rsc_3_0_adra),
      .adra_d(nl_ulineBuf_rsc_3_0_i_adra_d[23:0]),
      .da_d(nl_ulineBuf_rsc_3_0_i_da_d[19:0]),
      .ena_d(ulineBuf_rsc_3_0_i_ena_d),
      .wea_d(ulineBuf_rsc_3_0_i_wea_d),
      .qa_d(ulineBuf_rsc_3_0_i_qa_d),
      .port_0_rw_ram_ir_internal_RMASK_B_d(ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .port_0_rw_ram_ir_internal_WMASK_B_d(ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d)
    );
  yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_580_10_12_4096_4096_10_5_gen
      ulineBuf_rsc_4_0_i (
      .qb(ulineBuf_rsc_4_0_qb),
      .web(ulineBuf_rsc_4_0_web),
      .enb(ulineBuf_rsc_4_0_enb),
      .db(ulineBuf_rsc_4_0_db),
      .adrb(ulineBuf_rsc_4_0_adrb),
      .qa(ulineBuf_rsc_4_0_qa),
      .wea(ulineBuf_rsc_4_0_wea),
      .ena(ulineBuf_rsc_4_0_ena),
      .da(ulineBuf_rsc_4_0_da),
      .adra(ulineBuf_rsc_4_0_adra),
      .adra_d(nl_ulineBuf_rsc_4_0_i_adra_d[23:0]),
      .da_d(nl_ulineBuf_rsc_4_0_i_da_d[19:0]),
      .ena_d(ulineBuf_rsc_4_0_i_ena_d),
      .wea_d(ulineBuf_rsc_4_0_i_wea_d),
      .qa_d(ulineBuf_rsc_4_0_i_qa_d),
      .port_0_rw_ram_ir_internal_RMASK_B_d(ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .port_0_rw_ram_ir_internal_WMASK_B_d(ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d)
    );
  yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_581_10_12_4096_4096_10_5_gen
      ulineBuf_rsc_5_0_i (
      .qb(ulineBuf_rsc_5_0_qb),
      .web(ulineBuf_rsc_5_0_web),
      .enb(ulineBuf_rsc_5_0_enb),
      .db(ulineBuf_rsc_5_0_db),
      .adrb(ulineBuf_rsc_5_0_adrb),
      .qa(ulineBuf_rsc_5_0_qa),
      .wea(ulineBuf_rsc_5_0_wea),
      .ena(ulineBuf_rsc_5_0_ena),
      .da(ulineBuf_rsc_5_0_da),
      .adra(ulineBuf_rsc_5_0_adra),
      .adra_d(nl_ulineBuf_rsc_5_0_i_adra_d[23:0]),
      .da_d(nl_ulineBuf_rsc_5_0_i_da_d[19:0]),
      .ena_d(ulineBuf_rsc_5_0_i_ena_d),
      .wea_d(ulineBuf_rsc_5_0_i_wea_d),
      .qa_d(ulineBuf_rsc_5_0_i_qa_d),
      .port_0_rw_ram_ir_internal_RMASK_B_d(ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .port_0_rw_ram_ir_internal_WMASK_B_d(ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d)
    );
  yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_582_10_12_4096_4096_10_5_gen
      ulineBuf_rsc_6_0_i (
      .qb(ulineBuf_rsc_6_0_qb),
      .web(ulineBuf_rsc_6_0_web),
      .enb(ulineBuf_rsc_6_0_enb),
      .db(ulineBuf_rsc_6_0_db),
      .adrb(ulineBuf_rsc_6_0_adrb),
      .qa(ulineBuf_rsc_6_0_qa),
      .wea(ulineBuf_rsc_6_0_wea),
      .ena(ulineBuf_rsc_6_0_ena),
      .da(ulineBuf_rsc_6_0_da),
      .adra(ulineBuf_rsc_6_0_adra),
      .adra_d(nl_ulineBuf_rsc_6_0_i_adra_d[23:0]),
      .da_d(nl_ulineBuf_rsc_6_0_i_da_d[19:0]),
      .ena_d(ulineBuf_rsc_6_0_i_ena_d),
      .wea_d(ulineBuf_rsc_6_0_i_wea_d),
      .qa_d(ulineBuf_rsc_6_0_i_qa_d),
      .port_0_rw_ram_ir_internal_RMASK_B_d(ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .port_0_rw_ram_ir_internal_WMASK_B_d(ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d)
    );
  yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_583_10_12_4096_4096_10_5_gen
      ulineBuf_rsc_7_0_i (
      .qb(ulineBuf_rsc_7_0_qb),
      .web(ulineBuf_rsc_7_0_web),
      .enb(ulineBuf_rsc_7_0_enb),
      .db(ulineBuf_rsc_7_0_db),
      .adrb(ulineBuf_rsc_7_0_adrb),
      .qa(ulineBuf_rsc_7_0_qa),
      .wea(ulineBuf_rsc_7_0_wea),
      .ena(ulineBuf_rsc_7_0_ena),
      .da(ulineBuf_rsc_7_0_da),
      .adra(ulineBuf_rsc_7_0_adra),
      .adra_d(nl_ulineBuf_rsc_7_0_i_adra_d[23:0]),
      .da_d(nl_ulineBuf_rsc_7_0_i_da_d[19:0]),
      .ena_d(ulineBuf_rsc_7_0_i_ena_d),
      .wea_d(ulineBuf_rsc_7_0_i_wea_d),
      .qa_d(ulineBuf_rsc_7_0_i_qa_d),
      .port_0_rw_ram_ir_internal_RMASK_B_d(ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .port_0_rw_ram_ir_internal_WMASK_B_d(ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d)
    );
  yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_584_10_12_4096_4096_10_5_gen
      vlineBuf_rsc_0_0_i (
      .qb(vlineBuf_rsc_0_0_qb),
      .web(vlineBuf_rsc_0_0_web),
      .enb(vlineBuf_rsc_0_0_enb),
      .db(vlineBuf_rsc_0_0_db),
      .adrb(vlineBuf_rsc_0_0_adrb),
      .qa(vlineBuf_rsc_0_0_qa),
      .wea(vlineBuf_rsc_0_0_wea),
      .ena(vlineBuf_rsc_0_0_ena),
      .da(vlineBuf_rsc_0_0_da),
      .adra(vlineBuf_rsc_0_0_adra),
      .adra_d(nl_vlineBuf_rsc_0_0_i_adra_d[23:0]),
      .da_d(nl_vlineBuf_rsc_0_0_i_da_d[19:0]),
      .ena_d(vlineBuf_rsc_0_0_i_ena_d),
      .wea_d(vlineBuf_rsc_0_0_i_wea_d),
      .qa_d(vlineBuf_rsc_0_0_i_qa_d),
      .port_0_rw_ram_ir_internal_RMASK_B_d(vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .port_0_rw_ram_ir_internal_WMASK_B_d(vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d)
    );
  yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_585_10_12_4096_4096_10_5_gen
      vlineBuf_rsc_1_0_i (
      .qb(vlineBuf_rsc_1_0_qb),
      .web(vlineBuf_rsc_1_0_web),
      .enb(vlineBuf_rsc_1_0_enb),
      .db(vlineBuf_rsc_1_0_db),
      .adrb(vlineBuf_rsc_1_0_adrb),
      .qa(vlineBuf_rsc_1_0_qa),
      .wea(vlineBuf_rsc_1_0_wea),
      .ena(vlineBuf_rsc_1_0_ena),
      .da(vlineBuf_rsc_1_0_da),
      .adra(vlineBuf_rsc_1_0_adra),
      .adra_d(nl_vlineBuf_rsc_1_0_i_adra_d[23:0]),
      .da_d(nl_vlineBuf_rsc_1_0_i_da_d[19:0]),
      .ena_d(vlineBuf_rsc_1_0_i_ena_d),
      .wea_d(vlineBuf_rsc_1_0_i_wea_d),
      .qa_d(vlineBuf_rsc_1_0_i_qa_d),
      .port_0_rw_ram_ir_internal_RMASK_B_d(vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .port_0_rw_ram_ir_internal_WMASK_B_d(vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d)
    );
  yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_586_10_12_4096_4096_10_5_gen
      vlineBuf_rsc_2_0_i (
      .qb(vlineBuf_rsc_2_0_qb),
      .web(vlineBuf_rsc_2_0_web),
      .enb(vlineBuf_rsc_2_0_enb),
      .db(vlineBuf_rsc_2_0_db),
      .adrb(vlineBuf_rsc_2_0_adrb),
      .qa(vlineBuf_rsc_2_0_qa),
      .wea(vlineBuf_rsc_2_0_wea),
      .ena(vlineBuf_rsc_2_0_ena),
      .da(vlineBuf_rsc_2_0_da),
      .adra(vlineBuf_rsc_2_0_adra),
      .adra_d(nl_vlineBuf_rsc_2_0_i_adra_d[23:0]),
      .da_d(nl_vlineBuf_rsc_2_0_i_da_d[19:0]),
      .ena_d(vlineBuf_rsc_2_0_i_ena_d),
      .wea_d(vlineBuf_rsc_2_0_i_wea_d),
      .qa_d(vlineBuf_rsc_2_0_i_qa_d),
      .port_0_rw_ram_ir_internal_RMASK_B_d(vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .port_0_rw_ram_ir_internal_WMASK_B_d(vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d)
    );
  yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_587_10_12_4096_4096_10_5_gen
      vlineBuf_rsc_3_0_i (
      .qb(vlineBuf_rsc_3_0_qb),
      .web(vlineBuf_rsc_3_0_web),
      .enb(vlineBuf_rsc_3_0_enb),
      .db(vlineBuf_rsc_3_0_db),
      .adrb(vlineBuf_rsc_3_0_adrb),
      .qa(vlineBuf_rsc_3_0_qa),
      .wea(vlineBuf_rsc_3_0_wea),
      .ena(vlineBuf_rsc_3_0_ena),
      .da(vlineBuf_rsc_3_0_da),
      .adra(vlineBuf_rsc_3_0_adra),
      .adra_d(nl_vlineBuf_rsc_3_0_i_adra_d[23:0]),
      .da_d(nl_vlineBuf_rsc_3_0_i_da_d[19:0]),
      .ena_d(vlineBuf_rsc_3_0_i_ena_d),
      .wea_d(vlineBuf_rsc_3_0_i_wea_d),
      .qa_d(vlineBuf_rsc_3_0_i_qa_d),
      .port_0_rw_ram_ir_internal_RMASK_B_d(vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .port_0_rw_ram_ir_internal_WMASK_B_d(vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d)
    );
  yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_588_10_12_4096_4096_10_5_gen
      vlineBuf_rsc_4_0_i (
      .qb(vlineBuf_rsc_4_0_qb),
      .web(vlineBuf_rsc_4_0_web),
      .enb(vlineBuf_rsc_4_0_enb),
      .db(vlineBuf_rsc_4_0_db),
      .adrb(vlineBuf_rsc_4_0_adrb),
      .qa(vlineBuf_rsc_4_0_qa),
      .wea(vlineBuf_rsc_4_0_wea),
      .ena(vlineBuf_rsc_4_0_ena),
      .da(vlineBuf_rsc_4_0_da),
      .adra(vlineBuf_rsc_4_0_adra),
      .adra_d(nl_vlineBuf_rsc_4_0_i_adra_d[23:0]),
      .da_d(nl_vlineBuf_rsc_4_0_i_da_d[19:0]),
      .ena_d(vlineBuf_rsc_4_0_i_ena_d),
      .wea_d(vlineBuf_rsc_4_0_i_wea_d),
      .qa_d(vlineBuf_rsc_4_0_i_qa_d),
      .port_0_rw_ram_ir_internal_RMASK_B_d(vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .port_0_rw_ram_ir_internal_WMASK_B_d(vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d)
    );
  yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_589_10_12_4096_4096_10_5_gen
      vlineBuf_rsc_5_0_i (
      .qb(vlineBuf_rsc_5_0_qb),
      .web(vlineBuf_rsc_5_0_web),
      .enb(vlineBuf_rsc_5_0_enb),
      .db(vlineBuf_rsc_5_0_db),
      .adrb(vlineBuf_rsc_5_0_adrb),
      .qa(vlineBuf_rsc_5_0_qa),
      .wea(vlineBuf_rsc_5_0_wea),
      .ena(vlineBuf_rsc_5_0_ena),
      .da(vlineBuf_rsc_5_0_da),
      .adra(vlineBuf_rsc_5_0_adra),
      .adra_d(nl_vlineBuf_rsc_5_0_i_adra_d[23:0]),
      .da_d(nl_vlineBuf_rsc_5_0_i_da_d[19:0]),
      .ena_d(vlineBuf_rsc_5_0_i_ena_d),
      .wea_d(vlineBuf_rsc_5_0_i_wea_d),
      .qa_d(vlineBuf_rsc_5_0_i_qa_d),
      .port_0_rw_ram_ir_internal_RMASK_B_d(vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .port_0_rw_ram_ir_internal_WMASK_B_d(vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d)
    );
  yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_590_10_12_4096_4096_10_5_gen
      vlineBuf_rsc_6_0_i (
      .qb(vlineBuf_rsc_6_0_qb),
      .web(vlineBuf_rsc_6_0_web),
      .enb(vlineBuf_rsc_6_0_enb),
      .db(vlineBuf_rsc_6_0_db),
      .adrb(vlineBuf_rsc_6_0_adrb),
      .qa(vlineBuf_rsc_6_0_qa),
      .wea(vlineBuf_rsc_6_0_wea),
      .ena(vlineBuf_rsc_6_0_ena),
      .da(vlineBuf_rsc_6_0_da),
      .adra(vlineBuf_rsc_6_0_adra),
      .adra_d(nl_vlineBuf_rsc_6_0_i_adra_d[23:0]),
      .da_d(nl_vlineBuf_rsc_6_0_i_da_d[19:0]),
      .ena_d(vlineBuf_rsc_6_0_i_ena_d),
      .wea_d(vlineBuf_rsc_6_0_i_wea_d),
      .qa_d(vlineBuf_rsc_6_0_i_qa_d),
      .port_0_rw_ram_ir_internal_RMASK_B_d(vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .port_0_rw_ram_ir_internal_WMASK_B_d(vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d)
    );
  yuv444dns_ccs_sample_mem_ccs_ram_sync_dualport_rwport_591_10_12_4096_4096_10_5_gen
      vlineBuf_rsc_7_0_i (
      .qb(vlineBuf_rsc_7_0_qb),
      .web(vlineBuf_rsc_7_0_web),
      .enb(vlineBuf_rsc_7_0_enb),
      .db(vlineBuf_rsc_7_0_db),
      .adrb(vlineBuf_rsc_7_0_adrb),
      .qa(vlineBuf_rsc_7_0_qa),
      .wea(vlineBuf_rsc_7_0_wea),
      .ena(vlineBuf_rsc_7_0_ena),
      .da(vlineBuf_rsc_7_0_da),
      .adra(vlineBuf_rsc_7_0_adra),
      .adra_d(nl_vlineBuf_rsc_7_0_i_adra_d[23:0]),
      .da_d(nl_vlineBuf_rsc_7_0_i_da_d[19:0]),
      .ena_d(vlineBuf_rsc_7_0_i_ena_d),
      .wea_d(vlineBuf_rsc_7_0_i_wea_d),
      .qa_d(vlineBuf_rsc_7_0_i_qa_d),
      .port_0_rw_ram_ir_internal_RMASK_B_d(vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .port_0_rw_ram_ir_internal_WMASK_B_d(vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d)
    );
  yuv444dns_core yuv444dns_core_inst (
      .clk(clk),
      .arst_n(arst_n),
      .top_reg_frameWidth(top_reg_frameWidth),
      .top_reg_frameHeight(top_reg_frameHeight),
      .yuvdns_reg_eb(yuvdns_reg_eb),
      .yuvdns_reg_ysigma2(yuvdns_reg_ysigma2),
      .yuvdns_reg_uvsigma2(yuvdns_reg_uvsigma2),
      .yuvdns_reg_yH2(yuvdns_reg_yH2),
      .yuvdns_reg_yinvH2(yuvdns_reg_yinvH2),
      .yuvdns_reg_uvH2(yuvdns_reg_uvH2),
      .yuvdns_reg_uvinvH2(yuvdns_reg_uvinvH2),
      .src_y_rsc_dat(src_y_rsc_dat),
      .src_y_rsc_vld(src_y_rsc_vld),
      .src_y_rsc_rdy(src_y_rsc_rdy),
      .src_u_rsc_dat(src_u_rsc_dat),
      .src_u_rsc_vld(src_u_rsc_vld),
      .src_u_rsc_rdy(src_u_rsc_rdy),
      .src_v_rsc_dat(src_v_rsc_dat),
      .src_v_rsc_vld(src_v_rsc_vld),
      .src_v_rsc_rdy(src_v_rsc_rdy),
      .dst_y_rsc_dat(dst_y_rsc_dat),
      .dst_y_rsc_vld(dst_y_rsc_vld),
      .dst_y_rsc_rdy(dst_y_rsc_rdy),
      .dst_u_rsc_dat(dst_u_rsc_dat),
      .dst_u_rsc_vld(dst_u_rsc_vld),
      .dst_u_rsc_rdy(dst_u_rsc_rdy),
      .dst_v_rsc_dat(dst_v_rsc_dat),
      .dst_v_rsc_vld(dst_v_rsc_vld),
      .dst_v_rsc_rdy(dst_v_rsc_rdy),
      .ylineBuf_rsc_0_0_i_adra_d(ylineBuf_rsc_0_0_i_adra_d),
      .ylineBuf_rsc_0_0_i_da_d(ylineBuf_rsc_0_0_i_da_d),
      .ylineBuf_rsc_0_0_i_ena_d(ylineBuf_rsc_0_0_i_ena_d),
      .ylineBuf_rsc_0_0_i_wea_d(ylineBuf_rsc_0_0_i_wea_d),
      .ylineBuf_rsc_0_0_i_qa_d(ylineBuf_rsc_0_0_i_qa_d),
      .ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(ylineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d),
      .ylineBuf_rsc_1_0_i_adra_d(ylineBuf_rsc_1_0_i_adra_d),
      .ylineBuf_rsc_1_0_i_da_d(ylineBuf_rsc_1_0_i_da_d),
      .ylineBuf_rsc_1_0_i_ena_d(ylineBuf_rsc_1_0_i_ena_d),
      .ylineBuf_rsc_1_0_i_wea_d(ylineBuf_rsc_1_0_i_wea_d),
      .ylineBuf_rsc_1_0_i_qa_d(ylineBuf_rsc_1_0_i_qa_d),
      .ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(ylineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d),
      .ylineBuf_rsc_2_0_i_adra_d(ylineBuf_rsc_2_0_i_adra_d),
      .ylineBuf_rsc_2_0_i_da_d(ylineBuf_rsc_2_0_i_da_d),
      .ylineBuf_rsc_2_0_i_ena_d(ylineBuf_rsc_2_0_i_ena_d),
      .ylineBuf_rsc_2_0_i_wea_d(ylineBuf_rsc_2_0_i_wea_d),
      .ylineBuf_rsc_2_0_i_qa_d(ylineBuf_rsc_2_0_i_qa_d),
      .ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(ylineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d),
      .ylineBuf_rsc_3_0_i_adra_d(ylineBuf_rsc_3_0_i_adra_d),
      .ylineBuf_rsc_3_0_i_da_d(ylineBuf_rsc_3_0_i_da_d),
      .ylineBuf_rsc_3_0_i_ena_d(ylineBuf_rsc_3_0_i_ena_d),
      .ylineBuf_rsc_3_0_i_wea_d(ylineBuf_rsc_3_0_i_wea_d),
      .ylineBuf_rsc_3_0_i_qa_d(ylineBuf_rsc_3_0_i_qa_d),
      .ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(ylineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d),
      .ylineBuf_rsc_4_0_i_adra_d(ylineBuf_rsc_4_0_i_adra_d),
      .ylineBuf_rsc_4_0_i_da_d(ylineBuf_rsc_4_0_i_da_d),
      .ylineBuf_rsc_4_0_i_ena_d(ylineBuf_rsc_4_0_i_ena_d),
      .ylineBuf_rsc_4_0_i_wea_d(ylineBuf_rsc_4_0_i_wea_d),
      .ylineBuf_rsc_4_0_i_qa_d(ylineBuf_rsc_4_0_i_qa_d),
      .ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(ylineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d),
      .ylineBuf_rsc_5_0_i_adra_d(ylineBuf_rsc_5_0_i_adra_d),
      .ylineBuf_rsc_5_0_i_da_d(ylineBuf_rsc_5_0_i_da_d),
      .ylineBuf_rsc_5_0_i_ena_d(ylineBuf_rsc_5_0_i_ena_d),
      .ylineBuf_rsc_5_0_i_wea_d(ylineBuf_rsc_5_0_i_wea_d),
      .ylineBuf_rsc_5_0_i_qa_d(ylineBuf_rsc_5_0_i_qa_d),
      .ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(ylineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d),
      .ylineBuf_rsc_6_0_i_adra_d(ylineBuf_rsc_6_0_i_adra_d),
      .ylineBuf_rsc_6_0_i_da_d(ylineBuf_rsc_6_0_i_da_d),
      .ylineBuf_rsc_6_0_i_ena_d(ylineBuf_rsc_6_0_i_ena_d),
      .ylineBuf_rsc_6_0_i_wea_d(ylineBuf_rsc_6_0_i_wea_d),
      .ylineBuf_rsc_6_0_i_qa_d(ylineBuf_rsc_6_0_i_qa_d),
      .ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(ylineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d),
      .ylineBuf_rsc_7_0_i_adra_d(ylineBuf_rsc_7_0_i_adra_d),
      .ylineBuf_rsc_7_0_i_da_d(ylineBuf_rsc_7_0_i_da_d),
      .ylineBuf_rsc_7_0_i_ena_d(ylineBuf_rsc_7_0_i_ena_d),
      .ylineBuf_rsc_7_0_i_wea_d(ylineBuf_rsc_7_0_i_wea_d),
      .ylineBuf_rsc_7_0_i_qa_d(ylineBuf_rsc_7_0_i_qa_d),
      .ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(ylineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d),
      .ulineBuf_rsc_0_0_i_adra_d(ulineBuf_rsc_0_0_i_adra_d),
      .ulineBuf_rsc_0_0_i_da_d(ulineBuf_rsc_0_0_i_da_d),
      .ulineBuf_rsc_0_0_i_ena_d(ulineBuf_rsc_0_0_i_ena_d),
      .ulineBuf_rsc_0_0_i_wea_d(ulineBuf_rsc_0_0_i_wea_d),
      .ulineBuf_rsc_0_0_i_qa_d(ulineBuf_rsc_0_0_i_qa_d),
      .ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(ulineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d),
      .ulineBuf_rsc_1_0_i_adra_d(ulineBuf_rsc_1_0_i_adra_d),
      .ulineBuf_rsc_1_0_i_da_d(ulineBuf_rsc_1_0_i_da_d),
      .ulineBuf_rsc_1_0_i_ena_d(ulineBuf_rsc_1_0_i_ena_d),
      .ulineBuf_rsc_1_0_i_wea_d(ulineBuf_rsc_1_0_i_wea_d),
      .ulineBuf_rsc_1_0_i_qa_d(ulineBuf_rsc_1_0_i_qa_d),
      .ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(ulineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d),
      .ulineBuf_rsc_2_0_i_adra_d(ulineBuf_rsc_2_0_i_adra_d),
      .ulineBuf_rsc_2_0_i_da_d(ulineBuf_rsc_2_0_i_da_d),
      .ulineBuf_rsc_2_0_i_ena_d(ulineBuf_rsc_2_0_i_ena_d),
      .ulineBuf_rsc_2_0_i_wea_d(ulineBuf_rsc_2_0_i_wea_d),
      .ulineBuf_rsc_2_0_i_qa_d(ulineBuf_rsc_2_0_i_qa_d),
      .ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(ulineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d),
      .ulineBuf_rsc_3_0_i_adra_d(ulineBuf_rsc_3_0_i_adra_d),
      .ulineBuf_rsc_3_0_i_da_d(ulineBuf_rsc_3_0_i_da_d),
      .ulineBuf_rsc_3_0_i_ena_d(ulineBuf_rsc_3_0_i_ena_d),
      .ulineBuf_rsc_3_0_i_wea_d(ulineBuf_rsc_3_0_i_wea_d),
      .ulineBuf_rsc_3_0_i_qa_d(ulineBuf_rsc_3_0_i_qa_d),
      .ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(ulineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d),
      .ulineBuf_rsc_4_0_i_adra_d(ulineBuf_rsc_4_0_i_adra_d),
      .ulineBuf_rsc_4_0_i_da_d(ulineBuf_rsc_4_0_i_da_d),
      .ulineBuf_rsc_4_0_i_ena_d(ulineBuf_rsc_4_0_i_ena_d),
      .ulineBuf_rsc_4_0_i_wea_d(ulineBuf_rsc_4_0_i_wea_d),
      .ulineBuf_rsc_4_0_i_qa_d(ulineBuf_rsc_4_0_i_qa_d),
      .ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(ulineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d),
      .ulineBuf_rsc_5_0_i_adra_d(ulineBuf_rsc_5_0_i_adra_d),
      .ulineBuf_rsc_5_0_i_da_d(ulineBuf_rsc_5_0_i_da_d),
      .ulineBuf_rsc_5_0_i_ena_d(ulineBuf_rsc_5_0_i_ena_d),
      .ulineBuf_rsc_5_0_i_wea_d(ulineBuf_rsc_5_0_i_wea_d),
      .ulineBuf_rsc_5_0_i_qa_d(ulineBuf_rsc_5_0_i_qa_d),
      .ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(ulineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d),
      .ulineBuf_rsc_6_0_i_adra_d(ulineBuf_rsc_6_0_i_adra_d),
      .ulineBuf_rsc_6_0_i_da_d(ulineBuf_rsc_6_0_i_da_d),
      .ulineBuf_rsc_6_0_i_ena_d(ulineBuf_rsc_6_0_i_ena_d),
      .ulineBuf_rsc_6_0_i_wea_d(ulineBuf_rsc_6_0_i_wea_d),
      .ulineBuf_rsc_6_0_i_qa_d(ulineBuf_rsc_6_0_i_qa_d),
      .ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(ulineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d),
      .ulineBuf_rsc_7_0_i_adra_d(ulineBuf_rsc_7_0_i_adra_d),
      .ulineBuf_rsc_7_0_i_da_d(ulineBuf_rsc_7_0_i_da_d),
      .ulineBuf_rsc_7_0_i_ena_d(ulineBuf_rsc_7_0_i_ena_d),
      .ulineBuf_rsc_7_0_i_wea_d(ulineBuf_rsc_7_0_i_wea_d),
      .ulineBuf_rsc_7_0_i_qa_d(ulineBuf_rsc_7_0_i_qa_d),
      .ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(ulineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d),
      .vlineBuf_rsc_0_0_i_adra_d(vlineBuf_rsc_0_0_i_adra_d),
      .vlineBuf_rsc_0_0_i_da_d(vlineBuf_rsc_0_0_i_da_d),
      .vlineBuf_rsc_0_0_i_ena_d(vlineBuf_rsc_0_0_i_ena_d),
      .vlineBuf_rsc_0_0_i_wea_d(vlineBuf_rsc_0_0_i_wea_d),
      .vlineBuf_rsc_0_0_i_qa_d(vlineBuf_rsc_0_0_i_qa_d),
      .vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(vlineBuf_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d),
      .vlineBuf_rsc_1_0_i_adra_d(vlineBuf_rsc_1_0_i_adra_d),
      .vlineBuf_rsc_1_0_i_da_d(vlineBuf_rsc_1_0_i_da_d),
      .vlineBuf_rsc_1_0_i_ena_d(vlineBuf_rsc_1_0_i_ena_d),
      .vlineBuf_rsc_1_0_i_wea_d(vlineBuf_rsc_1_0_i_wea_d),
      .vlineBuf_rsc_1_0_i_qa_d(vlineBuf_rsc_1_0_i_qa_d),
      .vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(vlineBuf_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d),
      .vlineBuf_rsc_2_0_i_adra_d(vlineBuf_rsc_2_0_i_adra_d),
      .vlineBuf_rsc_2_0_i_da_d(vlineBuf_rsc_2_0_i_da_d),
      .vlineBuf_rsc_2_0_i_ena_d(vlineBuf_rsc_2_0_i_ena_d),
      .vlineBuf_rsc_2_0_i_wea_d(vlineBuf_rsc_2_0_i_wea_d),
      .vlineBuf_rsc_2_0_i_qa_d(vlineBuf_rsc_2_0_i_qa_d),
      .vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(vlineBuf_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d),
      .vlineBuf_rsc_3_0_i_adra_d(vlineBuf_rsc_3_0_i_adra_d),
      .vlineBuf_rsc_3_0_i_da_d(vlineBuf_rsc_3_0_i_da_d),
      .vlineBuf_rsc_3_0_i_ena_d(vlineBuf_rsc_3_0_i_ena_d),
      .vlineBuf_rsc_3_0_i_wea_d(vlineBuf_rsc_3_0_i_wea_d),
      .vlineBuf_rsc_3_0_i_qa_d(vlineBuf_rsc_3_0_i_qa_d),
      .vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(vlineBuf_rsc_3_0_i_port_0_rw_ram_ir_internal_WMASK_B_d),
      .vlineBuf_rsc_4_0_i_adra_d(vlineBuf_rsc_4_0_i_adra_d),
      .vlineBuf_rsc_4_0_i_da_d(vlineBuf_rsc_4_0_i_da_d),
      .vlineBuf_rsc_4_0_i_ena_d(vlineBuf_rsc_4_0_i_ena_d),
      .vlineBuf_rsc_4_0_i_wea_d(vlineBuf_rsc_4_0_i_wea_d),
      .vlineBuf_rsc_4_0_i_qa_d(vlineBuf_rsc_4_0_i_qa_d),
      .vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(vlineBuf_rsc_4_0_i_port_0_rw_ram_ir_internal_WMASK_B_d),
      .vlineBuf_rsc_5_0_i_adra_d(vlineBuf_rsc_5_0_i_adra_d),
      .vlineBuf_rsc_5_0_i_da_d(vlineBuf_rsc_5_0_i_da_d),
      .vlineBuf_rsc_5_0_i_ena_d(vlineBuf_rsc_5_0_i_ena_d),
      .vlineBuf_rsc_5_0_i_wea_d(vlineBuf_rsc_5_0_i_wea_d),
      .vlineBuf_rsc_5_0_i_qa_d(vlineBuf_rsc_5_0_i_qa_d),
      .vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(vlineBuf_rsc_5_0_i_port_0_rw_ram_ir_internal_WMASK_B_d),
      .vlineBuf_rsc_6_0_i_adra_d(vlineBuf_rsc_6_0_i_adra_d),
      .vlineBuf_rsc_6_0_i_da_d(vlineBuf_rsc_6_0_i_da_d),
      .vlineBuf_rsc_6_0_i_ena_d(vlineBuf_rsc_6_0_i_ena_d),
      .vlineBuf_rsc_6_0_i_wea_d(vlineBuf_rsc_6_0_i_wea_d),
      .vlineBuf_rsc_6_0_i_qa_d(vlineBuf_rsc_6_0_i_qa_d),
      .vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(vlineBuf_rsc_6_0_i_port_0_rw_ram_ir_internal_WMASK_B_d),
      .vlineBuf_rsc_7_0_i_adra_d(vlineBuf_rsc_7_0_i_adra_d),
      .vlineBuf_rsc_7_0_i_da_d(vlineBuf_rsc_7_0_i_da_d),
      .vlineBuf_rsc_7_0_i_ena_d(vlineBuf_rsc_7_0_i_ena_d),
      .vlineBuf_rsc_7_0_i_wea_d(vlineBuf_rsc_7_0_i_wea_d),
      .vlineBuf_rsc_7_0_i_qa_d(vlineBuf_rsc_7_0_i_qa_d),
      .vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(vlineBuf_rsc_7_0_i_port_0_rw_ram_ir_internal_WMASK_B_d)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    scaledown
// ------------------------------------------------------------------


module scaledown (
  clk, arst_n, top_reg_frameWidth, top_reg_frameHeight, top_reg_inputFormat, top_reg_imgPattern,
      top_reg_pipeMode, top_reg_blc, top_reg_shadowEb, top_reg_binningFrameWidth,
      top_reg_binningFrameHeight, top_reg_scalerFrameWidth, top_reg_scalerFrameHeight,
      scaledown_reg_m_nEb, scaledown_reg_yuvpattern, scaledown_reg_times, y_src_rsc_dat,
      y_src_rsc_vld, y_src_rsc_rdy, u_src_rsc_dat, u_src_rsc_vld, u_src_rsc_rdy,
      v_src_rsc_dat, v_src_rsc_vld, v_src_rsc_rdy, y_dst_rsc_dat, y_dst_rsc_vld,
      y_dst_rsc_rdy, u_dst_rsc_dat, u_dst_rsc_vld, u_dst_rsc_rdy, v_dst_rsc_dat,
      v_dst_rsc_vld, v_dst_rsc_rdy
);
  input clk;
  input arst_n;
  input [12:0] top_reg_frameWidth;
  input [12:0] top_reg_frameHeight;
  input top_reg_inputFormat;
  input [1:0] top_reg_imgPattern;
  input [1:0] top_reg_pipeMode;
  input [8:0] top_reg_blc;
  input top_reg_shadowEb;
  input [12:0] top_reg_binningFrameWidth;
  input [12:0] top_reg_binningFrameHeight;
  input [12:0] top_reg_scalerFrameWidth;
  input [12:0] top_reg_scalerFrameHeight;
  input scaledown_reg_m_nEb;
  input [1:0] scaledown_reg_yuvpattern;
  input [4:0] scaledown_reg_times;
  input [9:0] y_src_rsc_dat;
  input y_src_rsc_vld;
  output y_src_rsc_rdy;
  input [9:0] u_src_rsc_dat;
  input u_src_rsc_vld;
  output u_src_rsc_rdy;
  input [9:0] v_src_rsc_dat;
  input v_src_rsc_vld;
  output v_src_rsc_rdy;
  output [9:0] y_dst_rsc_dat;
  output y_dst_rsc_vld;
  input y_dst_rsc_rdy;
  output [9:0] u_dst_rsc_dat;
  output u_dst_rsc_vld;
  input u_dst_rsc_rdy;
  output [9:0] v_dst_rsc_dat;
  output v_dst_rsc_vld;
  input v_dst_rsc_rdy;


  // Interconnect Declarations
  wire [11:0] y_linebuffer_rsc_0_0_i_adra_d;
  wire [9:0] y_linebuffer_rsc_0_0_i_da_d;
  wire [1:0] y_linebuffer_rsc_0_0_i_ena_d;
  wire [1:0] y_linebuffer_rsc_0_0_i_wea_d;
  wire [19:0] y_linebuffer_rsc_0_0_i_qa_d;
  wire [1:0] y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  wire [1:0] y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  wire [23:0] y_linebuffer_rsc_1_0_i_adra_d;
  wire [9:0] y_linebuffer_rsc_1_0_i_da_d;
  wire [1:0] y_linebuffer_rsc_1_0_i_ena_d;
  wire [1:0] y_linebuffer_rsc_1_0_i_wea_d;
  wire [19:0] y_linebuffer_rsc_1_0_i_qa_d;
  wire [1:0] y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  wire [1:0] y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  wire [23:0] y_linebuffer_rsc_2_0_i_adra_d;
  wire [9:0] y_linebuffer_rsc_2_0_i_da_d;
  wire [1:0] y_linebuffer_rsc_2_0_i_ena_d;
  wire [1:0] y_linebuffer_rsc_2_0_i_wea_d;
  wire [19:0] y_linebuffer_rsc_2_0_i_qa_d;
  wire [1:0] y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  wire [1:0] y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  wire [11:0] u_linebuffer_rsc_0_0_i_adra_d;
  wire [9:0] u_linebuffer_rsc_0_0_i_da_d;
  wire [1:0] u_linebuffer_rsc_0_0_i_ena_d;
  wire [1:0] u_linebuffer_rsc_0_0_i_wea_d;
  wire [19:0] u_linebuffer_rsc_0_0_i_qa_d;
  wire [1:0] u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  wire [1:0] u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  wire [23:0] u_linebuffer_rsc_1_0_i_adra_d;
  wire [9:0] u_linebuffer_rsc_1_0_i_da_d;
  wire [1:0] u_linebuffer_rsc_1_0_i_ena_d;
  wire [1:0] u_linebuffer_rsc_1_0_i_wea_d;
  wire [19:0] u_linebuffer_rsc_1_0_i_qa_d;
  wire [1:0] u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  wire [1:0] u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  wire [23:0] u_linebuffer_rsc_2_0_i_adra_d;
  wire [9:0] u_linebuffer_rsc_2_0_i_da_d;
  wire [1:0] u_linebuffer_rsc_2_0_i_ena_d;
  wire [1:0] u_linebuffer_rsc_2_0_i_wea_d;
  wire [19:0] u_linebuffer_rsc_2_0_i_qa_d;
  wire [1:0] u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  wire [1:0] u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  wire [11:0] v_linebuffer_rsc_0_0_i_adra_d;
  wire [9:0] v_linebuffer_rsc_0_0_i_da_d;
  wire [1:0] v_linebuffer_rsc_0_0_i_ena_d;
  wire [1:0] v_linebuffer_rsc_0_0_i_wea_d;
  wire [19:0] v_linebuffer_rsc_0_0_i_qa_d;
  wire [1:0] v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  wire [1:0] v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  wire [23:0] v_linebuffer_rsc_1_0_i_adra_d;
  wire [9:0] v_linebuffer_rsc_1_0_i_da_d;
  wire [1:0] v_linebuffer_rsc_1_0_i_ena_d;
  wire [1:0] v_linebuffer_rsc_1_0_i_wea_d;
  wire [19:0] v_linebuffer_rsc_1_0_i_qa_d;
  wire [1:0] v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  wire [1:0] v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  wire [23:0] v_linebuffer_rsc_2_0_i_adra_d;
  wire [9:0] v_linebuffer_rsc_2_0_i_da_d;
  wire [1:0] v_linebuffer_rsc_2_0_i_ena_d;
  wire [1:0] v_linebuffer_rsc_2_0_i_wea_d;
  wire [19:0] v_linebuffer_rsc_2_0_i_qa_d;
  wire [1:0] v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d;
  wire [1:0] v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d;
  wire [9:0] y_linebuffer_rsc_0_0_qb;
  wire y_linebuffer_rsc_0_0_web;
  wire y_linebuffer_rsc_0_0_enb;
  wire [9:0] y_linebuffer_rsc_0_0_db;
  wire [11:0] y_linebuffer_rsc_0_0_adrb;
  wire [9:0] y_linebuffer_rsc_0_0_qa;
  wire y_linebuffer_rsc_0_0_wea;
  wire y_linebuffer_rsc_0_0_ena;
  wire [9:0] y_linebuffer_rsc_0_0_da;
  wire [11:0] y_linebuffer_rsc_0_0_adra;
  wire [9:0] y_linebuffer_rsc_1_0_qb;
  wire y_linebuffer_rsc_1_0_web;
  wire y_linebuffer_rsc_1_0_enb;
  wire [9:0] y_linebuffer_rsc_1_0_db;
  wire [11:0] y_linebuffer_rsc_1_0_adrb;
  wire [9:0] y_linebuffer_rsc_1_0_qa;
  wire y_linebuffer_rsc_1_0_wea;
  wire y_linebuffer_rsc_1_0_ena;
  wire [9:0] y_linebuffer_rsc_1_0_da;
  wire [11:0] y_linebuffer_rsc_1_0_adra;
  wire [9:0] y_linebuffer_rsc_2_0_qb;
  wire y_linebuffer_rsc_2_0_web;
  wire y_linebuffer_rsc_2_0_enb;
  wire [9:0] y_linebuffer_rsc_2_0_db;
  wire [11:0] y_linebuffer_rsc_2_0_adrb;
  wire [9:0] y_linebuffer_rsc_2_0_qa;
  wire y_linebuffer_rsc_2_0_wea;
  wire y_linebuffer_rsc_2_0_ena;
  wire [9:0] y_linebuffer_rsc_2_0_da;
  wire [11:0] y_linebuffer_rsc_2_0_adra;
  wire [9:0] u_linebuffer_rsc_0_0_qb;
  wire u_linebuffer_rsc_0_0_web;
  wire u_linebuffer_rsc_0_0_enb;
  wire [9:0] u_linebuffer_rsc_0_0_db;
  wire [11:0] u_linebuffer_rsc_0_0_adrb;
  wire [9:0] u_linebuffer_rsc_0_0_qa;
  wire u_linebuffer_rsc_0_0_wea;
  wire u_linebuffer_rsc_0_0_ena;
  wire [9:0] u_linebuffer_rsc_0_0_da;
  wire [11:0] u_linebuffer_rsc_0_0_adra;
  wire [9:0] u_linebuffer_rsc_1_0_qb;
  wire u_linebuffer_rsc_1_0_web;
  wire u_linebuffer_rsc_1_0_enb;
  wire [9:0] u_linebuffer_rsc_1_0_db;
  wire [11:0] u_linebuffer_rsc_1_0_adrb;
  wire [9:0] u_linebuffer_rsc_1_0_qa;
  wire u_linebuffer_rsc_1_0_wea;
  wire u_linebuffer_rsc_1_0_ena;
  wire [9:0] u_linebuffer_rsc_1_0_da;
  wire [11:0] u_linebuffer_rsc_1_0_adra;
  wire [9:0] u_linebuffer_rsc_2_0_qb;
  wire u_linebuffer_rsc_2_0_web;
  wire u_linebuffer_rsc_2_0_enb;
  wire [9:0] u_linebuffer_rsc_2_0_db;
  wire [11:0] u_linebuffer_rsc_2_0_adrb;
  wire [9:0] u_linebuffer_rsc_2_0_qa;
  wire u_linebuffer_rsc_2_0_wea;
  wire u_linebuffer_rsc_2_0_ena;
  wire [9:0] u_linebuffer_rsc_2_0_da;
  wire [11:0] u_linebuffer_rsc_2_0_adra;
  wire [9:0] v_linebuffer_rsc_0_0_qb;
  wire v_linebuffer_rsc_0_0_web;
  wire v_linebuffer_rsc_0_0_enb;
  wire [9:0] v_linebuffer_rsc_0_0_db;
  wire [11:0] v_linebuffer_rsc_0_0_adrb;
  wire [9:0] v_linebuffer_rsc_0_0_qa;
  wire v_linebuffer_rsc_0_0_wea;
  wire v_linebuffer_rsc_0_0_ena;
  wire [9:0] v_linebuffer_rsc_0_0_da;
  wire [11:0] v_linebuffer_rsc_0_0_adra;
  wire [9:0] v_linebuffer_rsc_1_0_qb;
  wire v_linebuffer_rsc_1_0_web;
  wire v_linebuffer_rsc_1_0_enb;
  wire [9:0] v_linebuffer_rsc_1_0_db;
  wire [11:0] v_linebuffer_rsc_1_0_adrb;
  wire [9:0] v_linebuffer_rsc_1_0_qa;
  wire v_linebuffer_rsc_1_0_wea;
  wire v_linebuffer_rsc_1_0_ena;
  wire [9:0] v_linebuffer_rsc_1_0_da;
  wire [11:0] v_linebuffer_rsc_1_0_adra;
  wire [9:0] v_linebuffer_rsc_2_0_qb;
  wire v_linebuffer_rsc_2_0_web;
  wire v_linebuffer_rsc_2_0_enb;
  wire [9:0] v_linebuffer_rsc_2_0_db;
  wire [11:0] v_linebuffer_rsc_2_0_adrb;
  wire [9:0] v_linebuffer_rsc_2_0_qa;
  wire v_linebuffer_rsc_2_0_wea;
  wire v_linebuffer_rsc_2_0_ena;
  wire [9:0] v_linebuffer_rsc_2_0_da;
  wire [11:0] v_linebuffer_rsc_2_0_adra;


  // Interconnect Declarations for Component Instantiations 
  wire [23:0] nl_y_linebuffer_rsc_0_0_i_adra_d;
  assign nl_y_linebuffer_rsc_0_0_i_adra_d = {12'b000000000000 , y_linebuffer_rsc_0_0_i_adra_d};
  wire [19:0] nl_y_linebuffer_rsc_0_0_i_da_d;
  assign nl_y_linebuffer_rsc_0_0_i_da_d = {10'b0000000000 , y_linebuffer_rsc_0_0_i_da_d};
  wire [19:0] nl_y_linebuffer_rsc_1_0_i_da_d;
  assign nl_y_linebuffer_rsc_1_0_i_da_d = {10'b0000000000 , y_linebuffer_rsc_1_0_i_da_d};
  wire [19:0] nl_y_linebuffer_rsc_2_0_i_da_d;
  assign nl_y_linebuffer_rsc_2_0_i_da_d = {10'b0000000000 , y_linebuffer_rsc_2_0_i_da_d};
  wire [23:0] nl_u_linebuffer_rsc_0_0_i_adra_d;
  assign nl_u_linebuffer_rsc_0_0_i_adra_d = {12'b000000000000 , u_linebuffer_rsc_0_0_i_adra_d};
  wire [19:0] nl_u_linebuffer_rsc_0_0_i_da_d;
  assign nl_u_linebuffer_rsc_0_0_i_da_d = {10'b0000000000 , u_linebuffer_rsc_0_0_i_da_d};
  wire [19:0] nl_u_linebuffer_rsc_1_0_i_da_d;
  assign nl_u_linebuffer_rsc_1_0_i_da_d = {10'b0000000000 , u_linebuffer_rsc_1_0_i_da_d};
  wire [19:0] nl_u_linebuffer_rsc_2_0_i_da_d;
  assign nl_u_linebuffer_rsc_2_0_i_da_d = {10'b0000000000 , u_linebuffer_rsc_2_0_i_da_d};
  wire [23:0] nl_v_linebuffer_rsc_0_0_i_adra_d;
  assign nl_v_linebuffer_rsc_0_0_i_adra_d = {12'b000000000000 , v_linebuffer_rsc_0_0_i_adra_d};
  wire [19:0] nl_v_linebuffer_rsc_0_0_i_da_d;
  assign nl_v_linebuffer_rsc_0_0_i_da_d = {10'b0000000000 , v_linebuffer_rsc_0_0_i_da_d};
  wire [19:0] nl_v_linebuffer_rsc_1_0_i_da_d;
  assign nl_v_linebuffer_rsc_1_0_i_da_d = {10'b0000000000 , v_linebuffer_rsc_1_0_i_da_d};
  wire [19:0] nl_v_linebuffer_rsc_2_0_i_da_d;
  assign nl_v_linebuffer_rsc_2_0_i_da_d = {10'b0000000000 , v_linebuffer_rsc_2_0_i_da_d};
  ccs_ram_sync_dualport #(.data_width(32'sd10),
  .addr_width(32'sd12),
  .depth(32'sd4096)) y_linebuffer_rsc_0_0_comp (
      .adra(y_linebuffer_rsc_0_0_adra),
      .adrb(y_linebuffer_rsc_0_0_adrb),
      .da(y_linebuffer_rsc_0_0_da),
      .db(y_linebuffer_rsc_0_0_db),
      .ena(y_linebuffer_rsc_0_0_ena),
      .enb(y_linebuffer_rsc_0_0_enb),
      .wea(y_linebuffer_rsc_0_0_wea),
      .web(y_linebuffer_rsc_0_0_web),
      .clk(clk),
      .qa(y_linebuffer_rsc_0_0_qa),
      .qb(y_linebuffer_rsc_0_0_qb)
    );
  ccs_ram_sync_dualport #(.data_width(32'sd10),
  .addr_width(32'sd12),
  .depth(32'sd4096)) y_linebuffer_rsc_1_0_comp (
      .adra(y_linebuffer_rsc_1_0_adra),
      .adrb(y_linebuffer_rsc_1_0_adrb),
      .da(y_linebuffer_rsc_1_0_da),
      .db(y_linebuffer_rsc_1_0_db),
      .ena(y_linebuffer_rsc_1_0_ena),
      .enb(y_linebuffer_rsc_1_0_enb),
      .wea(y_linebuffer_rsc_1_0_wea),
      .web(y_linebuffer_rsc_1_0_web),
      .clk(clk),
      .qa(y_linebuffer_rsc_1_0_qa),
      .qb(y_linebuffer_rsc_1_0_qb)
    );
  ccs_ram_sync_dualport #(.data_width(32'sd10),
  .addr_width(32'sd12),
  .depth(32'sd4096)) y_linebuffer_rsc_2_0_comp (
      .adra(y_linebuffer_rsc_2_0_adra),
      .adrb(y_linebuffer_rsc_2_0_adrb),
      .da(y_linebuffer_rsc_2_0_da),
      .db(y_linebuffer_rsc_2_0_db),
      .ena(y_linebuffer_rsc_2_0_ena),
      .enb(y_linebuffer_rsc_2_0_enb),
      .wea(y_linebuffer_rsc_2_0_wea),
      .web(y_linebuffer_rsc_2_0_web),
      .clk(clk),
      .qa(y_linebuffer_rsc_2_0_qa),
      .qb(y_linebuffer_rsc_2_0_qb)
    );
  ccs_ram_sync_dualport #(.data_width(32'sd10),
  .addr_width(32'sd12),
  .depth(32'sd4096)) u_linebuffer_rsc_0_0_comp (
      .adra(u_linebuffer_rsc_0_0_adra),
      .adrb(u_linebuffer_rsc_0_0_adrb),
      .da(u_linebuffer_rsc_0_0_da),
      .db(u_linebuffer_rsc_0_0_db),
      .ena(u_linebuffer_rsc_0_0_ena),
      .enb(u_linebuffer_rsc_0_0_enb),
      .wea(u_linebuffer_rsc_0_0_wea),
      .web(u_linebuffer_rsc_0_0_web),
      .clk(clk),
      .qa(u_linebuffer_rsc_0_0_qa),
      .qb(u_linebuffer_rsc_0_0_qb)
    );
  ccs_ram_sync_dualport #(.data_width(32'sd10),
  .addr_width(32'sd12),
  .depth(32'sd4096)) u_linebuffer_rsc_1_0_comp (
      .adra(u_linebuffer_rsc_1_0_adra),
      .adrb(u_linebuffer_rsc_1_0_adrb),
      .da(u_linebuffer_rsc_1_0_da),
      .db(u_linebuffer_rsc_1_0_db),
      .ena(u_linebuffer_rsc_1_0_ena),
      .enb(u_linebuffer_rsc_1_0_enb),
      .wea(u_linebuffer_rsc_1_0_wea),
      .web(u_linebuffer_rsc_1_0_web),
      .clk(clk),
      .qa(u_linebuffer_rsc_1_0_qa),
      .qb(u_linebuffer_rsc_1_0_qb)
    );
  ccs_ram_sync_dualport #(.data_width(32'sd10),
  .addr_width(32'sd12),
  .depth(32'sd4096)) u_linebuffer_rsc_2_0_comp (
      .adra(u_linebuffer_rsc_2_0_adra),
      .adrb(u_linebuffer_rsc_2_0_adrb),
      .da(u_linebuffer_rsc_2_0_da),
      .db(u_linebuffer_rsc_2_0_db),
      .ena(u_linebuffer_rsc_2_0_ena),
      .enb(u_linebuffer_rsc_2_0_enb),
      .wea(u_linebuffer_rsc_2_0_wea),
      .web(u_linebuffer_rsc_2_0_web),
      .clk(clk),
      .qa(u_linebuffer_rsc_2_0_qa),
      .qb(u_linebuffer_rsc_2_0_qb)
    );
  ccs_ram_sync_dualport #(.data_width(32'sd10),
  .addr_width(32'sd12),
  .depth(32'sd4096)) v_linebuffer_rsc_0_0_comp (
      .adra(v_linebuffer_rsc_0_0_adra),
      .adrb(v_linebuffer_rsc_0_0_adrb),
      .da(v_linebuffer_rsc_0_0_da),
      .db(v_linebuffer_rsc_0_0_db),
      .ena(v_linebuffer_rsc_0_0_ena),
      .enb(v_linebuffer_rsc_0_0_enb),
      .wea(v_linebuffer_rsc_0_0_wea),
      .web(v_linebuffer_rsc_0_0_web),
      .clk(clk),
      .qa(v_linebuffer_rsc_0_0_qa),
      .qb(v_linebuffer_rsc_0_0_qb)
    );
  ccs_ram_sync_dualport #(.data_width(32'sd10),
  .addr_width(32'sd12),
  .depth(32'sd4096)) v_linebuffer_rsc_1_0_comp (
      .adra(v_linebuffer_rsc_1_0_adra),
      .adrb(v_linebuffer_rsc_1_0_adrb),
      .da(v_linebuffer_rsc_1_0_da),
      .db(v_linebuffer_rsc_1_0_db),
      .ena(v_linebuffer_rsc_1_0_ena),
      .enb(v_linebuffer_rsc_1_0_enb),
      .wea(v_linebuffer_rsc_1_0_wea),
      .web(v_linebuffer_rsc_1_0_web),
      .clk(clk),
      .qa(v_linebuffer_rsc_1_0_qa),
      .qb(v_linebuffer_rsc_1_0_qb)
    );
  ccs_ram_sync_dualport #(.data_width(32'sd10),
  .addr_width(32'sd12),
  .depth(32'sd4096)) v_linebuffer_rsc_2_0_comp (
      .adra(v_linebuffer_rsc_2_0_adra),
      .adrb(v_linebuffer_rsc_2_0_adrb),
      .da(v_linebuffer_rsc_2_0_da),
      .db(v_linebuffer_rsc_2_0_db),
      .ena(v_linebuffer_rsc_2_0_ena),
      .enb(v_linebuffer_rsc_2_0_enb),
      .wea(v_linebuffer_rsc_2_0_wea),
      .web(v_linebuffer_rsc_2_0_web),
      .clk(clk),
      .qa(v_linebuffer_rsc_2_0_qa),
      .qb(v_linebuffer_rsc_2_0_qb)
    );
  scaledown_ccs_sample_mem_ccs_ram_sync_dualport_rwport_592_10_12_4096_4096_10_5_gen
      y_linebuffer_rsc_0_0_i (
      .qb(y_linebuffer_rsc_0_0_qb),
      .web(y_linebuffer_rsc_0_0_web),
      .enb(y_linebuffer_rsc_0_0_enb),
      .db(y_linebuffer_rsc_0_0_db),
      .adrb(y_linebuffer_rsc_0_0_adrb),
      .qa(y_linebuffer_rsc_0_0_qa),
      .wea(y_linebuffer_rsc_0_0_wea),
      .ena(y_linebuffer_rsc_0_0_ena),
      .da(y_linebuffer_rsc_0_0_da),
      .adra(y_linebuffer_rsc_0_0_adra),
      .adra_d(nl_y_linebuffer_rsc_0_0_i_adra_d[23:0]),
      .da_d(nl_y_linebuffer_rsc_0_0_i_da_d[19:0]),
      .ena_d(y_linebuffer_rsc_0_0_i_ena_d),
      .wea_d(y_linebuffer_rsc_0_0_i_wea_d),
      .qa_d(y_linebuffer_rsc_0_0_i_qa_d),
      .port_0_rw_ram_ir_internal_RMASK_B_d(y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .port_0_rw_ram_ir_internal_WMASK_B_d(y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d)
    );
  scaledown_ccs_sample_mem_ccs_ram_sync_dualport_rwport_593_10_12_4096_4096_10_5_gen
      y_linebuffer_rsc_1_0_i (
      .qb(y_linebuffer_rsc_1_0_qb),
      .web(y_linebuffer_rsc_1_0_web),
      .enb(y_linebuffer_rsc_1_0_enb),
      .db(y_linebuffer_rsc_1_0_db),
      .adrb(y_linebuffer_rsc_1_0_adrb),
      .qa(y_linebuffer_rsc_1_0_qa),
      .wea(y_linebuffer_rsc_1_0_wea),
      .ena(y_linebuffer_rsc_1_0_ena),
      .da(y_linebuffer_rsc_1_0_da),
      .adra(y_linebuffer_rsc_1_0_adra),
      .adra_d(y_linebuffer_rsc_1_0_i_adra_d),
      .da_d(nl_y_linebuffer_rsc_1_0_i_da_d[19:0]),
      .ena_d(y_linebuffer_rsc_1_0_i_ena_d),
      .wea_d(y_linebuffer_rsc_1_0_i_wea_d),
      .qa_d(y_linebuffer_rsc_1_0_i_qa_d),
      .port_0_rw_ram_ir_internal_RMASK_B_d(y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .port_0_rw_ram_ir_internal_WMASK_B_d(y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d)
    );
  scaledown_ccs_sample_mem_ccs_ram_sync_dualport_rwport_594_10_12_4096_4096_10_5_gen
      y_linebuffer_rsc_2_0_i (
      .qb(y_linebuffer_rsc_2_0_qb),
      .web(y_linebuffer_rsc_2_0_web),
      .enb(y_linebuffer_rsc_2_0_enb),
      .db(y_linebuffer_rsc_2_0_db),
      .adrb(y_linebuffer_rsc_2_0_adrb),
      .qa(y_linebuffer_rsc_2_0_qa),
      .wea(y_linebuffer_rsc_2_0_wea),
      .ena(y_linebuffer_rsc_2_0_ena),
      .da(y_linebuffer_rsc_2_0_da),
      .adra(y_linebuffer_rsc_2_0_adra),
      .adra_d(y_linebuffer_rsc_2_0_i_adra_d),
      .da_d(nl_y_linebuffer_rsc_2_0_i_da_d[19:0]),
      .ena_d(y_linebuffer_rsc_2_0_i_ena_d),
      .wea_d(y_linebuffer_rsc_2_0_i_wea_d),
      .qa_d(y_linebuffer_rsc_2_0_i_qa_d),
      .port_0_rw_ram_ir_internal_RMASK_B_d(y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .port_0_rw_ram_ir_internal_WMASK_B_d(y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d)
    );
  scaledown_ccs_sample_mem_ccs_ram_sync_dualport_rwport_595_10_12_4096_4096_10_5_gen
      u_linebuffer_rsc_0_0_i (
      .qb(u_linebuffer_rsc_0_0_qb),
      .web(u_linebuffer_rsc_0_0_web),
      .enb(u_linebuffer_rsc_0_0_enb),
      .db(u_linebuffer_rsc_0_0_db),
      .adrb(u_linebuffer_rsc_0_0_adrb),
      .qa(u_linebuffer_rsc_0_0_qa),
      .wea(u_linebuffer_rsc_0_0_wea),
      .ena(u_linebuffer_rsc_0_0_ena),
      .da(u_linebuffer_rsc_0_0_da),
      .adra(u_linebuffer_rsc_0_0_adra),
      .adra_d(nl_u_linebuffer_rsc_0_0_i_adra_d[23:0]),
      .da_d(nl_u_linebuffer_rsc_0_0_i_da_d[19:0]),
      .ena_d(u_linebuffer_rsc_0_0_i_ena_d),
      .wea_d(u_linebuffer_rsc_0_0_i_wea_d),
      .qa_d(u_linebuffer_rsc_0_0_i_qa_d),
      .port_0_rw_ram_ir_internal_RMASK_B_d(u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .port_0_rw_ram_ir_internal_WMASK_B_d(u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d)
    );
  scaledown_ccs_sample_mem_ccs_ram_sync_dualport_rwport_596_10_12_4096_4096_10_5_gen
      u_linebuffer_rsc_1_0_i (
      .qb(u_linebuffer_rsc_1_0_qb),
      .web(u_linebuffer_rsc_1_0_web),
      .enb(u_linebuffer_rsc_1_0_enb),
      .db(u_linebuffer_rsc_1_0_db),
      .adrb(u_linebuffer_rsc_1_0_adrb),
      .qa(u_linebuffer_rsc_1_0_qa),
      .wea(u_linebuffer_rsc_1_0_wea),
      .ena(u_linebuffer_rsc_1_0_ena),
      .da(u_linebuffer_rsc_1_0_da),
      .adra(u_linebuffer_rsc_1_0_adra),
      .adra_d(u_linebuffer_rsc_1_0_i_adra_d),
      .da_d(nl_u_linebuffer_rsc_1_0_i_da_d[19:0]),
      .ena_d(u_linebuffer_rsc_1_0_i_ena_d),
      .wea_d(u_linebuffer_rsc_1_0_i_wea_d),
      .qa_d(u_linebuffer_rsc_1_0_i_qa_d),
      .port_0_rw_ram_ir_internal_RMASK_B_d(u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .port_0_rw_ram_ir_internal_WMASK_B_d(u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d)
    );
  scaledown_ccs_sample_mem_ccs_ram_sync_dualport_rwport_597_10_12_4096_4096_10_5_gen
      u_linebuffer_rsc_2_0_i (
      .qb(u_linebuffer_rsc_2_0_qb),
      .web(u_linebuffer_rsc_2_0_web),
      .enb(u_linebuffer_rsc_2_0_enb),
      .db(u_linebuffer_rsc_2_0_db),
      .adrb(u_linebuffer_rsc_2_0_adrb),
      .qa(u_linebuffer_rsc_2_0_qa),
      .wea(u_linebuffer_rsc_2_0_wea),
      .ena(u_linebuffer_rsc_2_0_ena),
      .da(u_linebuffer_rsc_2_0_da),
      .adra(u_linebuffer_rsc_2_0_adra),
      .adra_d(u_linebuffer_rsc_2_0_i_adra_d),
      .da_d(nl_u_linebuffer_rsc_2_0_i_da_d[19:0]),
      .ena_d(u_linebuffer_rsc_2_0_i_ena_d),
      .wea_d(u_linebuffer_rsc_2_0_i_wea_d),
      .qa_d(u_linebuffer_rsc_2_0_i_qa_d),
      .port_0_rw_ram_ir_internal_RMASK_B_d(u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .port_0_rw_ram_ir_internal_WMASK_B_d(u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d)
    );
  scaledown_ccs_sample_mem_ccs_ram_sync_dualport_rwport_598_10_12_4096_4096_10_5_gen
      v_linebuffer_rsc_0_0_i (
      .qb(v_linebuffer_rsc_0_0_qb),
      .web(v_linebuffer_rsc_0_0_web),
      .enb(v_linebuffer_rsc_0_0_enb),
      .db(v_linebuffer_rsc_0_0_db),
      .adrb(v_linebuffer_rsc_0_0_adrb),
      .qa(v_linebuffer_rsc_0_0_qa),
      .wea(v_linebuffer_rsc_0_0_wea),
      .ena(v_linebuffer_rsc_0_0_ena),
      .da(v_linebuffer_rsc_0_0_da),
      .adra(v_linebuffer_rsc_0_0_adra),
      .adra_d(nl_v_linebuffer_rsc_0_0_i_adra_d[23:0]),
      .da_d(nl_v_linebuffer_rsc_0_0_i_da_d[19:0]),
      .ena_d(v_linebuffer_rsc_0_0_i_ena_d),
      .wea_d(v_linebuffer_rsc_0_0_i_wea_d),
      .qa_d(v_linebuffer_rsc_0_0_i_qa_d),
      .port_0_rw_ram_ir_internal_RMASK_B_d(v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .port_0_rw_ram_ir_internal_WMASK_B_d(v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d)
    );
  scaledown_ccs_sample_mem_ccs_ram_sync_dualport_rwport_599_10_12_4096_4096_10_5_gen
      v_linebuffer_rsc_1_0_i (
      .qb(v_linebuffer_rsc_1_0_qb),
      .web(v_linebuffer_rsc_1_0_web),
      .enb(v_linebuffer_rsc_1_0_enb),
      .db(v_linebuffer_rsc_1_0_db),
      .adrb(v_linebuffer_rsc_1_0_adrb),
      .qa(v_linebuffer_rsc_1_0_qa),
      .wea(v_linebuffer_rsc_1_0_wea),
      .ena(v_linebuffer_rsc_1_0_ena),
      .da(v_linebuffer_rsc_1_0_da),
      .adra(v_linebuffer_rsc_1_0_adra),
      .adra_d(v_linebuffer_rsc_1_0_i_adra_d),
      .da_d(nl_v_linebuffer_rsc_1_0_i_da_d[19:0]),
      .ena_d(v_linebuffer_rsc_1_0_i_ena_d),
      .wea_d(v_linebuffer_rsc_1_0_i_wea_d),
      .qa_d(v_linebuffer_rsc_1_0_i_qa_d),
      .port_0_rw_ram_ir_internal_RMASK_B_d(v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .port_0_rw_ram_ir_internal_WMASK_B_d(v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d)
    );
  scaledown_ccs_sample_mem_ccs_ram_sync_dualport_rwport_600_10_12_4096_4096_10_5_gen
      v_linebuffer_rsc_2_0_i (
      .qb(v_linebuffer_rsc_2_0_qb),
      .web(v_linebuffer_rsc_2_0_web),
      .enb(v_linebuffer_rsc_2_0_enb),
      .db(v_linebuffer_rsc_2_0_db),
      .adrb(v_linebuffer_rsc_2_0_adrb),
      .qa(v_linebuffer_rsc_2_0_qa),
      .wea(v_linebuffer_rsc_2_0_wea),
      .ena(v_linebuffer_rsc_2_0_ena),
      .da(v_linebuffer_rsc_2_0_da),
      .adra(v_linebuffer_rsc_2_0_adra),
      .adra_d(v_linebuffer_rsc_2_0_i_adra_d),
      .da_d(nl_v_linebuffer_rsc_2_0_i_da_d[19:0]),
      .ena_d(v_linebuffer_rsc_2_0_i_ena_d),
      .wea_d(v_linebuffer_rsc_2_0_i_wea_d),
      .qa_d(v_linebuffer_rsc_2_0_i_qa_d),
      .port_0_rw_ram_ir_internal_RMASK_B_d(v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .port_0_rw_ram_ir_internal_WMASK_B_d(v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d)
    );
  scaledown_core scaledown_core_inst (
      .clk(clk),
      .arst_n(arst_n),
      .top_reg_frameWidth(top_reg_frameWidth),
      .top_reg_frameHeight(top_reg_frameHeight),
      .scaledown_reg_m_nEb(scaledown_reg_m_nEb),
      .scaledown_reg_yuvpattern(scaledown_reg_yuvpattern),
      .scaledown_reg_times(scaledown_reg_times),
      .y_src_rsc_dat(y_src_rsc_dat),
      .y_src_rsc_vld(y_src_rsc_vld),
      .y_src_rsc_rdy(y_src_rsc_rdy),
      .u_src_rsc_dat(u_src_rsc_dat),
      .u_src_rsc_vld(u_src_rsc_vld),
      .u_src_rsc_rdy(u_src_rsc_rdy),
      .v_src_rsc_dat(v_src_rsc_dat),
      .v_src_rsc_vld(v_src_rsc_vld),
      .v_src_rsc_rdy(v_src_rsc_rdy),
      .y_dst_rsc_dat(y_dst_rsc_dat),
      .y_dst_rsc_vld(y_dst_rsc_vld),
      .y_dst_rsc_rdy(y_dst_rsc_rdy),
      .u_dst_rsc_dat(u_dst_rsc_dat),
      .u_dst_rsc_vld(u_dst_rsc_vld),
      .u_dst_rsc_rdy(u_dst_rsc_rdy),
      .v_dst_rsc_dat(v_dst_rsc_dat),
      .v_dst_rsc_vld(v_dst_rsc_vld),
      .v_dst_rsc_rdy(v_dst_rsc_rdy),
      .y_linebuffer_rsc_0_0_i_adra_d(y_linebuffer_rsc_0_0_i_adra_d),
      .y_linebuffer_rsc_0_0_i_da_d(y_linebuffer_rsc_0_0_i_da_d),
      .y_linebuffer_rsc_0_0_i_ena_d(y_linebuffer_rsc_0_0_i_ena_d),
      .y_linebuffer_rsc_0_0_i_wea_d(y_linebuffer_rsc_0_0_i_wea_d),
      .y_linebuffer_rsc_0_0_i_qa_d(y_linebuffer_rsc_0_0_i_qa_d),
      .y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(y_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d),
      .y_linebuffer_rsc_1_0_i_adra_d(y_linebuffer_rsc_1_0_i_adra_d),
      .y_linebuffer_rsc_1_0_i_da_d(y_linebuffer_rsc_1_0_i_da_d),
      .y_linebuffer_rsc_1_0_i_ena_d(y_linebuffer_rsc_1_0_i_ena_d),
      .y_linebuffer_rsc_1_0_i_wea_d(y_linebuffer_rsc_1_0_i_wea_d),
      .y_linebuffer_rsc_1_0_i_qa_d(y_linebuffer_rsc_1_0_i_qa_d),
      .y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(y_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d),
      .y_linebuffer_rsc_2_0_i_adra_d(y_linebuffer_rsc_2_0_i_adra_d),
      .y_linebuffer_rsc_2_0_i_da_d(y_linebuffer_rsc_2_0_i_da_d),
      .y_linebuffer_rsc_2_0_i_ena_d(y_linebuffer_rsc_2_0_i_ena_d),
      .y_linebuffer_rsc_2_0_i_wea_d(y_linebuffer_rsc_2_0_i_wea_d),
      .y_linebuffer_rsc_2_0_i_qa_d(y_linebuffer_rsc_2_0_i_qa_d),
      .y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(y_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d),
      .u_linebuffer_rsc_0_0_i_adra_d(u_linebuffer_rsc_0_0_i_adra_d),
      .u_linebuffer_rsc_0_0_i_da_d(u_linebuffer_rsc_0_0_i_da_d),
      .u_linebuffer_rsc_0_0_i_ena_d(u_linebuffer_rsc_0_0_i_ena_d),
      .u_linebuffer_rsc_0_0_i_wea_d(u_linebuffer_rsc_0_0_i_wea_d),
      .u_linebuffer_rsc_0_0_i_qa_d(u_linebuffer_rsc_0_0_i_qa_d),
      .u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(u_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d),
      .u_linebuffer_rsc_1_0_i_adra_d(u_linebuffer_rsc_1_0_i_adra_d),
      .u_linebuffer_rsc_1_0_i_da_d(u_linebuffer_rsc_1_0_i_da_d),
      .u_linebuffer_rsc_1_0_i_ena_d(u_linebuffer_rsc_1_0_i_ena_d),
      .u_linebuffer_rsc_1_0_i_wea_d(u_linebuffer_rsc_1_0_i_wea_d),
      .u_linebuffer_rsc_1_0_i_qa_d(u_linebuffer_rsc_1_0_i_qa_d),
      .u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(u_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d),
      .u_linebuffer_rsc_2_0_i_adra_d(u_linebuffer_rsc_2_0_i_adra_d),
      .u_linebuffer_rsc_2_0_i_da_d(u_linebuffer_rsc_2_0_i_da_d),
      .u_linebuffer_rsc_2_0_i_ena_d(u_linebuffer_rsc_2_0_i_ena_d),
      .u_linebuffer_rsc_2_0_i_wea_d(u_linebuffer_rsc_2_0_i_wea_d),
      .u_linebuffer_rsc_2_0_i_qa_d(u_linebuffer_rsc_2_0_i_qa_d),
      .u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(u_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d),
      .v_linebuffer_rsc_0_0_i_adra_d(v_linebuffer_rsc_0_0_i_adra_d),
      .v_linebuffer_rsc_0_0_i_da_d(v_linebuffer_rsc_0_0_i_da_d),
      .v_linebuffer_rsc_0_0_i_ena_d(v_linebuffer_rsc_0_0_i_ena_d),
      .v_linebuffer_rsc_0_0_i_wea_d(v_linebuffer_rsc_0_0_i_wea_d),
      .v_linebuffer_rsc_0_0_i_qa_d(v_linebuffer_rsc_0_0_i_qa_d),
      .v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(v_linebuffer_rsc_0_0_i_port_0_rw_ram_ir_internal_WMASK_B_d),
      .v_linebuffer_rsc_1_0_i_adra_d(v_linebuffer_rsc_1_0_i_adra_d),
      .v_linebuffer_rsc_1_0_i_da_d(v_linebuffer_rsc_1_0_i_da_d),
      .v_linebuffer_rsc_1_0_i_ena_d(v_linebuffer_rsc_1_0_i_ena_d),
      .v_linebuffer_rsc_1_0_i_wea_d(v_linebuffer_rsc_1_0_i_wea_d),
      .v_linebuffer_rsc_1_0_i_qa_d(v_linebuffer_rsc_1_0_i_qa_d),
      .v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(v_linebuffer_rsc_1_0_i_port_0_rw_ram_ir_internal_WMASK_B_d),
      .v_linebuffer_rsc_2_0_i_adra_d(v_linebuffer_rsc_2_0_i_adra_d),
      .v_linebuffer_rsc_2_0_i_da_d(v_linebuffer_rsc_2_0_i_da_d),
      .v_linebuffer_rsc_2_0_i_ena_d(v_linebuffer_rsc_2_0_i_ena_d),
      .v_linebuffer_rsc_2_0_i_wea_d(v_linebuffer_rsc_2_0_i_wea_d),
      .v_linebuffer_rsc_2_0_i_qa_d(v_linebuffer_rsc_2_0_i_qa_d),
      .v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d(v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_RMASK_B_d),
      .v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d(v_linebuffer_rsc_2_0_i_port_0_rw_ram_ir_internal_WMASK_B_d)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    crop
// ------------------------------------------------------------------


module crop (
  clk, arst_n, top_reg_frameWidth, top_reg_frameHeight, top_reg_inputFormat, top_reg_imgPattern,
      top_reg_pipeMode, top_reg_blc, top_reg_shadowEb, top_reg_binningFrameWidth,
      top_reg_binningFrameHeight, top_reg_scalerFrameWidth, top_reg_scalerFrameHeight,
      crop_reg_m_nEb, crop_reg_upper_left_x, crop_reg_upper_left_y, crop_reg_lower_right_x,
      crop_reg_lower_right_y, crop_reg_yuvpattern, y_src_rsc_dat, y_src_rsc_vld,
      y_src_rsc_rdy, u_src_rsc_dat, u_src_rsc_vld, u_src_rsc_rdy, v_src_rsc_dat,
      v_src_rsc_vld, v_src_rsc_rdy, y_dst_rsc_dat, y_dst_rsc_vld, y_dst_rsc_rdy,
      u_dst_rsc_dat, u_dst_rsc_vld, u_dst_rsc_rdy, v_dst_rsc_dat, v_dst_rsc_vld,
      v_dst_rsc_rdy
);
  input clk;
  input arst_n;
  input [12:0] top_reg_frameWidth;
  input [12:0] top_reg_frameHeight;
  input top_reg_inputFormat;
  input [1:0] top_reg_imgPattern;
  input [1:0] top_reg_pipeMode;
  input [8:0] top_reg_blc;
  input top_reg_shadowEb;
  input [12:0] top_reg_binningFrameWidth;
  input [12:0] top_reg_binningFrameHeight;
  input [12:0] top_reg_scalerFrameWidth;
  input [12:0] top_reg_scalerFrameHeight;
  input crop_reg_m_nEb;
  input [12:0] crop_reg_upper_left_x;
  input [12:0] crop_reg_upper_left_y;
  input [12:0] crop_reg_lower_right_x;
  input [12:0] crop_reg_lower_right_y;
  input [1:0] crop_reg_yuvpattern;
  input [9:0] y_src_rsc_dat;
  input y_src_rsc_vld;
  output y_src_rsc_rdy;
  input [9:0] u_src_rsc_dat;
  input u_src_rsc_vld;
  output u_src_rsc_rdy;
  input [9:0] v_src_rsc_dat;
  input v_src_rsc_vld;
  output v_src_rsc_rdy;
  output [9:0] y_dst_rsc_dat;
  output y_dst_rsc_vld;
  input y_dst_rsc_rdy;
  output [9:0] u_dst_rsc_dat;
  output u_dst_rsc_vld;
  input u_dst_rsc_rdy;
  output [9:0] v_dst_rsc_dat;
  output v_dst_rsc_vld;
  input v_dst_rsc_rdy;



  // Interconnect Declarations for Component Instantiations 
  crop_core crop_core_inst (
      .clk(clk),
      .arst_n(arst_n),
      .top_reg_frameWidth(top_reg_frameWidth),
      .top_reg_frameHeight(top_reg_frameHeight),
      .crop_reg_m_nEb(crop_reg_m_nEb),
      .crop_reg_upper_left_x(crop_reg_upper_left_x),
      .crop_reg_upper_left_y(crop_reg_upper_left_y),
      .crop_reg_lower_right_x(crop_reg_lower_right_x),
      .crop_reg_lower_right_y(crop_reg_lower_right_y),
      .crop_reg_yuvpattern(crop_reg_yuvpattern),
      .y_src_rsc_dat(y_src_rsc_dat),
      .y_src_rsc_vld(y_src_rsc_vld),
      .y_src_rsc_rdy(y_src_rsc_rdy),
      .u_src_rsc_dat(u_src_rsc_dat),
      .u_src_rsc_vld(u_src_rsc_vld),
      .u_src_rsc_rdy(u_src_rsc_rdy),
      .v_src_rsc_dat(v_src_rsc_dat),
      .v_src_rsc_vld(v_src_rsc_vld),
      .v_src_rsc_rdy(v_src_rsc_rdy),
      .y_dst_rsc_dat(y_dst_rsc_dat),
      .y_dst_rsc_vld(y_dst_rsc_vld),
      .y_dst_rsc_rdy(y_dst_rsc_rdy),
      .u_dst_rsc_dat(u_dst_rsc_dat),
      .u_dst_rsc_vld(u_dst_rsc_vld),
      .u_dst_rsc_rdy(u_dst_rsc_rdy),
      .v_dst_rsc_dat(v_dst_rsc_dat),
      .v_dst_rsc_vld(v_dst_rsc_vld),
      .v_dst_rsc_rdy(v_dst_rsc_rdy)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    isp_top
// ------------------------------------------------------------------


module isp_top (
  clk, arst_n, src_rsc_dat, src_rsc_vld, src_rsc_rdy, dst_y_rsc_dat, dst_y_rsc_vld,
      dst_y_rsc_rdy, dst_u_rsc_dat, dst_u_rsc_vld, dst_u_rsc_rdy, dst_v_rsc_dat,
      dst_v_rsc_vld, dst_v_rsc_rdy, top_register_frameWidth, top_register_frameHeight,
      top_register_inputFormat, top_register_imgPattern, top_register_pipeMode, top_register_blc,
      top_register_shadowEb, top_register_binningFrameWidth, top_register_binningFrameHeight,
      top_register_scalerFrameWidth, top_register_scalerFrameHeight, tpg_register_m_bTPG_en,
      tpg_register_m_nWidth, tpg_register_m_nHeight, tpg_register_m_nCFAPattern,
      tpg_register_m_bRollingEnable, tpg_register_m_bSensor_timing_en, tpg_register_m_nVBlank_num,
      tpg_register_m_nHBlank_num, tpg_register_m_valid_blank, tpg_register_m_nID,
      dgain_register_m_nEb, dgain_register_m_nBlcR, dgain_register_m_nBlcGr, dgain_register_m_nBlcGb,
      dgain_register_m_nBlcB, dgain_register_m_nR, dgain_register_m_nGr, dgain_register_m_nGb,
      dgain_register_m_nB, lsc_register_eb, lsc_register_rGain, lsc_register_GrGain,
      lsc_register_GbGain, lsc_register_bGain, lsc_register_blockHeight, lsc_register_blockWidth,
      lsc_register_blockWidth_1, lsc_register_blockHeight_1, dpc_register_eb, dpc_register_th_w,
      dpc_register_th_b, rawdns_register_sigma, rawdns_register_eb, rawdns_register_Filterpara,
      rawdns_register_invksigma2, awb_register_m_nEb, awb_register_coeff, wbc_register_m_nEb,
      wbc_register_m_nR, wbc_register_m_nGr, wbc_register_m_nGb, wbc_register_m_nB,
      gb_register_eb, gb_register_win_size, gb_register_Lbound, gb_register_Hbound,
      gb_register_threhold, demosaic_register_eb, ee_register_eb, ee_register_coeff,
      cmc_register_m_nEb, cmc_register_m_nGain, cmc_register_m_bCFCEnable, cmc_register_m_bDiscardH,
      cmc_register_m_pHueRange, cmc_register_m_nHueBandShift, cmc_register_m_nEdgeThre,
      cmc_register_m_nEdgeBandShift, cmc_register_m_nCFCStrength, gtm_register_eb,
      gtm_register_m_bDitheringEnable, gtm_register_gtmTab, csc_register_m_nEb, csc_register_coeff,
      yfc_register_m_nEb, yfc_register_yuvpattern, yuvdns_register_eb, yuvdns_register_ysigma2,
      yuvdns_register_yinvsigma2, yuvdns_register_uvsigma2, yuvdns_register_uvinvsigma2,
      yuvdns_register_yfilt, yuvdns_register_uvfilt, yuvdns_register_yinvfilt, yuvdns_register_uvinvfilt,
      yuvdns_register_yH2, yuvdns_register_yinvH2, yuvdns_register_uvH2, yuvdns_register_uvinvH2,
      scaledown_register_m_nEb, scaledown_register_yuvpattern, scaledown_register_times,
      crop_register_m_nEb, crop_register_upper_left_x, crop_register_upper_left_y,
      crop_register_lower_right_x, crop_register_lower_right_y, crop_register_yuvpattern
);
  input clk;
  input arst_n;
  input [11:0] src_rsc_dat;
  input src_rsc_vld;
  output src_rsc_rdy;
  output [9:0] dst_y_rsc_dat;
  output dst_y_rsc_vld;
  input dst_y_rsc_rdy;
  output [9:0] dst_u_rsc_dat;
  output dst_u_rsc_vld;
  input dst_u_rsc_rdy;
  output [9:0] dst_v_rsc_dat;
  output dst_v_rsc_vld;
  input dst_v_rsc_rdy;
  input [12:0] top_register_frameWidth;
  input [12:0] top_register_frameHeight;
  input top_register_inputFormat;
  input [1:0] top_register_imgPattern;
  input [1:0] top_register_pipeMode;
  input [8:0] top_register_blc;
  input top_register_shadowEb;
  input [12:0] top_register_binningFrameWidth;
  input [12:0] top_register_binningFrameHeight;
  input [12:0] top_register_scalerFrameWidth;
  input [12:0] top_register_scalerFrameHeight;
  input tpg_register_m_bTPG_en;
  input [12:0] tpg_register_m_nWidth;
  input [12:0] tpg_register_m_nHeight;
  input [1:0] tpg_register_m_nCFAPattern;
  input tpg_register_m_bRollingEnable;
  input tpg_register_m_bSensor_timing_en;
  input [11:0] tpg_register_m_nVBlank_num;
  input [11:0] tpg_register_m_nHBlank_num;
  input [7:0] tpg_register_m_valid_blank;
  input [2:0] tpg_register_m_nID;
  input dgain_register_m_nEb;
  input [8:0] dgain_register_m_nBlcR;
  input [8:0] dgain_register_m_nBlcGr;
  input [8:0] dgain_register_m_nBlcGb;
  input [8:0] dgain_register_m_nBlcB;
  input [19:0] dgain_register_m_nR;
  input [19:0] dgain_register_m_nGr;
  input [19:0] dgain_register_m_nGb;
  input [19:0] dgain_register_m_nB;
  input lsc_register_eb;
  input [2872:0] lsc_register_rGain;
  input [2872:0] lsc_register_GrGain;
  input [2872:0] lsc_register_GbGain;
  input [2872:0] lsc_register_bGain;
  input [8:0] lsc_register_blockHeight;
  input [8:0] lsc_register_blockWidth;
  input [13:0] lsc_register_blockWidth_1;
  input [9:0] lsc_register_blockHeight_1;
  input dpc_register_eb;
  input [10:0] dpc_register_th_w;
  input [10:0] dpc_register_th_b;
  input [5:0] rawdns_register_sigma;
  input rawdns_register_eb;
  input [6:0] rawdns_register_Filterpara;
  input [11:0] rawdns_register_invksigma2;
  input awb_register_m_nEb;
  input [4:0] awb_register_coeff;
  input wbc_register_m_nEb;
  input [14:0] wbc_register_m_nR;
  input [14:0] wbc_register_m_nGr;
  input [14:0] wbc_register_m_nGb;
  input [14:0] wbc_register_m_nB;
  input gb_register_eb;
  input [3:0] gb_register_win_size;
  input [3:0] gb_register_Lbound;
  input [5:0] gb_register_Hbound;
  input [9:0] gb_register_threhold;
  input demosaic_register_eb;
  input ee_register_eb;
  input [7:0] ee_register_coeff;
  input cmc_register_m_nEb;
  input [191:0] cmc_register_m_nGain;
  input cmc_register_m_bCFCEnable;
  input cmc_register_m_bDiscardH;
  input [17:0] cmc_register_m_pHueRange;
  input [2:0] cmc_register_m_nHueBandShift;
  input [7:0] cmc_register_m_nEdgeThre;
  input [2:0] cmc_register_m_nEdgeBandShift;
  input [4:0] cmc_register_m_nCFCStrength;
  input gtm_register_eb;
  input gtm_register_m_bDitheringEnable;
  input [1289:0] gtm_register_gtmTab;
  input csc_register_m_nEb;
  input [131:0] csc_register_coeff;
  input yfc_register_m_nEb;
  input yfc_register_yuvpattern;
  input yuvdns_register_eb;
  input [13:0] yuvdns_register_ysigma2;
  input [9:0] yuvdns_register_yinvsigma2;
  input [13:0] yuvdns_register_uvsigma2;
  input [9:0] yuvdns_register_uvinvsigma2;
  input [3:0] yuvdns_register_yfilt;
  input [3:0] yuvdns_register_uvfilt;
  input [4:0] yuvdns_register_yinvfilt;
  input [4:0] yuvdns_register_uvinvfilt;
  input [13:0] yuvdns_register_yH2;
  input [17:0] yuvdns_register_yinvH2;
  input [13:0] yuvdns_register_uvH2;
  input [17:0] yuvdns_register_uvinvH2;
  input scaledown_register_m_nEb;
  input [1:0] scaledown_register_yuvpattern;
  input [4:0] scaledown_register_times;
  input crop_register_m_nEb;
  input [12:0] crop_register_upper_left_x;
  input [12:0] crop_register_upper_left_y;
  input [12:0] crop_register_lower_right_x;
  input [12:0] crop_register_lower_right_y;
  input [1:0] crop_register_yuvpattern;


  // Interconnect Declarations
  wire [11:0] dst_rsc_dat_ntpg_inst;
  wire dst_rsc_rdy_ntpg_inst;
  wire [11:0] src_rsc_dat_ndgain_inst;
  wire src_rsc_vld_ndgain_inst;
  wire [11:0] dst_rsc_dat_ndgain_inst;
  wire dst_rsc_rdy_ndgain_inst;
  wire [11:0] src_rsc_dat_nlsc_inst;
  wire src_rsc_vld_nlsc_inst;
  wire [11:0] dst_rsc_dat_nlsc_inst;
  wire dst_rsc_rdy_nlsc_inst;
  wire [11:0] src_rsc_dat_ndpc_inst;
  wire src_rsc_vld_ndpc_inst;
  wire [11:0] dst_rsc_dat_ndpc_inst;
  wire dst_rsc_rdy_ndpc_inst;
  wire [11:0] src_rsc_dat_nisp_rawdns_inst;
  wire src_rsc_vld_nisp_rawdns_inst;
  wire [11:0] dst_rsc_dat_nisp_rawdns_inst;
  wire dst_rsc_rdy_nisp_rawdns_inst;
  wire [14:0] awb_reg_r_gain_rsc_dat_nawb_inst;
  wire [14:0] awb_reg_g_gain_rsc_dat_nawb_inst;
  wire [14:0] awb_reg_b_gain_rsc_dat_nawb_inst;
  wire [11:0] src_rsc_dat_nawb_inst;
  wire src_rsc_vld_nawb_inst;
  wire [11:0] dst_rsc_dat_nawb_inst;
  wire dst_rsc_rdy_nawb_inst;
  wire [11:0] src_rsc_dat_nwbc_inst;
  wire src_rsc_vld_nwbc_inst;
  wire [11:0] dst_rsc_dat_nwbc_inst;
  wire dst_rsc_rdy_nwbc_inst;
  wire [11:0] src_rsc_dat_ngreenbalance2_inst;
  wire src_rsc_vld_ngreenbalance2_inst;
  wire [11:0] dst_rsc_dat_ngreenbalance2_inst;
  wire dst_rsc_rdy_ngreenbalance2_inst;
  wire [11:0] src_rsc_dat_ndemosaic_inst;
  wire src_rsc_vld_ndemosaic_inst;
  wire [35:0] dst_rsc_dat_ndemosaic_inst;
  wire dst_rsc_rdy_ndemosaic_inst;
  wire [35:0] src_rsc_dat_nedgeenhancement_inst;
  wire src_rsc_vld_nedgeenhancement_inst;
  wire [35:0] dst_rsc_dat_nedgeenhancement_inst;
  wire dst_rsc_rdy_nedgeenhancement_inst;
  wire [35:0] src_rsc_dat_ncmc_inst;
  wire src_rsc_vld_ncmc_inst;
  wire [41:0] dst_rsc_dat_ncmc_inst;
  wire dst_rsc_rdy_ncmc_inst;
  wire [41:0] src_rsc_dat_ngtm_inst;
  wire src_rsc_vld_ngtm_inst;
  wire [41:0] dst_rsc_dat_ngtm_inst;
  wire dst_rsc_rdy_ngtm_inst;
  wire [41:0] src_rsc_dat_ncsc_inst;
  wire src_rsc_vld_ncsc_inst;
  wire [29:0] dst_rsc_dat_ncsc_inst;
  wire dst_rsc_rdy_ncsc_inst;
  wire [29:0] src_rsc_dat_nyfc_inst;
  wire src_rsc_vld_nyfc_inst;
  wire [9:0] y_dst_rsc_dat_nyfc_inst;
  wire y_dst_rsc_rdy_nyfc_inst;
  wire [9:0] u_dst_rsc_dat_nyfc_inst;
  wire u_dst_rsc_rdy_nyfc_inst;
  wire [9:0] v_dst_rsc_dat_nyfc_inst;
  wire v_dst_rsc_rdy_nyfc_inst;
  wire [9:0] src_y_rsc_dat_nyuv444dns_inst;
  wire src_y_rsc_vld_nyuv444dns_inst;
  wire [9:0] src_u_rsc_dat_nyuv444dns_inst;
  wire src_u_rsc_vld_nyuv444dns_inst;
  wire [9:0] src_v_rsc_dat_nyuv444dns_inst;
  wire src_v_rsc_vld_nyuv444dns_inst;
  wire [9:0] dst_y_rsc_dat_nyuv444dns_inst;
  wire dst_y_rsc_rdy_nyuv444dns_inst;
  wire [9:0] dst_u_rsc_dat_nyuv444dns_inst;
  wire dst_u_rsc_rdy_nyuv444dns_inst;
  wire [9:0] dst_v_rsc_dat_nyuv444dns_inst;
  wire dst_v_rsc_rdy_nyuv444dns_inst;
  wire [9:0] y_src_rsc_dat_nscaledown_inst;
  wire y_src_rsc_vld_nscaledown_inst;
  wire [9:0] u_src_rsc_dat_nscaledown_inst;
  wire u_src_rsc_vld_nscaledown_inst;
  wire [9:0] v_src_rsc_dat_nscaledown_inst;
  wire v_src_rsc_vld_nscaledown_inst;
  wire [9:0] y_dst_rsc_dat_nscaledown_inst;
  wire y_dst_rsc_rdy_nscaledown_inst;
  wire [9:0] u_dst_rsc_dat_nscaledown_inst;
  wire u_dst_rsc_rdy_nscaledown_inst;
  wire [9:0] v_dst_rsc_dat_nscaledown_inst;
  wire v_dst_rsc_rdy_nscaledown_inst;
  wire [9:0] y_src_rsc_dat_ncrop_inst;
  wire y_src_rsc_vld_ncrop_inst;
  wire [9:0] u_src_rsc_dat_ncrop_inst;
  wire u_src_rsc_vld_ncrop_inst;
  wire [9:0] v_src_rsc_dat_ncrop_inst;
  wire v_src_rsc_vld_ncrop_inst;
  wire [9:0] y_dst_rsc_dat_ncrop_inst;
  wire [9:0] u_dst_rsc_dat_ncrop_inst;
  wire [9:0] v_dst_rsc_dat_ncrop_inst;
  wire src_rsc_rdy_ntpg_inst_bud;
  wire dst_rsc_vld_ntpg_inst_bud;
  wire src_rsc_rdy_ndgain_inst_bud;
  wire dst_rsc_vld_ndgain_inst_bud;
  wire src_rsc_rdy_nlsc_inst_bud;
  wire dst_rsc_vld_nlsc_inst_bud;
  wire src_rsc_rdy_ndpc_inst_bud;
  wire dst_rsc_vld_ndpc_inst_bud;
  wire src_rsc_rdy_nisp_rawdns_inst_bud;
  wire dst_rsc_vld_nisp_rawdns_inst_bud;
  wire src_rsc_rdy_nawb_inst_bud;
  wire awb_reg_r_gain_rsc_triosy_lz_nawb_inst_bud;
  wire awb_reg_g_gain_rsc_triosy_lz_nawb_inst_bud;
  wire awb_reg_b_gain_rsc_triosy_lz_nawb_inst_bud;
  wire dst_rsc_vld_nawb_inst_bud;
  wire src_rsc_rdy_nwbc_inst_bud;
  wire dst_rsc_vld_nwbc_inst_bud;
  wire src_rsc_rdy_ngreenbalance2_inst_bud;
  wire dst_rsc_vld_ngreenbalance2_inst_bud;
  wire src_rsc_rdy_ndemosaic_inst_bud;
  wire dst_rsc_vld_ndemosaic_inst_bud;
  wire src_rsc_rdy_nedgeenhancement_inst_bud;
  wire dst_rsc_vld_nedgeenhancement_inst_bud;
  wire src_rsc_rdy_ncmc_inst_bud;
  wire dst_rsc_vld_ncmc_inst_bud;
  wire src_rsc_rdy_ngtm_inst_bud;
  wire dst_rsc_vld_ngtm_inst_bud;
  wire src_rsc_rdy_ncsc_inst_bud;
  wire dst_rsc_vld_ncsc_inst_bud;
  wire src_rsc_rdy_nyfc_inst_bud;
  wire y_dst_rsc_vld_nyfc_inst_bud;
  wire src_y_rsc_rdy_nyuv444dns_inst_bud;
  wire u_dst_rsc_vld_nyfc_inst_bud;
  wire src_u_rsc_rdy_nyuv444dns_inst_bud;
  wire v_dst_rsc_vld_nyfc_inst_bud;
  wire src_v_rsc_rdy_nyuv444dns_inst_bud;
  wire dst_y_rsc_vld_nyuv444dns_inst_bud;
  wire y_src_rsc_rdy_nscaledown_inst_bud;
  wire dst_u_rsc_vld_nyuv444dns_inst_bud;
  wire u_src_rsc_rdy_nscaledown_inst_bud;
  wire dst_v_rsc_vld_nyuv444dns_inst_bud;
  wire v_src_rsc_rdy_nscaledown_inst_bud;
  wire y_dst_rsc_vld_nscaledown_inst_bud;
  wire y_src_rsc_rdy_ncrop_inst_bud;
  wire u_dst_rsc_vld_nscaledown_inst_bud;
  wire u_src_rsc_rdy_ncrop_inst_bud;
  wire v_dst_rsc_vld_nscaledown_inst_bud;
  wire v_src_rsc_rdy_ncrop_inst_bud;
  wire y_dst_rsc_vld_ncrop_inst_bud;
  wire u_dst_rsc_vld_ncrop_inst_bud;
  wire v_dst_rsc_vld_ncrop_inst_bud;
  wire tpg_dgain_data_unc_2;
  wire tpg_dgain_data_idle;
  wire dgain_lsc_data_unc_2;
  wire dgain_lsc_data_idle;
  wire lsc_dpc_data_unc_2;
  wire lsc_dpc_data_idle;
  wire dpc_rawdns_data_unc_2;
  wire dpc_rawdns_data_idle;
  wire rawdns_awb_data_unc_2;
  wire rawdns_awb_data_idle;
  wire awb_wbc_data_unc_2;
  wire awb_wbc_data_idle;
  wire wbc_gb_data_unc_2;
  wire wbc_gb_data_idle;
  wire gb_demosaic_data_unc_2;
  wire gb_demosaic_data_idle;
  wire demosaic_ee_data_unc_2;
  wire demosaic_ee_data_idle;
  wire ee_cmc_data_unc_2;
  wire ee_cmc_data_idle;
  wire cmc_gtm_data_unc_2;
  wire cmc_gtm_data_idle;
  wire gtm_csc_data_unc_2;
  wire gtm_csc_data_idle;
  wire csc_yfc_data_unc_2;
  wire csc_yfc_data_idle;
  wire yfc_yuvdns_data_y_unc_2;
  wire yfc_yuvdns_data_y_idle;
  wire yfc_yuvdns_data_u_unc_2;
  wire yfc_yuvdns_data_u_idle;
  wire yfc_yuvdns_data_v_unc_2;
  wire yfc_yuvdns_data_v_idle;
  wire yuvdns_scale_data_y_unc_2;
  wire yuvdns_scale_data_y_idle;
  wire yuvdns_scale_data_u_unc_2;
  wire yuvdns_scale_data_u_idle;
  wire yuvdns_scale_data_v_unc_2;
  wire yuvdns_scale_data_v_idle;
  wire scale_crop_data_y_unc_2;
  wire scale_crop_data_y_idle;
  wire scale_crop_data_u_unc_2;
  wire scale_crop_data_u_idle;
  wire scale_crop_data_v_unc_2;
  wire scale_crop_data_v_idle;


  // Interconnect Declarations for Component Instantiations 
  ccs_pipe_v5 #(.rscid(32'sd498),
  .width(32'sd12),
  .sz_width(32'sd1),
  .fifo_sz(32'sd12),
  .log2_sz(32'sd4),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) tpg_dgain_data_cns_pipe (
      .clk(clk),
      .en(1'b0),
      .arst(arst_n),
      .srst(1'b1),
      .din_rdy(dst_rsc_rdy_ntpg_inst),
      .din_vld(dst_rsc_vld_ntpg_inst_bud),
      .din(dst_rsc_dat_ntpg_inst),
      .dout_rdy(src_rsc_rdy_ndgain_inst_bud),
      .dout_vld(src_rsc_vld_ndgain_inst),
      .dout(src_rsc_dat_ndgain_inst),
      .sz(tpg_dgain_data_unc_2),
      .sz_req(1'b0),
      .is_idle(tpg_dgain_data_idle)
    );
  ccs_pipe_v5 #(.rscid(32'sd499),
  .width(32'sd12),
  .sz_width(32'sd1),
  .fifo_sz(32'sd3),
  .log2_sz(32'sd2),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) dgain_lsc_data_cns_pipe (
      .clk(clk),
      .en(1'b0),
      .arst(arst_n),
      .srst(1'b1),
      .din_rdy(dst_rsc_rdy_ndgain_inst),
      .din_vld(dst_rsc_vld_ndgain_inst_bud),
      .din(dst_rsc_dat_ndgain_inst),
      .dout_rdy(src_rsc_rdy_nlsc_inst_bud),
      .dout_vld(src_rsc_vld_nlsc_inst),
      .dout(src_rsc_dat_nlsc_inst),
      .sz(dgain_lsc_data_unc_2),
      .sz_req(1'b0),
      .is_idle(dgain_lsc_data_idle)
    );
  ccs_pipe_v5 #(.rscid(32'sd500),
  .width(32'sd12),
  .sz_width(32'sd1),
  .fifo_sz(32'sd3),
  .log2_sz(32'sd2),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) lsc_dpc_data_cns_pipe (
      .clk(clk),
      .en(1'b0),
      .arst(arst_n),
      .srst(1'b1),
      .din_rdy(dst_rsc_rdy_nlsc_inst),
      .din_vld(dst_rsc_vld_nlsc_inst_bud),
      .din(dst_rsc_dat_nlsc_inst),
      .dout_rdy(src_rsc_rdy_ndpc_inst_bud),
      .dout_vld(src_rsc_vld_ndpc_inst),
      .dout(src_rsc_dat_ndpc_inst),
      .sz(lsc_dpc_data_unc_2),
      .sz_req(1'b0),
      .is_idle(lsc_dpc_data_idle)
    );
  ccs_pipe_v5 #(.rscid(32'sd501),
  .width(32'sd12),
  .sz_width(32'sd1),
  .fifo_sz(32'sd13),
  .log2_sz(32'sd4),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) dpc_rawdns_data_cns_pipe (
      .clk(clk),
      .en(1'b0),
      .arst(arst_n),
      .srst(1'b1),
      .din_rdy(dst_rsc_rdy_ndpc_inst),
      .din_vld(dst_rsc_vld_ndpc_inst_bud),
      .din(dst_rsc_dat_ndpc_inst),
      .dout_rdy(src_rsc_rdy_nisp_rawdns_inst_bud),
      .dout_vld(src_rsc_vld_nisp_rawdns_inst),
      .dout(src_rsc_dat_nisp_rawdns_inst),
      .sz(dpc_rawdns_data_unc_2),
      .sz_req(1'b0),
      .is_idle(dpc_rawdns_data_idle)
    );
  ccs_pipe_v5 #(.rscid(32'sd502),
  .width(32'sd12),
  .sz_width(32'sd1),
  .fifo_sz(32'sd12),
  .log2_sz(32'sd4),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) rawdns_awb_data_cns_pipe (
      .clk(clk),
      .en(1'b0),
      .arst(arst_n),
      .srst(1'b1),
      .din_rdy(dst_rsc_rdy_nisp_rawdns_inst),
      .din_vld(dst_rsc_vld_nisp_rawdns_inst_bud),
      .din(dst_rsc_dat_nisp_rawdns_inst),
      .dout_rdy(src_rsc_rdy_nawb_inst_bud),
      .dout_vld(src_rsc_vld_nawb_inst),
      .dout(src_rsc_dat_nawb_inst),
      .sz(rawdns_awb_data_unc_2),
      .sz_req(1'b0),
      .is_idle(rawdns_awb_data_idle)
    );
  ccs_pipe_v5 #(.rscid(32'sd503),
  .width(32'sd12),
  .sz_width(32'sd1),
  .fifo_sz(32'sd3),
  .log2_sz(32'sd2),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) awb_wbc_data_cns_pipe (
      .clk(clk),
      .en(1'b0),
      .arst(arst_n),
      .srst(1'b1),
      .din_rdy(dst_rsc_rdy_nawb_inst),
      .din_vld(dst_rsc_vld_nawb_inst_bud),
      .din(dst_rsc_dat_nawb_inst),
      .dout_rdy(src_rsc_rdy_nwbc_inst_bud),
      .dout_vld(src_rsc_vld_nwbc_inst),
      .dout(src_rsc_dat_nwbc_inst),
      .sz(awb_wbc_data_unc_2),
      .sz_req(1'b0),
      .is_idle(awb_wbc_data_idle)
    );
  ccs_pipe_v5 #(.rscid(32'sd504),
  .width(32'sd12),
  .sz_width(32'sd1),
  .fifo_sz(32'sd4),
  .log2_sz(32'sd2),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) wbc_gb_data_cns_pipe (
      .clk(clk),
      .en(1'b0),
      .arst(arst_n),
      .srst(1'b1),
      .din_rdy(dst_rsc_rdy_nwbc_inst),
      .din_vld(dst_rsc_vld_nwbc_inst_bud),
      .din(dst_rsc_dat_nwbc_inst),
      .dout_rdy(src_rsc_rdy_ngreenbalance2_inst_bud),
      .dout_vld(src_rsc_vld_ngreenbalance2_inst),
      .dout(src_rsc_dat_ngreenbalance2_inst),
      .sz(wbc_gb_data_unc_2),
      .sz_req(1'b0),
      .is_idle(wbc_gb_data_idle)
    );
  ccs_pipe_v5 #(.rscid(32'sd505),
  .width(32'sd12),
  .sz_width(32'sd1),
  .fifo_sz(32'sd12),
  .log2_sz(32'sd4),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) gb_demosaic_data_cns_pipe (
      .clk(clk),
      .en(1'b0),
      .arst(arst_n),
      .srst(1'b1),
      .din_rdy(dst_rsc_rdy_ngreenbalance2_inst),
      .din_vld(dst_rsc_vld_ngreenbalance2_inst_bud),
      .din(dst_rsc_dat_ngreenbalance2_inst),
      .dout_rdy(src_rsc_rdy_ndemosaic_inst_bud),
      .dout_vld(src_rsc_vld_ndemosaic_inst),
      .dout(src_rsc_dat_ndemosaic_inst),
      .sz(gb_demosaic_data_unc_2),
      .sz_req(1'b0),
      .is_idle(gb_demosaic_data_idle)
    );
  ccs_pipe_v5 #(.rscid(32'sd506),
  .width(32'sd36),
  .sz_width(32'sd1),
  .fifo_sz(32'sd13),
  .log2_sz(32'sd4),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) demosaic_ee_data_cns_pipe (
      .clk(clk),
      .en(1'b0),
      .arst(arst_n),
      .srst(1'b1),
      .din_rdy(dst_rsc_rdy_ndemosaic_inst),
      .din_vld(dst_rsc_vld_ndemosaic_inst_bud),
      .din(dst_rsc_dat_ndemosaic_inst),
      .dout_rdy(src_rsc_rdy_nedgeenhancement_inst_bud),
      .dout_vld(src_rsc_vld_nedgeenhancement_inst),
      .dout(src_rsc_dat_nedgeenhancement_inst),
      .sz(demosaic_ee_data_unc_2),
      .sz_req(1'b0),
      .is_idle(demosaic_ee_data_idle)
    );
  ccs_pipe_v5 #(.rscid(32'sd507),
  .width(32'sd36),
  .sz_width(32'sd1),
  .fifo_sz(32'sd12),
  .log2_sz(32'sd4),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) ee_cmc_data_cns_pipe (
      .clk(clk),
      .en(1'b0),
      .arst(arst_n),
      .srst(1'b1),
      .din_rdy(dst_rsc_rdy_nedgeenhancement_inst),
      .din_vld(dst_rsc_vld_nedgeenhancement_inst_bud),
      .din(dst_rsc_dat_nedgeenhancement_inst),
      .dout_rdy(src_rsc_rdy_ncmc_inst_bud),
      .dout_vld(src_rsc_vld_ncmc_inst),
      .dout(src_rsc_dat_ncmc_inst),
      .sz(ee_cmc_data_unc_2),
      .sz_req(1'b0),
      .is_idle(ee_cmc_data_idle)
    );
  ccs_pipe_v5 #(.rscid(32'sd508),
  .width(32'sd42),
  .sz_width(32'sd1),
  .fifo_sz(32'sd3),
  .log2_sz(32'sd2),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) cmc_gtm_data_cns_pipe (
      .clk(clk),
      .en(1'b0),
      .arst(arst_n),
      .srst(1'b1),
      .din_rdy(dst_rsc_rdy_ncmc_inst),
      .din_vld(dst_rsc_vld_ncmc_inst_bud),
      .din(dst_rsc_dat_ncmc_inst),
      .dout_rdy(src_rsc_rdy_ngtm_inst_bud),
      .dout_vld(src_rsc_vld_ngtm_inst),
      .dout(src_rsc_dat_ngtm_inst),
      .sz(cmc_gtm_data_unc_2),
      .sz_req(1'b0),
      .is_idle(cmc_gtm_data_idle)
    );
  ccs_pipe_v5 #(.rscid(32'sd509),
  .width(32'sd42),
  .sz_width(32'sd1),
  .fifo_sz(32'sd3),
  .log2_sz(32'sd2),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) gtm_csc_data_cns_pipe (
      .clk(clk),
      .en(1'b0),
      .arst(arst_n),
      .srst(1'b1),
      .din_rdy(dst_rsc_rdy_ngtm_inst),
      .din_vld(dst_rsc_vld_ngtm_inst_bud),
      .din(dst_rsc_dat_ngtm_inst),
      .dout_rdy(src_rsc_rdy_ncsc_inst_bud),
      .dout_vld(src_rsc_vld_ncsc_inst),
      .dout(src_rsc_dat_ncsc_inst),
      .sz(gtm_csc_data_unc_2),
      .sz_req(1'b0),
      .is_idle(gtm_csc_data_idle)
    );
  ccs_pipe_v5 #(.rscid(32'sd510),
  .width(32'sd30),
  .sz_width(32'sd1),
  .fifo_sz(32'sd4),
  .log2_sz(32'sd2),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) csc_yfc_data_cns_pipe (
      .clk(clk),
      .en(1'b0),
      .arst(arst_n),
      .srst(1'b1),
      .din_rdy(dst_rsc_rdy_ncsc_inst),
      .din_vld(dst_rsc_vld_ncsc_inst_bud),
      .din(dst_rsc_dat_ncsc_inst),
      .dout_rdy(src_rsc_rdy_nyfc_inst_bud),
      .dout_vld(src_rsc_vld_nyfc_inst),
      .dout(src_rsc_dat_nyfc_inst),
      .sz(csc_yfc_data_unc_2),
      .sz_req(1'b0),
      .is_idle(csc_yfc_data_idle)
    );
  ccs_pipe_v5 #(.rscid(32'sd511),
  .width(32'sd10),
  .sz_width(32'sd1),
  .fifo_sz(32'sd13),
  .log2_sz(32'sd4),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) yfc_yuvdns_data_y_cns_pipe (
      .clk(clk),
      .en(1'b0),
      .arst(arst_n),
      .srst(1'b1),
      .din_rdy(y_dst_rsc_rdy_nyfc_inst),
      .din_vld(y_dst_rsc_vld_nyfc_inst_bud),
      .din(y_dst_rsc_dat_nyfc_inst),
      .dout_rdy(src_y_rsc_rdy_nyuv444dns_inst_bud),
      .dout_vld(src_y_rsc_vld_nyuv444dns_inst),
      .dout(src_y_rsc_dat_nyuv444dns_inst),
      .sz(yfc_yuvdns_data_y_unc_2),
      .sz_req(1'b0),
      .is_idle(yfc_yuvdns_data_y_idle)
    );
  ccs_pipe_v5 #(.rscid(32'sd512),
  .width(32'sd10),
  .sz_width(32'sd1),
  .fifo_sz(32'sd13),
  .log2_sz(32'sd4),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) yfc_yuvdns_data_u_cns_pipe (
      .clk(clk),
      .en(1'b0),
      .arst(arst_n),
      .srst(1'b1),
      .din_rdy(u_dst_rsc_rdy_nyfc_inst),
      .din_vld(u_dst_rsc_vld_nyfc_inst_bud),
      .din(u_dst_rsc_dat_nyfc_inst),
      .dout_rdy(src_u_rsc_rdy_nyuv444dns_inst_bud),
      .dout_vld(src_u_rsc_vld_nyuv444dns_inst),
      .dout(src_u_rsc_dat_nyuv444dns_inst),
      .sz(yfc_yuvdns_data_u_unc_2),
      .sz_req(1'b0),
      .is_idle(yfc_yuvdns_data_u_idle)
    );
  ccs_pipe_v5 #(.rscid(32'sd513),
  .width(32'sd10),
  .sz_width(32'sd1),
  .fifo_sz(32'sd13),
  .log2_sz(32'sd4),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) yfc_yuvdns_data_v_cns_pipe (
      .clk(clk),
      .en(1'b0),
      .arst(arst_n),
      .srst(1'b1),
      .din_rdy(v_dst_rsc_rdy_nyfc_inst),
      .din_vld(v_dst_rsc_vld_nyfc_inst_bud),
      .din(v_dst_rsc_dat_nyfc_inst),
      .dout_rdy(src_v_rsc_rdy_nyuv444dns_inst_bud),
      .dout_vld(src_v_rsc_vld_nyuv444dns_inst),
      .dout(src_v_rsc_dat_nyuv444dns_inst),
      .sz(yfc_yuvdns_data_v_unc_2),
      .sz_req(1'b0),
      .is_idle(yfc_yuvdns_data_v_idle)
    );
  ccs_pipe_v5 #(.rscid(32'sd514),
  .width(32'sd10),
  .sz_width(32'sd1),
  .fifo_sz(32'sd13),
  .log2_sz(32'sd4),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) yuvdns_scale_data_y_cns_pipe (
      .clk(clk),
      .en(1'b0),
      .arst(arst_n),
      .srst(1'b1),
      .din_rdy(dst_y_rsc_rdy_nyuv444dns_inst),
      .din_vld(dst_y_rsc_vld_nyuv444dns_inst_bud),
      .din(dst_y_rsc_dat_nyuv444dns_inst),
      .dout_rdy(y_src_rsc_rdy_nscaledown_inst_bud),
      .dout_vld(y_src_rsc_vld_nscaledown_inst),
      .dout(y_src_rsc_dat_nscaledown_inst),
      .sz(yuvdns_scale_data_y_unc_2),
      .sz_req(1'b0),
      .is_idle(yuvdns_scale_data_y_idle)
    );
  ccs_pipe_v5 #(.rscid(32'sd515),
  .width(32'sd10),
  .sz_width(32'sd1),
  .fifo_sz(32'sd13),
  .log2_sz(32'sd4),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) yuvdns_scale_data_u_cns_pipe (
      .clk(clk),
      .en(1'b0),
      .arst(arst_n),
      .srst(1'b1),
      .din_rdy(dst_u_rsc_rdy_nyuv444dns_inst),
      .din_vld(dst_u_rsc_vld_nyuv444dns_inst_bud),
      .din(dst_u_rsc_dat_nyuv444dns_inst),
      .dout_rdy(u_src_rsc_rdy_nscaledown_inst_bud),
      .dout_vld(u_src_rsc_vld_nscaledown_inst),
      .dout(u_src_rsc_dat_nscaledown_inst),
      .sz(yuvdns_scale_data_u_unc_2),
      .sz_req(1'b0),
      .is_idle(yuvdns_scale_data_u_idle)
    );
  ccs_pipe_v5 #(.rscid(32'sd516),
  .width(32'sd10),
  .sz_width(32'sd1),
  .fifo_sz(32'sd13),
  .log2_sz(32'sd4),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) yuvdns_scale_data_v_cns_pipe (
      .clk(clk),
      .en(1'b0),
      .arst(arst_n),
      .srst(1'b1),
      .din_rdy(dst_v_rsc_rdy_nyuv444dns_inst),
      .din_vld(dst_v_rsc_vld_nyuv444dns_inst_bud),
      .din(dst_v_rsc_dat_nyuv444dns_inst),
      .dout_rdy(v_src_rsc_rdy_nscaledown_inst_bud),
      .dout_vld(v_src_rsc_vld_nscaledown_inst),
      .dout(v_src_rsc_dat_nscaledown_inst),
      .sz(yuvdns_scale_data_v_unc_2),
      .sz_req(1'b0),
      .is_idle(yuvdns_scale_data_v_idle)
    );
  ccs_pipe_v5 #(.rscid(32'sd517),
  .width(32'sd10),
  .sz_width(32'sd1),
  .fifo_sz(32'sd12),
  .log2_sz(32'sd4),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) scale_crop_data_y_cns_pipe (
      .clk(clk),
      .en(1'b0),
      .arst(arst_n),
      .srst(1'b1),
      .din_rdy(y_dst_rsc_rdy_nscaledown_inst),
      .din_vld(y_dst_rsc_vld_nscaledown_inst_bud),
      .din(y_dst_rsc_dat_nscaledown_inst),
      .dout_rdy(y_src_rsc_rdy_ncrop_inst_bud),
      .dout_vld(y_src_rsc_vld_ncrop_inst),
      .dout(y_src_rsc_dat_ncrop_inst),
      .sz(scale_crop_data_y_unc_2),
      .sz_req(1'b0),
      .is_idle(scale_crop_data_y_idle)
    );
  ccs_pipe_v5 #(.rscid(32'sd518),
  .width(32'sd10),
  .sz_width(32'sd1),
  .fifo_sz(32'sd13),
  .log2_sz(32'sd4),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) scale_crop_data_u_cns_pipe (
      .clk(clk),
      .en(1'b0),
      .arst(arst_n),
      .srst(1'b1),
      .din_rdy(u_dst_rsc_rdy_nscaledown_inst),
      .din_vld(u_dst_rsc_vld_nscaledown_inst_bud),
      .din(u_dst_rsc_dat_nscaledown_inst),
      .dout_rdy(u_src_rsc_rdy_ncrop_inst_bud),
      .dout_vld(u_src_rsc_vld_ncrop_inst),
      .dout(u_src_rsc_dat_ncrop_inst),
      .sz(scale_crop_data_u_unc_2),
      .sz_req(1'b0),
      .is_idle(scale_crop_data_u_idle)
    );
  ccs_pipe_v5 #(.rscid(32'sd519),
  .width(32'sd10),
  .sz_width(32'sd1),
  .fifo_sz(32'sd13),
  .log2_sz(32'sd4),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) scale_crop_data_v_cns_pipe (
      .clk(clk),
      .en(1'b0),
      .arst(arst_n),
      .srst(1'b1),
      .din_rdy(v_dst_rsc_rdy_nscaledown_inst),
      .din_vld(v_dst_rsc_vld_nscaledown_inst_bud),
      .din(v_dst_rsc_dat_nscaledown_inst),
      .dout_rdy(v_src_rsc_rdy_ncrop_inst_bud),
      .dout_vld(v_src_rsc_vld_ncrop_inst),
      .dout(v_src_rsc_dat_ncrop_inst),
      .sz(scale_crop_data_v_unc_2),
      .sz_req(1'b0),
      .is_idle(scale_crop_data_v_idle)
    );
  tpg tpg_inst (
      .clk(clk),
      .arst_n(arst_n),
      .top_reg_frameWidth(top_register_frameWidth),
      .top_reg_frameHeight(top_register_frameHeight),
      .top_reg_inputFormat(top_register_inputFormat),
      .top_reg_imgPattern(top_register_imgPattern),
      .top_reg_pipeMode(top_register_pipeMode),
      .top_reg_blc(top_register_blc),
      .top_reg_shadowEb(top_register_shadowEb),
      .top_reg_binningFrameWidth(top_register_binningFrameWidth),
      .top_reg_binningFrameHeight(top_register_binningFrameHeight),
      .top_reg_scalerFrameWidth(top_register_scalerFrameWidth),
      .top_reg_scalerFrameHeight(top_register_scalerFrameHeight),
      .tpg_reg_m_bTPG_en(tpg_register_m_bTPG_en),
      .tpg_reg_m_nWidth(tpg_register_m_nWidth),
      .tpg_reg_m_nHeight(tpg_register_m_nHeight),
      .tpg_reg_m_nCFAPattern(tpg_register_m_nCFAPattern),
      .tpg_reg_m_bRollingEnable(tpg_register_m_bRollingEnable),
      .tpg_reg_m_bSensor_timing_en(tpg_register_m_bSensor_timing_en),
      .tpg_reg_m_nVBlank_num(tpg_register_m_nVBlank_num),
      .tpg_reg_m_nHBlank_num(tpg_register_m_nHBlank_num),
      .tpg_reg_m_valid_blank(tpg_register_m_valid_blank),
      .tpg_reg_m_nID(tpg_register_m_nID),
      .src_rsc_dat(src_rsc_dat),
      .src_rsc_vld(src_rsc_vld),
      .src_rsc_rdy(src_rsc_rdy_ntpg_inst_bud),
      .dst_rsc_dat(dst_rsc_dat_ntpg_inst),
      .dst_rsc_vld(dst_rsc_vld_ntpg_inst_bud),
      .dst_rsc_rdy(dst_rsc_rdy_ntpg_inst)
    );
  dgain dgain_inst (
      .clk(clk),
      .arst_n(arst_n),
      .top_reg_frameWidth(top_register_frameWidth),
      .top_reg_frameHeight(top_register_frameHeight),
      .top_reg_inputFormat(top_register_inputFormat),
      .top_reg_imgPattern(top_register_imgPattern),
      .top_reg_pipeMode(top_register_pipeMode),
      .top_reg_blc(top_register_blc),
      .top_reg_shadowEb(top_register_shadowEb),
      .top_reg_binningFrameWidth(top_register_binningFrameWidth),
      .top_reg_binningFrameHeight(top_register_binningFrameHeight),
      .top_reg_scalerFrameWidth(top_register_scalerFrameWidth),
      .top_reg_scalerFrameHeight(top_register_scalerFrameHeight),
      .dgain_reg_m_nEb(dgain_register_m_nEb),
      .dgain_reg_m_nBlcR(dgain_register_m_nBlcR),
      .dgain_reg_m_nBlcGr(dgain_register_m_nBlcGr),
      .dgain_reg_m_nBlcGb(dgain_register_m_nBlcGb),
      .dgain_reg_m_nBlcB(dgain_register_m_nBlcB),
      .dgain_reg_m_nR(dgain_register_m_nR),
      .dgain_reg_m_nGr(dgain_register_m_nGr),
      .dgain_reg_m_nGb(dgain_register_m_nGb),
      .dgain_reg_m_nB(dgain_register_m_nB),
      .src_rsc_dat(src_rsc_dat_ndgain_inst),
      .src_rsc_vld(src_rsc_vld_ndgain_inst),
      .src_rsc_rdy(src_rsc_rdy_ndgain_inst_bud),
      .dst_rsc_dat(dst_rsc_dat_ndgain_inst),
      .dst_rsc_vld(dst_rsc_vld_ndgain_inst_bud),
      .dst_rsc_rdy(dst_rsc_rdy_ndgain_inst)
    );
  lsc lsc_inst (
      .clk(clk),
      .arst_n(arst_n),
      .topRegister_frameWidth(top_register_frameWidth),
      .topRegister_frameHeight(top_register_frameHeight),
      .topRegister_inputFormat(top_register_inputFormat),
      .topRegister_imgPattern(top_register_imgPattern),
      .topRegister_pipeMode(top_register_pipeMode),
      .topRegister_blc(top_register_blc),
      .topRegister_shadowEb(top_register_shadowEb),
      .topRegister_binningFrameWidth(top_register_binningFrameWidth),
      .topRegister_binningFrameHeight(top_register_binningFrameHeight),
      .topRegister_scalerFrameWidth(top_register_scalerFrameWidth),
      .topRegister_scalerFrameHeight(top_register_scalerFrameHeight),
      .lscRegister_eb(lsc_register_eb),
      .lscRegister_rGain(lsc_register_rGain),
      .lscRegister_GrGain(lsc_register_GrGain),
      .lscRegister_GbGain(lsc_register_GbGain),
      .lscRegister_bGain(lsc_register_bGain),
      .lscRegister_blockHeight(lsc_register_blockHeight),
      .lscRegister_blockWidth(lsc_register_blockWidth),
      .lscRegister_blockWidth_1(lsc_register_blockWidth_1),
      .lscRegister_blockHeight_1(lsc_register_blockHeight_1),
      .src_rsc_dat(src_rsc_dat_nlsc_inst),
      .src_rsc_vld(src_rsc_vld_nlsc_inst),
      .src_rsc_rdy(src_rsc_rdy_nlsc_inst_bud),
      .dst_rsc_dat(dst_rsc_dat_nlsc_inst),
      .dst_rsc_vld(dst_rsc_vld_nlsc_inst_bud),
      .dst_rsc_rdy(dst_rsc_rdy_nlsc_inst)
    );
  dpc dpc_inst (
      .clk(clk),
      .arst_n(arst_n),
      .top_reg_frameWidth(top_register_frameWidth),
      .top_reg_frameHeight(top_register_frameHeight),
      .top_reg_inputFormat(top_register_inputFormat),
      .top_reg_imgPattern(top_register_imgPattern),
      .top_reg_pipeMode(top_register_pipeMode),
      .top_reg_blc(top_register_blc),
      .top_reg_shadowEb(top_register_shadowEb),
      .top_reg_binningFrameWidth(top_register_binningFrameWidth),
      .top_reg_binningFrameHeight(top_register_binningFrameHeight),
      .top_reg_scalerFrameWidth(top_register_scalerFrameWidth),
      .top_reg_scalerFrameHeight(top_register_scalerFrameHeight),
      .dpc_reg_eb(dpc_register_eb),
      .dpc_reg_th_w(dpc_register_th_w),
      .dpc_reg_th_b(dpc_register_th_b),
      .src_rsc_dat(src_rsc_dat_ndpc_inst),
      .src_rsc_vld(src_rsc_vld_ndpc_inst),
      .src_rsc_rdy(src_rsc_rdy_ndpc_inst_bud),
      .dst_rsc_dat(dst_rsc_dat_ndpc_inst),
      .dst_rsc_vld(dst_rsc_vld_ndpc_inst_bud),
      .dst_rsc_rdy(dst_rsc_rdy_ndpc_inst)
    );
  isp_rawdns isp_rawdns_inst (
      .clk(clk),
      .arst_n(arst_n),
      .top_reg_frameWidth(top_register_frameWidth),
      .top_reg_frameHeight(top_register_frameHeight),
      .top_reg_inputFormat(1'b0),
      .top_reg_imgPattern(2'b00),
      .top_reg_pipeMode(2'b00),
      .top_reg_blc(9'b000000000),
      .top_reg_shadowEb(1'b0),
      .top_reg_binningFrameWidth(13'b0000000000000),
      .top_reg_binningFrameHeight(13'b0000000000000),
      .top_reg_scalerFrameWidth(13'b0000000000000),
      .top_reg_scalerFrameHeight(13'b0000000000000),
      .rawdns_reg_sigma(rawdns_register_sigma),
      .rawdns_reg_eb(rawdns_register_eb),
      .rawdns_reg_Filterpara(rawdns_register_Filterpara),
      .rawdns_reg_invksigma2(rawdns_register_invksigma2),
      .src_rsc_dat(src_rsc_dat_nisp_rawdns_inst),
      .src_rsc_vld(src_rsc_vld_nisp_rawdns_inst),
      .src_rsc_rdy(src_rsc_rdy_nisp_rawdns_inst_bud),
      .dst_rsc_dat(dst_rsc_dat_nisp_rawdns_inst),
      .dst_rsc_vld(dst_rsc_vld_nisp_rawdns_inst_bud),
      .dst_rsc_rdy(dst_rsc_rdy_nisp_rawdns_inst)
    );
  awb awb_inst (
      .clk(clk),
      .arst_n(arst_n),
      .top_reg_frameWidth(top_register_frameWidth),
      .top_reg_frameHeight(top_register_frameHeight),
      .top_reg_inputFormat(top_register_inputFormat),
      .top_reg_imgPattern(top_register_imgPattern),
      .top_reg_pipeMode(top_register_pipeMode),
      .top_reg_blc(top_register_blc),
      .top_reg_shadowEb(top_register_shadowEb),
      .top_reg_binningFrameWidth(top_register_binningFrameWidth),
      .top_reg_binningFrameHeight(top_register_binningFrameHeight),
      .top_reg_scalerFrameWidth(top_register_scalerFrameWidth),
      .top_reg_scalerFrameHeight(top_register_scalerFrameHeight),
      .awb_reg_m_nEb(awb_register_m_nEb),
      .awb_reg_r_gain_rsc_dat(awb_reg_r_gain_rsc_dat_nawb_inst),
      .awb_reg_r_gain_rsc_triosy_lz(awb_reg_r_gain_rsc_triosy_lz_nawb_inst_bud),
      .awb_reg_g_gain_rsc_dat(awb_reg_g_gain_rsc_dat_nawb_inst),
      .awb_reg_g_gain_rsc_triosy_lz(awb_reg_g_gain_rsc_triosy_lz_nawb_inst_bud),
      .awb_reg_b_gain_rsc_dat(awb_reg_b_gain_rsc_dat_nawb_inst),
      .awb_reg_b_gain_rsc_triosy_lz(awb_reg_b_gain_rsc_triosy_lz_nawb_inst_bud),
      .awb_reg_coeff(awb_register_coeff),
      .src_rsc_dat(src_rsc_dat_nawb_inst),
      .src_rsc_vld(src_rsc_vld_nawb_inst),
      .src_rsc_rdy(src_rsc_rdy_nawb_inst_bud),
      .dst_rsc_dat(dst_rsc_dat_nawb_inst),
      .dst_rsc_vld(dst_rsc_vld_nawb_inst_bud),
      .dst_rsc_rdy(dst_rsc_rdy_nawb_inst)
    );
  wbc wbc_inst (
      .clk(clk),
      .arst_n(arst_n),
      .top_reg_frameWidth(top_register_frameWidth),
      .top_reg_frameHeight(top_register_frameHeight),
      .top_reg_inputFormat(top_register_inputFormat),
      .top_reg_imgPattern(top_register_imgPattern),
      .top_reg_pipeMode(top_register_pipeMode),
      .top_reg_blc(top_register_blc),
      .top_reg_shadowEb(top_register_shadowEb),
      .top_reg_binningFrameWidth(top_register_binningFrameWidth),
      .top_reg_binningFrameHeight(top_register_binningFrameHeight),
      .top_reg_scalerFrameWidth(top_register_scalerFrameWidth),
      .top_reg_scalerFrameHeight(top_register_scalerFrameHeight),
      .wbc_reg_m_nEb(wbc_register_m_nEb),
      .wbc_reg_m_nR(wbc_register_m_nR),
      .wbc_reg_m_nGr(wbc_register_m_nGr),
      .wbc_reg_m_nGb(wbc_register_m_nGb),
      .wbc_reg_m_nB(wbc_register_m_nB),
      .src_rsc_dat(src_rsc_dat_nwbc_inst),
      .src_rsc_vld(src_rsc_vld_nwbc_inst),
      .src_rsc_rdy(src_rsc_rdy_nwbc_inst_bud),
      .dst_rsc_dat(dst_rsc_dat_nwbc_inst),
      .dst_rsc_vld(dst_rsc_vld_nwbc_inst_bud),
      .dst_rsc_rdy(dst_rsc_rdy_nwbc_inst)
    );
  greenbalance2 greenbalance2_inst (
      .clk(clk),
      .arst_n(arst_n),
      .top_reg_frameWidth(top_register_frameWidth),
      .top_reg_frameHeight(top_register_frameHeight),
      .top_reg_inputFormat(top_register_inputFormat),
      .top_reg_imgPattern(top_register_imgPattern),
      .top_reg_pipeMode(top_register_pipeMode),
      .top_reg_blc(top_register_blc),
      .top_reg_shadowEb(top_register_shadowEb),
      .top_reg_binningFrameWidth(top_register_binningFrameWidth),
      .top_reg_binningFrameHeight(top_register_binningFrameHeight),
      .top_reg_scalerFrameWidth(top_register_scalerFrameWidth),
      .top_reg_scalerFrameHeight(top_register_scalerFrameHeight),
      .gb_reg_eb(gb_register_eb),
      .gb_reg_win_size(gb_register_win_size),
      .gb_reg_Lbound(gb_register_Lbound),
      .gb_reg_Hbound(gb_register_Hbound),
      .gb_reg_threhold(gb_register_threhold),
      .src_rsc_dat(src_rsc_dat_ngreenbalance2_inst),
      .src_rsc_vld(src_rsc_vld_ngreenbalance2_inst),
      .src_rsc_rdy(src_rsc_rdy_ngreenbalance2_inst_bud),
      .dst_rsc_dat(dst_rsc_dat_ngreenbalance2_inst),
      .dst_rsc_vld(dst_rsc_vld_ngreenbalance2_inst_bud),
      .dst_rsc_rdy(dst_rsc_rdy_ngreenbalance2_inst)
    );
  demosaic demosaic_inst (
      .clk(clk),
      .arst_n(arst_n),
      .top_reg_frameWidth(top_register_frameWidth),
      .top_reg_frameHeight(top_register_frameHeight),
      .top_reg_inputFormat(top_register_inputFormat),
      .top_reg_imgPattern(top_register_imgPattern),
      .top_reg_pipeMode(top_register_pipeMode),
      .top_reg_blc(top_register_blc),
      .top_reg_shadowEb(top_register_shadowEb),
      .top_reg_binningFrameWidth(top_register_binningFrameWidth),
      .top_reg_binningFrameHeight(top_register_binningFrameHeight),
      .top_reg_scalerFrameWidth(top_register_scalerFrameWidth),
      .top_reg_scalerFrameHeight(top_register_scalerFrameHeight),
      .demosaic_reg_eb(demosaic_register_eb),
      .src_rsc_dat(src_rsc_dat_ndemosaic_inst),
      .src_rsc_vld(src_rsc_vld_ndemosaic_inst),
      .src_rsc_rdy(src_rsc_rdy_ndemosaic_inst_bud),
      .dst_rsc_dat(dst_rsc_dat_ndemosaic_inst),
      .dst_rsc_vld(dst_rsc_vld_ndemosaic_inst_bud),
      .dst_rsc_rdy(dst_rsc_rdy_ndemosaic_inst)
    );
  edgeenhancement edgeenhancement_inst (
      .clk(clk),
      .arst_n(arst_n),
      .isp_top_frameWidth(top_register_frameWidth),
      .isp_top_frameHeight(top_register_frameHeight),
      .isp_top_inputFormat(1'b0),
      .isp_top_imgPattern(2'b00),
      .isp_top_pipeMode(2'b00),
      .isp_top_blc(9'b000000000),
      .isp_top_shadowEb(1'b0),
      .isp_top_binningFrameWidth(13'b0000000000000),
      .isp_top_binningFrameHeight(13'b0000000000000),
      .isp_top_scalerFrameWidth(13'b0000000000000),
      .isp_top_scalerFrameHeight(13'b0000000000000),
      .ee_top_eb(ee_register_eb),
      .ee_top_coeff(ee_register_coeff),
      .src_rsc_dat(src_rsc_dat_nedgeenhancement_inst),
      .src_rsc_vld(src_rsc_vld_nedgeenhancement_inst),
      .src_rsc_rdy(src_rsc_rdy_nedgeenhancement_inst_bud),
      .dst_rsc_dat(dst_rsc_dat_nedgeenhancement_inst),
      .dst_rsc_vld(dst_rsc_vld_nedgeenhancement_inst_bud),
      .dst_rsc_rdy(dst_rsc_rdy_nedgeenhancement_inst)
    );
  cmc cmc_inst (
      .clk(clk),
      .arst_n(arst_n),
      .top_reg_frameWidth(top_register_frameWidth),
      .top_reg_frameHeight(top_register_frameHeight),
      .top_reg_inputFormat(top_register_inputFormat),
      .top_reg_imgPattern(top_register_imgPattern),
      .top_reg_pipeMode(top_register_pipeMode),
      .top_reg_blc(top_register_blc),
      .top_reg_shadowEb(top_register_shadowEb),
      .top_reg_binningFrameWidth(top_register_binningFrameWidth),
      .top_reg_binningFrameHeight(top_register_binningFrameHeight),
      .top_reg_scalerFrameWidth(top_register_scalerFrameWidth),
      .top_reg_scalerFrameHeight(top_register_scalerFrameHeight),
      .cmc_reg_m_nEb(cmc_register_m_nEb),
      .cmc_reg_m_nGain(cmc_register_m_nGain),
      .cmc_reg_m_bCFCEnable(cmc_register_m_bCFCEnable),
      .cmc_reg_m_bDiscardH(cmc_register_m_bDiscardH),
      .cmc_reg_m_pHueRange(cmc_register_m_pHueRange),
      .cmc_reg_m_nHueBandShift(cmc_register_m_nHueBandShift),
      .cmc_reg_m_nEdgeThre(cmc_register_m_nEdgeThre),
      .cmc_reg_m_nEdgeBandShift(cmc_register_m_nEdgeBandShift),
      .cmc_reg_m_nCFCStrength(cmc_register_m_nCFCStrength),
      .src_rsc_dat(src_rsc_dat_ncmc_inst),
      .src_rsc_vld(src_rsc_vld_ncmc_inst),
      .src_rsc_rdy(src_rsc_rdy_ncmc_inst_bud),
      .dst_rsc_dat(dst_rsc_dat_ncmc_inst),
      .dst_rsc_vld(dst_rsc_vld_ncmc_inst_bud),
      .dst_rsc_rdy(dst_rsc_rdy_ncmc_inst)
    );
  gtm gtm_inst (
      .clk(clk),
      .arst_n(arst_n),
      .top_reg_frameWidth(top_register_frameWidth),
      .top_reg_frameHeight(top_register_frameHeight),
      .top_reg_inputFormat(top_register_inputFormat),
      .top_reg_imgPattern(top_register_imgPattern),
      .top_reg_pipeMode(top_register_pipeMode),
      .top_reg_blc(top_register_blc),
      .top_reg_shadowEb(top_register_shadowEb),
      .top_reg_binningFrameWidth(top_register_binningFrameWidth),
      .top_reg_binningFrameHeight(top_register_binningFrameHeight),
      .top_reg_scalerFrameWidth(top_register_scalerFrameWidth),
      .top_reg_scalerFrameHeight(top_register_scalerFrameHeight),
      .gtm_reg_eb(gtm_register_eb),
      .gtm_reg_m_bDitheringEnable(gtm_register_m_bDitheringEnable),
      .gtm_reg_gtmTab(gtm_register_gtmTab),
      .src_rsc_dat(src_rsc_dat_ngtm_inst),
      .src_rsc_vld(src_rsc_vld_ngtm_inst),
      .src_rsc_rdy(src_rsc_rdy_ngtm_inst_bud),
      .dst_rsc_dat(dst_rsc_dat_ngtm_inst),
      .dst_rsc_vld(dst_rsc_vld_ngtm_inst_bud),
      .dst_rsc_rdy(dst_rsc_rdy_ngtm_inst)
    );
  csc csc_inst (
      .clk(clk),
      .arst_n(arst_n),
      .top_reg_frameWidth(top_register_frameWidth),
      .top_reg_frameHeight(top_register_frameHeight),
      .top_reg_inputFormat(top_register_inputFormat),
      .top_reg_imgPattern(top_register_imgPattern),
      .top_reg_pipeMode(top_register_pipeMode),
      .top_reg_blc(top_register_blc),
      .top_reg_shadowEb(top_register_shadowEb),
      .top_reg_binningFrameWidth(top_register_binningFrameWidth),
      .top_reg_binningFrameHeight(top_register_binningFrameHeight),
      .top_reg_scalerFrameWidth(top_register_scalerFrameWidth),
      .top_reg_scalerFrameHeight(top_register_scalerFrameHeight),
      .csc_reg_m_nEb(csc_register_m_nEb),
      .csc_reg_coeff(csc_register_coeff),
      .src_rsc_dat(src_rsc_dat_ncsc_inst),
      .src_rsc_vld(src_rsc_vld_ncsc_inst),
      .src_rsc_rdy(src_rsc_rdy_ncsc_inst_bud),
      .dst_rsc_dat(dst_rsc_dat_ncsc_inst),
      .dst_rsc_vld(dst_rsc_vld_ncsc_inst_bud),
      .dst_rsc_rdy(dst_rsc_rdy_ncsc_inst)
    );
  yfc yfc_inst (
      .clk(clk),
      .arst_n(arst_n),
      .top_reg_frameWidth(top_register_frameWidth),
      .top_reg_frameHeight(top_register_frameHeight),
      .top_reg_inputFormat(top_register_inputFormat),
      .top_reg_imgPattern(top_register_imgPattern),
      .top_reg_pipeMode(top_register_pipeMode),
      .top_reg_blc(top_register_blc),
      .top_reg_shadowEb(top_register_shadowEb),
      .top_reg_binningFrameWidth(top_register_binningFrameWidth),
      .top_reg_binningFrameHeight(top_register_binningFrameHeight),
      .top_reg_scalerFrameWidth(top_register_scalerFrameWidth),
      .top_reg_scalerFrameHeight(top_register_scalerFrameHeight),
      .yfc_reg_m_nEb(yfc_register_m_nEb),
      .yfc_reg_yuvpattern(yfc_register_yuvpattern),
      .src_rsc_dat(src_rsc_dat_nyfc_inst),
      .src_rsc_vld(src_rsc_vld_nyfc_inst),
      .src_rsc_rdy(src_rsc_rdy_nyfc_inst_bud),
      .y_dst_rsc_dat(y_dst_rsc_dat_nyfc_inst),
      .y_dst_rsc_vld(y_dst_rsc_vld_nyfc_inst_bud),
      .y_dst_rsc_rdy(y_dst_rsc_rdy_nyfc_inst),
      .u_dst_rsc_dat(u_dst_rsc_dat_nyfc_inst),
      .u_dst_rsc_vld(u_dst_rsc_vld_nyfc_inst_bud),
      .u_dst_rsc_rdy(u_dst_rsc_rdy_nyfc_inst),
      .v_dst_rsc_dat(v_dst_rsc_dat_nyfc_inst),
      .v_dst_rsc_vld(v_dst_rsc_vld_nyfc_inst_bud),
      .v_dst_rsc_rdy(v_dst_rsc_rdy_nyfc_inst)
    );
  yuv444dns yuv444dns_inst (
      .clk(clk),
      .arst_n(arst_n),
      .top_reg_frameWidth(top_register_frameWidth),
      .top_reg_frameHeight(top_register_frameHeight),
      .top_reg_inputFormat(top_register_inputFormat),
      .top_reg_imgPattern(top_register_imgPattern),
      .top_reg_pipeMode(top_register_pipeMode),
      .top_reg_blc(top_register_blc),
      .top_reg_shadowEb(top_register_shadowEb),
      .top_reg_binningFrameWidth(top_register_binningFrameWidth),
      .top_reg_binningFrameHeight(top_register_binningFrameHeight),
      .top_reg_scalerFrameWidth(top_register_scalerFrameWidth),
      .top_reg_scalerFrameHeight(top_register_scalerFrameHeight),
      .yuvdns_reg_eb(yuvdns_register_eb),
      .yuvdns_reg_ysigma2(yuvdns_register_ysigma2),
      .yuvdns_reg_yinvsigma2(yuvdns_register_yinvsigma2),
      .yuvdns_reg_uvsigma2(yuvdns_register_uvsigma2),
      .yuvdns_reg_uvinvsigma2(yuvdns_register_uvinvsigma2),
      .yuvdns_reg_yfilt(yuvdns_register_yfilt),
      .yuvdns_reg_uvfilt(yuvdns_register_uvfilt),
      .yuvdns_reg_yinvfilt(yuvdns_register_yinvfilt),
      .yuvdns_reg_uvinvfilt(yuvdns_register_uvinvfilt),
      .yuvdns_reg_yH2(yuvdns_register_yH2),
      .yuvdns_reg_yinvH2(yuvdns_register_yinvH2),
      .yuvdns_reg_uvH2(yuvdns_register_uvH2),
      .yuvdns_reg_uvinvH2(yuvdns_register_uvinvH2),
      .src_y_rsc_dat(src_y_rsc_dat_nyuv444dns_inst),
      .src_y_rsc_vld(src_y_rsc_vld_nyuv444dns_inst),
      .src_y_rsc_rdy(src_y_rsc_rdy_nyuv444dns_inst_bud),
      .src_u_rsc_dat(src_u_rsc_dat_nyuv444dns_inst),
      .src_u_rsc_vld(src_u_rsc_vld_nyuv444dns_inst),
      .src_u_rsc_rdy(src_u_rsc_rdy_nyuv444dns_inst_bud),
      .src_v_rsc_dat(src_v_rsc_dat_nyuv444dns_inst),
      .src_v_rsc_vld(src_v_rsc_vld_nyuv444dns_inst),
      .src_v_rsc_rdy(src_v_rsc_rdy_nyuv444dns_inst_bud),
      .dst_y_rsc_dat(dst_y_rsc_dat_nyuv444dns_inst),
      .dst_y_rsc_vld(dst_y_rsc_vld_nyuv444dns_inst_bud),
      .dst_y_rsc_rdy(dst_y_rsc_rdy_nyuv444dns_inst),
      .dst_u_rsc_dat(dst_u_rsc_dat_nyuv444dns_inst),
      .dst_u_rsc_vld(dst_u_rsc_vld_nyuv444dns_inst_bud),
      .dst_u_rsc_rdy(dst_u_rsc_rdy_nyuv444dns_inst),
      .dst_v_rsc_dat(dst_v_rsc_dat_nyuv444dns_inst),
      .dst_v_rsc_vld(dst_v_rsc_vld_nyuv444dns_inst_bud),
      .dst_v_rsc_rdy(dst_v_rsc_rdy_nyuv444dns_inst)
    );
  scaledown scaledown_inst (
      .clk(clk),
      .arst_n(arst_n),
      .top_reg_frameWidth(top_register_frameWidth),
      .top_reg_frameHeight(top_register_frameHeight),
      .top_reg_inputFormat(top_register_inputFormat),
      .top_reg_imgPattern(top_register_imgPattern),
      .top_reg_pipeMode(top_register_pipeMode),
      .top_reg_blc(top_register_blc),
      .top_reg_shadowEb(top_register_shadowEb),
      .top_reg_binningFrameWidth(top_register_binningFrameWidth),
      .top_reg_binningFrameHeight(top_register_binningFrameHeight),
      .top_reg_scalerFrameWidth(top_register_scalerFrameWidth),
      .top_reg_scalerFrameHeight(top_register_scalerFrameHeight),
      .scaledown_reg_m_nEb(scaledown_register_m_nEb),
      .scaledown_reg_yuvpattern(scaledown_register_yuvpattern),
      .scaledown_reg_times(scaledown_register_times),
      .y_src_rsc_dat(y_src_rsc_dat_nscaledown_inst),
      .y_src_rsc_vld(y_src_rsc_vld_nscaledown_inst),
      .y_src_rsc_rdy(y_src_rsc_rdy_nscaledown_inst_bud),
      .u_src_rsc_dat(u_src_rsc_dat_nscaledown_inst),
      .u_src_rsc_vld(u_src_rsc_vld_nscaledown_inst),
      .u_src_rsc_rdy(u_src_rsc_rdy_nscaledown_inst_bud),
      .v_src_rsc_dat(v_src_rsc_dat_nscaledown_inst),
      .v_src_rsc_vld(v_src_rsc_vld_nscaledown_inst),
      .v_src_rsc_rdy(v_src_rsc_rdy_nscaledown_inst_bud),
      .y_dst_rsc_dat(y_dst_rsc_dat_nscaledown_inst),
      .y_dst_rsc_vld(y_dst_rsc_vld_nscaledown_inst_bud),
      .y_dst_rsc_rdy(y_dst_rsc_rdy_nscaledown_inst),
      .u_dst_rsc_dat(u_dst_rsc_dat_nscaledown_inst),
      .u_dst_rsc_vld(u_dst_rsc_vld_nscaledown_inst_bud),
      .u_dst_rsc_rdy(u_dst_rsc_rdy_nscaledown_inst),
      .v_dst_rsc_dat(v_dst_rsc_dat_nscaledown_inst),
      .v_dst_rsc_vld(v_dst_rsc_vld_nscaledown_inst_bud),
      .v_dst_rsc_rdy(v_dst_rsc_rdy_nscaledown_inst)
    );
  crop crop_inst (
      .clk(clk),
      .arst_n(arst_n),
      .top_reg_frameWidth(top_register_frameWidth),
      .top_reg_frameHeight(top_register_frameHeight),
      .top_reg_inputFormat(top_register_inputFormat),
      .top_reg_imgPattern(top_register_imgPattern),
      .top_reg_pipeMode(top_register_pipeMode),
      .top_reg_blc(top_register_blc),
      .top_reg_shadowEb(top_register_shadowEb),
      .top_reg_binningFrameWidth(top_register_binningFrameWidth),
      .top_reg_binningFrameHeight(top_register_binningFrameHeight),
      .top_reg_scalerFrameWidth(top_register_scalerFrameWidth),
      .top_reg_scalerFrameHeight(top_register_scalerFrameHeight),
      .crop_reg_m_nEb(crop_register_m_nEb),
      .crop_reg_upper_left_x(crop_register_upper_left_x),
      .crop_reg_upper_left_y(crop_register_upper_left_y),
      .crop_reg_lower_right_x(crop_register_lower_right_x),
      .crop_reg_lower_right_y(crop_register_lower_right_y),
      .crop_reg_yuvpattern(crop_register_yuvpattern),
      .y_src_rsc_dat(y_src_rsc_dat_ncrop_inst),
      .y_src_rsc_vld(y_src_rsc_vld_ncrop_inst),
      .y_src_rsc_rdy(y_src_rsc_rdy_ncrop_inst_bud),
      .u_src_rsc_dat(u_src_rsc_dat_ncrop_inst),
      .u_src_rsc_vld(u_src_rsc_vld_ncrop_inst),
      .u_src_rsc_rdy(u_src_rsc_rdy_ncrop_inst_bud),
      .v_src_rsc_dat(v_src_rsc_dat_ncrop_inst),
      .v_src_rsc_vld(v_src_rsc_vld_ncrop_inst),
      .v_src_rsc_rdy(v_src_rsc_rdy_ncrop_inst_bud),
      .y_dst_rsc_dat(y_dst_rsc_dat_ncrop_inst),
      .y_dst_rsc_vld(y_dst_rsc_vld_ncrop_inst_bud),
      .y_dst_rsc_rdy(dst_y_rsc_rdy),
      .u_dst_rsc_dat(u_dst_rsc_dat_ncrop_inst),
      .u_dst_rsc_vld(u_dst_rsc_vld_ncrop_inst_bud),
      .u_dst_rsc_rdy(dst_u_rsc_rdy),
      .v_dst_rsc_dat(v_dst_rsc_dat_ncrop_inst),
      .v_dst_rsc_vld(v_dst_rsc_vld_ncrop_inst_bud),
      .v_dst_rsc_rdy(dst_v_rsc_rdy)
    );
  assign src_rsc_rdy = src_rsc_rdy_ntpg_inst_bud;
  assign dst_y_rsc_vld = y_dst_rsc_vld_ncrop_inst_bud;
  assign dst_y_rsc_dat = y_dst_rsc_dat_ncrop_inst;
  assign dst_u_rsc_vld = u_dst_rsc_vld_ncrop_inst_bud;
  assign dst_u_rsc_dat = u_dst_rsc_dat_ncrop_inst;
  assign dst_v_rsc_vld = v_dst_rsc_vld_ncrop_inst_bud;
  assign dst_v_rsc_dat = v_dst_rsc_dat_ncrop_inst;
endmodule



