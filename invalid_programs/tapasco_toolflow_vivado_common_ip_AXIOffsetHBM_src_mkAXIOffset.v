//
// Generated by Bluespec Compiler (build 38534dc)
//
// On Wed Apr 29 11:16:06 CEST 2020
//
//
// Ports:
// Name                         I/O  size props
// S_AXI_arready                  O     1
// S_AXI_rvalid                   O     1
// S_AXI_rid                      O     6
// S_AXI_rdata                    O   256
// S_AXI_rresp                    O     2
// S_AXI_rlast                    O     1
// S_AXI_awready                  O     1
// S_AXI_wready                   O     1
// S_AXI_bvalid                   O     1
// S_AXI_bresp                    O     2
// S_AXI_bid                      O     6
// M_AXI_arvalid                  O     1
// M_AXI_arid                     O     6
// M_AXI_araddr                   O    33
// M_AXI_arlen                    O     8
// M_AXI_arsize                   O     3
// M_AXI_arburst                  O     2
// M_AXI_arlock                   O     1
// M_AXI_arcache                  O     4
// M_AXI_arprot                   O     3
// M_AXI_arqos                    O     4
// M_AXI_arregion                 O     4
// M_AXI_rready                   O     1
// M_AXI_awvalid                  O     1
// M_AXI_awid                     O     6
// M_AXI_awaddr                   O    33
// M_AXI_awlen                    O     8
// M_AXI_awsize                   O     3
// M_AXI_awburst                  O     2
// M_AXI_awlock                   O     1
// M_AXI_awcache                  O     4
// M_AXI_awprot                   O     3
// M_AXI_awqos                    O     4
// M_AXI_awregion                 O     4
// M_AXI_wvalid                   O     1
// M_AXI_wdata                    O   256
// M_AXI_wstrb                    O    32
// M_AXI_wlast                    O     1
// M_AXI_bready                   O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// S_AXI_arvalid                  I     1
// S_AXI_arid                     I     6
// S_AXI_araddr                   I    33
// S_AXI_arlen                    I     8
// S_AXI_arsize                   I     3
// S_AXI_arburst                  I     2
// S_AXI_arlock                   I     1
// S_AXI_arcache                  I     4
// S_AXI_arprot                   I     3
// S_AXI_arqos                    I     4
// S_AXI_arregion                 I     4
// S_AXI_rready                   I     1
// S_AXI_awvalid                  I     1
// S_AXI_awid                     I     6
// S_AXI_awaddr                   I    33
// S_AXI_awlen                    I     8
// S_AXI_awsize                   I     3
// S_AXI_awburst                  I     2
// S_AXI_awlock                   I     1
// S_AXI_awcache                  I     4
// S_AXI_awprot                   I     3
// S_AXI_awqos                    I     4
// S_AXI_awregion                 I     4
// S_AXI_wvalid                   I     1
// S_AXI_wdata                    I   256 reg
// S_AXI_wstrb                    I    32 reg
// S_AXI_wlast                    I     1 reg
// S_AXI_bready                   I     1
// M_AXI_arready                  I     1
// M_AXI_rvalid                   I     1
// M_AXI_rid                      I     6 reg
// M_AXI_rdata                    I   256 reg
// M_AXI_rresp                    I     2 reg
// M_AXI_rlast                    I     1 reg
// M_AXI_awready                  I     1
// M_AXI_wready                   I     1
// M_AXI_bvalid                   I     1
// M_AXI_bresp                    I     2 reg
// M_AXI_bid                      I     6 reg
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkAXIOffset(CLK,
		   RST_N,

		   S_AXI_arvalid,

		   S_AXI_arready,

		   S_AXI_arid,
		   S_AXI_araddr,
		   S_AXI_arlen,
		   S_AXI_arsize,
		   S_AXI_arburst,
		   S_AXI_arlock,
		   S_AXI_arcache,
		   S_AXI_arprot,
		   S_AXI_arqos,
		   S_AXI_arregion,

		   S_AXI_rready,

		   S_AXI_rvalid,

		   S_AXI_rid,

		   S_AXI_rdata,

		   S_AXI_rresp,

		   S_AXI_rlast,

		   S_AXI_awready,

		   S_AXI_awvalid,

		   S_AXI_awid,
		   S_AXI_awaddr,
		   S_AXI_awlen,
		   S_AXI_awsize,
		   S_AXI_awburst,
		   S_AXI_awlock,
		   S_AXI_awcache,
		   S_AXI_awprot,
		   S_AXI_awqos,
		   S_AXI_awregion,

		   S_AXI_wready,

		   S_AXI_wvalid,

		   S_AXI_wdata,
		   S_AXI_wstrb,
		   S_AXI_wlast,

		   S_AXI_bready,

		   S_AXI_bvalid,

		   S_AXI_bresp,

		   S_AXI_bid,

		   M_AXI_arvalid,

		   M_AXI_arready,

		   M_AXI_arid,

		   M_AXI_araddr,

		   M_AXI_arlen,

		   M_AXI_arsize,

		   M_AXI_arburst,

		   M_AXI_arlock,

		   M_AXI_arcache,

		   M_AXI_arprot,

		   M_AXI_arqos,

		   M_AXI_arregion,

		   M_AXI_rready,

		   M_AXI_rvalid,

		   M_AXI_rid,
		   M_AXI_rdata,
		   M_AXI_rresp,
		   M_AXI_rlast,

		   M_AXI_awready,

		   M_AXI_awvalid,

		   M_AXI_awid,

		   M_AXI_awaddr,

		   M_AXI_awlen,

		   M_AXI_awsize,

		   M_AXI_awburst,

		   M_AXI_awlock,

		   M_AXI_awcache,

		   M_AXI_awprot,

		   M_AXI_awqos,

		   M_AXI_awregion,

		   M_AXI_wready,

		   M_AXI_wvalid,

		   M_AXI_wdata,

		   M_AXI_wstrb,

		   M_AXI_wlast,

		   M_AXI_bvalid,

		   M_AXI_bready,

		   M_AXI_bresp,
		   M_AXI_bid);
  parameter [32 : 0] offset = 33'b0;
  parameter [32 : 0] offset_bits = 33'b0;
  input  CLK;
  input  RST_N;

  // action method in_rd_parvalid
  input  S_AXI_arvalid;

  // value method in_rd_arready
  output S_AXI_arready;

  // action method in_rd_parchannel
  input  [5 : 0] S_AXI_arid;
  input  [32 : 0] S_AXI_araddr;
  input  [7 : 0] S_AXI_arlen;
  input  [2 : 0] S_AXI_arsize;
  input  [1 : 0] S_AXI_arburst;
  input  S_AXI_arlock;
  input  [3 : 0] S_AXI_arcache;
  input  [2 : 0] S_AXI_arprot;
  input  [3 : 0] S_AXI_arqos;
  input  [3 : 0] S_AXI_arregion;

  // action method in_rd_prready
  input  S_AXI_rready;

  // value method in_rd_rvalid
  output S_AXI_rvalid;

  // value method in_rd_rid
  output [5 : 0] S_AXI_rid;

  // value method in_rd_rdata
  output [255 : 0] S_AXI_rdata;

  // value method in_rd_rresp
  output [1 : 0] S_AXI_rresp;

  // value method in_rd_rlast
  output S_AXI_rlast;

  // value method in_rd_ruser

  // value method in_wr_awready
  output S_AXI_awready;

  // action method in_wr_pawvalid
  input  S_AXI_awvalid;

  // action method in_wr_pawchannel
  input  [5 : 0] S_AXI_awid;
  input  [32 : 0] S_AXI_awaddr;
  input  [7 : 0] S_AXI_awlen;
  input  [2 : 0] S_AXI_awsize;
  input  [1 : 0] S_AXI_awburst;
  input  S_AXI_awlock;
  input  [3 : 0] S_AXI_awcache;
  input  [2 : 0] S_AXI_awprot;
  input  [3 : 0] S_AXI_awqos;
  input  [3 : 0] S_AXI_awregion;

  // value method in_wr_wready
  output S_AXI_wready;

  // action method in_wr_pwvalid
  input  S_AXI_wvalid;

  // action method in_wr_pwchannel
  input  [255 : 0] S_AXI_wdata;
  input  [31 : 0] S_AXI_wstrb;
  input  S_AXI_wlast;

  // action method in_wr_pbready
  input  S_AXI_bready;

  // value method in_wr_bvalid
  output S_AXI_bvalid;

  // value method in_wr_bresp
  output [1 : 0] S_AXI_bresp;

  // value method in_wr_bid
  output [5 : 0] S_AXI_bid;

  // value method in_wr_buser

  // value method out_rd_arvalid
  output M_AXI_arvalid;

  // action method out_rd_parready
  input  M_AXI_arready;

  // value method out_rd_arid
  output [5 : 0] M_AXI_arid;

  // value method out_rd_araddr
  output [32 : 0] M_AXI_araddr;

  // value method out_rd_arlen
  output [7 : 0] M_AXI_arlen;

  // value method out_rd_arsize
  output [2 : 0] M_AXI_arsize;

  // value method out_rd_arburst
  output [1 : 0] M_AXI_arburst;

  // value method out_rd_arlock
  output M_AXI_arlock;

  // value method out_rd_arcache
  output [3 : 0] M_AXI_arcache;

  // value method out_rd_arprot
  output [2 : 0] M_AXI_arprot;

  // value method out_rd_arqos
  output [3 : 0] M_AXI_arqos;

  // value method out_rd_arregion
  output [3 : 0] M_AXI_arregion;

  // value method out_rd_aruser

  // value method out_rd_rready
  output M_AXI_rready;

  // action method out_rd_prvalid
  input  M_AXI_rvalid;

  // action method out_rd_prchannel
  input  [5 : 0] M_AXI_rid;
  input  [255 : 0] M_AXI_rdata;
  input  [1 : 0] M_AXI_rresp;
  input  M_AXI_rlast;

  // action method out_wr_pawready
  input  M_AXI_awready;

  // value method out_wr_awvalid
  output M_AXI_awvalid;

  // value method out_wr_awid
  output [5 : 0] M_AXI_awid;

  // value method out_wr_awaddr
  output [32 : 0] M_AXI_awaddr;

  // value method out_wr_awlen
  output [7 : 0] M_AXI_awlen;

  // value method out_wr_awsize
  output [2 : 0] M_AXI_awsize;

  // value method out_wr_awburst
  output [1 : 0] M_AXI_awburst;

  // value method out_wr_awlock
  output M_AXI_awlock;

  // value method out_wr_awcache
  output [3 : 0] M_AXI_awcache;

  // value method out_wr_awprot
  output [2 : 0] M_AXI_awprot;

  // value method out_wr_awqos
  output [3 : 0] M_AXI_awqos;

  // value method out_wr_awregion
  output [3 : 0] M_AXI_awregion;

  // value method out_wr_awuser

  // action method out_wr_pwready
  input  M_AXI_wready;

  // value method out_wr_wvalid
  output M_AXI_wvalid;

  // value method out_wr_wdata
  output [255 : 0] M_AXI_wdata;

  // value method out_wr_wstrb
  output [31 : 0] M_AXI_wstrb;

  // value method out_wr_wlast
  output M_AXI_wlast;

  // value method out_wr_wuser

  // action method out_wr_pbvalid
  input  M_AXI_bvalid;

  // value method out_wr_bready
  output M_AXI_bready;

  // action method out_wr_bin
  input  [1 : 0] M_AXI_bresp;
  input  [5 : 0] M_AXI_bid;

  // signals for module outputs
  wire [255 : 0] M_AXI_wdata, S_AXI_rdata;
  wire [32 : 0] M_AXI_araddr, M_AXI_awaddr;
  wire [31 : 0] M_AXI_wstrb;
  wire [7 : 0] M_AXI_arlen, M_AXI_awlen;
  wire [5 : 0] M_AXI_arid, M_AXI_awid, S_AXI_bid, S_AXI_rid;
  wire [3 : 0] M_AXI_arcache,
	       M_AXI_arqos,
	       M_AXI_arregion,
	       M_AXI_awcache,
	       M_AXI_awqos,
	       M_AXI_awregion;
  wire [2 : 0] M_AXI_arprot, M_AXI_arsize, M_AXI_awprot, M_AXI_awsize;
  wire [1 : 0] M_AXI_arburst, M_AXI_awburst, S_AXI_bresp, S_AXI_rresp;
  wire M_AXI_arlock,
       M_AXI_arvalid,
       M_AXI_awlock,
       M_AXI_awvalid,
       M_AXI_bready,
       M_AXI_rready,
       M_AXI_wlast,
       M_AXI_wvalid,
       S_AXI_arready,
       S_AXI_awready,
       S_AXI_bvalid,
       S_AXI_rlast,
       S_AXI_rvalid,
       S_AXI_wready;

  // inlined wires
  reg [3 : 0] masterRead_warcache$wget, masterWrite_wawcache$wget;
  wire [288 : 0] slaveWrite_arinpkg_data$wget;
  wire [264 : 0] masterRead_rinpkg$wget;
  wire [67 : 0] slaveRead_arinpkg$wget, slaveWrite_arinpkg_addr$wget;
  wire [7 : 0] masterWrite_rinpkg$wget;

  // register masterRead_isRst_isInReset
  reg masterRead_isRst_isInReset;
  wire masterRead_isRst_isInReset$D_IN, masterRead_isRst_isInReset$EN;

  // register masterWrite_isRst_isInReset
  reg masterWrite_isRst_isInReset;
  wire masterWrite_isRst_isInReset$D_IN, masterWrite_isRst_isInReset$EN;

  // register slaveRead_isRst_isInReset
  reg slaveRead_isRst_isInReset;
  wire slaveRead_isRst_isInReset$D_IN, slaveRead_isRst_isInReset$EN;

  // register slaveWrite_isRst_isInReset
  reg slaveWrite_isRst_isInReset;
  wire slaveWrite_isRst_isInReset$D_IN, slaveWrite_isRst_isInReset$EN;

  // ports of submodule masterRead_in
  wire [67 : 0] masterRead_in$D_IN, masterRead_in$D_OUT;
  wire masterRead_in$CLR,
       masterRead_in$DEQ,
       masterRead_in$EMPTY_N,
       masterRead_in$ENQ,
       masterRead_in$FULL_N;

  // ports of submodule masterRead_out
  wire [264 : 0] masterRead_out$D_IN;
  wire masterRead_out$CLR, masterRead_out$DEQ, masterRead_out$ENQ;

  // ports of submodule masterRead_out_1
  wire [264 : 0] masterRead_out_1$D_IN, masterRead_out_1$D_OUT;
  wire masterRead_out_1$CLR,
       masterRead_out_1$DEQ,
       masterRead_out_1$EMPTY_N,
       masterRead_out_1$ENQ,
       masterRead_out_1$FULL_N;

  // ports of submodule masterWrite_in_addr
  wire [67 : 0] masterWrite_in_addr$D_IN, masterWrite_in_addr$D_OUT;
  wire masterWrite_in_addr$CLR,
       masterWrite_in_addr$DEQ,
       masterWrite_in_addr$EMPTY_N,
       masterWrite_in_addr$ENQ,
       masterWrite_in_addr$FULL_N;

  // ports of submodule masterWrite_in_data
  wire [288 : 0] masterWrite_in_data$D_IN, masterWrite_in_data$D_OUT;
  wire masterWrite_in_data$CLR,
       masterWrite_in_data$DEQ,
       masterWrite_in_data$EMPTY_N,
       masterWrite_in_data$ENQ,
       masterWrite_in_data$FULL_N;

  // ports of submodule masterWrite_out
  wire [7 : 0] masterWrite_out$D_IN, masterWrite_out$D_OUT;
  wire masterWrite_out$CLR,
       masterWrite_out$DEQ,
       masterWrite_out$EMPTY_N,
       masterWrite_out$ENQ,
       masterWrite_out$FULL_N;

  // ports of submodule slaveRead_in
  wire [67 : 0] slaveRead_in$D_IN, slaveRead_in$D_OUT;
  wire slaveRead_in$CLR,
       slaveRead_in$DEQ,
       slaveRead_in$EMPTY_N,
       slaveRead_in$ENQ,
       slaveRead_in$FULL_N;

  // ports of submodule slaveRead_out
  wire [264 : 0] slaveRead_out$D_IN, slaveRead_out$D_OUT;
  wire slaveRead_out$CLR,
       slaveRead_out$DEQ,
       slaveRead_out$EMPTY_N,
       slaveRead_out$ENQ,
       slaveRead_out$FULL_N;

  // ports of submodule slaveWrite_in_addr
  wire [67 : 0] slaveWrite_in_addr$D_IN, slaveWrite_in_addr$D_OUT;
  wire slaveWrite_in_addr$CLR,
       slaveWrite_in_addr$DEQ,
       slaveWrite_in_addr$EMPTY_N,
       slaveWrite_in_addr$ENQ,
       slaveWrite_in_addr$FULL_N;

  // ports of submodule slaveWrite_in_data
  wire [288 : 0] slaveWrite_in_data$D_IN, slaveWrite_in_data$D_OUT;
  wire slaveWrite_in_data$CLR,
       slaveWrite_in_data$DEQ,
       slaveWrite_in_data$EMPTY_N,
       slaveWrite_in_data$ENQ,
       slaveWrite_in_data$FULL_N;

  // ports of submodule slaveWrite_out
  wire [7 : 0] slaveWrite_out$D_IN, slaveWrite_out$D_OUT;
  wire slaveWrite_out$CLR,
       slaveWrite_out$DEQ,
       slaveWrite_out$EMPTY_N,
       slaveWrite_out$ENQ,
       slaveWrite_out$FULL_N;

  // remaining internal signals
  reg [3 : 0] CASE_S_AXI_arcache_0_S_AXI_arcache_1_S_AXI_arc_ETC__q1,
	      CASE_S_AXI_awcache_0_S_AXI_awcache_1_S_AXI_awc_ETC__q2,
	      CASE_masterRead_warcachewget_1_masterRead_war_ETC__q3,
	      CASE_masterWrite_wawcachewget_1_masterWrite_w_ETC__q4,
	      CASE_slaveRead_arinpkgwget_BITS_14_TO_11_0_sl_ETC__q7,
	      CASE_slaveRead_inD_OUT_BITS_14_TO_11_0_slaveR_ETC__q5,
	      CASE_slaveWrite_arinpkg_addrwget_BITS_14_TO_1_ETC__q8,
	      CASE_slaveWrite_in_addrD_OUT_BITS_14_TO_11_0__ETC__q6;
  wire [32 : 0] _1_SL_offset_bits_5_MINUS_1___d86,
		mask__h9528,
		offset_tmp__h9529,
		x_addr__h3127,
		x_addr__h9515,
		y__h9541;
  wire [14 : 0] IF_S_AXI_arcache_EQ_0_39_OR_S_AXI_arcache_EQ_1_ETC___d354,
		IF_S_AXI_awcache_EQ_0_67_OR_S_AXI_awcache_EQ_1_ETC___d382;

  // value method in_rd_arready
  assign S_AXI_arready = !slaveRead_isRst_isInReset && slaveRead_in$FULL_N ;

  // value method in_rd_rvalid
  assign S_AXI_rvalid = !slaveRead_isRst_isInReset && slaveRead_out$EMPTY_N ;

  // value method in_rd_rid
  assign S_AXI_rid =
	     slaveRead_out$EMPTY_N ? slaveRead_out$D_OUT[264:259] : 6'd0 ;

  // value method in_rd_rdata
  assign S_AXI_rdata =
	     slaveRead_out$EMPTY_N ? slaveRead_out$D_OUT[258:3] : 256'd0 ;

  // value method in_rd_rresp
  assign S_AXI_rresp =
	     slaveRead_out$EMPTY_N ? slaveRead_out$D_OUT[2:1] : 2'd0 ;

  // value method in_rd_rlast
  assign S_AXI_rlast = slaveRead_out$EMPTY_N && slaveRead_out$D_OUT[0] ;

  // value method in_wr_awready
  assign S_AXI_awready =
	     !slaveWrite_isRst_isInReset && slaveWrite_in_addr$FULL_N ;

  // value method in_wr_wready
  assign S_AXI_wready =
	     !slaveWrite_isRst_isInReset && slaveWrite_in_data$FULL_N ;

  // value method in_wr_bvalid
  assign S_AXI_bvalid =
	     !slaveWrite_isRst_isInReset && slaveWrite_out$EMPTY_N ;

  // value method in_wr_bresp
  assign S_AXI_bresp =
	     slaveWrite_out$EMPTY_N ? slaveWrite_out$D_OUT[1:0] : 2'd0 ;

  // value method in_wr_bid
  assign S_AXI_bid =
	     slaveWrite_out$EMPTY_N ? slaveWrite_out$D_OUT[7:2] : 6'd0 ;

  // value method out_rd_arvalid
  assign M_AXI_arvalid =
	     !masterRead_isRst_isInReset && masterRead_in$EMPTY_N ;

  // value method out_rd_arid
  assign M_AXI_arid =
	     masterRead_in$EMPTY_N ? masterRead_in$D_OUT[67:62] : 6'd0 ;

  // value method out_rd_araddr
  assign M_AXI_araddr =
	     masterRead_in$EMPTY_N ? masterRead_in$D_OUT[61:29] : 33'd0 ;

  // value method out_rd_arlen
  assign M_AXI_arlen =
	     masterRead_in$EMPTY_N ? masterRead_in$D_OUT[28:21] : 8'd0 ;

  // value method out_rd_arsize
  assign M_AXI_arsize =
	     masterRead_in$EMPTY_N ? masterRead_in$D_OUT[20:18] : 3'd0 ;

  // value method out_rd_arburst
  assign M_AXI_arburst =
	     masterRead_in$EMPTY_N ? masterRead_in$D_OUT[17:16] : 2'd0 ;

  // value method out_rd_arlock
  assign M_AXI_arlock = masterRead_in$EMPTY_N && masterRead_in$D_OUT[15] ;

  // value method out_rd_arcache
  assign M_AXI_arcache =
	     (!masterRead_in$EMPTY_N || masterRead_warcache$wget == 4'd0) ?
	       4'd0 :
	       CASE_masterRead_warcachewget_1_masterRead_war_ETC__q3 ;

  // value method out_rd_arprot
  assign M_AXI_arprot =
	     masterRead_in$EMPTY_N ? masterRead_in$D_OUT[10:8] : 3'd0 ;

  // value method out_rd_arqos
  assign M_AXI_arqos =
	     masterRead_in$EMPTY_N ? masterRead_in$D_OUT[7:4] : 4'd0 ;

  // value method out_rd_arregion
  assign M_AXI_arregion =
	     masterRead_in$EMPTY_N ? masterRead_in$D_OUT[3:0] : 4'd0 ;

  // value method out_rd_rready
  assign M_AXI_rready =
	     !masterRead_isRst_isInReset && masterRead_out_1$FULL_N ;

  // value method out_wr_awvalid
  assign M_AXI_awvalid =
	     !masterWrite_isRst_isInReset && masterWrite_in_addr$EMPTY_N ;

  // value method out_wr_awid
  assign M_AXI_awid =
	     masterWrite_in_addr$EMPTY_N ?
	       masterWrite_in_addr$D_OUT[67:62] :
	       6'd0 ;

  // value method out_wr_awaddr
  assign M_AXI_awaddr =
	     masterWrite_in_addr$EMPTY_N ?
	       masterWrite_in_addr$D_OUT[61:29] :
	       33'd0 ;

  // value method out_wr_awlen
  assign M_AXI_awlen =
	     masterWrite_in_addr$EMPTY_N ?
	       masterWrite_in_addr$D_OUT[28:21] :
	       8'd0 ;

  // value method out_wr_awsize
  assign M_AXI_awsize =
	     masterWrite_in_addr$EMPTY_N ?
	       masterWrite_in_addr$D_OUT[20:18] :
	       3'd0 ;

  // value method out_wr_awburst
  assign M_AXI_awburst =
	     masterWrite_in_addr$EMPTY_N ?
	       masterWrite_in_addr$D_OUT[17:16] :
	       2'd0 ;

  // value method out_wr_awlock
  assign M_AXI_awlock =
	     masterWrite_in_addr$EMPTY_N && masterWrite_in_addr$D_OUT[15] ;

  // value method out_wr_awcache
  assign M_AXI_awcache =
	     (!masterWrite_in_addr$EMPTY_N ||
	      masterWrite_wawcache$wget == 4'd0) ?
	       4'd0 :
	       CASE_masterWrite_wawcachewget_1_masterWrite_w_ETC__q4 ;

  // value method out_wr_awprot
  assign M_AXI_awprot =
	     masterWrite_in_addr$EMPTY_N ?
	       masterWrite_in_addr$D_OUT[10:8] :
	       3'd0 ;

  // value method out_wr_awqos
  assign M_AXI_awqos =
	     masterWrite_in_addr$EMPTY_N ?
	       masterWrite_in_addr$D_OUT[7:4] :
	       4'd0 ;

  // value method out_wr_awregion
  assign M_AXI_awregion =
	     masterWrite_in_addr$EMPTY_N ?
	       masterWrite_in_addr$D_OUT[3:0] :
	       4'd0 ;

  // value method out_wr_wvalid
  assign M_AXI_wvalid =
	     !masterWrite_isRst_isInReset && masterWrite_in_data$EMPTY_N ;

  // value method out_wr_wdata
  assign M_AXI_wdata =
	     masterWrite_in_data$EMPTY_N ?
	       masterWrite_in_data$D_OUT[288:33] :
	       256'd0 ;

  // value method out_wr_wstrb
  assign M_AXI_wstrb =
	     masterWrite_in_data$EMPTY_N ?
	       masterWrite_in_data$D_OUT[32:1] :
	       32'd0 ;

  // value method out_wr_wlast
  assign M_AXI_wlast =
	     masterWrite_in_data$EMPTY_N && masterWrite_in_data$D_OUT[0] ;

  // value method out_wr_bready
  assign M_AXI_bready =
	     !masterWrite_isRst_isInReset && masterWrite_out$FULL_N ;

  // submodule masterRead_in
  FIFO2 #(.width(32'd68), .guarded(32'd1)) masterRead_in(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(masterRead_in$D_IN),
							 .ENQ(masterRead_in$ENQ),
							 .DEQ(masterRead_in$DEQ),
							 .CLR(masterRead_in$CLR),
							 .D_OUT(masterRead_in$D_OUT),
							 .FULL_N(masterRead_in$FULL_N),
							 .EMPTY_N(masterRead_in$EMPTY_N));

  // submodule masterRead_out
  FIFO2 #(.width(32'd265), .guarded(32'd1)) masterRead_out(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(masterRead_out$D_IN),
							   .ENQ(masterRead_out$ENQ),
							   .DEQ(masterRead_out$DEQ),
							   .CLR(masterRead_out$CLR),
							   .D_OUT(),
							   .FULL_N(),
							   .EMPTY_N());

  // submodule masterRead_out_1
  FIFO2 #(.width(32'd265), .guarded(32'd1)) masterRead_out_1(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(masterRead_out_1$D_IN),
							     .ENQ(masterRead_out_1$ENQ),
							     .DEQ(masterRead_out_1$DEQ),
							     .CLR(masterRead_out_1$CLR),
							     .D_OUT(masterRead_out_1$D_OUT),
							     .FULL_N(masterRead_out_1$FULL_N),
							     .EMPTY_N(masterRead_out_1$EMPTY_N));

  // submodule masterWrite_in_addr
  FIFO2 #(.width(32'd68), .guarded(32'd1)) masterWrite_in_addr(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(masterWrite_in_addr$D_IN),
							       .ENQ(masterWrite_in_addr$ENQ),
							       .DEQ(masterWrite_in_addr$DEQ),
							       .CLR(masterWrite_in_addr$CLR),
							       .D_OUT(masterWrite_in_addr$D_OUT),
							       .FULL_N(masterWrite_in_addr$FULL_N),
							       .EMPTY_N(masterWrite_in_addr$EMPTY_N));

  // submodule masterWrite_in_data
  FIFO2 #(.width(32'd289), .guarded(32'd1)) masterWrite_in_data(.RST(RST_N),
								.CLK(CLK),
								.D_IN(masterWrite_in_data$D_IN),
								.ENQ(masterWrite_in_data$ENQ),
								.DEQ(masterWrite_in_data$DEQ),
								.CLR(masterWrite_in_data$CLR),
								.D_OUT(masterWrite_in_data$D_OUT),
								.FULL_N(masterWrite_in_data$FULL_N),
								.EMPTY_N(masterWrite_in_data$EMPTY_N));

  // submodule masterWrite_out
  FIFO2 #(.width(32'd8), .guarded(32'd1)) masterWrite_out(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(masterWrite_out$D_IN),
							  .ENQ(masterWrite_out$ENQ),
							  .DEQ(masterWrite_out$DEQ),
							  .CLR(masterWrite_out$CLR),
							  .D_OUT(masterWrite_out$D_OUT),
							  .FULL_N(masterWrite_out$FULL_N),
							  .EMPTY_N(masterWrite_out$EMPTY_N));

  // submodule slaveRead_in
  FIFO2 #(.width(32'd68), .guarded(32'd1)) slaveRead_in(.RST(RST_N),
							.CLK(CLK),
							.D_IN(slaveRead_in$D_IN),
							.ENQ(slaveRead_in$ENQ),
							.DEQ(slaveRead_in$DEQ),
							.CLR(slaveRead_in$CLR),
							.D_OUT(slaveRead_in$D_OUT),
							.FULL_N(slaveRead_in$FULL_N),
							.EMPTY_N(slaveRead_in$EMPTY_N));

  // submodule slaveRead_out
  FIFO2 #(.width(32'd265), .guarded(32'd1)) slaveRead_out(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(slaveRead_out$D_IN),
							  .ENQ(slaveRead_out$ENQ),
							  .DEQ(slaveRead_out$DEQ),
							  .CLR(slaveRead_out$CLR),
							  .D_OUT(slaveRead_out$D_OUT),
							  .FULL_N(slaveRead_out$FULL_N),
							  .EMPTY_N(slaveRead_out$EMPTY_N));

  // submodule slaveWrite_in_addr
  FIFO2 #(.width(32'd68), .guarded(32'd1)) slaveWrite_in_addr(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(slaveWrite_in_addr$D_IN),
							      .ENQ(slaveWrite_in_addr$ENQ),
							      .DEQ(slaveWrite_in_addr$DEQ),
							      .CLR(slaveWrite_in_addr$CLR),
							      .D_OUT(slaveWrite_in_addr$D_OUT),
							      .FULL_N(slaveWrite_in_addr$FULL_N),
							      .EMPTY_N(slaveWrite_in_addr$EMPTY_N));

  // submodule slaveWrite_in_data
  FIFO2 #(.width(32'd289), .guarded(32'd1)) slaveWrite_in_data(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(slaveWrite_in_data$D_IN),
							       .ENQ(slaveWrite_in_data$ENQ),
							       .DEQ(slaveWrite_in_data$DEQ),
							       .CLR(slaveWrite_in_data$CLR),
							       .D_OUT(slaveWrite_in_data$D_OUT),
							       .FULL_N(slaveWrite_in_data$FULL_N),
							       .EMPTY_N(slaveWrite_in_data$EMPTY_N));

  // submodule slaveWrite_out
  FIFO2 #(.width(32'd8), .guarded(32'd1)) slaveWrite_out(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(slaveWrite_out$D_IN),
							 .ENQ(slaveWrite_out$ENQ),
							 .DEQ(slaveWrite_out$DEQ),
							 .CLR(slaveWrite_out$CLR),
							 .D_OUT(slaveWrite_out$D_OUT),
							 .FULL_N(slaveWrite_out$FULL_N),
							 .EMPTY_N(slaveWrite_out$EMPTY_N));

  // inlined wires
  always@(masterRead_in$D_OUT)
  begin
    case (masterRead_in$D_OUT[14:11])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd10, 4'd14, 4'd15:
	  masterRead_warcache$wget = masterRead_in$D_OUT[14:11];
      default: masterRead_warcache$wget = 4'd11;
    endcase
  end
  always@(masterWrite_in_addr$D_OUT)
  begin
    case (masterWrite_in_addr$D_OUT[14:11])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd6, 4'd7, 4'd14:
	  masterWrite_wawcache$wget = masterWrite_in_addr$D_OUT[14:11];
      default: masterWrite_wawcache$wget = 4'd15;
    endcase
  end
  assign masterRead_rinpkg$wget =
	     { M_AXI_rid, M_AXI_rdata, M_AXI_rresp, M_AXI_rlast } ;
  assign slaveRead_arinpkg$wget =
	     { S_AXI_arid,
	       S_AXI_araddr,
	       S_AXI_arlen,
	       S_AXI_arsize,
	       S_AXI_arburst,
	       S_AXI_arlock,
	       IF_S_AXI_arcache_EQ_0_39_OR_S_AXI_arcache_EQ_1_ETC___d354 } ;
  assign masterWrite_rinpkg$wget = { M_AXI_bid, M_AXI_bresp } ;
  assign slaveWrite_arinpkg_addr$wget =
	     { S_AXI_awid,
	       S_AXI_awaddr,
	       S_AXI_awlen,
	       S_AXI_awsize,
	       S_AXI_awburst,
	       S_AXI_awlock,
	       IF_S_AXI_awcache_EQ_0_67_OR_S_AXI_awcache_EQ_1_ETC___d382 } ;
  assign slaveWrite_arinpkg_data$wget =
	     { S_AXI_wdata, S_AXI_wstrb, S_AXI_wlast } ;

  // register masterRead_isRst_isInReset
  assign masterRead_isRst_isInReset$D_IN = 1'd0 ;
  assign masterRead_isRst_isInReset$EN = masterRead_isRst_isInReset ;

  // register masterWrite_isRst_isInReset
  assign masterWrite_isRst_isInReset$D_IN = 1'd0 ;
  assign masterWrite_isRst_isInReset$EN = masterWrite_isRst_isInReset ;

  // register slaveRead_isRst_isInReset
  assign slaveRead_isRst_isInReset$D_IN = 1'd0 ;
  assign slaveRead_isRst_isInReset$EN = slaveRead_isRst_isInReset ;

  // register slaveWrite_isRst_isInReset
  assign slaveWrite_isRst_isInReset$D_IN = 1'd0 ;
  assign slaveWrite_isRst_isInReset$EN = slaveWrite_isRst_isInReset ;

  // submodule masterRead_in
  assign masterRead_in$D_IN =
	     { slaveRead_in$D_OUT[67:62],
	       x_addr__h3127,
	       slaveRead_in$D_OUT[28:15],
	       CASE_slaveRead_inD_OUT_BITS_14_TO_11_0_slaveR_ETC__q5,
	       slaveRead_in$D_OUT[10:0] } ;
  assign masterRead_in$ENQ = slaveRead_in$EMPTY_N && masterRead_in$FULL_N ;
  assign masterRead_in$DEQ =
	     masterRead_in$EMPTY_N && !masterRead_isRst_isInReset &&
	     M_AXI_arready ;
  assign masterRead_in$CLR = 1'b0 ;

  // submodule masterRead_out
  assign masterRead_out$D_IN = 265'h0 ;
  assign masterRead_out$ENQ = 1'b0 ;
  assign masterRead_out$DEQ = 1'b0 ;
  assign masterRead_out$CLR = 1'b0 ;

  // submodule masterRead_out_1
  assign masterRead_out_1$D_IN = masterRead_rinpkg$wget ;
  assign masterRead_out_1$ENQ =
	     masterRead_out_1$FULL_N && !masterRead_isRst_isInReset &&
	     M_AXI_rvalid ;
  assign masterRead_out_1$DEQ =
	     masterRead_out_1$EMPTY_N && slaveRead_out$FULL_N ;
  assign masterRead_out_1$CLR = 1'b0 ;

  // submodule masterWrite_in_addr
  assign masterWrite_in_addr$D_IN =
	     { slaveWrite_in_addr$D_OUT[67:62],
	       x_addr__h9515,
	       slaveWrite_in_addr$D_OUT[28:15],
	       CASE_slaveWrite_in_addrD_OUT_BITS_14_TO_11_0__ETC__q6,
	       slaveWrite_in_addr$D_OUT[10:0] } ;
  assign masterWrite_in_addr$ENQ =
	     slaveWrite_in_addr$EMPTY_N && masterWrite_in_addr$FULL_N ;
  assign masterWrite_in_addr$DEQ =
	     masterWrite_in_addr$EMPTY_N && !masterWrite_isRst_isInReset &&
	     M_AXI_awready ;
  assign masterWrite_in_addr$CLR = 1'b0 ;

  // submodule masterWrite_in_data
  assign masterWrite_in_data$D_IN = slaveWrite_in_data$D_OUT ;
  assign masterWrite_in_data$ENQ =
	     slaveWrite_in_data$EMPTY_N && masterWrite_in_data$FULL_N ;
  assign masterWrite_in_data$DEQ =
	     masterWrite_in_data$EMPTY_N && !masterWrite_isRst_isInReset &&
	     M_AXI_wready ;
  assign masterWrite_in_data$CLR = 1'b0 ;

  // submodule masterWrite_out
  assign masterWrite_out$D_IN = masterWrite_rinpkg$wget ;
  assign masterWrite_out$ENQ =
	     masterWrite_out$FULL_N && !masterWrite_isRst_isInReset &&
	     M_AXI_bvalid ;
  assign masterWrite_out$DEQ =
	     masterWrite_out$EMPTY_N && slaveWrite_out$FULL_N ;
  assign masterWrite_out$CLR = 1'b0 ;

  // submodule slaveRead_in
  assign slaveRead_in$D_IN =
	     { slaveRead_arinpkg$wget[67:15],
	       CASE_slaveRead_arinpkgwget_BITS_14_TO_11_0_sl_ETC__q7,
	       slaveRead_arinpkg$wget[10:0] } ;
  assign slaveRead_in$ENQ =
	     slaveRead_in$FULL_N && !slaveRead_isRst_isInReset &&
	     S_AXI_arvalid ;
  assign slaveRead_in$DEQ = slaveRead_in$EMPTY_N && masterRead_in$FULL_N ;
  assign slaveRead_in$CLR = 1'b0 ;

  // submodule slaveRead_out
  assign slaveRead_out$D_IN = masterRead_out_1$D_OUT ;
  assign slaveRead_out$ENQ =
	     masterRead_out_1$EMPTY_N && slaveRead_out$FULL_N ;
  assign slaveRead_out$DEQ =
	     slaveRead_out$EMPTY_N && !slaveRead_isRst_isInReset &&
	     S_AXI_rready ;
  assign slaveRead_out$CLR = 1'b0 ;

  // submodule slaveWrite_in_addr
  assign slaveWrite_in_addr$D_IN =
	     { slaveWrite_arinpkg_addr$wget[67:15],
	       CASE_slaveWrite_arinpkg_addrwget_BITS_14_TO_1_ETC__q8,
	       slaveWrite_arinpkg_addr$wget[10:0] } ;
  assign slaveWrite_in_addr$ENQ =
	     slaveWrite_in_addr$FULL_N && !slaveWrite_isRst_isInReset &&
	     S_AXI_awvalid ;
  assign slaveWrite_in_addr$DEQ =
	     slaveWrite_in_addr$EMPTY_N && masterWrite_in_addr$FULL_N ;
  assign slaveWrite_in_addr$CLR = 1'b0 ;

  // submodule slaveWrite_in_data
  assign slaveWrite_in_data$D_IN = slaveWrite_arinpkg_data$wget ;
  assign slaveWrite_in_data$ENQ =
	     slaveWrite_in_data$FULL_N && !slaveWrite_isRst_isInReset &&
	     S_AXI_wvalid ;
  assign slaveWrite_in_data$DEQ =
	     slaveWrite_in_data$EMPTY_N && masterWrite_in_data$FULL_N ;
  assign slaveWrite_in_data$CLR = 1'b0 ;

  // submodule slaveWrite_out
  assign slaveWrite_out$D_IN = masterWrite_out$D_OUT ;
  assign slaveWrite_out$ENQ =
	     masterWrite_out$EMPTY_N && slaveWrite_out$FULL_N ;
  assign slaveWrite_out$DEQ =
	     slaveWrite_out$EMPTY_N && !slaveWrite_isRst_isInReset &&
	     S_AXI_bready ;
  assign slaveWrite_out$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_S_AXI_arcache_EQ_0_39_OR_S_AXI_arcache_EQ_1_ETC___d354 =
	     { CASE_S_AXI_arcache_0_S_AXI_arcache_1_S_AXI_arc_ETC__q1,
	       S_AXI_arprot,
	       S_AXI_arqos,
	       S_AXI_arregion } ;
  assign IF_S_AXI_awcache_EQ_0_67_OR_S_AXI_awcache_EQ_1_ETC___d382 =
	     { CASE_S_AXI_awcache_0_S_AXI_awcache_1_S_AXI_awc_ETC__q2,
	       S_AXI_awprot,
	       S_AXI_awqos,
	       S_AXI_awregion } ;
  assign _1_SL_offset_bits_5_MINUS_1___d86 = (33'd1 << offset_bits) - 33'd1 ;
  assign mask__h9528 =
	     { _1_SL_offset_bits_5_MINUS_1___d86[0],
	       _1_SL_offset_bits_5_MINUS_1___d86[1],
	       _1_SL_offset_bits_5_MINUS_1___d86[2],
	       _1_SL_offset_bits_5_MINUS_1___d86[3],
	       _1_SL_offset_bits_5_MINUS_1___d86[4],
	       _1_SL_offset_bits_5_MINUS_1___d86[5],
	       _1_SL_offset_bits_5_MINUS_1___d86[6],
	       _1_SL_offset_bits_5_MINUS_1___d86[7],
	       _1_SL_offset_bits_5_MINUS_1___d86[8],
	       _1_SL_offset_bits_5_MINUS_1___d86[9],
	       _1_SL_offset_bits_5_MINUS_1___d86[10],
	       _1_SL_offset_bits_5_MINUS_1___d86[11],
	       _1_SL_offset_bits_5_MINUS_1___d86[12],
	       _1_SL_offset_bits_5_MINUS_1___d86[13],
	       _1_SL_offset_bits_5_MINUS_1___d86[14],
	       _1_SL_offset_bits_5_MINUS_1___d86[15],
	       _1_SL_offset_bits_5_MINUS_1___d86[16],
	       _1_SL_offset_bits_5_MINUS_1___d86[17],
	       _1_SL_offset_bits_5_MINUS_1___d86[18],
	       _1_SL_offset_bits_5_MINUS_1___d86[19],
	       _1_SL_offset_bits_5_MINUS_1___d86[20],
	       _1_SL_offset_bits_5_MINUS_1___d86[21],
	       _1_SL_offset_bits_5_MINUS_1___d86[22],
	       _1_SL_offset_bits_5_MINUS_1___d86[23],
	       _1_SL_offset_bits_5_MINUS_1___d86[24],
	       _1_SL_offset_bits_5_MINUS_1___d86[25],
	       _1_SL_offset_bits_5_MINUS_1___d86[26],
	       _1_SL_offset_bits_5_MINUS_1___d86[27],
	       _1_SL_offset_bits_5_MINUS_1___d86[28],
	       _1_SL_offset_bits_5_MINUS_1___d86[29],
	       _1_SL_offset_bits_5_MINUS_1___d86[30],
	       _1_SL_offset_bits_5_MINUS_1___d86[31],
	       _1_SL_offset_bits_5_MINUS_1___d86[32] } ;
  assign offset_tmp__h9529 = offset & mask__h9528 ;
  assign x_addr__h3127 =
	     slaveRead_in$D_OUT[61:29] & y__h9541 | offset_tmp__h9529 ;
  assign x_addr__h9515 =
	     slaveWrite_in_addr$D_OUT[61:29] & y__h9541 | offset_tmp__h9529 ;
  assign y__h9541 =
	     { ~_1_SL_offset_bits_5_MINUS_1___d86[0],
	       ~_1_SL_offset_bits_5_MINUS_1___d86[1],
	       ~_1_SL_offset_bits_5_MINUS_1___d86[2],
	       ~_1_SL_offset_bits_5_MINUS_1___d86[3],
	       ~_1_SL_offset_bits_5_MINUS_1___d86[4],
	       ~_1_SL_offset_bits_5_MINUS_1___d86[5],
	       ~_1_SL_offset_bits_5_MINUS_1___d86[6],
	       ~_1_SL_offset_bits_5_MINUS_1___d86[7],
	       ~_1_SL_offset_bits_5_MINUS_1___d86[8],
	       ~_1_SL_offset_bits_5_MINUS_1___d86[9],
	       ~_1_SL_offset_bits_5_MINUS_1___d86[10],
	       ~_1_SL_offset_bits_5_MINUS_1___d86[11],
	       ~_1_SL_offset_bits_5_MINUS_1___d86[12],
	       ~_1_SL_offset_bits_5_MINUS_1___d86[13],
	       ~_1_SL_offset_bits_5_MINUS_1___d86[14],
	       ~_1_SL_offset_bits_5_MINUS_1___d86[15],
	       ~_1_SL_offset_bits_5_MINUS_1___d86[16],
	       ~_1_SL_offset_bits_5_MINUS_1___d86[17],
	       ~_1_SL_offset_bits_5_MINUS_1___d86[18],
	       ~_1_SL_offset_bits_5_MINUS_1___d86[19],
	       ~_1_SL_offset_bits_5_MINUS_1___d86[20],
	       ~_1_SL_offset_bits_5_MINUS_1___d86[21],
	       ~_1_SL_offset_bits_5_MINUS_1___d86[22],
	       ~_1_SL_offset_bits_5_MINUS_1___d86[23],
	       ~_1_SL_offset_bits_5_MINUS_1___d86[24],
	       ~_1_SL_offset_bits_5_MINUS_1___d86[25],
	       ~_1_SL_offset_bits_5_MINUS_1___d86[26],
	       ~_1_SL_offset_bits_5_MINUS_1___d86[27],
	       ~_1_SL_offset_bits_5_MINUS_1___d86[28],
	       ~_1_SL_offset_bits_5_MINUS_1___d86[29],
	       ~_1_SL_offset_bits_5_MINUS_1___d86[30],
	       ~_1_SL_offset_bits_5_MINUS_1___d86[31],
	       ~_1_SL_offset_bits_5_MINUS_1___d86[32] } ;
  always@(S_AXI_arcache)
  begin
    case (S_AXI_arcache)
      4'd0, 4'd1, 4'd2, 4'd3, 4'd10, 4'd14, 4'd15:
	  CASE_S_AXI_arcache_0_S_AXI_arcache_1_S_AXI_arc_ETC__q1 =
	      S_AXI_arcache;
      default: CASE_S_AXI_arcache_0_S_AXI_arcache_1_S_AXI_arc_ETC__q1 = 4'd11;
    endcase
  end
  always@(S_AXI_awcache)
  begin
    case (S_AXI_awcache)
      4'd0, 4'd1, 4'd2, 4'd3, 4'd6, 4'd7, 4'd14:
	  CASE_S_AXI_awcache_0_S_AXI_awcache_1_S_AXI_awc_ETC__q2 =
	      S_AXI_awcache;
      default: CASE_S_AXI_awcache_0_S_AXI_awcache_1_S_AXI_awc_ETC__q2 = 4'd15;
    endcase
  end
  always@(masterRead_warcache$wget)
  begin
    case (masterRead_warcache$wget)
      4'd1, 4'd2, 4'd3, 4'd10, 4'd14, 4'd15:
	  CASE_masterRead_warcachewget_1_masterRead_war_ETC__q3 =
	      masterRead_warcache$wget;
      default: CASE_masterRead_warcachewget_1_masterRead_war_ETC__q3 = 4'd11;
    endcase
  end
  always@(masterWrite_wawcache$wget)
  begin
    case (masterWrite_wawcache$wget)
      4'd1, 4'd2, 4'd3, 4'd6, 4'd7, 4'd14:
	  CASE_masterWrite_wawcachewget_1_masterWrite_w_ETC__q4 =
	      masterWrite_wawcache$wget;
      default: CASE_masterWrite_wawcachewget_1_masterWrite_w_ETC__q4 = 4'd15;
    endcase
  end
  always@(slaveRead_in$D_OUT)
  begin
    case (slaveRead_in$D_OUT[14:11])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd10, 4'd14, 4'd15:
	  CASE_slaveRead_inD_OUT_BITS_14_TO_11_0_slaveR_ETC__q5 =
	      slaveRead_in$D_OUT[14:11];
      default: CASE_slaveRead_inD_OUT_BITS_14_TO_11_0_slaveR_ETC__q5 = 4'd11;
    endcase
  end
  always@(slaveWrite_in_addr$D_OUT)
  begin
    case (slaveWrite_in_addr$D_OUT[14:11])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd6, 4'd7, 4'd14:
	  CASE_slaveWrite_in_addrD_OUT_BITS_14_TO_11_0__ETC__q6 =
	      slaveWrite_in_addr$D_OUT[14:11];
      default: CASE_slaveWrite_in_addrD_OUT_BITS_14_TO_11_0__ETC__q6 = 4'd15;
    endcase
  end
  always@(slaveRead_arinpkg$wget)
  begin
    case (slaveRead_arinpkg$wget[14:11])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd10, 4'd14, 4'd15:
	  CASE_slaveRead_arinpkgwget_BITS_14_TO_11_0_sl_ETC__q7 =
	      slaveRead_arinpkg$wget[14:11];
      default: CASE_slaveRead_arinpkgwget_BITS_14_TO_11_0_sl_ETC__q7 = 4'd11;
    endcase
  end
  always@(slaveWrite_arinpkg_addr$wget)
  begin
    case (slaveWrite_arinpkg_addr$wget[14:11])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd6, 4'd7, 4'd14:
	  CASE_slaveWrite_arinpkg_addrwget_BITS_14_TO_1_ETC__q8 =
	      slaveWrite_arinpkg_addr$wget[14:11];
      default: CASE_slaveWrite_arinpkg_addrwget_BITS_14_TO_1_ETC__q8 = 4'd15;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK or `BSV_RESET_EDGE RST_N)
  if (RST_N == `BSV_RESET_VALUE)
    begin
      masterRead_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      masterWrite_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      slaveRead_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      slaveWrite_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (masterRead_isRst_isInReset$EN)
	masterRead_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY
	    masterRead_isRst_isInReset$D_IN;
      if (masterWrite_isRst_isInReset$EN)
	masterWrite_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY
	    masterWrite_isRst_isInReset$D_IN;
      if (slaveRead_isRst_isInReset$EN)
	slaveRead_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY
	    slaveRead_isRst_isInReset$D_IN;
      if (slaveWrite_isRst_isInReset$EN)
	slaveWrite_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY
	    slaveWrite_isRst_isInReset$D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    masterRead_isRst_isInReset = 1'h0;
    masterWrite_isRst_isInReset = 1'h0;
    slaveRead_isRst_isInReset = 1'h0;
    slaveWrite_isRst_isInReset = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkAXIOffset

