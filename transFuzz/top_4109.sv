/* Generated by Yosys 0.37+29 (git sha1 3c3788ee2, clang 10.0.0-4ubuntu1 -fPIC -Os) */

module top(clkin_data, in_data, out_data);
  wire _00_;
  wire [3:0] _01_;
  reg [11:0] _02_;
  wire celloutsig_0_0z;
  wire [9:0] celloutsig_0_1z;
  wire celloutsig_0_4z;
  wire celloutsig_0_5z;
  wire celloutsig_0_7z;
  wire celloutsig_0_8z;
  wire celloutsig_1_0z;
  wire [3:0] celloutsig_1_15z;
  wire [4:0] celloutsig_1_18z;
  wire celloutsig_1_19z;
  wire [3:0] celloutsig_1_1z;
  wire celloutsig_1_2z;
  wire [3:0] celloutsig_1_3z;
  wire [2:0] celloutsig_1_4z;
  wire celloutsig_1_5z;
  input [95:0] clkin_data;
  wire [95:0] clkin_data;
  input [191:0] in_data;
  wire [191:0] in_data;
  output [191:0] out_data;
  wire [191:0] out_data;
  assign celloutsig_0_0z = in_data[31] ? in_data[4] : in_data[29];
  assign celloutsig_1_0z = in_data[137] ? in_data[158] : in_data[150];
  assign celloutsig_1_5z = celloutsig_1_0z ? celloutsig_1_0z : celloutsig_1_4z[0];
  assign celloutsig_1_19z = celloutsig_1_2z ? celloutsig_1_3z[3] : celloutsig_1_4z[1];
  assign celloutsig_0_5z = ~(in_data[7] | _00_);
  assign celloutsig_0_8z = ~((in_data[33] | celloutsig_0_5z) & (celloutsig_0_4z | celloutsig_0_0z));
  always_ff @(posedge clkin_data[32], posedge clkin_data[64])
    if (clkin_data[64]) _02_ <= 12'h000;
    else _02_ <= { in_data[135:128], celloutsig_1_1z };
  reg [3:0] _10_;
  always_ff @(posedge clkin_data[0], negedge celloutsig_1_19z)
    if (!celloutsig_1_19z) _10_ <= 4'h0;
    else _10_ <= in_data[12:9];
  assign { _01_[3:1], _00_ } = _10_;
  assign celloutsig_0_4z = { in_data[91:86], celloutsig_0_0z, _01_[3:1], _00_, celloutsig_0_0z } && { celloutsig_0_1z[7:0], _01_[3:1], _00_ };
  assign celloutsig_0_7z = { in_data[59:57], celloutsig_0_0z } < celloutsig_0_1z[5:2];
  assign celloutsig_1_2z = celloutsig_1_0z & ~(celloutsig_1_1z[2]);
  assign celloutsig_0_1z = { in_data[24:16], celloutsig_0_0z } * { in_data[54:46], celloutsig_0_0z };
  assign celloutsig_1_1z = celloutsig_1_0z ? in_data[115:112] : in_data[153:150];
  assign celloutsig_1_18z = { celloutsig_1_15z, celloutsig_1_5z } >>> { celloutsig_1_15z[2], celloutsig_1_3z };
  assign celloutsig_1_4z = celloutsig_1_1z[3:1] - { in_data[188:187], celloutsig_1_0z };
  assign celloutsig_1_3z = celloutsig_1_1z ^ { in_data[115], celloutsig_1_2z, celloutsig_1_0z, celloutsig_1_0z };
  assign celloutsig_1_15z = { celloutsig_1_2z, celloutsig_1_4z } ^ { _02_[7:6], celloutsig_1_2z, celloutsig_1_0z };
  assign _01_[0] = _00_;
  assign { out_data[132:128], out_data[96], out_data[32], out_data[0] } = { celloutsig_1_18z, celloutsig_1_19z, celloutsig_0_7z, celloutsig_0_8z };
endmodule
